
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022ae0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006674  08022cc0  08022cc0  00032cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029334  08029334  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08029334  08029334  00039334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802933c  0802933c  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0802933c  0802933c  0003933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0802934c  0802934c  0003934c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0802935c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c5c  2000033c  08029698  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f98  08029698  00040f98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006a08b  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bf3d  00000000  00000000  000aa3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004458  00000000  00000000  000b6338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004248  00000000  00000000  000ba790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d6dd  00000000  00000000  000be9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c6c4  00000000  00000000  000ec0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001140df  00000000  00000000  00118779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022c858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014b04  00000000  00000000  0022c8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08022c9c 	.word	0x08022c9c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08022c9c 	.word	0x08022c9c

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fe09 	bl	8001798 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fb4c 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fb1e 	bl	80012a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 fae4 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fafb 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f992 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ce4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ce8:	f000 fc8e 	bl	8001608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d013      	beq.n	8000d30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00b      	beq.n	8000d30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d18:	e000      	b.n	8000d1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f9      	beq.n	8000d1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
	return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_kill>:

int _kill(int pid, int sig)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d58:	f01e faa0 	bl	801f29c <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2216      	movs	r2, #22
 8000d60:	601a      	str	r2, [r3, #0]
	return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_exit>:

void _exit (int status)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d76:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffe7 	bl	8000d4e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d80:	e7fe      	b.n	8000d80 <_exit+0x12>

08000d82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e00a      	b.n	8000daa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d94:	f3af 8000 	nop.w
 8000d98:	4601      	mov	r1, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	60ba      	str	r2, [r7, #8]
 8000da0:	b2ca      	uxtb	r2, r1
 8000da2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	dbf0      	blt.n	8000d94 <_read+0x12>
	}

return len;
 8000db2:	687b      	ldr	r3, [r7, #4]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	e009      	b.n	8000de2 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	60ba      	str	r2, [r7, #8]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff8a 	bl	8000cf0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	dbf1      	blt.n	8000dce <_write+0x12>
	}
	return len;
 8000dea:	687b      	ldr	r3, [r7, #4]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <_close>:

int _close(int file)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	return -1;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e1c:	605a      	str	r2, [r3, #4]
	return 0;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_isatty>:

int _isatty(int file)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	return 1;
 8000e34:	2301      	movs	r3, #1
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
	return 0;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <_open>:

int _open(char *path, int flags, ...)
{
 8000e5c:	b40e      	push	{r1, r2, r3}
 8000e5e:	b480      	push	{r7}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	b003      	add	sp, #12
 8000e76:	4770      	bx	lr

08000e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <_sbrk+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <_sbrk+0x60>)
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <_sbrk+0x64>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <_sbrk+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea8:	f01e f9f8 	bl	801f29c <__errno>
 8000eac:	4603      	mov	r3, r0
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	e009      	b.n	8000ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <_sbrk+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20020000 	.word	0x20020000
 8000ed8:	00000400 	.word	0x00000400
 8000edc:	2000035c 	.word	0x2000035c
 8000ee0:	20000f98 	.word	0x20000f98

08000ee4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <SystemInit+0x20>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <SystemInit+0x20>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0e:	490e      	ldr	r1, [pc, #56]	; (8000f48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <LoopForever+0xe>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f24:	4c0b      	ldr	r4, [pc, #44]	; (8000f54 <LoopForever+0x16>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f32:	f7ff ffd7 	bl	8000ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f01e fdcf 	bl	801fad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3a:	f002 fced 	bl	8003918 <main>

08000f3e <LoopForever>:

LoopForever:
    b LoopForever
 8000f3e:	e7fe      	b.n	8000f3e <LoopForever>
  ldr   r0, =_estack
 8000f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f4c:	0802935c 	.word	0x0802935c
  ldr r2, =_sbss
 8000f50:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f54:	20000f98 	.word	0x20000f98

08000f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC1_2_IRQHandler>

08000f5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f95b 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f80e 	bl	8000f8c <HAL_InitTick>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	71fb      	strb	r3, [r7, #7]
 8000f7a:	e001      	b.n	8000f80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f7c:	f7ff fde6 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f80:	79fb      	ldrb	r3, [r7, #7]

}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_InitTick+0x68>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d022      	beq.n	8000fe6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_InitTick+0x6c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_InitTick+0x68>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f966 	bl	8001286 <HAL_SYSTICK_Config>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10f      	bne.n	8000fe0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	d809      	bhi.n	8000fda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	f04f 30ff 	mov.w	r0, #4294967295
 8000fce:	f000 f932 	bl	8001236 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_InitTick+0x70>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e007      	b.n	8000fea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e004      	b.n	8000fea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e001      	b.n	8000fea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	20000008 	.word	0x20000008

08001000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x1c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_IncTick+0x20>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4413      	add	r3, r2
 800100e:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x1c>)
 8001010:	6013      	str	r3, [r2, #0]
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	20000f84 	.word	0x20000f84
 8001020:	2000000c 	.word	0x2000000c

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000f84 	.word	0x20000f84

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d004      	beq.n	8001060 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_Delay+0x40>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001060:	bf00      	nop
 8001062:	f7ff ffdf 	bl	8001024 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8f7      	bhi.n	8001062 <HAL_Delay+0x26>
  {
  }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000000c 	.word	0x2000000c

08001080 <__NVIC_SetPriorityGrouping>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff29 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff40 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff90 	bl	8001174 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5f 	bl	8001120 <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff33 	bl	80010e4 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa4 	bl	80011dc <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012ae:	e15a      	b.n	8001566 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 814c 	beq.w	8001560 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d00b      	beq.n	80012e8 <HAL_GPIO_Init+0x48>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d007      	beq.n	80012e8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012dc:	2b11      	cmp	r3, #17
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b12      	cmp	r3, #18
 80012e6:	d130      	bne.n	800134a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131e:	2201      	movs	r2, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 0201 	and.w	r2, r3, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0xea>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b12      	cmp	r3, #18
 8001388:	d123      	bne.n	80013d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	6939      	ldr	r1, [r7, #16]
 80013ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0203 	and.w	r2, r3, #3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80a6 	beq.w	8001560 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001414:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 8001416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001418:	4a5a      	ldr	r2, [pc, #360]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6613      	str	r3, [r2, #96]	; 0x60
 8001420:	4b58      	ldr	r3, [pc, #352]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142c:	4a56      	ldr	r2, [pc, #344]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001456:	d01f      	beq.n	8001498 <HAL_GPIO_Init+0x1f8>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4c      	ldr	r2, [pc, #304]	; (800158c <HAL_GPIO_Init+0x2ec>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d019      	beq.n	8001494 <HAL_GPIO_Init+0x1f4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a4b      	ldr	r2, [pc, #300]	; (8001590 <HAL_GPIO_Init+0x2f0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d013      	beq.n	8001490 <HAL_GPIO_Init+0x1f0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a4a      	ldr	r2, [pc, #296]	; (8001594 <HAL_GPIO_Init+0x2f4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d00d      	beq.n	800148c <HAL_GPIO_Init+0x1ec>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a49      	ldr	r2, [pc, #292]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d007      	beq.n	8001488 <HAL_GPIO_Init+0x1e8>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a48      	ldr	r2, [pc, #288]	; (800159c <HAL_GPIO_Init+0x2fc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d101      	bne.n	8001484 <HAL_GPIO_Init+0x1e4>
 8001480:	2305      	movs	r3, #5
 8001482:	e00a      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001484:	2306      	movs	r3, #6
 8001486:	e008      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001488:	2304      	movs	r3, #4
 800148a:	e006      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 800148c:	2303      	movs	r3, #3
 800148e:	e004      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001490:	2302      	movs	r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001498:	2300      	movs	r3, #0
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	f002 0203 	and.w	r2, r2, #3
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	4093      	lsls	r3, r2
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014aa:	4937      	ldr	r1, [pc, #220]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014dc:	4a30      	ldr	r2, [pc, #192]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014e2:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001506:	4a26      	ldr	r2, [pc, #152]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_GPIO_Init+0x300>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800155a:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <HAL_GPIO_Init+0x300>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	f47f ae9d 	bne.w	80012b0 <HAL_GPIO_Init+0x10>
  }
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40021000 	.word	0x40021000
 8001588:	40010000 	.word	0x40010000
 800158c:	48000400 	.word	0x48000400
 8001590:	48000800 	.word	0x48000800
 8001594:	48000c00 	.word	0x48000c00
 8001598:	48001000 	.word	0x48001000
 800159c:	48001400 	.word	0x48001400
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	041a      	lsls	r2, r3, #16
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43d9      	mvns	r1, r3
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	400b      	ands	r3, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f806 	bl	8001638 <HAL_GPIO_EXTI_Callback>
  }
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d141      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166a:	d131      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001678:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001684:	4a41      	ldr	r2, [pc, #260]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800168c:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2232      	movs	r2, #50	; 0x32
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a2:	e002      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d102      	bne.n	80016be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f2      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d158      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e057      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d6:	4a2d      	ldr	r2, [pc, #180]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e0:	e04d      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e8:	d141      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f6:	d131      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fe:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001710:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2232      	movs	r2, #50	; 0x32
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172e:	e002      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d102      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f2      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d112      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e011      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800176c:	e007      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40007000 	.word	0x40007000
 8001790:	20000004 	.word	0x20000004
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a6:	6093      	str	r3, [r2, #8]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e308      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d075      	beq.n	80018c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d6:	4ba3      	ldr	r3, [pc, #652]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e0:	4ba0      	ldr	r3, [pc, #640]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3e>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_OscConfig+0x44>
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d10b      	bne.n	8001814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	4b99      	ldr	r3, [pc, #612]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d05b      	beq.n	80018c0 <HAL_RCC_OscConfig+0x108>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d157      	bne.n	80018c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e2e3      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d106      	bne.n	800182c <HAL_RCC_OscConfig+0x74>
 800181e:	4b91      	ldr	r3, [pc, #580]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a90      	ldr	r2, [pc, #576]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e01d      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0x98>
 8001836:	4b8b      	ldr	r3, [pc, #556]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a8a      	ldr	r2, [pc, #552]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a87      	ldr	r2, [pc, #540]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e00b      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 8001850:	4b84      	ldr	r3, [pc, #528]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a83      	ldr	r2, [pc, #524]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b81      	ldr	r3, [pc, #516]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a80      	ldr	r2, [pc, #512]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fbd8 	bl	8001024 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fbd4 	bl	8001024 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e2a8      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	4b76      	ldr	r3, [pc, #472]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0xc0>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fbc4 	bl	8001024 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fbc0 	bl	8001024 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e294      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b2:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0xe8>
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d075      	beq.n	80019ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d8:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x136>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_OscConfig+0x13c>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d11f      	bne.n	8001934 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x154>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e267      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	4952      	ldr	r1, [pc, #328]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001920:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <HAL_RCC_OscConfig+0x2b0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fb31 	bl	8000f8c <HAL_InitTick>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d043      	beq.n	80019b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e253      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a48      	ldr	r2, [pc, #288]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fb6c 	bl	8001024 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fb68 	bl	8001024 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e23c      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001962:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	061b      	lsls	r3, r3, #24
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
 8001982:	e01a      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001984:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a36      	ldr	r2, [pc, #216]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800198a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fb48 	bl	8001024 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff fb44 	bl	8001024 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e218      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1e0>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d03c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019de:	f7ff fb21 	bl	8001024 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff fb1d 	bl	8001024 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1f1      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0ef      	beq.n	80019e6 <HAL_RCC_OscConfig+0x22e>
 8001a06:	e01b      	b.n	8001a40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff fb04 	bl	8001024 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff fb00 	bl	8001024 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1d4      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ef      	bne.n	8001a20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80ab 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e005      	b.n	8001a6e <HAL_RCC_OscConfig+0x2b6>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4baf      	ldr	r3, [pc, #700]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	4aae      	ldr	r2, [pc, #696]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7e:	4bac      	ldr	r3, [pc, #688]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8e:	4ba9      	ldr	r3, [pc, #676]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a9a:	4ba6      	ldr	r3, [pc, #664]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4aa5      	ldr	r2, [pc, #660]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fabd 	bl	8001024 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7ff fab9 	bl	8001024 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e18d      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	4b9c      	ldr	r3, [pc, #624]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d108      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x32e>
 8001ad4:	4b96      	ldr	r3, [pc, #600]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a95      	ldr	r2, [pc, #596]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae4:	e024      	b.n	8001b30 <HAL_RCC_OscConfig+0x378>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d110      	bne.n	8001b10 <HAL_RCC_OscConfig+0x358>
 8001aee:	4b90      	ldr	r3, [pc, #576]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af4:	4a8e      	ldr	r2, [pc, #568]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afe:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	4a8a      	ldr	r2, [pc, #552]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0e:	e00f      	b.n	8001b30 <HAL_RCC_OscConfig+0x378>
 8001b10:	4b87      	ldr	r3, [pc, #540]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b16:	4a86      	ldr	r2, [pc, #536]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b20:	4b83      	ldr	r3, [pc, #524]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	4a82      	ldr	r2, [pc, #520]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d016      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff fa74 	bl	8001024 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff fa70 	bl	8001024 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e142      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b56:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0ed      	beq.n	8001b40 <HAL_RCC_OscConfig+0x388>
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff fa5d 	bl	8001024 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fa59 	bl	8001024 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e12b      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ed      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b65      	ldr	r3, [pc, #404]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	4a64      	ldr	r2, [pc, #400]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bb8:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bbe:	4a5c      	ldr	r2, [pc, #368]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fa2c 	bl	8001024 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd0:	f7ff fa28 	bl	8001024 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0fc      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001be2:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ef      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x418>
 8001bf0:	e01b      	b.n	8001c2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bf2:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf8:	4a4d      	ldr	r2, [pc, #308]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff fa0f 	bl	8001024 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0a:	f7ff fa0b 	bl	8001024 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0df      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c1c:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ef      	bne.n	8001c0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80d3 	beq.w	8001dda <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c34:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	f000 808d 	beq.w	8001d5c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d15a      	bne.n	8001d00 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a38      	ldr	r2, [pc, #224]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff f9e5 	bl	8001024 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff f9e1 	bl	8001024 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0b5      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_RCC_OscConfig+0x580>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6a11      	ldr	r1, [r2, #32]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c8c:	3a01      	subs	r2, #1
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c96:	0212      	lsls	r2, r2, #8
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c9e:	0852      	lsrs	r2, r2, #1
 8001ca0:	3a01      	subs	r2, #1
 8001ca2:	0552      	lsls	r2, r2, #21
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001caa:	0852      	lsrs	r2, r2, #1
 8001cac:	3a01      	subs	r2, #1
 8001cae:	0652      	lsls	r2, r2, #25
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cb6:	06d2      	lsls	r2, r2, #27
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	491d      	ldr	r1, [pc, #116]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f9a4 	bl	8001024 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f9a0 	bl	8001024 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e074      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x528>
 8001cfe:	e06c      	b.n	8001dda <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d1e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f97c 	bl	8001024 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2e:	e00e      	b.n	8001d4e <HAL_RCC_OscConfig+0x596>
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40007000 	.word	0x40007000
 8001d38:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f972 	bl	8001024 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e046      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_RCC_OscConfig+0x62c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x584>
 8001d5a:	e03e      	b.n	8001dda <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e039      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_OscConfig+0x62c>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d12c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	3b01      	subs	r3, #1
 8001d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d123      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d113      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e11e      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b91      	ldr	r3, [pc, #580]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b8e      	ldr	r3, [pc, #568]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 020f 	bic.w	r2, r3, #15
 8001e16:	498c      	ldr	r1, [pc, #560]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b8a      	ldr	r3, [pc, #552]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e106      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d073      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d129      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e44:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0f4      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e54:	f000 f99e 	bl	8002194 <RCC_GetSysClockFreqFromPLLSource>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4a7c      	ldr	r2, [pc, #496]	; (8002050 <HAL_RCC_ClockConfig+0x268>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d93f      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e62:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d033      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d12f      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e82:	4b72      	ldr	r3, [pc, #456]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e8a:	4a70      	ldr	r2, [pc, #448]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e024      	b.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0c6      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb0:	4b66      	ldr	r3, [pc, #408]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0be      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ec0:	f000 f8ce 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4a61      	ldr	r2, [pc, #388]	; (8002050 <HAL_RCC_ClockConfig+0x268>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d909      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed6:	4a5d      	ldr	r2, [pc, #372]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4957      	ldr	r1, [pc, #348]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef4:	f7ff f896 	bl	8001024 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff f892 	bl	8001024 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e095      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d023      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f5c:	4a3b      	ldr	r2, [pc, #236]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b80      	cmp	r3, #128	; 0x80
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4a32      	ldr	r2, [pc, #200]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d21d      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 020f 	bic.w	r2, r3, #15
 8001fa0:	4929      	ldr	r1, [pc, #164]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f83c 	bl	8001024 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7ff f838 	bl	8001024 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e03b      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1ed      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4917      	ldr	r1, [pc, #92]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490f      	ldr	r1, [pc, #60]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002012:	f000 f825 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490c      	ldr	r1, [pc, #48]	; (8002054 <HAL_RCC_ClockConfig+0x26c>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x270>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x274>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe ffa8 	bl	8000f8c <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	04c4b400 	.word	0x04c4b400
 8002054:	080261ac 	.word	0x080261ac
 8002058:	20000004 	.word	0x20000004
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d102      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e047      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d102      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	e03e      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d136      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3301      	adds	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020be:	68d2      	ldr	r2, [r2, #12]
 80020c0:	0a12      	lsrs	r2, r2, #8
 80020c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
      break;
 80020cc:	e00c      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	0a12      	lsrs	r2, r2, #8
 80020dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
      break;
 80020e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0e5b      	lsrs	r3, r3, #25
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	e001      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002108:	693b      	ldr	r3, [r7, #16]
}
 800210a:	4618      	mov	r0, r3
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	00f42400 	.word	0x00f42400
 8002120:	016e3600 	.word	0x016e3600

08002124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_GetHCLKFreq+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002140:	f7ff fff0 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4904      	ldr	r1, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	080261bc 	.word	0x080261bc

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800216c:	f7ff ffda 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4904      	ldr	r1, [pc, #16]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	080261bc 	.word	0x080261bc

08002194 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3301      	adds	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d10c      	bne.n	80021d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b8:	4a17      	ldr	r2, [pc, #92]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021c2:	68d2      	ldr	r2, [r2, #12]
 80021c4:	0a12      	lsrs	r2, r2, #8
 80021c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	617b      	str	r3, [r7, #20]
    break;
 80021d0:	e00c      	b.n	80021ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021dc:	68d2      	ldr	r2, [r2, #12]
 80021de:	0a12      	lsrs	r2, r2, #8
 80021e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    break;
 80021ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0e5b      	lsrs	r3, r3, #25
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	3301      	adds	r3, #1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002206:	687b      	ldr	r3, [r7, #4]
}
 8002208:	4618      	mov	r0, r3
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40021000 	.word	0x40021000
 8002218:	016e3600 	.word	0x016e3600
 800221c:	00f42400 	.word	0x00f42400

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002228:	2300      	movs	r3, #0
 800222a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800222c:	2300      	movs	r3, #0
 800222e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8098 	beq.w	800236e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800226a:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a39      	ldr	r2, [pc, #228]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002276:	f7fe fed5 	bl	8001024 <HAL_GetTick>
 800227a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800227c:	e009      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe fed1 	bl	8001024 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d902      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	74fb      	strb	r3, [r7, #19]
        break;
 8002290:	e005      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ef      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d159      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a4:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01e      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d019      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7fe fe91 	bl	8001024 <HAL_GetTick>
 8002302:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002304:	e00b      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fe8d 	bl	8001024 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d902      	bls.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	74fb      	strb	r3, [r7, #19]
            break;
 800231c:	e006      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ec      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002340:	4903      	ldr	r1, [pc, #12]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002348:	e008      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	74bb      	strb	r3, [r7, #18]
 800234e:	e005      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002350:	40021000 	.word	0x40021000
 8002354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235c:	7c7b      	ldrb	r3, [r7, #17]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4baf      	ldr	r3, [pc, #700]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	4aae      	ldr	r2, [pc, #696]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800237a:	4ba9      	ldr	r3, [pc, #676]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f023 0203 	bic.w	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	49a5      	ldr	r1, [pc, #660]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800239c:	4ba0      	ldr	r3, [pc, #640]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 020c 	bic.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	499d      	ldr	r1, [pc, #628]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023be:	4b98      	ldr	r3, [pc, #608]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4994      	ldr	r1, [pc, #592]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023e0:	4b8f      	ldr	r3, [pc, #572]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	498c      	ldr	r1, [pc, #560]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002402:	4b87      	ldr	r3, [pc, #540]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	4983      	ldr	r1, [pc, #524]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002424:	4b7e      	ldr	r3, [pc, #504]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	497b      	ldr	r1, [pc, #492]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4972      	ldr	r1, [pc, #456]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002468:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	496a      	ldr	r1, [pc, #424]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800248a:	4b65      	ldr	r3, [pc, #404]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	4961      	ldr	r1, [pc, #388]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024ac:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	4959      	ldr	r1, [pc, #356]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ce:	4b54      	ldr	r3, [pc, #336]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	4950      	ldr	r1, [pc, #320]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d015      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f0:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4948      	ldr	r1, [pc, #288]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800250e:	d105      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002510:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a42      	ldr	r2, [pc, #264]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002528:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	493a      	ldr	r1, [pc, #232]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002546:	d105      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a34      	ldr	r2, [pc, #208]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800254e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002552:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d015      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	492c      	ldr	r1, [pc, #176]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257e:	d105      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800258a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d015      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	491e      	ldr	r1, [pc, #120]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b6:	d105      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d015      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4910      	ldr	r1, [pc, #64]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ee:	d105      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d018      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4902      	ldr	r1, [pc, #8]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800261e:	e001      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002620:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800262c:	d105      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002654:	4917      	ldr	r1, [pc, #92]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002664:	d105      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	4909      	ldr	r1, [pc, #36]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800269c:	d105      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80026aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e042      	b.n	8002750 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d106      	bne.n	80026e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7fe fa59 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2224      	movs	r2, #36	; 0x24
 80026e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0201 	bic.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f82c 	bl	8002758 <UART_SetConfig>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e022      	b.n	8002750 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 faea 	bl	8002cec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fb71 	bl	8002e30 <UART_CheckIdleState>
 800274e:	4603      	mov	r3, r0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	4313      	orrs	r3, r2
 800277a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4bb1      	ldr	r3, [pc, #708]	; (8002a48 <UART_SetConfig+0x2f0>)
 8002784:	4013      	ands	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	69f9      	ldr	r1, [r7, #28]
 800278c:	430b      	orrs	r3, r1
 800278e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4aa6      	ldr	r2, [pc, #664]	; (8002a4c <UART_SetConfig+0x2f4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80027ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	69f9      	ldr	r1, [r7, #28]
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	f023 010f 	bic.w	r1, r3, #15
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a97      	ldr	r2, [pc, #604]	; (8002a50 <UART_SetConfig+0x2f8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d120      	bne.n	800283a <UART_SetConfig+0xe2>
 80027f8:	4b96      	ldr	r3, [pc, #600]	; (8002a54 <UART_SetConfig+0x2fc>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b03      	cmp	r3, #3
 8002804:	d816      	bhi.n	8002834 <UART_SetConfig+0xdc>
 8002806:	a201      	add	r2, pc, #4	; (adr r2, 800280c <UART_SetConfig+0xb4>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002829 	.word	0x08002829
 8002814:	08002823 	.word	0x08002823
 8002818:	0800282f 	.word	0x0800282f
 800281c:	2301      	movs	r3, #1
 800281e:	76fb      	strb	r3, [r7, #27]
 8002820:	e0e7      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002822:	2302      	movs	r3, #2
 8002824:	76fb      	strb	r3, [r7, #27]
 8002826:	e0e4      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002828:	2304      	movs	r3, #4
 800282a:	76fb      	strb	r3, [r7, #27]
 800282c:	e0e1      	b.n	80029f2 <UART_SetConfig+0x29a>
 800282e:	2308      	movs	r3, #8
 8002830:	76fb      	strb	r3, [r7, #27]
 8002832:	e0de      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002834:	2310      	movs	r3, #16
 8002836:	76fb      	strb	r3, [r7, #27]
 8002838:	e0db      	b.n	80029f2 <UART_SetConfig+0x29a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a86      	ldr	r2, [pc, #536]	; (8002a58 <UART_SetConfig+0x300>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d132      	bne.n	80028aa <UART_SetConfig+0x152>
 8002844:	4b83      	ldr	r3, [pc, #524]	; (8002a54 <UART_SetConfig+0x2fc>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d828      	bhi.n	80028a4 <UART_SetConfig+0x14c>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <UART_SetConfig+0x100>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	0800288d 	.word	0x0800288d
 800285c:	080028a5 	.word	0x080028a5
 8002860:	080028a5 	.word	0x080028a5
 8002864:	080028a5 	.word	0x080028a5
 8002868:	08002899 	.word	0x08002899
 800286c:	080028a5 	.word	0x080028a5
 8002870:	080028a5 	.word	0x080028a5
 8002874:	080028a5 	.word	0x080028a5
 8002878:	08002893 	.word	0x08002893
 800287c:	080028a5 	.word	0x080028a5
 8002880:	080028a5 	.word	0x080028a5
 8002884:	080028a5 	.word	0x080028a5
 8002888:	0800289f 	.word	0x0800289f
 800288c:	2300      	movs	r3, #0
 800288e:	76fb      	strb	r3, [r7, #27]
 8002890:	e0af      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002892:	2302      	movs	r3, #2
 8002894:	76fb      	strb	r3, [r7, #27]
 8002896:	e0ac      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002898:	2304      	movs	r3, #4
 800289a:	76fb      	strb	r3, [r7, #27]
 800289c:	e0a9      	b.n	80029f2 <UART_SetConfig+0x29a>
 800289e:	2308      	movs	r3, #8
 80028a0:	76fb      	strb	r3, [r7, #27]
 80028a2:	e0a6      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028a4:	2310      	movs	r3, #16
 80028a6:	76fb      	strb	r3, [r7, #27]
 80028a8:	e0a3      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6b      	ldr	r2, [pc, #428]	; (8002a5c <UART_SetConfig+0x304>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d120      	bne.n	80028f6 <UART_SetConfig+0x19e>
 80028b4:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <UART_SetConfig+0x2fc>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028be:	2b30      	cmp	r3, #48	; 0x30
 80028c0:	d013      	beq.n	80028ea <UART_SetConfig+0x192>
 80028c2:	2b30      	cmp	r3, #48	; 0x30
 80028c4:	d814      	bhi.n	80028f0 <UART_SetConfig+0x198>
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d009      	beq.n	80028de <UART_SetConfig+0x186>
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d810      	bhi.n	80028f0 <UART_SetConfig+0x198>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <UART_SetConfig+0x180>
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d006      	beq.n	80028e4 <UART_SetConfig+0x18c>
 80028d6:	e00b      	b.n	80028f0 <UART_SetConfig+0x198>
 80028d8:	2300      	movs	r3, #0
 80028da:	76fb      	strb	r3, [r7, #27]
 80028dc:	e089      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028de:	2302      	movs	r3, #2
 80028e0:	76fb      	strb	r3, [r7, #27]
 80028e2:	e086      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028e4:	2304      	movs	r3, #4
 80028e6:	76fb      	strb	r3, [r7, #27]
 80028e8:	e083      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028ea:	2308      	movs	r3, #8
 80028ec:	76fb      	strb	r3, [r7, #27]
 80028ee:	e080      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028f0:	2310      	movs	r3, #16
 80028f2:	76fb      	strb	r3, [r7, #27]
 80028f4:	e07d      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a59      	ldr	r2, [pc, #356]	; (8002a60 <UART_SetConfig+0x308>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d120      	bne.n	8002942 <UART_SetConfig+0x1ea>
 8002900:	4b54      	ldr	r3, [pc, #336]	; (8002a54 <UART_SetConfig+0x2fc>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800290a:	2bc0      	cmp	r3, #192	; 0xc0
 800290c:	d013      	beq.n	8002936 <UART_SetConfig+0x1de>
 800290e:	2bc0      	cmp	r3, #192	; 0xc0
 8002910:	d814      	bhi.n	800293c <UART_SetConfig+0x1e4>
 8002912:	2b80      	cmp	r3, #128	; 0x80
 8002914:	d009      	beq.n	800292a <UART_SetConfig+0x1d2>
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d810      	bhi.n	800293c <UART_SetConfig+0x1e4>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <UART_SetConfig+0x1cc>
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d006      	beq.n	8002930 <UART_SetConfig+0x1d8>
 8002922:	e00b      	b.n	800293c <UART_SetConfig+0x1e4>
 8002924:	2300      	movs	r3, #0
 8002926:	76fb      	strb	r3, [r7, #27]
 8002928:	e063      	b.n	80029f2 <UART_SetConfig+0x29a>
 800292a:	2302      	movs	r3, #2
 800292c:	76fb      	strb	r3, [r7, #27]
 800292e:	e060      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002930:	2304      	movs	r3, #4
 8002932:	76fb      	strb	r3, [r7, #27]
 8002934:	e05d      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002936:	2308      	movs	r3, #8
 8002938:	76fb      	strb	r3, [r7, #27]
 800293a:	e05a      	b.n	80029f2 <UART_SetConfig+0x29a>
 800293c:	2310      	movs	r3, #16
 800293e:	76fb      	strb	r3, [r7, #27]
 8002940:	e057      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a47      	ldr	r2, [pc, #284]	; (8002a64 <UART_SetConfig+0x30c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d125      	bne.n	8002998 <UART_SetConfig+0x240>
 800294c:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <UART_SetConfig+0x2fc>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800295a:	d017      	beq.n	800298c <UART_SetConfig+0x234>
 800295c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002960:	d817      	bhi.n	8002992 <UART_SetConfig+0x23a>
 8002962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002966:	d00b      	beq.n	8002980 <UART_SetConfig+0x228>
 8002968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800296c:	d811      	bhi.n	8002992 <UART_SetConfig+0x23a>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <UART_SetConfig+0x222>
 8002972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002976:	d006      	beq.n	8002986 <UART_SetConfig+0x22e>
 8002978:	e00b      	b.n	8002992 <UART_SetConfig+0x23a>
 800297a:	2300      	movs	r3, #0
 800297c:	76fb      	strb	r3, [r7, #27]
 800297e:	e038      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002980:	2302      	movs	r3, #2
 8002982:	76fb      	strb	r3, [r7, #27]
 8002984:	e035      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002986:	2304      	movs	r3, #4
 8002988:	76fb      	strb	r3, [r7, #27]
 800298a:	e032      	b.n	80029f2 <UART_SetConfig+0x29a>
 800298c:	2308      	movs	r3, #8
 800298e:	76fb      	strb	r3, [r7, #27]
 8002990:	e02f      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002992:	2310      	movs	r3, #16
 8002994:	76fb      	strb	r3, [r7, #27]
 8002996:	e02c      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <UART_SetConfig+0x2f4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d125      	bne.n	80029ee <UART_SetConfig+0x296>
 80029a2:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <UART_SetConfig+0x2fc>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029b0:	d017      	beq.n	80029e2 <UART_SetConfig+0x28a>
 80029b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029b6:	d817      	bhi.n	80029e8 <UART_SetConfig+0x290>
 80029b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029bc:	d00b      	beq.n	80029d6 <UART_SetConfig+0x27e>
 80029be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c2:	d811      	bhi.n	80029e8 <UART_SetConfig+0x290>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <UART_SetConfig+0x278>
 80029c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029cc:	d006      	beq.n	80029dc <UART_SetConfig+0x284>
 80029ce:	e00b      	b.n	80029e8 <UART_SetConfig+0x290>
 80029d0:	2300      	movs	r3, #0
 80029d2:	76fb      	strb	r3, [r7, #27]
 80029d4:	e00d      	b.n	80029f2 <UART_SetConfig+0x29a>
 80029d6:	2302      	movs	r3, #2
 80029d8:	76fb      	strb	r3, [r7, #27]
 80029da:	e00a      	b.n	80029f2 <UART_SetConfig+0x29a>
 80029dc:	2304      	movs	r3, #4
 80029de:	76fb      	strb	r3, [r7, #27]
 80029e0:	e007      	b.n	80029f2 <UART_SetConfig+0x29a>
 80029e2:	2308      	movs	r3, #8
 80029e4:	76fb      	strb	r3, [r7, #27]
 80029e6:	e004      	b.n	80029f2 <UART_SetConfig+0x29a>
 80029e8:	2310      	movs	r3, #16
 80029ea:	76fb      	strb	r3, [r7, #27]
 80029ec:	e001      	b.n	80029f2 <UART_SetConfig+0x29a>
 80029ee:	2310      	movs	r3, #16
 80029f0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <UART_SetConfig+0x2f4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	f040 809f 	bne.w	8002b3c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029fe:	7efb      	ldrb	r3, [r7, #27]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d837      	bhi.n	8002a74 <UART_SetConfig+0x31c>
 8002a04:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <UART_SetConfig+0x2b4>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a31 	.word	0x08002a31
 8002a10:	08002a75 	.word	0x08002a75
 8002a14:	08002a39 	.word	0x08002a39
 8002a18:	08002a75 	.word	0x08002a75
 8002a1c:	08002a3f 	.word	0x08002a3f
 8002a20:	08002a75 	.word	0x08002a75
 8002a24:	08002a75 	.word	0x08002a75
 8002a28:	08002a75 	.word	0x08002a75
 8002a2c:	08002a6d 	.word	0x08002a6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a30:	f7ff fb84 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002a34:	6178      	str	r0, [r7, #20]
        break;
 8002a36:	e022      	b.n	8002a7e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <UART_SetConfig+0x310>)
 8002a3a:	617b      	str	r3, [r7, #20]
        break;
 8002a3c:	e01f      	b.n	8002a7e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a3e:	f7ff fb0f 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002a42:	6178      	str	r0, [r7, #20]
        break;
 8002a44:	e01b      	b.n	8002a7e <UART_SetConfig+0x326>
 8002a46:	bf00      	nop
 8002a48:	cfff69f3 	.word	0xcfff69f3
 8002a4c:	40008000 	.word	0x40008000
 8002a50:	40013800 	.word	0x40013800
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40004400 	.word	0x40004400
 8002a5c:	40004800 	.word	0x40004800
 8002a60:	40004c00 	.word	0x40004c00
 8002a64:	40005000 	.word	0x40005000
 8002a68:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a70:	617b      	str	r3, [r7, #20]
        break;
 8002a72:	e004      	b.n	8002a7e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	76bb      	strb	r3, [r7, #26]
        break;
 8002a7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 811b 	beq.w	8002cbc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	4a96      	ldr	r2, [pc, #600]	; (8002ce4 <UART_SetConfig+0x58c>)
 8002a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a90:	461a      	mov	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a98:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d305      	bcc.n	8002ab6 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d902      	bls.n	8002abc <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	76bb      	strb	r3, [r7, #26]
 8002aba:	e0ff      	b.n	8002cbc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	4a86      	ldr	r2, [pc, #536]	; (8002ce4 <UART_SetConfig+0x58c>)
 8002aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	f7fd febe 	bl	8000854 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	020b      	lsls	r3, r1, #8
 8002aea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002aee:	0202      	lsls	r2, r0, #8
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	6849      	ldr	r1, [r1, #4]
 8002af4:	0849      	lsrs	r1, r1, #1
 8002af6:	4608      	mov	r0, r1
 8002af8:	f04f 0100 	mov.w	r1, #0
 8002afc:	1814      	adds	r4, r2, r0
 8002afe:	eb43 0501 	adc.w	r5, r3, r1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fea0 	bl	8000854 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4613      	mov	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b22:	d308      	bcc.n	8002b36 <UART_SetConfig+0x3de>
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b2a:	d204      	bcs.n	8002b36 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	60da      	str	r2, [r3, #12]
 8002b34:	e0c2      	b.n	8002cbc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	76bb      	strb	r3, [r7, #26]
 8002b3a:	e0bf      	b.n	8002cbc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b44:	d165      	bne.n	8002c12 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8002b46:	7efb      	ldrb	r3, [r7, #27]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d828      	bhi.n	8002b9e <UART_SetConfig+0x446>
 8002b4c:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <UART_SetConfig+0x3fc>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002b79 	.word	0x08002b79
 8002b58:	08002b81 	.word	0x08002b81
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002b9f 	.word	0x08002b9f
 8002b64:	08002b8f 	.word	0x08002b8f
 8002b68:	08002b9f 	.word	0x08002b9f
 8002b6c:	08002b9f 	.word	0x08002b9f
 8002b70:	08002b9f 	.word	0x08002b9f
 8002b74:	08002b97 	.word	0x08002b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b78:	f7ff fae0 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002b7c:	6178      	str	r0, [r7, #20]
        break;
 8002b7e:	e013      	b.n	8002ba8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b80:	f7ff faf2 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8002b84:	6178      	str	r0, [r7, #20]
        break;
 8002b86:	e00f      	b.n	8002ba8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b88:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <UART_SetConfig+0x590>)
 8002b8a:	617b      	str	r3, [r7, #20]
        break;
 8002b8c:	e00c      	b.n	8002ba8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b8e:	f7ff fa67 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002b92:	6178      	str	r0, [r7, #20]
        break;
 8002b94:	e008      	b.n	8002ba8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b9a:	617b      	str	r3, [r7, #20]
        break;
 8002b9c:	e004      	b.n	8002ba8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	76bb      	strb	r3, [r7, #26]
        break;
 8002ba6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8086 	beq.w	8002cbc <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	4a4b      	ldr	r2, [pc, #300]	; (8002ce4 <UART_SetConfig+0x58c>)
 8002bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bc2:	005a      	lsls	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	441a      	add	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b0f      	cmp	r3, #15
 8002bdc:	d916      	bls.n	8002c0c <UART_SetConfig+0x4b4>
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d212      	bcs.n	8002c0c <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f023 030f 	bic.w	r3, r3, #15
 8002bee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	89fb      	ldrh	r3, [r7, #14]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	89fa      	ldrh	r2, [r7, #14]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	e057      	b.n	8002cbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	76bb      	strb	r3, [r7, #26]
 8002c10:	e054      	b.n	8002cbc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c12:	7efb      	ldrb	r3, [r7, #27]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d828      	bhi.n	8002c6a <UART_SetConfig+0x512>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <UART_SetConfig+0x4c8>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c45 	.word	0x08002c45
 8002c24:	08002c4d 	.word	0x08002c4d
 8002c28:	08002c55 	.word	0x08002c55
 8002c2c:	08002c6b 	.word	0x08002c6b
 8002c30:	08002c5b 	.word	0x08002c5b
 8002c34:	08002c6b 	.word	0x08002c6b
 8002c38:	08002c6b 	.word	0x08002c6b
 8002c3c:	08002c6b 	.word	0x08002c6b
 8002c40:	08002c63 	.word	0x08002c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c44:	f7ff fa7a 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002c48:	6178      	str	r0, [r7, #20]
        break;
 8002c4a:	e013      	b.n	8002c74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c4c:	f7ff fa8c 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8002c50:	6178      	str	r0, [r7, #20]
        break;
 8002c52:	e00f      	b.n	8002c74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <UART_SetConfig+0x590>)
 8002c56:	617b      	str	r3, [r7, #20]
        break;
 8002c58:	e00c      	b.n	8002c74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c5a:	f7ff fa01 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002c5e:	6178      	str	r0, [r7, #20]
        break;
 8002c60:	e008      	b.n	8002c74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c66:	617b      	str	r3, [r7, #20]
        break;
 8002c68:	e004      	b.n	8002c74 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	76bb      	strb	r3, [r7, #26]
        break;
 8002c72:	bf00      	nop
    }

    if (pclk != 0U)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d020      	beq.n	8002cbc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <UART_SetConfig+0x58c>)
 8002c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c84:	461a      	mov	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	fbb3 f2f2 	udiv	r2, r3, r2
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	085b      	lsrs	r3, r3, #1
 8002c92:	441a      	add	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	d908      	bls.n	8002cb8 <UART_SetConfig+0x560>
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d204      	bcs.n	8002cb8 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	e001      	b.n	8002cbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002cd8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	080261c4 	.word	0x080261c4
 8002ce8:	00f42400 	.word	0x00f42400

08002cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01a      	beq.n	8002e02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dea:	d10a      	bne.n	8002e02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
  }
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e40:	f7fe f8f0 	bl	8001024 <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d10e      	bne.n	8002e72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f82f 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e025      	b.n	8002ebe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d10e      	bne.n	8002e9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f819 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e00f      	b.n	8002ebe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed6:	e062      	b.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	d05e      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee0:	f7fe f8a0 	bl	8001024 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d302      	bcc.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11d      	bne.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e045      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d02e      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4e:	d126      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f68:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e00f      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d08d      	beq.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_UARTEx_DisableFifoMode+0x16>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e027      	b.n	800302c <HAL_UARTEx_DisableFifoMode+0x66>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800300a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800304c:	2302      	movs	r3, #2
 800304e:	e02d      	b.n	80030ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2224      	movs	r2, #36	; 0x24
 800305c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f84f 	bl	8003130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e02d      	b.n	8003128 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	; 0x24
 80030d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f811 	bl	8003130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003150:	e031      	b.n	80031b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003152:	2308      	movs	r3, #8
 8003154:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003156:	2308      	movs	r3, #8
 8003158:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	0e5b      	lsrs	r3, r3, #25
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	0f5b      	lsrs	r3, r3, #29
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800317a:	7bbb      	ldrb	r3, [r7, #14]
 800317c:	7b3a      	ldrb	r2, [r7, #12]
 800317e:	4911      	ldr	r1, [pc, #68]	; (80031c4 <UARTEx_SetNbDataToProcess+0x94>)
 8003180:	5c8a      	ldrb	r2, [r1, r2]
 8003182:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003186:	7b3a      	ldrb	r2, [r7, #12]
 8003188:	490f      	ldr	r1, [pc, #60]	; (80031c8 <UARTEx_SetNbDataToProcess+0x98>)
 800318a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800318c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	7b7a      	ldrb	r2, [r7, #13]
 800319c:	4909      	ldr	r1, [pc, #36]	; (80031c4 <UARTEx_SetNbDataToProcess+0x94>)
 800319e:	5c8a      	ldrb	r2, [r1, r2]
 80031a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80031a4:	7b7a      	ldrb	r2, [r7, #13]
 80031a6:	4908      	ldr	r1, [pc, #32]	; (80031c8 <UARTEx_SetNbDataToProcess+0x98>)
 80031a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	080261dc 	.word	0x080261dc
 80031c8:	080261e4 	.word	0x080261e4

080031cc <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01d      	beq.n	800321c <ESP_Init+0x50>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01a      	beq.n	800321c <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d017      	beq.n	800321c <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 80031ec:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <ESP_Init+0x5c>)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 80031f2:	4a0d      	ldr	r2, [pc, #52]	; (8003228 <ESP_Init+0x5c>)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 80031f8:	4a0b      	ldr	r2, [pc, #44]	; (8003228 <ESP_Init+0x5c>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 80031fe:	6838      	ldr	r0, [r7, #0]
 8003200:	f000 fa9c 	bl	800373c <ringBuffer_init>
 8003204:	4603      	mov	r3, r0
 8003206:	4a09      	ldr	r2, [pc, #36]	; (800322c <ESP_Init+0x60>)
 8003208:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <ESP_Init+0x60>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <ESP_Init+0x4a>
			return 1;
 8003212:	2301      	movs	r3, #1
 8003214:	e004      	b.n	8003220 <ESP_Init+0x54>
		else
			return -1;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e001      	b.n	8003220 <ESP_Init+0x54>
	}
	else
	{
		return -1;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000360 	.word	0x20000360
 800322c:	2000049c 	.word	0x2000049c

08003230 <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <Send_AT_Command+0x18>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000360 	.word	0x20000360

0800324c <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 800324c:	b598      	push	{r3, r4, r7, lr}
 800324e:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <ESP_UART_ReceiveHandler+0x1c>)
 8003252:	681c      	ldr	r4, [r3, #0]
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <ESP_UART_ReceiveHandler+0x20>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4798      	blx	r3
 800325a:	4603      	mov	r3, r0
 800325c:	4619      	mov	r1, r3
 800325e:	4620      	mov	r0, r4
 8003260:	f000 faad 	bl	80037be <ringBuffer_push>
}
 8003264:	bf00      	nop
 8003266:	bd98      	pop	{r3, r4, r7, pc}
 8003268:	2000049c 	.word	0x2000049c
 800326c:	20000360 	.word	0x20000360

08003270 <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <Read_Response+0x20>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fb27 	bl	80038d2 <ringBuffer_lookFor>
 8003284:	4603      	mov	r3, r0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	2000049c 	.word	0x2000049c

08003294 <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <Wait_Response+0x74>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d108      	bne.n	80032b8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <Wait_Response+0x78>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	4798      	blx	r3
 80032ac:	4603      	mov	r3, r0
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <Wait_Response+0x7c>)
 80032b0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <Wait_Response+0x74>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <Wait_Response+0x80>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fb07 	bl	80038d2 <ringBuffer_lookFor>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <Wait_Response+0x46>
	{
		firstCall = 0;
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <Wait_Response+0x74>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
		time = 0;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <Wait_Response+0x7c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
		return FOUND;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e012      	b.n	8003300 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <Wait_Response+0x78>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4798      	blx	r3
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <Wait_Response+0x7c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d807      	bhi.n	80032fe <Wait_Response+0x6a>
	{
		firstCall = 0;
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <Wait_Response+0x74>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
		time = 0;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <Wait_Response+0x7c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 80032fe:	2304      	movs	r3, #4
	}

}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	2000036c 	.word	0x2000036c
 800330c:	20000360 	.word	0x20000360
 8003310:	20000370 	.word	0x20000370
 8003314:	2000049c 	.word	0x2000049c

08003318 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b098      	sub	sp, #96	; 0x60
 800331c:	af02      	add	r7, sp, #8
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003322:	4a16      	ldr	r2, [pc, #88]	; (800337c <Connect_Wifi+0x64>)
 8003324:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003328:	ca07      	ldmia	r2, {r0, r1, r2}
 800332a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 800332e:	4a14      	ldr	r2, [pc, #80]	; (8003380 <Connect_Wifi+0x68>)
 8003330:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003334:	ca07      	ldmia	r2, {r0, r1, r2}
 8003336:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 800333a:	2304      	movs	r3, #4
 800333c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003340:	f107 0008 	add.w	r0, r7, #8
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <Connect_Wifi+0x6c>)
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <Connect_Wifi+0x70>)
 800334e:	f01c ff37 	bl	80201c0 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003358:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800335c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003360:	2203      	movs	r2, #3
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f82e 	bl	80033c4 <Command_Process>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 800336e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003372:	4618      	mov	r0, r3
 8003374:	3758      	adds	r7, #88	; 0x58
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	08022d1c 	.word	0x08022d1c
 8003380:	08022d28 	.word	0x08022d28
 8003384:	08022d00 	.word	0x08022d00
 8003388:	08022d0c 	.word	0x08022d0c

0800338c <Disconnect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about disconnect operation.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_Wifi(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <Disconnect_Wifi+0x30>)
 8003394:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <Disconnect_Wifi+0x34>)
 8003398:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 800339a:	2304      	movs	r3, #4
 800339c:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 800339e:	1d39      	adds	r1, r7, #4
 80033a0:	f107 0308 	add.w	r3, r7, #8
 80033a4:	2201      	movs	r2, #1
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f80c 	bl	80033c4 <Command_Process>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]

	return response_state;
 80033b0:	7bfb      	ldrb	r3, [r7, #15]

}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	08022cd0 	.word	0x08022cd0
 80033c0:	08022ce0 	.word	0x08022ce0

080033c4 <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d004      	beq.n	80033e2 <Command_Process+0x1e>
 80033d8:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <Command_Process+0x104>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	79fa      	ldrb	r2, [r7, #7]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d806      	bhi.n	80033f0 <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 80033e2:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <Command_Process+0x108>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fa3d 	bl	8003866 <ringBuffer_flush>
		return STATUS_ERROR;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e067      	b.n	80034c0 <Command_Process+0xfc>
	}
	else
	{
		if(commandFlag)
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <Command_Process+0x10c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <Command_Process+0x104>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4413      	add	r3, r2
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff13 	bl	8003230 <Send_AT_Command>
			commandFlag = 0;
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <Command_Process+0x10c>)
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], TIMEOUT);
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <Command_Process+0x104>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4413      	add	r3, r2
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff37 	bl	8003294 <Wait_Response>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 800342a:	482a      	ldr	r0, [pc, #168]	; (80034d4 <Command_Process+0x110>)
 800342c:	f7ff ff20 	bl	8003270 <Read_Response>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <Command_Process+0x10c>)
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 800343c:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <Command_Process+0x104>)
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <Command_Process+0x108>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fa0d 	bl	8003866 <ringBuffer_flush>
				return STATUS_ERROR;
 800344c:	2303      	movs	r3, #3
 800344e:	e037      	b.n	80034c0 <Command_Process+0xfc>
			}
			else if(response == IDLE)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b04      	cmp	r3, #4
 8003454:	d101      	bne.n	800345a <Command_Process+0x96>
			{
				return response;
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	e032      	b.n	80034c0 <Command_Process+0xfc>
			}
			else if(response == FOUND)
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d123      	bne.n	80034a8 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <Command_Process+0x104>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	3b01      	subs	r3, #1
 800346a:	429a      	cmp	r2, r3
 800346c:	d10c      	bne.n	8003488 <Command_Process+0xc4>
				{
					commandFlag = 1;
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <Command_Process+0x10c>)
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003474:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <Command_Process+0x104>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 800347a:	4b14      	ldr	r3, [pc, #80]	; (80034cc <Command_Process+0x108>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f9f1 	bl	8003866 <ringBuffer_flush>
					return STATUS_OK;
 8003484:	2302      	movs	r3, #2
 8003486:	e01b      	b.n	80034c0 <Command_Process+0xfc>
				}
				else
				{
					commandFlag = 1;
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <Command_Process+0x10c>)
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <Command_Process+0x104>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	b2da      	uxtb	r2, r3
 8003496:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <Command_Process+0x104>)
 8003498:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <Command_Process+0x108>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f9e1 	bl	8003866 <ringBuffer_flush>
					return IDLE;
 80034a4:	2304      	movs	r3, #4
 80034a6:	e00b      	b.n	80034c0 <Command_Process+0xfc>
				}

			}
			else
			{
				commandFlag = 1;
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <Command_Process+0x10c>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <Command_Process+0x104>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <Command_Process+0x108>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 f9d4 	bl	8003866 <ringBuffer_flush>
				return response;
 80034be:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000374 	.word	0x20000374
 80034cc:	2000049c 	.word	0x2000049c
 80034d0:	20000010 	.word	0x20000010
 80034d4:	08022d34 	.word	0x08022d34

080034d8 <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(char* ip, char* port)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0a2      	sub	sp, #136	; 0x88
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 80034e2:	2304      	movs	r3, #4
 80034e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	char *command_buffer[2] =
 80034e8:	4a15      	ldr	r2, [pc, #84]	; (8003540 <Connect_TCP_Server+0x68>)
 80034ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034f2:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[2] =
 80034f6:	4a13      	ldr	r2, [pc, #76]	; (8003544 <Connect_TCP_Server+0x6c>)
 80034f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003500:	e883 0003 	stmia.w	r3, {r0, r1}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003504:	f107 0008 	add.w	r0, r7, #8
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <Connect_TCP_Server+0x70>)
 8003510:	490e      	ldr	r1, [pc, #56]	; (800354c <Connect_TCP_Server+0x74>)
 8003512:	f01c fe55 	bl	80201c0 <siprintf>

	command_buffer[1] = wifi_buffer;
 8003516:	f107 0308 	add.w	r3, r7, #8
 800351a:	67bb      	str	r3, [r7, #120]	; 0x78

	response_state = Command_Process(command_buffer, response_buffer, 2);
 800351c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003520:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003524:	2202      	movs	r2, #2
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff4c 	bl	80033c4 <Command_Process>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	return response_state;
 8003532:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003536:	4618      	mov	r0, r3
 8003538:	3780      	adds	r7, #128	; 0x80
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	08022d5c 	.word	0x08022d5c
 8003544:	08022d64 	.word	0x08022d64
 8003548:	08022d3c 	.word	0x08022d3c
 800354c:	08022d50 	.word	0x08022d50

08003550 <Disconnect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about disconnection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_TCP_Server(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003556:	2304      	movs	r3, #4
 8003558:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 800355a:	4b09      	ldr	r3, [pc, #36]	; (8003580 <Disconnect_TCP_Server+0x30>)
 800355c:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <Disconnect_TCP_Server+0x34>)
 8003560:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003562:	1d39      	adds	r1, r7, #4
 8003564:	f107 0308 	add.w	r3, r7, #8
 8003568:	2201      	movs	r2, #1
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff2a 	bl	80033c4 <Command_Process>
 8003570:	4603      	mov	r3, r0
 8003572:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003574:	7bfb      	ldrb	r3, [r7, #15]

}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	08022d6c 	.word	0x08022d6c
 8003584:	08022ce0 	.word	0x08022ce0

08003588 <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b096      	sub	sp, #88	; 0x58
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8003590:	2303      	movs	r3, #3
 8003592:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 8003596:	2300      	movs	r3, #0
 8003598:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fc fe4e 	bl	800023c <strlen>
 80035a0:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 80035a2:	f107 001c 	add.w	r0, r7, #28
 80035a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a8:	4a10      	ldr	r2, [pc, #64]	; (80035ec <Send_TCP_Message+0x64>)
 80035aa:	4911      	ldr	r1, [pc, #68]	; (80035f0 <Send_TCP_Message+0x68>)
 80035ac:	f01c fe08 	bl	80201c0 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <Send_TCP_Message+0x6c>)
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035c4:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 80035c8:	f107 010c 	add.w	r1, r7, #12
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	2202      	movs	r2, #2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fef6 	bl	80033c4 <Command_Process>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 80035de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3758      	adds	r7, #88	; 0x58
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	08022d7c 	.word	0x08022d7c
 80035f0:	08022d88 	.word	0x08022d88
 80035f4:	08022d90 	.word	0x08022d90

080035f8 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 8003600:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <Read_TCP_Message+0xc0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	492d      	ldr	r1, [pc, #180]	; (80036bc <Read_TCP_Message+0xc4>)
 8003608:	4618      	mov	r0, r3
 800360a:	f01d fb9b 	bl	8020d44 <strstr>
 800360e:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d042      	beq.n	80036a4 <Read_TCP_Message+0xac>
	{
		for(uint8_t i=0;i<3;i++)
 800361e:	2300      	movs	r3, #0
 8003620:	76fb      	strb	r3, [r7, #27]
 8003622:	e017      	b.n	8003654 <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 8003624:	7efb      	ldrb	r3, [r7, #27]
 8003626:	3305      	adds	r3, #5
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b3a      	cmp	r3, #58	; 0x3a
 8003630:	d014      	beq.n	800365c <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 8003632:	7efb      	ldrb	r3, [r7, #27]
 8003634:	3305      	adds	r3, #5
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	441a      	add	r2, r3
 800363a:	7efb      	ldrb	r3, [r7, #27]
 800363c:	7812      	ldrb	r2, [r2, #0]
 800363e:	f107 0120 	add.w	r1, r7, #32
 8003642:	440b      	add	r3, r1
 8003644:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	3301      	adds	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 800364e:	7efb      	ldrb	r3, [r7, #27]
 8003650:	3301      	adds	r3, #1
 8003652:	76fb      	strb	r3, [r7, #27]
 8003654:	7efb      	ldrb	r3, [r7, #27]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d9e4      	bls.n	8003624 <Read_TCP_Message+0x2c>
 800365a:	e000      	b.n	800365e <Read_TCP_Message+0x66>
				break;
 800365c:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 800365e:	f107 0308 	add.w	r3, r7, #8
 8003662:	4618      	mov	r0, r3
 8003664:	f01b fe0d 	bl	801f282 <atoi>
 8003668:	4603      	mov	r3, r0
 800366a:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<messageLength;i++)
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e00d      	b.n	800368e <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4413      	add	r3, r2
 8003678:	3306      	adds	r3, #6
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	441a      	add	r2, r3
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	440b      	add	r3, r1
 8003684:	7812      	ldrb	r2, [r2, #0]
 8003686:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<messageLength;i++)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	3301      	adds	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	429a      	cmp	r2, r3
 8003694:	d3ed      	bcc.n	8003672 <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <Read_TCP_Message+0xc0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f8e3 	bl	8003866 <ringBuffer_flush>
		return STATUS_OK;
 80036a0:	2302      	movs	r3, #2
 80036a2:	e005      	b.n	80036b0 <Read_TCP_Message+0xb8>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <Read_TCP_Message+0xc0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f8dc 	bl	8003866 <ringBuffer_flush>
		return STATUS_ERROR;
 80036ae:	2303      	movs	r3, #3
	}



}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	2000049c 	.word	0x2000049c
 80036bc:	08022d98 	.word	0x08022d98

080036c0 <Wait_TCP_Message>:
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE
 */
Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 80036ca:	4b19      	ldr	r3, [pc, #100]	; (8003730 <Wait_TCP_Message+0x70>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 80036d2:	4b18      	ldr	r3, [pc, #96]	; (8003734 <Wait_TCP_Message+0x74>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4798      	blx	r3
 80036d8:	4603      	mov	r3, r0
 80036da:	4a17      	ldr	r2, [pc, #92]	; (8003738 <Wait_TCP_Message+0x78>)
 80036dc:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <Wait_TCP_Message+0x70>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff87 	bl	80035f8 <Read_TCP_Message>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d107      	bne.n	8003700 <Wait_TCP_Message+0x40>
	{
		time = 0;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <Wait_TCP_Message+0x78>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <Wait_TCP_Message+0x70>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 80036fc:	2302      	movs	r3, #2
 80036fe:	e012      	b.n	8003726 <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <Wait_TCP_Message+0x74>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4798      	blx	r3
 8003706:	4602      	mov	r2, r0
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <Wait_TCP_Message+0x78>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d807      	bhi.n	8003724 <Wait_TCP_Message+0x64>
	{
		time = 0;
 8003714:	4b08      	ldr	r3, [pc, #32]	; (8003738 <Wait_TCP_Message+0x78>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <Wait_TCP_Message+0x70>)
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 8003724:	2304      	movs	r3, #4

}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000011 	.word	0x20000011
 8003734:	20000360 	.word	0x20000360
 8003738:	20000378 	.word	0x20000378

0800373c <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003744:	2010      	movs	r0, #16
 8003746:	f01c fb69 	bl	801fe1c <malloc>
 800374a:	4603      	mov	r3, r0
 800374c:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 8003754:	2300      	movs	r3, #0
 8003756:	e017      	b.n	8003788 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 800376a:	2101      	movs	r1, #1
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f01b fd8d 	bl	801f28c <calloc>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 8003782:	2300      	movs	r3, #0
 8003784:	e000      	b.n	8003788 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003786:	68fb      	ldr	r3, [r7, #12]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f01c fb3e 	bl	801fe2c <free>
		}
		free(buffer);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f01c fb3b 	bl	801fe2c <free>
	}
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d00c      	beq.n	80037f2 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4413      	add	r3, r2
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 80037f0:	e009      	b.n	8003806 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4413      	add	r3, r2
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003812:	b480      	push	{r7}
 8003814:	b085      	sub	sp, #20
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	3b01      	subs	r3, #1
 8003824:	429a      	cmp	r2, r3
 8003826:	d00d      	beq.n	8003844 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4413      	add	r3, r2
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	605a      	str	r2, [r3, #4]
		return data;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	e00a      	b.n	800385a <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4413      	add	r3, r2
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	605a      	str	r2, [r3, #4]
		return data;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,(uint8_t)0x00,(size_t)ringBuffer->size);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68d8      	ldr	r0, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	461a      	mov	r2, r3
 8003878:	2100      	movs	r1, #0
 800387a:	f01c faed 	bl	801fe58 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	601a      	str	r2, [r3, #0]
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e00a      	b.n	80038ba <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	4413      	add	r3, r2
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ff85 	bl	80037be <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3301      	adds	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	6838      	ldr	r0, [r7, #0]
 80038bc:	f7fc fcbe 	bl	800023c <strlen>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d8ed      	bhi.n	80038a4 <ringBuffer_pushArray+0x10>
}
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	6839      	ldr	r1, [r7, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f01d fa2e 	bl	8020d44 <strstr>
 80038e8:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <ringBuffer_lookFor+0x22>
		return 1;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <ringBuffer_lookFor+0x24>
	else
		return 0;
 80038f4:	2300      	movs	r3, #0

}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800391e:	f7fd fb1c 	bl	8000f5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003922:	f000 f81d 	bl	8003960 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003926:	f000 f951 	bl	8003bcc <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 800392a:	f000 f891 	bl	8003a50 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 800392e:	f000 f8ed 	bl	8003b0c <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <main+0x44>)
 8003934:	463b      	mov	r3, r7
 8003936:	e892 0003 	ldmia.w	r2, {r0, r1}
 800393a:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 800393e:	463b      	mov	r3, r7
 8003940:	4619      	mov	r1, r3
 8003942:	2002      	movs	r0, #2
 8003944:	f004 fd14 	bl	8008370 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // optional
 8003948:	2120      	movs	r1, #32
 800394a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800394e:	f7fd fe41 	bl	80015d4 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003952:	2064      	movs	r0, #100	; 0x64
 8003954:	f7fd fb72 	bl	800103c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // optional
 8003958:	e7f6      	b.n	8003948 <main+0x30>
 800395a:	bf00      	nop
 800395c:	08022da8 	.word	0x08022da8

08003960 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b0a8      	sub	sp, #160	; 0xa0
 8003964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003966:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800396a:	2238      	movs	r2, #56	; 0x38
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f01c fa72 	bl	801fe58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003974:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	60da      	str	r2, [r3, #12]
 8003982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003984:	463b      	mov	r3, r7
 8003986:	2254      	movs	r2, #84	; 0x54
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f01c fa64 	bl	801fe58 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003990:	2000      	movs	r0, #0
 8003992:	f7fd fe5d 	bl	8001650 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003996:	2302      	movs	r3, #2
 8003998:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800399a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800399e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039a0:	2340      	movs	r3, #64	; 0x40
 80039a2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039a4:	2302      	movs	r3, #2
 80039a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039aa:	2302      	movs	r3, #2
 80039ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80039b0:	2304      	movs	r3, #4
 80039b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80039b6:	2355      	movs	r3, #85	; 0x55
 80039b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039bc:	2302      	movs	r3, #2
 80039be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039c2:	2302      	movs	r3, #2
 80039c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039c8:	2302      	movs	r3, #2
 80039ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fd fef0 	bl	80017b8 <HAL_RCC_OscConfig>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	bf14      	ite	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	2300      	moveq	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80039e8:	f000 f960 	bl	8003cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039ec:	230f      	movs	r3, #15
 80039ee:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039f0:	2303      	movs	r3, #3
 80039f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039f4:	2300      	movs	r3, #0
 80039f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039f8:	2300      	movs	r3, #0
 80039fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039fc:	2300      	movs	r3, #0
 80039fe:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a04:	2104      	movs	r1, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe f9ee 	bl	8001de8 <HAL_RCC_ClockConfig>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003a1c:	f000 f946 	bl	8003cac <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003a20:	2321      	movs	r3, #33	; 0x21
 8003a22:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a24:	2300      	movs	r3, #0
 8003a26:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fbf6 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003a44:	f000 f932 	bl	8003cac <Error_Handler>
  }
}
 8003a48:	bf00      	nop
 8003a4a:	37a0      	adds	r7, #160	; 0xa0
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003a54:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a56:	4a2c      	ldr	r2, [pc, #176]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003a58:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003a5a:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a60:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a62:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003a68:	4b26      	ldr	r3, [pc, #152]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003a6e:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003a74:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a76:	220c      	movs	r2, #12
 8003a78:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a7a:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a80:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a86:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003a92:	481c      	ldr	r0, [pc, #112]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a94:	f7fe fe10 	bl	80026b8 <HAL_UART_Init>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003aa8:	f000 f900 	bl	8003cac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003aac:	2100      	movs	r1, #0
 8003aae:	4815      	ldr	r0, [pc, #84]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ab0:	f7ff fac2 	bl	8003038 <HAL_UARTEx_SetTxFifoThreshold>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bf14      	ite	ne
 8003aba:	2301      	movne	r3, #1
 8003abc:	2300      	moveq	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003ac4:	f000 f8f2 	bl	8003cac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ac8:	2100      	movs	r1, #0
 8003aca:	480e      	ldr	r0, [pc, #56]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003acc:	f7ff faf2 	bl	80030b4 <HAL_UARTEx_SetRxFifoThreshold>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003ae0:	f000 f8e4 	bl	8003cac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003ae4:	4807      	ldr	r0, [pc, #28]	; (8003b04 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ae6:	f7ff fa6e 	bl	8002fc6 <HAL_UARTEx_DisableFifoMode>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003afa:	f000 f8d7 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	2000037c 	.word	0x2000037c
 8003b08:	40008000 	.word	0x40008000

08003b0c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b10:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b12:	4a2d      	ldr	r2, [pc, #180]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b1e:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b24:	4b27      	ldr	r3, [pc, #156]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b2a:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b30:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b32:	220c      	movs	r2, #12
 8003b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b36:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b3c:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b48:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b54:	481b      	ldr	r0, [pc, #108]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b56:	f7fe fdaf 	bl	80026b8 <HAL_UART_Init>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003b6a:	f000 f89f 	bl	8003cac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4814      	ldr	r0, [pc, #80]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b72:	f7ff fa61 	bl	8003038 <HAL_UARTEx_SetTxFifoThreshold>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003b86:	f000 f891 	bl	8003cac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	480d      	ldr	r0, [pc, #52]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b8e:	f7ff fa91 	bl	80030b4 <HAL_UARTEx_SetRxFifoThreshold>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf14      	ite	ne
 8003b98:	2301      	movne	r3, #1
 8003b9a:	2300      	moveq	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003ba2:	f000 f883 	bl	8003cac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003ba6:	4807      	ldr	r0, [pc, #28]	; (8003bc4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ba8:	f7ff fa0d 	bl	8002fc6 <HAL_UARTEx_DisableFifoMode>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bf14      	ite	ne
 8003bb2:	2301      	movne	r3, #1
 8003bb4:	2300      	moveq	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003bbc:	f000 f876 	bl	8003cac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bc0:	bf00      	nop
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	2000040c 	.word	0x2000040c
 8003bc8:	40013800 	.word	0x40013800

08003bcc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be2:	4b2f      	ldr	r3, [pc, #188]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	4a2e      	ldr	r2, [pc, #184]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bee:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bfa:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	4a28      	ldr	r2, [pc, #160]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c00:	f043 0320 	orr.w	r3, r3, #32
 8003c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c06:	4b26      	ldr	r3, [pc, #152]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	4a22      	ldr	r2, [pc, #136]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c42:	2200      	movs	r2, #0
 8003c44:	2120      	movs	r1, #32
 8003c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c4a:	f7fd fcab 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003c4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd8>)
 8003c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	4619      	mov	r1, r3
 8003c62:	4811      	ldr	r0, [pc, #68]	; (8003ca8 <_ZL12MX_GPIO_Initv+0xdc>)
 8003c64:	f7fd fb1c 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c74:	2300      	movs	r3, #0
 8003c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c82:	f7fd fb0d 	bl	80012a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2100      	movs	r1, #0
 8003c8a:	2028      	movs	r0, #40	; 0x28
 8003c8c:	f7fd fad3 	bl	8001236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c90:	2028      	movs	r0, #40	; 0x28
 8003c92:	f7fd faea 	bl	800126a <HAL_NVIC_EnableIRQ>

}
 8003c96:	bf00      	nop
 8003c98:	3728      	adds	r7, #40	; 0x28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	10110000 	.word	0x10110000
 8003ca8:	48000800 	.word	0x48000800

08003cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb0:	b672      	cpsid	i
}
 8003cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cb4:	e7fe      	b.n	8003cb4 <Error_Handler+0x8>

08003cb6 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003cbe:	2032      	movs	r0, #50	; 0x32
 8003cc0:	f7ff fd3c 	bl	800373c <ringBuffer_init>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	605a      	str	r2, [r3, #4]

	}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fd56 	bl	8003790 <ringBuffer_deInit>
	}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f00f ffd8 	bl	8013cac <_ZN5UtestC1Ev>
 8003cfc:	4a03      	ldr	r2, [pc, #12]	; (8003d0c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	08027930 	.word	0x08027930

08003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f00f ffd3 	bl	8013ccc <_ZN5UtestD1Ev>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	08027930 	.word	0x08027930

08003d34 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ffe7 	bl	8003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8003d42:	2108      	movs	r1, #8
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f005 fff5 	bl	8009d34 <_ZdlPvj>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ffbe 	bl	8003cec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003d70:	4a03      	ldr	r2, [pc, #12]	; (8003d80 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	08027910 	.word	0x08027910

08003d84 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	2228      	movs	r2, #40	; 0x28
 8003d8e:	4906      	ldr	r1, [pc, #24]	; (8003da8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8003d90:	2008      	movs	r0, #8
 8003d92:	f005 ffbb 	bl	8009d0c <_ZnwjPKci>
 8003d96:	4604      	mov	r4, r0
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f7ff ffdb 	bl	8003d54 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8003d9e:	4623      	mov	r3, r4
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd90      	pop	{r4, r7, pc}
 8003da8:	08022e24 	.word	0x08022e24

08003dac <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f00e fb96 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8003dbc:	4a03      	ldr	r2, [pc, #12]	; (8003dcc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	08027864 	.word	0x08027864

08003dd0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8003dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af04      	add	r7, sp, #16
 8003dd6:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8003dd8:	f00f ff3e 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8003ddc:	4604      	mov	r4, r0
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	3338      	adds	r3, #56	; 0x38
 8003de2:	681d      	ldr	r5, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	461e      	mov	r6, r3
 8003dec:	f00f ff44 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003df0:	4603      	mov	r3, r0
 8003df2:	9302      	str	r3, [sp, #8]
 8003df4:	232b      	movs	r3, #43	; 0x2b
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8003dfe:	4632      	mov	r2, r6
 8003e00:	2132      	movs	r1, #50	; 0x32
 8003e02:	4620      	mov	r0, r4
 8003e04:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8003e06:	f00f ff27 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	3320      	adds	r3, #32
 8003e10:	681d      	ldr	r5, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2de      	uxtb	r6, r3
 8003e22:	f00f ff29 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003e26:	4603      	mov	r3, r0
 8003e28:	9303      	str	r3, [sp, #12]
 8003e2a:	232c      	movs	r3, #44	; 0x2c
 8003e2c:	9302      	str	r3, [sp, #8]
 8003e2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	2300      	movs	r3, #0
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8003e3a:	4631      	mov	r1, r6
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8003e40:	f00f ff0a 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8003e44:	4604      	mov	r4, r0
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	3338      	adds	r3, #56	; 0x38
 8003e4a:	681d      	ldr	r5, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461e      	mov	r6, r3
 8003e54:	f00f ff10 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	9302      	str	r3, [sp, #8]
 8003e5c:	232d      	movs	r3, #45	; 0x2d
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8003e66:	4632      	mov	r2, r6
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8003e6e:	f00f fef3 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8003e72:	4604      	mov	r4, r0
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	3338      	adds	r3, #56	; 0x38
 8003e78:	681d      	ldr	r5, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	461e      	mov	r6, r3
 8003e82:	f00f fef9 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003e86:	4603      	mov	r3, r0
 8003e88:	9302      	str	r3, [sp, #8]
 8003e8a:	232e      	movs	r3, #46	; 0x2e
 8003e8c:	9301      	str	r3, [sp, #4]
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 8003e94:	4632      	mov	r2, r6
 8003e96:	2100      	movs	r1, #0
 8003e98:	4620      	mov	r0, r4
 8003e9a:	47a8      	blx	r5

}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ea4:	08022e24 	.word	0x08022e24
 8003ea8:	08022e38 	.word	0x08022e38
 8003eac:	08022e60 	.word	0x08022e60
 8003eb0:	08022e78 	.word	0x08022e78
 8003eb4:	08022e80 	.word	0x08022e80
 8003eb8:	08022ea8 	.word	0x08022ea8

08003ebc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff ff0a 	bl	8003cec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003ed8:	4a03      	ldr	r2, [pc, #12]	; (8003ee8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	08027844 	.word	0x08027844

08003eec <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8003eec:	b590      	push	{r4, r7, lr}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	2232      	movs	r2, #50	; 0x32
 8003ef6:	4906      	ldr	r1, [pc, #24]	; (8003f10 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8003ef8:	2008      	movs	r0, #8
 8003efa:	f005 ff07 	bl	8009d0c <_ZnwjPKci>
 8003efe:	4604      	mov	r4, r0
 8003f00:	4620      	mov	r0, r4
 8003f02:	f7ff ffdb 	bl	8003ebc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8003f06:	4623      	mov	r3, r4
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd90      	pop	{r4, r7, pc}
 8003f10:	08022e24 	.word	0x08022e24

08003f14 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f00e fae2 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8003f24:	4a03      	ldr	r2, [pc, #12]	; (8003f34 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	08027798 	.word	0x08027798

08003f38 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8003f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af04      	add	r7, sp, #16
 8003f3e:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2145      	movs	r1, #69	; 0x45
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fc39 	bl	80037be <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8003f4c:	f00f fe84 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8003f50:	4604      	mov	r4, r0
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	3338      	adds	r3, #56	; 0x38
 8003f56:	681d      	ldr	r5, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	461e      	mov	r6, r3
 8003f62:	f00f fe89 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003f66:	4603      	mov	r3, r0
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	2335      	movs	r3, #53	; 0x35
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8003f74:	4632      	mov	r2, r6
 8003f76:	2145      	movs	r1, #69	; 0x45
 8003f78:	4620      	mov	r0, r4
 8003f7a:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2110      	movs	r1, #16
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fc1b 	bl	80037be <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8003f88:	f00f fe66 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	3338      	adds	r3, #56	; 0x38
 8003f92:	681d      	ldr	r5, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	461e      	mov	r6, r3
 8003fa0:	f00f fe6a 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	9302      	str	r3, [sp, #8]
 8003fa8:	2338      	movs	r3, #56	; 0x38
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 8003fb2:	4632      	mov	r2, r6
 8003fb4:	2110      	movs	r1, #16
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	47a8      	blx	r5

}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	08022e24 	.word	0x08022e24
 8003fc8:	08022ed0 	.word	0x08022ed0
 8003fcc:	08022f00 	.word	0x08022f00

08003fd0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fe80 	bl	8003cec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003fec:	4a03      	ldr	r2, [pc, #12]	; (8003ffc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	08027778 	.word	0x08027778

08004000 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	223c      	movs	r2, #60	; 0x3c
 800400a:	4906      	ldr	r1, [pc, #24]	; (8004024 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 800400c:	2008      	movs	r0, #8
 800400e:	f005 fe7d 	bl	8009d0c <_ZnwjPKci>
 8004012:	4604      	mov	r4, r0
 8004014:	4620      	mov	r0, r4
 8004016:	f7ff ffdb 	bl	8003fd0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800401a:	4623      	mov	r3, r4
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bd90      	pop	{r4, r7, pc}
 8004024:	08022e24 	.word	0x08022e24

08004028 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4618      	mov	r0, r3
 8004034:	f00e fa58 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8004038:	4a03      	ldr	r2, [pc, #12]	; (8004048 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	080276cc 	.word	0x080276cc

0800404c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 800404c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404e:	b089      	sub	sp, #36	; 0x24
 8004050:	af04      	add	r7, sp, #16
 8004052:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	3b01      	subs	r3, #1
 800406a:	429a      	cmp	r2, r3
 800406c:	bf0c      	ite	eq
 800406e:	2301      	moveq	r3, #1
 8004070:	2300      	movne	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4293      	cmp	r3, r2
 800407a:	da0b      	bge.n	8004094 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fb99 	bl	80037be <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3301      	adds	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e7e3      	b.n	800405c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	21ff      	movs	r1, #255	; 0xff
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fb8f 	bl	80037be <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80040a0:	f00f fdda 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80040a4:	4604      	mov	r4, r0
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	3338      	adds	r3, #56	; 0x38
 80040aa:	681d      	ldr	r5, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	461e      	mov	r6, r3
 80040b6:	f00f fddf 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040ba:	4603      	mov	r3, r0
 80040bc:	9302      	str	r3, [sp, #8]
 80040be:	2344      	movs	r3, #68	; 0x44
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80040c8:	4632      	mov	r2, r6
 80040ca:	21ff      	movs	r1, #255	; 0xff
 80040cc:	4620      	mov	r0, r4
 80040ce:	47a8      	blx	r5
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d8:	08022e24 	.word	0x08022e24
 80040dc:	08022f30 	.word	0x08022f30

080040e0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fdf8 	bl	8003cec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80040fc:	4a03      	ldr	r2, [pc, #12]	; (800410c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	080276ac 	.word	0x080276ac

08004110 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	2247      	movs	r2, #71	; 0x47
 800411a:	4906      	ldr	r1, [pc, #24]	; (8004134 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 800411c:	2008      	movs	r0, #8
 800411e:	f005 fdf5 	bl	8009d0c <_ZnwjPKci>
 8004122:	4604      	mov	r4, r0
 8004124:	4620      	mov	r0, r4
 8004126:	f7ff ffdb 	bl	80040e0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800412a:	4623      	mov	r3, r4
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bd90      	pop	{r4, r7, pc}
 8004134:	08022e24 	.word	0x08022e24

08004138 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4618      	mov	r0, r3
 8004144:	f00e f9d0 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8004148:	4a03      	ldr	r2, [pc, #12]	; (8004158 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	08027600 	.word	0x08027600

0800415c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 800415c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af04      	add	r7, sp, #16
 8004162:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	21ff      	movs	r1, #255	; 0xff
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fb27 	bl	80037be <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fb4c 	bl	8003812 <ringBuffer_pop>
 800417a:	4603      	mov	r3, r0
 800417c:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 800417e:	f00f fd6b 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8004182:	4604      	mov	r4, r0
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	3338      	adds	r3, #56	; 0x38
 8004188:	681d      	ldr	r5, [r3, #0]
 800418a:	7bfe      	ldrb	r6, [r7, #15]
 800418c:	f00f fd74 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004190:	4603      	mov	r3, r0
 8004192:	9302      	str	r3, [sp, #8]
 8004194:	234c      	movs	r3, #76	; 0x4c
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 800419e:	4632      	mov	r2, r6
 80041a0:	21ff      	movs	r1, #255	; 0xff
 80041a2:	4620      	mov	r0, r4
 80041a4:	47a8      	blx	r5

}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ae:	bf00      	nop
 80041b0:	08022e24 	.word	0x08022e24
 80041b4:	08022f60 	.word	0x08022f60

080041b8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fd8c 	bl	8003cec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80041d4:	4a03      	ldr	r2, [pc, #12]	; (80041e4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	080275e0 	.word	0x080275e0

080041e8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	2250      	movs	r2, #80	; 0x50
 80041f2:	4906      	ldr	r1, [pc, #24]	; (800420c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 80041f4:	2008      	movs	r0, #8
 80041f6:	f005 fd89 	bl	8009d0c <_ZnwjPKci>
 80041fa:	4604      	mov	r4, r0
 80041fc:	4620      	mov	r0, r4
 80041fe:	f7ff ffdb 	bl	80041b8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004202:	4623      	mov	r3, r4
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bd90      	pop	{r4, r7, pc}
 800420c:	08022e24 	.word	0x08022e24

08004210 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4618      	mov	r0, r3
 800421c:	f00e f964 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8004220:	4a03      	ldr	r2, [pc, #12]	; (8004230 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	08027534 	.word	0x08027534

08004234 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004236:	b089      	sub	sp, #36	; 0x24
 8004238:	af04      	add	r7, sp, #16
 800423a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	21aa      	movs	r1, #170	; 0xaa
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fab9 	bl	80037be <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	3b01      	subs	r3, #1
 8004262:	429a      	cmp	r2, r3
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4293      	cmp	r3, r2
 8004272:	da0a      	bge.n	800428a <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff faca 	bl	8003812 <ringBuffer_pop>
 800427e:	4603      	mov	r3, r0
 8004280:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e7e4      	b.n	8004254 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fabf 	bl	8003812 <ringBuffer_pop>
 8004294:	4603      	mov	r3, r0
 8004296:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004298:	f00f fcde 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800429c:	4604      	mov	r4, r0
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	3338      	adds	r3, #56	; 0x38
 80042a2:	681d      	ldr	r5, [r3, #0]
 80042a4:	7afe      	ldrb	r6, [r7, #11]
 80042a6:	f00f fce7 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80042aa:	4603      	mov	r3, r0
 80042ac:	9302      	str	r3, [sp, #8]
 80042ae:	235d      	movs	r3, #93	; 0x5d
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80042b8:	4632      	mov	r2, r6
 80042ba:	21aa      	movs	r1, #170	; 0xaa
 80042bc:	4620      	mov	r0, r4
 80042be:	47a8      	blx	r5
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c8:	08022e24 	.word	0x08022e24
 80042cc:	08022f80 	.word	0x08022f80

080042d0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	605a      	str	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fd00 	bl	8003cec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80042ec:	4a03      	ldr	r2, [pc, #12]	; (80042fc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	08027514 	.word	0x08027514

08004300 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	2260      	movs	r2, #96	; 0x60
 800430a:	4906      	ldr	r1, [pc, #24]	; (8004324 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 800430c:	2008      	movs	r0, #8
 800430e:	f005 fcfd 	bl	8009d0c <_ZnwjPKci>
 8004312:	4604      	mov	r4, r0
 8004314:	4620      	mov	r0, r4
 8004316:	f7ff ffdb 	bl	80042d0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 800431a:	4623      	mov	r3, r4
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	bd90      	pop	{r4, r7, pc}
 8004324:	08022e24 	.word	0x08022e24

08004328 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4618      	mov	r0, r3
 8004334:	f00e f8d8 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8004338:	4a03      	ldr	r2, [pc, #12]	; (8004348 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	08027468 	.word	0x08027468

0800434c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 800434c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af04      	add	r7, sp, #16
 8004352:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	429a      	cmp	r2, r3
 8004362:	d20b      	bcs.n	800437c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fa25 	bl	80037be <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	e7ed      	b.n	8004358 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 800437c:	f00f fc6c 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8004380:	4604      	mov	r4, r0
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	3338      	adds	r3, #56	; 0x38
 8004386:	681d      	ldr	r5, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	3b01      	subs	r3, #1
 8004396:	4413      	add	r3, r2
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	461e      	mov	r6, r3
 800439c:	f00f fc6c 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80043a0:	4603      	mov	r3, r0
 80043a2:	9302      	str	r3, [sp, #8]
 80043a4:	2367      	movs	r3, #103	; 0x67
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	4b24      	ldr	r3, [pc, #144]	; (800443c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	4b24      	ldr	r3, [pc, #144]	; (8004440 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 80043ae:	4632      	mov	r2, r6
 80043b0:	2131      	movs	r1, #49	; 0x31
 80043b2:	4620      	mov	r0, r4
 80043b4:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fa53 	bl	8003866 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 80043c0:	f00f fc4a 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80043c4:	4604      	mov	r4, r0
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	3338      	adds	r3, #56	; 0x38
 80043ca:	681d      	ldr	r5, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	3b01      	subs	r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	461e      	mov	r6, r3
 80043e0:	f00f fc4a 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80043e4:	4603      	mov	r3, r0
 80043e6:	9302      	str	r3, [sp, #8]
 80043e8:	236b      	movs	r3, #107	; 0x6b
 80043ea:	9301      	str	r3, [sp, #4]
 80043ec:	4b13      	ldr	r3, [pc, #76]	; (800443c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	4b14      	ldr	r3, [pc, #80]	; (8004444 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 80043f2:	4632      	mov	r2, r6
 80043f4:	2100      	movs	r1, #0
 80043f6:	4620      	mov	r0, r4
 80043f8:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 80043fa:	f00f fc2d 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80043fe:	4604      	mov	r4, r0
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	3338      	adds	r3, #56	; 0x38
 8004404:	681d      	ldr	r5, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	461e      	mov	r6, r3
 800441a:	f00f fc2d 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800441e:	4603      	mov	r3, r0
 8004420:	9302      	str	r3, [sp, #8]
 8004422:	236c      	movs	r3, #108	; 0x6c
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 800442c:	4632      	mov	r2, r6
 800442e:	2100      	movs	r1, #0
 8004430:	4620      	mov	r0, r4
 8004432:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all the elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443c:	08022e24 	.word	0x08022e24
 8004440:	08022fa0 	.word	0x08022fa0
 8004444:	08022fdc 	.word	0x08022fdc
 8004448:	08023018 	.word	0x08023018

0800444c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	605a      	str	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fc42 	bl	8003cec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004468:	4a03      	ldr	r2, [pc, #12]	; (8004478 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	08027448 	.word	0x08027448

0800447c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 800447c:	b590      	push	{r4, r7, lr}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	2275      	movs	r2, #117	; 0x75
 8004486:	4906      	ldr	r1, [pc, #24]	; (80044a0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004488:	2008      	movs	r0, #8
 800448a:	f005 fc3f 	bl	8009d0c <_ZnwjPKci>
 800448e:	4604      	mov	r4, r0
 8004490:	4620      	mov	r0, r4
 8004492:	f7ff ffdb 	bl	800444c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004496:	4623      	mov	r3, r4
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bd90      	pop	{r4, r7, pc}
 80044a0:	08022e24 	.word	0x08022e24

080044a4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f00e f81a 	bl	80124e8 <_ZN10UtestShellC1Ev>
 80044b4:	4a03      	ldr	r2, [pc, #12]	; (80044c4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	0802739c 	.word	0x0802739c

080044c8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 80044c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af04      	add	r7, sp, #16
 80044ce:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	490e      	ldr	r1, [pc, #56]	; (8004510 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff f9dc 	bl	8003894 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 80044dc:	f00f fbbc 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80044e0:	4604      	mov	r4, r0
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	3324      	adds	r3, #36	; 0x24
 80044e6:	681d      	ldr	r5, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	68de      	ldr	r6, [r3, #12]
 80044ee:	f00f fbc3 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044f2:	4603      	mov	r3, r0
 80044f4:	9302      	str	r3, [sp, #8]
 80044f6:	2379      	movs	r3, #121	; 0x79
 80044f8:	9301      	str	r3, [sp, #4]
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	2300      	movs	r3, #0
 8004500:	4632      	mov	r2, r6
 8004502:	4903      	ldr	r1, [pc, #12]	; (8004510 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004504:	4620      	mov	r0, r4
 8004506:	47a8      	blx	r5
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004510:	08023050 	.word	0x08023050
 8004514:	08022e24 	.word	0x08022e24

08004518 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fbdc 	bl	8003cec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004534:	4a03      	ldr	r2, [pc, #12]	; (8004544 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	0802737c 	.word	0x0802737c

08004548 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	227c      	movs	r2, #124	; 0x7c
 8004552:	4906      	ldr	r1, [pc, #24]	; (800456c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004554:	2008      	movs	r0, #8
 8004556:	f005 fbd9 	bl	8009d0c <_ZnwjPKci>
 800455a:	4604      	mov	r4, r0
 800455c:	4620      	mov	r0, r4
 800455e:	f7ff ffdb 	bl	8004518 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004562:	4623      	mov	r3, r4
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bd90      	pop	{r4, r7, pc}
 800456c:	08022e24 	.word	0x08022e24

08004570 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4618      	mov	r0, r3
 800457c:	f00d ffb4 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8004580:	4a03      	ldr	r2, [pc, #12]	; (8004590 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	080272d0 	.word	0x080272d0

08004594 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004598:	b08a      	sub	sp, #40	; 0x28
 800459a:	af04      	add	r7, sp, #16
 800459c:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	494e      	ldr	r1, [pc, #312]	; (80046dc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff f975 	bl	8003894 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 80045aa:	f00f fb55 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80045ae:	4604      	mov	r4, r0
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	3324      	adds	r3, #36	; 0x24
 80045b4:	681d      	ldr	r5, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	68de      	ldr	r6, [r3, #12]
 80045bc:	f00f fb5c 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045c0:	4603      	mov	r3, r0
 80045c2:	9302      	str	r3, [sp, #8]
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	4b45      	ldr	r3, [pc, #276]	; (80046e0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	2300      	movs	r3, #0
 80045ce:	4632      	mov	r2, r6
 80045d0:	4942      	ldr	r1, [pc, #264]	; (80046dc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80045d2:	4620      	mov	r0, r4
 80045d4:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4942      	ldr	r1, [pc, #264]	; (80046e4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff f978 	bl	80038d2 <ringBuffer_lookFor>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d05c      	beq.n	80046ac <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	493b      	ldr	r1, [pc, #236]	; (80046e4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff f96a 	bl	80038d2 <ringBuffer_lookFor>
 80045fe:	4604      	mov	r4, r0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4937      	ldr	r1, [pc, #220]	; (80046e4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f963 	bl	80038d2 <ringBuffer_lookFor>
 800460c:	4603      	mov	r3, r0
 800460e:	429c      	cmp	r4, r3
 8004610:	bf14      	ite	ne
 8004612:	2301      	movne	r3, #1
 8004614:	2300      	moveq	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 800461c:	f00f fb1c 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8004620:	6803      	ldr	r3, [r0, #0]
 8004622:	3370      	adds	r3, #112	; 0x70
 8004624:	681c      	ldr	r4, [r3, #0]
 8004626:	2381      	movs	r3, #129	; 0x81
 8004628:	4a2d      	ldr	r2, [pc, #180]	; (80046e0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800462a:	492f      	ldr	r1, [pc, #188]	; (80046e8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 800462c:	47a0      	blx	r4
 800462e:	f00f fb13 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8004632:	4604      	mov	r4, r0
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	3358      	adds	r3, #88	; 0x58
 8004638:	681d      	ldr	r5, [r3, #0]
 800463a:	f107 0308 	add.w	r3, r7, #8
 800463e:	2101      	movs	r1, #1
 8004640:	4618      	mov	r0, r3
 8004642:	f008 fda5 	bl	800d190 <_Z10StringFromi>
 8004646:	f107 0308 	add.w	r3, r7, #8
 800464a:	4618      	mov	r0, r3
 800464c:	f008 faac 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8004650:	4606      	mov	r6, r0
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4923      	ldr	r1, [pc, #140]	; (80046e4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff f93a 	bl	80038d2 <ringBuffer_lookFor>
 800465e:	4602      	mov	r2, r0
 8004660:	f107 0310 	add.w	r3, r7, #16
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f009 f80c 	bl	800d684 <_Z10StringFromm>
 800466c:	f107 0310 	add.w	r3, r7, #16
 8004670:	4618      	mov	r0, r3
 8004672:	f008 fa99 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8004676:	4680      	mov	r8, r0
 8004678:	f00f fafe 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800467c:	4603      	mov	r3, r0
 800467e:	9303      	str	r3, [sp, #12]
 8004680:	2381      	movs	r3, #129	; 0x81
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	2300      	movs	r3, #0
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	4643      	mov	r3, r8
 800468e:	4632      	mov	r2, r6
 8004690:	2101      	movs	r1, #1
 8004692:	4620      	mov	r0, r4
 8004694:	47a8      	blx	r5
 8004696:	f107 0310 	add.w	r3, r7, #16
 800469a:	4618      	mov	r0, r3
 800469c:	f008 fab1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80046a0:	f107 0308 	add.w	r3, r7, #8
 80046a4:	4618      	mov	r0, r3
 80046a6:	f008 faac 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 80046aa:	e012      	b.n	80046d2 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80046ac:	f00f fad4 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80046b0:	4604      	mov	r4, r0
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	3338      	adds	r3, #56	; 0x38
 80046b6:	681d      	ldr	r5, [r3, #0]
 80046b8:	f00f fade 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046bc:	4603      	mov	r3, r0
 80046be:	9302      	str	r3, [sp, #8]
 80046c0:	2381      	movs	r3, #129	; 0x81
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2300      	movs	r3, #0
 80046ca:	2200      	movs	r2, #0
 80046cc:	2100      	movs	r1, #0
 80046ce:	4620      	mov	r0, r4
 80046d0:	47a8      	blx	r5
}
 80046d2:	bf00      	nop
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046dc:	08023058 	.word	0x08023058
 80046e0:	08022e24 	.word	0x08022e24
 80046e4:	08023064 	.word	0x08023064
 80046e8:	0802306c 	.word	0x0802306c

080046ec <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	605a      	str	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff faf2 	bl	8003cec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004708:	4a03      	ldr	r2, [pc, #12]	; (8004718 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	080272b0 	.word	0x080272b0

0800471c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	2284      	movs	r2, #132	; 0x84
 8004726:	4906      	ldr	r1, [pc, #24]	; (8004740 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004728:	2008      	movs	r0, #8
 800472a:	f005 faef 	bl	8009d0c <_ZnwjPKci>
 800472e:	4604      	mov	r4, r0
 8004730:	4620      	mov	r0, r4
 8004732:	f7ff ffdb 	bl	80046ec <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004736:	4623      	mov	r3, r4
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bd90      	pop	{r4, r7, pc}
 8004740:	08022e24 	.word	0x08022e24

08004744 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4618      	mov	r0, r3
 8004750:	f00d feca 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8004754:	4a03      	ldr	r2, [pc, #12]	; (8004764 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	08027204 	.word	0x08027204

08004768 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476a:	b087      	sub	sp, #28
 800476c:	af04      	add	r7, sp, #16
 800476e:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004770:	f00f fa72 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8004774:	4604      	mov	r4, r0
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	3338      	adds	r3, #56	; 0x38
 800477a:	681d      	ldr	r5, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff f8bc 	bl	80038fe <ringBuffer_capacity>
 8004786:	4603      	mov	r3, r0
 8004788:	461e      	mov	r6, r3
 800478a:	f00f fa75 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800478e:	4603      	mov	r3, r0
 8004790:	9302      	str	r3, [sp, #8]
 8004792:	2387      	movs	r3, #135	; 0x87
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 800479c:	4632      	mov	r2, r6
 800479e:	2132      	movs	r1, #50	; 0x32
 80047a0:	4620      	mov	r0, r4
 80047a2:	47a8      	blx	r5

}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ac:	08022e24 	.word	0x08022e24
 80047b0:	08023110 	.word	0x08023110

080047b4 <_Z18UART_Transmit_FakePh>:

/* Mpck functions-----------------------------------------------------------------------*/

void UART_Transmit_Fake(uint8_t* data)
{
 80047b4:	b5b0      	push	{r4, r5, r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 80047bc:	f107 0308 	add.w	r3, r7, #8
 80047c0:	491d      	ldr	r1, [pc, #116]	; (8004838 <_Z18UART_Transmit_FakePh+0x84>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f007 fe65 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80047c8:	f107 0308 	add.w	r3, r7, #8
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f005 ff38 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80047d4:	4604      	mov	r4, r0
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	3318      	adds	r3, #24
 80047da:	681d      	ldr	r5, [r3, #0]
 80047dc:	f107 0310 	add.w	r3, r7, #16
 80047e0:	4916      	ldr	r1, [pc, #88]	; (800483c <_Z18UART_Transmit_FakePh+0x88>)
 80047e2:	4618      	mov	r0, r3
 80047e4:	f007 fe55 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80047e8:	f107 0310 	add.w	r3, r7, #16
 80047ec:	4619      	mov	r1, r3
 80047ee:	4620      	mov	r0, r4
 80047f0:	47a8      	blx	r5
 80047f2:	4604      	mov	r4, r0
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	333c      	adds	r3, #60	; 0x3c
 80047f8:	681d      	ldr	r5, [r3, #0]
 80047fa:	f107 0318 	add.w	r3, r7, #24
 80047fe:	4910      	ldr	r1, [pc, #64]	; (8004840 <_Z18UART_Transmit_FakePh+0x8c>)
 8004800:	4618      	mov	r0, r3
 8004802:	f007 fe46 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004806:	f107 0318 	add.w	r3, r7, #24
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4619      	mov	r1, r3
 800480e:	4620      	mov	r0, r4
 8004810:	47a8      	blx	r5
 8004812:	f107 0318 	add.w	r3, r7, #24
 8004816:	4618      	mov	r0, r3
 8004818:	f008 f9f3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800481c:	f107 0310 	add.w	r3, r7, #16
 8004820:	4618      	mov	r0, r3
 8004822:	f008 f9ee 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8004826:	f107 0308 	add.w	r3, r7, #8
 800482a:	4618      	mov	r0, r3
 800482c:	f008 f9e9 	bl	800cc02 <_ZN12SimpleStringD1Ev>

}
 8004830:	bf00      	nop
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bdb0      	pop	{r4, r5, r7, pc}
 8004838:	08023148 	.word	0x08023148
 800483c:	0802314c 	.word	0x0802314c
 8004840:	08023160 	.word	0x08023160

08004844 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004844:	b5b0      	push	{r4, r5, r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 800484a:	463b      	mov	r3, r7
 800484c:	4916      	ldr	r1, [pc, #88]	; (80048a8 <_Z17UART_Receive_Fakev+0x64>)
 800484e:	4618      	mov	r0, r3
 8004850:	f007 fe1f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004854:	463b      	mov	r3, r7
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f005 fef3 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800485e:	4604      	mov	r4, r0
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	3318      	adds	r3, #24
 8004864:	681d      	ldr	r5, [r3, #0]
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	4910      	ldr	r1, [pc, #64]	; (80048ac <_Z17UART_Receive_Fakev+0x68>)
 800486c:	4618      	mov	r0, r3
 800486e:	f007 fe10 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	4619      	mov	r1, r3
 8004878:	4620      	mov	r0, r4
 800487a:	47a8      	blx	r5
 800487c:	4603      	mov	r3, r0
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	3264      	adds	r2, #100	; 0x64
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	4790      	blx	r2
 8004888:	4603      	mov	r3, r0
 800488a:	b2dc      	uxtb	r4, r3
 800488c:	f107 0308 	add.w	r3, r7, #8
 8004890:	4618      	mov	r0, r3
 8004892:	f008 f9b6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8004896:	463b      	mov	r3, r7
 8004898:	4618      	mov	r0, r3
 800489a:	f008 f9b2 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800489e:	4623      	mov	r3, r4
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bdb0      	pop	{r4, r5, r7, pc}
 80048a8:	08023148 	.word	0x08023148
 80048ac:	08023168 	.word	0x08023168

080048b0 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <_Z12getTick_Fakev+0x30>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d103      	bne.n	80048c6 <_Z12getTick_Fakev+0x16>
		time = 0;
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <_Z12getTick_Fakev+0x30>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e004      	b.n	80048d0 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <_Z12getTick_Fakev+0x30>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3301      	adds	r3, #1
 80048cc:	4a04      	ldr	r2, [pc, #16]	; (80048e0 <_Z12getTick_Fakev+0x30>)
 80048ce:	6013      	str	r3, [r2, #0]
	return time;
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <_Z12getTick_Fakev+0x30>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	200005c0 	.word	0x200005c0

080048e4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
/* Test functions of the ring buffer-----------------------------------------------------------------------*/

TEST_GROUP(EspDriver_Test_Group)
{

	void setup()
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 80048ec:	2364      	movs	r3, #100	; 0x64
 80048ee:	4a04      	ldr	r2, [pc, #16]	; (8004900 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 80048f0:	4904      	ldr	r1, [pc, #16]	; (8004904 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 80048f2:	4805      	ldr	r0, [pc, #20]	; (8004908 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 80048f4:	f7fe fc6a 	bl	80031cc <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);					// buffer size

	}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	080048b1 	.word	0x080048b1
 8004904:	08004845 	.word	0x08004845
 8004908:	080047b5 	.word	0x080047b5

0800490c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8004914:	f107 0308 	add.w	r3, r7, #8
 8004918:	4917      	ldr	r1, [pc, #92]	; (8004978 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 800491a:	4618      	mov	r0, r3
 800491c:	f007 fdb9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004920:	f107 0308 	add.w	r3, r7, #8
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f005 fe8c 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800492c:	4603      	mov	r3, r0
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	3294      	adds	r2, #148	; 0x94
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	4790      	blx	r2
 8004938:	f107 0308 	add.w	r3, r7, #8
 800493c:	4618      	mov	r0, r3
 800493e:	f008 f960 	bl	800cc02 <_ZN12SimpleStringD1Ev>
		mock().clear();
 8004942:	f107 0310 	add.w	r3, r7, #16
 8004946:	490c      	ldr	r1, [pc, #48]	; (8004978 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8004948:	4618      	mov	r0, r3
 800494a:	f007 fda2 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800494e:	f107 0310 	add.w	r3, r7, #16
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f005 fe75 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800495a:	4603      	mov	r3, r0
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	329c      	adds	r2, #156	; 0x9c
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	4790      	blx	r2
 8004966:	f107 0310 	add.w	r3, r7, #16
 800496a:	4618      	mov	r0, r3
 800496c:	f008 f949 	bl	800cc02 <_ZN12SimpleStringD1Ev>
	}
 8004970:	bf00      	nop
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	08023148 	.word	0x08023148

0800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4618      	mov	r0, r3
 8004988:	f00f f990 	bl	8013cac <_ZN5UtestC1Ev>
 800498c:	4a03      	ldr	r2, [pc, #12]	; (800499c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	080271e4 	.word	0x080271e4

080049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	4a05      	ldr	r2, [pc, #20]	; (80049c0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f00f f98b 	bl	8013ccc <_ZN5UtestD1Ev>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	080271e4 	.word	0x080271e4

080049c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff ffe7 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80049d2:	2104      	movs	r1, #4
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f005 f9ad 	bl	8009d34 <_ZdlPvj>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4618      	mov	r0, r3
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff ffc4 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80049f4:	4a03      	ldr	r2, [pc, #12]	; (8004a04 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	080271c4 	.word	0x080271c4

08004a08 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	22bf      	movs	r2, #191	; 0xbf
 8004a12:	4906      	ldr	r1, [pc, #24]	; (8004a2c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004a14:	2004      	movs	r0, #4
 8004a16:	f005 f979 	bl	8009d0c <_ZnwjPKci>
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f7ff ffe1 	bl	80049e4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004a22:	4623      	mov	r3, r4
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd90      	pop	{r4, r7, pc}
 8004a2c:	08022e24 	.word	0x08022e24

08004a30 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f00d fd54 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8004a40:	4a03      	ldr	r2, [pc, #12]	; (8004a50 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	08027118 	.word	0x08027118

08004a54 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8004a54:	b5b0      	push	{r4, r5, r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af04      	add	r7, sp, #16
 8004a5a:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; 			// or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8004a5c:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004a5e:	4a11      	ldr	r2, [pc, #68]	; (8004aa4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004a60:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	2364      	movs	r3, #100	; 0x64
 8004a68:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8004a6a:	4910      	ldr	r1, [pc, #64]	; (8004aac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8004a6c:	f7fe fbae 	bl	80031cc <ESP_Init>
 8004a70:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 8004a72:	f00f f8f1 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8004a76:	4604      	mov	r4, r0
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	3338      	adds	r3, #56	; 0x38
 8004a7c:	681d      	ldr	r5, [r3, #0]
 8004a7e:	f00f f8fb 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a82:	4603      	mov	r3, r0
 8004a84:	9302      	str	r3, [sp, #8]
 8004a86:	23cd      	movs	r3, #205	; 0xcd
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	2101      	movs	r1, #1
 8004a94:	4620      	mov	r0, r4
 8004a96:	47a8      	blx	r5

}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa0:	200005c4 	.word	0x200005c4
 8004aa4:	080047b5 	.word	0x080047b5
 8004aa8:	080048b1 	.word	0x080048b1
 8004aac:	08004845 	.word	0x08004845
 8004ab0:	08022e24 	.word	0x08022e24
 8004ab4:	0802317c 	.word	0x0802317c

08004ab8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ff5a 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004ac8:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	080270f8 	.word	0x080270f8

08004adc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	22d1      	movs	r2, #209	; 0xd1
 8004ae6:	4906      	ldr	r1, [pc, #24]	; (8004b00 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8004ae8:	2004      	movs	r0, #4
 8004aea:	f005 f90f 	bl	8009d0c <_ZnwjPKci>
 8004aee:	4604      	mov	r4, r0
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7ff ffe1 	bl	8004ab8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8004af6:	4623      	mov	r3, r4
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd90      	pop	{r4, r7, pc}
 8004b00:	08022e24 	.word	0x08022e24

08004b04 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f00d fcea 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8004b14:	4a03      	ldr	r2, [pc, #12]	; (8004b24 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	0802704c 	.word	0x0802704c

08004b28 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8004b28:	b5b0      	push	{r4, r5, r7, lr}
 8004b2a:	b08e      	sub	sp, #56	; 0x38
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");  // UART_Transmit_Fake function waits "Test" string.
 8004b30:	f107 0308 	add.w	r3, r7, #8
 8004b34:	493d      	ldr	r1, [pc, #244]	; (8004c2c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8004b36:	4618      	mov	r0, r3
 8004b38:	f007 fcab 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004b3c:	f107 0308 	add.w	r3, r7, #8
 8004b40:	2100      	movs	r1, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f005 fd7e 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004b48:	4604      	mov	r4, r0
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	681d      	ldr	r5, [r3, #0]
 8004b50:	f107 0310 	add.w	r3, r7, #16
 8004b54:	4936      	ldr	r1, [pc, #216]	; (8004c30 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8004b56:	4618      	mov	r0, r3
 8004b58:	f007 fc9b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004b5c:	f107 0310 	add.w	r3, r7, #16
 8004b60:	4619      	mov	r1, r3
 8004b62:	4620      	mov	r0, r4
 8004b64:	47a8      	blx	r5
 8004b66:	4604      	mov	r4, r0
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	334c      	adds	r3, #76	; 0x4c
 8004b6c:	681d      	ldr	r5, [r3, #0]
 8004b6e:	f107 0318 	add.w	r3, r7, #24
 8004b72:	4930      	ldr	r1, [pc, #192]	; (8004c34 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8004b74:	4618      	mov	r0, r3
 8004b76:	f007 fc8c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004b7a:	f107 0318 	add.w	r3, r7, #24
 8004b7e:	4a2e      	ldr	r2, [pc, #184]	; (8004c38 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8004b80:	4619      	mov	r1, r3
 8004b82:	4620      	mov	r0, r4
 8004b84:	47a8      	blx	r5
 8004b86:	f107 0318 	add.w	r3, r7, #24
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f008 f839 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8004b90:	f107 0310 	add.w	r3, r7, #16
 8004b94:	4618      	mov	r0, r3
 8004b96:	f008 f834 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8004b9a:	f107 0308 	add.w	r3, r7, #8
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f008 f82f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 8004ba4:	f107 0320 	add.w	r3, r7, #32
 8004ba8:	4920      	ldr	r1, [pc, #128]	; (8004c2c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8004baa:	4618      	mov	r0, r3
 8004bac:	f007 fc71 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004bb0:	f107 0320 	add.w	r3, r7, #32
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f005 fd44 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	681d      	ldr	r5, [r3, #0]
 8004bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bc8:	4919      	ldr	r1, [pc, #100]	; (8004c30 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f007 fc61 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	47a8      	blx	r5
 8004bda:	4604      	mov	r4, r0
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	334c      	adds	r3, #76	; 0x4c
 8004be0:	681d      	ldr	r5, [r3, #0]
 8004be2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004be6:	4913      	ldr	r1, [pc, #76]	; (8004c34 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8004be8:	4618      	mov	r0, r3
 8004bea:	f007 fc52 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004bee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bf2:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	47a8      	blx	r5
 8004bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f007 ffff 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8004c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f007 fffa 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8004c0e:	f107 0320 	add.w	r3, r7, #32
 8004c12:	4618      	mov	r0, r3
 8004c14:	f007 fff5 	bl	800cc02 <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 8004c18:	4807      	ldr	r0, [pc, #28]	; (8004c38 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8004c1a:	f7fe fb09 	bl	8003230 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 8004c1e:	4807      	ldr	r0, [pc, #28]	; (8004c3c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8004c20:	f7fe fb06 	bl	8003230 <Send_AT_Command>

	// There is no assertion macro here because the function returns nothing.
	// Mocking library checks if the function has been called.
}
 8004c24:	bf00      	nop
 8004c26:	3738      	adds	r7, #56	; 0x38
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c2c:	08023148 	.word	0x08023148
 8004c30:	0802314c 	.word	0x0802314c
 8004c34:	08023160 	.word	0x08023160
 8004c38:	08023050 	.word	0x08023050
 8004c3c:	0802319c 	.word	0x0802319c

08004c40 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fe96 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004c50:	4a03      	ldr	r2, [pc, #12]	; (8004c60 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	0802702c 	.word	0x0802702c

08004c64 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	22dd      	movs	r2, #221	; 0xdd
 8004c6e:	4906      	ldr	r1, [pc, #24]	; (8004c88 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8004c70:	2004      	movs	r0, #4
 8004c72:	f005 f84b 	bl	8009d0c <_ZnwjPKci>
 8004c76:	4604      	mov	r4, r0
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f7ff ffe1 	bl	8004c40 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8004c7e:	4623      	mov	r3, r4
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd90      	pop	{r4, r7, pc}
 8004c88:	08022e24 	.word	0x08022e24

08004c8c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f00d fc26 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8004c9c:	4a03      	ldr	r2, [pc, #12]	; (8004cac <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	08026f80 	.word	0x08026f80

08004cb0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8004cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb2:	b08f      	sub	sp, #60	; 0x3c
 8004cb4:	af04      	add	r7, sp, #16
 8004cb6:	6078      	str	r0, [r7, #4]

	const char response[] = "OK\r\n";
 8004cb8:	4a31      	ldr	r2, [pc, #196]	; (8004d80 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 8004cba:	f107 030c 	add.w	r3, r7, #12
 8004cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cc2:	6018      	str	r0, [r3, #0]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	7019      	strb	r1, [r3, #0]

	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ccc:	f107 030c 	add.w	r3, r7, #12
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fb fab3 	bl	800023c <strlen>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	da35      	bge.n	8004d4c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8004ce0:	f107 0314 	add.w	r3, r7, #20
 8004ce4:	4927      	ldr	r1, [pc, #156]	; (8004d84 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd4>)
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f007 fbd3 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004cec:	f107 0314 	add.w	r3, r7, #20
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f005 fca6 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	681d      	ldr	r5, [r3, #0]
 8004d00:	f107 031c 	add.w	r3, r7, #28
 8004d04:	4920      	ldr	r1, [pc, #128]	; (8004d88 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd8>)
 8004d06:	4618      	mov	r0, r3
 8004d08:	f007 fbc3 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004d0c:	f107 031c 	add.w	r3, r7, #28
 8004d10:	4619      	mov	r1, r3
 8004d12:	4620      	mov	r0, r4
 8004d14:	47a8      	blx	r5
 8004d16:	4603      	mov	r3, r0
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	3264      	adds	r2, #100	; 0x64
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	f107 000c 	add.w	r0, r7, #12
 8004d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d24:	4401      	add	r1, r0
 8004d26:	7809      	ldrb	r1, [r1, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	4790      	blx	r2
 8004d2c:	f107 031c 	add.w	r3, r7, #28
 8004d30:	4618      	mov	r0, r3
 8004d32:	f007 ff66 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8004d36:	f107 0314 	add.w	r3, r7, #20
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f007 ff61 	bl	800cc02 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8004d40:	f7fe fa84 	bl	800324c <ESP_UART_ReceiveHandler>
	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	3301      	adds	r3, #1
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4a:	e7bf      	b.n	8004ccc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1c>
	}

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the ring buffer.
 8004d4c:	f00e ff84 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8004d50:	4604      	mov	r4, r0
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	3324      	adds	r3, #36	; 0x24
 8004d56:	681d      	ldr	r5, [r3, #0]
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xdc>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68de      	ldr	r6, [r3, #12]
 8004d5e:	f00e ff8b 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d62:	4603      	mov	r3, r0
 8004d64:	9302      	str	r3, [sp, #8]
 8004d66:	23e8      	movs	r3, #232	; 0xe8
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xe0>)
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	4632      	mov	r2, r6
 8004d72:	4903      	ldr	r1, [pc, #12]	; (8004d80 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 8004d74:	4620      	mov	r0, r4
 8004d76:	47a8      	blx	r5

}
 8004d78:	bf00      	nop
 8004d7a:	372c      	adds	r7, #44	; 0x2c
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d80:	080231a4 	.word	0x080231a4
 8004d84:	08023148 	.word	0x08023148
 8004d88:	08023168 	.word	0x08023168
 8004d8c:	2000049c 	.word	0x2000049c
 8004d90:	08022e24 	.word	0x08022e24

08004d94 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fdec 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004da4:	4a03      	ldr	r2, [pc, #12]	; (8004db4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	08026f60 	.word	0x08026f60

08004db8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	22ec      	movs	r2, #236	; 0xec
 8004dc2:	4906      	ldr	r1, [pc, #24]	; (8004ddc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 8004dc4:	2004      	movs	r0, #4
 8004dc6:	f004 ffa1 	bl	8009d0c <_ZnwjPKci>
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f7ff ffe1 	bl	8004d94 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd90      	pop	{r4, r7, pc}
 8004ddc:	08022e24 	.word	0x08022e24

08004de0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f00d fb7c 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8004df0:	4a03      	ldr	r2, [pc, #12]	; (8004e00 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	08026eb4 	.word	0x08026eb4

08004e04 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8004e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e06:	b08f      	sub	sp, #60	; 0x3c
 8004e08:	af04      	add	r7, sp, #16
 8004e0a:	6078      	str	r0, [r7, #4]
	const char response[] = "OK\r\n";
 8004e0c:	4a32      	ldr	r2, [pc, #200]	; (8004ed8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd4>)
 8004e0e:	f107 0308 	add.w	r3, r7, #8
 8004e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e16:	6018      	str	r0, [r3, #0]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	7019      	strb	r1, [r3, #0]

	for(int i=0;i<(int)strlen(response);i++)
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e20:	f107 0308 	add.w	r3, r7, #8
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fb fa09 	bl	800023c <strlen>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	4293      	cmp	r3, r2
 8004e32:	da35      	bge.n	8004ea0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8004e34:	f107 0310 	add.w	r3, r7, #16
 8004e38:	4928      	ldr	r1, [pc, #160]	; (8004edc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd8>)
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f007 fb29 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004e40:	f107 0310 	add.w	r3, r7, #16
 8004e44:	2100      	movs	r1, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	f005 fbfc 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	681d      	ldr	r5, [r3, #0]
 8004e54:	f107 0318 	add.w	r3, r7, #24
 8004e58:	4921      	ldr	r1, [pc, #132]	; (8004ee0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xdc>)
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f007 fb19 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8004e60:	f107 0318 	add.w	r3, r7, #24
 8004e64:	4619      	mov	r1, r3
 8004e66:	4620      	mov	r0, r4
 8004e68:	47a8      	blx	r5
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	3264      	adds	r2, #100	; 0x64
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	f107 0008 	add.w	r0, r7, #8
 8004e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e78:	4401      	add	r1, r0
 8004e7a:	7809      	ldrb	r1, [r1, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	4790      	blx	r2
 8004e80:	f107 0318 	add.w	r3, r7, #24
 8004e84:	4618      	mov	r0, r3
 8004e86:	f007 febc 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8004e8a:	f107 0310 	add.w	r3, r7, #16
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f007 feb7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8004e94:	f7fe f9da 	bl	800324c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9e:	e7bf      	b.n	8004e20 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x1c>
	}

	uint32_t result = Read_Response((char*)"OK");
 8004ea0:	4810      	ldr	r0, [pc, #64]	; (8004ee4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 8004ea2:	f7fe f9e5 	bl	8003270 <Read_Response>
 8004ea6:	6238      	str	r0, [r7, #32]

	LONGS_EQUAL(1,result);
 8004ea8:	f00e fed6 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8004eac:	4604      	mov	r4, r0
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	3338      	adds	r3, #56	; 0x38
 8004eb2:	681d      	ldr	r5, [r3, #0]
 8004eb4:	6a3e      	ldr	r6, [r7, #32]
 8004eb6:	f00e fedf 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	9302      	str	r3, [sp, #8]
 8004ebe:	23f8      	movs	r3, #248	; 0xf8
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	4b09      	ldr	r3, [pc, #36]	; (8004eec <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8004ec8:	4632      	mov	r2, r6
 8004eca:	2101      	movs	r1, #1
 8004ecc:	4620      	mov	r0, r4
 8004ece:	47a8      	blx	r5

}
 8004ed0:	bf00      	nop
 8004ed2:	372c      	adds	r7, #44	; 0x2c
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ed8:	080231a4 	.word	0x080231a4
 8004edc:	08023148 	.word	0x08023148
 8004ee0:	08023168 	.word	0x08023168
 8004ee4:	08022db0 	.word	0x08022db0
 8004ee8:	08022e24 	.word	0x08022e24
 8004eec:	0802317c 	.word	0x0802317c

08004ef0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fd3e 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004f00:	4a03      	ldr	r2, [pc, #12]	; (8004f10 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	08026e94 	.word	0x08026e94

08004f14 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	22fd      	movs	r2, #253	; 0xfd
 8004f1e:	4906      	ldr	r1, [pc, #24]	; (8004f38 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8004f20:	2004      	movs	r0, #4
 8004f22:	f004 fef3 	bl	8009d0c <_ZnwjPKci>
 8004f26:	4604      	mov	r4, r0
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f7ff ffe1 	bl	8004ef0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8004f2e:	4623      	mov	r3, r4
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd90      	pop	{r4, r7, pc}
 8004f38:	08022e24 	.word	0x08022e24

08004f3c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f00d face 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8004f4c:	4a03      	ldr	r2, [pc, #12]	; (8004f5c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	08026de8 	.word	0x08026de8

08004f60 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8004f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af04      	add	r7, sp, #16
 8004f66:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8004f68:	2304      	movs	r3, #4
 8004f6a:	73fb      	strb	r3, [r7, #15]

	while(1)	// wait the message until timeout occurs.
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8004f6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f70:	4811      	ldr	r0, [pc, #68]	; (8004fb8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 8004f72:	f7fe f98f 	bl	8003294 <Wait_Response>
 8004f76:	4603      	mov	r3, r0
 8004f78:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d100      	bne.n	8004f82 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 8004f80:	e7f4      	b.n	8004f6c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 8004f82:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8004f84:	f00e fe68 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8004f88:	4604      	mov	r4, r0
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	3338      	adds	r3, #56	; 0x38
 8004f8e:	681d      	ldr	r5, [r3, #0]
 8004f90:	7bfe      	ldrb	r6, [r7, #15]
 8004f92:	f00e fe71 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004f96:	4603      	mov	r3, r0
 8004f98:	9302      	str	r3, [sp, #8]
 8004f9a:	f240 1309 	movw	r3, #265	; 0x109
 8004f9e:	9301      	str	r3, [sp, #4]
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	2101      	movs	r1, #1
 8004faa:	4620      	mov	r0, r4
 8004fac:	47a8      	blx	r5

}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	08022db0 	.word	0x08022db0
 8004fbc:	08022e24 	.word	0x08022e24
 8004fc0:	080231ac 	.word	0x080231ac

08004fc4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fcd4 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004fd4:	4a03      	ldr	r2, [pc, #12]	; (8004fe4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	08026dc8 	.word	0x08026dc8

08004fe8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8004fe8:	b590      	push	{r4, r7, lr}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	f240 120d 	movw	r2, #269	; 0x10d
 8004ff4:	4906      	ldr	r1, [pc, #24]	; (8005010 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8004ff6:	2004      	movs	r0, #4
 8004ff8:	f004 fe88 	bl	8009d0c <_ZnwjPKci>
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	4620      	mov	r0, r4
 8005000:	f7ff ffe0 	bl	8004fc4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005004:	4623      	mov	r3, r4
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bd90      	pop	{r4, r7, pc}
 800500e:	bf00      	nop
 8005010:	08022e24 	.word	0x08022e24

08005014 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4618      	mov	r0, r3
 8005020:	f00d fa62 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8005024:	4a03      	ldr	r2, [pc, #12]	; (8005034 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	08026d1c 	.word	0x08026d1c

08005038 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503a:	b08f      	sub	sp, #60	; 0x3c
 800503c:	af04      	add	r7, sp, #16
 800503e:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005040:	2304      	movs	r3, #4
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const char response[] = "OK\r\n";
 8005046:	4a38      	ldr	r2, [pc, #224]	; (8005128 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf0>)
 8005048:	f107 0308 	add.w	r3, r7, #8
 800504c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005050:	6018      	str	r0, [r3, #0]
 8005052:	3304      	adds	r3, #4
 8005054:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005056:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800505a:	4834      	ldr	r0, [pc, #208]	; (800512c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf4>)
 800505c:	f7fe f91a 	bl	8003294 <Wait_Response>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(response_state != IDLE)
 8005066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800506a:	2b04      	cmp	r3, #4
 800506c:	d141      	bne.n	80050f2 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xba>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	4618      	mov	r0, r3
 8005078:	f7fb f8e0 	bl	800023c <strlen>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	4293      	cmp	r3, r2
 8005084:	dae7      	bge.n	8005056 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005086:	f107 0310 	add.w	r3, r7, #16
 800508a:	4929      	ldr	r1, [pc, #164]	; (8005130 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf8>)
 800508c:	4618      	mov	r0, r3
 800508e:	f007 fa00 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005092:	f107 0310 	add.w	r3, r7, #16
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f005 fad3 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800509e:	4604      	mov	r4, r0
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	681d      	ldr	r5, [r3, #0]
 80050a6:	f107 0318 	add.w	r3, r7, #24
 80050aa:	4922      	ldr	r1, [pc, #136]	; (8005134 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 80050ac:	4618      	mov	r0, r3
 80050ae:	f007 f9f0 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80050b2:	f107 0318 	add.w	r3, r7, #24
 80050b6:	4619      	mov	r1, r3
 80050b8:	4620      	mov	r0, r4
 80050ba:	47a8      	blx	r5
 80050bc:	4603      	mov	r3, r0
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	3264      	adds	r2, #100	; 0x64
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	f107 0008 	add.w	r0, r7, #8
 80050c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ca:	4401      	add	r1, r0
 80050cc:	7809      	ldrb	r1, [r1, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	4790      	blx	r2
 80050d2:	f107 0318 	add.w	r3, r7, #24
 80050d6:	4618      	mov	r0, r3
 80050d8:	f007 fd93 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80050dc:	f107 0310 	add.w	r3, r7, #16
 80050e0:	4618      	mov	r0, r3
 80050e2:	f007 fd8e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80050e6:	f7fe f8b1 	bl	800324c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	3301      	adds	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
 80050f0:	e7bf      	b.n	8005072 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x3a>
			break;
 80050f2:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 80050f4:	f00e fdb0 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80050f8:	4604      	mov	r4, r0
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	3338      	adds	r3, #56	; 0x38
 80050fe:	681d      	ldr	r5, [r3, #0]
 8005100:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8005104:	f00e fdb8 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005108:	4603      	mov	r3, r0
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	4b09      	ldr	r3, [pc, #36]	; (800513c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005118:	4632      	mov	r2, r6
 800511a:	2100      	movs	r1, #0
 800511c:	4620      	mov	r0, r4
 800511e:	47a8      	blx	r5
}
 8005120:	bf00      	nop
 8005122:	372c      	adds	r7, #44	; 0x2c
 8005124:	46bd      	mov	sp, r7
 8005126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005128:	080231a4 	.word	0x080231a4
 800512c:	08022db0 	.word	0x08022db0
 8005130:	08023148 	.word	0x08023148
 8005134:	08023168 	.word	0x08023168
 8005138:	08022e24 	.word	0x08022e24
 800513c:	080231e0 	.word	0x080231e0

08005140 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fc16 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005150:	4a03      	ldr	r2, [pc, #12]	; (8005160 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	08026cfc 	.word	0x08026cfc

08005164 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	f240 1223 	movw	r2, #291	; 0x123
 8005170:	4906      	ldr	r1, [pc, #24]	; (800518c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005172:	2004      	movs	r0, #4
 8005174:	f004 fdca 	bl	8009d0c <_ZnwjPKci>
 8005178:	4604      	mov	r4, r0
 800517a:	4620      	mov	r0, r4
 800517c:	f7ff ffe0 	bl	8005140 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 8005180:	4623      	mov	r3, r4
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	bd90      	pop	{r4, r7, pc}
 800518a:	bf00      	nop
 800518c:	08022e24 	.word	0x08022e24

08005190 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4618      	mov	r0, r3
 800519c:	f00d f9a4 	bl	80124e8 <_ZN10UtestShellC1Ev>
 80051a0:	4a03      	ldr	r2, [pc, #12]	; (80051b0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	08026c50 	.word	0x08026c50

080051b4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 80051b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b6:	b08f      	sub	sp, #60	; 0x3c
 80051b8:	af04      	add	r7, sp, #16
 80051ba:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 80051c2:	f107 030c 	add.w	r3, r7, #12
 80051c6:	492f      	ldr	r1, [pc, #188]	; (8005284 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80051c8:	4618      	mov	r0, r3
 80051ca:	f007 f962 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80051ce:	f107 030c 	add.w	r3, r7, #12
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f005 fa35 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80051da:	4604      	mov	r4, r0
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	330c      	adds	r3, #12
 80051e0:	681d      	ldr	r5, [r3, #0]
 80051e2:	f107 0314 	add.w	r3, r7, #20
 80051e6:	4928      	ldr	r1, [pc, #160]	; (8005288 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 80051e8:	4618      	mov	r0, r3
 80051ea:	f007 f952 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80051ee:	f107 0314 	add.w	r3, r7, #20
 80051f2:	4619      	mov	r1, r3
 80051f4:	4620      	mov	r0, r4
 80051f6:	47a8      	blx	r5
 80051f8:	4604      	mov	r4, r0
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	334c      	adds	r3, #76	; 0x4c
 80051fe:	681d      	ldr	r5, [r3, #0]
 8005200:	f107 031c 	add.w	r3, r7, #28
 8005204:	4921      	ldr	r1, [pc, #132]	; (800528c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8005206:	4618      	mov	r0, r3
 8005208:	f007 f943 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800520c:	f107 031c 	add.w	r3, r7, #28
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005212:	4619      	mov	r1, r3
 8005214:	4620      	mov	r0, r4
 8005216:	47a8      	blx	r5
 8005218:	f107 031c 	add.w	r3, r7, #28
 800521c:	4618      	mov	r0, r3
 800521e:	f007 fcf0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8005222:	f107 0314 	add.w	r3, r7, #20
 8005226:	4618      	mov	r0, r3
 8005228:	f007 fceb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800522c:	f107 030c 	add.w	r3, r7, #12
 8005230:	4618      	mov	r0, r3
 8005232:	f007 fce6 	bl	800cc02 <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005236:	4917      	ldr	r1, [pc, #92]	; (8005294 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 8005238:	4817      	ldr	r0, [pc, #92]	; (8005298 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 800523a:	f7fe f86d 	bl	8003318 <Connect_Wifi>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005248:	2b04      	cmp	r3, #4
 800524a:	d100      	bne.n	800524e <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 800524c:	e7f3      	b.n	8005236 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 800524e:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005250:	f00e fd02 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8005254:	4604      	mov	r4, r0
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	3338      	adds	r3, #56	; 0x38
 800525a:	681d      	ldr	r5, [r3, #0]
 800525c:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005260:	f00e fd0a 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005264:	4603      	mov	r3, r0
 8005266:	9302      	str	r3, [sp, #8]
 8005268:	f44f 739b 	mov.w	r3, #310	; 0x136
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	4b0b      	ldr	r3, [pc, #44]	; (800529c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005274:	4632      	mov	r2, r6
 8005276:	2101      	movs	r1, #1
 8005278:	4620      	mov	r0, r4
 800527a:	47a8      	blx	r5

}
 800527c:	bf00      	nop
 800527e:	372c      	adds	r7, #44	; 0x2c
 8005280:	46bd      	mov	sp, r7
 8005282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005284:	08023148 	.word	0x08023148
 8005288:	0802314c 	.word	0x0802314c
 800528c:	08023160 	.word	0x08023160
 8005290:	08022db4 	.word	0x08022db4
 8005294:	0802320c 	.word	0x0802320c
 8005298:	08023214 	.word	0x08023214
 800529c:	08022e24 	.word	0x08022e24
 80052a0:	0802321c 	.word	0x0802321c

080052a4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fb64 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80052b4:	4a03      	ldr	r2, [pc, #12]	; (80052c4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	08026c30 	.word	0x08026c30

080052c8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80052d4:	4906      	ldr	r1, [pc, #24]	; (80052f0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 80052d6:	2004      	movs	r0, #4
 80052d8:	f004 fd18 	bl	8009d0c <_ZnwjPKci>
 80052dc:	4604      	mov	r4, r0
 80052de:	4620      	mov	r0, r4
 80052e0:	f7ff ffe0 	bl	80052a4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 80052e4:	4623      	mov	r3, r4
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd90      	pop	{r4, r7, pc}
 80052ee:	bf00      	nop
 80052f0:	08022e24 	.word	0x08022e24

080052f4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4618      	mov	r0, r3
 8005300:	f00d f8f2 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8005304:	4a03      	ldr	r2, [pc, #12]	; (8005314 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	08026b84 	.word	0x08026b84

08005318 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531a:	b0e1      	sub	sp, #388	; 0x184
 800531c:	af04      	add	r7, sp, #16
 800531e:	1d3b      	adds	r3, r7, #4
 8005320:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005322:	4a75      	ldr	r2, [pc, #468]	; (80054f8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e0>)
 8005324:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005328:	4611      	mov	r1, r2
 800532a:	2296      	movs	r2, #150	; 0x96
 800532c:	4618      	mov	r0, r3
 800532e:	f01a fd85 	bl	801fe3c <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									//  disconnect command response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	const char fake_tx_buffer[3][50] =
 8005332:	f107 0308 	add.w	r3, r7, #8
 8005336:	4a71      	ldr	r2, [pc, #452]	; (80054fc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e4>)
 8005338:	4618      	mov	r0, r3
 800533a:	4611      	mov	r1, r2
 800533c:	2396      	movs	r3, #150	; 0x96
 800533e:	461a      	mov	r2, r3
 8005340:	f01a fd7c 	bl	801fe3c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005344:	2300      	movs	r3, #0
 8005346:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800534a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800534e:	2b02      	cmp	r3, #2
 8005350:	dc46      	bgt.n	80053e0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005352:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005356:	496a      	ldr	r1, [pc, #424]	; (8005500 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005358:	4618      	mov	r0, r3
 800535a:	f007 f89a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800535e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005362:	2100      	movs	r1, #0
 8005364:	4618      	mov	r0, r3
 8005366:	f005 f96d 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800536a:	4604      	mov	r4, r0
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	330c      	adds	r3, #12
 8005370:	681d      	ldr	r5, [r3, #0]
 8005372:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005376:	4963      	ldr	r1, [pc, #396]	; (8005504 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005378:	4618      	mov	r0, r3
 800537a:	f007 f88a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800537e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005382:	4619      	mov	r1, r3
 8005384:	4620      	mov	r0, r4
 8005386:	47a8      	blx	r5
 8005388:	4604      	mov	r4, r0
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	334c      	adds	r3, #76	; 0x4c
 800538e:	681d      	ldr	r5, [r3, #0]
 8005390:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005394:	495c      	ldr	r1, [pc, #368]	; (8005508 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005396:	4618      	mov	r0, r3
 8005398:	f007 f87b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800539c:	f107 0208 	add.w	r2, r7, #8
 80053a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80053a4:	2132      	movs	r1, #50	; 0x32
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	441a      	add	r2, r3
 80053ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80053b0:	4619      	mov	r1, r3
 80053b2:	4620      	mov	r0, r4
 80053b4:	47a8      	blx	r5
 80053b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80053ba:	4618      	mov	r0, r3
 80053bc:	f007 fc21 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80053c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80053c4:	4618      	mov	r0, r3
 80053c6:	f007 fc1c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80053ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80053ce:	4618      	mov	r0, r3
 80053d0:	f007 fc17 	bl	800cc02 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80053d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80053d8:	3301      	adds	r3, #1
 80053da:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80053de:	e7b4      	b.n	800534a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 80053e0:	2304      	movs	r3, #4
 80053e2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 80053ec:	4947      	ldr	r1, [pc, #284]	; (800550c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 80053ee:	4848      	ldr	r0, [pc, #288]	; (8005510 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 80053f0:	f7fd ff92 	bl	8003318 <Connect_Wifi>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 80053fa:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d15d      	bne.n	80054be <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1a6>
		{
			break;
		}

		if(i<3)
 8005402:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005406:	2b02      	cmp	r3, #2
 8005408:	dcf0      	bgt.n	80053ec <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800540a:	2300      	movs	r3, #0
 800540c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005410:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005414:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005418:	2132      	movs	r1, #50	; 0x32
 800541a:	fb01 f303 	mul.w	r3, r1, r3
 800541e:	4413      	add	r3, r2
 8005420:	4618      	mov	r0, r3
 8005422:	f7fa ff0b 	bl	800023c <strlen>
 8005426:	4603      	mov	r3, r0
 8005428:	461a      	mov	r2, r3
 800542a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800542e:	4293      	cmp	r3, r2
 8005430:	da3f      	bge.n	80054b2 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x19a>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005432:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005436:	4932      	ldr	r1, [pc, #200]	; (8005500 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005438:	4618      	mov	r0, r3
 800543a:	f007 f82a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800543e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f005 f8fd 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800544a:	4604      	mov	r4, r0
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	330c      	adds	r3, #12
 8005450:	681d      	ldr	r5, [r3, #0]
 8005452:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005456:	492f      	ldr	r1, [pc, #188]	; (8005514 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005458:	4618      	mov	r0, r3
 800545a:	f007 f81a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800545e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005462:	4619      	mov	r1, r3
 8005464:	4620      	mov	r0, r4
 8005466:	47a8      	blx	r5
 8005468:	4603      	mov	r3, r0
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	3264      	adds	r2, #100	; 0x64
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005474:	2032      	movs	r0, #50	; 0x32
 8005476:	fb00 f101 	mul.w	r1, r0, r1
 800547a:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 800547e:	4408      	add	r0, r1
 8005480:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005484:	4401      	add	r1, r0
 8005486:	39d0      	subs	r1, #208	; 0xd0
 8005488:	7809      	ldrb	r1, [r1, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	4790      	blx	r2
 800548e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005492:	4618      	mov	r0, r3
 8005494:	f007 fbb5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8005498:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800549c:	4618      	mov	r0, r3
 800549e:	f007 fbb0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80054a2:	f7fd fed3 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80054a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80054aa:	3301      	adds	r3, #1
 80054ac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80054b0:	e7ae      	b.n	8005410 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xf8>
			}
			i++;
 80054b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80054b6:	3301      	adds	r3, #1
 80054b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 80054bc:	e796      	b.n	80053ec <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
			break;
 80054be:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 80054c0:	f00e fbca 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80054c4:	4604      	mov	r4, r0
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	3338      	adds	r3, #56	; 0x38
 80054ca:	681d      	ldr	r5, [r3, #0]
 80054cc:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 80054d0:	f00e fbd2 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80054d4:	4603      	mov	r3, r0
 80054d6:	9302      	str	r3, [sp, #8]
 80054d8:	f44f 73b1 	mov.w	r3, #354	; 0x162
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 80054e4:	4632      	mov	r2, r6
 80054e6:	2103      	movs	r1, #3
 80054e8:	4620      	mov	r0, r4
 80054ea:	47a8      	blx	r5

}
 80054ec:	bf00      	nop
 80054ee:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f6:	bf00      	nop
 80054f8:	08023274 	.word	0x08023274
 80054fc:	0802330c 	.word	0x0802330c
 8005500:	08023148 	.word	0x08023148
 8005504:	0802314c 	.word	0x0802314c
 8005508:	08023160 	.word	0x08023160
 800550c:	0802320c 	.word	0x0802320c
 8005510:	08023214 	.word	0x08023214
 8005514:	08023168 	.word	0x08023168
 8005518:	08022e24 	.word	0x08022e24
 800551c:	08023248 	.word	0x08023248

08005520 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff fa26 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005530:	4a03      	ldr	r2, [pc, #12]	; (8005540 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	08026b64 	.word	0x08026b64

08005544 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8005550:	4906      	ldr	r1, [pc, #24]	; (800556c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005552:	2004      	movs	r0, #4
 8005554:	f004 fbda 	bl	8009d0c <_ZnwjPKci>
 8005558:	4604      	mov	r4, r0
 800555a:	4620      	mov	r0, r4
 800555c:	f7ff ffe0 	bl	8005520 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005560:	4623      	mov	r3, r4
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	bd90      	pop	{r4, r7, pc}
 800556a:	bf00      	nop
 800556c:	08022e24 	.word	0x08022e24

08005570 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4618      	mov	r0, r3
 800557c:	f00c ffb4 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8005580:	4a03      	ldr	r2, [pc, #12]	; (8005590 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	08026ab8 	.word	0x08026ab8

08005594 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005596:	b0e1      	sub	sp, #388	; 0x184
 8005598:	af04      	add	r7, sp, #16
 800559a:	1d3b      	adds	r3, r7, #4
 800559c:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 800559e:	4a73      	ldr	r2, [pc, #460]	; (800576c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1d8>)
 80055a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80055a4:	4611      	mov	r1, r2
 80055a6:	2296      	movs	r2, #150	; 0x96
 80055a8:	4618      	mov	r0, r3
 80055aa:	f01a fc47 	bl	801fe3c <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	const char fake_tx_buffer[3][50] =
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	4a6f      	ldr	r2, [pc, #444]	; (8005770 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1dc>)
 80055b4:	4618      	mov	r0, r3
 80055b6:	4611      	mov	r1, r2
 80055b8:	2396      	movs	r3, #150	; 0x96
 80055ba:	461a      	mov	r2, r3
 80055bc:	f01a fc3e 	bl	801fe3c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80055c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	dc46      	bgt.n	800565c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 80055ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055d2:	4968      	ldr	r1, [pc, #416]	; (8005774 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 80055d4:	4618      	mov	r0, r3
 80055d6:	f006 ff5c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80055da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055de:	2100      	movs	r1, #0
 80055e0:	4618      	mov	r0, r3
 80055e2:	f005 f82f 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80055e6:	4604      	mov	r4, r0
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	681d      	ldr	r5, [r3, #0]
 80055ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80055f2:	4961      	ldr	r1, [pc, #388]	; (8005778 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e4>)
 80055f4:	4618      	mov	r0, r3
 80055f6:	f006 ff4c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80055fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80055fe:	4619      	mov	r1, r3
 8005600:	4620      	mov	r0, r4
 8005602:	47a8      	blx	r5
 8005604:	4604      	mov	r4, r0
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	334c      	adds	r3, #76	; 0x4c
 800560a:	681d      	ldr	r5, [r3, #0]
 800560c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005610:	495a      	ldr	r1, [pc, #360]	; (800577c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005612:	4618      	mov	r0, r3
 8005614:	f006 ff3d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005618:	f107 0208 	add.w	r2, r7, #8
 800561c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005620:	2132      	movs	r1, #50	; 0x32
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	441a      	add	r2, r3
 8005628:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800562c:	4619      	mov	r1, r3
 800562e:	4620      	mov	r0, r4
 8005630:	47a8      	blx	r5
 8005632:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005636:	4618      	mov	r0, r3
 8005638:	f007 fae3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800563c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005640:	4618      	mov	r0, r3
 8005642:	f007 fade 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8005646:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800564a:	4618      	mov	r0, r3
 800564c:	f007 fad9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005650:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005654:	3301      	adds	r3, #1
 8005656:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800565a:	e7b4      	b.n	80055c6 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005662:	4947      	ldr	r1, [pc, #284]	; (8005780 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005664:	4847      	ldr	r0, [pc, #284]	; (8005784 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005666:	f7fd fe57 	bl	8003318 <Connect_Wifi>
 800566a:	4603      	mov	r3, r0
 800566c:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8005670:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005674:	2b04      	cmp	r3, #4
 8005676:	d15d      	bne.n	8005734 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a0>
		{
			break;
		}

		if(i<3)
 8005678:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800567c:	2b02      	cmp	r3, #2
 800567e:	dcf0      	bgt.n	8005662 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005680:	2300      	movs	r3, #0
 8005682:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005686:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800568a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800568e:	2132      	movs	r1, #50	; 0x32
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	4413      	add	r3, r2
 8005696:	4618      	mov	r0, r3
 8005698:	f7fa fdd0 	bl	800023c <strlen>
 800569c:	4603      	mov	r3, r0
 800569e:	461a      	mov	r2, r3
 80056a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80056a4:	4293      	cmp	r3, r2
 80056a6:	da3f      	bge.n	8005728 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x194>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80056a8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80056ac:	4931      	ldr	r1, [pc, #196]	; (8005774 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 80056ae:	4618      	mov	r0, r3
 80056b0:	f006 feef 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80056b4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80056b8:	2100      	movs	r1, #0
 80056ba:	4618      	mov	r0, r3
 80056bc:	f004 ffc2 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80056c0:	4604      	mov	r4, r0
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	681d      	ldr	r5, [r3, #0]
 80056c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80056cc:	492e      	ldr	r1, [pc, #184]	; (8005788 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 80056ce:	4618      	mov	r0, r3
 80056d0:	f006 fedf 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80056d4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80056d8:	4619      	mov	r1, r3
 80056da:	4620      	mov	r0, r4
 80056dc:	47a8      	blx	r5
 80056de:	4603      	mov	r3, r0
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	3264      	adds	r2, #100	; 0x64
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80056ea:	2032      	movs	r0, #50	; 0x32
 80056ec:	fb00 f101 	mul.w	r1, r0, r1
 80056f0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80056f4:	4408      	add	r0, r1
 80056f6:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 80056fa:	4401      	add	r1, r0
 80056fc:	39d0      	subs	r1, #208	; 0xd0
 80056fe:	7809      	ldrb	r1, [r1, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	4790      	blx	r2
 8005704:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005708:	4618      	mov	r0, r3
 800570a:	f007 fa7a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800570e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005712:	4618      	mov	r0, r3
 8005714:	f007 fa75 	bl	800cc02 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005718:	f7fd fd98 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800571c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005720:	3301      	adds	r3, #1
 8005722:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005726:	e7ae      	b.n	8005686 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xf2>
			}
			i++;
 8005728:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800572c:	3301      	adds	r3, #1
 800572e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005732:	e796      	b.n	8005662 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
			break;
 8005734:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8005736:	f00e fa8f 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800573a:	4604      	mov	r4, r0
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	3338      	adds	r3, #56	; 0x38
 8005740:	681d      	ldr	r5, [r3, #0]
 8005742:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005746:	f00e fa97 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800574a:	4603      	mov	r3, r0
 800574c:	9302      	str	r3, [sp, #8]
 800574e:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 8005752:	9301      	str	r3, [sp, #4]
 8005754:	4b0d      	ldr	r3, [pc, #52]	; (800578c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 800575a:	4632      	mov	r2, r6
 800575c:	2102      	movs	r1, #2
 800575e:	4620      	mov	r0, r4
 8005760:	47a8      	blx	r5

}
 8005762:	bf00      	nop
 8005764:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005768:	46bd      	mov	sp, r7
 800576a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576c:	080233cc 	.word	0x080233cc
 8005770:	0802330c 	.word	0x0802330c
 8005774:	08023148 	.word	0x08023148
 8005778:	0802314c 	.word	0x0802314c
 800577c:	08023160 	.word	0x08023160
 8005780:	0802320c 	.word	0x0802320c
 8005784:	08023214 	.word	0x08023214
 8005788:	08023168 	.word	0x08023168
 800578c:	08022e24 	.word	0x08022e24
 8005790:	080233a4 	.word	0x080233a4

08005794 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff f8ec 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80057a4:	4a03      	ldr	r2, [pc, #12]	; (80057b4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	08026a98 	.word	0x08026a98

080057b8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 80057b8:	b590      	push	{r4, r7, lr}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80057c4:	4906      	ldr	r1, [pc, #24]	; (80057e0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 80057c6:	2004      	movs	r0, #4
 80057c8:	f004 faa0 	bl	8009d0c <_ZnwjPKci>
 80057cc:	4604      	mov	r4, r0
 80057ce:	4620      	mov	r0, r4
 80057d0:	f7ff ffe0 	bl	8005794 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 80057d4:	4623      	mov	r3, r4
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd90      	pop	{r4, r7, pc}
 80057de:	bf00      	nop
 80057e0:	08022e24 	.word	0x08022e24

080057e4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f00c fe7a 	bl	80124e8 <_ZN10UtestShellC1Ev>
 80057f4:	4a03      	ldr	r2, [pc, #12]	; (8005804 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	080269ec 	.word	0x080269ec

08005808 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800580a:	b08f      	sub	sp, #60	; 0x3c
 800580c:	af04      	add	r7, sp, #16
 800580e:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005810:	f107 030c 	add.w	r3, r7, #12
 8005814:	492e      	ldr	r1, [pc, #184]	; (80058d0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 8005816:	4618      	mov	r0, r3
 8005818:	f006 fe3b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800581c:	f107 030c 	add.w	r3, r7, #12
 8005820:	2100      	movs	r1, #0
 8005822:	4618      	mov	r0, r3
 8005824:	f004 ff0e 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005828:	4604      	mov	r4, r0
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	681d      	ldr	r5, [r3, #0]
 8005830:	f107 0314 	add.w	r3, r7, #20
 8005834:	4927      	ldr	r1, [pc, #156]	; (80058d4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 8005836:	4618      	mov	r0, r3
 8005838:	f006 fe2b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800583c:	f107 0314 	add.w	r3, r7, #20
 8005840:	4619      	mov	r1, r3
 8005842:	4620      	mov	r0, r4
 8005844:	47a8      	blx	r5
 8005846:	4604      	mov	r4, r0
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	334c      	adds	r3, #76	; 0x4c
 800584c:	681d      	ldr	r5, [r3, #0]
 800584e:	f107 031c 	add.w	r3, r7, #28
 8005852:	4921      	ldr	r1, [pc, #132]	; (80058d8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005854:	4618      	mov	r0, r3
 8005856:	f006 fe1c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800585a:	f107 031c 	add.w	r3, r7, #28
 800585e:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005860:	4619      	mov	r1, r3
 8005862:	4620      	mov	r0, r4
 8005864:	47a8      	blx	r5
 8005866:	f107 031c 	add.w	r3, r7, #28
 800586a:	4618      	mov	r0, r3
 800586c:	f007 f9c9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8005870:	f107 0314 	add.w	r3, r7, #20
 8005874:	4618      	mov	r0, r3
 8005876:	f007 f9c4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800587a:	f107 030c 	add.w	r3, r7, #12
 800587e:	4618      	mov	r0, r3
 8005880:	f007 f9bf 	bl	800cc02 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8005884:	f7fd fd82 	bl	800338c <Disconnect_Wifi>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 800588e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005892:	2b04      	cmp	r3, #4
 8005894:	d100      	bne.n	8005898 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 8005896:	e7f5      	b.n	8005884 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 8005898:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 800589a:	f00e f9dd 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800589e:	4604      	mov	r4, r0
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	3338      	adds	r3, #56	; 0x38
 80058a4:	681d      	ldr	r5, [r3, #0]
 80058a6:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80058aa:	f00e f9e5 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80058ae:	4603      	mov	r3, r0
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	f240 13a1 	movw	r3, #417	; 0x1a1
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 80058be:	4632      	mov	r2, r6
 80058c0:	2101      	movs	r1, #1
 80058c2:	4620      	mov	r0, r4
 80058c4:	47a8      	blx	r5
}
 80058c6:	bf00      	nop
 80058c8:	372c      	adds	r7, #44	; 0x2c
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ce:	bf00      	nop
 80058d0:	08023148 	.word	0x08023148
 80058d4:	0802314c 	.word	0x0802314c
 80058d8:	08023160 	.word	0x08023160
 80058dc:	08022dc4 	.word	0x08022dc4
 80058e0:	08022e24 	.word	0x08022e24
 80058e4:	0802321c 	.word	0x0802321c

080058e8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff f842 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80058f8:	4a03      	ldr	r2, [pc, #12]	; (8005908 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	080269cc 	.word	0x080269cc

0800590c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 800590c:	b590      	push	{r4, r7, lr}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8005918:	4906      	ldr	r1, [pc, #24]	; (8005934 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 800591a:	2004      	movs	r0, #4
 800591c:	f004 f9f6 	bl	8009d0c <_ZnwjPKci>
 8005920:	4604      	mov	r4, r0
 8005922:	4620      	mov	r0, r4
 8005924:	f7ff ffe0 	bl	80058e8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 8005928:	4623      	mov	r3, r4
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	bd90      	pop	{r4, r7, pc}
 8005932:	bf00      	nop
 8005934:	08022e24 	.word	0x08022e24

08005938 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4618      	mov	r0, r3
 8005944:	f00c fdd0 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8005948:	4a03      	ldr	r2, [pc, #12]	; (8005958 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	08026920 	.word	0x08026920

0800595c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 800595c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595e:	b093      	sub	sp, #76	; 0x4c
 8005960:	af04      	add	r7, sp, #16
 8005962:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005964:	f107 0308 	add.w	r3, r7, #8
 8005968:	494a      	ldr	r1, [pc, #296]	; (8005a94 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 800596a:	4618      	mov	r0, r3
 800596c:	f006 fd91 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005970:	f107 0308 	add.w	r3, r7, #8
 8005974:	2100      	movs	r1, #0
 8005976:	4618      	mov	r0, r3
 8005978:	f004 fe64 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800597c:	4604      	mov	r4, r0
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	330c      	adds	r3, #12
 8005982:	681d      	ldr	r5, [r3, #0]
 8005984:	f107 0310 	add.w	r3, r7, #16
 8005988:	4943      	ldr	r1, [pc, #268]	; (8005a98 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 800598a:	4618      	mov	r0, r3
 800598c:	f006 fd81 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005990:	f107 0310 	add.w	r3, r7, #16
 8005994:	4619      	mov	r1, r3
 8005996:	4620      	mov	r0, r4
 8005998:	47a8      	blx	r5
 800599a:	4604      	mov	r4, r0
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	334c      	adds	r3, #76	; 0x4c
 80059a0:	681d      	ldr	r5, [r3, #0]
 80059a2:	f107 0318 	add.w	r3, r7, #24
 80059a6:	493d      	ldr	r1, [pc, #244]	; (8005a9c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 80059a8:	4618      	mov	r0, r3
 80059aa:	f006 fd72 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80059ae:	f107 0318 	add.w	r3, r7, #24
 80059b2:	4a3b      	ldr	r2, [pc, #236]	; (8005aa0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 80059b4:	4619      	mov	r1, r3
 80059b6:	4620      	mov	r0, r4
 80059b8:	47a8      	blx	r5
 80059ba:	f107 0318 	add.w	r3, r7, #24
 80059be:	4618      	mov	r0, r3
 80059c0:	f007 f91f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80059c4:	f107 0310 	add.w	r3, r7, #16
 80059c8:	4618      	mov	r0, r3
 80059ca:	f007 f91a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	4618      	mov	r0, r3
 80059d4:	f007 f915 	bl	800cc02 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80059d8:	f7fd fcd8 	bl	800338c <Disconnect_Wifi>
 80059dc:	4603      	mov	r3, r0
 80059de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 80059e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d139      	bne.n	8005a5e <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
 80059ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	dcf1      	bgt.n	80059d8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 80059f4:	f107 0320 	add.w	r3, r7, #32
 80059f8:	4926      	ldr	r1, [pc, #152]	; (8005a94 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 80059fa:	4618      	mov	r0, r3
 80059fc:	f006 fd49 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005a00:	f107 0320 	add.w	r3, r7, #32
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f004 fe1c 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	681d      	ldr	r5, [r3, #0]
 8005a14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a18:	4922      	ldr	r1, [pc, #136]	; (8005aa4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f006 fd39 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a24:	4619      	mov	r1, r3
 8005a26:	4620      	mov	r0, r4
 8005a28:	47a8      	blx	r5
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	3264      	adds	r2, #100	; 0x64
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	481d      	ldr	r0, [pc, #116]	; (8005aa8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 8005a34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a36:	4401      	add	r1, r0
 8005a38:	7809      	ldrb	r1, [r1, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	4790      	blx	r2
 8005a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a42:	4618      	mov	r0, r3
 8005a44:	f007 f8dd 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8005a48:	f107 0320 	add.w	r3, r7, #32
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f007 f8d8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005a52:	f7fd fbfb 	bl	800324c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	3301      	adds	r3, #1
 8005a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5c:	e7c7      	b.n	80059ee <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 8005a5e:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8005a60:	f00e f8fa 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8005a64:	4604      	mov	r4, r0
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	3338      	adds	r3, #56	; 0x38
 8005a6a:	681d      	ldr	r5, [r3, #0]
 8005a6c:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8005a70:	f00e f902 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005a74:	4603      	mov	r3, r0
 8005a76:	9302      	str	r3, [sp, #8]
 8005a78:	f240 13b9 	movw	r3, #441	; 0x1b9
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 8005a84:	4632      	mov	r2, r6
 8005a86:	2102      	movs	r1, #2
 8005a88:	4620      	mov	r0, r4
 8005a8a:	47a8      	blx	r5
}
 8005a8c:	bf00      	nop
 8005a8e:	373c      	adds	r7, #60	; 0x3c
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a94:	08023148 	.word	0x08023148
 8005a98:	0802314c 	.word	0x0802314c
 8005a9c:	08023160 	.word	0x08023160
 8005aa0:	08022dc4 	.word	0x08022dc4
 8005aa4:	08023168 	.word	0x08023168
 8005aa8:	08022db0 	.word	0x08022db0
 8005aac:	08022e24 	.word	0x08022e24
 8005ab0:	080233a4 	.word	0x080233a4

08005ab4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fe ff5c 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ac4:	4a03      	ldr	r2, [pc, #12]	; (8005ad4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	08026900 	.word	0x08026900

08005ad8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 8005ad8:	b590      	push	{r4, r7, lr}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8005ae4:	4906      	ldr	r1, [pc, #24]	; (8005b00 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 8005ae6:	2004      	movs	r0, #4
 8005ae8:	f004 f910 	bl	8009d0c <_ZnwjPKci>
 8005aec:	4604      	mov	r4, r0
 8005aee:	4620      	mov	r0, r4
 8005af0:	f7ff ffe0 	bl	8005ab4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 8005af4:	4623      	mov	r3, r4
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd90      	pop	{r4, r7, pc}
 8005afe:	bf00      	nop
 8005b00:	08022e24 	.word	0x08022e24

08005b04 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f00c fcea 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8005b14:	4a03      	ldr	r2, [pc, #12]	; (8005b24 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	08026854 	.word	0x08026854

08005b28 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 8005b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2a:	b09b      	sub	sp, #108	; 0x6c
 8005b2c:	af04      	add	r7, sp, #16
 8005b2e:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 8005b30:	4a6a      	ldr	r2, [pc, #424]	; (8005cdc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b4>)
 8005b32:	f107 0314 	add.w	r3, r7, #20
 8005b36:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)AT_RESPONSE_OK,									// station mode response
	  (char*)AT_RESPONSE_OK,								// check wifi connection response
	  (char*)AT_RESPONSE_OK								// connect wifi command response
	};

	char *fake_command_buffer[3] =
 8005b3c:	4a68      	ldr	r2, [pc, #416]	; (8005ce0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b8>)
 8005b3e:	f107 0308 	add.w	r3, r7, #8
 8005b42:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CWMODE_STATION,
		(char*)AT_CWQAP,
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005b48:	2300      	movs	r3, #0
 8005b4a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	dc43      	bgt.n	8005bda <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8005b52:	f107 0320 	add.w	r3, r7, #32
 8005b56:	4963      	ldr	r1, [pc, #396]	; (8005ce4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f006 fc9a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005b5e:	f107 0320 	add.w	r3, r7, #32
 8005b62:	2100      	movs	r1, #0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f004 fd6d 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	681d      	ldr	r5, [r3, #0]
 8005b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b76:	495c      	ldr	r1, [pc, #368]	; (8005ce8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f006 fc8a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b82:	4619      	mov	r1, r3
 8005b84:	4620      	mov	r0, r4
 8005b86:	47a8      	blx	r5
 8005b88:	4604      	mov	r4, r0
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	334c      	adds	r3, #76	; 0x4c
 8005b8e:	681d      	ldr	r5, [r3, #0]
 8005b90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b94:	4955      	ldr	r1, [pc, #340]	; (8005cec <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 8005b96:	4618      	mov	r0, r3
 8005b98:	f006 fc7b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8005baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	47a8      	blx	r5
 8005bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f007 f822 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8005bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f007 f81d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8005bc8:	f107 0320 	add.w	r3, r7, #32
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f007 f818 	bl	800cc02 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8005bd8:	e7b8      	b.n	8005b4c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 8005bde:	f107 0114 	add.w	r1, r7, #20
 8005be2:	f107 0308 	add.w	r3, r7, #8
 8005be6:	2203      	movs	r2, #3
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fd fbeb 	bl	80033c4 <Command_Process>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response != IDLE)
 8005bf4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d153      	bne.n	8005ca4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x17c>
		{
			break;
		}

		if(i<3)
 8005bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	dced      	bgt.n	8005bde <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005c02:	2300      	movs	r3, #0
 8005c04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005c0e:	4413      	add	r3, r2
 8005c10:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fa fb11 	bl	800023c <strlen>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c20:	4293      	cmp	r3, r2
 8005c22:	da3b      	bge.n	8005c9c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x174>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005c24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c28:	492e      	ldr	r1, [pc, #184]	; (8005ce4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f006 fc31 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005c30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f004 fd04 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	681d      	ldr	r5, [r3, #0]
 8005c44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c48:	4929      	ldr	r1, [pc, #164]	; (8005cf0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f006 fc21 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005c50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c54:	4619      	mov	r1, r3
 8005c56:	4620      	mov	r0, r4
 8005c58:	47a8      	blx	r5
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6813      	ldr	r3, [r2, #0]
 8005c5e:	3364      	adds	r3, #100	; 0x64
 8005c60:	681c      	ldr	r4, [r3, #0]
 8005c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005c6a:	440b      	add	r3, r1
 8005c6c:	f853 1c44 	ldr.w	r1, [r3, #-68]
 8005c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c72:	440b      	add	r3, r1
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	4619      	mov	r1, r3
 8005c78:	4610      	mov	r0, r2
 8005c7a:	47a0      	blx	r4
 8005c7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c80:	4618      	mov	r0, r3
 8005c82:	f006 ffbe 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8005c86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f006 ffb9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005c90:	f7fd fadc 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c96:	3301      	adds	r3, #1
 8005c98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c9a:	e7b4      	b.n	8005c06 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xde>
			}
			i++;
 8005c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 8005ca2:	e79c      	b.n	8005bde <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
			break;
 8005ca4:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8005ca6:	f00d ffd7 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8005caa:	4604      	mov	r4, r0
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	3338      	adds	r3, #56	; 0x38
 8005cb0:	681d      	ldr	r5, [r3, #0]
 8005cb2:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 8005cb6:	f00d ffdf 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	9302      	str	r3, [sp, #8]
 8005cbe:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 8005cca:	4632      	mov	r2, r6
 8005ccc:	2102      	movs	r1, #2
 8005cce:	4620      	mov	r0, r4
 8005cd0:	47a8      	blx	r5

}
 8005cd2:	bf00      	nop
 8005cd4:	375c      	adds	r7, #92	; 0x5c
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	08023464 	.word	0x08023464
 8005ce0:	08023470 	.word	0x08023470
 8005ce4:	08023148 	.word	0x08023148
 8005ce8:	0802314c 	.word	0x0802314c
 8005cec:	08023160 	.word	0x08023160
 8005cf0:	08023168 	.word	0x08023168
 8005cf4:	08022e24 	.word	0x08022e24
 8005cf8:	080233a4 	.word	0x080233a4

08005cfc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fe38 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005d0c:	4a03      	ldr	r2, [pc, #12]	; (8005d1c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	08026834 	.word	0x08026834

08005d20 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8005d20:	b590      	push	{r4, r7, lr}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005d2c:	4906      	ldr	r1, [pc, #24]	; (8005d48 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 8005d2e:	2004      	movs	r0, #4
 8005d30:	f003 ffec 	bl	8009d0c <_ZnwjPKci>
 8005d34:	4604      	mov	r4, r0
 8005d36:	4620      	mov	r0, r4
 8005d38:	f7ff ffe0 	bl	8005cfc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 8005d3c:	4623      	mov	r3, r4
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd90      	pop	{r4, r7, pc}
 8005d46:	bf00      	nop
 8005d48:	08022e24 	.word	0x08022e24

08005d4c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f00c fbc6 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8005d5c:	4a03      	ldr	r2, [pc, #12]	; (8005d6c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	08026788 	.word	0x08026788

08005d70 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 8005d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d72:	b0b1      	sub	sp, #196	; 0xc4
 8005d74:	af04      	add	r7, sp, #16
 8005d76:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8005d78:	4a71      	ldr	r2, [pc, #452]	; (8005f40 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d0>)
 8005d7a:	f107 0314 	add.w	r3, r7, #20
 8005d7e:	4611      	mov	r1, r2
 8005d80:	2264      	movs	r2, #100	; 0x64
 8005d82:	4618      	mov	r0, r3
 8005d84:	f01a f85a 	bl	801fe3c <memcpy>
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char *fake_command_buffer[2] =
 8005d88:	4a6e      	ldr	r2, [pc, #440]	; (8005f44 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d4>)
 8005d8a:	f107 030c 	add.w	r3, r7, #12
 8005d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d92:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8005d96:	2300      	movs	r3, #0
 8005d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	dc46      	bgt.n	8005e32 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8005da4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005da8:	4967      	ldr	r1, [pc, #412]	; (8005f48 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 8005daa:	4618      	mov	r0, r3
 8005dac:	f006 fb71 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005db0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005db4:	2100      	movs	r1, #0
 8005db6:	4618      	mov	r0, r3
 8005db8:	f004 fc44 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	681d      	ldr	r5, [r3, #0]
 8005dc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005dc8:	4960      	ldr	r1, [pc, #384]	; (8005f4c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f006 fb61 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005dd0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	47a8      	blx	r5
 8005dda:	4604      	mov	r4, r0
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	334c      	adds	r3, #76	; 0x4c
 8005de0:	681d      	ldr	r5, [r3, #0]
 8005de2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005de6:	495a      	ldr	r1, [pc, #360]	; (8005f50 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 8005de8:	4618      	mov	r0, r3
 8005dea:	f006 fb52 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005df8:	4413      	add	r3, r2
 8005dfa:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8005dfe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005e02:	4619      	mov	r1, r3
 8005e04:	4620      	mov	r0, r4
 8005e06:	47a8      	blx	r5
 8005e08:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f006 fef8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8005e12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005e16:	4618      	mov	r0, r3
 8005e18:	f006 fef3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8005e1c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e20:	4618      	mov	r0, r3
 8005e22:	f006 feee 	bl	800cc02 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8005e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e30:	e7b4      	b.n	8005d9c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8005e38:	4946      	ldr	r1, [pc, #280]	; (8005f54 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 8005e3a:	4847      	ldr	r0, [pc, #284]	; (8005f58 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 8005e3c:	f7fd fb4c 	bl	80034d8 <Connect_TCP_Server>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 8005e46:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d15d      	bne.n	8005f0a <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 8005e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	dcf0      	bgt.n	8005e38 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e5c:	f107 0214 	add.w	r2, r7, #20
 8005e60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e64:	2132      	movs	r1, #50	; 0x32
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fa f9e5 	bl	800023c <strlen>
 8005e72:	4603      	mov	r3, r0
 8005e74:	461a      	mov	r2, r3
 8005e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	da3f      	bge.n	8005efe <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005e7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e82:	4931      	ldr	r1, [pc, #196]	; (8005f48 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 8005e84:	4618      	mov	r0, r3
 8005e86:	f006 fb04 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005e8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f004 fbd7 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005e96:	4604      	mov	r4, r0
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	681d      	ldr	r5, [r3, #0]
 8005e9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ea2:	492e      	ldr	r1, [pc, #184]	; (8005f5c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f006 faf4 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005eaa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	47a8      	blx	r5
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	3264      	adds	r2, #100	; 0x64
 8005eba:	6812      	ldr	r2, [r2, #0]
 8005ebc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8005ec0:	2032      	movs	r0, #50	; 0x32
 8005ec2:	fb00 f101 	mul.w	r1, r0, r1
 8005ec6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8005eca:	4408      	add	r0, r1
 8005ecc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ed0:	4401      	add	r1, r0
 8005ed2:	399c      	subs	r1, #156	; 0x9c
 8005ed4:	7809      	ldrb	r1, [r1, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	4790      	blx	r2
 8005eda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f006 fe8f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8005ee4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f006 fe8a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005eee:	f7fd f9ad 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005ef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005efc:	e7ae      	b.n	8005e5c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xec>
			}
			i++;
 8005efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f02:	3301      	adds	r3, #1
 8005f04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 8005f08:	e796      	b.n	8005e38 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
			break;
 8005f0a:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8005f0c:	f00d fea4 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8005f10:	4604      	mov	r4, r0
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	3338      	adds	r3, #56	; 0x38
 8005f16:	681d      	ldr	r5, [r3, #0]
 8005f18:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 8005f1c:	f00d feac 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005f20:	4603      	mov	r3, r0
 8005f22:	9302      	str	r3, [sp, #8]
 8005f24:	f44f 7304 	mov.w	r3, #528	; 0x210
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 8005f30:	4632      	mov	r2, r6
 8005f32:	2102      	movs	r1, #2
 8005f34:	4620      	mov	r0, r4
 8005f36:	47a8      	blx	r5

}
 8005f38:	bf00      	nop
 8005f3a:	37b4      	adds	r7, #180	; 0xb4
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f40:	0802348c 	.word	0x0802348c
 8005f44:	080234f0 	.word	0x080234f0
 8005f48:	08023148 	.word	0x08023148
 8005f4c:	0802314c 	.word	0x0802314c
 8005f50:	08023160 	.word	0x08023160
 8005f54:	0802347c 	.word	0x0802347c
 8005f58:	08023480 	.word	0x08023480
 8005f5c:	08023168 	.word	0x08023168
 8005f60:	08022e24 	.word	0x08022e24
 8005f64:	080233a4 	.word	0x080233a4

08005f68 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fd02 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005f78:	4a03      	ldr	r2, [pc, #12]	; (8005f88 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4618      	mov	r0, r3
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	08026768 	.word	0x08026768

08005f8c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 8005f8c:	b590      	push	{r4, r7, lr}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	f44f 7205 	mov.w	r2, #532	; 0x214
 8005f98:	4906      	ldr	r1, [pc, #24]	; (8005fb4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 8005f9a:	2004      	movs	r0, #4
 8005f9c:	f003 feb6 	bl	8009d0c <_ZnwjPKci>
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f7ff ffe0 	bl	8005f68 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 8005fa8:	4623      	mov	r3, r4
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd90      	pop	{r4, r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	08022e24 	.word	0x08022e24

08005fb8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f00c fa90 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8005fc8:	4a03      	ldr	r2, [pc, #12]	; (8005fd8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	080266bc 	.word	0x080266bc

08005fdc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 8005fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fde:	b091      	sub	sp, #68	; 0x44
 8005fe0:	af04      	add	r7, sp, #16
 8005fe2:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[2] =
 8005fe4:	4a33      	ldr	r2, [pc, #204]	; (80060b4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xd8>)
 8005fe6:	f107 030c 	add.w	r3, r7, #12
 8005fea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fee:	e883 0003 	stmia.w	r3, {r0, r1}

		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 8005ff2:	f107 0314 	add.w	r3, r7, #20
 8005ff6:	4930      	ldr	r1, [pc, #192]	; (80060b8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xdc>)
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f006 fa4a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8005ffe:	f107 0314 	add.w	r3, r7, #20
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f004 fb1d 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800600a:	4604      	mov	r4, r0
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	681d      	ldr	r5, [r3, #0]
 8006012:	f107 031c 	add.w	r3, r7, #28
 8006016:	4929      	ldr	r1, [pc, #164]	; (80060bc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe0>)
 8006018:	4618      	mov	r0, r3
 800601a:	f006 fa3a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800601e:	f107 031c 	add.w	r3, r7, #28
 8006022:	4619      	mov	r1, r3
 8006024:	4620      	mov	r0, r4
 8006026:	47a8      	blx	r5
 8006028:	4604      	mov	r4, r0
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	334c      	adds	r3, #76	; 0x4c
 800602e:	681d      	ldr	r5, [r3, #0]
 8006030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006034:	4922      	ldr	r1, [pc, #136]	; (80060c0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 8006036:	4618      	mov	r0, r3
 8006038:	f006 fa2b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006042:	4619      	mov	r1, r3
 8006044:	4620      	mov	r0, r4
 8006046:	47a8      	blx	r5
 8006048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800604c:	4618      	mov	r0, r3
 800604e:	f006 fdd8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8006052:	f107 031c 	add.w	r3, r7, #28
 8006056:	4618      	mov	r0, r3
 8006058:	f006 fdd3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800605c:	f107 0314 	add.w	r3, r7, #20
 8006060:	4618      	mov	r0, r3
 8006062:	f006 fdce 	bl	800cc02 <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006066:	4917      	ldr	r1, [pc, #92]	; (80060c4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 8006068:	4817      	ldr	r0, [pc, #92]	; (80060c8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 800606a:	f7fd fa35 	bl	80034d8 <Connect_TCP_Server>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response != IDLE)
 8006074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006078:	2b04      	cmp	r3, #4
 800607a:	d100      	bne.n	800607e <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xa2>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 800607c:	e7f3      	b.n	8006066 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x8a>
		{
			break;
 800607e:	bf00      	nop
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8006080:	f00d fdea 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8006084:	4604      	mov	r4, r0
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	3338      	adds	r3, #56	; 0x38
 800608a:	681d      	ldr	r5, [r3, #0]
 800608c:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 8006090:	f00d fdf2 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006094:	4603      	mov	r3, r0
 8006096:	9302      	str	r3, [sp, #8]
 8006098:	f240 232b 	movw	r3, #555	; 0x22b
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 80060a4:	4632      	mov	r2, r6
 80060a6:	2101      	movs	r1, #1
 80060a8:	4620      	mov	r0, r4
 80060aa:	47a8      	blx	r5

}
 80060ac:	bf00      	nop
 80060ae:	3734      	adds	r7, #52	; 0x34
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b4:	080234f0 	.word	0x080234f0
 80060b8:	08023148 	.word	0x08023148
 80060bc:	0802314c 	.word	0x0802314c
 80060c0:	08023160 	.word	0x08023160
 80060c4:	0802347c 	.word	0x0802347c
 80060c8:	08023480 	.word	0x08023480
 80060cc:	08022e24 	.word	0x08022e24
 80060d0:	0802321c 	.word	0x0802321c

080060d4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fe fc4c 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80060e4:	4a03      	ldr	r2, [pc, #12]	; (80060f4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	0802669c 	.word	0x0802669c

080060f8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 80060f8:	b590      	push	{r4, r7, lr}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	f240 222f 	movw	r2, #559	; 0x22f
 8006104:	4906      	ldr	r1, [pc, #24]	; (8006120 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 8006106:	2004      	movs	r0, #4
 8006108:	f003 fe00 	bl	8009d0c <_ZnwjPKci>
 800610c:	4604      	mov	r4, r0
 800610e:	4620      	mov	r0, r4
 8006110:	f7ff ffe0 	bl	80060d4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 8006114:	4623      	mov	r3, r4
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	bd90      	pop	{r4, r7, pc}
 800611e:	bf00      	nop
 8006120:	08022e24 	.word	0x08022e24

08006124 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4618      	mov	r0, r3
 8006130:	f00c f9da 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8006134:	4a03      	ldr	r2, [pc, #12]	; (8006144 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	080265f0 	.word	0x080265f0

08006148 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 8006148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614a:	b0b1      	sub	sp, #196	; 0xc4
 800614c:	af04      	add	r7, sp, #16
 800614e:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8006150:	4a71      	ldr	r2, [pc, #452]	; (8006318 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d0>)
 8006152:	f107 0314 	add.w	r3, r7, #20
 8006156:	4611      	mov	r1, r2
 8006158:	2264      	movs	r2, #100	; 0x64
 800615a:	4618      	mov	r0, r3
 800615c:	f019 fe6e 	bl	801fe3c <memcpy>
	{
	  AT_RESPONSE_OK,
	  AT_RESPONSE_ERROR
	};

	char *fake_command_buffer[2] =
 8006160:	4a6e      	ldr	r2, [pc, #440]	; (800631c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d4>)
 8006162:	f107 030c 	add.w	r3, r7, #12
 8006166:	e892 0003 	ldmia.w	r2, {r0, r1}
 800616a:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 800616e:	2300      	movs	r3, #0
 8006170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006178:	2b01      	cmp	r3, #1
 800617a:	dc46      	bgt.n	800620a <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 800617c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006180:	4967      	ldr	r1, [pc, #412]	; (8006320 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 8006182:	4618      	mov	r0, r3
 8006184:	f006 f985 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8006188:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800618c:	2100      	movs	r1, #0
 800618e:	4618      	mov	r0, r3
 8006190:	f004 fa58 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006194:	4604      	mov	r4, r0
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	681d      	ldr	r5, [r3, #0]
 800619c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80061a0:	4960      	ldr	r1, [pc, #384]	; (8006324 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 80061a2:	4618      	mov	r0, r3
 80061a4:	f006 f975 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80061a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80061ac:	4619      	mov	r1, r3
 80061ae:	4620      	mov	r0, r4
 80061b0:	47a8      	blx	r5
 80061b2:	4604      	mov	r4, r0
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	334c      	adds	r3, #76	; 0x4c
 80061b8:	681d      	ldr	r5, [r3, #0]
 80061ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80061be:	495a      	ldr	r1, [pc, #360]	; (8006328 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 80061c0:	4618      	mov	r0, r3
 80061c2:	f006 f966 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80061c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80061d0:	4413      	add	r3, r2
 80061d2:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 80061d6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80061da:	4619      	mov	r1, r3
 80061dc:	4620      	mov	r0, r4
 80061de:	47a8      	blx	r5
 80061e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80061e4:	4618      	mov	r0, r3
 80061e6:	f006 fd0c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80061ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80061ee:	4618      	mov	r0, r3
 80061f0:	f006 fd07 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80061f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80061f8:	4618      	mov	r0, r3
 80061fa:	f006 fd02 	bl	800cc02 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 80061fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006202:	3301      	adds	r3, #1
 8006204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006208:	e7b4      	b.n	8006174 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006210:	4946      	ldr	r1, [pc, #280]	; (800632c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 8006212:	4847      	ldr	r0, [pc, #284]	; (8006330 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 8006214:	f7fd f960 	bl	80034d8 <Connect_TCP_Server>
 8006218:	4603      	mov	r3, r0
 800621a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 800621e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8006222:	2b04      	cmp	r3, #4
 8006224:	d15d      	bne.n	80062e2 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 8006226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800622a:	2b02      	cmp	r3, #2
 800622c:	dcf0      	bgt.n	8006210 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800622e:	2300      	movs	r3, #0
 8006230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006234:	f107 0214 	add.w	r2, r7, #20
 8006238:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800623c:	2132      	movs	r1, #50	; 0x32
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	4413      	add	r3, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f7f9 fff9 	bl	800023c <strlen>
 800624a:	4603      	mov	r3, r0
 800624c:	461a      	mov	r2, r3
 800624e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006252:	4293      	cmp	r3, r2
 8006254:	da3f      	bge.n	80062d6 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006256:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800625a:	4931      	ldr	r1, [pc, #196]	; (8006320 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 800625c:	4618      	mov	r0, r3
 800625e:	f006 f918 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8006262:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f004 f9eb 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800626e:	4604      	mov	r4, r0
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	330c      	adds	r3, #12
 8006274:	681d      	ldr	r5, [r3, #0]
 8006276:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800627a:	492e      	ldr	r1, [pc, #184]	; (8006334 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 800627c:	4618      	mov	r0, r3
 800627e:	f006 f908 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8006282:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006286:	4619      	mov	r1, r3
 8006288:	4620      	mov	r0, r4
 800628a:	47a8      	blx	r5
 800628c:	4603      	mov	r3, r0
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	3264      	adds	r2, #100	; 0x64
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006298:	2032      	movs	r0, #50	; 0x32
 800629a:	fb00 f101 	mul.w	r1, r0, r1
 800629e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80062a2:	4408      	add	r0, r1
 80062a4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062a8:	4401      	add	r1, r0
 80062aa:	399c      	subs	r1, #156	; 0x9c
 80062ac:	7809      	ldrb	r1, [r1, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	4790      	blx	r2
 80062b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80062b6:	4618      	mov	r0, r3
 80062b8:	f006 fca3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80062bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80062c0:	4618      	mov	r0, r3
 80062c2:	f006 fc9e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80062c6:	f7fc ffc1 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80062ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062ce:	3301      	adds	r3, #1
 80062d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062d4:	e7ae      	b.n	8006234 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xec>
			}
			i++;
 80062d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062da:	3301      	adds	r3, #1
 80062dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 80062e0:	e796      	b.n	8006210 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
			break;
 80062e2:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 80062e4:	f00d fcb8 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80062e8:	4604      	mov	r4, r0
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	3338      	adds	r3, #56	; 0x38
 80062ee:	681d      	ldr	r5, [r3, #0]
 80062f0:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 80062f4:	f00d fcc0 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80062f8:	4603      	mov	r3, r0
 80062fa:	9302      	str	r3, [sp, #8]
 80062fc:	f240 2357 	movw	r3, #599	; 0x257
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 8006308:	4632      	mov	r2, r6
 800630a:	2103      	movs	r1, #3
 800630c:	4620      	mov	r0, r4
 800630e:	47a8      	blx	r5

}
 8006310:	bf00      	nop
 8006312:	37b4      	adds	r7, #180	; 0xb4
 8006314:	46bd      	mov	sp, r7
 8006316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006318:	080234f8 	.word	0x080234f8
 800631c:	080234f0 	.word	0x080234f0
 8006320:	08023148 	.word	0x08023148
 8006324:	0802314c 	.word	0x0802314c
 8006328:	08023160 	.word	0x08023160
 800632c:	0802347c 	.word	0x0802347c
 8006330:	08023480 	.word	0x08023480
 8006334:	08023168 	.word	0x08023168
 8006338:	08022e24 	.word	0x08022e24
 800633c:	08023248 	.word	0x08023248

08006340 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe fb16 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006350:	4a03      	ldr	r2, [pc, #12]	; (8006360 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	080265d0 	.word	0x080265d0

08006364 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006364:	b590      	push	{r4, r7, lr}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	f240 225b 	movw	r2, #603	; 0x25b
 8006370:	4906      	ldr	r1, [pc, #24]	; (800638c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006372:	2004      	movs	r0, #4
 8006374:	f003 fcca 	bl	8009d0c <_ZnwjPKci>
 8006378:	4604      	mov	r4, r0
 800637a:	4620      	mov	r0, r4
 800637c:	f7ff ffe0 	bl	8006340 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006380:	4623      	mov	r3, r4
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	bd90      	pop	{r4, r7, pc}
 800638a:	bf00      	nop
 800638c:	08022e24 	.word	0x08022e24

08006390 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4618      	mov	r0, r3
 800639c:	f00c f8a4 	bl	80124e8 <_ZN10UtestShellC1Ev>
 80063a0:	4a03      	ldr	r2, [pc, #12]	; (80063b0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	08026524 	.word	0x08026524

080063b4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 80063b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b6:	b093      	sub	sp, #76	; 0x4c
 80063b8:	af04      	add	r7, sp, #16
 80063ba:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 80063bc:	f107 0308 	add.w	r3, r7, #8
 80063c0:	494a      	ldr	r1, [pc, #296]	; (80064ec <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 80063c2:	4618      	mov	r0, r3
 80063c4:	f006 f865 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80063c8:	f107 0308 	add.w	r3, r7, #8
 80063cc:	2100      	movs	r1, #0
 80063ce:	4618      	mov	r0, r3
 80063d0:	f004 f938 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80063d4:	4604      	mov	r4, r0
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	330c      	adds	r3, #12
 80063da:	681d      	ldr	r5, [r3, #0]
 80063dc:	f107 0310 	add.w	r3, r7, #16
 80063e0:	4943      	ldr	r1, [pc, #268]	; (80064f0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 80063e2:	4618      	mov	r0, r3
 80063e4:	f006 f855 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80063e8:	f107 0310 	add.w	r3, r7, #16
 80063ec:	4619      	mov	r1, r3
 80063ee:	4620      	mov	r0, r4
 80063f0:	47a8      	blx	r5
 80063f2:	4604      	mov	r4, r0
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	334c      	adds	r3, #76	; 0x4c
 80063f8:	681d      	ldr	r5, [r3, #0]
 80063fa:	f107 0318 	add.w	r3, r7, #24
 80063fe:	493d      	ldr	r1, [pc, #244]	; (80064f4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006400:	4618      	mov	r0, r3
 8006402:	f006 f846 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8006406:	f107 0318 	add.w	r3, r7, #24
 800640a:	4a3b      	ldr	r2, [pc, #236]	; (80064f8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 800640c:	4619      	mov	r1, r3
 800640e:	4620      	mov	r0, r4
 8006410:	47a8      	blx	r5
 8006412:	f107 0318 	add.w	r3, r7, #24
 8006416:	4618      	mov	r0, r3
 8006418:	f006 fbf3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800641c:	f107 0310 	add.w	r3, r7, #16
 8006420:	4618      	mov	r0, r3
 8006422:	f006 fbee 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8006426:	f107 0308 	add.w	r3, r7, #8
 800642a:	4618      	mov	r0, r3
 800642c:	f006 fbe9 	bl	800cc02 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006430:	f7fd f88e 	bl	8003550 <Disconnect_TCP_Server>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 800643a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800643e:	2b04      	cmp	r3, #4
 8006440:	d139      	bne.n	80064b6 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006442:	2300      	movs	r3, #0
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
 8006446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006448:	2b01      	cmp	r3, #1
 800644a:	dcf1      	bgt.n	8006430 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 800644c:	f107 0320 	add.w	r3, r7, #32
 8006450:	4926      	ldr	r1, [pc, #152]	; (80064ec <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006452:	4618      	mov	r0, r3
 8006454:	f006 f81d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8006458:	f107 0320 	add.w	r3, r7, #32
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f004 f8f0 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006464:	4604      	mov	r4, r0
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	330c      	adds	r3, #12
 800646a:	681d      	ldr	r5, [r3, #0]
 800646c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006470:	4922      	ldr	r1, [pc, #136]	; (80064fc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006472:	4618      	mov	r0, r3
 8006474:	f006 f80d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8006478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800647c:	4619      	mov	r1, r3
 800647e:	4620      	mov	r0, r4
 8006480:	47a8      	blx	r5
 8006482:	4603      	mov	r3, r0
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	3264      	adds	r2, #100	; 0x64
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	481d      	ldr	r0, [pc, #116]	; (8006500 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 800648c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800648e:	4401      	add	r1, r0
 8006490:	7809      	ldrb	r1, [r1, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	4790      	blx	r2
 8006496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800649a:	4618      	mov	r0, r3
 800649c:	f006 fbb1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80064a0:	f107 0320 	add.w	r3, r7, #32
 80064a4:	4618      	mov	r0, r3
 80064a6:	f006 fbac 	bl	800cc02 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80064aa:	f7fc fecf 	bl	800324c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	3301      	adds	r3, #1
 80064b2:	637b      	str	r3, [r7, #52]	; 0x34
 80064b4:	e7c7      	b.n	8006446 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 80064b6:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 80064b8:	f00d fbce 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80064bc:	4604      	mov	r4, r0
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	3338      	adds	r3, #56	; 0x38
 80064c2:	681d      	ldr	r5, [r3, #0]
 80064c4:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80064c8:	f00d fbd6 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80064cc:	4603      	mov	r3, r0
 80064ce:	9302      	str	r3, [sp, #8]
 80064d0:	f44f 731c 	mov.w	r3, #624	; 0x270
 80064d4:	9301      	str	r3, [sp, #4]
 80064d6:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 80064dc:	4632      	mov	r2, r6
 80064de:	2102      	movs	r1, #2
 80064e0:	4620      	mov	r0, r4
 80064e2:	47a8      	blx	r5

}
 80064e4:	bf00      	nop
 80064e6:	373c      	adds	r7, #60	; 0x3c
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ec:	08023148 	.word	0x08023148
 80064f0:	0802314c 	.word	0x0802314c
 80064f4:	08023160 	.word	0x08023160
 80064f8:	0802355c 	.word	0x0802355c
 80064fc:	08023168 	.word	0x08023168
 8006500:	08022db0 	.word	0x08022db0
 8006504:	08022e24 	.word	0x08022e24
 8006508:	080233a4 	.word	0x080233a4

0800650c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fa30 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800651c:	4a03      	ldr	r2, [pc, #12]	; (800652c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	08026504 	.word	0x08026504

08006530 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006530:	b590      	push	{r4, r7, lr}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	f44f 721d 	mov.w	r2, #628	; 0x274
 800653c:	4906      	ldr	r1, [pc, #24]	; (8006558 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 800653e:	2004      	movs	r0, #4
 8006540:	f003 fbe4 	bl	8009d0c <_ZnwjPKci>
 8006544:	4604      	mov	r4, r0
 8006546:	4620      	mov	r0, r4
 8006548:	f7ff ffe0 	bl	800650c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 800654c:	4623      	mov	r3, r4
 800654e:	4618      	mov	r0, r3
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	bd90      	pop	{r4, r7, pc}
 8006556:	bf00      	nop
 8006558:	08022e24 	.word	0x08022e24

0800655c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4618      	mov	r0, r3
 8006568:	f00b ffbe 	bl	80124e8 <_ZN10UtestShellC1Ev>
 800656c:	4a03      	ldr	r2, [pc, #12]	; (800657c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	08026458 	.word	0x08026458

08006580 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006582:	b0b3      	sub	sp, #204	; 0xcc
 8006584:	af04      	add	r7, sp, #16
 8006586:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8006588:	2300      	movs	r3, #0
 800658a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 800658e:	4a7f      	ldr	r2, [pc, #508]	; (800678c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x20c>)
 8006590:	f107 0308 	add.w	r3, r7, #8
 8006594:	4611      	mov	r1, r2
 8006596:	2264      	movs	r2, #100	; 0x64
 8006598:	4618      	mov	r0, r3
 800659a:	f019 fc4f 	bl	801fe3c <memcpy>
	{ AT_RESPONSE_GREATER_THAN,
	  AT_RESPONSE_SEND_OK,
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n");
 800659e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065a2:	497b      	ldr	r1, [pc, #492]	; (8006790 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 80065a4:	4618      	mov	r0, r3
 80065a6:	f005 ff74 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80065aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065ae:	2100      	movs	r1, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f004 f847 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80065b6:	4604      	mov	r4, r0
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	681d      	ldr	r5, [r3, #0]
 80065be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80065c2:	4974      	ldr	r1, [pc, #464]	; (8006794 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 80065c4:	4618      	mov	r0, r3
 80065c6:	f005 ff64 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80065ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80065ce:	4619      	mov	r1, r3
 80065d0:	4620      	mov	r0, r4
 80065d2:	47a8      	blx	r5
 80065d4:	4604      	mov	r4, r0
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	334c      	adds	r3, #76	; 0x4c
 80065da:	681d      	ldr	r5, [r3, #0]
 80065dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80065e0:	496d      	ldr	r1, [pc, #436]	; (8006798 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 80065e2:	4618      	mov	r0, r3
 80065e4:	f005 ff55 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80065e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80065ec:	4a6b      	ldr	r2, [pc, #428]	; (800679c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 80065ee:	4619      	mov	r1, r3
 80065f0:	4620      	mov	r0, r4
 80065f2:	47a8      	blx	r5
 80065f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80065f8:	4618      	mov	r0, r3
 80065fa:	f006 fb02 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80065fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006602:	4618      	mov	r0, r3
 8006604:	f006 fafd 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8006608:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800660c:	4618      	mov	r0, r3
 800660e:	f006 faf8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 8006612:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006616:	495e      	ldr	r1, [pc, #376]	; (8006790 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006618:	4618      	mov	r0, r3
 800661a:	f005 ff3a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800661e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006622:	2100      	movs	r1, #0
 8006624:	4618      	mov	r0, r3
 8006626:	f004 f80d 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800662a:	4604      	mov	r4, r0
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	330c      	adds	r3, #12
 8006630:	681d      	ldr	r5, [r3, #0]
 8006632:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006636:	4957      	ldr	r1, [pc, #348]	; (8006794 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 8006638:	4618      	mov	r0, r3
 800663a:	f005 ff2a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800663e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006642:	4619      	mov	r1, r3
 8006644:	4620      	mov	r0, r4
 8006646:	47a8      	blx	r5
 8006648:	4604      	mov	r4, r0
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	334c      	adds	r3, #76	; 0x4c
 800664e:	681d      	ldr	r5, [r3, #0]
 8006650:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006654:	4950      	ldr	r1, [pc, #320]	; (8006798 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 8006656:	4618      	mov	r0, r3
 8006658:	f005 ff1b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800665c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006660:	4a4f      	ldr	r2, [pc, #316]	; (80067a0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006662:	4619      	mov	r1, r3
 8006664:	4620      	mov	r0, r4
 8006666:	47a8      	blx	r5
 8006668:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800666c:	4618      	mov	r0, r3
 800666e:	f006 fac8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8006672:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006676:	4618      	mov	r0, r3
 8006678:	f006 fac3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800667c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006680:	4618      	mov	r0, r3
 8006682:	f006 fabe 	bl	800cc02 <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 8006686:	4846      	ldr	r0, [pc, #280]	; (80067a0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006688:	f7fc ff7e 	bl	8003588 <Send_TCP_Message>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response != IDLE)
 8006692:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006696:	2b04      	cmp	r3, #4
 8006698:	d15d      	bne.n	8006756 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1d6>
		{
			break;
		}

		if(i<2)
 800669a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800669e:	2b01      	cmp	r3, #1
 80066a0:	dcf1      	bgt.n	8006686 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80066a2:	2300      	movs	r3, #0
 80066a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066a8:	f107 0208 	add.w	r2, r7, #8
 80066ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066b0:	2132      	movs	r1, #50	; 0x32
 80066b2:	fb01 f303 	mul.w	r3, r1, r3
 80066b6:	4413      	add	r3, r2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7f9 fdbf 	bl	800023c <strlen>
 80066be:	4603      	mov	r3, r0
 80066c0:	461a      	mov	r2, r3
 80066c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066c6:	4293      	cmp	r3, r2
 80066c8:	da3f      	bge.n	800674a <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1ca>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80066ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80066ce:	4930      	ldr	r1, [pc, #192]	; (8006790 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 80066d0:	4618      	mov	r0, r3
 80066d2:	f005 fede 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80066d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80066da:	2100      	movs	r1, #0
 80066dc:	4618      	mov	r0, r3
 80066de:	f003 ffb1 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80066e2:	4604      	mov	r4, r0
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	330c      	adds	r3, #12
 80066e8:	681d      	ldr	r5, [r3, #0]
 80066ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80066ee:	492d      	ldr	r1, [pc, #180]	; (80067a4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 80066f0:	4618      	mov	r0, r3
 80066f2:	f005 fece 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80066f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80066fa:	4619      	mov	r1, r3
 80066fc:	4620      	mov	r0, r4
 80066fe:	47a8      	blx	r5
 8006700:	4603      	mov	r3, r0
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	3264      	adds	r2, #100	; 0x64
 8006706:	6812      	ldr	r2, [r2, #0]
 8006708:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800670c:	2032      	movs	r0, #50	; 0x32
 800670e:	fb00 f101 	mul.w	r1, r0, r1
 8006712:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006716:	4408      	add	r0, r1
 8006718:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800671c:	4401      	add	r1, r0
 800671e:	39b0      	subs	r1, #176	; 0xb0
 8006720:	7809      	ldrb	r1, [r1, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	4790      	blx	r2
 8006726:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800672a:	4618      	mov	r0, r3
 800672c:	f006 fa69 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8006730:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006734:	4618      	mov	r0, r3
 8006736:	f006 fa64 	bl	800cc02 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800673a:	f7fc fd87 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800673e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006742:	3301      	adds	r3, #1
 8006744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006748:	e7ae      	b.n	80066a8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x128>
			}
			i++;
 800674a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800674e:	3301      	adds	r3, #1
 8006750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 8006754:	e797      	b.n	8006686 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
			break;
 8006756:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 8006758:	f00d fa7e 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800675c:	4604      	mov	r4, r0
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	3338      	adds	r3, #56	; 0x38
 8006762:	681d      	ldr	r5, [r3, #0]
 8006764:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 8006768:	f00d fa86 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800676c:	4603      	mov	r3, r0
 800676e:	9302      	str	r3, [sp, #8]
 8006770:	f240 2395 	movw	r3, #661	; 0x295
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 800677c:	4632      	mov	r2, r6
 800677e:	2102      	movs	r1, #2
 8006780:	4620      	mov	r0, r4
 8006782:	47a8      	blx	r5

}
 8006784:	bf00      	nop
 8006786:	37bc      	adds	r7, #188	; 0xbc
 8006788:	46bd      	mov	sp, r7
 800678a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678c:	0802357c 	.word	0x0802357c
 8006790:	08023148 	.word	0x08023148
 8006794:	0802314c 	.word	0x0802314c
 8006798:	08023160 	.word	0x08023160
 800679c:	0802356c 	.word	0x0802356c
 80067a0:	08023058 	.word	0x08023058
 80067a4:	08023168 	.word	0x08023168
 80067a8:	08022e24 	.word	0x08022e24
 80067ac:	080233a4 	.word	0x080233a4

080067b0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe f8de 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80067c0:	4a03      	ldr	r2, [pc, #12]	; (80067d0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	08026438 	.word	0x08026438

080067d4 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 80067d4:	b590      	push	{r4, r7, lr}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	f240 2299 	movw	r2, #665	; 0x299
 80067e0:	4906      	ldr	r1, [pc, #24]	; (80067fc <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 80067e2:	2004      	movs	r0, #4
 80067e4:	f003 fa92 	bl	8009d0c <_ZnwjPKci>
 80067e8:	4604      	mov	r4, r0
 80067ea:	4620      	mov	r0, r4
 80067ec:	f7ff ffe0 	bl	80067b0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 80067f0:	4623      	mov	r3, r4
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd90      	pop	{r4, r7, pc}
 80067fa:	bf00      	nop
 80067fc:	08022e24 	.word	0x08022e24

08006800 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4618      	mov	r0, r3
 800680c:	f00b fe6c 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8006810:	4a03      	ldr	r2, [pc, #12]	; (8006820 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	0802638c 	.word	0x0802638c

08006824 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 8006824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006826:	b0a3      	sub	sp, #140	; 0x8c
 8006828:	af04      	add	r7, sp, #16
 800682a:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 800682c:	4b49      	ldr	r3, [pc, #292]	; (8006954 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 800682e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006832:	461d      	mov	r5, r3
 8006834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	6023      	str	r3, [r4, #0]
 800683c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	605a      	str	r2, [r3, #4]
 8006846:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 8006848:	2304      	movs	r3, #4
 800684a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	f107 0310 	add.w	r3, r7, #16
 8006856:	222e      	movs	r2, #46	; 0x2e
 8006858:	2100      	movs	r1, #0
 800685a:	4618      	mov	r0, r3
 800685c:	f019 fafc 	bl	801fe58 <memset>

	for(int i=0;i<(int)strlen(response);i++)
 8006860:	2300      	movs	r3, #0
 8006862:	677b      	str	r3, [r7, #116]	; 0x74
 8006864:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006868:	4618      	mov	r0, r3
 800686a:	f7f9 fce7 	bl	800023c <strlen>
 800686e:	4603      	mov	r3, r0
 8006870:	461a      	mov	r2, r3
 8006872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006874:	4293      	cmp	r3, r2
 8006876:	da35      	bge.n	80068e4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8006878:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800687c:	4936      	ldr	r1, [pc, #216]	; (8006958 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x134>)
 800687e:	4618      	mov	r0, r3
 8006880:	f005 fe07 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8006884:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006888:	2100      	movs	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f003 feda 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006890:	4604      	mov	r4, r0
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	330c      	adds	r3, #12
 8006896:	681d      	ldr	r5, [r3, #0]
 8006898:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800689c:	492f      	ldr	r1, [pc, #188]	; (800695c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x138>)
 800689e:	4618      	mov	r0, r3
 80068a0:	f005 fdf7 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80068a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80068a8:	4619      	mov	r1, r3
 80068aa:	4620      	mov	r0, r4
 80068ac:	47a8      	blx	r5
 80068ae:	4603      	mov	r3, r0
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	3264      	adds	r2, #100	; 0x64
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80068ba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80068bc:	4401      	add	r1, r0
 80068be:	7809      	ldrb	r1, [r1, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	4790      	blx	r2
 80068c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80068c8:	4618      	mov	r0, r3
 80068ca:	f006 f99a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80068ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80068d2:	4618      	mov	r0, r3
 80068d4:	f006 f995 	bl	800cc02 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80068d8:	f7fc fcb8 	bl	800324c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80068dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068de:	3301      	adds	r3, #1
 80068e0:	677b      	str	r3, [r7, #116]	; 0x74
 80068e2:	e7bf      	b.n	8006864 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x40>
	}

	response_state = Read_TCP_Message(received_message);
 80068e4:	f107 030c 	add.w	r3, r7, #12
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fc fe85 	bl	80035f8 <Read_TCP_Message>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 80068f4:	f00d f9b0 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80068f8:	4604      	mov	r4, r0
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	3338      	adds	r3, #56	; 0x38
 80068fe:	681d      	ldr	r5, [r3, #0]
 8006900:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8006904:	f00d f9b8 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006908:	4603      	mov	r3, r0
 800690a:	9302      	str	r3, [sp, #8]
 800690c:	f240 23a9 	movw	r3, #681	; 0x2a9
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	4b13      	ldr	r3, [pc, #76]	; (8006960 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	4b13      	ldr	r3, [pc, #76]	; (8006964 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x140>)
 8006918:	4632      	mov	r2, r6
 800691a:	2102      	movs	r1, #2
 800691c:	4620      	mov	r0, r4
 800691e:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 8006920:	f00d f99a 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8006924:	4604      	mov	r4, r0
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	3324      	adds	r3, #36	; 0x24
 800692a:	681d      	ldr	r5, [r3, #0]
 800692c:	f00d f9a4 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006930:	4603      	mov	r3, r0
 8006932:	f107 020c 	add.w	r2, r7, #12
 8006936:	9302      	str	r3, [sp, #8]
 8006938:	f240 23ab 	movw	r3, #683	; 0x2ab
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	4b08      	ldr	r3, [pc, #32]	; (8006960 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	2300      	movs	r3, #0
 8006944:	4908      	ldr	r1, [pc, #32]	; (8006968 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x144>)
 8006946:	4620      	mov	r0, r4
 8006948:	47a8      	blx	r5

}
 800694a:	bf00      	nop
 800694c:	377c      	adds	r7, #124	; 0x7c
 800694e:	46bd      	mov	sp, r7
 8006950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006952:	bf00      	nop
 8006954:	08023610 	.word	0x08023610
 8006958:	08023148 	.word	0x08023148
 800695c:	08023168 	.word	0x08023168
 8006960:	08022e24 	.word	0x08022e24
 8006964:	080235e0 	.word	0x080235e0
 8006968:	08023058 	.word	0x08023058

0800696c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe f800 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800697c:	4a03      	ldr	r2, [pc, #12]	; (800698c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	0802636c 	.word	0x0802636c

08006990 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 8006990:	b590      	push	{r4, r7, lr}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	f240 22af 	movw	r2, #687	; 0x2af
 800699c:	4906      	ldr	r1, [pc, #24]	; (80069b8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 800699e:	2004      	movs	r0, #4
 80069a0:	f003 f9b4 	bl	8009d0c <_ZnwjPKci>
 80069a4:	4604      	mov	r4, r0
 80069a6:	4620      	mov	r0, r4
 80069a8:	f7ff ffe0 	bl	800696c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 80069ac:	4623      	mov	r3, r4
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd90      	pop	{r4, r7, pc}
 80069b6:	bf00      	nop
 80069b8:	08022e24 	.word	0x08022e24

080069bc <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f00b fd8e 	bl	80124e8 <_ZN10UtestShellC1Ev>
 80069cc:	4a03      	ldr	r2, [pc, #12]	; (80069dc <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	080262c0 	.word	0x080262c0

080069e0 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 80069e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e2:	b095      	sub	sp, #84	; 0x54
 80069e4:	af04      	add	r7, sp, #16
 80069e6:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50] ={0};
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	f107 0310 	add.w	r3, r7, #16
 80069f6:	222e      	movs	r2, #46	; 0x2e
 80069f8:	2100      	movs	r1, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f019 fa2c 	bl	801fe58 <memset>
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8006a00:	f107 030c 	add.w	r3, r7, #12
 8006a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fc fe59 	bl	80036c0 <Wait_TCP_Message>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 8006a14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d100      	bne.n	8006a1e <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x3e>
		response_state = Wait_TCP_Message(received_message, 1000);
 8006a1c:	e7f0      	b.n	8006a00 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x20>
			break;
 8006a1e:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8006a20:	f00d f91a 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8006a24:	4604      	mov	r4, r0
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	3338      	adds	r3, #56	; 0x38
 8006a2a:	681d      	ldr	r5, [r3, #0]
 8006a2c:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 8006a30:	f00d f922 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006a34:	4603      	mov	r3, r0
 8006a36:	9302      	str	r3, [sp, #8]
 8006a38:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x74>)
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x78>)
 8006a44:	4632      	mov	r2, r6
 8006a46:	2101      	movs	r1, #1
 8006a48:	4620      	mov	r0, r4
 8006a4a:	47a8      	blx	r5

}
 8006a4c:	bf00      	nop
 8006a4e:	3744      	adds	r7, #68	; 0x44
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a54:	08022e24 	.word	0x08022e24
 8006a58:	080231ac 	.word	0x080231ac

08006a5c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fd ff88 	bl	800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006a6c:	4a03      	ldr	r2, [pc, #12]	; (8006a7c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	080262a0 	.word	0x080262a0

08006a80 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 8006a80:	b590      	push	{r4, r7, lr}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8006a8c:	4906      	ldr	r1, [pc, #24]	; (8006aa8 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006a8e:	2004      	movs	r0, #4
 8006a90:	f003 f93c 	bl	8009d0c <_ZnwjPKci>
 8006a94:	4604      	mov	r4, r0
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7ff ffe0 	bl	8006a5c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 8006a9c:	4623      	mov	r3, r4
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd90      	pop	{r4, r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	08022e24 	.word	0x08022e24

08006aac <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f00b fd16 	bl	80124e8 <_ZN10UtestShellC1Ev>
 8006abc:	4a03      	ldr	r2, [pc, #12]	; (8006acc <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	080261f4 	.word	0x080261f4

08006ad0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 8006ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ad2:	b0a3      	sub	sp, #140	; 0x8c
 8006ad4:	af04      	add	r7, sp, #16
 8006ad6:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 8006ad8:	4b4d      	ldr	r3, [pc, #308]	; (8006c10 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 8006ada:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006ade:	461d      	mov	r5, r3
 8006ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006ae8:	6020      	str	r0, [r4, #0]
 8006aea:	3404      	adds	r4, #4
 8006aec:	8021      	strh	r1, [r4, #0]
 8006aee:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8006af8:	2304      	movs	r3, #4
 8006afa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	f107 0310 	add.w	r3, r7, #16
 8006b06:	222e      	movs	r2, #46	; 0x2e
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f019 f9a4 	bl	801fe58 <memset>

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8006b10:	f107 030c 	add.w	r3, r7, #12
 8006b14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fc fdd1 	bl	80036c0 <Wait_TCP_Message>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 8006b24:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d141      	bne.n	8006bb0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xe0>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	677b      	str	r3, [r7, #116]	; 0x74
 8006b30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7f9 fb81 	bl	800023c <strlen>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b40:	4293      	cmp	r3, r2
 8006b42:	dae5      	bge.n	8006b10 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x40>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8006b44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006b48:	4932      	ldr	r1, [pc, #200]	; (8006c14 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f005 fca1 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8006b50:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006b54:	2100      	movs	r1, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f003 fd74 	bl	800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	681d      	ldr	r5, [r3, #0]
 8006b64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b68:	492b      	ldr	r1, [pc, #172]	; (8006c18 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x148>)
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f005 fc91 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8006b70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b74:	4619      	mov	r1, r3
 8006b76:	4620      	mov	r0, r4
 8006b78:	47a8      	blx	r5
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	3264      	adds	r2, #100	; 0x64
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006b86:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006b88:	4401      	add	r1, r0
 8006b8a:	7809      	ldrb	r1, [r1, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	4790      	blx	r2
 8006b90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b94:	4618      	mov	r0, r3
 8006b96:	f006 f834 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8006b9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f006 f82f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006ba4:	f7fc fb52 	bl	800324c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8006ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006baa:	3301      	adds	r3, #1
 8006bac:	677b      	str	r3, [r7, #116]	; 0x74
 8006bae:	e7bf      	b.n	8006b30 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x60>
			break;
 8006bb0:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 8006bb2:	f00d f851 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	3338      	adds	r3, #56	; 0x38
 8006bbc:	681d      	ldr	r5, [r3, #0]
 8006bbe:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8006bc2:	f00d f859 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	9302      	str	r3, [sp, #8]
 8006bca:	f240 23d6 	movw	r3, #726	; 0x2d6
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	4b12      	ldr	r3, [pc, #72]	; (8006c1c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	4b12      	ldr	r3, [pc, #72]	; (8006c20 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x150>)
 8006bd6:	4632      	mov	r2, r6
 8006bd8:	2102      	movs	r1, #2
 8006bda:	4620      	mov	r0, r4
 8006bdc:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 8006bde:	f00d f83b 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8006be2:	4604      	mov	r4, r0
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	3324      	adds	r3, #36	; 0x24
 8006be8:	681d      	ldr	r5, [r3, #0]
 8006bea:	f00d f845 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f107 020c 	add.w	r2, r7, #12
 8006bf4:	9302      	str	r3, [sp, #8]
 8006bf6:	f240 23d7 	movw	r3, #727	; 0x2d7
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	2300      	movs	r3, #0
 8006c02:	4908      	ldr	r1, [pc, #32]	; (8006c24 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x154>)
 8006c04:	4620      	mov	r0, r4
 8006c06:	47a8      	blx	r5

}
 8006c08:	bf00      	nop
 8006c0a:	377c      	adds	r7, #124	; 0x7c
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c10:	08023640 	.word	0x08023640
 8006c14:	08023148 	.word	0x08023148
 8006c18:	08023168 	.word	0x08023168
 8006c1c:	08022e24 	.word	0x08022e24
 8006c20:	080235e0 	.word	0x080235e0
 8006c24:	08023630 	.word	0x08023630

08006c28 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	4a05      	ldr	r2, [pc, #20]	; (8006c48 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f00b fca9 	bl	8012590 <_ZN10UtestShellD1Ev>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	080261f4 	.word	0x080261f4

08006c4c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff ffe7 	bl	8006c28 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 8006c5a:	211c      	movs	r1, #28
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f003 f869 	bl	8009d34 <_ZdlPvj>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	4a05      	ldr	r2, [pc, #20]	; (8006c8c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fd fe8f 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	080262a0 	.word	0x080262a0

08006c90 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff ffe7 	bl	8006c6c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 8006c9e:	2104      	movs	r1, #4
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f003 f847 	bl	8009d34 <_ZdlPvj>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	4a05      	ldr	r2, [pc, #20]	; (8006cd0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f00b fc65 	bl	8012590 <_ZN10UtestShellD1Ev>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	080262c0 	.word	0x080262c0

08006cd4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff ffe7 	bl	8006cb0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 8006ce2:	211c      	movs	r1, #28
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f003 f825 	bl	8009d34 <_ZdlPvj>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	4a05      	ldr	r2, [pc, #20]	; (8006d14 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fd fe4b 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	0802636c 	.word	0x0802636c

08006d18 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff ffe7 	bl	8006cf4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 8006d26:	2104      	movs	r1, #4
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f003 f803 	bl	8009d34 <_ZdlPvj>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	4a05      	ldr	r2, [pc, #20]	; (8006d58 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f00b fc21 	bl	8012590 <_ZN10UtestShellD1Ev>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	0802638c 	.word	0x0802638c

08006d5c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ffe7 	bl	8006d38 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 8006d6a:	211c      	movs	r1, #28
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f002 ffe1 	bl	8009d34 <_ZdlPvj>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	4a05      	ldr	r2, [pc, #20]	; (8006d9c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fd fe07 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	08026438 	.word	0x08026438

08006da0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff ffe7 	bl	8006d7c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 8006dae:	2104      	movs	r1, #4
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f002 ffbf 	bl	8009d34 <_ZdlPvj>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	4a05      	ldr	r2, [pc, #20]	; (8006de0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f00b fbdd 	bl	8012590 <_ZN10UtestShellD1Ev>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	08026458 	.word	0x08026458

08006de4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff ffe7 	bl	8006dc0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 8006df2:	211c      	movs	r1, #28
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f002 ff9d 	bl	8009d34 <_ZdlPvj>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	4a05      	ldr	r2, [pc, #20]	; (8006e24 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fd fdc3 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	08026504 	.word	0x08026504

08006e28 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff ffe7 	bl	8006e04 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 8006e36:	2104      	movs	r1, #4
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f002 ff7b 	bl	8009d34 <_ZdlPvj>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	4a05      	ldr	r2, [pc, #20]	; (8006e68 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f00b fb99 	bl	8012590 <_ZN10UtestShellD1Ev>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	08026524 	.word	0x08026524

08006e6c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff ffe7 	bl	8006e48 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 8006e7a:	211c      	movs	r1, #28
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f002 ff59 	bl	8009d34 <_ZdlPvj>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	4a05      	ldr	r2, [pc, #20]	; (8006eac <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fd fd7f 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	080265d0 	.word	0x080265d0

08006eb0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff ffe7 	bl	8006e8c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 8006ebe:	2104      	movs	r1, #4
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f002 ff37 	bl	8009d34 <_ZdlPvj>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	4a05      	ldr	r2, [pc, #20]	; (8006ef0 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f00b fb55 	bl	8012590 <_ZN10UtestShellD1Ev>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	080265f0 	.word	0x080265f0

08006ef4 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff ffe7 	bl	8006ed0 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 8006f02:	211c      	movs	r1, #28
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f002 ff15 	bl	8009d34 <_ZdlPvj>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	4a05      	ldr	r2, [pc, #20]	; (8006f34 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fd fd3b 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	0802669c 	.word	0x0802669c

08006f38 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff ffe7 	bl	8006f14 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 8006f46:	2104      	movs	r1, #4
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f002 fef3 	bl	8009d34 <_ZdlPvj>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	4a05      	ldr	r2, [pc, #20]	; (8006f78 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f00b fb11 	bl	8012590 <_ZN10UtestShellD1Ev>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	080266bc 	.word	0x080266bc

08006f7c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff ffe7 	bl	8006f58 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 8006f8a:	211c      	movs	r1, #28
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f002 fed1 	bl	8009d34 <_ZdlPvj>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	4a05      	ldr	r2, [pc, #20]	; (8006fbc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fd fcf7 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	08026768 	.word	0x08026768

08006fc0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff ffe7 	bl	8006f9c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 8006fce:	2104      	movs	r1, #4
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f002 feaf 	bl	8009d34 <_ZdlPvj>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	4a05      	ldr	r2, [pc, #20]	; (8007000 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f00b facd 	bl	8012590 <_ZN10UtestShellD1Ev>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	08026788 	.word	0x08026788

08007004 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff ffe7 	bl	8006fe0 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 8007012:	211c      	movs	r1, #28
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f002 fe8d 	bl	8009d34 <_ZdlPvj>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	4a05      	ldr	r2, [pc, #20]	; (8007044 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4618      	mov	r0, r3
 8007036:	f7fd fcb3 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	08026834 	.word	0x08026834

08007048 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff ffe7 	bl	8007024 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 8007056:	2104      	movs	r1, #4
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f002 fe6b 	bl	8009d34 <_ZdlPvj>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	4a05      	ldr	r2, [pc, #20]	; (8007088 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4618      	mov	r0, r3
 800707a:	f00b fa89 	bl	8012590 <_ZN10UtestShellD1Ev>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	08026854 	.word	0x08026854

0800708c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff ffe7 	bl	8007068 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 800709a:	211c      	movs	r1, #28
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f002 fe49 	bl	8009d34 <_ZdlPvj>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	4a05      	ldr	r2, [pc, #20]	; (80070cc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fd fc6f 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	08026900 	.word	0x08026900

080070d0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff ffe7 	bl	80070ac <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 80070de:	2104      	movs	r1, #4
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f002 fe27 	bl	8009d34 <_ZdlPvj>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	4a05      	ldr	r2, [pc, #20]	; (8007110 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4618      	mov	r0, r3
 8007102:	f00b fa45 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	08026920 	.word	0x08026920

08007114 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff ffe7 	bl	80070f0 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 8007122:	211c      	movs	r1, #28
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f002 fe05 	bl	8009d34 <_ZdlPvj>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	4a05      	ldr	r2, [pc, #20]	; (8007154 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4618      	mov	r0, r3
 8007146:	f7fd fc2b 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	080269cc 	.word	0x080269cc

08007158 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff ffe7 	bl	8007134 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 8007166:	2104      	movs	r1, #4
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f002 fde3 	bl	8009d34 <_ZdlPvj>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	4a05      	ldr	r2, [pc, #20]	; (8007198 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4618      	mov	r0, r3
 800718a:	f00b fa01 	bl	8012590 <_ZN10UtestShellD1Ev>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	080269ec 	.word	0x080269ec

0800719c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff ffe7 	bl	8007178 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 80071aa:	211c      	movs	r1, #28
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f002 fdc1 	bl	8009d34 <_ZdlPvj>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	4a05      	ldr	r2, [pc, #20]	; (80071dc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fd fbe7 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4618      	mov	r0, r3
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	08026a98 	.word	0x08026a98

080071e0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff ffe7 	bl	80071bc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 80071ee:	2104      	movs	r1, #4
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f002 fd9f 	bl	8009d34 <_ZdlPvj>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	4a05      	ldr	r2, [pc, #20]	; (8007220 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4618      	mov	r0, r3
 8007212:	f00b f9bd 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	08026ab8 	.word	0x08026ab8

08007224 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff ffe7 	bl	8007200 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8007232:	211c      	movs	r1, #28
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f002 fd7d 	bl	8009d34 <_ZdlPvj>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	4a05      	ldr	r2, [pc, #20]	; (8007264 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4618      	mov	r0, r3
 8007256:	f7fd fba3 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	08026b64 	.word	0x08026b64

08007268 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff ffe7 	bl	8007244 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 8007276:	2104      	movs	r1, #4
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f002 fd5b 	bl	8009d34 <_ZdlPvj>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	4a05      	ldr	r2, [pc, #20]	; (80072a8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4618      	mov	r0, r3
 800729a:	f00b f979 	bl	8012590 <_ZN10UtestShellD1Ev>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	08026b84 	.word	0x08026b84

080072ac <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff ffe7 	bl	8007288 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 80072ba:	211c      	movs	r1, #28
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f002 fd39 	bl	8009d34 <_ZdlPvj>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	4a05      	ldr	r2, [pc, #20]	; (80072ec <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fd fb5f 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	08026c30 	.word	0x08026c30

080072f0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff ffe7 	bl	80072cc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 80072fe:	2104      	movs	r1, #4
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f002 fd17 	bl	8009d34 <_ZdlPvj>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	4a05      	ldr	r2, [pc, #20]	; (8007330 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4618      	mov	r0, r3
 8007322:	f00b f935 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	08026c50 	.word	0x08026c50

08007334 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff ffe7 	bl	8007310 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8007342:	211c      	movs	r1, #28
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f002 fcf5 	bl	8009d34 <_ZdlPvj>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	4a05      	ldr	r2, [pc, #20]	; (8007374 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4618      	mov	r0, r3
 8007366:	f7fd fb1b 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	08026cfc 	.word	0x08026cfc

08007378 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff ffe7 	bl	8007354 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8007386:	2104      	movs	r1, #4
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f002 fcd3 	bl	8009d34 <_ZdlPvj>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	4a05      	ldr	r2, [pc, #20]	; (80073b8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f00b f8f1 	bl	8012590 <_ZN10UtestShellD1Ev>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	08026d1c 	.word	0x08026d1c

080073bc <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff ffe7 	bl	8007398 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 80073ca:	211c      	movs	r1, #28
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f002 fcb1 	bl	8009d34 <_ZdlPvj>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	4a05      	ldr	r2, [pc, #20]	; (80073fc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fd fad7 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	08026dc8 	.word	0x08026dc8

08007400 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff ffe7 	bl	80073dc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 800740e:	2104      	movs	r1, #4
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f002 fc8f 	bl	8009d34 <_ZdlPvj>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	4a05      	ldr	r2, [pc, #20]	; (8007440 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4618      	mov	r0, r3
 8007432:	f00b f8ad 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	08026de8 	.word	0x08026de8

08007444 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff ffe7 	bl	8007420 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8007452:	211c      	movs	r1, #28
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f002 fc6d 	bl	8009d34 <_ZdlPvj>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	4a05      	ldr	r2, [pc, #20]	; (8007484 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4618      	mov	r0, r3
 8007476:	f7fd fa93 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	08026e94 	.word	0x08026e94

08007488 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff ffe7 	bl	8007464 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 8007496:	2104      	movs	r1, #4
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f002 fc4b 	bl	8009d34 <_ZdlPvj>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	4a05      	ldr	r2, [pc, #20]	; (80074c8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f00b f869 	bl	8012590 <_ZN10UtestShellD1Ev>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	08026eb4 	.word	0x08026eb4

080074cc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff ffe7 	bl	80074a8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 80074da:	211c      	movs	r1, #28
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f002 fc29 	bl	8009d34 <_ZdlPvj>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	4a05      	ldr	r2, [pc, #20]	; (800750c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fd fa4f 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	08026f60 	.word	0x08026f60

08007510 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff ffe7 	bl	80074ec <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 800751e:	2104      	movs	r1, #4
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f002 fc07 	bl	8009d34 <_ZdlPvj>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	4a05      	ldr	r2, [pc, #20]	; (8007550 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4618      	mov	r0, r3
 8007542:	f00b f825 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	08026f80 	.word	0x08026f80

08007554 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff ffe7 	bl	8007530 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8007562:	211c      	movs	r1, #28
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f002 fbe5 	bl	8009d34 <_ZdlPvj>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	4a05      	ldr	r2, [pc, #20]	; (8007594 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4618      	mov	r0, r3
 8007586:	f7fd fa0b 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	0802702c 	.word	0x0802702c

08007598 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff ffe7 	bl	8007574 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 80075a6:	2104      	movs	r1, #4
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f002 fbc3 	bl	8009d34 <_ZdlPvj>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	4a05      	ldr	r2, [pc, #20]	; (80075d8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f00a ffe1 	bl	8012590 <_ZN10UtestShellD1Ev>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	0802704c 	.word	0x0802704c

080075dc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff ffe7 	bl	80075b8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 80075ea:	211c      	movs	r1, #28
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f002 fba1 	bl	8009d34 <_ZdlPvj>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	4a05      	ldr	r2, [pc, #20]	; (800761c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4618      	mov	r0, r3
 800760e:	f7fd f9c7 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	080270f8 	.word	0x080270f8

08007620 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff ffe7 	bl	80075fc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 800762e:	2104      	movs	r1, #4
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f002 fb7f 	bl	8009d34 <_ZdlPvj>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	4a05      	ldr	r2, [pc, #20]	; (8007660 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4618      	mov	r0, r3
 8007652:	f00a ff9d 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	08027118 	.word	0x08027118

08007664 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff ffe7 	bl	8007640 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8007672:	211c      	movs	r1, #28
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f002 fb5d 	bl	8009d34 <_ZdlPvj>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	4a05      	ldr	r2, [pc, #20]	; (80076a4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4618      	mov	r0, r3
 8007696:	f7fd f983 	bl	80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	080271c4 	.word	0x080271c4

080076a8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff ffe7 	bl	8007684 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 80076b6:	2104      	movs	r1, #4
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f002 fb3b 	bl	8009d34 <_ZdlPvj>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	4a05      	ldr	r2, [pc, #20]	; (80076e8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4618      	mov	r0, r3
 80076da:	f00a ff59 	bl	8012590 <_ZN10UtestShellD1Ev>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	08027204 	.word	0x08027204

080076ec <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff ffe7 	bl	80076c8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 80076fa:	211c      	movs	r1, #28
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f002 fb19 	bl	8009d34 <_ZdlPvj>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	4a05      	ldr	r2, [pc, #20]	; (800772c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4618      	mov	r0, r3
 800771e:	f7fc faf7 	bl	8003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	080272b0 	.word	0x080272b0

08007730 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff ffe7 	bl	800770c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 800773e:	2108      	movs	r1, #8
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f002 faf7 	bl	8009d34 <_ZdlPvj>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	4a05      	ldr	r2, [pc, #20]	; (8007770 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4618      	mov	r0, r3
 8007762:	f00a ff15 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	080272d0 	.word	0x080272d0

08007774 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff ffe7 	bl	8007750 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8007782:	211c      	movs	r1, #28
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f002 fad5 	bl	8009d34 <_ZdlPvj>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	4a05      	ldr	r2, [pc, #20]	; (80077b4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fc fab3 	bl	8003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	0802737c 	.word	0x0802737c

080077b8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff ffe7 	bl	8007794 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 80077c6:	2108      	movs	r1, #8
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f002 fab3 	bl	8009d34 <_ZdlPvj>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4618      	mov	r0, r3
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	4a05      	ldr	r2, [pc, #20]	; (80077f8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f00a fed1 	bl	8012590 <_ZN10UtestShellD1Ev>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	0802739c 	.word	0x0802739c

080077fc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff ffe7 	bl	80077d8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 800780a:	211c      	movs	r1, #28
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f002 fa91 	bl	8009d34 <_ZdlPvj>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	4a05      	ldr	r2, [pc, #20]	; (800783c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4618      	mov	r0, r3
 800782e:	f7fc fa6f 	bl	8003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	08027448 	.word	0x08027448

08007840 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff ffe7 	bl	800781c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 800784e:	2108      	movs	r1, #8
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f002 fa6f 	bl	8009d34 <_ZdlPvj>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	4a05      	ldr	r2, [pc, #20]	; (8007880 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4618      	mov	r0, r3
 8007872:	f00a fe8d 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	08027468 	.word	0x08027468

08007884 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff ffe7 	bl	8007860 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8007892:	211c      	movs	r1, #28
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f002 fa4d 	bl	8009d34 <_ZdlPvj>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	4a05      	ldr	r2, [pc, #20]	; (80078c4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fc fa2b 	bl	8003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	08027514 	.word	0x08027514

080078c8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ffe7 	bl	80078a4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 80078d6:	2108      	movs	r1, #8
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f002 fa2b 	bl	8009d34 <_ZdlPvj>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	4a05      	ldr	r2, [pc, #20]	; (8007908 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f00a fe49 	bl	8012590 <_ZN10UtestShellD1Ev>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	08027534 	.word	0x08027534

0800790c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff ffe7 	bl	80078e8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 800791a:	211c      	movs	r1, #28
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f002 fa09 	bl	8009d34 <_ZdlPvj>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	4a05      	ldr	r2, [pc, #20]	; (800794c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4618      	mov	r0, r3
 800793e:	f7fc f9e7 	bl	8003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	080275e0 	.word	0x080275e0

08007950 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff ffe7 	bl	800792c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 800795e:	2108      	movs	r1, #8
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f002 f9e7 	bl	8009d34 <_ZdlPvj>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	4a05      	ldr	r2, [pc, #20]	; (8007990 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4618      	mov	r0, r3
 8007982:	f00a fe05 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	08027600 	.word	0x08027600

08007994 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff ffe7 	bl	8007970 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 80079a2:	211c      	movs	r1, #28
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f002 f9c5 	bl	8009d34 <_ZdlPvj>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	4a05      	ldr	r2, [pc, #20]	; (80079d4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fc f9a3 	bl	8003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	080276ac 	.word	0x080276ac

080079d8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff ffe7 	bl	80079b4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 80079e6:	2108      	movs	r1, #8
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f002 f9a3 	bl	8009d34 <_ZdlPvj>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	4a05      	ldr	r2, [pc, #20]	; (8007a18 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f00a fdc1 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	080276cc 	.word	0x080276cc

08007a1c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff ffe7 	bl	80079f8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8007a2a:	211c      	movs	r1, #28
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f002 f981 	bl	8009d34 <_ZdlPvj>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	4a05      	ldr	r2, [pc, #20]	; (8007a5c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fc f95f 	bl	8003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	08027778 	.word	0x08027778

08007a60 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff ffe7 	bl	8007a3c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8007a6e:	2108      	movs	r1, #8
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f002 f95f 	bl	8009d34 <_ZdlPvj>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	4a05      	ldr	r2, [pc, #20]	; (8007aa0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f00a fd7d 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	08027798 	.word	0x08027798

08007aa4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff ffe7 	bl	8007a80 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8007ab2:	211c      	movs	r1, #28
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f002 f93d 	bl	8009d34 <_ZdlPvj>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	4a05      	ldr	r2, [pc, #20]	; (8007ae4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fc f91b 	bl	8003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	08027844 	.word	0x08027844

08007ae8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff ffe7 	bl	8007ac4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8007af6:	2108      	movs	r1, #8
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f002 f91b 	bl	8009d34 <_ZdlPvj>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	4a05      	ldr	r2, [pc, #20]	; (8007b28 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f00a fd39 	bl	8012590 <_ZN10UtestShellD1Ev>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	08027864 	.word	0x08027864

08007b2c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff ffe7 	bl	8007b08 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8007b3a:	211c      	movs	r1, #28
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f002 f8f9 	bl	8009d34 <_ZdlPvj>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	4a05      	ldr	r2, [pc, #20]	; (8007b6c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fc f8d7 	bl	8003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	08027910 	.word	0x08027910

08007b70 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7ff ffe7 	bl	8007b4c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8007b7e:	2108      	movs	r1, #8
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f002 f8d7 	bl	8009d34 <_ZdlPvj>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <_Z41__static_initialization_and_destruction_0ii>:
}
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	f040 8224 	bne.w	8007fea <_Z41__static_initialization_and_destruction_0ii+0x45a>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	f040 821e 	bne.w	8007fea <_Z41__static_initialization_and_destruction_0ii+0x45a>
TEST(RingBuffer_Test_Group, InitTest)
 8007bae:	489f      	ldr	r0, [pc, #636]	; (8007e2c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8007bb0:	f7fc f8fc 	bl	8003dac <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8007bb4:	2328      	movs	r3, #40	; 0x28
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	4b9d      	ldr	r3, [pc, #628]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	4b9d      	ldr	r3, [pc, #628]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8007bbe:	4a9e      	ldr	r2, [pc, #632]	; (8007e38 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007bc0:	499a      	ldr	r1, [pc, #616]	; (8007e2c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8007bc2:	489e      	ldr	r0, [pc, #632]	; (8007e3c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8007bc4:	f00c fae0 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8007bc8:	489d      	ldr	r0, [pc, #628]	; (8007e40 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007bca:	f7fc f9a3 	bl	8003f14 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8007bce:	2332      	movs	r3, #50	; 0x32
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	4b97      	ldr	r3, [pc, #604]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	4b9b      	ldr	r3, [pc, #620]	; (8007e44 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8007bd8:	4a97      	ldr	r2, [pc, #604]	; (8007e38 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007bda:	4999      	ldr	r1, [pc, #612]	; (8007e40 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007bdc:	489a      	ldr	r0, [pc, #616]	; (8007e48 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8007bde:	f00c fad3 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8007be2:	489a      	ldr	r0, [pc, #616]	; (8007e4c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8007be4:	f7fc fa20 	bl	8004028 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8007be8:	233c      	movs	r3, #60	; 0x3c
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	4b90      	ldr	r3, [pc, #576]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	4b97      	ldr	r3, [pc, #604]	; (8007e50 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8007bf2:	4a91      	ldr	r2, [pc, #580]	; (8007e38 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007bf4:	4995      	ldr	r1, [pc, #596]	; (8007e4c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8007bf6:	4897      	ldr	r0, [pc, #604]	; (8007e54 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8007bf8:	f00c fac6 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8007bfc:	4896      	ldr	r0, [pc, #600]	; (8007e58 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8007bfe:	f7fc fa9b 	bl	8004138 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8007c02:	2347      	movs	r3, #71	; 0x47
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	4b8a      	ldr	r3, [pc, #552]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	4b94      	ldr	r3, [pc, #592]	; (8007e5c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8007c0c:	4a8a      	ldr	r2, [pc, #552]	; (8007e38 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c0e:	4992      	ldr	r1, [pc, #584]	; (8007e58 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8007c10:	4893      	ldr	r0, [pc, #588]	; (8007e60 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8007c12:	f00c fab9 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8007c16:	4893      	ldr	r0, [pc, #588]	; (8007e64 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8007c18:	f7fc fafa 	bl	8004210 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8007c1c:	2350      	movs	r3, #80	; 0x50
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	4b83      	ldr	r3, [pc, #524]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	4b90      	ldr	r3, [pc, #576]	; (8007e68 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8007c26:	4a84      	ldr	r2, [pc, #528]	; (8007e38 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c28:	498e      	ldr	r1, [pc, #568]	; (8007e64 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8007c2a:	4890      	ldr	r0, [pc, #576]	; (8007e6c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8007c2c:	f00c faac 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007c30:	488f      	ldr	r0, [pc, #572]	; (8007e70 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8007c32:	f7fc fb79 	bl	8004328 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8007c36:	2360      	movs	r3, #96	; 0x60
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	4b7d      	ldr	r3, [pc, #500]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	4b8d      	ldr	r3, [pc, #564]	; (8007e74 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8007c40:	4a7d      	ldr	r2, [pc, #500]	; (8007e38 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c42:	498b      	ldr	r1, [pc, #556]	; (8007e70 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8007c44:	488c      	ldr	r0, [pc, #560]	; (8007e78 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8007c46:	f00c fa9f 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8007c4a:	488c      	ldr	r0, [pc, #560]	; (8007e7c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8007c4c:	f7fc fc2a 	bl	80044a4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8007c50:	2375      	movs	r3, #117	; 0x75
 8007c52:	9301      	str	r3, [sp, #4]
 8007c54:	4b76      	ldr	r3, [pc, #472]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	4b89      	ldr	r3, [pc, #548]	; (8007e80 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8007c5a:	4a77      	ldr	r2, [pc, #476]	; (8007e38 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c5c:	4987      	ldr	r1, [pc, #540]	; (8007e7c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8007c5e:	4889      	ldr	r0, [pc, #548]	; (8007e84 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8007c60:	f00c fa92 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8007c64:	4888      	ldr	r0, [pc, #544]	; (8007e88 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8007c66:	f7fc fc83 	bl	8004570 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8007c6a:	237c      	movs	r3, #124	; 0x7c
 8007c6c:	9301      	str	r3, [sp, #4]
 8007c6e:	4b70      	ldr	r3, [pc, #448]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	4b86      	ldr	r3, [pc, #536]	; (8007e8c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8007c74:	4a70      	ldr	r2, [pc, #448]	; (8007e38 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c76:	4984      	ldr	r1, [pc, #528]	; (8007e88 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8007c78:	4885      	ldr	r0, [pc, #532]	; (8007e90 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8007c7a:	f00c fa85 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8007c7e:	4885      	ldr	r0, [pc, #532]	; (8007e94 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8007c80:	f7fc fd60 	bl	8004744 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8007c84:	2384      	movs	r3, #132	; 0x84
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	4b69      	ldr	r3, [pc, #420]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	4b82      	ldr	r3, [pc, #520]	; (8007e98 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8007c8e:	4a6a      	ldr	r2, [pc, #424]	; (8007e38 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c90:	4980      	ldr	r1, [pc, #512]	; (8007e94 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8007c92:	4882      	ldr	r0, [pc, #520]	; (8007e9c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8007c94:	f00c fa78 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007c98:	4881      	ldr	r0, [pc, #516]	; (8007ea0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8007c9a:	f7fc fec9 	bl	8004a30 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8007c9e:	23bf      	movs	r3, #191	; 0xbf
 8007ca0:	9301      	str	r3, [sp, #4]
 8007ca2:	4b63      	ldr	r3, [pc, #396]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	4b7f      	ldr	r3, [pc, #508]	; (8007ea4 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8007ca8:	4a7f      	ldr	r2, [pc, #508]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007caa:	497d      	ldr	r1, [pc, #500]	; (8007ea0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8007cac:	487f      	ldr	r0, [pc, #508]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8007cae:	f00c fa6b 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007cb2:	487f      	ldr	r0, [pc, #508]	; (8007eb0 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8007cb4:	f7fc ff26 	bl	8004b04 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8007cb8:	23d1      	movs	r3, #209	; 0xd1
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	4b5c      	ldr	r3, [pc, #368]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4b7c      	ldr	r3, [pc, #496]	; (8007eb4 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8007cc2:	4a79      	ldr	r2, [pc, #484]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007cc4:	497a      	ldr	r1, [pc, #488]	; (8007eb0 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8007cc6:	487c      	ldr	r0, [pc, #496]	; (8007eb8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8007cc8:	f00c fa5e 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007ccc:	487b      	ldr	r0, [pc, #492]	; (8007ebc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8007cce:	f7fc ffdd 	bl	8004c8c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8007cd2:	23dd      	movs	r3, #221	; 0xdd
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	4b56      	ldr	r3, [pc, #344]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	4b79      	ldr	r3, [pc, #484]	; (8007ec0 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8007cdc:	4a72      	ldr	r2, [pc, #456]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007cde:	4977      	ldr	r1, [pc, #476]	; (8007ebc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8007ce0:	4878      	ldr	r0, [pc, #480]	; (8007ec4 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8007ce2:	f00c fa51 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8007ce6:	4878      	ldr	r0, [pc, #480]	; (8007ec8 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8007ce8:	f7fd f87a 	bl	8004de0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8007cec:	23ec      	movs	r3, #236	; 0xec
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	4b4f      	ldr	r3, [pc, #316]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	4b75      	ldr	r3, [pc, #468]	; (8007ecc <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8007cf6:	4a6c      	ldr	r2, [pc, #432]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007cf8:	4973      	ldr	r1, [pc, #460]	; (8007ec8 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8007cfa:	4875      	ldr	r0, [pc, #468]	; (8007ed0 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8007cfc:	f00c fa44 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007d00:	4874      	ldr	r0, [pc, #464]	; (8007ed4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8007d02:	f7fd f91b 	bl	8004f3c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8007d06:	23fd      	movs	r3, #253	; 0xfd
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	4b49      	ldr	r3, [pc, #292]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	4b72      	ldr	r3, [pc, #456]	; (8007ed8 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8007d10:	4a65      	ldr	r2, [pc, #404]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007d12:	4970      	ldr	r1, [pc, #448]	; (8007ed4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8007d14:	4871      	ldr	r0, [pc, #452]	; (8007edc <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8007d16:	f00c fa37 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007d1a:	4871      	ldr	r0, [pc, #452]	; (8007ee0 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8007d1c:	f7fd f97a 	bl	8005014 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8007d20:	f240 130d 	movw	r3, #269	; 0x10d
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	4b42      	ldr	r3, [pc, #264]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	4b6e      	ldr	r3, [pc, #440]	; (8007ee4 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8007d2c:	4a5e      	ldr	r2, [pc, #376]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007d2e:	496c      	ldr	r1, [pc, #432]	; (8007ee0 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8007d30:	486d      	ldr	r0, [pc, #436]	; (8007ee8 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8007d32:	f00c fa29 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007d36:	486d      	ldr	r0, [pc, #436]	; (8007eec <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8007d38:	f7fd fa2a 	bl	8005190 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8007d3c:	f240 1323 	movw	r3, #291	; 0x123
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	4b3b      	ldr	r3, [pc, #236]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	4b6a      	ldr	r3, [pc, #424]	; (8007ef0 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8007d48:	4a57      	ldr	r2, [pc, #348]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007d4a:	4968      	ldr	r1, [pc, #416]	; (8007eec <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8007d4c:	4869      	ldr	r0, [pc, #420]	; (8007ef4 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8007d4e:	f00c fa1b 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007d52:	4869      	ldr	r0, [pc, #420]	; (8007ef8 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8007d54:	f7fd face 	bl	80052f4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8007d58:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	4b34      	ldr	r3, [pc, #208]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	4b66      	ldr	r3, [pc, #408]	; (8007efc <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8007d64:	4a50      	ldr	r2, [pc, #320]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007d66:	4964      	ldr	r1, [pc, #400]	; (8007ef8 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8007d68:	4865      	ldr	r0, [pc, #404]	; (8007f00 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8007d6a:	f00c fa0d 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007d6e:	4865      	ldr	r0, [pc, #404]	; (8007f04 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8007d70:	f7fd fbfe 	bl	8005570 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 8007d74:	f44f 73b3 	mov.w	r3, #358	; 0x166
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	4b2d      	ldr	r3, [pc, #180]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	4b62      	ldr	r3, [pc, #392]	; (8007f08 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8007d80:	4a49      	ldr	r2, [pc, #292]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007d82:	4960      	ldr	r1, [pc, #384]	; (8007f04 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8007d84:	4861      	ldr	r0, [pc, #388]	; (8007f0c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8007d86:	f00c f9ff 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8007d8a:	4861      	ldr	r0, [pc, #388]	; (8007f10 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8007d8c:	f7fd fd2a 	bl	80057e4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 8007d90:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	4b26      	ldr	r3, [pc, #152]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	4b5e      	ldr	r3, [pc, #376]	; (8007f14 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8007d9c:	4a42      	ldr	r2, [pc, #264]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007d9e:	495c      	ldr	r1, [pc, #368]	; (8007f10 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8007da0:	485d      	ldr	r0, [pc, #372]	; (8007f18 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8007da2:	f00c f9f1 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007da6:	485d      	ldr	r0, [pc, #372]	; (8007f1c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8007da8:	f7fd fdc6 	bl	8005938 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 8007dac:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	4b1f      	ldr	r3, [pc, #124]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	4b5a      	ldr	r3, [pc, #360]	; (8007f20 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8007db8:	4a3b      	ldr	r2, [pc, #236]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007dba:	4958      	ldr	r1, [pc, #352]	; (8007f1c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8007dbc:	4859      	ldr	r0, [pc, #356]	; (8007f24 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8007dbe:	f00c f9e3 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8007dc2:	4859      	ldr	r0, [pc, #356]	; (8007f28 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8007dc4:	f7fd fe9e 	bl	8005b04 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 8007dc8:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	4b18      	ldr	r3, [pc, #96]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	4b56      	ldr	r3, [pc, #344]	; (8007f2c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8007dd4:	4a34      	ldr	r2, [pc, #208]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007dd6:	4954      	ldr	r1, [pc, #336]	; (8007f28 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8007dd8:	4855      	ldr	r0, [pc, #340]	; (8007f30 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8007dda:	f00c f9d5 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8007dde:	4855      	ldr	r0, [pc, #340]	; (8007f34 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8007de0:	f7fd ffb4 	bl	8005d4c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 8007de4:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	4b11      	ldr	r3, [pc, #68]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	4b52      	ldr	r3, [pc, #328]	; (8007f38 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8007df0:	4a2d      	ldr	r2, [pc, #180]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007df2:	4950      	ldr	r1, [pc, #320]	; (8007f34 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8007df4:	4851      	ldr	r0, [pc, #324]	; (8007f3c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8007df6:	f00c f9c7 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8007dfa:	4851      	ldr	r0, [pc, #324]	; (8007f40 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8007dfc:	f7fe f8dc 	bl	8005fb8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8007e00:	f44f 7305 	mov.w	r3, #532	; 0x214
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	4b4e      	ldr	r3, [pc, #312]	; (8007f44 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8007e0c:	4a26      	ldr	r2, [pc, #152]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007e0e:	494c      	ldr	r1, [pc, #304]	; (8007f40 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8007e10:	484d      	ldr	r0, [pc, #308]	; (8007f48 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8007e12:	f00c f9b9 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8007e16:	484d      	ldr	r0, [pc, #308]	; (8007f4c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8007e18:	f7fe f984 	bl	8006124 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 8007e1c:	f240 232f 	movw	r3, #559	; 0x22f
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	4b03      	ldr	r3, [pc, #12]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	4b4a      	ldr	r3, [pc, #296]	; (8007f50 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8007e28:	e094      	b.n	8007f54 <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 8007e2a:	bf00      	nop
 8007e2c:	200004a0 	.word	0x200004a0
 8007e30:	08022e24 	.word	0x08022e24
 8007e34:	08023660 	.word	0x08023660
 8007e38:	0802366c 	.word	0x0802366c
 8007e3c:	200004bc 	.word	0x200004bc
 8007e40:	200004c0 	.word	0x200004c0
 8007e44:	08023684 	.word	0x08023684
 8007e48:	200004dc 	.word	0x200004dc
 8007e4c:	200004e0 	.word	0x200004e0
 8007e50:	08023694 	.word	0x08023694
 8007e54:	200004fc 	.word	0x200004fc
 8007e58:	20000500 	.word	0x20000500
 8007e5c:	080236a8 	.word	0x080236a8
 8007e60:	2000051c 	.word	0x2000051c
 8007e64:	20000520 	.word	0x20000520
 8007e68:	080236b8 	.word	0x080236b8
 8007e6c:	2000053c 	.word	0x2000053c
 8007e70:	20000540 	.word	0x20000540
 8007e74:	080236d0 	.word	0x080236d0
 8007e78:	2000055c 	.word	0x2000055c
 8007e7c:	20000560 	.word	0x20000560
 8007e80:	080236e0 	.word	0x080236e0
 8007e84:	2000057c 	.word	0x2000057c
 8007e88:	20000580 	.word	0x20000580
 8007e8c:	080236f0 	.word	0x080236f0
 8007e90:	2000059c 	.word	0x2000059c
 8007e94:	200005a0 	.word	0x200005a0
 8007e98:	080236fc 	.word	0x080236fc
 8007e9c:	200005bc 	.word	0x200005bc
 8007ea0:	200005c8 	.word	0x200005c8
 8007ea4:	0802370c 	.word	0x0802370c
 8007ea8:	0802371c 	.word	0x0802371c
 8007eac:	200005e4 	.word	0x200005e4
 8007eb0:	200005e8 	.word	0x200005e8
 8007eb4:	08023734 	.word	0x08023734
 8007eb8:	20000604 	.word	0x20000604
 8007ebc:	20000608 	.word	0x20000608
 8007ec0:	0802374c 	.word	0x0802374c
 8007ec4:	20000624 	.word	0x20000624
 8007ec8:	20000628 	.word	0x20000628
 8007ecc:	08023768 	.word	0x08023768
 8007ed0:	20000644 	.word	0x20000644
 8007ed4:	20000648 	.word	0x20000648
 8007ed8:	0802377c 	.word	0x0802377c
 8007edc:	20000664 	.word	0x20000664
 8007ee0:	20000668 	.word	0x20000668
 8007ee4:	08023798 	.word	0x08023798
 8007ee8:	20000684 	.word	0x20000684
 8007eec:	20000688 	.word	0x20000688
 8007ef0:	080237ac 	.word	0x080237ac
 8007ef4:	200006a4 	.word	0x200006a4
 8007ef8:	200006a8 	.word	0x200006a8
 8007efc:	080237c8 	.word	0x080237c8
 8007f00:	200006c4 	.word	0x200006c4
 8007f04:	200006c8 	.word	0x200006c8
 8007f08:	080237e0 	.word	0x080237e0
 8007f0c:	200006e4 	.word	0x200006e4
 8007f10:	200006e8 	.word	0x200006e8
 8007f14:	080237f4 	.word	0x080237f4
 8007f18:	20000704 	.word	0x20000704
 8007f1c:	20000708 	.word	0x20000708
 8007f20:	08023814 	.word	0x08023814
 8007f24:	20000724 	.word	0x20000724
 8007f28:	20000728 	.word	0x20000728
 8007f2c:	0802382c 	.word	0x0802382c
 8007f30:	20000744 	.word	0x20000744
 8007f34:	20000748 	.word	0x20000748
 8007f38:	08023844 	.word	0x08023844
 8007f3c:	20000764 	.word	0x20000764
 8007f40:	20000768 	.word	0x20000768
 8007f44:	08023858 	.word	0x08023858
 8007f48:	20000784 	.word	0x20000784
 8007f4c:	20000788 	.word	0x20000788
 8007f50:	08023874 	.word	0x08023874
 8007f54:	4a83      	ldr	r2, [pc, #524]	; (8008164 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007f56:	4984      	ldr	r1, [pc, #528]	; (8008168 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8007f58:	4884      	ldr	r0, [pc, #528]	; (800816c <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8007f5a:	f00c f915 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8007f5e:	4884      	ldr	r0, [pc, #528]	; (8008170 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8007f60:	f7fe fa16 	bl	8006390 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 8007f64:	f240 235b 	movw	r3, #603	; 0x25b
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	4b82      	ldr	r3, [pc, #520]	; (8008174 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	4b82      	ldr	r3, [pc, #520]	; (8008178 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 8007f70:	4a7c      	ldr	r2, [pc, #496]	; (8008164 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007f72:	497f      	ldr	r1, [pc, #508]	; (8008170 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8007f74:	4881      	ldr	r0, [pc, #516]	; (800817c <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8007f76:	f00c f907 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8007f7a:	4881      	ldr	r0, [pc, #516]	; (8008180 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8007f7c:	f7fe faee 	bl	800655c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 8007f80:	f44f 731d 	mov.w	r3, #628	; 0x274
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	4b7b      	ldr	r3, [pc, #492]	; (8008174 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	4b7e      	ldr	r3, [pc, #504]	; (8008184 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 8007f8c:	4a75      	ldr	r2, [pc, #468]	; (8008164 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007f8e:	497c      	ldr	r1, [pc, #496]	; (8008180 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8007f90:	487d      	ldr	r0, [pc, #500]	; (8008188 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8007f92:	f00c f8f9 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007f96:	487d      	ldr	r0, [pc, #500]	; (800818c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8007f98:	f7fe fc32 	bl	8006800 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 8007f9c:	f240 2399 	movw	r3, #665	; 0x299
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	4b74      	ldr	r3, [pc, #464]	; (8008174 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	4b7a      	ldr	r3, [pc, #488]	; (8008190 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8007fa8:	4a6e      	ldr	r2, [pc, #440]	; (8008164 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007faa:	4978      	ldr	r1, [pc, #480]	; (800818c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8007fac:	4879      	ldr	r0, [pc, #484]	; (8008194 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8007fae:	f00c f8eb 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8007fb2:	4879      	ldr	r0, [pc, #484]	; (8008198 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8007fb4:	f7fe fd02 	bl	80069bc <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 8007fb8:	f240 23af 	movw	r3, #687	; 0x2af
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	4b6d      	ldr	r3, [pc, #436]	; (8008174 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	4b76      	ldr	r3, [pc, #472]	; (800819c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8007fc4:	4a67      	ldr	r2, [pc, #412]	; (8008164 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007fc6:	4974      	ldr	r1, [pc, #464]	; (8008198 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8007fc8:	4875      	ldr	r0, [pc, #468]	; (80081a0 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8007fca:	f00c f8dd 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007fce:	4875      	ldr	r0, [pc, #468]	; (80081a4 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8007fd0:	f7fe fd6c 	bl	8006aac <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 8007fd4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	4b66      	ldr	r3, [pc, #408]	; (8008174 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	4b72      	ldr	r3, [pc, #456]	; (80081a8 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8007fe0:	4a60      	ldr	r2, [pc, #384]	; (8008164 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007fe2:	4970      	ldr	r1, [pc, #448]	; (80081a4 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8007fe4:	4871      	ldr	r0, [pc, #452]	; (80081ac <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8007fe6:	f00c f8cf 	bl	8014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f040 80b4 	bne.w	800815a <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	f040 80ae 	bne.w	800815a <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8007ffe:	486b      	ldr	r0, [pc, #428]	; (80081ac <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008000:	f00c f8ec 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008004:	4867      	ldr	r0, [pc, #412]	; (80081a4 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008006:	f7fe fe0f 	bl	8006c28 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 800800a:	4865      	ldr	r0, [pc, #404]	; (80081a0 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 800800c:	f00c f8e6 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008010:	4861      	ldr	r0, [pc, #388]	; (8008198 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008012:	f7fe fe4d 	bl	8006cb0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8008016:	485f      	ldr	r0, [pc, #380]	; (8008194 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8008018:	f00c f8e0 	bl	80141dc <_ZN13TestInstallerD1Ev>
 800801c:	485b      	ldr	r0, [pc, #364]	; (800818c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800801e:	f7fe fe8b 	bl	8006d38 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8008022:	4859      	ldr	r0, [pc, #356]	; (8008188 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8008024:	f00c f8da 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008028:	4855      	ldr	r0, [pc, #340]	; (8008180 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800802a:	f7fe fec9 	bl	8006dc0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 800802e:	4853      	ldr	r0, [pc, #332]	; (800817c <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8008030:	f00c f8d4 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008034:	484e      	ldr	r0, [pc, #312]	; (8008170 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8008036:	f7fe ff07 	bl	8006e48 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800803a:	484c      	ldr	r0, [pc, #304]	; (800816c <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800803c:	f00c f8ce 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008040:	4849      	ldr	r0, [pc, #292]	; (8008168 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8008042:	f7fe ff45 	bl	8006ed0 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8008046:	485a      	ldr	r0, [pc, #360]	; (80081b0 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8008048:	f00c f8c8 	bl	80141dc <_ZN13TestInstallerD1Ev>
 800804c:	4859      	ldr	r0, [pc, #356]	; (80081b4 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 800804e:	f7fe ff83 	bl	8006f58 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8008052:	4859      	ldr	r0, [pc, #356]	; (80081b8 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 8008054:	f00c f8c2 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008058:	4858      	ldr	r0, [pc, #352]	; (80081bc <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 800805a:	f7fe ffc1 	bl	8006fe0 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 800805e:	4858      	ldr	r0, [pc, #352]	; (80081c0 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8008060:	f00c f8bc 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008064:	4857      	ldr	r0, [pc, #348]	; (80081c4 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 8008066:	f7fe ffff 	bl	8007068 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 800806a:	4857      	ldr	r0, [pc, #348]	; (80081c8 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 800806c:	f00c f8b6 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008070:	4856      	ldr	r0, [pc, #344]	; (80081cc <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 8008072:	f7ff f83d 	bl	80070f0 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8008076:	4856      	ldr	r0, [pc, #344]	; (80081d0 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8008078:	f00c f8b0 	bl	80141dc <_ZN13TestInstallerD1Ev>
 800807c:	4855      	ldr	r0, [pc, #340]	; (80081d4 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 800807e:	f7ff f87b 	bl	8007178 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8008082:	4855      	ldr	r0, [pc, #340]	; (80081d8 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 8008084:	f00c f8aa 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008088:	4854      	ldr	r0, [pc, #336]	; (80081dc <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 800808a:	f7ff f8b9 	bl	8007200 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800808e:	4854      	ldr	r0, [pc, #336]	; (80081e0 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8008090:	f00c f8a4 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008094:	4853      	ldr	r0, [pc, #332]	; (80081e4 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 8008096:	f7ff f8f7 	bl	8007288 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 800809a:	4853      	ldr	r0, [pc, #332]	; (80081e8 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 800809c:	f00c f89e 	bl	80141dc <_ZN13TestInstallerD1Ev>
 80080a0:	4852      	ldr	r0, [pc, #328]	; (80081ec <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 80080a2:	f7ff f935 	bl	8007310 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80080a6:	4852      	ldr	r0, [pc, #328]	; (80081f0 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80080a8:	f00c f898 	bl	80141dc <_ZN13TestInstallerD1Ev>
 80080ac:	4851      	ldr	r0, [pc, #324]	; (80081f4 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 80080ae:	f7ff f973 	bl	8007398 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80080b2:	4851      	ldr	r0, [pc, #324]	; (80081f8 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 80080b4:	f00c f892 	bl	80141dc <_ZN13TestInstallerD1Ev>
 80080b8:	4850      	ldr	r0, [pc, #320]	; (80081fc <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 80080ba:	f7ff f9b1 	bl	8007420 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 80080be:	4850      	ldr	r0, [pc, #320]	; (8008200 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 80080c0:	f00c f88c 	bl	80141dc <_ZN13TestInstallerD1Ev>
 80080c4:	484f      	ldr	r0, [pc, #316]	; (8008204 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 80080c6:	f7ff f9ef 	bl	80074a8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80080ca:	484f      	ldr	r0, [pc, #316]	; (8008208 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80080cc:	f00c f886 	bl	80141dc <_ZN13TestInstallerD1Ev>
 80080d0:	484e      	ldr	r0, [pc, #312]	; (800820c <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 80080d2:	f7ff fa2d 	bl	8007530 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80080d6:	484e      	ldr	r0, [pc, #312]	; (8008210 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 80080d8:	f00c f880 	bl	80141dc <_ZN13TestInstallerD1Ev>
 80080dc:	484d      	ldr	r0, [pc, #308]	; (8008214 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 80080de:	f7ff fa6b 	bl	80075b8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80080e2:	484d      	ldr	r0, [pc, #308]	; (8008218 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 80080e4:	f00c f87a 	bl	80141dc <_ZN13TestInstallerD1Ev>
 80080e8:	484c      	ldr	r0, [pc, #304]	; (800821c <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 80080ea:	f7ff faa9 	bl	8007640 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 80080ee:	484c      	ldr	r0, [pc, #304]	; (8008220 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80080f0:	f00c f874 	bl	80141dc <_ZN13TestInstallerD1Ev>
 80080f4:	484b      	ldr	r0, [pc, #300]	; (8008224 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 80080f6:	f7ff fae7 	bl	80076c8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 80080fa:	484b      	ldr	r0, [pc, #300]	; (8008228 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 80080fc:	f00c f86e 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008100:	484a      	ldr	r0, [pc, #296]	; (800822c <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 8008102:	f7ff fb25 	bl	8007750 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008106:	484a      	ldr	r0, [pc, #296]	; (8008230 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 8008108:	f00c f868 	bl	80141dc <_ZN13TestInstallerD1Ev>
 800810c:	4849      	ldr	r0, [pc, #292]	; (8008234 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 800810e:	f7ff fb63 	bl	80077d8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008112:	4849      	ldr	r0, [pc, #292]	; (8008238 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 8008114:	f00c f862 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008118:	4848      	ldr	r0, [pc, #288]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 800811a:	f7ff fba1 	bl	8007860 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800811e:	4848      	ldr	r0, [pc, #288]	; (8008240 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8008120:	f00c f85c 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008124:	4847      	ldr	r0, [pc, #284]	; (8008244 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8008126:	f7ff fbdf 	bl	80078e8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 800812a:	4847      	ldr	r0, [pc, #284]	; (8008248 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 800812c:	f00c f856 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008130:	4846      	ldr	r0, [pc, #280]	; (800824c <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 8008132:	f7ff fc1d 	bl	8007970 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008136:	4846      	ldr	r0, [pc, #280]	; (8008250 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 8008138:	f00c f850 	bl	80141dc <_ZN13TestInstallerD1Ev>
 800813c:	4845      	ldr	r0, [pc, #276]	; (8008254 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 800813e:	f7ff fc5b 	bl	80079f8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8008142:	4845      	ldr	r0, [pc, #276]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 8008144:	f00c f84a 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008148:	4844      	ldr	r0, [pc, #272]	; (800825c <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 800814a:	f7ff fc99 	bl	8007a80 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 800814e:	4844      	ldr	r0, [pc, #272]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 8008150:	f00c f844 	bl	80141dc <_ZN13TestInstallerD1Ev>
 8008154:	4843      	ldr	r0, [pc, #268]	; (8008264 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 8008156:	f7ff fcd7 	bl	8007b08 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	0802371c 	.word	0x0802371c
 8008168:	20000788 	.word	0x20000788
 800816c:	200007a4 	.word	0x200007a4
 8008170:	200007a8 	.word	0x200007a8
 8008174:	08022e24 	.word	0x08022e24
 8008178:	0802388c 	.word	0x0802388c
 800817c:	200007c4 	.word	0x200007c4
 8008180:	200007c8 	.word	0x200007c8
 8008184:	080238a0 	.word	0x080238a0
 8008188:	200007e4 	.word	0x200007e4
 800818c:	200007e8 	.word	0x200007e8
 8008190:	080238b8 	.word	0x080238b8
 8008194:	20000804 	.word	0x20000804
 8008198:	20000808 	.word	0x20000808
 800819c:	080238d0 	.word	0x080238d0
 80081a0:	20000824 	.word	0x20000824
 80081a4:	20000828 	.word	0x20000828
 80081a8:	080238f0 	.word	0x080238f0
 80081ac:	20000844 	.word	0x20000844
 80081b0:	20000784 	.word	0x20000784
 80081b4:	20000768 	.word	0x20000768
 80081b8:	20000764 	.word	0x20000764
 80081bc:	20000748 	.word	0x20000748
 80081c0:	20000744 	.word	0x20000744
 80081c4:	20000728 	.word	0x20000728
 80081c8:	20000724 	.word	0x20000724
 80081cc:	20000708 	.word	0x20000708
 80081d0:	20000704 	.word	0x20000704
 80081d4:	200006e8 	.word	0x200006e8
 80081d8:	200006e4 	.word	0x200006e4
 80081dc:	200006c8 	.word	0x200006c8
 80081e0:	200006c4 	.word	0x200006c4
 80081e4:	200006a8 	.word	0x200006a8
 80081e8:	200006a4 	.word	0x200006a4
 80081ec:	20000688 	.word	0x20000688
 80081f0:	20000684 	.word	0x20000684
 80081f4:	20000668 	.word	0x20000668
 80081f8:	20000664 	.word	0x20000664
 80081fc:	20000648 	.word	0x20000648
 8008200:	20000644 	.word	0x20000644
 8008204:	20000628 	.word	0x20000628
 8008208:	20000624 	.word	0x20000624
 800820c:	20000608 	.word	0x20000608
 8008210:	20000604 	.word	0x20000604
 8008214:	200005e8 	.word	0x200005e8
 8008218:	200005e4 	.word	0x200005e4
 800821c:	200005c8 	.word	0x200005c8
 8008220:	200005bc 	.word	0x200005bc
 8008224:	200005a0 	.word	0x200005a0
 8008228:	2000059c 	.word	0x2000059c
 800822c:	20000580 	.word	0x20000580
 8008230:	2000057c 	.word	0x2000057c
 8008234:	20000560 	.word	0x20000560
 8008238:	2000055c 	.word	0x2000055c
 800823c:	20000540 	.word	0x20000540
 8008240:	2000053c 	.word	0x2000053c
 8008244:	20000520 	.word	0x20000520
 8008248:	2000051c 	.word	0x2000051c
 800824c:	20000500 	.word	0x20000500
 8008250:	200004fc 	.word	0x200004fc
 8008254:	200004e0 	.word	0x200004e0
 8008258:	200004dc 	.word	0x200004dc
 800825c:	200004c0 	.word	0x200004c0
 8008260:	200004bc 	.word	0x200004bc
 8008264:	200004a0 	.word	0x200004a0

08008268 <_GLOBAL__sub_I_rx_buffer>:
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
 800826c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008270:	2001      	movs	r0, #1
 8008272:	f7ff fc8d 	bl	8007b90 <_Z41__static_initialization_and_destruction_0ii>
 8008276:	bd80      	pop	{r7, pc}

08008278 <_GLOBAL__sub_D_rx_buffer>:
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
 800827c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008280:	2000      	movs	r0, #0
 8008282:	f7ff fc85 	bl	8007b90 <_Z41__static_initialization_and_destruction_0ii>
 8008286:	bd80      	pop	{r7, pc}

08008288 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
    }
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	69db      	ldr	r3, [r3, #28]
    }
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	695b      	ldr	r3, [r3, #20]
    }
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 80082d0:	b590      	push	{r4, r7, lr}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7ff ffed 	bl	80082b8 <_ZNK10TestResult15getFailureCountEv>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <_ZNK10TestResult9isFailureEv+0x2a>
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff ffcf 	bl	8008288 <_ZNK10TestResult11getRunCountEv>
 80082ea:	4604      	mov	r4, r0
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff ffd7 	bl	80082a0 <_ZNK10TestResult15getIgnoredCountEv>
 80082f2:	4603      	mov	r3, r0
 80082f4:	4423      	add	r3, r4
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <_ZNK10TestResult9isFailureEv+0x2e>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e000      	b.n	8008300 <_ZNK10TestResult9isFailureEv+0x30>
 80082fe:	2300      	movs	r3, #0
    }
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	bd90      	pop	{r4, r7, pc}

08008308 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
    {
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4618      	mov	r0, r3
 8008314:	f007 fde6 	bl	800fee4 <_ZN10TestOutputC1Ev>
 8008318:	4a03      	ldr	r2, [pc, #12]	; (8008328 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	601a      	str	r2, [r3, #0]
    }
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	08027fc4 	.word	0x08027fc4

0800832c <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
    {
 8008334:	4a05      	ldr	r2, [pc, #20]	; (800834c <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4618      	mov	r0, r3
 800833e:	f007 fdef 	bl	800ff20 <_ZN10TestOutputD1Ev>
    }
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	08027fc4 	.word	0x08027fc4

08008350 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
    }
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff ffe7 	bl	800832c <_ZN17ConsoleTestOutputD1Ev>
 800835e:	2110      	movs	r1, #16
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 fce7 	bl	8009d34 <_ZdlPvj>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8008370:	b5b0      	push	{r4, r5, r7, lr}
 8008372:	b098      	sub	sp, #96	; 0x60
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
    int result = 0;
 800837a:	2300      	movs	r3, #0
 800837c:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 800837e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff ffc0 	bl	8008308 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008388:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800838c:	4935      	ldr	r1, [pc, #212]	; (8008464 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800838e:	4618      	mov	r0, r3
 8008390:	f004 f87f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8008394:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008398:	f107 0318 	add.w	r3, r7, #24
 800839c:	2200      	movs	r2, #0
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 ff6a 	bl	800a278 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 80083a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80083a8:	4618      	mov	r0, r3
 80083aa:	f004 fc2a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 80083ae:	f107 0318 	add.w	r3, r7, #24
 80083b2:	2101      	movs	r1, #1
 80083b4:	4618      	mov	r0, r3
 80083b6:	f001 ff2f 	bl	800a218 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 80083ba:	f009 fb21 	bl	8011a00 <_ZN12TestRegistry18getCurrentRegistryEv>
 80083be:	4603      	mov	r3, r0
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	3234      	adds	r2, #52	; 0x34
 80083c4:	6812      	ldr	r2, [r2, #0]
 80083c6:	f107 0118 	add.w	r1, r7, #24
 80083ca:	4618      	mov	r0, r3
 80083cc:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80083ce:	f009 fb17 	bl	8011a00 <_ZN12TestRegistry18getCurrentRegistryEv>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f107 0008 	add.w	r0, r7, #8
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	f000 f844 	bl	8008468 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 80083e0:	f107 0308 	add.w	r3, r7, #8
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 f899 	bl	800851c <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 80083ea:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80083ec:	f107 0308 	add.w	r3, r7, #8
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 f863 	bl	80084bc <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 80083f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10c      	bne.n	8008416 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 80083fc:	f107 0318 	add.w	r3, r7, #24
 8008400:	2100      	movs	r1, #0
 8008402:	4618      	mov	r0, r3
 8008404:	f002 f83a 	bl	800a47c <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8008408:	4602      	mov	r2, r0
 800840a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800840e:	4611      	mov	r1, r2
 8008410:	4618      	mov	r0, r3
 8008412:	f007 fe27 	bl	8010064 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8008416:	f009 faf3 	bl	8011a00 <_ZN12TestRegistry18getCurrentRegistryEv>
 800841a:	4604      	mov	r4, r0
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	3344      	adds	r3, #68	; 0x44
 8008420:	681d      	ldr	r5, [r3, #0]
 8008422:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008426:	490f      	ldr	r1, [pc, #60]	; (8008464 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8008428:	4618      	mov	r0, r3
 800842a:	f004 f832 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800842e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008432:	4619      	mov	r1, r3
 8008434:	4620      	mov	r0, r4
 8008436:	47a8      	blx	r5
 8008438:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800843c:	4618      	mov	r0, r3
 800843e:	f004 fbe0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return result;
 8008442:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008444:	f107 0318 	add.w	r3, r7, #24
 8008448:	4618      	mov	r0, r3
 800844a:	f001 ff4d 	bl	800a2e8 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800844e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff ff6a 	bl	800832c <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8008458:	4623      	mov	r3, r4
}
 800845a:	4618      	mov	r0, r3
 800845c:	3760      	adds	r7, #96	; 0x60
 800845e:	46bd      	mov	sp, r7
 8008460:	bdb0      	pop	{r4, r5, r7, pc}
 8008462:	bf00      	nop
 8008464:	08023908 	.word	0x08023908

08008468 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8008468:	b590      	push	{r4, r7, lr}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8008476:	4a0f      	ldr	r2, [pc, #60]	; (80084b4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	605a      	str	r2, [r3, #4]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	609a      	str	r2, [r3, #8]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 800848e:	2241      	movs	r2, #65	; 0x41
 8008490:	4909      	ldr	r1, [pc, #36]	; (80084b8 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8008492:	2038      	movs	r0, #56	; 0x38
 8008494:	f001 fc3a 	bl	8009d0c <_ZnwjPKci>
 8008498:	4604      	mov	r4, r0
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	4620      	mov	r0, r4
 80084a0:	f00c f84a 	bl	8014538 <_ZN20CommandLineArgumentsC1EiPKPKc>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	609c      	str	r4, [r3, #8]
}
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd90      	pop	{r4, r7, pc}
 80084b2:	bf00      	nop
 80084b4:	08027950 	.word	0x08027950
 80084b8:	0802391c 	.word	0x0802391c

080084bc <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	4a0c      	ldr	r2, [pc, #48]	; (80084f8 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	3204      	adds	r2, #4
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	4618      	mov	r0, r3
 80084da:	4790      	blx	r2
    delete output_;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <_ZN21CommandLineTestRunnerD1Ev+0x32>
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	3204      	adds	r2, #4
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	4790      	blx	r2
}
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4618      	mov	r0, r3
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	08027950 	.word	0x08027950

080084fc <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
}
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff ffd9 	bl	80084bc <_ZN21CommandLineTestRunnerD1Ev>
 800850a:	2110      	movs	r1, #16
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fc11 	bl	8009d34 <_ZdlPvj>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 800851c:	b5b0      	push	{r4, r5, r7, lr}
 800851e:	b08c      	sub	sp, #48	; 0x30
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8008524:	2301      	movs	r3, #1
 8008526:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8008528:	f107 031c 	add.w	r3, r7, #28
 800852c:	4929      	ldr	r1, [pc, #164]	; (80085d4 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800852e:	4618      	mov	r0, r3
 8008530:	f003 ffaf 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8008534:	f107 021c 	add.w	r2, r7, #28
 8008538:	f107 0308 	add.w	r3, r7, #8
 800853c:	4611      	mov	r1, r2
 800853e:	4618      	mov	r0, r3
 8008540:	f008 fe1c 	bl	801117c <_ZN16SetPointerPluginC1ERK12SimpleString>
 8008544:	f107 031c 	add.w	r3, r7, #28
 8008548:	4618      	mov	r0, r3
 800854a:	f004 fb5a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3334      	adds	r3, #52	; 0x34
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f107 0108 	add.w	r1, r7, #8
 8008560:	4610      	mov	r0, r2
 8008562:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	333c      	adds	r3, #60	; 0x3c
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4610      	mov	r0, r2
 8008574:	4798      	blx	r3
 8008576:	4603      	mov	r3, r0
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fa3e 	bl	80089fc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f8ac 	bl	80086e4 <_ZN21CommandLineTestRunner11runAllTestsEv>
 800858c:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68dd      	ldr	r5, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3344      	adds	r3, #68	; 0x44
 800859a:	681c      	ldr	r4, [r3, #0]
 800859c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085a0:	490c      	ldr	r1, [pc, #48]	; (80085d4 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80085a2:	4618      	mov	r0, r3
 80085a4:	f003 ff75 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80085a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ac:	4619      	mov	r1, r3
 80085ae:	4628      	mov	r0, r5
 80085b0:	47a0      	blx	r4
 80085b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085b6:	4618      	mov	r0, r3
 80085b8:	f004 fb23 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return testResult;
 80085bc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80085be:	f107 0308 	add.w	r3, r7, #8
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 faaa 	bl	8008b1c <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80085c8:	4623      	mov	r3, r4
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3730      	adds	r7, #48	; 0x30
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bdb0      	pop	{r4, r5, r7, pc}
 80085d2:	bf00      	nop
 80085d4:	08023940 	.word	0x08023940

080085d8 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80085d8:	b5b0      	push	{r4, r5, r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68dd      	ldr	r5, [r3, #12]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3330      	adds	r3, #48	; 0x30
 80085ec:	681c      	ldr	r4, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f00c fce0 	bl	8014fb8 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 80085f8:	4603      	mov	r3, r0
 80085fa:	4619      	mov	r1, r3
 80085fc:	4628      	mov	r0, r5
 80085fe:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68dd      	ldr	r5, [r3, #12]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	332c      	adds	r3, #44	; 0x2c
 800860c:	681c      	ldr	r4, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	4618      	mov	r0, r3
 8008614:	f00c fcdc 	bl	8014fd0 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8008618:	4603      	mov	r3, r0
 800861a:	4619      	mov	r1, r3
 800861c:	4628      	mov	r0, r5
 800861e:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	4618      	mov	r0, r3
 8008626:	f00c fc2b 	bl	8014e80 <_ZNK20CommandLineArguments9isVerboseEv>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d009      	beq.n	8008644 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3320      	adds	r3, #32
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2101      	movs	r1, #1
 8008640:	4610      	mov	r0, r2
 8008642:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	4618      	mov	r0, r3
 800864a:	f00c fc25 	bl	8014e98 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3320      	adds	r3, #32
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2102      	movs	r1, #2
 8008664:	4610      	mov	r0, r2
 8008666:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	4618      	mov	r0, r3
 800866e:	f00c fc1f 	bl	8014eb0 <_ZNK20CommandLineArguments7isColorEv>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d008      	beq.n	800868a <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3324      	adds	r3, #36	; 0x24
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4610      	mov	r0, r2
 8008688:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	4618      	mov	r0, r3
 8008690:	f00c fc4a 	bl	8014f28 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d008      	beq.n	80086ac <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3360      	adds	r3, #96	; 0x60
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f00c fc2d 	bl	8014f10 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d004      	beq.n	80086c6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f009 fa19 	bl	8011af8 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f00c fc50 	bl	8014f70 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80086d6:	f00b fadb 	bl	8013c90 <_ZN10UtestShell14setCrashOnFailEv>
}
 80086da:	bf00      	nop
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080086e4 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 80086e4:	b5b0      	push	{r4, r5, r7, lr}
 80086e6:	b094      	sub	sp, #80	; 0x50
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff ff73 	bl	80085d8 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	4618      	mov	r0, r3
 8008704:	f00c fc1c 	bl	8014f40 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8008708:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	4618      	mov	r0, r3
 8008710:	f00c fbda 	bl	8014ec8 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d019      	beq.n	800874e <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	f107 0308 	add.w	r3, r7, #8
 8008722:	4611      	mov	r1, r2
 8008724:	4618      	mov	r0, r3
 8008726:	f009 fbaf 	bl	8011e88 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3320      	adds	r3, #32
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f107 0108 	add.w	r1, r7, #8
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
        return 0;
 8008740:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008742:	f107 0308 	add.w	r3, r7, #8
 8008746:	4618      	mov	r0, r3
 8008748:	f009 fbd6 	bl	8011ef8 <_ZN10TestResultD1Ev>
 800874c:	e0e1      	b.n	8008912 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	4618      	mov	r0, r3
 8008754:	f00c fbc4 	bl	8014ee0 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d019      	beq.n	8008792 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	f107 0308 	add.w	r3, r7, #8
 8008766:	4611      	mov	r1, r2
 8008768:	4618      	mov	r0, r3
 800876a:	f009 fb8d 	bl	8011e88 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68da      	ldr	r2, [r3, #12]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3324      	adds	r3, #36	; 0x24
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f107 0108 	add.w	r1, r7, #8
 8008780:	4610      	mov	r0, r2
 8008782:	4798      	blx	r3
        return 0;
 8008784:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008786:	f107 0308 	add.w	r3, r7, #8
 800878a:	4618      	mov	r0, r3
 800878c:	f009 fbb4 	bl	8011ef8 <_ZN10TestResultD1Ev>
 8008790:	e0bf      	b.n	8008912 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	4618      	mov	r0, r3
 8008798:	f00c fbae 	bl	8014ef8 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d019      	beq.n	80087d6 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	f107 0308 	add.w	r3, r7, #8
 80087aa:	4611      	mov	r1, r2
 80087ac:	4618      	mov	r0, r3
 80087ae:	f009 fb6b 	bl	8011e88 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3328      	adds	r3, #40	; 0x28
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f107 0108 	add.w	r1, r7, #8
 80087c4:	4610      	mov	r0, r2
 80087c6:	4798      	blx	r3
        return 0;
 80087c8:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80087ca:	f107 0308 	add.w	r3, r7, #8
 80087ce:	4618      	mov	r0, r3
 80087d0:	f009 fb92 	bl	8011ef8 <_ZN10TestResultD1Ev>
 80087d4:	e09d      	b.n	8008912 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	4618      	mov	r0, r3
 80087dc:	f00c fbbc 	bl	8014f58 <_ZNK20CommandLineArguments11isReversingEv>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d008      	beq.n	80087f8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	331c      	adds	r3, #28
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4610      	mov	r0, r2
 80087f6:	4798      	blx	r3

    if (arguments_->isShuffling())
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f00c fbc3 	bl	8014f88 <_ZNK20CommandLineArguments11isShufflingEv>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d023      	beq.n	8008850 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	332c      	adds	r3, #44	; 0x2c
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4941      	ldr	r1, [pc, #260]	; (800891c <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685d      	ldr	r5, [r3, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3334      	adds	r3, #52	; 0x34
 8008828:	681c      	ldr	r4, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	4618      	mov	r0, r3
 8008830:	f00c fbb6 	bl	8014fa0 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8008834:	4603      	mov	r3, r0
 8008836:	4619      	mov	r1, r3
 8008838:	4628      	mov	r0, r5
 800883a:	47a0      	blx	r4
        output_->print("\n");
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	332c      	adds	r3, #44	; 0x2c
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4935      	ldr	r1, [pc, #212]	; (8008920 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 800884c:	4610      	mov	r0, r2
 800884e:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8008850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008858:	429a      	cmp	r2, r3
 800885a:	bf8c      	ite	hi
 800885c:	2301      	movhi	r3, #1
 800885e:	2300      	movls	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d04e      	beq.n	8008904 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	4618      	mov	r0, r3
 800886c:	f00c fb8c 	bl	8014f88 <_ZNK20CommandLineArguments11isShufflingEv>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00f      	beq.n	8008896 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68dd      	ldr	r5, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3318      	adds	r3, #24
 8008882:	681c      	ldr	r4, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	4618      	mov	r0, r3
 800888a:	f00c fb89 	bl	8014fa0 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800888e:	4603      	mov	r3, r0
 8008890:	4619      	mov	r1, r3
 8008892:	4628      	mov	r0, r5
 8008894:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6858      	ldr	r0, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3340      	adds	r3, #64	; 0x40
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80088a8:	4798      	blx	r3
        TestResult tr(*output_);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	f107 0308 	add.w	r3, r7, #8
 80088b2:	4611      	mov	r1, r2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f009 fae7 	bl	8011e88 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68da      	ldr	r2, [r3, #12]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3314      	adds	r3, #20
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f107 0108 	add.w	r1, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 80088d0:	f107 0308 	add.w	r3, r7, #8
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff fcef 	bl	80082b8 <_ZNK10TestResult15getFailureCountEv>
 80088da:	4602      	mov	r2, r0
 80088dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088de:	4413      	add	r3, r2
 80088e0:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 80088e2:	f107 0308 	add.w	r3, r7, #8
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff fcf2 	bl	80082d0 <_ZNK10TestResult9isFailureEv>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 80088f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f4:	3301      	adds	r3, #1
 80088f6:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 80088f8:	f107 0308 	add.w	r3, r7, #8
 80088fc:	4618      	mov	r0, r3
 80088fe:	f009 fafb 	bl	8011ef8 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8008902:	e7a5      	b.n	8008850 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8008904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 800890a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800890c:	e000      	b.n	8008910 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 800890e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8008910:	bf00      	nop
 8008912:	4623      	mov	r3, r4
}
 8008914:	4618      	mov	r0, r3
 8008916:	3750      	adds	r7, #80	; 0x50
 8008918:	46bd      	mov	sp, r7
 800891a:	bdb0      	pop	{r4, r5, r7, pc}
 800891c:	08023954 	.word	0x08023954
 8008920:	08023980 	.word	0x08023980

08008924 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8008924:	b590      	push	{r4, r7, lr}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 800892c:	229d      	movs	r2, #157	; 0x9d
 800892e:	4906      	ldr	r1, [pc, #24]	; (8008948 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8008930:	201c      	movs	r0, #28
 8008932:	f001 f9eb 	bl	8009d0c <_ZnwjPKci>
 8008936:	4604      	mov	r4, r0
 8008938:	4620      	mov	r0, r4
 800893a:	f005 f955 	bl	800dbe8 <_ZN18TeamCityTestOutputC1Ev>
 800893e:	4623      	mov	r3, r4
}
 8008940:	4618      	mov	r0, r3
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	bd90      	pop	{r4, r7, pc}
 8008948:	0802391c 	.word	0x0802391c

0800894c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 800894c:	b590      	push	{r4, r7, lr}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8008956:	22a2      	movs	r2, #162	; 0xa2
 8008958:	490a      	ldr	r1, [pc, #40]	; (8008984 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 800895a:	2014      	movs	r0, #20
 800895c:	f001 f9d6 	bl	8009d0c <_ZnwjPKci>
 8008960:	4604      	mov	r4, r0
 8008962:	4620      	mov	r0, r4
 8008964:	f000 f980 	bl	8008c68 <_ZN15JUnitTestOutputC1Ev>
 8008968:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 fbb2 	bl	80090dc <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8008978:	68fb      	ldr	r3, [r7, #12]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	bd90      	pop	{r4, r7, pc}
 8008982:	bf00      	nop
 8008984:	0802391c 	.word	0x0802391c

08008988 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8008988:	b590      	push	{r4, r7, lr}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8008990:	22ab      	movs	r2, #171	; 0xab
 8008992:	4906      	ldr	r1, [pc, #24]	; (80089ac <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8008994:	2010      	movs	r0, #16
 8008996:	f001 f9b9 	bl	8009d0c <_ZnwjPKci>
 800899a:	4604      	mov	r4, r0
 800899c:	4620      	mov	r0, r4
 800899e:	f7ff fcb3 	bl	8008308 <_ZN17ConsoleTestOutputC1Ev>
 80089a2:	4623      	mov	r3, r4
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd90      	pop	{r4, r7, pc}
 80089ac:	0802391c 	.word	0x0802391c

080089b0 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 80089b0:	b590      	push	{r4, r7, lr}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 80089bc:	22b0      	movs	r2, #176	; 0xb0
 80089be:	490e      	ldr	r1, [pc, #56]	; (80089f8 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 80089c0:	2018      	movs	r0, #24
 80089c2:	f001 f9a3 	bl	8009d0c <_ZnwjPKci>
 80089c6:	4604      	mov	r4, r0
 80089c8:	4620      	mov	r0, r4
 80089ca:	f007 ff83 	bl	80108d4 <_ZN19CompositeTestOutputC1Ev>
 80089ce:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	335c      	adds	r3, #92	; 0x5c
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68b9      	ldr	r1, [r7, #8]
 80089da:	6978      	ldr	r0, [r7, #20]
 80089dc:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3360      	adds	r3, #96	; 0x60
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	6978      	ldr	r0, [r7, #20]
 80089ea:	4798      	blx	r3
  return composite;
 80089ec:	697b      	ldr	r3, [r7, #20]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd90      	pop	{r4, r7, pc}
 80089f6:	bf00      	nop
 80089f8:	0802391c 	.word	0x0802391c

080089fc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 80089fc:	b5b0      	push	{r4, r5, r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f00b fe4f 	bl	80146b0 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f083 0301 	eor.w	r3, r3, #1
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d029      	beq.n	8008a72 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3310      	adds	r3, #16
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	4798      	blx	r3
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685d      	ldr	r5, [r3, #4]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	332c      	adds	r3, #44	; 0x2c
 8008a3c:	681c      	ldr	r4, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f00c fa10 	bl	8014e68 <_ZNK20CommandLineArguments8needHelpEv>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d006      	beq.n	8008a5c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f00c f9fa 	bl	8014e4c <_ZNK20CommandLineArguments4helpEv>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	e005      	b.n	8008a68 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f00c f9e5 	bl	8014e30 <_ZNK20CommandLineArguments5usageEv>
 8008a66:	4603      	mov	r3, r0
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	47a0      	blx	r4
    return false;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e050      	b.n	8008b14 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f00d f84c 	bl	8015b14 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d02c      	beq.n	8008adc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	330c      	adds	r3, #12
 8008a88:	681c      	ldr	r4, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f00d f864 	bl	8015b5c <_ZNK20CommandLineArguments14getPackageNameEv>
 8008a94:	4603      	mov	r3, r0
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	47a0      	blx	r4
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f00c f9ea 	bl	8014e80 <_ZNK20CommandLineArguments9isVerboseEv>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d02f      	beq.n	8008b12 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3314      	adds	r3, #20
 8008ab8:	681c      	ldr	r4, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685d      	ldr	r5, [r3, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3310      	adds	r3, #16
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	4798      	blx	r3
 8008aca:	4603      	mov	r3, r0
 8008acc:	461a      	mov	r2, r3
 8008ace:	4629      	mov	r1, r5
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	47a0      	blx	r4
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	605a      	str	r2, [r3, #4]
 8008ada:	e01a      	b.n	8008b12 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f00d f829 	bl	8015b38 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3308      	adds	r3, #8
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	4798      	blx	r3
 8008af8:	4602      	mov	r2, r0
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	605a      	str	r2, [r3, #4]
 8008afe:	e008      	b.n	8008b12 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3310      	adds	r3, #16
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	4798      	blx	r3
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	605a      	str	r2, [r3, #4]
  return true;
 8008b12:	2301      	movs	r3, #1
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bdb0      	pop	{r4, r5, r7, pc}

08008b1c <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	4a05      	ldr	r2, [pc, #20]	; (8008b3c <_ZN16SetPointerPluginD1Ev+0x20>)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f008 f9e7 	bl	8010f00 <_ZN10TestPluginD1Ev>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	080280d0 	.word	0x080280d0

08008b40 <_ZN16SetPointerPluginD0Ev>:
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ffe7 	bl	8008b1c <_ZN16SetPointerPluginD1Ev>
 8008b4e:	2114      	movs	r1, #20
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 f8ef 	bl	8009d34 <_ZdlPvj>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	691b      	ldr	r3, [r3, #16]
    }
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4910      	ldr	r1, [pc, #64]	; (8008bc4 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8008b84:	4618      	mov	r0, r3
 8008b86:	f003 fc84 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	609a      	str	r2, [r3, #8]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	60da      	str	r2, [r3, #12]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	741a      	strb	r2, [r3, #16]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3314      	adds	r3, #20
 8008ba0:	4908      	ldr	r1, [pc, #32]	; (8008bc4 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f003 fc75 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	61da      	str	r2, [r3, #28]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	621a      	str	r2, [r3, #32]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	08023984 	.word	0x08023984

08008bc8 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	605a      	str	r2, [r3, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	609a      	str	r2, [r3, #8]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	60da      	str	r2, [r3, #12]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	611a      	str	r2, [r3, #16]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3314      	adds	r3, #20
 8008bf2:	4907      	ldr	r1, [pc, #28]	; (8008c10 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f003 fc4c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	61da      	str	r2, [r3, #28]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	621a      	str	r2, [r3, #32]
    {
    }
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	08023984 	.word	0x08023984

08008c14 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3314      	adds	r3, #20
 8008c20:	4618      	mov	r0, r3
 8008c22:	f003 ffee 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff ffc4 	bl	8008bc8 <_ZN20JUnitTestGroupResultC1Ev>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3328      	adds	r3, #40	; 0x28
 8008c44:	4907      	ldr	r1, [pc, #28]	; (8008c64 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8008c46:	4618      	mov	r0, r3
 8008c48:	f003 fc23 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3330      	adds	r3, #48	; 0x30
 8008c50:	4904      	ldr	r1, [pc, #16]	; (8008c64 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8008c52:	4618      	mov	r0, r3
 8008c54:	f003 fc1d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	08023984 	.word	0x08023984

08008c68 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8008c68:	b590      	push	{r4, r7, lr}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f007 f936 	bl	800fee4 <_ZN10TestOutputC1Ev>
 8008c78:	4a09      	ldr	r2, [pc, #36]	; (8008ca0 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	224d      	movs	r2, #77	; 0x4d
 8008c80:	4908      	ldr	r1, [pc, #32]	; (8008ca4 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8008c82:	2038      	movs	r0, #56	; 0x38
 8008c84:	f001 f842 	bl	8009d0c <_ZnwjPKci>
 8008c88:	4604      	mov	r4, r0
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f7ff ffd0 	bl	8008c30 <_ZN19JUnitTestOutputImplC1Ev>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	611c      	str	r4, [r3, #16]
{
}
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4618      	mov	r0, r3
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd90      	pop	{r4, r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	08027970 	.word	0x08027970
 8008ca4:	08023988 	.word	0x08023988

08008ca8 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3330      	adds	r3, #48	; 0x30
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f003 ffa4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	3328      	adds	r3, #40	; 0x28
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f003 ff9f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7ff ffa4 	bl	8008c14 <_ZN20JUnitTestGroupResultD1Ev>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
	...

08008cd8 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8008cd8:	b590      	push	{r4, r7, lr}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	4a0c      	ldr	r2, [pc, #48]	; (8008d14 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f838 	bl	8008d5c <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691c      	ldr	r4, [r3, #16]
 8008cf0:	2c00      	cmp	r4, #0
 8008cf2:	d006      	beq.n	8008d02 <_ZN15JUnitTestOutputD1Ev+0x2a>
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f7ff ffd7 	bl	8008ca8 <_ZN19JUnitTestOutputImplD1Ev>
 8008cfa:	2138      	movs	r1, #56	; 0x38
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f001 f819 	bl	8009d34 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f007 f90b 	bl	800ff20 <_ZN10TestOutputD1Ev>
}
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd90      	pop	{r4, r7, pc}
 8008d14:	08027970 	.word	0x08027970

08008d18 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
}
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff ffd9 	bl	8008cd8 <_ZN15JUnitTestOutputD1Ev>
 8008d26:	2114      	movs	r1, #20
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 f803 	bl	8009d34 <_ZdlPvj>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4618      	mov	r0, r3
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3314      	adds	r3, #20
 8008d44:	4618      	mov	r0, r3
 8008d46:	f003 ff5c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f003 ff58 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8008d5c:	b590      	push	{r4, r7, lr}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	2200      	movs	r2, #0
 8008d72:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f103 0414 	add.w	r4, r3, #20
 8008d7c:	f107 0308 	add.w	r3, r7, #8
 8008d80:	491d      	ldr	r1, [pc, #116]	; (8008df8 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8008d82:	4618      	mov	r0, r3
 8008d84:	f003 fb85 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8008d88:	f107 0308 	add.w	r3, r7, #8
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f003 fbeb 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 8008d94:	f107 0308 	add.w	r3, r7, #8
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f003 ff32 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	617b      	str	r3, [r7, #20]
    while (cur) {
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d018      	beq.n	8008dde <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d004      	beq.n	8008dc4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	3204      	adds	r2, #4
 8008dbe:	6812      	ldr	r2, [r2, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	4790      	blx	r2
        delete cur;
 8008dc4:	697c      	ldr	r4, [r7, #20]
 8008dc6:	2c00      	cmp	r4, #0
 8008dc8:	d006      	beq.n	8008dd8 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f7ff ffb4 	bl	8008d38 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8008dd0:	2128      	movs	r1, #40	; 0x28
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 ffae 	bl	8009d34 <_ZdlPvj>
        cur = tmp;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	617b      	str	r3, [r7, #20]
    while (cur) {
 8008ddc:	e7e3      	b.n	8008da6 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	2200      	movs	r2, #0
 8008de4:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	2200      	movs	r2, #0
 8008dec:	621a      	str	r2, [r3, #32]
}
 8008dee:	bf00      	nop
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd90      	pop	{r4, r7, pc}
 8008df6:	bf00      	nop
 8008df8:	08023984 	.word	0x08023984

08008dfc <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8008e26:	b590      	push	{r4, r7, lr}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	6a1c      	ldr	r4, [r3, #32]
 8008e36:	6838      	ldr	r0, [r7, #0]
 8008e38:	f009 f9c6 	bl	80121c8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	6a1c      	ldr	r4, [r3, #32]
 8008e46:	6838      	ldr	r0, [r7, #0]
 8008e48:	f7ff fe8a 	bl	8008b60 <_ZNK10TestResult13getCheckCountEv>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	6223      	str	r3, [r4, #32]
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd90      	pop	{r4, r7, pc}

08008e58 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8008e6e:	b590      	push	{r4, r7, lr}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691c      	ldr	r4, [r3, #16]
 8008e7c:	6838      	ldr	r0, [r7, #0]
 8008e7e:	f009 f9af 	bl	80121e0 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8008e82:	4603      	mov	r3, r0
 8008e84:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3364      	adds	r3, #100	; 0x64
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	4798      	blx	r3
    resetTestGroupResult();
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7ff ff62 	bl	8008d5c <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd90      	pop	{r4, r7, pc}

08008ea0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8008ea0:	b590      	push	{r4, r7, lr}
 8008ea2:	b089      	sub	sp, #36	; 0x24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	3201      	adds	r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	f103 0414 	add.w	r4, r3, #20
 8008ebc:	f107 0308 	add.w	r3, r7, #8
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f009 fcef 	bl	80128a6 <_ZNK10UtestShell8getGroupEv>
 8008ec8:	f107 0308 	add.w	r3, r7, #8
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f003 fb4b 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 8008ed4:	f107 0308 	add.w	r3, r7, #8
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f003 fe92 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8008ede:	4b3c      	ldr	r3, [pc, #240]	; (8008fd0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4798      	blx	r3
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d110      	bne.n	8008f18 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8008ef6:	2288      	movs	r2, #136	; 0x88
 8008ef8:	4936      	ldr	r1, [pc, #216]	; (8008fd4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8008efa:	2028      	movs	r0, #40	; 0x28
 8008efc:	f000 ff06 	bl	8009d0c <_ZnwjPKci>
 8008f00:	4604      	mov	r4, r0
 8008f02:	4620      	mov	r0, r4
 8008f04:	f7ff fe38 	bl	8008b78 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8008f0c:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	6912      	ldr	r2, [r2, #16]
 8008f12:	6a1b      	ldr	r3, [r3, #32]
 8008f14:	61d3      	str	r3, [r2, #28]
 8008f16:	e013      	b.n	8008f40 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8008f18:	228b      	movs	r2, #139	; 0x8b
 8008f1a:	492e      	ldr	r1, [pc, #184]	; (8008fd4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8008f1c:	2028      	movs	r0, #40	; 0x28
 8008f1e:	f000 fef5 	bl	8009d0c <_ZnwjPKci>
 8008f22:	4604      	mov	r4, r0
 8008f24:	4620      	mov	r0, r4
 8008f26:	f7ff fe27 	bl	8008b78 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	6a1a      	ldr	r2, [r3, #32]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f3e:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	461c      	mov	r4, r3
 8008f48:	f107 0310 	add.w	r3, r7, #16
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f009 fc9a 	bl	8012888 <_ZNK10UtestShell7getNameEv>
 8008f54:	f107 0310 	add.w	r3, r7, #16
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f003 fb05 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 8008f60:	f107 0310 	add.w	r3, r7, #16
 8008f64:	4618      	mov	r0, r3
 8008f66:	f003 fe4c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	f103 0414 	add.w	r4, r3, #20
 8008f74:	f107 0318 	add.w	r3, r7, #24
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f009 fd55 	bl	8012a2a <_ZNK10UtestShell7getFileEv>
 8008f80:	f107 0318 	add.w	r3, r7, #24
 8008f84:	4619      	mov	r1, r3
 8008f86:	4620      	mov	r0, r4
 8008f88:	f003 faef 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 8008f8c:	f107 0318 	add.w	r3, r7, #24
 8008f90:	4618      	mov	r0, r3
 8008f92:	f003 fe36 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	6a1c      	ldr	r4, [r3, #32]
 8008f9c:	6838      	ldr	r0, [r7, #0]
 8008f9e:	f009 fd53 	bl	8012a48 <_ZNK10UtestShell13getLineNumberEv>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3318      	adds	r3, #24
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6838      	ldr	r0, [r7, #0]
 8008fb0:	4798      	blx	r3
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f083 0301 	eor.w	r3, r3, #1
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d004      	beq.n	8008fc8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	741a      	strb	r2, [r3, #16]
    }
}
 8008fc8:	bf00      	nop
 8008fca:	3724      	adds	r7, #36	; 0x24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd90      	pop	{r4, r7, pc}
 8008fd0:	200000a8 	.word	0x200000a8
 8008fd4:	08023988 	.word	0x08023988

08008fd8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08a      	sub	sp, #40	; 0x28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8008fe4:	f107 0310 	add.w	r3, r7, #16
 8008fe8:	4928      	ldr	r1, [pc, #160]	; (800908c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8008fea:	4618      	mov	r0, r3
 8008fec:	f003 fa51 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	3328      	adds	r3, #40	; 0x28
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f003 fdf2 	bl	800cbe0 <_ZNK12SimpleString7isEmptyEv>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	f083 0301 	eor.w	r3, r3, #1
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00f      	beq.n	8009028 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009010:	f107 0310 	add.w	r3, r7, #16
 8009014:	4611      	mov	r1, r2
 8009016:	4618      	mov	r0, r3
 8009018:	f003 fe70 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 800901c:	f107 0310 	add.w	r3, r7, #16
 8009020:	491b      	ldr	r1, [pc, #108]	; (8009090 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8009022:	4618      	mov	r0, r3
 8009024:	f003 fe7c 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8009028:	f107 0310 	add.w	r3, r7, #16
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	4618      	mov	r0, r3
 8009030:	f003 fe64 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3384      	adds	r3, #132	; 0x84
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f107 0018 	add.w	r0, r7, #24
 8009040:	f107 0210 	add.w	r2, r7, #16
 8009044:	68b9      	ldr	r1, [r7, #8]
 8009046:	4798      	blx	r3
 8009048:	f107 0320 	add.w	r3, r7, #32
 800904c:	4911      	ldr	r1, [pc, #68]	; (8009094 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 800904e:	4618      	mov	r0, r3
 8009050:	f003 fa1f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f107 0220 	add.w	r2, r7, #32
 800905a:	f107 0118 	add.w	r1, r7, #24
 800905e:	4618      	mov	r0, r3
 8009060:	f003 fe31 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 8009064:	f107 0320 	add.w	r3, r7, #32
 8009068:	4618      	mov	r0, r3
 800906a:	f003 fdca 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800906e:	f107 0318 	add.w	r3, r7, #24
 8009072:	4618      	mov	r0, r3
 8009074:	f003 fdc5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8009078:	f107 0310 	add.w	r3, r7, #16
 800907c:	4618      	mov	r0, r3
 800907e:	f003 fdc0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8009082:	bf00      	nop
}
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	3728      	adds	r7, #40	; 0x28
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	080239a4 	.word	0x080239a4
 8009090:	080239b0 	.word	0x080239b0
 8009094:	080239b4 	.word	0x080239b4

08009098 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 80090a4:	6879      	ldr	r1, [r7, #4]
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f003 fa47 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00a      	beq.n	80090ce <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	225f      	movs	r2, #95	; 0x5f
 80090be:	4619      	mov	r1, r3
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f003 fbcc 	bl	800c85e <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	3301      	adds	r3, #1
 80090ca:	617b      	str	r3, [r7, #20]
 80090cc:	e7f0      	b.n	80090b0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 80090ce:	bf00      	nop
}
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	080239bc 	.word	0x080239bc

080090dc <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d006      	beq.n	80090fc <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	3328      	adds	r3, #40	; 0x28
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f003 fa37 	bl	800c56a <_ZN12SimpleStringaSERKS_>
    }
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8009104:	b590      	push	{r4, r7, lr}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3368      	adds	r3, #104	; 0x68
 8009112:	681c      	ldr	r4, [r3, #0]
 8009114:	f107 0308 	add.w	r3, r7, #8
 8009118:	4908      	ldr	r1, [pc, #32]	; (800913c <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800911a:	4618      	mov	r0, r3
 800911c:	f003 f9b9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8009120:	f107 0308 	add.w	r3, r7, #8
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	47a0      	blx	r4
 800912a:	f107 0308 	add.w	r3, r7, #8
 800912e:	4618      	mov	r0, r3
 8009130:	f003 fd67 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8009134:	bf00      	nop
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	bd90      	pop	{r4, r7, pc}
 800913c:	080239c8 	.word	0x080239c8

08009140 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8009140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009144:	b08a      	sub	sp, #40	; 0x28
 8009146:	af04      	add	r7, sp, #16
 8009148:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8009150:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8009156:	3314      	adds	r3, #20
 8009158:	4618      	mov	r0, r3
 800915a:	f003 fd25 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800915e:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8009166:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	4a23      	ldr	r2, [pc, #140]	; (80091fc <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009170:	fba2 2303 	umull	r2, r3, r2, r3
 8009174:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8009176:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	691a      	ldr	r2, [r3, #16]
 800917e:	4b1f      	ldr	r3, [pc, #124]	; (80091fc <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009180:	fba3 1302 	umull	r1, r3, r3, r2
 8009184:	099b      	lsrs	r3, r3, #6
 8009186:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800918a:	fb01 f303 	mul.w	r3, r1, r3
 800918e:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8009190:	603b      	str	r3, [r7, #0]
 8009192:	4b1b      	ldr	r3, [pc, #108]	; (8009200 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4798      	blx	r3
 8009198:	4603      	mov	r3, r0
 800919a:	f107 0008 	add.w	r0, r7, #8
 800919e:	9303      	str	r3, [sp, #12]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	9302      	str	r3, [sp, #8]
 80091a4:	9601      	str	r6, [sp, #4]
 80091a6:	9500      	str	r5, [sp, #0]
 80091a8:	4623      	mov	r3, r4
 80091aa:	4642      	mov	r2, r8
 80091ac:	4915      	ldr	r1, [pc, #84]	; (8009204 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 80091ae:	f004 fa2f 	bl	800d610 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3368      	adds	r3, #104	; 0x68
 80091b8:	681c      	ldr	r4, [r3, #0]
 80091ba:	f107 0308 	add.w	r3, r7, #8
 80091be:	4618      	mov	r0, r3
 80091c0:	f003 fcf2 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 80091c4:	4602      	mov	r2, r0
 80091c6:	f107 0310 	add.w	r3, r7, #16
 80091ca:	4611      	mov	r1, r2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f003 f960 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80091d2:	f107 0310 	add.w	r3, r7, #16
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	47a0      	blx	r4
 80091dc:	f107 0310 	add.w	r3, r7, #16
 80091e0:	4618      	mov	r0, r3
 80091e2:	f003 fd0e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 80091e6:	f107 0308 	add.w	r3, r7, #8
 80091ea:	4618      	mov	r0, r3
 80091ec:	f003 fd09 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 80091f0:	bf00      	nop
 80091f2:	3718      	adds	r7, #24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091fa:	bf00      	nop
 80091fc:	10624dd3 	.word	0x10624dd3
 8009200:	200000ac 	.word	0x200000ac
 8009204:	080239f4 	.word	0x080239f4

08009208 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8009208:	b590      	push	{r4, r7, lr}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3368      	adds	r3, #104	; 0x68
 8009216:	681c      	ldr	r4, [r3, #0]
 8009218:	f107 0308 	add.w	r3, r7, #8
 800921c:	4912      	ldr	r1, [pc, #72]	; (8009268 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 800921e:	4618      	mov	r0, r3
 8009220:	f003 f937 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8009224:	f107 0308 	add.w	r3, r7, #8
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	47a0      	blx	r4
 800922e:	f107 0308 	add.w	r3, r7, #8
 8009232:	4618      	mov	r0, r3
 8009234:	f003 fce5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3368      	adds	r3, #104	; 0x68
 800923e:	681c      	ldr	r4, [r3, #0]
 8009240:	f107 0310 	add.w	r3, r7, #16
 8009244:	4909      	ldr	r1, [pc, #36]	; (800926c <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8009246:	4618      	mov	r0, r3
 8009248:	f003 f923 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800924c:	f107 0310 	add.w	r3, r7, #16
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	47a0      	blx	r4
 8009256:	f107 0310 	add.w	r3, r7, #16
 800925a:	4618      	mov	r0, r3
 800925c:	f003 fcd1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8009260:	bf00      	nop
 8009262:	371c      	adds	r7, #28
 8009264:	46bd      	mov	sp, r7
 8009266:	bd90      	pop	{r4, r7, pc}
 8009268:	08023a64 	.word	0x08023a64
 800926c:	08023a74 	.word	0x08023a74

08009270 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f003 fc93 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8009282:	4603      	mov	r3, r0
 8009284:	4619      	mov	r1, r3
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f003 f903 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 800928c:	4a0e      	ldr	r2, [pc, #56]	; (80092c8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 800928e:	490f      	ldr	r1, [pc, #60]	; (80092cc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f003 fb13 	bl	800c8bc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8009296:	4a0e      	ldr	r2, [pc, #56]	; (80092d0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8009298:	490e      	ldr	r1, [pc, #56]	; (80092d4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f003 fb0e 	bl	800c8bc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 80092a0:	4a0d      	ldr	r2, [pc, #52]	; (80092d8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 80092a2:	490e      	ldr	r1, [pc, #56]	; (80092dc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f003 fb09 	bl	800c8bc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 80092aa:	4a0d      	ldr	r2, [pc, #52]	; (80092e0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 80092ac:	490d      	ldr	r1, [pc, #52]	; (80092e4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f003 fb04 	bl	800c8bc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 80092b4:	4a0c      	ldr	r2, [pc, #48]	; (80092e8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 80092b6:	490d      	ldr	r1, [pc, #52]	; (80092ec <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f003 faff 	bl	800c8bc <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 80092be:	bf00      	nop
}
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	08023a84 	.word	0x08023a84
 80092cc:	08023a8c 	.word	0x08023a8c
 80092d0:	08023a90 	.word	0x08023a90
 80092d4:	08023a98 	.word	0x08023a98
 80092d8:	08023a9c 	.word	0x08023a9c
 80092dc:	08023aa4 	.word	0x08023aa4
 80092e0:	08023aa8 	.word	0x08023aa8
 80092e4:	08023ab0 	.word	0x08023ab0
 80092e8:	08023ab4 	.word	0x08023ab4
 80092ec:	08023ac0 	.word	0x08023ac0

080092f0 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 80092f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	b096      	sub	sp, #88	; 0x58
 80092f6:	af08      	add	r7, sp, #32
 80092f8:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8009302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 80b2 	beq.w	800946e <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 800930e:	3328      	adds	r3, #40	; 0x28
 8009310:	4618      	mov	r0, r3
 8009312:	f003 fc49 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8009316:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	3328      	adds	r3, #40	; 0x28
 800931e:	4618      	mov	r0, r3
 8009320:	f003 fc5e 	bl	800cbe0 <_ZNK12SimpleString7isEmptyEv>
 8009324:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 800932a:	4c53      	ldr	r4, [pc, #332]	; (8009478 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 800932c:	e000      	b.n	8009330 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 800932e:	4c53      	ldr	r4, [pc, #332]	; (800947c <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8009334:	3314      	adds	r3, #20
 8009336:	4618      	mov	r0, r3
 8009338:	f003 fc36 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800933c:	4605      	mov	r5, r0
 800933e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009340:	4618      	mov	r0, r3
 8009342:	f003 fc31 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8009346:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8009348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934a:	6a1a      	ldr	r2, [r3, #32]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8009354:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	4a49      	ldr	r2, [pc, #292]	; (8009480 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800935c:	fba2 2303 	umull	r2, r3, r2, r3
 8009360:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8009362:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	4b45      	ldr	r3, [pc, #276]	; (8009480 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800936a:	fba3 1302 	umull	r1, r3, r3, r2
 800936e:	099b      	lsrs	r3, r3, #6
 8009370:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009374:	fb01 f303 	mul.w	r3, r1, r3
 8009378:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937e:	3314      	adds	r3, #20
 8009380:	4618      	mov	r0, r3
 8009382:	f003 fc11 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8009386:	4602      	mov	r2, r0
 8009388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	f107 0014 	add.w	r0, r7, #20
 8009390:	9306      	str	r3, [sp, #24]
 8009392:	9205      	str	r2, [sp, #20]
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	9204      	str	r2, [sp, #16]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	9203      	str	r2, [sp, #12]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	9302      	str	r3, [sp, #8]
 80093a0:	9601      	str	r6, [sp, #4]
 80093a2:	9500      	str	r5, [sp, #0]
 80093a4:	4623      	mov	r3, r4
 80093a6:	4642      	mov	r2, r8
 80093a8:	4936      	ldr	r1, [pc, #216]	; (8009484 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 80093aa:	f004 f931 	bl	800d610 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3368      	adds	r3, #104	; 0x68
 80093b4:	681c      	ldr	r4, [r3, #0]
 80093b6:	f107 0314 	add.w	r3, r7, #20
 80093ba:	4618      	mov	r0, r3
 80093bc:	f003 fbf4 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 80093c0:	4602      	mov	r2, r0
 80093c2:	f107 031c 	add.w	r3, r7, #28
 80093c6:	4611      	mov	r1, r2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f003 f862 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80093ce:	f107 031c 	add.w	r3, r7, #28
 80093d2:	4619      	mov	r1, r3
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	47a0      	blx	r4
 80093d8:	f107 031c 	add.w	r3, r7, #28
 80093dc:	4618      	mov	r0, r3
 80093de:	f003 fc10 	bl	800cc02 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e8:	6a12      	ldr	r2, [r2, #32]
 80093ea:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 80093ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d007      	beq.n	8009404 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3388      	adds	r3, #136	; 0x88
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	4798      	blx	r3
 8009402:	e017      	b.n	8009434 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8009404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009406:	7c1b      	ldrb	r3, [r3, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d013      	beq.n	8009434 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3368      	adds	r3, #104	; 0x68
 8009412:	681c      	ldr	r4, [r3, #0]
 8009414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009418:	491b      	ldr	r1, [pc, #108]	; (8009488 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 800941a:	4618      	mov	r0, r3
 800941c:	f003 f839 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8009420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009424:	4619      	mov	r1, r3
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	47a0      	blx	r4
 800942a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800942e:	4618      	mov	r0, r3
 8009430:	f003 fbe7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3368      	adds	r3, #104	; 0x68
 800943a:	681c      	ldr	r4, [r3, #0]
 800943c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009440:	4912      	ldr	r1, [pc, #72]	; (800948c <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8009442:	4618      	mov	r0, r3
 8009444:	f003 f825 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8009448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800944c:	4619      	mov	r1, r3
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	47a0      	blx	r4
 8009452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009456:	4618      	mov	r0, r3
 8009458:	f003 fbd3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 800945c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8009462:	f107 0314 	add.w	r3, r7, #20
 8009466:	4618      	mov	r0, r3
 8009468:	f003 fbcb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    while (cur) {
 800946c:	e749      	b.n	8009302 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800946e:	bf00      	nop
 8009470:	3738      	adds	r7, #56	; 0x38
 8009472:	46bd      	mov	sp, r7
 8009474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009478:	08023984 	.word	0x08023984
 800947c:	08023ac4 	.word	0x08023ac4
 8009480:	10624dd3 	.word	0x10624dd3
 8009484:	08023ac8 	.word	0x08023ac8
 8009488:	08023b24 	.word	0x08023b24
 800948c:	08023b34 	.word	0x08023b34

08009490 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8009490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009492:	b091      	sub	sp, #68	; 0x44
 8009494:	af02      	add	r7, sp, #8
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68d9      	ldr	r1, [r3, #12]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3308      	adds	r3, #8
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f107 0210 	add.w	r2, r7, #16
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80094b0:	f107 0310 	add.w	r3, r7, #16
 80094b4:	4618      	mov	r0, r3
 80094b6:	f003 fb77 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 80094ba:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3314      	adds	r3, #20
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4610      	mov	r0, r2
 80094cc:	4798      	blx	r3
 80094ce:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80094d0:	461e      	mov	r6, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3380      	adds	r3, #128	; 0x80
 80094d8:	681c      	ldr	r4, [r3, #0]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68d9      	ldr	r1, [r3, #12]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3318      	adds	r3, #24
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f107 0220 	add.w	r2, r7, #32
 80094ec:	4610      	mov	r0, r2
 80094ee:	4798      	blx	r3
 80094f0:	f107 0318 	add.w	r3, r7, #24
 80094f4:	f107 0220 	add.w	r2, r7, #32
 80094f8:	6879      	ldr	r1, [r7, #4]
 80094fa:	4618      	mov	r0, r3
 80094fc:	47a0      	blx	r4
 80094fe:	f107 0318 	add.w	r3, r7, #24
 8009502:	4618      	mov	r0, r3
 8009504:	f003 fb50 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8009508:	4603      	mov	r3, r0
 800950a:	f107 0008 	add.w	r0, r7, #8
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	4633      	mov	r3, r6
 8009512:	462a      	mov	r2, r5
 8009514:	4924      	ldr	r1, [pc, #144]	; (80095a8 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8009516:	f004 f87b 	bl	800d610 <_Z16StringFromFormatPKcz>
 800951a:	f107 0318 	add.w	r3, r7, #24
 800951e:	4618      	mov	r0, r3
 8009520:	f003 fb6f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8009524:	f107 0320 	add.w	r3, r7, #32
 8009528:	4618      	mov	r0, r3
 800952a:	f003 fb6a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800952e:	f107 0310 	add.w	r3, r7, #16
 8009532:	4618      	mov	r0, r3
 8009534:	f003 fb65 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3368      	adds	r3, #104	; 0x68
 800953e:	681c      	ldr	r4, [r3, #0]
 8009540:	f107 0308 	add.w	r3, r7, #8
 8009544:	4618      	mov	r0, r3
 8009546:	f003 fb2f 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800954a:	4602      	mov	r2, r0
 800954c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009550:	4611      	mov	r1, r2
 8009552:	4618      	mov	r0, r3
 8009554:	f002 ff9d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8009558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	47a0      	blx	r4
 8009562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009566:	4618      	mov	r0, r3
 8009568:	f003 fb4b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3368      	adds	r3, #104	; 0x68
 8009572:	681c      	ldr	r4, [r3, #0]
 8009574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009578:	490c      	ldr	r1, [pc, #48]	; (80095ac <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800957a:	4618      	mov	r0, r3
 800957c:	f002 ff89 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8009580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	47a0      	blx	r4
 800958a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800958e:	4618      	mov	r0, r3
 8009590:	f003 fb37 	bl	800cc02 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009594:	f107 0308 	add.w	r3, r7, #8
 8009598:	4618      	mov	r0, r3
 800959a:	f003 fb32 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800959e:	bf00      	nop
 80095a0:	373c      	adds	r7, #60	; 0x3c
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a6:	bf00      	nop
 80095a8:	08023b44 	.word	0x08023b44
 80095ac:	08023b80 	.word	0x08023b80

080095b0 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 80095b0:	b590      	push	{r4, r7, lr}
 80095b2:	b08d      	sub	sp, #52	; 0x34
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3368      	adds	r3, #104	; 0x68
 80095be:	681c      	ldr	r4, [r3, #0]
 80095c0:	f107 0308 	add.w	r3, r7, #8
 80095c4:	4933      	ldr	r1, [pc, #204]	; (8009694 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 80095c6:	4618      	mov	r0, r3
 80095c8:	f002 ff63 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80095cc:	f107 0308 	add.w	r3, r7, #8
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	47a0      	blx	r4
 80095d6:	f107 0308 	add.w	r3, r7, #8
 80095da:	4618      	mov	r0, r3
 80095dc:	f003 fb11 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3368      	adds	r3, #104	; 0x68
 80095e6:	681c      	ldr	r4, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3380      	adds	r3, #128	; 0x80
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	6912      	ldr	r2, [r2, #16]
 80095f4:	3230      	adds	r2, #48	; 0x30
 80095f6:	f107 0010 	add.w	r0, r7, #16
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4798      	blx	r3
 80095fe:	f107 0310 	add.w	r3, r7, #16
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	47a0      	blx	r4
 8009608:	f107 0310 	add.w	r3, r7, #16
 800960c:	4618      	mov	r0, r3
 800960e:	f003 faf8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3368      	adds	r3, #104	; 0x68
 8009618:	681c      	ldr	r4, [r3, #0]
 800961a:	f107 0318 	add.w	r3, r7, #24
 800961e:	491e      	ldr	r1, [pc, #120]	; (8009698 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8009620:	4618      	mov	r0, r3
 8009622:	f002 ff36 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8009626:	f107 0318 	add.w	r3, r7, #24
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	47a0      	blx	r4
 8009630:	f107 0318 	add.w	r3, r7, #24
 8009634:	4618      	mov	r0, r3
 8009636:	f003 fae4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3368      	adds	r3, #104	; 0x68
 8009640:	681c      	ldr	r4, [r3, #0]
 8009642:	f107 0320 	add.w	r3, r7, #32
 8009646:	4915      	ldr	r1, [pc, #84]	; (800969c <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8009648:	4618      	mov	r0, r3
 800964a:	f002 ff22 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800964e:	f107 0320 	add.w	r3, r7, #32
 8009652:	4619      	mov	r1, r3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	47a0      	blx	r4
 8009658:	f107 0320 	add.w	r3, r7, #32
 800965c:	4618      	mov	r0, r3
 800965e:	f003 fad0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3368      	adds	r3, #104	; 0x68
 8009668:	681c      	ldr	r4, [r3, #0]
 800966a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800966e:	490c      	ldr	r1, [pc, #48]	; (80096a0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8009670:	4618      	mov	r0, r3
 8009672:	f002 ff0e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8009676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	47a0      	blx	r4
 8009680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009684:	4618      	mov	r0, r3
 8009686:	f003 fabc 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800968a:	bf00      	nop
 800968c:	3734      	adds	r7, #52	; 0x34
 800968e:	46bd      	mov	sp, r7
 8009690:	bd90      	pop	{r4, r7, pc}
 8009692:	bf00      	nop
 8009694:	08023b8c 	.word	0x08023b8c
 8009698:	08023b9c 	.word	0x08023b9c
 800969c:	08023bac 	.word	0x08023bac
 80096a0:	08023bc8 	.word	0x08023bc8

080096a4 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 80096a4:	b590      	push	{r4, r7, lr}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3360      	adds	r3, #96	; 0x60
 80096b2:	681c      	ldr	r4, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	335c      	adds	r3, #92	; 0x5c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	6912      	ldr	r2, [r2, #16]
 80096c0:	3214      	adds	r2, #20
 80096c2:	f107 0008 	add.w	r0, r7, #8
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	4798      	blx	r3
 80096ca:	f107 0308 	add.w	r3, r7, #8
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	47a0      	blx	r4
 80096d4:	f107 0308 	add.w	r3, r7, #8
 80096d8:	4618      	mov	r0, r3
 80096da:	f003 fa92 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3370      	adds	r3, #112	; 0x70
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
    writeTestSuiteSummary();
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3374      	adds	r3, #116	; 0x74
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	4798      	blx	r3
    writeProperties();
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3378      	adds	r3, #120	; 0x78
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	4798      	blx	r3
    writeTestCases();
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	337c      	adds	r3, #124	; 0x7c
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	4798      	blx	r3
    writeFileEnding();
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	338c      	adds	r3, #140	; 0x8c
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	4798      	blx	r3
    closeFile();
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	336c      	adds	r3, #108	; 0x6c
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	4798      	blx	r3
}
 8009726:	bf00      	nop
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	bd90      	pop	{r4, r7, pc}

0800972e <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800972e:	b480      	push	{r7}
 8009730:	b083      	sub	sp, #12
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	6039      	str	r1, [r7, #0]
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	3330      	adds	r3, #48	; 0x30
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	4618      	mov	r0, r3
 8009758:	f003 fae2 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
}
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
}
 800976e:	bf00      	nop
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800977a:	b480      	push	{r7}
 800977c:	b083      	sub	sp, #12
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 80097a4:	b590      	push	{r4, r7, lr}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d113      	bne.n	80097e2 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	3201      	adds	r2, #1
 80097c2:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 80097c4:	f240 1233 	movw	r2, #307	; 0x133
 80097c8:	4908      	ldr	r1, [pc, #32]	; (80097ec <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 80097ca:	2034      	movs	r0, #52	; 0x34
 80097cc:	f000 fa9e 	bl	8009d0c <_ZnwjPKci>
 80097d0:	4604      	mov	r4, r0
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	4620      	mov	r0, r4
 80097d6:	f004 fd37 	bl	800e248 <_ZN11TestFailureC1ERKS_>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	60dc      	str	r4, [r3, #12]
    }
}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd90      	pop	{r4, r7, pc}
 80097ea:	bf00      	nop
 80097ec:	08023988 	.word	0x08023988

080097f0 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 80097f0:	b5b0      	push	{r4, r5, r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 80097fa:	4b08      	ldr	r3, [pc, #32]	; (800981c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 80097fc:	681d      	ldr	r5, [r3, #0]
 80097fe:	6838      	ldr	r0, [r7, #0]
 8009800:	f003 f9d2 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8009804:	4602      	mov	r2, r0
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691c      	ldr	r4, [r3, #16]
 800980a:	4905      	ldr	r1, [pc, #20]	; (8009820 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 800980c:	4610      	mov	r0, r2
 800980e:	47a8      	blx	r5
 8009810:	4603      	mov	r3, r0
 8009812:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009814:	bf00      	nop
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bdb0      	pop	{r4, r5, r7, pc}
 800981c:	200000b4 	.word	0x200000b4
 8009820:	08023bd8 	.word	0x08023bd8

08009824 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8009824:	b590      	push	{r4, r7, lr}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800982e:	4b08      	ldr	r3, [pc, #32]	; (8009850 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8009830:	681c      	ldr	r4, [r3, #0]
 8009832:	6838      	ldr	r0, [r7, #0]
 8009834:	f003 f9b8 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8009838:	4602      	mov	r2, r0
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	4619      	mov	r1, r3
 8009842:	4610      	mov	r0, r2
 8009844:	47a0      	blx	r4
}
 8009846:	bf00      	nop
 8009848:	370c      	adds	r7, #12
 800984a:	46bd      	mov	sp, r7
 800984c:	bd90      	pop	{r4, r7, pc}
 800984e:	bf00      	nop
 8009850:	200000b8 	.word	0x200000b8

08009854 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 800985c:	4b05      	ldr	r3, [pc, #20]	; (8009874 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	6912      	ldr	r2, [r2, #16]
 8009864:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009866:	4610      	mov	r0, r2
 8009868:	4798      	blx	r3
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	200000bc 	.word	0x200000bc

08009878 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	603b      	str	r3, [r7, #0]
        return false;
 8009886:	2300      	movs	r3, #0
    }
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
    {
 800989c:	4a04      	ldr	r2, [pc, #16]	; (80098b0 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	601a      	str	r2, [r3, #0]
    }
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	08027a1c 	.word	0x08027a1c

080098b4 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
    }
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff ffe9 	bl	8009894 <_ZN17MemoryLeakFailureD1Ev>
 80098c2:	2104      	movs	r1, #4
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fa35 	bl	8009d34 <_ZdlPvj>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4618      	mov	r0, r3
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 80098d4:	b590      	push	{r4, r7, lr}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	687c      	ldr	r4, [r7, #4]
 80098de:	f000 fc71 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80098e2:	4603      	mov	r3, r0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f00c ff6c 	bl	80167c2 <_ZN18MemoryLeakDetector8getMutexEv>
 80098ea:	4603      	mov	r3, r0
 80098ec:	4619      	mov	r1, r3
 80098ee:	4620      	mov	r0, r4
 80098f0:	f002 fb24 	bl	800bf3c <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd90      	pop	{r4, r7, pc}

080098fe <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 80098fe:	b580      	push	{r7, lr}
 8009900:	b082      	sub	sp, #8
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4618      	mov	r0, r3
 800990a:	f002 fb29 	bl	800bf60 <_ZN15ScopedMutexLockD1Ev>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8009918:	b590      	push	{r4, r7, lr}
 800991a:	b087      	sub	sp, #28
 800991c:	af02      	add	r7, sp, #8
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 8009924:	f000 fc4e 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009928:	4604      	mov	r4, r0
 800992a:	f006 f8df 	bl	800faec <_Z25getCurrentMallocAllocatorv>
 800992e:	4601      	mov	r1, r0
 8009930:	2301      	movs	r3, #1
 8009932:	9301      	str	r3, [sp, #4]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4620      	mov	r0, r4
 800993e:	f00d f983 	bl	8016c48 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8009942:	4603      	mov	r3, r0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	bd90      	pop	{r4, r7, pc}

0800994c <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800994c:	b590      	push	{r4, r7, lr}
 800994e:	b087      	sub	sp, #28
 8009950:	af02      	add	r7, sp, #8
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8009958:	f000 fc34 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800995c:	4603      	mov	r3, r0
 800995e:	68f9      	ldr	r1, [r7, #12]
 8009960:	4618      	mov	r0, r3
 8009962:	f00c ffdd 	bl	8016920 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8009966:	f000 fc2d 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800996a:	4604      	mov	r4, r0
 800996c:	f006 f8be 	bl	800faec <_Z25getCurrentMallocAllocatorv>
 8009970:	4601      	mov	r1, r0
 8009972:	2301      	movs	r3, #1
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4620      	mov	r0, r4
 8009980:	f00d f996 	bl	8016cb0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8009984:	bf00      	nop
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	bd90      	pop	{r4, r7, pc}

0800998c <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800998c:	b590      	push	{r4, r7, lr}
 800998e:	b089      	sub	sp, #36	; 0x24
 8009990:	af04      	add	r7, sp, #16
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800999a:	f000 fc13 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800999e:	4604      	mov	r4, r0
 80099a0:	f006 f8a4 	bl	800faec <_Z25getCurrentMallocAllocatorv>
 80099a4:	4601      	mov	r1, r0
 80099a6:	2301      	movs	r3, #1
 80099a8:	9302      	str	r3, [sp, #8]
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4620      	mov	r0, r4
 80099b8:	f00d f9de 	bl	8016d78 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 80099bc:	4603      	mov	r3, r0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd90      	pop	{r4, r7, pc}
	...

080099c8 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 80099d4:	4b04      	ldr	r3, [pc, #16]	; (80099e8 <_ZL13normal_mallocjPKcj+0x20>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	4798      	blx	r3
 80099dc:	4603      	mov	r3, r0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	200000c8 	.word	0x200000c8

080099ec <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 80099fa:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <_ZL14normal_reallocPvjPKcj+0x24>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	4798      	blx	r3
 8009a04:	4603      	mov	r3, r0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	200000cc 	.word	0x200000cc

08009a14 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8009a20:	4b03      	ldr	r3, [pc, #12]	; (8009a30 <_ZL11normal_freePvPKcj+0x1c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	4798      	blx	r3
}
 8009a28:	bf00      	nop
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	200000d0 	.word	0x200000d0

08009a34 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8009a3c:	f107 0308 	add.w	r3, r7, #8
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff ff47 	bl	80098d4 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009a46:	f000 fbbd 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	f005 ff9e 	bl	800f98c <_Z22getCurrentNewAllocatorv>
 8009a50:	4601      	mov	r1, r0
 8009a52:	2300      	movs	r3, #0
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	4620      	mov	r0, r4
 8009a58:	f00d f864 	bl	8016b24 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009a5c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009a5e:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8009a60:	f107 0308 	add.w	r3, r7, #8
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff ff4a 	bl	80098fe <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8009a6a:	4623      	mov	r3, r4
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd90      	pop	{r4, r7, pc}

08009a74 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009a74:	b590      	push	{r4, r7, lr}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009a7c:	f000 fba2 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009a80:	4604      	mov	r4, r0
 8009a82:	f005 ff83 	bl	800f98c <_Z22getCurrentNewAllocatorv>
 8009a86:	4601      	mov	r1, r0
 8009a88:	2300      	movs	r3, #0
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f00d f849 	bl	8016b24 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009a92:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009a94:	68fb      	ldr	r3, [r7, #12]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3714      	adds	r7, #20
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd90      	pop	{r4, r7, pc}

08009a9e <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8009a9e:	b590      	push	{r4, r7, lr}
 8009aa0:	b083      	sub	sp, #12
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009aa6:	f000 fb8d 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009aaa:	4604      	mov	r4, r0
 8009aac:	f005 ff6e 	bl	800f98c <_Z22getCurrentNewAllocatorv>
 8009ab0:	4601      	mov	r1, r0
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f00d f834 	bl	8016b24 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009abc:	4603      	mov	r3, r0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd90      	pop	{r4, r7, pc}

08009ac6 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8009ac6:	b590      	push	{r4, r7, lr}
 8009ac8:	b089      	sub	sp, #36	; 0x24
 8009aca:	af02      	add	r7, sp, #8
 8009acc:	60f8      	str	r0, [r7, #12]
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8009ad2:	f000 fb77 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	f005 ff58 	bl	800f98c <_Z22getCurrentNewAllocatorv>
 8009adc:	4601      	mov	r1, r0
 8009ade:	2300      	movs	r3, #0
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	4620      	mov	r0, r4
 8009aec:	f00d f8ac 	bl	8016c48 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8009af0:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009af2:	697b      	ldr	r3, [r7, #20]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	371c      	adds	r7, #28
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd90      	pop	{r4, r7, pc}

08009afc <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8009afc:	b590      	push	{r4, r7, lr}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8009b04:	f000 fb5e 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b08:	4604      	mov	r4, r0
 8009b0a:	f005 ff97 	bl	800fa3c <_Z27getCurrentNewArrayAllocatorv>
 8009b0e:	4601      	mov	r1, r0
 8009b10:	2300      	movs	r3, #0
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	4620      	mov	r0, r4
 8009b16:	f00d f805 	bl	8016b24 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009b1a:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd90      	pop	{r4, r7, pc}

08009b26 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8009b26:	b590      	push	{r4, r7, lr}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8009b2e:	f000 fb49 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b32:	4604      	mov	r4, r0
 8009b34:	f005 ff82 	bl	800fa3c <_Z27getCurrentNewArrayAllocatorv>
 8009b38:	4601      	mov	r1, r0
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f00c fff0 	bl	8016b24 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009b44:	4603      	mov	r3, r0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd90      	pop	{r4, r7, pc}

08009b4e <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8009b4e:	b590      	push	{r4, r7, lr}
 8009b50:	b089      	sub	sp, #36	; 0x24
 8009b52:	af02      	add	r7, sp, #8
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8009b5a:	f000 fb33 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b5e:	4604      	mov	r4, r0
 8009b60:	f005 ff6c 	bl	800fa3c <_Z27getCurrentNewArrayAllocatorv>
 8009b64:	4601      	mov	r1, r0
 8009b66:	2300      	movs	r3, #0
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	4620      	mov	r0, r4
 8009b74:	f00d f868 	bl	8016c48 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8009b78:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009b7a:	697b      	ldr	r3, [r7, #20]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	371c      	adds	r7, #28
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd90      	pop	{r4, r7, pc}

08009b84 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8009b84:	b590      	push	{r4, r7, lr}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8009b8c:	f000 fb1a 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b90:	4603      	mov	r3, r0
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f00c fec3 	bl	8016920 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8009b9a:	f000 fb13 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	f005 fef4 	bl	800f98c <_Z22getCurrentNewAllocatorv>
 8009ba4:	4601      	mov	r1, r0
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	4620      	mov	r0, r4
 8009bac:	f00d f8ca 	bl	8016d44 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd90      	pop	{r4, r7, pc}

08009bb8 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8009bb8:	b590      	push	{r4, r7, lr}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8009bc0:	f000 fb00 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f00c fea9 	bl	8016920 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8009bce:	f000 faf9 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	f005 ff32 	bl	800fa3c <_Z27getCurrentNewArrayAllocatorv>
 8009bd8:	4601      	mov	r1, r0
 8009bda:	2300      	movs	r3, #0
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	4620      	mov	r0, r4
 8009be0:	f00d f8b0 	bl	8016d44 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd90      	pop	{r4, r7, pc}

08009bec <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009bf4:	4b04      	ldr	r3, [pc, #16]	; (8009c08 <_ZL19normal_operator_newj+0x1c>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	4798      	blx	r3
 8009bfc:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	200000c8 	.word	0x200000c8

08009c0c <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8009c14:	4b04      	ldr	r3, [pc, #16]	; (8009c28 <_ZL27normal_operator_new_nothrowj+0x1c>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	4798      	blx	r3
 8009c1c:	4603      	mov	r3, r0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	200000c8 	.word	0x200000c8

08009c2c <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009c38:	4b04      	ldr	r3, [pc, #16]	; (8009c4c <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	4798      	blx	r3
 8009c40:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009c42:	697b      	ldr	r3, [r7, #20]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3718      	adds	r7, #24
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	200000c8 	.word	0x200000c8

08009c50 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009c58:	4b04      	ldr	r3, [pc, #16]	; (8009c6c <_ZL25normal_operator_new_arrayj+0x1c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	4798      	blx	r3
 8009c60:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009c62:	68fb      	ldr	r3, [r7, #12]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	200000c8 	.word	0x200000c8

08009c70 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8009c78:	4b04      	ldr	r3, [pc, #16]	; (8009c8c <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	4798      	blx	r3
 8009c80:	4603      	mov	r3, r0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	200000c8 	.word	0x200000c8

08009c90 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009c9c:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	4798      	blx	r3
 8009ca4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009ca6:	697b      	ldr	r3, [r7, #20]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3718      	adds	r7, #24
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	200000c8 	.word	0x200000c8

08009cb4 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8009cbc:	4b03      	ldr	r3, [pc, #12]	; (8009ccc <_ZL22normal_operator_deletePv+0x18>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	4798      	blx	r3
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	200000d0 	.word	0x200000d0

08009cd0 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8009cd8:	4b03      	ldr	r3, [pc, #12]	; (8009ce8 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	4798      	blx	r3
}
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	200000d0 	.word	0x200000d0

08009cec <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8009cf4:	4b04      	ldr	r3, [pc, #16]	; (8009d08 <_Znwj+0x1c>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	4798      	blx	r3
 8009cfc:	4603      	mov	r3, r0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	2000002c 	.word	0x2000002c

08009d0c <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8009d18:	4b05      	ldr	r3, [pc, #20]	; (8009d30 <_ZnwjPKci+0x24>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	68b9      	ldr	r1, [r7, #8]
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	4798      	blx	r3
 8009d24:	4603      	mov	r3, r0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000034 	.word	0x20000034

08009d34 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8009d3e:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <_ZdlPvj+0x1c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	4798      	blx	r3
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20000044 	.word	0x20000044

08009d54 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8009d60:	4b05      	ldr	r3, [pc, #20]	; (8009d78 <_ZnajPKci+0x24>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	68b9      	ldr	r1, [r7, #8]
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	4798      	blx	r3
 8009d6c:	4603      	mov	r3, r0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000040 	.word	0x20000040

08009d7c <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8009d84:	4b03      	ldr	r3, [pc, #12]	; (8009d94 <_ZdaPv+0x18>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	4798      	blx	r3
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	20000048 	.word	0x20000048

08009d98 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8009da2:	4b04      	ldr	r3, [pc, #16]	; (8009db4 <_ZdaPvj+0x1c>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	4798      	blx	r3
}
 8009daa:	bf00      	nop
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	20000048 	.word	0x20000048

08009db8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8009db8:	b480      	push	{r7}
 8009dba:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8009dbc:	4b12      	ldr	r3, [pc, #72]	; (8009e08 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8009dbe:	4a13      	ldr	r2, [pc, #76]	; (8009e0c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8009dc0:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8009dc2:	4b13      	ldr	r3, [pc, #76]	; (8009e10 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8009dc4:	4a13      	ldr	r2, [pc, #76]	; (8009e14 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8009dc6:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8009dc8:	4b13      	ldr	r3, [pc, #76]	; (8009e18 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8009dca:	4a14      	ldr	r2, [pc, #80]	; (8009e1c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8009dcc:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8009dce:	4b14      	ldr	r3, [pc, #80]	; (8009e20 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8009dd0:	4a14      	ldr	r2, [pc, #80]	; (8009e24 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8009dd2:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8009dd4:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8009dd6:	4a15      	ldr	r2, [pc, #84]	; (8009e2c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8009dd8:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8009dda:	4b15      	ldr	r3, [pc, #84]	; (8009e30 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8009ddc:	4a15      	ldr	r2, [pc, #84]	; (8009e34 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8009dde:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8009de0:	4b15      	ldr	r3, [pc, #84]	; (8009e38 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8009de2:	4a16      	ldr	r2, [pc, #88]	; (8009e3c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8009de4:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8009de6:	4b16      	ldr	r3, [pc, #88]	; (8009e40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8009de8:	4a16      	ldr	r2, [pc, #88]	; (8009e44 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8009dea:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8009dec:	4b16      	ldr	r3, [pc, #88]	; (8009e48 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8009dee:	4a17      	ldr	r2, [pc, #92]	; (8009e4c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8009df0:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8009df2:	4b17      	ldr	r3, [pc, #92]	; (8009e50 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8009df4:	4a17      	ldr	r2, [pc, #92]	; (8009e54 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8009df6:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8009df8:	4b17      	ldr	r3, [pc, #92]	; (8009e58 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8009dfa:	4a18      	ldr	r2, [pc, #96]	; (8009e5c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8009dfc:	601a      	str	r2, [r3, #0]

#endif
}
 8009dfe:	bf00      	nop
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	2000002c 	.word	0x2000002c
 8009e0c:	08009bed 	.word	0x08009bed
 8009e10:	20000030 	.word	0x20000030
 8009e14:	08009c0d 	.word	0x08009c0d
 8009e18:	20000034 	.word	0x20000034
 8009e1c:	08009c2d 	.word	0x08009c2d
 8009e20:	20000038 	.word	0x20000038
 8009e24:	08009c51 	.word	0x08009c51
 8009e28:	2000003c 	.word	0x2000003c
 8009e2c:	08009c71 	.word	0x08009c71
 8009e30:	20000040 	.word	0x20000040
 8009e34:	08009c91 	.word	0x08009c91
 8009e38:	20000044 	.word	0x20000044
 8009e3c:	08009cb5 	.word	0x08009cb5
 8009e40:	20000048 	.word	0x20000048
 8009e44:	08009cd1 	.word	0x08009cd1
 8009e48:	20000014 	.word	0x20000014
 8009e4c:	080099c9 	.word	0x080099c9
 8009e50:	2000001c 	.word	0x2000001c
 8009e54:	080099ed 	.word	0x080099ed
 8009e58:	20000018 	.word	0x20000018
 8009e5c:	08009a15 	.word	0x08009a15

08009e60 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8009e60:	b480      	push	{r7}
 8009e62:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8009e64:	4b08      	ldr	r3, [pc, #32]	; (8009e88 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a08      	ldr	r2, [pc, #32]	; (8009e8c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d004      	beq.n	8009e78 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8009e6e:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a07      	ldr	r2, [pc, #28]	; (8009e90 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d101      	bne.n	8009e7c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e000      	b.n	8009e7e <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8009e7c:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	2000002c 	.word	0x2000002c
 8009e8c:	08009a75 	.word	0x08009a75
 8009e90:	08009a35 	.word	0x08009a35

08009e94 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8009e98:	4b1f      	ldr	r3, [pc, #124]	; (8009f18 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	4a1e      	ldr	r2, [pc, #120]	; (8009f18 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8009ea0:	6013      	str	r3, [r2, #0]
 8009ea2:	4b1d      	ldr	r3, [pc, #116]	; (8009f18 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	bfcc      	ite	gt
 8009eaa:	2301      	movgt	r3, #1
 8009eac:	2300      	movle	r3, #0
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d12e      	bne.n	8009f12 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8009eb4:	4b19      	ldr	r3, [pc, #100]	; (8009f1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a19      	ldr	r2, [pc, #100]	; (8009f20 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8009eba:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8009ebc:	4b19      	ldr	r3, [pc, #100]	; (8009f24 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a19      	ldr	r2, [pc, #100]	; (8009f28 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8009ec2:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8009ec4:	4b19      	ldr	r3, [pc, #100]	; (8009f2c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a19      	ldr	r2, [pc, #100]	; (8009f30 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8009eca:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8009ecc:	4b19      	ldr	r3, [pc, #100]	; (8009f34 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a19      	ldr	r2, [pc, #100]	; (8009f38 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8009ed2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8009ed4:	4b19      	ldr	r3, [pc, #100]	; (8009f3c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a19      	ldr	r2, [pc, #100]	; (8009f40 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8009eda:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8009edc:	4b19      	ldr	r3, [pc, #100]	; (8009f44 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a19      	ldr	r2, [pc, #100]	; (8009f48 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8009ee2:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8009ee4:	4b19      	ldr	r3, [pc, #100]	; (8009f4c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a19      	ldr	r2, [pc, #100]	; (8009f50 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8009eea:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8009eec:	4b19      	ldr	r3, [pc, #100]	; (8009f54 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a19      	ldr	r2, [pc, #100]	; (8009f58 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8009ef2:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8009ef4:	4b19      	ldr	r3, [pc, #100]	; (8009f5c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a19      	ldr	r2, [pc, #100]	; (8009f60 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8009efa:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8009efc:	4b19      	ldr	r3, [pc, #100]	; (8009f64 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a19      	ldr	r2, [pc, #100]	; (8009f68 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8009f02:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8009f04:	4b19      	ldr	r3, [pc, #100]	; (8009f6c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a19      	ldr	r2, [pc, #100]	; (8009f70 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8009f0a:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8009f0c:	f7ff ff54 	bl	8009db8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8009f10:	e000      	b.n	8009f14 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8009f12:	bf00      	nop
#endif
}
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20000848 	.word	0x20000848
 8009f1c:	2000002c 	.word	0x2000002c
 8009f20:	2000004c 	.word	0x2000004c
 8009f24:	20000030 	.word	0x20000030
 8009f28:	20000050 	.word	0x20000050
 8009f2c:	20000034 	.word	0x20000034
 8009f30:	20000054 	.word	0x20000054
 8009f34:	20000038 	.word	0x20000038
 8009f38:	20000058 	.word	0x20000058
 8009f3c:	2000003c 	.word	0x2000003c
 8009f40:	2000005c 	.word	0x2000005c
 8009f44:	20000040 	.word	0x20000040
 8009f48:	20000060 	.word	0x20000060
 8009f4c:	20000044 	.word	0x20000044
 8009f50:	20000064 	.word	0x20000064
 8009f54:	20000048 	.word	0x20000048
 8009f58:	20000068 	.word	0x20000068
 8009f5c:	20000014 	.word	0x20000014
 8009f60:	20000020 	.word	0x20000020
 8009f64:	2000001c 	.word	0x2000001c
 8009f68:	20000028 	.word	0x20000028
 8009f6c:	20000018 	.word	0x20000018
 8009f70:	20000024 	.word	0x20000024

08009f74 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8009f74:	b480      	push	{r7}
 8009f76:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8009f78:	4b1f      	ldr	r3, [pc, #124]	; (8009ff8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	4a1e      	ldr	r2, [pc, #120]	; (8009ff8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	4b1d      	ldr	r3, [pc, #116]	; (8009ff8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfcc      	ite	gt
 8009f8a:	2301      	movgt	r3, #1
 8009f8c:	2300      	movle	r3, #0
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d12c      	bne.n	8009fee <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 8009f94:	4b19      	ldr	r3, [pc, #100]	; (8009ffc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a19      	ldr	r2, [pc, #100]	; (800a000 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 8009f9a:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8009f9c:	4b19      	ldr	r3, [pc, #100]	; (800a004 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a19      	ldr	r2, [pc, #100]	; (800a008 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 8009fa2:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 8009fa4:	4b19      	ldr	r3, [pc, #100]	; (800a00c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a19      	ldr	r2, [pc, #100]	; (800a010 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 8009faa:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8009fac:	4b19      	ldr	r3, [pc, #100]	; (800a014 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a19      	ldr	r2, [pc, #100]	; (800a018 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 8009fb2:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 8009fb4:	4b19      	ldr	r3, [pc, #100]	; (800a01c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a19      	ldr	r2, [pc, #100]	; (800a020 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 8009fba:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8009fbc:	4b19      	ldr	r3, [pc, #100]	; (800a024 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a19      	ldr	r2, [pc, #100]	; (800a028 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 8009fc2:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 8009fc4:	4b19      	ldr	r3, [pc, #100]	; (800a02c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a19      	ldr	r2, [pc, #100]	; (800a030 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 8009fca:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8009fcc:	4b19      	ldr	r3, [pc, #100]	; (800a034 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a19      	ldr	r2, [pc, #100]	; (800a038 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 8009fd2:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 8009fd4:	4b19      	ldr	r3, [pc, #100]	; (800a03c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a19      	ldr	r2, [pc, #100]	; (800a040 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8009fda:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8009fdc:	4b19      	ldr	r3, [pc, #100]	; (800a044 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a19      	ldr	r2, [pc, #100]	; (800a048 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8009fe2:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8009fe4:	4b19      	ldr	r3, [pc, #100]	; (800a04c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a19      	ldr	r2, [pc, #100]	; (800a050 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	e000      	b.n	8009ff0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8009fee:	bf00      	nop
#endif
}
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	20000848 	.word	0x20000848
 8009ffc:	2000004c 	.word	0x2000004c
 800a000:	2000002c 	.word	0x2000002c
 800a004:	20000050 	.word	0x20000050
 800a008:	20000030 	.word	0x20000030
 800a00c:	20000054 	.word	0x20000054
 800a010:	20000034 	.word	0x20000034
 800a014:	20000058 	.word	0x20000058
 800a018:	20000038 	.word	0x20000038
 800a01c:	2000005c 	.word	0x2000005c
 800a020:	2000003c 	.word	0x2000003c
 800a024:	20000060 	.word	0x20000060
 800a028:	20000040 	.word	0x20000040
 800a02c:	20000064 	.word	0x20000064
 800a030:	20000044 	.word	0x20000044
 800a034:	20000068 	.word	0x20000068
 800a038:	20000048 	.word	0x20000048
 800a03c:	20000020 	.word	0x20000020
 800a040:	20000014 	.word	0x20000014
 800a044:	20000028 	.word	0x20000028
 800a048:	2000001c 	.word	0x2000001c
 800a04c:	20000024 	.word	0x20000024
 800a050:	20000018 	.word	0x20000018

0800a054 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
    {
 800a05c:	4a05      	ldr	r2, [pc, #20]	; (800a074 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	601a      	str	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fc15 	bl	8009894 <_ZN17MemoryLeakFailureD1Ev>
    }
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	08027a08 	.word	0x08027a08

0800a078 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
    }
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff ffe7 	bl	800a054 <_ZN25MemoryLeakWarningReporterD1Ev>
 800a086:	2104      	movs	r1, #4
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff fe53 	bl	8009d34 <_ZdlPvj>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4618      	mov	r0, r3
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	4a04      	ldr	r2, [pc, #16]	; (800a0b4 <_ZN14TestTerminatorC1Ev+0x1c>)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	080283b4 	.word	0x080283b4

0800a0b8 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7ff ffe8 	bl	800a098 <_ZN14TestTerminatorC1Ev>
 800a0c8:	4a03      	ldr	r2, [pc, #12]	; (800a0d8 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	0802838c 	.word	0x0802838c

0800a0dc <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0de:	b099      	sub	sp, #100	; 0x64
 800a0e0:	af02      	add	r7, sp, #8
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800a0e6:	f009 fdb7 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800a0ea:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800a0ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	339c      	adds	r3, #156	; 0x9c
 800a0f2:	681c      	ldr	r4, [r3, #0]
 800a0f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a0f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f008 fbc4 	bl	8012888 <_ZNK10UtestShell7getNameEv>
 800a100:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a104:	4618      	mov	r0, r3
 800a106:	f002 fd4f 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800a10a:	4605      	mov	r5, r0
 800a10c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a10e:	f008 fc9b 	bl	8012a48 <_ZNK10UtestShell13getLineNumberEv>
 800a112:	4606      	mov	r6, r0
 800a114:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f002 f9b9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800a120:	f107 000c 	add.w	r0, r7, #12
 800a124:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	4633      	mov	r3, r6
 800a12c:	462a      	mov	r2, r5
 800a12e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a130:	f004 fd14 	bl	800eb5c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800a134:	2300      	movs	r3, #0
 800a136:	653b      	str	r3, [r7, #80]	; 0x50
 800a138:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7ff ffbb 	bl	800a0b8 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800a142:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a146:	f107 030c 	add.w	r3, r7, #12
 800a14a:	4619      	mov	r1, r3
 800a14c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a14e:	47a0      	blx	r4
 800a150:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a154:	4618      	mov	r0, r3
 800a156:	f009 fe79 	bl	8013e4c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800a15a:	f107 030c 	add.w	r3, r7, #12
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f9ac 	bl	800a4bc <_ZN11FailFailureD1Ev>
 800a164:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a168:	4618      	mov	r0, r3
 800a16a:	f002 fd4a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800a16e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a172:	4618      	mov	r0, r3
 800a174:	f002 fd45 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800a178:	bf00      	nop
 800a17a:	375c      	adds	r7, #92	; 0x5c
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a180 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	4a04      	ldr	r2, [pc, #16]	; (800a19c <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4618      	mov	r0, r3
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	08027a1c 	.word	0x08027a1c

0800a1a0 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7ff ffe8 	bl	800a180 <_ZN17MemoryLeakFailureC1Ev>
 800a1b0:	4a03      	ldr	r2, [pc, #12]	; (800a1c0 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	08027a08 	.word	0x08027a08

0800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800a1c4:	b598      	push	{r3, r4, r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800a1c8:	4b11      	ldr	r3, [pc, #68]	; (800a210 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d11b      	bne.n	800a208 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800a1d0:	f7ff fe60 	bl	8009e94 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800a1d4:	2004      	movs	r0, #4
 800a1d6:	f7ff fd89 	bl	8009cec <_Znwj>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	461c      	mov	r4, r3
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f7ff ffde 	bl	800a1a0 <_ZN25MemoryLeakWarningReporterC1Ev>
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	; (800a214 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800a1e6:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800a1e8:	f241 1050 	movw	r0, #4432	; 0x1150
 800a1ec:	f7ff fd7e 	bl	8009cec <_Znwj>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	461c      	mov	r4, r3
 800a1f4:	4b07      	ldr	r3, [pc, #28]	; (800a214 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f00c fa3e 	bl	801667c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800a200:	4b03      	ldr	r3, [pc, #12]	; (800a210 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a202:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800a204:	f7ff feb6 	bl	8009f74 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800a208:	4b01      	ldr	r3, [pc, #4]	; (800a210 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a20a:	681b      	ldr	r3, [r3, #0]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	bd98      	pop	{r3, r4, r7, pc}
 800a210:	20000850 	.word	0x20000850
 800a214:	2000084c 	.word	0x2000084c

0800a218 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	78fa      	ldrb	r2, [r7, #3]
 800a228:	765a      	strb	r2, [r3, #25]
}
 800a22a:	bf00      	nop
 800a22c:	370c      	adds	r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
	...

0800a238 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800a23c:	f7ff fdbc 	bl	8009db8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800a240:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d004      	beq.n	800a252 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	3204      	adds	r2, #4
 800a24c:	6812      	ldr	r2, [r2, #0]
 800a24e:	4618      	mov	r0, r3
 800a250:	4790      	blx	r2
    delete globalReporter;
 800a252:	4b08      	ldr	r3, [pc, #32]	; (800a274 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d004      	beq.n	800a264 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	3204      	adds	r2, #4
 800a25e:	6812      	ldr	r2, [r2, #0]
 800a260:	4618      	mov	r0, r3
 800a262:	4790      	blx	r2
    globalDetector = NULLPTR;
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800a266:	2200      	movs	r2, #0
 800a268:	601a      	str	r2, [r3, #0]
}
 800a26a:	bf00      	nop
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	20000850 	.word	0x20000850
 800a274:	2000084c 	.word	0x2000084c

0800a278 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	4618      	mov	r0, r3
 800a28a:	f006 fdfd 	bl	8010e88 <_ZN10TestPluginC1ERK12SimpleString>
 800a28e:	4a14      	ldr	r2, [pc, #80]	; (800a2e0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	761a      	strb	r2, [r3, #24]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	765a      	strb	r2, [r3, #25]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800a2a6:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d102      	bne.n	800a2b4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800a2ae:	4a0d      	ldr	r2, [pc, #52]	; (800a2e4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d003      	beq.n	800a2c2 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	615a      	str	r2, [r3, #20]
 800a2c0:	e004      	b.n	800a2cc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800a2c2:	f7ff ff7f 	bl	800a1c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f00c fa69 	bl	80167a8 <_ZN18MemoryLeakDetector6enableEv>
}
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	08027a30 	.word	0x08027a30
 800a2e4:	20000854 	.word	0x20000854

0800a2e8 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	4a09      	ldr	r2, [pc, #36]	; (800a318 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7e5b      	ldrb	r3, [r3, #25]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d003      	beq.n	800a306 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800a2fe:	f7ff fd5b 	bl	8009db8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800a302:	f7ff ff99 	bl	800a238 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4618      	mov	r0, r3
 800a30a:	f006 fdf9 	bl	8010f00 <_ZN10TestPluginD1Ev>
    }
}
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	08027a30 	.word	0x08027a30

0800a31c <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
}
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7ff ffdf 	bl	800a2e8 <_ZN23MemoryLeakWarningPluginD1Ev>
 800a32a:	2124      	movs	r1, #36	; 0x24
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7ff fd01 	bl	8009d34 <_ZdlPvj>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f00c fa0e 	bl	801676e <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7fd ffb0 	bl	80082b8 <_ZNK10TestResult15getFailureCountEv>
 800a358:	4602      	mov	r2, r0
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	621a      	str	r2, [r3, #32]
}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800a368:	b590      	push	{r4, r7, lr}
 800a36a:	b097      	sub	sp, #92	; 0x5c
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	4618      	mov	r0, r3
 800a37a:	f00c fa08 	bl	801678e <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	2103      	movs	r1, #3
 800a384:	4618      	mov	r0, r3
 800a386:	f00c fda5 	bl	8016ed4 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800a38a:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	7e1b      	ldrb	r3, [r3, #24]
 800a390:	f083 0301 	eor.w	r3, r3, #1
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00e      	beq.n	800a3b8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d009      	beq.n	800a3b8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6a1c      	ldr	r4, [r3, #32]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7fd ff85 	bl	80082b8 <_ZNK10TestResult15getFailureCountEv>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	d101      	bne.n	800a3b8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e000      	b.n	800a3ba <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d04c      	beq.n	800a458 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800a3be:	f7ff fd4f 	bl	8009e60 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d028      	beq.n	800a41a <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	2103      	movs	r1, #3
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f00c fd45 	bl	8016e5e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a3da:	4611      	mov	r1, r2
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f002 f858 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800a3e2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a3e6:	f107 0310 	add.w	r3, r7, #16
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f003 feaf 	bl	800e150 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800a3f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f002 fc03 	bl	800cc02 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	3334      	adds	r3, #52	; 0x34
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f107 0210 	add.w	r2, r7, #16
 800a408:	4611      	mov	r1, r2
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800a40e:	f107 0310 	add.w	r3, r7, #16
 800a412:	4618      	mov	r0, r3
 800a414:	f003 ff5c 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800a418:	e01e      	b.n	800a458 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d01a      	beq.n	800a458 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	3338      	adds	r3, #56	; 0x38
 800a428:	681c      	ldr	r4, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	461a      	mov	r2, r3
 800a430:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a434:	4910      	ldr	r1, [pc, #64]	; (800a478 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800a436:	4618      	mov	r0, r3
 800a438:	f003 f8ea 	bl	800d610 <_Z16StringFromFormatPKcz>
 800a43c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a440:	4618      	mov	r0, r3
 800a442:	f002 fbb1 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800a446:	4603      	mov	r3, r0
 800a448:	4619      	mov	r1, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	47a0      	blx	r4
 800a44e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a452:	4618      	mov	r0, r3
 800a454:	f002 fbd5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f00c fd13 	bl	8016e88 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	61da      	str	r2, [r3, #28]
}
 800a46e:	bf00      	nop
 800a470:	375c      	adds	r7, #92	; 0x5c
 800a472:	46bd      	mov	sp, r7
 800a474:	bd90      	pop	{r4, r7, pc}
 800a476:	bf00      	nop
 800a478:	08023bdc 	.word	0x08023bdc

0800a47c <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	2102      	movs	r1, #2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f00c fd21 	bl	8016ed4 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800a492:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d007      	beq.n	800a4ac <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	2102      	movs	r1, #2
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f00c fcdb 	bl	8016e5e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	e000      	b.n	800a4ae <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800a4ac:	4b02      	ldr	r3, [pc, #8]	; (800a4b8 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	08023c1c 	.word	0x08023c1c

0800a4bc <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	4a05      	ldr	r2, [pc, #20]	; (800a4dc <_ZN11FailFailureD1Ev+0x20>)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f003 feff 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	08027a78 	.word	0x08027a78

0800a4e0 <_ZN11FailFailureD0Ev>:
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff ffe7 	bl	800a4bc <_ZN11FailFailureD1Ev>
 800a4ee:	2134      	movs	r1, #52	; 0x34
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff fc1f 	bl	8009d34 <_ZdlPvj>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4618      	mov	r0, r3
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	4a06      	ldr	r2, [pc, #24]	; (800a554 <_ZN19MockFailureReporterC1Ev+0x24>)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	711a      	strb	r2, [r3, #4]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4618      	mov	r0, r3
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	08028c54 	.word	0x08028c54

0800a558 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	4a04      	ldr	r2, [pc, #16]	; (800a574 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	08028c54 	.word	0x08028c54

0800a578 <_ZN19MockFailureReporterD0Ev>:
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff ffe9 	bl	800a558 <_ZN19MockFailureReporterD1Ev>
 800a586:	2108      	movs	r1, #8
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff fbd3 	bl	8009d34 <_ZdlPvj>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4618      	mov	r0, r3
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	4a05      	ldr	r2, [pc, #20]	; (800a5b8 <_ZN11MockFailureD1Ev+0x20>)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f003 fe91 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	08027bcc 	.word	0x08027bcc

0800a5bc <_ZN11MockFailureD0Ev>:
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f7ff ffe7 	bl	800a598 <_ZN11MockFailureD1Ev>
 800a5ca:	2134      	movs	r1, #52	; 0x34
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff fbb1 	bl	8009d34 <_ZdlPvj>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800a5dc:	b590      	push	{r4, r7, lr}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
 800a5e6:	4a16      	ldr	r2, [pc, #88]	; (800a640 <_ZN14MockNamedValueC1ERKS_+0x64>)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	601a      	str	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	1d1a      	adds	r2, r3, #4
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	f001 ff9f 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f103 020c 	add.w	r2, r3, #12
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	330c      	adds	r3, #12
 800a606:	4619      	mov	r1, r3
 800a608:	4610      	mov	r0, r2
 800a60a:	f001 ff96 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	f102 0418 	add.w	r4, r2, #24
 800a616:	3318      	adds	r3, #24
 800a618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a61a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	629a      	str	r2, [r3, #40]	; 0x28
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	62da      	str	r2, [r3, #44]	; 0x2c
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	631a      	str	r2, [r3, #48]	; 0x30
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4618      	mov	r0, r3
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd90      	pop	{r4, r7, pc}
 800a640:	08028c94 	.word	0x08028c94

0800a644 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800a64e:	f107 030c 	add.w	r3, r7, #12
 800a652:	4916      	ldr	r1, [pc, #88]	; (800a6ac <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800a654:	4618      	mov	r0, r3
 800a656:	f001 ff1c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800a65a:	f107 030c 	add.w	r3, r7, #12
 800a65e:	4619      	mov	r1, r3
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f002 fb1f 	bl	800cca4 <_ZneRK12SimpleStringS1_>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d005      	beq.n	800a678 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	4810      	ldr	r0, [pc, #64]	; (800a6b0 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800a670:	f000 ff70 	bl	800b554 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800a674:	4603      	mov	r3, r0
 800a676:	e000      	b.n	800a67a <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800a678:	4b0d      	ldr	r3, [pc, #52]	; (800a6b0 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	f107 030c 	add.w	r3, r7, #12
 800a680:	4618      	mov	r0, r3
 800a682:	f002 fabe 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	33a8      	adds	r3, #168	; 0xa8
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6978      	ldr	r0, [r7, #20]
 800a692:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	33ac      	adds	r3, #172	; 0xac
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6978      	ldr	r0, [r7, #20]
 800a69e:	4798      	blx	r3
    return mock_support;
 800a6a0:	697b      	ldr	r3, [r7, #20]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	08023c20 	.word	0x08023c20
 800a6b0:	20000858 	.word	0x20000858

0800a6b4 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800a6be:	4a21      	ldr	r2, [pc, #132]	; (800a744 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	605a      	str	r2, [r3, #4]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	609a      	str	r2, [r3, #8]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	731a      	strb	r2, [r3, #12]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f103 0218 	add.w	r2, r3, #24
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	615a      	str	r2, [r3, #20]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3318      	adds	r3, #24
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7ff ff23 	bl	800a530 <_ZN19MockFailureReporterC1Ev>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	3320      	adds	r3, #32
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f010 fefc 	bl	801b4ec <_ZN21MockExpectedCallsListC1Ev>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	62da      	str	r2, [r3, #44]	; 0x2c
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	3330      	adds	r3, #48	; 0x30
 800a70e:	4618      	mov	r0, r3
 800a710:	f014 fbe8 	bl	801eee4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3338      	adds	r3, #56	; 0x38
 800a718:	4618      	mov	r0, r3
 800a71a:	f014 faf2 	bl	801ed02 <_ZN18MockNamedValueListC1Ev>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	333c      	adds	r3, #60	; 0x3c
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	4618      	mov	r0, r3
 800a726:	f001 ff08 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800a732:	2100      	movs	r1, #0
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f894 	bl	800a862 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4618      	mov	r0, r3
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	08027aa4 	.word	0x08027aa4

0800a748 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	4a0d      	ldr	r2, [pc, #52]	; (800a788 <_ZN11MockSupportD1Ev+0x40>)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	333c      	adds	r3, #60	; 0x3c
 800a75a:	4618      	mov	r0, r3
 800a75c:	f002 fa51 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3330      	adds	r3, #48	; 0x30
 800a764:	4618      	mov	r0, r3
 800a766:	f014 fbd1 	bl	801ef0c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	3320      	adds	r3, #32
 800a76e:	4618      	mov	r0, r3
 800a770:	f010 fed0 	bl	801b514 <_ZN21MockExpectedCallsListD1Ev>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3318      	adds	r3, #24
 800a778:	4618      	mov	r0, r3
 800a77a:	f7ff feed 	bl	800a558 <_ZN19MockFailureReporterD1Ev>
{
}
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	08027aa4 	.word	0x08027aa4

0800a78c <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
}
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff ffd7 	bl	800a748 <_ZN11MockSupportD1Ev>
 800a79a:	2148      	movs	r1, #72	; 0x48
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7ff fac9 	bl	8009d34 <_ZdlPvj>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691a      	ldr	r2, [r3, #16]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3310      	adds	r3, #16
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	78f9      	ldrb	r1, [r7, #3]
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4798      	blx	r3
}
 800a7cc:	bf00      	nop
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d102      	bne.n	800a7ea <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3318      	adds	r3, #24
 800a7e8:	e000      	b.n	800a7ec <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00a      	beq.n	800a80e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	33c8      	adds	r3, #200	; 0xc8
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	6952      	ldr	r2, [r2, #20]
 800a80a:	4611      	mov	r1, r2
 800a80c:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3338      	adds	r3, #56	; 0x38
 800a812:	4618      	mov	r0, r3
 800a814:	f014 fb0b 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01c      	beq.n	800a85a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800a820:	68f9      	ldr	r1, [r7, #12]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 ff26 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	bf14      	ite	ne
 800a82e:	2301      	movne	r3, #1
 800a830:	2300      	moveq	r3, #0
 800a832:	b2db      	uxtb	r3, r3
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00b      	beq.n	800a850 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800a838:	68f9      	ldr	r1, [r7, #12]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 ff1a 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a840:	4603      	mov	r3, r0
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	32a4      	adds	r2, #164	; 0xa4
 800a846:	6812      	ldr	r2, [r2, #0]
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	6949      	ldr	r1, [r1, #20]
 800a84c:	4618      	mov	r0, r3
 800a84e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f014 f9f5 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	e7df      	b.n	800a81a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d102      	bne.n	800a878 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	e000      	b.n	800a87a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	6113      	str	r3, [r2, #16]
}
 800a87e:	bf00      	nop
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	3330      	adds	r3, #48	; 0x30
 800a896:	4618      	mov	r0, r3
 800a898:	f012 fb10 	bl	801cebc <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800a89c:	bf00      	nop
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800a8a4:	b590      	push	{r4, r7, lr}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	3330      	adds	r3, #48	; 0x30
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	68b9      	ldr	r1, [r7, #8]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f014 fb75 	bl	801efa8 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3338      	adds	r3, #56	; 0x38
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f014 fab3 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800a8c8:	6178      	str	r0, [r7, #20]
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d01c      	beq.n	800a90a <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800a8d0:	6979      	ldr	r1, [r7, #20]
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 fece 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	bf14      	ite	ne
 800a8de:	2301      	movne	r3, #1
 800a8e0:	2300      	moveq	r3, #0
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00b      	beq.n	800a900 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800a8e8:	6979      	ldr	r1, [r7, #20]
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 fec2 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	32b0      	adds	r2, #176	; 0xb0
 800a8f6:	6814      	ldr	r4, [r2, #0]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	68b9      	ldr	r1, [r7, #8]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a900:	6978      	ldr	r0, [r7, #20]
 800a902:	f014 f99d 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800a906:	6178      	str	r0, [r7, #20]
 800a908:	e7df      	b.n	800a8ca <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800a90a:	bf00      	nop
 800a90c:	371c      	adds	r7, #28
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd90      	pop	{r4, r7, pc}

0800a912 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800a912:	b590      	push	{r4, r7, lr}
 800a914:	b087      	sub	sp, #28
 800a916:	af00      	add	r7, sp, #0
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	60b9      	str	r1, [r7, #8]
 800a91c:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3330      	adds	r3, #48	; 0x30
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	68b9      	ldr	r1, [r7, #8]
 800a926:	4618      	mov	r0, r3
 800a928:	f014 fb5a 	bl	801efe0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3338      	adds	r3, #56	; 0x38
 800a930:	4618      	mov	r0, r3
 800a932:	f014 fa7c 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800a936:	6178      	str	r0, [r7, #20]
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d01c      	beq.n	800a978 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800a93e:	6979      	ldr	r1, [r7, #20]
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 fe97 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	bf14      	ite	ne
 800a94c:	2301      	movne	r3, #1
 800a94e:	2300      	moveq	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00b      	beq.n	800a96e <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800a956:	6979      	ldr	r1, [r7, #20]
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 fe8b 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a95e:	4603      	mov	r3, r0
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	32b4      	adds	r2, #180	; 0xb4
 800a964:	6814      	ldr	r4, [r2, #0]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	68b9      	ldr	r1, [r7, #8]
 800a96a:	4618      	mov	r0, r3
 800a96c:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a96e:	6978      	ldr	r0, [r7, #20]
 800a970:	f014 f966 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800a974:	6178      	str	r0, [r7, #20]
 800a976:	e7df      	b.n	800a938 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800a978:	bf00      	nop
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd90      	pop	{r4, r7, pc}

0800a980 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3330      	adds	r3, #48	; 0x30
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	4618      	mov	r0, r3
 800a992:	f014 fb91 	bl	801f0b8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	3338      	adds	r3, #56	; 0x38
 800a99a:	4618      	mov	r0, r3
 800a99c:	f014 fa47 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800a9a0:	60f8      	str	r0, [r7, #12]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01b      	beq.n	800a9e0 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800a9a8:	68f9      	ldr	r1, [r7, #12]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fe62 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	bf14      	ite	ne
 800a9b6:	2301      	movne	r3, #1
 800a9b8:	2300      	moveq	r3, #0
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00a      	beq.n	800a9d6 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800a9c0:	68f9      	ldr	r1, [r7, #12]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fe56 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	32b8      	adds	r2, #184	; 0xb8
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	6839      	ldr	r1, [r7, #0]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f014 f932 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800a9dc:	60f8      	str	r0, [r7, #12]
 800a9de:	e7e0      	b.n	800a9a2 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800a9e0:	bf00      	nop
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3330      	adds	r3, #48	; 0x30
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f014 fab8 	bl	801ef6a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3338      	adds	r3, #56	; 0x38
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f014 fa15 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01a      	beq.n	800aa42 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800aa0c:	68f9      	ldr	r1, [r7, #12]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fe30 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bf14      	ite	ne
 800aa1a:	2301      	movne	r3, #1
 800aa1c:	2300      	moveq	r3, #0
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800aa24:	68f9      	ldr	r1, [r7, #12]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fe24 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	32bc      	adds	r2, #188	; 0xbc
 800aa32:	6812      	ldr	r2, [r2, #0]
 800aa34:	4618      	mov	r0, r3
 800aa36:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f014 f901 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	e7e1      	b.n	800aa06 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800aa42:	bf00      	nop
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b084      	sub	sp, #16
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d004      	beq.n	800aa64 <_ZN11MockSupport5clearEv+0x1a>
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	3204      	adds	r2, #4
 800aa5e:	6812      	ldr	r2, [r2, #0]
 800aa60:	4618      	mov	r0, r3
 800aa62:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800aa72:	f00e fe0d 	bl	8019690 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	3320      	adds	r3, #32
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f011 f937 	bl	801bcee <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3338      	adds	r3, #56	; 0x38
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f014 f9c1 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d01a      	beq.n	800aaea <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800aab4:	68f9      	ldr	r1, [r7, #12]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fddc 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aabc:	60b8      	str	r0, [r7, #8]
        if (support) {
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00d      	beq.n	800aae0 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	339c      	adds	r3, #156	; 0x9c
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68b8      	ldr	r0, [r7, #8]
 800aace:	4798      	blx	r3
            delete support;
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d004      	beq.n	800aae0 <_ZN11MockSupport5clearEv+0x96>
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	3204      	adds	r2, #4
 800aada:	6812      	ldr	r2, [r2, #0]
 800aadc:	4618      	mov	r0, r3
 800aade:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f014 f8ad 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	e7e1      	b.n	800aaae <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3338      	adds	r3, #56	; 0x38
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f014 f915 	bl	801ed1e <_ZN18MockNamedValueList5clearEv>
}
 800aaf4:	bf00      	nop
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	731a      	strb	r2, [r3, #12]
}
 800ab0a:	bf00      	nop
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
	...

0800ab18 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800ab18:	b590      	push	{r4, r7, lr}
 800ab1a:	b089      	sub	sp, #36	; 0x24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	333c      	adds	r3, #60	; 0x3c
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f002 f859 	bl	800cbe0 <_ZNK12SimpleString7isEmptyEv>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d004      	beq.n	800ab3e <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f001 fcff 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 800ab3c:	e021      	b.n	800ab82 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800ab44:	f107 0318 	add.w	r3, r7, #24
 800ab48:	4910      	ldr	r1, [pc, #64]	; (800ab8c <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f001 fca1 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800ab50:	f107 0310 	add.w	r3, r7, #16
 800ab54:	f107 0218 	add.w	r2, r7, #24
 800ab58:	4621      	mov	r1, r4
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f002 f8b3 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f107 0110 	add.w	r1, r7, #16
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f002 f8ac 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800ab6e:	f107 0310 	add.w	r3, r7, #16
 800ab72:	4618      	mov	r0, r3
 800ab74:	f002 f845 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800ab78:	f107 0318 	add.w	r3, r7, #24
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f002 f840 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	3724      	adds	r7, #36	; 0x24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd90      	pop	{r4, r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	08023c24 	.word	0x08023c24

0800ab90 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3314      	adds	r3, #20
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	2101      	movs	r1, #1
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	4798      	blx	r3
 800abaa:	4603      	mov	r3, r0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3314      	adds	r3, #20
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	2100      	movs	r1, #0
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	4798      	blx	r3
}
 800abce:	bf00      	nop
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800abd8:	b590      	push	{r4, r7, lr}
 800abda:	b089      	sub	sp, #36	; 0x24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800abea:	f083 0301 	eor.w	r3, r3, #1
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800abf4:	f010 fbf6 	bl	801b3e4 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800abf8:	4603      	mov	r3, r0
 800abfa:	e041      	b.n	800ac80 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 fb1b 	bl	800b238 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800ac02:	22a5      	movs	r2, #165	; 0xa5
 800ac04:	4920      	ldr	r1, [pc, #128]	; (800ac88 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800ac06:	2070      	movs	r0, #112	; 0x70
 800ac08:	f7ff f880 	bl	8009d0c <_ZnwjPKci>
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	68b9      	ldr	r1, [r7, #8]
 800ac10:	4620      	mov	r0, r4
 800ac12:	f00f f8f3 	bl	8019dfc <_ZN23MockCheckedExpectedCallC1Ej>
 800ac16:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	681c      	ldr	r4, [r3, #0]
 800ac20:	f107 0314 	add.w	r3, r7, #20
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	68f9      	ldr	r1, [r7, #12]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff ff75 	bl	800ab18 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800ac2e:	f107 0314 	add.w	r3, r7, #20
 800ac32:	4619      	mov	r1, r3
 800ac34:	69f8      	ldr	r0, [r7, #28]
 800ac36:	47a0      	blx	r4
 800ac38:	f107 0314 	add.w	r3, r7, #20
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f001 ffe0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	7b1b      	ldrb	r3, [r3, #12]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d013      	beq.n	800ac72 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	3310      	adds	r3, #16
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	6892      	ldr	r2, [r2, #8]
 800ac56:	1c50      	adds	r0, r2, #1
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	6891      	ldr	r1, [r2, #8]
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	440a      	add	r2, r1
 800ac60:	4601      	mov	r1, r0
 800ac62:	69f8      	ldr	r0, [r7, #28]
 800ac64:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	689a      	ldr	r2, [r3, #8]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	441a      	add	r2, r3
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	3320      	adds	r3, #32
 800ac76:	69f9      	ldr	r1, [r7, #28]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f010 fd89 	bl	801b790 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800ac7e:	69fb      	ldr	r3, [r7, #28]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3724      	adds	r7, #36	; 0x24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd90      	pop	{r4, r7, pc}
 800ac88:	08023c28 	.word	0x08023c28

0800ac8c <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800ac8c:	b5b0      	push	{r4, r5, r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	605a      	str	r2, [r3, #4]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	685d      	ldr	r5, [r3, #4]
 800aca2:	22b1      	movs	r2, #177	; 0xb1
 800aca4:	490a      	ldr	r1, [pc, #40]	; (800acd0 <_ZN11MockSupport16createActualCallEv+0x44>)
 800aca6:	202c      	movs	r0, #44	; 0x2c
 800aca8:	f7ff f830 	bl	8009d0c <_ZnwjPKci>
 800acac:	4604      	mov	r4, r0
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	691a      	ldr	r2, [r3, #16]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	3320      	adds	r3, #32
 800acb6:	4629      	mov	r1, r5
 800acb8:	4620      	mov	r0, r4
 800acba:	f00c fbdb 	bl	8017474 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bdb0      	pop	{r4, r5, r7, pc}
 800acce:	bf00      	nop
 800acd0:	08023c28 	.word	0x08023c28

0800acd4 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00d      	beq.n	800ad04 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	3320      	adds	r3, #32
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	4618      	mov	r0, r3
 800acf0:	f010 fd2a 	bl	801b748 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800acf4:	4603      	mov	r3, r0
 800acf6:	f083 0301 	eor.w	r3, r3, #1
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800ad00:	2301      	movs	r3, #1
 800ad02:	e000      	b.n	800ad06 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800ad0e:	b590      	push	{r4, r7, lr}
 800ad10:	b087      	sub	sp, #28
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800ad18:	f107 030c 	add.w	r3, r7, #12
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7ff fef9 	bl	800ab18 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d014      	beq.n	800ad58 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	33c4      	adds	r3, #196	; 0xc4
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d004      	beq.n	800ad52 <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	3204      	adds	r2, #4
 800ad4c:	6812      	ldr	r2, [r2, #0]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ad5e:	f083 0301 	eor.w	r3, r3, #1
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d004      	beq.n	800ad72 <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800ad68:	f00e fcbe 	bl	80196e8 <_ZN21MockIgnoredActualCall8instanceEv>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461c      	mov	r4, r3
 800ad70:	e02f      	b.n	800add2 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00b      	beq.n	800ad94 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800ad7c:	f00e fc6e 	bl	801965c <_ZN19MockActualCallTrace8instanceEv>
 800ad80:	4603      	mov	r3, r0
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	3208      	adds	r2, #8
 800ad86:	6812      	ldr	r2, [r2, #0]
 800ad88:	f107 010c 	add.w	r1, r7, #12
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	4790      	blx	r2
 800ad90:	4604      	mov	r4, r0
 800ad92:	e01e      	b.n	800add2 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800ad94:	f107 030c 	add.w	r3, r7, #12
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7ff ff9a 	bl	800acd4 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d004      	beq.n	800adb0 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800ada6:	f00e fc9f 	bl	80196e8 <_ZN21MockIgnoredActualCall8instanceEv>
 800adaa:	4603      	mov	r3, r0
 800adac:	461c      	mov	r4, r3
 800adae:	e010      	b.n	800add2 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	33c0      	adds	r3, #192	; 0xc0
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	4798      	blx	r3
 800adbc:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3308      	adds	r3, #8
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f107 020c 	add.w	r2, r7, #12
 800adca:	4611      	mov	r1, r2
 800adcc:	6978      	ldr	r0, [r7, #20]
 800adce:	4798      	blx	r3
    return *call;
 800add0:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800add2:	f107 030c 	add.w	r3, r7, #12
 800add6:	4618      	mov	r0, r3
 800add8:	f001 ff13 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800addc:	4623      	mov	r3, r4
}
 800adde:	4618      	mov	r0, r3
 800ade0:	371c      	adds	r7, #28
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd90      	pop	{r4, r7, pc}

0800ade6 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	3338      	adds	r3, #56	; 0x38
 800adfa:	4618      	mov	r0, r3
 800adfc:	f014 f817 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d01a      	beq.n	800ae3e <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800ae08:	68f9      	ldr	r1, [r7, #12]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fc32 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	bf14      	ite	ne
 800ae16:	2301      	movne	r3, #1
 800ae18:	2300      	moveq	r3, #0
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d009      	beq.n	800ae34 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800ae20:	68f9      	ldr	r1, [r7, #12]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fc26 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	3290      	adds	r2, #144	; 0x90
 800ae2e:	6812      	ldr	r2, [r2, #0]
 800ae30:	4618      	mov	r0, r3
 800ae32:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f013 ff03 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	e7e1      	b.n	800ae02 <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800ae3e:	bf00      	nop
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b084      	sub	sp, #16
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	3338      	adds	r3, #56	; 0x38
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f013 ffe7 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800ae60:	60f8      	str	r0, [r7, #12]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d01a      	beq.n	800ae9e <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800ae68:	68f9      	ldr	r1, [r7, #12]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fc02 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	bf14      	ite	ne
 800ae76:	2301      	movne	r3, #1
 800ae78:	2300      	moveq	r3, #0
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d009      	beq.n	800ae94 <_ZN11MockSupport7disableEv+0x4e>
 800ae80:	68f9      	ldr	r1, [r7, #12]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fbf6 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	3284      	adds	r2, #132	; 0x84
 800ae8e:	6812      	ldr	r2, [r2, #0]
 800ae90:	4618      	mov	r0, r3
 800ae92:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f013 fed3 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	e7e1      	b.n	800ae62 <_ZN11MockSupport7disableEv+0x1c>
}
 800ae9e:	bf00      	nop
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	3338      	adds	r3, #56	; 0x38
 800aeba:	4618      	mov	r0, r3
 800aebc:	f013 ffb7 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800aec0:	60f8      	str	r0, [r7, #12]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d01a      	beq.n	800aefe <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800aec8:	68f9      	ldr	r1, [r7, #12]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fbd2 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	bf14      	ite	ne
 800aed6:	2301      	movne	r3, #1
 800aed8:	2300      	moveq	r3, #0
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d009      	beq.n	800aef4 <_ZN11MockSupport6enableEv+0x4e>
 800aee0:	68f9      	ldr	r1, [r7, #12]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 fbc6 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aee8:	4603      	mov	r3, r0
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	3288      	adds	r2, #136	; 0x88
 800aeee:	6812      	ldr	r2, [r2, #0]
 800aef0:	4618      	mov	r0, r3
 800aef2:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f013 fea3 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	e7e1      	b.n	800aec2 <_ZN11MockSupport6enableEv+0x1c>
}
 800aefe:	bf00      	nop
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b084      	sub	sp, #16
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	460b      	mov	r3, r1
 800af10:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	78fa      	ldrb	r2, [r7, #3]
 800af16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3338      	adds	r3, #56	; 0x38
 800af1e:	4618      	mov	r0, r3
 800af20:	f013 ff85 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800af24:	60f8      	str	r0, [r7, #12]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d01b      	beq.n	800af64 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800af2c:	68f9      	ldr	r1, [r7, #12]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fba0 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	bf14      	ite	ne
 800af3a:	2301      	movne	r3, #1
 800af3c:	2300      	moveq	r3, #0
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00a      	beq.n	800af5a <_ZN11MockSupport7tracingEb+0x54>
 800af44:	68f9      	ldr	r1, [r7, #12]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fb94 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800af4c:	4603      	mov	r3, r0
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	328c      	adds	r2, #140	; 0x8c
 800af52:	6812      	ldr	r2, [r2, #0]
 800af54:	78f9      	ldrb	r1, [r7, #3]
 800af56:	4618      	mov	r0, r3
 800af58:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f013 fe70 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800af60:	60f8      	str	r0, [r7, #12]
 800af62:	e7e0      	b.n	800af26 <_ZN11MockSupport7tracingEb+0x20>
}
 800af64:	bf00      	nop
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3320      	adds	r3, #32
 800af78:	4618      	mov	r0, r3
 800af7a:	f010 fbc1 	bl	801b700 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800af7e:	4603      	mov	r3, r0
 800af80:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	3338      	adds	r3, #56	; 0x38
 800af86:	4618      	mov	r0, r3
 800af88:	f013 ff51 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800af8c:	60b8      	str	r0, [r7, #8]
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d01f      	beq.n	800afd4 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800af94:	68b9      	ldr	r1, [r7, #8]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fb6c 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bf14      	ite	ne
 800afa2:	2301      	movne	r3, #1
 800afa4:	2300      	moveq	r3, #0
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00e      	beq.n	800afca <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800afac:	68b9      	ldr	r1, [r7, #8]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fb60 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800afb4:	4603      	mov	r3, r0
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	3298      	adds	r2, #152	; 0x98
 800afba:	6812      	ldr	r2, [r2, #0]
 800afbc:	4618      	mov	r0, r3
 800afbe:	4790      	blx	r2
 800afc0:	4603      	mov	r3, r0
 800afc2:	461a      	mov	r2, r3
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4413      	add	r3, r2
 800afc8:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800afca:	68b8      	ldr	r0, [r7, #8]
 800afcc:	f013 fe38 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800afd0:	60b8      	str	r0, [r7, #8]
 800afd2:	e7dc      	b.n	800af8e <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	bf14      	ite	ne
 800afda:	2301      	movne	r3, #1
 800afdc:	2300      	moveq	r3, #0
 800afde:	b2db      	uxtb	r3, r3
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d010      	beq.n	800b01a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	33bc      	adds	r3, #188	; 0xbc
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4610      	mov	r0, r2
 800b008:	4798      	blx	r3
 800b00a:	4603      	mov	r3, r0
 800b00c:	f083 0301 	eor.w	r3, r3, #1
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b016:	2301      	movs	r3, #1
 800b018:	e000      	b.n	800b01c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800b01a:	2300      	movs	r3, #0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800b020:	2300      	movs	r3, #0
 800b022:	e02a      	b.n	800b07a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3338      	adds	r3, #56	; 0x38
 800b028:	4618      	mov	r0, r3
 800b02a:	f013 ff00 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d020      	beq.n	800b078 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800b036:	68f9      	ldr	r1, [r7, #12]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fb1b 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00f      	beq.n	800b064 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b044:	68f9      	ldr	r1, [r7, #12]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fb14 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b04c:	4603      	mov	r3, r0
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff ffca 	bl	800afe8 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800b054:	4603      	mov	r3, r0
 800b056:	f083 0301 	eor.w	r3, r3, #1
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b060:	2301      	movs	r3, #1
 800b062:	e000      	b.n	800b066 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800b064:	2300      	movs	r3, #0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800b06a:	2300      	movs	r3, #0
 800b06c:	e005      	b.n	800b07a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f013 fde6 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800b074:	60f8      	str	r0, [r7, #12]
 800b076:	e7db      	b.n	800b030 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800b078:	2301      	movs	r3, #1
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b092      	sub	sp, #72	; 0x48
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b08a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b08e:	4618      	mov	r0, r3
 800b090:	f010 fa2c 	bl	801b4ec <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f103 0220 	add.w	r2, r3, #32
 800b09a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b09e:	4611      	mov	r1, r2
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f010 fbf3 	bl	801b88c <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	3338      	adds	r3, #56	; 0x38
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f013 febf 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800b0b0:	6478      	str	r0, [r7, #68]	; 0x44
 800b0b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d01d      	beq.n	800b0f4 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800b0b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fada 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	bf14      	ite	ne
 800b0c6:	2301      	movne	r3, #1
 800b0c8:	2300      	moveq	r3, #0
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00c      	beq.n	800b0ea <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b0d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 face 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	f103 0220 	add.w	r2, r3, #32
 800b0de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f010 fbd1 	bl	801b88c <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b0ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b0ec:	f013 fda8 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800b0f0:	6478      	str	r0, [r7, #68]	; 0x44
 800b0f2:	e7de      	b.n	800b0b2 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691a      	ldr	r2, [r3, #16]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	330c      	adds	r3, #12
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4610      	mov	r0, r2
 800b104:	4798      	blx	r3
 800b106:	4601      	mov	r1, r0
 800b108:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b10c:	f107 0308 	add.w	r3, r7, #8
 800b110:	4618      	mov	r0, r3
 800b112:	f011 f9f5 	bl	801c500 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	33c4      	adds	r3, #196	; 0xc4
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f107 0208 	add.w	r2, r7, #8
 800b122:	4611      	mov	r1, r2
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b128:	f107 0308 	add.w	r3, r7, #8
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 fe6d 	bl	800be0c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b132:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b136:	4618      	mov	r0, r3
 800b138:	f010 f9ec 	bl	801b514 <_ZN21MockExpectedCallsListD1Ev>
}
 800b13c:	bf00      	nop
 800b13e:	3748      	adds	r7, #72	; 0x48
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b092      	sub	sp, #72	; 0x48
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b14c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b150:	4618      	mov	r0, r3
 800b152:	f010 f9cb 	bl	801b4ec <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f103 0220 	add.w	r2, r3, #32
 800b15c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b160:	4611      	mov	r1, r2
 800b162:	4618      	mov	r0, r3
 800b164:	f010 fb92 	bl	801b88c <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3338      	adds	r3, #56	; 0x38
 800b16c:	4618      	mov	r0, r3
 800b16e:	f013 fe5e 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800b172:	6478      	str	r0, [r7, #68]	; 0x44
 800b174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b176:	2b00      	cmp	r3, #0
 800b178:	d01d      	beq.n	800b1b6 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800b17a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fa79 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	bf14      	ite	ne
 800b188:	2301      	movne	r3, #1
 800b18a:	2300      	moveq	r3, #0
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00c      	beq.n	800b1ac <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fa6d 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b19a:	4603      	mov	r3, r0
 800b19c:	f103 0220 	add.w	r2, r3, #32
 800b1a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f010 fb70 	bl	801b88c <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b1ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b1ae:	f013 fd47 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800b1b2:	6478      	str	r0, [r7, #68]	; 0x44
 800b1b4:	e7de      	b.n	800b174 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	691a      	ldr	r2, [r3, #16]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	330c      	adds	r3, #12
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	4798      	blx	r3
 800b1c8:	4601      	mov	r1, r0
 800b1ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b1ce:	f107 0308 	add.w	r3, r7, #8
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f011 fa38 	bl	801c648 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	33c4      	adds	r3, #196	; 0xc4
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f107 0208 	add.w	r2, r7, #8
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b1ea:	f107 0308 	add.w	r3, r7, #8
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 fe2e 	bl	800be50 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b1f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f010 f98b 	bl	801b514 <_ZN21MockExpectedCallsListD1Ev>
}
 800b1fe:	bf00      	nop
 800b200:	3748      	adds	r7, #72	; 0x48
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b082      	sub	sp, #8
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	6039      	str	r1, [r7, #0]
    clear();
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	339c      	adds	r3, #156	; 0x9c
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	691a      	ldr	r2, [r3, #16]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3308      	adds	r3, #8
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	4610      	mov	r0, r2
 800b22e:	4798      	blx	r3
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800b240:	f008 fd0a 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800b244:	4603      	mov	r3, r0
 800b246:	4618      	mov	r0, r3
 800b248:	f007 fb78 	bl	801293c <_ZN10UtestShell10countCheckEv>
}
 800b24c:	bf00      	nop
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b260:	2b00      	cmp	r3, #0
 800b262:	d008      	beq.n	800b276 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	33c4      	adds	r3, #196	; 0xc4
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4610      	mov	r0, r2
 800b274:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3338      	adds	r3, #56	; 0x38
 800b27a:	4618      	mov	r0, r3
 800b27c:	f013 fdd7 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d023      	beq.n	800b2d0 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800b288:	68f9      	ldr	r1, [r7, #12]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f9f2 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d009      	beq.n	800b2aa <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800b296:	68f9      	ldr	r1, [r7, #12]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f9eb 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e000      	b.n	800b2ac <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00a      	beq.n	800b2c6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800b2b0:	68f9      	ldr	r1, [r7, #12]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f9de 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	32c4      	adds	r2, #196	; 0xc4
 800b2c0:	6812      	ldr	r2, [r2, #0]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f013 fcba 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800b2cc:	60f8      	str	r0, [r7, #12]
 800b2ce:	e7d8      	b.n	800b282 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800b2d0:	bf00      	nop
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3320      	adds	r3, #32
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f010 f947 	bl	801b578 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d001      	beq.n	800b2f4 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e027      	b.n	800b344 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3338      	adds	r3, #56	; 0x38
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f013 fd98 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d01d      	beq.n	800b342 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800b306:	68f9      	ldr	r1, [r7, #12]
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f9b3 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b30e:	4603      	mov	r3, r0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00c      	beq.n	800b32e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800b314:	68f9      	ldr	r1, [r7, #12]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f9ac 	bl	800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b31c:	4603      	mov	r3, r0
 800b31e:	4618      	mov	r0, r3
 800b320:	f7ff ffda 	bl	800b2d8 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800b32a:	2301      	movs	r3, #1
 800b32c:	e000      	b.n	800b330 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800b32e:	2300      	movs	r3, #0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800b334:	2301      	movs	r3, #1
 800b336:	e005      	b.n	800b344 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f013 fc81 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	e7de      	b.n	800b300 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f7ff ff7d 	bl	800b254 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f7ff fe44 	bl	800afe8 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00a      	beq.n	800b37c <_ZN11MockSupport17checkExpectationsEv+0x30>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3398      	adds	r3, #152	; 0x98
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	4798      	blx	r3
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <_ZN11MockSupport17checkExpectationsEv+0x30>
 800b378:	2301      	movs	r3, #1
 800b37a:	e000      	b.n	800b37e <_ZN11MockSupport17checkExpectationsEv+0x32>
 800b37c:	2300      	movs	r3, #0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7ff fe7d 	bl	800b082 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f7ff ffa5 	bl	800b2d8 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7ff fed5 	bl	800b144 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800b39a:	bf00      	nop
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b082      	sub	sp, #8
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3338      	adds	r3, #56	; 0x38
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f013 fd0c 	bl	801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	bf14      	ite	ne
 800b3be:	2301      	movne	r3, #1
 800b3c0:	2300      	moveq	r3, #0
 800b3c2:	b2db      	uxtb	r3, r3
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800b3cc:	b590      	push	{r4, r7, lr}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3338      	adds	r3, #56	; 0x38
 800b3da:	6839      	ldr	r1, [r7, #0]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f013 fcf7 	bl	801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b3e2:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d111      	bne.n	800b40e <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800b3ea:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b3ee:	490a      	ldr	r1, [pc, #40]	; (800b418 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800b3f0:	2038      	movs	r0, #56	; 0x38
 800b3f2:	f7fe fc8b 	bl	8009d0c <_ZnwjPKci>
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f011 fd6e 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
 800b400:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	3338      	adds	r3, #56	; 0x38
 800b406:	68f9      	ldr	r1, [r7, #12]
 800b408:	4618      	mov	r0, r3
 800b40a:	f013 fcab 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800b40e:	68fb      	ldr	r3, [r7, #12]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	bd90      	pop	{r4, r7, pc}
 800b418:	08023c28 	.word	0x08023c28

0800b41c <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800b42a:	68b9      	ldr	r1, [r7, #8]
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7ff ffcd 	bl	800b3cc <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800b432:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	3344      	adds	r3, #68	; 0x44
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	6879      	ldr	r1, [r7, #4]
 800b440:	6978      	ldr	r0, [r7, #20]
 800b442:	4798      	blx	r3
}
 800b444:	bf00      	nop
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b088      	sub	sp, #32
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	3338      	adds	r3, #56	; 0x38
 800b45c:	6879      	ldr	r1, [r7, #4]
 800b45e:	4618      	mov	r0, r3
 800b460:	f013 fcb6 	bl	801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b464:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d111      	bne.n	800b490 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800b46c:	f107 0314 	add.w	r3, r7, #20
 800b470:	490b      	ldr	r1, [pc, #44]	; (800b4a0 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800b472:	4618      	mov	r0, r3
 800b474:	f001 f80d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800b478:	f107 0314 	add.w	r3, r7, #20
 800b47c:	4619      	mov	r1, r3
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f011 fd2c 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
 800b484:	f107 0314 	add.w	r3, r7, #20
 800b488:	4618      	mov	r0, r3
 800b48a:	f001 fbba 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800b48e:	e003      	b.n	800b498 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800b490:	69f9      	ldr	r1, [r7, #28]
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f7ff f8a2 	bl	800a5dc <_ZN14MockNamedValueC1ERKS_>
}
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	3720      	adds	r7, #32
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	08023c20 	.word	0x08023c20

0800b4a4 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800b4a4:	b590      	push	{r4, r7, lr}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800b4ae:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b4b2:	4927      	ldr	r1, [pc, #156]	; (800b550 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800b4b4:	2048      	movs	r0, #72	; 0x48
 800b4b6:	f7fe fc29 	bl	8009d0c <_ZnwjPKci>
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f7ff f8f8 	bl	800a6b4 <_ZN11MockSupportC1ERK12SimpleString>
 800b4c4:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	33a4      	adds	r3, #164	; 0xa4
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	6952      	ldr	r2, [r2, #20]
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d005      	beq.n	800b4ee <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3390      	adds	r3, #144	; 0x90
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b4f4:	f083 0301 	eor.w	r3, r3, #1
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d005      	beq.n	800b50a <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3384      	adds	r3, #132	; 0x84
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	7b1b      	ldrb	r3, [r3, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d005      	beq.n	800b51e <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3308      	adds	r3, #8
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	4798      	blx	r3

    newMock->tracing(tracing_);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	338c      	adds	r3, #140	; 0x8c
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800b52c:	4611      	mov	r1, r2
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	33b8      	adds	r3, #184	; 0xb8
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	3230      	adds	r2, #48	; 0x30
 800b53e:	4611      	mov	r1, r2
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	4798      	blx	r3
    return newMock;
 800b544:	68fb      	ldr	r3, [r7, #12]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd90      	pop	{r4, r7, pc}
 800b54e:	bf00      	nop
 800b550:	08023c28 	.word	0x08023c28

0800b554 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800b554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b556:	b0ab      	sub	sp, #172	; 0xac
 800b558:	af04      	add	r7, sp, #16
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800b55e:	f107 0308 	add.w	r3, r7, #8
 800b562:	4941      	ldr	r1, [pc, #260]	; (800b668 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800b564:	4618      	mov	r0, r3
 800b566:	f000 ff94 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800b56a:	f107 0308 	add.w	r3, r7, #8
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	4618      	mov	r0, r3
 800b572:	f001 fbc3 	bl	800ccfc <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800b576:	f107 0308 	add.w	r3, r7, #8
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7ff ff10 	bl	800b3a2 <_ZN11MockSupport7hasDataERK12SimpleString>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d048      	beq.n	800b61a <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800b588:	f008 fb66 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800b58c:	4604      	mov	r4, r0
 800b58e:	6823      	ldr	r3, [r4, #0]
 800b590:	3324      	adds	r3, #36	; 0x24
 800b592:	681d      	ldr	r5, [r3, #0]
 800b594:	f107 0318 	add.w	r3, r7, #24
 800b598:	f107 0208 	add.w	r2, r7, #8
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff ff54 	bl	800b44c <_ZN11MockSupport7getDataERK12SimpleString>
 800b5a4:	f107 0310 	add.w	r3, r7, #16
 800b5a8:	f107 0218 	add.w	r2, r7, #24
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f011 ff61 	bl	801d476 <_ZNK14MockNamedValue7getTypeEv>
 800b5b4:	f107 0310 	add.w	r3, r7, #16
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f001 faf5 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800b5be:	4606      	mov	r6, r0
 800b5c0:	f008 fb5a 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	9302      	str	r3, [sp, #8]
 800b5c8:	f240 13bd 	movw	r3, #445	; 0x1bd
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	4b27      	ldr	r3, [pc, #156]	; (800b66c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4632      	mov	r2, r6
 800b5d6:	4926      	ldr	r1, [pc, #152]	; (800b670 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800b5d8:	4620      	mov	r0, r4
 800b5da:	47a8      	blx	r5
 800b5dc:	f107 0310 	add.w	r3, r7, #16
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f001 fb0e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800b5e6:	f107 0318 	add.w	r3, r7, #24
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f011 fca0 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800b5f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b5f4:	f107 0208 	add.w	r2, r7, #8
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7ff ff26 	bl	800b44c <_ZN11MockSupport7getDataERK12SimpleString>
 800b600:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b604:	4618      	mov	r0, r3
 800b606:	f012 fa4f 	bl	801daa8 <_ZNK14MockNamedValue16getObjectPointerEv>
 800b60a:	4604      	mov	r4, r0
 800b60c:	bf00      	nop
 800b60e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b612:	4618      	mov	r0, r3
 800b614:	f011 fc8c 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 800b618:	e01b      	b.n	800b652 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff ff41 	bl	800b4a4 <_ZN11MockSupport5cloneERK12SimpleString>
 800b622:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800b626:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b62a:	4911      	ldr	r1, [pc, #68]	; (800b670 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 ff30 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800b632:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800b636:	f107 0108 	add.w	r1, r7, #8
 800b63a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff feec 	bl	800b41c <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800b644:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b648:	4618      	mov	r0, r3
 800b64a:	f001 fada 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return newMock;
 800b64e:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800b652:	f107 0308 	add.w	r3, r7, #8
 800b656:	4618      	mov	r0, r3
 800b658:	f001 fad3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800b65c:	4623      	mov	r3, r4
}
 800b65e:	4618      	mov	r0, r3
 800b660:	379c      	adds	r7, #156	; 0x9c
 800b662:	46bd      	mov	sp, r7
 800b664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b666:	bf00      	nop
 800b668:	08023c40 	.word	0x08023c40
 800b66c:	08023c28 	.word	0x08023c28
 800b670:	08023c60 	.word	0x08023c60

0800b674 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800b674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b678:	b08b      	sub	sp, #44	; 0x2c
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800b680:	2500      	movs	r5, #0
 800b682:	2600      	movs	r6, #0
 800b684:	f107 0308 	add.w	r3, r7, #8
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f013 fb26 	bl	801ecdc <_ZNK22MockNamedValueListNode7getTypeEv>
 800b690:	f04f 0801 	mov.w	r8, #1
 800b694:	f107 0310 	add.w	r3, r7, #16
 800b698:	492e      	ldr	r1, [pc, #184]	; (800b754 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800b69a:	4618      	mov	r0, r3
 800b69c:	f000 fef9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800b6a0:	f04f 0901 	mov.w	r9, #1
 800b6a4:	f107 0210 	add.w	r2, r7, #16
 800b6a8:	f107 0308 	add.w	r3, r7, #8
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f001 fab3 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d01a      	beq.n	800b6f0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800b6ba:	f107 0318 	add.w	r3, r7, #24
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f013 faf8 	bl	801ecb6 <_ZNK22MockNamedValueListNode7getNameEv>
 800b6c6:	2501      	movs	r5, #1
 800b6c8:	f107 0320 	add.w	r3, r7, #32
 800b6cc:	4922      	ldr	r1, [pc, #136]	; (800b758 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 fedf 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800b6d4:	2601      	movs	r6, #1
 800b6d6:	f107 0220 	add.w	r2, r7, #32
 800b6da:	f107 0318 	add.w	r3, r7, #24
 800b6de:	4611      	mov	r1, r2
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 ff54 	bl	800c58e <_ZNK12SimpleString8containsERKS_>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d001      	beq.n	800b6f0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800b6ec:	2401      	movs	r4, #1
 800b6ee:	e000      	b.n	800b6f2 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800b6f0:	2400      	movs	r4, #0
 800b6f2:	2e00      	cmp	r6, #0
 800b6f4:	d004      	beq.n	800b700 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800b6f6:	f107 0320 	add.w	r3, r7, #32
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f001 fa81 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800b700:	2d00      	cmp	r5, #0
 800b702:	d004      	beq.n	800b70e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800b704:	f107 0318 	add.w	r3, r7, #24
 800b708:	4618      	mov	r0, r3
 800b70a:	f001 fa7a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800b70e:	f1b9 0f00 	cmp.w	r9, #0
 800b712:	d004      	beq.n	800b71e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800b714:	f107 0310 	add.w	r3, r7, #16
 800b718:	4618      	mov	r0, r3
 800b71a:	f001 fa72 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800b71e:	f1b8 0f00 	cmp.w	r8, #0
 800b722:	d004      	beq.n	800b72e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800b724:	f107 0308 	add.w	r3, r7, #8
 800b728:	4618      	mov	r0, r3
 800b72a:	f001 fa6a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800b72e:	2c00      	cmp	r4, #0
 800b730:	d00a      	beq.n	800b748 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800b732:	6838      	ldr	r0, [r7, #0]
 800b734:	f013 fa90 	bl	801ec58 <_ZN22MockNamedValueListNode4itemEv>
 800b738:	4603      	mov	r3, r0
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	32a0      	adds	r2, #160	; 0xa0
 800b73e:	6812      	ldr	r2, [r2, #0]
 800b740:	4618      	mov	r0, r3
 800b742:	4790      	blx	r2
 800b744:	4603      	mov	r3, r0
 800b746:	e000      	b.n	800b74a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	372c      	adds	r7, #44	; 0x2c
 800b74e:	46bd      	mov	sp, r7
 800b750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b754:	08023c60 	.word	0x08023c60
 800b758:	08023c40 	.word	0x08023c40

0800b75c <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00a      	beq.n	800b784 <_ZN11MockSupport11returnValueEv+0x28>
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3354      	adds	r3, #84	; 0x54
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	4610      	mov	r0, r2
 800b780:	4798      	blx	r3
 800b782:	e010      	b.n	800b7a6 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800b784:	f107 0308 	add.w	r3, r7, #8
 800b788:	4909      	ldr	r1, [pc, #36]	; (800b7b0 <_ZN11MockSupport11returnValueEv+0x54>)
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fe81 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800b790:	f107 0308 	add.w	r3, r7, #8
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f011 fba0 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
 800b79c:	f107 0308 	add.w	r3, r7, #8
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f001 fa2e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	08023c20 	.word	0x08023c20

0800b7b4 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800b7b4:	b590      	push	{r4, r7, lr}
 800b7b6:	b091      	sub	sp, #68	; 0x44
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3320      	adds	r3, #32
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f107 0208 	add.w	r2, r7, #8
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	4798      	blx	r3
 800b7ce:	f107 0308 	add.w	r3, r7, #8
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f011 fe5e 	bl	801d494 <_ZNK14MockNamedValue12getBoolValueEv>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	461c      	mov	r4, r3
 800b7dc:	bf00      	nop
 800b7de:	f107 0308 	add.w	r3, r7, #8
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f011 fba4 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 800b7e8:	4623      	mov	r3, r4
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3744      	adds	r7, #68	; 0x44
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd90      	pop	{r4, r7, pc}

0800b7f2 <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800b7f2:	b590      	push	{r4, r7, lr}
 800b7f4:	b091      	sub	sp, #68	; 0x44
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3320      	adds	r3, #32
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f107 0208 	add.w	r2, r7, #8
 800b806:	6879      	ldr	r1, [r7, #4]
 800b808:	4610      	mov	r0, r2
 800b80a:	4798      	blx	r3
 800b80c:	f107 0308 	add.w	r3, r7, #8
 800b810:	4618      	mov	r0, r3
 800b812:	f011 fe67 	bl	801d4e4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800b816:	4604      	mov	r4, r0
 800b818:	bf00      	nop
 800b81a:	f107 0308 	add.w	r3, r7, #8
 800b81e:	4618      	mov	r0, r3
 800b820:	f011 fb86 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 800b824:	4623      	mov	r3, r4
}
 800b826:	4618      	mov	r0, r3
 800b828:	3744      	adds	r7, #68	; 0x44
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd90      	pop	{r4, r7, pc}

0800b82e <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800b82e:	b590      	push	{r4, r7, lr}
 800b830:	b091      	sub	sp, #68	; 0x44
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3320      	adds	r3, #32
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f107 0208 	add.w	r2, r7, #8
 800b842:	6879      	ldr	r1, [r7, #4]
 800b844:	4610      	mov	r0, r2
 800b846:	4798      	blx	r3
 800b848:	f107 0308 	add.w	r3, r7, #8
 800b84c:	4618      	mov	r0, r3
 800b84e:	f011 fe99 	bl	801d584 <_ZNK14MockNamedValue11getIntValueEv>
 800b852:	4604      	mov	r4, r0
 800b854:	bf00      	nop
 800b856:	f107 0308 	add.w	r3, r7, #8
 800b85a:	4618      	mov	r0, r3
 800b85c:	f011 fb68 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 800b860:	4623      	mov	r3, r4
}
 800b862:	4618      	mov	r0, r3
 800b864:	3744      	adds	r7, #68	; 0x44
 800b866:	46bd      	mov	sp, r7
 800b868:	bd90      	pop	{r4, r7, pc}

0800b86a <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	331c      	adds	r3, #28
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	4798      	blx	r3
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d007      	beq.n	800b896 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	335c      	adds	r3, #92	; 0x5c
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	4798      	blx	r3
 800b892:	4603      	mov	r3, r0
 800b894:	e000      	b.n	800b898 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800b896:	683b      	ldr	r3, [r7, #0]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	331c      	adds	r3, #28
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	4798      	blx	r3
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00a      	beq.n	800b8d4 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	3368      	adds	r3, #104	; 0x68
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	4798      	blx	r3
 800b8ca:	eeb0 7a40 	vmov.f32	s14, s0
 800b8ce:	eef0 7a60 	vmov.f32	s15, s1
 800b8d2:	e001      	b.n	800b8d8 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800b8d4:	ed97 7b00 	vldr	d7, [r7]
}
 800b8d8:	eeb0 0a47 	vmov.f32	s0, s14
 800b8dc:	eef0 0a67 	vmov.f32	s1, s15
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b082      	sub	sp, #8
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	331c      	adds	r3, #28
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	4798      	blx	r3
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d007      	beq.n	800b912 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	3338      	adds	r3, #56	; 0x38
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	4798      	blx	r3
 800b90e:	4603      	mov	r3, r0
 800b910:	e000      	b.n	800b914 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800b912:	683b      	ldr	r3, [r7, #0]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	460b      	mov	r3, r1
 800b926:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	331c      	adds	r3, #28
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	4798      	blx	r3
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d007      	beq.n	800b94a <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	3324      	adds	r3, #36	; 0x24
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
 800b946:	4603      	mov	r3, r0
 800b948:	e000      	b.n	800b94c <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800b94a:	78fb      	ldrb	r3, [r7, #3]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	331c      	adds	r3, #28
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	4798      	blx	r3
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d007      	beq.n	800b980 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	332c      	adds	r3, #44	; 0x2c
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	4798      	blx	r3
 800b97c:	4603      	mov	r3, r0
 800b97e:	e000      	b.n	800b982 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800b980:	683b      	ldr	r3, [r7, #0]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b082      	sub	sp, #8
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	331c      	adds	r3, #28
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	4798      	blx	r3
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d007      	beq.n	800b9b6 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3334      	adds	r3, #52	; 0x34
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	4798      	blx	r3
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	e000      	b.n	800b9b8 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800b9b6:	683b      	ldr	r3, [r7, #0]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	331c      	adds	r3, #28
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	4798      	blx	r3
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d007      	beq.n	800b9ec <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3340      	adds	r3, #64	; 0x40
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	4798      	blx	r3
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	e000      	b.n	800b9ee <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800b9ec:	683b      	ldr	r3, [r7, #0]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800b9f6:	b590      	push	{r4, r7, lr}
 800b9f8:	b091      	sub	sp, #68	; 0x44
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	3320      	adds	r3, #32
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f107 0208 	add.w	r2, r7, #8
 800ba0a:	6879      	ldr	r1, [r7, #4]
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	4798      	blx	r3
 800ba10:	f107 0308 	add.w	r3, r7, #8
 800ba14:	4618      	mov	r0, r3
 800ba16:	f011 fddd 	bl	801d5d4 <_ZNK14MockNamedValue15getLongIntValueEv>
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	bf00      	nop
 800ba1e:	f107 0308 	add.w	r3, r7, #8
 800ba22:	4618      	mov	r0, r3
 800ba24:	f011 fa84 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 800ba28:	4623      	mov	r3, r4
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3744      	adds	r7, #68	; 0x44
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd90      	pop	{r4, r7, pc}

0800ba32 <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800ba32:	b590      	push	{r4, r7, lr}
 800ba34:	b091      	sub	sp, #68	; 0x44
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	3320      	adds	r3, #32
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f107 0208 	add.w	r2, r7, #8
 800ba46:	6879      	ldr	r1, [r7, #4]
 800ba48:	4610      	mov	r0, r2
 800ba4a:	4798      	blx	r3
 800ba4c:	f107 0308 	add.w	r3, r7, #8
 800ba50:	4618      	mov	r0, r3
 800ba52:	f011 fe21 	bl	801d698 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800ba56:	4604      	mov	r4, r0
 800ba58:	bf00      	nop
 800ba5a:	f107 0308 	add.w	r3, r7, #8
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f011 fa66 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 800ba64:	4623      	mov	r3, r4
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3744      	adds	r7, #68	; 0x44
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd90      	pop	{r4, r7, pc}
	...

0800ba70 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800ba70:	b5b0      	push	{r4, r5, r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af02      	add	r7, sp, #8
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800ba7a:	f008 f8ed 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800ba7e:	4604      	mov	r4, r0
 800ba80:	6823      	ldr	r3, [r4, #0]
 800ba82:	3368      	adds	r3, #104	; 0x68
 800ba84:	681d      	ldr	r5, [r3, #0]
 800ba86:	f008 f8f7 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	f240 2345 	movw	r3, #581	; 0x245
 800ba92:	4a06      	ldr	r2, [pc, #24]	; (800baac <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800ba94:	4906      	ldr	r1, [pc, #24]	; (800bab0 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800ba96:	4620      	mov	r0, r4
 800ba98:	47a8      	blx	r5
    return cpputest_longlong(0);
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7fe fd2f 	bl	800a500 <_ZN17cpputest_longlongC1Ei>
}
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bdb0      	pop	{r4, r5, r7, pc}
 800baaa:	bf00      	nop
 800baac:	08023c28 	.word	0x08023c28
 800bab0:	08023c6c 	.word	0x08023c6c

0800bab4 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800bab4:	b5b0      	push	{r4, r5, r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af02      	add	r7, sp, #8
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800babe:	f008 f8cb 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800bac2:	4604      	mov	r4, r0
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	3368      	adds	r3, #104	; 0x68
 800bac8:	681d      	ldr	r5, [r3, #0]
 800baca:	f008 f8d5 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bace:	4603      	mov	r3, r0
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	f240 234b 	movw	r3, #587	; 0x24b
 800bad6:	4a06      	ldr	r2, [pc, #24]	; (800baf0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800bad8:	4906      	ldr	r1, [pc, #24]	; (800baf4 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800bada:	4620      	mov	r0, r4
 800badc:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800bade:	2100      	movs	r1, #0
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7fe fd19 	bl	800a518 <_ZN18cpputest_ulonglongC1Ei>
}
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bdb0      	pop	{r4, r5, r7, pc}
 800baee:	bf00      	nop
 800baf0:	08023c28 	.word	0x08023c28
 800baf4:	08023c8c 	.word	0x08023c8c

0800baf8 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800baf8:	b5b0      	push	{r4, r5, r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af02      	add	r7, sp, #8
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	4639      	mov	r1, r7
 800bb04:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800bb08:	f008 f8a6 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	3368      	adds	r3, #104	; 0x68
 800bb12:	681d      	ldr	r5, [r3, #0]
 800bb14:	f008 f8b0 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	f240 2351 	movw	r3, #593	; 0x251
 800bb20:	4a06      	ldr	r2, [pc, #24]	; (800bb3c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800bb22:	4907      	ldr	r1, [pc, #28]	; (800bb40 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800bb24:	4620      	mov	r0, r4
 800bb26:	47a8      	blx	r5
    return defaultValue;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	463b      	mov	r3, r7
 800bb2e:	cb03      	ldmia	r3!, {r0, r1}
 800bb30:	6010      	str	r0, [r2, #0]
 800bb32:	6051      	str	r1, [r2, #4]
}
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bdb0      	pop	{r4, r5, r7, pc}
 800bb3c:	08023c28 	.word	0x08023c28
 800bb40:	08023c6c 	.word	0x08023c6c

0800bb44 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800bb44:	b5b0      	push	{r4, r5, r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	4639      	mov	r1, r7
 800bb50:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800bb54:	f008 f880 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800bb58:	4604      	mov	r4, r0
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	3368      	adds	r3, #104	; 0x68
 800bb5e:	681d      	ldr	r5, [r3, #0]
 800bb60:	f008 f88a 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bb64:	4603      	mov	r3, r0
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	f240 2357 	movw	r3, #599	; 0x257
 800bb6c:	4a06      	ldr	r2, [pc, #24]	; (800bb88 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800bb6e:	4907      	ldr	r1, [pc, #28]	; (800bb8c <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800bb70:	4620      	mov	r0, r4
 800bb72:	47a8      	blx	r5
    return defaultValue;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	461a      	mov	r2, r3
 800bb78:	463b      	mov	r3, r7
 800bb7a:	cb03      	ldmia	r3!, {r0, r1}
 800bb7c:	6010      	str	r0, [r2, #0]
 800bb7e:	6051      	str	r1, [r2, #4]
}
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bdb0      	pop	{r4, r5, r7, pc}
 800bb88:	08023c28 	.word	0x08023c28
 800bb8c:	08023c8c 	.word	0x08023c8c

0800bb90 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800bb90:	b590      	push	{r4, r7, lr}
 800bb92:	b091      	sub	sp, #68	; 0x44
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3320      	adds	r3, #32
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f107 0208 	add.w	r2, r7, #8
 800bba4:	6879      	ldr	r1, [r7, #4]
 800bba6:	4610      	mov	r0, r2
 800bba8:	4798      	blx	r3
 800bbaa:	f107 0308 	add.w	r3, r7, #8
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f011 fea6 	bl	801d900 <_ZNK14MockNamedValue14getStringValueEv>
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	bf00      	nop
 800bbb8:	f107 0308 	add.w	r3, r7, #8
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f011 f9b7 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 800bbc2:	4623      	mov	r3, r4
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3744      	adds	r7, #68	; 0x44
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd90      	pop	{r4, r7, pc}

0800bbcc <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	ed2d 8b02 	vpush	{d8}
 800bbd2:	b090      	sub	sp, #64	; 0x40
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3320      	adds	r3, #32
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f107 0208 	add.w	r2, r7, #8
 800bbe4:	6879      	ldr	r1, [r7, #4]
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	4798      	blx	r3
 800bbea:	f107 0308 	add.w	r3, r7, #8
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f011 fe2a 	bl	801d848 <_ZNK14MockNamedValue14getDoubleValueEv>
 800bbf4:	eeb0 8a40 	vmov.f32	s16, s0
 800bbf8:	eef0 8a60 	vmov.f32	s17, s1
 800bbfc:	bf00      	nop
 800bbfe:	f107 0308 	add.w	r3, r7, #8
 800bc02:	4618      	mov	r0, r3
 800bc04:	f011 f994 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 800bc08:	eeb0 7a48 	vmov.f32	s14, s16
 800bc0c:	eef0 7a68 	vmov.f32	s15, s17
}
 800bc10:	eeb0 0a47 	vmov.f32	s0, s14
 800bc14:	eef0 0a67 	vmov.f32	s1, s15
 800bc18:	3740      	adds	r7, #64	; 0x40
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	ecbd 8b02 	vpop	{d8}
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	331c      	adds	r3, #28
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	4798      	blx	r3
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d007      	beq.n	800bc4e <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	336c      	adds	r3, #108	; 0x6c
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	4798      	blx	r3
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	e000      	b.n	800bc50 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800bc4e:	683b      	ldr	r3, [r7, #0]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	331c      	adds	r3, #28
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	4798      	blx	r3
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d007      	beq.n	800bc84 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	3378      	adds	r3, #120	; 0x78
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	4798      	blx	r3
 800bc80:	4603      	mov	r3, r0
 800bc82:	e000      	b.n	800bc86 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800bc84:	683b      	ldr	r3, [r7, #0]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b082      	sub	sp, #8
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	331c      	adds	r3, #28
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	4798      	blx	r3
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d007      	beq.n	800bcba <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3380      	adds	r3, #128	; 0x80
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	4798      	blx	r3
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	e000      	b.n	800bcbc <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800bcba:	683b      	ldr	r3, [r7, #0]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800bcc4:	b590      	push	{r4, r7, lr}
 800bcc6:	b091      	sub	sp, #68	; 0x44
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3320      	adds	r3, #32
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f107 0208 	add.w	r2, r7, #8
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	4610      	mov	r0, r2
 800bcdc:	4798      	blx	r3
 800bcde:	f107 0308 	add.w	r3, r7, #8
 800bce2:	4618      	mov	r0, r3
 800bce4:	f011 fe34 	bl	801d950 <_ZNK14MockNamedValue15getPointerValueEv>
 800bce8:	4604      	mov	r4, r0
 800bcea:	bf00      	nop
 800bcec:	f107 0308 	add.w	r3, r7, #8
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f011 f91d 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 800bcf6:	4623      	mov	r3, r4
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3744      	adds	r7, #68	; 0x44
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd90      	pop	{r4, r7, pc}

0800bd00 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800bd00:	b590      	push	{r4, r7, lr}
 800bd02:	b091      	sub	sp, #68	; 0x44
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3320      	adds	r3, #32
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f107 0208 	add.w	r2, r7, #8
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	4610      	mov	r0, r2
 800bd18:	4798      	blx	r3
 800bd1a:	f107 0308 	add.w	r3, r7, #8
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f011 fe3e 	bl	801d9a0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800bd24:	4604      	mov	r4, r0
 800bd26:	bf00      	nop
 800bd28:	f107 0308 	add.w	r3, r7, #8
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f011 f8ff 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 800bd32:	4623      	mov	r3, r4
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3744      	adds	r7, #68	; 0x44
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd90      	pop	{r4, r7, pc}

0800bd3c <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800bd3c:	b590      	push	{r4, r7, lr}
 800bd3e:	b091      	sub	sp, #68	; 0x44
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	3320      	adds	r3, #32
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f107 0208 	add.w	r2, r7, #8
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	4610      	mov	r0, r2
 800bd54:	4798      	blx	r3
 800bd56:	f107 0308 	add.w	r3, r7, #8
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f011 fe48 	bl	801d9f0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800bd60:	4604      	mov	r4, r0
 800bd62:	bf00      	nop
 800bd64:	f107 0308 	add.w	r3, r7, #8
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f011 f8e1 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 800bd6e:	4623      	mov	r3, r4
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3744      	adds	r7, #68	; 0x44
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd90      	pop	{r4, r7, pc}

0800bd78 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00a      	beq.n	800bd9e <_ZN11MockSupport14hasReturnValueEv+0x26>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3350      	adds	r3, #80	; 0x50
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4610      	mov	r0, r2
 800bd98:	4798      	blx	r3
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	e000      	b.n	800bda0 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <_Z41__static_initialization_and_destruction_0ii>:
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d115      	bne.n	800bde4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d110      	bne.n	800bde4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800bdc2:	f107 0308 	add.w	r3, r7, #8
 800bdc6:	490f      	ldr	r1, [pc, #60]	; (800be04 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 fb62 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800bdce:	f107 0308 	add.w	r3, r7, #8
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	480c      	ldr	r0, [pc, #48]	; (800be08 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800bdd6:	f7fe fc6d 	bl	800a6b4 <_ZN11MockSupportC1ERK12SimpleString>
 800bdda:	f107 0308 	add.w	r3, r7, #8
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 ff0f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d107      	bne.n	800bdfa <_Z41__static_initialization_and_destruction_0ii+0x52>
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d102      	bne.n	800bdfa <_Z41__static_initialization_and_destruction_0ii+0x52>
 800bdf4:	4804      	ldr	r0, [pc, #16]	; (800be08 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800bdf6:	f7fe fca7 	bl	800a748 <_ZN11MockSupportD1Ev>
}
 800bdfa:	bf00      	nop
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	08023c20 	.word	0x08023c20
 800be08:	20000858 	.word	0x20000858

0800be0c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	4a05      	ldr	r2, [pc, #20]	; (800be2c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	601a      	str	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fe fbbb 	bl	800a598 <_ZN11MockFailureD1Ev>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	08027ba0 	.word	0x08027ba0

0800be30 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff ffe7 	bl	800be0c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800be3e:	2134      	movs	r1, #52	; 0x34
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7fd ff77 	bl	8009d34 <_ZdlPvj>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4618      	mov	r0, r3
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	4a05      	ldr	r2, [pc, #20]	; (800be70 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4618      	mov	r0, r3
 800be62:	f7fe fb99 	bl	800a598 <_ZN11MockFailureD1Ev>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4618      	mov	r0, r3
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	08027b74 	.word	0x08027b74

0800be74 <_ZN20MockCallOrderFailureD0Ev>:
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7ff ffe7 	bl	800be50 <_ZN20MockCallOrderFailureD1Ev>
 800be82:	2134      	movs	r1, #52	; 0x34
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7fd ff55 	bl	8009d34 <_ZdlPvj>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4618      	mov	r0, r3
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800be94:	b580      	push	{r7, lr}
 800be96:	af00      	add	r7, sp, #0
 800be98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800be9c:	2001      	movs	r0, #1
 800be9e:	f7ff ff83 	bl	800bda8 <_Z41__static_initialization_and_destruction_0ii>
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800bea4:	b580      	push	{r7, lr}
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800beac:	2000      	movs	r0, #0
 800beae:	f7ff ff7b 	bl	800bda8 <_Z41__static_initialization_and_destruction_0ii>
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800bebc:	4b05      	ldr	r3, [pc, #20]	; (800bed4 <_ZN11SimpleMutexC1Ev+0x20>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4798      	blx	r3
 800bec2:	4602      	mov	r2, r0
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	601a      	str	r2, [r3, #0]
}
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	200000f0 	.word	0x200000f0

0800bed8 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800bee0:	4b05      	ldr	r3, [pc, #20]	; (800bef8 <_ZN11SimpleMutexD1Ev+0x20>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	6812      	ldr	r2, [r2, #0]
 800bee8:	4610      	mov	r0, r2
 800beea:	4798      	blx	r3
}
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4618      	mov	r0, r3
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	200000fc 	.word	0x200000fc

0800befc <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800bf04:	4b04      	ldr	r3, [pc, #16]	; (800bf18 <_ZN11SimpleMutex4LockEv+0x1c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	6812      	ldr	r2, [r2, #0]
 800bf0c:	4610      	mov	r0, r2
 800bf0e:	4798      	blx	r3
}
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	200000f4 	.word	0x200000f4

0800bf1c <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800bf24:	4b04      	ldr	r3, [pc, #16]	; (800bf38 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	6812      	ldr	r2, [r2, #0]
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	4798      	blx	r3
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	200000f8 	.word	0x200000f8

0800bf3c <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	683a      	ldr	r2, [r7, #0]
 800bf4a:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7ff ffd3 	bl	800befc <_ZN11SimpleMutex4LockEv>
}
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff ffd5 	bl	800bf1c <_ZN11SimpleMutex6UnlockEv>
}
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4618      	mov	r0, r3
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800bf80:	4b05      	ldr	r3, [pc, #20]	; (800bf98 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d103      	bne.n	800bf90 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800bf88:	f003 fd7a 	bl	800fa80 <_Z24defaultNewArrayAllocatorv>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	e001      	b.n	800bf94 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800bf90:	4b01      	ldr	r3, [pc, #4]	; (800bf98 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	200008a0 	.word	0x200008a0

0800bf9c <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800bf9c:	b590      	push	{r4, r7, lr}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800bfa8:	f7ff ffe8 	bl	800bf7c <_ZN12SimpleString18getStringAllocatorEv>
 800bfac:	6803      	ldr	r3, [r0, #0]
 800bfae:	3308      	adds	r3, #8
 800bfb0:	681c      	ldr	r4, [r3, #0]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	68f9      	ldr	r1, [r7, #12]
 800bfb8:	47a0      	blx	r4
 800bfba:	4603      	mov	r3, r0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3714      	adds	r7, #20
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd90      	pop	{r4, r7, pc}

0800bfc4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800bfc4:	b590      	push	{r4, r7, lr}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	af02      	add	r7, sp, #8
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
 800bfd0:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800bfd2:	f7ff ffd3 	bl	800bf7c <_ZN12SimpleString18getStringAllocatorEv>
 800bfd6:	6803      	ldr	r3, [r0, #0]
 800bfd8:	330c      	adds	r3, #12
 800bfda:	681c      	ldr	r4, [r3, #0]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	68f9      	ldr	r1, [r7, #12]
 800bfe6:	47a0      	blx	r4
}
 800bfe8:	bf00      	nop
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd90      	pop	{r4, r7, pc}

0800bff0 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800bff8:	2284      	movs	r2, #132	; 0x84
 800bffa:	4906      	ldr	r1, [pc, #24]	; (800c014 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800bffc:	2001      	movs	r0, #1
 800bffe:	f7ff ffcd 	bl	800bf9c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c002:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	701a      	strb	r2, [r3, #0]
    return empty;
 800c00a:	68fb      	ldr	r3, [r7, #12]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	08023cb8 	.word	0x08023cb8

0800c018 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	4618      	mov	r0, r3
 800c026:	f001 f809 	bl	800d03c <_ZN12SimpleString7isSpaceEc>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d003      	beq.n	800c038 <_ZN12SimpleString4AtoUEPKc+0x20>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	3301      	adds	r3, #1
 800c034:	607b      	str	r3, [r7, #4]
 800c036:	e7f3      	b.n	800c020 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800c038:	2300      	movs	r3, #0
 800c03a:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	4618      	mov	r0, r3
 800c042:	f000 ffe7 	bl	800d014 <_ZN12SimpleString7isDigitEc>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d005      	beq.n	800c058 <_ZN12SimpleString4AtoUEPKc+0x40>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	2b2f      	cmp	r3, #47	; 0x2f
 800c052:	d901      	bls.n	800c058 <_ZN12SimpleString4AtoUEPKc+0x40>
 800c054:	2301      	movs	r3, #1
 800c056:	e000      	b.n	800c05a <_ZN12SimpleString4AtoUEPKc+0x42>
 800c058:	2300      	movs	r3, #0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d010      	beq.n	800c080 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	4613      	mov	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	461a      	mov	r2, r3
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	4413      	add	r3, r2
 800c074:	3b30      	subs	r3, #48	; 0x30
 800c076:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	3301      	adds	r3, #1
 800c07c:	607b      	str	r3, [r7, #4]
 800c07e:	e7dd      	b.n	800c03c <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800c080:	68fb      	ldr	r3, [r7, #12]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b084      	sub	sp, #16
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	4618      	mov	r0, r3
 800c098:	f000 ffd0 	bl	800d03c <_ZN12SimpleString7isSpaceEc>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <_ZN12SimpleString4AtoIEPKc+0x20>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	607b      	str	r3, [r7, #4]
 800c0a8:	e7f3      	b.n	800c092 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800c0b0:	7afb      	ldrb	r3, [r7, #11]
 800c0b2:	2b2d      	cmp	r3, #45	; 0x2d
 800c0b4:	d002      	beq.n	800c0bc <_ZN12SimpleString4AtoIEPKc+0x32>
 800c0b6:	7afb      	ldrb	r3, [r7, #11]
 800c0b8:	2b2b      	cmp	r3, #43	; 0x2b
 800c0ba:	d102      	bne.n	800c0c2 <_ZN12SimpleString4AtoIEPKc+0x38>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f000 ffa2 	bl	800d014 <_ZN12SimpleString7isDigitEc>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00f      	beq.n	800c0f6 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	4413      	add	r3, r2
 800c0de:	005b      	lsls	r3, r3, #1
 800c0e0:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	3b30      	subs	r3, #48	; 0x30
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	607b      	str	r3, [r7, #4]
 800c0f4:	e7e7      	b.n	800c0c6 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800c0f6:	7afb      	ldrb	r3, [r7, #11]
 800c0f8:	2b2d      	cmp	r3, #45	; 0x2d
 800c0fa:	d102      	bne.n	800c102 <_ZN12SimpleString4AtoIEPKc+0x78>
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	425b      	negs	r3, r3
 800c100:	e000      	b.n	800c104 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800c102:	68fb      	ldr	r3, [r7, #12]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00c      	beq.n	800c138 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	781a      	ldrb	r2, [r3, #0]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	429a      	cmp	r2, r3
 800c128:	d106      	bne.n	800c138 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	3301      	adds	r3, #1
 800c12e:	607b      	str	r3, [r7, #4]
       ++s2;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	3301      	adds	r3, #1
 800c134:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c136:	e7ee      	b.n	800c116 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	461a      	mov	r2, r3
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	1ad3      	subs	r3, r2, r3
}
 800c144:	4618      	mov	r0, r3
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800c158:	f04f 33ff 	mov.w	r3, #4294967295
 800c15c:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	3301      	adds	r3, #1
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	1c5a      	adds	r2, r3, #1
 800c168:	607a      	str	r2, [r7, #4]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	bf14      	ite	ne
 800c170:	2301      	movne	r3, #1
 800c172:	2300      	moveq	r3, #0
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b00      	cmp	r3, #0
 800c178:	d000      	beq.n	800c17c <_ZN12SimpleString6StrLenEPKc+0x2c>
 800c17a:	e7f0      	b.n	800c15e <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800c17c:	68fb      	ldr	r3, [r7, #12]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3714      	adds	r7, #20
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800c18a:	b480      	push	{r7}
 800c18c:	b085      	sub	sp, #20
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d013      	beq.n	800c1c4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00f      	beq.n	800c1c4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	781a      	ldrb	r2, [r3, #0]
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d109      	bne.n	800c1c4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	607b      	str	r3, [r7, #4]
        ++s1;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	60fb      	str	r3, [r7, #12]
        ++s2;
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800c1c2:	e7e8      	b.n	800c196 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d006      	beq.n	800c1d8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	e000      	b.n	800c1da <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3714      	adds	r7, #20
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b087      	sub	sp, #28
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	60f8      	str	r0, [r7, #12]
 800c1ee:	60b9      	str	r1, [r7, #8]
 800c1f0:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d002      	beq.n	800c202 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	e01e      	b.n	800c244 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	781a      	ldrb	r2, [r3, #0]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	3b01      	subs	r3, #1
 800c212:	607b      	str	r3, [r7, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d005      	beq.n	800c226 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d001      	beq.n	800c226 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800c222:	2301      	movs	r3, #1
 800c224:	e000      	b.n	800c228 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800c226:	2300      	movs	r3, #0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00a      	beq.n	800c242 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	3301      	adds	r3, #1
 800c230:	60bb      	str	r3, [r7, #8]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	60fb      	str	r3, [r7, #12]
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	781a      	ldrb	r2, [r3, #0]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800c240:	e7e5      	b.n	800c20e <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800c242:	697b      	ldr	r3, [r7, #20]
}
 800c244:	4618      	mov	r0, r3
 800c246:	371c      	adds	r7, #28
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	e01b      	b.n	800c29e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d016      	beq.n	800c29c <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800c26e:	6838      	ldr	r0, [r7, #0]
 800c270:	f7ff ff6e 	bl	800c150 <_ZN12SimpleString6StrLenEPKc>
 800c274:	4603      	mov	r3, r0
 800c276:	461a      	mov	r2, r3
 800c278:	6839      	ldr	r1, [r7, #0]
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff ff85 	bl	800c18a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800c280:	4603      	mov	r3, r0
 800c282:	2b00      	cmp	r3, #0
 800c284:	bf0c      	ite	eq
 800c286:	2301      	moveq	r3, #1
 800c288:	2300      	movne	r3, #0
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d001      	beq.n	800c294 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	e004      	b.n	800c29e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	3301      	adds	r3, #1
 800c298:	607b      	str	r3, [r7, #4]
 800c29a:	e7e4      	b.n	800c266 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b082      	sub	sp, #8
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800c2b0:	79fb      	ldrb	r3, [r7, #7]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 fed9 	bl	800d06a <_ZN12SimpleString7isUpperEc>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <_ZN12SimpleString7ToLowerEc+0x20>
 800c2be:	79fb      	ldrb	r3, [r7, #7]
 800c2c0:	3320      	adds	r3, #32
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	e000      	b.n	800c2c8 <_ZN12SimpleString7ToLowerEc+0x22>
 800c2c6:	79fb      	ldrb	r3, [r7, #7]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b087      	sub	sp, #28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	613b      	str	r3, [r7, #16]

    while (n--)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	1e5a      	subs	r2, r3, #1
 800c2e8:	607a      	str	r2, [r7, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	bf14      	ite	ne
 800c2ee:	2301      	movne	r3, #1
 800c2f0:	2300      	moveq	r3, #0
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d013      	beq.n	800c320 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	781a      	ldrb	r2, [r3, #0]
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	429a      	cmp	r2, r3
 800c302:	d006      	beq.n	800c312 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	461a      	mov	r2, r3
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	1ad3      	subs	r3, r2, r3
 800c310:	e007      	b.n	800c322 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	3301      	adds	r3, #1
 800c316:	617b      	str	r3, [r7, #20]
            ++p2;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	3301      	adds	r3, #1
 800c31c:	613b      	str	r3, [r7, #16]
    while (n--)
 800c31e:	e7e1      	b.n	800c2e4 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	371c      	adds	r7, #28
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
	...

0800c330 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00d      	beq.n	800c35c <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6818      	ldr	r0, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6859      	ldr	r1, [r3, #4]
 800c348:	23ee      	movs	r3, #238	; 0xee
 800c34a:	4a06      	ldr	r2, [pc, #24]	; (800c364 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800c34c:	f7ff fe3a 	bl	800bfc4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	605a      	str	r2, [r3, #4]
    }
}
 800c35c:	bf00      	nop
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	08023cb8 	.word	0x08023cb8

0800c368 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff ffdd 	bl	800c330 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f7ff fe37 	bl	800bff0 <_ZNK12SimpleString14getEmptyStringEv>
 800c382:	4602      	mov	r2, r0
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	601a      	str	r2, [r3, #0]
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f7ff ffc7 	bl	800c330 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	68b8      	ldr	r0, [r7, #8]
 800c3b0:	f000 fe12 	bl	800cfd8 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	601a      	str	r2, [r3, #0]
}
 800c3ba:	bf00      	nop
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
	...

0800c3c4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7ff ffae 	bl	800c330 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	683a      	ldr	r2, [r7, #0]
 800c3d8:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	f240 1209 	movw	r2, #265	; 0x109
 800c3e2:	4907      	ldr	r1, [pc, #28]	; (800c400 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7ff fdd9 	bl	800bf9c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	701a      	strb	r2, [r3, #0]
}
 800c3f8:	bf00      	nop
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	08023cb8 	.word	0x08023cb8

0800c404 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f7ff ff8d 	bl	800c330 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	601a      	str	r2, [r3, #0]
}
 800c422:	bf00      	nop
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800c42a:	b590      	push	{r4, r7, lr}
 800c42c:	b083      	sub	sp, #12
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	681c      	ldr	r4, [r3, #0]
 800c438:	6838      	ldr	r0, [r7, #0]
 800c43a:	f000 fbc1 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800c43e:	4603      	mov	r3, r0
 800c440:	3301      	adds	r3, #1
 800c442:	461a      	mov	r2, r3
 800c444:	4621      	mov	r1, r4
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7ff ffa2 	bl	800c390 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	bd90      	pop	{r4, r7, pc}

0800c454 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800c45e:	6838      	ldr	r0, [r7, #0]
 800c460:	f7ff fe76 	bl	800c150 <_ZN12SimpleString6StrLenEPKc>
 800c464:	4603      	mov	r3, r0
 800c466:	3301      	adds	r3, #1
 800c468:	461a      	mov	r2, r3
 800c46a:	6839      	ldr	r1, [r7, #0]
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7ff ff8f 	bl	800c390 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800c472:	bf00      	nop
 800c474:	3708      	adds	r7, #8
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800c47a:	b480      	push	{r7}
 800c47c:	b083      	sub	sp, #12
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
    return buffer_;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
}
 800c486:	4618      	mov	r0, r3
 800c488:	370c      	adds	r7, #12
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800c492:	b580      	push	{r7, lr}
 800c494:	b082      	sub	sp, #8
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	601a      	str	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d103      	bne.n	800c4b6 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7ff ff5a 	bl	800c368 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800c4b4:	e003      	b.n	800c4be <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7ff ffcb 	bl	800c454 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b088      	sub	sp, #32
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	601a      	str	r2, [r3, #0]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800c4e0:	68b8      	ldr	r0, [r7, #8]
 800c4e2:	f7ff fe35 	bl	800c150 <_ZN12SimpleString6StrLenEPKc>
 800c4e6:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	fb02 f303 	mul.w	r3, r2, r3
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f7ff ff65 	bl	800c3c4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800c500:	2300      	movs	r3, #0
 800c502:	61bb      	str	r3, [r7, #24]
 800c504:	69ba      	ldr	r2, [r7, #24]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d20e      	bcs.n	800c52a <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	3301      	adds	r3, #1
 800c510:	461a      	mov	r2, r3
 800c512:	68b9      	ldr	r1, [r7, #8]
 800c514:	69f8      	ldr	r0, [r7, #28]
 800c516:	f7ff fe66 	bl	800c1e6 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800c51a:	69fa      	ldr	r2, [r7, #28]
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	4413      	add	r3, r2
 800c520:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	3301      	adds	r3, #1
 800c526:	61bb      	str	r3, [r7, #24]
 800c528:	e7ec      	b.n	800c504 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	2200      	movs	r2, #0
 800c52e:	701a      	strb	r2, [r3, #0]
}
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	4618      	mov	r0, r3
 800c534:	3720      	adds	r7, #32
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b082      	sub	sp, #8
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
 800c542:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800c550:	6838      	ldr	r0, [r7, #0]
 800c552:	f7ff ff92 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c556:	4603      	mov	r3, r0
 800c558:	4619      	mov	r1, r3
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f7ff ff7a 	bl	800c454 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d003      	beq.n	800c584 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7ff ff53 	bl	800c42a <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800c584:	687b      	ldr	r3, [r7, #4]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800c58e:	b590      	push	{r4, r7, lr}
 800c590:	b083      	sub	sp, #12
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f7ff ff6e 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c59e:	4604      	mov	r4, r0
 800c5a0:	6838      	ldr	r0, [r7, #0]
 800c5a2:	f7ff ff6a 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f7ff fe50 	bl	800c250 <_ZN12SimpleString6StrStrEPKcS1_>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	bf14      	ite	ne
 800c5b6:	2301      	movne	r3, #1
 800c5b8:	2300      	moveq	r3, #0
 800c5ba:	b2db      	uxtb	r3, r3
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd90      	pop	{r4, r7, pc}

0800c5c4 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800c5c4:	b590      	push	{r4, r7, lr}
 800c5c6:	b087      	sub	sp, #28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800c5ce:	f107 0308 	add.w	r3, r7, #8
 800c5d2:	6879      	ldr	r1, [r7, #4]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f000 fabb 	bl	800cb50 <_ZNK12SimpleString9lowerCaseEv>
 800c5da:	f107 0310 	add.w	r3, r7, #16
 800c5de:	6839      	ldr	r1, [r7, #0]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f000 fab5 	bl	800cb50 <_ZNK12SimpleString9lowerCaseEv>
 800c5e6:	f107 0210 	add.w	r2, r7, #16
 800c5ea:	f107 0308 	add.w	r3, r7, #8
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7ff ffcc 	bl	800c58e <_ZNK12SimpleString8containsERKS_>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	461c      	mov	r4, r3
 800c5fa:	bf00      	nop
 800c5fc:	f107 0310 	add.w	r3, r7, #16
 800c600:	4618      	mov	r0, r3
 800c602:	f000 fafe 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800c606:	f107 0308 	add.w	r3, r7, #8
 800c60a:	4618      	mov	r0, r3
 800c60c:	f000 faf9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800c610:	4623      	mov	r3, r4
}
 800c612:	4618      	mov	r0, r3
 800c614:	371c      	adds	r7, #28
 800c616:	46bd      	mov	sp, r7
 800c618:	bd90      	pop	{r4, r7, pc}

0800c61a <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800c61a:	b590      	push	{r4, r7, lr}
 800c61c:	b083      	sub	sp, #12
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800c624:	6838      	ldr	r0, [r7, #0]
 800c626:	f000 facb 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	bf0c      	ite	eq
 800c630:	2301      	moveq	r3, #1
 800c632:	2300      	movne	r3, #0
 800c634:	b2db      	uxtb	r3, r3
 800c636:	2b00      	cmp	r3, #0
 800c638:	d001      	beq.n	800c63e <_ZNK12SimpleString10startsWithERKS_+0x24>
 800c63a:	2301      	movs	r3, #1
 800c63c:	e022      	b.n	800c684 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fabe 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	bf0c      	ite	eq
 800c64a:	2301      	moveq	r3, #1
 800c64c:	2300      	movne	r3, #0
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	d001      	beq.n	800c658 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800c654:	2300      	movs	r3, #0
 800c656:	e015      	b.n	800c684 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff ff0e 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c65e:	4604      	mov	r4, r0
 800c660:	6838      	ldr	r0, [r7, #0]
 800c662:	f7ff ff0a 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c666:	4603      	mov	r3, r0
 800c668:	4619      	mov	r1, r3
 800c66a:	4620      	mov	r0, r4
 800c66c:	f7ff fdf0 	bl	800c250 <_ZN12SimpleString6StrStrEPKcS1_>
 800c670:	4604      	mov	r4, r0
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7ff ff01 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c678:	4603      	mov	r3, r0
 800c67a:	429c      	cmp	r4, r3
 800c67c:	bf0c      	ite	eq
 800c67e:	2301      	moveq	r3, #1
 800c680:	2300      	movne	r3, #0
 800c682:	b2db      	uxtb	r3, r3
}
 800c684:	4618      	mov	r0, r3
 800c686:	370c      	adds	r7, #12
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd90      	pop	{r4, r7, pc}

0800c68c <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800c68c:	b590      	push	{r4, r7, lr}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 fa92 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800c69c:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800c69e:	6838      	ldr	r0, [r7, #0]
 800c6a0:	f000 fa8e 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800c6a4:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d101      	bne.n	800c6b0 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e020      	b.n	800c6f2 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e01b      	b.n	800c6f2 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d201      	bcs.n	800c6c6 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	e015      	b.n	800c6f2 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7ff fed7 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c6cc:	4601      	mov	r1, r0
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	18cc      	adds	r4, r1, r3
 800c6d6:	6838      	ldr	r0, [r7, #0]
 800c6d8:	f7ff fecf 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	4619      	mov	r1, r3
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f7ff fd13 	bl	800c10c <_ZN12SimpleString6StrCmpEPKcS1_>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	bf0c      	ite	eq
 800c6ec:	2301      	moveq	r3, #1
 800c6ee:	2300      	movne	r3, #0
 800c6f0:	b2db      	uxtb	r3, r3
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd90      	pop	{r4, r7, pc}

0800c6fa <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b086      	sub	sp, #24
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
 800c702:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7ff feb6 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c70e:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800c710:	2300      	movs	r3, #0
 800c712:	60fb      	str	r3, [r7, #12]
    if (*str){
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d008      	beq.n	800c72e <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800c71c:	6838      	ldr	r0, [r7, #0]
 800c71e:	f7ff feac 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c722:	4603      	mov	r3, r0
 800c724:	4619      	mov	r1, r3
 800c726:	6938      	ldr	r0, [r7, #16]
 800c728:	f7ff fd92 	bl	800c250 <_ZN12SimpleString6StrStrEPKcS1_>
 800c72c:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d014      	beq.n	800c760 <_ZNK12SimpleString5countERKS_+0x66>
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d011      	beq.n	800c760 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	613b      	str	r3, [r7, #16]
        str++;
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	3301      	adds	r3, #1
 800c744:	613b      	str	r3, [r7, #16]
        num++;
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	3301      	adds	r3, #1
 800c74a:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800c74c:	6838      	ldr	r0, [r7, #0]
 800c74e:	f7ff fe94 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c752:	4603      	mov	r3, r0
 800c754:	4619      	mov	r1, r3
 800c756:	6938      	ldr	r0, [r7, #16]
 800c758:	f7ff fd7a 	bl	800c250 <_ZN12SimpleString6StrStrEPKcS1_>
 800c75c:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800c75e:	e7e6      	b.n	800c72e <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800c760:	697b      	ldr	r3, [r7, #20]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3718      	adds	r7, #24
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800c76a:	b590      	push	{r4, r7, lr}
 800c76c:	b091      	sub	sp, #68	; 0x44
 800c76e:	af00      	add	r7, sp, #0
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800c776:	68b9      	ldr	r1, [r7, #8]
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f7ff ffbe 	bl	800c6fa <_ZNK12SimpleString5countERKS_>
 800c77e:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800c780:	68b9      	ldr	r1, [r7, #8]
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f7ff ff82 	bl	800c68c <_ZNK12SimpleString8endsWithERKS_>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800c78e:	2300      	movs	r3, #0
 800c790:	e000      	b.n	800c794 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800c792:	2301      	movs	r3, #1
 800c794:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800c796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	4413      	add	r3, r2
 800c79c:	4619      	mov	r1, r3
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f001 f95c 	bl	800da5c <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f7ff fe68 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c7aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d235      	bcs.n	800c824 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800c7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800c7bc:	68b8      	ldr	r0, [r7, #8]
 800c7be:	f7ff fe5c 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c7c8:	f7ff fd42 	bl	800c250 <_ZN12SimpleString6StrStrEPKcS1_>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800c7d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f001 f9db 	bl	800db90 <_ZN22SimpleStringCollectionixEj>
 800c7da:	4604      	mov	r4, r0
 800c7dc:	f107 031c 	add.w	r3, r7, #28
 800c7e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff fe55 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800c7e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	f107 0014 	add.w	r0, r7, #20
 800c7f2:	f107 011c 	add.w	r1, r7, #28
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f000 fb0c 	bl	800ce14 <_ZNK12SimpleString9subStringEjj>
 800c7fc:	f107 0314 	add.w	r3, r7, #20
 800c800:	4619      	mov	r1, r3
 800c802:	4620      	mov	r0, r4
 800c804:	f7ff feb1 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800c808:	f107 0314 	add.w	r3, r7, #20
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 f9f8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800c812:	f107 031c 	add.w	r3, r7, #28
 800c816:	4618      	mov	r0, r3
 800c818:	f000 f9f3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800c81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81e:	3301      	adds	r3, #1
 800c820:	63bb      	str	r3, [r7, #56]	; 0x38
 800c822:	e7c5      	b.n	800c7b0 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800c824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c826:	2b00      	cmp	r3, #0
 800c828:	d015      	beq.n	800c856 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800c82a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f001 f9af 	bl	800db90 <_ZN22SimpleStringCollectionixEj>
 800c832:	4604      	mov	r4, r0
 800c834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7ff fe29 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800c840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c844:	4619      	mov	r1, r3
 800c846:	4620      	mov	r0, r4
 800c848:	f7ff fe8f 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800c84c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c850:	4618      	mov	r0, r3
 800c852:	f000 f9d6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    }
}
 800c856:	bf00      	nop
 800c858:	3744      	adds	r7, #68	; 0x44
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd90      	pop	{r4, r7, pc}

0800c85e <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	460b      	mov	r3, r1
 800c868:	70fb      	strb	r3, [r7, #3]
 800c86a:	4613      	mov	r3, r2
 800c86c:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f9a6 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800c874:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800c876:	2300      	movs	r3, #0
 800c878:	60fb      	str	r3, [r7, #12]
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d218      	bcs.n	800c8b4 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7ff fdf9 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c888:	4602      	mov	r2, r0
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	4413      	add	r3, r2
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	78fa      	ldrb	r2, [r7, #3]
 800c892:	429a      	cmp	r2, r3
 800c894:	bf0c      	ite	eq
 800c896:	2301      	moveq	r3, #1
 800c898:	2300      	movne	r3, #0
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d005      	beq.n	800c8ac <_ZN12SimpleString7replaceEcc+0x4e>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	78ba      	ldrb	r2, [r7, #2]
 800c8aa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	60fb      	str	r3, [r7, #12]
 800c8b2:	e7e2      	b.n	800c87a <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800c8b4:	bf00      	nop
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b08e      	sub	sp, #56	; 0x38
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800c8c8:	f107 0310 	add.w	r3, r7, #16
 800c8cc:	68b9      	ldr	r1, [r7, #8]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff fddf 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800c8d4:	f107 0310 	add.w	r3, r7, #16
 800c8d8:	4619      	mov	r1, r3
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	f7ff ff0d 	bl	800c6fa <_ZNK12SimpleString5countERKS_>
 800c8e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c8e2:	f107 0310 	add.w	r3, r7, #16
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 f98b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d071      	beq.n	800c9d6 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800c8f2:	68f8      	ldr	r0, [r7, #12]
 800c8f4:	f000 f964 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800c8f8:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800c8fa:	68b8      	ldr	r0, [r7, #8]
 800c8fc:	f7ff fc28 	bl	800c150 <_ZN12SimpleString6StrLenEPKc>
 800c900:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f7ff fc24 	bl	800c150 <_ZN12SimpleString6StrLenEPKc>
 800c908:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800c90a:	6a3b      	ldr	r3, [r7, #32]
 800c90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c90e:	fb02 f203 	mul.w	r2, r2, r3
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	441a      	add	r2, r3
 800c916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c91a:	fb01 f303 	mul.w	r3, r1, r3
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	3301      	adds	r3, #1
 800c922:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	2b01      	cmp	r3, #1
 800c928:	d951      	bls.n	800c9ce <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800c92a:	f240 129d 	movw	r2, #413	; 0x19d
 800c92e:	492c      	ldr	r1, [pc, #176]	; (800c9e0 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800c930:	69f8      	ldr	r0, [r7, #28]
 800c932:	f7ff fb33 	bl	800bf9c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c936:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800c938:	2300      	movs	r3, #0
 800c93a:	637b      	str	r3, [r7, #52]	; 0x34
 800c93c:	2300      	movs	r3, #0
 800c93e:	633b      	str	r3, [r7, #48]	; 0x30
 800c940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c944:	429a      	cmp	r2, r3
 800c946:	d236      	bcs.n	800c9b6 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f7ff fd96 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c94e:	4602      	mov	r2, r0
 800c950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c952:	4413      	add	r3, r2
 800c954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c956:	68b9      	ldr	r1, [r7, #8]
 800c958:	4618      	mov	r0, r3
 800c95a:	f7ff fc16 	bl	800c18a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	bf0c      	ite	eq
 800c964:	2301      	moveq	r3, #1
 800c966:	2300      	movne	r3, #0
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d011      	beq.n	800c992 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800c96e:	69ba      	ldr	r2, [r7, #24]
 800c970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c972:	18d0      	adds	r0, r2, r3
 800c974:	6a3b      	ldr	r3, [r7, #32]
 800c976:	3301      	adds	r3, #1
 800c978:	461a      	mov	r2, r3
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	f7ff fc33 	bl	800c1e6 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800c980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c982:	6a3b      	ldr	r3, [r7, #32]
 800c984:	4413      	add	r3, r2
 800c986:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800c988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	4413      	add	r3, r2
 800c98e:	637b      	str	r3, [r7, #52]	; 0x34
 800c990:	e7d6      	b.n	800c940 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f7ff fd71 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800c998:	4602      	mov	r2, r0
 800c99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c99c:	441a      	add	r2, r3
 800c99e:	69b9      	ldr	r1, [r7, #24]
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a2:	440b      	add	r3, r1
 800c9a4:	7812      	ldrb	r2, [r2, #0]
 800c9a6:	701a      	strb	r2, [r3, #0]
                j++;
 800c9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800c9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800c9b4:	e7c4      	b.n	800c940 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	69ba      	ldr	r2, [r7, #24]
 800c9bc:	4413      	add	r3, r2
 800c9be:	2200      	movs	r2, #0
 800c9c0:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800c9c2:	69fa      	ldr	r2, [r7, #28]
 800c9c4:	69b9      	ldr	r1, [r7, #24]
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f7ff fd1c 	bl	800c404 <_ZN12SimpleString19setInternalBufferToEPcj>
 800c9cc:	e004      	b.n	800c9d8 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f7ff fcca 	bl	800c368 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800c9d4:	e000      	b.n	800c9d8 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800c9d6:	bf00      	nop
}
 800c9d8:	3738      	adds	r7, #56	; 0x38
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	08023cb8 	.word	0x08023cb8

0800c9e4 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800c9e4:	b590      	push	{r4, r7, lr}
 800c9e6:	b089      	sub	sp, #36	; 0x24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800c9ee:	493b      	ldr	r1, [pc, #236]	; (800cadc <_ZNK12SimpleString9printableEv+0xf8>)
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7ff fd4e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800c9f6:	6838      	ldr	r0, [r7, #0]
 800c9f8:	f000 f876 	bl	800cae8 <_ZNK12SimpleString16getPrintableSizeEv>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	3301      	adds	r3, #1
 800ca00:	4619      	mov	r1, r3
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7ff fcde 	bl	800c3c4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800ca08:	6838      	ldr	r0, [r7, #0]
 800ca0a:	f000 f8d9 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800ca0e:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800ca14:	2300      	movs	r3, #0
 800ca16:	61bb      	str	r3, [r7, #24]
 800ca18:	69ba      	ldr	r2, [r7, #24]
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d252      	bcs.n	800cac6 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	4413      	add	r3, r2
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800ca2c:	7cfb      	ldrb	r3, [r7, #19]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fb43 	bl	800d0ba <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d012      	beq.n	800ca60 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	18d0      	adds	r0, r2, r3
 800ca42:	7cfb      	ldrb	r3, [r7, #19]
 800ca44:	3b07      	subs	r3, #7
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	461a      	mov	r2, r3
 800ca4a:	4b25      	ldr	r3, [pc, #148]	; (800cae0 <_ZNK12SimpleString9printableEv+0xfc>)
 800ca4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca50:	2202      	movs	r2, #2
 800ca52:	4619      	mov	r1, r3
 800ca54:	f7ff fbc7 	bl	800c1e6 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	3302      	adds	r3, #2
 800ca5c:	61fb      	str	r3, [r7, #28]
 800ca5e:	e02e      	b.n	800cabe <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800ca60:	7cfb      	ldrb	r3, [r7, #19]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f000 fb15 	bl	800d092 <_ZN12SimpleString9isControlEc>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d01e      	beq.n	800caac <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800ca6e:	7cfa      	ldrb	r2, [r7, #19]
 800ca70:	f107 0308 	add.w	r3, r7, #8
 800ca74:	491b      	ldr	r1, [pc, #108]	; (800cae4 <_ZNK12SimpleString9printableEv+0x100>)
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 fdca 	bl	800d610 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	18d4      	adds	r4, r2, r3
 800ca84:	f107 0308 	add.w	r3, r7, #8
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f000 f88d 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2204      	movs	r2, #4
 800ca92:	4619      	mov	r1, r3
 800ca94:	4620      	mov	r0, r4
 800ca96:	f7ff fba6 	bl	800c1e6 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800caa0:	f107 0308 	add.w	r3, r7, #8
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 f8ac 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800caaa:	e008      	b.n	800cabe <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	4413      	add	r3, r2
 800cab4:	7cfa      	ldrb	r2, [r7, #19]
 800cab6:	701a      	strb	r2, [r3, #0]
            j++;
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	3301      	adds	r3, #1
 800cabc:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	3301      	adds	r3, #1
 800cac2:	61bb      	str	r3, [r7, #24]
 800cac4:	e7a8      	b.n	800ca18 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	4413      	add	r3, r2
 800cace:	2200      	movs	r2, #0
 800cad0:	701a      	strb	r2, [r3, #0]

    return result;
 800cad2:	bf00      	nop
}
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	3724      	adds	r7, #36	; 0x24
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd90      	pop	{r4, r7, pc}
 800cadc:	08023d78 	.word	0x08023d78
 800cae0:	2000006c 	.word	0x2000006c
 800cae4:	08023d7c 	.word	0x08023d7c

0800cae8 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f865 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800caf6:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800cafc:	2300      	movs	r3, #0
 800cafe:	613b      	str	r3, [r7, #16]
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d21e      	bcs.n	800cb46 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	4413      	add	r3, r2
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800cb14:	7afb      	ldrb	r3, [r7, #11]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 facf 	bl	800d0ba <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	3301      	adds	r3, #1
 800cb26:	617b      	str	r3, [r7, #20]
 800cb28:	e009      	b.n	800cb3e <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800cb2a:	7afb      	ldrb	r3, [r7, #11]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 fab0 	bl	800d092 <_ZN12SimpleString9isControlEc>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d002      	beq.n	800cb3e <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	3303      	adds	r3, #3
 800cb3c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	3301      	adds	r3, #1
 800cb42:	613b      	str	r3, [r7, #16]
 800cb44:	e7dc      	b.n	800cb00 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800cb46:	697b      	ldr	r3, [r7, #20]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3718      	adds	r7, #24
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800cb50:	b590      	push	{r4, r7, lr}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7ff fcec 	bl	800c53a <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f82c 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800cb68:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	60fb      	str	r3, [r7, #12]
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d213      	bcs.n	800cb9e <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff fc7f 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	4413      	add	r3, r2
 800cb82:	7819      	ldrb	r1, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	18d4      	adds	r4, r2, r3
 800cb8c:	4608      	mov	r0, r1
 800cb8e:	f7ff fb8a 	bl	800c2a6 <_ZN12SimpleString7ToLowerEc>
 800cb92:	4603      	mov	r3, r0
 800cb94:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	e7e7      	b.n	800cb6e <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800cb9e:	bf00      	nop
}
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd90      	pop	{r4, r7, pc}

0800cba8 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7ff fc62 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800cbb6:	4603      	mov	r3, r0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7ff fc56 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff fabd 	bl	800c150 <_ZN12SimpleString6StrLenEPKc>
 800cbd6:	4603      	mov	r3, r0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7ff ffe9 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	bf0c      	ite	eq
 800cbf4:	2301      	moveq	r3, #1
 800cbf6:	2300      	movne	r3, #0
 800cbf8:	b2db      	uxtb	r3, r3
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b082      	sub	sp, #8
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff fb90 	bl	800c330 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4618      	mov	r0, r3
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800cc1a:	b590      	push	{r4, r7, lr}
 800cc1c:	b083      	sub	sp, #12
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
 800cc22:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff ffbf 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	6838      	ldr	r0, [r7, #0]
 800cc2e:	f7ff ffbb 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800cc32:	4603      	mov	r3, r0
 800cc34:	4619      	mov	r1, r3
 800cc36:	4620      	mov	r0, r4
 800cc38:	f7ff fa68 	bl	800c10c <_ZN12SimpleString6StrCmpEPKcS1_>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	bf0c      	ite	eq
 800cc42:	2301      	moveq	r3, #1
 800cc44:	2300      	movne	r3, #0
 800cc46:	b2db      	uxtb	r3, r3
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd90      	pop	{r4, r7, pc}

0800cc50 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800cc50:	b590      	push	{r4, r7, lr}
 800cc52:	b087      	sub	sp, #28
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800cc5a:	f107 0308 	add.w	r3, r7, #8
 800cc5e:	6879      	ldr	r1, [r7, #4]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7ff ff75 	bl	800cb50 <_ZNK12SimpleString9lowerCaseEv>
 800cc66:	f107 0310 	add.w	r3, r7, #16
 800cc6a:	6839      	ldr	r1, [r7, #0]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7ff ff6f 	bl	800cb50 <_ZNK12SimpleString9lowerCaseEv>
 800cc72:	f107 0210 	add.w	r2, r7, #16
 800cc76:	f107 0308 	add.w	r3, r7, #8
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff ffcc 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 800cc82:	4603      	mov	r3, r0
 800cc84:	461c      	mov	r4, r3
 800cc86:	f107 0310 	add.w	r3, r7, #16
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7ff ffb9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800cc90:	f107 0308 	add.w	r3, r7, #8
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff ffb4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800cc9a:	4623      	mov	r3, r4
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	371c      	adds	r7, #28
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd90      	pop	{r4, r7, pc}

0800cca4 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800ccae:	6839      	ldr	r1, [r7, #0]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7ff ffb2 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	f083 0301 	eor.w	r3, r3, #1
 800ccbc:	b2db      	uxtb	r3, r3
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	60f8      	str	r0, [r7, #12]
 800ccce:	60b9      	str	r1, [r7, #8]
 800ccd0:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800ccd2:	68b8      	ldr	r0, [r7, #8]
 800ccd4:	f7ff fbd1 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	4619      	mov	r1, r3
 800ccdc:	68f8      	ldr	r0, [r7, #12]
 800ccde:	f7ff fbd8 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f7ff fbc9 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800cce8:	4603      	mov	r3, r0
 800ccea:	4619      	mov	r1, r3
 800ccec:	68f8      	ldr	r0, [r7, #12]
 800ccee:	f000 f817 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    return t;
 800ccf2:	bf00      	nop
}
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800cd06:	6838      	ldr	r0, [r7, #0]
 800cd08:	f7ff fbb7 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	4619      	mov	r1, r3
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 f805 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
 800cd16:	4603      	mov	r3, r0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7ff ff48 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800cd30:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800cd32:	6838      	ldr	r0, [r7, #0]
 800cd34:	f7ff fa0c 	bl	800c150 <_ZN12SimpleString6StrLenEPKc>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	4413      	add	r3, r2
 800cd44:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7ff fb97 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	68f9      	ldr	r1, [r7, #12]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 f941 	bl	800cfd8 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800cd56:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800cd58:	68ba      	ldr	r2, [r7, #8]
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	693a      	ldr	r2, [r7, #16]
 800cd60:	6839      	ldr	r1, [r7, #0]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7ff fa3f 	bl	800c1e6 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	68b9      	ldr	r1, [r7, #8]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f7ff fb49 	bl	800c404 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800cd72:	687b      	ldr	r3, [r7, #4]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3718      	adds	r7, #24
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800cd7c:	b590      	push	{r4, r7, lr}
 800cd7e:	b08b      	sub	sp, #44	; 0x2c
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	4613      	mov	r3, r2
 800cd88:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f7ff ff18 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800cd90:	4604      	mov	r4, r0
 800cd92:	68b8      	ldr	r0, [r7, #8]
 800cd94:	f7ff ff14 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	429c      	cmp	r4, r3
 800cd9c:	bf8c      	ite	hi
 800cd9e:	2301      	movhi	r3, #1
 800cda0:	2300      	movls	r3, #0
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d006      	beq.n	800cdb6 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800cda8:	79fb      	ldrb	r3, [r7, #7]
 800cdaa:	461a      	mov	r2, r3
 800cdac:	68f9      	ldr	r1, [r7, #12]
 800cdae:	68b8      	ldr	r0, [r7, #8]
 800cdb0:	f7ff ffe4 	bl	800cd7c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800cdb4:	e02b      	b.n	800ce0e <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800cdb6:	79fb      	ldrb	r3, [r7, #7]
 800cdb8:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800cdbe:	68b8      	ldr	r0, [r7, #8]
 800cdc0:	f7ff fefe 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f7ff fefa 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	1ae2      	subs	r2, r4, r3
 800cdd0:	f107 0114 	add.w	r1, r7, #20
 800cdd4:	f107 0320 	add.w	r3, r7, #32
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7ff fb75 	bl	800c4c8 <_ZN12SimpleStringC1EPKcj>
 800cdde:	f107 0318 	add.w	r3, r7, #24
 800cde2:	f107 0120 	add.w	r1, r7, #32
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7ff ff6c 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800cdee:	f107 0318 	add.w	r3, r7, #24
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f7ff fbb8 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800cdfa:	f107 0318 	add.w	r3, r7, #24
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7ff feff 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800ce04:	f107 0320 	add.w	r3, r7, #32
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7ff fefa 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800ce0e:	372c      	adds	r7, #44	; 0x2c
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd90      	pop	{r4, r7, pc}

0800ce14 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
 800ce20:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800ce22:	68b8      	ldr	r0, [r7, #8]
 800ce24:	f7ff fecc 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	bf8c      	ite	hi
 800ce32:	2301      	movhi	r3, #1
 800ce34:	2300      	movls	r3, #0
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d004      	beq.n	800ce46 <_ZNK12SimpleString9subStringEjj+0x32>
 800ce3c:	4919      	ldr	r1, [pc, #100]	; (800cea4 <_ZNK12SimpleString9subStringEjj+0x90>)
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f7ff fb27 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800ce44:	e029      	b.n	800ce9a <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800ce46:	68b8      	ldr	r0, [r7, #8]
 800ce48:	f7ff fb17 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	441a      	add	r2, r3
 800ce52:	f107 0310 	add.w	r3, r7, #16
 800ce56:	4611      	mov	r1, r2
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7ff fb1a 	bl	800c492 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800ce5e:	f107 0310 	add.w	r3, r7, #16
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7ff feac 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	bf34      	ite	cc
 800ce70:	2301      	movcc	r3, #1
 800ce72:	2300      	movcs	r3, #0
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d004      	beq.n	800ce84 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800ce7a:	693a      	ldr	r2, [r7, #16]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	4413      	add	r3, r2
 800ce80:	2200      	movs	r2, #0
 800ce82:	701a      	strb	r2, [r3, #0]

    return newString;
 800ce84:	f107 0310 	add.w	r3, r7, #16
 800ce88:	4619      	mov	r1, r3
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f7ff fb55 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800ce90:	f107 0310 	add.w	r3, r7, #16
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7ff feb4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	3718      	adds	r7, #24
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	08023d78 	.word	0x08023d78

0800cea8 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f04f 33ff 	mov.w	r3, #4294967295
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	68b9      	ldr	r1, [r7, #8]
 800cebe:	f7ff ffa9 	bl	800ce14 <_ZNK12SimpleString9subStringEjj>
}
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b082      	sub	sp, #8
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
 800ced2:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f7ff fad0 	bl	800c47a <_ZNK12SimpleString9getBufferEv>
 800ceda:	4602      	mov	r2, r0
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	4413      	add	r3, r2
 800cee0:	781b      	ldrb	r3, [r3, #0]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b082      	sub	sp, #8
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
 800cef2:	460b      	mov	r3, r1
 800cef4:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800cef6:	78fb      	ldrb	r3, [r7, #3]
 800cef8:	461a      	mov	r2, r3
 800cefa:	2100      	movs	r1, #0
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 f805 	bl	800cf0c <_ZNK12SimpleString8findFromEjc>
 800cf02:	4603      	mov	r3, r0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	4613      	mov	r3, r2
 800cf18:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f7ff fe50 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800cf20:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	617b      	str	r3, [r7, #20]
 800cf26:	697a      	ldr	r2, [r7, #20]
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d213      	bcs.n	800cf56 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800cf2e:	6979      	ldr	r1, [r7, #20]
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f7ff ffca 	bl	800ceca <_ZNK12SimpleString2atEj>
 800cf36:	4603      	mov	r3, r0
 800cf38:	461a      	mov	r2, r3
 800cf3a:	79fb      	ldrb	r3, [r7, #7]
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	bf0c      	ite	eq
 800cf40:	2301      	moveq	r3, #1
 800cf42:	2300      	movne	r3, #0
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d001      	beq.n	800cf4e <_ZNK12SimpleString8findFromEjc+0x42>
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	e005      	b.n	800cf5a <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	3301      	adds	r3, #1
 800cf52:	617b      	str	r3, [r7, #20]
 800cf54:	e7e7      	b.n	800cf26 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800cf56:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3718      	adds	r7, #24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
	...

0800cf64 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	4611      	mov	r1, r2
 800cf70:	461a      	mov	r2, r3
 800cf72:	460b      	mov	r3, r1
 800cf74:	71fb      	strb	r3, [r7, #7]
 800cf76:	4613      	mov	r3, r2
 800cf78:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	68b8      	ldr	r0, [r7, #8]
 800cf80:	f7ff ffb3 	bl	800ceea <_ZNK12SimpleString4findEc>
 800cf84:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8c:	d104      	bne.n	800cf98 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800cf8e:	4911      	ldr	r1, [pc, #68]	; (800cfd4 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7ff fa7e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800cf96:	e019      	b.n	800cfcc <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800cf98:	79bb      	ldrb	r3, [r7, #6]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	6979      	ldr	r1, [r7, #20]
 800cf9e:	68b8      	ldr	r0, [r7, #8]
 800cfa0:	f7ff ffb4 	bl	800cf0c <_ZNK12SimpleString8findFromEjc>
 800cfa4:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfac:	d106      	bne.n	800cfbc <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	697a      	ldr	r2, [r7, #20]
 800cfb2:	68b9      	ldr	r1, [r7, #8]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff ff77 	bl	800cea8 <_ZNK12SimpleString9subStringEj>
 800cfba:	e007      	b.n	800cfcc <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800cfbc:	693a      	ldr	r2, [r7, #16]
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	68b9      	ldr	r1, [r7, #8]
 800cfc8:	f7ff ff24 	bl	800ce14 <_ZNK12SimpleString9subStringEjj>
}
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	3718      	adds	r7, #24
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	08023d78 	.word	0x08023d78

0800cfd8 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800cfe2:	f240 2275 	movw	r2, #629	; 0x275
 800cfe6:	490a      	ldr	r1, [pc, #40]	; (800d010 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800cfe8:	6838      	ldr	r0, [r7, #0]
 800cfea:	f7fe ffd7 	bl	800bf9c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800cfee:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	6879      	ldr	r1, [r7, #4]
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7ff f8f6 	bl	800c1e6 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	4413      	add	r3, r2
 800d002:	2200      	movs	r2, #0
 800d004:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800d006:	68fb      	ldr	r3, [r7, #12]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	08023cb8 	.word	0x08023cb8

0800d014 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800d01e:	79fb      	ldrb	r3, [r7, #7]
 800d020:	2b2f      	cmp	r3, #47	; 0x2f
 800d022:	d904      	bls.n	800d02e <_ZN12SimpleString7isDigitEc+0x1a>
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	2b39      	cmp	r3, #57	; 0x39
 800d028:	d801      	bhi.n	800d02e <_ZN12SimpleString7isDigitEc+0x1a>
 800d02a:	2301      	movs	r3, #1
 800d02c:	e000      	b.n	800d030 <_ZN12SimpleString7isDigitEc+0x1c>
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	4603      	mov	r3, r0
 800d044:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800d046:	79fb      	ldrb	r3, [r7, #7]
 800d048:	2b20      	cmp	r3, #32
 800d04a:	d005      	beq.n	800d058 <_ZN12SimpleString7isSpaceEc+0x1c>
 800d04c:	79fb      	ldrb	r3, [r7, #7]
 800d04e:	2b08      	cmp	r3, #8
 800d050:	d904      	bls.n	800d05c <_ZN12SimpleString7isSpaceEc+0x20>
 800d052:	79fb      	ldrb	r3, [r7, #7]
 800d054:	2b0d      	cmp	r3, #13
 800d056:	d801      	bhi.n	800d05c <_ZN12SimpleString7isSpaceEc+0x20>
 800d058:	2301      	movs	r3, #1
 800d05a:	e000      	b.n	800d05e <_ZN12SimpleString7isSpaceEc+0x22>
 800d05c:	2300      	movs	r3, #0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800d06a:	b480      	push	{r7}
 800d06c:	b083      	sub	sp, #12
 800d06e:	af00      	add	r7, sp, #0
 800d070:	4603      	mov	r3, r0
 800d072:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800d074:	79fb      	ldrb	r3, [r7, #7]
 800d076:	2b40      	cmp	r3, #64	; 0x40
 800d078:	d904      	bls.n	800d084 <_ZN12SimpleString7isUpperEc+0x1a>
 800d07a:	79fb      	ldrb	r3, [r7, #7]
 800d07c:	2b5a      	cmp	r3, #90	; 0x5a
 800d07e:	d801      	bhi.n	800d084 <_ZN12SimpleString7isUpperEc+0x1a>
 800d080:	2301      	movs	r3, #1
 800d082:	e000      	b.n	800d086 <_ZN12SimpleString7isUpperEc+0x1c>
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	370c      	adds	r7, #12
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr

0800d092 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800d092:	b480      	push	{r7}
 800d094:	b083      	sub	sp, #12
 800d096:	af00      	add	r7, sp, #0
 800d098:	4603      	mov	r3, r0
 800d09a:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	2b1f      	cmp	r3, #31
 800d0a0:	d902      	bls.n	800d0a8 <_ZN12SimpleString9isControlEc+0x16>
 800d0a2:	79fb      	ldrb	r3, [r7, #7]
 800d0a4:	2b7f      	cmp	r3, #127	; 0x7f
 800d0a6:	d101      	bne.n	800d0ac <_ZN12SimpleString9isControlEc+0x1a>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e000      	b.n	800d0ae <_ZN12SimpleString9isControlEc+0x1c>
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	370c      	adds	r7, #12
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b083      	sub	sp, #12
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800d0c4:	79fb      	ldrb	r3, [r7, #7]
 800d0c6:	2b06      	cmp	r3, #6
 800d0c8:	d904      	bls.n	800d0d4 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d0ca:	79fb      	ldrb	r3, [r7, #7]
 800d0cc:	2b0d      	cmp	r3, #13
 800d0ce:	d801      	bhi.n	800d0d4 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	e000      	b.n	800d0d6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	370c      	adds	r7, #12
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
	...

0800d0e4 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800d0f0:	78fb      	ldrb	r3, [r7, #3]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d001      	beq.n	800d0fa <_Z10StringFromb+0x16>
 800d0f6:	4a06      	ldr	r2, [pc, #24]	; (800d110 <_Z10StringFromb+0x2c>)
 800d0f8:	e000      	b.n	800d0fc <_Z10StringFromb+0x18>
 800d0fa:	4a06      	ldr	r2, [pc, #24]	; (800d114 <_Z10StringFromb+0x30>)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	4906      	ldr	r1, [pc, #24]	; (800d118 <_Z10StringFromb+0x34>)
 800d100:	4618      	mov	r0, r3
 800d102:	f000 fa85 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	08023d84 	.word	0x08023d84
 800d114:	08023d8c 	.word	0x08023d8c
 800d118:	08023d94 	.word	0x08023d94

0800d11c <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800d126:	6839      	ldr	r1, [r7, #0]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff f9b2 	bl	800c492 <_ZN12SimpleStringC1EPKc>
}
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
	...

0800d138 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800d138:	b590      	push	{r4, r7, lr}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800d142:	2400      	movs	r4, #0
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00e      	beq.n	800d168 <_Z25PrintableStringFromOrNullPKc+0x30>
 800d14a:	f107 0308 	add.w	r3, r7, #8
 800d14e:	6839      	ldr	r1, [r7, #0]
 800d150:	4618      	mov	r0, r3
 800d152:	f7ff ffe3 	bl	800d11c <_Z10StringFromPKc>
 800d156:	2401      	movs	r4, #1
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f107 0208 	add.w	r2, r7, #8
 800d15e:	4611      	mov	r1, r2
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff fc3f 	bl	800c9e4 <_ZNK12SimpleString9printableEv>
 800d166:	e004      	b.n	800d172 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4908      	ldr	r1, [pc, #32]	; (800d18c <_Z25PrintableStringFromOrNullPKc+0x54>)
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7ff ffd5 	bl	800d11c <_Z10StringFromPKc>
 800d172:	2c00      	cmp	r4, #0
 800d174:	d004      	beq.n	800d180 <_Z25PrintableStringFromOrNullPKc+0x48>
 800d176:	f107 0308 	add.w	r3, r7, #8
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7ff fd41 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d180:	bf00      	nop
}
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	3714      	adds	r7, #20
 800d186:	46bd      	mov	sp, r7
 800d188:	bd90      	pop	{r4, r7, pc}
 800d18a:	bf00      	nop
 800d18c:	08023d98 	.word	0x08023d98

0800d190 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	683a      	ldr	r2, [r7, #0]
 800d19e:	4904      	ldr	r1, [pc, #16]	; (800d1b0 <_Z10StringFromi+0x20>)
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 fa35 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	08023da0 	.word	0x08023da0

0800d1b4 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	683a      	ldr	r2, [r7, #0]
 800d1c2:	4904      	ldr	r1, [pc, #16]	; (800d1d4 <_Z10StringFroml+0x20>)
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 fa23 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	08023da4 	.word	0x08023da4

0800d1d8 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800d1e2:	f107 0308 	add.w	r3, r7, #8
 800d1e6:	4910      	ldr	r1, [pc, #64]	; (800d228 <_Z10StringFromPKv+0x50>)
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7ff f952 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800d1ee:	f107 0310 	add.w	r3, r7, #16
 800d1f2:	6839      	ldr	r1, [r7, #0]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 f9a1 	bl	800d53c <_Z13HexStringFromPKv>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f107 0210 	add.w	r2, r7, #16
 800d200:	f107 0108 	add.w	r1, r7, #8
 800d204:	4618      	mov	r0, r3
 800d206:	f7ff fd5e 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800d20a:	f107 0310 	add.w	r3, r7, #16
 800d20e:	4618      	mov	r0, r3
 800d210:	f7ff fcf7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d214:	f107 0308 	add.w	r3, r7, #8
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff fcf2 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d21e:	bf00      	nop
}
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	3718      	adds	r7, #24
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	08023da8 	.word	0x08023da8

0800d22c <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b086      	sub	sp, #24
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800d236:	f107 0308 	add.w	r3, r7, #8
 800d23a:	4910      	ldr	r1, [pc, #64]	; (800d27c <_Z10StringFromPFvvE+0x50>)
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7ff f928 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800d242:	f107 0310 	add.w	r3, r7, #16
 800d246:	6839      	ldr	r1, [r7, #0]
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 f98b 	bl	800d564 <_Z13HexStringFromPFvvE>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f107 0210 	add.w	r2, r7, #16
 800d254:	f107 0108 	add.w	r1, r7, #8
 800d258:	4618      	mov	r0, r3
 800d25a:	f7ff fd34 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800d25e:	f107 0310 	add.w	r3, r7, #16
 800d262:	4618      	mov	r0, r3
 800d264:	f7ff fccd 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d268:	f107 0308 	add.w	r3, r7, #8
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7ff fcc8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d272:	bf00      	nop
}
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	3718      	adds	r7, #24
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	08023da8 	.word	0x08023da8

0800d280 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	4904      	ldr	r1, [pc, #16]	; (800d2a0 <_Z13HexStringFroml+0x20>)
 800d290:	4618      	mov	r0, r3
 800d292:	f000 f9bd 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	08023dac 	.word	0x08023dac

0800d2a4 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	683a      	ldr	r2, [r7, #0]
 800d2b2:	4904      	ldr	r1, [pc, #16]	; (800d2c4 <_Z13HexStringFromi+0x20>)
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f000 f9ab 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	08023db0 	.word	0x08023db0

0800d2c8 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800d2d4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	4912      	ldr	r1, [pc, #72]	; (800d324 <_Z13HexStringFroma+0x5c>)
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 f997 	bl	800d610 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800d2e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	da16      	bge.n	800d318 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff fc68 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800d2f0:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	1e9a      	subs	r2, r3, #2
 800d2f6:	f107 030c 	add.w	r3, r7, #12
 800d2fa:	6879      	ldr	r1, [r7, #4]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7ff fdd3 	bl	800cea8 <_ZNK12SimpleString9subStringEj>
 800d302:	f107 030c 	add.w	r3, r7, #12
 800d306:	4619      	mov	r1, r3
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff f92e 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800d30e:	f107 030c 	add.w	r3, r7, #12
 800d312:	4618      	mov	r0, r3
 800d314:	f7ff fc75 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800d318:	bf00      	nop
}
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	3718      	adds	r7, #24
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	08023db0 	.word	0x08023db0

0800d328 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	683a      	ldr	r2, [r7, #0]
 800d336:	4904      	ldr	r1, [pc, #16]	; (800d348 <_Z13HexStringFromm+0x20>)
 800d338:	4618      	mov	r0, r3
 800d33a:	f000 f969 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	08023dac 	.word	0x08023dac

0800d34c <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	683a      	ldr	r2, [r7, #0]
 800d35a:	4904      	ldr	r1, [pc, #16]	; (800d36c <_Z13HexStringFromj+0x20>)
 800d35c:	4618      	mov	r0, r3
 800d35e:	f000 f957 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	3708      	adds	r7, #8
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	08023db0 	.word	0x08023db0

0800d370 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d37a:	f107 0308 	add.w	r3, r7, #8
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	4618      	mov	r0, r3
 800d382:	f7ff ff8f 	bl	800d2a4 <_Z13HexStringFromi>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f107 0208 	add.w	r2, r7, #8
 800d38c:	4611      	mov	r1, r2
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 f87e 	bl	800d490 <_Z26BracketsFormattedHexString12SimpleString>
 800d394:	f107 0308 	add.w	r3, r7, #8
 800d398:	4618      	mov	r0, r3
 800d39a:	f7ff fc32 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d39e:	bf00      	nop
}
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d3b2:	f107 0308 	add.w	r3, r7, #8
 800d3b6:	6839      	ldr	r1, [r7, #0]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff ffc7 	bl	800d34c <_Z13HexStringFromj>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f107 0208 	add.w	r2, r7, #8
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f000 f862 	bl	800d490 <_Z26BracketsFormattedHexString12SimpleString>
 800d3cc:	f107 0308 	add.w	r3, r7, #8
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff fc16 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d3d6:	bf00      	nop
}
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d3ea:	f107 0308 	add.w	r3, r7, #8
 800d3ee:	6839      	ldr	r1, [r7, #0]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7ff ff45 	bl	800d280 <_Z13HexStringFroml>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f107 0208 	add.w	r2, r7, #8
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 f846 	bl	800d490 <_Z26BracketsFormattedHexString12SimpleString>
 800d404:	f107 0308 	add.w	r3, r7, #8
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff fbfa 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d40e:	bf00      	nop
}
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d422:	f107 0308 	add.w	r3, r7, #8
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7ff ff7d 	bl	800d328 <_Z13HexStringFromm>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f107 0208 	add.w	r2, r7, #8
 800d434:	4611      	mov	r1, r2
 800d436:	4618      	mov	r0, r3
 800d438:	f000 f82a 	bl	800d490 <_Z26BracketsFormattedHexString12SimpleString>
 800d43c:	f107 0308 	add.w	r3, r7, #8
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff fbde 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d446:	bf00      	nop
}
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	460b      	mov	r3, r1
 800d45a:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d45c:	f107 0308 	add.w	r3, r7, #8
 800d460:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d464:	4611      	mov	r1, r2
 800d466:	4618      	mov	r0, r3
 800d468:	f7ff ff2e 	bl	800d2c8 <_Z13HexStringFroma>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f107 0208 	add.w	r2, r7, #8
 800d472:	4611      	mov	r1, r2
 800d474:	4618      	mov	r0, r3
 800d476:	f000 f80b 	bl	800d490 <_Z26BracketsFormattedHexString12SimpleString>
 800d47a:	f107 0308 	add.w	r3, r7, #8
 800d47e:	4618      	mov	r0, r3
 800d480:	f7ff fbbf 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d484:	bf00      	nop
}
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
	...

0800d490 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b088      	sub	sp, #32
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800d49a:	f107 0310 	add.w	r3, r7, #16
 800d49e:	4917      	ldr	r1, [pc, #92]	; (800d4fc <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe fff6 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800d4a6:	f107 0308 	add.w	r3, r7, #8
 800d4aa:	f107 0110 	add.w	r1, r7, #16
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7ff fc08 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800d4b6:	f107 0318 	add.w	r3, r7, #24
 800d4ba:	4911      	ldr	r1, [pc, #68]	; (800d500 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fe ffe8 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f107 0218 	add.w	r2, r7, #24
 800d4c8:	f107 0108 	add.w	r1, r7, #8
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fbfa 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800d4d2:	f107 0318 	add.w	r3, r7, #24
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7ff fb93 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d4dc:	f107 0308 	add.w	r3, r7, #8
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7ff fb8e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d4e6:	f107 0310 	add.w	r3, r7, #16
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7ff fb89 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800d4f0:	bf00      	nop
}
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	3720      	adds	r7, #32
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	08023db4 	.word	0x08023db4
 800d500:	08023db8 	.word	0x08023db8

0800d504 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800d50c:	1d3b      	adds	r3, r7, #4
 800d50e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3714      	adds	r7, #20
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800d528:	1d3b      	adds	r3, r7, #4
 800d52a:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3714      	adds	r7, #20
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800d546:	6838      	ldr	r0, [r7, #0]
 800d548:	f7ff ffdc 	bl	800d504 <_ZL25convertPointerToLongValuePKv>
 800d54c:	4602      	mov	r2, r0
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4903      	ldr	r1, [pc, #12]	; (800d560 <_Z13HexStringFromPKv+0x24>)
 800d552:	4618      	mov	r0, r3
 800d554:	f000 f85c 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	08023dac 	.word	0x08023dac

0800d564 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800d56e:	6838      	ldr	r0, [r7, #0]
 800d570:	f7ff ffd6 	bl	800d520 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800d574:	4602      	mov	r2, r0
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	4903      	ldr	r1, [pc, #12]	; (800d588 <_Z13HexStringFromPFvvE+0x24>)
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 f848 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	08023dac 	.word	0x08023dac

0800d58c <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b086      	sub	sp, #24
 800d590:	af02      	add	r7, sp, #8
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	ed87 0b00 	vstr	d0, [r7]
 800d598:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800d59a:	4b18      	ldr	r3, [pc, #96]	; (800d5fc <_Z10StringFromdi+0x70>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	ed97 0b00 	vldr	d0, [r7]
 800d5a2:	4798      	blx	r3
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	bf14      	ite	ne
 800d5aa:	2301      	movne	r3, #1
 800d5ac:	2300      	moveq	r3, #0
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d004      	beq.n	800d5be <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800d5b4:	4912      	ldr	r1, [pc, #72]	; (800d600 <_Z10StringFromdi+0x74>)
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	f7fe ff6b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800d5bc:	e01a      	b.n	800d5f4 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800d5be:	4b11      	ldr	r3, [pc, #68]	; (800d604 <_Z10StringFromdi+0x78>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	ed97 0b00 	vldr	d0, [r7]
 800d5c6:	4798      	blx	r3
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	bf14      	ite	ne
 800d5ce:	2301      	movne	r3, #1
 800d5d0:	2300      	moveq	r3, #0
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d004      	beq.n	800d5e2 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800d5d8:	490b      	ldr	r1, [pc, #44]	; (800d608 <_Z10StringFromdi+0x7c>)
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f7fe ff59 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800d5e0:	e008      	b.n	800d5f4 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5e8:	e9cd 2300 	strd	r2, r3, [sp]
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	4907      	ldr	r1, [pc, #28]	; (800d60c <_Z10StringFromdi+0x80>)
 800d5f0:	f000 f80e 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	200000e8 	.word	0x200000e8
 800d600:	08023dec 	.word	0x08023dec
 800d604:	200000ec 	.word	0x200000ec
 800d608:	08023e00 	.word	0x08023e00
 800d60c:	08023e10 	.word	0x08023e10

0800d610 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800d610:	b40e      	push	{r1, r2, r3}
 800d612:	b580      	push	{r7, lr}
 800d614:	b087      	sub	sp, #28
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800d61a:	4910      	ldr	r1, [pc, #64]	; (800d65c <_Z16StringFromFormatPKcz+0x4c>)
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f7fe ff38 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800d622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d626:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800d628:	f107 0310 	add.w	r3, r7, #16
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d630:	4618      	mov	r0, r3
 800d632:	f000 f839 	bl	800d6a8 <_Z17VStringFromFormatPKcSt9__va_list>
 800d636:	f107 0310 	add.w	r3, r7, #16
 800d63a:	4619      	mov	r1, r3
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7fe ff94 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800d642:	f107 0310 	add.w	r3, r7, #16
 800d646:	4618      	mov	r0, r3
 800d648:	f7ff fadb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800d64c:	bf00      	nop
}
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	371c      	adds	r7, #28
 800d652:	46bd      	mov	sp, r7
 800d654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d658:	b003      	add	sp, #12
 800d65a:	4770      	bx	lr
 800d65c:	08023d78 	.word	0x08023d78

0800d660 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	683a      	ldr	r2, [r7, #0]
 800d66e:	4904      	ldr	r1, [pc, #16]	; (800d680 <_Z10StringFromj+0x20>)
 800d670:	4618      	mov	r0, r3
 800d672:	f7ff ffcd 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	08023e1c 	.word	0x08023e1c

0800d684 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	683a      	ldr	r2, [r7, #0]
 800d692:	4904      	ldr	r1, [pc, #16]	; (800d6a4 <_Z10StringFromm+0x20>)
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff ffbb 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	3708      	adds	r7, #8
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	08023e20 	.word	0x08023e20

0800d6a8 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800d6a8:	b590      	push	{r4, r7, lr}
 800d6aa:	b0a7      	sub	sp, #156	; 0x9c
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800d6b8:	492e      	ldr	r1, [pc, #184]	; (800d774 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f7fe fee9 	bl	800c492 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800d6c0:	4b2d      	ldr	r3, [pc, #180]	; (800d778 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800d6c2:	681c      	ldr	r4, [r3, #0]
 800d6c4:	f107 0014 	add.w	r0, r7, #20
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	2164      	movs	r1, #100	; 0x64
 800d6ce:	47a0      	blx	r4
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800d6d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d6da:	2b63      	cmp	r3, #99	; 0x63
 800d6dc:	d813      	bhi.n	800d706 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800d6de:	f107 0214 	add.w	r2, r7, #20
 800d6e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d6e6:	4611      	mov	r1, r2
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fe fed2 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800d6ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7fe ff38 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800d6fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7ff fa7f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800d704:	e031      	b.n	800d76a <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800d706:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d70a:	3301      	adds	r3, #1
 800d70c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800d710:	f240 32c3 	movw	r2, #963	; 0x3c3
 800d714:	4919      	ldr	r1, [pc, #100]	; (800d77c <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800d716:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d71a:	f7fe fc3f 	bl	800bf9c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d71e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800d722:	4b15      	ldr	r3, [pc, #84]	; (800d778 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800d724:	681c      	ldr	r4, [r3, #0]
 800d726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d728:	68ba      	ldr	r2, [r7, #8]
 800d72a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d72e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d732:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800d734:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d738:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7fe fea8 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800d742:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d746:	4619      	mov	r1, r3
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f7fe ff0e 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800d74e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d752:	4618      	mov	r0, r3
 800d754:	f7ff fa55 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800d758:	f240 33c7 	movw	r3, #967	; 0x3c7
 800d75c:	4a07      	ldr	r2, [pc, #28]	; (800d77c <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800d75e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d762:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d766:	f7fe fc2d 	bl	800bfc4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800d76a:	bf00      	nop
}
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	379c      	adds	r7, #156	; 0x9c
 800d770:	46bd      	mov	sp, r7
 800d772:	bd90      	pop	{r4, r7, pc}
 800d774:	08023d78 	.word	0x08023d78
 800d778:	200000b0 	.word	0x200000b0
 800d77c:	08023cb8 	.word	0x08023cb8

0800d780 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b08a      	sub	sp, #40	; 0x28
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800d78c:	491f      	ldr	r1, [pc, #124]	; (800d80c <_Z16StringFromBinaryPKhj+0x8c>)
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	f7fe fe7f 	bl	800c492 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800d794:	2300      	movs	r3, #0
 800d796:	627b      	str	r3, [r7, #36]	; 0x24
 800d798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d219      	bcs.n	800d7d4 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800d7a0:	68ba      	ldr	r2, [r7, #8]
 800d7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a4:	4413      	add	r3, r2
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	f107 0314 	add.w	r3, r7, #20
 800d7ae:	4918      	ldr	r1, [pc, #96]	; (800d810 <_Z16StringFromBinaryPKhj+0x90>)
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7ff ff2d 	bl	800d610 <_Z16StringFromFormatPKcz>
 800d7b6:	f107 0314 	add.w	r3, r7, #20
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f7ff fa9d 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800d7c2:	f107 0314 	add.w	r3, r7, #20
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7ff fa1b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d7d2:	e7e1      	b.n	800d798 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f7ff f9f3 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	f107 001c 	add.w	r0, r7, #28
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	68f9      	ldr	r1, [r7, #12]
 800d7e6:	f7ff fb15 	bl	800ce14 <_ZNK12SimpleString9subStringEjj>
 800d7ea:	f107 031c 	add.w	r3, r7, #28
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f7fe feba 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800d7f6:	f107 031c 	add.w	r3, r7, #28
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7ff fa01 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    return result;
 800d800:	bf00      	nop
}
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	3728      	adds	r7, #40	; 0x28
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	08023d78 	.word	0x08023d78
 800d810:	08023e24 	.word	0x08023e24

0800d814 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d006      	beq.n	800d834 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	68b9      	ldr	r1, [r7, #8]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7ff ffa7 	bl	800d780 <_Z16StringFromBinaryPKhj>
 800d832:	e004      	b.n	800d83e <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	4904      	ldr	r1, [pc, #16]	; (800d848 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800d838:	4618      	mov	r0, r3
 800d83a:	f7ff fc6f 	bl	800d11c <_Z10StringFromPKc>
}
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	08023d98 	.word	0x08023d98

0800d84c <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b088      	sub	sp, #32
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	4913      	ldr	r1, [pc, #76]	; (800d8ac <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800d85e:	4618      	mov	r0, r3
 800d860:	f7ff fed6 	bl	800d610 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b80      	cmp	r3, #128	; 0x80
 800d868:	bf28      	it	cs
 800d86a:	2380      	movcs	r3, #128	; 0x80
 800d86c:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800d86e:	f107 0314 	add.w	r3, r7, #20
 800d872:	69fa      	ldr	r2, [r7, #28]
 800d874:	68b9      	ldr	r1, [r7, #8]
 800d876:	4618      	mov	r0, r3
 800d878:	f7ff ffcc 	bl	800d814 <_Z22StringFromBinaryOrNullPKhj>
 800d87c:	f107 0314 	add.w	r3, r7, #20
 800d880:	4619      	mov	r1, r3
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	f7ff fa3a 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800d888:	f107 0314 	add.w	r3, r7, #20
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7ff f9b8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	429a      	cmp	r2, r3
 800d898:	d903      	bls.n	800d8a2 <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800d89a:	4905      	ldr	r1, [pc, #20]	; (800d8b0 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f7ff fa3f 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800d8a2:	bf00      	nop
}
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	3720      	adds	r7, #32
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	08023e2c 	.word	0x08023e2c
 800d8b0:	08023e48 	.word	0x08023e48

0800d8b4 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d006      	beq.n	800d8d4 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	68b9      	ldr	r1, [r7, #8]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7ff ffbd 	bl	800d84c <_Z24StringFromBinaryWithSizePKhj>
 800d8d2:	e004      	b.n	800d8de <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	4904      	ldr	r1, [pc, #16]	; (800d8e8 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7ff fc1f 	bl	800d11c <_Z10StringFromPKc>
}
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	08023d98 	.word	0x08023d98

0800d8ec <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b088      	sub	sp, #32
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	607a      	str	r2, [r7, #4]
 800d8f8:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800d8fa:	4925      	ldr	r1, [pc, #148]	; (800d990 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f7fe fdc8 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	2b04      	cmp	r3, #4
 800d906:	d802      	bhi.n	800d90e <_Z20StringFromMaskedBitsmmj+0x22>
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	00db      	lsls	r3, r3, #3
 800d90c:	e000      	b.n	800d910 <_Z20StringFromMaskedBitsmmj+0x24>
 800d90e:	2320      	movs	r3, #32
 800d910:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	3b01      	subs	r3, #1
 800d916:	2201      	movs	r2, #1
 800d918:	fa02 f303 	lsl.w	r3, r2, r3
 800d91c:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800d91e:	2300      	movs	r3, #0
 800d920:	61fb      	str	r3, [r7, #28]
 800d922:	69fa      	ldr	r2, [r7, #28]
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	429a      	cmp	r2, r3
 800d928:	d22d      	bcs.n	800d986 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	4013      	ands	r3, r2
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00c      	beq.n	800d94e <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	4013      	ands	r3, r2
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d001      	beq.n	800d942 <_Z20StringFromMaskedBitsmmj+0x56>
 800d93e:	4b15      	ldr	r3, [pc, #84]	; (800d994 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800d940:	e000      	b.n	800d944 <_Z20StringFromMaskedBitsmmj+0x58>
 800d942:	4b15      	ldr	r3, [pc, #84]	; (800d998 <_Z20StringFromMaskedBitsmmj+0xac>)
 800d944:	4619      	mov	r1, r3
 800d946:	68f8      	ldr	r0, [r7, #12]
 800d948:	f7ff f9ea 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
 800d94c:	e003      	b.n	800d956 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800d94e:	4913      	ldr	r1, [pc, #76]	; (800d99c <_Z20StringFromMaskedBitsmmj+0xb0>)
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7ff f9e5 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	f003 0307 	and.w	r3, r3, #7
 800d95c:	2b07      	cmp	r3, #7
 800d95e:	d108      	bne.n	800d972 <_Z20StringFromMaskedBitsmmj+0x86>
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	3b01      	subs	r3, #1
 800d964:	69fa      	ldr	r2, [r7, #28]
 800d966:	429a      	cmp	r2, r3
 800d968:	d003      	beq.n	800d972 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800d96a:	490d      	ldr	r1, [pc, #52]	; (800d9a0 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f7ff f9d7 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	005b      	lsls	r3, r3, #1
 800d976:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	3301      	adds	r3, #1
 800d982:	61fb      	str	r3, [r7, #28]
 800d984:	e7cd      	b.n	800d922 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800d986:	bf00      	nop
}
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	3720      	adds	r7, #32
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	08023d78 	.word	0x08023d78
 800d994:	08023e50 	.word	0x08023e50
 800d998:	08023e54 	.word	0x08023e54
 800d99c:	08023e58 	.word	0x08023e58
 800d9a0:	08023e5c 	.word	0x08023e5c

0800d9a4 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800d9ae:	683a      	ldr	r2, [r7, #0]
 800d9b0:	4b18      	ldr	r3, [pc, #96]	; (800da14 <_Z23StringFromOrdinalNumberj+0x70>)
 800d9b2:	fba3 1302 	umull	r1, r3, r3, r2
 800d9b6:	08d9      	lsrs	r1, r3, #3
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	440b      	add	r3, r1
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	2b0a      	cmp	r3, #10
 800d9c8:	d905      	bls.n	800d9d6 <_Z23StringFromOrdinalNumberj+0x32>
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b0d      	cmp	r3, #13
 800d9ce:	d802      	bhi.n	800d9d6 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800d9d0:	4b11      	ldr	r3, [pc, #68]	; (800da18 <_Z23StringFromOrdinalNumberj+0x74>)
 800d9d2:	60fb      	str	r3, [r7, #12]
 800d9d4:	e013      	b.n	800d9fe <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	2b03      	cmp	r3, #3
 800d9da:	d102      	bne.n	800d9e2 <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800d9dc:	4b0f      	ldr	r3, [pc, #60]	; (800da1c <_Z23StringFromOrdinalNumberj+0x78>)
 800d9de:	60fb      	str	r3, [r7, #12]
 800d9e0:	e00d      	b.n	800d9fe <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	2b02      	cmp	r3, #2
 800d9e6:	d102      	bne.n	800d9ee <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800d9e8:	4b0d      	ldr	r3, [pc, #52]	; (800da20 <_Z23StringFromOrdinalNumberj+0x7c>)
 800d9ea:	60fb      	str	r3, [r7, #12]
 800d9ec:	e007      	b.n	800d9fe <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d102      	bne.n	800d9fa <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800d9f4:	4b0b      	ldr	r3, [pc, #44]	; (800da24 <_Z23StringFromOrdinalNumberj+0x80>)
 800d9f6:	60fb      	str	r3, [r7, #12]
 800d9f8:	e001      	b.n	800d9fe <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800d9fa:	4b07      	ldr	r3, [pc, #28]	; (800da18 <_Z23StringFromOrdinalNumberj+0x74>)
 800d9fc:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	4908      	ldr	r1, [pc, #32]	; (800da28 <_Z23StringFromOrdinalNumberj+0x84>)
 800da06:	f7ff fe03 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	cccccccd 	.word	0xcccccccd
 800da18:	08023e60 	.word	0x08023e60
 800da1c:	08023e64 	.word	0x08023e64
 800da20:	08023e68 	.word	0x08023e68
 800da24:	08023e6c 	.word	0x08023e6c
 800da28:	08023e70 	.word	0x08023e70

0800da2c <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	3304      	adds	r3, #4
 800da38:	4907      	ldr	r1, [pc, #28]	; (800da58 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fe fd29 	bl	800c492 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	60da      	str	r2, [r3, #12]
}
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4618      	mov	r0, r3
 800da50:	3708      	adds	r7, #8
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	08023d78 	.word	0x08023d78

0800da5c <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800da5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d01e      	beq.n	800daac <_ZN22SimpleStringCollection8allocateEj+0x50>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	3b04      	subs	r3, #4
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	00db      	lsls	r3, r3, #3
 800da7c:	18d4      	adds	r4, r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	429c      	cmp	r4, r3
 800da84:	d004      	beq.n	800da90 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800da86:	3c08      	subs	r4, #8
 800da88:	4620      	mov	r0, r4
 800da8a:	f7ff f8ba 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800da8e:	e7f6      	b.n	800da7e <_ZN22SimpleStringCollection8allocateEj+0x22>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f1a3 0208 	sub.w	r2, r3, #8
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3b04      	subs	r3, #4
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3301      	adds	r3, #1
 800daa2:	00db      	lsls	r3, r3, #3
 800daa4:	4619      	mov	r1, r3
 800daa6:	4610      	mov	r0, r2
 800daa8:	f7fc f976 	bl	8009d98 <_ZdaPvj>

    size_ = _size;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	683a      	ldr	r2, [r7, #0]
 800dab0:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	68dc      	ldr	r4, [r3, #12]
 800dab6:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800daba:	d202      	bcs.n	800dac2 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800dabc:	1c63      	adds	r3, r4, #1
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	e001      	b.n	800dac6 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800dac2:	f04f 33ff 	mov.w	r3, #4294967295
 800dac6:	f240 4227 	movw	r2, #1063	; 0x427
 800daca:	4910      	ldr	r1, [pc, #64]	; (800db0c <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fc f941 	bl	8009d54 <_ZnajPKci>
 800dad2:	4605      	mov	r5, r0
 800dad4:	1d2b      	adds	r3, r5, #4
 800dad6:	3b04      	subs	r3, #4
 800dad8:	2208      	movs	r2, #8
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	1d2b      	adds	r3, r5, #4
 800dade:	601c      	str	r4, [r3, #0]
 800dae0:	f105 0308 	add.w	r3, r5, #8
 800dae4:	1e62      	subs	r2, r4, #1
 800dae6:	4614      	mov	r4, r2
 800dae8:	461e      	mov	r6, r3
 800daea:	2c00      	cmp	r4, #0
 800daec:	db06      	blt.n	800dafc <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800daee:	4908      	ldr	r1, [pc, #32]	; (800db10 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800daf0:	4630      	mov	r0, r6
 800daf2:	f7fe fcce 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800daf6:	3608      	adds	r6, #8
 800daf8:	3c01      	subs	r4, #1
 800dafa:	e7f6      	b.n	800daea <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800dafc:	f105 0208 	add.w	r2, r5, #8
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	601a      	str	r2, [r3, #0]
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db0c:	08023cb8 	.word	0x08023cb8
 800db10:	08023d78 	.word	0x08023d78

0800db14 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800db14:	b590      	push	{r4, r7, lr}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d01e      	beq.n	800db62 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	3b04      	subs	r3, #4
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	00db      	lsls	r3, r3, #3
 800db32:	18d4      	adds	r4, r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	429c      	cmp	r4, r3
 800db3a:	d004      	beq.n	800db46 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800db3c:	3c08      	subs	r4, #8
 800db3e:	4620      	mov	r0, r4
 800db40:	f7ff f85f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800db44:	e7f6      	b.n	800db34 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f1a3 0208 	sub.w	r2, r3, #8
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	3b04      	subs	r3, #4
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	3301      	adds	r3, #1
 800db58:	00db      	lsls	r3, r3, #3
 800db5a:	4619      	mov	r1, r3
 800db5c:	4610      	mov	r0, r2
 800db5e:	f7fc f91b 	bl	8009d98 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	3304      	adds	r3, #4
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff f84b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	4618      	mov	r0, r3
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	bd90      	pop	{r4, r7, pc}

0800db76 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800db76:	b480      	push	{r7}
 800db78:	b083      	sub	sp, #12
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
    return size_;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	68db      	ldr	r3, [r3, #12]
}
 800db82:	4618      	mov	r0, r3
 800db84:	370c      	adds	r7, #12
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
	...

0800db90 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800db90:	b590      	push	{r4, r7, lr}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d315      	bcc.n	800dbd0 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	1d1c      	adds	r4, r3, #4
 800dba8:	f107 0308 	add.w	r3, r7, #8
 800dbac:	490d      	ldr	r1, [pc, #52]	; (800dbe4 <_ZN22SimpleStringCollectionixEj+0x54>)
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fe fc6f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800dbb4:	f107 0308 	add.w	r3, r7, #8
 800dbb8:	4619      	mov	r1, r3
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f7fe fcd5 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800dbc0:	f107 0308 	add.w	r3, r7, #8
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff f81c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        return empty_;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	e004      	b.n	800dbda <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	00db      	lsls	r3, r3, #3
 800dbd8:	4413      	add	r3, r2
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3714      	adds	r7, #20
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd90      	pop	{r4, r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	08023d78 	.word	0x08023d78

0800dbe8 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fa fb88 	bl	8008308 <_ZN17ConsoleTestOutputC1Ev>
 800dbf8:	4a08      	ldr	r2, [pc, #32]	; (800dc1c <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	601a      	str	r2, [r3, #0]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	611a      	str	r2, [r3, #16]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	3314      	adds	r3, #20
 800dc08:	4905      	ldr	r1, [pc, #20]	; (800dc20 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe fc41 	bl	800c492 <_ZN12SimpleStringC1EPKc>
{
}
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	4618      	mov	r0, r3
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	08027bf8 	.word	0x08027bf8
 800dc20:	08023e78 	.word	0x08023e78

0800dc24 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	4a08      	ldr	r2, [pc, #32]	; (800dc50 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	601a      	str	r2, [r3, #0]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	3314      	adds	r3, #20
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fe ffe3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7fa fb74 	bl	800832c <_ZN17ConsoleTestOutputD1Ev>
{
}
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	4618      	mov	r0, r3
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	08027bf8 	.word	0x08027bf8

0800dc54 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
}
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f7ff ffe1 	bl	800dc24 <_ZN18TeamCityTestOutputD1Ev>
 800dc62:	211c      	movs	r1, #28
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7fc f865 	bl	8009d34 <_ZdlPvj>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b086      	sub	sp, #24
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	332c      	adds	r3, #44	; 0x2c
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	492b      	ldr	r1, [pc, #172]	; (800dd38 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800dc8a:	4610      	mov	r0, r2
 800dc8c:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800dc8e:	f107 0308 	add.w	r3, r7, #8
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f004 fdf7 	bl	8012888 <_ZNK10UtestShell7getNameEv>
 800dc9a:	f107 0308 	add.w	r3, r7, #8
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe ff82 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800dca4:	4603      	mov	r3, r0
 800dca6:	4619      	mov	r1, r3
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 f919 	bl	800dee0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800dcae:	f107 0308 	add.w	r3, r7, #8
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fe ffa5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	332c      	adds	r3, #44	; 0x2c
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	491e      	ldr	r1, [pc, #120]	; (800dd3c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800dcc4:	4610      	mov	r0, r2
 800dcc6:	4798      	blx	r3
    if (!test.willRun()) {
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	3318      	adds	r3, #24
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6838      	ldr	r0, [r7, #0]
 800dcd2:	4798      	blx	r3
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	f083 0301 	eor.w	r3, r3, #1
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d024      	beq.n	800dd2a <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	332c      	adds	r3, #44	; 0x2c
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4915      	ldr	r1, [pc, #84]	; (800dd40 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800dcec:	4610      	mov	r0, r2
 800dcee:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800dcf0:	f107 0310 	add.w	r3, r7, #16
 800dcf4:	6839      	ldr	r1, [r7, #0]
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f004 fdc6 	bl	8012888 <_ZNK10UtestShell7getNameEv>
 800dcfc:	f107 0310 	add.w	r3, r7, #16
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fe ff51 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800dd06:	4603      	mov	r3, r0
 800dd08:	4619      	mov	r1, r3
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f8e8 	bl	800dee0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800dd10:	f107 0310 	add.w	r3, r7, #16
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7fe ff74 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        print("']\n");
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	332c      	adds	r3, #44	; 0x2c
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4905      	ldr	r1, [pc, #20]	; (800dd3c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800dd26:	4610      	mov	r0, r2
 800dd28:	4798      	blx	r3
    }
    currtest_ = &test;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	683a      	ldr	r2, [r7, #0]
 800dd2e:	611a      	str	r2, [r3, #16]
}
 800dd30:	bf00      	nop
 800dd32:	3718      	adds	r7, #24
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	08023e7c 	.word	0x08023e7c
 800dd3c:	08023e9c 	.word	0x08023e9c
 800dd40:	08023ea0 	.word	0x08023ea0

0800dd44 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800dd44:	b5b0      	push	{r4, r5, r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d03b      	beq.n	800ddce <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	332c      	adds	r3, #44	; 0x2c
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	491d      	ldr	r1, [pc, #116]	; (800ddd8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800dd62:	4610      	mov	r0, r2
 800dd64:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	691a      	ldr	r2, [r3, #16]
 800dd6a:	f107 0308 	add.w	r3, r7, #8
 800dd6e:	4611      	mov	r1, r2
 800dd70:	4618      	mov	r0, r3
 800dd72:	f004 fd89 	bl	8012888 <_ZNK10UtestShell7getNameEv>
 800dd76:	f107 0308 	add.w	r3, r7, #8
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7fe ff14 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800dd80:	4603      	mov	r3, r0
 800dd82:	4619      	mov	r1, r3
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 f8ab 	bl	800dee0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800dd8a:	f107 0308 	add.w	r3, r7, #8
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fe ff37 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	332c      	adds	r3, #44	; 0x2c
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	490f      	ldr	r1, [pc, #60]	; (800dddc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800dda0:	4610      	mov	r0, r2
 800dda2:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800dda4:	687d      	ldr	r5, [r7, #4]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	3334      	adds	r3, #52	; 0x34
 800ddac:	681c      	ldr	r4, [r3, #0]
 800ddae:	6838      	ldr	r0, [r7, #0]
 800ddb0:	f004 fa0a 	bl	80121c8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4628      	mov	r0, r5
 800ddba:	47a0      	blx	r4
    print("']\n");
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	332c      	adds	r3, #44	; 0x2c
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4906      	ldr	r1, [pc, #24]	; (800dde0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800ddc8:	4610      	mov	r0, r2
 800ddca:	4798      	blx	r3
 800ddcc:	e000      	b.n	800ddd0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800ddce:	bf00      	nop
}
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bdb0      	pop	{r4, r5, r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	08023ec0 	.word	0x08023ec0
 800dddc:	08023ee0 	.word	0x08023ee0
 800dde0:	08023e9c 	.word	0x08023e9c

0800dde4 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800dde4:	b590      	push	{r4, r7, lr}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f103 0414 	add.w	r4, r3, #20
 800ddf4:	f107 0308 	add.w	r3, r7, #8
 800ddf8:	6839      	ldr	r1, [r7, #0]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f004 fd53 	bl	80128a6 <_ZNK10UtestShell8getGroupEv>
 800de00:	f107 0308 	add.w	r3, r7, #8
 800de04:	4619      	mov	r1, r3
 800de06:	4620      	mov	r0, r4
 800de08:	f7fe fbaf 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800de0c:	f107 0308 	add.w	r3, r7, #8
 800de10:	4618      	mov	r0, r3
 800de12:	f7fe fef6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	332c      	adds	r3, #44	; 0x2c
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	490c      	ldr	r1, [pc, #48]	; (800de54 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800de22:	4610      	mov	r0, r2
 800de24:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	3314      	adds	r3, #20
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fe febc 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800de30:	4603      	mov	r3, r0
 800de32:	4619      	mov	r1, r3
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 f853 	bl	800dee0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	332c      	adds	r3, #44	; 0x2c
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4904      	ldr	r1, [pc, #16]	; (800de58 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800de46:	4610      	mov	r0, r2
 800de48:	4798      	blx	r3
}
 800de4a:	bf00      	nop
 800de4c:	3714      	adds	r7, #20
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd90      	pop	{r4, r7, pc}
 800de52:	bf00      	nop
 800de54:	08023ef0 	.word	0x08023ef0
 800de58:	08023e9c 	.word	0x08023e9c

0800de5c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800de5c:	b590      	push	{r4, r7, lr}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f103 0414 	add.w	r4, r3, #20
 800de6c:	f107 0308 	add.w	r3, r7, #8
 800de70:	4918      	ldr	r1, [pc, #96]	; (800ded4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800de72:	4618      	mov	r0, r3
 800de74:	f7fe fb0d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800de78:	f107 0308 	add.w	r3, r7, #8
 800de7c:	4619      	mov	r1, r3
 800de7e:	4620      	mov	r0, r4
 800de80:	f7fe fecb 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 800de84:	4603      	mov	r3, r0
 800de86:	461c      	mov	r4, r3
 800de88:	f107 0308 	add.w	r3, r7, #8
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fe feb8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800de92:	2c00      	cmp	r4, #0
 800de94:	d11a      	bne.n	800decc <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	332c      	adds	r3, #44	; 0x2c
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	490d      	ldr	r1, [pc, #52]	; (800ded8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800dea2:	4610      	mov	r0, r2
 800dea4:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	3314      	adds	r3, #20
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fe fe7c 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800deb0:	4603      	mov	r3, r0
 800deb2:	4619      	mov	r1, r3
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 f813 	bl	800dee0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	332c      	adds	r3, #44	; 0x2c
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4905      	ldr	r1, [pc, #20]	; (800dedc <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800dec6:	4610      	mov	r0, r2
 800dec8:	4798      	blx	r3
 800deca:	e000      	b.n	800dece <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800decc:	bf00      	nop
}
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd90      	pop	{r4, r7, pc}
 800ded4:	08023e78 	.word	0x08023e78
 800ded8:	08023f14 	.word	0x08023f14
 800dedc:	08023e9c 	.word	0x08023e9c

0800dee0 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
    while (*s) {
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d03f      	beq.n	800df72 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	2b27      	cmp	r3, #39	; 0x27
 800def8:	d00b      	beq.n	800df12 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	2b7c      	cmp	r3, #124	; 0x7c
 800df00:	d007      	beq.n	800df12 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	2b5b      	cmp	r3, #91	; 0x5b
 800df08:	d003      	beq.n	800df12 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	2b5d      	cmp	r3, #93	; 0x5d
 800df10:	d107      	bne.n	800df22 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800df12:	237c      	movs	r3, #124	; 0x7c
 800df14:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800df1c:	2300      	movs	r3, #0
 800df1e:	73bb      	strb	r3, [r7, #14]
 800df20:	e01a      	b.n	800df58 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	2b0d      	cmp	r3, #13
 800df28:	d106      	bne.n	800df38 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800df2a:	237c      	movs	r3, #124	; 0x7c
 800df2c:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800df2e:	2372      	movs	r3, #114	; 0x72
 800df30:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800df32:	2300      	movs	r3, #0
 800df34:	73bb      	strb	r3, [r7, #14]
 800df36:	e00f      	b.n	800df58 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b0a      	cmp	r3, #10
 800df3e:	d106      	bne.n	800df4e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800df40:	237c      	movs	r3, #124	; 0x7c
 800df42:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800df44:	236e      	movs	r3, #110	; 0x6e
 800df46:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800df48:	2300      	movs	r3, #0
 800df4a:	73bb      	strb	r3, [r7, #14]
 800df4c:	e004      	b.n	800df58 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800df54:	2300      	movs	r3, #0
 800df56:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	3328      	adds	r3, #40	; 0x28
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f107 010c 	add.w	r1, r7, #12
 800df66:	4610      	mov	r0, r2
 800df68:	4798      	blx	r3
        s++;
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	3301      	adds	r3, #1
 800df6e:	603b      	str	r3, [r7, #0]
    while (*s) {
 800df70:	e7bb      	b.n	800deea <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800df72:	bf00      	nop
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
	...

0800df7c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800df7c:	b5b0      	push	{r4, r5, r7, lr}
 800df7e:	b08a      	sub	sp, #40	; 0x28
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	332c      	adds	r3, #44	; 0x2c
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4968      	ldr	r1, [pc, #416]	; (800e134 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800df92:	4610      	mov	r0, r2
 800df94:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	3310      	adds	r3, #16
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f107 0208 	add.w	r2, r7, #8
 800dfa2:	6839      	ldr	r1, [r7, #0]
 800dfa4:	4610      	mov	r0, r2
 800dfa6:	4798      	blx	r3
 800dfa8:	f107 0308 	add.w	r3, r7, #8
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fe fdfb 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f7ff ff92 	bl	800dee0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800dfbc:	f107 0308 	add.w	r3, r7, #8
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7fe fe1e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    print("' message='");
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	332c      	adds	r3, #44	; 0x2c
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4959      	ldr	r1, [pc, #356]	; (800e138 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800dfd2:	4610      	mov	r0, r2
 800dfd4:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800dfd6:	6838      	ldr	r0, [r7, #0]
 800dfd8:	f000 fa15 	bl	800e406 <_ZNK11TestFailure17isOutsideTestFileEv>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d105      	bne.n	800dfee <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800dfe2:	6838      	ldr	r0, [r7, #0]
 800dfe4:	f000 fa21 	bl	800e42a <_ZNK11TestFailure18isInHelperFunctionEv>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800dfee:	2301      	movs	r3, #1
 800dff0:	e000      	b.n	800dff4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800dff2:	2300      	movs	r3, #0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d042      	beq.n	800e07e <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	332c      	adds	r3, #44	; 0x2c
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	494e      	ldr	r1, [pc, #312]	; (800e13c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800e004:	4610      	mov	r0, r2
 800e006:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800e008:	687d      	ldr	r5, [r7, #4]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	332c      	adds	r3, #44	; 0x2c
 800e010:	681c      	ldr	r4, [r3, #0]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	331c      	adds	r3, #28
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f107 0210 	add.w	r2, r7, #16
 800e01e:	6839      	ldr	r1, [r7, #0]
 800e020:	4610      	mov	r0, r2
 800e022:	4798      	blx	r3
 800e024:	f107 0310 	add.w	r3, r7, #16
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fe fdbd 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800e02e:	4603      	mov	r3, r0
 800e030:	4619      	mov	r1, r3
 800e032:	4628      	mov	r0, r5
 800e034:	47a0      	blx	r4
 800e036:	f107 0310 	add.w	r3, r7, #16
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fe fde1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        print(":");
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	332c      	adds	r3, #44	; 0x2c
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	493d      	ldr	r1, [pc, #244]	; (800e140 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e04c:	4610      	mov	r0, r2
 800e04e:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800e050:	687d      	ldr	r5, [r7, #4]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	3334      	adds	r3, #52	; 0x34
 800e058:	681c      	ldr	r4, [r3, #0]
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	3320      	adds	r3, #32
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6838      	ldr	r0, [r7, #0]
 800e064:	4798      	blx	r3
 800e066:	4603      	mov	r3, r0
 800e068:	4619      	mov	r1, r3
 800e06a:	4628      	mov	r0, r5
 800e06c:	47a0      	blx	r4
        print("): ");
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	332c      	adds	r3, #44	; 0x2c
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4932      	ldr	r1, [pc, #200]	; (800e144 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800e07a:	4610      	mov	r0, r2
 800e07c:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	3308      	adds	r3, #8
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f107 0218 	add.w	r2, r7, #24
 800e08a:	6839      	ldr	r1, [r7, #0]
 800e08c:	4610      	mov	r0, r2
 800e08e:	4798      	blx	r3
 800e090:	f107 0318 	add.w	r3, r7, #24
 800e094:	4618      	mov	r0, r3
 800e096:	f7fe fd87 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800e09a:	4603      	mov	r3, r0
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7ff ff1e 	bl	800dee0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e0a4:	f107 0318 	add.w	r3, r7, #24
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe fdaa 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    print(":");
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	332c      	adds	r3, #44	; 0x2c
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4921      	ldr	r1, [pc, #132]	; (800e140 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800e0be:	687d      	ldr	r5, [r7, #4]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	3334      	adds	r3, #52	; 0x34
 800e0c6:	681c      	ldr	r4, [r3, #0]
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	3314      	adds	r3, #20
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	6838      	ldr	r0, [r7, #0]
 800e0d2:	4798      	blx	r3
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	4628      	mov	r0, r5
 800e0da:	47a0      	blx	r4

    print("' details='");
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	332c      	adds	r3, #44	; 0x2c
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4918      	ldr	r1, [pc, #96]	; (800e148 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800e0e8:	4610      	mov	r0, r2
 800e0ea:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	3318      	adds	r3, #24
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f107 0220 	add.w	r2, r7, #32
 800e0f8:	6839      	ldr	r1, [r7, #0]
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	4798      	blx	r3
 800e0fe:	f107 0320 	add.w	r3, r7, #32
 800e102:	4618      	mov	r0, r3
 800e104:	f7fe fd50 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800e108:	4603      	mov	r3, r0
 800e10a:	4619      	mov	r1, r3
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff fee7 	bl	800dee0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e112:	f107 0320 	add.w	r3, r7, #32
 800e116:	4618      	mov	r0, r3
 800e118:	f7fe fd73 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	332c      	adds	r3, #44	; 0x2c
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4909      	ldr	r1, [pc, #36]	; (800e14c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800e128:	4610      	mov	r0, r2
 800e12a:	4798      	blx	r3
}
 800e12c:	bf00      	nop
 800e12e:	3728      	adds	r7, #40	; 0x28
 800e130:	46bd      	mov	sp, r7
 800e132:	bdb0      	pop	{r4, r5, r7, pc}
 800e134:	08023f38 	.word	0x08023f38
 800e138:	08023f58 	.word	0x08023f58
 800e13c:	08023f64 	.word	0x08023f64
 800e140:	08023f74 	.word	0x08023f74
 800e144:	08023f78 	.word	0x08023f78
 800e148:	08023f7c 	.word	0x08023f7c
 800e14c:	08023e9c 	.word	0x08023e9c

0800e150 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800e15c:	4a1a      	ldr	r2, [pc, #104]	; (800e1c8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	601a      	str	r2, [r3, #0]
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	3314      	adds	r3, #20
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	68fa      	ldr	r2, [r7, #12]
 800e16c:	3204      	adds	r2, #4
 800e16e:	68b9      	ldr	r1, [r7, #8]
 800e170:	4610      	mov	r0, r2
 800e172:	4798      	blx	r3
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	330c      	adds	r3, #12
 800e178:	68b9      	ldr	r1, [r7, #8]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f004 fb84 	bl	8012888 <_ZNK10UtestShell7getNameEv>
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	3314      	adds	r3, #20
 800e184:	68b9      	ldr	r1, [r7, #8]
 800e186:	4618      	mov	r0, r3
 800e188:	f004 fc4f 	bl	8012a2a <_ZNK10UtestShell7getFileEv>
 800e18c:	68b8      	ldr	r0, [r7, #8]
 800e18e:	f004 fc5b 	bl	8012a48 <_ZNK10UtestShell13getLineNumberEv>
 800e192:	4602      	mov	r2, r0
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	61da      	str	r2, [r3, #28]
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	3320      	adds	r3, #32
 800e19c:	68b9      	ldr	r1, [r7, #8]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f004 fc43 	bl	8012a2a <_ZNK10UtestShell7getFileEv>
 800e1a4:	68b8      	ldr	r0, [r7, #8]
 800e1a6:	f004 fc4f 	bl	8012a48 <_ZNK10UtestShell13getLineNumberEv>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	629a      	str	r2, [r3, #40]	; 0x28
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	332c      	adds	r3, #44	; 0x2c
 800e1b4:	6879      	ldr	r1, [r7, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fe f9bf 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
{
}
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	08027ec4 	.word	0x08027ec4

0800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
 800e1d8:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800e1da:	4a19      	ldr	r2, [pc, #100]	; (800e240 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	601a      	str	r2, [r3, #0]
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	3314      	adds	r3, #20
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	3204      	adds	r2, #4
 800e1ec:	68b9      	ldr	r1, [r7, #8]
 800e1ee:	4610      	mov	r0, r2
 800e1f0:	4798      	blx	r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	330c      	adds	r3, #12
 800e1f6:	68b9      	ldr	r1, [r7, #8]
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f004 fb45 	bl	8012888 <_ZNK10UtestShell7getNameEv>
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	3314      	adds	r3, #20
 800e202:	6879      	ldr	r1, [r7, #4]
 800e204:	4618      	mov	r0, r3
 800e206:	f7fe f944 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	683a      	ldr	r2, [r7, #0]
 800e20e:	61da      	str	r2, [r3, #28]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	3320      	adds	r3, #32
 800e214:	68b9      	ldr	r1, [r7, #8]
 800e216:	4618      	mov	r0, r3
 800e218:	f004 fc07 	bl	8012a2a <_ZNK10UtestShell7getFileEv>
 800e21c:	68b8      	ldr	r0, [r7, #8]
 800e21e:	f004 fc13 	bl	8012a48 <_ZNK10UtestShell13getLineNumberEv>
 800e222:	4602      	mov	r2, r0
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	629a      	str	r2, [r3, #40]	; 0x28
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	332c      	adds	r3, #44	; 0x2c
 800e22c:	4905      	ldr	r1, [pc, #20]	; (800e244 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fe f92f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
{
}
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	4618      	mov	r0, r3
 800e238:	3710      	adds	r7, #16
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	08027ec4 	.word	0x08027ec4
 800e244:	08023f88 	.word	0x08023f88

0800e248 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800e252:	4a1e      	ldr	r2, [pc, #120]	; (800e2cc <_ZN11TestFailureC1ERKS_+0x84>)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	601a      	str	r2, [r3, #0]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	1d1a      	adds	r2, r3, #4
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	3304      	adds	r3, #4
 800e260:	4619      	mov	r1, r3
 800e262:	4610      	mov	r0, r2
 800e264:	f7fe f969 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f103 020c 	add.w	r2, r3, #12
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	330c      	adds	r3, #12
 800e272:	4619      	mov	r1, r3
 800e274:	4610      	mov	r0, r2
 800e276:	f7fe f960 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f103 0214 	add.w	r2, r3, #20
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	3314      	adds	r3, #20
 800e284:	4619      	mov	r1, r3
 800e286:	4610      	mov	r0, r2
 800e288:	f7fe f957 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	69da      	ldr	r2, [r3, #28]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	61da      	str	r2, [r3, #28]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f103 0220 	add.w	r2, r3, #32
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	3320      	adds	r3, #32
 800e29e:	4619      	mov	r1, r3
 800e2a0:	4610      	mov	r0, r2
 800e2a2:	f7fe f94a 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	629a      	str	r2, [r3, #40]	; 0x28
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	332c      	adds	r3, #44	; 0x2c
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	4610      	mov	r0, r2
 800e2bc:	f7fe f93d 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
{
}
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	08027ec4 	.word	0x08027ec4

0800e2d0 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	4a10      	ldr	r2, [pc, #64]	; (800e31c <_ZN11TestFailureD1Ev+0x4c>)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	601a      	str	r2, [r3, #0]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	332c      	adds	r3, #44	; 0x2c
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fe fc8d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	3320      	adds	r3, #32
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fe fc88 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	3314      	adds	r3, #20
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7fe fc83 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	330c      	adds	r3, #12
 800e300:	4618      	mov	r0, r3
 800e302:	f7fe fc7e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	3304      	adds	r3, #4
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fe fc79 	bl	800cc02 <_ZN12SimpleStringD1Ev>
{
}
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4618      	mov	r0, r3
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	08027ec4 	.word	0x08027ec4

0800e320 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
}
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f7ff ffd1 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800e32e:	2134      	movs	r1, #52	; 0x34
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7fb fcff 	bl	8009d34 <_ZdlPvj>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4618      	mov	r0, r3
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
    return fileName_;
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	3314      	adds	r3, #20
 800e34e:	4619      	mov	r1, r3
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7fe f8f2 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
}
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	3708      	adds	r7, #8
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b082      	sub	sp, #8
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
 800e366:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	3320      	adds	r3, #32
 800e36c:	4619      	mov	r1, r3
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7fe f8e3 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
}
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
    return testName_;
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	3304      	adds	r3, #4
 800e38a:	4619      	mov	r1, r3
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f7fe f8d4 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
}
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	3708      	adds	r7, #8
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b082      	sub	sp, #8
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	330c      	adds	r3, #12
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7fe f8c5 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
}
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	69db      	ldr	r3, [r3, #28]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
    return message_;
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	332c      	adds	r3, #44	; 0x2c
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f7fe f89e 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
}
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	3708      	adds	r7, #8
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b082      	sub	sp, #8
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f103 0220 	add.w	r2, r3, #32
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	3314      	adds	r3, #20
 800e418:	4619      	mov	r1, r3
 800e41a:	4610      	mov	r0, r2
 800e41c:	f7fe fc42 	bl	800cca4 <_ZneRK12SimpleStringS1_>
 800e420:	4603      	mov	r3, r0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800e42a:	b480      	push	{r7}
 800e42c:	b083      	sub	sp, #12
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	69da      	ldr	r2, [r3, #28]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e43a:	429a      	cmp	r2, r3
 800e43c:	bf34      	ite	cc
 800e43e:	2301      	movcc	r3, #1
 800e440:	2300      	movcs	r3, #0
 800e442:	b2db      	uxtb	r3, r3
}
 800e444:	4618      	mov	r0, r3
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800e450:	b590      	push	{r4, r7, lr}
 800e452:	b085      	sub	sp, #20
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
 800e45c:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f7fe fba2 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800e464:	4604      	mov	r4, r0
 800e466:	6838      	ldr	r0, [r7, #0]
 800e468:	f7fe fb9e 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800e46c:	4603      	mov	r3, r0
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	4622      	mov	r2, r4
 800e472:	4903      	ldr	r1, [pc, #12]	; (800e480 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800e474:	f7ff f8cc 	bl	800d610 <_Z16StringFromFormatPKcz>
}
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	3714      	adds	r7, #20
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd90      	pop	{r4, r7, pc}
 800e480:	08023f94 	.word	0x08023f94

0800e484 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800e484:	b590      	push	{r4, r7, lr}
 800e486:	b097      	sub	sp, #92	; 0x5c
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
 800e490:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800e492:	494c      	ldr	r1, [pc, #304]	; (800e5c4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f7fd fffc 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800e49a:	2314      	movs	r3, #20
 800e49c:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800e49e:	230a      	movs	r3, #10
 800e4a0:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800e4a2:	f107 0320 	add.w	r3, r7, #32
 800e4a6:	220a      	movs	r2, #10
 800e4a8:	4947      	ldr	r1, [pc, #284]	; (800e5c8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fe f80c 	bl	800c4c8 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800e4b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e4b4:	f107 0120 	add.w	r1, r7, #32
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe fc03 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800e4c0:	f107 0318 	add.w	r3, r7, #24
 800e4c4:	f107 0220 	add.w	r2, r7, #32
 800e4c8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe fbfa 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800e4d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe fb93 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800e4dc:	f107 0310 	add.w	r3, r7, #16
 800e4e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e4e2:	493a      	ldr	r1, [pc, #232]	; (800e5cc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7ff f893 	bl	800d610 <_Z16StringFromFormatPKcz>

    result += "\n";
 800e4ea:	4939      	ldr	r1, [pc, #228]	; (800e5d0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f7fe fc17 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800e4f2:	f107 0310 	add.w	r3, r7, #16
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fe fb56 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800e4fc:	4604      	mov	r4, r0
 800e4fe:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800e502:	f107 0118 	add.w	r1, r7, #24
 800e506:	2314      	movs	r3, #20
 800e508:	683a      	ldr	r2, [r7, #0]
 800e50a:	f7fe fc83 	bl	800ce14 <_ZNK12SimpleString9subStringEjj>
 800e50e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e512:	4618      	mov	r0, r3
 800e514:	f7fe fb48 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800e518:	4603      	mov	r3, r0
 800e51a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e51e:	4622      	mov	r2, r4
 800e520:	492c      	ldr	r1, [pc, #176]	; (800e5d4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800e522:	f7ff f875 	bl	800d610 <_Z16StringFromFormatPKcz>
 800e526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e52a:	4619      	mov	r1, r3
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f7fe fbe5 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800e532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e536:	4618      	mov	r0, r3
 800e538:	f7fe fb63 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800e53c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe fb5e 	bl	800cc02 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800e546:	f107 0310 	add.w	r3, r7, #16
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe fb38 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 800e550:	4603      	mov	r3, r0
 800e552:	f103 020a 	add.w	r2, r3, #10
 800e556:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e55a:	491b      	ldr	r1, [pc, #108]	; (800e5c8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7fd ffb3 	bl	800c4c8 <_ZN12SimpleStringC1EPKcj>
 800e562:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e566:	4618      	mov	r0, r3
 800e568:	f7fe fb1e 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800e56c:	4602      	mov	r2, r0
 800e56e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e572:	4919      	ldr	r1, [pc, #100]	; (800e5d8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800e574:	4618      	mov	r0, r3
 800e576:	f7ff f84b 	bl	800d610 <_Z16StringFromFormatPKcz>
 800e57a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e57e:	4619      	mov	r1, r3
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f7fe fbbb 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800e586:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fe fb39 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800e590:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e594:	4618      	mov	r0, r3
 800e596:	f7fe fb34 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return result;
 800e59a:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800e59c:	f107 0310 	add.w	r3, r7, #16
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7fe fb2e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800e5a6:	f107 0318 	add.w	r3, r7, #24
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fe fb29 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800e5b0:	f107 0320 	add.w	r3, r7, #32
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7fe fb24 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return result;
 800e5ba:	bf00      	nop
}
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	375c      	adds	r7, #92	; 0x5c
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd90      	pop	{r4, r7, pc}
 800e5c4:	08023fb4 	.word	0x08023fb4
 800e5c8:	08023fb8 	.word	0x08023fb8
 800e5cc:	08023fbc 	.word	0x08023fbc
 800e5d0:	08023fe4 	.word	0x08023fe4
 800e5d4:	08023fe8 	.word	0x08023fe8
 800e5d8:	08023ff0 	.word	0x08023ff0

0800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800e5dc:	b590      	push	{r4, r7, lr}
 800e5de:	b087      	sub	sp, #28
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800e5e8:	491a      	ldr	r1, [pc, #104]	; (800e654 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f7fd ff51 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7fe faf5 	bl	800cbe0 <_ZNK12SimpleString7isEmptyEv>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	f083 0301 	eor.w	r3, r3, #1
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d022      	beq.n	800e648 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800e602:	f107 0310 	add.w	r3, r7, #16
 800e606:	4914      	ldr	r1, [pc, #80]	; (800e658 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800e608:	4618      	mov	r0, r3
 800e60a:	f7fd ff42 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800e60e:	f107 0310 	add.w	r3, r7, #16
 800e612:	4619      	mov	r1, r3
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f7fe f800 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 800e61a:	4603      	mov	r3, r0
 800e61c:	f083 0301 	eor.w	r3, r3, #1
 800e620:	b2dc      	uxtb	r4, r3
 800e622:	f107 0310 	add.w	r3, r7, #16
 800e626:	4618      	mov	r0, r3
 800e628:	f7fe faeb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800e62c:	2c00      	cmp	r4, #0
 800e62e:	d003      	beq.n	800e638 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800e630:	490a      	ldr	r1, [pc, #40]	; (800e65c <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800e632:	68f8      	ldr	r0, [r7, #12]
 800e634:	f7fe fb74 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800e638:	6879      	ldr	r1, [r7, #4]
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f7fe fb5e 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800e640:	4907      	ldr	r1, [pc, #28]	; (800e660 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f7fe fb6c 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800e648:	bf00      	nop
}
 800e64a:	68f8      	ldr	r0, [r7, #12]
 800e64c:	371c      	adds	r7, #28
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd90      	pop	{r4, r7, pc}
 800e652:	bf00      	nop
 800e654:	08023fb4 	.word	0x08023fb4
 800e658:	08023ff8 	.word	0x08023ff8
 800e65c:	08024004 	.word	0x08024004
 800e660:	08024010 	.word	0x08024010

0800e664 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800e664:	b590      	push	{r4, r7, lr}
 800e666:	b089      	sub	sp, #36	; 0x24
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
 800e670:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	68b9      	ldr	r1, [r7, #8]
 800e67a:	f7ff fda7 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e67e:	4a19      	ldr	r2, [pc, #100]	; (800e6e4 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e68a:	68f9      	ldr	r1, [r7, #12]
 800e68c:	f107 0310 	add.w	r3, r7, #16
 800e690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e692:	4618      	mov	r0, r3
 800e694:	f7ff ffa2 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e698:	f107 0310 	add.w	r3, r7, #16
 800e69c:	4619      	mov	r1, r3
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f7fd ff63 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800e6a4:	f107 0310 	add.w	r3, r7, #16
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7fe faaa 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e6b4:	68f9      	ldr	r1, [r7, #12]
 800e6b6:	f107 0018 	add.w	r0, r7, #24
 800e6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6be:	f7ff fec7 	bl	800e450 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e6c2:	f107 0318 	add.w	r3, r7, #24
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f7fe fb17 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800e6ce:	f107 0318 	add.w	r3, r7, #24
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fe fa95 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3724      	adds	r7, #36	; 0x24
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd90      	pop	{r4, r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	08027e98 	.word	0x08027e98

0800e6e8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800e6e8:	b5b0      	push	{r4, r5, r7, lr}
 800e6ea:	b094      	sub	sp, #80	; 0x50
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6278      	str	r0, [r7, #36]	; 0x24
 800e6f0:	6239      	str	r1, [r7, #32]
 800e6f2:	61fa      	str	r2, [r7, #28]
 800e6f4:	61bb      	str	r3, [r7, #24]
 800e6f6:	ed87 0b04 	vstr	d0, [r7, #16]
 800e6fa:	ed87 1b02 	vstr	d1, [r7, #8]
 800e6fe:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800e702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	69fa      	ldr	r2, [r7, #28]
 800e708:	6a39      	ldr	r1, [r7, #32]
 800e70a:	f7ff fd5f 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e70e:	4a4a      	ldr	r2, [pc, #296]	; (800e838 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e716:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e71a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e71c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e720:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e722:	4618      	mov	r0, r3
 800e724:	f7ff ff5a 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e72c:	4619      	mov	r1, r3
 800e72e:	4620      	mov	r0, r4
 800e730:	f7fd ff1b 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800e734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e738:	4618      	mov	r0, r3
 800e73a:	f7fe fa62 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800e73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e740:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e744:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800e746:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e74a:	2107      	movs	r1, #7
 800e74c:	ed97 0b04 	vldr	d0, [r7, #16]
 800e750:	4618      	mov	r0, r3
 800e752:	f7fe ff1b 	bl	800d58c <_Z10StringFromdi>
 800e756:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e75a:	2107      	movs	r1, #7
 800e75c:	ed97 0b02 	vldr	d0, [r7, #8]
 800e760:	4618      	mov	r0, r3
 800e762:	f7fe ff13 	bl	800d58c <_Z10StringFromdi>
 800e766:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e76a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e76e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e772:	4629      	mov	r1, r5
 800e774:	f7ff fe6c 	bl	800e450 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e778:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e77c:	4619      	mov	r1, r3
 800e77e:	4620      	mov	r0, r4
 800e780:	f7fe fabc 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800e784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fe fa3a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800e78e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e792:	4618      	mov	r0, r3
 800e794:	f7fe fa35 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800e798:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7fe fa30 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a4:	332c      	adds	r3, #44	; 0x2c
 800e7a6:	4925      	ldr	r1, [pc, #148]	; (800e83c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fe fab9 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e7b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e7b8:	2107      	movs	r1, #7
 800e7ba:	ed97 0b00 	vldr	d0, [r7]
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7fe fee4 	bl	800d58c <_Z10StringFromdi>
 800e7c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	f7fe fa96 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800e7d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fe fa14 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800e7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7dc:	332c      	adds	r3, #44	; 0x2c
 800e7de:	4918      	ldr	r1, [pc, #96]	; (800e840 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fe fa9d 	bl	800cd20 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800e7e6:	4b17      	ldr	r3, [pc, #92]	; (800e844 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	ed97 0b04 	vldr	d0, [r7, #16]
 800e7ee:	4798      	blx	r3
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d10f      	bne.n	800e816 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800e7f6:	4b13      	ldr	r3, [pc, #76]	; (800e844 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	ed97 0b02 	vldr	d0, [r7, #8]
 800e7fe:	4798      	blx	r3
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d107      	bne.n	800e816 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800e806:	4b0f      	ldr	r3, [pc, #60]	; (800e844 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	ed97 0b00 	vldr	d0, [r7]
 800e80e:	4798      	blx	r3
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d001      	beq.n	800e81a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800e816:	2301      	movs	r3, #1
 800e818:	e000      	b.n	800e81c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800e81a:	2300      	movs	r3, #0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d005      	beq.n	800e82c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e822:	332c      	adds	r3, #44	; 0x2c
 800e824:	4908      	ldr	r1, [pc, #32]	; (800e848 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe fa7a 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
}
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	4618      	mov	r0, r3
 800e830:	3750      	adds	r7, #80	; 0x50
 800e832:	46bd      	mov	sp, r7
 800e834:	bdb0      	pop	{r4, r5, r7, pc}
 800e836:	bf00      	nop
 800e838:	08027e6c 	.word	0x08027e6c
 800e83c:	08024014 	.word	0x08024014
 800e840:	0802402c 	.word	0x0802402c
 800e844:	200000e8 	.word	0x200000e8
 800e848:	08024030 	.word	0x08024030

0800e84c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800e84c:	b590      	push	{r4, r7, lr}
 800e84e:	b093      	sub	sp, #76	; 0x4c
 800e850:	af02      	add	r7, sp, #8
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	607a      	str	r2, [r7, #4]
 800e858:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	68b9      	ldr	r1, [r7, #8]
 800e862:	f7ff fcb3 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e866:	4a4f      	ldr	r2, [pc, #316]	; (800e9a4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e872:	68f9      	ldr	r1, [r7, #12]
 800e874:	f107 0320 	add.w	r3, r7, #32
 800e878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7ff feae 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e880:	f107 0320 	add.w	r3, r7, #32
 800e884:	4619      	mov	r1, r3
 800e886:	4620      	mov	r0, r4
 800e888:	f7fd fe6f 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800e88c:	f107 0320 	add.w	r3, r7, #32
 800e890:	4618      	mov	r0, r3
 800e892:	f7fe f9b6 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800e896:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e898:	f7fe f986 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800e89c:	4602      	mov	r2, r0
 800e89e:	f107 0318 	add.w	r3, r7, #24
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fe fc47 	bl	800d138 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800e8aa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e8ac:	f7fe f97c 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	f107 0310 	add.w	r3, r7, #16
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fe fc3d 	bl	800d138 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e8c4:	68f9      	ldr	r1, [r7, #12]
 800e8c6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e8ca:	f107 0310 	add.w	r3, r7, #16
 800e8ce:	f107 0218 	add.w	r2, r7, #24
 800e8d2:	f7ff fdbd 	bl	800e450 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e8d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8da:	4619      	mov	r1, r3
 800e8dc:	4620      	mov	r0, r4
 800e8de:	f7fe fa0d 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800e8e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fe f98b 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e8f2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e8f4:	f7fe fae9 	bl	800ceca <_ZNK12SimpleString2atEj>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	461c      	mov	r4, r3
 800e8fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e8fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e900:	f7fe fae3 	bl	800ceca <_ZNK12SimpleString2atEj>
 800e904:	4603      	mov	r3, r0
 800e906:	429c      	cmp	r4, r3
 800e908:	bf0c      	ite	eq
 800e90a:	2301      	moveq	r3, #1
 800e90c:	2300      	movne	r3, #0
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	2b00      	cmp	r3, #0
 800e912:	d003      	beq.n	800e91c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800e914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e916:	3301      	adds	r3, #1
 800e918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e91a:	e7e9      	b.n	800e8f0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800e91c:	2300      	movs	r3, #0
 800e91e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e920:	f107 0310 	add.w	r3, r7, #16
 800e924:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e926:	4618      	mov	r0, r3
 800e928:	f7fe facf 	bl	800ceca <_ZNK12SimpleString2atEj>
 800e92c:	4603      	mov	r3, r0
 800e92e:	461c      	mov	r4, r3
 800e930:	f107 0318 	add.w	r3, r7, #24
 800e934:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e936:	4618      	mov	r0, r3
 800e938:	f7fe fac7 	bl	800ceca <_ZNK12SimpleString2atEj>
 800e93c:	4603      	mov	r3, r0
 800e93e:	429c      	cmp	r4, r3
 800e940:	bf0c      	ite	eq
 800e942:	2301      	moveq	r3, #1
 800e944:	2300      	movne	r3, #0
 800e946:	b2db      	uxtb	r3, r3
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d003      	beq.n	800e954 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800e94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94e:	3301      	adds	r3, #1
 800e950:	63bb      	str	r3, [r7, #56]	; 0x38
 800e952:	e7e5      	b.n	800e920 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e95a:	68f9      	ldr	r1, [r7, #12]
 800e95c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e960:	f107 0210 	add.w	r2, r7, #16
 800e964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96a:	f7ff fd8b 	bl	800e484 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800e96e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e972:	4619      	mov	r1, r3
 800e974:	4620      	mov	r0, r4
 800e976:	f7fe f9c1 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800e97a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fe f93f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800e984:	f107 0310 	add.w	r3, r7, #16
 800e988:	4618      	mov	r0, r3
 800e98a:	f7fe f93a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800e98e:	f107 0318 	add.w	r3, r7, #24
 800e992:	4618      	mov	r0, r3
 800e994:	f7fe f935 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	4618      	mov	r0, r3
 800e99c:	3744      	adds	r7, #68	; 0x44
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd90      	pop	{r4, r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	08027e40 	.word	0x08027e40

0800e9a8 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800e9a8:	b590      	push	{r4, r7, lr}
 800e9aa:	b087      	sub	sp, #28
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	607a      	str	r2, [r7, #4]
 800e9b4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	68b9      	ldr	r1, [r7, #8]
 800e9be:	f7ff fc05 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e9c2:	4a1a      	ldr	r2, [pc, #104]	; (800ea2c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e9ce:	68f9      	ldr	r1, [r7, #12]
 800e9d0:	f107 0310 	add.w	r3, r7, #16
 800e9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7ff fe00 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e9dc:	f107 0310 	add.w	r3, r7, #16
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f7fd fdc1 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800e9e8:	f107 0310 	add.w	r3, r7, #16
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7fe f908 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	332c      	adds	r3, #44	; 0x2c
 800e9f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7fe f97f 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	332c      	adds	r3, #44	; 0x2c
 800ea02:	490b      	ldr	r1, [pc, #44]	; (800ea30 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fe f98b 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	332c      	adds	r3, #44	; 0x2c
 800ea0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fe f973 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	332c      	adds	r3, #44	; 0x2c
 800ea1a:	4906      	ldr	r1, [pc, #24]	; (800ea34 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7fe f97f 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
}
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	4618      	mov	r0, r3
 800ea26:	371c      	adds	r7, #28
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd90      	pop	{r4, r7, pc}
 800ea2c:	08027e14 	.word	0x08027e14
 800ea30:	08024054 	.word	0x08024054
 800ea34:	08024058 	.word	0x08024058

0800ea38 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800ea38:	b5b0      	push	{r4, r5, r7, lr}
 800ea3a:	b088      	sub	sp, #32
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]
 800ea44:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	68b9      	ldr	r1, [r7, #8]
 800ea4e:	f7ff fbbd 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ea52:	4a1c      	ldr	r2, [pc, #112]	; (800eac4 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ea5e:	68f9      	ldr	r1, [r7, #12]
 800ea60:	f107 0310 	add.w	r3, r7, #16
 800ea64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7ff fdb8 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ea6c:	f107 0310 	add.w	r3, r7, #16
 800ea70:	4619      	mov	r1, r3
 800ea72:	4620      	mov	r0, r4
 800ea74:	f7fd fd79 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800ea78:	f107 0310 	add.w	r3, r7, #16
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7fe f8c0 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ea88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea8a:	f7fe f88d 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800ea8e:	4605      	mov	r5, r0
 800ea90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea92:	f7fe f889 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800ea96:	4603      	mov	r3, r0
 800ea98:	f107 0018 	add.w	r0, r7, #24
 800ea9c:	462a      	mov	r2, r5
 800ea9e:	490a      	ldr	r1, [pc, #40]	; (800eac8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800eaa0:	f7fe fdb6 	bl	800d610 <_Z16StringFromFormatPKcz>
 800eaa4:	f107 0318 	add.w	r3, r7, #24
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f7fe f926 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800eab0:	f107 0318 	add.w	r3, r7, #24
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7fe f8a4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	4618      	mov	r0, r3
 800eabe:	3720      	adds	r7, #32
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bdb0      	pop	{r4, r5, r7, pc}
 800eac4:	08027de8 	.word	0x08027de8
 800eac8:	08024064 	.word	0x08024064

0800eacc <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800eacc:	b590      	push	{r4, r7, lr}
 800eace:	b087      	sub	sp, #28
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	607a      	str	r2, [r7, #4]
 800ead8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	68b9      	ldr	r1, [r7, #8]
 800eae2:	f7ff fb73 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eae6:	4a1a      	ldr	r2, [pc, #104]	; (800eb50 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eaf2:	68f9      	ldr	r1, [r7, #12]
 800eaf4:	f107 0310 	add.w	r3, r7, #16
 800eaf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff fd6e 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800eb00:	f107 0310 	add.w	r3, r7, #16
 800eb04:	4619      	mov	r1, r3
 800eb06:	4620      	mov	r0, r4
 800eb08:	f7fd fd2f 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800eb0c:	f107 0310 	add.w	r3, r7, #16
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fe f876 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	332c      	adds	r3, #44	; 0x2c
 800eb1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fe f8ed 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	332c      	adds	r3, #44	; 0x2c
 800eb26:	490b      	ldr	r1, [pc, #44]	; (800eb54 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7fe f8f9 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	332c      	adds	r3, #44	; 0x2c
 800eb32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fe f8e1 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	332c      	adds	r3, #44	; 0x2c
 800eb3e:	4906      	ldr	r1, [pc, #24]	; (800eb58 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7fe f8ed 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
}
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	371c      	adds	r7, #28
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd90      	pop	{r4, r7, pc}
 800eb50:	08027dbc 	.word	0x08027dbc
 800eb54:	08024054 	.word	0x08024054
 800eb58:	08024058 	.word	0x08024058

0800eb5c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
 800eb68:	603b      	str	r3, [r7, #0]
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	68b9      	ldr	r1, [r7, #8]
 800eb72:	f7ff fb2b 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eb76:	4a07      	ldr	r2, [pc, #28]	; (800eb94 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	332c      	adds	r3, #44	; 0x2c
 800eb80:	69b9      	ldr	r1, [r7, #24]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7fd fcf1 	bl	800c56a <_ZN12SimpleStringaSERKS_>
}
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	08027a78 	.word	0x08027a78

0800eb98 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800eb98:	b590      	push	{r4, r7, lr}
 800eb9a:	b09d      	sub	sp, #116	; 0x74
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	607a      	str	r2, [r7, #4]
 800eba4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800eba6:	68f8      	ldr	r0, [r7, #12]
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	68b9      	ldr	r1, [r7, #8]
 800ebae:	f7ff fb0d 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ebb2:	4a5d      	ldr	r2, [pc, #372]	; (800ed28 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ebbe:	68f9      	ldr	r1, [r7, #12]
 800ebc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ebc4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7ff fd07 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ebce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f7fd fcc8 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800ebda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7fe f80f 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800ebe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ebe8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7fe fae1 	bl	800d1b4 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800ebf2:	f107 0320 	add.w	r3, r7, #32
 800ebf6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fe fada 	bl	800d1b4 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800ec00:	f107 0120 	add.w	r1, r7, #32
 800ec04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec08:	2220      	movs	r2, #32
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7fe f8b6 	bl	800cd7c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ec10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec14:	4945      	ldr	r1, [pc, #276]	; (800ed2c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fd fc3b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800ec1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ec20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ec24:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fe f84c 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800ec2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec32:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fe fbd2 	bl	800d3e0 <_Z30BracketsFormattedHexStringFroml>
 800ec3c:	f107 0318 	add.w	r3, r7, #24
 800ec40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ec44:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fe f83c 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800ec4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7fd ffd5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800ec58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fd ffd0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800ec62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fd ffcb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ec6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ec70:	492e      	ldr	r1, [pc, #184]	; (800ed2c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7fd fc0d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800ec78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ec7c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ec80:	f107 0120 	add.w	r1, r7, #32
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7fe f81e 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800ec8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ec8e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fe fba4 	bl	800d3e0 <_Z30BracketsFormattedHexStringFroml>
 800ec98:	f107 0310 	add.w	r3, r7, #16
 800ec9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800eca0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7fe f80e 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800ecaa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fd ffa7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800ecb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fd ffa2 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800ecbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fd ff9d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ecce:	68f9      	ldr	r1, [r7, #12]
 800ecd0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800ecd4:	f107 0318 	add.w	r3, r7, #24
 800ecd8:	f107 0210 	add.w	r2, r7, #16
 800ecdc:	f7ff fbb8 	bl	800e450 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ece0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ece4:	4619      	mov	r1, r3
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7fe f808 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800ecec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fd ff86 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ecf6:	f107 0310 	add.w	r3, r7, #16
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fd ff81 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ed00:	f107 0318 	add.w	r3, r7, #24
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fd ff7c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800ed0a:	f107 0320 	add.w	r3, r7, #32
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fd ff77 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800ed14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fd ff72 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	4618      	mov	r0, r3
 800ed22:	3774      	adds	r7, #116	; 0x74
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd90      	pop	{r4, r7, pc}
 800ed28:	08027d90 	.word	0x08027d90
 800ed2c:	08023fb8 	.word	0x08023fb8

0800ed30 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800ed30:	b590      	push	{r4, r7, lr}
 800ed32:	b09d      	sub	sp, #116	; 0x74
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	607a      	str	r2, [r7, #4]
 800ed3c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	68b9      	ldr	r1, [r7, #8]
 800ed46:	f7ff fa41 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ed4a:	4a5d      	ldr	r2, [pc, #372]	; (800eec0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ed56:	68f9      	ldr	r1, [r7, #12]
 800ed58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed5c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7ff fc3b 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ed66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f7fd fbfc 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800ed72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7fd ff43 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800ed7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed80:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7fe fc7d 	bl	800d684 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800ed8a:	f107 0320 	add.w	r3, r7, #32
 800ed8e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fe fc76 	bl	800d684 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800ed98:	f107 0120 	add.w	r1, r7, #32
 800ed9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eda0:	2220      	movs	r2, #32
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fd ffea 	bl	800cd7c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800eda8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800edac:	4945      	ldr	r1, [pc, #276]	; (800eec4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fd fb6f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800edb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800edb8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800edbc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fd ff80 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800edc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edca:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fe fb22 	bl	800d418 <_Z30BracketsFormattedHexStringFromm>
 800edd4:	f107 0318 	add.w	r3, r7, #24
 800edd8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800eddc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7fd ff70 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800ede6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edea:	4618      	mov	r0, r3
 800edec:	f7fd ff09 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800edf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fd ff04 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800edfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fd feff 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ee04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee08:	492e      	ldr	r1, [pc, #184]	; (800eec4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fd fb41 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800ee10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ee14:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ee18:	f107 0120 	add.w	r1, r7, #32
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7fd ff52 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800ee22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ee26:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fe faf4 	bl	800d418 <_Z30BracketsFormattedHexStringFromm>
 800ee30:	f107 0310 	add.w	r3, r7, #16
 800ee34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ee38:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fd ff42 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800ee42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fd fedb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800ee4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fd fed6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800ee56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fd fed1 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ee66:	68f9      	ldr	r1, [r7, #12]
 800ee68:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800ee6c:	f107 0318 	add.w	r3, r7, #24
 800ee70:	f107 0210 	add.w	r2, r7, #16
 800ee74:	f7ff faec 	bl	800e450 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ee78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f7fd ff3c 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800ee84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fd feba 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ee8e:	f107 0310 	add.w	r3, r7, #16
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fd feb5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ee98:	f107 0318 	add.w	r3, r7, #24
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7fd feb0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800eea2:	f107 0320 	add.w	r3, r7, #32
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fd feab 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800eeac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7fd fea6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3774      	adds	r7, #116	; 0x74
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd90      	pop	{r4, r7, pc}
 800eec0:	08027d64 	.word	0x08027d64
 800eec4:	08023fb8 	.word	0x08023fb8

0800eec8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800eec8:	b590      	push	{r4, r7, lr}
 800eeca:	b09d      	sub	sp, #116	; 0x74
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
 800eed4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	68b9      	ldr	r1, [r7, #8]
 800eede:	f7ff f975 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eee2:	4a5f      	ldr	r2, [pc, #380]	; (800f060 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eeee:	68f9      	ldr	r1, [r7, #12]
 800eef0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eef4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7ff fb6f 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800eefe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef02:	4619      	mov	r1, r3
 800ef04:	4620      	mov	r0, r4
 800ef06:	f7fd fb30 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800ef0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7fd fe77 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800ef14:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800ef18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef1c:	4611      	mov	r1, r2
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fe f936 	bl	800d190 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800ef24:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800ef28:	f107 0320 	add.w	r3, r7, #32
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fe f92e 	bl	800d190 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800ef34:	f107 0120 	add.w	r1, r7, #32
 800ef38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef3c:	2220      	movs	r2, #32
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fd ff1c 	bl	800cd7c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ef44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ef48:	4946      	ldr	r1, [pc, #280]	; (800f064 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fd faa1 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800ef50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef54:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ef58:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7fd feb2 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800ef62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ef66:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800ef6a:	4611      	mov	r1, r2
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7fe fa6f 	bl	800d450 <_Z30BracketsFormattedHexStringFroma>
 800ef72:	f107 0318 	add.w	r3, r7, #24
 800ef76:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ef7a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fd fea1 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800ef84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7fd fe3a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800ef8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fd fe35 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800ef98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fd fe30 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800efa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800efa6:	492f      	ldr	r1, [pc, #188]	; (800f064 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fd fa72 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 800efae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800efb2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800efb6:	f107 0120 	add.w	r1, r7, #32
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fd fe83 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800efc0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800efc4:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800efc8:	4611      	mov	r1, r2
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fe fa40 	bl	800d450 <_Z30BracketsFormattedHexStringFroma>
 800efd0:	f107 0310 	add.w	r3, r7, #16
 800efd4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800efd8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fd fe72 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 800efe2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fd fe0b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800efec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7fd fe06 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800eff6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800effa:	4618      	mov	r0, r3
 800effc:	f7fd fe01 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f006:	68f9      	ldr	r1, [r7, #12]
 800f008:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f00c:	f107 0318 	add.w	r3, r7, #24
 800f010:	f107 0210 	add.w	r2, r7, #16
 800f014:	f7ff fa1c 	bl	800e450 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f018:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f01c:	4619      	mov	r1, r3
 800f01e:	4620      	mov	r0, r4
 800f020:	f7fd fe6c 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800f024:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fd fdea 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f02e:	f107 0310 	add.w	r3, r7, #16
 800f032:	4618      	mov	r0, r3
 800f034:	f7fd fde5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f038:	f107 0318 	add.w	r3, r7, #24
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fd fde0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800f042:	f107 0320 	add.w	r3, r7, #32
 800f046:	4618      	mov	r0, r3
 800f048:	f7fd fddb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800f04c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f050:	4618      	mov	r0, r3
 800f052:	f7fd fdd6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	4618      	mov	r0, r3
 800f05a:	3774      	adds	r7, #116	; 0x74
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd90      	pop	{r4, r7, pc}
 800f060:	08027d38 	.word	0x08027d38
 800f064:	08023fb8 	.word	0x08023fb8

0800f068 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f068:	b590      	push	{r4, r7, lr}
 800f06a:	b093      	sub	sp, #76	; 0x4c
 800f06c:	af02      	add	r7, sp, #8
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
 800f074:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	68b9      	ldr	r1, [r7, #8]
 800f07e:	f7ff f8a5 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f082:	4a4a      	ldr	r2, [pc, #296]	; (800f1ac <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f08e:	68f9      	ldr	r1, [r7, #12]
 800f090:	f107 0320 	add.w	r3, r7, #32
 800f094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f096:	4618      	mov	r0, r3
 800f098:	f7ff faa0 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f09c:	f107 0320 	add.w	r3, r7, #32
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	f7fd fa61 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800f0a8:	f107 0320 	add.w	r3, r7, #32
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fd fda8 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f0b2:	f107 0318 	add.w	r3, r7, #24
 800f0b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fe f83d 	bl	800d138 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f0be:	f107 0310 	add.w	r3, r7, #16
 800f0c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7fe f837 	bl	800d138 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f0d0:	68f9      	ldr	r1, [r7, #12]
 800f0d2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f0d6:	f107 0310 	add.w	r3, r7, #16
 800f0da:	f107 0218 	add.w	r2, r7, #24
 800f0de:	f7ff f9b7 	bl	800e450 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f0e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f7fd fe07 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800f0ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fd fd85 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f0f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d046      	beq.n	800f18c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800f0fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f100:	2b00      	cmp	r3, #0
 800f102:	d043      	beq.n	800f18c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800f104:	2300      	movs	r3, #0
 800f106:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f108:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f10c:	4413      	add	r3, r2
 800f10e:	781a      	ldrb	r2, [r3, #0]
 800f110:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f114:	440b      	add	r3, r1
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d103      	bne.n	800f124 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800f11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f11e:	3301      	adds	r3, #1
 800f120:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f122:	e7f1      	b.n	800f108 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f124:	2300      	movs	r3, #0
 800f126:	63bb      	str	r3, [r7, #56]	; 0x38
 800f128:	f107 0310 	add.w	r3, r7, #16
 800f12c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fd fecb 	bl	800ceca <_ZNK12SimpleString2atEj>
 800f134:	4603      	mov	r3, r0
 800f136:	461c      	mov	r4, r3
 800f138:	f107 0318 	add.w	r3, r7, #24
 800f13c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f13e:	4618      	mov	r0, r3
 800f140:	f7fd fec3 	bl	800ceca <_ZNK12SimpleString2atEj>
 800f144:	4603      	mov	r3, r0
 800f146:	429c      	cmp	r4, r3
 800f148:	bf0c      	ite	eq
 800f14a:	2301      	moveq	r3, #1
 800f14c:	2300      	movne	r3, #0
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	2b00      	cmp	r3, #0
 800f152:	d003      	beq.n	800f15c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800f154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f156:	3301      	adds	r3, #1
 800f158:	63bb      	str	r3, [r7, #56]	; 0x38
 800f15a:	e7e5      	b.n	800f128 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f162:	68f9      	ldr	r1, [r7, #12]
 800f164:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f168:	f107 0210 	add.w	r2, r7, #16
 800f16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f172:	f7ff f987 	bl	800e484 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f176:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f17a:	4619      	mov	r1, r3
 800f17c:	4620      	mov	r0, r4
 800f17e:	f7fd fdbd 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800f182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f186:	4618      	mov	r0, r3
 800f188:	f7fd fd3b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f18c:	f107 0310 	add.w	r3, r7, #16
 800f190:	4618      	mov	r0, r3
 800f192:	f7fd fd36 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f196:	f107 0318 	add.w	r3, r7, #24
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fd fd31 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    }
}
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3744      	adds	r7, #68	; 0x44
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd90      	pop	{r4, r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	08027d0c 	.word	0x08027d0c

0800f1b0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f1b0:	b590      	push	{r4, r7, lr}
 800f1b2:	b093      	sub	sp, #76	; 0x4c
 800f1b4:	af02      	add	r7, sp, #8
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	607a      	str	r2, [r7, #4]
 800f1bc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	68b9      	ldr	r1, [r7, #8]
 800f1c6:	f7ff f801 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f1ca:	4a55      	ldr	r2, [pc, #340]	; (800f320 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f1d6:	68f9      	ldr	r1, [r7, #12]
 800f1d8:	f107 0320 	add.w	r3, r7, #32
 800f1dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7ff f9fc 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f1e4:	f107 0320 	add.w	r3, r7, #32
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	f7fd f9bd 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800f1f0:	f107 0320 	add.w	r3, r7, #32
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7fd fd04 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f1fa:	f107 0318 	add.w	r3, r7, #24
 800f1fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f200:	4618      	mov	r0, r3
 800f202:	f7fd ff99 	bl	800d138 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f206:	f107 0310 	add.w	r3, r7, #16
 800f20a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fd ff93 	bl	800d138 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f218:	68f9      	ldr	r1, [r7, #12]
 800f21a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f21e:	f107 0310 	add.w	r3, r7, #16
 800f222:	f107 0218 	add.w	r2, r7, #24
 800f226:	f7ff f913 	bl	800e450 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f22a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f22e:	4619      	mov	r1, r3
 800f230:	4620      	mov	r0, r4
 800f232:	f7fd fd63 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800f236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fd fce1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f242:	2b00      	cmp	r3, #0
 800f244:	d05c      	beq.n	800f300 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800f246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d059      	beq.n	800f300 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800f24c:	2300      	movs	r3, #0
 800f24e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f250:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f254:	4413      	add	r3, r2
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	4618      	mov	r0, r3
 800f25a:	f7fd f824 	bl	800c2a6 <_ZN12SimpleString7ToLowerEc>
 800f25e:	4603      	mov	r3, r0
 800f260:	461c      	mov	r4, r3
 800f262:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f266:	4413      	add	r3, r2
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fd f81b 	bl	800c2a6 <_ZN12SimpleString7ToLowerEc>
 800f270:	4603      	mov	r3, r0
 800f272:	429c      	cmp	r4, r3
 800f274:	bf0c      	ite	eq
 800f276:	2301      	moveq	r3, #1
 800f278:	2300      	movne	r3, #0
 800f27a:	b2db      	uxtb	r3, r3
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d003      	beq.n	800f288 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800f280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f282:	3301      	adds	r3, #1
 800f284:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f286:	e7e3      	b.n	800f250 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800f288:	2300      	movs	r3, #0
 800f28a:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800f28c:	f107 0310 	add.w	r3, r7, #16
 800f290:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f292:	4618      	mov	r0, r3
 800f294:	f7fd fe19 	bl	800ceca <_ZNK12SimpleString2atEj>
 800f298:	4603      	mov	r3, r0
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fd f803 	bl	800c2a6 <_ZN12SimpleString7ToLowerEc>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	461c      	mov	r4, r3
 800f2a4:	f107 0318 	add.w	r3, r7, #24
 800f2a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fd fe0d 	bl	800ceca <_ZNK12SimpleString2atEj>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fc fff7 	bl	800c2a6 <_ZN12SimpleString7ToLowerEc>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	429c      	cmp	r4, r3
 800f2bc:	bf0c      	ite	eq
 800f2be:	2301      	moveq	r3, #1
 800f2c0:	2300      	movne	r3, #0
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d003      	beq.n	800f2d0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800f2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2ce:	e7dd      	b.n	800f28c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f2d6:	68f9      	ldr	r1, [r7, #12]
 800f2d8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f2dc:	f107 0210 	add.w	r2, r7, #16
 800f2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e6:	f7ff f8cd 	bl	800e484 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f2ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f7fd fd03 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800f2f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fd fc81 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f300:	f107 0310 	add.w	r3, r7, #16
 800f304:	4618      	mov	r0, r3
 800f306:	f7fd fc7c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f30a:	f107 0318 	add.w	r3, r7, #24
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fd fc77 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    }
}
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	4618      	mov	r0, r3
 800f318:	3744      	adds	r7, #68	; 0x44
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd90      	pop	{r4, r7, pc}
 800f31e:	bf00      	nop
 800f320:	08027ce0 	.word	0x08027ce0

0800f324 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800f324:	b5b0      	push	{r4, r5, r7, lr}
 800f326:	b092      	sub	sp, #72	; 0x48
 800f328:	af02      	add	r7, sp, #8
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	607a      	str	r2, [r7, #4]
 800f330:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	68b9      	ldr	r1, [r7, #8]
 800f33a:	f7fe ff47 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f33e:	4a40      	ldr	r2, [pc, #256]	; (800f440 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f34a:	68f9      	ldr	r1, [r7, #12]
 800f34c:	f107 031c 	add.w	r3, r7, #28
 800f350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f352:	4618      	mov	r0, r3
 800f354:	f7ff f942 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f358:	f107 031c 	add.w	r3, r7, #28
 800f35c:	4619      	mov	r1, r3
 800f35e:	4620      	mov	r0, r4
 800f360:	f7fd f903 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800f364:	f107 031c 	add.w	r3, r7, #28
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fd fc4a 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800f36e:	f107 0314 	add.w	r3, r7, #20
 800f372:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f376:	4618      	mov	r0, r3
 800f378:	f7fe fa4c 	bl	800d814 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f382:	68fd      	ldr	r5, [r7, #12]
 800f384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f388:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f38a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fe fa41 	bl	800d814 <_Z22StringFromBinaryOrNullPKhj>
 800f392:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f396:	f107 0314 	add.w	r3, r7, #20
 800f39a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f39e:	4629      	mov	r1, r5
 800f3a0:	f7ff f856 	bl	800e450 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f3a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	f7fd fca6 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800f3b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7fd fc24 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800f3ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fd fc1f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800f3c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d02f      	beq.n	800f42a <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800f3ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d02c      	beq.n	800f42a <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3d8:	4413      	add	r3, r2
 800f3da:	781a      	ldrb	r2, [r3, #0]
 800f3dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3e0:	440b      	add	r3, r1
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d103      	bne.n	800f3f0 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800f3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3ee:	e7f1      	b.n	800f3d4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f3f6:	68f9      	ldr	r1, [r7, #12]
 800f3f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	005b      	lsls	r3, r3, #1
 800f3fe:	4413      	add	r3, r2
 800f400:	1c5d      	adds	r5, r3, #1
 800f402:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f406:	f107 0214 	add.w	r2, r7, #20
 800f40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	462b      	mov	r3, r5
 800f410:	f7ff f838 	bl	800e484 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f414:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f418:	4619      	mov	r1, r3
 800f41a:	4620      	mov	r0, r4
 800f41c:	f7fd fc6e 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800f420:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f424:	4618      	mov	r0, r3
 800f426:	f7fd fbec 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800f42a:	f107 0314 	add.w	r3, r7, #20
 800f42e:	4618      	mov	r0, r3
 800f430:	f7fd fbe7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
	}
}
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	4618      	mov	r0, r3
 800f438:	3740      	adds	r7, #64	; 0x40
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bdb0      	pop	{r4, r5, r7, pc}
 800f43e:	bf00      	nop
 800f440:	08027cb4 	.word	0x08027cb4

0800f444 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800f444:	b5b0      	push	{r4, r5, r7, lr}
 800f446:	b08c      	sub	sp, #48	; 0x30
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
 800f450:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	68b9      	ldr	r1, [r7, #8]
 800f45a:	f7fe feb7 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f45e:	4a26      	ldr	r2, [pc, #152]	; (800f4f8 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f46a:	68f9      	ldr	r1, [r7, #12]
 800f46c:	f107 0310 	add.w	r3, r7, #16
 800f470:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f472:	4618      	mov	r0, r3
 800f474:	f7ff f8b2 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f478:	f107 0310 	add.w	r3, r7, #16
 800f47c:	4619      	mov	r1, r3
 800f47e:	4620      	mov	r0, r4
 800f480:	f7fd f873 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800f484:	f107 0310 	add.w	r3, r7, #16
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fd fbba 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f494:	68fd      	ldr	r5, [r7, #12]
 800f496:	f107 0020 	add.w	r0, r7, #32
 800f49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f49c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f49e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4a0:	f7fe fa24 	bl	800d8ec <_Z20StringFromMaskedBitsmmj>
 800f4a4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4ae:	f7fe fa1d 	bl	800d8ec <_Z20StringFromMaskedBitsmmj>
 800f4b2:	f107 0018 	add.w	r0, r7, #24
 800f4b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4ba:	f107 0220 	add.w	r2, r7, #32
 800f4be:	4629      	mov	r1, r5
 800f4c0:	f7fe ffc6 	bl	800e450 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f4c4:	f107 0318 	add.w	r3, r7, #24
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	f7fd fc16 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800f4d0:	f107 0318 	add.w	r3, r7, #24
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fd fb94 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800f4da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fd fb8f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 800f4e4:	f107 0320 	add.w	r3, r7, #32
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fd fb8a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3730      	adds	r7, #48	; 0x30
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bdb0      	pop	{r4, r5, r7, pc}
 800f4f8:	08027c88 	.word	0x08027c88

0800f4fc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800f4fc:	b590      	push	{r4, r7, lr}
 800f4fe:	b089      	sub	sp, #36	; 0x24
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	68b9      	ldr	r1, [r7, #8]
 800f512:	f7fe fe5b 	bl	800e1cc <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f516:	4a1a      	ldr	r2, [pc, #104]	; (800f580 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f522:	68f9      	ldr	r1, [r7, #12]
 800f524:	f107 0310 	add.w	r3, r7, #16
 800f528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7ff f856 	bl	800e5dc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f530:	f107 0310 	add.w	r3, r7, #16
 800f534:	4619      	mov	r1, r3
 800f536:	4620      	mov	r0, r4
 800f538:	f7fd f817 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 800f53c:	f107 0310 	add.w	r3, r7, #16
 800f540:	4618      	mov	r0, r3
 800f542:	f7fd fb5e 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f54c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f54e:	f7fd fb2b 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800f552:	4602      	mov	r2, r0
 800f554:	f107 0318 	add.w	r3, r7, #24
 800f558:	490a      	ldr	r1, [pc, #40]	; (800f584 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fe f858 	bl	800d610 <_Z16StringFromFormatPKcz>
 800f560:	f107 0318 	add.w	r3, r7, #24
 800f564:	4619      	mov	r1, r3
 800f566:	4620      	mov	r0, r4
 800f568:	f7fd fbc8 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 800f56c:	f107 0318 	add.w	r3, r7, #24
 800f570:	4618      	mov	r0, r3
 800f572:	f7fd fb46 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	4618      	mov	r0, r3
 800f57a:	3724      	adds	r7, #36	; 0x24
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd90      	pop	{r4, r7, pc}
 800f580:	08027c5c 	.word	0x08027c5c
 800f584:	08024088 	.word	0x08024088

0800f588 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	4a05      	ldr	r2, [pc, #20]	; (800f5a8 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	601a      	str	r2, [r3, #0]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fe fe99 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3708      	adds	r7, #8
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	08027c5c 	.word	0x08027c5c

0800f5ac <_ZN25FeatureUnsupportedFailureD0Ev>:
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f7ff ffe7 	bl	800f588 <_ZN25FeatureUnsupportedFailureD1Ev>
 800f5ba:	2134      	movs	r1, #52	; 0x34
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f7fa fbb9 	bl	8009d34 <_ZdlPvj>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3708      	adds	r7, #8
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	4a05      	ldr	r2, [pc, #20]	; (800f5ec <_ZN16BitsEqualFailureD1Ev+0x20>)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7fe fe77 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	08027c88 	.word	0x08027c88

0800f5f0 <_ZN16BitsEqualFailureD0Ev>:
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f7ff ffe7 	bl	800f5cc <_ZN16BitsEqualFailureD1Ev>
 800f5fe:	2134      	movs	r1, #52	; 0x34
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7fa fb97 	bl	8009d34 <_ZdlPvj>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4618      	mov	r0, r3
 800f60a:	3708      	adds	r7, #8
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	4a05      	ldr	r2, [pc, #20]	; (800f630 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	601a      	str	r2, [r3, #0]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	4618      	mov	r0, r3
 800f622:	f7fe fe55 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4618      	mov	r0, r3
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	08027cb4 	.word	0x08027cb4

0800f634 <_ZN18BinaryEqualFailureD0Ev>:
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff ffe7 	bl	800f610 <_ZN18BinaryEqualFailureD1Ev>
 800f642:	2134      	movs	r1, #52	; 0x34
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7fa fb75 	bl	8009d34 <_ZdlPvj>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4618      	mov	r0, r3
 800f64e:	3708      	adds	r7, #8
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	4a05      	ldr	r2, [pc, #20]	; (800f674 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	601a      	str	r2, [r3, #0]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	4618      	mov	r0, r3
 800f666:	f7fe fe33 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	4618      	mov	r0, r3
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}
 800f674:	08027ce0 	.word	0x08027ce0

0800f678 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7ff ffe7 	bl	800f654 <_ZN24StringEqualNoCaseFailureD1Ev>
 800f686:	2134      	movs	r1, #52	; 0x34
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f7fa fb53 	bl	8009d34 <_ZdlPvj>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4618      	mov	r0, r3
 800f692:	3708      	adds	r7, #8
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	4a05      	ldr	r2, [pc, #20]	; (800f6b8 <_ZN18StringEqualFailureD1Ev+0x20>)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	601a      	str	r2, [r3, #0]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7fe fe11 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3708      	adds	r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	08027d0c 	.word	0x08027d0c

0800f6bc <_ZN18StringEqualFailureD0Ev>:
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f7ff ffe7 	bl	800f698 <_ZN18StringEqualFailureD1Ev>
 800f6ca:	2134      	movs	r1, #52	; 0x34
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f7fa fb31 	bl	8009d34 <_ZdlPvj>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	4a05      	ldr	r2, [pc, #20]	; (800f6fc <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	601a      	str	r2, [r3, #0]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fe fdef 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3708      	adds	r7, #8
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	08027d38 	.word	0x08027d38

0800f700 <_ZN23SignedBytesEqualFailureD0Ev>:
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f7ff ffe7 	bl	800f6dc <_ZN23SignedBytesEqualFailureD1Ev>
 800f70e:	2134      	movs	r1, #52	; 0x34
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f7fa fb0f 	bl	8009d34 <_ZdlPvj>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4618      	mov	r0, r3
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	4a05      	ldr	r2, [pc, #20]	; (800f740 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	601a      	str	r2, [r3, #0]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4618      	mov	r0, r3
 800f732:	f7fe fdcd 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4618      	mov	r0, r3
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	08027d64 	.word	0x08027d64

0800f744 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7ff ffe7 	bl	800f720 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800f752:	2134      	movs	r1, #52	; 0x34
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7fa faed 	bl	8009d34 <_ZdlPvj>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4618      	mov	r0, r3
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	4a05      	ldr	r2, [pc, #20]	; (800f784 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	601a      	str	r2, [r3, #0]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	4618      	mov	r0, r3
 800f776:	f7fe fdab 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4618      	mov	r0, r3
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}
 800f784:	08027d90 	.word	0x08027d90

0800f788 <_ZN17LongsEqualFailureD0Ev>:
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f7ff ffe7 	bl	800f764 <_ZN17LongsEqualFailureD1Ev>
 800f796:	2134      	movs	r1, #52	; 0x34
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f7fa facb 	bl	8009d34 <_ZdlPvj>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3708      	adds	r7, #8
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	4a05      	ldr	r2, [pc, #20]	; (800f7c8 <_ZN12CheckFailureD1Ev+0x20>)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	601a      	str	r2, [r3, #0]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fe fd89 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3708      	adds	r7, #8
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}
 800f7c8:	08027dbc 	.word	0x08027dbc

0800f7cc <_ZN12CheckFailureD0Ev>:
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7ff ffe7 	bl	800f7a8 <_ZN12CheckFailureD1Ev>
 800f7da:	2134      	movs	r1, #52	; 0x34
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f7fa faa9 	bl	8009d34 <_ZdlPvj>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3708      	adds	r7, #8
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	4a05      	ldr	r2, [pc, #20]	; (800f80c <_ZN15ContainsFailureD1Ev+0x20>)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	601a      	str	r2, [r3, #0]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7fe fd67 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4618      	mov	r0, r3
 800f806:	3708      	adds	r7, #8
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	08027de8 	.word	0x08027de8

0800f810 <_ZN15ContainsFailureD0Ev>:
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f7ff ffe7 	bl	800f7ec <_ZN15ContainsFailureD1Ev>
 800f81e:	2134      	movs	r1, #52	; 0x34
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f7fa fa87 	bl	8009d34 <_ZdlPvj>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4618      	mov	r0, r3
 800f82a:	3708      	adds	r7, #8
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	4a05      	ldr	r2, [pc, #20]	; (800f850 <_ZN17ComparisonFailureD1Ev+0x20>)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	601a      	str	r2, [r3, #0]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4618      	mov	r0, r3
 800f842:	f7fe fd45 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	08027e14 	.word	0x08027e14

0800f854 <_ZN17ComparisonFailureD0Ev>:
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f7ff ffe7 	bl	800f830 <_ZN17ComparisonFailureD1Ev>
 800f862:	2134      	movs	r1, #52	; 0x34
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7fa fa65 	bl	8009d34 <_ZdlPvj>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4618      	mov	r0, r3
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	4a05      	ldr	r2, [pc, #20]	; (800f894 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	601a      	str	r2, [r3, #0]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	4618      	mov	r0, r3
 800f886:	f7fe fd23 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4618      	mov	r0, r3
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	08027e40 	.word	0x08027e40

0800f898 <_ZN17CheckEqualFailureD0Ev>:
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f7ff ffe7 	bl	800f874 <_ZN17CheckEqualFailureD1Ev>
 800f8a6:	2134      	movs	r1, #52	; 0x34
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7fa fa43 	bl	8009d34 <_ZdlPvj>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	4a05      	ldr	r2, [pc, #20]	; (800f8d8 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	601a      	str	r2, [r3, #0]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fe fd01 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	08027e6c 	.word	0x08027e6c

0800f8dc <_ZN19DoublesEqualFailureD0Ev>:
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f7ff ffe7 	bl	800f8b8 <_ZN19DoublesEqualFailureD1Ev>
 800f8ea:	2134      	movs	r1, #52	; 0x34
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7fa fa21 	bl	8009d34 <_ZdlPvj>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3708      	adds	r7, #8
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	4a05      	ldr	r2, [pc, #20]	; (800f91c <_ZN13EqualsFailureD1Ev+0x20>)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	601a      	str	r2, [r3, #0]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fe fcdf 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	4618      	mov	r0, r3
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	08027e98 	.word	0x08027e98

0800f920 <_ZN13EqualsFailureD0Ev>:
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7ff ffe7 	bl	800f8fc <_ZN13EqualsFailureD1Ev>
 800f92e:	2134      	movs	r1, #52	; 0x34
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7fa f9ff 	bl	8009d34 <_ZdlPvj>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4618      	mov	r0, r3
 800f93a:	3708      	adds	r7, #8
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800f940:	b5b0      	push	{r4, r5, r7, lr}
 800f942:	b086      	sub	sp, #24
 800f944:	af02      	add	r7, sp, #8
 800f946:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800f948:	4b0d      	ldr	r3, [pc, #52]	; (800f980 <_ZL13checkedMallocj+0x40>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	4798      	blx	r3
 800f950:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d10e      	bne.n	800f976 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800f958:	f004 f97e 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 800f95c:	4604      	mov	r4, r0
 800f95e:	6823      	ldr	r3, [r4, #0]
 800f960:	3368      	adds	r3, #104	; 0x68
 800f962:	681d      	ldr	r5, [r3, #0]
 800f964:	f004 f988 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800f968:	4603      	mov	r3, r0
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	2325      	movs	r3, #37	; 0x25
 800f96e:	4a05      	ldr	r2, [pc, #20]	; (800f984 <_ZL13checkedMallocj+0x44>)
 800f970:	4905      	ldr	r1, [pc, #20]	; (800f988 <_ZL13checkedMallocj+0x48>)
 800f972:	4620      	mov	r0, r4
 800f974:	47a8      	blx	r5
    return mem;
 800f976:	68fb      	ldr	r3, [r7, #12]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3710      	adds	r7, #16
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bdb0      	pop	{r4, r5, r7, pc}
 800f980:	200000c8 	.word	0x200000c8
 800f984:	080240fc 	.word	0x080240fc
 800f988:	0802411c 	.word	0x0802411c

0800f98c <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800f990:	4b04      	ldr	r3, [pc, #16]	; (800f9a4 <_Z22getCurrentNewAllocatorv+0x18>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d101      	bne.n	800f99c <_Z22getCurrentNewAllocatorv+0x10>
 800f998:	f000 f806 	bl	800f9a8 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800f99c:	4b01      	ldr	r3, [pc, #4]	; (800f9a4 <_Z22getCurrentNewAllocatorv+0x18>)
 800f99e:	681b      	ldr	r3, [r3, #0]
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	bd80      	pop	{r7, pc}
 800f9a4:	200008a4 	.word	0x200008a4

0800f9a8 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800f9ac:	f000 f810 	bl	800f9d0 <_Z19defaultNewAllocatorv>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	4a02      	ldr	r2, [pc, #8]	; (800f9bc <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800f9b4:	6013      	str	r3, [r2, #0]
}
 800f9b6:	bf00      	nop
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	200008a4 	.word	0x200008a4

0800f9c0 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	4801      	ldr	r0, [pc, #4]	; (800f9cc <__tcf_0+0xc>)
 800f9c6:	f000 f909 	bl	800fbdc <_ZN19TestMemoryAllocatorD1Ev>
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	200008b0 	.word	0x200008b0

0800f9d0 <_Z19defaultNewAllocatorv>:
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800f9d4:	4b13      	ldr	r3, [pc, #76]	; (800fa24 <_Z19defaultNewAllocatorv+0x54>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	f3bf 8f5b 	dmb	ish
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	f003 0301 	and.w	r3, r3, #1
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	bf0c      	ite	eq
 800f9e6:	2301      	moveq	r3, #1
 800f9e8:	2300      	movne	r3, #0
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d016      	beq.n	800fa1e <_Z19defaultNewAllocatorv+0x4e>
 800f9f0:	480c      	ldr	r0, [pc, #48]	; (800fa24 <_Z19defaultNewAllocatorv+0x54>)
 800f9f2:	f00f fc0d 	bl	801f210 <__cxa_guard_acquire>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	bf14      	ite	ne
 800f9fc:	2301      	movne	r3, #1
 800f9fe:	2300      	moveq	r3, #0
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d00b      	beq.n	800fa1e <_Z19defaultNewAllocatorv+0x4e>
 800fa06:	4b08      	ldr	r3, [pc, #32]	; (800fa28 <_Z19defaultNewAllocatorv+0x58>)
 800fa08:	4a08      	ldr	r2, [pc, #32]	; (800fa2c <_Z19defaultNewAllocatorv+0x5c>)
 800fa0a:	4909      	ldr	r1, [pc, #36]	; (800fa30 <_Z19defaultNewAllocatorv+0x60>)
 800fa0c:	4809      	ldr	r0, [pc, #36]	; (800fa34 <_Z19defaultNewAllocatorv+0x64>)
 800fa0e:	f000 f8c5 	bl	800fb9c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fa12:	4804      	ldr	r0, [pc, #16]	; (800fa24 <_Z19defaultNewAllocatorv+0x54>)
 800fa14:	f00f fc08 	bl	801f228 <__cxa_guard_release>
 800fa18:	4807      	ldr	r0, [pc, #28]	; (800fa38 <_Z19defaultNewAllocatorv+0x68>)
 800fa1a:	f00f fc2c 	bl	801f276 <atexit>
    return &allocator;
 800fa1e:	4b05      	ldr	r3, [pc, #20]	; (800fa34 <_Z19defaultNewAllocatorv+0x64>)
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	200008c4 	.word	0x200008c4
 800fa28:	0802413c 	.word	0x0802413c
 800fa2c:	08024144 	.word	0x08024144
 800fa30:	08024148 	.word	0x08024148
 800fa34:	200008b0 	.word	0x200008b0
 800fa38:	0800f9c1 	.word	0x0800f9c1

0800fa3c <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800fa40:	4b04      	ldr	r3, [pc, #16]	; (800fa54 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d101      	bne.n	800fa4c <_Z27getCurrentNewArrayAllocatorv+0x10>
 800fa48:	f000 f806 	bl	800fa58 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800fa4c:	4b01      	ldr	r3, [pc, #4]	; (800fa54 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	200008a8 	.word	0x200008a8

0800fa58 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800fa5c:	f000 f810 	bl	800fa80 <_Z24defaultNewArrayAllocatorv>
 800fa60:	4603      	mov	r3, r0
 800fa62:	4a02      	ldr	r2, [pc, #8]	; (800fa6c <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800fa64:	6013      	str	r3, [r2, #0]
}
 800fa66:	bf00      	nop
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	200008a8 	.word	0x200008a8

0800fa70 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800fa70:	b580      	push	{r7, lr}
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	4801      	ldr	r0, [pc, #4]	; (800fa7c <__tcf_1+0xc>)
 800fa76:	f000 f8b1 	bl	800fbdc <_ZN19TestMemoryAllocatorD1Ev>
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	200008c8 	.word	0x200008c8

0800fa80 <_Z24defaultNewArrayAllocatorv>:
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800fa84:	4b13      	ldr	r3, [pc, #76]	; (800fad4 <_Z24defaultNewArrayAllocatorv+0x54>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	f3bf 8f5b 	dmb	ish
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	f003 0301 	and.w	r3, r3, #1
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	bf0c      	ite	eq
 800fa96:	2301      	moveq	r3, #1
 800fa98:	2300      	movne	r3, #0
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d016      	beq.n	800face <_Z24defaultNewArrayAllocatorv+0x4e>
 800faa0:	480c      	ldr	r0, [pc, #48]	; (800fad4 <_Z24defaultNewArrayAllocatorv+0x54>)
 800faa2:	f00f fbb5 	bl	801f210 <__cxa_guard_acquire>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	bf14      	ite	ne
 800faac:	2301      	movne	r3, #1
 800faae:	2300      	moveq	r3, #0
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d00b      	beq.n	800face <_Z24defaultNewArrayAllocatorv+0x4e>
 800fab6:	4b08      	ldr	r3, [pc, #32]	; (800fad8 <_Z24defaultNewArrayAllocatorv+0x58>)
 800fab8:	4a08      	ldr	r2, [pc, #32]	; (800fadc <_Z24defaultNewArrayAllocatorv+0x5c>)
 800faba:	4909      	ldr	r1, [pc, #36]	; (800fae0 <_Z24defaultNewArrayAllocatorv+0x60>)
 800fabc:	4809      	ldr	r0, [pc, #36]	; (800fae4 <_Z24defaultNewArrayAllocatorv+0x64>)
 800fabe:	f000 f86d 	bl	800fb9c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fac2:	4804      	ldr	r0, [pc, #16]	; (800fad4 <_Z24defaultNewArrayAllocatorv+0x54>)
 800fac4:	f00f fbb0 	bl	801f228 <__cxa_guard_release>
 800fac8:	4807      	ldr	r0, [pc, #28]	; (800fae8 <_Z24defaultNewArrayAllocatorv+0x68>)
 800faca:	f00f fbd4 	bl	801f276 <atexit>
    return &allocator;
 800face:	4b05      	ldr	r3, [pc, #20]	; (800fae4 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	200008dc 	.word	0x200008dc
 800fad8:	08024160 	.word	0x08024160
 800fadc:	0802416c 	.word	0x0802416c
 800fae0:	08024174 	.word	0x08024174
 800fae4:	200008c8 	.word	0x200008c8
 800fae8:	0800fa71 	.word	0x0800fa71

0800faec <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800faec:	b580      	push	{r7, lr}
 800faee:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800faf0:	4b04      	ldr	r3, [pc, #16]	; (800fb04 <_Z25getCurrentMallocAllocatorv+0x18>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d101      	bne.n	800fafc <_Z25getCurrentMallocAllocatorv+0x10>
 800faf8:	f000 f806 	bl	800fb08 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800fafc:	4b01      	ldr	r3, [pc, #4]	; (800fb04 <_Z25getCurrentMallocAllocatorv+0x18>)
 800fafe:	681b      	ldr	r3, [r3, #0]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	200008ac 	.word	0x200008ac

0800fb08 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800fb0c:	f000 f810 	bl	800fb30 <_Z22defaultMallocAllocatorv>
 800fb10:	4603      	mov	r3, r0
 800fb12:	4a02      	ldr	r2, [pc, #8]	; (800fb1c <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800fb14:	6013      	str	r3, [r2, #0]
}
 800fb16:	bf00      	nop
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	200008ac 	.word	0x200008ac

0800fb20 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800fb20:	b580      	push	{r7, lr}
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	4801      	ldr	r0, [pc, #4]	; (800fb2c <__tcf_2+0xc>)
 800fb26:	f000 f859 	bl	800fbdc <_ZN19TestMemoryAllocatorD1Ev>
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	200008e0 	.word	0x200008e0

0800fb30 <_Z22defaultMallocAllocatorv>:
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800fb34:	4b13      	ldr	r3, [pc, #76]	; (800fb84 <_Z22defaultMallocAllocatorv+0x54>)
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	f3bf 8f5b 	dmb	ish
 800fb3c:	b2db      	uxtb	r3, r3
 800fb3e:	f003 0301 	and.w	r3, r3, #1
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	bf0c      	ite	eq
 800fb46:	2301      	moveq	r3, #1
 800fb48:	2300      	movne	r3, #0
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d016      	beq.n	800fb7e <_Z22defaultMallocAllocatorv+0x4e>
 800fb50:	480c      	ldr	r0, [pc, #48]	; (800fb84 <_Z22defaultMallocAllocatorv+0x54>)
 800fb52:	f00f fb5d 	bl	801f210 <__cxa_guard_acquire>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	bf14      	ite	ne
 800fb5c:	2301      	movne	r3, #1
 800fb5e:	2300      	moveq	r3, #0
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00b      	beq.n	800fb7e <_Z22defaultMallocAllocatorv+0x4e>
 800fb66:	4b08      	ldr	r3, [pc, #32]	; (800fb88 <_Z22defaultMallocAllocatorv+0x58>)
 800fb68:	4a08      	ldr	r2, [pc, #32]	; (800fb8c <_Z22defaultMallocAllocatorv+0x5c>)
 800fb6a:	4909      	ldr	r1, [pc, #36]	; (800fb90 <_Z22defaultMallocAllocatorv+0x60>)
 800fb6c:	4809      	ldr	r0, [pc, #36]	; (800fb94 <_Z22defaultMallocAllocatorv+0x64>)
 800fb6e:	f000 f815 	bl	800fb9c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fb72:	4804      	ldr	r0, [pc, #16]	; (800fb84 <_Z22defaultMallocAllocatorv+0x54>)
 800fb74:	f00f fb58 	bl	801f228 <__cxa_guard_release>
 800fb78:	4807      	ldr	r0, [pc, #28]	; (800fb98 <_Z22defaultMallocAllocatorv+0x68>)
 800fb7a:	f00f fb7c 	bl	801f276 <atexit>
    return &allocator;
 800fb7e:	4b05      	ldr	r3, [pc, #20]	; (800fb94 <_Z22defaultMallocAllocatorv+0x64>)
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	200008f4 	.word	0x200008f4
 800fb88:	08024190 	.word	0x08024190
 800fb8c:	08024198 	.word	0x08024198
 800fb90:	080241a0 	.word	0x080241a0
 800fb94:	200008e0 	.word	0x200008e0
 800fb98:	0800fb21 	.word	0x0800fb21

0800fb9c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800fb9c:	b480      	push	{r7}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	607a      	str	r2, [r7, #4]
 800fba8:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800fbaa:	4a0b      	ldr	r2, [pc, #44]	; (800fbd8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	601a      	str	r2, [r3, #0]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	68ba      	ldr	r2, [r7, #8]
 800fbb4:	605a      	str	r2, [r3, #4]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	609a      	str	r2, [r3, #8]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	683a      	ldr	r2, [r7, #0]
 800fbc0:	60da      	str	r2, [r3, #12]
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	741a      	strb	r2, [r3, #16]
{
}
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3714      	adds	r7, #20
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop
 800fbd8:	08027f24 	.word	0x08027f24

0800fbdc <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	4a06      	ldr	r2, [pc, #24]	; (800fc00 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2201      	movs	r2, #1
 800fbee:	741a      	strb	r2, [r3, #16]
}
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	08027f24 	.word	0x08027f24

0800fc04 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
}
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7ff ffe5 	bl	800fbdc <_ZN19TestMemoryAllocatorD1Ev>
 800fc12:	2114      	movs	r1, #20
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f7fa f88d 	bl	8009d34 <_ZdlPvj>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	7c1b      	ldrb	r3, [r3, #16]
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800fc3c:	b590      	push	{r4, r7, lr}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	3310      	adds	r3, #16
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	4798      	blx	r3
 800fc52:	4604      	mov	r4, r0
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	3310      	adds	r3, #16
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	6838      	ldr	r0, [r7, #0]
 800fc5e:	4798      	blx	r3
 800fc60:	4603      	mov	r3, r0
 800fc62:	4619      	mov	r1, r3
 800fc64:	4620      	mov	r0, r4
 800fc66:	f7fc fa51 	bl	800c10c <_ZN12SimpleString6StrCmpEPKcS1_>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	bf0c      	ite	eq
 800fc70:	2301      	moveq	r3, #1
 800fc72:	2300      	movne	r3, #0
 800fc74:	b2db      	uxtb	r3, r3
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	370c      	adds	r7, #12
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd90      	pop	{r4, r7, pc}
	...

0800fc80 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800fc80:	b590      	push	{r4, r7, lr}
 800fc82:	b083      	sub	sp, #12
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	3308      	adds	r3, #8
 800fc90:	681c      	ldr	r4, [r3, #0]
 800fc92:	2301      	movs	r3, #1
 800fc94:	4a04      	ldr	r2, [pc, #16]	; (800fca8 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800fc96:	6839      	ldr	r1, [r7, #0]
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	47a0      	blx	r4
 800fc9c:	4603      	mov	r3, r0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	370c      	adds	r7, #12
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd90      	pop	{r4, r7, pc}
 800fca6:	bf00      	nop
 800fca8:	080241bc 	.word	0x080241bc

0800fcac <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800fcac:	b590      	push	{r4, r7, lr}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af02      	add	r7, sp, #8
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	330c      	adds	r3, #12
 800fcbc:	681c      	ldr	r4, [r3, #0]
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	4b04      	ldr	r3, [pc, #16]	; (800fcd4 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	6839      	ldr	r1, [r7, #0]
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	47a0      	blx	r4
}
 800fccc:	bf00      	nop
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd90      	pop	{r4, r7, pc}
 800fcd4:	080241bc 	.word	0x080241bc

0800fcd8 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
 800fce4:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800fce6:	68b8      	ldr	r0, [r7, #8]
 800fce8:	f7ff fe2a 	bl	800f940 <_ZL13checkedMallocj>
 800fcec:	4603      	mov	r3, r0
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3710      	adds	r7, #16
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
	...

0800fcf8 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
 800fd04:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800fd06:	4b04      	ldr	r3, [pc, #16]	; (800fd18 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	68b8      	ldr	r0, [r7, #8]
 800fd0c:	4798      	blx	r3
}
 800fd0e:	bf00      	nop
 800fd10:	3710      	adds	r7, #16
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	200000d0 	.word	0x200000d0

0800fd1c <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
    return name_;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	685b      	ldr	r3, [r3, #4]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	370c      	adds	r7, #12
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	689b      	ldr	r3, [r3, #8]
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	370c      	adds	r7, #12
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
    return free_name_;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	68db      	ldr	r3, [r3, #12]
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
    return this;
 800fd6c:	687b      	ldr	r3, [r7, #4]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	370c      	adds	r7, #12
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
	...

0800fd7c <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	4a05      	ldr	r2, [pc, #20]	; (800fd9c <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	601a      	str	r2, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff ff25 	bl	800fbdc <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	08027ef0 	.word	0x08027ef0

0800fda0 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
}
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7ff ffe7 	bl	800fd7c <_ZN20NullUnknownAllocatorD1Ev>
 800fdae:	2114      	movs	r1, #20
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f7f9 ffbf 	bl	8009d34 <_ZdlPvj>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b085      	sub	sp, #20
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
 800fdcc:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800fdce:	2300      	movs	r3, #0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3714      	adds	r7, #20
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr

0800fddc <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b085      	sub	sp, #20
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]
 800fde8:	603b      	str	r3, [r7, #0]
}
 800fdea:	bf00      	nop
 800fdec:	3714      	adds	r7, #20
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr
	...

0800fdf8 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	4b06      	ldr	r3, [pc, #24]	; (800fe1c <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800fe04:	4a05      	ldr	r2, [pc, #20]	; (800fe1c <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800fe06:	4906      	ldr	r1, [pc, #24]	; (800fe20 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800fe08:	f7ff fec8 	bl	800fb9c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fe0c:	4a05      	ldr	r2, [pc, #20]	; (800fe24 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	601a      	str	r2, [r3, #0]
{
}
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	080241f0 	.word	0x080241f0
 800fe20:	080241f8 	.word	0x080241f8
 800fe24:	08027ef0 	.word	0x08027ef0

0800fe28 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	4801      	ldr	r0, [pc, #4]	; (800fe34 <__tcf_3+0xc>)
 800fe2e:	f7ff ffa5 	bl	800fd7c <_ZN20NullUnknownAllocatorD1Ev>
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	200008f8 	.word	0x200008f8

0800fe38 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800fe3c:	4b12      	ldr	r3, [pc, #72]	; (800fe88 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	f3bf 8f5b 	dmb	ish
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	f003 0301 	and.w	r3, r3, #1
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	bf0c      	ite	eq
 800fe4e:	2301      	moveq	r3, #1
 800fe50:	2300      	movne	r3, #0
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d013      	beq.n	800fe80 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800fe58:	480b      	ldr	r0, [pc, #44]	; (800fe88 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800fe5a:	f00f f9d9 	bl	801f210 <__cxa_guard_acquire>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	bf14      	ite	ne
 800fe64:	2301      	movne	r3, #1
 800fe66:	2300      	moveq	r3, #0
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d008      	beq.n	800fe80 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800fe6e:	4807      	ldr	r0, [pc, #28]	; (800fe8c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800fe70:	f7ff ffc2 	bl	800fdf8 <_ZN20NullUnknownAllocatorC1Ev>
 800fe74:	4804      	ldr	r0, [pc, #16]	; (800fe88 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800fe76:	f00f f9d7 	bl	801f228 <__cxa_guard_release>
 800fe7a:	4805      	ldr	r0, [pc, #20]	; (800fe90 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800fe7c:	f00f f9fb 	bl	801f276 <atexit>
    return &allocator;
 800fe80:	4b02      	ldr	r3, [pc, #8]	; (800fe8c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	2000090c 	.word	0x2000090c
 800fe8c:	200008f8 	.word	0x200008f8
 800fe90:	0800fe29 	.word	0x0800fe29

0800fe94 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
        return testCount_;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	689b      	ldr	r3, [r3, #8]
    }
 800fea0:	4618      	mov	r0, r3
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr

0800feac <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800feac:	b480      	push	{r7}
 800feae:	b083      	sub	sp, #12
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	699b      	ldr	r3, [r3, #24]
    }
 800feb8:	4618      	mov	r0, r3
 800feba:	370c      	adds	r7, #12
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr

0800fec4 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800fec8:	4b05      	ldr	r3, [pc, #20]	; (800fee0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	2b02      	cmp	r3, #2
 800fece:	d103      	bne.n	800fed8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800fed0:	f004 fa4a 	bl	8014368 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800fed4:	4603      	mov	r3, r0
 800fed6:	e001      	b.n	800fedc <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800fed8:	4b01      	ldr	r3, [pc, #4]	; (800fee0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800feda:	781b      	ldrb	r3, [r3, #0]
}
 800fedc:	4618      	mov	r0, r3
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	20000088 	.word	0x20000088

0800fee4 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800feec:	4a0a      	ldr	r2, [pc, #40]	; (800ff18 <_ZN10TestOutputC1Ev+0x34>)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	601a      	str	r2, [r3, #0]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	605a      	str	r2, [r3, #4]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2200      	movs	r2, #0
 800fefc:	721a      	strb	r2, [r3, #8]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	725a      	strb	r2, [r3, #9]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	4a05      	ldr	r2, [pc, #20]	; (800ff1c <_ZN10TestOutputC1Ev+0x38>)
 800ff08:	60da      	str	r2, [r3, #12]
{
}
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr
 800ff18:	08028028 	.word	0x08028028
 800ff1c:	080245f8 	.word	0x080245f8

0800ff20 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	4a04      	ldr	r2, [pc, #16]	; (800ff3c <_ZN10TestOutputD1Ev+0x1c>)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	601a      	str	r2, [r3, #0]
{
}
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4618      	mov	r0, r3
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr
 800ff3c:	08028028 	.word	0x08028028

0800ff40 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	78fa      	ldrb	r2, [r7, #3]
 800ff50:	721a      	strb	r2, [r3, #8]
}
 800ff52:	bf00      	nop
 800ff54:	370c      	adds	r7, #12
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr

0800ff5e <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800ff5e:	b480      	push	{r7}
 800ff60:	b083      	sub	sp, #12
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
    color_ = true;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2201      	movs	r2, #1
 800ff6a:	725a      	strb	r2, [r3, #9]
}
 800ff6c:	bf00      	nop
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	3328      	adds	r3, #40	; 0x28
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	6839      	ldr	r1, [r7, #0]
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	4798      	blx	r3
}
 800ff90:	bf00      	nop
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800ff98:	b590      	push	{r4, r7, lr}
 800ff9a:	b085      	sub	sp, #20
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	332c      	adds	r3, #44	; 0x2c
 800ffa8:	681c      	ldr	r4, [r3, #0]
 800ffaa:	f107 0308 	add.w	r3, r7, #8
 800ffae:	6839      	ldr	r1, [r7, #0]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fd f8ff 	bl	800d1b4 <_Z10StringFroml>
 800ffb6:	f107 0308 	add.w	r3, r7, #8
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7fc fdf4 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	47a0      	blx	r4
 800ffc8:	f107 0308 	add.w	r3, r7, #8
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7fc fe18 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 800ffd2:	bf00      	nop
 800ffd4:	3714      	adds	r7, #20
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd90      	pop	{r4, r7, pc}

0800ffda <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800ffda:	b590      	push	{r4, r7, lr}
 800ffdc:	b085      	sub	sp, #20
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
 800ffe2:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	332c      	adds	r3, #44	; 0x2c
 800ffea:	681c      	ldr	r4, [r3, #0]
 800ffec:	f107 0308 	add.w	r3, r7, #8
 800fff0:	6839      	ldr	r1, [r7, #0]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fd fb34 	bl	800d660 <_Z10StringFromj>
 800fff8:	f107 0308 	add.w	r3, r7, #8
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7fc fdd3 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8010002:	4603      	mov	r3, r0
 8010004:	4619      	mov	r1, r3
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	47a0      	blx	r4
 801000a:	f107 0308 	add.w	r3, r7, #8
 801000e:	4618      	mov	r0, r3
 8010010:	f7fc fdf7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8010014:	bf00      	nop
 8010016:	3714      	adds	r7, #20
 8010018:	46bd      	mov	sp, r7
 801001a:	bd90      	pop	{r4, r7, pc}

0801001c <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 801001c:	b590      	push	{r4, r7, lr}
 801001e:	b087      	sub	sp, #28
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	332c      	adds	r3, #44	; 0x2c
 801002e:	681c      	ldr	r4, [r3, #0]
 8010030:	f107 0310 	add.w	r3, r7, #16
 8010034:	2106      	movs	r1, #6
 8010036:	ed97 0b00 	vldr	d0, [r7]
 801003a:	4618      	mov	r0, r3
 801003c:	f7fd faa6 	bl	800d58c <_Z10StringFromdi>
 8010040:	f107 0310 	add.w	r3, r7, #16
 8010044:	4618      	mov	r0, r3
 8010046:	f7fc fdaf 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801004a:	4603      	mov	r3, r0
 801004c:	4619      	mov	r1, r3
 801004e:	68f8      	ldr	r0, [r7, #12]
 8010050:	47a0      	blx	r4
 8010052:	f107 0310 	add.w	r3, r7, #16
 8010056:	4618      	mov	r0, r3
 8010058:	f7fc fdd3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801005c:	bf00      	nop
 801005e:	371c      	adds	r7, #28
 8010060:	46bd      	mov	sp, r7
 8010062:	bd90      	pop	{r4, r7, pc}

08010064 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
    p.print(s);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	332c      	adds	r3, #44	; 0x2c
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	6839      	ldr	r1, [r7, #0]
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	4798      	blx	r3
    return p;
 801007c:	687b      	ldr	r3, [r7, #4]
}
 801007e:	4618      	mov	r0, r3
 8010080:	3708      	adds	r7, #8
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
	...

08010088 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8010088:	b590      	push	{r4, r7, lr}
 801008a:	b085      	sub	sp, #20
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	7a1b      	ldrb	r3, [r3, #8]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d01a      	beq.n	80100d0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	332c      	adds	r3, #44	; 0x2c
 80100a0:	681c      	ldr	r4, [r3, #0]
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	3314      	adds	r3, #20
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f107 0208 	add.w	r2, r7, #8
 80100ae:	6839      	ldr	r1, [r7, #0]
 80100b0:	4610      	mov	r0, r2
 80100b2:	4798      	blx	r3
 80100b4:	f107 0308 	add.w	r3, r7, #8
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fc fd75 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 80100be:	4603      	mov	r3, r0
 80100c0:	4619      	mov	r1, r3
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	47a0      	blx	r4
 80100c6:	f107 0308 	add.w	r3, r7, #8
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fc fd99 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	3318      	adds	r3, #24
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	6838      	ldr	r0, [r7, #0]
 80100da:	4798      	blx	r3
 80100dc:	4603      	mov	r3, r0
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d007      	beq.n	80100f2 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	3344      	adds	r3, #68	; 0x44
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4907      	ldr	r1, [pc, #28]	; (8010108 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 80100f0:	e006      	b.n	8010100 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	3344      	adds	r3, #68	; 0x44
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4904      	ldr	r1, [pc, #16]	; (801010c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	4798      	blx	r3
}
 8010100:	bf00      	nop
 8010102:	3714      	adds	r7, #20
 8010104:	46bd      	mov	sp, r7
 8010106:	bd90      	pop	{r4, r7, pc}
 8010108:	080245f8 	.word	0x080245f8
 801010c:	080245fc 	.word	0x080245fc

08010110 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010110:	b590      	push	{r4, r7, lr}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	7a1b      	ldrb	r3, [r3, #8]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d019      	beq.n	8010156 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	332c      	adds	r3, #44	; 0x2c
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4910      	ldr	r1, [pc, #64]	; (801016c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	3334      	adds	r3, #52	; 0x34
 8010136:	681c      	ldr	r4, [r3, #0]
 8010138:	6838      	ldr	r0, [r7, #0]
 801013a:	f002 f845 	bl	80121c8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 801013e:	4603      	mov	r3, r0
 8010140:	4619      	mov	r1, r3
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	47a0      	blx	r4
        print(" ms\n");
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	332c      	adds	r3, #44	; 0x2c
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4908      	ldr	r1, [pc, #32]	; (8010170 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 8010154:	e005      	b.n	8010162 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	3358      	adds	r3, #88	; 0x58
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	4798      	blx	r3
}
 8010162:	bf00      	nop
 8010164:	370c      	adds	r7, #12
 8010166:	46bd      	mov	sp, r7
 8010168:	bd90      	pop	{r4, r7, pc}
 801016a:	bf00      	nop
 801016c:	08024600 	.word	0x08024600
 8010170:	08024604 	.word	0x08024604

08010174 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	332c      	adds	r3, #44	; 0x2c
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	68d2      	ldr	r2, [r2, #12]
 8010188:	4611      	mov	r1, r2
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	685b      	ldr	r3, [r3, #4]
 8010192:	1c5a      	adds	r2, r3, #1
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	605a      	str	r2, [r3, #4]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	685a      	ldr	r2, [r3, #4]
 801019c:	4b0d      	ldr	r3, [pc, #52]	; (80101d4 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 801019e:	fb83 1302 	smull	r1, r3, r3, r2
 80101a2:	1119      	asrs	r1, r3, #4
 80101a4:	17d3      	asrs	r3, r2, #31
 80101a6:	1acb      	subs	r3, r1, r3
 80101a8:	2132      	movs	r1, #50	; 0x32
 80101aa:	fb01 f303 	mul.w	r3, r1, r3
 80101ae:	1ad3      	subs	r3, r2, r3
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	bf0c      	ite	eq
 80101b4:	2301      	moveq	r3, #1
 80101b6:	2300      	movne	r3, #0
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d006      	beq.n	80101cc <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	332c      	adds	r3, #44	; 0x2c
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	4904      	ldr	r1, [pc, #16]	; (80101d8 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	4798      	blx	r3
}
 80101cc:	bf00      	nop
 80101ce:	3708      	adds	r7, #8
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}
 80101d4:	51eb851f 	.word	0x51eb851f
 80101d8:	0802460c 	.word	0x0802460c

080101dc <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 80101dc:	b480      	push	{r7}
 80101de:	b083      	sub	sp, #12
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	683a      	ldr	r2, [r7, #0]
 80101ea:	60da      	str	r2, [r3, #12]
}
 80101ec:	bf00      	nop
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 80101f8:	b480      	push	{r7}
 80101fa:	b083      	sub	sp, #12
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
}
 8010200:	bf00      	nop
 8010202:	370c      	adds	r7, #12
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr

0801020c <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 801020c:	b480      	push	{r7}
 801020e:	b083      	sub	sp, #12
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
}
 8010216:	bf00      	nop
 8010218:	370c      	adds	r7, #12
 801021a:	46bd      	mov	sp, r7
 801021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010220:	4770      	bx	lr

08010222 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8010222:	b480      	push	{r7}
 8010224:	b083      	sub	sp, #12
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
 801022a:	6039      	str	r1, [r7, #0]
}
 801022c:	bf00      	nop
 801022e:	370c      	adds	r7, #12
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr

08010238 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8010238:	b590      	push	{r4, r7, lr}
 801023a:	b085      	sub	sp, #20
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6039      	str	r1, [r7, #0]
    print("\n");
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	332c      	adds	r3, #44	; 0x2c
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	496f      	ldr	r1, [pc, #444]	; (8010408 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 8010250:	6838      	ldr	r0, [r7, #0]
 8010252:	f7f8 f83d 	bl	80082d0 <_ZNK10TestResult9isFailureEv>
 8010256:	4603      	mov	r3, r0
 8010258:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 801025a:	6838      	ldr	r0, [r7, #0]
 801025c:	f7f8 f82c 	bl	80082b8 <_ZNK10TestResult15getFailureCountEv>
 8010260:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 8010262:	7bfb      	ldrb	r3, [r7, #15]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d02b      	beq.n	80102c0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	7a5b      	ldrb	r3, [r3, #9]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d006      	beq.n	801027e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	332c      	adds	r3, #44	; 0x2c
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4964      	ldr	r1, [pc, #400]	; (801040c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	4798      	blx	r3
        }
        print("Errors (");
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	332c      	adds	r3, #44	; 0x2c
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4962      	ldr	r1, [pc, #392]	; (8010410 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	4798      	blx	r3
        if (failureCount > 0) {
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d00e      	beq.n	80102b0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	3334      	adds	r3, #52	; 0x34
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	68b9      	ldr	r1, [r7, #8]
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	4798      	blx	r3
            print(" failures, ");
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	332c      	adds	r3, #44	; 0x2c
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	495a      	ldr	r1, [pc, #360]	; (8010414 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	4798      	blx	r3
 80102ae:	e019      	b.n	80102e4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	332c      	adds	r3, #44	; 0x2c
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4957      	ldr	r1, [pc, #348]	; (8010418 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	4798      	blx	r3
 80102be:	e011      	b.n	80102e4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	7a5b      	ldrb	r3, [r3, #9]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d006      	beq.n	80102d6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	332c      	adds	r3, #44	; 0x2c
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	4952      	ldr	r1, [pc, #328]	; (801041c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	4798      	blx	r3
        }
        print("OK (");
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	332c      	adds	r3, #44	; 0x2c
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	4950      	ldr	r1, [pc, #320]	; (8010420 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	4798      	blx	r3
    }
    print(result.getTestCount());
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	3334      	adds	r3, #52	; 0x34
 80102ea:	681c      	ldr	r4, [r3, #0]
 80102ec:	6838      	ldr	r0, [r7, #0]
 80102ee:	f7ff fdd1 	bl	800fe94 <_ZNK10TestResult12getTestCountEv>
 80102f2:	4603      	mov	r3, r0
 80102f4:	4619      	mov	r1, r3
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	47a0      	blx	r4
    print(" tests, ");
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	332c      	adds	r3, #44	; 0x2c
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	4948      	ldr	r1, [pc, #288]	; (8010424 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	4798      	blx	r3
    print(result.getRunCount());
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	3334      	adds	r3, #52	; 0x34
 801030e:	681c      	ldr	r4, [r3, #0]
 8010310:	6838      	ldr	r0, [r7, #0]
 8010312:	f7f7 ffb9 	bl	8008288 <_ZNK10TestResult11getRunCountEv>
 8010316:	4603      	mov	r3, r0
 8010318:	4619      	mov	r1, r3
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	47a0      	blx	r4
    print(" ran, ");
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	332c      	adds	r3, #44	; 0x2c
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4940      	ldr	r1, [pc, #256]	; (8010428 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	4798      	blx	r3
    print(result.getCheckCount());
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	3334      	adds	r3, #52	; 0x34
 8010332:	681c      	ldr	r4, [r3, #0]
 8010334:	6838      	ldr	r0, [r7, #0]
 8010336:	f7f8 fc13 	bl	8008b60 <_ZNK10TestResult13getCheckCountEv>
 801033a:	4603      	mov	r3, r0
 801033c:	4619      	mov	r1, r3
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	47a0      	blx	r4
    print(" checks, ");
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	332c      	adds	r3, #44	; 0x2c
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4938      	ldr	r1, [pc, #224]	; (801042c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	4798      	blx	r3
    print(result.getIgnoredCount());
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	3334      	adds	r3, #52	; 0x34
 8010356:	681c      	ldr	r4, [r3, #0]
 8010358:	6838      	ldr	r0, [r7, #0]
 801035a:	f7f7 ffa1 	bl	80082a0 <_ZNK10TestResult15getIgnoredCountEv>
 801035e:	4603      	mov	r3, r0
 8010360:	4619      	mov	r1, r3
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	47a0      	blx	r4
    print(" ignored, ");
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	332c      	adds	r3, #44	; 0x2c
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	4930      	ldr	r1, [pc, #192]	; (8010430 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	3334      	adds	r3, #52	; 0x34
 801037a:	681c      	ldr	r4, [r3, #0]
 801037c:	6838      	ldr	r0, [r7, #0]
 801037e:	f7ff fd95 	bl	800feac <_ZNK10TestResult19getFilteredOutCountEv>
 8010382:	4603      	mov	r3, r0
 8010384:	4619      	mov	r1, r3
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	47a0      	blx	r4
    print(" filtered out, ");
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	332c      	adds	r3, #44	; 0x2c
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	4928      	ldr	r1, [pc, #160]	; (8010434 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	3334      	adds	r3, #52	; 0x34
 801039e:	681c      	ldr	r4, [r3, #0]
 80103a0:	6838      	ldr	r0, [r7, #0]
 80103a2:	f001 ff05 	bl	80121b0 <_ZNK10TestResult21getTotalExecutionTimeEv>
 80103a6:	4603      	mov	r3, r0
 80103a8:	4619      	mov	r1, r3
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	47a0      	blx	r4
    print(" ms)");
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	332c      	adds	r3, #44	; 0x2c
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4920      	ldr	r1, [pc, #128]	; (8010438 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	4798      	blx	r3
    if (color_) {
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	7a5b      	ldrb	r3, [r3, #9]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d006      	beq.n	80103d2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	332c      	adds	r3, #44	; 0x2c
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	491b      	ldr	r1, [pc, #108]	; (801043c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 80103d2:	7bfb      	ldrb	r3, [r7, #15]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d009      	beq.n	80103ec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d106      	bne.n	80103ec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	332c      	adds	r3, #44	; 0x2c
 80103e4:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 80103e6:	4916      	ldr	r1, [pc, #88]	; (8010440 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	4798      	blx	r3
    }
    print("\n\n");
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	332c      	adds	r3, #44	; 0x2c
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	4913      	ldr	r1, [pc, #76]	; (8010444 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	4798      	blx	r3

    dotCount_ = 0;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2200      	movs	r2, #0
 80103fe:	605a      	str	r2, [r3, #4]
}
 8010400:	bf00      	nop
 8010402:	3714      	adds	r7, #20
 8010404:	46bd      	mov	sp, r7
 8010406:	bd90      	pop	{r4, r7, pc}
 8010408:	0802460c 	.word	0x0802460c
 801040c:	08024610 	.word	0x08024610
 8010410:	08024618 	.word	0x08024618
 8010414:	08024624 	.word	0x08024624
 8010418:	08024630 	.word	0x08024630
 801041c:	08024640 	.word	0x08024640
 8010420:	08024648 	.word	0x08024648
 8010424:	08024650 	.word	0x08024650
 8010428:	0802465c 	.word	0x0802465c
 801042c:	08024664 	.word	0x08024664
 8010430:	08024670 	.word	0x08024670
 8010434:	0802467c 	.word	0x0802467c
 8010438:	0802468c 	.word	0x0802468c
 801043c:	08024694 	.word	0x08024694
 8010440:	08024698 	.word	0x08024698
 8010444:	0802473c 	.word	0x0802473c

08010448 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b01      	cmp	r3, #1
 8010458:	d922      	bls.n	80104a0 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	332c      	adds	r3, #44	; 0x2c
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4911      	ldr	r1, [pc, #68]	; (80104a8 <_ZN10TestOutput12printTestRunEjj+0x60>)
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	4798      	blx	r3
        print(number);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	3334      	adds	r3, #52	; 0x34
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	68b9      	ldr	r1, [r7, #8]
 8010472:	68f8      	ldr	r0, [r7, #12]
 8010474:	4798      	blx	r3
        print(" of ");
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	332c      	adds	r3, #44	; 0x2c
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	490b      	ldr	r1, [pc, #44]	; (80104ac <_ZN10TestOutput12printTestRunEjj+0x64>)
 8010480:	68f8      	ldr	r0, [r7, #12]
 8010482:	4798      	blx	r3
        print(total);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	3334      	adds	r3, #52	; 0x34
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	6879      	ldr	r1, [r7, #4]
 801048e:	68f8      	ldr	r0, [r7, #12]
 8010490:	4798      	blx	r3
        print("\n");
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	332c      	adds	r3, #44	; 0x2c
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4905      	ldr	r1, [pc, #20]	; (80104b0 <_ZN10TestOutput12printTestRunEjj+0x68>)
 801049c:	68f8      	ldr	r0, [r7, #12]
 801049e:	4798      	blx	r3
    }
}
 80104a0:	bf00      	nop
 80104a2:	3710      	adds	r7, #16
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	08024740 	.word	0x08024740
 80104ac:	0802474c 	.word	0x0802474c
 80104b0:	0802460c 	.word	0x0802460c

080104b4 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 80104be:	6838      	ldr	r0, [r7, #0]
 80104c0:	f7fd ffa1 	bl	800e406 <_ZNK11TestFailure17isOutsideTestFileEv>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d105      	bne.n	80104d6 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 80104ca:	6838      	ldr	r0, [r7, #0]
 80104cc:	f7fd ffad 	bl	800e42a <_ZNK11TestFailure18isInHelperFunctionEv>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d001      	beq.n	80104da <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 80104d6:	2301      	movs	r3, #1
 80104d8:	e000      	b.n	80104dc <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 80104da:	2300      	movs	r3, #0
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d004      	beq.n	80104ea <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 80104e0:	6839      	ldr	r1, [r7, #0]
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 f81d 	bl	8010522 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 80104e8:	e003      	b.n	80104f2 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 80104ea:	6839      	ldr	r1, [r7, #0]
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 f86b 	bl	80105c8 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	3318      	adds	r3, #24
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	f107 0208 	add.w	r2, r7, #8
 80104fe:	6839      	ldr	r1, [r7, #0]
 8010500:	4610      	mov	r0, r2
 8010502:	4798      	blx	r3
 8010504:	f107 0308 	add.w	r3, r7, #8
 8010508:	4619      	mov	r1, r3
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f000 f8b2 	bl	8010674 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 8010510:	f107 0308 	add.w	r3, r7, #8
 8010514:	4618      	mov	r0, r3
 8010516:	f7fc fb74 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801051a:	bf00      	nop
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 8010522:	b580      	push	{r7, lr}
 8010524:	b088      	sub	sp, #32
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
 801052a:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	331c      	adds	r3, #28
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f107 0208 	add.w	r2, r7, #8
 8010538:	6839      	ldr	r1, [r7, #0]
 801053a:	4610      	mov	r0, r2
 801053c:	4798      	blx	r3
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	3320      	adds	r3, #32
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	6838      	ldr	r0, [r7, #0]
 8010548:	4798      	blx	r3
 801054a:	4602      	mov	r2, r0
 801054c:	f107 0308 	add.w	r3, r7, #8
 8010550:	4619      	mov	r1, r3
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f000 f8be 	bl	80106d4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010558:	f107 0308 	add.w	r3, r7, #8
 801055c:	4618      	mov	r0, r3
 801055e:	f7fc fb50 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	330c      	adds	r3, #12
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	f107 0210 	add.w	r2, r7, #16
 801056e:	6839      	ldr	r1, [r7, #0]
 8010570:	4610      	mov	r0, r2
 8010572:	4798      	blx	r3
 8010574:	f107 0310 	add.w	r3, r7, #16
 8010578:	4619      	mov	r1, r3
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 f85c 	bl	8010638 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8010580:	f107 0310 	add.w	r3, r7, #16
 8010584:	4618      	mov	r0, r3
 8010586:	f7fc fb3c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	3308      	adds	r3, #8
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f107 0218 	add.w	r2, r7, #24
 8010596:	6839      	ldr	r1, [r7, #0]
 8010598:	4610      	mov	r0, r2
 801059a:	4798      	blx	r3
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	3314      	adds	r3, #20
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	6838      	ldr	r0, [r7, #0]
 80105a6:	4798      	blx	r3
 80105a8:	4602      	mov	r2, r0
 80105aa:	f107 0318 	add.w	r3, r7, #24
 80105ae:	4619      	mov	r1, r3
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f000 f88f 	bl	80106d4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80105b6:	f107 0318 	add.w	r3, r7, #24
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fc fb21 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 80105c0:	bf00      	nop
 80105c2:	3720      	adds	r7, #32
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b086      	sub	sp, #24
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	3308      	adds	r3, #8
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	f107 0208 	add.w	r2, r7, #8
 80105de:	6839      	ldr	r1, [r7, #0]
 80105e0:	4610      	mov	r0, r2
 80105e2:	4798      	blx	r3
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	3314      	adds	r3, #20
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	6838      	ldr	r0, [r7, #0]
 80105ee:	4798      	blx	r3
 80105f0:	4602      	mov	r2, r0
 80105f2:	f107 0308 	add.w	r3, r7, #8
 80105f6:	4619      	mov	r1, r3
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f000 f86b 	bl	80106d4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80105fe:	f107 0308 	add.w	r3, r7, #8
 8010602:	4618      	mov	r0, r3
 8010604:	f7fc fafd 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	330c      	adds	r3, #12
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f107 0210 	add.w	r2, r7, #16
 8010614:	6839      	ldr	r1, [r7, #0]
 8010616:	4610      	mov	r0, r2
 8010618:	4798      	blx	r3
 801061a:	f107 0310 	add.w	r3, r7, #16
 801061e:	4619      	mov	r1, r3
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f000 f809 	bl	8010638 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8010626:	f107 0310 	add.w	r3, r7, #16
 801062a:	4618      	mov	r0, r3
 801062c:	f7fc fae9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8010630:	bf00      	nop
 8010632:	3718      	adds	r7, #24
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 8010638:	b590      	push	{r4, r7, lr}
 801063a:	b083      	sub	sp, #12
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	332c      	adds	r3, #44	; 0x2c
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	4909      	ldr	r1, [pc, #36]	; (8010670 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	4798      	blx	r3
    print(testName.asCharString());
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	332c      	adds	r3, #44	; 0x2c
 8010656:	681c      	ldr	r4, [r3, #0]
 8010658:	6838      	ldr	r0, [r7, #0]
 801065a:	f7fc faa5 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801065e:	4603      	mov	r3, r0
 8010660:	4619      	mov	r1, r3
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	47a0      	blx	r4
}
 8010666:	bf00      	nop
 8010668:	370c      	adds	r7, #12
 801066a:	46bd      	mov	sp, r7
 801066c:	bd90      	pop	{r4, r7, pc}
 801066e:	bf00      	nop
 8010670:	08024754 	.word	0x08024754

08010674 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8010674:	b590      	push	{r4, r7, lr}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	6039      	str	r1, [r7, #0]
    print("\n");
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	332c      	adds	r3, #44	; 0x2c
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4910      	ldr	r1, [pc, #64]	; (80106c8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	4798      	blx	r3
    print("\t");
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	332c      	adds	r3, #44	; 0x2c
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	490d      	ldr	r1, [pc, #52]	; (80106cc <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	4798      	blx	r3
    print(reason.asCharString());
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	332c      	adds	r3, #44	; 0x2c
 80106a0:	681c      	ldr	r4, [r3, #0]
 80106a2:	6838      	ldr	r0, [r7, #0]
 80106a4:	f7fc fa80 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 80106a8:	4603      	mov	r3, r0
 80106aa:	4619      	mov	r1, r3
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	47a0      	blx	r4
    print("\n\n");
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	332c      	adds	r3, #44	; 0x2c
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4905      	ldr	r1, [pc, #20]	; (80106d0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	4798      	blx	r3
}
 80106be:	bf00      	nop
 80106c0:	370c      	adds	r7, #12
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd90      	pop	{r4, r7, pc}
 80106c6:	bf00      	nop
 80106c8:	0802460c 	.word	0x0802460c
 80106cc:	08024764 	.word	0x08024764
 80106d0:	0802473c 	.word	0x0802473c

080106d4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 80106d4:	b590      	push	{r4, r7, lr}
 80106d6:	b089      	sub	sp, #36	; 0x24
 80106d8:	af00      	add	r7, sp, #0
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 80106e0:	f7ff fbf0 	bl	800fec4 <_ZN10TestOutput21getWorkingEnvironmentEv>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	bf0c      	ite	eq
 80106ea:	2301      	moveq	r3, #1
 80106ec:	2300      	movne	r3, #0
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d015      	beq.n	8010720 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	3354      	adds	r3, #84	; 0x54
 80106fa:	681c      	ldr	r4, [r3, #0]
 80106fc:	f107 0310 	add.w	r3, r7, #16
 8010700:	68b9      	ldr	r1, [r7, #8]
 8010702:	4618      	mov	r0, r3
 8010704:	f7fb ff19 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 8010708:	f107 0310 	add.w	r3, r7, #16
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	4619      	mov	r1, r3
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	47a0      	blx	r4
 8010714:	f107 0310 	add.w	r3, r7, #16
 8010718:	4618      	mov	r0, r3
 801071a:	f7fc fa72 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 801071e:	e014      	b.n	801074a <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	3350      	adds	r3, #80	; 0x50
 8010726:	681c      	ldr	r4, [r3, #0]
 8010728:	f107 0318 	add.w	r3, r7, #24
 801072c:	68b9      	ldr	r1, [r7, #8]
 801072e:	4618      	mov	r0, r3
 8010730:	f7fb ff03 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 8010734:	f107 0318 	add.w	r3, r7, #24
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	4619      	mov	r1, r3
 801073c:	68f8      	ldr	r0, [r7, #12]
 801073e:	47a0      	blx	r4
 8010740:	f107 0318 	add.w	r3, r7, #24
 8010744:	4618      	mov	r0, r3
 8010746:	f7fc fa5c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801074a:	bf00      	nop
 801074c:	3724      	adds	r7, #36	; 0x24
 801074e:	46bd      	mov	sp, r7
 8010750:	bd90      	pop	{r4, r7, pc}
	...

08010754 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8010754:	b590      	push	{r4, r7, lr}
 8010756:	b085      	sub	sp, #20
 8010758:	af00      	add	r7, sp, #0
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	60b9      	str	r1, [r7, #8]
 801075e:	607a      	str	r2, [r7, #4]
    print("\n");
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	332c      	adds	r3, #44	; 0x2c
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	4916      	ldr	r1, [pc, #88]	; (80107c4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 801076a:	68f8      	ldr	r0, [r7, #12]
 801076c:	4798      	blx	r3
    print(file.asCharString());
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	332c      	adds	r3, #44	; 0x2c
 8010774:	681c      	ldr	r4, [r3, #0]
 8010776:	68b8      	ldr	r0, [r7, #8]
 8010778:	f7fc fa16 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801077c:	4603      	mov	r3, r0
 801077e:	4619      	mov	r1, r3
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	47a0      	blx	r4
    print(":");
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	332c      	adds	r3, #44	; 0x2c
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	490e      	ldr	r1, [pc, #56]	; (80107c8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 801078e:	68f8      	ldr	r0, [r7, #12]
 8010790:	4798      	blx	r3
    print(lineNumber);
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	3334      	adds	r3, #52	; 0x34
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	6879      	ldr	r1, [r7, #4]
 801079c:	68f8      	ldr	r0, [r7, #12]
 801079e:	4798      	blx	r3
    print(":");
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	332c      	adds	r3, #44	; 0x2c
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4907      	ldr	r1, [pc, #28]	; (80107c8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 80107aa:	68f8      	ldr	r0, [r7, #12]
 80107ac:	4798      	blx	r3
    print(" error:");
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	332c      	adds	r3, #44	; 0x2c
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	4905      	ldr	r1, [pc, #20]	; (80107cc <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 80107b8:	68f8      	ldr	r0, [r7, #12]
 80107ba:	4798      	blx	r3
}
 80107bc:	bf00      	nop
 80107be:	3714      	adds	r7, #20
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd90      	pop	{r4, r7, pc}
 80107c4:	0802460c 	.word	0x0802460c
 80107c8:	08024768 	.word	0x08024768
 80107cc:	0802476c 	.word	0x0802476c

080107d0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 80107d0:	b590      	push	{r4, r7, lr}
 80107d2:	b085      	sub	sp, #20
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	607a      	str	r2, [r7, #4]
    print("\n");
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	332c      	adds	r3, #44	; 0x2c
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	4916      	ldr	r1, [pc, #88]	; (8010840 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	4798      	blx	r3
    print(file.asCharString());
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	332c      	adds	r3, #44	; 0x2c
 80107f0:	681c      	ldr	r4, [r3, #0]
 80107f2:	68b8      	ldr	r0, [r7, #8]
 80107f4:	f7fc f9d8 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 80107f8:	4603      	mov	r3, r0
 80107fa:	4619      	mov	r1, r3
 80107fc:	68f8      	ldr	r0, [r7, #12]
 80107fe:	47a0      	blx	r4
    print("(");
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	332c      	adds	r3, #44	; 0x2c
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	490e      	ldr	r1, [pc, #56]	; (8010844 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 801080a:	68f8      	ldr	r0, [r7, #12]
 801080c:	4798      	blx	r3
    print(lineNumber);
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	3334      	adds	r3, #52	; 0x34
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	6879      	ldr	r1, [r7, #4]
 8010818:	68f8      	ldr	r0, [r7, #12]
 801081a:	4798      	blx	r3
    print("):");
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	332c      	adds	r3, #44	; 0x2c
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4908      	ldr	r1, [pc, #32]	; (8010848 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 8010826:	68f8      	ldr	r0, [r7, #12]
 8010828:	4798      	blx	r3
    print(" error:");
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	332c      	adds	r3, #44	; 0x2c
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4906      	ldr	r1, [pc, #24]	; (801084c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 8010834:	68f8      	ldr	r0, [r7, #12]
 8010836:	4798      	blx	r3
}
 8010838:	bf00      	nop
 801083a:	3714      	adds	r7, #20
 801083c:	46bd      	mov	sp, r7
 801083e:	bd90      	pop	{r4, r7, pc}
 8010840:	0802460c 	.word	0x0802460c
 8010844:	08024774 	.word	0x08024774
 8010848:	08024778 	.word	0x08024778
 801084c:	0802476c 	.word	0x0802476c

08010850 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	7a1b      	ldrb	r3, [r3, #8]
 801085e:	2b02      	cmp	r3, #2
 8010860:	d106      	bne.n	8010870 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	3328      	adds	r3, #40	; 0x28
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	6839      	ldr	r1, [r7, #0]
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	4798      	blx	r3
}
 8010870:	bf00      	nop
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
    while (*s) {
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d009      	beq.n	801089e <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 801088a:	4b0a      	ldr	r3, [pc, #40]	; (80108b4 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	683a      	ldr	r2, [r7, #0]
 8010890:	7812      	ldrb	r2, [r2, #0]
 8010892:	4610      	mov	r0, r2
 8010894:	4798      	blx	r3
        s++;
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	3301      	adds	r3, #1
 801089a:	603b      	str	r3, [r7, #0]
    while (*s) {
 801089c:	e7f1      	b.n	8010882 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	334c      	adds	r3, #76	; 0x4c
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	4798      	blx	r3
}
 80108aa:	bf00      	nop
 80108ac:	3708      	adds	r7, #8
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}
 80108b2:	bf00      	nop
 80108b4:	200000c0 	.word	0x200000c0

080108b8 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 80108c0:	4b03      	ldr	r3, [pc, #12]	; (80108d0 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4798      	blx	r3
}
 80108c6:	bf00      	nop
 80108c8:	3708      	adds	r7, #8
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	200000c4 	.word	0x200000c4

080108d4 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	4618      	mov	r0, r3
 80108e0:	f7ff fb00 	bl	800fee4 <_ZN10TestOutputC1Ev>
 80108e4:	4a06      	ldr	r2, [pc, #24]	; (8010900 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	601a      	str	r2, [r3, #0]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	611a      	str	r2, [r3, #16]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2200      	movs	r2, #0
 80108f4:	615a      	str	r2, [r3, #20]
{
}
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4618      	mov	r0, r3
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	08027f58 	.word	0x08027f58

08010904 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	4a0e      	ldr	r2, [pc, #56]	; (8010948 <_ZN19CompositeTestOutputD1Ev+0x44>)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	691b      	ldr	r3, [r3, #16]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d004      	beq.n	8010924 <_ZN19CompositeTestOutputD1Ev+0x20>
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	3204      	adds	r2, #4
 801091e:	6812      	ldr	r2, [r2, #0]
 8010920:	4618      	mov	r0, r3
 8010922:	4790      	blx	r2
  delete outputTwo_;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	695b      	ldr	r3, [r3, #20]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d004      	beq.n	8010936 <_ZN19CompositeTestOutputD1Ev+0x32>
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	3204      	adds	r2, #4
 8010930:	6812      	ldr	r2, [r2, #0]
 8010932:	4618      	mov	r0, r3
 8010934:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	4618      	mov	r0, r3
 801093a:	f7ff faf1 	bl	800ff20 <_ZN10TestOutputD1Ev>
}
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	4618      	mov	r0, r3
 8010942:	3708      	adds	r7, #8
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}
 8010948:	08027f58 	.word	0x08027f58

0801094c <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
}
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f7ff ffd5 	bl	8010904 <_ZN19CompositeTestOutputD1Ev>
 801095a:	2118      	movs	r1, #24
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f7f9 f9e9 	bl	8009d34 <_ZdlPvj>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	4618      	mov	r0, r3
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	691b      	ldr	r3, [r3, #16]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d004      	beq.n	8010988 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 801097e:	681a      	ldr	r2, [r3, #0]
 8010980:	3204      	adds	r2, #4
 8010982:	6812      	ldr	r2, [r2, #0]
 8010984:	4618      	mov	r0, r3
 8010986:	4790      	blx	r2
  outputOne_ = output;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	683a      	ldr	r2, [r7, #0]
 801098c:	611a      	str	r2, [r3, #16]
}
 801098e:	bf00      	nop
 8010990:	3708      	adds	r7, #8
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 8010996:	b580      	push	{r7, lr}
 8010998:	b082      	sub	sp, #8
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
 801099e:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	695b      	ldr	r3, [r3, #20]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d004      	beq.n	80109b2 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	3204      	adds	r2, #4
 80109ac:	6812      	ldr	r2, [r2, #0]
 80109ae:	4618      	mov	r0, r3
 80109b0:	4790      	blx	r2
  outputTwo_ = output;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	683a      	ldr	r2, [r7, #0]
 80109b6:	615a      	str	r2, [r3, #20]
}
 80109b8:	bf00      	nop
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	691b      	ldr	r3, [r3, #16]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d008      	beq.n	80109e2 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	691a      	ldr	r2, [r3, #16]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	691b      	ldr	r3, [r3, #16]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	3308      	adds	r3, #8
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	4610      	mov	r0, r2
 80109e0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	695b      	ldr	r3, [r3, #20]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d008      	beq.n	80109fc <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	695a      	ldr	r2, [r3, #20]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	695b      	ldr	r3, [r3, #20]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	3308      	adds	r3, #8
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4610      	mov	r0, r2
 80109fa:	4798      	blx	r3
}
 80109fc:	bf00      	nop
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	691b      	ldr	r3, [r3, #16]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d009      	beq.n	8010a2a <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	691a      	ldr	r2, [r3, #16]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	691b      	ldr	r3, [r3, #16]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	330c      	adds	r3, #12
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	6839      	ldr	r1, [r7, #0]
 8010a26:	4610      	mov	r0, r2
 8010a28:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	695b      	ldr	r3, [r3, #20]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d009      	beq.n	8010a46 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	695a      	ldr	r2, [r3, #20]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	695b      	ldr	r3, [r3, #20]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	330c      	adds	r3, #12
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	6839      	ldr	r1, [r7, #0]
 8010a42:	4610      	mov	r0, r2
 8010a44:	4798      	blx	r3
}
 8010a46:	bf00      	nop
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}

08010a4e <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8010a4e:	b580      	push	{r7, lr}
 8010a50:	b082      	sub	sp, #8
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	6078      	str	r0, [r7, #4]
 8010a56:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	691b      	ldr	r3, [r3, #16]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d009      	beq.n	8010a74 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	691a      	ldr	r2, [r3, #16]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	691b      	ldr	r3, [r3, #16]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	3310      	adds	r3, #16
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	6839      	ldr	r1, [r7, #0]
 8010a70:	4610      	mov	r0, r2
 8010a72:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	695b      	ldr	r3, [r3, #20]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d009      	beq.n	8010a90 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	695a      	ldr	r2, [r3, #20]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	695b      	ldr	r3, [r3, #20]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	3310      	adds	r3, #16
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	6839      	ldr	r1, [r7, #0]
 8010a8c:	4610      	mov	r0, r2
 8010a8e:	4798      	blx	r3
}
 8010a90:	bf00      	nop
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	691b      	ldr	r3, [r3, #16]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d009      	beq.n	8010abe <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	691a      	ldr	r2, [r3, #16]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	691b      	ldr	r3, [r3, #16]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	3314      	adds	r3, #20
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	6839      	ldr	r1, [r7, #0]
 8010aba:	4610      	mov	r0, r2
 8010abc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	695b      	ldr	r3, [r3, #20]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d009      	beq.n	8010ada <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	695a      	ldr	r2, [r3, #20]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	695b      	ldr	r3, [r3, #20]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	3314      	adds	r3, #20
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	6839      	ldr	r1, [r7, #0]
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	4798      	blx	r3
}
 8010ada:	bf00      	nop
 8010adc:	3708      	adds	r7, #8
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8010ae2:	b580      	push	{r7, lr}
 8010ae4:	b082      	sub	sp, #8
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
 8010aea:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	691b      	ldr	r3, [r3, #16]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d009      	beq.n	8010b08 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	691a      	ldr	r2, [r3, #16]
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	691b      	ldr	r3, [r3, #16]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	3318      	adds	r3, #24
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	6839      	ldr	r1, [r7, #0]
 8010b04:	4610      	mov	r0, r2
 8010b06:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	695b      	ldr	r3, [r3, #20]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d009      	beq.n	8010b24 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	695a      	ldr	r2, [r3, #20]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	695b      	ldr	r3, [r3, #20]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	3318      	adds	r3, #24
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	6839      	ldr	r1, [r7, #0]
 8010b20:	4610      	mov	r0, r2
 8010b22:	4798      	blx	r3
}
 8010b24:	bf00      	nop
 8010b26:	3708      	adds	r7, #8
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d009      	beq.n	8010b52 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	691a      	ldr	r2, [r3, #16]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	691b      	ldr	r3, [r3, #16]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	331c      	adds	r3, #28
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	6839      	ldr	r1, [r7, #0]
 8010b4e:	4610      	mov	r0, r2
 8010b50:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	695b      	ldr	r3, [r3, #20]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d009      	beq.n	8010b6e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	695a      	ldr	r2, [r3, #20]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	695b      	ldr	r3, [r3, #20]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	331c      	adds	r3, #28
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	6839      	ldr	r1, [r7, #0]
 8010b6a:	4610      	mov	r0, r2
 8010b6c:	4798      	blx	r3
}
 8010b6e:	bf00      	nop
 8010b70:	3708      	adds	r7, #8
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b082      	sub	sp, #8
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
 8010b7e:	460b      	mov	r3, r1
 8010b80:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	691b      	ldr	r3, [r3, #16]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d009      	beq.n	8010b9e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	691a      	ldr	r2, [r3, #16]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	691b      	ldr	r3, [r3, #16]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	3320      	adds	r3, #32
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	78f9      	ldrb	r1, [r7, #3]
 8010b9a:	4610      	mov	r0, r2
 8010b9c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	695b      	ldr	r3, [r3, #20]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d009      	beq.n	8010bba <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	695a      	ldr	r2, [r3, #20]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	695b      	ldr	r3, [r3, #20]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	3320      	adds	r3, #32
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	78f9      	ldrb	r1, [r7, #3]
 8010bb6:	4610      	mov	r0, r2
 8010bb8:	4798      	blx	r3
}
 8010bba:	bf00      	nop
 8010bbc:	3708      	adds	r7, #8
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b082      	sub	sp, #8
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d008      	beq.n	8010be4 <_ZN19CompositeTestOutput5colorEv+0x22>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	691a      	ldr	r2, [r3, #16]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	691b      	ldr	r3, [r3, #16]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	3324      	adds	r3, #36	; 0x24
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4610      	mov	r0, r2
 8010be2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	695b      	ldr	r3, [r3, #20]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d008      	beq.n	8010bfe <_ZN19CompositeTestOutput5colorEv+0x3c>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	695a      	ldr	r2, [r3, #20]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	695b      	ldr	r3, [r3, #20]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	3324      	adds	r3, #36	; 0x24
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	4610      	mov	r0, r2
 8010bfc:	4798      	blx	r3
}
 8010bfe:	bf00      	nop
 8010c00:	3708      	adds	r7, #8
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}

08010c06 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 8010c06:	b580      	push	{r7, lr}
 8010c08:	b082      	sub	sp, #8
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	6078      	str	r0, [r7, #4]
 8010c0e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	691b      	ldr	r3, [r3, #16]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d009      	beq.n	8010c2c <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	691a      	ldr	r2, [r3, #16]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	691b      	ldr	r3, [r3, #16]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	3328      	adds	r3, #40	; 0x28
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	6839      	ldr	r1, [r7, #0]
 8010c28:	4610      	mov	r0, r2
 8010c2a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	695b      	ldr	r3, [r3, #20]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d009      	beq.n	8010c48 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	695a      	ldr	r2, [r3, #20]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	695b      	ldr	r3, [r3, #20]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	3328      	adds	r3, #40	; 0x28
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	6839      	ldr	r1, [r7, #0]
 8010c44:	4610      	mov	r0, r2
 8010c46:	4798      	blx	r3
}
 8010c48:	bf00      	nop
 8010c4a:	3708      	adds	r7, #8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	691b      	ldr	r3, [r3, #16]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d009      	beq.n	8010c76 <_ZN19CompositeTestOutput5printEPKc+0x26>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	691a      	ldr	r2, [r3, #16]
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	691b      	ldr	r3, [r3, #16]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	332c      	adds	r3, #44	; 0x2c
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	6839      	ldr	r1, [r7, #0]
 8010c72:	4610      	mov	r0, r2
 8010c74:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	695b      	ldr	r3, [r3, #20]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d009      	beq.n	8010c92 <_ZN19CompositeTestOutput5printEPKc+0x42>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	695a      	ldr	r2, [r3, #20]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	695b      	ldr	r3, [r3, #20]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	332c      	adds	r3, #44	; 0x2c
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	6839      	ldr	r1, [r7, #0]
 8010c8e:	4610      	mov	r0, r2
 8010c90:	4798      	blx	r3
}
 8010c92:	bf00      	nop
 8010c94:	3708      	adds	r7, #8
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}

08010c9a <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 8010c9a:	b580      	push	{r7, lr}
 8010c9c:	b082      	sub	sp, #8
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	6078      	str	r0, [r7, #4]
 8010ca2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	691b      	ldr	r3, [r3, #16]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d009      	beq.n	8010cc0 <_ZN19CompositeTestOutput5printEl+0x26>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	691a      	ldr	r2, [r3, #16]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	691b      	ldr	r3, [r3, #16]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	3330      	adds	r3, #48	; 0x30
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	6839      	ldr	r1, [r7, #0]
 8010cbc:	4610      	mov	r0, r2
 8010cbe:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	695b      	ldr	r3, [r3, #20]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d009      	beq.n	8010cdc <_ZN19CompositeTestOutput5printEl+0x42>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	695a      	ldr	r2, [r3, #20]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	695b      	ldr	r3, [r3, #20]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	3330      	adds	r3, #48	; 0x30
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	6839      	ldr	r1, [r7, #0]
 8010cd8:	4610      	mov	r0, r2
 8010cda:	4798      	blx	r3
}
 8010cdc:	bf00      	nop
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	691b      	ldr	r3, [r3, #16]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d009      	beq.n	8010d0a <_ZN19CompositeTestOutput5printEj+0x26>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	691a      	ldr	r2, [r3, #16]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	691b      	ldr	r3, [r3, #16]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	3334      	adds	r3, #52	; 0x34
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	6839      	ldr	r1, [r7, #0]
 8010d06:	4610      	mov	r0, r2
 8010d08:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	695b      	ldr	r3, [r3, #20]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d009      	beq.n	8010d26 <_ZN19CompositeTestOutput5printEj+0x42>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	695a      	ldr	r2, [r3, #20]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	695b      	ldr	r3, [r3, #20]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	3334      	adds	r3, #52	; 0x34
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	6839      	ldr	r1, [r7, #0]
 8010d22:	4610      	mov	r0, r2
 8010d24:	4798      	blx	r3
}
 8010d26:	bf00      	nop
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b084      	sub	sp, #16
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	60f8      	str	r0, [r7, #12]
 8010d36:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	691b      	ldr	r3, [r3, #16]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d00a      	beq.n	8010d58 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	691a      	ldr	r2, [r3, #16]
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	691b      	ldr	r3, [r3, #16]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	3338      	adds	r3, #56	; 0x38
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	ed97 0b00 	vldr	d0, [r7]
 8010d54:	4610      	mov	r0, r2
 8010d56:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	695b      	ldr	r3, [r3, #20]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d00a      	beq.n	8010d76 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	695a      	ldr	r2, [r3, #20]
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	695b      	ldr	r3, [r3, #20]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	3338      	adds	r3, #56	; 0x38
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	ed97 0b00 	vldr	d0, [r7]
 8010d72:	4610      	mov	r0, r2
 8010d74:	4798      	blx	r3
}
 8010d76:	bf00      	nop
 8010d78:	3710      	adds	r7, #16
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}

08010d7e <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 8010d7e:	b580      	push	{r7, lr}
 8010d80:	b082      	sub	sp, #8
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	6078      	str	r0, [r7, #4]
 8010d86:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	691b      	ldr	r3, [r3, #16]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d009      	beq.n	8010da4 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	691a      	ldr	r2, [r3, #16]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	691b      	ldr	r3, [r3, #16]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	333c      	adds	r3, #60	; 0x3c
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	6839      	ldr	r1, [r7, #0]
 8010da0:	4610      	mov	r0, r2
 8010da2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	695b      	ldr	r3, [r3, #20]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d009      	beq.n	8010dc0 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	695a      	ldr	r2, [r3, #20]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	695b      	ldr	r3, [r3, #20]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	333c      	adds	r3, #60	; 0x3c
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	6839      	ldr	r1, [r7, #0]
 8010dbc:	4610      	mov	r0, r2
 8010dbe:	4798      	blx	r3
}
 8010dc0:	bf00      	nop
 8010dc2:	3708      	adds	r7, #8
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}

08010dc8 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b082      	sub	sp, #8
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	691b      	ldr	r3, [r3, #16]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d009      	beq.n	8010dee <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	691a      	ldr	r2, [r3, #16]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	691b      	ldr	r3, [r3, #16]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	3344      	adds	r3, #68	; 0x44
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	6839      	ldr	r1, [r7, #0]
 8010dea:	4610      	mov	r0, r2
 8010dec:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	695b      	ldr	r3, [r3, #20]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d009      	beq.n	8010e0a <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	695a      	ldr	r2, [r3, #20]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	695b      	ldr	r3, [r3, #20]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	3344      	adds	r3, #68	; 0x44
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	6839      	ldr	r1, [r7, #0]
 8010e06:	4610      	mov	r0, r2
 8010e08:	4798      	blx	r3
}
 8010e0a:	bf00      	nop
 8010e0c:	3708      	adds	r7, #8
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}

08010e12 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 8010e12:	b580      	push	{r7, lr}
 8010e14:	b082      	sub	sp, #8
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	691b      	ldr	r3, [r3, #16]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d008      	beq.n	8010e34 <_ZN19CompositeTestOutput5flushEv+0x22>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	691a      	ldr	r2, [r3, #16]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	691b      	ldr	r3, [r3, #16]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	334c      	adds	r3, #76	; 0x4c
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	4610      	mov	r0, r2
 8010e32:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	695b      	ldr	r3, [r3, #20]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d008      	beq.n	8010e4e <_ZN19CompositeTestOutput5flushEv+0x3c>
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	695a      	ldr	r2, [r3, #20]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	695b      	ldr	r3, [r3, #20]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	334c      	adds	r3, #76	; 0x4c
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	4610      	mov	r0, r2
 8010e4c:	4798      	blx	r3
}
 8010e4e:	bf00      	nop
 8010e50:	3708      	adds	r7, #8
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}

08010e56 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 8010e56:	b480      	push	{r7}
 8010e58:	b085      	sub	sp, #20
 8010e5a:	af00      	add	r7, sp, #0
 8010e5c:	60f8      	str	r0, [r7, #12]
 8010e5e:	60b9      	str	r1, [r7, #8]
 8010e60:	607a      	str	r2, [r7, #4]
    }
 8010e62:	bf00      	nop
 8010e64:	3714      	adds	r7, #20
 8010e66:	46bd      	mov	sp, r7
 8010e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6c:	4770      	bx	lr

08010e6e <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 8010e6e:	b480      	push	{r7}
 8010e70:	b085      	sub	sp, #20
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	60f8      	str	r0, [r7, #12]
 8010e76:	60b9      	str	r1, [r7, #8]
 8010e78:	607a      	str	r2, [r7, #4]
    }
 8010e7a:	bf00      	nop
 8010e7c:	3714      	adds	r7, #20
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e84:	4770      	bx	lr
	...

08010e88 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 8010e92:	4a0b      	ldr	r2, [pc, #44]	; (8010ec0 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	601a      	str	r2, [r3, #0]
 8010e98:	f000 f9ce 	bl	8011238 <_ZN14NullTestPlugin8instanceEv>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	605a      	str	r2, [r3, #4]
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	3308      	adds	r3, #8
 8010ea6:	6839      	ldr	r1, [r7, #0]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fb fb46 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	741a      	strb	r2, [r3, #16]
{
}
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3708      	adds	r7, #8
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	08028114 	.word	0x08028114

08010ec4 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 8010ece:	4a0a      	ldr	r2, [pc, #40]	; (8010ef8 <_ZN10TestPluginC1EPS_+0x34>)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	601a      	str	r2, [r3, #0]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	683a      	ldr	r2, [r7, #0]
 8010ed8:	605a      	str	r2, [r3, #4]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	3308      	adds	r3, #8
 8010ede:	4907      	ldr	r1, [pc, #28]	; (8010efc <_ZN10TestPluginC1EPS_+0x38>)
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fb fad6 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2201      	movs	r2, #1
 8010eea:	741a      	strb	r2, [r3, #16]
{
}
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3708      	adds	r7, #8
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	08028114 	.word	0x08028114
 8010efc:	0802477c 	.word	0x0802477c

08010f00 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	4a06      	ldr	r2, [pc, #24]	; (8010f24 <_ZN10TestPluginD1Ev+0x24>)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	601a      	str	r2, [r3, #0]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	3308      	adds	r3, #8
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7fb fe75 	bl	800cc02 <_ZN12SimpleStringD1Ev>
{
}
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3708      	adds	r7, #8
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
 8010f22:	bf00      	nop
 8010f24:	08028114 	.word	0x08028114

08010f28 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
}
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f7ff ffe5 	bl	8010f00 <_ZN10TestPluginD1Ev>
 8010f36:	2114      	movs	r1, #20
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7f8 fefb 	bl	8009d34 <_ZdlPvj>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	4618      	mov	r0, r3
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b083      	sub	sp, #12
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	683a      	ldr	r2, [r7, #0]
 8010f56:	605a      	str	r2, [r3, #4]
    return this;
 8010f58:	687b      	ldr	r3, [r7, #4]
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	370c      	adds	r7, #12
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f64:	4770      	bx	lr

08010f66 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b084      	sub	sp, #16
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	60f8      	str	r0, [r7, #12]
 8010f6e:	60b9      	str	r1, [r7, #8]
 8010f70:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	7c1b      	ldrb	r3, [r3, #16]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d007      	beq.n	8010f8a <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	3308      	adds	r3, #8
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	687a      	ldr	r2, [r7, #4]
 8010f84:	68b9      	ldr	r1, [r7, #8]
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	6858      	ldr	r0, [r3, #4]
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	3314      	adds	r3, #20
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	68b9      	ldr	r1, [r7, #8]
 8010f9c:	4798      	blx	r3
}
 8010f9e:	bf00      	nop
 8010fa0:	3710      	adds	r7, #16
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}

08010fa6 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 8010fa6:	b580      	push	{r7, lr}
 8010fa8:	b084      	sub	sp, #16
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	60f8      	str	r0, [r7, #12]
 8010fae:	60b9      	str	r1, [r7, #8]
 8010fb0:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	6858      	ldr	r0, [r3, #4]
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	3318      	adds	r3, #24
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	68b9      	ldr	r1, [r7, #8]
 8010fc4:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	7c1b      	ldrb	r3, [r3, #16]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d007      	beq.n	8010fde <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	330c      	adds	r3, #12
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	68b9      	ldr	r1, [r7, #8]
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	4798      	blx	r3
}
 8010fde:	bf00      	nop
 8010fe0:	3710      	adds	r7, #16
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}

08010fe6 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 8010fe6:	b590      	push	{r4, r7, lr}
 8010fe8:	b085      	sub	sp, #20
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	60f8      	str	r0, [r7, #12]
 8010fee:	60b9      	str	r1, [r7, #8]
 8010ff0:	607a      	str	r2, [r7, #4]
 8010ff2:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	331c      	adds	r3, #28
 8010ffa:	681c      	ldr	r4, [r3, #0]
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	68b9      	ldr	r1, [r7, #8]
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	47a0      	blx	r4
 8011006:	4603      	mov	r3, r0
}
 8011008:	4618      	mov	r0, r3
 801100a:	3714      	adds	r7, #20
 801100c:	46bd      	mov	sp, r7
 801100e:	bd90      	pop	{r4, r7, pc}

08011010 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8011010:	b590      	push	{r4, r7, lr}
 8011012:	b085      	sub	sp, #20
 8011014:	af00      	add	r7, sp, #0
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	607a      	str	r2, [r7, #4]
 801101c:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	3310      	adds	r3, #16
 8011024:	681c      	ldr	r4, [r3, #0]
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	687a      	ldr	r2, [r7, #4]
 801102a:	68b9      	ldr	r1, [r7, #8]
 801102c:	68f8      	ldr	r0, [r7, #12]
 801102e:	47a0      	blx	r4
 8011030:	4603      	mov	r3, r0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d001      	beq.n	801103a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 8011036:	2301      	movs	r3, #1
 8011038:	e011      	b.n	801105e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d00c      	beq.n	801105c <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	6858      	ldr	r0, [r3, #4]
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	331c      	adds	r3, #28
 801104e:	681c      	ldr	r4, [r3, #0]
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	687a      	ldr	r2, [r7, #4]
 8011054:	68b9      	ldr	r1, [r7, #8]
 8011056:	47a0      	blx	r4
 8011058:	4603      	mov	r3, r0
 801105a:	e000      	b.n	801105e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 801105c:	2300      	movs	r3, #0
}
 801105e:	4618      	mov	r0, r3
 8011060:	3714      	adds	r7, #20
 8011062:	46bd      	mov	sp, r7
 8011064:	bd90      	pop	{r4, r7, pc}

08011066 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 8011066:	b480      	push	{r7}
 8011068:	b083      	sub	sp, #12
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
    return name_;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	3308      	adds	r3, #8
}
 8011072:	4618      	mov	r0, r3
 8011074:	370c      	adds	r7, #12
 8011076:	46bd      	mov	sp, r7
 8011078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107c:	4770      	bx	lr

0801107e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 801107e:	b580      	push	{r7, lr}
 8011080:	b082      	sub	sp, #8
 8011082:	af00      	add	r7, sp, #0
 8011084:	6078      	str	r0, [r7, #4]
 8011086:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	3308      	adds	r3, #8
 801108c:	4619      	mov	r1, r3
 801108e:	6838      	ldr	r0, [r7, #0]
 8011090:	f7fb fdc3 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8011094:	4603      	mov	r3, r0
 8011096:	2b00      	cmp	r3, #0
 8011098:	d001      	beq.n	801109e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	e00d      	b.n	80110ba <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d007      	beq.n	80110b6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	6839      	ldr	r1, [r7, #0]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7ff ffe6 	bl	801107e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 80110b2:	4603      	mov	r3, r0
 80110b4:	e001      	b.n	80110ba <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	685b      	ldr	r3, [r3, #4]
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3708      	adds	r7, #8
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}

080110c2 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 80110c2:	b480      	push	{r7}
 80110c4:	b083      	sub	sp, #12
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	6078      	str	r0, [r7, #4]
    return next_;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	685b      	ldr	r3, [r3, #4]
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	370c      	adds	r7, #12
 80110d2:	46bd      	mov	sp, r7
 80110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d8:	4770      	bx	lr

080110da <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b084      	sub	sp, #16
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
 80110e2:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 80110e4:	2300      	movs	r3, #0
 80110e6:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d00e      	beq.n	801110e <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7ff ffb6 	bl	8011066 <_ZN10TestPlugin7getNameEv>
 80110fa:	4603      	mov	r3, r0
 80110fc:	6839      	ldr	r1, [r7, #0]
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fb fd8b 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d001      	beq.n	801110e <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 801110a:	2301      	movs	r3, #1
 801110c:	e000      	b.n	8011110 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 801110e:	2300      	movs	r3, #0
 8011110:	2b00      	cmp	r3, #0
 8011112:	d007      	beq.n	8011124 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	685a      	ldr	r2, [r3, #4]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8011124:	68fb      	ldr	r3, [r7, #12]
}
 8011126:	4618      	mov	r0, r3
 8011128:	3710      	adds	r7, #16
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}

0801112e <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 801112e:	b480      	push	{r7}
 8011130:	b083      	sub	sp, #12
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2200      	movs	r2, #0
 801113a:	741a      	strb	r2, [r3, #16]
}
 801113c:	bf00      	nop
 801113e:	370c      	adds	r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 8011148:	b480      	push	{r7}
 801114a:	b083      	sub	sp, #12
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2201      	movs	r2, #1
 8011154:	741a      	strb	r2, [r3, #16]
}
 8011156:	bf00      	nop
 8011158:	370c      	adds	r7, #12
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr

08011162 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 8011162:	b480      	push	{r7}
 8011164:	b083      	sub	sp, #12
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
    return enabled_;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	7c1b      	ldrb	r3, [r3, #16]
}
 801116e:	4618      	mov	r0, r3
 8011170:	370c      	adds	r7, #12
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr
	...

0801117c <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6839      	ldr	r1, [r7, #0]
 801118a:	4618      	mov	r0, r3
 801118c:	f7ff fe7c 	bl	8010e88 <_ZN10TestPluginC1ERK12SimpleString>
 8011190:	4a05      	ldr	r2, [pc, #20]	; (80111a8 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 8011196:	4b05      	ldr	r3, [pc, #20]	; (80111ac <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8011198:	2200      	movs	r2, #0
 801119a:	601a      	str	r2, [r3, #0]
}
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	4618      	mov	r0, r3
 80111a0:	3708      	adds	r7, #8
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	080280d0 	.word	0x080280d0
 80111ac:	20000910 	.word	0x20000910

080111b0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 80111b0:	b480      	push	{r7}
 80111b2:	b087      	sub	sp, #28
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	60f8      	str	r0, [r7, #12]
 80111b8:	60b9      	str	r1, [r7, #8]
 80111ba:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 80111bc:	4b0e      	ldr	r3, [pc, #56]	; (80111f8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	3b01      	subs	r3, #1
 80111c2:	617b      	str	r3, [r7, #20]
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	db0d      	blt.n	80111e6 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 80111ca:	4a0c      	ldr	r2, [pc, #48]	; (80111fc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80111d2:	490a      	ldr	r1, [pc, #40]	; (80111fc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	00db      	lsls	r3, r3, #3
 80111d8:	440b      	add	r3, r1
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	3b01      	subs	r3, #1
 80111e2:	617b      	str	r3, [r7, #20]
 80111e4:	e7ee      	b.n	80111c4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 80111e6:	4b04      	ldr	r3, [pc, #16]	; (80111f8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 80111e8:	2200      	movs	r2, #0
 80111ea:	601a      	str	r2, [r3, #0]
}
 80111ec:	bf00      	nop
 80111ee:	371c      	adds	r7, #28
 80111f0:	46bd      	mov	sp, r7
 80111f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f6:	4770      	bx	lr
 80111f8:	20000910 	.word	0x20000910
 80111fc:	20000914 	.word	0x20000914

08011200 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2100      	movs	r1, #0
 801120c:	4618      	mov	r0, r3
 801120e:	f7ff fe59 	bl	8010ec4 <_ZN10TestPluginC1EPS_>
 8011212:	4a04      	ldr	r2, [pc, #16]	; (8011224 <_ZN14NullTestPluginC1Ev+0x24>)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	601a      	str	r2, [r3, #0]
{
}
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	4618      	mov	r0, r3
 801121c:	3708      	adds	r7, #8
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
 8011222:	bf00      	nop
 8011224:	0802808c 	.word	0x0802808c

08011228 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8011228:	b580      	push	{r7, lr}
 801122a:	af00      	add	r7, sp, #0
 801122c:	4801      	ldr	r0, [pc, #4]	; (8011234 <__tcf_0+0xc>)
 801122e:	f000 f849 	bl	80112c4 <_ZN14NullTestPluginD1Ev>
 8011232:	bd80      	pop	{r7, pc}
 8011234:	20000a14 	.word	0x20000a14

08011238 <_ZN14NullTestPlugin8instanceEv>:
{
 8011238:	b580      	push	{r7, lr}
 801123a:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 801123c:	4b12      	ldr	r3, [pc, #72]	; (8011288 <_ZN14NullTestPlugin8instanceEv+0x50>)
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	f3bf 8f5b 	dmb	ish
 8011244:	b2db      	uxtb	r3, r3
 8011246:	f003 0301 	and.w	r3, r3, #1
 801124a:	2b00      	cmp	r3, #0
 801124c:	bf0c      	ite	eq
 801124e:	2301      	moveq	r3, #1
 8011250:	2300      	movne	r3, #0
 8011252:	b2db      	uxtb	r3, r3
 8011254:	2b00      	cmp	r3, #0
 8011256:	d013      	beq.n	8011280 <_ZN14NullTestPlugin8instanceEv+0x48>
 8011258:	480b      	ldr	r0, [pc, #44]	; (8011288 <_ZN14NullTestPlugin8instanceEv+0x50>)
 801125a:	f00d ffd9 	bl	801f210 <__cxa_guard_acquire>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	bf14      	ite	ne
 8011264:	2301      	movne	r3, #1
 8011266:	2300      	moveq	r3, #0
 8011268:	b2db      	uxtb	r3, r3
 801126a:	2b00      	cmp	r3, #0
 801126c:	d008      	beq.n	8011280 <_ZN14NullTestPlugin8instanceEv+0x48>
 801126e:	4807      	ldr	r0, [pc, #28]	; (801128c <_ZN14NullTestPlugin8instanceEv+0x54>)
 8011270:	f7ff ffc6 	bl	8011200 <_ZN14NullTestPluginC1Ev>
 8011274:	4804      	ldr	r0, [pc, #16]	; (8011288 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011276:	f00d ffd7 	bl	801f228 <__cxa_guard_release>
 801127a:	4805      	ldr	r0, [pc, #20]	; (8011290 <_ZN14NullTestPlugin8instanceEv+0x58>)
 801127c:	f00d fffb 	bl	801f276 <atexit>
    return &_instance;
 8011280:	4b02      	ldr	r3, [pc, #8]	; (801128c <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 8011282:	4618      	mov	r0, r3
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	20000a28 	.word	0x20000a28
 801128c:	20000a14 	.word	0x20000a14
 8011290:	08011229 	.word	0x08011229

08011294 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8011294:	b480      	push	{r7}
 8011296:	b085      	sub	sp, #20
 8011298:	af00      	add	r7, sp, #0
 801129a:	60f8      	str	r0, [r7, #12]
 801129c:	60b9      	str	r1, [r7, #8]
 801129e:	607a      	str	r2, [r7, #4]
}
 80112a0:	bf00      	nop
 80112a2:	3714      	adds	r7, #20
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr

080112ac <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b085      	sub	sp, #20
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	60b9      	str	r1, [r7, #8]
 80112b6:	607a      	str	r2, [r7, #4]
}
 80112b8:	bf00      	nop
 80112ba:	3714      	adds	r7, #20
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	4a05      	ldr	r2, [pc, #20]	; (80112e4 <_ZN14NullTestPluginD1Ev+0x20>)
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	601a      	str	r2, [r3, #0]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7ff fe13 	bl	8010f00 <_ZN10TestPluginD1Ev>
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4618      	mov	r0, r3
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	0802808c 	.word	0x0802808c

080112e8 <_ZN14NullTestPluginD0Ev>:
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f7ff ffe7 	bl	80112c4 <_ZN14NullTestPluginD1Ev>
 80112f6:	2114      	movs	r1, #20
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7f8 fd1b 	bl	8009d34 <_ZdlPvj>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4618      	mov	r0, r3
 8011302:	3708      	adds	r7, #8
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8011310:	4a0f      	ldr	r2, [pc, #60]	; (8011350 <_ZN12TestRegistryC1Ev+0x48>)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	601a      	str	r2, [r3, #0]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2200      	movs	r2, #0
 801131a:	605a      	str	r2, [r3, #4]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2200      	movs	r2, #0
 8011320:	609a      	str	r2, [r3, #8]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	60da      	str	r2, [r3, #12]
 8011328:	f7ff ff86 	bl	8011238 <_ZN14NullTestPlugin8instanceEv>
 801132c:	4602      	mov	r2, r0
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	611a      	str	r2, [r3, #16]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2200      	movs	r2, #0
 8011336:	751a      	strb	r2, [r3, #20]
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2200      	movs	r2, #0
 801133c:	619a      	str	r2, [r3, #24]
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	771a      	strb	r2, [r3, #28]
{
}
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	4618      	mov	r0, r3
 8011348:	3708      	adds	r7, #8
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	08028158 	.word	0x08028158

08011354 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8011354:	b480      	push	{r7}
 8011356:	b083      	sub	sp, #12
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	4a04      	ldr	r2, [pc, #16]	; (8011370 <_ZN12TestRegistryD1Ev+0x1c>)
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	601a      	str	r2, [r3, #0]
{
}
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	4618      	mov	r0, r3
 8011366:	370c      	adds	r7, #12
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr
 8011370:	08028158 	.word	0x08028158

08011374 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
}
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f7ff ffe9 	bl	8011354 <_ZN12TestRegistryD1Ev>
 8011382:	2120      	movs	r1, #32
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7f8 fcd5 	bl	8009d34 <_ZdlPvj>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	4618      	mov	r0, r3
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	3308      	adds	r3, #8
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	687a      	ldr	r2, [r7, #4]
 80113a8:	6852      	ldr	r2, [r2, #4]
 80113aa:	4611      	mov	r1, r2
 80113ac:	6838      	ldr	r0, [r7, #0]
 80113ae:	4798      	blx	r3
 80113b0:	4602      	mov	r2, r0
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	605a      	str	r2, [r3, #4]
}
 80113b6:	bf00      	nop
 80113b8:	3708      	adds	r7, #8
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}

080113be <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 80113be:	b580      	push	{r7, lr}
 80113c0:	b084      	sub	sp, #16
 80113c2:	af00      	add	r7, sp, #0
 80113c4:	6078      	str	r0, [r7, #4]
 80113c6:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 80113c8:	2301      	movs	r3, #1
 80113ca:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	3308      	adds	r3, #8
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	6838      	ldr	r0, [r7, #0]
 80113d6:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	60bb      	str	r3, [r7, #8]
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d05c      	beq.n	801149e <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	7d1b      	ldrb	r3, [r3, #20]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d005      	beq.n	80113f8 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	3380      	adds	r3, #128	; 0x80
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	68b8      	ldr	r0, [r7, #8]
 80113f6:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	7f1b      	ldrb	r3, [r3, #28]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d005      	beq.n	801140c <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	3384      	adds	r3, #132	; 0x84
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	68b8      	ldr	r0, [r7, #8]
 801140a:	4798      	blx	r3

        if (groupStart) {
 801140c:	7bfb      	ldrb	r3, [r7, #15]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d008      	beq.n	8011424 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	3310      	adds	r3, #16
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	68b9      	ldr	r1, [r7, #8]
 801141c:	6838      	ldr	r0, [r7, #0]
 801141e:	4798      	blx	r3
            groupStart = false;
 8011420:	2300      	movs	r3, #0
 8011422:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	3320      	adds	r3, #32
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	6838      	ldr	r0, [r7, #0]
 801142e:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8011430:	683a      	ldr	r2, [r7, #0]
 8011432:	68b9      	ldr	r1, [r7, #8]
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f000 fb79 	bl	8011b2c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d016      	beq.n	801146e <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	3318      	adds	r3, #24
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	68b9      	ldr	r1, [r7, #8]
 801144a:	6838      	ldr	r0, [r7, #0]
 801144c:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	3390      	adds	r3, #144	; 0x90
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	6911      	ldr	r1, [r2, #16]
 801145a:	683a      	ldr	r2, [r7, #0]
 801145c:	68b8      	ldr	r0, [r7, #8]
 801145e:	4798      	blx	r3
            result.currentTestEnded(test);
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	331c      	adds	r3, #28
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	68b9      	ldr	r1, [r7, #8]
 801146a:	6838      	ldr	r0, [r7, #0]
 801146c:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 801146e:	68b9      	ldr	r1, [r7, #8]
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f000 fa5b 	bl	801192c <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8011476:	4603      	mov	r3, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d008      	beq.n	801148e <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 801147c:	2301      	movs	r3, #1
 801147e:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	3314      	adds	r3, #20
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	68b9      	ldr	r1, [r7, #8]
 801148a:	6838      	ldr	r0, [r7, #0]
 801148c:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	330c      	adds	r3, #12
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	68b8      	ldr	r0, [r7, #8]
 8011498:	4798      	blx	r3
 801149a:	60b8      	str	r0, [r7, #8]
 801149c:	e79f      	b.n	80113de <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	330c      	adds	r3, #12
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	6838      	ldr	r0, [r7, #0]
 80114a8:	4798      	blx	r3
    currentRepetition_++;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	699b      	ldr	r3, [r3, #24]
 80114ae:	1c5a      	adds	r2, r3, #1
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	619a      	str	r2, [r3, #24]
}
 80114b4:	bf00      	nop
 80114b6:	3710      	adds	r7, #16
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 80114bc:	b590      	push	{r4, r7, lr}
 80114be:	b08f      	sub	sp, #60	; 0x3c
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 80114c6:	f107 0314 	add.w	r3, r7, #20
 80114ca:	4953      	ldr	r1, [pc, #332]	; (8011618 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7fa ffe0 	bl	800c492 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	637b      	str	r3, [r7, #52]	; 0x34
 80114d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d04d      	beq.n	801157a <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 80114de:	f107 030c 	add.w	r3, r7, #12
 80114e2:	494d      	ldr	r1, [pc, #308]	; (8011618 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7fa ffd4 	bl	800c492 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 80114ea:	f107 030c 	add.w	r3, r7, #12
 80114ee:	494b      	ldr	r1, [pc, #300]	; (801161c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7fb fc15 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 80114f6:	f107 031c 	add.w	r3, r7, #28
 80114fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80114fc:	4618      	mov	r0, r3
 80114fe:	f001 f9d2 	bl	80128a6 <_ZNK10UtestShell8getGroupEv>
 8011502:	f107 021c 	add.w	r2, r7, #28
 8011506:	f107 030c 	add.w	r3, r7, #12
 801150a:	4611      	mov	r1, r2
 801150c:	4618      	mov	r0, r3
 801150e:	f7fb fbf5 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8011512:	f107 031c 	add.w	r3, r7, #28
 8011516:	4618      	mov	r0, r3
 8011518:	f7fb fb73 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        gname += "#";
 801151c:	f107 030c 	add.w	r3, r7, #12
 8011520:	493e      	ldr	r1, [pc, #248]	; (801161c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011522:	4618      	mov	r0, r3
 8011524:	f7fb fbfc 	bl	800cd20 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8011528:	f107 020c 	add.w	r2, r7, #12
 801152c:	f107 0314 	add.w	r3, r7, #20
 8011530:	4611      	mov	r1, r2
 8011532:	4618      	mov	r0, r3
 8011534:	f7fb f82b 	bl	800c58e <_ZNK12SimpleString8containsERKS_>
 8011538:	4603      	mov	r3, r0
 801153a:	f083 0301 	eor.w	r3, r3, #1
 801153e:	b2db      	uxtb	r3, r3
 8011540:	2b00      	cmp	r3, #0
 8011542:	d00d      	beq.n	8011560 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8011544:	f107 020c 	add.w	r2, r7, #12
 8011548:	f107 0314 	add.w	r3, r7, #20
 801154c:	4611      	mov	r1, r2
 801154e:	4618      	mov	r0, r3
 8011550:	f7fb fbd4 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8011554:	f107 0314 	add.w	r3, r7, #20
 8011558:	4931      	ldr	r1, [pc, #196]	; (8011620 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801155a:	4618      	mov	r0, r3
 801155c:	f7fb fbe0 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8011560:	f107 030c 	add.w	r3, r7, #12
 8011564:	4618      	mov	r0, r3
 8011566:	f7fb fb4c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	330c      	adds	r3, #12
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011574:	4798      	blx	r3
 8011576:	6378      	str	r0, [r7, #52]	; 0x34
 8011578:	e7ae      	b.n	80114d8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 801157a:	f107 0314 	add.w	r3, r7, #20
 801157e:	4a26      	ldr	r2, [pc, #152]	; (8011618 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011580:	4926      	ldr	r1, [pc, #152]	; (801161c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011582:	4618      	mov	r0, r3
 8011584:	f7fb f99a 	bl	800c8bc <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8011588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801158c:	4924      	ldr	r1, [pc, #144]	; (8011620 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801158e:	4618      	mov	r0, r3
 8011590:	f7fa ff7f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8011594:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011598:	f107 0314 	add.w	r3, r7, #20
 801159c:	4611      	mov	r1, r2
 801159e:	4618      	mov	r0, r3
 80115a0:	f7fb f874 	bl	800c68c <_ZNK12SimpleString8endsWithERKS_>
 80115a4:	4603      	mov	r3, r0
 80115a6:	461c      	mov	r4, r3
 80115a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7fb fb28 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80115b2:	2c00      	cmp	r4, #0
 80115b4:	d01a      	beq.n	80115ec <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 80115b6:	f107 0314 	add.w	r3, r7, #20
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7fb fb00 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 80115c0:	4603      	mov	r3, r0
 80115c2:	3b01      	subs	r3, #1
 80115c4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80115c8:	f107 0114 	add.w	r1, r7, #20
 80115cc:	2200      	movs	r2, #0
 80115ce:	f7fb fc21 	bl	800ce14 <_ZNK12SimpleString9subStringEjj>
 80115d2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80115d6:	f107 0314 	add.w	r3, r7, #20
 80115da:	4611      	mov	r1, r2
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fa ffc4 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 80115e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7fb fb0b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	3338      	adds	r3, #56	; 0x38
 80115f2:	681c      	ldr	r4, [r3, #0]
 80115f4:	f107 0314 	add.w	r3, r7, #20
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fb fad5 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 80115fe:	4603      	mov	r3, r0
 8011600:	4619      	mov	r1, r3
 8011602:	6838      	ldr	r0, [r7, #0]
 8011604:	47a0      	blx	r4
    SimpleString groupList;
 8011606:	f107 0314 	add.w	r3, r7, #20
 801160a:	4618      	mov	r0, r3
 801160c:	f7fb faf9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8011610:	bf00      	nop
 8011612:	373c      	adds	r7, #60	; 0x3c
 8011614:	46bd      	mov	sp, r7
 8011616:	bd90      	pop	{r4, r7, pc}
 8011618:	080247cc 	.word	0x080247cc
 801161c:	080247d0 	.word	0x080247d0
 8011620:	080247d4 	.word	0x080247d4

08011624 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8011624:	b590      	push	{r4, r7, lr}
 8011626:	b091      	sub	sp, #68	; 0x44
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 801162e:	f107 0314 	add.w	r3, r7, #20
 8011632:	4964      	ldr	r1, [pc, #400]	; (80117c4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011634:	4618      	mov	r0, r3
 8011636:	f7fa ff2c 	bl	800c492 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011642:	2b00      	cmp	r3, #0
 8011644:	d06e      	beq.n	8011724 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 8011646:	683a      	ldr	r2, [r7, #0]
 8011648:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 fa6e 	bl	8011b2c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8011650:	4603      	mov	r3, r0
 8011652:	2b00      	cmp	r3, #0
 8011654:	d05e      	beq.n	8011714 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 8011656:	f107 030c 	add.w	r3, r7, #12
 801165a:	495a      	ldr	r1, [pc, #360]	; (80117c4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 801165c:	4618      	mov	r0, r3
 801165e:	f7fa ff18 	bl	800c492 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 8011662:	f107 030c 	add.w	r3, r7, #12
 8011666:	4958      	ldr	r1, [pc, #352]	; (80117c8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011668:	4618      	mov	r0, r3
 801166a:	f7fb fb59 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 801166e:	f107 031c 	add.w	r3, r7, #28
 8011672:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011674:	4618      	mov	r0, r3
 8011676:	f001 f916 	bl	80128a6 <_ZNK10UtestShell8getGroupEv>
 801167a:	f107 021c 	add.w	r2, r7, #28
 801167e:	f107 030c 	add.w	r3, r7, #12
 8011682:	4611      	mov	r1, r2
 8011684:	4618      	mov	r0, r3
 8011686:	f7fb fb39 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801168a:	f107 031c 	add.w	r3, r7, #28
 801168e:	4618      	mov	r0, r3
 8011690:	f7fb fab7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8011694:	f107 030c 	add.w	r3, r7, #12
 8011698:	494c      	ldr	r1, [pc, #304]	; (80117cc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 801169a:	4618      	mov	r0, r3
 801169c:	f7fb fb40 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 80116a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80116a6:	4618      	mov	r0, r3
 80116a8:	f001 f8ee 	bl	8012888 <_ZNK10UtestShell7getNameEv>
 80116ac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80116b0:	f107 030c 	add.w	r3, r7, #12
 80116b4:	4611      	mov	r1, r2
 80116b6:	4618      	mov	r0, r3
 80116b8:	f7fb fb20 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 80116bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7fb fa9e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 80116c6:	f107 030c 	add.w	r3, r7, #12
 80116ca:	493f      	ldr	r1, [pc, #252]	; (80117c8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7fb fb27 	bl	800cd20 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 80116d2:	f107 020c 	add.w	r2, r7, #12
 80116d6:	f107 0314 	add.w	r3, r7, #20
 80116da:	4611      	mov	r1, r2
 80116dc:	4618      	mov	r0, r3
 80116de:	f7fa ff56 	bl	800c58e <_ZNK12SimpleString8containsERKS_>
 80116e2:	4603      	mov	r3, r0
 80116e4:	f083 0301 	eor.w	r3, r3, #1
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d00d      	beq.n	801170a <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 80116ee:	f107 020c 	add.w	r2, r7, #12
 80116f2:	f107 0314 	add.w	r3, r7, #20
 80116f6:	4611      	mov	r1, r2
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7fb faff 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 80116fe:	f107 0314 	add.w	r3, r7, #20
 8011702:	4933      	ldr	r1, [pc, #204]	; (80117d0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011704:	4618      	mov	r0, r3
 8011706:	f7fb fb0b 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 801170a:	f107 030c 	add.w	r3, r7, #12
 801170e:	4618      	mov	r0, r3
 8011710:	f7fb fa77 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	330c      	adds	r3, #12
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801171e:	4798      	blx	r3
 8011720:	63f8      	str	r0, [r7, #60]	; 0x3c
 8011722:	e78d      	b.n	8011640 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8011724:	f107 0314 	add.w	r3, r7, #20
 8011728:	4a26      	ldr	r2, [pc, #152]	; (80117c4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 801172a:	4927      	ldr	r1, [pc, #156]	; (80117c8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 801172c:	4618      	mov	r0, r3
 801172e:	f7fb f8c5 	bl	800c8bc <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 8011732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011736:	4926      	ldr	r1, [pc, #152]	; (80117d0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011738:	4618      	mov	r0, r3
 801173a:	f7fa feaa 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801173e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011742:	f107 0314 	add.w	r3, r7, #20
 8011746:	4611      	mov	r1, r2
 8011748:	4618      	mov	r0, r3
 801174a:	f7fa ff9f 	bl	800c68c <_ZNK12SimpleString8endsWithERKS_>
 801174e:	4603      	mov	r3, r0
 8011750:	461c      	mov	r4, r3
 8011752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011756:	4618      	mov	r0, r3
 8011758:	f7fb fa53 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801175c:	2c00      	cmp	r4, #0
 801175e:	d01a      	beq.n	8011796 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8011760:	f107 0314 	add.w	r3, r7, #20
 8011764:	4618      	mov	r0, r3
 8011766:	f7fb fa2b 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 801176a:	4603      	mov	r3, r0
 801176c:	3b01      	subs	r3, #1
 801176e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8011772:	f107 0114 	add.w	r1, r7, #20
 8011776:	2200      	movs	r2, #0
 8011778:	f7fb fb4c 	bl	800ce14 <_ZNK12SimpleString9subStringEjj>
 801177c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011780:	f107 0314 	add.w	r3, r7, #20
 8011784:	4611      	mov	r1, r2
 8011786:	4618      	mov	r0, r3
 8011788:	f7fa feef 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801178c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011790:	4618      	mov	r0, r3
 8011792:	f7fb fa36 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	3338      	adds	r3, #56	; 0x38
 801179c:	681c      	ldr	r4, [r3, #0]
 801179e:	f107 0314 	add.w	r3, r7, #20
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7fb fa00 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 80117a8:	4603      	mov	r3, r0
 80117aa:	4619      	mov	r1, r3
 80117ac:	6838      	ldr	r0, [r7, #0]
 80117ae:	47a0      	blx	r4
    SimpleString groupAndNameList;
 80117b0:	f107 0314 	add.w	r3, r7, #20
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7fb fa24 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 80117ba:	bf00      	nop
 80117bc:	3744      	adds	r7, #68	; 0x44
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd90      	pop	{r4, r7, pc}
 80117c2:	bf00      	nop
 80117c4:	080247cc 	.word	0x080247cc
 80117c8:	080247d0 	.word	0x080247d0
 80117cc:	080247d8 	.word	0x080247d8
 80117d0:	080247d4 	.word	0x080247d4

080117d4 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 80117d4:	b590      	push	{r4, r7, lr}
 80117d6:	b091      	sub	sp, #68	; 0x44
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
 80117dc:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 80117de:	f107 0314 	add.w	r3, r7, #20
 80117e2:	494f      	ldr	r1, [pc, #316]	; (8011920 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7fa fe54 	bl	800c492 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d07d      	beq.n	80118f2 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 80117f6:	f107 030c 	add.w	r3, r7, #12
 80117fa:	4949      	ldr	r1, [pc, #292]	; (8011920 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7fa fe48 	bl	800c492 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 8011802:	f107 031c 	add.w	r3, r7, #28
 8011806:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011808:	4618      	mov	r0, r3
 801180a:	f001 f84c 	bl	80128a6 <_ZNK10UtestShell8getGroupEv>
 801180e:	f107 021c 	add.w	r2, r7, #28
 8011812:	f107 030c 	add.w	r3, r7, #12
 8011816:	4611      	mov	r1, r2
 8011818:	4618      	mov	r0, r3
 801181a:	f7fb fa6f 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801181e:	f107 031c 	add.w	r3, r7, #28
 8011822:	4618      	mov	r0, r3
 8011824:	f7fb f9ed 	bl	800cc02 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8011828:	f107 030c 	add.w	r3, r7, #12
 801182c:	493d      	ldr	r1, [pc, #244]	; (8011924 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801182e:	4618      	mov	r0, r3
 8011830:	f7fb fa76 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8011834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801183a:	4618      	mov	r0, r3
 801183c:	f001 f824 	bl	8012888 <_ZNK10UtestShell7getNameEv>
 8011840:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011844:	f107 030c 	add.w	r3, r7, #12
 8011848:	4611      	mov	r1, r2
 801184a:	4618      	mov	r0, r3
 801184c:	f7fb fa56 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8011850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011854:	4618      	mov	r0, r3
 8011856:	f7fb f9d4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 801185a:	f107 030c 	add.w	r3, r7, #12
 801185e:	4931      	ldr	r1, [pc, #196]	; (8011924 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011860:	4618      	mov	r0, r3
 8011862:	f7fb fa5d 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 8011866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801186a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801186c:	4618      	mov	r0, r3
 801186e:	f001 f8dc 	bl	8012a2a <_ZNK10UtestShell7getFileEv>
 8011872:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011876:	f107 030c 	add.w	r3, r7, #12
 801187a:	4611      	mov	r1, r2
 801187c:	4618      	mov	r0, r3
 801187e:	f7fb fa3d 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8011882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011886:	4618      	mov	r0, r3
 8011888:	f7fb f9bb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 801188c:	f107 030c 	add.w	r3, r7, #12
 8011890:	4924      	ldr	r1, [pc, #144]	; (8011924 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011892:	4618      	mov	r0, r3
 8011894:	f7fb fa44 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8011898:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801189a:	f001 f8d5 	bl	8012a48 <_ZNK10UtestShell13getLineNumberEv>
 801189e:	4603      	mov	r3, r0
 80118a0:	461a      	mov	r2, r3
 80118a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80118a6:	4920      	ldr	r1, [pc, #128]	; (8011928 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7fb feb1 	bl	800d610 <_Z16StringFromFormatPKcz>
 80118ae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80118b2:	f107 030c 	add.w	r3, r7, #12
 80118b6:	4611      	mov	r1, r2
 80118b8:	4618      	mov	r0, r3
 80118ba:	f7fb fa1f 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 80118be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fb f99d 	bl	800cc02 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 80118c8:	f107 020c 	add.w	r2, r7, #12
 80118cc:	f107 0314 	add.w	r3, r7, #20
 80118d0:	4611      	mov	r1, r2
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7fb fa12 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 80118d8:	f107 030c 	add.w	r3, r7, #12
 80118dc:	4618      	mov	r0, r3
 80118de:	f7fb f990 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80118e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	330c      	adds	r3, #12
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80118ec:	4798      	blx	r3
 80118ee:	63f8      	str	r0, [r7, #60]	; 0x3c
 80118f0:	e77e      	b.n	80117f0 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	3338      	adds	r3, #56	; 0x38
 80118f8:	681c      	ldr	r4, [r3, #0]
 80118fa:	f107 0314 	add.w	r3, r7, #20
 80118fe:	4618      	mov	r0, r3
 8011900:	f7fb f952 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8011904:	4603      	mov	r3, r0
 8011906:	4619      	mov	r1, r3
 8011908:	6838      	ldr	r0, [r7, #0]
 801190a:	47a0      	blx	r4
    SimpleString testLocations;
 801190c:	f107 0314 	add.w	r3, r7, #20
 8011910:	4618      	mov	r0, r3
 8011912:	f7fb f976 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8011916:	bf00      	nop
 8011918:	3744      	adds	r7, #68	; 0x44
 801191a:	46bd      	mov	sp, r7
 801191c:	bd90      	pop	{r4, r7, pc}
 801191e:	bf00      	nop
 8011920:	080247cc 	.word	0x080247cc
 8011924:	080247d8 	.word	0x080247d8
 8011928:	080247dc 	.word	0x080247dc

0801192c <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 801192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801192e:	b087      	sub	sp, #28
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 8011936:	2400      	movs	r4, #0
 8011938:	2500      	movs	r5, #0
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d028      	beq.n	8011992 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	330c      	adds	r3, #12
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	6838      	ldr	r0, [r7, #0]
 801194a:	4798      	blx	r3
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d01f      	beq.n	8011992 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8011952:	f107 0308 	add.w	r3, r7, #8
 8011956:	6839      	ldr	r1, [r7, #0]
 8011958:	4618      	mov	r0, r3
 801195a:	f000 ffa4 	bl	80128a6 <_ZNK10UtestShell8getGroupEv>
 801195e:	2401      	movs	r4, #1
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	330c      	adds	r3, #12
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	6838      	ldr	r0, [r7, #0]
 801196a:	4798      	blx	r3
 801196c:	4602      	mov	r2, r0
 801196e:	f107 0310 	add.w	r3, r7, #16
 8011972:	4611      	mov	r1, r2
 8011974:	4618      	mov	r0, r3
 8011976:	f000 ff96 	bl	80128a6 <_ZNK10UtestShell8getGroupEv>
 801197a:	2501      	movs	r5, #1
 801197c:	f107 0210 	add.w	r2, r7, #16
 8011980:	f107 0308 	add.w	r3, r7, #8
 8011984:	4611      	mov	r1, r2
 8011986:	4618      	mov	r0, r3
 8011988:	f7fb f98c 	bl	800cca4 <_ZneRK12SimpleStringS1_>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	d001      	beq.n	8011996 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 8011992:	2601      	movs	r6, #1
 8011994:	e000      	b.n	8011998 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8011996:	2600      	movs	r6, #0
 8011998:	2d00      	cmp	r5, #0
 801199a:	d004      	beq.n	80119a6 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 801199c:	f107 0310 	add.w	r3, r7, #16
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fb f92e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80119a6:	2c00      	cmp	r4, #0
 80119a8:	d004      	beq.n	80119b4 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 80119aa:	f107 0308 	add.w	r3, r7, #8
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fb f927 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80119b4:	4633      	mov	r3, r6
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	371c      	adds	r7, #28
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119be <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 80119be:	b580      	push	{r7, lr}
 80119c0:	b082      	sub	sp, #8
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d00a      	beq.n	80119e4 <_ZN12TestRegistry10countTestsEv+0x26>
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	685a      	ldr	r2, [r3, #4]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	3310      	adds	r3, #16
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	4610      	mov	r0, r2
 80119de:	4798      	blx	r3
 80119e0:	4603      	mov	r3, r0
 80119e2:	e000      	b.n	80119e6 <_ZN12TestRegistry10countTestsEv+0x28>
 80119e4:	2300      	movs	r3, #0
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3708      	adds	r7, #8
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
	...

080119f0 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 80119f0:	b580      	push	{r7, lr}
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	4801      	ldr	r0, [pc, #4]	; (80119fc <__tcf_0+0xc>)
 80119f6:	f7ff fcad 	bl	8011354 <_ZN12TestRegistryD1Ev>
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	20000a30 	.word	0x20000a30

08011a00 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8011a04:	4b15      	ldr	r3, [pc, #84]	; (8011a5c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	f3bf 8f5b 	dmb	ish
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	f003 0301 	and.w	r3, r3, #1
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	bf0c      	ite	eq
 8011a16:	2301      	moveq	r3, #1
 8011a18:	2300      	movne	r3, #0
 8011a1a:	b2db      	uxtb	r3, r3
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d013      	beq.n	8011a48 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8011a20:	480e      	ldr	r0, [pc, #56]	; (8011a5c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011a22:	f00d fbf5 	bl	801f210 <__cxa_guard_acquire>
 8011a26:	4603      	mov	r3, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	bf14      	ite	ne
 8011a2c:	2301      	movne	r3, #1
 8011a2e:	2300      	moveq	r3, #0
 8011a30:	b2db      	uxtb	r3, r3
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d008      	beq.n	8011a48 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8011a36:	480a      	ldr	r0, [pc, #40]	; (8011a60 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8011a38:	f7ff fc66 	bl	8011308 <_ZN12TestRegistryC1Ev>
 8011a3c:	4807      	ldr	r0, [pc, #28]	; (8011a5c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011a3e:	f00d fbf3 	bl	801f228 <__cxa_guard_release>
 8011a42:	4808      	ldr	r0, [pc, #32]	; (8011a64 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8011a44:	f00d fc17 	bl	801f276 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8011a48:	4b07      	ldr	r3, [pc, #28]	; (8011a68 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d002      	beq.n	8011a56 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8011a50:	4b05      	ldr	r3, [pc, #20]	; (8011a68 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	e000      	b.n	8011a58 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8011a56:	4b02      	ldr	r3, [pc, #8]	; (8011a60 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	20000a50 	.word	0x20000a50
 8011a60:	20000a30 	.word	0x20000a30
 8011a64:	080119f1 	.word	0x080119f1
 8011a68:	20000a2c 	.word	0x20000a2c

08011a6c <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8011a76:	4a04      	ldr	r2, [pc, #16]	; (8011a88 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	6013      	str	r3, [r2, #0]
}
 8011a7c:	bf00      	nop
 8011a7e:	370c      	adds	r7, #12
 8011a80:	46bd      	mov	sp, r7
 8011a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a86:	4770      	bx	lr
 8011a88:	20000a2c 	.word	0x20000a2c

08011a8c <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d00a      	beq.n	8011ab2 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	685a      	ldr	r2, [r3, #4]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	685b      	ldr	r3, [r3, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	330c      	adds	r3, #12
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	4610      	mov	r0, r2
 8011aac:	4798      	blx	r3
 8011aae:	4603      	mov	r3, r0
 8011ab0:	e000      	b.n	8011ab4 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	687a      	ldr	r2, [r7, #4]
 8011ab6:	6053      	str	r3, [r2, #4]

}
 8011ab8:	bf00      	nop
 8011aba:	3708      	adds	r7, #8
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	683a      	ldr	r2, [r7, #0]
 8011ace:	609a      	str	r2, [r3, #8]
}
 8011ad0:	bf00      	nop
 8011ad2:	370c      	adds	r7, #12
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ada:	4770      	bx	lr

08011adc <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8011adc:	b480      	push	{r7}
 8011ade:	b083      	sub	sp, #12
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	683a      	ldr	r2, [r7, #0]
 8011aea:	60da      	str	r2, [r3, #12]
}
 8011aec:	bf00      	nop
 8011aee:	370c      	adds	r7, #12
 8011af0:	46bd      	mov	sp, r7
 8011af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af6:	4770      	bx	lr

08011af8 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8011af8:	b480      	push	{r7}
 8011afa:	b083      	sub	sp, #12
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2201      	movs	r2, #1
 8011b04:	771a      	strb	r2, [r3, #28]
}
 8011b06:	bf00      	nop
 8011b08:	370c      	adds	r7, #12
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr

08011b12 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8011b12:	b480      	push	{r7}
 8011b14:	b083      	sub	sp, #12
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	751a      	strb	r2, [r3, #20]
}
 8011b20:	bf00      	nop
 8011b22:	370c      	adds	r7, #12
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr

08011b2c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b084      	sub	sp, #16
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	60f8      	str	r0, [r7, #12]
 8011b34:	60b9      	str	r1, [r7, #8]
 8011b36:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	68d9      	ldr	r1, [r3, #12]
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	689b      	ldr	r3, [r3, #8]
 8011b40:	461a      	mov	r2, r3
 8011b42:	68b8      	ldr	r0, [r7, #8]
 8011b44:	f000 ffbb 	bl	8012abe <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d001      	beq.n	8011b52 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8011b4e:	2301      	movs	r3, #1
 8011b50:	e006      	b.n	8011b60 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	332c      	adds	r3, #44	; 0x2c
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	4798      	blx	r3
        return false;
 8011b5e:	2300      	movs	r3, #0
    }
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3710      	adds	r7, #16
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8011b70:	f7ff fb62 	bl	8011238 <_ZN14NullTestPlugin8instanceEv>
 8011b74:	4602      	mov	r2, r0
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	611a      	str	r2, [r3, #16]
}
 8011b7a:	bf00      	nop
 8011b7c:	3708      	adds	r7, #8
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}

08011b82 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 8011b82:	b580      	push	{r7, lr}
 8011b84:	b082      	sub	sp, #8
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	6078      	str	r0, [r7, #4]
 8011b8a:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	3324      	adds	r3, #36	; 0x24
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	6912      	ldr	r2, [r2, #16]
 8011b98:	4611      	mov	r1, r2
 8011b9a:	6838      	ldr	r0, [r7, #0]
 8011b9c:	4798      	blx	r3
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	611a      	str	r2, [r3, #16]
}
 8011ba4:	bf00      	nop
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	691b      	ldr	r3, [r3, #16]
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	370c      	adds	r7, #12
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	691b      	ldr	r3, [r3, #16]
 8011bd2:	6839      	ldr	r1, [r7, #0]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f7ff fa52 	bl	801107e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8011bda:	4603      	mov	r3, r0
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3708      	adds	r7, #8
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	691a      	ldr	r2, [r3, #16]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	691b      	ldr	r3, [r3, #16]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	3328      	adds	r3, #40	; 0x28
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	6839      	ldr	r1, [r7, #0]
 8011bfe:	4610      	mov	r0, r2
 8011c00:	4798      	blx	r3
 8011c02:	4602      	mov	r2, r0
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	691b      	ldr	r3, [r3, #16]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	bf0c      	ite	eq
 8011c0c:	2301      	moveq	r3, #1
 8011c0e:	2300      	movne	r3, #0
 8011c10:	b2db      	uxtb	r3, r3
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d00b      	beq.n	8011c2e <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	691a      	ldr	r2, [r3, #16]
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	691b      	ldr	r3, [r3, #16]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	332c      	adds	r3, #44	; 0x2c
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	4610      	mov	r0, r2
 8011c26:	4798      	blx	r3
 8011c28:	4602      	mov	r2, r0
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	691b      	ldr	r3, [r3, #16]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7ff fa17 	bl	8011066 <_ZN10TestPlugin7getNameEv>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	6839      	ldr	r1, [r7, #0]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7fa ffec 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d00b      	beq.n	8011c60 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	691a      	ldr	r2, [r3, #16]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	691b      	ldr	r3, [r3, #16]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	332c      	adds	r3, #44	; 0x2c
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	4610      	mov	r0, r2
 8011c58:	4798      	blx	r3
 8011c5a:	4602      	mov	r2, r0
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	691a      	ldr	r2, [r3, #16]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	691b      	ldr	r3, [r3, #16]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	3328      	adds	r3, #40	; 0x28
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	6839      	ldr	r1, [r7, #0]
 8011c70:	4610      	mov	r0, r2
 8011c72:	4798      	blx	r3
}
 8011c74:	bf00      	nop
 8011c76:	3708      	adds	r7, #8
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
    int count = 0;
 8011c84:	2300      	movs	r3, #0
 8011c86:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	691b      	ldr	r3, [r3, #16]
 8011c8c:	60bb      	str	r3, [r7, #8]
 8011c8e:	f7ff fad3 	bl	8011238 <_ZN14NullTestPlugin8instanceEv>
 8011c92:	4602      	mov	r2, r0
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	4293      	cmp	r3, r2
 8011c98:	bf14      	ite	ne
 8011c9a:	2301      	movne	r3, #1
 8011c9c:	2300      	moveq	r3, #0
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d00a      	beq.n	8011cba <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	332c      	adds	r3, #44	; 0x2c
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	68b8      	ldr	r0, [r7, #8]
 8011cb4:	4798      	blx	r3
 8011cb6:	60b8      	str	r0, [r7, #8]
 8011cb8:	e7e9      	b.n	8011c8e <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8011cba:	68fb      	ldr	r3, [r7, #12]
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3710      	adds	r7, #16
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
    return tests_;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	685b      	ldr	r3, [r3, #4]
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	370c      	adds	r7, #12
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cda:	4770      	bx	lr

08011cdc <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b084      	sub	sp, #16
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	334c      	adds	r3, #76	; 0x4c
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	4798      	blx	r3
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	f107 0308 	add.w	r3, r7, #8
 8011cf8:	4611      	mov	r1, r2
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f002 f8f8 	bl	8013ef0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8011d00:	f107 0308 	add.w	r3, r7, #8
 8011d04:	6839      	ldr	r1, [r7, #0]
 8011d06:	4618      	mov	r0, r3
 8011d08:	f002 f980 	bl	801400c <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8011d0c:	f107 0308 	add.w	r3, r7, #8
 8011d10:	4618      	mov	r0, r3
 8011d12:	f002 fa13 	bl	801413c <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8011d16:	4602      	mov	r2, r0
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8011d1c:	f107 0308 	add.w	r3, r7, #8
 8011d20:	4618      	mov	r0, r3
 8011d22:	f002 f939 	bl	8013f98 <_ZN22UtestShellPointerArrayD1Ev>
}
 8011d26:	bf00      	nop
 8011d28:	3710      	adds	r7, #16
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}

08011d2e <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b084      	sub	sp, #16
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	334c      	adds	r3, #76	; 0x4c
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	4798      	blx	r3
 8011d42:	4602      	mov	r2, r0
 8011d44:	f107 0308 	add.w	r3, r7, #8
 8011d48:	4611      	mov	r1, r2
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f002 f8d0 	bl	8013ef0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8011d50:	f107 0308 	add.w	r3, r7, #8
 8011d54:	4618      	mov	r0, r3
 8011d56:	f002 f995 	bl	8014084 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8011d5a:	f107 0308 	add.w	r3, r7, #8
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f002 f9ec 	bl	801413c <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8011d64:	4602      	mov	r2, r0
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8011d6a:	f107 0308 	add.w	r3, r7, #8
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f002 f912 	bl	8013f98 <_ZN22UtestShellPointerArrayD1Ev>
}
 8011d74:	bf00      	nop
 8011d76:	3710      	adds	r7, #16
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}

08011d7c <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00b      	beq.n	8011daa <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	330c      	adds	r3, #12
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	68f8      	ldr	r0, [r7, #12]
 8011d9c:	4798      	blx	r3
 8011d9e:	4602      	mov	r2, r0
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	4293      	cmp	r3, r2
 8011da4:	d001      	beq.n	8011daa <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8011da6:	2301      	movs	r3, #1
 8011da8:	e000      	b.n	8011dac <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8011daa:	2300      	movs	r3, #0
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d007      	beq.n	8011dc0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	330c      	adds	r3, #12
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	68f8      	ldr	r0, [r7, #12]
 8011dba:	4798      	blx	r3
 8011dbc:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 8011dbe:	e7e5      	b.n	8011d8c <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}

08011dca <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 8011dca:	b590      	push	{r4, r7, lr}
 8011dcc:	b087      	sub	sp, #28
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
 8011dd2:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	685b      	ldr	r3, [r3, #4]
 8011dd8:	617b      	str	r3, [r7, #20]
    while (current) {
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d01e      	beq.n	8011e1e <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8011de0:	f107 030c 	add.w	r3, r7, #12
 8011de4:	6979      	ldr	r1, [r7, #20]
 8011de6:	4618      	mov	r0, r3
 8011de8:	f000 fd4e 	bl	8012888 <_ZNK10UtestShell7getNameEv>
 8011dec:	f107 030c 	add.w	r3, r7, #12
 8011df0:	6839      	ldr	r1, [r7, #0]
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fa ff11 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	461c      	mov	r4, r3
 8011dfc:	f107 030c 	add.w	r3, r7, #12
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7fa fefe 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8011e06:	2c00      	cmp	r4, #0
 8011e08:	d001      	beq.n	8011e0e <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	e008      	b.n	8011e20 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	330c      	adds	r3, #12
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	6978      	ldr	r0, [r7, #20]
 8011e18:	4798      	blx	r3
 8011e1a:	6178      	str	r0, [r7, #20]
    while (current) {
 8011e1c:	e7dd      	b.n	8011dda <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8011e1e:	2300      	movs	r3, #0
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	371c      	adds	r7, #28
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd90      	pop	{r4, r7, pc}

08011e28 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8011e28:	b590      	push	{r4, r7, lr}
 8011e2a:	b087      	sub	sp, #28
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	617b      	str	r3, [r7, #20]
    while (current) {
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d01e      	beq.n	8011e7c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 8011e3e:	f107 030c 	add.w	r3, r7, #12
 8011e42:	6979      	ldr	r1, [r7, #20]
 8011e44:	4618      	mov	r0, r3
 8011e46:	f000 fd2e 	bl	80128a6 <_ZNK10UtestShell8getGroupEv>
 8011e4a:	f107 030c 	add.w	r3, r7, #12
 8011e4e:	6839      	ldr	r1, [r7, #0]
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7fa fee2 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8011e56:	4603      	mov	r3, r0
 8011e58:	461c      	mov	r4, r3
 8011e5a:	f107 030c 	add.w	r3, r7, #12
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7fa fecf 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8011e64:	2c00      	cmp	r4, #0
 8011e66:	d001      	beq.n	8011e6c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	e008      	b.n	8011e7e <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	330c      	adds	r3, #12
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	6978      	ldr	r0, [r7, #20]
 8011e76:	4798      	blx	r3
 8011e78:	6178      	str	r0, [r7, #20]
    while (current) {
 8011e7a:	e7dd      	b.n	8011e38 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8011e7c:	2300      	movs	r3, #0
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	371c      	adds	r7, #28
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd90      	pop	{r4, r7, pc}
	...

08011e88 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 8011e92:	4a18      	ldr	r2, [pc, #96]	; (8011ef4 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	601a      	str	r2, [r3, #0]
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	605a      	str	r2, [r3, #4]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	609a      	str	r2, [r3, #8]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	60da      	str	r2, [r3, #12]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2200      	movs	r2, #0
 8011eae:	611a      	str	r2, [r3, #16]
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	615a      	str	r2, [r3, #20]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	619a      	str	r2, [r3, #24]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	61da      	str	r2, [r3, #28]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	621a      	str	r2, [r3, #32]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	625a      	str	r2, [r3, #36]	; 0x24
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2200      	movs	r2, #0
 8011ede:	631a      	str	r2, [r3, #48]	; 0x30
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	4618      	mov	r0, r3
 8011eea:	370c      	adds	r7, #12
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr
 8011ef4:	080281c4 	.word	0x080281c4

08011ef8 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	4a04      	ldr	r2, [pc, #16]	; (8011f14 <_ZN10TestResultD1Ev+0x1c>)
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	601a      	str	r2, [r3, #0]
{
}
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	4618      	mov	r0, r3
 8011f0a:	370c      	adds	r7, #12
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f12:	4770      	bx	lr
 8011f14:	080281c4 	.word	0x080281c4

08011f18 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
}
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f7ff ffe9 	bl	8011ef8 <_ZN10TestResultD1Ev>
 8011f26:	2138      	movs	r1, #56	; 0x38
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f7f7 ff03 	bl	8009d34 <_ZdlPvj>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	4618      	mov	r0, r3
 8011f32:	3708      	adds	r7, #8
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}

08011f38 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	685a      	ldr	r2, [r3, #4]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	3318      	adds	r3, #24
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	6839      	ldr	r1, [r7, #0]
 8011f52:	4610      	mov	r0, r2
 8011f54:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8011f56:	4b05      	ldr	r3, [pc, #20]	; (8011f6c <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	4798      	blx	r3
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	461a      	mov	r2, r3
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011f64:	bf00      	nop
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	200000a8 	.word	0x200000a8

08011f70 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b082      	sub	sp, #8
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
 8011f78:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8011f7a:	4b0c      	ldr	r3, [pc, #48]	; (8011fac <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	4798      	blx	r3
 8011f80:	4603      	mov	r3, r0
 8011f82:	461a      	mov	r2, r3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f88:	1ad2      	subs	r2, r2, r3
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	685a      	ldr	r2, [r3, #4]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	331c      	adds	r3, #28
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	6879      	ldr	r1, [r7, #4]
 8011f9e:	4610      	mov	r0, r2
 8011fa0:	4798      	blx	r3
}
 8011fa2:	bf00      	nop
 8011fa4:	3708      	adds	r7, #8
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	200000a8 	.word	0x200000a8

08011fb0 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	685a      	ldr	r2, [r3, #4]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	3310      	adds	r3, #16
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	6839      	ldr	r1, [r7, #0]
 8011fca:	4610      	mov	r0, r2
 8011fcc:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8011fce:	4b05      	ldr	r3, [pc, #20]	; (8011fe4 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	4798      	blx	r3
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011fdc:	bf00      	nop
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	200000a8 	.word	0x200000a8

08011fe8 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	685a      	ldr	r2, [r3, #4]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	332c      	adds	r3, #44	; 0x2c
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	6839      	ldr	r1, [r7, #0]
 8012002:	4610      	mov	r0, r2
 8012004:	4798      	blx	r3
}
 8012006:	bf00      	nop
 8012008:	3708      	adds	r7, #8
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}

0801200e <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 801200e:	b580      	push	{r7, lr}
 8012010:	b082      	sub	sp, #8
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
 8012016:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	685a      	ldr	r2, [r3, #4]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	3348      	adds	r3, #72	; 0x48
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	6839      	ldr	r1, [r7, #0]
 8012028:	4610      	mov	r0, r2
 801202a:	4798      	blx	r3
}
 801202c:	bf00      	nop
 801202e:	3708      	adds	r7, #8
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 801203e:	4b0c      	ldr	r3, [pc, #48]	; (8012070 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	4798      	blx	r3
 8012044:	4603      	mov	r3, r0
 8012046:	461a      	mov	r2, r3
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801204c:	1ad2      	subs	r2, r2, r3
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	685a      	ldr	r2, [r3, #4]
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	3314      	adds	r3, #20
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	6879      	ldr	r1, [r7, #4]
 8012062:	4610      	mov	r0, r2
 8012064:	4798      	blx	r3

}
 8012066:	bf00      	nop
 8012068:	3708      	adds	r7, #8
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
 801206e:	bf00      	nop
 8012070:	200000a8 	.word	0x200000a8

08012074 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	685a      	ldr	r2, [r3, #4]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	333c      	adds	r3, #60	; 0x3c
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	6839      	ldr	r1, [r7, #0]
 801208e:	4610      	mov	r0, r2
 8012090:	4798      	blx	r3
    failureCount_++;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	695b      	ldr	r3, [r3, #20]
 8012096:	1c5a      	adds	r2, r3, #1
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	615a      	str	r2, [r3, #20]
}
 801209c:	bf00      	nop
 801209e:	3708      	adds	r7, #8
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
    testCount_++;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	689b      	ldr	r3, [r3, #8]
 80120b0:	1c5a      	adds	r2, r3, #1
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	609a      	str	r2, [r3, #8]
}
 80120b6:	bf00      	nop
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr

080120c2 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 80120c2:	b480      	push	{r7}
 80120c4:	b083      	sub	sp, #12
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
    runCount_++;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	68db      	ldr	r3, [r3, #12]
 80120ce:	1c5a      	adds	r2, r3, #1
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	60da      	str	r2, [r3, #12]
}
 80120d4:	bf00      	nop
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
    checkCount_++;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	691b      	ldr	r3, [r3, #16]
 80120ec:	1c5a      	adds	r2, r3, #1
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	611a      	str	r2, [r3, #16]
}
 80120f2:	bf00      	nop
 80120f4:	370c      	adds	r7, #12
 80120f6:	46bd      	mov	sp, r7
 80120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fc:	4770      	bx	lr

080120fe <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 80120fe:	b480      	push	{r7}
 8012100:	b083      	sub	sp, #12
 8012102:	af00      	add	r7, sp, #0
 8012104:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	699b      	ldr	r3, [r3, #24]
 801210a:	1c5a      	adds	r2, r3, #1
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	619a      	str	r2, [r3, #24]
}
 8012110:	bf00      	nop
 8012112:	370c      	adds	r7, #12
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr

0801211c <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 801211c:	b480      	push	{r7}
 801211e:	b083      	sub	sp, #12
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	69db      	ldr	r3, [r3, #28]
 8012128:	1c5a      	adds	r2, r3, #1
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	61da      	str	r2, [r3, #28]
}
 801212e:	bf00      	nop
 8012130:	370c      	adds	r7, #12
 8012132:	46bd      	mov	sp, r7
 8012134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012138:	4770      	bx	lr
	...

0801213c <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012144:	4b09      	ldr	r3, [pc, #36]	; (801216c <_ZN10TestResult12testsStartedEv+0x30>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	4798      	blx	r3
 801214a:	4603      	mov	r3, r0
 801214c:	461a      	mov	r2, r3
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	685a      	ldr	r2, [r3, #4]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	3308      	adds	r3, #8
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	4610      	mov	r0, r2
 8012162:	4798      	blx	r3
}
 8012164:	bf00      	nop
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}
 801216c:	200000a8 	.word	0x200000a8

08012170 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8012178:	4b0c      	ldr	r3, [pc, #48]	; (80121ac <_ZN10TestResult10testsEndedEv+0x3c>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	4798      	blx	r3
 801217e:	4603      	mov	r3, r0
 8012180:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012186:	68fa      	ldr	r2, [r7, #12]
 8012188:	1ad2      	subs	r2, r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	685a      	ldr	r2, [r3, #4]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	330c      	adds	r3, #12
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	6879      	ldr	r1, [r7, #4]
 801219e:	4610      	mov	r0, r2
 80121a0:	4798      	blx	r3
}
 80121a2:	bf00      	nop
 80121a4:	3710      	adds	r7, #16
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	200000a8 	.word	0x200000a8

080121b0 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 80121b0:	b480      	push	{r7}
 80121b2:	b083      	sub	sp, #12
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6a1b      	ldr	r3, [r3, #32]
}
 80121bc:	4618      	mov	r0, r3
 80121be:	370c      	adds	r7, #12
 80121c0:	46bd      	mov	sp, r7
 80121c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c6:	4770      	bx	lr

080121c8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 80121c8:	b480      	push	{r7}
 80121ca:	b083      	sub	sp, #12
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80121d4:	4618      	mov	r0, r3
 80121d6:	370c      	adds	r7, #12
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr

080121e0 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 80121e0:	b480      	push	{r7}
 80121e2:	b083      	sub	sp, #12
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	370c      	adds	r7, #12
 80121f0:	46bd      	mov	sp, r7
 80121f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f6:	4770      	bx	lr

080121f8 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 80121f8:	b590      	push	{r4, r7, lr}
 80121fa:	b087      	sub	sp, #28
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8012202:	ed87 1b02 	vstr	d1, [r7, #8]
 8012206:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 801220a:	4b2c      	ldr	r3, [pc, #176]	; (80122bc <_Z13doubles_equalddd+0xc4>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	ed97 0b04 	vldr	d0, [r7, #16]
 8012212:	4798      	blx	r3
 8012214:	4603      	mov	r3, r0
 8012216:	2b00      	cmp	r3, #0
 8012218:	d10f      	bne.n	801223a <_Z13doubles_equalddd+0x42>
 801221a:	4b28      	ldr	r3, [pc, #160]	; (80122bc <_Z13doubles_equalddd+0xc4>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	ed97 0b02 	vldr	d0, [r7, #8]
 8012222:	4798      	blx	r3
 8012224:	4603      	mov	r3, r0
 8012226:	2b00      	cmp	r3, #0
 8012228:	d107      	bne.n	801223a <_Z13doubles_equalddd+0x42>
 801222a:	4b24      	ldr	r3, [pc, #144]	; (80122bc <_Z13doubles_equalddd+0xc4>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	ed97 0b00 	vldr	d0, [r7]
 8012232:	4798      	blx	r3
 8012234:	4603      	mov	r3, r0
 8012236:	2b00      	cmp	r3, #0
 8012238:	d001      	beq.n	801223e <_Z13doubles_equalddd+0x46>
 801223a:	2301      	movs	r3, #1
 801223c:	e000      	b.n	8012240 <_Z13doubles_equalddd+0x48>
 801223e:	2300      	movs	r3, #0
 8012240:	2b00      	cmp	r3, #0
 8012242:	d001      	beq.n	8012248 <_Z13doubles_equalddd+0x50>
        return false;
 8012244:	2300      	movs	r3, #0
 8012246:	e035      	b.n	80122b4 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8012248:	4b1d      	ldr	r3, [pc, #116]	; (80122c0 <_Z13doubles_equalddd+0xc8>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	ed97 0b04 	vldr	d0, [r7, #16]
 8012250:	4798      	blx	r3
 8012252:	4603      	mov	r3, r0
 8012254:	2b00      	cmp	r3, #0
 8012256:	d009      	beq.n	801226c <_Z13doubles_equalddd+0x74>
 8012258:	4b19      	ldr	r3, [pc, #100]	; (80122c0 <_Z13doubles_equalddd+0xc8>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	ed97 0b02 	vldr	d0, [r7, #8]
 8012260:	4798      	blx	r3
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d001      	beq.n	801226c <_Z13doubles_equalddd+0x74>
 8012268:	2301      	movs	r3, #1
 801226a:	e000      	b.n	801226e <_Z13doubles_equalddd+0x76>
 801226c:	2300      	movs	r3, #0
 801226e:	2b00      	cmp	r3, #0
 8012270:	d001      	beq.n	8012276 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8012272:	2301      	movs	r3, #1
 8012274:	e01e      	b.n	80122b4 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8012276:	4b13      	ldr	r3, [pc, #76]	; (80122c4 <_Z13doubles_equalddd+0xcc>)
 8012278:	681c      	ldr	r4, [r3, #0]
 801227a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801227e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012282:	f7ee f841 	bl	8000308 <__aeabi_dsub>
 8012286:	4602      	mov	r2, r0
 8012288:	460b      	mov	r3, r1
 801228a:	ec43 2b17 	vmov	d7, r2, r3
 801228e:	eeb0 0a47 	vmov.f32	s0, s14
 8012292:	eef0 0a67 	vmov.f32	s1, s15
 8012296:	47a0      	blx	r4
 8012298:	ec53 2b10 	vmov	r2, r3, d0
 801229c:	2101      	movs	r1, #1
 801229e:	460c      	mov	r4, r1
 80122a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80122a4:	f7ee fa5c 	bl	8000760 <__aeabi_dcmpge>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d101      	bne.n	80122b2 <_Z13doubles_equalddd+0xba>
 80122ae:	2300      	movs	r3, #0
 80122b0:	461c      	mov	r4, r3
 80122b2:	b2e3      	uxtb	r3, r4
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	371c      	adds	r7, #28
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd90      	pop	{r4, r7, pc}
 80122bc:	200000e8 	.word	0x200000e8
 80122c0:	200000ec 	.word	0x200000ec
 80122c4:	200000dc 	.word	0x200000dc

080122c8 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 80122c8:	b480      	push	{r7}
 80122ca:	b083      	sub	sp, #12
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	332c      	adds	r3, #44	; 0x2c
    }
 80122d4:	4618      	mov	r0, r3
 80122d6:	370c      	adds	r7, #12
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b082      	sub	sp, #8
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
    {
 80122e8:	4a0a      	ldr	r2, [pc, #40]	; (8012314 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	601a      	str	r2, [r3, #0]
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	332c      	adds	r3, #44	; 0x2c
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7ff fe00 	bl	8011ef8 <_ZN10TestResultD1Ev>
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	331c      	adds	r3, #28
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7f6 f815 	bl	800832c <_ZN17ConsoleTestOutputD1Ev>
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	4618      	mov	r0, r3
 8012306:	f000 f943 	bl	8012590 <_ZN10UtestShellD1Ev>
    }
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	4618      	mov	r0, r3
 801230e:	3708      	adds	r7, #8
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}
 8012314:	0802820c 	.word	0x0802820c

08012318 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
    }
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f7ff ffdd 	bl	80122e0 <_ZN22OutsideTestRunnerUTestD1Ev>
 8012326:	2164      	movs	r1, #100	; 0x64
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f7f7 fd03 	bl	8009d34 <_ZdlPvj>
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	4618      	mov	r0, r3
 8012332:	3708      	adds	r7, #8
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af02      	add	r7, sp, #8
 801233e:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	2300      	movs	r3, #0
 8012344:	9300      	str	r3, [sp, #0]
 8012346:	4b0d      	ldr	r3, [pc, #52]	; (801237c <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8012348:	4a0d      	ldr	r2, [pc, #52]	; (8012380 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 801234a:	490e      	ldr	r1, [pc, #56]	; (8012384 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 801234c:	f000 f8f8 	bl	8012540 <_ZN10UtestShellC1EPKcS1_S1_j>
 8012350:	4a0d      	ldr	r2, [pc, #52]	; (8012388 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	601a      	str	r2, [r3, #0]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	331c      	adds	r3, #28
 801235a:	4618      	mov	r0, r3
 801235c:	f7f5 ffd4 	bl	8008308 <_ZN17ConsoleTestOutputC1Ev>
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	331c      	adds	r3, #28
 801236a:	4619      	mov	r1, r3
 801236c:	4610      	mov	r0, r2
 801236e:	f7ff fd8b 	bl	8011e88 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	4618      	mov	r0, r3
 8012376:	3708      	adds	r7, #8
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}
 801237c:	080247e0 	.word	0x080247e0
 8012380:	080247f0 	.word	0x080247f0
 8012384:	08024830 	.word	0x08024830
 8012388:	0802820c 	.word	0x0802820c

0801238c <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 801238c:	b580      	push	{r7, lr}
 801238e:	af00      	add	r7, sp, #0
 8012390:	4801      	ldr	r0, [pc, #4]	; (8012398 <__tcf_0+0xc>)
 8012392:	f7ff ffa5 	bl	80122e0 <_ZN22OutsideTestRunnerUTestD1Ev>
 8012396:	bd80      	pop	{r7, pc}
 8012398:	20000a54 	.word	0x20000a54

0801239c <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 801239c:	b580      	push	{r7, lr}
 801239e:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 80123a0:	4b12      	ldr	r3, [pc, #72]	; (80123ec <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	f3bf 8f5b 	dmb	ish
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	f003 0301 	and.w	r3, r3, #1
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	bf0c      	ite	eq
 80123b2:	2301      	moveq	r3, #1
 80123b4:	2300      	movne	r3, #0
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d013      	beq.n	80123e4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80123bc:	480b      	ldr	r0, [pc, #44]	; (80123ec <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80123be:	f00c ff27 	bl	801f210 <__cxa_guard_acquire>
 80123c2:	4603      	mov	r3, r0
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	bf14      	ite	ne
 80123c8:	2301      	movne	r3, #1
 80123ca:	2300      	moveq	r3, #0
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d008      	beq.n	80123e4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80123d2:	4807      	ldr	r0, [pc, #28]	; (80123f0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 80123d4:	f7ff ffb0 	bl	8012338 <_ZN22OutsideTestRunnerUTestC1Ev>
 80123d8:	4804      	ldr	r0, [pc, #16]	; (80123ec <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80123da:	f00c ff25 	bl	801f228 <__cxa_guard_release>
 80123de:	4805      	ldr	r0, [pc, #20]	; (80123f4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 80123e0:	f00c ff49 	bl	801f276 <atexit>
    return instance_;
 80123e4:	4b02      	ldr	r3, [pc, #8]	; (80123f0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	20000ab8 	.word	0x20000ab8
 80123f0:	20000a54 	.word	0x20000a54
 80123f4:	0801238d 	.word	0x0801238d

080123f8 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	330c      	adds	r3, #12
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	4798      	blx	r3
    }
 801240c:	bf00      	nop
 801240e:	3708      	adds	r7, #8
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}

08012414 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	3314      	adds	r3, #20
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	4798      	blx	r3
    }
 8012428:	bf00      	nop
 801242a:	3708      	adds	r7, #8
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	3310      	adds	r3, #16
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	4798      	blx	r3
    }
 8012444:	bf00      	nop
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 801244c:	b480      	push	{r7}
 801244e:	b085      	sub	sp, #20
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
 8012458:	603b      	str	r3, [r7, #0]
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	68ba      	ldr	r2, [r7, #8]
 801245e:	601a      	str	r2, [r3, #0]
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	605a      	str	r2, [r3, #4]
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	683a      	ldr	r2, [r7, #0]
 801246a:	609a      	str	r2, [r3, #8]
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	4618      	mov	r0, r3
 8012470:	3714      	adds	r7, #20
 8012472:	46bd      	mov	sp, r7
 8012474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012478:	4770      	bx	lr

0801247a <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 801247a:	b580      	push	{r7, lr}
 801247c:	b086      	sub	sp, #24
 801247e:	af00      	add	r7, sp, #0
 8012480:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	685b      	ldr	r3, [r3, #4]
 8012490:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	689b      	ldr	r3, [r3, #8]
 8012496:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	3394      	adds	r3, #148	; 0x94
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	68ba      	ldr	r2, [r7, #8]
 80124a2:	68f9      	ldr	r1, [r7, #12]
 80124a4:	6938      	ldr	r0, [r7, #16]
 80124a6:	4798      	blx	r3
    }
 80124a8:	bf00      	nop
 80124aa:	3718      	adds	r7, #24
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}

080124b0 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b086      	sub	sp, #24
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	689b      	ldr	r3, [r3, #8]
 80124cc:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 80124ce:	4b05      	ldr	r3, [pc, #20]	; (80124e4 <helperDoRunOneTestSeperateProcess+0x34>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	68ba      	ldr	r2, [r7, #8]
 80124d4:	68f9      	ldr	r1, [r7, #12]
 80124d6:	6938      	ldr	r0, [r7, #16]
 80124d8:	4798      	blx	r3
    }
 80124da:	bf00      	nop
 80124dc:	3718      	adds	r7, #24
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	2000009c 	.word	0x2000009c

080124e8 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 80124e8:	b480      	push	{r7}
 80124ea:	b083      	sub	sp, #12
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 80124f0:	4a0f      	ldr	r2, [pc, #60]	; (8012530 <_ZN10UtestShellC1Ev+0x48>)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	601a      	str	r2, [r3, #0]
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	4a0e      	ldr	r2, [pc, #56]	; (8012534 <_ZN10UtestShellC1Ev+0x4c>)
 80124fa:	605a      	str	r2, [r3, #4]
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	4a0e      	ldr	r2, [pc, #56]	; (8012538 <_ZN10UtestShellC1Ev+0x50>)
 8012500:	609a      	str	r2, [r3, #8]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	4a0d      	ldr	r2, [pc, #52]	; (801253c <_ZN10UtestShellC1Ev+0x54>)
 8012506:	60da      	str	r2, [r3, #12]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2200      	movs	r2, #0
 801250c:	611a      	str	r2, [r3, #16]
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2200      	movs	r2, #0
 8012512:	615a      	str	r2, [r3, #20]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2200      	movs	r2, #0
 8012518:	761a      	strb	r2, [r3, #24]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2200      	movs	r2, #0
 801251e:	765a      	strb	r2, [r3, #25]
{
}
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	4618      	mov	r0, r3
 8012524:	370c      	adds	r7, #12
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr
 801252e:	bf00      	nop
 8012530:	080282cc 	.word	0x080282cc
 8012534:	0802487c 	.word	0x0802487c
 8012538:	08024890 	.word	0x08024890
 801253c:	080248a0 	.word	0x080248a0

08012540 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8012540:	b480      	push	{r7}
 8012542:	b085      	sub	sp, #20
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
 801254c:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 801254e:	4a0f      	ldr	r2, [pc, #60]	; (801258c <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	601a      	str	r2, [r3, #0]
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	68ba      	ldr	r2, [r7, #8]
 8012558:	605a      	str	r2, [r3, #4]
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	609a      	str	r2, [r3, #8]
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	683a      	ldr	r2, [r7, #0]
 8012564:	60da      	str	r2, [r3, #12]
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	69ba      	ldr	r2, [r7, #24]
 801256a:	611a      	str	r2, [r3, #16]
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2200      	movs	r2, #0
 8012570:	615a      	str	r2, [r3, #20]
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2200      	movs	r2, #0
 8012576:	761a      	strb	r2, [r3, #24]
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	2200      	movs	r2, #0
 801257c:	765a      	strb	r2, [r3, #25]
{
}
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	4618      	mov	r0, r3
 8012582:	3714      	adds	r7, #20
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr
 801258c:	080282cc 	.word	0x080282cc

08012590 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	4a04      	ldr	r2, [pc, #16]	; (80125ac <_ZN10UtestShellD1Ev+0x1c>)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	601a      	str	r2, [r3, #0]
{
}
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4618      	mov	r0, r3
 80125a2:	370c      	adds	r7, #12
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr
 80125ac:	080282cc 	.word	0x080282cc

080125b0 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
}
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f7ff ffe9 	bl	8012590 <_ZN10UtestShellD1Ev>
 80125be:	211c      	movs	r1, #28
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f7f7 fbb7 	bl	8009d34 <_ZdlPvj>
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	4618      	mov	r0, r3
 80125ca:	3708      	adds	r7, #8
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}

080125d0 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b082      	sub	sp, #8
 80125d4:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 80125d6:	2300      	movs	r3, #0
 80125d8:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	3310      	adds	r3, #16
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	4798      	blx	r3
}
 80125e6:	bf00      	nop
 80125e8:	3708      	adds	r7, #8
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
	...

080125f0 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 80125f4:	4b02      	ldr	r3, [pc, #8]	; (8012600 <_ZN10UtestShell5crashEv+0x10>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4798      	blx	r3
}
 80125fa:	bf00      	nop
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	20000098 	.word	0x20000098

08012604 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b088      	sub	sp, #32
 8012608:	af00      	add	r7, sp, #0
 801260a:	60f8      	str	r0, [r7, #12]
 801260c:	60b9      	str	r1, [r7, #8]
 801260e:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	2200      	movs	r2, #0
 8012614:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	3324      	adds	r3, #36	; 0x24
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8012622:	f107 0014 	add.w	r0, r7, #20
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	68ba      	ldr	r2, [r7, #8]
 801262a:	68f9      	ldr	r1, [r7, #12]
 801262c:	f7ff ff0e 	bl	801244c <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	337c      	adds	r3, #124	; 0x7c
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	68f8      	ldr	r0, [r7, #12]
 801263a:	4798      	blx	r3
 801263c:	4603      	mov	r3, r0
 801263e:	2b00      	cmp	r3, #0
 8012640:	d007      	beq.n	8012652 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8012642:	4b09      	ldr	r3, [pc, #36]	; (8012668 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	f107 0214 	add.w	r2, r7, #20
 801264a:	4611      	mov	r1, r2
 801264c:	4807      	ldr	r0, [pc, #28]	; (801266c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 801264e:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8012650:	e006      	b.n	8012660 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8012652:	4b05      	ldr	r3, [pc, #20]	; (8012668 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	f107 0214 	add.w	r2, r7, #20
 801265a:	4611      	mov	r1, r2
 801265c:	4804      	ldr	r0, [pc, #16]	; (8012670 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 801265e:	4798      	blx	r3
}
 8012660:	bf00      	nop
 8012662:	3720      	adds	r7, #32
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	200000a4 	.word	0x200000a4
 801266c:	080124b1 	.word	0x080124b1
 8012670:	0801247b 	.word	0x0801247b

08012674 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8012674:	b590      	push	{r4, r7, lr}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
    return new Utest();
 801267c:	22d3      	movs	r2, #211	; 0xd3
 801267e:	4906      	ldr	r1, [pc, #24]	; (8012698 <_ZN10UtestShell10createTestEv+0x24>)
 8012680:	2004      	movs	r0, #4
 8012682:	f7f7 fb43 	bl	8009d0c <_ZnwjPKci>
 8012686:	4604      	mov	r4, r0
 8012688:	4620      	mov	r0, r4
 801268a:	f001 fb0f 	bl	8013cac <_ZN5UtestC1Ev>
 801268e:	4623      	mov	r3, r4
}
 8012690:	4618      	mov	r0, r3
 8012692:	370c      	adds	r7, #12
 8012694:	46bd      	mov	sp, r7
 8012696:	bd90      	pop	{r4, r7, pc}
 8012698:	080248b0 	.word	0x080248b0

0801269c <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	6039      	str	r1, [r7, #0]
    delete test;
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d004      	beq.n	80126b6 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	3204      	adds	r2, #4
 80126b0:	6812      	ldr	r2, [r2, #0]
 80126b2:	4618      	mov	r0, r3
 80126b4:	4790      	blx	r2
}
 80126b6:	bf00      	nop
 80126b8:	3708      	adds	r7, #8
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
	...

080126c0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b088      	sub	sp, #32
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	60f8      	str	r0, [r7, #12]
 80126c8:	60b9      	str	r1, [r7, #8]
 80126ca:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	333c      	adds	r3, #60	; 0x3c
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	4940      	ldr	r1, [pc, #256]	; (80127d8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	3314      	adds	r3, #20
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	68f9      	ldr	r1, [r7, #12]
 80126e6:	68b8      	ldr	r0, [r7, #8]
 80126e8:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	333c      	adds	r3, #60	; 0x3c
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	493a      	ldr	r1, [pc, #232]	; (80127dc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 80126f8:	f001 faae 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80126fc:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 80126fe:	68f8      	ldr	r0, [r7, #12]
 8012700:	f001 fa90 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8012704:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 8012706:	6879      	ldr	r1, [r7, #4]
 8012708:	68f8      	ldr	r0, [r7, #12]
 801270a:	f001 fa6b 	bl	8013be4 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 801270e:	68f9      	ldr	r1, [r7, #12]
 8012710:	68f8      	ldr	r0, [r7, #12]
 8012712:	f001 fa77 	bl	8013c04 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	333c      	adds	r3, #60	; 0x3c
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4930      	ldr	r1, [pc, #192]	; (80127e0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	4798      	blx	r3
    Utest* testToRun = createTest();
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	3388      	adds	r3, #136	; 0x88
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	68f8      	ldr	r0, [r7, #12]
 801272e:	4798      	blx	r3
 8012730:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	333c      	adds	r3, #60	; 0x3c
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	492a      	ldr	r1, [pc, #168]	; (80127e4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	333c      	adds	r3, #60	; 0x3c
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	4927      	ldr	r1, [pc, #156]	; (80127e8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	4798      	blx	r3
    testToRun->run();
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	3308      	adds	r3, #8
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	6978      	ldr	r0, [r7, #20]
 8012758:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	333c      	adds	r3, #60	; 0x3c
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4922      	ldr	r1, [pc, #136]	; (80127ec <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8012768:	69f9      	ldr	r1, [r7, #28]
 801276a:	68f8      	ldr	r0, [r7, #12]
 801276c:	f001 fa4a 	bl	8013c04 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8012770:	69b9      	ldr	r1, [r7, #24]
 8012772:	68f8      	ldr	r0, [r7, #12]
 8012774:	f001 fa36 	bl	8013be4 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	333c      	adds	r3, #60	; 0x3c
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	491b      	ldr	r1, [pc, #108]	; (80127f0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	4798      	blx	r3
    destroyTest(testToRun);
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	338c      	adds	r3, #140	; 0x8c
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	6979      	ldr	r1, [r7, #20]
 8012790:	68f8      	ldr	r0, [r7, #12]
 8012792:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	333c      	adds	r3, #60	; 0x3c
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	4915      	ldr	r1, [pc, #84]	; (80127f4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	333c      	adds	r3, #60	; 0x3c
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	4913      	ldr	r1, [pc, #76]	; (80127f8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	3318      	adds	r3, #24
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	68f9      	ldr	r1, [r7, #12]
 80127bc:	68b8      	ldr	r0, [r7, #8]
 80127be:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	333c      	adds	r3, #60	; 0x3c
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	490c      	ldr	r1, [pc, #48]	; (80127fc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	4798      	blx	r3
}
 80127ce:	bf00      	nop
 80127d0:	3720      	adds	r7, #32
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
 80127d6:	bf00      	nop
 80127d8:	080248c4 	.word	0x080248c4
 80127dc:	080248e8 	.word	0x080248e8
 80127e0:	08024908 	.word	0x08024908
 80127e4:	08024924 	.word	0x08024924
 80127e8:	08024940 	.word	0x08024940
 80127ec:	0802495c 	.word	0x0802495c
 80127f0:	08024974 	.word	0x08024974
 80127f4:	08024990 	.word	0x08024990
 80127f8:	080249ac 	.word	0x080249ac
 80127fc:	080249d0 	.word	0x080249d0

08012800 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
    return next_;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	695b      	ldr	r3, [r3, #20]
}
 801280c:	4618      	mov	r0, r3
 801280e:	370c      	adds	r7, #12
 8012810:	46bd      	mov	sp, r7
 8012812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012816:	4770      	bx	lr

08012818 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8012818:	b480      	push	{r7}
 801281a:	b083      	sub	sp, #12
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
    next_ = test;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	683a      	ldr	r2, [r7, #0]
 8012826:	615a      	str	r2, [r3, #20]
    return this;
 8012828:	687b      	ldr	r3, [r7, #4]
}
 801282a:	4618      	mov	r0, r3
 801282c:	370c      	adds	r7, #12
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr

08012836 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8012836:	b580      	push	{r7, lr}
 8012838:	b082      	sub	sp, #8
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	695b      	ldr	r3, [r3, #20]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00b      	beq.n	801285e <_ZN10UtestShell10countTestsEv+0x28>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	695a      	ldr	r2, [r3, #20]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	695b      	ldr	r3, [r3, #20]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	3310      	adds	r3, #16
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	4610      	mov	r0, r2
 8012856:	4798      	blx	r3
 8012858:	4603      	mov	r3, r0
 801285a:	3301      	adds	r3, #1
 801285c:	e000      	b.n	8012860 <_ZN10UtestShell10countTestsEv+0x2a>
 801285e:	2301      	movs	r3, #1
}
 8012860:	4618      	mov	r0, r3
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
    return "TEST";
 8012872:	4904      	ldr	r1, [pc, #16]	; (8012884 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f7f9 fe0c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
}
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	3708      	adds	r7, #8
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	080249f4 	.word	0x080249f4

08012888 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	689b      	ldr	r3, [r3, #8]
 8012896:	4619      	mov	r1, r3
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f7f9 fdfa 	bl	800c492 <_ZN12SimpleStringC1EPKc>
}
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	3708      	adds	r7, #8
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}

080128a6 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 80128a6:	b580      	push	{r7, lr}
 80128a8:	b082      	sub	sp, #8
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	6078      	str	r0, [r7, #4]
 80128ae:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	4619      	mov	r1, r3
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f7f9 fdeb 	bl	800c492 <_ZN12SimpleStringC1EPKc>
}
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	33a0      	adds	r3, #160	; 0xa0
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	6839      	ldr	r1, [r7, #0]
 80128da:	4610      	mov	r0, r2
 80128dc:	4798      	blx	r3
    formattedName += "(";
 80128de:	490e      	ldr	r1, [pc, #56]	; (8012918 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f7fa fa1d 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	4619      	mov	r1, r3
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7fa fa17 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 80128f2:	490a      	ldr	r1, [pc, #40]	; (801291c <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f7fa fa13 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	689b      	ldr	r3, [r3, #8]
 80128fe:	4619      	mov	r1, r3
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f7fa fa0d 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 8012906:	4906      	ldr	r1, [pc, #24]	; (8012920 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f7fa fa09 	bl	800cd20 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 801290e:	bf00      	nop
}
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	3708      	adds	r7, #8
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}
 8012918:	080249fc 	.word	0x080249fc
 801291c:	08024a00 	.word	0x08024a00
 8012920:	08024a04 	.word	0x08024a04

08012924 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	7e5b      	ldrb	r3, [r3, #25]
}
 8012930:	4618      	mov	r0, r3
 8012932:	370c      	adds	r7, #12
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr

0801293c <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f001 f96d 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 801294a:	4603      	mov	r3, r0
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	3228      	adds	r2, #40	; 0x28
 8012950:	6812      	ldr	r2, [r2, #0]
 8012952:	4618      	mov	r0, r3
 8012954:	4790      	blx	r2
}
 8012956:	bf00      	nop
 8012958:	3708      	adds	r7, #8
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}

0801295e <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 801295e:	b480      	push	{r7}
 8012960:	b083      	sub	sp, #12
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]
    return true;
 8012966:	2301      	movs	r3, #1
}
 8012968:	4618      	mov	r0, r3
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	7e1b      	ldrb	r3, [r3, #24]
}
 8012980:	4618      	mov	r0, r3
 8012982:	370c      	adds	r7, #12
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr

0801298c <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 801298c:	b480      	push	{r7}
 801298e:	b083      	sub	sp, #12
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2201      	movs	r2, #1
 8012998:	761a      	strb	r2, [r3, #24]
}
 801299a:	bf00      	nop
 801299c:	370c      	adds	r7, #12
 801299e:	46bd      	mov	sp, r7
 80129a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a4:	4770      	bx	lr

080129a6 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 80129a6:	b480      	push	{r7}
 80129a8:	b083      	sub	sp, #12
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]

}
 80129ae:	bf00      	nop
 80129b0:	370c      	adds	r7, #12
 80129b2:	46bd      	mov	sp, r7
 80129b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b8:	4770      	bx	lr

080129ba <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 80129ba:	b480      	push	{r7}
 80129bc:	b083      	sub	sp, #12
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
 80129c2:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	683a      	ldr	r2, [r7, #0]
 80129c8:	60da      	str	r2, [r3, #12]
}
 80129ca:	bf00      	nop
 80129cc:	370c      	adds	r7, #12
 80129ce:	46bd      	mov	sp, r7
 80129d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d4:	4770      	bx	lr

080129d6 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 80129d6:	b480      	push	{r7}
 80129d8:	b083      	sub	sp, #12
 80129da:	af00      	add	r7, sp, #0
 80129dc:	6078      	str	r0, [r7, #4]
 80129de:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	683a      	ldr	r2, [r7, #0]
 80129e4:	611a      	str	r2, [r3, #16]
}
 80129e6:	bf00      	nop
 80129e8:	370c      	adds	r7, #12
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr

080129f2 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 80129f2:	b480      	push	{r7}
 80129f4:	b083      	sub	sp, #12
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
 80129fa:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	683a      	ldr	r2, [r7, #0]
 8012a00:	605a      	str	r2, [r3, #4]
}
 8012a02:	bf00      	nop
 8012a04:	370c      	adds	r7, #12
 8012a06:	46bd      	mov	sp, r7
 8012a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0c:	4770      	bx	lr

08012a0e <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8012a0e:	b480      	push	{r7}
 8012a10:	b083      	sub	sp, #12
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	6078      	str	r0, [r7, #4]
 8012a16:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	683a      	ldr	r2, [r7, #0]
 8012a1c:	609a      	str	r2, [r3, #8]
}
 8012a1e:	bf00      	nop
 8012a20:	370c      	adds	r7, #12
 8012a22:	46bd      	mov	sp, r7
 8012a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a28:	4770      	bx	lr

08012a2a <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8012a2a:	b580      	push	{r7, lr}
 8012a2c:	b082      	sub	sp, #8
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	6078      	str	r0, [r7, #4]
 8012a32:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	68db      	ldr	r3, [r3, #12]
 8012a38:	4619      	mov	r1, r3
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f7f9 fd29 	bl	800c492 <_ZN12SimpleStringC1EPKc>
}
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	3708      	adds	r7, #8
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b083      	sub	sp, #12
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	691b      	ldr	r3, [r3, #16]
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	370c      	adds	r7, #12
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5e:	4770      	bx	lr

08012a60 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8012a60:	b590      	push	{r4, r7, lr}
 8012a62:	b087      	sub	sp, #28
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	60b9      	str	r1, [r7, #8]
 8012a6a:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d101      	bne.n	8012a76 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 8012a72:	2301      	movs	r3, #1
 8012a74:	e01f      	b.n	8012ab6 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d01b      	beq.n	8012ab4 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8012a7c:	f107 0310 	add.w	r3, r7, #16
 8012a80:	68b9      	ldr	r1, [r7, #8]
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7f9 fd05 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012a88:	f107 0310 	add.w	r3, r7, #16
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f00c fb91 	bl	801f1b6 <_ZNK10TestFilter5matchERK12SimpleString>
 8012a94:	4603      	mov	r3, r0
 8012a96:	461c      	mov	r4, r3
 8012a98:	f107 0310 	add.w	r3, r7, #16
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7fa f8b0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8012aa2:	2c00      	cmp	r4, #0
 8012aa4:	d001      	beq.n	8012aaa <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	e005      	b.n	8012ab6 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f00c fb5d 	bl	801f16a <_ZNK10TestFilter7getNextEv>
 8012ab0:	6078      	str	r0, [r7, #4]
 8012ab2:	e7e0      	b.n	8012a76 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8012ab4:	2300      	movs	r3, #0
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	371c      	adds	r7, #28
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd90      	pop	{r4, r7, pc}

08012abe <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8012abe:	b580      	push	{r7, lr}
 8012ac0:	b084      	sub	sp, #16
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	60f8      	str	r0, [r7, #12]
 8012ac6:	60b9      	str	r1, [r7, #8]
 8012ac8:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	685b      	ldr	r3, [r3, #4]
 8012ace:	68ba      	ldr	r2, [r7, #8]
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	68f8      	ldr	r0, [r7, #12]
 8012ad4:	f7ff ffc4 	bl	8012a60 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d00b      	beq.n	8012af6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	689b      	ldr	r3, [r3, #8]
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	68f8      	ldr	r0, [r7, #12]
 8012ae8:	f7ff ffba 	bl	8012a60 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8012aec:	4603      	mov	r3, r0
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d001      	beq.n	8012af6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8012af2:	2301      	movs	r3, #1
 8012af4:	e000      	b.n	8012af8 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8012af6:	2300      	movs	r3, #0
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	3710      	adds	r7, #16
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8012b00:	b590      	push	{r4, r7, lr}
 8012b02:	b083      	sub	sp, #12
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
 8012b08:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	339c      	adds	r3, #156	; 0x9c
 8012b10:	681c      	ldr	r4, [r3, #0]
 8012b12:	f001 f8b1 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8012b16:	4603      	mov	r3, r0
 8012b18:	461a      	mov	r2, r3
 8012b1a:	6839      	ldr	r1, [r7, #0]
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8012b20:	bf00      	nop
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd90      	pop	{r4, r7, pc}

08012b28 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b084      	sub	sp, #16
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	60b9      	str	r1, [r7, #8]
 8012b32:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	2201      	movs	r2, #1
 8012b38:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8012b3a:	68f8      	ldr	r0, [r7, #12]
 8012b3c:	f001 f872 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8012b40:	4603      	mov	r3, r0
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	3234      	adds	r2, #52	; 0x34
 8012b46:	6812      	ldr	r2, [r2, #0]
 8012b48:	68b9      	ldr	r1, [r7, #8]
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	4790      	blx	r2
    terminator.exitCurrentTest();
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8012b58:	bf00      	nop
 8012b5a:	3710      	adds	r7, #16
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	6838      	ldr	r0, [r7, #0]
 8012b72:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8012b74:	bf00      	nop
 8012b76:	3708      	adds	r7, #8
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}

08012b7c <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012b7c:	b590      	push	{r4, r7, lr}
 8012b7e:	b09d      	sub	sp, #116	; 0x74
 8012b80:	af04      	add	r7, sp, #16
 8012b82:	60f8      	str	r0, [r7, #12]
 8012b84:	607a      	str	r2, [r7, #4]
 8012b86:	603b      	str	r3, [r7, #0]
 8012b88:	460b      	mov	r3, r1
 8012b8a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012b8c:	68f8      	ldr	r0, [r7, #12]
 8012b8e:	f001 f849 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8012b92:	4603      	mov	r3, r0
 8012b94:	681a      	ldr	r2, [r3, #0]
 8012b96:	3228      	adds	r2, #40	; 0x28
 8012b98:	6812      	ldr	r2, [r2, #0]
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	4790      	blx	r2
    if (!condition)
 8012b9e:	7afb      	ldrb	r3, [r7, #11]
 8012ba0:	f083 0301 	eor.w	r3, r3, #1
 8012ba4:	b2db      	uxtb	r3, r3
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d03f      	beq.n	8012c2a <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	339c      	adds	r3, #156	; 0x9c
 8012bb0:	681c      	ldr	r4, [r3, #0]
 8012bb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012bb6:	6879      	ldr	r1, [r7, #4]
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7f9 fc6a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012bbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012bc2:	6839      	ldr	r1, [r7, #0]
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7f9 fc64 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012bca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012bce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7f9 fc5e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012bd6:	f107 0014 	add.w	r0, r7, #20
 8012bda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012bde:	9302      	str	r3, [sp, #8]
 8012be0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012be4:	9301      	str	r3, [sp, #4]
 8012be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012bea:	9300      	str	r3, [sp, #0]
 8012bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012bee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012bf0:	68f9      	ldr	r1, [r7, #12]
 8012bf2:	f7fb ff6b 	bl	800eacc <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012bf6:	f107 0314 	add.w	r3, r7, #20
 8012bfa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	68f8      	ldr	r0, [r7, #12]
 8012c00:	47a0      	blx	r4
 8012c02:	f107 0314 	add.w	r3, r7, #20
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7fc fdce 	bl	800f7a8 <_ZN12CheckFailureD1Ev>
 8012c0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7f9 fff6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8012c16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7f9 fff1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8012c20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7f9 ffec 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8012c2a:	bf00      	nop
 8012c2c:	3764      	adds	r7, #100	; 0x64
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd90      	pop	{r4, r7, pc}

08012c32 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012c32:	b590      	push	{r4, r7, lr}
 8012c34:	b097      	sub	sp, #92	; 0x5c
 8012c36:	af02      	add	r7, sp, #8
 8012c38:	60f8      	str	r0, [r7, #12]
 8012c3a:	60b9      	str	r1, [r7, #8]
 8012c3c:	607a      	str	r2, [r7, #4]
 8012c3e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012c40:	68f8      	ldr	r0, [r7, #12]
 8012c42:	f000 ffef 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8012c46:	4603      	mov	r3, r0
 8012c48:	681a      	ldr	r2, [r3, #0]
 8012c4a:	3228      	adds	r2, #40	; 0x28
 8012c4c:	6812      	ldr	r2, [r2, #0]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	339c      	adds	r3, #156	; 0x9c
 8012c58:	681c      	ldr	r4, [r3, #0]
 8012c5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c5e:	68b9      	ldr	r1, [r7, #8]
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7f9 fc16 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012c66:	f107 0014 	add.w	r0, r7, #20
 8012c6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c6e:	9300      	str	r3, [sp, #0]
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	68f9      	ldr	r1, [r7, #12]
 8012c76:	f7fb ff71 	bl	800eb5c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8012c7a:	f107 0314 	add.w	r3, r7, #20
 8012c7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012c80:	4619      	mov	r1, r3
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	47a0      	blx	r4
 8012c86:	f107 0314 	add.w	r3, r7, #20
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7f7 fc16 	bl	800a4bc <_ZN11FailFailureD1Ev>
 8012c90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c94:	4618      	mov	r0, r3
 8012c96:	f7f9 ffb4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8012c9a:	bf00      	nop
 8012c9c:	3754      	adds	r7, #84	; 0x54
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd90      	pop	{r4, r7, pc}

08012ca2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012ca2:	b590      	push	{r4, r7, lr}
 8012ca4:	b0a7      	sub	sp, #156	; 0x9c
 8012ca6:	af04      	add	r7, sp, #16
 8012ca8:	60f8      	str	r0, [r7, #12]
 8012caa:	60b9      	str	r1, [r7, #8]
 8012cac:	607a      	str	r2, [r7, #4]
 8012cae:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012cb0:	68f8      	ldr	r0, [r7, #12]
 8012cb2:	f000 ffb7 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	681a      	ldr	r2, [r3, #0]
 8012cba:	3228      	adds	r2, #40	; 0x28
 8012cbc:	6812      	ldr	r2, [r2, #0]
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d102      	bne.n	8012cce <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d068      	beq.n	8012da0 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d002      	beq.n	8012cda <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d12a      	bne.n	8012d30 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	339c      	adds	r3, #156	; 0x9c
 8012ce0:	681c      	ldr	r4, [r3, #0]
 8012ce2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012ce6:	6839      	ldr	r1, [r7, #0]
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7f9 fbd2 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012cee:	f107 0010 	add.w	r0, r7, #16
 8012cf2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012cf6:	9302      	str	r3, [sp, #8]
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	9301      	str	r3, [sp, #4]
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012d04:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012d08:	68f9      	ldr	r1, [r7, #12]
 8012d0a:	f7fc f9ad 	bl	800f068 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012d0e:	f107 0310 	add.w	r3, r7, #16
 8012d12:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012d16:	4619      	mov	r1, r3
 8012d18:	68f8      	ldr	r0, [r7, #12]
 8012d1a:	47a0      	blx	r4
 8012d1c:	f107 0310 	add.w	r3, r7, #16
 8012d20:	4618      	mov	r0, r3
 8012d22:	f7fc fcb9 	bl	800f698 <_ZN18StringEqualFailureD1Ev>
 8012d26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7f9 ff69 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8012d30:	6879      	ldr	r1, [r7, #4]
 8012d32:	68b8      	ldr	r0, [r7, #8]
 8012d34:	f7f9 f9ea 	bl	800c10c <_ZN12SimpleString6StrCmpEPKcS1_>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	bf14      	ite	ne
 8012d3e:	2301      	movne	r3, #1
 8012d40:	2300      	moveq	r3, #0
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d02c      	beq.n	8012da2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	339c      	adds	r3, #156	; 0x9c
 8012d4e:	681c      	ldr	r4, [r3, #0]
 8012d50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012d54:	6839      	ldr	r1, [r7, #0]
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7f9 fb9b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012d5c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012d60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012d64:	9302      	str	r3, [sp, #8]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	9301      	str	r3, [sp, #4]
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	9300      	str	r3, [sp, #0]
 8012d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012d72:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012d76:	68f9      	ldr	r1, [r7, #12]
 8012d78:	f7fc f976 	bl	800f068 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012d7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012d80:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012d84:	4619      	mov	r1, r3
 8012d86:	68f8      	ldr	r0, [r7, #12]
 8012d88:	47a0      	blx	r4
 8012d8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7fc fc82 	bl	800f698 <_ZN18StringEqualFailureD1Ev>
 8012d94:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7f9 ff32 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8012d9e:	e000      	b.n	8012da2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012da0:	bf00      	nop
}
 8012da2:	378c      	adds	r7, #140	; 0x8c
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd90      	pop	{r4, r7, pc}

08012da8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012da8:	b590      	push	{r4, r7, lr}
 8012daa:	b0a7      	sub	sp, #156	; 0x9c
 8012dac:	af04      	add	r7, sp, #16
 8012dae:	60f8      	str	r0, [r7, #12]
 8012db0:	60b9      	str	r1, [r7, #8]
 8012db2:	607a      	str	r2, [r7, #4]
 8012db4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012db6:	68f8      	ldr	r0, [r7, #12]
 8012db8:	f000 ff34 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	681a      	ldr	r2, [r3, #0]
 8012dc0:	3228      	adds	r2, #40	; 0x28
 8012dc2:	6812      	ldr	r2, [r2, #0]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d102      	bne.n	8012dd4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d06b      	beq.n	8012eac <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d002      	beq.n	8012de0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d12b      	bne.n	8012e38 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	339c      	adds	r3, #156	; 0x9c
 8012de6:	681c      	ldr	r4, [r3, #0]
 8012de8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012dec:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7f9 fb4e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012df6:	f107 0010 	add.w	r0, r7, #16
 8012dfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012dfe:	9302      	str	r3, [sp, #8]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	9301      	str	r3, [sp, #4]
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	9300      	str	r3, [sp, #0]
 8012e08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012e0c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012e10:	68f9      	ldr	r1, [r7, #12]
 8012e12:	f7fc f929 	bl	800f068 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012e16:	f107 0310 	add.w	r3, r7, #16
 8012e1a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012e1e:	4619      	mov	r1, r3
 8012e20:	68f8      	ldr	r0, [r7, #12]
 8012e22:	47a0      	blx	r4
 8012e24:	f107 0310 	add.w	r3, r7, #16
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f7fc fc35 	bl	800f698 <_ZN18StringEqualFailureD1Ev>
 8012e2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7f9 fee5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8012e38:	683a      	ldr	r2, [r7, #0]
 8012e3a:	6879      	ldr	r1, [r7, #4]
 8012e3c:	68b8      	ldr	r0, [r7, #8]
 8012e3e:	f7f9 f9a4 	bl	800c18a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8012e42:	4603      	mov	r3, r0
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	bf14      	ite	ne
 8012e48:	2301      	movne	r3, #1
 8012e4a:	2300      	moveq	r3, #0
 8012e4c:	b2db      	uxtb	r3, r3
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d02d      	beq.n	8012eae <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	339c      	adds	r3, #156	; 0x9c
 8012e58:	681c      	ldr	r4, [r3, #0]
 8012e5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e5e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7f9 fb15 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012e68:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012e6c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e70:	9302      	str	r3, [sp, #8]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	9301      	str	r3, [sp, #4]
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	9300      	str	r3, [sp, #0]
 8012e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012e7e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012e82:	68f9      	ldr	r1, [r7, #12]
 8012e84:	f7fc f8f0 	bl	800f068 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012e88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012e8c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012e90:	4619      	mov	r1, r3
 8012e92:	68f8      	ldr	r0, [r7, #12]
 8012e94:	47a0      	blx	r4
 8012e96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fc fbfc 	bl	800f698 <_ZN18StringEqualFailureD1Ev>
 8012ea0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7f9 feac 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8012eaa:	e000      	b.n	8012eae <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012eac:	bf00      	nop
}
 8012eae:	378c      	adds	r7, #140	; 0x8c
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd90      	pop	{r4, r7, pc}

08012eb4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8012eb4:	b590      	push	{r4, r7, lr}
 8012eb6:	b0ab      	sub	sp, #172	; 0xac
 8012eb8:	af04      	add	r7, sp, #16
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
 8012ec0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012ec2:	68f8      	ldr	r0, [r7, #12]
 8012ec4:	f000 feae 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	3228      	adds	r2, #40	; 0x28
 8012ece:	6812      	ldr	r2, [r2, #0]
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d102      	bne.n	8012ee0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d07c      	beq.n	8012fda <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d002      	beq.n	8012eec <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d128      	bne.n	8012f3e <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	3398      	adds	r3, #152	; 0x98
 8012ef2:	681c      	ldr	r4, [r3, #0]
 8012ef4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012ef8:	6839      	ldr	r1, [r7, #0]
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7f9 fac9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012f00:	f107 0010 	add.w	r0, r7, #16
 8012f04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012f08:	9302      	str	r3, [sp, #8]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	9301      	str	r3, [sp, #4]
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	9300      	str	r3, [sp, #0]
 8012f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012f1a:	68f9      	ldr	r1, [r7, #12]
 8012f1c:	f7fc f948 	bl	800f1b0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012f20:	f107 0310 	add.w	r3, r7, #16
 8012f24:	4619      	mov	r1, r3
 8012f26:	68f8      	ldr	r0, [r7, #12]
 8012f28:	47a0      	blx	r4
 8012f2a:	f107 0310 	add.w	r3, r7, #16
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fc fb90 	bl	800f654 <_ZN24StringEqualNoCaseFailureD1Ev>
 8012f34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f7f9 fe62 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8012f3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012f42:	68b9      	ldr	r1, [r7, #8]
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7f9 faa4 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012f4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012f4e:	6879      	ldr	r1, [r7, #4]
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7f9 fa9e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012f56:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8012f5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012f5e:	4611      	mov	r1, r2
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7f9 fe75 	bl	800cc50 <_ZNK12SimpleString12equalsNoCaseERKS_>
 8012f66:	4603      	mov	r3, r0
 8012f68:	f083 0301 	eor.w	r3, r3, #1
 8012f6c:	b2dc      	uxtb	r4, r3
 8012f6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7f9 fe45 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8012f78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7f9 fe40 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8012f82:	2c00      	cmp	r4, #0
 8012f84:	d02a      	beq.n	8012fdc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	3398      	adds	r3, #152	; 0x98
 8012f8c:	681c      	ldr	r4, [r3, #0]
 8012f8e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012f92:	6839      	ldr	r1, [r7, #0]
 8012f94:	4618      	mov	r0, r3
 8012f96:	f7f9 fa7c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8012f9a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8012f9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012fa2:	9302      	str	r3, [sp, #8]
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	9301      	str	r3, [sp, #4]
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	9300      	str	r3, [sp, #0]
 8012fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012fb0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012fb4:	68f9      	ldr	r1, [r7, #12]
 8012fb6:	f7fc f8fb 	bl	800f1b0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012fba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	47a0      	blx	r4
 8012fc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fc fb43 	bl	800f654 <_ZN24StringEqualNoCaseFailureD1Ev>
 8012fce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7f9 fe15 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8012fd8:	e000      	b.n	8012fdc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012fda:	bf00      	nop
}
 8012fdc:	379c      	adds	r7, #156	; 0x9c
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd90      	pop	{r4, r7, pc}

08012fe2 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8012fe2:	b590      	push	{r4, r7, lr}
 8012fe4:	b0b3      	sub	sp, #204	; 0xcc
 8012fe6:	af04      	add	r7, sp, #16
 8012fe8:	60f8      	str	r0, [r7, #12]
 8012fea:	60b9      	str	r1, [r7, #8]
 8012fec:	607a      	str	r2, [r7, #4]
 8012fee:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012ff0:	68f8      	ldr	r0, [r7, #12]
 8012ff2:	f000 fe17 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	681a      	ldr	r2, [r3, #0]
 8012ffa:	3228      	adds	r2, #40	; 0x28
 8012ffc:	6812      	ldr	r2, [r2, #0]
 8012ffe:	4618      	mov	r0, r3
 8013000:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d103      	bne.n	8013010 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	2b00      	cmp	r3, #0
 801300c:	f000 80ad 	beq.w	801316a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d002      	beq.n	801301c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d140      	bne.n	801309e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	3398      	adds	r3, #152	; 0x98
 8013022:	681c      	ldr	r4, [r3, #0]
 8013024:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013028:	68b9      	ldr	r1, [r7, #8]
 801302a:	4618      	mov	r0, r3
 801302c:	f7f9 fa31 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013030:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013034:	6879      	ldr	r1, [r7, #4]
 8013036:	4618      	mov	r0, r3
 8013038:	f7f9 fa2b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801303c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013040:	6839      	ldr	r1, [r7, #0]
 8013042:	4618      	mov	r0, r3
 8013044:	f7f9 fa25 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013048:	f107 0010 	add.w	r0, r7, #16
 801304c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013050:	9302      	str	r3, [sp, #8]
 8013052:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013056:	9301      	str	r3, [sp, #4]
 8013058:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801305c:	9300      	str	r3, [sp, #0]
 801305e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013062:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013066:	68f9      	ldr	r1, [r7, #12]
 8013068:	f7fb fce6 	bl	800ea38 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801306c:	f107 0310 	add.w	r3, r7, #16
 8013070:	4619      	mov	r1, r3
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	47a0      	blx	r4
 8013076:	f107 0310 	add.w	r3, r7, #16
 801307a:	4618      	mov	r0, r3
 801307c:	f7fc fbb6 	bl	800f7ec <_ZN15ContainsFailureD1Ev>
 8013080:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013084:	4618      	mov	r0, r3
 8013086:	f7f9 fdbc 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801308a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801308e:	4618      	mov	r0, r3
 8013090:	f7f9 fdb7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013094:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013098:	4618      	mov	r0, r3
 801309a:	f7f9 fdb2 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 801309e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80130a2:	6879      	ldr	r1, [r7, #4]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7f9 f9f4 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80130aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80130ae:	68b9      	ldr	r1, [r7, #8]
 80130b0:	4618      	mov	r0, r3
 80130b2:	f7f9 f9ee 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80130b6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80130ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80130be:	4611      	mov	r1, r2
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7f9 fa64 	bl	800c58e <_ZNK12SimpleString8containsERKS_>
 80130c6:	4603      	mov	r3, r0
 80130c8:	f083 0301 	eor.w	r3, r3, #1
 80130cc:	b2dc      	uxtb	r4, r3
 80130ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7f9 fd95 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80130d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80130dc:	4618      	mov	r0, r3
 80130de:	f7f9 fd90 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80130e2:	2c00      	cmp	r4, #0
 80130e4:	d042      	beq.n	801316c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	3398      	adds	r3, #152	; 0x98
 80130ec:	681c      	ldr	r4, [r3, #0]
 80130ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80130f2:	68b9      	ldr	r1, [r7, #8]
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7f9 f9cc 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80130fa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80130fe:	6879      	ldr	r1, [r7, #4]
 8013100:	4618      	mov	r0, r3
 8013102:	f7f9 f9c6 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013106:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801310a:	6839      	ldr	r1, [r7, #0]
 801310c:	4618      	mov	r0, r3
 801310e:	f7f9 f9c0 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013112:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013116:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801311a:	9302      	str	r3, [sp, #8]
 801311c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013120:	9301      	str	r3, [sp, #4]
 8013122:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013126:	9300      	str	r3, [sp, #0]
 8013128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801312c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013130:	68f9      	ldr	r1, [r7, #12]
 8013132:	f7fb fc81 	bl	800ea38 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013136:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801313a:	4619      	mov	r1, r3
 801313c:	68f8      	ldr	r0, [r7, #12]
 801313e:	47a0      	blx	r4
 8013140:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013144:	4618      	mov	r0, r3
 8013146:	f7fc fb51 	bl	800f7ec <_ZN15ContainsFailureD1Ev>
 801314a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801314e:	4618      	mov	r0, r3
 8013150:	f7f9 fd57 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013154:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013158:	4618      	mov	r0, r3
 801315a:	f7f9 fd52 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801315e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013162:	4618      	mov	r0, r3
 8013164:	f7f9 fd4d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013168:	e000      	b.n	801316c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801316a:	bf00      	nop
}
 801316c:	37bc      	adds	r7, #188	; 0xbc
 801316e:	46bd      	mov	sp, r7
 8013170:	bd90      	pop	{r4, r7, pc}

08013172 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013172:	b590      	push	{r4, r7, lr}
 8013174:	b0b3      	sub	sp, #204	; 0xcc
 8013176:	af04      	add	r7, sp, #16
 8013178:	60f8      	str	r0, [r7, #12]
 801317a:	60b9      	str	r1, [r7, #8]
 801317c:	607a      	str	r2, [r7, #4]
 801317e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013180:	68f8      	ldr	r0, [r7, #12]
 8013182:	f000 fd4f 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8013186:	4603      	mov	r3, r0
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	3228      	adds	r2, #40	; 0x28
 801318c:	6812      	ldr	r2, [r2, #0]
 801318e:	4618      	mov	r0, r3
 8013190:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d103      	bne.n	80131a0 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	2b00      	cmp	r3, #0
 801319c:	f000 80ad 	beq.w	80132fa <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d002      	beq.n	80131ac <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d140      	bne.n	801322e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	3398      	adds	r3, #152	; 0x98
 80131b2:	681c      	ldr	r4, [r3, #0]
 80131b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80131b8:	68b9      	ldr	r1, [r7, #8]
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7f9 f969 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80131c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80131c4:	6879      	ldr	r1, [r7, #4]
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7f9 f963 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80131cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80131d0:	6839      	ldr	r1, [r7, #0]
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7f9 f95d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80131d8:	f107 0010 	add.w	r0, r7, #16
 80131dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80131e0:	9302      	str	r3, [sp, #8]
 80131e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80131e6:	9301      	str	r3, [sp, #4]
 80131e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80131ec:	9300      	str	r3, [sp, #0]
 80131ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80131f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80131f6:	68f9      	ldr	r1, [r7, #12]
 80131f8:	f7fb fc1e 	bl	800ea38 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80131fc:	f107 0310 	add.w	r3, r7, #16
 8013200:	4619      	mov	r1, r3
 8013202:	68f8      	ldr	r0, [r7, #12]
 8013204:	47a0      	blx	r4
 8013206:	f107 0310 	add.w	r3, r7, #16
 801320a:	4618      	mov	r0, r3
 801320c:	f7fc faee 	bl	800f7ec <_ZN15ContainsFailureD1Ev>
 8013210:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013214:	4618      	mov	r0, r3
 8013216:	f7f9 fcf4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801321a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801321e:	4618      	mov	r0, r3
 8013220:	f7f9 fcef 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013224:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013228:	4618      	mov	r0, r3
 801322a:	f7f9 fcea 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 801322e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013232:	6879      	ldr	r1, [r7, #4]
 8013234:	4618      	mov	r0, r3
 8013236:	f7f9 f92c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801323a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801323e:	68b9      	ldr	r1, [r7, #8]
 8013240:	4618      	mov	r0, r3
 8013242:	f7f9 f926 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013246:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801324a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801324e:	4611      	mov	r1, r2
 8013250:	4618      	mov	r0, r3
 8013252:	f7f9 f9b7 	bl	800c5c4 <_ZNK12SimpleString14containsNoCaseERKS_>
 8013256:	4603      	mov	r3, r0
 8013258:	f083 0301 	eor.w	r3, r3, #1
 801325c:	b2dc      	uxtb	r4, r3
 801325e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013262:	4618      	mov	r0, r3
 8013264:	f7f9 fccd 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013268:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801326c:	4618      	mov	r0, r3
 801326e:	f7f9 fcc8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013272:	2c00      	cmp	r4, #0
 8013274:	d042      	beq.n	80132fc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	3398      	adds	r3, #152	; 0x98
 801327c:	681c      	ldr	r4, [r3, #0]
 801327e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013282:	68b9      	ldr	r1, [r7, #8]
 8013284:	4618      	mov	r0, r3
 8013286:	f7f9 f904 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801328a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801328e:	6879      	ldr	r1, [r7, #4]
 8013290:	4618      	mov	r0, r3
 8013292:	f7f9 f8fe 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013296:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801329a:	6839      	ldr	r1, [r7, #0]
 801329c:	4618      	mov	r0, r3
 801329e:	f7f9 f8f8 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80132a2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80132a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80132aa:	9302      	str	r3, [sp, #8]
 80132ac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80132b0:	9301      	str	r3, [sp, #4]
 80132b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80132b6:	9300      	str	r3, [sp, #0]
 80132b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80132bc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80132c0:	68f9      	ldr	r1, [r7, #12]
 80132c2:	f7fb fbb9 	bl	800ea38 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80132c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132ca:	4619      	mov	r1, r3
 80132cc:	68f8      	ldr	r0, [r7, #12]
 80132ce:	47a0      	blx	r4
 80132d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7fc fa89 	bl	800f7ec <_ZN15ContainsFailureD1Ev>
 80132da:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80132de:	4618      	mov	r0, r3
 80132e0:	f7f9 fc8f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80132e4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7f9 fc8a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80132ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7f9 fc85 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80132f8:	e000      	b.n	80132fc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80132fa:	bf00      	nop
}
 80132fc:	37bc      	adds	r7, #188	; 0xbc
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd90      	pop	{r4, r7, pc}

08013302 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013302:	b590      	push	{r4, r7, lr}
 8013304:	b099      	sub	sp, #100	; 0x64
 8013306:	af04      	add	r7, sp, #16
 8013308:	60f8      	str	r0, [r7, #12]
 801330a:	60b9      	str	r1, [r7, #8]
 801330c:	607a      	str	r2, [r7, #4]
 801330e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f000 fc87 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8013316:	4603      	mov	r3, r0
 8013318:	681a      	ldr	r2, [r3, #0]
 801331a:	3228      	adds	r2, #40	; 0x28
 801331c:	6812      	ldr	r2, [r2, #0]
 801331e:	4618      	mov	r0, r3
 8013320:	4790      	blx	r2
    if (expected != actual)
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	429a      	cmp	r2, r3
 8013328:	d027      	beq.n	801337a <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	339c      	adds	r3, #156	; 0x9c
 8013330:	681c      	ldr	r4, [r3, #0]
 8013332:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013336:	6839      	ldr	r1, [r7, #0]
 8013338:	4618      	mov	r0, r3
 801333a:	f7f9 f8aa 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801333e:	f107 0014 	add.w	r0, r7, #20
 8013342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013346:	9302      	str	r3, [sp, #8]
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	9301      	str	r3, [sp, #4]
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013352:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013354:	68f9      	ldr	r1, [r7, #12]
 8013356:	f7fb fc1f 	bl	800eb98 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 801335a:	f107 0314 	add.w	r3, r7, #20
 801335e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013360:	4619      	mov	r1, r3
 8013362:	68f8      	ldr	r0, [r7, #12]
 8013364:	47a0      	blx	r4
 8013366:	f107 0314 	add.w	r3, r7, #20
 801336a:	4618      	mov	r0, r3
 801336c:	f7fc f9fa 	bl	800f764 <_ZN17LongsEqualFailureD1Ev>
 8013370:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013374:	4618      	mov	r0, r3
 8013376:	f7f9 fc44 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801337a:	bf00      	nop
 801337c:	3754      	adds	r7, #84	; 0x54
 801337e:	46bd      	mov	sp, r7
 8013380:	bd90      	pop	{r4, r7, pc}

08013382 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013382:	b590      	push	{r4, r7, lr}
 8013384:	b099      	sub	sp, #100	; 0x64
 8013386:	af04      	add	r7, sp, #16
 8013388:	60f8      	str	r0, [r7, #12]
 801338a:	60b9      	str	r1, [r7, #8]
 801338c:	607a      	str	r2, [r7, #4]
 801338e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013390:	68f8      	ldr	r0, [r7, #12]
 8013392:	f000 fc47 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8013396:	4603      	mov	r3, r0
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	3228      	adds	r2, #40	; 0x28
 801339c:	6812      	ldr	r2, [r2, #0]
 801339e:	4618      	mov	r0, r3
 80133a0:	4790      	blx	r2
    if (expected != actual)
 80133a2:	68ba      	ldr	r2, [r7, #8]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d027      	beq.n	80133fa <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	339c      	adds	r3, #156	; 0x9c
 80133b0:	681c      	ldr	r4, [r3, #0]
 80133b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133b6:	6839      	ldr	r1, [r7, #0]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7f9 f86a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80133be:	f107 0014 	add.w	r0, r7, #20
 80133c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133c6:	9302      	str	r3, [sp, #8]
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	9301      	str	r3, [sp, #4]
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	9300      	str	r3, [sp, #0]
 80133d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80133d4:	68f9      	ldr	r1, [r7, #12]
 80133d6:	f7fb fcab 	bl	800ed30 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 80133da:	f107 0314 	add.w	r3, r7, #20
 80133de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80133e0:	4619      	mov	r1, r3
 80133e2:	68f8      	ldr	r0, [r7, #12]
 80133e4:	47a0      	blx	r4
 80133e6:	f107 0314 	add.w	r3, r7, #20
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7fc f998 	bl	800f720 <_ZN25UnsignedLongsEqualFailureD1Ev>
 80133f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7f9 fc04 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 80133fa:	bf00      	nop
 80133fc:	3754      	adds	r7, #84	; 0x54
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd90      	pop	{r4, r7, pc}
	...

08013404 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013404:	b082      	sub	sp, #8
 8013406:	b590      	push	{r4, r7, lr}
 8013408:	b099      	sub	sp, #100	; 0x64
 801340a:	af02      	add	r7, sp, #8
 801340c:	60f8      	str	r0, [r7, #12]
 801340e:	1d38      	adds	r0, r7, #4
 8013410:	e880 0006 	stmia.w	r0, {r1, r2}
 8013414:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8013416:	68f8      	ldr	r0, [r7, #12]
 8013418:	f000 fc04 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 801341c:	4603      	mov	r3, r0
 801341e:	681a      	ldr	r2, [r3, #0]
 8013420:	3228      	adds	r2, #40	; 0x28
 8013422:	6812      	ldr	r2, [r2, #0]
 8013424:	4618      	mov	r0, r3
 8013426:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	339c      	adds	r3, #156	; 0x9c
 801342e:	681c      	ldr	r4, [r3, #0]
 8013430:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013434:	4919      	ldr	r1, [pc, #100]	; (801349c <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8013436:	4618      	mov	r0, r3
 8013438:	f7f9 f82b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801343c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013440:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013442:	4618      	mov	r0, r3
 8013444:	f7f9 f825 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013448:	f107 0014 	add.w	r0, r7, #20
 801344c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013450:	9301      	str	r3, [sp, #4]
 8013452:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013456:	9300      	str	r3, [sp, #0]
 8013458:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801345a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801345c:	68f9      	ldr	r1, [r7, #12]
 801345e:	f7fc f84d 	bl	800f4fc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013462:	f107 0314 	add.w	r3, r7, #20
 8013466:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801346a:	4619      	mov	r1, r3
 801346c:	68f8      	ldr	r0, [r7, #12]
 801346e:	47a0      	blx	r4
 8013470:	f107 0314 	add.w	r3, r7, #20
 8013474:	4618      	mov	r0, r3
 8013476:	f7fc f887 	bl	800f588 <_ZN25FeatureUnsupportedFailureD1Ev>
 801347a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801347e:	4618      	mov	r0, r3
 8013480:	f7f9 fbbf 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013484:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013488:	4618      	mov	r0, r3
 801348a:	f7f9 fbba 	bl	800cc02 <_ZN12SimpleStringD1Ev>
#endif
}
 801348e:	bf00      	nop
 8013490:	375c      	adds	r7, #92	; 0x5c
 8013492:	46bd      	mov	sp, r7
 8013494:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013498:	b002      	add	sp, #8
 801349a:	4770      	bx	lr
 801349c:	08024a08 	.word	0x08024a08

080134a0 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80134a0:	b082      	sub	sp, #8
 80134a2:	b590      	push	{r4, r7, lr}
 80134a4:	b099      	sub	sp, #100	; 0x64
 80134a6:	af02      	add	r7, sp, #8
 80134a8:	60f8      	str	r0, [r7, #12]
 80134aa:	1d38      	adds	r0, r7, #4
 80134ac:	e880 0006 	stmia.w	r0, {r1, r2}
 80134b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80134b2:	68f8      	ldr	r0, [r7, #12]
 80134b4:	f000 fbb6 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 80134b8:	4603      	mov	r3, r0
 80134ba:	681a      	ldr	r2, [r3, #0]
 80134bc:	3228      	adds	r2, #40	; 0x28
 80134be:	6812      	ldr	r2, [r2, #0]
 80134c0:	4618      	mov	r0, r3
 80134c2:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	339c      	adds	r3, #156	; 0x9c
 80134ca:	681c      	ldr	r4, [r3, #0]
 80134cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134d0:	4919      	ldr	r1, [pc, #100]	; (8013538 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7f8 ffdd 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80134d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80134dc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80134de:	4618      	mov	r0, r3
 80134e0:	f7f8 ffd7 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80134e4:	f107 0014 	add.w	r0, r7, #20
 80134e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80134ec:	9301      	str	r3, [sp, #4]
 80134ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134f2:	9300      	str	r3, [sp, #0]
 80134f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80134f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80134f8:	68f9      	ldr	r1, [r7, #12]
 80134fa:	f7fb ffff 	bl	800f4fc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 80134fe:	f107 0314 	add.w	r3, r7, #20
 8013502:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013506:	4619      	mov	r1, r3
 8013508:	68f8      	ldr	r0, [r7, #12]
 801350a:	47a0      	blx	r4
 801350c:	f107 0314 	add.w	r3, r7, #20
 8013510:	4618      	mov	r0, r3
 8013512:	f7fc f839 	bl	800f588 <_ZN25FeatureUnsupportedFailureD1Ev>
 8013516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801351a:	4618      	mov	r0, r3
 801351c:	f7f9 fb71 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013520:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013524:	4618      	mov	r0, r3
 8013526:	f7f9 fb6c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
#endif
}
 801352a:	bf00      	nop
 801352c:	375c      	adds	r7, #92	; 0x5c
 801352e:	46bd      	mov	sp, r7
 8013530:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013534:	b002      	add	sp, #8
 8013536:	4770      	bx	lr
 8013538:	08024a08 	.word	0x08024a08

0801353c <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801353c:	b590      	push	{r4, r7, lr}
 801353e:	b099      	sub	sp, #100	; 0x64
 8013540:	af04      	add	r7, sp, #16
 8013542:	60f8      	str	r0, [r7, #12]
 8013544:	607b      	str	r3, [r7, #4]
 8013546:	460b      	mov	r3, r1
 8013548:	72fb      	strb	r3, [r7, #11]
 801354a:	4613      	mov	r3, r2
 801354c:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 801354e:	68f8      	ldr	r0, [r7, #12]
 8013550:	f000 fb68 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8013554:	4603      	mov	r3, r0
 8013556:	681a      	ldr	r2, [r3, #0]
 8013558:	3228      	adds	r2, #40	; 0x28
 801355a:	6812      	ldr	r2, [r2, #0]
 801355c:	4618      	mov	r0, r3
 801355e:	4790      	blx	r2
    if (expected != actual)
 8013560:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8013564:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8013568:	429a      	cmp	r2, r3
 801356a:	d029      	beq.n	80135c0 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	339c      	adds	r3, #156	; 0x9c
 8013572:	681c      	ldr	r4, [r3, #0]
 8013574:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013578:	6879      	ldr	r1, [r7, #4]
 801357a:	4618      	mov	r0, r3
 801357c:	f7f8 ff89 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013580:	f107 0014 	add.w	r0, r7, #20
 8013584:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013588:	9302      	str	r3, [sp, #8]
 801358a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801358e:	9301      	str	r3, [sp, #4]
 8013590:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013594:	9300      	str	r3, [sp, #0]
 8013596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013598:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801359a:	68f9      	ldr	r1, [r7, #12]
 801359c:	f7fb fc94 	bl	800eec8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 80135a0:	f107 0314 	add.w	r3, r7, #20
 80135a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80135a6:	4619      	mov	r1, r3
 80135a8:	68f8      	ldr	r0, [r7, #12]
 80135aa:	47a0      	blx	r4
 80135ac:	f107 0314 	add.w	r3, r7, #20
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7fc f893 	bl	800f6dc <_ZN23SignedBytesEqualFailureD1Ev>
 80135b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80135ba:	4618      	mov	r0, r3
 80135bc:	f7f9 fb21 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 80135c0:	bf00      	nop
 80135c2:	3754      	adds	r7, #84	; 0x54
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd90      	pop	{r4, r7, pc}

080135c8 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80135c8:	b590      	push	{r4, r7, lr}
 80135ca:	b09d      	sub	sp, #116	; 0x74
 80135cc:	af04      	add	r7, sp, #16
 80135ce:	60f8      	str	r0, [r7, #12]
 80135d0:	60b9      	str	r1, [r7, #8]
 80135d2:	607a      	str	r2, [r7, #4]
 80135d4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80135d6:	68f8      	ldr	r0, [r7, #12]
 80135d8:	f000 fb24 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 80135dc:	4603      	mov	r3, r0
 80135de:	681a      	ldr	r2, [r3, #0]
 80135e0:	3228      	adds	r2, #40	; 0x28
 80135e2:	6812      	ldr	r2, [r2, #0]
 80135e4:	4618      	mov	r0, r3
 80135e6:	4790      	blx	r2
    if (expected != actual)
 80135e8:	68ba      	ldr	r2, [r7, #8]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d03f      	beq.n	8013670 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	339c      	adds	r3, #156	; 0x9c
 80135f6:	681c      	ldr	r4, [r3, #0]
 80135f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80135fc:	68b9      	ldr	r1, [r7, #8]
 80135fe:	4618      	mov	r0, r3
 8013600:	f7f9 fdea 	bl	800d1d8 <_Z10StringFromPKv>
 8013604:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013608:	6879      	ldr	r1, [r7, #4]
 801360a:	4618      	mov	r0, r3
 801360c:	f7f9 fde4 	bl	800d1d8 <_Z10StringFromPKv>
 8013610:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013614:	6839      	ldr	r1, [r7, #0]
 8013616:	4618      	mov	r0, r3
 8013618:	f7f8 ff3b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801361c:	f107 0014 	add.w	r0, r7, #20
 8013620:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013624:	9302      	str	r3, [sp, #8]
 8013626:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801362a:	9301      	str	r3, [sp, #4]
 801362c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013630:	9300      	str	r3, [sp, #0]
 8013632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013634:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013636:	68f9      	ldr	r1, [r7, #12]
 8013638:	f7fb f814 	bl	800e664 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801363c:	f107 0314 	add.w	r3, r7, #20
 8013640:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013642:	4619      	mov	r1, r3
 8013644:	68f8      	ldr	r0, [r7, #12]
 8013646:	47a0      	blx	r4
 8013648:	f107 0314 	add.w	r3, r7, #20
 801364c:	4618      	mov	r0, r3
 801364e:	f7fc f955 	bl	800f8fc <_ZN13EqualsFailureD1Ev>
 8013652:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013656:	4618      	mov	r0, r3
 8013658:	f7f9 fad3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801365c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013660:	4618      	mov	r0, r3
 8013662:	f7f9 face 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013666:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801366a:	4618      	mov	r0, r3
 801366c:	f7f9 fac9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8013670:	bf00      	nop
 8013672:	3764      	adds	r7, #100	; 0x64
 8013674:	46bd      	mov	sp, r7
 8013676:	bd90      	pop	{r4, r7, pc}

08013678 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013678:	b590      	push	{r4, r7, lr}
 801367a:	b09d      	sub	sp, #116	; 0x74
 801367c:	af04      	add	r7, sp, #16
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	607a      	str	r2, [r7, #4]
 8013684:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013686:	68f8      	ldr	r0, [r7, #12]
 8013688:	f000 facc 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 801368c:	4603      	mov	r3, r0
 801368e:	681a      	ldr	r2, [r3, #0]
 8013690:	3228      	adds	r2, #40	; 0x28
 8013692:	6812      	ldr	r2, [r2, #0]
 8013694:	4618      	mov	r0, r3
 8013696:	4790      	blx	r2
    if (expected != actual)
 8013698:	68ba      	ldr	r2, [r7, #8]
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	429a      	cmp	r2, r3
 801369e:	d03f      	beq.n	8013720 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	339c      	adds	r3, #156	; 0x9c
 80136a6:	681c      	ldr	r4, [r3, #0]
 80136a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136ac:	68b9      	ldr	r1, [r7, #8]
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7f9 fdbc 	bl	800d22c <_Z10StringFromPFvvE>
 80136b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80136b8:	6879      	ldr	r1, [r7, #4]
 80136ba:	4618      	mov	r0, r3
 80136bc:	f7f9 fdb6 	bl	800d22c <_Z10StringFromPFvvE>
 80136c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80136c4:	6839      	ldr	r1, [r7, #0]
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7f8 fee3 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80136cc:	f107 0014 	add.w	r0, r7, #20
 80136d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80136d4:	9302      	str	r3, [sp, #8]
 80136d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80136da:	9301      	str	r3, [sp, #4]
 80136dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136e0:	9300      	str	r3, [sp, #0]
 80136e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80136e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80136e6:	68f9      	ldr	r1, [r7, #12]
 80136e8:	f7fa ffbc 	bl	800e664 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80136ec:	f107 0314 	add.w	r3, r7, #20
 80136f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80136f2:	4619      	mov	r1, r3
 80136f4:	68f8      	ldr	r0, [r7, #12]
 80136f6:	47a0      	blx	r4
 80136f8:	f107 0314 	add.w	r3, r7, #20
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7fc f8fd 	bl	800f8fc <_ZN13EqualsFailureD1Ev>
 8013702:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013706:	4618      	mov	r0, r3
 8013708:	f7f9 fa7b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801370c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013710:	4618      	mov	r0, r3
 8013712:	f7f9 fa76 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013716:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801371a:	4618      	mov	r0, r3
 801371c:	f7f9 fa71 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8013720:	bf00      	nop
 8013722:	3764      	adds	r7, #100	; 0x64
 8013724:	46bd      	mov	sp, r7
 8013726:	bd90      	pop	{r4, r7, pc}

08013728 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013728:	b590      	push	{r4, r7, lr}
 801372a:	b09d      	sub	sp, #116	; 0x74
 801372c:	af02      	add	r7, sp, #8
 801372e:	6278      	str	r0, [r7, #36]	; 0x24
 8013730:	ed87 0b06 	vstr	d0, [r7, #24]
 8013734:	ed87 1b04 	vstr	d1, [r7, #16]
 8013738:	ed87 2b02 	vstr	d2, [r7, #8]
 801373c:	6239      	str	r1, [r7, #32]
 801373e:	607a      	str	r2, [r7, #4]
 8013740:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013742:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013744:	f000 fa6e 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8013748:	4603      	mov	r3, r0
 801374a:	681a      	ldr	r2, [r3, #0]
 801374c:	3228      	adds	r2, #40	; 0x28
 801374e:	6812      	ldr	r2, [r2, #0]
 8013750:	4618      	mov	r0, r3
 8013752:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8013754:	ed97 2b02 	vldr	d2, [r7, #8]
 8013758:	ed97 1b04 	vldr	d1, [r7, #16]
 801375c:	ed97 0b06 	vldr	d0, [r7, #24]
 8013760:	f7fe fd4a 	bl	80121f8 <_Z13doubles_equalddd>
 8013764:	4603      	mov	r3, r0
 8013766:	f083 0301 	eor.w	r3, r3, #1
 801376a:	b2db      	uxtb	r3, r3
 801376c:	2b00      	cmp	r3, #0
 801376e:	d029      	beq.n	80137c4 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8013770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	339c      	adds	r3, #156	; 0x9c
 8013776:	681c      	ldr	r4, [r3, #0]
 8013778:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801377c:	6a39      	ldr	r1, [r7, #32]
 801377e:	4618      	mov	r0, r3
 8013780:	f7f8 fe87 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013784:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8013788:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801378c:	9300      	str	r3, [sp, #0]
 801378e:	ed97 2b02 	vldr	d2, [r7, #8]
 8013792:	ed97 1b04 	vldr	d1, [r7, #16]
 8013796:	ed97 0b06 	vldr	d0, [r7, #24]
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	687a      	ldr	r2, [r7, #4]
 801379e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137a0:	f7fa ffa2 	bl	800e6e8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 80137a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80137aa:	4619      	mov	r1, r3
 80137ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137ae:	47a0      	blx	r4
 80137b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7fc f87f 	bl	800f8b8 <_ZN19DoublesEqualFailureD1Ev>
 80137ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80137be:	4618      	mov	r0, r3
 80137c0:	f7f9 fa1f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 80137c4:	bf00      	nop
 80137c6:	376c      	adds	r7, #108	; 0x6c
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd90      	pop	{r4, r7, pc}

080137cc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80137cc:	b590      	push	{r4, r7, lr}
 80137ce:	b0a7      	sub	sp, #156	; 0x9c
 80137d0:	af04      	add	r7, sp, #16
 80137d2:	60f8      	str	r0, [r7, #12]
 80137d4:	60b9      	str	r1, [r7, #8]
 80137d6:	607a      	str	r2, [r7, #4]
 80137d8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80137da:	68f8      	ldr	r0, [r7, #12]
 80137dc:	f000 fa22 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 80137e0:	4603      	mov	r3, r0
 80137e2:	681a      	ldr	r2, [r3, #0]
 80137e4:	3228      	adds	r2, #40	; 0x28
 80137e6:	6812      	ldr	r2, [r2, #0]
 80137e8:	4618      	mov	r0, r3
 80137ea:	4790      	blx	r2
	if (length == 0) return;
 80137ec:	683b      	ldr	r3, [r7, #0]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d075      	beq.n	80138de <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d102      	bne.n	80137fe <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d071      	beq.n	80138e2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d002      	beq.n	801380a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d12d      	bne.n	8013866 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	339c      	adds	r3, #156	; 0x9c
 8013810:	681c      	ldr	r4, [r3, #0]
 8013812:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013816:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801381a:	4618      	mov	r0, r3
 801381c:	f7f8 fe39 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013820:	f107 0010 	add.w	r0, r7, #16
 8013824:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013828:	9303      	str	r3, [sp, #12]
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	9302      	str	r3, [sp, #8]
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	9301      	str	r3, [sp, #4]
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	9300      	str	r3, [sp, #0]
 8013836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801383a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801383e:	68f9      	ldr	r1, [r7, #12]
 8013840:	f7fb fd70 	bl	800f324 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8013844:	f107 0310 	add.w	r3, r7, #16
 8013848:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801384c:	4619      	mov	r1, r3
 801384e:	68f8      	ldr	r0, [r7, #12]
 8013850:	47a0      	blx	r4
 8013852:	f107 0310 	add.w	r3, r7, #16
 8013856:	4618      	mov	r0, r3
 8013858:	f7fb feda 	bl	800f610 <_ZN18BinaryEqualFailureD1Ev>
 801385c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013860:	4618      	mov	r0, r3
 8013862:	f7f9 f9ce 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8013866:	683a      	ldr	r2, [r7, #0]
 8013868:	6879      	ldr	r1, [r7, #4]
 801386a:	68b8      	ldr	r0, [r7, #8]
 801386c:	f7f8 fd30 	bl	800c2d0 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8013870:	4603      	mov	r3, r0
 8013872:	2b00      	cmp	r3, #0
 8013874:	bf14      	ite	ne
 8013876:	2301      	movne	r3, #1
 8013878:	2300      	moveq	r3, #0
 801387a:	b2db      	uxtb	r3, r3
 801387c:	2b00      	cmp	r3, #0
 801387e:	d031      	beq.n	80138e4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	339c      	adds	r3, #156	; 0x9c
 8013886:	681c      	ldr	r4, [r3, #0]
 8013888:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801388c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013890:	4618      	mov	r0, r3
 8013892:	f7f8 fdfe 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013896:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801389a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801389e:	9303      	str	r3, [sp, #12]
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	9302      	str	r3, [sp, #8]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	9301      	str	r3, [sp, #4]
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	9300      	str	r3, [sp, #0]
 80138ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80138b0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80138b4:	68f9      	ldr	r1, [r7, #12]
 80138b6:	f7fb fd35 	bl	800f324 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80138ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80138be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80138c2:	4619      	mov	r1, r3
 80138c4:	68f8      	ldr	r0, [r7, #12]
 80138c6:	47a0      	blx	r4
 80138c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7fb fe9f 	bl	800f610 <_ZN18BinaryEqualFailureD1Ev>
 80138d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7f9 f993 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80138dc:	e002      	b.n	80138e4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 80138de:	bf00      	nop
 80138e0:	e000      	b.n	80138e4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80138e2:	bf00      	nop
}
 80138e4:	378c      	adds	r7, #140	; 0x8c
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd90      	pop	{r4, r7, pc}

080138ea <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80138ea:	b590      	push	{r4, r7, lr}
 80138ec:	b09b      	sub	sp, #108	; 0x6c
 80138ee:	af06      	add	r7, sp, #24
 80138f0:	60f8      	str	r0, [r7, #12]
 80138f2:	60b9      	str	r1, [r7, #8]
 80138f4:	607a      	str	r2, [r7, #4]
 80138f6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80138f8:	68f8      	ldr	r0, [r7, #12]
 80138fa:	f000 f993 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 80138fe:	4603      	mov	r3, r0
 8013900:	681a      	ldr	r2, [r3, #0]
 8013902:	3228      	adds	r2, #40	; 0x28
 8013904:	6812      	ldr	r2, [r2, #0]
 8013906:	4618      	mov	r0, r3
 8013908:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 801390a:	68ba      	ldr	r2, [r7, #8]
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	405a      	eors	r2, r3
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	4013      	ands	r3, r2
 8013914:	2b00      	cmp	r3, #0
 8013916:	d02b      	beq.n	8013970 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	339c      	adds	r3, #156	; 0x9c
 801391e:	681c      	ldr	r4, [r3, #0]
 8013920:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013924:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013926:	4618      	mov	r0, r3
 8013928:	f7f8 fdb3 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801392c:	f107 0014 	add.w	r0, r7, #20
 8013930:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013934:	9304      	str	r3, [sp, #16]
 8013936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013938:	9303      	str	r3, [sp, #12]
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	9302      	str	r3, [sp, #8]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	9301      	str	r3, [sp, #4]
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	9300      	str	r3, [sp, #0]
 8013946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013948:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801394a:	68f9      	ldr	r1, [r7, #12]
 801394c:	f7fb fd7a 	bl	800f444 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8013950:	f107 0314 	add.w	r3, r7, #20
 8013954:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013956:	4619      	mov	r1, r3
 8013958:	68f8      	ldr	r0, [r7, #12]
 801395a:	47a0      	blx	r4
 801395c:	f107 0314 	add.w	r3, r7, #20
 8013960:	4618      	mov	r0, r3
 8013962:	f7fb fe33 	bl	800f5cc <_ZN16BitsEqualFailureD1Ev>
 8013966:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801396a:	4618      	mov	r0, r3
 801396c:	f7f9 f949 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8013970:	bf00      	nop
 8013972:	3754      	adds	r7, #84	; 0x54
 8013974:	46bd      	mov	sp, r7
 8013976:	bd90      	pop	{r4, r7, pc}

08013978 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8013978:	b590      	push	{r4, r7, lr}
 801397a:	b09d      	sub	sp, #116	; 0x74
 801397c:	af04      	add	r7, sp, #16
 801397e:	60f8      	str	r0, [r7, #12]
 8013980:	607a      	str	r2, [r7, #4]
 8013982:	603b      	str	r3, [r7, #0]
 8013984:	460b      	mov	r3, r1
 8013986:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8013988:	68f8      	ldr	r0, [r7, #12]
 801398a:	f000 f94b 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 801398e:	4603      	mov	r3, r0
 8013990:	681a      	ldr	r2, [r3, #0]
 8013992:	3228      	adds	r2, #40	; 0x28
 8013994:	6812      	ldr	r2, [r2, #0]
 8013996:	4618      	mov	r0, r3
 8013998:	4790      	blx	r2
    if (failed)
 801399a:	7afb      	ldrb	r3, [r7, #11]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d03f      	beq.n	8013a20 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	339c      	adds	r3, #156	; 0x9c
 80139a6:	681c      	ldr	r4, [r3, #0]
 80139a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139ac:	6879      	ldr	r1, [r7, #4]
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7f8 fd6f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80139b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80139b8:	6839      	ldr	r1, [r7, #0]
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7f8 fd69 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80139c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7f8 fd63 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80139cc:	f107 0014 	add.w	r0, r7, #20
 80139d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139d4:	9302      	str	r3, [sp, #8]
 80139d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80139da:	9301      	str	r3, [sp, #4]
 80139dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139e0:	9300      	str	r3, [sp, #0]
 80139e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80139e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80139e6:	68f9      	ldr	r1, [r7, #12]
 80139e8:	f7fa ff30 	bl	800e84c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80139ec:	f107 0314 	add.w	r3, r7, #20
 80139f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80139f2:	4619      	mov	r1, r3
 80139f4:	68f8      	ldr	r0, [r7, #12]
 80139f6:	47a0      	blx	r4
 80139f8:	f107 0314 	add.w	r3, r7, #20
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7fb ff39 	bl	800f874 <_ZN17CheckEqualFailureD1Ev>
 8013a02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7f9 f8fb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013a0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7f9 f8f6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013a16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7f9 f8f1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8013a20:	bf00      	nop
 8013a22:	3764      	adds	r7, #100	; 0x64
 8013a24:	46bd      	mov	sp, r7
 8013a26:	bd90      	pop	{r4, r7, pc}

08013a28 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8013a28:	b590      	push	{r4, r7, lr}
 8013a2a:	b09d      	sub	sp, #116	; 0x74
 8013a2c:	af04      	add	r7, sp, #16
 8013a2e:	60f8      	str	r0, [r7, #12]
 8013a30:	607a      	str	r2, [r7, #4]
 8013a32:	603b      	str	r3, [r7, #0]
 8013a34:	460b      	mov	r3, r1
 8013a36:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f000 f8f3 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	3228      	adds	r2, #40	; 0x28
 8013a44:	6812      	ldr	r2, [r2, #0]
 8013a46:	4618      	mov	r0, r3
 8013a48:	4790      	blx	r2
    if (!comparison)
 8013a4a:	7afb      	ldrb	r3, [r7, #11]
 8013a4c:	f083 0301 	eor.w	r3, r3, #1
 8013a50:	b2db      	uxtb	r3, r3
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d03f      	beq.n	8013ad6 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	339c      	adds	r3, #156	; 0x9c
 8013a5c:	681c      	ldr	r4, [r3, #0]
 8013a5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a62:	6879      	ldr	r1, [r7, #4]
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7f8 fd14 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013a6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a6e:	6839      	ldr	r1, [r7, #0]
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7f8 fd0e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013a76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a7a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7f8 fd08 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8013a82:	f107 0014 	add.w	r0, r7, #20
 8013a86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a8a:	9302      	str	r3, [sp, #8]
 8013a8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a90:	9301      	str	r3, [sp, #4]
 8013a92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a96:	9300      	str	r3, [sp, #0]
 8013a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013a9c:	68f9      	ldr	r1, [r7, #12]
 8013a9e:	f7fa ff83 	bl	800e9a8 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013aa2:	f107 0314 	add.w	r3, r7, #20
 8013aa6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013aa8:	4619      	mov	r1, r3
 8013aaa:	68f8      	ldr	r0, [r7, #12]
 8013aac:	47a0      	blx	r4
 8013aae:	f107 0314 	add.w	r3, r7, #20
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7fb febc 	bl	800f830 <_ZN17ComparisonFailureD1Ev>
 8013ab8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7f9 f8a0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013ac2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7f9 f89b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8013acc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7f9 f896 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8013ad6:	bf00      	nop
 8013ad8:	3764      	adds	r7, #100	; 0x64
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd90      	pop	{r4, r7, pc}
	...

08013ae0 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8013ae0:	b5b0      	push	{r4, r5, r7, lr}
 8013ae2:	b088      	sub	sp, #32
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	60f8      	str	r0, [r7, #12]
 8013ae8:	60b9      	str	r1, [r7, #8]
 8013aea:	607a      	str	r2, [r7, #4]
 8013aec:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8013aee:	f107 0310 	add.w	r3, r7, #16
 8013af2:	4924      	ldr	r1, [pc, #144]	; (8013b84 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7f8 fccc 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8013afa:	f107 0310 	add.w	r3, r7, #16
 8013afe:	6879      	ldr	r1, [r7, #4]
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7f9 f90d 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8013b06:	f107 0310 	add.w	r3, r7, #16
 8013b0a:	491f      	ldr	r1, [pc, #124]	; (8013b88 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7f9 f907 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8013b12:	f107 0318 	add.w	r3, r7, #24
 8013b16:	6839      	ldr	r1, [r7, #0]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7f9 fda1 	bl	800d660 <_Z10StringFromj>
 8013b1e:	f107 0218 	add.w	r2, r7, #24
 8013b22:	f107 0310 	add.w	r3, r7, #16
 8013b26:	4611      	mov	r1, r2
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f7f9 f8e7 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8013b2e:	f107 0318 	add.w	r3, r7, #24
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7f9 f865 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8013b38:	f107 0310 	add.w	r3, r7, #16
 8013b3c:	4913      	ldr	r1, [pc, #76]	; (8013b8c <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7f9 f8ee 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8013b44:	f107 0310 	add.w	r3, r7, #16
 8013b48:	68b9      	ldr	r1, [r7, #8]
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7f9 f8e8 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8013b50:	68f8      	ldr	r0, [r7, #12]
 8013b52:	f000 f867 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8013b56:	4604      	mov	r4, r0
 8013b58:	6823      	ldr	r3, [r4, #0]
 8013b5a:	3338      	adds	r3, #56	; 0x38
 8013b5c:	681d      	ldr	r5, [r3, #0]
 8013b5e:	f107 0310 	add.w	r3, r7, #16
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7f9 f820 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8013b70:	f107 0310 	add.w	r3, r7, #16
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7f9 f844 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8013b7a:	bf00      	nop
 8013b7c:	3720      	adds	r7, #32
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bdb0      	pop	{r4, r5, r7, pc}
 8013b82:	bf00      	nop
 8013b84:	08024a20 	.word	0x08024a20
 8013b88:	08024a24 	.word	0x08024a24
 8013b8c:	08024a28 	.word	0x08024a28

08013b90 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8013b90:	b590      	push	{r4, r7, lr}
 8013b92:	b085      	sub	sp, #20
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	60f8      	str	r0, [r7, #12]
 8013b98:	60b9      	str	r1, [r7, #8]
 8013b9a:	607a      	str	r2, [r7, #4]
 8013b9c:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	3370      	adds	r3, #112	; 0x70
 8013ba4:	681c      	ldr	r4, [r3, #0]
 8013ba6:	68b8      	ldr	r0, [r7, #8]
 8013ba8:	f7f8 fffe 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 8013bac:	4601      	mov	r1, r0
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	687a      	ldr	r2, [r7, #4]
 8013bb2:	68f8      	ldr	r0, [r7, #12]
 8013bb4:	47a0      	blx	r4
}
 8013bb6:	bf00      	nop
 8013bb8:	3714      	adds	r7, #20
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd90      	pop	{r4, r7, pc}

08013bbe <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8013bbe:	b580      	push	{r7, lr}
 8013bc0:	b082      	sub	sp, #8
 8013bc2:	af00      	add	r7, sp, #0
 8013bc4:	6078      	str	r0, [r7, #4]
 8013bc6:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f000 f82b 	bl	8013c24 <_ZN10UtestShell13getTestResultEv>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	681a      	ldr	r2, [r3, #0]
 8013bd2:	323c      	adds	r2, #60	; 0x3c
 8013bd4:	6812      	ldr	r2, [r2, #0]
 8013bd6:	6839      	ldr	r1, [r7, #0]
 8013bd8:	4618      	mov	r0, r3
 8013bda:	4790      	blx	r2
}
 8013bdc:	bf00      	nop
 8013bde:	3708      	adds	r7, #8
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8013be4:	b480      	push	{r7}
 8013be6:	b083      	sub	sp, #12
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8013bee:	4a04      	ldr	r2, [pc, #16]	; (8013c00 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	6013      	str	r3, [r2, #0]
}
 8013bf4:	bf00      	nop
 8013bf6:	370c      	adds	r7, #12
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfe:	4770      	bx	lr
 8013c00:	20000abc 	.word	0x20000abc

08013c04 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8013c04:	b480      	push	{r7}
 8013c06:	b083      	sub	sp, #12
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8013c0e:	4a04      	ldr	r2, [pc, #16]	; (8013c20 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	6013      	str	r3, [r2, #0]
}
 8013c14:	bf00      	nop
 8013c16:	370c      	adds	r7, #12
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1e:	4770      	bx	lr
 8013c20:	20000ac0 	.word	0x20000ac0

08013c24 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b082      	sub	sp, #8
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8013c2c:	4b09      	ldr	r3, [pc, #36]	; (8013c54 <_ZN10UtestShell13getTestResultEv+0x30>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d109      	bne.n	8013c48 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8013c34:	f7fe fbb2 	bl	801239c <_ZN22OutsideTestRunnerUTest8instanceEv>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	681a      	ldr	r2, [r3, #0]
 8013c3c:	32a4      	adds	r2, #164	; 0xa4
 8013c3e:	6812      	ldr	r2, [r2, #0]
 8013c40:	4618      	mov	r0, r3
 8013c42:	4790      	blx	r2
 8013c44:	4603      	mov	r3, r0
 8013c46:	e001      	b.n	8013c4c <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8013c48:	4b02      	ldr	r3, [pc, #8]	; (8013c54 <_ZN10UtestShell13getTestResultEv+0x30>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3708      	adds	r7, #8
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}
 8013c54:	20000abc 	.word	0x20000abc

08013c58 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8013c5c:	4b05      	ldr	r3, [pc, #20]	; (8013c74 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d103      	bne.n	8013c6c <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8013c64:	f7fe fb9a 	bl	801239c <_ZN22OutsideTestRunnerUTest8instanceEv>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	e001      	b.n	8013c70 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8013c6c:	4b01      	ldr	r3, [pc, #4]	; (8013c74 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	20000ac0 	.word	0x20000ac0

08013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8013c78:	b480      	push	{r7}
 8013c7a:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8013c7c:	4b03      	ldr	r3, [pc, #12]	; (8013c8c <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	46bd      	mov	sp, r7
 8013c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c88:	4770      	bx	lr
 8013c8a:	bf00      	nop
 8013c8c:	20000094 	.word	0x20000094

08013c90 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8013c90:	b480      	push	{r7}
 8013c92:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8013c94:	4b03      	ldr	r3, [pc, #12]	; (8013ca4 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8013c96:	4a04      	ldr	r2, [pc, #16]	; (8013ca8 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8013c98:	601a      	str	r2, [r3, #0]
}
 8013c9a:	bf00      	nop
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca2:	4770      	bx	lr
 8013ca4:	20000094 	.word	0x20000094
 8013ca8:	20000090 	.word	0x20000090

08013cac <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	4a04      	ldr	r2, [pc, #16]	; (8013cc8 <_ZN5UtestC1Ev+0x1c>)
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	601a      	str	r2, [r3, #0]
{
}
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr
 8013cc8:	080283c8 	.word	0x080283c8

08013ccc <_ZN5UtestD1Ev>:

Utest::~Utest()
 8013ccc:	b480      	push	{r7}
 8013cce:	b083      	sub	sp, #12
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	4a04      	ldr	r2, [pc, #16]	; (8013ce8 <_ZN5UtestD1Ev+0x1c>)
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	601a      	str	r2, [r3, #0]
{
}
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	4618      	mov	r0, r3
 8013cde:	370c      	adds	r7, #12
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce6:	4770      	bx	lr
 8013ce8:	080283c8 	.word	0x080283c8

08013cec <_ZN5UtestD0Ev>:
Utest::~Utest()
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
}
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f7ff ffe9 	bl	8013ccc <_ZN5UtestD1Ev>
 8013cfa:	2104      	movs	r1, #4
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f7f6 f819 	bl	8009d34 <_ZdlPvj>
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	4618      	mov	r0, r3
 8013d06:	3708      	adds	r7, #8
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b082      	sub	sp, #8
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8013d14:	4b0d      	ldr	r3, [pc, #52]	; (8013d4c <_ZN5Utest3runEv+0x40>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	6879      	ldr	r1, [r7, #4]
 8013d1a:	480d      	ldr	r0, [pc, #52]	; (8013d50 <_ZN5Utest3runEv+0x44>)
 8013d1c:	4798      	blx	r3
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	bf14      	ite	ne
 8013d24:	2301      	movne	r3, #1
 8013d26:	2300      	moveq	r3, #0
 8013d28:	b2db      	uxtb	r3, r3
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d004      	beq.n	8013d38 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8013d2e:	4b07      	ldr	r3, [pc, #28]	; (8013d4c <_ZN5Utest3runEv+0x40>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	6879      	ldr	r1, [r7, #4]
 8013d34:	4807      	ldr	r0, [pc, #28]	; (8013d54 <_ZN5Utest3runEv+0x48>)
 8013d36:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8013d38:	4b04      	ldr	r3, [pc, #16]	; (8013d4c <_ZN5Utest3runEv+0x40>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	6879      	ldr	r1, [r7, #4]
 8013d3e:	4806      	ldr	r0, [pc, #24]	; (8013d58 <_ZN5Utest3runEv+0x4c>)
 8013d40:	4798      	blx	r3
}
 8013d42:	bf00      	nop
 8013d44:	3708      	adds	r7, #8
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	200000a4 	.word	0x200000a4
 8013d50:	080123f9 	.word	0x080123f9
 8013d54:	08012415 	.word	0x08012415
 8013d58:	08012431 	.word	0x08012431

08013d5c <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b083      	sub	sp, #12
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
}
 8013d64:	bf00      	nop
 8013d66:	370c      	adds	r7, #12
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6e:	4770      	bx	lr

08013d70 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8013d70:	b480      	push	{r7}
 8013d72:	b083      	sub	sp, #12
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
}
 8013d78:	bf00      	nop
 8013d7a:	370c      	adds	r7, #12
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d82:	4770      	bx	lr

08013d84 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8013d84:	b480      	push	{r7}
 8013d86:	b083      	sub	sp, #12
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
}
 8013d8c:	bf00      	nop
 8013d8e:	370c      	adds	r7, #12
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr

08013d98 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8013d98:	b480      	push	{r7}
 8013d9a:	b083      	sub	sp, #12
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	4a04      	ldr	r2, [pc, #16]	; (8013db4 <_ZN14TestTerminatorD1Ev+0x1c>)
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	601a      	str	r2, [r3, #0]
{
}
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	4618      	mov	r0, r3
 8013daa:	370c      	adds	r7, #12
 8013dac:	46bd      	mov	sp, r7
 8013dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db2:	4770      	bx	lr
 8013db4:	080283b4 	.word	0x080283b4

08013db8 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b084      	sub	sp, #16
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	60fb      	str	r3, [r7, #12]
 8013dc4:	f107 030c 	add.w	r3, r7, #12
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7f6 f975 	bl	800a0b8 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8013dce:	f107 030c 	add.w	r3, r7, #12
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f000 f82c 	bl	8013e30 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8013dd8:	f107 030c 	add.w	r3, r7, #12
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f000 f835 	bl	8013e4c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8013de2:	bf00      	nop
 8013de4:	3710      	adds	r7, #16
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
	...

08013dec <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b082      	sub	sp, #8
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
 8013df4:	4a05      	ldr	r2, [pc, #20]	; (8013e0c <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	601a      	str	r2, [r3, #0]
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7ff ffcb 	bl	8013d98 <_ZN14TestTerminatorD1Ev>
{
}
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	4618      	mov	r0, r3
 8013e06:	3708      	adds	r7, #8
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	080283a0 	.word	0x080283a0

08013e10 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
}
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f7ff ffe7 	bl	8013dec <_ZN20NormalTestTerminatorD1Ev>
 8013e1e:	2104      	movs	r1, #4
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f7f5 ff87 	bl	8009d34 <_ZdlPvj>
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3708      	adds	r7, #8
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8013e38:	4b03      	ldr	r3, [pc, #12]	; (8013e48 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8013e3e:	bf00      	nop
 8013e40:	3708      	adds	r7, #8
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	200000a0 	.word	0x200000a0

08013e4c <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	4a05      	ldr	r2, [pc, #20]	; (8013e6c <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	601a      	str	r2, [r3, #0]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7ff ff9b 	bl	8013d98 <_ZN14TestTerminatorD1Ev>
{
}
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	4618      	mov	r0, r3
 8013e66:	3708      	adds	r7, #8
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}
 8013e6c:	0802838c 	.word	0x0802838c

08013e70 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
}
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f7ff ffe7 	bl	8013e4c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8013e7e:	2104      	movs	r1, #4
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f7f5 ff57 	bl	8009d34 <_ZdlPvj>
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	4618      	mov	r0, r3
 8013e8a:	3708      	adds	r7, #8
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}

08013e90 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8013e98:	f7fe fbaa 	bl	80125f0 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7ff ff8a 	bl	8013db8 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8013ea4:	bf00      	nop
 8013ea6:	3708      	adds	r7, #8
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}

08013eac <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b082      	sub	sp, #8
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	4a05      	ldr	r2, [pc, #20]	; (8013ecc <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	601a      	str	r2, [r3, #0]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f7ff ff95 	bl	8013dec <_ZN20NormalTestTerminatorD1Ev>
{
}
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	3708      	adds	r7, #8
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}
 8013ecc:	08028378 	.word	0x08028378

08013ed0 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b082      	sub	sp, #8
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
}
 8013ed8:	6878      	ldr	r0, [r7, #4]
 8013eda:	f7ff ffe7 	bl	8013eac <_ZN22CrashingTestTerminatorD1Ev>
 8013ede:	2104      	movs	r1, #4
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f7f5 ff27 	bl	8009d34 <_ZdlPvj>
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3708      	adds	r7, #8
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b084      	sub	sp, #16
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2200      	movs	r2, #0
 8013efe:	601a      	str	r2, [r3, #0]
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2200      	movs	r2, #0
 8013f04:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d007      	beq.n	8013f1c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	3310      	adds	r3, #16
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	6838      	ldr	r0, [r7, #0]
 8013f16:	4798      	blx	r3
 8013f18:	4603      	mov	r3, r0
 8013f1a:	e000      	b.n	8013f1e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	685b      	ldr	r3, [r3, #4]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d02d      	beq.n	8013f86 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	685b      	ldr	r3, [r3, #4]
 8013f2e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8013f32:	4293      	cmp	r3, r2
 8013f34:	d201      	bcs.n	8013f3a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8013f36:	009b      	lsls	r3, r3, #2
 8013f38:	e001      	b.n	8013f3e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8013f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8013f3e:	f240 3237 	movw	r2, #823	; 0x337
 8013f42:	4914      	ldr	r1, [pc, #80]	; (8013f94 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7f5 ff05 	bl	8009d54 <_ZnajPKci>
 8013f4a:	4602      	mov	r2, r0
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8013f54:	2300      	movs	r3, #0
 8013f56:	60bb      	str	r3, [r7, #8]
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	685b      	ldr	r3, [r3, #4]
 8013f5c:	68ba      	ldr	r2, [r7, #8]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d212      	bcs.n	8013f88 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681a      	ldr	r2, [r3, #0]
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	009b      	lsls	r3, r3, #2
 8013f6a:	4413      	add	r3, r2
 8013f6c:	68fa      	ldr	r2, [r7, #12]
 8013f6e:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	330c      	adds	r3, #12
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	68f8      	ldr	r0, [r7, #12]
 8013f7a:	4798      	blx	r3
 8013f7c:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	3301      	adds	r3, #1
 8013f82:	60bb      	str	r3, [r7, #8]
 8013f84:	e7e8      	b.n	8013f58 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 8013f86:	bf00      	nop
    }
}
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3710      	adds	r7, #16
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}
 8013f92:	bf00      	nop
 8013f94:	080248b0 	.word	0x080248b0

08013f98 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b082      	sub	sp, #8
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d004      	beq.n	8013fb2 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7f5 fee5 	bl	8009d7c <_ZdaPv>
}
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3708      	adds	r7, #8
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}

08013fbc <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8013fbc:	b480      	push	{r7}
 8013fbe:	b087      	sub	sp, #28
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	60f8      	str	r0, [r7, #12]
 8013fc4:	60b9      	str	r1, [r7, #8]
 8013fc6:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	681a      	ldr	r2, [r3, #0]
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	009b      	lsls	r3, r3, #2
 8013fd0:	4413      	add	r3, r2
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	681a      	ldr	r2, [r3, #0]
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	009b      	lsls	r3, r3, #2
 8013fde:	4413      	add	r3, r2
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	009b      	lsls	r3, r3, #2
 8013fec:	4413      	add	r3, r2
 8013fee:	697a      	ldr	r2, [r7, #20]
 8013ff0:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	681a      	ldr	r2, [r3, #0]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	009b      	lsls	r3, r3, #2
 8013ffa:	4413      	add	r3, r2
 8013ffc:	693a      	ldr	r2, [r7, #16]
 8013ffe:	601a      	str	r2, [r3, #0]
}
 8014000:	bf00      	nop
 8014002:	371c      	adds	r7, #28
 8014004:	46bd      	mov	sp, r7
 8014006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400a:	4770      	bx	lr

0801400c <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b084      	sub	sp, #16
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	685b      	ldr	r3, [r3, #4]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d028      	beq.n	8014070 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 801401e:	4b17      	ldr	r3, [pc, #92]	; (801407c <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	6838      	ldr	r0, [r7, #0]
 8014024:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	685b      	ldr	r3, [r3, #4]
 801402a:	3b01      	subs	r3, #1
 801402c:	60fb      	str	r3, [r7, #12]
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d019      	beq.n	8014068 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	685b      	ldr	r3, [r3, #4]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d01b      	beq.n	8014074 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 801403c:	4b10      	ldr	r3, [pc, #64]	; (8014080 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4798      	blx	r3
 8014042:	4603      	mov	r3, r0
 8014044:	461a      	mov	r2, r3
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	3301      	adds	r3, #1
 801404a:	fbb2 f1f3 	udiv	r1, r2, r3
 801404e:	fb03 f301 	mul.w	r3, r3, r1
 8014052:	1ad3      	subs	r3, r2, r3
 8014054:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8014056:	68ba      	ldr	r2, [r7, #8]
 8014058:	68f9      	ldr	r1, [r7, #12]
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f7ff ffae 	bl	8013fbc <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	3b01      	subs	r3, #1
 8014064:	60fb      	str	r3, [r7, #12]
 8014066:	e7e2      	b.n	801402e <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f000 f834 	bl	80140d6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 801406e:	e002      	b.n	8014076 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8014070:	bf00      	nop
 8014072:	e000      	b.n	8014076 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8014074:	bf00      	nop
}
 8014076:	3710      	adds	r7, #16
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}
 801407c:	200000e0 	.word	0x200000e0
 8014080:	200000e4 	.word	0x200000e4

08014084 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b086      	sub	sp, #24
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d01c      	beq.n	80140ce <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	085b      	lsrs	r3, r3, #1
 801409a:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 801409c:	2300      	movs	r3, #0
 801409e:	617b      	str	r3, [r7, #20]
 80140a0:	697a      	ldr	r2, [r7, #20]
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d20e      	bcs.n	80140c6 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	685a      	ldr	r2, [r3, #4]
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	1ad3      	subs	r3, r2, r3
 80140b0:	3b01      	subs	r3, #1
 80140b2:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 80140b4:	68fa      	ldr	r2, [r7, #12]
 80140b6:	6979      	ldr	r1, [r7, #20]
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f7ff ff7f 	bl	8013fbc <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	3301      	adds	r3, #1
 80140c2:	617b      	str	r3, [r7, #20]
 80140c4:	e7ec      	b.n	80140a0 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 80140c6:	6878      	ldr	r0, [r7, #4]
 80140c8:	f000 f805 	bl	80140d6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80140cc:	e000      	b.n	80140d0 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 80140ce:	bf00      	nop
}
 80140d0:	3718      	adds	r7, #24
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}

080140d6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 80140d6:	b580      	push	{r7, lr}
 80140d8:	b084      	sub	sp, #16
 80140da:	af00      	add	r7, sp, #0
 80140dc:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 80140de:	2300      	movs	r3, #0
 80140e0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80140e2:	2300      	movs	r3, #0
 80140e4:	60bb      	str	r3, [r7, #8]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	68ba      	ldr	r2, [r7, #8]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d221      	bcs.n	8014134 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681a      	ldr	r2, [r3, #0]
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6859      	ldr	r1, [r3, #4]
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	1acb      	subs	r3, r1, r3
 80140fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014100:	3b01      	subs	r3, #1
 8014102:	009b      	lsls	r3, r3, #2
 8014104:	4413      	add	r3, r2
 8014106:	6818      	ldr	r0, [r3, #0]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681a      	ldr	r2, [r3, #0]
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6859      	ldr	r1, [r3, #4]
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	1acb      	subs	r3, r1, r3
 8014114:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014118:	3b01      	subs	r3, #1
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	4413      	add	r3, r2
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	3308      	adds	r3, #8
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	68f9      	ldr	r1, [r7, #12]
 8014128:	4798      	blx	r3
 801412a:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	3301      	adds	r3, #1
 8014130:	60bb      	str	r3, [r7, #8]
 8014132:	e7d8      	b.n	80140e6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8014134:	bf00      	nop
 8014136:	3710      	adds	r7, #16
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}

0801413c <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
    return get(0);
 8014144:	2100      	movs	r1, #0
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	f000 f805 	bl	8014156 <_ZNK22UtestShellPointerArray3getEj>
 801414c:	4603      	mov	r3, r0
}
 801414e:	4618      	mov	r0, r3
 8014150:	3708      	adds	r7, #8
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}

08014156 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8014156:	b480      	push	{r7}
 8014158:	b083      	sub	sp, #12
 801415a:	af00      	add	r7, sp, #0
 801415c:	6078      	str	r0, [r7, #4]
 801415e:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	683a      	ldr	r2, [r7, #0]
 8014166:	429a      	cmp	r2, r3
 8014168:	d301      	bcc.n	801416e <_ZNK22UtestShellPointerArray3getEj+0x18>
 801416a:	2300      	movs	r3, #0
 801416c:	e005      	b.n	801417a <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681a      	ldr	r2, [r3, #0]
 8014172:	683b      	ldr	r3, [r7, #0]
 8014174:	009b      	lsls	r3, r3, #2
 8014176:	4413      	add	r3, r2
 8014178:	681b      	ldr	r3, [r3, #0]
}
 801417a:	4618      	mov	r0, r3
 801417c:	370c      	adds	r7, #12
 801417e:	46bd      	mov	sp, r7
 8014180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014184:	4770      	bx	lr
	...

08014188 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8014188:	b580      	push	{r7, lr}
 801418a:	b084      	sub	sp, #16
 801418c:	af00      	add	r7, sp, #0
 801418e:	60f8      	str	r0, [r7, #12]
 8014190:	60b9      	str	r1, [r7, #8]
 8014192:	607a      	str	r2, [r7, #4]
 8014194:	603b      	str	r3, [r7, #0]
 8014196:	4a10      	ldr	r2, [pc, #64]	; (80141d8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 801419c:	6879      	ldr	r1, [r7, #4]
 801419e:	68b8      	ldr	r0, [r7, #8]
 80141a0:	f7fe fc27 	bl	80129f2 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 80141a4:	6839      	ldr	r1, [r7, #0]
 80141a6:	68b8      	ldr	r0, [r7, #8]
 80141a8:	f7fe fc31 	bl	8012a0e <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 80141ac:	69b9      	ldr	r1, [r7, #24]
 80141ae:	68b8      	ldr	r0, [r7, #8]
 80141b0:	f7fe fc03 	bl	80129ba <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 80141b4:	69f9      	ldr	r1, [r7, #28]
 80141b6:	68b8      	ldr	r0, [r7, #8]
 80141b8:	f7fe fc0d 	bl	80129d6 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 80141bc:	f7fd fc20 	bl	8011a00 <_ZN12TestRegistry18getCurrentRegistryEv>
 80141c0:	4603      	mov	r3, r0
 80141c2:	681a      	ldr	r2, [r3, #0]
 80141c4:	3208      	adds	r2, #8
 80141c6:	6812      	ldr	r2, [r2, #0]
 80141c8:	68b9      	ldr	r1, [r7, #8]
 80141ca:	4618      	mov	r0, r3
 80141cc:	4790      	blx	r2
}
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	4618      	mov	r0, r3
 80141d2:	3710      	adds	r7, #16
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}
 80141d8:	080282bc 	.word	0x080282bc

080141dc <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 80141dc:	b480      	push	{r7}
 80141de:	b083      	sub	sp, #12
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	4a04      	ldr	r2, [pc, #16]	; (80141f8 <_ZN13TestInstallerD1Ev+0x1c>)
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	601a      	str	r2, [r3, #0]
{
}
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	4618      	mov	r0, r3
 80141ee:	370c      	adds	r7, #12
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr
 80141f8:	080282bc 	.word	0x080282bc

080141fc <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b082      	sub	sp, #8
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
}
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f7ff ffe9 	bl	80141dc <_ZN13TestInstallerD1Ev>
 801420a:	2104      	movs	r1, #4
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f7f5 fd91 	bl	8009d34 <_ZdlPvj>
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	4618      	mov	r0, r3
 8014216:	3708      	adds	r7, #8
 8014218:	46bd      	mov	sp, r7
 801421a:	bd80      	pop	{r7, pc}

0801421c <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
 8014224:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d10a      	bne.n	8014242 <_Z41__static_initialization_and_destruction_0ii+0x26>
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014232:	4293      	cmp	r3, r2
 8014234:	d105      	bne.n	8014242 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014236:	4805      	ldr	r0, [pc, #20]	; (801424c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8014238:	f7ff fe38 	bl	8013eac <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 801423c:	4804      	ldr	r0, [pc, #16]	; (8014250 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801423e:	f7ff fdd5 	bl	8013dec <_ZN20NormalTestTerminatorD1Ev>
}
 8014242:	bf00      	nop
 8014244:	3708      	adds	r7, #8
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}
 801424a:	bf00      	nop
 801424c:	20000090 	.word	0x20000090
 8014250:	2000008c 	.word	0x2000008c

08014254 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8014254:	b580      	push	{r7, lr}
 8014256:	af00      	add	r7, sp, #0
 8014258:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801425c:	2001      	movs	r0, #1
 801425e:	f7ff ffdd 	bl	801421c <_Z41__static_initialization_and_destruction_0ii>
 8014262:	bd80      	pop	{r7, pc}

08014264 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8014264:	b580      	push	{r7, lr}
 8014266:	af00      	add	r7, sp, #0
 8014268:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801426c:	2000      	movs	r0, #0
 801426e:	f7ff ffd5 	bl	801421c <_Z41__static_initialization_and_destruction_0ii>
 8014272:	bd80      	pop	{r7, pc}

08014274 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8014274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014276:	b083      	sub	sp, #12
 8014278:	af00      	add	r7, sp, #0
 801427a:	ed87 0b00 	vstr	d0, [r7]
 801427e:	683c      	ldr	r4, [r7, #0]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8014286:	2301      	movs	r3, #1
 8014288:	461e      	mov	r6, r3
 801428a:	f04f 32ff 	mov.w	r2, #4294967295
 801428e:	4b10      	ldr	r3, [pc, #64]	; (80142d0 <_ZSt5isinfd+0x5c>)
 8014290:	4620      	mov	r0, r4
 8014292:	4629      	mov	r1, r5
 8014294:	f7ec fa78 	bl	8000788 <__aeabi_dcmpun>
 8014298:	4603      	mov	r3, r0
 801429a:	2b00      	cmp	r3, #0
 801429c:	d10b      	bne.n	80142b6 <_ZSt5isinfd+0x42>
 801429e:	f04f 32ff 	mov.w	r2, #4294967295
 80142a2:	4b0b      	ldr	r3, [pc, #44]	; (80142d0 <_ZSt5isinfd+0x5c>)
 80142a4:	4620      	mov	r0, r4
 80142a6:	4629      	mov	r1, r5
 80142a8:	f7ec fa50 	bl	800074c <__aeabi_dcmple>
 80142ac:	4603      	mov	r3, r0
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d101      	bne.n	80142b6 <_ZSt5isinfd+0x42>
 80142b2:	2300      	movs	r3, #0
 80142b4:	461e      	mov	r6, r3
 80142b6:	b2f3      	uxtb	r3, r6
 80142b8:	f083 0301 	eor.w	r3, r3, #1
 80142bc:	b2db      	uxtb	r3, r3
 80142be:	2b00      	cmp	r3, #0
 80142c0:	bf14      	ite	ne
 80142c2:	2301      	movne	r3, #1
 80142c4:	2300      	moveq	r3, #0
 80142c6:	b2db      	uxtb	r3, r3
 80142c8:	4618      	mov	r0, r3
 80142ca:	370c      	adds	r7, #12
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142d0:	7fefffff 	.word	0x7fefffff

080142d4 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 80142d4:	b590      	push	{r4, r7, lr}
 80142d6:	b083      	sub	sp, #12
 80142d8:	af00      	add	r7, sp, #0
 80142da:	ed87 0b00 	vstr	d0, [r7]
 80142de:	2301      	movs	r3, #1
 80142e0:	461c      	mov	r4, r3
 80142e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80142e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80142ea:	f7ec fa4d 	bl	8000788 <__aeabi_dcmpun>
 80142ee:	4603      	mov	r3, r0
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d101      	bne.n	80142f8 <_ZSt5isnand+0x24>
 80142f4:	2300      	movs	r3, #0
 80142f6:	461c      	mov	r4, r3
 80142f8:	b2e3      	uxtb	r3, r4
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	bf14      	ite	ne
 80142fe:	2301      	movne	r3, #1
 8014300:	2300      	moveq	r3, #0
 8014302:	b2db      	uxtb	r3, r3
 8014304:	4618      	mov	r0, r3
 8014306:	370c      	adds	r7, #12
 8014308:	46bd      	mov	sp, r7
 801430a:	bd90      	pop	{r4, r7, pc}

0801430c <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 801430c:	b590      	push	{r4, r7, lr}
 801430e:	b095      	sub	sp, #84	; 0x54
 8014310:	af00      	add	r7, sp, #0
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	60b9      	str	r1, [r7, #8]
 8014316:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	3334      	adds	r3, #52	; 0x34
 801431e:	681c      	ldr	r4, [r3, #0]
 8014320:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014324:	490f      	ldr	r1, [pc, #60]	; (8014364 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8014326:	4618      	mov	r0, r3
 8014328:	f7f8 f8b3 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801432c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014330:	f107 0314 	add.w	r3, r7, #20
 8014334:	68f9      	ldr	r1, [r7, #12]
 8014336:	4618      	mov	r0, r3
 8014338:	f7f9 ff0a 	bl	800e150 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801433c:	f107 0314 	add.w	r3, r7, #20
 8014340:	4619      	mov	r1, r3
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	47a0      	blx	r4
 8014346:	f107 0314 	add.w	r3, r7, #20
 801434a:	4618      	mov	r0, r3
 801434c:	f7f9 ffc0 	bl	800e2d0 <_ZN11TestFailureD1Ev>
 8014350:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014354:	4618      	mov	r0, r3
 8014356:	f7f8 fc54 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801435a:	bf00      	nop
 801435c:	3754      	adds	r7, #84	; 0x54
 801435e:	46bd      	mov	sp, r7
 8014360:	bd90      	pop	{r4, r7, pc}
 8014362:	bf00      	nop
 8014364:	08024a38 	.word	0x08024a38

08014368 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8014368:	b480      	push	{r7}
 801436a:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 801436c:	2301      	movs	r3, #1
}
 801436e:	4618      	mov	r0, r3
 8014370:	46bd      	mov	sp, r7
 8014372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014376:	4770      	bx	lr

08014378 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8014382:	4b13      	ldr	r3, [pc, #76]	; (80143d0 <PlatformSpecificSetJmpImplementation+0x58>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	225c      	movs	r2, #92	; 0x5c
 8014388:	fb02 f303 	mul.w	r3, r2, r3
 801438c:	4a11      	ldr	r2, [pc, #68]	; (80143d4 <PlatformSpecificSetJmpImplementation+0x5c>)
 801438e:	4413      	add	r3, r2
 8014390:	4618      	mov	r0, r3
 8014392:	f7eb ff45 	bl	8000220 <setjmp>
 8014396:	4603      	mov	r3, r0
 8014398:	2b00      	cmp	r3, #0
 801439a:	bf0c      	ite	eq
 801439c:	2301      	moveq	r3, #1
 801439e:	2300      	movne	r3, #0
 80143a0:	b2db      	uxtb	r3, r3
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d00e      	beq.n	80143c4 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 80143a6:	4b0a      	ldr	r3, [pc, #40]	; (80143d0 <PlatformSpecificSetJmpImplementation+0x58>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	3301      	adds	r3, #1
 80143ac:	4a08      	ldr	r2, [pc, #32]	; (80143d0 <PlatformSpecificSetJmpImplementation+0x58>)
 80143ae:	6013      	str	r3, [r2, #0]
        function(data);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6838      	ldr	r0, [r7, #0]
 80143b4:	4798      	blx	r3
        jmp_buf_index--;
 80143b6:	4b06      	ldr	r3, [pc, #24]	; (80143d0 <PlatformSpecificSetJmpImplementation+0x58>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	3b01      	subs	r3, #1
 80143bc:	4a04      	ldr	r2, [pc, #16]	; (80143d0 <PlatformSpecificSetJmpImplementation+0x58>)
 80143be:	6013      	str	r3, [r2, #0]
        return 1;
 80143c0:	2301      	movs	r3, #1
 80143c2:	e000      	b.n	80143c6 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 80143c4:	2300      	movs	r3, #0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3708      	adds	r7, #8
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	20000e5c 	.word	0x20000e5c
 80143d4:	20000ac4 	.word	0x20000ac4

080143d8 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 80143dc:	4b07      	ldr	r3, [pc, #28]	; (80143fc <PlatformSpecificLongJmpImplementation+0x24>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	3b01      	subs	r3, #1
 80143e2:	4a06      	ldr	r2, [pc, #24]	; (80143fc <PlatformSpecificLongJmpImplementation+0x24>)
 80143e4:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 80143e6:	4b05      	ldr	r3, [pc, #20]	; (80143fc <PlatformSpecificLongJmpImplementation+0x24>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	225c      	movs	r2, #92	; 0x5c
 80143ec:	fb02 f303 	mul.w	r3, r2, r3
 80143f0:	4a03      	ldr	r2, [pc, #12]	; (8014400 <PlatformSpecificLongJmpImplementation+0x28>)
 80143f2:	4413      	add	r3, r2
 80143f4:	2101      	movs	r1, #1
 80143f6:	4618      	mov	r0, r3
 80143f8:	f7eb ff18 	bl	800022c <longjmp>
 80143fc:	20000e5c 	.word	0x20000e5c
 8014400:	20000ac4 	.word	0x20000ac4

08014404 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8014404:	b480      	push	{r7}
 8014406:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8014408:	2300      	movs	r3, #0
#endif
}
 801440a:	4618      	mov	r0, r3
 801440c:	46bd      	mov	sp, r7
 801440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014412:	4770      	bx	lr

08014414 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b084      	sub	sp, #16
 8014418:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 801441a:	2000      	movs	r0, #0
 801441c:	f00e ec4c 	blx	8022cb8 <__time_veneer>
 8014420:	4602      	mov	r2, r0
 8014422:	460b      	mov	r3, r1
 8014424:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8014428:	463b      	mov	r3, r7
 801442a:	4618      	mov	r0, r3
 801442c:	f00b fb78 	bl	801fb20 <localtime>
 8014430:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	4a04      	ldr	r2, [pc, #16]	; (8014448 <TimeStringImplementation+0x34>)
 8014436:	2150      	movs	r1, #80	; 0x50
 8014438:	4804      	ldr	r0, [pc, #16]	; (801444c <TimeStringImplementation+0x38>)
 801443a:	f00c fc79 	bl	8020d30 <strftime>
    return dateTime;
 801443e:	4b03      	ldr	r3, [pc, #12]	; (801444c <TimeStringImplementation+0x38>)
}
 8014440:	4618      	mov	r0, r3
 8014442:	3710      	adds	r7, #16
 8014444:	46bd      	mov	sp, r7
 8014446:	bd80      	pop	{r7, pc}
 8014448:	08024a74 	.word	0x08024a74
 801444c:	20000e60 	.word	0x20000e60

08014450 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b082      	sub	sp, #8
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 801445a:	6839      	ldr	r1, [r7, #0]
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f00b f995 	bl	801f78c <fopen>
 8014462:	4603      	mov	r3, r0
#endif
}
 8014464:	4618      	mov	r0, r3
 8014466:	3708      	adds	r7, #8
 8014468:	46bd      	mov	sp, r7
 801446a:	bd80      	pop	{r7, pc}

0801446c <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
 8014474:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8014476:	6839      	ldr	r1, [r7, #0]
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f00b f9f5 	bl	801f868 <fputs>
}
 801447e:	bf00      	nop
 8014480:	3708      	adds	r7, #8
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}

08014486 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8014486:	b580      	push	{r7, lr}
 8014488:	b082      	sub	sp, #8
 801448a:	af00      	add	r7, sp, #0
 801448c:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f00a ff76 	bl	801f380 <fclose>
}
 8014494:	bf00      	nop
 8014496:	3708      	adds	r7, #8
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}

0801449c <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 801449c:	b580      	push	{r7, lr}
 801449e:	af00      	add	r7, sp, #0
  fflush(stdout);
 80144a0:	4b03      	ldr	r3, [pc, #12]	; (80144b0 <PlatformSpecificFlushImplementation+0x14>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	689b      	ldr	r3, [r3, #8]
 80144a6:	4618      	mov	r0, r3
 80144a8:	f00b f834 	bl	801f514 <fflush>
}
 80144ac:	bf00      	nop
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	20000108 	.word	0x20000108

080144b4 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 80144be:	ed97 0b00 	vldr	d0, [r7]
 80144c2:	f7ff ff07 	bl	80142d4 <_ZSt5isnand>
 80144c6:	4603      	mov	r3, r0
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3708      	adds	r7, #8
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 80144da:	ed97 0b00 	vldr	d0, [r7]
 80144de:	f7ff fec9 	bl	8014274 <_ZSt5isinfd>
 80144e2:	4603      	mov	r3, r0
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3708      	adds	r7, #8
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}

080144ec <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 80144ec:	b480      	push	{r7}
 80144ee:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 80144f0:	2300      	movs	r3, #0
#endif

}
 80144f2:	4618      	mov	r0, r3
 80144f4:	46bd      	mov	sp, r7
 80144f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fa:	4770      	bx	lr

080144fc <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 80144fc:	b480      	push	{r7}
 80144fe:	b083      	sub	sp, #12
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
}
 8014504:	bf00      	nop
 8014506:	370c      	adds	r7, #12
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr

08014510 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8014510:	b480      	push	{r7}
 8014512:	b083      	sub	sp, #12
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
}
 8014518:	bf00      	nop
 801451a:	370c      	adds	r7, #12
 801451c:	46bd      	mov	sp, r7
 801451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014522:	4770      	bx	lr

08014524 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8014524:	b480      	push	{r7}
 8014526:	b083      	sub	sp, #12
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
}
 801452c:	bf00      	nop
 801452e:	370c      	adds	r7, #12
 8014530:	46bd      	mov	sp, r7
 8014532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014536:	4770      	bx	lr

08014538 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8014538:	b580      	push	{r7, lr}
 801453a:	b084      	sub	sp, #16
 801453c:	af00      	add	r7, sp, #0
 801453e:	60f8      	str	r0, [r7, #12]
 8014540:	60b9      	str	r1, [r7, #8]
 8014542:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8014544:	4a25      	ldr	r2, [pc, #148]	; (80145dc <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	601a      	str	r2, [r3, #0]
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	68ba      	ldr	r2, [r7, #8]
 801454e:	605a      	str	r2, [r3, #4]
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	687a      	ldr	r2, [r7, #4]
 8014554:	609a      	str	r2, [r3, #8]
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	2200      	movs	r2, #0
 801455a:	731a      	strb	r2, [r3, #12]
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	2200      	movs	r2, #0
 8014560:	735a      	strb	r2, [r3, #13]
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	2200      	movs	r2, #0
 8014566:	739a      	strb	r2, [r3, #14]
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	2200      	movs	r2, #0
 801456c:	73da      	strb	r2, [r3, #15]
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2200      	movs	r2, #0
 8014572:	741a      	strb	r2, [r3, #16]
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2200      	movs	r2, #0
 8014578:	745a      	strb	r2, [r3, #17]
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	2200      	movs	r2, #0
 801457e:	749a      	strb	r2, [r3, #18]
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	2200      	movs	r2, #0
 8014584:	74da      	strb	r2, [r3, #19]
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	2200      	movs	r2, #0
 801458a:	751a      	strb	r2, [r3, #20]
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	2200      	movs	r2, #0
 8014590:	755a      	strb	r2, [r3, #21]
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	2200      	movs	r2, #0
 8014596:	759a      	strb	r2, [r3, #22]
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	2200      	movs	r2, #0
 801459c:	75da      	strb	r2, [r3, #23]
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	2200      	movs	r2, #0
 80145a2:	761a      	strb	r2, [r3, #24]
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	2201      	movs	r2, #1
 80145a8:	61da      	str	r2, [r3, #28]
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	2200      	movs	r2, #0
 80145ae:	621a      	str	r2, [r3, #32]
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	2200      	movs	r2, #0
 80145b4:	625a      	str	r2, [r3, #36]	; 0x24
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	2200      	movs	r2, #0
 80145ba:	629a      	str	r2, [r3, #40]	; 0x28
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	2200      	movs	r2, #0
 80145c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	3330      	adds	r3, #48	; 0x30
 80145c8:	4905      	ldr	r1, [pc, #20]	; (80145e0 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7f7 ff61 	bl	800c492 <_ZN12SimpleStringC1EPKc>
{
}
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	4618      	mov	r0, r3
 80145d4:	3710      	adds	r7, #16
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	080283e8 	.word	0x080283e8
 80145e0:	08024a88 	.word	0x08024a88

080145e4 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7f8 fb07 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	4618      	mov	r0, r3
 80145f8:	3708      	adds	r7, #8
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
	...

08014600 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8014600:	b590      	push	{r4, r7, lr}
 8014602:	b085      	sub	sp, #20
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	4a20      	ldr	r2, [pc, #128]	; (801468c <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014612:	2b00      	cmp	r3, #0
 8014614:	d015      	beq.n	8014642 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801461a:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014620:	4618      	mov	r0, r3
 8014622:	f00a fda2 	bl	801f16a <_ZNK10TestFilter7getNextEv>
 8014626:	4602      	mov	r2, r0
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 801462c:	68fc      	ldr	r4, [r7, #12]
 801462e:	2c00      	cmp	r4, #0
 8014630:	d0ed      	beq.n	801460e <_ZN20CommandLineArgumentsD1Ev+0xe>
 8014632:	4620      	mov	r0, r4
 8014634:	f7ff ffd6 	bl	80145e4 <_ZN10TestFilterD1Ev>
 8014638:	2110      	movs	r1, #16
 801463a:	4620      	mov	r0, r4
 801463c:	f7f5 fb7a 	bl	8009d34 <_ZdlPvj>
    while(groupFilters_) {
 8014640:	e7e5      	b.n	801460e <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014646:	2b00      	cmp	r3, #0
 8014648:	d015      	beq.n	8014676 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801464e:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014654:	4618      	mov	r0, r3
 8014656:	f00a fd88 	bl	801f16a <_ZNK10TestFilter7getNextEv>
 801465a:	4602      	mov	r2, r0
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8014660:	68bc      	ldr	r4, [r7, #8]
 8014662:	2c00      	cmp	r4, #0
 8014664:	d0ed      	beq.n	8014642 <_ZN20CommandLineArgumentsD1Ev+0x42>
 8014666:	4620      	mov	r0, r4
 8014668:	f7ff ffbc 	bl	80145e4 <_ZN10TestFilterD1Ev>
 801466c:	2110      	movs	r1, #16
 801466e:	4620      	mov	r0, r4
 8014670:	f7f5 fb60 	bl	8009d34 <_ZdlPvj>
    while(nameFilters_) {
 8014674:	e7e5      	b.n	8014642 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	3330      	adds	r3, #48	; 0x30
 801467a:	4618      	mov	r0, r3
 801467c:	f7f8 fac1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    }
}
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	4618      	mov	r0, r3
 8014684:	3714      	adds	r7, #20
 8014686:	46bd      	mov	sp, r7
 8014688:	bd90      	pop	{r4, r7, pc}
 801468a:	bf00      	nop
 801468c:	080283e8 	.word	0x080283e8

08014690 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8014690:	b580      	push	{r7, lr}
 8014692:	b082      	sub	sp, #8
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
}
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f7ff ffb1 	bl	8014600 <_ZN20CommandLineArgumentsD1Ev>
 801469e:	2138      	movs	r1, #56	; 0x38
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f7f5 fb47 	bl	8009d34 <_ZdlPvj>
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	4618      	mov	r0, r3
 80146aa:	3708      	adds	r7, #8
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}

080146b0 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 80146b0:	b5b0      	push	{r4, r5, r7, lr}
 80146b2:	b0be      	sub	sp, #248	; 0xf8
 80146b4:	af02      	add	r7, sp, #8
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	6039      	str	r1, [r7, #0]
 80146ba:	2400      	movs	r4, #0
    bool correctParameters = true;
 80146bc:	2301      	movs	r3, #1
 80146be:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80146c2:	2301      	movs	r3, #1
 80146c4:	613b      	str	r3, [r7, #16]
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	685a      	ldr	r2, [r3, #4]
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	429a      	cmp	r2, r3
 80146ce:	f340 83a4 	ble.w	8014e1a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	689a      	ldr	r2, [r3, #8]
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	009b      	lsls	r3, r3, #2
 80146da:	4413      	add	r3, r2
 80146dc:	681a      	ldr	r2, [r3, #0]
 80146de:	f107 0308 	add.w	r3, r7, #8
 80146e2:	4611      	mov	r1, r2
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7f7 fed4 	bl	800c492 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 80146ea:	f107 0314 	add.w	r3, r7, #20
 80146ee:	49c8      	ldr	r1, [pc, #800]	; (8014a10 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7f7 fece 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80146f6:	f107 0214 	add.w	r2, r7, #20
 80146fa:	f107 0308 	add.w	r3, r7, #8
 80146fe:	4611      	mov	r1, r2
 8014700:	4618      	mov	r0, r3
 8014702:	f7f8 fa8a 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8014706:	4603      	mov	r3, r0
 8014708:	461d      	mov	r5, r3
 801470a:	f107 0314 	add.w	r3, r7, #20
 801470e:	4618      	mov	r0, r3
 8014710:	f7f8 fa77 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014714:	2d00      	cmp	r5, #0
 8014716:	d006      	beq.n	8014726 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2201      	movs	r2, #1
 801471c:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 801471e:	2300      	movs	r3, #0
 8014720:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014724:	e366      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8014726:	f107 031c 	add.w	r3, r7, #28
 801472a:	49ba      	ldr	r1, [pc, #744]	; (8014a14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 801472c:	4618      	mov	r0, r3
 801472e:	f7f7 feb0 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014732:	f107 021c 	add.w	r2, r7, #28
 8014736:	f107 0308 	add.w	r3, r7, #8
 801473a:	4611      	mov	r1, r2
 801473c:	4618      	mov	r0, r3
 801473e:	f7f8 fa6c 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8014742:	4603      	mov	r3, r0
 8014744:	461d      	mov	r5, r3
 8014746:	f107 031c 	add.w	r3, r7, #28
 801474a:	4618      	mov	r0, r3
 801474c:	f7f8 fa59 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014750:	2d00      	cmp	r5, #0
 8014752:	d003      	beq.n	801475c <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2201      	movs	r2, #1
 8014758:	735a      	strb	r2, [r3, #13]
 801475a:	e34b      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 801475c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014760:	49ad      	ldr	r1, [pc, #692]	; (8014a18 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8014762:	4618      	mov	r0, r3
 8014764:	f7f7 fe95 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014768:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801476c:	f107 0308 	add.w	r3, r7, #8
 8014770:	4611      	mov	r1, r2
 8014772:	4618      	mov	r0, r3
 8014774:	f7f8 fa51 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8014778:	4603      	mov	r3, r0
 801477a:	461d      	mov	r5, r3
 801477c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014780:	4618      	mov	r0, r3
 8014782:	f7f8 fa3e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014786:	2d00      	cmp	r5, #0
 8014788:	d003      	beq.n	8014792 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2201      	movs	r2, #1
 801478e:	739a      	strb	r2, [r3, #14]
 8014790:	e330      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8014792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014796:	49a1      	ldr	r1, [pc, #644]	; (8014a1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8014798:	4618      	mov	r0, r3
 801479a:	f7f7 fe7a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801479e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80147a2:	f107 0308 	add.w	r3, r7, #8
 80147a6:	4611      	mov	r1, r2
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7f8 fa36 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 80147ae:	4603      	mov	r3, r0
 80147b0:	461d      	mov	r5, r3
 80147b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7f8 fa23 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80147bc:	2d00      	cmp	r5, #0
 80147be:	d003      	beq.n	80147c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2201      	movs	r2, #1
 80147c4:	73da      	strb	r2, [r3, #15]
 80147c6:	e315      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80147c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80147cc:	4994      	ldr	r1, [pc, #592]	; (8014a20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7f7 fe5f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80147d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80147d8:	f107 0308 	add.w	r3, r7, #8
 80147dc:	4611      	mov	r1, r2
 80147de:	4618      	mov	r0, r3
 80147e0:	f7f8 fa1b 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 80147e4:	4603      	mov	r3, r0
 80147e6:	461d      	mov	r5, r3
 80147e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80147ec:	4618      	mov	r0, r3
 80147ee:	f7f8 fa08 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80147f2:	2d00      	cmp	r5, #0
 80147f4:	d003      	beq.n	80147fe <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	2201      	movs	r2, #1
 80147fa:	741a      	strb	r2, [r3, #16]
 80147fc:	e2fa      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 80147fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014802:	4988      	ldr	r1, [pc, #544]	; (8014a24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8014804:	4618      	mov	r0, r3
 8014806:	f7f7 fe44 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801480a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801480e:	f107 0308 	add.w	r3, r7, #8
 8014812:	4611      	mov	r1, r2
 8014814:	4618      	mov	r0, r3
 8014816:	f7f8 fa00 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801481a:	4603      	mov	r3, r0
 801481c:	461d      	mov	r5, r3
 801481e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014822:	4618      	mov	r0, r3
 8014824:	f7f8 f9ed 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014828:	2d00      	cmp	r5, #0
 801482a:	d003      	beq.n	8014834 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	2201      	movs	r2, #1
 8014830:	755a      	strb	r2, [r3, #21]
 8014832:	e2df      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8014834:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014838:	497b      	ldr	r1, [pc, #492]	; (8014a28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 801483a:	4618      	mov	r0, r3
 801483c:	f7f7 fe29 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014840:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8014844:	f107 0308 	add.w	r3, r7, #8
 8014848:	4611      	mov	r1, r2
 801484a:	4618      	mov	r0, r3
 801484c:	f7f8 f9e5 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8014850:	4603      	mov	r3, r0
 8014852:	461d      	mov	r5, r3
 8014854:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014858:	4618      	mov	r0, r3
 801485a:	f7f8 f9d2 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801485e:	2d00      	cmp	r5, #0
 8014860:	d003      	beq.n	801486a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2201      	movs	r2, #1
 8014866:	745a      	strb	r2, [r3, #17]
 8014868:	e2c4      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 801486a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801486e:	496f      	ldr	r1, [pc, #444]	; (8014a2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8014870:	4618      	mov	r0, r3
 8014872:	f7f7 fe0e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014876:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801487a:	f107 0308 	add.w	r3, r7, #8
 801487e:	4611      	mov	r1, r2
 8014880:	4618      	mov	r0, r3
 8014882:	f7f8 f9ca 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8014886:	4603      	mov	r3, r0
 8014888:	461d      	mov	r5, r3
 801488a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801488e:	4618      	mov	r0, r3
 8014890:	f7f8 f9b7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014894:	2d00      	cmp	r5, #0
 8014896:	d003      	beq.n	80148a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2201      	movs	r2, #1
 801489c:	749a      	strb	r2, [r3, #18]
 801489e:	e2a9      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 80148a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80148a4:	4962      	ldr	r1, [pc, #392]	; (8014a30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 80148a6:	4618      	mov	r0, r3
 80148a8:	f7f7 fdf3 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80148ac:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80148b0:	f107 0308 	add.w	r3, r7, #8
 80148b4:	4611      	mov	r1, r2
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7f8 f9af 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 80148bc:	4603      	mov	r3, r0
 80148be:	461d      	mov	r5, r3
 80148c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7f8 f99c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80148ca:	2d00      	cmp	r5, #0
 80148cc:	d003      	beq.n	80148d6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2201      	movs	r2, #1
 80148d2:	74da      	strb	r2, [r3, #19]
 80148d4:	e28e      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80148d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80148da:	4956      	ldr	r1, [pc, #344]	; (8014a34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 80148dc:	4618      	mov	r0, r3
 80148de:	f7f7 fdd8 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80148e2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80148e6:	f107 0308 	add.w	r3, r7, #8
 80148ea:	4611      	mov	r1, r2
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7f8 f994 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 80148f2:	4603      	mov	r3, r0
 80148f4:	461d      	mov	r5, r3
 80148f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80148fa:	4618      	mov	r0, r3
 80148fc:	f7f8 f981 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014900:	2d00      	cmp	r5, #0
 8014902:	d003      	beq.n	801490c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2201      	movs	r2, #1
 8014908:	751a      	strb	r2, [r3, #20]
 801490a:	e273      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 801490c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014910:	4949      	ldr	r1, [pc, #292]	; (8014a38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8014912:	4618      	mov	r0, r3
 8014914:	f7f7 fdbd 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014918:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801491c:	f107 0308 	add.w	r3, r7, #8
 8014920:	4611      	mov	r1, r2
 8014922:	4618      	mov	r0, r3
 8014924:	f7f8 f979 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8014928:	4603      	mov	r3, r0
 801492a:	461d      	mov	r5, r3
 801492c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014930:	4618      	mov	r0, r3
 8014932:	f7f8 f966 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014936:	2d00      	cmp	r5, #0
 8014938:	d003      	beq.n	8014942 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2201      	movs	r2, #1
 801493e:	759a      	strb	r2, [r3, #22]
 8014940:	e258      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 8014942:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014946:	493d      	ldr	r1, [pc, #244]	; (8014a3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8014948:	4618      	mov	r0, r3
 801494a:	f7f7 fda2 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801494e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8014952:	f107 0308 	add.w	r3, r7, #8
 8014956:	4611      	mov	r1, r2
 8014958:	4618      	mov	r0, r3
 801495a:	f7f7 fe5e 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 801495e:	4603      	mov	r3, r0
 8014960:	461d      	mov	r5, r3
 8014962:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014966:	4618      	mov	r0, r3
 8014968:	f7f8 f94b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801496c:	2d00      	cmp	r5, #0
 801496e:	d009      	beq.n	8014984 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	6859      	ldr	r1, [r3, #4]
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	689a      	ldr	r2, [r3, #8]
 8014978:	f107 0310 	add.w	r3, r7, #16
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f000 fb33 	bl	8014fe8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8014982:	e237      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8014984:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014988:	492d      	ldr	r1, [pc, #180]	; (8014a40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 801498a:	4618      	mov	r0, r3
 801498c:	f7f7 fd81 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014990:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8014994:	f107 0308 	add.w	r3, r7, #8
 8014998:	4611      	mov	r1, r2
 801499a:	4618      	mov	r0, r3
 801499c:	f7f7 fe3d 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 80149a0:	4603      	mov	r3, r0
 80149a2:	461d      	mov	r5, r3
 80149a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80149a8:	4618      	mov	r0, r3
 80149aa:	f7f8 f92a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80149ae:	2d00      	cmp	r5, #0
 80149b0:	d009      	beq.n	80149c6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	6859      	ldr	r1, [r3, #4]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	689a      	ldr	r2, [r3, #8]
 80149ba:	f107 0310 	add.w	r3, r7, #16
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f000 fc40 	bl	8015244 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 80149c4:	e216      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 80149c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80149ca:	491e      	ldr	r1, [pc, #120]	; (8014a44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7f7 fd60 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80149d2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80149d6:	f107 0308 	add.w	r3, r7, #8
 80149da:	4611      	mov	r1, r2
 80149dc:	4618      	mov	r0, r3
 80149de:	f7f7 fe1c 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 80149e2:	4603      	mov	r3, r0
 80149e4:	461d      	mov	r5, r3
 80149e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7f8 f909 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80149f0:	2d00      	cmp	r5, #0
 80149f2:	d029      	beq.n	8014a48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	6859      	ldr	r1, [r3, #4]
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	689a      	ldr	r2, [r3, #8]
 80149fc:	f107 0310 	add.w	r3, r7, #16
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f000 fc61 	bl	80152c8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8014a06:	4603      	mov	r3, r0
 8014a08:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014a0c:	e1f2      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8014a0e:	bf00      	nop
 8014a10:	08024a8c 	.word	0x08024a8c
 8014a14:	08024a90 	.word	0x08024a90
 8014a18:	08024a94 	.word	0x08024a94
 8014a1c:	08024a98 	.word	0x08024a98
 8014a20:	08024a9c 	.word	0x08024a9c
 8014a24:	08024aa0 	.word	0x08024aa0
 8014a28:	08024aa4 	.word	0x08024aa4
 8014a2c:	08024aa8 	.word	0x08024aa8
 8014a30:	08024aac 	.word	0x08024aac
 8014a34:	08024ab0 	.word	0x08024ab0
 8014a38:	08024ab4 	.word	0x08024ab4
 8014a3c:	08024ab8 	.word	0x08024ab8
 8014a40:	08024abc 	.word	0x08024abc
 8014a44:	08024ac0 	.word	0x08024ac0
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8014a48:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014a4c:	49b9      	ldr	r1, [pc, #740]	; (8014d34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7f7 fd1f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014a54:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014a58:	f107 0308 	add.w	r3, r7, #8
 8014a5c:	4611      	mov	r1, r2
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7f7 fddb 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014a64:	4603      	mov	r3, r0
 8014a66:	461d      	mov	r5, r3
 8014a68:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f7f8 f8c8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014a72:	2d00      	cmp	r5, #0
 8014a74:	d009      	beq.n	8014a8a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	6859      	ldr	r1, [r3, #4]
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	689a      	ldr	r2, [r3, #8]
 8014a7e:	f107 0310 	add.w	r3, r7, #16
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f000 fccc 	bl	8015420 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8014a88:	e1b4      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8014a8a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014a8e:	49aa      	ldr	r1, [pc, #680]	; (8014d38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7f7 fcfe 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014a96:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8014a9a:	f107 0308 	add.w	r3, r7, #8
 8014a9e:	4611      	mov	r1, r2
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f7f7 fdba 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	461d      	mov	r5, r3
 8014aaa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7f8 f8a7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014ab4:	2d00      	cmp	r5, #0
 8014ab6:	d009      	beq.n	8014acc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	6859      	ldr	r1, [r3, #4]
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	689a      	ldr	r2, [r3, #8]
 8014ac0:	f107 0310 	add.w	r3, r7, #16
 8014ac4:	6878      	ldr	r0, [r7, #4]
 8014ac6:	f000 fcf1 	bl	80154ac <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8014aca:	e193      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8014acc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014ad0:	499a      	ldr	r1, [pc, #616]	; (8014d3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7f7 fcdd 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014ad8:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8014adc:	f107 0308 	add.w	r3, r7, #8
 8014ae0:	4611      	mov	r1, r2
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7f7 fd99 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	461d      	mov	r5, r3
 8014aec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7f8 f886 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014af6:	2d00      	cmp	r5, #0
 8014af8:	d009      	beq.n	8014b0e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	6859      	ldr	r1, [r3, #4]
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	689a      	ldr	r2, [r3, #8]
 8014b02:	f107 0310 	add.w	r3, r7, #16
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f000 fd16 	bl	8015538 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8014b0c:	e172      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8014b0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014b12:	498b      	ldr	r1, [pc, #556]	; (8014d40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7f7 fcbc 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014b1a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8014b1e:	f107 0308 	add.w	r3, r7, #8
 8014b22:	4611      	mov	r1, r2
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7f7 fd78 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	461d      	mov	r5, r3
 8014b2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7f8 f865 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014b38:	2d00      	cmp	r5, #0
 8014b3a:	d009      	beq.n	8014b50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	6859      	ldr	r1, [r3, #4]
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	689a      	ldr	r2, [r3, #8]
 8014b44:	f107 0310 	add.w	r3, r7, #16
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f000 fd3d 	bl	80155c8 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8014b4e:	e151      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8014b50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014b54:	497b      	ldr	r1, [pc, #492]	; (8014d44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7f7 fc9b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014b5c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8014b60:	f107 0308 	add.w	r3, r7, #8
 8014b64:	4611      	mov	r1, r2
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7f7 fd57 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	461d      	mov	r5, r3
 8014b70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014b74:	4618      	mov	r0, r3
 8014b76:	f7f8 f844 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014b7a:	2d00      	cmp	r5, #0
 8014b7c:	d009      	beq.n	8014b92 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	6859      	ldr	r1, [r3, #4]
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	689a      	ldr	r2, [r3, #8]
 8014b86:	f107 0310 	add.w	r3, r7, #16
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f000 fd5e 	bl	801564c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8014b90:	e130      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8014b92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014b96:	496c      	ldr	r1, [pc, #432]	; (8014d48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f7f7 fc7a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014b9e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8014ba2:	f107 0308 	add.w	r3, r7, #8
 8014ba6:	4611      	mov	r1, r2
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7f7 fd36 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	461d      	mov	r5, r3
 8014bb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	f7f8 f823 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014bbc:	2d00      	cmp	r5, #0
 8014bbe:	d009      	beq.n	8014bd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	6859      	ldr	r1, [r3, #4]
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	689a      	ldr	r2, [r3, #8]
 8014bc8:	f107 0310 	add.w	r3, r7, #16
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f000 fd83 	bl	80156d8 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8014bd2:	e10f      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8014bd4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014bd8:	495c      	ldr	r1, [pc, #368]	; (8014d4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7f7 fc59 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014be0:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8014be4:	f107 0308 	add.w	r3, r7, #8
 8014be8:	4611      	mov	r1, r2
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7f7 fd15 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	461d      	mov	r5, r3
 8014bf4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f7f8 f802 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014bfe:	2d00      	cmp	r5, #0
 8014c00:	d009      	beq.n	8014c16 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	6859      	ldr	r1, [r3, #4]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	689a      	ldr	r2, [r3, #8]
 8014c0a:	f107 0310 	add.w	r3, r7, #16
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f000 fda8 	bl	8015764 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8014c14:	e0ee      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8014c16:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014c1a:	494d      	ldr	r1, [pc, #308]	; (8014d50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7f7 fc38 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014c22:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8014c26:	f107 0308 	add.w	r3, r7, #8
 8014c2a:	4611      	mov	r1, r2
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7f7 fcf4 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014c32:	4603      	mov	r3, r0
 8014c34:	461d      	mov	r5, r3
 8014c36:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7f7 ffe1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014c40:	2d00      	cmp	r5, #0
 8014c42:	d00c      	beq.n	8014c5e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	6859      	ldr	r1, [r3, #4]
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	689a      	ldr	r2, [r3, #8]
 8014c4c:	f107 0310 	add.w	r3, r7, #16
 8014c50:	6878      	ldr	r0, [r7, #4]
 8014c52:	f000 fa29 	bl	80150a8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8014c56:	4603      	mov	r3, r0
 8014c58:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014c5c:	e0ca      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8014c5e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014c62:	493c      	ldr	r1, [pc, #240]	; (8014d54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8014c64:	4618      	mov	r0, r3
 8014c66:	f7f7 fc14 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014c6a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8014c6e:	f107 0308 	add.w	r3, r7, #8
 8014c72:	4611      	mov	r1, r2
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7f7 fcd0 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	461d      	mov	r5, r3
 8014c7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014c82:	4618      	mov	r0, r3
 8014c84:	f7f7 ffbd 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014c88:	2d00      	cmp	r5, #0
 8014c8a:	d00b      	beq.n	8014ca4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	6859      	ldr	r1, [r3, #4]
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	689a      	ldr	r2, [r3, #8]
 8014c94:	f107 0310 	add.w	r3, r7, #16
 8014c98:	482e      	ldr	r0, [pc, #184]	; (8014d54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8014c9a:	9000      	str	r0, [sp, #0]
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f000 fda9 	bl	80157f4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8014ca2:	e0a7      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8014ca4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014ca8:	492b      	ldr	r1, [pc, #172]	; (8014d58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7f7 fbf1 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014cb0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8014cb4:	f107 0308 	add.w	r3, r7, #8
 8014cb8:	4611      	mov	r1, r2
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7f7 fcad 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	461d      	mov	r5, r3
 8014cc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f7f7 ff9a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014cce:	2d00      	cmp	r5, #0
 8014cd0:	d00b      	beq.n	8014cea <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	6859      	ldr	r1, [r3, #4]
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	689a      	ldr	r2, [r3, #8]
 8014cda:	f107 0310 	add.w	r3, r7, #16
 8014cde:	481e      	ldr	r0, [pc, #120]	; (8014d58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8014ce0:	9000      	str	r0, [sp, #0]
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f000 fd86 	bl	80157f4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8014ce8:	e084      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8014cea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014cee:	491b      	ldr	r1, [pc, #108]	; (8014d5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f7f7 fbce 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014cf6:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8014cfa:	f107 0308 	add.w	r3, r7, #8
 8014cfe:	4611      	mov	r1, r2
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7f7 fc8a 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014d06:	4603      	mov	r3, r0
 8014d08:	461d      	mov	r5, r3
 8014d0a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7f7 ff77 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014d14:	2d00      	cmp	r5, #0
 8014d16:	d023      	beq.n	8014d60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	6859      	ldr	r1, [r3, #4]
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	689a      	ldr	r2, [r3, #8]
 8014d20:	f107 0310 	add.w	r3, r7, #16
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f000 fe3b 	bl	80159a0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014d30:	e060      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8014d32:	bf00      	nop
 8014d34:	08024ac4 	.word	0x08024ac4
 8014d38:	08024ac8 	.word	0x08024ac8
 8014d3c:	08024acc 	.word	0x08024acc
 8014d40:	08024ad4 	.word	0x08024ad4
 8014d44:	08024ad8 	.word	0x08024ad8
 8014d48:	08024adc 	.word	0x08024adc
 8014d4c:	08024ae0 	.word	0x08024ae0
 8014d50:	08024ae8 	.word	0x08024ae8
 8014d54:	08024aec 	.word	0x08024aec
 8014d58:	08024af4 	.word	0x08024af4
 8014d5c:	08024b04 	.word	0x08024b04
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8014d60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014d64:	4930      	ldr	r1, [pc, #192]	; (8014e28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7f7 fb93 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014d6c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8014d70:	f107 0308 	add.w	r3, r7, #8
 8014d74:	4611      	mov	r1, r2
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7f7 fc4f 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	461d      	mov	r5, r3
 8014d80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7f7 ff3c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014d8a:	2d00      	cmp	r5, #0
 8014d8c:	d00e      	beq.n	8014dac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	331c      	adds	r3, #28
 8014d94:	681d      	ldr	r5, [r3, #0]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6859      	ldr	r1, [r3, #4]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	689a      	ldr	r2, [r3, #8]
 8014d9e:	693b      	ldr	r3, [r7, #16]
 8014da0:	6838      	ldr	r0, [r7, #0]
 8014da2:	47a8      	blx	r5
 8014da4:	4603      	mov	r3, r0
 8014da6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014daa:	e023      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8014dac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014db0:	491e      	ldr	r1, [pc, #120]	; (8014e2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7f7 fb6d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8014db8:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8014dbc:	f107 0308 	add.w	r3, r7, #8
 8014dc0:	4611      	mov	r1, r2
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7f7 fc29 	bl	800c61a <_ZNK12SimpleString10startsWithERKS_>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	461d      	mov	r5, r3
 8014dcc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f7f7 ff16 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014dd6:	2d00      	cmp	r5, #0
 8014dd8:	d009      	beq.n	8014dee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6859      	ldr	r1, [r3, #4]
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	689a      	ldr	r2, [r3, #8]
 8014de2:	f107 0310 	add.w	r3, r7, #16
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f000 fd98 	bl	801591c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8014dec:	e002      	b.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8014dee:	2300      	movs	r3, #0
 8014df0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8014df4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d102      	bne.n	8014e02 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8014dfc:	2400      	movs	r4, #0
 8014dfe:	2500      	movs	r5, #0
 8014e00:	e000      	b.n	8014e04 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8014e02:	2501      	movs	r5, #1
 8014e04:	f107 0308 	add.w	r3, r7, #8
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f7f7 fefa 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8014e0e:	2d01      	cmp	r5, #1
 8014e10:	d104      	bne.n	8014e1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	3301      	adds	r3, #1
 8014e16:	613b      	str	r3, [r7, #16]
 8014e18:	e455      	b.n	80146c6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8014e1a:	2401      	movs	r4, #1
 8014e1c:	4623      	mov	r3, r4
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	37f0      	adds	r7, #240	; 0xf0
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bdb0      	pop	{r4, r5, r7, pc}
 8014e26:	bf00      	nop
 8014e28:	08024a9c 	.word	0x08024a9c
 8014e2c:	08024b08 	.word	0x08024b08

08014e30 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8014e30:	b480      	push	{r7}
 8014e32:	b083      	sub	sp, #12
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8014e38:	4b03      	ldr	r3, [pc, #12]	; (8014e48 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	370c      	adds	r7, #12
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e44:	4770      	bx	lr
 8014e46:	bf00      	nop
 8014e48:	08024b0c 	.word	0x08024b0c

08014e4c <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8014e4c:	b480      	push	{r7}
 8014e4e:	b083      	sub	sp, #12
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8014e54:	4b03      	ldr	r3, [pc, #12]	; (8014e64 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	370c      	adds	r7, #12
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e60:	4770      	bx	lr
 8014e62:	bf00      	nop
 8014e64:	08024c3c 	.word	0x08024c3c

08014e68 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8014e68:	b480      	push	{r7}
 8014e6a:	b083      	sub	sp, #12
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	7b1b      	ldrb	r3, [r3, #12]
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	370c      	adds	r7, #12
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7e:	4770      	bx	lr

08014e80 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8014e80:	b480      	push	{r7}
 8014e82:	b083      	sub	sp, #12
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
    return verbose_;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	7b5b      	ldrb	r3, [r3, #13]
}
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	370c      	adds	r7, #12
 8014e90:	46bd      	mov	sp, r7
 8014e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e96:	4770      	bx	lr

08014e98 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8014e98:	b480      	push	{r7}
 8014e9a:	b083      	sub	sp, #12
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	7b9b      	ldrb	r3, [r3, #14]
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	370c      	adds	r7, #12
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eae:	4770      	bx	lr

08014eb0 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	b083      	sub	sp, #12
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
    return color_;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	7bdb      	ldrb	r3, [r3, #15]
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	370c      	adds	r7, #12
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec6:	4770      	bx	lr

08014ec8 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8014ec8:	b480      	push	{r7}
 8014eca:	b083      	sub	sp, #12
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	7c5b      	ldrb	r3, [r3, #17]
}
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	370c      	adds	r7, #12
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ede:	4770      	bx	lr

08014ee0 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8014ee0:	b480      	push	{r7}
 8014ee2:	b083      	sub	sp, #12
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	7c9b      	ldrb	r3, [r3, #18]
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	370c      	adds	r7, #12
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef6:	4770      	bx	lr

08014ef8 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8014ef8:	b480      	push	{r7}
 8014efa:	b083      	sub	sp, #12
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	7cdb      	ldrb	r3, [r3, #19]
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	370c      	adds	r7, #12
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0e:	4770      	bx	lr

08014f10 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8014f10:	b480      	push	{r7}
 8014f12:	b083      	sub	sp, #12
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	7d1b      	ldrb	r3, [r3, #20]
}
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	370c      	adds	r7, #12
 8014f20:	46bd      	mov	sp, r7
 8014f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f26:	4770      	bx	lr

08014f28 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8014f28:	b480      	push	{r7}
 8014f2a:	b083      	sub	sp, #12
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	7c1b      	ldrb	r3, [r3, #16]
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	370c      	adds	r7, #12
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr

08014f40 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8014f40:	b480      	push	{r7}
 8014f42:	b083      	sub	sp, #12
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
    return repeat_;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	69db      	ldr	r3, [r3, #28]
}
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	370c      	adds	r7, #12
 8014f50:	46bd      	mov	sp, r7
 8014f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f56:	4770      	bx	lr

08014f58 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8014f58:	b480      	push	{r7}
 8014f5a:	b083      	sub	sp, #12
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
    return reversing_;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	7d5b      	ldrb	r3, [r3, #21]
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	370c      	adds	r7, #12
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6e:	4770      	bx	lr

08014f70 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8014f70:	b480      	push	{r7}
 8014f72:	b083      	sub	sp, #12
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	7d9b      	ldrb	r3, [r3, #22]
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	370c      	adds	r7, #12
 8014f80:	46bd      	mov	sp, r7
 8014f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f86:	4770      	bx	lr

08014f88 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8014f88:	b480      	push	{r7}
 8014f8a:	b083      	sub	sp, #12
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	7ddb      	ldrb	r3, [r3, #23]
}
 8014f94:	4618      	mov	r0, r3
 8014f96:	370c      	adds	r7, #12
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9e:	4770      	bx	lr

08014fa0 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8014fa0:	b480      	push	{r7}
 8014fa2:	b083      	sub	sp, #12
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	6a1b      	ldr	r3, [r3, #32]
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	370c      	adds	r7, #12
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb6:	4770      	bx	lr

08014fb8 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8014fb8:	b480      	push	{r7}
 8014fba:	b083      	sub	sp, #12
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	370c      	adds	r7, #12
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fce:	4770      	bx	lr

08014fd0 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8014fd0:	b480      	push	{r7}
 8014fd2:	b083      	sub	sp, #12
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	370c      	adds	r7, #12
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe6:	4770      	bx	lr

08014fe8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b086      	sub	sp, #24
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	607a      	str	r2, [r7, #4]
 8014ff4:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	009b      	lsls	r3, r3, #2
 8015002:	687a      	ldr	r2, [r7, #4]
 8015004:	4413      	add	r3, r2
 8015006:	681a      	ldr	r2, [r3, #0]
 8015008:	f107 0310 	add.w	r3, r7, #16
 801500c:	4611      	mov	r1, r2
 801500e:	4618      	mov	r0, r3
 8015010:	f7f7 fa3f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8015014:	f107 0310 	add.w	r3, r7, #16
 8015018:	4618      	mov	r0, r3
 801501a:	f7f7 fdd1 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 801501e:	4603      	mov	r3, r0
 8015020:	2b02      	cmp	r3, #2
 8015022:	bf8c      	ite	hi
 8015024:	2301      	movhi	r3, #1
 8015026:	2300      	movls	r3, #0
 8015028:	b2db      	uxtb	r3, r3
 801502a:	2b00      	cmp	r3, #0
 801502c:	d00e      	beq.n	801504c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	687a      	ldr	r2, [r7, #4]
 8015036:	4413      	add	r3, r2
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	3302      	adds	r3, #2
 801503c:	4618      	mov	r0, r3
 801503e:	f7f7 f824 	bl	800c08a <_ZN12SimpleString4AtoIEPKc>
 8015042:	4603      	mov	r3, r0
 8015044:	461a      	mov	r2, r3
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	61da      	str	r2, [r3, #28]
 801504a:	e01c      	b.n	8015086 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	3301      	adds	r3, #1
 8015052:	68ba      	ldr	r2, [r7, #8]
 8015054:	429a      	cmp	r2, r3
 8015056:	dd16      	ble.n	8015086 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8015058:	683b      	ldr	r3, [r7, #0]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	3301      	adds	r3, #1
 801505e:	009b      	lsls	r3, r3, #2
 8015060:	687a      	ldr	r2, [r7, #4]
 8015062:	4413      	add	r3, r2
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	4618      	mov	r0, r3
 8015068:	f7f7 f80f 	bl	800c08a <_ZN12SimpleString4AtoIEPKc>
 801506c:	4603      	mov	r3, r0
 801506e:	461a      	mov	r2, r3
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	69db      	ldr	r3, [r3, #28]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d004      	beq.n	8015086 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	1c5a      	adds	r2, r3, #1
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	69db      	ldr	r3, [r3, #28]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d102      	bne.n	8015094 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	2202      	movs	r2, #2
 8015092:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8015094:	f107 0310 	add.w	r3, r7, #16
 8015098:	4618      	mov	r0, r3
 801509a:	f7f7 fdb2 	bl	800cc02 <_ZN12SimpleStringD1Ev>

}
 801509e:	bf00      	nop
 80150a0:	3718      	adds	r7, #24
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
	...

080150a8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 80150a8:	b590      	push	{r4, r7, lr}
 80150aa:	b089      	sub	sp, #36	; 0x24
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	60f8      	str	r0, [r7, #12]
 80150b0:	60b9      	str	r1, [r7, #8]
 80150b2:	607a      	str	r2, [r7, #4]
 80150b4:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	2201      	movs	r2, #1
 80150ba:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 80150bc:	4b34      	ldr	r3, [pc, #208]	; (8015190 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	4798      	blx	r3
 80150c2:	4603      	mov	r3, r0
 80150c4:	461a      	mov	r2, r3
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	6a1b      	ldr	r3, [r3, #32]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d104      	bne.n	80150dc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	6a1b      	ldr	r3, [r3, #32]
 80150d6:	1c5a      	adds	r2, r3, #1
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 80150dc:	683b      	ldr	r3, [r7, #0]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	009b      	lsls	r3, r3, #2
 80150e2:	687a      	ldr	r2, [r7, #4]
 80150e4:	4413      	add	r3, r2
 80150e6:	681a      	ldr	r2, [r3, #0]
 80150e8:	f107 0314 	add.w	r3, r7, #20
 80150ec:	4611      	mov	r1, r2
 80150ee:	4618      	mov	r0, r3
 80150f0:	f7f7 f9cf 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 80150f4:	f107 0314 	add.w	r3, r7, #20
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7f7 fd61 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b02      	cmp	r3, #2
 8015102:	bf8c      	ite	hi
 8015104:	2301      	movhi	r3, #1
 8015106:	2300      	movls	r3, #0
 8015108:	b2db      	uxtb	r3, r3
 801510a:	2b00      	cmp	r3, #0
 801510c:	d010      	beq.n	8015130 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	2201      	movs	r2, #1
 8015112:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	009b      	lsls	r3, r3, #2
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	4413      	add	r3, r2
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	3302      	adds	r3, #2
 8015122:	4618      	mov	r0, r3
 8015124:	f7f6 ff78 	bl	800c018 <_ZN12SimpleString4AtoUEPKc>
 8015128:	4602      	mov	r2, r0
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	621a      	str	r2, [r3, #32]
 801512e:	e01e      	b.n	801516e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	3301      	adds	r3, #1
 8015136:	68ba      	ldr	r2, [r7, #8]
 8015138:	429a      	cmp	r2, r3
 801513a:	dd18      	ble.n	801516e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 801513c:	683b      	ldr	r3, [r7, #0]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	3301      	adds	r3, #1
 8015142:	009b      	lsls	r3, r3, #2
 8015144:	687a      	ldr	r2, [r7, #4]
 8015146:	4413      	add	r3, r2
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	4618      	mov	r0, r3
 801514c:	f7f6 ff64 	bl	800c018 <_ZN12SimpleString4AtoUEPKc>
 8015150:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8015152:	69fb      	ldr	r3, [r7, #28]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d00a      	beq.n	801516e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	2201      	movs	r2, #1
 801515c:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	69fa      	ldr	r2, [r7, #28]
 8015162:	621a      	str	r2, [r3, #32]
            i++;
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	1c5a      	adds	r2, r3, #1
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	6a1b      	ldr	r3, [r3, #32]
 8015172:	2b00      	cmp	r3, #0
 8015174:	bf14      	ite	ne
 8015176:	2301      	movne	r3, #1
 8015178:	2300      	moveq	r3, #0
 801517a:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 801517c:	f107 0314 	add.w	r3, r7, #20
 8015180:	4618      	mov	r0, r3
 8015182:	f7f7 fd3e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8015186:	4623      	mov	r3, r4
}
 8015188:	4618      	mov	r0, r3
 801518a:	3724      	adds	r7, #36	; 0x24
 801518c:	46bd      	mov	sp, r7
 801518e:	bd90      	pop	{r4, r7, pc}
 8015190:	200000a8 	.word	0x200000a8

08015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b088      	sub	sp, #32
 8015198:	af00      	add	r7, sp, #0
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	607a      	str	r2, [r7, #4]
 80151a0:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 80151a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80151a4:	f7f7 fd0c 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 80151a8:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 80151aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	683a      	ldr	r2, [r7, #0]
 80151b2:	4413      	add	r3, r2
 80151b4:	681a      	ldr	r2, [r3, #0]
 80151b6:	f107 0314 	add.w	r3, r7, #20
 80151ba:	4611      	mov	r1, r2
 80151bc:	4618      	mov	r0, r3
 80151be:	f7f7 f968 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 80151c2:	f107 0314 	add.w	r3, r7, #20
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7f7 fcfa 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 80151cc:	4602      	mov	r2, r0
 80151ce:	69fb      	ldr	r3, [r7, #28]
 80151d0:	4293      	cmp	r3, r2
 80151d2:	bf34      	ite	cc
 80151d4:	2301      	movcc	r3, #1
 80151d6:	2300      	movcs	r3, #0
 80151d8:	b2db      	uxtb	r3, r3
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d00c      	beq.n	80151f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 80151de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	009b      	lsls	r3, r3, #2
 80151e4:	683a      	ldr	r2, [r7, #0]
 80151e6:	4413      	add	r3, r2
 80151e8:	681a      	ldr	r2, [r3, #0]
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	4413      	add	r3, r2
 80151ee:	4619      	mov	r1, r3
 80151f0:	68f8      	ldr	r0, [r7, #12]
 80151f2:	f7f7 f94e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80151f6:	e019      	b.n	801522c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 80151f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	3301      	adds	r3, #1
 80151fe:	687a      	ldr	r2, [r7, #4]
 8015200:	429a      	cmp	r2, r3
 8015202:	dd0f      	ble.n	8015224 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8015204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	1c5a      	adds	r2, r3, #1
 801520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801520c:	601a      	str	r2, [r3, #0]
 801520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	009b      	lsls	r3, r3, #2
 8015214:	683a      	ldr	r2, [r7, #0]
 8015216:	4413      	add	r3, r2
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	4619      	mov	r1, r3
 801521c:	68f8      	ldr	r0, [r7, #12]
 801521e:	f7f7 f938 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8015222:	e003      	b.n	801522c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8015224:	4906      	ldr	r1, [pc, #24]	; (8015240 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8015226:	68f8      	ldr	r0, [r7, #12]
 8015228:	f7f7 f933 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 801522c:	f107 0314 	add.w	r3, r7, #20
 8015230:	4618      	mov	r0, r3
 8015232:	f7f7 fce6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 8015236:	68f8      	ldr	r0, [r7, #12]
 8015238:	3720      	adds	r7, #32
 801523a:	46bd      	mov	sp, r7
 801523c:	bd80      	pop	{r7, pc}
 801523e:	bf00      	nop
 8015240:	08024a88 	.word	0x08024a88

08015244 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8015244:	b5b0      	push	{r4, r5, r7, lr}
 8015246:	b08c      	sub	sp, #48	; 0x30
 8015248:	af02      	add	r7, sp, #8
 801524a:	60f8      	str	r0, [r7, #12]
 801524c:	60b9      	str	r1, [r7, #8]
 801524e:	607a      	str	r2, [r7, #4]
 8015250:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8015252:	f107 031c 	add.w	r3, r7, #28
 8015256:	491a      	ldr	r1, [pc, #104]	; (80152c0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8015258:	4618      	mov	r0, r3
 801525a:	f7f7 f91a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801525e:	f107 0014 	add.w	r0, r7, #20
 8015262:	f107 031c 	add.w	r3, r7, #28
 8015266:	9301      	str	r3, [sp, #4]
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	9300      	str	r3, [sp, #0]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	68ba      	ldr	r2, [r7, #8]
 8015270:	68f9      	ldr	r1, [r7, #12]
 8015272:	f7ff ff8f 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015276:	f107 0514 	add.w	r5, r7, #20
 801527a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801527e:	4911      	ldr	r1, [pc, #68]	; (80152c4 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8015280:	2010      	movs	r0, #16
 8015282:	f7f4 fd43 	bl	8009d0c <_ZnwjPKci>
 8015286:	4604      	mov	r4, r0
 8015288:	4629      	mov	r1, r5
 801528a:	4620      	mov	r0, r4
 801528c:	f009 ff3e 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 8015290:	627c      	str	r4, [r7, #36]	; 0x24
 8015292:	f107 0314 	add.w	r3, r7, #20
 8015296:	4618      	mov	r0, r3
 8015298:	f7f7 fcb3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801529c:	f107 031c 	add.w	r3, r7, #28
 80152a0:	4618      	mov	r0, r3
 80152a2:	f7f7 fcae 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152aa:	4619      	mov	r1, r3
 80152ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152ae:	f009 ff4d 	bl	801f14c <_ZN10TestFilter3addEPS_>
 80152b2:	4602      	mov	r2, r0
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80152b8:	bf00      	nop
 80152ba:	3728      	adds	r7, #40	; 0x28
 80152bc:	46bd      	mov	sp, r7
 80152be:	bdb0      	pop	{r4, r5, r7, pc}
 80152c0:	08024abc 	.word	0x08024abc
 80152c4:	08025450 	.word	0x08025450

080152c8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80152c8:	b5b0      	push	{r4, r5, r7, lr}
 80152ca:	b092      	sub	sp, #72	; 0x48
 80152cc:	af02      	add	r7, sp, #8
 80152ce:	60f8      	str	r0, [r7, #12]
 80152d0:	60b9      	str	r1, [r7, #8]
 80152d2:	607a      	str	r2, [r7, #4]
 80152d4:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80152d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80152da:	494e      	ldr	r1, [pc, #312]	; (8015414 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 80152dc:	4618      	mov	r0, r3
 80152de:	f7f7 f8d8 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80152e2:	f107 0020 	add.w	r0, r7, #32
 80152e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80152ea:	9301      	str	r3, [sp, #4]
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	9300      	str	r3, [sp, #0]
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	68ba      	ldr	r2, [r7, #8]
 80152f4:	68f9      	ldr	r1, [r7, #12]
 80152f6:	f7ff ff4d 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80152fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80152fe:	4618      	mov	r0, r3
 8015300:	f7f7 fc7f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8015304:	f107 0310 	add.w	r3, r7, #16
 8015308:	4618      	mov	r0, r3
 801530a:	f7f8 fb8f 	bl	800da2c <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 801530e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015312:	4941      	ldr	r1, [pc, #260]	; (8015418 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8015314:	4618      	mov	r0, r3
 8015316:	f7f7 f8bc 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801531a:	f107 0210 	add.w	r2, r7, #16
 801531e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015322:	f107 0320 	add.w	r3, r7, #32
 8015326:	4618      	mov	r0, r3
 8015328:	f7f7 fa1f 	bl	800c76a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 801532c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015330:	4618      	mov	r0, r3
 8015332:	f7f7 fc66 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8015336:	f107 0310 	add.w	r3, r7, #16
 801533a:	4618      	mov	r0, r3
 801533c:	f7f8 fc1b 	bl	800db76 <_ZNK22SimpleStringCollection4sizeEv>
 8015340:	4603      	mov	r3, r0
 8015342:	2b02      	cmp	r3, #2
 8015344:	bf14      	ite	ne
 8015346:	2301      	movne	r3, #1
 8015348:	2300      	moveq	r3, #0
 801534a:	b2db      	uxtb	r3, r3
 801534c:	2b00      	cmp	r3, #0
 801534e:	d001      	beq.n	8015354 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8015350:	2400      	movs	r4, #0
 8015352:	e04f      	b.n	80153f4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8015354:	f107 0310 	add.w	r3, r7, #16
 8015358:	2100      	movs	r1, #0
 801535a:	4618      	mov	r0, r3
 801535c:	f7f8 fc18 	bl	800db90 <_ZN22SimpleStringCollectionixEj>
 8015360:	4604      	mov	r4, r0
 8015362:	f107 0310 	add.w	r3, r7, #16
 8015366:	2100      	movs	r1, #0
 8015368:	4618      	mov	r0, r3
 801536a:	f7f8 fc11 	bl	800db90 <_ZN22SimpleStringCollectionixEj>
 801536e:	4603      	mov	r3, r0
 8015370:	4618      	mov	r0, r3
 8015372:	f7f7 fc25 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 8015376:	4603      	mov	r3, r0
 8015378:	3b01      	subs	r3, #1
 801537a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801537e:	2200      	movs	r2, #0
 8015380:	4621      	mov	r1, r4
 8015382:	f7f7 fd47 	bl	800ce14 <_ZNK12SimpleString9subStringEjj>
 8015386:	f107 0538 	add.w	r5, r7, #56	; 0x38
 801538a:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801538e:	4923      	ldr	r1, [pc, #140]	; (801541c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015390:	2010      	movs	r0, #16
 8015392:	f7f4 fcbb 	bl	8009d0c <_ZnwjPKci>
 8015396:	4604      	mov	r4, r0
 8015398:	4629      	mov	r1, r5
 801539a:	4620      	mov	r0, r4
 801539c:	f009 feb6 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153a4:	4619      	mov	r1, r3
 80153a6:	4620      	mov	r0, r4
 80153a8:	f009 fed0 	bl	801f14c <_ZN10TestFilter3addEPS_>
 80153ac:	4602      	mov	r2, r0
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	625a      	str	r2, [r3, #36]	; 0x24
 80153b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7f7 fc23 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 80153bc:	f107 0310 	add.w	r3, r7, #16
 80153c0:	2101      	movs	r1, #1
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7f8 fbe4 	bl	800db90 <_ZN22SimpleStringCollectionixEj>
 80153c8:	4605      	mov	r5, r0
 80153ca:	f240 121f 	movw	r2, #287	; 0x11f
 80153ce:	4913      	ldr	r1, [pc, #76]	; (801541c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80153d0:	2010      	movs	r0, #16
 80153d2:	f7f4 fc9b 	bl	8009d0c <_ZnwjPKci>
 80153d6:	4604      	mov	r4, r0
 80153d8:	4629      	mov	r1, r5
 80153da:	4620      	mov	r0, r4
 80153dc:	f009 fe96 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153e4:	4619      	mov	r1, r3
 80153e6:	4620      	mov	r0, r4
 80153e8:	f009 feb0 	bl	801f14c <_ZN10TestFilter3addEPS_>
 80153ec:	4602      	mov	r2, r0
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80153f2:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 80153f4:	f107 0310 	add.w	r3, r7, #16
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7f8 fb8b 	bl	800db14 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80153fe:	f107 0320 	add.w	r3, r7, #32
 8015402:	4618      	mov	r0, r3
 8015404:	f7f7 fbfd 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015408:	4623      	mov	r3, r4
}
 801540a:	4618      	mov	r0, r3
 801540c:	3740      	adds	r7, #64	; 0x40
 801540e:	46bd      	mov	sp, r7
 8015410:	bdb0      	pop	{r4, r5, r7, pc}
 8015412:	bf00      	nop
 8015414:	08024ac0 	.word	0x08024ac0
 8015418:	08025470 	.word	0x08025470
 801541c:	08025450 	.word	0x08025450

08015420 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8015420:	b5b0      	push	{r4, r5, r7, lr}
 8015422:	b08c      	sub	sp, #48	; 0x30
 8015424:	af02      	add	r7, sp, #8
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	607a      	str	r2, [r7, #4]
 801542c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 801542e:	f107 031c 	add.w	r3, r7, #28
 8015432:	491c      	ldr	r1, [pc, #112]	; (80154a4 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8015434:	4618      	mov	r0, r3
 8015436:	f7f7 f82c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801543a:	f107 0014 	add.w	r0, r7, #20
 801543e:	f107 031c 	add.w	r3, r7, #28
 8015442:	9301      	str	r3, [sp, #4]
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	9300      	str	r3, [sp, #0]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	68ba      	ldr	r2, [r7, #8]
 801544c:	68f9      	ldr	r1, [r7, #12]
 801544e:	f7ff fea1 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015452:	f107 0514 	add.w	r5, r7, #20
 8015456:	f240 1225 	movw	r2, #293	; 0x125
 801545a:	4913      	ldr	r1, [pc, #76]	; (80154a8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 801545c:	2010      	movs	r0, #16
 801545e:	f7f4 fc55 	bl	8009d0c <_ZnwjPKci>
 8015462:	4604      	mov	r4, r0
 8015464:	4629      	mov	r1, r5
 8015466:	4620      	mov	r0, r4
 8015468:	f009 fe50 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 801546c:	627c      	str	r4, [r7, #36]	; 0x24
 801546e:	f107 0314 	add.w	r3, r7, #20
 8015472:	4618      	mov	r0, r3
 8015474:	f7f7 fbc5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015478:	f107 031c 	add.w	r3, r7, #28
 801547c:	4618      	mov	r0, r3
 801547e:	f7f7 fbc0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8015482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015484:	f009 fe7d 	bl	801f182 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801548c:	4619      	mov	r1, r3
 801548e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015490:	f009 fe5c 	bl	801f14c <_ZN10TestFilter3addEPS_>
 8015494:	4602      	mov	r2, r0
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	625a      	str	r2, [r3, #36]	; 0x24
}
 801549a:	bf00      	nop
 801549c:	3728      	adds	r7, #40	; 0x28
 801549e:	46bd      	mov	sp, r7
 80154a0:	bdb0      	pop	{r4, r5, r7, pc}
 80154a2:	bf00      	nop
 80154a4:	08024ac4 	.word	0x08024ac4
 80154a8:	08025450 	.word	0x08025450

080154ac <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 80154ac:	b5b0      	push	{r4, r5, r7, lr}
 80154ae:	b08c      	sub	sp, #48	; 0x30
 80154b0:	af02      	add	r7, sp, #8
 80154b2:	60f8      	str	r0, [r7, #12]
 80154b4:	60b9      	str	r1, [r7, #8]
 80154b6:	607a      	str	r2, [r7, #4]
 80154b8:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 80154ba:	f107 031c 	add.w	r3, r7, #28
 80154be:	491c      	ldr	r1, [pc, #112]	; (8015530 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7f6 ffe6 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80154c6:	f107 0014 	add.w	r0, r7, #20
 80154ca:	f107 031c 	add.w	r3, r7, #28
 80154ce:	9301      	str	r3, [sp, #4]
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	9300      	str	r3, [sp, #0]
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	68ba      	ldr	r2, [r7, #8]
 80154d8:	68f9      	ldr	r1, [r7, #12]
 80154da:	f7ff fe5b 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80154de:	f107 0514 	add.w	r5, r7, #20
 80154e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80154e6:	4913      	ldr	r1, [pc, #76]	; (8015534 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 80154e8:	2010      	movs	r0, #16
 80154ea:	f7f4 fc0f 	bl	8009d0c <_ZnwjPKci>
 80154ee:	4604      	mov	r4, r0
 80154f0:	4629      	mov	r1, r5
 80154f2:	4620      	mov	r0, r4
 80154f4:	f009 fe0a 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 80154f8:	627c      	str	r4, [r7, #36]	; 0x24
 80154fa:	f107 0314 	add.w	r3, r7, #20
 80154fe:	4618      	mov	r0, r3
 8015500:	f7f7 fb7f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015504:	f107 031c 	add.w	r3, r7, #28
 8015508:	4618      	mov	r0, r3
 801550a:	f7f7 fb7a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 801550e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015510:	f009 fe44 	bl	801f19c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015518:	4619      	mov	r1, r3
 801551a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801551c:	f009 fe16 	bl	801f14c <_ZN10TestFilter3addEPS_>
 8015520:	4602      	mov	r2, r0
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015526:	bf00      	nop
 8015528:	3728      	adds	r7, #40	; 0x28
 801552a:	46bd      	mov	sp, r7
 801552c:	bdb0      	pop	{r4, r5, r7, pc}
 801552e:	bf00      	nop
 8015530:	08024ac8 	.word	0x08024ac8
 8015534:	08025450 	.word	0x08025450

08015538 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8015538:	b5b0      	push	{r4, r5, r7, lr}
 801553a:	b08c      	sub	sp, #48	; 0x30
 801553c:	af02      	add	r7, sp, #8
 801553e:	60f8      	str	r0, [r7, #12]
 8015540:	60b9      	str	r1, [r7, #8]
 8015542:	607a      	str	r2, [r7, #4]
 8015544:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8015546:	f107 031c 	add.w	r3, r7, #28
 801554a:	491d      	ldr	r1, [pc, #116]	; (80155c0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 801554c:	4618      	mov	r0, r3
 801554e:	f7f6 ffa0 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8015552:	f107 0014 	add.w	r0, r7, #20
 8015556:	f107 031c 	add.w	r3, r7, #28
 801555a:	9301      	str	r3, [sp, #4]
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	9300      	str	r3, [sp, #0]
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	68ba      	ldr	r2, [r7, #8]
 8015564:	68f9      	ldr	r1, [r7, #12]
 8015566:	f7ff fe15 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801556a:	f107 0514 	add.w	r5, r7, #20
 801556e:	f240 1233 	movw	r2, #307	; 0x133
 8015572:	4914      	ldr	r1, [pc, #80]	; (80155c4 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8015574:	2010      	movs	r0, #16
 8015576:	f7f4 fbc9 	bl	8009d0c <_ZnwjPKci>
 801557a:	4604      	mov	r4, r0
 801557c:	4629      	mov	r1, r5
 801557e:	4620      	mov	r0, r4
 8015580:	f009 fdc4 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 8015584:	627c      	str	r4, [r7, #36]	; 0x24
 8015586:	f107 0314 	add.w	r3, r7, #20
 801558a:	4618      	mov	r0, r3
 801558c:	f7f7 fb39 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015590:	f107 031c 	add.w	r3, r7, #28
 8015594:	4618      	mov	r0, r3
 8015596:	f7f7 fb34 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801559a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801559c:	f009 fdf1 	bl	801f182 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 80155a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155a2:	f009 fdfb 	bl	801f19c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155aa:	4619      	mov	r1, r3
 80155ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155ae:	f009 fdcd 	bl	801f14c <_ZN10TestFilter3addEPS_>
 80155b2:	4602      	mov	r2, r0
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80155b8:	bf00      	nop
 80155ba:	3728      	adds	r7, #40	; 0x28
 80155bc:	46bd      	mov	sp, r7
 80155be:	bdb0      	pop	{r4, r5, r7, pc}
 80155c0:	08024acc 	.word	0x08024acc
 80155c4:	08025450 	.word	0x08025450

080155c8 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80155c8:	b5b0      	push	{r4, r5, r7, lr}
 80155ca:	b08c      	sub	sp, #48	; 0x30
 80155cc:	af02      	add	r7, sp, #8
 80155ce:	60f8      	str	r0, [r7, #12]
 80155d0:	60b9      	str	r1, [r7, #8]
 80155d2:	607a      	str	r2, [r7, #4]
 80155d4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80155d6:	f107 031c 	add.w	r3, r7, #28
 80155da:	491a      	ldr	r1, [pc, #104]	; (8015644 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80155dc:	4618      	mov	r0, r3
 80155de:	f7f6 ff58 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80155e2:	f107 0014 	add.w	r0, r7, #20
 80155e6:	f107 031c 	add.w	r3, r7, #28
 80155ea:	9301      	str	r3, [sp, #4]
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	9300      	str	r3, [sp, #0]
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	68ba      	ldr	r2, [r7, #8]
 80155f4:	68f9      	ldr	r1, [r7, #12]
 80155f6:	f7ff fdcd 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80155fa:	f107 0514 	add.w	r5, r7, #20
 80155fe:	f240 123b 	movw	r2, #315	; 0x13b
 8015602:	4911      	ldr	r1, [pc, #68]	; (8015648 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8015604:	2010      	movs	r0, #16
 8015606:	f7f4 fb81 	bl	8009d0c <_ZnwjPKci>
 801560a:	4604      	mov	r4, r0
 801560c:	4629      	mov	r1, r5
 801560e:	4620      	mov	r0, r4
 8015610:	f009 fd7c 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 8015614:	627c      	str	r4, [r7, #36]	; 0x24
 8015616:	f107 0314 	add.w	r3, r7, #20
 801561a:	4618      	mov	r0, r3
 801561c:	f7f7 faf1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015620:	f107 031c 	add.w	r3, r7, #28
 8015624:	4618      	mov	r0, r3
 8015626:	f7f7 faec 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801562e:	4619      	mov	r1, r3
 8015630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015632:	f009 fd8b 	bl	801f14c <_ZN10TestFilter3addEPS_>
 8015636:	4602      	mov	r2, r0
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801563c:	bf00      	nop
 801563e:	3728      	adds	r7, #40	; 0x28
 8015640:	46bd      	mov	sp, r7
 8015642:	bdb0      	pop	{r4, r5, r7, pc}
 8015644:	08024ad4 	.word	0x08024ad4
 8015648:	08025450 	.word	0x08025450

0801564c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 801564c:	b5b0      	push	{r4, r5, r7, lr}
 801564e:	b08c      	sub	sp, #48	; 0x30
 8015650:	af02      	add	r7, sp, #8
 8015652:	60f8      	str	r0, [r7, #12]
 8015654:	60b9      	str	r1, [r7, #8]
 8015656:	607a      	str	r2, [r7, #4]
 8015658:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 801565a:	f107 031c 	add.w	r3, r7, #28
 801565e:	491c      	ldr	r1, [pc, #112]	; (80156d0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8015660:	4618      	mov	r0, r3
 8015662:	f7f6 ff16 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8015666:	f107 0014 	add.w	r0, r7, #20
 801566a:	f107 031c 	add.w	r3, r7, #28
 801566e:	9301      	str	r3, [sp, #4]
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	9300      	str	r3, [sp, #0]
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	68ba      	ldr	r2, [r7, #8]
 8015678:	68f9      	ldr	r1, [r7, #12]
 801567a:	f7ff fd8b 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801567e:	f107 0514 	add.w	r5, r7, #20
 8015682:	f240 1241 	movw	r2, #321	; 0x141
 8015686:	4913      	ldr	r1, [pc, #76]	; (80156d4 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8015688:	2010      	movs	r0, #16
 801568a:	f7f4 fb3f 	bl	8009d0c <_ZnwjPKci>
 801568e:	4604      	mov	r4, r0
 8015690:	4629      	mov	r1, r5
 8015692:	4620      	mov	r0, r4
 8015694:	f009 fd3a 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 8015698:	627c      	str	r4, [r7, #36]	; 0x24
 801569a:	f107 0314 	add.w	r3, r7, #20
 801569e:	4618      	mov	r0, r3
 80156a0:	f7f7 faaf 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80156a4:	f107 031c 	add.w	r3, r7, #28
 80156a8:	4618      	mov	r0, r3
 80156aa:	f7f7 faaa 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 80156ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156b0:	f009 fd67 	bl	801f182 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156b8:	4619      	mov	r1, r3
 80156ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156bc:	f009 fd46 	bl	801f14c <_ZN10TestFilter3addEPS_>
 80156c0:	4602      	mov	r2, r0
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80156c6:	bf00      	nop
 80156c8:	3728      	adds	r7, #40	; 0x28
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bdb0      	pop	{r4, r5, r7, pc}
 80156ce:	bf00      	nop
 80156d0:	08024ad8 	.word	0x08024ad8
 80156d4:	08025450 	.word	0x08025450

080156d8 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80156d8:	b5b0      	push	{r4, r5, r7, lr}
 80156da:	b08c      	sub	sp, #48	; 0x30
 80156dc:	af02      	add	r7, sp, #8
 80156de:	60f8      	str	r0, [r7, #12]
 80156e0:	60b9      	str	r1, [r7, #8]
 80156e2:	607a      	str	r2, [r7, #4]
 80156e4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80156e6:	f107 031c 	add.w	r3, r7, #28
 80156ea:	491c      	ldr	r1, [pc, #112]	; (801575c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7f6 fed0 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80156f2:	f107 0014 	add.w	r0, r7, #20
 80156f6:	f107 031c 	add.w	r3, r7, #28
 80156fa:	9301      	str	r3, [sp, #4]
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	9300      	str	r3, [sp, #0]
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	68ba      	ldr	r2, [r7, #8]
 8015704:	68f9      	ldr	r1, [r7, #12]
 8015706:	f7ff fd45 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801570a:	f107 0514 	add.w	r5, r7, #20
 801570e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015712:	4913      	ldr	r1, [pc, #76]	; (8015760 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8015714:	2010      	movs	r0, #16
 8015716:	f7f4 faf9 	bl	8009d0c <_ZnwjPKci>
 801571a:	4604      	mov	r4, r0
 801571c:	4629      	mov	r1, r5
 801571e:	4620      	mov	r0, r4
 8015720:	f009 fcf4 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 8015724:	627c      	str	r4, [r7, #36]	; 0x24
 8015726:	f107 0314 	add.w	r3, r7, #20
 801572a:	4618      	mov	r0, r3
 801572c:	f7f7 fa69 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015730:	f107 031c 	add.w	r3, r7, #28
 8015734:	4618      	mov	r0, r3
 8015736:	f7f7 fa64 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 801573a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801573c:	f009 fd2e 	bl	801f19c <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015744:	4619      	mov	r1, r3
 8015746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015748:	f009 fd00 	bl	801f14c <_ZN10TestFilter3addEPS_>
 801574c:	4602      	mov	r2, r0
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015752:	bf00      	nop
 8015754:	3728      	adds	r7, #40	; 0x28
 8015756:	46bd      	mov	sp, r7
 8015758:	bdb0      	pop	{r4, r5, r7, pc}
 801575a:	bf00      	nop
 801575c:	08024adc 	.word	0x08024adc
 8015760:	08025450 	.word	0x08025450

08015764 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8015764:	b5b0      	push	{r4, r5, r7, lr}
 8015766:	b08c      	sub	sp, #48	; 0x30
 8015768:	af02      	add	r7, sp, #8
 801576a:	60f8      	str	r0, [r7, #12]
 801576c:	60b9      	str	r1, [r7, #8]
 801576e:	607a      	str	r2, [r7, #4]
 8015770:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8015772:	f107 031c 	add.w	r3, r7, #28
 8015776:	491d      	ldr	r1, [pc, #116]	; (80157ec <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8015778:	4618      	mov	r0, r3
 801577a:	f7f6 fe8a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801577e:	f107 0014 	add.w	r0, r7, #20
 8015782:	f107 031c 	add.w	r3, r7, #28
 8015786:	9301      	str	r3, [sp, #4]
 8015788:	683b      	ldr	r3, [r7, #0]
 801578a:	9300      	str	r3, [sp, #0]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	68ba      	ldr	r2, [r7, #8]
 8015790:	68f9      	ldr	r1, [r7, #12]
 8015792:	f7ff fcff 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015796:	f107 0514 	add.w	r5, r7, #20
 801579a:	f240 124f 	movw	r2, #335	; 0x14f
 801579e:	4914      	ldr	r1, [pc, #80]	; (80157f0 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 80157a0:	2010      	movs	r0, #16
 80157a2:	f7f4 fab3 	bl	8009d0c <_ZnwjPKci>
 80157a6:	4604      	mov	r4, r0
 80157a8:	4629      	mov	r1, r5
 80157aa:	4620      	mov	r0, r4
 80157ac:	f009 fcae 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 80157b0:	627c      	str	r4, [r7, #36]	; 0x24
 80157b2:	f107 0314 	add.w	r3, r7, #20
 80157b6:	4618      	mov	r0, r3
 80157b8:	f7f7 fa23 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80157bc:	f107 031c 	add.w	r3, r7, #28
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7f7 fa1e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80157c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157c8:	f009 fce8 	bl	801f19c <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80157cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157ce:	f009 fcd8 	bl	801f182 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157d6:	4619      	mov	r1, r3
 80157d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157da:	f009 fcb7 	bl	801f14c <_ZN10TestFilter3addEPS_>
 80157de:	4602      	mov	r2, r0
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80157e4:	bf00      	nop
 80157e6:	3728      	adds	r7, #40	; 0x28
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bdb0      	pop	{r4, r5, r7, pc}
 80157ec:	08024ae0 	.word	0x08024ae0
 80157f0:	08025450 	.word	0x08025450

080157f4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80157f4:	b5b0      	push	{r4, r5, r7, lr}
 80157f6:	b092      	sub	sp, #72	; 0x48
 80157f8:	af02      	add	r7, sp, #8
 80157fa:	60f8      	str	r0, [r7, #12]
 80157fc:	60b9      	str	r1, [r7, #8]
 80157fe:	607a      	str	r2, [r7, #4]
 8015800:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8015802:	f107 0320 	add.w	r3, r7, #32
 8015806:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015808:	4618      	mov	r0, r3
 801580a:	f7f6 fe42 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801580e:	f107 0018 	add.w	r0, r7, #24
 8015812:	f107 0320 	add.w	r3, r7, #32
 8015816:	9301      	str	r3, [sp, #4]
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	9300      	str	r3, [sp, #0]
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	68ba      	ldr	r2, [r7, #8]
 8015820:	68f9      	ldr	r1, [r7, #12]
 8015822:	f7ff fcb7 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015826:	f107 0320 	add.w	r3, r7, #32
 801582a:	4618      	mov	r0, r3
 801582c:	f7f7 f9e9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8015830:	f107 0010 	add.w	r0, r7, #16
 8015834:	f107 0118 	add.w	r1, r7, #24
 8015838:	2329      	movs	r3, #41	; 0x29
 801583a:	222c      	movs	r2, #44	; 0x2c
 801583c:	f7f7 fb92 	bl	800cf64 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8015840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015844:	f107 0110 	add.w	r1, r7, #16
 8015848:	2202      	movs	r2, #2
 801584a:	4618      	mov	r0, r3
 801584c:	f7f7 fb2c 	bl	800cea8 <_ZNK12SimpleString9subStringEj>
 8015850:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015854:	f107 0310 	add.w	r3, r7, #16
 8015858:	4611      	mov	r1, r2
 801585a:	4618      	mov	r0, r3
 801585c:	f7f6 fe85 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 8015860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015864:	4618      	mov	r0, r3
 8015866:	f7f7 f9cc 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 801586a:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 801586e:	492a      	ldr	r1, [pc, #168]	; (8015918 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8015870:	2010      	movs	r0, #16
 8015872:	f7f4 fa4b 	bl	8009d0c <_ZnwjPKci>
 8015876:	4604      	mov	r4, r0
 8015878:	f107 0310 	add.w	r3, r7, #16
 801587c:	4619      	mov	r1, r3
 801587e:	4620      	mov	r0, r4
 8015880:	f009 fc44 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 8015884:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8015886:	f107 0318 	add.w	r3, r7, #24
 801588a:	2100      	movs	r1, #0
 801588c:	4618      	mov	r0, r3
 801588e:	f7f7 fb1c 	bl	800ceca <_ZNK12SimpleString2atEj>
 8015892:	4603      	mov	r3, r0
 8015894:	461a      	mov	r2, r3
 8015896:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801589a:	f107 0118 	add.w	r1, r7, #24
 801589e:	232c      	movs	r3, #44	; 0x2c
 80158a0:	f7f7 fb60 	bl	800cf64 <_ZNK12SimpleString17subStringFromTillEcc>
 80158a4:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80158a8:	f240 125b 	movw	r2, #347	; 0x15b
 80158ac:	491a      	ldr	r1, [pc, #104]	; (8015918 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80158ae:	2010      	movs	r0, #16
 80158b0:	f7f4 fa2c 	bl	8009d0c <_ZnwjPKci>
 80158b4:	4604      	mov	r4, r0
 80158b6:	4629      	mov	r1, r5
 80158b8:	4620      	mov	r0, r4
 80158ba:	f009 fc27 	bl	801f10c <_ZN10TestFilterC1ERK12SimpleString>
 80158be:	63bc      	str	r4, [r7, #56]	; 0x38
 80158c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7f7 f99c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80158ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80158cc:	f009 fc59 	bl	801f182 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80158d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80158d2:	f009 fc56 	bl	801f182 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158da:	4619      	mov	r1, r3
 80158dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80158de:	f009 fc35 	bl	801f14c <_ZN10TestFilter3addEPS_>
 80158e2:	4602      	mov	r2, r0
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158ec:	4619      	mov	r1, r3
 80158ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80158f0:	f009 fc2c 	bl	801f14c <_ZN10TestFilter3addEPS_>
 80158f4:	4602      	mov	r2, r0
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80158fa:	f107 0310 	add.w	r3, r7, #16
 80158fe:	4618      	mov	r0, r3
 8015900:	f7f7 f97f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8015904:	f107 0318 	add.w	r3, r7, #24
 8015908:	4618      	mov	r0, r3
 801590a:	f7f7 f97a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801590e:	bf00      	nop
 8015910:	3740      	adds	r7, #64	; 0x40
 8015912:	46bd      	mov	sp, r7
 8015914:	bdb0      	pop	{r4, r5, r7, pc}
 8015916:	bf00      	nop
 8015918:	08025450 	.word	0x08025450

0801591c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 801591c:	b590      	push	{r4, r7, lr}
 801591e:	b08b      	sub	sp, #44	; 0x2c
 8015920:	af02      	add	r7, sp, #8
 8015922:	60f8      	str	r0, [r7, #12]
 8015924:	60b9      	str	r1, [r7, #8]
 8015926:	607a      	str	r2, [r7, #4]
 8015928:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801592a:	f107 0318 	add.w	r3, r7, #24
 801592e:	491b      	ldr	r1, [pc, #108]	; (801599c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8015930:	4618      	mov	r0, r3
 8015932:	f7f6 fdae 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8015936:	f107 0010 	add.w	r0, r7, #16
 801593a:	f107 0318 	add.w	r3, r7, #24
 801593e:	9301      	str	r3, [sp, #4]
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	9300      	str	r3, [sp, #0]
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	68ba      	ldr	r2, [r7, #8]
 8015948:	68f9      	ldr	r1, [r7, #12]
 801594a:	f7ff fc23 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801594e:	f107 0318 	add.w	r3, r7, #24
 8015952:	4618      	mov	r0, r3
 8015954:	f7f7 f955 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8015958:	f107 0310 	add.w	r3, r7, #16
 801595c:	4618      	mov	r0, r3
 801595e:	f7f7 f92f 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 8015962:	4603      	mov	r3, r0
 8015964:	2b00      	cmp	r3, #0
 8015966:	bf0c      	ite	eq
 8015968:	2301      	moveq	r3, #1
 801596a:	2300      	movne	r3, #0
 801596c:	b2db      	uxtb	r3, r3
 801596e:	2b00      	cmp	r3, #0
 8015970:	d001      	beq.n	8015976 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8015972:	2400      	movs	r4, #0
 8015974:	e008      	b.n	8015988 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	3330      	adds	r3, #48	; 0x30
 801597a:	f107 0210 	add.w	r2, r7, #16
 801597e:	4611      	mov	r1, r2
 8015980:	4618      	mov	r0, r3
 8015982:	f7f6 fdf2 	bl	800c56a <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8015986:	2401      	movs	r4, #1
 8015988:	f107 0310 	add.w	r3, r7, #16
 801598c:	4618      	mov	r0, r3
 801598e:	f7f7 f938 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015992:	2c01      	cmp	r4, #1
}
 8015994:	3724      	adds	r7, #36	; 0x24
 8015996:	46bd      	mov	sp, r7
 8015998:	bd90      	pop	{r4, r7, pc}
 801599a:	bf00      	nop
 801599c:	08024b08 	.word	0x08024b08

080159a0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 80159a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159a2:	b093      	sub	sp, #76	; 0x4c
 80159a4:	af02      	add	r7, sp, #8
 80159a6:	60f8      	str	r0, [r7, #12]
 80159a8:	60b9      	str	r1, [r7, #8]
 80159aa:	607a      	str	r2, [r7, #4]
 80159ac:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80159ae:	f107 0318 	add.w	r3, r7, #24
 80159b2:	4953      	ldr	r1, [pc, #332]	; (8015b00 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 80159b4:	4618      	mov	r0, r3
 80159b6:	f7f6 fd6c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80159ba:	f107 0010 	add.w	r0, r7, #16
 80159be:	f107 0318 	add.w	r3, r7, #24
 80159c2:	9301      	str	r3, [sp, #4]
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	9300      	str	r3, [sp, #0]
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	68ba      	ldr	r2, [r7, #8]
 80159cc:	68f9      	ldr	r1, [r7, #12]
 80159ce:	f7ff fbe1 	bl	8015194 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80159d2:	f107 0318 	add.w	r3, r7, #24
 80159d6:	4618      	mov	r0, r3
 80159d8:	f7f7 f913 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 80159dc:	f107 0310 	add.w	r3, r7, #16
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7f7 f8ed 	bl	800cbc0 <_ZNK12SimpleString4sizeEv>
 80159e6:	4603      	mov	r3, r0
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	bf0c      	ite	eq
 80159ec:	2301      	moveq	r3, #1
 80159ee:	2300      	movne	r3, #0
 80159f0:	b2db      	uxtb	r3, r3
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d001      	beq.n	80159fa <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 80159f6:	2400      	movs	r4, #0
 80159f8:	e078      	b.n	8015aec <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 80159fa:	2500      	movs	r5, #0
 80159fc:	f107 0320 	add.w	r3, r7, #32
 8015a00:	4940      	ldr	r1, [pc, #256]	; (8015b04 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f6 fd45 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8015a08:	2601      	movs	r6, #1
 8015a0a:	f107 0220 	add.w	r2, r7, #32
 8015a0e:	f107 0310 	add.w	r3, r7, #16
 8015a12:	4611      	mov	r1, r2
 8015a14:	4618      	mov	r0, r3
 8015a16:	f7f7 f900 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d111      	bne.n	8015a44 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8015a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a24:	4938      	ldr	r1, [pc, #224]	; (8015b08 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7f6 fd33 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8015a2c:	2501      	movs	r5, #1
 8015a2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015a32:	f107 0310 	add.w	r3, r7, #16
 8015a36:	4611      	mov	r1, r2
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7f7 f8ee 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d001      	beq.n	8015a48 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8015a44:	2401      	movs	r4, #1
 8015a46:	e000      	b.n	8015a4a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8015a48:	2400      	movs	r4, #0
 8015a4a:	2d00      	cmp	r5, #0
 8015a4c:	d004      	beq.n	8015a58 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8015a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a52:	4618      	mov	r0, r3
 8015a54:	f7f7 f8d5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015a58:	2e00      	cmp	r6, #0
 8015a5a:	d004      	beq.n	8015a66 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8015a5c:	f107 0320 	add.w	r3, r7, #32
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7f7 f8ce 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015a66:	2c00      	cmp	r4, #0
 8015a68:	d005      	beq.n	8015a76 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015a72:	2401      	movs	r4, #1
 8015a74:	e03a      	b.n	8015aec <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8015a76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a7a:	4924      	ldr	r1, [pc, #144]	; (8015b0c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f7f6 fd08 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8015a82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015a86:	f107 0310 	add.w	r3, r7, #16
 8015a8a:	4611      	mov	r1, r2
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7f7 f8c4 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8015a92:	4603      	mov	r3, r0
 8015a94:	461c      	mov	r4, r3
 8015a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7f7 f8b1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015aa0:	2c00      	cmp	r4, #0
 8015aa2:	d005      	beq.n	8015ab0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	2201      	movs	r2, #1
 8015aa8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015aac:	2401      	movs	r4, #1
 8015aae:	e01d      	b.n	8015aec <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8015ab0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015ab4:	4916      	ldr	r1, [pc, #88]	; (8015b10 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f7f6 fceb 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8015abc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8015ac0:	f107 0310 	add.w	r3, r7, #16
 8015ac4:	4611      	mov	r1, r2
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f7f7 f8a7 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8015acc:	4603      	mov	r3, r0
 8015ace:	461c      	mov	r4, r3
 8015ad0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7f7 f894 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015ada:	2c00      	cmp	r4, #0
 8015adc:	d005      	beq.n	8015aea <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	2202      	movs	r2, #2
 8015ae2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015ae6:	2401      	movs	r4, #1
 8015ae8:	e000      	b.n	8015aec <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8015aea:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8015aec:	f107 0310 	add.w	r3, r7, #16
 8015af0:	4618      	mov	r0, r3
 8015af2:	f7f7 f886 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8015af6:	4623      	mov	r3, r4
}
 8015af8:	4618      	mov	r0, r3
 8015afa:	3744      	adds	r7, #68	; 0x44
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b00:	08024b04 	.word	0x08024b04
 8015b04:	08025474 	.word	0x08025474
 8015b08:	0802547c 	.word	0x0802547c
 8015b0c:	08025484 	.word	0x08025484
 8015b10:	0802548c 	.word	0x0802548c

08015b14 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8015b14:	b480      	push	{r7}
 8015b16:	b083      	sub	sp, #12
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015b22:	2b01      	cmp	r3, #1
 8015b24:	bf0c      	ite	eq
 8015b26:	2301      	moveq	r3, #1
 8015b28:	2300      	movne	r3, #0
 8015b2a:	b2db      	uxtb	r3, r3
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	370c      	adds	r7, #12
 8015b30:	46bd      	mov	sp, r7
 8015b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b36:	4770      	bx	lr

08015b38 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8015b38:	b480      	push	{r7}
 8015b3a:	b083      	sub	sp, #12
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015b46:	2b02      	cmp	r3, #2
 8015b48:	bf0c      	ite	eq
 8015b4a:	2301      	moveq	r3, #1
 8015b4c:	2300      	movne	r3, #0
 8015b4e:	b2db      	uxtb	r3, r3
}
 8015b50:	4618      	mov	r0, r3
 8015b52:	370c      	adds	r7, #12
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr

08015b5c <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8015b5c:	b480      	push	{r7}
 8015b5e:	b083      	sub	sp, #12
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
    return packageName_;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	3330      	adds	r3, #48	; 0x30
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	370c      	adds	r7, #12
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b72:	4770      	bx	lr

08015b74 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8015b74:	b480      	push	{r7}
 8015b76:	b083      	sub	sp, #12
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2200      	movs	r2, #0
 8015b80:	601a      	str	r2, [r3, #0]
    {}
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	4618      	mov	r0, r3
 8015b86:	370c      	adds	r7, #12
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8e:	4770      	bx	lr

08015b90 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8015b90:	b480      	push	{r7}
 8015b92:	b083      	sub	sp, #12
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	601a      	str	r2, [r3, #0]
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ba8:	3304      	adds	r3, #4
 8015baa:	f640 72ff 	movw	r2, #4095	; 0xfff
 8015bae:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	701a      	strb	r2, [r3, #0]
}
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	4618      	mov	r0, r3
 8015bba:	370c      	adds	r7, #12
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc2:	4770      	bx	lr

08015bc4 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b083      	sub	sp, #12
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	2200      	movs	r2, #0
 8015bda:	701a      	strb	r2, [r3, #0]
}
 8015bdc:	bf00      	nop
 8015bde:	370c      	adds	r7, #12
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr

08015be8 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8015be8:	b40e      	push	{r1, r2, r3}
 8015bea:	b590      	push	{r4, r7, lr}
 8015bec:	b086      	sub	sp, #24
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015bf8:	3304      	adds	r3, #4
 8015bfa:	681a      	ldr	r2, [r3, #0]
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	1ad3      	subs	r3, r2, r3
 8015c06:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d032      	beq.n	8015c74 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8015c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015c12:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8015c14:	4b1b      	ldr	r3, [pc, #108]	; (8015c84 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8015c16:	681c      	ldr	r4, [r3, #0]
 8015c18:	687a      	ldr	r2, [r7, #4]
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	18d0      	adds	r0, r2, r3
 8015c24:	697b      	ldr	r3, [r7, #20]
 8015c26:	1c59      	adds	r1, r3, #1
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c2c:	47a0      	blx	r4
 8015c2e:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	dd09      	ble.n	8015c4a <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c3c:	681a      	ldr	r2, [r3, #0]
 8015c3e:	693b      	ldr	r3, [r7, #16]
 8015c40:	441a      	add	r2, r3
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c48:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c50:	681a      	ldr	r2, [r3, #0]
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c58:	3304      	adds	r3, #4
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	d90a      	bls.n	8015c76 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c66:	3304      	adds	r3, #4
 8015c68:	681a      	ldr	r2, [r3, #0]
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c70:	601a      	str	r2, [r3, #0]
 8015c72:	e000      	b.n	8015c76 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8015c74:	bf00      	nop
    va_end(arguments);
}
 8015c76:	3718      	adds	r7, #24
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8015c7e:	b003      	add	sp, #12
 8015c80:	4770      	bx	lr
 8015c82:	bf00      	nop
 8015c84:	200000b0 	.word	0x200000b0

08015c88 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b08c      	sub	sp, #48	; 0x30
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8015c94:	68bb      	ldr	r3, [r7, #8]
 8015c96:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8015c98:	2310      	movs	r3, #16
 8015c9a:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8015ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d273      	bcs.n	8015d90 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8015ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015caa:	493b      	ldr	r1, [pc, #236]	; (8015d98 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	f7ff ff9b 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8015cb2:	687a      	ldr	r2, [r7, #4]
 8015cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cb6:	1ad3      	subs	r3, r2, r3
 8015cb8:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8015cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cbc:	2b10      	cmp	r3, #16
 8015cbe:	d901      	bls.n	8015cc4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8015cc0:	2310      	movs	r3, #16
 8015cc2:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8015cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc6:	f1c3 0310 	rsb	r3, r3, #16
 8015cca:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8015ccc:	2300      	movs	r3, #0
 8015cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8015cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	d215      	bcs.n	8015d04 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8015cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cdc:	4413      	add	r3, r2
 8015cde:	69fa      	ldr	r2, [r7, #28]
 8015ce0:	4413      	add	r3, r2
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	461a      	mov	r2, r3
 8015ce6:	492d      	ldr	r1, [pc, #180]	; (8015d9c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8015ce8:	68f8      	ldr	r0, [r7, #12]
 8015cea:	f7ff ff7d 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8015cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cf0:	2b07      	cmp	r3, #7
 8015cf2:	d103      	bne.n	8015cfc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8015cf4:	492a      	ldr	r1, [pc, #168]	; (8015da0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8015cf6:	68f8      	ldr	r0, [r7, #12]
 8015cf8:	f7ff ff76 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8015cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cfe:	3301      	adds	r3, #1
 8015d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d02:	e7e5      	b.n	8015cd0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8015d04:	2300      	movs	r3, #0
 8015d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d0a:	697b      	ldr	r3, [r7, #20]
 8015d0c:	429a      	cmp	r2, r3
 8015d0e:	d207      	bcs.n	8015d20 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8015d10:	4924      	ldr	r1, [pc, #144]	; (8015da4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8015d12:	68f8      	ldr	r0, [r7, #12]
 8015d14:	f7ff ff68 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8015d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d1e:	e7f3      	b.n	8015d08 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8015d20:	697b      	ldr	r3, [r7, #20]
 8015d22:	2b08      	cmp	r3, #8
 8015d24:	d903      	bls.n	8015d2e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8015d26:	491e      	ldr	r1, [pc, #120]	; (8015da0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	f7ff ff5d 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8015d2e:	491e      	ldr	r1, [pc, #120]	; (8015da8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8015d30:	68f8      	ldr	r0, [r7, #12]
 8015d32:	f7ff ff59 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8015d36:	2300      	movs	r3, #0
 8015d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d21d      	bcs.n	8015d7e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8015d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d46:	4413      	add	r3, r2
 8015d48:	69fa      	ldr	r2, [r7, #28]
 8015d4a:	4413      	add	r3, r2
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8015d52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d56:	2b1f      	cmp	r3, #31
 8015d58:	d903      	bls.n	8015d62 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8015d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d5e:	2b7e      	cmp	r3, #126	; 0x7e
 8015d60:	d902      	bls.n	8015d68 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8015d62:	232e      	movs	r3, #46	; 0x2e
 8015d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8015d68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d6c:	461a      	mov	r2, r3
 8015d6e:	490f      	ldr	r1, [pc, #60]	; (8015dac <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8015d70:	68f8      	ldr	r0, [r7, #12]
 8015d72:	f7ff ff39 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8015d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d78:	3301      	adds	r3, #1
 8015d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d7c:	e7dd      	b.n	8015d3a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8015d7e:	490c      	ldr	r1, [pc, #48]	; (8015db0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8015d80:	68f8      	ldr	r0, [r7, #12]
 8015d82:	f7ff ff31 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8015d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d8a:	4413      	add	r3, r2
 8015d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8015d8e:	e787      	b.n	8015ca0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8015d90:	bf00      	nop
 8015d92:	3730      	adds	r7, #48	; 0x30
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}
 8015d98:	080254a4 	.word	0x080254a4
 8015d9c:	080254b0 	.word	0x080254b0
 8015da0:	080254b8 	.word	0x080254b8
 8015da4:	080254bc 	.word	0x080254bc
 8015da8:	080254c0 	.word	0x080254c0
 8015dac:	080254c4 	.word	0x080254c4
 8015db0:	080254c8 	.word	0x080254c8

08015db4 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8015db4:	b480      	push	{r7}
 8015db6:	b083      	sub	sp, #12
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
    return buffer_;
 8015dbc:	687b      	ldr	r3, [r7, #4]
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	370c      	adds	r7, #12
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc8:	4770      	bx	lr

08015dca <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8015dca:	b480      	push	{r7}
 8015dcc:	b083      	sub	sp, #12
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	6078      	str	r0, [r7, #4]
 8015dd2:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015dda:	3304      	adds	r3, #4
 8015ddc:	683a      	ldr	r2, [r7, #0]
 8015dde:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015de6:	3304      	adds	r3, #4
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015dee:	d306      	bcc.n	8015dfe <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015df6:	3304      	adds	r3, #4
 8015df8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8015dfc:	601a      	str	r2, [r3, #0]
}
 8015dfe:	bf00      	nop
 8015e00:	370c      	adds	r7, #12
 8015e02:	46bd      	mov	sp, r7
 8015e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e08:	4770      	bx	lr

08015e0a <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8015e0a:	b480      	push	{r7}
 8015e0c:	b083      	sub	sp, #12
 8015e0e:	af00      	add	r7, sp, #0
 8015e10:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e18:	3304      	adds	r3, #4
 8015e1a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8015e1e:	601a      	str	r2, [r3, #0]
}
 8015e20:	bf00      	nop
 8015e22:	370c      	adds	r7, #12
 8015e24:	46bd      	mov	sp, r7
 8015e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2a:	4770      	bx	lr

08015e2c <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8015e2c:	b480      	push	{r7}
 8015e2e:	b083      	sub	sp, #12
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e3a:	681a      	ldr	r2, [r3, #0]
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e42:	3304      	adds	r3, #4
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	bf2c      	ite	cs
 8015e4a:	2301      	movcs	r3, #1
 8015e4c:	2300      	movcc	r3, #0
 8015e4e:	b2db      	uxtb	r3, r3
}
 8015e50:	4618      	mov	r0, r3
 8015e52:	370c      	adds	r7, #12
 8015e54:	46bd      	mov	sp, r7
 8015e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5a:	4770      	bx	lr

08015e5c <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b082      	sub	sp, #8
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2200      	movs	r2, #0
 8015e68:	601a      	str	r2, [r3, #0]
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	2200      	movs	r2, #0
 8015e6e:	711a      	strb	r2, [r3, #4]
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	3308      	adds	r3, #8
 8015e74:	4618      	mov	r0, r3
 8015e76:	f7ff fe8b 	bl	8015b90 <_ZN18SimpleStringBufferC1Ev>
{
}
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3708      	adds	r7, #8
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8015e84:	b5b0      	push	{r4, r5, r7, lr}
 8015e86:	b086      	sub	sp, #24
 8015e88:	af02      	add	r7, sp, #8
 8015e8a:	60f8      	str	r0, [r7, #12]
 8015e8c:	60b9      	str	r1, [r7, #8]
 8015e8e:	607a      	str	r2, [r7, #4]
 8015e90:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	f103 0408 	add.w	r4, r3, #8
 8015e98:	687d      	ldr	r5, [r7, #4]
 8015e9a:	6a3b      	ldr	r3, [r7, #32]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	3314      	adds	r3, #20
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	6a38      	ldr	r0, [r7, #32]
 8015ea4:	4798      	blx	r3
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	9301      	str	r3, [sp, #4]
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	9300      	str	r3, [sp, #0]
 8015eae:	462b      	mov	r3, r5
 8015eb0:	68ba      	ldr	r2, [r7, #8]
 8015eb2:	4904      	ldr	r1, [pc, #16]	; (8015ec4 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8015eb4:	4620      	mov	r0, r4
 8015eb6:	f7ff fe97 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015eba:	bf00      	nop
 8015ebc:	3710      	adds	r7, #16
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8015ec2:	bf00      	nop
 8015ec4:	080254cc 	.word	0x080254cc

08015ec8 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8015ec8:	b5b0      	push	{r4, r5, r7, lr}
 8015eca:	b086      	sub	sp, #24
 8015ecc:	af02      	add	r7, sp, #8
 8015ece:	60f8      	str	r0, [r7, #12]
 8015ed0:	60b9      	str	r1, [r7, #8]
 8015ed2:	607a      	str	r2, [r7, #4]
 8015ed4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	f103 0408 	add.w	r4, r3, #8
 8015edc:	687d      	ldr	r5, [r7, #4]
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	3318      	adds	r3, #24
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	6838      	ldr	r0, [r7, #0]
 8015ee8:	4798      	blx	r3
 8015eea:	4603      	mov	r3, r0
 8015eec:	9300      	str	r3, [sp, #0]
 8015eee:	462b      	mov	r3, r5
 8015ef0:	68ba      	ldr	r2, [r7, #8]
 8015ef2:	4904      	ldr	r1, [pc, #16]	; (8015f04 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	f7ff fe77 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015efa:	bf00      	nop
 8015efc:	3710      	adds	r7, #16
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bdb0      	pop	{r4, r5, r7, pc}
 8015f02:	bf00      	nop
 8015f04:	08025504 	.word	0x08025504

08015f08 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	3308      	adds	r3, #8
 8015f14:	4903      	ldr	r1, [pc, #12]	; (8015f24 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8015f16:	4618      	mov	r0, r3
 8015f18:	f7ff fe66 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015f1c:	bf00      	nop
 8015f1e:	3708      	adds	r7, #8
 8015f20:	46bd      	mov	sp, r7
 8015f22:	bd80      	pop	{r7, pc}
 8015f24:	08025534 	.word	0x08025534

08015f28 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b084      	sub	sp, #16
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2200      	movs	r2, #0
 8015f34:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	2200      	movs	r2, #0
 8015f3a:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8015f3c:	2367      	movs	r3, #103	; 0x67
 8015f3e:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	f203 1311 	addw	r3, r3, #273	; 0x111
 8015f46:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f103 0208 	add.w	r2, r3, #8
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8015f54:	4619      	mov	r1, r3
 8015f56:	4610      	mov	r0, r2
 8015f58:	f7ff ff37 	bl	8015dca <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8015f5c:	bf00      	nop
 8015f5e:	3710      	adds	r7, #16
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd80      	pop	{r7, pc}

08015f64 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8015f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f66:	b089      	sub	sp, #36	; 0x24
 8015f68:	af04      	add	r7, sp, #16
 8015f6a:	60f8      	str	r0, [r7, #12]
 8015f6c:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d102      	bne.n	8015f7c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8015f76:	68f8      	ldr	r0, [r7, #12]
 8015f78:	f000 f882 	bl	8016080 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	1c5a      	adds	r2, r3, #1
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	f103 0508 	add.w	r5, r3, #8
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015f96:	68bb      	ldr	r3, [r7, #8]
 8015f98:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8015f9a:	68bb      	ldr	r3, [r7, #8]
 8015f9c:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015f9e:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8015fa0:	68bb      	ldr	r3, [r7, #8]
 8015fa2:	695a      	ldr	r2, [r3, #20]
 8015fa4:	68bb      	ldr	r3, [r7, #8]
 8015fa6:	695b      	ldr	r3, [r3, #20]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	3314      	adds	r3, #20
 8015fac:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015fae:	4610      	mov	r0, r2
 8015fb0:	4798      	blx	r3
 8015fb2:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015fb8:	9303      	str	r3, [sp, #12]
 8015fba:	9202      	str	r2, [sp, #8]
 8015fbc:	683a      	ldr	r2, [r7, #0]
 8015fbe:	9201      	str	r2, [sp, #4]
 8015fc0:	9400      	str	r4, [sp, #0]
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	4632      	mov	r2, r6
 8015fc6:	4915      	ldr	r1, [pc, #84]	; (801601c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8015fc8:	4628      	mov	r0, r5
 8015fca:	f7ff fe0d 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	f103 0008 	add.w	r0, r3, #8
 8015fd4:	68bb      	ldr	r3, [r7, #8]
 8015fd6:	6899      	ldr	r1, [r3, #8]
 8015fd8:	68bb      	ldr	r3, [r7, #8]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	461a      	mov	r2, r3
 8015fde:	f7ff fe53 	bl	8015c88 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	695a      	ldr	r2, [r3, #20]
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	695b      	ldr	r3, [r3, #20]
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	3314      	adds	r3, #20
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	4610      	mov	r0, r2
 8015ff2:	4798      	blx	r3
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	490a      	ldr	r1, [pc, #40]	; (8016020 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f7f6 f887 	bl	800c10c <_ZN12SimpleString6StrCmpEPKcS1_>
 8015ffe:	4603      	mov	r3, r0
 8016000:	2b00      	cmp	r3, #0
 8016002:	bf0c      	ite	eq
 8016004:	2301      	moveq	r3, #1
 8016006:	2300      	movne	r3, #0
 8016008:	b2db      	uxtb	r3, r3
 801600a:	2b00      	cmp	r3, #0
 801600c:	d002      	beq.n	8016014 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	2201      	movs	r2, #1
 8016012:	711a      	strb	r2, [r3, #4]
}
 8016014:	bf00      	nop
 8016016:	3714      	adds	r7, #20
 8016018:	46bd      	mov	sp, r7
 801601a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801601c:	08025554 	.word	0x08025554
 8016020:	080255b4 	.word	0x080255b4

08016024 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b084      	sub	sp, #16
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d103      	bne.n	801603c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7ff ff67 	bl	8015f08 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 801603a:	e01e      	b.n	801607a <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	3308      	adds	r3, #8
 8016040:	4618      	mov	r0, r3
 8016042:	f7ff fef3 	bl	8015e2c <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8016046:	4603      	mov	r3, r0
 8016048:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	3308      	adds	r3, #8
 801604e:	4618      	mov	r0, r3
 8016050:	f7ff fedb 	bl	8015e0a <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8016054:	7bfb      	ldrb	r3, [r7, #15]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d002      	beq.n	8016060 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f000 f820 	bl	80160a0 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	4619      	mov	r1, r3
 8016066:	6878      	ldr	r0, [r7, #4]
 8016068:	f000 f82a 	bl	80160c0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	791b      	ldrb	r3, [r3, #4]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d002      	beq.n	801607a <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f000 f839 	bl	80160ec <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 801607a:	3710      	adds	r7, #16
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}

08016080 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b082      	sub	sp, #8
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	3308      	adds	r3, #8
 801608c:	4903      	ldr	r1, [pc, #12]	; (801609c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 801608e:	4618      	mov	r0, r3
 8016090:	f7ff fdaa 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016094:	bf00      	nop
 8016096:	3708      	adds	r7, #8
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}
 801609c:	080255bc 	.word	0x080255bc

080160a0 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	3308      	adds	r3, #8
 80160ac:	4903      	ldr	r1, [pc, #12]	; (80160bc <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7ff fd9a 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80160b4:	bf00      	nop
 80160b6:	3708      	adds	r7, #8
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}
 80160bc:	080255d4 	.word	0x080255d4

080160c0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b082      	sub	sp, #8
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
 80160c8:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	f103 0008 	add.w	r0, r3, #8
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	4a04      	ldr	r2, [pc, #16]	; (80160e4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 80160d4:	4904      	ldr	r1, [pc, #16]	; (80160e8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 80160d6:	f7ff fd87 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80160da:	bf00      	nop
 80160dc:	3708      	adds	r7, #8
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}
 80160e2:	bf00      	nop
 80160e4:	0802561c 	.word	0x0802561c
 80160e8:	08025634 	.word	0x08025634

080160ec <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b082      	sub	sp, #8
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	3308      	adds	r3, #8
 80160f8:	4903      	ldr	r1, [pc, #12]	; (8016108 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 80160fa:	4618      	mov	r0, r3
 80160fc:	f7ff fd74 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016100:	bf00      	nop
 8016102:	3708      	adds	r7, #8
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}
 8016108:	0802563c 	.word	0x0802563c

0801610c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b08a      	sub	sp, #40	; 0x28
 8016110:	af06      	add	r7, sp, #24
 8016112:	60f8      	str	r0, [r7, #12]
 8016114:	60b9      	str	r1, [r7, #8]
 8016116:	607a      	str	r2, [r7, #4]
 8016118:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 801611a:	f7f9 fe8d 	bl	800fe38 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 801611e:	4602      	mov	r2, r0
 8016120:	69bb      	ldr	r3, [r7, #24]
 8016122:	9305      	str	r3, [sp, #20]
 8016124:	683b      	ldr	r3, [r7, #0]
 8016126:	9304      	str	r3, [sp, #16]
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	9303      	str	r3, [sp, #12]
 801612c:	68bb      	ldr	r3, [r7, #8]
 801612e:	9302      	str	r3, [sp, #8]
 8016130:	9201      	str	r2, [sp, #4]
 8016132:	2300      	movs	r3, #0
 8016134:	9300      	str	r3, [sp, #0]
 8016136:	2300      	movs	r3, #0
 8016138:	4a04      	ldr	r2, [pc, #16]	; (801614c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 801613a:	4905      	ldr	r1, [pc, #20]	; (8016150 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 801613c:	68f8      	ldr	r0, [r7, #12]
 801613e:	f000 f855 	bl	80161ec <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016142:	bf00      	nop
 8016144:	3710      	adds	r7, #16
 8016146:	46bd      	mov	sp, r7
 8016148:	bd80      	pop	{r7, pc}
 801614a:	bf00      	nop
 801614c:	08025498 	.word	0x08025498
 8016150:	08025750 	.word	0x08025750

08016154 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016154:	b590      	push	{r4, r7, lr}
 8016156:	b08b      	sub	sp, #44	; 0x2c
 8016158:	af06      	add	r7, sp, #24
 801615a:	60f8      	str	r0, [r7, #12]
 801615c:	60b9      	str	r1, [r7, #8]
 801615e:	607a      	str	r2, [r7, #4]
 8016160:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	68d8      	ldr	r0, [r3, #12]
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	691c      	ldr	r4, [r3, #16]
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	68ba      	ldr	r2, [r7, #8]
 8016170:	6952      	ldr	r2, [r2, #20]
 8016172:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016174:	9105      	str	r1, [sp, #20]
 8016176:	6a39      	ldr	r1, [r7, #32]
 8016178:	9104      	str	r1, [sp, #16]
 801617a:	6839      	ldr	r1, [r7, #0]
 801617c:	9103      	str	r1, [sp, #12]
 801617e:	6879      	ldr	r1, [r7, #4]
 8016180:	9102      	str	r1, [sp, #8]
 8016182:	9201      	str	r2, [sp, #4]
 8016184:	9300      	str	r3, [sp, #0]
 8016186:	4623      	mov	r3, r4
 8016188:	4602      	mov	r2, r0
 801618a:	4904      	ldr	r1, [pc, #16]	; (801619c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 801618c:	68f8      	ldr	r0, [r7, #12]
 801618e:	f000 f82d 	bl	80161ec <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016192:	bf00      	nop
 8016194:	3714      	adds	r7, #20
 8016196:	46bd      	mov	sp, r7
 8016198:	bd90      	pop	{r4, r7, pc}
 801619a:	bf00      	nop
 801619c:	08025774 	.word	0x08025774

080161a0 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80161a0:	b590      	push	{r4, r7, lr}
 80161a2:	b08b      	sub	sp, #44	; 0x2c
 80161a4:	af06      	add	r7, sp, #24
 80161a6:	60f8      	str	r0, [r7, #12]
 80161a8:	60b9      	str	r1, [r7, #8]
 80161aa:	607a      	str	r2, [r7, #4]
 80161ac:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80161ae:	68bb      	ldr	r3, [r7, #8]
 80161b0:	68d8      	ldr	r0, [r3, #12]
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	691c      	ldr	r4, [r3, #16]
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	68ba      	ldr	r2, [r7, #8]
 80161bc:	6952      	ldr	r2, [r2, #20]
 80161be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80161c0:	9105      	str	r1, [sp, #20]
 80161c2:	6a39      	ldr	r1, [r7, #32]
 80161c4:	9104      	str	r1, [sp, #16]
 80161c6:	6839      	ldr	r1, [r7, #0]
 80161c8:	9103      	str	r1, [sp, #12]
 80161ca:	6879      	ldr	r1, [r7, #4]
 80161cc:	9102      	str	r1, [sp, #8]
 80161ce:	9201      	str	r2, [sp, #4]
 80161d0:	9300      	str	r3, [sp, #0]
 80161d2:	4623      	mov	r3, r4
 80161d4:	4602      	mov	r2, r0
 80161d6:	4904      	ldr	r1, [pc, #16]	; (80161e8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80161d8:	68f8      	ldr	r0, [r7, #12]
 80161da:	f000 f807 	bl	80161ec <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80161de:	bf00      	nop
 80161e0:	3714      	adds	r7, #20
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bd90      	pop	{r4, r7, pc}
 80161e6:	bf00      	nop
 80161e8:	0802579c 	.word	0x0802579c

080161ec <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80161ec:	b590      	push	{r4, r7, lr}
 80161ee:	b087      	sub	sp, #28
 80161f0:	af02      	add	r7, sp, #8
 80161f2:	60f8      	str	r0, [r7, #12]
 80161f4:	60b9      	str	r1, [r7, #8]
 80161f6:	607a      	str	r2, [r7, #4]
 80161f8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	3308      	adds	r3, #8
 80161fe:	68ba      	ldr	r2, [r7, #8]
 8016200:	4910      	ldr	r1, [pc, #64]	; (8016244 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8016202:	4618      	mov	r0, r3
 8016204:	f7ff fcf0 	bl	8015be8 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8016208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801620a:	9300      	str	r3, [sp, #0]
 801620c:	6a3b      	ldr	r3, [r7, #32]
 801620e:	683a      	ldr	r2, [r7, #0]
 8016210:	6879      	ldr	r1, [r7, #4]
 8016212:	68f8      	ldr	r0, [r7, #12]
 8016214:	f7ff fe36 	bl	8015e84 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8016218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801621c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801621e:	68f8      	ldr	r0, [r7, #12]
 8016220:	f7ff fe52 	bl	8015ec8 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8016224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	3308      	adds	r3, #8
 801622a:	681c      	ldr	r4, [r3, #0]
 801622c:	68f8      	ldr	r0, [r7, #12]
 801622e:	f000 f80b 	bl	8016248 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8016232:	4603      	mov	r3, r0
 8016234:	4619      	mov	r1, r3
 8016236:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016238:	47a0      	blx	r4
}
 801623a:	bf00      	nop
 801623c:	3714      	adds	r7, #20
 801623e:	46bd      	mov	sp, r7
 8016240:	bd90      	pop	{r4, r7, pc}
 8016242:	bf00      	nop
 8016244:	080257c8 	.word	0x080257c8

08016248 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b082      	sub	sp, #8
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	3308      	adds	r3, #8
 8016254:	4618      	mov	r0, r3
 8016256:	f7ff fdad 	bl	8015db4 <_ZN18SimpleStringBuffer8toStringEv>
 801625a:	4603      	mov	r3, r0
}
 801625c:	4618      	mov	r0, r3
 801625e:	3708      	adds	r7, #8
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}

08016264 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	3308      	adds	r3, #8
 8016270:	4618      	mov	r0, r3
 8016272:	f7ff fca7 	bl	8015bc4 <_ZN18SimpleStringBuffer5clearEv>
}
 8016276:	bf00      	nop
 8016278:	3708      	adds	r7, #8
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}

0801627e <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 801627e:	b480      	push	{r7}
 8016280:	b085      	sub	sp, #20
 8016282:	af00      	add	r7, sp, #0
 8016284:	60f8      	str	r0, [r7, #12]
 8016286:	60b9      	str	r1, [r7, #8]
 8016288:	607a      	str	r2, [r7, #4]
 801628a:	603b      	str	r3, [r7, #0]
    number_ = number;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	687a      	ldr	r2, [r7, #4]
 8016290:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	68ba      	ldr	r2, [r7, #8]
 8016296:	609a      	str	r2, [r3, #8]
    size_ = size;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	683a      	ldr	r2, [r7, #0]
 801629c:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	69ba      	ldr	r2, [r7, #24]
 80162a2:	615a      	str	r2, [r3, #20]
    period_ = period;
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	7f3a      	ldrb	r2, [r7, #28]
 80162a8:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80162b0:	765a      	strb	r2, [r3, #25]
    file_ = file;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162b6:	60da      	str	r2, [r3, #12]
    line_ = line;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162bc:	611a      	str	r2, [r3, #16]
}
 80162be:	bf00      	nop
 80162c0:	3714      	adds	r7, #20
 80162c2:	46bd      	mov	sp, r7
 80162c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c8:	4770      	bx	lr

080162ca <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80162ca:	b480      	push	{r7}
 80162cc:	b085      	sub	sp, #20
 80162ce:	af00      	add	r7, sp, #0
 80162d0:	60f8      	str	r0, [r7, #12]
 80162d2:	60b9      	str	r1, [r7, #8]
 80162d4:	4613      	mov	r3, r2
 80162d6:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80162d8:	79fb      	ldrb	r3, [r7, #7]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d00b      	beq.n	80162f6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	7e1b      	ldrb	r3, [r3, #24]
 80162e2:	79fa      	ldrb	r2, [r7, #7]
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d006      	beq.n	80162f6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	7e1b      	ldrb	r3, [r3, #24]
 80162ec:	2b01      	cmp	r3, #1
 80162ee:	d004      	beq.n	80162fa <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80162f0:	79fb      	ldrb	r3, [r7, #7]
 80162f2:	2b02      	cmp	r3, #2
 80162f4:	d101      	bne.n	80162fa <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80162f6:	2301      	movs	r3, #1
 80162f8:	e000      	b.n	80162fc <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 80162fa:	2300      	movs	r3, #0
}
 80162fc:	4618      	mov	r0, r3
 80162fe:	3714      	adds	r7, #20
 8016300:	46bd      	mov	sp, r7
 8016302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016306:	4770      	bx	lr

08016308 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8016308:	b480      	push	{r7}
 801630a:	b083      	sub	sp, #12
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
 8016310:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	61da      	str	r2, [r3, #28]
    head_ = node;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	683a      	ldr	r2, [r7, #0]
 801631e:	601a      	str	r2, [r3, #0]
}
 8016320:	bf00      	nop
 8016322:	370c      	adds	r7, #12
 8016324:	46bd      	mov	sp, r7
 8016326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632a:	4770      	bx	lr

0801632c <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 801632c:	b480      	push	{r7}
 801632e:	b085      	sub	sp, #20
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
 8016334:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 801633c:	2300      	movs	r3, #0
 801633e:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d019      	beq.n	801637a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	689b      	ldr	r3, [r3, #8]
 801634a:	683a      	ldr	r2, [r7, #0]
 801634c:	429a      	cmp	r2, r3
 801634e:	d10e      	bne.n	801636e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8016350:	68bb      	ldr	r3, [r7, #8]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d005      	beq.n	8016362 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	69da      	ldr	r2, [r3, #28]
 801635a:	68bb      	ldr	r3, [r7, #8]
 801635c:	61da      	str	r2, [r3, #28]
                return cur;
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	e00c      	b.n	801637c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	69da      	ldr	r2, [r3, #28]
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	601a      	str	r2, [r3, #0]
                return cur;
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	e006      	b.n	801637c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	69db      	ldr	r3, [r3, #28]
 8016376:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8016378:	e7e2      	b.n	8016340 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 801637a:	2300      	movs	r3, #0
}
 801637c:	4618      	mov	r0, r3
 801637e:	3714      	adds	r7, #20
 8016380:	46bd      	mov	sp, r7
 8016382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016386:	4770      	bx	lr

08016388 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8016388:	b480      	push	{r7}
 801638a:	b085      	sub	sp, #20
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
 8016390:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d00a      	beq.n	80163b4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	689b      	ldr	r3, [r3, #8]
 80163a2:	683a      	ldr	r2, [r7, #0]
 80163a4:	429a      	cmp	r2, r3
 80163a6:	d101      	bne.n	80163ac <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	e004      	b.n	80163b6 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	69db      	ldr	r3, [r3, #28]
 80163b0:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80163b2:	e7f1      	b.n	8016398 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80163b4:	2300      	movs	r3, #0
}
 80163b6:	4618      	mov	r0, r3
 80163b8:	3714      	adds	r7, #20
 80163ba:	46bd      	mov	sp, r7
 80163bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c0:	4770      	bx	lr

080163c2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80163c2:	b580      	push	{r7, lr}
 80163c4:	b086      	sub	sp, #24
 80163c6:	af00      	add	r7, sp, #0
 80163c8:	60f8      	str	r0, [r7, #12]
 80163ca:	60b9      	str	r1, [r7, #8]
 80163cc:	4613      	mov	r3, r2
 80163ce:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	617b      	str	r3, [r7, #20]
 80163d4:	697b      	ldr	r3, [r7, #20]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d00e      	beq.n	80163f8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80163da:	79fb      	ldrb	r3, [r7, #7]
 80163dc:	461a      	mov	r2, r3
 80163de:	6979      	ldr	r1, [r7, #20]
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f7ff ff72 	bl	80162ca <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80163e6:	4603      	mov	r3, r0
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d001      	beq.n	80163f0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 80163ec:	697b      	ldr	r3, [r7, #20]
 80163ee:	e004      	b.n	80163fa <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80163f0:	697b      	ldr	r3, [r7, #20]
 80163f2:	69db      	ldr	r3, [r3, #28]
 80163f4:	617b      	str	r3, [r7, #20]
 80163f6:	e7ed      	b.n	80163d4 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 80163f8:	2300      	movs	r3, #0
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3718      	adds	r7, #24
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}

08016402 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8016402:	b580      	push	{r7, lr}
 8016404:	b082      	sub	sp, #8
 8016406:	af00      	add	r7, sp, #0
 8016408:	6078      	str	r0, [r7, #4]
 801640a:	460b      	mov	r3, r1
 801640c:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	78fa      	ldrb	r2, [r7, #3]
 8016414:	4619      	mov	r1, r3
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f7ff ffd3 	bl	80163c2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801641c:	4603      	mov	r3, r0
}
 801641e:	4618      	mov	r0, r3
 8016420:	3708      	adds	r7, #8
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}

08016426 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016426:	b580      	push	{r7, lr}
 8016428:	b084      	sub	sp, #16
 801642a:	af00      	add	r7, sp, #0
 801642c:	60f8      	str	r0, [r7, #12]
 801642e:	60b9      	str	r1, [r7, #8]
 8016430:	4613      	mov	r3, r2
 8016432:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	69db      	ldr	r3, [r3, #28]
 8016438:	79fa      	ldrb	r2, [r7, #7]
 801643a:	4619      	mov	r1, r3
 801643c:	68f8      	ldr	r0, [r7, #12]
 801643e:	f7ff ffc0 	bl	80163c2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016442:	4603      	mov	r3, r0
}
 8016444:	4618      	mov	r0, r3
 8016446:	3710      	adds	r7, #16
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}

0801644c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b084      	sub	sp, #16
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	460b      	mov	r3, r1
 8016456:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8016458:	2300      	movs	r3, #0
 801645a:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	60bb      	str	r3, [r7, #8]
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d00f      	beq.n	8016488 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8016468:	78fb      	ldrb	r3, [r7, #3]
 801646a:	461a      	mov	r2, r3
 801646c:	68b9      	ldr	r1, [r7, #8]
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f7ff ff2b 	bl	80162ca <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016474:	4603      	mov	r3, r0
 8016476:	2b00      	cmp	r3, #0
 8016478:	d002      	beq.n	8016480 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	3301      	adds	r3, #1
 801647e:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	69db      	ldr	r3, [r3, #28]
 8016484:	60bb      	str	r3, [r7, #8]
 8016486:	e7ec      	b.n	8016462 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8016488:	68fb      	ldr	r3, [r7, #12]
}
 801648a:	4618      	mov	r0, r3
 801648c:	3710      	adds	r7, #16
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}
	...

08016494 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8016494:	b480      	push	{r7}
 8016496:	b083      	sub	sp, #12
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
 801649c:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 801649e:	6839      	ldr	r1, [r7, #0]
 80164a0:	4b09      	ldr	r3, [pc, #36]	; (80164c8 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 80164a2:	fba3 2301 	umull	r2, r3, r3, r1
 80164a6:	1aca      	subs	r2, r1, r3
 80164a8:	0852      	lsrs	r2, r2, #1
 80164aa:	4413      	add	r3, r2
 80164ac:	099a      	lsrs	r2, r3, #6
 80164ae:	4613      	mov	r3, r2
 80164b0:	00db      	lsls	r3, r3, #3
 80164b2:	4413      	add	r3, r2
 80164b4:	00db      	lsls	r3, r3, #3
 80164b6:	4413      	add	r3, r2
 80164b8:	1aca      	subs	r2, r1, r3
 80164ba:	4613      	mov	r3, r2
}
 80164bc:	4618      	mov	r0, r3
 80164be:	370c      	adds	r7, #12
 80164c0:	46bd      	mov	sp, r7
 80164c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c6:	4770      	bx	lr
 80164c8:	c0e07039 	.word	0xc0e07039

080164cc <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b082      	sub	sp, #8
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
 80164d4:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80164d6:	683b      	ldr	r3, [r7, #0]
 80164d8:	689b      	ldr	r3, [r3, #8]
 80164da:	4619      	mov	r1, r3
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f7ff ffd9 	bl	8016494 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80164e2:	4603      	mov	r3, r0
 80164e4:	009b      	lsls	r3, r3, #2
 80164e6:	687a      	ldr	r2, [r7, #4]
 80164e8:	4413      	add	r3, r2
 80164ea:	6839      	ldr	r1, [r7, #0]
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7ff ff0b 	bl	8016308 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 80164f2:	bf00      	nop
 80164f4:	3708      	adds	r7, #8
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}

080164fa <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 80164fa:	b580      	push	{r7, lr}
 80164fc:	b082      	sub	sp, #8
 80164fe:	af00      	add	r7, sp, #0
 8016500:	6078      	str	r0, [r7, #4]
 8016502:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8016504:	6839      	ldr	r1, [r7, #0]
 8016506:	6878      	ldr	r0, [r7, #4]
 8016508:	f7ff ffc4 	bl	8016494 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801650c:	4603      	mov	r3, r0
 801650e:	009b      	lsls	r3, r3, #2
 8016510:	687a      	ldr	r2, [r7, #4]
 8016512:	4413      	add	r3, r2
 8016514:	6839      	ldr	r1, [r7, #0]
 8016516:	4618      	mov	r0, r3
 8016518:	f7ff ff08 	bl	801632c <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 801651c:	4603      	mov	r3, r0
}
 801651e:	4618      	mov	r0, r3
 8016520:	3708      	adds	r7, #8
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}

08016526 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8016526:	b580      	push	{r7, lr}
 8016528:	b082      	sub	sp, #8
 801652a:	af00      	add	r7, sp, #0
 801652c:	6078      	str	r0, [r7, #4]
 801652e:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8016530:	6839      	ldr	r1, [r7, #0]
 8016532:	6878      	ldr	r0, [r7, #4]
 8016534:	f7ff ffae 	bl	8016494 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016538:	4603      	mov	r3, r0
 801653a:	009b      	lsls	r3, r3, #2
 801653c:	687a      	ldr	r2, [r7, #4]
 801653e:	4413      	add	r3, r2
 8016540:	6839      	ldr	r1, [r7, #0]
 8016542:	4618      	mov	r0, r3
 8016544:	f7ff ff20 	bl	8016388 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8016548:	4603      	mov	r3, r0
}
 801654a:	4618      	mov	r0, r3
 801654c:	3708      	adds	r7, #8
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}

08016552 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8016552:	b580      	push	{r7, lr}
 8016554:	b084      	sub	sp, #16
 8016556:	af00      	add	r7, sp, #0
 8016558:	6078      	str	r0, [r7, #4]
 801655a:	460b      	mov	r3, r1
 801655c:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801655e:	2300      	movs	r3, #0
 8016560:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8016562:	2300      	movs	r3, #0
 8016564:	60bb      	str	r3, [r7, #8]
 8016566:	68bb      	ldr	r3, [r7, #8]
 8016568:	2b48      	cmp	r3, #72	; 0x48
 801656a:	dc10      	bgt.n	801658e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 801656c:	68bb      	ldr	r3, [r7, #8]
 801656e:	009b      	lsls	r3, r3, #2
 8016570:	687a      	ldr	r2, [r7, #4]
 8016572:	4413      	add	r3, r2
 8016574:	78fa      	ldrb	r2, [r7, #3]
 8016576:	4611      	mov	r1, r2
 8016578:	4618      	mov	r0, r3
 801657a:	f7ff ff67 	bl	801644c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 801657e:	4602      	mov	r2, r0
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	4413      	add	r3, r2
 8016584:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8016586:	68bb      	ldr	r3, [r7, #8]
 8016588:	3301      	adds	r3, #1
 801658a:	60bb      	str	r3, [r7, #8]
 801658c:	e7eb      	b.n	8016566 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 801658e:	68fb      	ldr	r3, [r7, #12]
}
 8016590:	4618      	mov	r0, r3
 8016592:	3710      	adds	r7, #16
 8016594:	46bd      	mov	sp, r7
 8016596:	bd80      	pop	{r7, pc}

08016598 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b084      	sub	sp, #16
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
 80165a0:	460b      	mov	r3, r1
 80165a2:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 80165a4:	2300      	movs	r3, #0
 80165a6:	60fb      	str	r3, [r7, #12]
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	2b48      	cmp	r3, #72	; 0x48
 80165ac:	dc12      	bgt.n	80165d4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	009b      	lsls	r3, r3, #2
 80165b2:	687a      	ldr	r2, [r7, #4]
 80165b4:	4413      	add	r3, r2
 80165b6:	78fa      	ldrb	r2, [r7, #3]
 80165b8:	4611      	mov	r1, r2
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7ff ff21 	bl	8016402 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80165c0:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80165c2:	68bb      	ldr	r3, [r7, #8]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d001      	beq.n	80165cc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80165c8:	68bb      	ldr	r3, [r7, #8]
 80165ca:	e004      	b.n	80165d6 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	3301      	adds	r3, #1
 80165d0:	60fb      	str	r3, [r7, #12]
 80165d2:	e7e9      	b.n	80165a8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80165d4:	2300      	movs	r3, #0
}
 80165d6:	4618      	mov	r0, r3
 80165d8:	3710      	adds	r7, #16
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd80      	pop	{r7, pc}

080165de <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80165de:	b580      	push	{r7, lr}
 80165e0:	b086      	sub	sp, #24
 80165e2:	af00      	add	r7, sp, #0
 80165e4:	60f8      	str	r0, [r7, #12]
 80165e6:	60b9      	str	r1, [r7, #8]
 80165e8:	4613      	mov	r3, r2
 80165ea:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 80165ec:	68bb      	ldr	r3, [r7, #8]
 80165ee:	689b      	ldr	r3, [r3, #8]
 80165f0:	4619      	mov	r1, r3
 80165f2:	68f8      	ldr	r0, [r7, #12]
 80165f4:	f7ff ff4e 	bl	8016494 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80165f8:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80165fa:	697b      	ldr	r3, [r7, #20]
 80165fc:	009b      	lsls	r3, r3, #2
 80165fe:	68fa      	ldr	r2, [r7, #12]
 8016600:	4413      	add	r3, r2
 8016602:	79fa      	ldrb	r2, [r7, #7]
 8016604:	68b9      	ldr	r1, [r7, #8]
 8016606:	4618      	mov	r0, r3
 8016608:	f7ff ff0d 	bl	8016426 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801660c:	6138      	str	r0, [r7, #16]
    if (node) return node;
 801660e:	693b      	ldr	r3, [r7, #16]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d001      	beq.n	8016618 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8016614:	693b      	ldr	r3, [r7, #16]
 8016616:	e019      	b.n	801664c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8016618:	697b      	ldr	r3, [r7, #20]
 801661a:	3301      	adds	r3, #1
 801661c:	617b      	str	r3, [r7, #20]
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	2b48      	cmp	r3, #72	; 0x48
 8016622:	d812      	bhi.n	801664a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	009b      	lsls	r3, r3, #2
 8016628:	68fa      	ldr	r2, [r7, #12]
 801662a:	4413      	add	r3, r2
 801662c:	79fa      	ldrb	r2, [r7, #7]
 801662e:	4611      	mov	r1, r2
 8016630:	4618      	mov	r0, r3
 8016632:	f7ff fee6 	bl	8016402 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8016636:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8016638:	693b      	ldr	r3, [r7, #16]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d001      	beq.n	8016642 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	e004      	b.n	801664c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8016642:	697b      	ldr	r3, [r7, #20]
 8016644:	3301      	adds	r3, #1
 8016646:	617b      	str	r3, [r7, #20]
 8016648:	e7e9      	b.n	801661e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 801664a:	2300      	movs	r3, #0
}
 801664c:	4618      	mov	r0, r3
 801664e:	3718      	adds	r7, #24
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}

08016654 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8016654:	b5b0      	push	{r4, r5, r7, lr}
 8016656:	b082      	sub	sp, #8
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2448      	movs	r4, #72	; 0x48
 8016660:	461d      	mov	r5, r3
 8016662:	2c00      	cmp	r4, #0
 8016664:	db05      	blt.n	8016672 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8016666:	4628      	mov	r0, r5
 8016668:	f7ff fa84 	bl	8015b74 <_ZN22MemoryLeakDetectorListC1Ev>
 801666c:	3504      	adds	r5, #4
 801666e:	3c01      	subs	r4, #1
 8016670:	e7f7      	b.n	8016662 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	4618      	mov	r0, r3
 8016676:	3708      	adds	r7, #8
 8016678:	46bd      	mov	sp, r7
 801667a:	bdb0      	pop	{r4, r5, r7, pc}

0801667c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 801667c:	b590      	push	{r4, r7, lr}
 801667e:	b083      	sub	sp, #12
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
 8016684:	6039      	str	r1, [r7, #0]
 8016686:	4a1d      	ldr	r2, [pc, #116]	; (80166fc <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	601a      	str	r2, [r3, #0]
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	330c      	adds	r3, #12
 8016690:	4618      	mov	r0, r3
 8016692:	f7ff fbe3 	bl	8015e5c <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801669c:	331c      	adds	r3, #28
 801669e:	4618      	mov	r0, r3
 80166a0:	f7ff ffd8 	bl	8016654 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80166aa:	2201      	movs	r2, #1
 80166ac:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80166b4:	3304      	adds	r3, #4
 80166b6:	2201      	movs	r2, #1
 80166b8:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2201      	movs	r2, #1
 80166be:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80166c6:	3308      	adds	r3, #8
 80166c8:	2200      	movs	r2, #0
 80166ca:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	683a      	ldr	r2, [r7, #0]
 80166d0:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80166d2:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80166d6:	490a      	ldr	r1, [pc, #40]	; (8016700 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80166d8:	2004      	movs	r0, #4
 80166da:	f7f3 fb17 	bl	8009d0c <_ZnwjPKci>
 80166de:	4604      	mov	r4, r0
 80166e0:	4620      	mov	r0, r4
 80166e2:	f7f5 fbe7 	bl	800beb4 <_ZN11SimpleMutexC1Ev>
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80166ec:	330c      	adds	r3, #12
 80166ee:	601c      	str	r4, [r3, #0]
}
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	4618      	mov	r0, r3
 80166f4:	370c      	adds	r7, #12
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd90      	pop	{r4, r7, pc}
 80166fa:	bf00      	nop
 80166fc:	080283fc 	.word	0x080283fc
 8016700:	080257cc 	.word	0x080257cc

08016704 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8016704:	b590      	push	{r4, r7, lr}
 8016706:	b083      	sub	sp, #12
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	4a0e      	ldr	r2, [pc, #56]	; (8016748 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016718:	330c      	adds	r3, #12
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	2b00      	cmp	r3, #0
 801671e:	d00d      	beq.n	801673c <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016726:	330c      	adds	r3, #12
 8016728:	681c      	ldr	r4, [r3, #0]
 801672a:	2c00      	cmp	r4, #0
 801672c:	d006      	beq.n	801673c <_ZN18MemoryLeakDetectorD1Ev+0x38>
 801672e:	4620      	mov	r0, r4
 8016730:	f7f5 fbd2 	bl	800bed8 <_ZN11SimpleMutexD1Ev>
 8016734:	2104      	movs	r1, #4
 8016736:	4620      	mov	r0, r4
 8016738:	f7f3 fafc 	bl	8009d34 <_ZdlPvj>
    }
}
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	4618      	mov	r0, r3
 8016740:	370c      	adds	r7, #12
 8016742:	46bd      	mov	sp, r7
 8016744:	bd90      	pop	{r4, r7, pc}
 8016746:	bf00      	nop
 8016748:	080283fc 	.word	0x080283fc

0801674c <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 801674c:	b580      	push	{r7, lr}
 801674e:	b082      	sub	sp, #8
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
}
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	f7ff ffd5 	bl	8016704 <_ZN18MemoryLeakDetectorD1Ev>
 801675a:	f241 1150 	movw	r1, #4432	; 0x1150
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f7f3 fae8 	bl	8009d34 <_ZdlPvj>
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	4618      	mov	r0, r3
 8016768:	3708      	adds	r7, #8
 801676a:	46bd      	mov	sp, r7
 801676c:	bd80      	pop	{r7, pc}

0801676e <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 801676e:	b580      	push	{r7, lr}
 8016770:	b082      	sub	sp, #8
 8016772:	af00      	add	r7, sp, #0
 8016774:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	330c      	adds	r3, #12
 801677a:	4618      	mov	r0, r3
 801677c:	f7ff fd72 	bl	8016264 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	2203      	movs	r2, #3
 8016784:	721a      	strb	r2, [r3, #8]
}
 8016786:	bf00      	nop
 8016788:	3708      	adds	r7, #8
 801678a:	46bd      	mov	sp, r7
 801678c:	bd80      	pop	{r7, pc}

0801678e <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 801678e:	b480      	push	{r7}
 8016790:	b083      	sub	sp, #12
 8016792:	af00      	add	r7, sp, #0
 8016794:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	2202      	movs	r2, #2
 801679a:	721a      	strb	r2, [r3, #8]
}
 801679c:	bf00      	nop
 801679e:	370c      	adds	r7, #12
 80167a0:	46bd      	mov	sp, r7
 80167a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a6:	4770      	bx	lr

080167a8 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 80167a8:	b480      	push	{r7}
 80167aa:	b083      	sub	sp, #12
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2202      	movs	r2, #2
 80167b4:	721a      	strb	r2, [r3, #8]
}
 80167b6:	bf00      	nop
 80167b8:	370c      	adds	r7, #12
 80167ba:	46bd      	mov	sp, r7
 80167bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c0:	4770      	bx	lr

080167c2 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80167c2:	b480      	push	{r7}
 80167c4:	b083      	sub	sp, #12
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6078      	str	r0, [r7, #4]
    return mutex_;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80167d0:	330c      	adds	r3, #12
 80167d2:	681b      	ldr	r3, [r3, #0]
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	370c      	adds	r7, #12
 80167d8:	46bd      	mov	sp, r7
 80167da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167de:	4770      	bx	lr

080167e0 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80167e0:	b480      	push	{r7}
 80167e2:	b083      	sub	sp, #12
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	f023 0303 	bic.w	r3, r3, #3
 80167ee:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 80167f0:	4618      	mov	r0, r3
 80167f2:	370c      	adds	r7, #12
 80167f4:	46bd      	mov	sp, r7
 80167f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fa:	4770      	bx	lr

080167fc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8016806:	683b      	ldr	r3, [r7, #0]
 8016808:	3303      	adds	r3, #3
 801680a:	4618      	mov	r0, r3
 801680c:	f7ff ffe8 	bl	80167e0 <_ZL31calculateVoidPointerAlignedSizej>
 8016810:	4603      	mov	r3, r0
}
 8016812:	4618      	mov	r0, r3
 8016814:	3708      	adds	r7, #8
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}

0801681a <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 801681a:	b580      	push	{r7, lr}
 801681c:	b084      	sub	sp, #16
 801681e:	af00      	add	r7, sp, #0
 8016820:	60f8      	str	r0, [r7, #12]
 8016822:	60b9      	str	r1, [r7, #8]
 8016824:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8016826:	6879      	ldr	r1, [r7, #4]
 8016828:	68f8      	ldr	r0, [r7, #12]
 801682a:	f7ff ffe7 	bl	80167fc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801682e:	4602      	mov	r2, r0
 8016830:	68bb      	ldr	r3, [r7, #8]
 8016832:	4413      	add	r3, r2
}
 8016834:	4618      	mov	r0, r3
 8016836:	3710      	adds	r7, #16
 8016838:	46bd      	mov	sp, r7
 801683a:	bd80      	pop	{r7, pc}

0801683c <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b08a      	sub	sp, #40	; 0x28
 8016840:	af06      	add	r7, sp, #24
 8016842:	60f8      	str	r0, [r7, #12]
 8016844:	60b9      	str	r1, [r7, #8]
 8016846:	607a      	str	r2, [r7, #4]
 8016848:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016850:	3304      	adds	r3, #4
 8016852:	681a      	ldr	r2, [r3, #0]
 8016854:	1c51      	adds	r1, r2, #1
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801685c:	3304      	adds	r3, #4
 801685e:	6019      	str	r1, [r3, #0]
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	7a19      	ldrb	r1, [r3, #8]
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801686a:	3308      	adds	r3, #8
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	6a38      	ldr	r0, [r7, #32]
 8016870:	9004      	str	r0, [sp, #16]
 8016872:	69f8      	ldr	r0, [r7, #28]
 8016874:	9003      	str	r0, [sp, #12]
 8016876:	9302      	str	r3, [sp, #8]
 8016878:	9101      	str	r1, [sp, #4]
 801687a:	69bb      	ldr	r3, [r7, #24]
 801687c:	9300      	str	r3, [sp, #0]
 801687e:	683b      	ldr	r3, [r7, #0]
 8016880:	6879      	ldr	r1, [r7, #4]
 8016882:	68b8      	ldr	r0, [r7, #8]
 8016884:	f7ff fcfb 	bl	801627e <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	689a      	ldr	r2, [r3, #8]
 801688c:	68bb      	ldr	r3, [r7, #8]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	4413      	add	r3, r2
 8016892:	4619      	mov	r1, r3
 8016894:	68f8      	ldr	r0, [r7, #12]
 8016896:	f000 f861 	bl	801695c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80168a0:	331c      	adds	r3, #28
 80168a2:	68b9      	ldr	r1, [r7, #8]
 80168a4:	4618      	mov	r0, r3
 80168a6:	f7ff fe11 	bl	80164cc <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 80168aa:	bf00      	nop
 80168ac:	3710      	adds	r7, #16
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd80      	pop	{r7, pc}

080168b2 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80168b2:	b580      	push	{r7, lr}
 80168b4:	b08a      	sub	sp, #40	; 0x28
 80168b6:	af04      	add	r7, sp, #16
 80168b8:	60f8      	str	r0, [r7, #12]
 80168ba:	60b9      	str	r1, [r7, #8]
 80168bc:	607a      	str	r2, [r7, #4]
 80168be:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80168c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80168c4:	9302      	str	r3, [sp, #8]
 80168c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c8:	9301      	str	r3, [sp, #4]
 80168ca:	6a3b      	ldr	r3, [r7, #32]
 80168cc:	9300      	str	r3, [sp, #0]
 80168ce:	683b      	ldr	r3, [r7, #0]
 80168d0:	687a      	ldr	r2, [r7, #4]
 80168d2:	68b9      	ldr	r1, [r7, #8]
 80168d4:	68f8      	ldr	r0, [r7, #12]
 80168d6:	f000 f96f 	bl	8016bb8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80168da:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80168dc:	697b      	ldr	r3, [r7, #20]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d101      	bne.n	80168e6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80168e2:	2300      	movs	r3, #0
 80168e4:	e017      	b.n	8016916 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80168e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80168ea:	9300      	str	r3, [sp, #0]
 80168ec:	697b      	ldr	r3, [r7, #20]
 80168ee:	683a      	ldr	r2, [r7, #0]
 80168f0:	68b9      	ldr	r1, [r7, #8]
 80168f2:	68f8      	ldr	r0, [r7, #12]
 80168f4:	f000 f98a 	bl	8016c0c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80168f8:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 80168fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168fc:	9302      	str	r3, [sp, #8]
 80168fe:	6a3b      	ldr	r3, [r7, #32]
 8016900:	9301      	str	r3, [sp, #4]
 8016902:	68bb      	ldr	r3, [r7, #8]
 8016904:	9300      	str	r3, [sp, #0]
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	697a      	ldr	r2, [r7, #20]
 801690a:	6939      	ldr	r1, [r7, #16]
 801690c:	68f8      	ldr	r0, [r7, #12]
 801690e:	f7ff ff95 	bl	801683c <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8016912:	693b      	ldr	r3, [r7, #16]
 8016914:	689b      	ldr	r3, [r3, #8]
}
 8016916:	4618      	mov	r0, r3
 8016918:	3718      	adds	r7, #24
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
	...

08016920 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b084      	sub	sp, #16
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016930:	331c      	adds	r3, #28
 8016932:	6839      	ldr	r1, [r7, #0]
 8016934:	4618      	mov	r0, r3
 8016936:	f7ff fdf6 	bl	8016526 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 801693a:	60f8      	str	r0, [r7, #12]
  if (node)
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d006      	beq.n	8016950 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8016942:	4b05      	ldr	r3, [pc, #20]	; (8016958 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	68fa      	ldr	r2, [r7, #12]
 8016948:	6812      	ldr	r2, [r2, #0]
 801694a:	21cd      	movs	r1, #205	; 0xcd
 801694c:	6838      	ldr	r0, [r7, #0]
 801694e:	4798      	blx	r3
#endif
}
 8016950:	bf00      	nop
 8016952:	3710      	adds	r7, #16
 8016954:	46bd      	mov	sp, r7
 8016956:	bd80      	pop	{r7, pc}
 8016958:	200000d8 	.word	0x200000d8

0801695c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 801695c:	b480      	push	{r7}
 801695e:	b085      	sub	sp, #20
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
 8016964:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8016966:	2300      	movs	r3, #0
 8016968:	60fb      	str	r3, [r7, #12]
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	2b02      	cmp	r3, #2
 801696e:	d812      	bhi.n	8016996 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8016970:	68f9      	ldr	r1, [r7, #12]
 8016972:	4b0c      	ldr	r3, [pc, #48]	; (80169a4 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8016974:	fba3 2301 	umull	r2, r3, r3, r1
 8016978:	085a      	lsrs	r2, r3, #1
 801697a:	4613      	mov	r3, r2
 801697c:	005b      	lsls	r3, r3, #1
 801697e:	4413      	add	r3, r2
 8016980:	1aca      	subs	r2, r1, r3
 8016982:	6839      	ldr	r1, [r7, #0]
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	440b      	add	r3, r1
 8016988:	4907      	ldr	r1, [pc, #28]	; (80169a8 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 801698a:	5c8a      	ldrb	r2, [r1, r2]
 801698c:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	3301      	adds	r3, #1
 8016992:	60fb      	str	r3, [r7, #12]
 8016994:	e7e9      	b.n	801696a <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8016996:	bf00      	nop
 8016998:	3714      	adds	r7, #20
 801699a:	46bd      	mov	sp, r7
 801699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a0:	4770      	bx	lr
 80169a2:	bf00      	nop
 80169a4:	aaaaaaab 	.word	0xaaaaaaab
 80169a8:	080283f0 	.word	0x080283f0

080169ac <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 80169ac:	b480      	push	{r7}
 80169ae:	b085      	sub	sp, #20
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
 80169b4:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80169b6:	2300      	movs	r3, #0
 80169b8:	60fb      	str	r3, [r7, #12]
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	2b02      	cmp	r3, #2
 80169be:	d816      	bhi.n	80169ee <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80169c0:	683a      	ldr	r2, [r7, #0]
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	4413      	add	r3, r2
 80169c6:	7818      	ldrb	r0, [r3, #0]
 80169c8:	68f9      	ldr	r1, [r7, #12]
 80169ca:	4b0c      	ldr	r3, [pc, #48]	; (80169fc <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80169cc:	fba3 2301 	umull	r2, r3, r3, r1
 80169d0:	085a      	lsrs	r2, r3, #1
 80169d2:	4613      	mov	r3, r2
 80169d4:	005b      	lsls	r3, r3, #1
 80169d6:	4413      	add	r3, r2
 80169d8:	1aca      	subs	r2, r1, r3
 80169da:	4b09      	ldr	r3, [pc, #36]	; (8016a00 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 80169dc:	5c9b      	ldrb	r3, [r3, r2]
 80169de:	4298      	cmp	r0, r3
 80169e0:	d001      	beq.n	80169e6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 80169e2:	2300      	movs	r3, #0
 80169e4:	e004      	b.n	80169f0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	3301      	adds	r3, #1
 80169ea:	60fb      	str	r3, [r7, #12]
 80169ec:	e7e5      	b.n	80169ba <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 80169ee:	2301      	movs	r3, #1
}
 80169f0:	4618      	mov	r0, r3
 80169f2:	3714      	adds	r7, #20
 80169f4:	46bd      	mov	sp, r7
 80169f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fa:	4770      	bx	lr
 80169fc:	aaaaaaab 	.word	0xaaaaaaab
 8016a00:	080283f0 	.word	0x080283f0

08016a04 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b084      	sub	sp, #16
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	60f8      	str	r0, [r7, #12]
 8016a0c:	60b9      	str	r1, [r7, #8]
 8016a0e:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8016a10:	68ba      	ldr	r2, [r7, #8]
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	429a      	cmp	r2, r3
 8016a16:	d101      	bne.n	8016a1c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8016a18:	2301      	movs	r3, #1
 8016a1a:	e013      	b.n	8016a44 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016a22:	781b      	ldrb	r3, [r3, #0]
 8016a24:	f083 0301 	eor.w	r3, r3, #1
 8016a28:	b2db      	uxtb	r3, r3
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d001      	beq.n	8016a32 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8016a2e:	2301      	movs	r3, #1
 8016a30:	e008      	b.n	8016a44 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	331c      	adds	r3, #28
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	68b9      	ldr	r1, [r7, #8]
 8016a3c:	6878      	ldr	r0, [r7, #4]
 8016a3e:	4798      	blx	r3
 8016a40:	4603      	mov	r3, r0
 8016a42:	bf00      	nop
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	3710      	adds	r7, #16
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}

08016a4c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8016a4c:	b590      	push	{r4, r7, lr}
 8016a4e:	b087      	sub	sp, #28
 8016a50:	af02      	add	r7, sp, #8
 8016a52:	60f8      	str	r0, [r7, #12]
 8016a54:	60b9      	str	r1, [r7, #8]
 8016a56:	607a      	str	r2, [r7, #4]
 8016a58:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8016a5a:	68bb      	ldr	r3, [r7, #8]
 8016a5c:	695a      	ldr	r2, [r3, #20]
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	695b      	ldr	r3, [r3, #20]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	3328      	adds	r3, #40	; 0x28
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	4610      	mov	r0, r2
 8016a6a:	4798      	blx	r3
 8016a6c:	4604      	mov	r4, r0
 8016a6e:	6a3b      	ldr	r3, [r7, #32]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	3328      	adds	r3, #40	; 0x28
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	6a38      	ldr	r0, [r7, #32]
 8016a78:	4798      	blx	r3
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	461a      	mov	r2, r3
 8016a7e:	4621      	mov	r1, r4
 8016a80:	68f8      	ldr	r0, [r7, #12]
 8016a82:	f7ff ffbf 	bl	8016a04 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8016a86:	4603      	mov	r3, r0
 8016a88:	f083 0301 	eor.w	r3, r3, #1
 8016a8c:	b2db      	uxtb	r3, r3
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d014      	beq.n	8016abc <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	f103 040c 	add.w	r4, r3, #12
 8016a98:	6a3b      	ldr	r3, [r7, #32]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	3328      	adds	r3, #40	; 0x28
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	6a38      	ldr	r0, [r7, #32]
 8016aa2:	4798      	blx	r3
 8016aa4:	4602      	mov	r2, r0
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	685b      	ldr	r3, [r3, #4]
 8016aaa:	9301      	str	r3, [sp, #4]
 8016aac:	9200      	str	r2, [sp, #0]
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	687a      	ldr	r2, [r7, #4]
 8016ab2:	68b9      	ldr	r1, [r7, #8]
 8016ab4:	4620      	mov	r0, r4
 8016ab6:	f7ff fb4d 	bl	8016154 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8016aba:	e02e      	b.n	8016b1a <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8016abc:	68bb      	ldr	r3, [r7, #8]
 8016abe:	689a      	ldr	r2, [r3, #8]
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	4413      	add	r3, r2
 8016ac6:	4619      	mov	r1, r3
 8016ac8:	68f8      	ldr	r0, [r7, #12]
 8016aca:	f7ff ff6f 	bl	80169ac <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	f083 0301 	eor.w	r3, r3, #1
 8016ad4:	b2db      	uxtb	r3, r3
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d014      	beq.n	8016b04 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	f103 040c 	add.w	r4, r3, #12
 8016ae0:	6a3b      	ldr	r3, [r7, #32]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	3328      	adds	r3, #40	; 0x28
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	6a38      	ldr	r0, [r7, #32]
 8016aea:	4798      	blx	r3
 8016aec:	4602      	mov	r2, r0
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	685b      	ldr	r3, [r3, #4]
 8016af2:	9301      	str	r3, [sp, #4]
 8016af4:	9200      	str	r2, [sp, #0]
 8016af6:	683b      	ldr	r3, [r7, #0]
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	68b9      	ldr	r1, [r7, #8]
 8016afc:	4620      	mov	r0, r4
 8016afe:	f7ff fb4f 	bl	80161a0 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8016b02:	e00a      	b.n	8016b1a <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8016b04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d006      	beq.n	8016b1a <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8016b0c:	6a3b      	ldr	r3, [r7, #32]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	3324      	adds	r3, #36	; 0x24
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	68b9      	ldr	r1, [r7, #8]
 8016b16:	6a38      	ldr	r0, [r7, #32]
 8016b18:	4798      	blx	r3
}
 8016b1a:	bf00      	nop
 8016b1c:	3714      	adds	r7, #20
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd90      	pop	{r4, r7, pc}
	...

08016b24 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b086      	sub	sp, #24
 8016b28:	af02      	add	r7, sp, #8
 8016b2a:	60f8      	str	r0, [r7, #12]
 8016b2c:	60b9      	str	r1, [r7, #8]
 8016b2e:	607a      	str	r2, [r7, #4]
 8016b30:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8016b32:	4b08      	ldr	r3, [pc, #32]	; (8016b54 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8016b34:	681a      	ldr	r2, [r3, #0]
 8016b36:	78fb      	ldrb	r3, [r7, #3]
 8016b38:	9301      	str	r3, [sp, #4]
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	9300      	str	r3, [sp, #0]
 8016b3e:	4613      	mov	r3, r2
 8016b40:	687a      	ldr	r2, [r7, #4]
 8016b42:	68b9      	ldr	r1, [r7, #8]
 8016b44:	68f8      	ldr	r0, [r7, #12]
 8016b46:	f000 f87f 	bl	8016c48 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8016b4a:	4603      	mov	r3, r0
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	3710      	adds	r7, #16
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}
 8016b54:	20000100 	.word	0x20000100

08016b58 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016b58:	b590      	push	{r4, r7, lr}
 8016b5a:	b085      	sub	sp, #20
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	60f8      	str	r0, [r7, #12]
 8016b60:	60b9      	str	r1, [r7, #8]
 8016b62:	607a      	str	r2, [r7, #4]
 8016b64:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8016b66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d00e      	beq.n	8016b8c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	3308      	adds	r3, #8
 8016b74:	681c      	ldr	r4, [r3, #0]
 8016b76:	6879      	ldr	r1, [r7, #4]
 8016b78:	68f8      	ldr	r0, [r7, #12]
 8016b7a:	f7ff fe3f 	bl	80167fc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016b7e:	4601      	mov	r1, r0
 8016b80:	6a3b      	ldr	r3, [r7, #32]
 8016b82:	683a      	ldr	r2, [r7, #0]
 8016b84:	68b8      	ldr	r0, [r7, #8]
 8016b86:	47a0      	blx	r4
 8016b88:	4603      	mov	r3, r0
 8016b8a:	e010      	b.n	8016bae <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	3308      	adds	r3, #8
 8016b92:	681c      	ldr	r4, [r3, #0]
 8016b94:	6879      	ldr	r1, [r7, #4]
 8016b96:	68f8      	ldr	r0, [r7, #12]
 8016b98:	f7ff fe30 	bl	80167fc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	f103 0120 	add.w	r1, r3, #32
 8016ba2:	6a3b      	ldr	r3, [r7, #32]
 8016ba4:	683a      	ldr	r2, [r7, #0]
 8016ba6:	68b8      	ldr	r0, [r7, #8]
 8016ba8:	47a0      	blx	r4
 8016baa:	4603      	mov	r3, r0
 8016bac:	bf00      	nop
}
 8016bae:	4618      	mov	r0, r3
 8016bb0:	3714      	adds	r7, #20
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd90      	pop	{r4, r7, pc}
	...

08016bb8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8016bb8:	b590      	push	{r4, r7, lr}
 8016bba:	b085      	sub	sp, #20
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	60f8      	str	r0, [r7, #12]
 8016bc0:	60b9      	str	r1, [r7, #8]
 8016bc2:	607a      	str	r2, [r7, #4]
 8016bc4:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8016bc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d00b      	beq.n	8016be6 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8016bce:	4b0e      	ldr	r3, [pc, #56]	; (8016c08 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8016bd0:	681c      	ldr	r4, [r3, #0]
 8016bd2:	6839      	ldr	r1, [r7, #0]
 8016bd4:	68f8      	ldr	r0, [r7, #12]
 8016bd6:	f7ff fe11 	bl	80167fc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	4619      	mov	r1, r3
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	47a0      	blx	r4
 8016be2:	4603      	mov	r3, r0
 8016be4:	e00c      	b.n	8016c00 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8016be6:	4b08      	ldr	r3, [pc, #32]	; (8016c08 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8016be8:	681c      	ldr	r4, [r3, #0]
 8016bea:	6839      	ldr	r1, [r7, #0]
 8016bec:	68f8      	ldr	r0, [r7, #12]
 8016bee:	f7ff fe05 	bl	80167fc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	3320      	adds	r3, #32
 8016bf6:	4619      	mov	r1, r3
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	47a0      	blx	r4
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	bf00      	nop
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3714      	adds	r7, #20
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd90      	pop	{r4, r7, pc}
 8016c08:	200000cc 	.word	0x200000cc

08016c0c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b084      	sub	sp, #16
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	60f8      	str	r0, [r7, #12]
 8016c14:	60b9      	str	r1, [r7, #8]
 8016c16:	607a      	str	r2, [r7, #4]
 8016c18:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8016c1a:	7e3b      	ldrb	r3, [r7, #24]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d008      	beq.n	8016c32 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	3320      	adds	r3, #32
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	2120      	movs	r1, #32
 8016c2a:	68b8      	ldr	r0, [r7, #8]
 8016c2c:	4798      	blx	r3
 8016c2e:	4603      	mov	r3, r0
 8016c30:	e006      	b.n	8016c40 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8016c32:	687a      	ldr	r2, [r7, #4]
 8016c34:	6839      	ldr	r1, [r7, #0]
 8016c36:	68f8      	ldr	r0, [r7, #12]
 8016c38:	f7ff fdef 	bl	801681a <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8016c3c:	4603      	mov	r3, r0
 8016c3e:	bf00      	nop
}
 8016c40:	4618      	mov	r0, r3
 8016c42:	3710      	adds	r7, #16
 8016c44:	46bd      	mov	sp, r7
 8016c46:	bd80      	pop	{r7, pc}

08016c48 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b08a      	sub	sp, #40	; 0x28
 8016c4c:	af04      	add	r7, sp, #16
 8016c4e:	60f8      	str	r0, [r7, #12]
 8016c50:	60b9      	str	r1, [r7, #8]
 8016c52:	607a      	str	r2, [r7, #4]
 8016c54:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8016c56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016c5a:	9301      	str	r3, [sp, #4]
 8016c5c:	6a3b      	ldr	r3, [r7, #32]
 8016c5e:	9300      	str	r3, [sp, #0]
 8016c60:	683b      	ldr	r3, [r7, #0]
 8016c62:	687a      	ldr	r2, [r7, #4]
 8016c64:	68b9      	ldr	r1, [r7, #8]
 8016c66:	68f8      	ldr	r0, [r7, #12]
 8016c68:	f7ff ff76 	bl	8016b58 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8016c6c:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8016c6e:	697b      	ldr	r3, [r7, #20]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d101      	bne.n	8016c78 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8016c74:	2300      	movs	r3, #0
 8016c76:	e017      	b.n	8016ca8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8016c78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016c7c:	9300      	str	r3, [sp, #0]
 8016c7e:	697b      	ldr	r3, [r7, #20]
 8016c80:	687a      	ldr	r2, [r7, #4]
 8016c82:	68b9      	ldr	r1, [r7, #8]
 8016c84:	68f8      	ldr	r0, [r7, #12]
 8016c86:	f7ff ffc1 	bl	8016c0c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8016c8a:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8016c8c:	6a3b      	ldr	r3, [r7, #32]
 8016c8e:	9302      	str	r3, [sp, #8]
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	9301      	str	r3, [sp, #4]
 8016c94:	68bb      	ldr	r3, [r7, #8]
 8016c96:	9300      	str	r3, [sp, #0]
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	697a      	ldr	r2, [r7, #20]
 8016c9c:	6939      	ldr	r1, [r7, #16]
 8016c9e:	68f8      	ldr	r0, [r7, #12]
 8016ca0:	f7ff fdcc 	bl	801683c <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	689b      	ldr	r3, [r3, #8]
}
 8016ca8:	4618      	mov	r0, r3
 8016caa:	3718      	adds	r7, #24
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}

08016cb0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016cb0:	b590      	push	{r4, r7, lr}
 8016cb2:	b089      	sub	sp, #36	; 0x24
 8016cb4:	af02      	add	r7, sp, #8
 8016cb6:	60f8      	str	r0, [r7, #12]
 8016cb8:	60b9      	str	r1, [r7, #8]
 8016cba:	607a      	str	r2, [r7, #4]
 8016cbc:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d03a      	beq.n	8016d3a <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016cca:	331c      	adds	r3, #28
 8016ccc:	6879      	ldr	r1, [r7, #4]
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7ff fc13 	bl	80164fa <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8016cd4:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d10b      	bne.n	8016cf4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	f103 000c 	add.w	r0, r3, #12
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	685b      	ldr	r3, [r3, #4]
 8016ce6:	9300      	str	r3, [sp, #0]
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cec:	6839      	ldr	r1, [r7, #0]
 8016cee:	f7ff fa0d 	bl	801610c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8016cf2:	e023      	b.n	8016d3c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8016cf4:	68b8      	ldr	r0, [r7, #8]
 8016cf6:	f7f8 ff95 	bl	800fc24 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	f083 0301 	eor.w	r3, r3, #1
 8016d00:	b2db      	uxtb	r3, r3
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d01a      	beq.n	8016d3c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8016d0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016d10:	9301      	str	r3, [sp, #4]
 8016d12:	68bb      	ldr	r3, [r7, #8]
 8016d14:	9300      	str	r3, [sp, #0]
 8016d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d18:	683a      	ldr	r2, [r7, #0]
 8016d1a:	6979      	ldr	r1, [r7, #20]
 8016d1c:	68f8      	ldr	r0, [r7, #12]
 8016d1e:	f7ff fe95 	bl	8016a4c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	330c      	adds	r3, #12
 8016d28:	681c      	ldr	r4, [r3, #0]
 8016d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d2c:	9300      	str	r3, [sp, #0]
 8016d2e:	683b      	ldr	r3, [r7, #0]
 8016d30:	693a      	ldr	r2, [r7, #16]
 8016d32:	6879      	ldr	r1, [r7, #4]
 8016d34:	68b8      	ldr	r0, [r7, #8]
 8016d36:	47a0      	blx	r4
 8016d38:	e000      	b.n	8016d3c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8016d3a:	bf00      	nop
    }
}
 8016d3c:	371c      	adds	r7, #28
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	bd90      	pop	{r4, r7, pc}
	...

08016d44 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b086      	sub	sp, #24
 8016d48:	af02      	add	r7, sp, #8
 8016d4a:	60f8      	str	r0, [r7, #12]
 8016d4c:	60b9      	str	r1, [r7, #8]
 8016d4e:	607a      	str	r2, [r7, #4]
 8016d50:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8016d52:	4b08      	ldr	r3, [pc, #32]	; (8016d74 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8016d54:	681a      	ldr	r2, [r3, #0]
 8016d56:	78fb      	ldrb	r3, [r7, #3]
 8016d58:	9301      	str	r3, [sp, #4]
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	9300      	str	r3, [sp, #0]
 8016d5e:	4613      	mov	r3, r2
 8016d60:	687a      	ldr	r2, [r7, #4]
 8016d62:	68b9      	ldr	r1, [r7, #8]
 8016d64:	68f8      	ldr	r0, [r7, #12]
 8016d66:	f7ff ffa3 	bl	8016cb0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8016d6a:	bf00      	nop
 8016d6c:	3710      	adds	r7, #16
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	bd80      	pop	{r7, pc}
 8016d72:	bf00      	nop
 8016d74:	20000100 	.word	0x20000100

08016d78 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b08a      	sub	sp, #40	; 0x28
 8016d7c:	af04      	add	r7, sp, #16
 8016d7e:	60f8      	str	r0, [r7, #12]
 8016d80:	60b9      	str	r1, [r7, #8]
 8016d82:	607a      	str	r2, [r7, #4]
 8016d84:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d023      	beq.n	8016dd4 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d92:	331c      	adds	r3, #28
 8016d94:	6879      	ldr	r1, [r7, #4]
 8016d96:	4618      	mov	r0, r3
 8016d98:	f7ff fbaf 	bl	80164fa <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8016d9c:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d10c      	bne.n	8016dbe <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	f103 000c 	add.w	r0, r3, #12
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	685b      	ldr	r3, [r3, #4]
 8016dae:	9300      	str	r3, [sp, #0]
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016db4:	6a39      	ldr	r1, [r7, #32]
 8016db6:	f7ff f9a9 	bl	801610c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8016dba:	2300      	movs	r3, #0
 8016dbc:	e019      	b.n	8016df2 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8016dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016dc2:	9301      	str	r3, [sp, #4]
 8016dc4:	68bb      	ldr	r3, [r7, #8]
 8016dc6:	9300      	str	r3, [sp, #0]
 8016dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dca:	6a3a      	ldr	r2, [r7, #32]
 8016dcc:	6979      	ldr	r1, [r7, #20]
 8016dce:	68f8      	ldr	r0, [r7, #12]
 8016dd0:	f7ff fe3c 	bl	8016a4c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8016dd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016dd8:	9302      	str	r3, [sp, #8]
 8016dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ddc:	9301      	str	r3, [sp, #4]
 8016dde:	6a3b      	ldr	r3, [r7, #32]
 8016de0:	9300      	str	r3, [sp, #0]
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	687a      	ldr	r2, [r7, #4]
 8016de6:	68b9      	ldr	r1, [r7, #8]
 8016de8:	68f8      	ldr	r0, [r7, #12]
 8016dea:	f7ff fd62 	bl	80168b2 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8016dee:	4603      	mov	r3, r0
 8016df0:	bf00      	nop
}
 8016df2:	4618      	mov	r0, r3
 8016df4:	3718      	adds	r7, #24
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}

08016dfa <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8016dfa:	b580      	push	{r7, lr}
 8016dfc:	b084      	sub	sp, #16
 8016dfe:	af00      	add	r7, sp, #0
 8016e00:	6078      	str	r0, [r7, #4]
 8016e02:	460b      	mov	r3, r1
 8016e04:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e0c:	331c      	adds	r3, #28
 8016e0e:	78fa      	ldrb	r2, [r7, #3]
 8016e10:	4611      	mov	r1, r2
 8016e12:	4618      	mov	r0, r3
 8016e14:	f7ff fbc0 	bl	8016598 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8016e18:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	330c      	adds	r3, #12
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7ff f882 	bl	8015f28 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d010      	beq.n	8016e4c <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	330c      	adds	r3, #12
 8016e2e:	68f9      	ldr	r1, [r7, #12]
 8016e30:	4618      	mov	r0, r3
 8016e32:	f7ff f897 	bl	8015f64 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e3c:	331c      	adds	r3, #28
 8016e3e:	78fa      	ldrb	r2, [r7, #3]
 8016e40:	68f9      	ldr	r1, [r7, #12]
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7ff fbcb 	bl	80165de <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016e48:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8016e4a:	e7eb      	b.n	8016e24 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	330c      	adds	r3, #12
 8016e50:	4618      	mov	r0, r3
 8016e52:	f7ff f8e7 	bl	8016024 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8016e56:	bf00      	nop
 8016e58:	3710      	adds	r7, #16
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}

08016e5e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8016e5e:	b580      	push	{r7, lr}
 8016e60:	b082      	sub	sp, #8
 8016e62:	af00      	add	r7, sp, #0
 8016e64:	6078      	str	r0, [r7, #4]
 8016e66:	460b      	mov	r3, r1
 8016e68:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8016e6a:	78fb      	ldrb	r3, [r7, #3]
 8016e6c:	4619      	mov	r1, r3
 8016e6e:	6878      	ldr	r0, [r7, #4]
 8016e70:	f7ff ffc3 	bl	8016dfa <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	330c      	adds	r3, #12
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7ff f9e5 	bl	8016248 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8016e7e:	4603      	mov	r3, r0
}
 8016e80:	4618      	mov	r0, r3
 8016e82:	3708      	adds	r7, #8
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bd80      	pop	{r7, pc}

08016e88 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b084      	sub	sp, #16
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e96:	331c      	adds	r3, #28
 8016e98:	2103      	movs	r1, #3
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f7ff fb7c 	bl	8016598 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8016ea0:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d011      	beq.n	8016ecc <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	7e1b      	ldrb	r3, [r3, #24]
 8016eac:	2b03      	cmp	r3, #3
 8016eae:	d102      	bne.n	8016eb6 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	2202      	movs	r2, #2
 8016eb4:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ebc:	331c      	adds	r3, #28
 8016ebe:	2203      	movs	r2, #3
 8016ec0:	68f9      	ldr	r1, [r7, #12]
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7ff fb8b 	bl	80165de <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016ec8:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8016eca:	e7ea      	b.n	8016ea2 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8016ecc:	bf00      	nop
 8016ece:	3710      	adds	r7, #16
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}

08016ed4 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b082      	sub	sp, #8
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	6078      	str	r0, [r7, #4]
 8016edc:	460b      	mov	r3, r1
 8016ede:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ee6:	331c      	adds	r3, #28
 8016ee8:	78fa      	ldrb	r2, [r7, #3]
 8016eea:	4611      	mov	r1, r2
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7ff fb30 	bl	8016552 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8016ef2:	4603      	mov	r3, r0
}
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	3708      	adds	r7, #8
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}

08016efc <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b084      	sub	sp, #16
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	60f8      	str	r0, [r7, #12]
 8016f04:	60b9      	str	r1, [r7, #8]
 8016f06:	607a      	str	r2, [r7, #4]
 8016f08:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	68b9      	ldr	r1, [r7, #8]
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7f5 fb13 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	3308      	adds	r3, #8
 8016f18:	6879      	ldr	r1, [r7, #4]
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f7f5 fb0d 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	683a      	ldr	r2, [r7, #0]
 8016f24:	611a      	str	r2, [r3, #16]
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	2200      	movs	r2, #0
 8016f2a:	615a      	str	r2, [r3, #20]
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	4618      	mov	r0, r3
 8016f30:	3710      	adds	r7, #16
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}

08016f36 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8016f36:	b480      	push	{r7}
 8016f38:	b083      	sub	sp, #12
 8016f3a:	af00      	add	r7, sp, #0
 8016f3c:	6078      	str	r0, [r7, #4]
 8016f3e:	6039      	str	r1, [r7, #0]
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	4618      	mov	r0, r3
 8016f44:	370c      	adds	r7, #12
 8016f46:	46bd      	mov	sp, r7
 8016f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4c:	4770      	bx	lr

08016f4e <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8016f4e:	b480      	push	{r7}
 8016f50:	b083      	sub	sp, #12
 8016f52:	af00      	add	r7, sp, #0
 8016f54:	6078      	str	r0, [r7, #4]
 8016f56:	6039      	str	r1, [r7, #0]
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	370c      	adds	r7, #12
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f64:	4770      	bx	lr

08016f66 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8016f66:	b480      	push	{r7}
 8016f68:	b085      	sub	sp, #20
 8016f6a:	af00      	add	r7, sp, #0
 8016f6c:	60f8      	str	r0, [r7, #12]
 8016f6e:	60b9      	str	r1, [r7, #8]
 8016f70:	4613      	mov	r3, r2
 8016f72:	71fb      	strb	r3, [r7, #7]
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	4618      	mov	r0, r3
 8016f78:	3714      	adds	r7, #20
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f80:	4770      	bx	lr

08016f82 <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8016f82:	b480      	push	{r7}
 8016f84:	b085      	sub	sp, #20
 8016f86:	af00      	add	r7, sp, #0
 8016f88:	60f8      	str	r0, [r7, #12]
 8016f8a:	60b9      	str	r1, [r7, #8]
 8016f8c:	607a      	str	r2, [r7, #4]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	4618      	mov	r0, r3
 8016f92:	3714      	adds	r7, #20
 8016f94:	46bd      	mov	sp, r7
 8016f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9a:	4770      	bx	lr

08016f9c <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8016f9c:	b480      	push	{r7}
 8016f9e:	b085      	sub	sp, #20
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	60f8      	str	r0, [r7, #12]
 8016fa4:	60b9      	str	r1, [r7, #8]
 8016fa6:	607a      	str	r2, [r7, #4]
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	4618      	mov	r0, r3
 8016fac:	3714      	adds	r7, #20
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb4:	4770      	bx	lr

08016fb6 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8016fb6:	b480      	push	{r7}
 8016fb8:	b085      	sub	sp, #20
 8016fba:	af00      	add	r7, sp, #0
 8016fbc:	60f8      	str	r0, [r7, #12]
 8016fbe:	60b9      	str	r1, [r7, #8]
 8016fc0:	607a      	str	r2, [r7, #4]
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	3714      	adds	r7, #20
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fce:	4770      	bx	lr

08016fd0 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8016fd0:	b480      	push	{r7}
 8016fd2:	b085      	sub	sp, #20
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	60f8      	str	r0, [r7, #12]
 8016fd8:	60b9      	str	r1, [r7, #8]
 8016fda:	607a      	str	r2, [r7, #4]
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	4618      	mov	r0, r3
 8016fe0:	3714      	adds	r7, #20
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe8:	4770      	bx	lr

08016fea <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8016fea:	b480      	push	{r7}
 8016fec:	b085      	sub	sp, #20
 8016fee:	af00      	add	r7, sp, #0
 8016ff0:	60f8      	str	r0, [r7, #12]
 8016ff2:	60b9      	str	r1, [r7, #8]
 8016ff4:	4639      	mov	r1, r7
 8016ff6:	e881 000c 	stmia.w	r1, {r2, r3}
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3714      	adds	r7, #20
 8017000:	46bd      	mov	sp, r7
 8017002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017006:	4770      	bx	lr

08017008 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8017008:	b480      	push	{r7}
 801700a:	b085      	sub	sp, #20
 801700c:	af00      	add	r7, sp, #0
 801700e:	60f8      	str	r0, [r7, #12]
 8017010:	60b9      	str	r1, [r7, #8]
 8017012:	4639      	mov	r1, r7
 8017014:	e881 000c 	stmia.w	r1, {r2, r3}
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	4618      	mov	r0, r3
 801701c:	3714      	adds	r7, #20
 801701e:	46bd      	mov	sp, r7
 8017020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017024:	4770      	bx	lr

08017026 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8017026:	b480      	push	{r7}
 8017028:	b085      	sub	sp, #20
 801702a:	af00      	add	r7, sp, #0
 801702c:	60f8      	str	r0, [r7, #12]
 801702e:	60b9      	str	r1, [r7, #8]
 8017030:	ed87 0b00 	vstr	d0, [r7]
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	4618      	mov	r0, r3
 8017038:	3714      	adds	r7, #20
 801703a:	46bd      	mov	sp, r7
 801703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017040:	4770      	bx	lr

08017042 <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8017042:	b480      	push	{r7}
 8017044:	b085      	sub	sp, #20
 8017046:	af00      	add	r7, sp, #0
 8017048:	60f8      	str	r0, [r7, #12]
 801704a:	60b9      	str	r1, [r7, #8]
 801704c:	607a      	str	r2, [r7, #4]
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	4618      	mov	r0, r3
 8017052:	3714      	adds	r7, #20
 8017054:	46bd      	mov	sp, r7
 8017056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705a:	4770      	bx	lr

0801705c <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801705c:	b480      	push	{r7}
 801705e:	b085      	sub	sp, #20
 8017060:	af00      	add	r7, sp, #0
 8017062:	60f8      	str	r0, [r7, #12]
 8017064:	60b9      	str	r1, [r7, #8]
 8017066:	607a      	str	r2, [r7, #4]
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	4618      	mov	r0, r3
 801706c:	3714      	adds	r7, #20
 801706e:	46bd      	mov	sp, r7
 8017070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017074:	4770      	bx	lr

08017076 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8017076:	b480      	push	{r7}
 8017078:	b085      	sub	sp, #20
 801707a:	af00      	add	r7, sp, #0
 801707c:	60f8      	str	r0, [r7, #12]
 801707e:	60b9      	str	r1, [r7, #8]
 8017080:	607a      	str	r2, [r7, #4]
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	4618      	mov	r0, r3
 8017086:	3714      	adds	r7, #20
 8017088:	46bd      	mov	sp, r7
 801708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708e:	4770      	bx	lr

08017090 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8017090:	b480      	push	{r7}
 8017092:	b085      	sub	sp, #20
 8017094:	af00      	add	r7, sp, #0
 8017096:	60f8      	str	r0, [r7, #12]
 8017098:	60b9      	str	r1, [r7, #8]
 801709a:	607a      	str	r2, [r7, #4]
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	4618      	mov	r0, r3
 80170a0:	3714      	adds	r7, #20
 80170a2:	46bd      	mov	sp, r7
 80170a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a8:	4770      	bx	lr

080170aa <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 80170aa:	b480      	push	{r7}
 80170ac:	b085      	sub	sp, #20
 80170ae:	af00      	add	r7, sp, #0
 80170b0:	60f8      	str	r0, [r7, #12]
 80170b2:	60b9      	str	r1, [r7, #8]
 80170b4:	607a      	str	r2, [r7, #4]
 80170b6:	603b      	str	r3, [r7, #0]
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	4618      	mov	r0, r3
 80170bc:	3714      	adds	r7, #20
 80170be:	46bd      	mov	sp, r7
 80170c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c4:	4770      	bx	lr

080170c6 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80170c6:	b480      	push	{r7}
 80170c8:	b085      	sub	sp, #20
 80170ca:	af00      	add	r7, sp, #0
 80170cc:	60f8      	str	r0, [r7, #12]
 80170ce:	60b9      	str	r1, [r7, #8]
 80170d0:	607a      	str	r2, [r7, #4]
 80170d2:	603b      	str	r3, [r7, #0]
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	4618      	mov	r0, r3
 80170d8:	3714      	adds	r7, #20
 80170da:	46bd      	mov	sp, r7
 80170dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e0:	4770      	bx	lr

080170e2 <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 80170e2:	b480      	push	{r7}
 80170e4:	b085      	sub	sp, #20
 80170e6:	af00      	add	r7, sp, #0
 80170e8:	60f8      	str	r0, [r7, #12]
 80170ea:	60b9      	str	r1, [r7, #8]
 80170ec:	607a      	str	r2, [r7, #4]
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	4618      	mov	r0, r3
 80170f2:	3714      	adds	r7, #20
 80170f4:	46bd      	mov	sp, r7
 80170f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fa:	4770      	bx	lr

080170fc <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 80170fc:	b480      	push	{r7}
 80170fe:	b085      	sub	sp, #20
 8017100:	af00      	add	r7, sp, #0
 8017102:	60f8      	str	r0, [r7, #12]
 8017104:	60b9      	str	r1, [r7, #8]
 8017106:	607a      	str	r2, [r7, #4]
 8017108:	603b      	str	r3, [r7, #0]
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	4618      	mov	r0, r3
 801710e:	3714      	adds	r7, #20
 8017110:	46bd      	mov	sp, r7
 8017112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017116:	4770      	bx	lr

08017118 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8017118:	b480      	push	{r7}
 801711a:	b083      	sub	sp, #12
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
 8017120:	2300      	movs	r3, #0
 8017122:	4618      	mov	r0, r3
 8017124:	370c      	adds	r7, #12
 8017126:	46bd      	mov	sp, r7
 8017128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712c:	4770      	bx	lr
	...

08017130 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8017130:	b580      	push	{r7, lr}
 8017132:	b084      	sub	sp, #16
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
 8017138:	6039      	str	r1, [r7, #0]
 801713a:	f107 0308 	add.w	r3, r7, #8
 801713e:	4909      	ldr	r1, [pc, #36]	; (8017164 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8017140:	4618      	mov	r0, r3
 8017142:	f7f5 f9a6 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8017146:	f107 0308 	add.w	r3, r7, #8
 801714a:	4619      	mov	r1, r3
 801714c:	6878      	ldr	r0, [r7, #4]
 801714e:	f005 fec5 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
 8017152:	f107 0308 	add.w	r3, r7, #8
 8017156:	4618      	mov	r0, r3
 8017158:	f7f5 fd53 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	3710      	adds	r7, #16
 8017160:	46bd      	mov	sp, r7
 8017162:	bd80      	pop	{r7, pc}
 8017164:	080257ec 	.word	0x080257ec

08017168 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8017168:	b480      	push	{r7}
 801716a:	b083      	sub	sp, #12
 801716c:	af00      	add	r7, sp, #0
 801716e:	6078      	str	r0, [r7, #4]
 8017170:	460b      	mov	r3, r1
 8017172:	70fb      	strb	r3, [r7, #3]
 8017174:	78fb      	ldrb	r3, [r7, #3]
 8017176:	4618      	mov	r0, r3
 8017178:	370c      	adds	r7, #12
 801717a:	46bd      	mov	sp, r7
 801717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017180:	4770      	bx	lr

08017182 <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8017182:	b480      	push	{r7}
 8017184:	b083      	sub	sp, #12
 8017186:	af00      	add	r7, sp, #0
 8017188:	6078      	str	r0, [r7, #4]
 801718a:	2300      	movs	r3, #0
 801718c:	4618      	mov	r0, r3
 801718e:	370c      	adds	r7, #12
 8017190:	46bd      	mov	sp, r7
 8017192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017196:	4770      	bx	lr

08017198 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8017198:	b480      	push	{r7}
 801719a:	b083      	sub	sp, #12
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
 80171a0:	2300      	movs	r3, #0
 80171a2:	4618      	mov	r0, r3
 80171a4:	370c      	adds	r7, #12
 80171a6:	46bd      	mov	sp, r7
 80171a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ac:	4770      	bx	lr

080171ae <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 80171ae:	b480      	push	{r7}
 80171b0:	b083      	sub	sp, #12
 80171b2:	af00      	add	r7, sp, #0
 80171b4:	6078      	str	r0, [r7, #4]
 80171b6:	6039      	str	r1, [r7, #0]
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	4618      	mov	r0, r3
 80171bc:	370c      	adds	r7, #12
 80171be:	46bd      	mov	sp, r7
 80171c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c4:	4770      	bx	lr

080171c6 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 80171c6:	b480      	push	{r7}
 80171c8:	b083      	sub	sp, #12
 80171ca:	af00      	add	r7, sp, #0
 80171cc:	6078      	str	r0, [r7, #4]
 80171ce:	2300      	movs	r3, #0
 80171d0:	4618      	mov	r0, r3
 80171d2:	370c      	adds	r7, #12
 80171d4:	46bd      	mov	sp, r7
 80171d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171da:	4770      	bx	lr

080171dc <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 80171dc:	b480      	push	{r7}
 80171de:	b083      	sub	sp, #12
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
 80171e4:	6039      	str	r1, [r7, #0]
 80171e6:	683b      	ldr	r3, [r7, #0]
 80171e8:	4618      	mov	r0, r3
 80171ea:	370c      	adds	r7, #12
 80171ec:	46bd      	mov	sp, r7
 80171ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f2:	4770      	bx	lr

080171f4 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 80171f4:	b480      	push	{r7}
 80171f6:	b083      	sub	sp, #12
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
 80171fc:	2300      	movs	r3, #0
 80171fe:	4618      	mov	r0, r3
 8017200:	370c      	adds	r7, #12
 8017202:	46bd      	mov	sp, r7
 8017204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017208:	4770      	bx	lr

0801720a <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 801720a:	b480      	push	{r7}
 801720c:	b083      	sub	sp, #12
 801720e:	af00      	add	r7, sp, #0
 8017210:	6078      	str	r0, [r7, #4]
 8017212:	6039      	str	r1, [r7, #0]
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	4618      	mov	r0, r3
 8017218:	370c      	adds	r7, #12
 801721a:	46bd      	mov	sp, r7
 801721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017220:	4770      	bx	lr

08017222 <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8017222:	b580      	push	{r7, lr}
 8017224:	b082      	sub	sp, #8
 8017226:	af00      	add	r7, sp, #0
 8017228:	6078      	str	r0, [r7, #4]
 801722a:	6039      	str	r1, [r7, #0]
 801722c:	2100      	movs	r1, #0
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f7f3 f972 	bl	800a518 <_ZN18cpputest_ulonglongC1Ei>
 8017234:	6878      	ldr	r0, [r7, #4]
 8017236:	3708      	adds	r7, #8
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}

0801723c <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 801723c:	b480      	push	{r7}
 801723e:	b085      	sub	sp, #20
 8017240:	af00      	add	r7, sp, #0
 8017242:	60f8      	str	r0, [r7, #12]
 8017244:	60b9      	str	r1, [r7, #8]
 8017246:	4639      	mov	r1, r7
 8017248:	e881 000c 	stmia.w	r1, {r2, r3}
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	461a      	mov	r2, r3
 8017250:	463b      	mov	r3, r7
 8017252:	cb03      	ldmia	r3!, {r0, r1}
 8017254:	6010      	str	r0, [r2, #0]
 8017256:	6051      	str	r1, [r2, #4]
 8017258:	68f8      	ldr	r0, [r7, #12]
 801725a:	3714      	adds	r7, #20
 801725c:	46bd      	mov	sp, r7
 801725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017262:	4770      	bx	lr

08017264 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8017264:	b580      	push	{r7, lr}
 8017266:	b082      	sub	sp, #8
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
 801726c:	6039      	str	r1, [r7, #0]
 801726e:	2100      	movs	r1, #0
 8017270:	6878      	ldr	r0, [r7, #4]
 8017272:	f7f3 f945 	bl	800a500 <_ZN17cpputest_longlongC1Ei>
 8017276:	6878      	ldr	r0, [r7, #4]
 8017278:	3708      	adds	r7, #8
 801727a:	46bd      	mov	sp, r7
 801727c:	bd80      	pop	{r7, pc}

0801727e <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 801727e:	b480      	push	{r7}
 8017280:	b085      	sub	sp, #20
 8017282:	af00      	add	r7, sp, #0
 8017284:	60f8      	str	r0, [r7, #12]
 8017286:	60b9      	str	r1, [r7, #8]
 8017288:	4639      	mov	r1, r7
 801728a:	e881 000c 	stmia.w	r1, {r2, r3}
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	461a      	mov	r2, r3
 8017292:	463b      	mov	r3, r7
 8017294:	cb03      	ldmia	r3!, {r0, r1}
 8017296:	6010      	str	r0, [r2, #0]
 8017298:	6051      	str	r1, [r2, #4]
 801729a:	68f8      	ldr	r0, [r7, #12]
 801729c:	3714      	adds	r7, #20
 801729e:	46bd      	mov	sp, r7
 80172a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a4:	4770      	bx	lr

080172a6 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 80172a6:	b480      	push	{r7}
 80172a8:	b083      	sub	sp, #12
 80172aa:	af00      	add	r7, sp, #0
 80172ac:	6078      	str	r0, [r7, #4]
 80172ae:	2300      	movs	r3, #0
 80172b0:	4618      	mov	r0, r3
 80172b2:	370c      	adds	r7, #12
 80172b4:	46bd      	mov	sp, r7
 80172b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ba:	4770      	bx	lr

080172bc <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 80172bc:	b480      	push	{r7}
 80172be:	b083      	sub	sp, #12
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
 80172c4:	6039      	str	r1, [r7, #0]
 80172c6:	683b      	ldr	r3, [r7, #0]
 80172c8:	4618      	mov	r0, r3
 80172ca:	370c      	adds	r7, #12
 80172cc:	46bd      	mov	sp, r7
 80172ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d2:	4770      	bx	lr

080172d4 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 80172d4:	b480      	push	{r7}
 80172d6:	b083      	sub	sp, #12
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
 80172dc:	f04f 0200 	mov.w	r2, #0
 80172e0:	f04f 0300 	mov.w	r3, #0
 80172e4:	ec43 2b17 	vmov	d7, r2, r3
 80172e8:	eeb0 0a47 	vmov.f32	s0, s14
 80172ec:	eef0 0a67 	vmov.f32	s1, s15
 80172f0:	370c      	adds	r7, #12
 80172f2:	46bd      	mov	sp, r7
 80172f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f8:	4770      	bx	lr

080172fa <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 80172fa:	b480      	push	{r7}
 80172fc:	b085      	sub	sp, #20
 80172fe:	af00      	add	r7, sp, #0
 8017300:	60f8      	str	r0, [r7, #12]
 8017302:	ed87 0b00 	vstr	d0, [r7]
 8017306:	e9d7 2300 	ldrd	r2, r3, [r7]
 801730a:	ec43 2b17 	vmov	d7, r2, r3
 801730e:	eeb0 0a47 	vmov.f32	s0, s14
 8017312:	eef0 0a67 	vmov.f32	s1, s15
 8017316:	3714      	adds	r7, #20
 8017318:	46bd      	mov	sp, r7
 801731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731e:	4770      	bx	lr

08017320 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8017320:	b480      	push	{r7}
 8017322:	b083      	sub	sp, #12
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
 8017328:	4b03      	ldr	r3, [pc, #12]	; (8017338 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 801732a:	4618      	mov	r0, r3
 801732c:	370c      	adds	r7, #12
 801732e:	46bd      	mov	sp, r7
 8017330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017334:	4770      	bx	lr
 8017336:	bf00      	nop
 8017338:	080257ec 	.word	0x080257ec

0801733c <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 801733c:	b480      	push	{r7}
 801733e:	b083      	sub	sp, #12
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
 8017344:	6039      	str	r1, [r7, #0]
 8017346:	683b      	ldr	r3, [r7, #0]
 8017348:	4618      	mov	r0, r3
 801734a:	370c      	adds	r7, #12
 801734c:	46bd      	mov	sp, r7
 801734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017352:	4770      	bx	lr

08017354 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8017354:	b480      	push	{r7}
 8017356:	b083      	sub	sp, #12
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
 801735c:	2300      	movs	r3, #0
 801735e:	4618      	mov	r0, r3
 8017360:	370c      	adds	r7, #12
 8017362:	46bd      	mov	sp, r7
 8017364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017368:	4770      	bx	lr

0801736a <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 801736a:	b480      	push	{r7}
 801736c:	b083      	sub	sp, #12
 801736e:	af00      	add	r7, sp, #0
 8017370:	6078      	str	r0, [r7, #4]
 8017372:	6039      	str	r1, [r7, #0]
 8017374:	683b      	ldr	r3, [r7, #0]
 8017376:	4618      	mov	r0, r3
 8017378:	370c      	adds	r7, #12
 801737a:	46bd      	mov	sp, r7
 801737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017380:	4770      	bx	lr

08017382 <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8017382:	b480      	push	{r7}
 8017384:	b083      	sub	sp, #12
 8017386:	af00      	add	r7, sp, #0
 8017388:	6078      	str	r0, [r7, #4]
 801738a:	2300      	movs	r3, #0
 801738c:	4618      	mov	r0, r3
 801738e:	370c      	adds	r7, #12
 8017390:	46bd      	mov	sp, r7
 8017392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017396:	4770      	bx	lr

08017398 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8017398:	b480      	push	{r7}
 801739a:	b083      	sub	sp, #12
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
 80173a0:	6039      	str	r1, [r7, #0]
 80173a2:	683b      	ldr	r3, [r7, #0]
 80173a4:	4618      	mov	r0, r3
 80173a6:	370c      	adds	r7, #12
 80173a8:	46bd      	mov	sp, r7
 80173aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ae:	4770      	bx	lr

080173b0 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 80173b0:	b480      	push	{r7}
 80173b2:	b083      	sub	sp, #12
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
 80173b8:	2300      	movs	r3, #0
 80173ba:	4618      	mov	r0, r3
 80173bc:	370c      	adds	r7, #12
 80173be:	46bd      	mov	sp, r7
 80173c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c4:	4770      	bx	lr

080173c6 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 80173c6:	b480      	push	{r7}
 80173c8:	b083      	sub	sp, #12
 80173ca:	af00      	add	r7, sp, #0
 80173cc:	6078      	str	r0, [r7, #4]
 80173ce:	6039      	str	r1, [r7, #0]
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	4618      	mov	r0, r3
 80173d4:	370c      	adds	r7, #12
 80173d6:	46bd      	mov	sp, r7
 80173d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173dc:	4770      	bx	lr

080173de <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 80173de:	b480      	push	{r7}
 80173e0:	b083      	sub	sp, #12
 80173e2:	af00      	add	r7, sp, #0
 80173e4:	6078      	str	r0, [r7, #4]
 80173e6:	6039      	str	r1, [r7, #0]
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	4618      	mov	r0, r3
 80173ec:	370c      	adds	r7, #12
 80173ee:	46bd      	mov	sp, r7
 80173f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f4:	4770      	bx	lr
	...

080173f8 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 80173f8:	b480      	push	{r7}
 80173fa:	b083      	sub	sp, #12
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
 8017400:	4a04      	ldr	r2, [pc, #16]	; (8017414 <_ZN14MockActualCallC1Ev+0x1c>)
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	601a      	str	r2, [r3, #0]
{
}
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	4618      	mov	r0, r3
 801740a:	370c      	adds	r7, #12
 801740c:	46bd      	mov	sp, r7
 801740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017412:	4770      	bx	lr
 8017414:	080287f4 	.word	0x080287f4

08017418 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8017418:	b480      	push	{r7}
 801741a:	b083      	sub	sp, #12
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
 8017420:	4a04      	ldr	r2, [pc, #16]	; (8017434 <_ZN14MockActualCallD1Ev+0x1c>)
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	601a      	str	r2, [r3, #0]
{
}
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	4618      	mov	r0, r3
 801742a:	370c      	adds	r7, #12
 801742c:	46bd      	mov	sp, r7
 801742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017432:	4770      	bx	lr
 8017434:	080287f4 	.word	0x080287f4

08017438 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b082      	sub	sp, #8
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
 8017440:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	3304      	adds	r3, #4
 8017446:	6839      	ldr	r1, [r7, #0]
 8017448:	4618      	mov	r0, r3
 801744a:	f7f5 f88e 	bl	800c56a <_ZN12SimpleStringaSERKS_>
}
 801744e:	bf00      	nop
 8017450:	3708      	adds	r7, #8
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}

08017456 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8017456:	b580      	push	{r7, lr}
 8017458:	b082      	sub	sp, #8
 801745a:	af00      	add	r7, sp, #0
 801745c:	6078      	str	r0, [r7, #4]
 801745e:	6039      	str	r1, [r7, #0]
    return functionName_;
 8017460:	683b      	ldr	r3, [r7, #0]
 8017462:	3304      	adds	r3, #4
 8017464:	4619      	mov	r1, r3
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f7f5 f867 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
}
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	3708      	adds	r7, #8
 8017470:	46bd      	mov	sp, r7
 8017472:	bd80      	pop	{r7, pc}

08017474 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8017474:	b580      	push	{r7, lr}
 8017476:	b084      	sub	sp, #16
 8017478:	af00      	add	r7, sp, #0
 801747a:	60f8      	str	r0, [r7, #12]
 801747c:	60b9      	str	r1, [r7, #8]
 801747e:	607a      	str	r2, [r7, #4]
 8017480:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	4618      	mov	r0, r3
 8017486:	f7ff ffb7 	bl	80173f8 <_ZN14MockActualCallC1Ev>
 801748a:	4a17      	ldr	r2, [pc, #92]	; (80174e8 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	601a      	str	r2, [r3, #0]
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	3304      	adds	r3, #4
 8017494:	4915      	ldr	r1, [pc, #84]	; (80174ec <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8017496:	4618      	mov	r0, r3
 8017498:	f7f4 fffb 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	68ba      	ldr	r2, [r7, #8]
 80174a0:	60da      	str	r2, [r3, #12]
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	687a      	ldr	r2, [r7, #4]
 80174a6:	611a      	str	r2, [r3, #16]
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	2202      	movs	r2, #2
 80174ac:	751a      	strb	r2, [r3, #20]
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	2200      	movs	r2, #0
 80174b2:	755a      	strb	r2, [r3, #21]
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	2200      	movs	r2, #0
 80174b8:	619a      	str	r2, [r3, #24]
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	331c      	adds	r3, #28
 80174be:	4618      	mov	r0, r3
 80174c0:	f004 f814 	bl	801b4ec <_ZN21MockExpectedCallsListC1Ev>
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	683a      	ldr	r2, [r7, #0]
 80174c8:	625a      	str	r2, [r3, #36]	; 0x24
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	2200      	movs	r2, #0
 80174ce:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	331c      	adds	r3, #28
 80174d4:	6839      	ldr	r1, [r7, #0]
 80174d6:	4618      	mov	r0, r3
 80174d8:	f004 f986 	bl	801b7e8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	4618      	mov	r0, r3
 80174e0:	3710      	adds	r7, #16
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}
 80174e6:	bf00      	nop
 80174e8:	080286f4 	.word	0x080286f4
 80174ec:	080257ec 	.word	0x080257ec

080174f0 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b082      	sub	sp, #8
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	4a0c      	ldr	r2, [pc, #48]	; (801752c <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 80174fe:	6878      	ldr	r0, [r7, #4]
 8017500:	f001 fae4 	bl	8018acc <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	331c      	adds	r3, #28
 8017508:	4618      	mov	r0, r3
 801750a:	f004 f803 	bl	801b514 <_ZN21MockExpectedCallsListD1Ev>
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	3304      	adds	r3, #4
 8017512:	4618      	mov	r0, r3
 8017514:	f7f5 fb75 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	4618      	mov	r0, r3
 801751c:	f7ff ff7c 	bl	8017418 <_ZN14MockActualCallD1Ev>
}
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	4618      	mov	r0, r3
 8017524:	3708      	adds	r7, #8
 8017526:	46bd      	mov	sp, r7
 8017528:	bd80      	pop	{r7, pc}
 801752a:	bf00      	nop
 801752c:	080286f4 	.word	0x080286f4

08017530 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8017530:	b580      	push	{r7, lr}
 8017532:	b082      	sub	sp, #8
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
}
 8017538:	6878      	ldr	r0, [r7, #4]
 801753a:	f7ff ffd9 	bl	80174f0 <_ZN21MockCheckedActualCallD1Ev>
 801753e:	212c      	movs	r1, #44	; 0x2c
 8017540:	6878      	ldr	r0, [r7, #4]
 8017542:	f7f2 fbf7 	bl	8009d34 <_ZdlPvj>
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	4618      	mov	r0, r3
 801754a:	3708      	adds	r7, #8
 801754c:	46bd      	mov	sp, r7
 801754e:	bd80      	pop	{r7, pc}

08017550 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8017550:	b480      	push	{r7}
 8017552:	b083      	sub	sp, #12
 8017554:	af00      	add	r7, sp, #0
 8017556:	6078      	str	r0, [r7, #4]
 8017558:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	683a      	ldr	r2, [r7, #0]
 801755e:	611a      	str	r2, [r3, #16]
}
 8017560:	bf00      	nop
 8017562:	370c      	adds	r7, #12
 8017564:	46bd      	mov	sp, r7
 8017566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756a:	4770      	bx	lr

0801756c <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b082      	sub	sp, #8
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	691a      	ldr	r2, [r3, #16]
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	691b      	ldr	r3, [r3, #16]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	330c      	adds	r3, #12
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	4610      	mov	r0, r2
 8017584:	4798      	blx	r3
 8017586:	4603      	mov	r3, r0
}
 8017588:	4618      	mov	r0, r3
 801758a:	3708      	adds	r7, #8
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b082      	sub	sp, #8
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
 8017598:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	33c0      	adds	r3, #192	; 0xc0
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	6878      	ldr	r0, [r7, #4]
 80175a4:	4798      	blx	r3
 80175a6:	4603      	mov	r3, r0
 80175a8:	f083 0301 	eor.w	r3, r3, #1
 80175ac:	b2db      	uxtb	r3, r3
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d010      	beq.n	80175d4 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	33ec      	adds	r3, #236	; 0xec
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	2101      	movs	r1, #1
 80175bc:	6878      	ldr	r0, [r7, #4]
 80175be:	4798      	blx	r3
        reporter_->failTest(failure);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	691a      	ldr	r2, [r3, #16]
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	691b      	ldr	r3, [r3, #16]
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	3308      	adds	r3, #8
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	6839      	ldr	r1, [r7, #0]
 80175d0:	4610      	mov	r0, r2
 80175d2:	4798      	blx	r3
    }
}
 80175d4:	bf00      	nop
 80175d6:	3708      	adds	r7, #8
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}

080175dc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 80175dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175e0:	b0bc      	sub	sp, #240	; 0xf0
 80175e2:	af00      	add	r7, sp, #0
 80175e4:	6078      	str	r0, [r7, #4]
 80175e6:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80175f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	f000 80f5 	beq.w	80177e4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	339c      	adds	r3, #156	; 0x9c
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017606:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801760a:	6839      	ldr	r1, [r7, #0]
 801760c:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 801760e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017612:	4618      	mov	r0, r3
 8017614:	f006 fa6c 	bl	801daf0 <_ZNK14MockNamedValue9getCopierEv>
 8017618:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 801761c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017620:	2b00      	cmp	r3, #0
 8017622:	d013      	beq.n	801764c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8017624:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	3308      	adds	r3, #8
 801762c:	681c      	ldr	r4, [r3, #0]
 801762e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017632:	691d      	ldr	r5, [r3, #16]
 8017634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017638:	4618      	mov	r0, r3
 801763a:	f006 fa29 	bl	801da90 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 801763e:	4603      	mov	r3, r0
 8017640:	461a      	mov	r2, r3
 8017642:	4629      	mov	r1, r5
 8017644:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8017648:	47a0      	blx	r4
 801764a:	e0c0      	b.n	80177ce <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 801764c:	2500      	movs	r5, #0
 801764e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017652:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017656:	4611      	mov	r1, r2
 8017658:	4618      	mov	r0, r3
 801765a:	f005 ff0c 	bl	801d476 <_ZNK14MockNamedValue7getTypeEv>
 801765e:	2601      	movs	r6, #1
 8017660:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017664:	4962      	ldr	r1, [pc, #392]	; (80177f0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8017666:	4618      	mov	r0, r3
 8017668:	f7f4 ff13 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801766c:	f04f 0801 	mov.w	r8, #1
 8017670:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8017674:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017678:	4611      	mov	r1, r2
 801767a:	4618      	mov	r0, r3
 801767c:	f7f5 facd 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 8017680:	4603      	mov	r3, r0
 8017682:	2b00      	cmp	r3, #0
 8017684:	d015      	beq.n	80176b2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8017686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801768a:	f103 0408 	add.w	r4, r3, #8
 801768e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017692:	4958      	ldr	r1, [pc, #352]	; (80177f4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8017694:	4618      	mov	r0, r3
 8017696:	f7f4 fefc 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801769a:	2501      	movs	r5, #1
 801769c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80176a0:	4619      	mov	r1, r3
 80176a2:	4620      	mov	r0, r4
 80176a4:	f7f5 fab9 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 80176a8:	4603      	mov	r3, r0
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d001      	beq.n	80176b2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80176ae:	2401      	movs	r4, #1
 80176b0:	e000      	b.n	80176b4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 80176b2:	2400      	movs	r4, #0
 80176b4:	2d00      	cmp	r5, #0
 80176b6:	d004      	beq.n	80176c2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 80176b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80176bc:	4618      	mov	r0, r3
 80176be:	f7f5 faa0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80176c2:	f1b8 0f00 	cmp.w	r8, #0
 80176c6:	d004      	beq.n	80176d2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 80176c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80176cc:	4618      	mov	r0, r3
 80176ce:	f7f5 fa98 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80176d2:	2e00      	cmp	r6, #0
 80176d4:	d004      	beq.n	80176e0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 80176d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80176da:	4618      	mov	r0, r3
 80176dc:	f7f5 fa91 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 80176e0:	2c00      	cmp	r4, #0
 80176e2:	d018      	beq.n	8017716 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 80176e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80176e8:	4618      	mov	r0, r3
 80176ea:	f006 f959 	bl	801d9a0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80176ee:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 80176f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80176f6:	4618      	mov	r0, r3
 80176f8:	f006 f9e2 	bl	801dac0 <_ZNK14MockNamedValue7getSizeEv>
 80176fc:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8017700:	4b3d      	ldr	r3, [pc, #244]	; (80177f8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017708:	6910      	ldr	r0, [r2, #16]
 801770a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801770e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8017712:	4798      	blx	r3
 8017714:	e05b      	b.n	80177ce <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8017716:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801771a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801771e:	4611      	mov	r1, r2
 8017720:	4618      	mov	r0, r3
 8017722:	f005 fe99 	bl	801d458 <_ZNK14MockNamedValue7getNameEv>
 8017726:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801772a:	4934      	ldr	r1, [pc, #208]	; (80177fc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 801772c:	4618      	mov	r0, r3
 801772e:	f7f4 feb0 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8017732:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8017736:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801773a:	4611      	mov	r1, r2
 801773c:	4618      	mov	r0, r3
 801773e:	f7f5 fab1 	bl	800cca4 <_ZneRK12SimpleStringS1_>
 8017742:	4603      	mov	r3, r0
 8017744:	461c      	mov	r4, r3
 8017746:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801774a:	4618      	mov	r0, r3
 801774c:	f7f5 fa59 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8017750:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017754:	4618      	mov	r0, r3
 8017756:	f7f5 fa54 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801775a:	2c00      	cmp	r4, #0
 801775c:	d037      	beq.n	80177ce <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801775e:	683b      	ldr	r3, [r7, #0]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	339c      	adds	r3, #156	; 0x9c
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801776a:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 801776e:	6839      	ldr	r1, [r7, #0]
 8017770:	4798      	blx	r3
 8017772:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8017776:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801777a:	4611      	mov	r1, r2
 801777c:	4618      	mov	r0, r3
 801777e:	f005 fe7a 	bl	801d476 <_ZNK14MockNamedValue7getTypeEv>
 8017782:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8017786:	4618      	mov	r0, r3
 8017788:	f005 fbd2 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	33cc      	adds	r3, #204	; 0xcc
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	4798      	blx	r3
 8017798:	4601      	mov	r1, r0
 801779a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801779e:	f107 030c 	add.w	r3, r7, #12
 80177a2:	4618      	mov	r0, r3
 80177a4:	f005 faee 	bl	801cd84 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	33dc      	adds	r3, #220	; 0xdc
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	f107 020c 	add.w	r2, r7, #12
 80177b4:	4611      	mov	r1, r2
 80177b6:	6878      	ldr	r0, [r7, #4]
 80177b8:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80177ba:	f107 030c 	add.w	r3, r7, #12
 80177be:	4618      	mov	r0, r3
 80177c0:	f001 ffe2 	bl	8019788 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80177c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80177c8:	4618      	mov	r0, r3
 80177ca:	f7f5 fa1a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80177ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80177d2:	4618      	mov	r0, r3
 80177d4:	f005 fbac 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80177d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80177dc:	695b      	ldr	r3, [r3, #20]
 80177de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80177e2:	e705      	b.n	80175f0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 80177e4:	bf00      	nop
 80177e6:	37f0      	adds	r7, #240	; 0xf0
 80177e8:	46bd      	mov	sp, r7
 80177ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177ee:	bf00      	nop
 80177f0:	080257f0 	.word	0x080257f0
 80177f4:	080257fc 	.word	0x080257fc
 80177f8:	200000d4 	.word	0x200000d4
 80177fc:	080257ec 	.word	0x080257ec

08017800 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b084      	sub	sp, #16
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	331c      	adds	r3, #28
 801780c:	4618      	mov	r0, r3
 801780e:	f004 f9bb 	bl	801bb88 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8017812:	4602      	mov	r2, r0
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	699b      	ldr	r3, [r3, #24]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d00f      	beq.n	8017840 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	33d4      	adds	r3, #212	; 0xd4
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	687a      	ldr	r2, [r7, #4]
 801782a:	6992      	ldr	r2, [r2, #24]
 801782c:	4611      	mov	r1, r2
 801782e:	6878      	ldr	r0, [r7, #4]
 8017830:	4798      	blx	r3
        callHasSucceeded();
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	33d0      	adds	r3, #208	; 0xd0
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	6878      	ldr	r0, [r7, #4]
 801783c:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 801783e:	e00f      	b.n	8017860 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	331c      	adds	r3, #28
 8017844:	4618      	mov	r0, r3
 8017846:	f004 f9cc 	bl	801bbe2 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 801784a:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d006      	beq.n	8017860 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	33d4      	adds	r3, #212	; 0xd4
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	68f9      	ldr	r1, [r7, #12]
 801785c:	6878      	ldr	r0, [r7, #4]
 801785e:	4798      	blx	r3
}
 8017860:	bf00      	nop
 8017862:	3710      	adds	r7, #16
 8017864:	46bd      	mov	sp, r7
 8017866:	bd80      	pop	{r7, pc}

08017868 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8017868:	b580      	push	{r7, lr}
 801786a:	b082      	sub	sp, #8
 801786c:	af00      	add	r7, sp, #0
 801786e:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	33ec      	adds	r3, #236	; 0xec
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2102      	movs	r1, #2
 801787a:	6878      	ldr	r0, [r7, #4]
 801787c:	4798      	blx	r3
}
 801787e:	bf00      	nop
 8017880:	3708      	adds	r7, #8
 8017882:	46bd      	mov	sp, r7
 8017884:	bd80      	pop	{r7, pc}

08017886 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 8017886:	b580      	push	{r7, lr}
 8017888:	b082      	sub	sp, #8
 801788a:	af00      	add	r7, sp, #0
 801788c:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	699b      	ldr	r3, [r3, #24]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d00b      	beq.n	80178ae <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	699a      	ldr	r2, [r3, #24]
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	699b      	ldr	r3, [r3, #24]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	33ec      	adds	r3, #236	; 0xec
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	4610      	mov	r0, r2
 80178a6:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	2200      	movs	r2, #0
 80178ac:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	331c      	adds	r3, #28
 80178b2:	4618      	mov	r0, r3
 80178b4:	f004 f85c 	bl	801b970 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 80178b8:	bf00      	nop
 80178ba:	3708      	adds	r7, #8
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}

080178c0 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 80178c0:	b590      	push	{r4, r7, lr}
 80178c2:	b091      	sub	sp, #68	; 0x44
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
 80178c8:	6039      	str	r1, [r7, #0]
    setName(name);
 80178ca:	6839      	ldr	r1, [r7, #0]
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f7ff fdb3 	bl	8017438 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	33ec      	adds	r3, #236	; 0xec
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	2100      	movs	r1, #0
 80178dc:	6878      	ldr	r0, [r7, #4]
 80178de:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	331c      	adds	r3, #28
 80178e4:	6839      	ldr	r1, [r7, #0]
 80178e6:	4618      	mov	r0, r3
 80178e8:	f003 ffec 	bl	801b8c4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	331c      	adds	r3, #28
 80178f0:	4618      	mov	r0, r3
 80178f2:	f003 fe7c 	bl	801b5ee <_ZNK21MockExpectedCallsList7isEmptyEv>
 80178f6:	4603      	mov	r3, r0
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d01d      	beq.n	8017938 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	33cc      	adds	r3, #204	; 0xcc
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	6878      	ldr	r0, [r7, #4]
 8017906:	4798      	blx	r3
 8017908:	4601      	mov	r1, r0
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801790e:	f107 000c 	add.w	r0, r7, #12
 8017912:	683a      	ldr	r2, [r7, #0]
 8017914:	f004 fe24 	bl	801c560 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	33dc      	adds	r3, #220	; 0xdc
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	f107 020c 	add.w	r2, r7, #12
 8017924:	4611      	mov	r1, r2
 8017926:	6878      	ldr	r0, [r7, #4]
 8017928:	4798      	blx	r3
        return *this;
 801792a:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 801792c:	f107 030c 	add.w	r3, r7, #12
 8017930:	4618      	mov	r0, r3
 8017932:	f001 ff4b 	bl	80197cc <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8017936:	e006      	b.n	8017946 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	33d8      	adds	r3, #216	; 0xd8
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	6878      	ldr	r0, [r7, #4]
 8017942:	4798      	blx	r3

    return *this;
 8017944:	687c      	ldr	r4, [r7, #4]
 8017946:	4623      	mov	r3, r4
}
 8017948:	4618      	mov	r0, r3
 801794a:	3744      	adds	r7, #68	; 0x44
 801794c:	46bd      	mov	sp, r7
 801794e:	bd90      	pop	{r4, r7, pc}

08017950 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8017950:	b480      	push	{r7}
 8017952:	b083      	sub	sp, #12
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
 8017958:	6039      	str	r1, [r7, #0]
    return *this;
 801795a:	687b      	ldr	r3, [r7, #4]
}
 801795c:	4618      	mov	r0, r3
 801795e:	370c      	adds	r7, #12
 8017960:	46bd      	mov	sp, r7
 8017962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017966:	4770      	bx	lr

08017968 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8017968:	b590      	push	{r4, r7, lr}
 801796a:	b097      	sub	sp, #92	; 0x5c
 801796c:	af02      	add	r7, sp, #8
 801796e:	6078      	str	r0, [r7, #4]
 8017970:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	33c0      	adds	r3, #192	; 0xc0
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	4798      	blx	r3
 801797e:	4603      	mov	r3, r0
 8017980:	2b00      	cmp	r3, #0
 8017982:	d164      	bne.n	8017a4e <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	33ec      	adds	r3, #236	; 0xec
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	2100      	movs	r1, #0
 801798e:	6878      	ldr	r0, [r7, #4]
 8017990:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	33e8      	adds	r3, #232	; 0xe8
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	6878      	ldr	r0, [r7, #4]
 801799c:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	331c      	adds	r3, #28
 80179a2:	6839      	ldr	r1, [r7, #0]
 80179a4:	4618      	mov	r0, r3
 80179a6:	f004 f86b 	bl	801ba80 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	331c      	adds	r3, #28
 80179ae:	4618      	mov	r0, r3
 80179b0:	f003 fe1d 	bl	801b5ee <_ZNK21MockExpectedCallsList7isEmptyEv>
 80179b4:	4603      	mov	r3, r0
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d02b      	beq.n	8017a12 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	33cc      	adds	r3, #204	; 0xcc
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	6878      	ldr	r0, [r7, #4]
 80179c4:	4798      	blx	r3
 80179c6:	4604      	mov	r4, r0
 80179c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80179cc:	6879      	ldr	r1, [r7, #4]
 80179ce:	4618      	mov	r0, r3
 80179d0:	f7ff fd41 	bl	8017456 <_ZNK21MockCheckedActualCall7getNameEv>
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80179dc:	f107 000c 	add.w	r0, r7, #12
 80179e0:	9300      	str	r3, [sp, #0]
 80179e2:	683b      	ldr	r3, [r7, #0]
 80179e4:	4621      	mov	r1, r4
 80179e6:	f004 fe7f 	bl	801c6e8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80179ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7f5 f907 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	33dc      	adds	r3, #220	; 0xdc
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	f107 020c 	add.w	r2, r7, #12
 8017a00:	4611      	mov	r1, r2
 8017a02:	6878      	ldr	r0, [r7, #4]
 8017a04:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8017a06:	f107 030c 	add.w	r3, r7, #12
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f001 ff00 	bl	8019810 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8017a10:	e01e      	b.n	8017a50 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	f103 041c 	add.w	r4, r3, #28
 8017a18:	683b      	ldr	r3, [r7, #0]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	335c      	adds	r3, #92	; 0x5c
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017a24:	6839      	ldr	r1, [r7, #0]
 8017a26:	4610      	mov	r0, r2
 8017a28:	4798      	blx	r3
 8017a2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017a2e:	4619      	mov	r1, r3
 8017a30:	4620      	mov	r0, r4
 8017a32:	f004 f9b8 	bl	801bda6 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8017a36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	f7f5 f8e1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	33d8      	adds	r3, #216	; 0xd8
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	6878      	ldr	r0, [r7, #4]
 8017a4a:	4798      	blx	r3
 8017a4c:	e000      	b.n	8017a50 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8017a4e:	bf00      	nop
}
 8017a50:	3754      	adds	r7, #84	; 0x54
 8017a52:	46bd      	mov	sp, r7
 8017a54:	bd90      	pop	{r4, r7, pc}

08017a56 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8017a56:	b590      	push	{r4, r7, lr}
 8017a58:	b097      	sub	sp, #92	; 0x5c
 8017a5a:	af02      	add	r7, sp, #8
 8017a5c:	6078      	str	r0, [r7, #4]
 8017a5e:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	33c0      	adds	r3, #192	; 0xc0
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	6878      	ldr	r0, [r7, #4]
 8017a6a:	4798      	blx	r3
 8017a6c:	4603      	mov	r3, r0
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d164      	bne.n	8017b3c <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	33ec      	adds	r3, #236	; 0xec
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	2100      	movs	r1, #0
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	33e8      	adds	r3, #232	; 0xe8
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	6878      	ldr	r0, [r7, #4]
 8017a8a:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	331c      	adds	r3, #28
 8017a90:	6839      	ldr	r1, [r7, #0]
 8017a92:	4618      	mov	r0, r3
 8017a94:	f004 f820 	bl	801bad8 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	331c      	adds	r3, #28
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f003 fda6 	bl	801b5ee <_ZNK21MockExpectedCallsList7isEmptyEv>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d02b      	beq.n	8017b00 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	33cc      	adds	r3, #204	; 0xcc
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	6878      	ldr	r0, [r7, #4]
 8017ab2:	4798      	blx	r3
 8017ab4:	4604      	mov	r4, r0
 8017ab6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017aba:	6879      	ldr	r1, [r7, #4]
 8017abc:	4618      	mov	r0, r3
 8017abe:	f7ff fcca 	bl	8017456 <_ZNK21MockCheckedActualCall7getNameEv>
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ac6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017aca:	f107 000c 	add.w	r0, r7, #12
 8017ace:	9300      	str	r3, [sp, #0]
 8017ad0:	683b      	ldr	r3, [r7, #0]
 8017ad2:	4621      	mov	r1, r4
 8017ad4:	f004 ff6a 	bl	801c9ac <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8017ad8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017adc:	4618      	mov	r0, r3
 8017ade:	f7f5 f890 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	33dc      	adds	r3, #220	; 0xdc
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	f107 020c 	add.w	r2, r7, #12
 8017aee:	4611      	mov	r1, r2
 8017af0:	6878      	ldr	r0, [r7, #4]
 8017af2:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8017af4:	f107 030c 	add.w	r3, r7, #12
 8017af8:	4618      	mov	r0, r3
 8017afa:	f001 feab 	bl	8019854 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8017afe:	e01e      	b.n	8017b3e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	f103 041c 	add.w	r4, r3, #28
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	335c      	adds	r3, #92	; 0x5c
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017b12:	6839      	ldr	r1, [r7, #0]
 8017b14:	4610      	mov	r0, r2
 8017b16:	4798      	blx	r3
 8017b18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017b1c:	4619      	mov	r1, r3
 8017b1e:	4620      	mov	r0, r4
 8017b20:	f004 f95e 	bl	801bde0 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8017b24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017b28:	4618      	mov	r0, r3
 8017b2a:	f7f5 f86a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	33d8      	adds	r3, #216	; 0xd8
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	6878      	ldr	r0, [r7, #4]
 8017b38:	4798      	blx	r3
 8017b3a:	e000      	b.n	8017b3e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8017b3c:	bf00      	nop
}
 8017b3e:	3754      	adds	r7, #84	; 0x54
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd90      	pop	{r4, r7, pc}

08017b44 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8017b44:	b590      	push	{r4, r7, lr}
 8017b46:	b093      	sub	sp, #76	; 0x4c
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	60f8      	str	r0, [r7, #12]
 8017b4c:	60b9      	str	r1, [r7, #8]
 8017b4e:	4613      	mov	r3, r2
 8017b50:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8017b52:	f107 0310 	add.w	r3, r7, #16
 8017b56:	68b9      	ldr	r1, [r7, #8]
 8017b58:	4618      	mov	r0, r3
 8017b5a:	f005 f9bf 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017b5e:	79fa      	ldrb	r2, [r7, #7]
 8017b60:	f107 0310 	add.w	r3, r7, #16
 8017b64:	4611      	mov	r1, r2
 8017b66:	4618      	mov	r0, r3
 8017b68:	f005 fa0a 	bl	801cf80 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	33e0      	adds	r3, #224	; 0xe0
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	f107 0210 	add.w	r2, r7, #16
 8017b78:	4611      	mov	r1, r2
 8017b7a:	68f8      	ldr	r0, [r7, #12]
 8017b7c:	4798      	blx	r3
    return *this;
 8017b7e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017b80:	f107 0310 	add.w	r3, r7, #16
 8017b84:	4618      	mov	r0, r3
 8017b86:	f005 f9d3 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017b8a:	4623      	mov	r3, r4
}
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	374c      	adds	r7, #76	; 0x4c
 8017b90:	46bd      	mov	sp, r7
 8017b92:	bd90      	pop	{r4, r7, pc}

08017b94 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8017b94:	b590      	push	{r4, r7, lr}
 8017b96:	b093      	sub	sp, #76	; 0x4c
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	60f8      	str	r0, [r7, #12]
 8017b9c:	60b9      	str	r1, [r7, #8]
 8017b9e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017ba0:	f107 0310 	add.w	r3, r7, #16
 8017ba4:	68b9      	ldr	r1, [r7, #8]
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f005 f998 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017bac:	f107 0310 	add.w	r3, r7, #16
 8017bb0:	6879      	ldr	r1, [r7, #4]
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	f005 fa08 	bl	801cfc8 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	33e0      	adds	r3, #224	; 0xe0
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	f107 0210 	add.w	r2, r7, #16
 8017bc4:	4611      	mov	r1, r2
 8017bc6:	68f8      	ldr	r0, [r7, #12]
 8017bc8:	4798      	blx	r3
    return *this;
 8017bca:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017bcc:	f107 0310 	add.w	r3, r7, #16
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	f005 f9ad 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017bd6:	4623      	mov	r3, r4
}
 8017bd8:	4618      	mov	r0, r3
 8017bda:	374c      	adds	r7, #76	; 0x4c
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd90      	pop	{r4, r7, pc}

08017be0 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8017be0:	b590      	push	{r4, r7, lr}
 8017be2:	b093      	sub	sp, #76	; 0x4c
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017bec:	f107 0310 	add.w	r3, r7, #16
 8017bf0:	68b9      	ldr	r1, [r7, #8]
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f005 f972 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017bf8:	f107 0310 	add.w	r3, r7, #16
 8017bfc:	6879      	ldr	r1, [r7, #4]
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f005 fa04 	bl	801d00c <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	33e0      	adds	r3, #224	; 0xe0
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	f107 0210 	add.w	r2, r7, #16
 8017c10:	4611      	mov	r1, r2
 8017c12:	68f8      	ldr	r0, [r7, #12]
 8017c14:	4798      	blx	r3
    return *this;
 8017c16:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017c18:	f107 0310 	add.w	r3, r7, #16
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f005 f987 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017c22:	4623      	mov	r3, r4
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	374c      	adds	r7, #76	; 0x4c
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd90      	pop	{r4, r7, pc}

08017c2c <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8017c2c:	b590      	push	{r4, r7, lr}
 8017c2e:	b093      	sub	sp, #76	; 0x4c
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	60f8      	str	r0, [r7, #12]
 8017c34:	60b9      	str	r1, [r7, #8]
 8017c36:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017c38:	f107 0310 	add.w	r3, r7, #16
 8017c3c:	68b9      	ldr	r1, [r7, #8]
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f005 f94c 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017c44:	f107 0310 	add.w	r3, r7, #16
 8017c48:	6879      	ldr	r1, [r7, #4]
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	f005 fa22 	bl	801d094 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	33e0      	adds	r3, #224	; 0xe0
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	f107 0210 	add.w	r2, r7, #16
 8017c5c:	4611      	mov	r1, r2
 8017c5e:	68f8      	ldr	r0, [r7, #12]
 8017c60:	4798      	blx	r3
    return *this;
 8017c62:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017c64:	f107 0310 	add.w	r3, r7, #16
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f005 f961 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017c6e:	4623      	mov	r3, r4
}
 8017c70:	4618      	mov	r0, r3
 8017c72:	374c      	adds	r7, #76	; 0x4c
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bd90      	pop	{r4, r7, pc}

08017c78 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8017c78:	b590      	push	{r4, r7, lr}
 8017c7a:	b093      	sub	sp, #76	; 0x4c
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	60f8      	str	r0, [r7, #12]
 8017c80:	60b9      	str	r1, [r7, #8]
 8017c82:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017c84:	f107 0310 	add.w	r3, r7, #16
 8017c88:	68b9      	ldr	r1, [r7, #8]
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f005 f926 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017c90:	f107 0310 	add.w	r3, r7, #16
 8017c94:	6879      	ldr	r1, [r7, #4]
 8017c96:	4618      	mov	r0, r3
 8017c98:	f005 f9da 	bl	801d050 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	33e0      	adds	r3, #224	; 0xe0
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	f107 0210 	add.w	r2, r7, #16
 8017ca8:	4611      	mov	r1, r2
 8017caa:	68f8      	ldr	r0, [r7, #12]
 8017cac:	4798      	blx	r3
    return *this;
 8017cae:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017cb0:	f107 0310 	add.w	r3, r7, #16
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	f005 f93b 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017cba:	4623      	mov	r3, r4
}
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	374c      	adds	r7, #76	; 0x4c
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	bd90      	pop	{r4, r7, pc}

08017cc4 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8017cc4:	b5b0      	push	{r4, r5, r7, lr}
 8017cc6:	b086      	sub	sp, #24
 8017cc8:	af02      	add	r7, sp, #8
 8017cca:	60f8      	str	r0, [r7, #12]
 8017ccc:	60b9      	str	r1, [r7, #8]
 8017cce:	4639      	mov	r1, r7
 8017cd0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017cd4:	f7fb ffc0 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8017cd8:	4604      	mov	r4, r0
 8017cda:	6823      	ldr	r3, [r4, #0]
 8017cdc:	3368      	adds	r3, #104	; 0x68
 8017cde:	681d      	ldr	r5, [r3, #0]
 8017ce0:	f7fb ffca 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017ce4:	4603      	mov	r3, r0
 8017ce6:	9300      	str	r3, [sp, #0]
 8017ce8:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8017cec:	4a04      	ldr	r2, [pc, #16]	; (8017d00 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8017cee:	4905      	ldr	r1, [pc, #20]	; (8017d04 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8017cf0:	4620      	mov	r0, r4
 8017cf2:	47a8      	blx	r5
    return *this;
 8017cf4:	68fb      	ldr	r3, [r7, #12]
}
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	3710      	adds	r7, #16
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8017cfe:	bf00      	nop
 8017d00:	08025804 	.word	0x08025804
 8017d04:	08025820 	.word	0x08025820

08017d08 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8017d08:	b5b0      	push	{r4, r5, r7, lr}
 8017d0a:	b086      	sub	sp, #24
 8017d0c:	af02      	add	r7, sp, #8
 8017d0e:	60f8      	str	r0, [r7, #12]
 8017d10:	60b9      	str	r1, [r7, #8]
 8017d12:	4639      	mov	r1, r7
 8017d14:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017d18:	f7fb ff9e 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8017d1c:	4604      	mov	r4, r0
 8017d1e:	6823      	ldr	r3, [r4, #0]
 8017d20:	3368      	adds	r3, #104	; 0x68
 8017d22:	681d      	ldr	r5, [r3, #0]
 8017d24:	f7fb ffa8 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017d28:	4603      	mov	r3, r0
 8017d2a:	9300      	str	r3, [sp, #0]
 8017d2c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017d30:	4a04      	ldr	r2, [pc, #16]	; (8017d44 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8017d32:	4905      	ldr	r1, [pc, #20]	; (8017d48 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8017d34:	4620      	mov	r0, r4
 8017d36:	47a8      	blx	r5
    return *this;
 8017d38:	68fb      	ldr	r3, [r7, #12]
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	3710      	adds	r7, #16
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bdb0      	pop	{r4, r5, r7, pc}
 8017d42:	bf00      	nop
 8017d44:	08025804 	.word	0x08025804
 8017d48:	0802584c 	.word	0x0802584c

08017d4c <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8017d4c:	b590      	push	{r4, r7, lr}
 8017d4e:	b093      	sub	sp, #76	; 0x4c
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	60f8      	str	r0, [r7, #12]
 8017d54:	60b9      	str	r1, [r7, #8]
 8017d56:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8017d5a:	f107 0310 	add.w	r3, r7, #16
 8017d5e:	68b9      	ldr	r1, [r7, #8]
 8017d60:	4618      	mov	r0, r3
 8017d62:	f005 f8bb 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017d66:	f107 0310 	add.w	r3, r7, #16
 8017d6a:	ed97 0b00 	vldr	d0, [r7]
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f005 f9ee 	bl	801d150 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	33e0      	adds	r3, #224	; 0xe0
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	f107 0210 	add.w	r2, r7, #16
 8017d80:	4611      	mov	r1, r2
 8017d82:	68f8      	ldr	r0, [r7, #12]
 8017d84:	4798      	blx	r3
    return *this;
 8017d86:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017d88:	f107 0310 	add.w	r3, r7, #16
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f005 f8cf 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017d92:	4623      	mov	r3, r4
}
 8017d94:	4618      	mov	r0, r3
 8017d96:	374c      	adds	r7, #76	; 0x4c
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	bd90      	pop	{r4, r7, pc}

08017d9c <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8017d9c:	b590      	push	{r4, r7, lr}
 8017d9e:	b093      	sub	sp, #76	; 0x4c
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	60f8      	str	r0, [r7, #12]
 8017da4:	60b9      	str	r1, [r7, #8]
 8017da6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017da8:	f107 0310 	add.w	r3, r7, #16
 8017dac:	68b9      	ldr	r1, [r7, #8]
 8017dae:	4618      	mov	r0, r3
 8017db0:	f005 f894 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017db4:	f107 0310 	add.w	r3, r7, #16
 8017db8:	6879      	ldr	r1, [r7, #4]
 8017dba:	4618      	mov	r0, r3
 8017dbc:	f005 fa72 	bl	801d2a4 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	33e0      	adds	r3, #224	; 0xe0
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	f107 0210 	add.w	r2, r7, #16
 8017dcc:	4611      	mov	r1, r2
 8017dce:	68f8      	ldr	r0, [r7, #12]
 8017dd0:	4798      	blx	r3
    return *this;
 8017dd2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017dd4:	f107 0310 	add.w	r3, r7, #16
 8017dd8:	4618      	mov	r0, r3
 8017dda:	f005 f8a9 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017dde:	4623      	mov	r3, r4
}
 8017de0:	4618      	mov	r0, r3
 8017de2:	374c      	adds	r7, #76	; 0x4c
 8017de4:	46bd      	mov	sp, r7
 8017de6:	bd90      	pop	{r4, r7, pc}

08017de8 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8017de8:	b590      	push	{r4, r7, lr}
 8017dea:	b093      	sub	sp, #76	; 0x4c
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	60f8      	str	r0, [r7, #12]
 8017df0:	60b9      	str	r1, [r7, #8]
 8017df2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017df4:	f107 0310 	add.w	r3, r7, #16
 8017df8:	68b9      	ldr	r1, [r7, #8]
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f005 f86e 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017e00:	f107 0310 	add.w	r3, r7, #16
 8017e04:	6879      	ldr	r1, [r7, #4]
 8017e06:	4618      	mov	r0, r3
 8017e08:	f005 f9e6 	bl	801d1d8 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	33e0      	adds	r3, #224	; 0xe0
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	f107 0210 	add.w	r2, r7, #16
 8017e18:	4611      	mov	r1, r2
 8017e1a:	68f8      	ldr	r0, [r7, #12]
 8017e1c:	4798      	blx	r3
    return *this;
 8017e1e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017e20:	f107 0310 	add.w	r3, r7, #16
 8017e24:	4618      	mov	r0, r3
 8017e26:	f005 f883 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017e2a:	4623      	mov	r3, r4
}
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	374c      	adds	r7, #76	; 0x4c
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd90      	pop	{r4, r7, pc}

08017e34 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8017e34:	b590      	push	{r4, r7, lr}
 8017e36:	b093      	sub	sp, #76	; 0x4c
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	60f8      	str	r0, [r7, #12]
 8017e3c:	60b9      	str	r1, [r7, #8]
 8017e3e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017e40:	f107 0310 	add.w	r3, r7, #16
 8017e44:	68b9      	ldr	r1, [r7, #8]
 8017e46:	4618      	mov	r0, r3
 8017e48:	f005 f848 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017e4c:	f107 0310 	add.w	r3, r7, #16
 8017e50:	6879      	ldr	r1, [r7, #4]
 8017e52:	4618      	mov	r0, r3
 8017e54:	f005 f9e2 	bl	801d21c <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	33e0      	adds	r3, #224	; 0xe0
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	f107 0210 	add.w	r2, r7, #16
 8017e64:	4611      	mov	r1, r2
 8017e66:	68f8      	ldr	r0, [r7, #12]
 8017e68:	4798      	blx	r3
    return *this;
 8017e6a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017e6c:	f107 0310 	add.w	r3, r7, #16
 8017e70:	4618      	mov	r0, r3
 8017e72:	f005 f85d 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017e76:	4623      	mov	r3, r4
}
 8017e78:	4618      	mov	r0, r3
 8017e7a:	374c      	adds	r7, #76	; 0x4c
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd90      	pop	{r4, r7, pc}

08017e80 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8017e80:	b590      	push	{r4, r7, lr}
 8017e82:	b093      	sub	sp, #76	; 0x4c
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	60f8      	str	r0, [r7, #12]
 8017e88:	60b9      	str	r1, [r7, #8]
 8017e8a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017e8c:	f107 0310 	add.w	r3, r7, #16
 8017e90:	68b9      	ldr	r1, [r7, #8]
 8017e92:	4618      	mov	r0, r3
 8017e94:	f005 f822 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017e98:	f107 0310 	add.w	r3, r7, #16
 8017e9c:	6879      	ldr	r1, [r7, #4]
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f005 f9de 	bl	801d260 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	33e0      	adds	r3, #224	; 0xe0
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	f107 0210 	add.w	r2, r7, #16
 8017eb0:	4611      	mov	r1, r2
 8017eb2:	68f8      	ldr	r0, [r7, #12]
 8017eb4:	4798      	blx	r3
    return *this;
 8017eb6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017eb8:	f107 0310 	add.w	r3, r7, #16
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f005 f837 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017ec2:	4623      	mov	r3, r4
}
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	374c      	adds	r7, #76	; 0x4c
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd90      	pop	{r4, r7, pc}

08017ecc <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8017ecc:	b590      	push	{r4, r7, lr}
 8017ece:	b093      	sub	sp, #76	; 0x4c
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	60f8      	str	r0, [r7, #12]
 8017ed4:	60b9      	str	r1, [r7, #8]
 8017ed6:	607a      	str	r2, [r7, #4]
 8017ed8:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8017eda:	f107 0310 	add.w	r3, r7, #16
 8017ede:	68b9      	ldr	r1, [r7, #8]
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	f004 fffb 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8017ee6:	f107 0310 	add.w	r3, r7, #16
 8017eea:	683a      	ldr	r2, [r7, #0]
 8017eec:	6879      	ldr	r1, [r7, #4]
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f005 f9fa 	bl	801d2e8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	33e0      	adds	r3, #224	; 0xe0
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	f107 0210 	add.w	r2, r7, #16
 8017f00:	4611      	mov	r1, r2
 8017f02:	68f8      	ldr	r0, [r7, #12]
 8017f04:	4798      	blx	r3
    return *this;
 8017f06:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017f08:	f107 0310 	add.w	r3, r7, #16
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	f005 f80f 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017f12:	4623      	mov	r3, r4
}
 8017f14:	4618      	mov	r0, r3
 8017f16:	374c      	adds	r7, #76	; 0x4c
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	bd90      	pop	{r4, r7, pc}

08017f1c <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8017f1c:	b590      	push	{r4, r7, lr}
 8017f1e:	b0a1      	sub	sp, #132	; 0x84
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	60f8      	str	r0, [r7, #12]
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	607a      	str	r2, [r7, #4]
 8017f28:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8017f2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017f2e:	6879      	ldr	r1, [r7, #4]
 8017f30:	4618      	mov	r0, r3
 8017f32:	f004 ffd3 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8017f36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017f3a:	683a      	ldr	r2, [r7, #0]
 8017f3c:	68b9      	ldr	r1, [r7, #8]
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f005 f9f8 	bl	801d334 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8017f44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017f48:	4618      	mov	r0, r3
 8017f4a:	f005 fdc5 	bl	801dad8 <_ZNK14MockNamedValue13getComparatorEv>
 8017f4e:	4603      	mov	r3, r0
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	bf0c      	ite	eq
 8017f54:	2301      	moveq	r3, #1
 8017f56:	2300      	movne	r3, #0
 8017f58:	b2db      	uxtb	r3, r3
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d01c      	beq.n	8017f98 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	33cc      	adds	r3, #204	; 0xcc
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	68f8      	ldr	r0, [r7, #12]
 8017f68:	4798      	blx	r3
 8017f6a:	4601      	mov	r1, r0
 8017f6c:	f107 0314 	add.w	r3, r7, #20
 8017f70:	68ba      	ldr	r2, [r7, #8]
 8017f72:	4618      	mov	r0, r3
 8017f74:	f004 fed6 	bl	801cd24 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	33dc      	adds	r3, #220	; 0xdc
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	f107 0214 	add.w	r2, r7, #20
 8017f84:	4611      	mov	r1, r2
 8017f86:	68f8      	ldr	r0, [r7, #12]
 8017f88:	4798      	blx	r3
        return *this;
 8017f8a:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8017f8c:	f107 0314 	add.w	r3, r7, #20
 8017f90:	4618      	mov	r0, r3
 8017f92:	f001 fc81 	bl	8019898 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8017f96:	e009      	b.n	8017fac <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	33e0      	adds	r3, #224	; 0xe0
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017fa4:	4611      	mov	r1, r2
 8017fa6:	68f8      	ldr	r0, [r7, #12]
 8017fa8:	4798      	blx	r3
    return *this;
 8017faa:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017fac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f004 ffbd 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 8017fb6:	4623      	mov	r3, r4
}
 8017fb8:	4618      	mov	r0, r3
 8017fba:	3784      	adds	r7, #132	; 0x84
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	bd90      	pop	{r4, r7, pc}

08017fc0 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8017fc0:	b590      	push	{r4, r7, lr}
 8017fc2:	b095      	sub	sp, #84	; 0x54
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	60f8      	str	r0, [r7, #12]
 8017fc8:	60b9      	str	r1, [r7, #8]
 8017fca:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	33f0      	adds	r3, #240	; 0xf0
 8017fd2:	681c      	ldr	r4, [r3, #0]
 8017fd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017fd8:	4917      	ldr	r1, [pc, #92]	; (8018038 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f7f4 fa59 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8017fe0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	68b9      	ldr	r1, [r7, #8]
 8017fe8:	68f8      	ldr	r0, [r7, #12]
 8017fea:	47a0      	blx	r4
 8017fec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7f4 fe06 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8017ff6:	f107 0310 	add.w	r3, r7, #16
 8017ffa:	68b9      	ldr	r1, [r7, #8]
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	f004 ff6d 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8018002:	f107 0310 	add.w	r3, r7, #16
 8018006:	6879      	ldr	r1, [r7, #4]
 8018008:	4618      	mov	r0, r3
 801800a:	f005 f8e5 	bl	801d1d8 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	33e4      	adds	r3, #228	; 0xe4
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	f107 0210 	add.w	r2, r7, #16
 801801a:	4611      	mov	r1, r2
 801801c:	68f8      	ldr	r0, [r7, #12]
 801801e:	4798      	blx	r3

    return *this;
 8018020:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8018022:	f107 0310 	add.w	r3, r7, #16
 8018026:	4618      	mov	r0, r3
 8018028:	f004 ff82 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 801802c:	4623      	mov	r3, r4
}
 801802e:	4618      	mov	r0, r3
 8018030:	3754      	adds	r7, #84	; 0x54
 8018032:	46bd      	mov	sp, r7
 8018034:	bd90      	pop	{r4, r7, pc}
 8018036:	bf00      	nop
 8018038:	080257fc 	.word	0x080257fc

0801803c <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 801803c:	b590      	push	{r4, r7, lr}
 801803e:	b093      	sub	sp, #76	; 0x4c
 8018040:	af00      	add	r7, sp, #0
 8018042:	60f8      	str	r0, [r7, #12]
 8018044:	60b9      	str	r1, [r7, #8]
 8018046:	607a      	str	r2, [r7, #4]
 8018048:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	33f0      	adds	r3, #240	; 0xf0
 8018050:	681c      	ldr	r4, [r3, #0]
 8018052:	683b      	ldr	r3, [r7, #0]
 8018054:	68ba      	ldr	r2, [r7, #8]
 8018056:	6879      	ldr	r1, [r7, #4]
 8018058:	68f8      	ldr	r0, [r7, #12]
 801805a:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 801805c:	f107 0310 	add.w	r3, r7, #16
 8018060:	6879      	ldr	r1, [r7, #4]
 8018062:	4618      	mov	r0, r3
 8018064:	f004 ff3a 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8018068:	f107 0310 	add.w	r3, r7, #16
 801806c:	683a      	ldr	r2, [r7, #0]
 801806e:	68b9      	ldr	r1, [r7, #8]
 8018070:	4618      	mov	r0, r3
 8018072:	f005 f95f 	bl	801d334 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	33e4      	adds	r3, #228	; 0xe4
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	f107 0210 	add.w	r2, r7, #16
 8018082:	4611      	mov	r1, r2
 8018084:	68f8      	ldr	r0, [r7, #12]
 8018086:	4798      	blx	r3

    return *this;
 8018088:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801808a:	f107 0310 	add.w	r3, r7, #16
 801808e:	4618      	mov	r0, r3
 8018090:	f004 ff4e 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018094:	4623      	mov	r3, r4
}
 8018096:	4618      	mov	r0, r3
 8018098:	374c      	adds	r7, #76	; 0x4c
 801809a:	46bd      	mov	sp, r7
 801809c:	bd90      	pop	{r4, r7, pc}

0801809e <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 801809e:	b480      	push	{r7}
 80180a0:	b083      	sub	sp, #12
 80180a2:	af00      	add	r7, sp, #0
 80180a4:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	7d1b      	ldrb	r3, [r3, #20]
 80180aa:	2b02      	cmp	r3, #2
 80180ac:	bf0c      	ite	eq
 80180ae:	2301      	moveq	r3, #1
 80180b0:	2300      	movne	r3, #0
 80180b2:	b2db      	uxtb	r3, r3
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	370c      	adds	r7, #12
 80180b8:	46bd      	mov	sp, r7
 80180ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180be:	4770      	bx	lr

080180c0 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 80180c0:	b480      	push	{r7}
 80180c2:	b083      	sub	sp, #12
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	7d1b      	ldrb	r3, [r3, #20]
 80180cc:	2b01      	cmp	r3, #1
 80180ce:	bf0c      	ite	eq
 80180d0:	2301      	moveq	r3, #1
 80180d2:	2300      	movne	r3, #0
 80180d4:	b2db      	uxtb	r3, r3
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	370c      	adds	r7, #12
 80180da:	46bd      	mov	sp, r7
 80180dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e0:	4770      	bx	lr
	...

080180e4 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 80180e4:	b5b0      	push	{r4, r5, r7, lr}
 80180e6:	b096      	sub	sp, #88	; 0x58
 80180e8:	af02      	add	r7, sp, #8
 80180ea:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	7d5b      	ldrb	r3, [r3, #21]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	f040 80bc 	bne.w	801826e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	2201      	movs	r2, #1
 80180fa:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	7d1b      	ldrb	r3, [r3, #20]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d014      	beq.n	801812e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	7d1b      	ldrb	r3, [r3, #20]
 8018108:	2b02      	cmp	r3, #2
 801810a:	d10a      	bne.n	8018122 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	6998      	ldr	r0, [r3, #24]
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	699b      	ldr	r3, [r3, #24]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	33d8      	adds	r3, #216	; 0xd8
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	687a      	ldr	r2, [r7, #4]
 801811c:	68d2      	ldr	r2, [r2, #12]
 801811e:	4611      	mov	r1, r2
 8018120:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	331c      	adds	r3, #28
 8018126:	4618      	mov	r0, r3
 8018128:	f003 fe07 	bl	801bd3a <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801812c:	e0a0      	b.n	8018270 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	331c      	adds	r3, #28
 8018132:	4618      	mov	r0, r3
 8018134:	f003 fac3 	bl	801b6be <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8018138:	4603      	mov	r3, r0
 801813a:	2b00      	cmp	r3, #0
 801813c:	d00f      	beq.n	801815e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 801813e:	f7fb fd8b 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8018142:	4604      	mov	r4, r0
 8018144:	6823      	ldr	r3, [r4, #0]
 8018146:	3368      	adds	r3, #104	; 0x68
 8018148:	681d      	ldr	r5, [r3, #0]
 801814a:	f7fb fd95 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801814e:	4603      	mov	r3, r0
 8018150:	9300      	str	r3, [sp, #0]
 8018152:	f240 1385 	movw	r3, #389	; 0x185
 8018156:	4a48      	ldr	r2, [pc, #288]	; (8018278 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8018158:	4948      	ldr	r1, [pc, #288]	; (801827c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 801815a:	4620      	mov	r0, r4
 801815c:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	331c      	adds	r3, #28
 8018162:	4618      	mov	r0, r3
 8018164:	f003 fd5f 	bl	801bc26 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8018168:	4602      	mov	r2, r0
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	699b      	ldr	r3, [r3, #24]
 8018172:	2b00      	cmp	r3, #0
 8018174:	d01f      	beq.n	80181b6 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	699a      	ldr	r2, [r3, #24]
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	699b      	ldr	r3, [r3, #24]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	33e4      	adds	r3, #228	; 0xe4
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	4610      	mov	r0, r2
 8018186:	4798      	blx	r3
        callHasSucceeded();
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	33d0      	adds	r3, #208	; 0xd0
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	6878      	ldr	r0, [r7, #4]
 8018192:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	6998      	ldr	r0, [r3, #24]
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	699b      	ldr	r3, [r3, #24]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	33d8      	adds	r3, #216	; 0xd8
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	687a      	ldr	r2, [r7, #4]
 80181a4:	68d2      	ldr	r2, [r2, #12]
 80181a6:	4611      	mov	r1, r2
 80181a8:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	331c      	adds	r3, #28
 80181ae:	4618      	mov	r0, r3
 80181b0:	f003 fdc3 	bl	801bd3a <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 80181b4:	e05c      	b.n	8018270 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	331c      	adds	r3, #28
 80181ba:	4618      	mov	r0, r3
 80181bc:	f003 ffc4 	bl	801c148 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 80181c0:	4603      	mov	r3, r0
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d029      	beq.n	801821a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	33cc      	adds	r3, #204	; 0xcc
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	4798      	blx	r3
 80181d2:	4604      	mov	r4, r0
 80181d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80181d8:	6879      	ldr	r1, [r7, #4]
 80181da:	4618      	mov	r0, r3
 80181dc:	f7ff f93b 	bl	8017456 <_ZNK21MockCheckedActualCall7getNameEv>
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80181e8:	f107 000c 	add.w	r0, r7, #12
 80181ec:	4621      	mov	r1, r4
 80181ee:	f004 fd21 	bl	801cc34 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 80181f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7f4 fd03 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	33dc      	adds	r3, #220	; 0xdc
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	f107 020c 	add.w	r2, r7, #12
 8018208:	4611      	mov	r1, r2
 801820a:	6878      	ldr	r0, [r7, #4]
 801820c:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801820e:	f107 030c 	add.w	r3, r7, #12
 8018212:	4618      	mov	r0, r3
 8018214:	f001 fb62 	bl	80198dc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8018218:	e02a      	b.n	8018270 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	33cc      	adds	r3, #204	; 0xcc
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	6878      	ldr	r0, [r7, #4]
 8018224:	4798      	blx	r3
 8018226:	4604      	mov	r4, r0
 8018228:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801822c:	6879      	ldr	r1, [r7, #4]
 801822e:	4618      	mov	r0, r3
 8018230:	f7ff f911 	bl	8017456 <_ZNK21MockCheckedActualCall7getNameEv>
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018238:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801823c:	f107 000c 	add.w	r0, r7, #12
 8018240:	4621      	mov	r1, r4
 8018242:	f004 fe05 	bl	801ce50 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8018246:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801824a:	4618      	mov	r0, r3
 801824c:	f7f4 fcd9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	33dc      	adds	r3, #220	; 0xdc
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	f107 020c 	add.w	r2, r7, #12
 801825c:	4611      	mov	r1, r2
 801825e:	6878      	ldr	r0, [r7, #4]
 8018260:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018262:	f107 030c 	add.w	r3, r7, #12
 8018266:	4618      	mov	r0, r3
 8018268:	f001 fb5a 	bl	8019920 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801826c:	e000      	b.n	8018270 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 801826e:	bf00      	nop
    }
}
 8018270:	3750      	adds	r7, #80	; 0x50
 8018272:	46bd      	mov	sp, r7
 8018274:	bdb0      	pop	{r4, r5, r7, pc}
 8018276:	bf00      	nop
 8018278:	08025804 	.word	0x08025804
 801827c:	0802586c 	.word	0x0802586c

08018280 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8018280:	b480      	push	{r7}
 8018282:	b083      	sub	sp, #12
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
 8018288:	460b      	mov	r3, r1
 801828a:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	78fa      	ldrb	r2, [r7, #3]
 8018290:	751a      	strb	r2, [r3, #20]
}
 8018292:	bf00      	nop
 8018294:	370c      	adds	r7, #12
 8018296:	46bd      	mov	sp, r7
 8018298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829c:	4770      	bx	lr
	...

080182a0 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b084      	sub	sp, #16
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	6078      	str	r0, [r7, #4]
 80182a8:	6039      	str	r1, [r7, #0]
    checkExpectations();
 80182aa:	683b      	ldr	r3, [r7, #0]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	33c4      	adds	r3, #196	; 0xc4
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	6838      	ldr	r0, [r7, #0]
 80182b4:	4798      	blx	r3
    if (matchingExpectation_)
 80182b6:	683b      	ldr	r3, [r7, #0]
 80182b8:	699b      	ldr	r3, [r3, #24]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d00a      	beq.n	80182d4 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 80182be:	683b      	ldr	r3, [r7, #0]
 80182c0:	6999      	ldr	r1, [r3, #24]
 80182c2:	683b      	ldr	r3, [r7, #0]
 80182c4:	699b      	ldr	r3, [r3, #24]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	3394      	adds	r3, #148	; 0x94
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	687a      	ldr	r2, [r7, #4]
 80182ce:	4610      	mov	r0, r2
 80182d0:	4798      	blx	r3
 80182d2:	e010      	b.n	80182f6 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 80182d4:	f107 0308 	add.w	r3, r7, #8
 80182d8:	4909      	ldr	r1, [pc, #36]	; (8018300 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 80182da:	4618      	mov	r0, r3
 80182dc:	f7f4 f8d9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80182e0:	f107 0308 	add.w	r3, r7, #8
 80182e4:	4619      	mov	r1, r3
 80182e6:	6878      	ldr	r0, [r7, #4]
 80182e8:	f004 fdf8 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
 80182ec:	f107 0308 	add.w	r3, r7, #8
 80182f0:	4618      	mov	r0, r3
 80182f2:	f7f4 fc86 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 80182f6:	6878      	ldr	r0, [r7, #4]
 80182f8:	3710      	adds	r7, #16
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd80      	pop	{r7, pc}
 80182fe:	bf00      	nop
 8018300:	080258e8 	.word	0x080258e8

08018304 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b082      	sub	sp, #8
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
 801830c:	460b      	mov	r3, r1
 801830e:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	3350      	adds	r3, #80	; 0x50
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	6878      	ldr	r0, [r7, #4]
 801831a:	4798      	blx	r3
 801831c:	4603      	mov	r3, r0
 801831e:	f083 0301 	eor.w	r3, r3, #1
 8018322:	b2db      	uxtb	r3, r3
 8018324:	2b00      	cmp	r3, #0
 8018326:	d001      	beq.n	801832c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8018328:	78fb      	ldrb	r3, [r7, #3]
 801832a:	e007      	b.n	801833c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	335c      	adds	r3, #92	; 0x5c
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	4798      	blx	r3
 8018338:	4603      	mov	r3, r0
 801833a:	bf00      	nop
}
 801833c:	4618      	mov	r0, r3
 801833e:	3708      	adds	r7, #8
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}

08018344 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8018344:	b590      	push	{r4, r7, lr}
 8018346:	b091      	sub	sp, #68	; 0x44
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	3354      	adds	r3, #84	; 0x54
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	f107 0208 	add.w	r2, r7, #8
 8018358:	6879      	ldr	r1, [r7, #4]
 801835a:	4610      	mov	r0, r2
 801835c:	4798      	blx	r3
 801835e:	f107 0308 	add.w	r3, r7, #8
 8018362:	4618      	mov	r0, r3
 8018364:	f005 f896 	bl	801d494 <_ZNK14MockNamedValue12getBoolValueEv>
 8018368:	4603      	mov	r3, r0
 801836a:	461c      	mov	r4, r3
 801836c:	bf00      	nop
 801836e:	f107 0308 	add.w	r3, r7, #8
 8018372:	4618      	mov	r0, r3
 8018374:	f004 fddc 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 8018378:	4623      	mov	r3, r4
}
 801837a:	4618      	mov	r0, r3
 801837c:	3744      	adds	r7, #68	; 0x44
 801837e:	46bd      	mov	sp, r7
 8018380:	bd90      	pop	{r4, r7, pc}

08018382 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8018382:	b580      	push	{r7, lr}
 8018384:	b082      	sub	sp, #8
 8018386:	af00      	add	r7, sp, #0
 8018388:	6078      	str	r0, [r7, #4]
 801838a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	3350      	adds	r3, #80	; 0x50
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	6878      	ldr	r0, [r7, #4]
 8018396:	4798      	blx	r3
 8018398:	4603      	mov	r3, r0
 801839a:	f083 0301 	eor.w	r3, r3, #1
 801839e:	b2db      	uxtb	r3, r3
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d001      	beq.n	80183a8 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 80183a4:	683b      	ldr	r3, [r7, #0]
 80183a6:	e007      	b.n	80183b8 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	3364      	adds	r3, #100	; 0x64
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	6878      	ldr	r0, [r7, #4]
 80183b2:	4798      	blx	r3
 80183b4:	4603      	mov	r3, r0
 80183b6:	bf00      	nop
}
 80183b8:	4618      	mov	r0, r3
 80183ba:	3708      	adds	r7, #8
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd80      	pop	{r7, pc}

080183c0 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 80183c0:	b590      	push	{r4, r7, lr}
 80183c2:	b091      	sub	sp, #68	; 0x44
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	3354      	adds	r3, #84	; 0x54
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	f107 0208 	add.w	r2, r7, #8
 80183d4:	6879      	ldr	r1, [r7, #4]
 80183d6:	4610      	mov	r0, r2
 80183d8:	4798      	blx	r3
 80183da:	f107 0308 	add.w	r3, r7, #8
 80183de:	4618      	mov	r0, r3
 80183e0:	f005 f8d0 	bl	801d584 <_ZNK14MockNamedValue11getIntValueEv>
 80183e4:	4604      	mov	r4, r0
 80183e6:	bf00      	nop
 80183e8:	f107 0308 	add.w	r3, r7, #8
 80183ec:	4618      	mov	r0, r3
 80183ee:	f004 fd9f 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 80183f2:	4623      	mov	r3, r4
}
 80183f4:	4618      	mov	r0, r3
 80183f6:	3744      	adds	r7, #68	; 0x44
 80183f8:	46bd      	mov	sp, r7
 80183fa:	bd90      	pop	{r4, r7, pc}

080183fc <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 80183fc:	b590      	push	{r4, r7, lr}
 80183fe:	b091      	sub	sp, #68	; 0x44
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	3354      	adds	r3, #84	; 0x54
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	f107 0208 	add.w	r2, r7, #8
 8018410:	6879      	ldr	r1, [r7, #4]
 8018412:	4610      	mov	r0, r2
 8018414:	4798      	blx	r3
 8018416:	f107 0308 	add.w	r3, r7, #8
 801841a:	4618      	mov	r0, r3
 801841c:	f005 f93c 	bl	801d698 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8018420:	4604      	mov	r4, r0
 8018422:	bf00      	nop
 8018424:	f107 0308 	add.w	r3, r7, #8
 8018428:	4618      	mov	r0, r3
 801842a:	f004 fd81 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 801842e:	4623      	mov	r3, r4
}
 8018430:	4618      	mov	r0, r3
 8018432:	3744      	adds	r7, #68	; 0x44
 8018434:	46bd      	mov	sp, r7
 8018436:	bd90      	pop	{r4, r7, pc}

08018438 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b082      	sub	sp, #8
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	3350      	adds	r3, #80	; 0x50
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	6878      	ldr	r0, [r7, #4]
 801844c:	4798      	blx	r3
 801844e:	4603      	mov	r3, r0
 8018450:	f083 0301 	eor.w	r3, r3, #1
 8018454:	b2db      	uxtb	r3, r3
 8018456:	2b00      	cmp	r3, #0
 8018458:	d001      	beq.n	801845e <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 801845a:	683b      	ldr	r3, [r7, #0]
 801845c:	e007      	b.n	801846e <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	3368      	adds	r3, #104	; 0x68
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	6878      	ldr	r0, [r7, #4]
 8018468:	4798      	blx	r3
 801846a:	4603      	mov	r3, r0
 801846c:	bf00      	nop
}
 801846e:	4618      	mov	r0, r3
 8018470:	3708      	adds	r7, #8
 8018472:	46bd      	mov	sp, r7
 8018474:	bd80      	pop	{r7, pc}

08018476 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8018476:	b590      	push	{r4, r7, lr}
 8018478:	b091      	sub	sp, #68	; 0x44
 801847a:	af00      	add	r7, sp, #0
 801847c:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	3354      	adds	r3, #84	; 0x54
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	f107 0208 	add.w	r2, r7, #8
 801848a:	6879      	ldr	r1, [r7, #4]
 801848c:	4610      	mov	r0, r2
 801848e:	4798      	blx	r3
 8018490:	f107 0308 	add.w	r3, r7, #8
 8018494:	4618      	mov	r0, r3
 8018496:	f005 f89d 	bl	801d5d4 <_ZNK14MockNamedValue15getLongIntValueEv>
 801849a:	4604      	mov	r4, r0
 801849c:	bf00      	nop
 801849e:	f107 0308 	add.w	r3, r7, #8
 80184a2:	4618      	mov	r0, r3
 80184a4:	f004 fd44 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 80184a8:	4623      	mov	r3, r4
}
 80184aa:	4618      	mov	r0, r3
 80184ac:	3744      	adds	r7, #68	; 0x44
 80184ae:	46bd      	mov	sp, r7
 80184b0:	bd90      	pop	{r4, r7, pc}

080184b2 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 80184b2:	b580      	push	{r7, lr}
 80184b4:	b082      	sub	sp, #8
 80184b6:	af00      	add	r7, sp, #0
 80184b8:	6078      	str	r0, [r7, #4]
 80184ba:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	3350      	adds	r3, #80	; 0x50
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	6878      	ldr	r0, [r7, #4]
 80184c6:	4798      	blx	r3
 80184c8:	4603      	mov	r3, r0
 80184ca:	f083 0301 	eor.w	r3, r3, #1
 80184ce:	b2db      	uxtb	r3, r3
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d001      	beq.n	80184d8 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 80184d4:	683b      	ldr	r3, [r7, #0]
 80184d6:	e007      	b.n	80184e8 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	3370      	adds	r3, #112	; 0x70
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	6878      	ldr	r0, [r7, #4]
 80184e2:	4798      	blx	r3
 80184e4:	4603      	mov	r3, r0
 80184e6:	bf00      	nop
}
 80184e8:	4618      	mov	r0, r3
 80184ea:	3708      	adds	r7, #8
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}

080184f0 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 80184f0:	b5b0      	push	{r4, r5, r7, lr}
 80184f2:	b084      	sub	sp, #16
 80184f4:	af02      	add	r7, sp, #8
 80184f6:	6078      	str	r0, [r7, #4]
 80184f8:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 80184fa:	f7fb fbad 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80184fe:	4604      	mov	r4, r0
 8018500:	6823      	ldr	r3, [r4, #0]
 8018502:	3368      	adds	r3, #104	; 0x68
 8018504:	681d      	ldr	r5, [r3, #0]
 8018506:	f7fb fbb7 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801850a:	4603      	mov	r3, r0
 801850c:	9300      	str	r3, [sp, #0]
 801850e:	f240 13fb 	movw	r3, #507	; 0x1fb
 8018512:	4a06      	ldr	r2, [pc, #24]	; (801852c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8018514:	4906      	ldr	r1, [pc, #24]	; (8018530 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8018516:	4620      	mov	r0, r4
 8018518:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801851a:	2100      	movs	r1, #0
 801851c:	6878      	ldr	r0, [r7, #4]
 801851e:	f7f1 fffb 	bl	800a518 <_ZN18cpputest_ulonglongC1Ei>
}
 8018522:	6878      	ldr	r0, [r7, #4]
 8018524:	3708      	adds	r7, #8
 8018526:	46bd      	mov	sp, r7
 8018528:	bdb0      	pop	{r4, r5, r7, pc}
 801852a:	bf00      	nop
 801852c:	08025804 	.word	0x08025804
 8018530:	08025820 	.word	0x08025820

08018534 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8018534:	b5b0      	push	{r4, r5, r7, lr}
 8018536:	b086      	sub	sp, #24
 8018538:	af02      	add	r7, sp, #8
 801853a:	60f8      	str	r0, [r7, #12]
 801853c:	60b9      	str	r1, [r7, #8]
 801853e:	4639      	mov	r1, r7
 8018540:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018544:	f7fb fb88 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8018548:	4604      	mov	r4, r0
 801854a:	6823      	ldr	r3, [r4, #0]
 801854c:	3368      	adds	r3, #104	; 0x68
 801854e:	681d      	ldr	r5, [r3, #0]
 8018550:	f7fb fb92 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018554:	4603      	mov	r3, r0
 8018556:	9300      	str	r3, [sp, #0]
 8018558:	f240 2301 	movw	r3, #513	; 0x201
 801855c:	4a06      	ldr	r2, [pc, #24]	; (8018578 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801855e:	4907      	ldr	r1, [pc, #28]	; (801857c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8018560:	4620      	mov	r0, r4
 8018562:	47a8      	blx	r5
    return default_value;
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	461a      	mov	r2, r3
 8018568:	463b      	mov	r3, r7
 801856a:	cb03      	ldmia	r3!, {r0, r1}
 801856c:	6010      	str	r0, [r2, #0]
 801856e:	6051      	str	r1, [r2, #4]
}
 8018570:	68f8      	ldr	r0, [r7, #12]
 8018572:	3710      	adds	r7, #16
 8018574:	46bd      	mov	sp, r7
 8018576:	bdb0      	pop	{r4, r5, r7, pc}
 8018578:	08025804 	.word	0x08025804
 801857c:	08025820 	.word	0x08025820

08018580 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8018580:	b5b0      	push	{r4, r5, r7, lr}
 8018582:	b084      	sub	sp, #16
 8018584:	af02      	add	r7, sp, #8
 8018586:	6078      	str	r0, [r7, #4]
 8018588:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801858a:	f7fb fb65 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801858e:	4604      	mov	r4, r0
 8018590:	6823      	ldr	r3, [r4, #0]
 8018592:	3368      	adds	r3, #104	; 0x68
 8018594:	681d      	ldr	r5, [r3, #0]
 8018596:	f7fb fb6f 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801859a:	4603      	mov	r3, r0
 801859c:	9300      	str	r3, [sp, #0]
 801859e:	f240 2307 	movw	r3, #519	; 0x207
 80185a2:	4a06      	ldr	r2, [pc, #24]	; (80185bc <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 80185a4:	4906      	ldr	r1, [pc, #24]	; (80185c0 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 80185a6:	4620      	mov	r0, r4
 80185a8:	47a8      	blx	r5
    return cpputest_longlong(0);
 80185aa:	2100      	movs	r1, #0
 80185ac:	6878      	ldr	r0, [r7, #4]
 80185ae:	f7f1 ffa7 	bl	800a500 <_ZN17cpputest_longlongC1Ei>
}
 80185b2:	6878      	ldr	r0, [r7, #4]
 80185b4:	3708      	adds	r7, #8
 80185b6:	46bd      	mov	sp, r7
 80185b8:	bdb0      	pop	{r4, r5, r7, pc}
 80185ba:	bf00      	nop
 80185bc:	08025804 	.word	0x08025804
 80185c0:	0802584c 	.word	0x0802584c

080185c4 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 80185c4:	b5b0      	push	{r4, r5, r7, lr}
 80185c6:	b086      	sub	sp, #24
 80185c8:	af02      	add	r7, sp, #8
 80185ca:	60f8      	str	r0, [r7, #12]
 80185cc:	60b9      	str	r1, [r7, #8]
 80185ce:	4639      	mov	r1, r7
 80185d0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80185d4:	f7fb fb40 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80185d8:	4604      	mov	r4, r0
 80185da:	6823      	ldr	r3, [r4, #0]
 80185dc:	3368      	adds	r3, #104	; 0x68
 80185de:	681d      	ldr	r5, [r3, #0]
 80185e0:	f7fb fb4a 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80185e4:	4603      	mov	r3, r0
 80185e6:	9300      	str	r3, [sp, #0]
 80185e8:	f240 230d 	movw	r3, #525	; 0x20d
 80185ec:	4a06      	ldr	r2, [pc, #24]	; (8018608 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 80185ee:	4907      	ldr	r1, [pc, #28]	; (801860c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 80185f0:	4620      	mov	r0, r4
 80185f2:	47a8      	blx	r5
    return default_value;
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	461a      	mov	r2, r3
 80185f8:	463b      	mov	r3, r7
 80185fa:	cb03      	ldmia	r3!, {r0, r1}
 80185fc:	6010      	str	r0, [r2, #0]
 80185fe:	6051      	str	r1, [r2, #4]
}
 8018600:	68f8      	ldr	r0, [r7, #12]
 8018602:	3710      	adds	r7, #16
 8018604:	46bd      	mov	sp, r7
 8018606:	bdb0      	pop	{r4, r5, r7, pc}
 8018608:	08025804 	.word	0x08025804
 801860c:	0802584c 	.word	0x0802584c

08018610 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8018610:	b580      	push	{r7, lr}
 8018612:	ed2d 8b02 	vpush	{d8}
 8018616:	b090      	sub	sp, #64	; 0x40
 8018618:	af00      	add	r7, sp, #0
 801861a:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	3354      	adds	r3, #84	; 0x54
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	f107 0208 	add.w	r2, r7, #8
 8018628:	6879      	ldr	r1, [r7, #4]
 801862a:	4610      	mov	r0, r2
 801862c:	4798      	blx	r3
 801862e:	f107 0308 	add.w	r3, r7, #8
 8018632:	4618      	mov	r0, r3
 8018634:	f005 f908 	bl	801d848 <_ZNK14MockNamedValue14getDoubleValueEv>
 8018638:	eeb0 8a40 	vmov.f32	s16, s0
 801863c:	eef0 8a60 	vmov.f32	s17, s1
 8018640:	bf00      	nop
 8018642:	f107 0308 	add.w	r3, r7, #8
 8018646:	4618      	mov	r0, r3
 8018648:	f004 fc72 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 801864c:	eeb0 7a48 	vmov.f32	s14, s16
 8018650:	eef0 7a68 	vmov.f32	s15, s17
}
 8018654:	eeb0 0a47 	vmov.f32	s0, s14
 8018658:	eef0 0a67 	vmov.f32	s1, s15
 801865c:	3740      	adds	r7, #64	; 0x40
 801865e:	46bd      	mov	sp, r7
 8018660:	ecbd 8b02 	vpop	{d8}
 8018664:	bd80      	pop	{r7, pc}

08018666 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8018666:	b580      	push	{r7, lr}
 8018668:	b084      	sub	sp, #16
 801866a:	af00      	add	r7, sp, #0
 801866c:	60f8      	str	r0, [r7, #12]
 801866e:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	3350      	adds	r3, #80	; 0x50
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	68f8      	ldr	r0, [r7, #12]
 801867c:	4798      	blx	r3
 801867e:	4603      	mov	r3, r0
 8018680:	f083 0301 	eor.w	r3, r3, #1
 8018684:	b2db      	uxtb	r3, r3
 8018686:	2b00      	cmp	r3, #0
 8018688:	d002      	beq.n	8018690 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 801868a:	ed97 7b00 	vldr	d7, [r7]
 801868e:	e00a      	b.n	80186a6 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	3398      	adds	r3, #152	; 0x98
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	68f8      	ldr	r0, [r7, #12]
 801869a:	4798      	blx	r3
 801869c:	eeb0 7a40 	vmov.f32	s14, s0
 80186a0:	eef0 7a60 	vmov.f32	s15, s1
 80186a4:	bf00      	nop
}
 80186a6:	eeb0 0a47 	vmov.f32	s0, s14
 80186aa:	eef0 0a67 	vmov.f32	s1, s15
 80186ae:	3710      	adds	r7, #16
 80186b0:	46bd      	mov	sp, r7
 80186b2:	bd80      	pop	{r7, pc}

080186b4 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 80186b4:	b590      	push	{r4, r7, lr}
 80186b6:	b091      	sub	sp, #68	; 0x44
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	3354      	adds	r3, #84	; 0x54
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	f107 0208 	add.w	r2, r7, #8
 80186c8:	6879      	ldr	r1, [r7, #4]
 80186ca:	4610      	mov	r0, r2
 80186cc:	4798      	blx	r3
 80186ce:	f107 0308 	add.w	r3, r7, #8
 80186d2:	4618      	mov	r0, r3
 80186d4:	f004 ff06 	bl	801d4e4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 80186d8:	4604      	mov	r4, r0
 80186da:	bf00      	nop
 80186dc:	f107 0308 	add.w	r3, r7, #8
 80186e0:	4618      	mov	r0, r3
 80186e2:	f004 fc25 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 80186e6:	4623      	mov	r3, r4
}
 80186e8:	4618      	mov	r0, r3
 80186ea:	3744      	adds	r7, #68	; 0x44
 80186ec:	46bd      	mov	sp, r7
 80186ee:	bd90      	pop	{r4, r7, pc}

080186f0 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b082      	sub	sp, #8
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]
 80186f8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	3350      	adds	r3, #80	; 0x50
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	6878      	ldr	r0, [r7, #4]
 8018704:	4798      	blx	r3
 8018706:	4603      	mov	r3, r0
 8018708:	f083 0301 	eor.w	r3, r3, #1
 801870c:	b2db      	uxtb	r3, r3
 801870e:	2b00      	cmp	r3, #0
 8018710:	d001      	beq.n	8018716 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 8018712:	683b      	ldr	r3, [r7, #0]
 8018714:	e007      	b.n	8018726 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	3388      	adds	r3, #136	; 0x88
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	6878      	ldr	r0, [r7, #4]
 8018720:	4798      	blx	r3
 8018722:	4603      	mov	r3, r0
 8018724:	bf00      	nop
}
 8018726:	4618      	mov	r0, r3
 8018728:	3708      	adds	r7, #8
 801872a:	46bd      	mov	sp, r7
 801872c:	bd80      	pop	{r7, pc}

0801872e <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 801872e:	b580      	push	{r7, lr}
 8018730:	b082      	sub	sp, #8
 8018732:	af00      	add	r7, sp, #0
 8018734:	6078      	str	r0, [r7, #4]
 8018736:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	3350      	adds	r3, #80	; 0x50
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	6878      	ldr	r0, [r7, #4]
 8018742:	4798      	blx	r3
 8018744:	4603      	mov	r3, r0
 8018746:	f083 0301 	eor.w	r3, r3, #1
 801874a:	b2db      	uxtb	r3, r3
 801874c:	2b00      	cmp	r3, #0
 801874e:	d001      	beq.n	8018754 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8018750:	683b      	ldr	r3, [r7, #0]
 8018752:	e007      	b.n	8018764 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	33a0      	adds	r3, #160	; 0xa0
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	6878      	ldr	r0, [r7, #4]
 801875e:	4798      	blx	r3
 8018760:	4603      	mov	r3, r0
 8018762:	bf00      	nop
}
 8018764:	4618      	mov	r0, r3
 8018766:	3708      	adds	r7, #8
 8018768:	46bd      	mov	sp, r7
 801876a:	bd80      	pop	{r7, pc}

0801876c <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 801876c:	b590      	push	{r4, r7, lr}
 801876e:	b091      	sub	sp, #68	; 0x44
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	3354      	adds	r3, #84	; 0x54
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	f107 0208 	add.w	r2, r7, #8
 8018780:	6879      	ldr	r1, [r7, #4]
 8018782:	4610      	mov	r0, r2
 8018784:	4798      	blx	r3
 8018786:	f107 0308 	add.w	r3, r7, #8
 801878a:	4618      	mov	r0, r3
 801878c:	f005 f8e0 	bl	801d950 <_ZNK14MockNamedValue15getPointerValueEv>
 8018790:	4604      	mov	r4, r0
 8018792:	bf00      	nop
 8018794:	f107 0308 	add.w	r3, r7, #8
 8018798:	4618      	mov	r0, r3
 801879a:	f004 fbc9 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 801879e:	4623      	mov	r3, r4
}
 80187a0:	4618      	mov	r0, r3
 80187a2:	3744      	adds	r7, #68	; 0x44
 80187a4:	46bd      	mov	sp, r7
 80187a6:	bd90      	pop	{r4, r7, pc}

080187a8 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 80187a8:	b590      	push	{r4, r7, lr}
 80187aa:	b091      	sub	sp, #68	; 0x44
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	3354      	adds	r3, #84	; 0x54
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	f107 0208 	add.w	r2, r7, #8
 80187bc:	6879      	ldr	r1, [r7, #4]
 80187be:	4610      	mov	r0, r2
 80187c0:	4798      	blx	r3
 80187c2:	f107 0308 	add.w	r3, r7, #8
 80187c6:	4618      	mov	r0, r3
 80187c8:	f005 f8ea 	bl	801d9a0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80187cc:	4604      	mov	r4, r0
 80187ce:	bf00      	nop
 80187d0:	f107 0308 	add.w	r3, r7, #8
 80187d4:	4618      	mov	r0, r3
 80187d6:	f004 fbab 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 80187da:	4623      	mov	r3, r4
}
 80187dc:	4618      	mov	r0, r3
 80187de:	3744      	adds	r7, #68	; 0x44
 80187e0:	46bd      	mov	sp, r7
 80187e2:	bd90      	pop	{r4, r7, pc}

080187e4 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b082      	sub	sp, #8
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
 80187ec:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	3350      	adds	r3, #80	; 0x50
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	6878      	ldr	r0, [r7, #4]
 80187f8:	4798      	blx	r3
 80187fa:	4603      	mov	r3, r0
 80187fc:	f083 0301 	eor.w	r3, r3, #1
 8018800:	b2db      	uxtb	r3, r3
 8018802:	2b00      	cmp	r3, #0
 8018804:	d001      	beq.n	801880a <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 8018806:	683b      	ldr	r3, [r7, #0]
 8018808:	e007      	b.n	801881a <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	33a8      	adds	r3, #168	; 0xa8
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	4798      	blx	r3
 8018816:	4603      	mov	r3, r0
 8018818:	bf00      	nop
}
 801881a:	4618      	mov	r0, r3
 801881c:	3708      	adds	r7, #8
 801881e:	46bd      	mov	sp, r7
 8018820:	bd80      	pop	{r7, pc}

08018822 <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 8018822:	b590      	push	{r4, r7, lr}
 8018824:	b091      	sub	sp, #68	; 0x44
 8018826:	af00      	add	r7, sp, #0
 8018828:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	3354      	adds	r3, #84	; 0x54
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	f107 0208 	add.w	r2, r7, #8
 8018836:	6879      	ldr	r1, [r7, #4]
 8018838:	4610      	mov	r0, r2
 801883a:	4798      	blx	r3
 801883c:	f107 0308 	add.w	r3, r7, #8
 8018840:	4618      	mov	r0, r3
 8018842:	f005 f8d5 	bl	801d9f0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8018846:	4604      	mov	r4, r0
 8018848:	bf00      	nop
 801884a:	f107 0308 	add.w	r3, r7, #8
 801884e:	4618      	mov	r0, r3
 8018850:	f004 fb6e 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 8018854:	4623      	mov	r3, r4
}
 8018856:	4618      	mov	r0, r3
 8018858:	3744      	adds	r7, #68	; 0x44
 801885a:	46bd      	mov	sp, r7
 801885c:	bd90      	pop	{r4, r7, pc}

0801885e <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 801885e:	b580      	push	{r7, lr}
 8018860:	b082      	sub	sp, #8
 8018862:	af00      	add	r7, sp, #0
 8018864:	6078      	str	r0, [r7, #4]
 8018866:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	3350      	adds	r3, #80	; 0x50
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	6878      	ldr	r0, [r7, #4]
 8018872:	4798      	blx	r3
 8018874:	4603      	mov	r3, r0
 8018876:	f083 0301 	eor.w	r3, r3, #1
 801887a:	b2db      	uxtb	r3, r3
 801887c:	2b00      	cmp	r3, #0
 801887e:	d001      	beq.n	8018884 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	e007      	b.n	8018894 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	33b0      	adds	r3, #176	; 0xb0
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	6878      	ldr	r0, [r7, #4]
 801888e:	4798      	blx	r3
 8018890:	4603      	mov	r3, r0
 8018892:	bf00      	nop
}
 8018894:	4618      	mov	r0, r3
 8018896:	3708      	adds	r7, #8
 8018898:	46bd      	mov	sp, r7
 801889a:	bd80      	pop	{r7, pc}

0801889c <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 801889c:	b580      	push	{r7, lr}
 801889e:	b082      	sub	sp, #8
 80188a0:	af00      	add	r7, sp, #0
 80188a2:	6078      	str	r0, [r7, #4]
 80188a4:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	3350      	adds	r3, #80	; 0x50
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	6878      	ldr	r0, [r7, #4]
 80188b0:	4798      	blx	r3
 80188b2:	4603      	mov	r3, r0
 80188b4:	f083 0301 	eor.w	r3, r3, #1
 80188b8:	b2db      	uxtb	r3, r3
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d001      	beq.n	80188c2 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 80188be:	683b      	ldr	r3, [r7, #0]
 80188c0:	e007      	b.n	80188d2 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	3394      	adds	r3, #148	; 0x94
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	6878      	ldr	r0, [r7, #4]
 80188cc:	4798      	blx	r3
 80188ce:	4603      	mov	r3, r0
 80188d0:	bf00      	nop
}
 80188d2:	4618      	mov	r0, r3
 80188d4:	3708      	adds	r7, #8
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bd80      	pop	{r7, pc}

080188da <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 80188da:	b590      	push	{r4, r7, lr}
 80188dc:	b091      	sub	sp, #68	; 0x44
 80188de:	af00      	add	r7, sp, #0
 80188e0:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	3354      	adds	r3, #84	; 0x54
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	f107 0208 	add.w	r2, r7, #8
 80188ee:	6879      	ldr	r1, [r7, #4]
 80188f0:	4610      	mov	r0, r2
 80188f2:	4798      	blx	r3
 80188f4:	f107 0308 	add.w	r3, r7, #8
 80188f8:	4618      	mov	r0, r3
 80188fa:	f005 f801 	bl	801d900 <_ZNK14MockNamedValue14getStringValueEv>
 80188fe:	4604      	mov	r4, r0
 8018900:	bf00      	nop
 8018902:	f107 0308 	add.w	r3, r7, #8
 8018906:	4618      	mov	r0, r3
 8018908:	f004 fb12 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 801890c:	4623      	mov	r3, r4
}
 801890e:	4618      	mov	r0, r3
 8018910:	3744      	adds	r7, #68	; 0x44
 8018912:	46bd      	mov	sp, r7
 8018914:	bd90      	pop	{r4, r7, pc}

08018916 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8018916:	b590      	push	{r4, r7, lr}
 8018918:	b093      	sub	sp, #76	; 0x4c
 801891a:	af00      	add	r7, sp, #0
 801891c:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	3354      	adds	r3, #84	; 0x54
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	f107 0210 	add.w	r2, r7, #16
 801892a:	6879      	ldr	r1, [r7, #4]
 801892c:	4610      	mov	r0, r2
 801892e:	4798      	blx	r3
 8018930:	f107 0308 	add.w	r3, r7, #8
 8018934:	f107 0210 	add.w	r2, r7, #16
 8018938:	4611      	mov	r1, r2
 801893a:	4618      	mov	r0, r3
 801893c:	f004 fd8c 	bl	801d458 <_ZNK14MockNamedValue7getNameEv>
 8018940:	f107 0308 	add.w	r3, r7, #8
 8018944:	4618      	mov	r0, r3
 8018946:	f7f4 f94b 	bl	800cbe0 <_ZNK12SimpleString7isEmptyEv>
 801894a:	4603      	mov	r3, r0
 801894c:	f083 0301 	eor.w	r3, r3, #1
 8018950:	b2dc      	uxtb	r4, r3
 8018952:	f107 0308 	add.w	r3, r7, #8
 8018956:	4618      	mov	r0, r3
 8018958:	f7f4 f953 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801895c:	f107 0310 	add.w	r3, r7, #16
 8018960:	4618      	mov	r0, r3
 8018962:	f004 fae5 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 8018966:	4623      	mov	r3, r4
}
 8018968:	4618      	mov	r0, r3
 801896a:	374c      	adds	r7, #76	; 0x4c
 801896c:	46bd      	mov	sp, r7
 801896e:	bd90      	pop	{r4, r7, pc}

08018970 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8018970:	b590      	push	{r4, r7, lr}
 8018972:	b095      	sub	sp, #84	; 0x54
 8018974:	af02      	add	r7, sp, #8
 8018976:	6078      	str	r0, [r7, #4]
 8018978:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	33c0      	adds	r3, #192	; 0xc0
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	6878      	ldr	r0, [r7, #4]
 8018984:	4798      	blx	r3
 8018986:	4603      	mov	r3, r0
 8018988:	2b00      	cmp	r3, #0
 801898a:	d001      	beq.n	8018990 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 801898c:	687c      	ldr	r4, [r7, #4]
 801898e:	e053      	b.n	8018a38 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	331c      	adds	r3, #28
 8018994:	6839      	ldr	r1, [r7, #0]
 8018996:	4618      	mov	r0, r3
 8018998:	f003 f8ca 	bl	801bb30 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	699b      	ldr	r3, [r3, #24]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d109      	bne.n	80189b8 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	331c      	adds	r3, #28
 80189a8:	4618      	mov	r0, r3
 80189aa:	f002 fe20 	bl	801b5ee <_ZNK21MockExpectedCallsList7isEmptyEv>
 80189ae:	4603      	mov	r3, r0
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d001      	beq.n	80189b8 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 80189b4:	2301      	movs	r3, #1
 80189b6:	e000      	b.n	80189ba <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 80189b8:	2300      	movs	r3, #0
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d02c      	beq.n	8018a18 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	33cc      	adds	r3, #204	; 0xcc
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	6878      	ldr	r0, [r7, #4]
 80189c8:	4798      	blx	r3
 80189ca:	4604      	mov	r4, r0
 80189cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80189d0:	6879      	ldr	r1, [r7, #4]
 80189d2:	4618      	mov	r0, r3
 80189d4:	f7fe fd3f 	bl	8017456 <_ZNK21MockCheckedActualCall7getNameEv>
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80189e0:	f107 000c 	add.w	r0, r7, #12
 80189e4:	9300      	str	r3, [sp, #0]
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	4621      	mov	r1, r4
 80189ea:	f004 f9fb 	bl	801cde4 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 80189ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80189f2:	4618      	mov	r0, r3
 80189f4:	f7f4 f905 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	33dc      	adds	r3, #220	; 0xdc
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	f107 020c 	add.w	r2, r7, #12
 8018a04:	4611      	mov	r1, r2
 8018a06:	6878      	ldr	r0, [r7, #4]
 8018a08:	4798      	blx	r3
        return *this;
 8018a0a:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8018a0c:	f107 030c 	add.w	r3, r7, #12
 8018a10:	4618      	mov	r0, r3
 8018a12:	f000 ffa7 	bl	8019964 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8018a16:	e00f      	b.n	8018a38 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	331c      	adds	r3, #28
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f003 f9a7 	bl	801bd70 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	699b      	ldr	r3, [r3, #24]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d105      	bne.n	8018a36 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	33d8      	adds	r3, #216	; 0xd8
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	6878      	ldr	r0, [r7, #4]
 8018a34:	4798      	blx	r3
    }

    return *this;
 8018a36:	687c      	ldr	r4, [r7, #4]
 8018a38:	4623      	mov	r3, r4
}
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	374c      	adds	r7, #76	; 0x4c
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd90      	pop	{r4, r7, pc}
	...

08018a44 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8018a44:	b590      	push	{r4, r7, lr}
 8018a46:	b087      	sub	sp, #28
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	60f8      	str	r0, [r7, #12]
 8018a4c:	60b9      	str	r1, [r7, #8]
 8018a4e:	607a      	str	r2, [r7, #4]
 8018a50:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 8018a52:	f240 2282 	movw	r2, #642	; 0x282
 8018a56:	4913      	ldr	r1, [pc, #76]	; (8018aa4 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8018a58:	2018      	movs	r0, #24
 8018a5a:	f7f1 f957 	bl	8009d0c <_ZnwjPKci>
 8018a5e:	4604      	mov	r4, r0
 8018a60:	683b      	ldr	r3, [r7, #0]
 8018a62:	687a      	ldr	r2, [r7, #4]
 8018a64:	68b9      	ldr	r1, [r7, #8]
 8018a66:	4620      	mov	r0, r4
 8018a68:	f7fe fa48 	bl	8016efc <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8018a6c:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d103      	bne.n	8018a7e <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	693a      	ldr	r2, [r7, #16]
 8018a7a:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8018a7c:	e00d      	b.n	8018a9a <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a82:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8018a84:	697b      	ldr	r3, [r7, #20]
 8018a86:	695b      	ldr	r3, [r3, #20]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d003      	beq.n	8018a94 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8018a8c:	697b      	ldr	r3, [r7, #20]
 8018a8e:	695b      	ldr	r3, [r3, #20]
 8018a90:	617b      	str	r3, [r7, #20]
 8018a92:	e7f7      	b.n	8018a84 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8018a94:	697b      	ldr	r3, [r7, #20]
 8018a96:	693a      	ldr	r2, [r7, #16]
 8018a98:	615a      	str	r2, [r3, #20]
}
 8018a9a:	bf00      	nop
 8018a9c:	371c      	adds	r7, #28
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd90      	pop	{r4, r7, pc}
 8018aa2:	bf00      	nop
 8018aa4:	08025804 	.word	0x08025804

08018aa8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b082      	sub	sp, #8
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	3308      	adds	r3, #8
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f7f4 f8a4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	4618      	mov	r0, r3
 8018abe:	f7f4 f8a0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	3708      	adds	r7, #8
 8018ac8:	46bd      	mov	sp, r7
 8018aca:	bd80      	pop	{r7, pc}

08018acc <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8018acc:	b590      	push	{r4, r7, lr}
 8018ace:	b085      	sub	sp, #20
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ad8:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8018ada:	2300      	movs	r3, #0
 8018adc:	60bb      	str	r3, [r7, #8]

    while (current) {
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d012      	beq.n	8018b0a <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	695b      	ldr	r3, [r3, #20]
 8018aec:	60fb      	str	r3, [r7, #12]
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	68fa      	ldr	r2, [r7, #12]
 8018af2:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8018af4:	68bc      	ldr	r4, [r7, #8]
 8018af6:	2c00      	cmp	r4, #0
 8018af8:	d0f1      	beq.n	8018ade <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8018afa:	4620      	mov	r0, r4
 8018afc:	f7ff ffd4 	bl	8018aa8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8018b00:	2118      	movs	r1, #24
 8018b02:	4620      	mov	r0, r4
 8018b04:	f7f1 f916 	bl	8009d34 <_ZdlPvj>
    while (current) {
 8018b08:	e7e9      	b.n	8018ade <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8018b0a:	bf00      	nop
 8018b0c:	3714      	adds	r7, #20
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd90      	pop	{r4, r7, pc}
	...

08018b14 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b082      	sub	sp, #8
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	4618      	mov	r0, r3
 8018b20:	f7fe fc6a 	bl	80173f8 <_ZN14MockActualCallC1Ev>
 8018b24:	4a06      	ldr	r2, [pc, #24]	; (8018b40 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	601a      	str	r2, [r3, #0]
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	3304      	adds	r3, #4
 8018b2e:	4905      	ldr	r1, [pc, #20]	; (8018b44 <_ZN19MockActualCallTraceC1Ev+0x30>)
 8018b30:	4618      	mov	r0, r3
 8018b32:	f7f3 fcae 	bl	800c492 <_ZN12SimpleStringC1EPKc>
{
}
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	4618      	mov	r0, r3
 8018b3a:	3708      	adds	r7, #8
 8018b3c:	46bd      	mov	sp, r7
 8018b3e:	bd80      	pop	{r7, pc}
 8018b40:	08028630 	.word	0x08028630
 8018b44:	080257ec 	.word	0x080257ec

08018b48 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b082      	sub	sp, #8
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
 8018b50:	4a08      	ldr	r2, [pc, #32]	; (8018b74 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	601a      	str	r2, [r3, #0]
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	3304      	adds	r3, #4
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	f7f4 f851 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	4618      	mov	r0, r3
 8018b64:	f7fe fc58 	bl	8017418 <_ZN14MockActualCallD1Ev>
{
}
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	3708      	adds	r7, #8
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bd80      	pop	{r7, pc}
 8018b72:	bf00      	nop
 8018b74:	08028630 	.word	0x08028630

08018b78 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b082      	sub	sp, #8
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
}
 8018b80:	6878      	ldr	r0, [r7, #4]
 8018b82:	f7ff ffe1 	bl	8018b48 <_ZN19MockActualCallTraceD1Ev>
 8018b86:	210c      	movs	r1, #12
 8018b88:	6878      	ldr	r0, [r7, #4]
 8018b8a:	f7f1 f8d3 	bl	8009d34 <_ZdlPvj>
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	4618      	mov	r0, r3
 8018b92:	3708      	adds	r7, #8
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bd80      	pop	{r7, pc}

08018b98 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b082      	sub	sp, #8
 8018b9c:	af00      	add	r7, sp, #0
 8018b9e:	6078      	str	r0, [r7, #4]
 8018ba0:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	3304      	adds	r3, #4
 8018ba6:	4907      	ldr	r1, [pc, #28]	; (8018bc4 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8018ba8:	4618      	mov	r0, r3
 8018baa:	f7f4 f8b9 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	3304      	adds	r3, #4
 8018bb2:	6839      	ldr	r1, [r7, #0]
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	f7f4 f8a1 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    return *this;
 8018bba:	687b      	ldr	r3, [r7, #4]
}
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	3708      	adds	r7, #8
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	080258f8 	.word	0x080258f8

08018bc8 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8018bc8:	b590      	push	{r4, r7, lr}
 8018bca:	b085      	sub	sp, #20
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	6078      	str	r0, [r7, #4]
 8018bd0:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	3304      	adds	r3, #4
 8018bd6:	490e      	ldr	r1, [pc, #56]	; (8018c10 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8018bd8:	4618      	mov	r0, r3
 8018bda:	f7f4 f8a1 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	1d1c      	adds	r4, r3, #4
 8018be2:	f107 0308 	add.w	r3, r7, #8
 8018be6:	6839      	ldr	r1, [r7, #0]
 8018be8:	4618      	mov	r0, r3
 8018bea:	f7f4 fd39 	bl	800d660 <_Z10StringFromj>
 8018bee:	f107 0308 	add.w	r3, r7, #8
 8018bf2:	4619      	mov	r1, r3
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	f7f4 f881 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8018bfa:	f107 0308 	add.w	r3, r7, #8
 8018bfe:	4618      	mov	r0, r3
 8018c00:	f7f3 ffff 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 8018c04:	687b      	ldr	r3, [r7, #4]
}
 8018c06:	4618      	mov	r0, r3
 8018c08:	3714      	adds	r7, #20
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd90      	pop	{r4, r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	08025908 	.word	0x08025908

08018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b082      	sub	sp, #8
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	6078      	str	r0, [r7, #4]
 8018c1c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	3304      	adds	r3, #4
 8018c22:	490a      	ldr	r1, [pc, #40]	; (8018c4c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8018c24:	4618      	mov	r0, r3
 8018c26:	f7f4 f87b 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	3304      	adds	r3, #4
 8018c2e:	6839      	ldr	r1, [r7, #0]
 8018c30:	4618      	mov	r0, r3
 8018c32:	f7f4 f863 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	3304      	adds	r3, #4
 8018c3a:	4905      	ldr	r1, [pc, #20]	; (8018c50 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f7f4 f86f 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
}
 8018c42:	bf00      	nop
 8018c44:	3708      	adds	r7, #8
 8018c46:	46bd      	mov	sp, r7
 8018c48:	bd80      	pop	{r7, pc}
 8018c4a:	bf00      	nop
 8018c4c:	08025918 	.word	0x08025918
 8018c50:	0802591c 	.word	0x0802591c

08018c54 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8018c54:	b590      	push	{r4, r7, lr}
 8018c56:	b087      	sub	sp, #28
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	60f8      	str	r0, [r7, #12]
 8018c5c:	60b9      	str	r1, [r7, #8]
 8018c5e:	4613      	mov	r3, r2
 8018c60:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 8018c62:	68b9      	ldr	r1, [r7, #8]
 8018c64:	68f8      	ldr	r0, [r7, #12]
 8018c66:	f7ff ffd5 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	1d1c      	adds	r4, r3, #4
 8018c6e:	f107 0310 	add.w	r3, r7, #16
 8018c72:	79fa      	ldrb	r2, [r7, #7]
 8018c74:	4611      	mov	r1, r2
 8018c76:	4618      	mov	r0, r3
 8018c78:	f7f4 fa34 	bl	800d0e4 <_Z10StringFromb>
 8018c7c:	f107 0310 	add.w	r3, r7, #16
 8018c80:	4619      	mov	r1, r3
 8018c82:	4620      	mov	r0, r4
 8018c84:	f7f4 f83a 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8018c88:	f107 0310 	add.w	r3, r7, #16
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	f7f3 ffb8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 8018c92:	68fb      	ldr	r3, [r7, #12]
}
 8018c94:	4618      	mov	r0, r3
 8018c96:	371c      	adds	r7, #28
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	bd90      	pop	{r4, r7, pc}

08018c9c <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8018c9c:	b590      	push	{r4, r7, lr}
 8018c9e:	b08f      	sub	sp, #60	; 0x3c
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	60f8      	str	r0, [r7, #12]
 8018ca4:	60b9      	str	r1, [r7, #8]
 8018ca6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018ca8:	68b9      	ldr	r1, [r7, #8]
 8018caa:	68f8      	ldr	r0, [r7, #12]
 8018cac:	f7ff ffb2 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	1d1c      	adds	r4, r3, #4
 8018cb4:	f107 0320 	add.w	r3, r7, #32
 8018cb8:	6879      	ldr	r1, [r7, #4]
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f7f4 fcd0 	bl	800d660 <_Z10StringFromj>
 8018cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018cc4:	491f      	ldr	r1, [pc, #124]	; (8018d44 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f7f3 fbe3 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8018ccc:	f107 0318 	add.w	r3, r7, #24
 8018cd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018cd4:	f107 0120 	add.w	r1, r7, #32
 8018cd8:	4618      	mov	r0, r3
 8018cda:	f7f3 fff4 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 8018cde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018ce2:	6879      	ldr	r1, [r7, #4]
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f7f4 fb5f 	bl	800d3a8 <_Z30BracketsFormattedHexStringFromj>
 8018cea:	f107 0310 	add.w	r3, r7, #16
 8018cee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018cf2:	f107 0118 	add.w	r1, r7, #24
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7f3 ffe5 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 8018cfc:	f107 0310 	add.w	r3, r7, #16
 8018d00:	4619      	mov	r1, r3
 8018d02:	4620      	mov	r0, r4
 8018d04:	f7f3 fffa 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8018d08:	f107 0310 	add.w	r3, r7, #16
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	f7f3 ff78 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018d12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018d16:	4618      	mov	r0, r3
 8018d18:	f7f3 ff73 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018d1c:	f107 0318 	add.w	r3, r7, #24
 8018d20:	4618      	mov	r0, r3
 8018d22:	f7f3 ff6e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f7f3 ff69 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018d30:	f107 0320 	add.w	r3, r7, #32
 8018d34:	4618      	mov	r0, r3
 8018d36:	f7f3 ff64 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 8018d3a:	68fb      	ldr	r3, [r7, #12]
}
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	373c      	adds	r7, #60	; 0x3c
 8018d40:	46bd      	mov	sp, r7
 8018d42:	bd90      	pop	{r4, r7, pc}
 8018d44:	08025918 	.word	0x08025918

08018d48 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8018d48:	b590      	push	{r4, r7, lr}
 8018d4a:	b08f      	sub	sp, #60	; 0x3c
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	60f8      	str	r0, [r7, #12]
 8018d50:	60b9      	str	r1, [r7, #8]
 8018d52:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018d54:	68b9      	ldr	r1, [r7, #8]
 8018d56:	68f8      	ldr	r0, [r7, #12]
 8018d58:	f7ff ff5c 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	1d1c      	adds	r4, r3, #4
 8018d60:	f107 0320 	add.w	r3, r7, #32
 8018d64:	6879      	ldr	r1, [r7, #4]
 8018d66:	4618      	mov	r0, r3
 8018d68:	f7f4 fa12 	bl	800d190 <_Z10StringFromi>
 8018d6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018d70:	491f      	ldr	r1, [pc, #124]	; (8018df0 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8018d72:	4618      	mov	r0, r3
 8018d74:	f7f3 fb8d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8018d78:	f107 0318 	add.w	r3, r7, #24
 8018d7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018d80:	f107 0120 	add.w	r1, r7, #32
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7f3 ff9e 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 8018d8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018d8e:	6879      	ldr	r1, [r7, #4]
 8018d90:	4618      	mov	r0, r3
 8018d92:	f7f4 faed 	bl	800d370 <_Z30BracketsFormattedHexStringFromi>
 8018d96:	f107 0310 	add.w	r3, r7, #16
 8018d9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018d9e:	f107 0118 	add.w	r1, r7, #24
 8018da2:	4618      	mov	r0, r3
 8018da4:	f7f3 ff8f 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 8018da8:	f107 0310 	add.w	r3, r7, #16
 8018dac:	4619      	mov	r1, r3
 8018dae:	4620      	mov	r0, r4
 8018db0:	f7f3 ffa4 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8018db4:	f107 0310 	add.w	r3, r7, #16
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7f3 ff22 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f7f3 ff1d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018dc8:	f107 0318 	add.w	r3, r7, #24
 8018dcc:	4618      	mov	r0, r3
 8018dce:	f7f3 ff18 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	f7f3 ff13 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018ddc:	f107 0320 	add.w	r3, r7, #32
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7f3 ff0e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 8018de6:	68fb      	ldr	r3, [r7, #12]
}
 8018de8:	4618      	mov	r0, r3
 8018dea:	373c      	adds	r7, #60	; 0x3c
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd90      	pop	{r4, r7, pc}
 8018df0:	08025918 	.word	0x08025918

08018df4 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018df4:	b590      	push	{r4, r7, lr}
 8018df6:	b08f      	sub	sp, #60	; 0x3c
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	60f8      	str	r0, [r7, #12]
 8018dfc:	60b9      	str	r1, [r7, #8]
 8018dfe:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018e00:	68b9      	ldr	r1, [r7, #8]
 8018e02:	68f8      	ldr	r0, [r7, #12]
 8018e04:	f7ff ff06 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	1d1c      	adds	r4, r3, #4
 8018e0c:	f107 0320 	add.w	r3, r7, #32
 8018e10:	6879      	ldr	r1, [r7, #4]
 8018e12:	4618      	mov	r0, r3
 8018e14:	f7f4 fc36 	bl	800d684 <_Z10StringFromm>
 8018e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018e1c:	491f      	ldr	r1, [pc, #124]	; (8018e9c <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8018e1e:	4618      	mov	r0, r3
 8018e20:	f7f3 fb37 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8018e24:	f107 0318 	add.w	r3, r7, #24
 8018e28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018e2c:	f107 0120 	add.w	r1, r7, #32
 8018e30:	4618      	mov	r0, r3
 8018e32:	f7f3 ff48 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 8018e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e3a:	6879      	ldr	r1, [r7, #4]
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	f7f4 faeb 	bl	800d418 <_Z30BracketsFormattedHexStringFromm>
 8018e42:	f107 0310 	add.w	r3, r7, #16
 8018e46:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018e4a:	f107 0118 	add.w	r1, r7, #24
 8018e4e:	4618      	mov	r0, r3
 8018e50:	f7f3 ff39 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 8018e54:	f107 0310 	add.w	r3, r7, #16
 8018e58:	4619      	mov	r1, r3
 8018e5a:	4620      	mov	r0, r4
 8018e5c:	f7f3 ff4e 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8018e60:	f107 0310 	add.w	r3, r7, #16
 8018e64:	4618      	mov	r0, r3
 8018e66:	f7f3 fecc 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f7f3 fec7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018e74:	f107 0318 	add.w	r3, r7, #24
 8018e78:	4618      	mov	r0, r3
 8018e7a:	f7f3 fec2 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018e82:	4618      	mov	r0, r3
 8018e84:	f7f3 febd 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018e88:	f107 0320 	add.w	r3, r7, #32
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	f7f3 feb8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 8018e92:	68fb      	ldr	r3, [r7, #12]
}
 8018e94:	4618      	mov	r0, r3
 8018e96:	373c      	adds	r7, #60	; 0x3c
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	bd90      	pop	{r4, r7, pc}
 8018e9c:	08025918 	.word	0x08025918

08018ea0 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8018ea0:	b590      	push	{r4, r7, lr}
 8018ea2:	b08f      	sub	sp, #60	; 0x3c
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	60f8      	str	r0, [r7, #12]
 8018ea8:	60b9      	str	r1, [r7, #8]
 8018eaa:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018eac:	68b9      	ldr	r1, [r7, #8]
 8018eae:	68f8      	ldr	r0, [r7, #12]
 8018eb0:	f7ff feb0 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	1d1c      	adds	r4, r3, #4
 8018eb8:	f107 0320 	add.w	r3, r7, #32
 8018ebc:	6879      	ldr	r1, [r7, #4]
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f7f4 f978 	bl	800d1b4 <_Z10StringFroml>
 8018ec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018ec8:	491f      	ldr	r1, [pc, #124]	; (8018f48 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 8018eca:	4618      	mov	r0, r3
 8018ecc:	f7f3 fae1 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8018ed0:	f107 0318 	add.w	r3, r7, #24
 8018ed4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018ed8:	f107 0120 	add.w	r1, r7, #32
 8018edc:	4618      	mov	r0, r3
 8018ede:	f7f3 fef2 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 8018ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018ee6:	6879      	ldr	r1, [r7, #4]
 8018ee8:	4618      	mov	r0, r3
 8018eea:	f7f4 fa79 	bl	800d3e0 <_Z30BracketsFormattedHexStringFroml>
 8018eee:	f107 0310 	add.w	r3, r7, #16
 8018ef2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018ef6:	f107 0118 	add.w	r1, r7, #24
 8018efa:	4618      	mov	r0, r3
 8018efc:	f7f3 fee3 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 8018f00:	f107 0310 	add.w	r3, r7, #16
 8018f04:	4619      	mov	r1, r3
 8018f06:	4620      	mov	r0, r4
 8018f08:	f7f3 fef8 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8018f0c:	f107 0310 	add.w	r3, r7, #16
 8018f10:	4618      	mov	r0, r3
 8018f12:	f7f3 fe76 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018f16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	f7f3 fe71 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018f20:	f107 0318 	add.w	r3, r7, #24
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7f3 fe6c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f7f3 fe67 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8018f34:	f107 0320 	add.w	r3, r7, #32
 8018f38:	4618      	mov	r0, r3
 8018f3a:	f7f3 fe62 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 8018f3e:	68fb      	ldr	r3, [r7, #12]
}
 8018f40:	4618      	mov	r0, r3
 8018f42:	373c      	adds	r7, #60	; 0x3c
 8018f44:	46bd      	mov	sp, r7
 8018f46:	bd90      	pop	{r4, r7, pc}
 8018f48:	08025918 	.word	0x08025918

08018f4c <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018f4c:	b5b0      	push	{r4, r5, r7, lr}
 8018f4e:	b086      	sub	sp, #24
 8018f50:	af02      	add	r7, sp, #8
 8018f52:	60f8      	str	r0, [r7, #12]
 8018f54:	60b9      	str	r1, [r7, #8]
 8018f56:	4639      	mov	r1, r7
 8018f58:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018f5c:	f7fa fe7c 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8018f60:	4604      	mov	r4, r0
 8018f62:	6823      	ldr	r3, [r4, #0]
 8018f64:	3368      	adds	r3, #104	; 0x68
 8018f66:	681d      	ldr	r5, [r3, #0]
 8018f68:	f7fa fe86 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018f6c:	4603      	mov	r3, r0
 8018f6e:	9300      	str	r3, [sp, #0]
 8018f70:	f240 23ee 	movw	r3, #750	; 0x2ee
 8018f74:	4a04      	ldr	r2, [pc, #16]	; (8018f88 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8018f76:	4905      	ldr	r1, [pc, #20]	; (8018f8c <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8018f78:	4620      	mov	r0, r4
 8018f7a:	47a8      	blx	r5
    return *this;
 8018f7c:	68fb      	ldr	r3, [r7, #12]
}
 8018f7e:	4618      	mov	r0, r3
 8018f80:	3710      	adds	r7, #16
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bdb0      	pop	{r4, r5, r7, pc}
 8018f86:	bf00      	nop
 8018f88:	08025804 	.word	0x08025804
 8018f8c:	08025820 	.word	0x08025820

08018f90 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8018f90:	b5b0      	push	{r4, r5, r7, lr}
 8018f92:	b086      	sub	sp, #24
 8018f94:	af02      	add	r7, sp, #8
 8018f96:	60f8      	str	r0, [r7, #12]
 8018f98:	60b9      	str	r1, [r7, #8]
 8018f9a:	4639      	mov	r1, r7
 8018f9c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018fa0:	f7fa fe5a 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8018fa4:	4604      	mov	r4, r0
 8018fa6:	6823      	ldr	r3, [r4, #0]
 8018fa8:	3368      	adds	r3, #104	; 0x68
 8018faa:	681d      	ldr	r5, [r3, #0]
 8018fac:	f7fa fe64 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018fb0:	4603      	mov	r3, r0
 8018fb2:	9300      	str	r3, [sp, #0]
 8018fb4:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8018fb8:	4a04      	ldr	r2, [pc, #16]	; (8018fcc <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8018fba:	4905      	ldr	r1, [pc, #20]	; (8018fd0 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8018fbc:	4620      	mov	r0, r4
 8018fbe:	47a8      	blx	r5
    return *this;
 8018fc0:	68fb      	ldr	r3, [r7, #12]
}
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	3710      	adds	r7, #16
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8018fca:	bf00      	nop
 8018fcc:	08025804 	.word	0x08025804
 8018fd0:	0802584c 	.word	0x0802584c

08018fd4 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8018fd4:	b590      	push	{r4, r7, lr}
 8018fd6:	b087      	sub	sp, #28
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	60f8      	str	r0, [r7, #12]
 8018fdc:	60b9      	str	r1, [r7, #8]
 8018fde:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8018fe2:	68b9      	ldr	r1, [r7, #8]
 8018fe4:	68f8      	ldr	r0, [r7, #12]
 8018fe6:	f7ff fe15 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	1d1c      	adds	r4, r3, #4
 8018fee:	f107 0310 	add.w	r3, r7, #16
 8018ff2:	2106      	movs	r1, #6
 8018ff4:	ed97 0b00 	vldr	d0, [r7]
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f7f4 fac7 	bl	800d58c <_Z10StringFromdi>
 8018ffe:	f107 0310 	add.w	r3, r7, #16
 8019002:	4619      	mov	r1, r3
 8019004:	4620      	mov	r0, r4
 8019006:	f7f3 fe79 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801900a:	f107 0310 	add.w	r3, r7, #16
 801900e:	4618      	mov	r0, r3
 8019010:	f7f3 fdf7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 8019014:	68fb      	ldr	r3, [r7, #12]
}
 8019016:	4618      	mov	r0, r3
 8019018:	371c      	adds	r7, #28
 801901a:	46bd      	mov	sp, r7
 801901c:	bd90      	pop	{r4, r7, pc}

0801901e <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 801901e:	b590      	push	{r4, r7, lr}
 8019020:	b087      	sub	sp, #28
 8019022:	af00      	add	r7, sp, #0
 8019024:	60f8      	str	r0, [r7, #12]
 8019026:	60b9      	str	r1, [r7, #8]
 8019028:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801902a:	68b9      	ldr	r1, [r7, #8]
 801902c:	68f8      	ldr	r0, [r7, #12]
 801902e:	f7ff fdf1 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	1d1c      	adds	r4, r3, #4
 8019036:	f107 0310 	add.w	r3, r7, #16
 801903a:	6879      	ldr	r1, [r7, #4]
 801903c:	4618      	mov	r0, r3
 801903e:	f7f4 f86d 	bl	800d11c <_Z10StringFromPKc>
 8019042:	f107 0310 	add.w	r3, r7, #16
 8019046:	4619      	mov	r1, r3
 8019048:	4620      	mov	r0, r4
 801904a:	f7f3 fe57 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801904e:	f107 0310 	add.w	r3, r7, #16
 8019052:	4618      	mov	r0, r3
 8019054:	f7f3 fdd5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 8019058:	68fb      	ldr	r3, [r7, #12]
}
 801905a:	4618      	mov	r0, r3
 801905c:	371c      	adds	r7, #28
 801905e:	46bd      	mov	sp, r7
 8019060:	bd90      	pop	{r4, r7, pc}

08019062 <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 8019062:	b590      	push	{r4, r7, lr}
 8019064:	b087      	sub	sp, #28
 8019066:	af00      	add	r7, sp, #0
 8019068:	60f8      	str	r0, [r7, #12]
 801906a:	60b9      	str	r1, [r7, #8]
 801906c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801906e:	68b9      	ldr	r1, [r7, #8]
 8019070:	68f8      	ldr	r0, [r7, #12]
 8019072:	f7ff fdcf 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	1d1c      	adds	r4, r3, #4
 801907a:	f107 0310 	add.w	r3, r7, #16
 801907e:	6879      	ldr	r1, [r7, #4]
 8019080:	4618      	mov	r0, r3
 8019082:	f7f4 f8a9 	bl	800d1d8 <_Z10StringFromPKv>
 8019086:	f107 0310 	add.w	r3, r7, #16
 801908a:	4619      	mov	r1, r3
 801908c:	4620      	mov	r0, r4
 801908e:	f7f3 fe35 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8019092:	f107 0310 	add.w	r3, r7, #16
 8019096:	4618      	mov	r0, r3
 8019098:	f7f3 fdb3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 801909c:	68fb      	ldr	r3, [r7, #12]
}
 801909e:	4618      	mov	r0, r3
 80190a0:	371c      	adds	r7, #28
 80190a2:	46bd      	mov	sp, r7
 80190a4:	bd90      	pop	{r4, r7, pc}

080190a6 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80190a6:	b590      	push	{r4, r7, lr}
 80190a8:	b087      	sub	sp, #28
 80190aa:	af00      	add	r7, sp, #0
 80190ac:	60f8      	str	r0, [r7, #12]
 80190ae:	60b9      	str	r1, [r7, #8]
 80190b0:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80190b2:	68b9      	ldr	r1, [r7, #8]
 80190b4:	68f8      	ldr	r0, [r7, #12]
 80190b6:	f7ff fdad 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	1d1c      	adds	r4, r3, #4
 80190be:	f107 0310 	add.w	r3, r7, #16
 80190c2:	6879      	ldr	r1, [r7, #4]
 80190c4:	4618      	mov	r0, r3
 80190c6:	f7f4 f887 	bl	800d1d8 <_Z10StringFromPKv>
 80190ca:	f107 0310 	add.w	r3, r7, #16
 80190ce:	4619      	mov	r1, r3
 80190d0:	4620      	mov	r0, r4
 80190d2:	f7f3 fe13 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 80190d6:	f107 0310 	add.w	r3, r7, #16
 80190da:	4618      	mov	r0, r3
 80190dc:	f7f3 fd91 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 80190e0:	68fb      	ldr	r3, [r7, #12]
}
 80190e2:	4618      	mov	r0, r3
 80190e4:	371c      	adds	r7, #28
 80190e6:	46bd      	mov	sp, r7
 80190e8:	bd90      	pop	{r4, r7, pc}

080190ea <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80190ea:	b590      	push	{r4, r7, lr}
 80190ec:	b087      	sub	sp, #28
 80190ee:	af00      	add	r7, sp, #0
 80190f0:	60f8      	str	r0, [r7, #12]
 80190f2:	60b9      	str	r1, [r7, #8]
 80190f4:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80190f6:	68b9      	ldr	r1, [r7, #8]
 80190f8:	68f8      	ldr	r0, [r7, #12]
 80190fa:	f7ff fd8b 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	1d1c      	adds	r4, r3, #4
 8019102:	f107 0310 	add.w	r3, r7, #16
 8019106:	6879      	ldr	r1, [r7, #4]
 8019108:	4618      	mov	r0, r3
 801910a:	f7f4 f88f 	bl	800d22c <_Z10StringFromPFvvE>
 801910e:	f107 0310 	add.w	r3, r7, #16
 8019112:	4619      	mov	r1, r3
 8019114:	4620      	mov	r0, r4
 8019116:	f7f3 fdf1 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801911a:	f107 0310 	add.w	r3, r7, #16
 801911e:	4618      	mov	r0, r3
 8019120:	f7f3 fd6f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 8019124:	68fb      	ldr	r3, [r7, #12]
}
 8019126:	4618      	mov	r0, r3
 8019128:	371c      	adds	r7, #28
 801912a:	46bd      	mov	sp, r7
 801912c:	bd90      	pop	{r4, r7, pc}

0801912e <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801912e:	b590      	push	{r4, r7, lr}
 8019130:	b087      	sub	sp, #28
 8019132:	af00      	add	r7, sp, #0
 8019134:	60f8      	str	r0, [r7, #12]
 8019136:	60b9      	str	r1, [r7, #8]
 8019138:	607a      	str	r2, [r7, #4]
 801913a:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 801913c:	68b9      	ldr	r1, [r7, #8]
 801913e:	68f8      	ldr	r0, [r7, #12]
 8019140:	f7ff fd68 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	1d1c      	adds	r4, r3, #4
 8019148:	f107 0310 	add.w	r3, r7, #16
 801914c:	683a      	ldr	r2, [r7, #0]
 801914e:	6879      	ldr	r1, [r7, #4]
 8019150:	4618      	mov	r0, r3
 8019152:	f7f4 fbaf 	bl	800d8b4 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8019156:	f107 0310 	add.w	r3, r7, #16
 801915a:	4619      	mov	r1, r3
 801915c:	4620      	mov	r0, r4
 801915e:	f7f3 fdcd 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8019162:	f107 0310 	add.w	r3, r7, #16
 8019166:	4618      	mov	r0, r3
 8019168:	f7f3 fd4b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 801916c:	68fb      	ldr	r3, [r7, #12]
}
 801916e:	4618      	mov	r0, r3
 8019170:	371c      	adds	r7, #28
 8019172:	46bd      	mov	sp, r7
 8019174:	bd90      	pop	{r4, r7, pc}
	...

08019178 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8019178:	b590      	push	{r4, r7, lr}
 801917a:	b087      	sub	sp, #28
 801917c:	af00      	add	r7, sp, #0
 801917e:	60f8      	str	r0, [r7, #12]
 8019180:	60b9      	str	r1, [r7, #8]
 8019182:	607a      	str	r2, [r7, #4]
 8019184:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	3304      	adds	r3, #4
 801918a:	4913      	ldr	r1, [pc, #76]	; (80191d8 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 801918c:	4618      	mov	r0, r3
 801918e:	f7f3 fdc7 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	3304      	adds	r3, #4
 8019196:	68b9      	ldr	r1, [r7, #8]
 8019198:	4618      	mov	r0, r3
 801919a:	f7f3 fdaf 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801919e:	6879      	ldr	r1, [r7, #4]
 80191a0:	68f8      	ldr	r0, [r7, #12]
 80191a2:	f7ff fd37 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	1d1c      	adds	r4, r3, #4
 80191aa:	f107 0310 	add.w	r3, r7, #16
 80191ae:	6839      	ldr	r1, [r7, #0]
 80191b0:	4618      	mov	r0, r3
 80191b2:	f7f4 f811 	bl	800d1d8 <_Z10StringFromPKv>
 80191b6:	f107 0310 	add.w	r3, r7, #16
 80191ba:	4619      	mov	r1, r3
 80191bc:	4620      	mov	r0, r4
 80191be:	f7f3 fd9d 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 80191c2:	f107 0310 	add.w	r3, r7, #16
 80191c6:	4618      	mov	r0, r3
 80191c8:	f7f3 fd1b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 80191cc:	68fb      	ldr	r3, [r7, #12]
}
 80191ce:	4618      	mov	r0, r3
 80191d0:	371c      	adds	r7, #28
 80191d2:	46bd      	mov	sp, r7
 80191d4:	bd90      	pop	{r4, r7, pc}
 80191d6:	bf00      	nop
 80191d8:	08025918 	.word	0x08025918

080191dc <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 80191dc:	b590      	push	{r4, r7, lr}
 80191de:	b087      	sub	sp, #28
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	60f8      	str	r0, [r7, #12]
 80191e4:	60b9      	str	r1, [r7, #8]
 80191e6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80191e8:	68b9      	ldr	r1, [r7, #8]
 80191ea:	68f8      	ldr	r0, [r7, #12]
 80191ec:	f7ff fd12 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	1d1c      	adds	r4, r3, #4
 80191f4:	f107 0310 	add.w	r3, r7, #16
 80191f8:	6879      	ldr	r1, [r7, #4]
 80191fa:	4618      	mov	r0, r3
 80191fc:	f7f3 ffec 	bl	800d1d8 <_Z10StringFromPKv>
 8019200:	f107 0310 	add.w	r3, r7, #16
 8019204:	4619      	mov	r1, r3
 8019206:	4620      	mov	r0, r4
 8019208:	f7f3 fd78 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801920c:	f107 0310 	add.w	r3, r7, #16
 8019210:	4618      	mov	r0, r3
 8019212:	f7f3 fcf6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 8019216:	68fb      	ldr	r3, [r7, #12]
}
 8019218:	4618      	mov	r0, r3
 801921a:	371c      	adds	r7, #28
 801921c:	46bd      	mov	sp, r7
 801921e:	bd90      	pop	{r4, r7, pc}

08019220 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8019220:	b590      	push	{r4, r7, lr}
 8019222:	b087      	sub	sp, #28
 8019224:	af00      	add	r7, sp, #0
 8019226:	60f8      	str	r0, [r7, #12]
 8019228:	60b9      	str	r1, [r7, #8]
 801922a:	607a      	str	r2, [r7, #4]
 801922c:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	3304      	adds	r3, #4
 8019232:	4913      	ldr	r1, [pc, #76]	; (8019280 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8019234:	4618      	mov	r0, r3
 8019236:	f7f3 fd73 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	3304      	adds	r3, #4
 801923e:	68b9      	ldr	r1, [r7, #8]
 8019240:	4618      	mov	r0, r3
 8019242:	f7f3 fd5b 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8019246:	6879      	ldr	r1, [r7, #4]
 8019248:	68f8      	ldr	r0, [r7, #12]
 801924a:	f7ff fce3 	bl	8018c14 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	1d1c      	adds	r4, r3, #4
 8019252:	f107 0310 	add.w	r3, r7, #16
 8019256:	6839      	ldr	r1, [r7, #0]
 8019258:	4618      	mov	r0, r3
 801925a:	f7f3 ffbd 	bl	800d1d8 <_Z10StringFromPKv>
 801925e:	f107 0310 	add.w	r3, r7, #16
 8019262:	4619      	mov	r1, r3
 8019264:	4620      	mov	r0, r4
 8019266:	f7f3 fd49 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801926a:	f107 0310 	add.w	r3, r7, #16
 801926e:	4618      	mov	r0, r3
 8019270:	f7f3 fcc7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 8019274:	68fb      	ldr	r3, [r7, #12]
}
 8019276:	4618      	mov	r0, r3
 8019278:	371c      	adds	r7, #28
 801927a:	46bd      	mov	sp, r7
 801927c:	bd90      	pop	{r4, r7, pc}
 801927e:	bf00      	nop
 8019280:	08025918 	.word	0x08025918

08019284 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8019284:	b480      	push	{r7}
 8019286:	b083      	sub	sp, #12
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
    return false;
 801928c:	2300      	movs	r3, #0
}
 801928e:	4618      	mov	r0, r3
 8019290:	370c      	adds	r7, #12
 8019292:	46bd      	mov	sp, r7
 8019294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019298:	4770      	bx	lr
	...

0801929c <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 801929c:	b580      	push	{r7, lr}
 801929e:	b084      	sub	sp, #16
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
 80192a4:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 80192a6:	f107 0308 	add.w	r3, r7, #8
 80192aa:	4909      	ldr	r1, [pc, #36]	; (80192d0 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 80192ac:	4618      	mov	r0, r3
 80192ae:	f7f3 f8f0 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 80192b2:	f107 0308 	add.w	r3, r7, #8
 80192b6:	4619      	mov	r1, r3
 80192b8:	6878      	ldr	r0, [r7, #4]
 80192ba:	f003 fe0f 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
 80192be:	f107 0308 	add.w	r3, r7, #8
 80192c2:	4618      	mov	r0, r3
 80192c4:	f7f3 fc9d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 80192c8:	6878      	ldr	r0, [r7, #4]
 80192ca:	3710      	adds	r7, #16
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bd80      	pop	{r7, pc}
 80192d0:	080257ec 	.word	0x080257ec

080192d4 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 80192d4:	b480      	push	{r7}
 80192d6:	b083      	sub	sp, #12
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
    return 0;
 80192dc:	2300      	movs	r3, #0
}
 80192de:	4618      	mov	r0, r3
 80192e0:	370c      	adds	r7, #12
 80192e2:	46bd      	mov	sp, r7
 80192e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e8:	4770      	bx	lr

080192ea <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 80192ea:	b480      	push	{r7}
 80192ec:	b083      	sub	sp, #12
 80192ee:	af00      	add	r7, sp, #0
 80192f0:	6078      	str	r0, [r7, #4]
    return 0;
 80192f2:	2300      	movs	r3, #0
}
 80192f4:	4618      	mov	r0, r3
 80192f6:	370c      	adds	r7, #12
 80192f8:	46bd      	mov	sp, r7
 80192fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fe:	4770      	bx	lr

08019300 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8019300:	b480      	push	{r7}
 8019302:	b083      	sub	sp, #12
 8019304:	af00      	add	r7, sp, #0
 8019306:	6078      	str	r0, [r7, #4]
 8019308:	6039      	str	r1, [r7, #0]
    return 0;
 801930a:	2300      	movs	r3, #0
}
 801930c:	4618      	mov	r0, r3
 801930e:	370c      	adds	r7, #12
 8019310:	46bd      	mov	sp, r7
 8019312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019316:	4770      	bx	lr

08019318 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8019318:	b480      	push	{r7}
 801931a:	b083      	sub	sp, #12
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
 8019320:	6039      	str	r1, [r7, #0]
    return 0;
 8019322:	2300      	movs	r3, #0
}
 8019324:	4618      	mov	r0, r3
 8019326:	370c      	adds	r7, #12
 8019328:	46bd      	mov	sp, r7
 801932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932e:	4770      	bx	lr

08019330 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8019330:	b5b0      	push	{r4, r5, r7, lr}
 8019332:	b084      	sub	sp, #16
 8019334:	af02      	add	r7, sp, #8
 8019336:	6078      	str	r0, [r7, #4]
 8019338:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801933a:	f7fa fc8d 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801933e:	4604      	mov	r4, r0
 8019340:	6823      	ldr	r3, [r4, #0]
 8019342:	3368      	adds	r3, #104	; 0x68
 8019344:	681d      	ldr	r5, [r3, #0]
 8019346:	f7fa fc97 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801934a:	4603      	mov	r3, r0
 801934c:	9300      	str	r3, [sp, #0]
 801934e:	f240 3375 	movw	r3, #885	; 0x375
 8019352:	4a06      	ldr	r2, [pc, #24]	; (801936c <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8019354:	4906      	ldr	r1, [pc, #24]	; (8019370 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8019356:	4620      	mov	r0, r4
 8019358:	47a8      	blx	r5
    return cpputest_longlong(0);
 801935a:	2100      	movs	r1, #0
 801935c:	6878      	ldr	r0, [r7, #4]
 801935e:	f7f1 f8cf 	bl	800a500 <_ZN17cpputest_longlongC1Ei>
}
 8019362:	6878      	ldr	r0, [r7, #4]
 8019364:	3708      	adds	r7, #8
 8019366:	46bd      	mov	sp, r7
 8019368:	bdb0      	pop	{r4, r5, r7, pc}
 801936a:	bf00      	nop
 801936c:	08025804 	.word	0x08025804
 8019370:	0802584c 	.word	0x0802584c

08019374 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8019374:	b5b0      	push	{r4, r5, r7, lr}
 8019376:	b084      	sub	sp, #16
 8019378:	af02      	add	r7, sp, #8
 801937a:	6078      	str	r0, [r7, #4]
 801937c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801937e:	f7fa fc6b 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8019382:	4604      	mov	r4, r0
 8019384:	6823      	ldr	r3, [r4, #0]
 8019386:	3368      	adds	r3, #104	; 0x68
 8019388:	681d      	ldr	r5, [r3, #0]
 801938a:	f7fa fc75 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801938e:	4603      	mov	r3, r0
 8019390:	9300      	str	r3, [sp, #0]
 8019392:	f240 337b 	movw	r3, #891	; 0x37b
 8019396:	4a06      	ldr	r2, [pc, #24]	; (80193b0 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8019398:	4906      	ldr	r1, [pc, #24]	; (80193b4 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 801939a:	4620      	mov	r0, r4
 801939c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801939e:	2100      	movs	r1, #0
 80193a0:	6878      	ldr	r0, [r7, #4]
 80193a2:	f7f1 f8b9 	bl	800a518 <_ZN18cpputest_ulonglongC1Ei>
}
 80193a6:	6878      	ldr	r0, [r7, #4]
 80193a8:	3708      	adds	r7, #8
 80193aa:	46bd      	mov	sp, r7
 80193ac:	bdb0      	pop	{r4, r5, r7, pc}
 80193ae:	bf00      	nop
 80193b0:	08025804 	.word	0x08025804
 80193b4:	08025820 	.word	0x08025820

080193b8 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 80193b8:	b5b0      	push	{r4, r5, r7, lr}
 80193ba:	b086      	sub	sp, #24
 80193bc:	af02      	add	r7, sp, #8
 80193be:	60f8      	str	r0, [r7, #12]
 80193c0:	60b9      	str	r1, [r7, #8]
 80193c2:	4639      	mov	r1, r7
 80193c4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80193c8:	f7fa fc46 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 80193cc:	4604      	mov	r4, r0
 80193ce:	6823      	ldr	r3, [r4, #0]
 80193d0:	3368      	adds	r3, #104	; 0x68
 80193d2:	681d      	ldr	r5, [r3, #0]
 80193d4:	f7fa fc50 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80193d8:	4603      	mov	r3, r0
 80193da:	9300      	str	r3, [sp, #0]
 80193dc:	f240 3381 	movw	r3, #897	; 0x381
 80193e0:	4a05      	ldr	r2, [pc, #20]	; (80193f8 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 80193e2:	4906      	ldr	r1, [pc, #24]	; (80193fc <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 80193e4:	4620      	mov	r0, r4
 80193e6:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80193e8:	2100      	movs	r1, #0
 80193ea:	68f8      	ldr	r0, [r7, #12]
 80193ec:	f7f1 f894 	bl	800a518 <_ZN18cpputest_ulonglongC1Ei>
}
 80193f0:	68f8      	ldr	r0, [r7, #12]
 80193f2:	3710      	adds	r7, #16
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bdb0      	pop	{r4, r5, r7, pc}
 80193f8:	08025804 	.word	0x08025804
 80193fc:	08025820 	.word	0x08025820

08019400 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8019400:	b5b0      	push	{r4, r5, r7, lr}
 8019402:	b086      	sub	sp, #24
 8019404:	af02      	add	r7, sp, #8
 8019406:	60f8      	str	r0, [r7, #12]
 8019408:	60b9      	str	r1, [r7, #8]
 801940a:	4639      	mov	r1, r7
 801940c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019410:	f7fa fc22 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 8019414:	4604      	mov	r4, r0
 8019416:	6823      	ldr	r3, [r4, #0]
 8019418:	3368      	adds	r3, #104	; 0x68
 801941a:	681d      	ldr	r5, [r3, #0]
 801941c:	f7fa fc2c 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019420:	4603      	mov	r3, r0
 8019422:	9300      	str	r3, [sp, #0]
 8019424:	f240 3387 	movw	r3, #903	; 0x387
 8019428:	4a05      	ldr	r2, [pc, #20]	; (8019440 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 801942a:	4906      	ldr	r1, [pc, #24]	; (8019444 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801942c:	4620      	mov	r0, r4
 801942e:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019430:	2100      	movs	r1, #0
 8019432:	68f8      	ldr	r0, [r7, #12]
 8019434:	f7f1 f864 	bl	800a500 <_ZN17cpputest_longlongC1Ei>
}
 8019438:	68f8      	ldr	r0, [r7, #12]
 801943a:	3710      	adds	r7, #16
 801943c:	46bd      	mov	sp, r7
 801943e:	bdb0      	pop	{r4, r5, r7, pc}
 8019440:	08025804 	.word	0x08025804
 8019444:	0802584c 	.word	0x0802584c

08019448 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8019448:	b480      	push	{r7}
 801944a:	b083      	sub	sp, #12
 801944c:	af00      	add	r7, sp, #0
 801944e:	6078      	str	r0, [r7, #4]
    return false;
 8019450:	2300      	movs	r3, #0
}
 8019452:	4618      	mov	r0, r3
 8019454:	370c      	adds	r7, #12
 8019456:	46bd      	mov	sp, r7
 8019458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801945c:	4770      	bx	lr

0801945e <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801945e:	b480      	push	{r7}
 8019460:	b083      	sub	sp, #12
 8019462:	af00      	add	r7, sp, #0
 8019464:	6078      	str	r0, [r7, #4]
 8019466:	460b      	mov	r3, r1
 8019468:	70fb      	strb	r3, [r7, #3]
    return false;
 801946a:	2300      	movs	r3, #0
}
 801946c:	4618      	mov	r0, r3
 801946e:	370c      	adds	r7, #12
 8019470:	46bd      	mov	sp, r7
 8019472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019476:	4770      	bx	lr

08019478 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8019478:	b480      	push	{r7}
 801947a:	b083      	sub	sp, #12
 801947c:	af00      	add	r7, sp, #0
 801947e:	6078      	str	r0, [r7, #4]
    return 0;
 8019480:	2300      	movs	r3, #0
}
 8019482:	4618      	mov	r0, r3
 8019484:	370c      	adds	r7, #12
 8019486:	46bd      	mov	sp, r7
 8019488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948c:	4770      	bx	lr

0801948e <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 801948e:	b480      	push	{r7}
 8019490:	b083      	sub	sp, #12
 8019492:	af00      	add	r7, sp, #0
 8019494:	6078      	str	r0, [r7, #4]
    return 0.0;
 8019496:	f04f 0200 	mov.w	r2, #0
 801949a:	f04f 0300 	mov.w	r3, #0
 801949e:	ec43 2b17 	vmov	d7, r2, r3
}
 80194a2:	eeb0 0a47 	vmov.f32	s0, s14
 80194a6:	eef0 0a67 	vmov.f32	s1, s15
 80194aa:	370c      	adds	r7, #12
 80194ac:	46bd      	mov	sp, r7
 80194ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b2:	4770      	bx	lr

080194b4 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b084      	sub	sp, #16
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	60f8      	str	r0, [r7, #12]
 80194bc:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	3398      	adds	r3, #152	; 0x98
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	68f8      	ldr	r0, [r7, #12]
 80194ca:	4798      	blx	r3
 80194cc:	eeb0 7a40 	vmov.f32	s14, s0
 80194d0:	eef0 7a60 	vmov.f32	s15, s1
}
 80194d4:	eeb0 0a47 	vmov.f32	s0, s14
 80194d8:	eef0 0a67 	vmov.f32	s1, s15
 80194dc:	3710      	adds	r7, #16
 80194de:	46bd      	mov	sp, r7
 80194e0:	bd80      	pop	{r7, pc}

080194e2 <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 80194e2:	b480      	push	{r7}
 80194e4:	b083      	sub	sp, #12
 80194e6:	af00      	add	r7, sp, #0
 80194e8:	6078      	str	r0, [r7, #4]
    return 0;
 80194ea:	2300      	movs	r3, #0
}
 80194ec:	4618      	mov	r0, r3
 80194ee:	370c      	adds	r7, #12
 80194f0:	46bd      	mov	sp, r7
 80194f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f6:	4770      	bx	lr

080194f8 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 80194f8:	b480      	push	{r7}
 80194fa:	b083      	sub	sp, #12
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019500:	2300      	movs	r3, #0
}
 8019502:	4618      	mov	r0, r3
 8019504:	370c      	adds	r7, #12
 8019506:	46bd      	mov	sp, r7
 8019508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801950c:	4770      	bx	lr

0801950e <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 801950e:	b480      	push	{r7}
 8019510:	b083      	sub	sp, #12
 8019512:	af00      	add	r7, sp, #0
 8019514:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019516:	2300      	movs	r3, #0
}
 8019518:	4618      	mov	r0, r3
 801951a:	370c      	adds	r7, #12
 801951c:	46bd      	mov	sp, r7
 801951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019522:	4770      	bx	lr

08019524 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8019524:	b480      	push	{r7}
 8019526:	b083      	sub	sp, #12
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801952c:	2300      	movs	r3, #0
}
 801952e:	4618      	mov	r0, r3
 8019530:	370c      	adds	r7, #12
 8019532:	46bd      	mov	sp, r7
 8019534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019538:	4770      	bx	lr

0801953a <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801953a:	b580      	push	{r7, lr}
 801953c:	b082      	sub	sp, #8
 801953e:	af00      	add	r7, sp, #0
 8019540:	6078      	str	r0, [r7, #4]
 8019542:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	33a8      	adds	r3, #168	; 0xa8
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	6878      	ldr	r0, [r7, #4]
 801954e:	4798      	blx	r3
 8019550:	4603      	mov	r3, r0
}
 8019552:	4618      	mov	r0, r3
 8019554:	3708      	adds	r7, #8
 8019556:	46bd      	mov	sp, r7
 8019558:	bd80      	pop	{r7, pc}

0801955a <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801955a:	b580      	push	{r7, lr}
 801955c:	b082      	sub	sp, #8
 801955e:	af00      	add	r7, sp, #0
 8019560:	6078      	str	r0, [r7, #4]
 8019562:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	33a0      	adds	r3, #160	; 0xa0
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	6878      	ldr	r0, [r7, #4]
 801956e:	4798      	blx	r3
 8019570:	4603      	mov	r3, r0
}
 8019572:	4618      	mov	r0, r3
 8019574:	3708      	adds	r7, #8
 8019576:	46bd      	mov	sp, r7
 8019578:	bd80      	pop	{r7, pc}

0801957a <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801957a:	b580      	push	{r7, lr}
 801957c:	b082      	sub	sp, #8
 801957e:	af00      	add	r7, sp, #0
 8019580:	6078      	str	r0, [r7, #4]
 8019582:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	33b0      	adds	r3, #176	; 0xb0
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	6878      	ldr	r0, [r7, #4]
 801958e:	4798      	blx	r3
 8019590:	4603      	mov	r3, r0
}
 8019592:	4618      	mov	r0, r3
 8019594:	3708      	adds	r7, #8
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}
	...

0801959c <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 801959c:	b480      	push	{r7}
 801959e:	b083      	sub	sp, #12
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
    return "";
 80195a4:	4b03      	ldr	r3, [pc, #12]	; (80195b4 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 80195a6:	4618      	mov	r0, r3
 80195a8:	370c      	adds	r7, #12
 80195aa:	46bd      	mov	sp, r7
 80195ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b0:	4770      	bx	lr
 80195b2:	bf00      	nop
 80195b4:	080257ec 	.word	0x080257ec

080195b8 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b082      	sub	sp, #8
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
 80195c0:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	3394      	adds	r3, #148	; 0x94
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	6878      	ldr	r0, [r7, #4]
 80195cc:	4798      	blx	r3
 80195ce:	4603      	mov	r3, r0
}
 80195d0:	4618      	mov	r0, r3
 80195d2:	3708      	adds	r7, #8
 80195d4:	46bd      	mov	sp, r7
 80195d6:	bd80      	pop	{r7, pc}

080195d8 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 80195d8:	b480      	push	{r7}
 80195da:	b083      	sub	sp, #12
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
 80195e0:	6039      	str	r1, [r7, #0]
    return 0;
 80195e2:	2300      	movs	r3, #0
}
 80195e4:	4618      	mov	r0, r3
 80195e6:	370c      	adds	r7, #12
 80195e8:	46bd      	mov	sp, r7
 80195ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ee:	4770      	bx	lr

080195f0 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 80195f0:	b580      	push	{r7, lr}
 80195f2:	b082      	sub	sp, #8
 80195f4:	af00      	add	r7, sp, #0
 80195f6:	6078      	str	r0, [r7, #4]
 80195f8:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	3388      	adds	r3, #136	; 0x88
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	6878      	ldr	r0, [r7, #4]
 8019604:	4798      	blx	r3
 8019606:	4603      	mov	r3, r0
}
 8019608:	4618      	mov	r0, r3
 801960a:	3708      	adds	r7, #8
 801960c:	46bd      	mov	sp, r7
 801960e:	bd80      	pop	{r7, pc}

08019610 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8019610:	b590      	push	{r4, r7, lr}
 8019612:	b085      	sub	sp, #20
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
 8019618:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	3304      	adds	r3, #4
 801961e:	490e      	ldr	r1, [pc, #56]	; (8019658 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8019620:	4618      	mov	r0, r3
 8019622:	f7f3 fb7d 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	1d1c      	adds	r4, r3, #4
 801962a:	f107 0308 	add.w	r3, r7, #8
 801962e:	6839      	ldr	r1, [r7, #0]
 8019630:	4618      	mov	r0, r3
 8019632:	f7f3 fdd1 	bl	800d1d8 <_Z10StringFromPKv>
 8019636:	f107 0308 	add.w	r3, r7, #8
 801963a:	4619      	mov	r1, r3
 801963c:	4620      	mov	r0, r4
 801963e:	f7f3 fb5d 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 8019642:	f107 0308 	add.w	r3, r7, #8
 8019646:	4618      	mov	r0, r3
 8019648:	f7f3 fadb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return *this;
 801964c:	687b      	ldr	r3, [r7, #4]
}
 801964e:	4618      	mov	r0, r3
 8019650:	3714      	adds	r7, #20
 8019652:	46bd      	mov	sp, r7
 8019654:	bd90      	pop	{r4, r7, pc}
 8019656:	bf00      	nop
 8019658:	08025920 	.word	0x08025920

0801965c <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 801965c:	b598      	push	{r3, r4, r7, lr}
 801965e:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8019660:	4b09      	ldr	r3, [pc, #36]	; (8019688 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d10b      	bne.n	8019680 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8019668:	f240 32f3 	movw	r2, #1011	; 0x3f3
 801966c:	4907      	ldr	r1, [pc, #28]	; (801968c <_ZN19MockActualCallTrace8instanceEv+0x30>)
 801966e:	200c      	movs	r0, #12
 8019670:	f7f0 fb4c 	bl	8009d0c <_ZnwjPKci>
 8019674:	4604      	mov	r4, r0
 8019676:	4620      	mov	r0, r4
 8019678:	f7ff fa4c 	bl	8018b14 <_ZN19MockActualCallTraceC1Ev>
 801967c:	4b02      	ldr	r3, [pc, #8]	; (8019688 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801967e:	601c      	str	r4, [r3, #0]
    return *instance_;
 8019680:	4b01      	ldr	r3, [pc, #4]	; (8019688 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019682:	681b      	ldr	r3, [r3, #0]
}
 8019684:	4618      	mov	r0, r3
 8019686:	bd98      	pop	{r3, r4, r7, pc}
 8019688:	20000eb0 	.word	0x20000eb0
 801968c:	08025804 	.word	0x08025804

08019690 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8019690:	b580      	push	{r7, lr}
 8019692:	af00      	add	r7, sp, #0
    delete instance_;
 8019694:	4b06      	ldr	r3, [pc, #24]	; (80196b0 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d004      	beq.n	80196a6 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 801969c:	681a      	ldr	r2, [r3, #0]
 801969e:	3204      	adds	r2, #4
 80196a0:	6812      	ldr	r2, [r2, #0]
 80196a2:	4618      	mov	r0, r3
 80196a4:	4790      	blx	r2
    instance_ = NULLPTR;
 80196a6:	4b02      	ldr	r3, [pc, #8]	; (80196b0 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 80196a8:	2200      	movs	r2, #0
 80196aa:	601a      	str	r2, [r3, #0]
}
 80196ac:	bf00      	nop
 80196ae:	bd80      	pop	{r7, pc}
 80196b0:	20000eb0 	.word	0x20000eb0

080196b4 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b082      	sub	sp, #8
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	6078      	str	r0, [r7, #4]
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	4618      	mov	r0, r3
 80196c0:	f7fd fe9a 	bl	80173f8 <_ZN14MockActualCallC1Ev>
 80196c4:	4a03      	ldr	r2, [pc, #12]	; (80196d4 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	601a      	str	r2, [r3, #0]
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	4618      	mov	r0, r3
 80196ce:	3708      	adds	r7, #8
 80196d0:	46bd      	mov	sp, r7
 80196d2:	bd80      	pop	{r7, pc}
 80196d4:	0802856c 	.word	0x0802856c

080196d8 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 80196d8:	b580      	push	{r7, lr}
 80196da:	af00      	add	r7, sp, #0
 80196dc:	4801      	ldr	r0, [pc, #4]	; (80196e4 <__tcf_0+0xc>)
 80196de:	f000 f831 	bl	8019744 <_ZN21MockIgnoredActualCallD1Ev>
 80196e2:	bd80      	pop	{r7, pc}
 80196e4:	20000eb4 	.word	0x20000eb4

080196e8 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 80196e8:	b580      	push	{r7, lr}
 80196ea:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 80196ec:	4b12      	ldr	r3, [pc, #72]	; (8019738 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 80196ee:	781b      	ldrb	r3, [r3, #0]
 80196f0:	f3bf 8f5b 	dmb	ish
 80196f4:	b2db      	uxtb	r3, r3
 80196f6:	f003 0301 	and.w	r3, r3, #1
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	bf0c      	ite	eq
 80196fe:	2301      	moveq	r3, #1
 8019700:	2300      	movne	r3, #0
 8019702:	b2db      	uxtb	r3, r3
 8019704:	2b00      	cmp	r3, #0
 8019706:	d013      	beq.n	8019730 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8019708:	480b      	ldr	r0, [pc, #44]	; (8019738 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801970a:	f005 fd81 	bl	801f210 <__cxa_guard_acquire>
 801970e:	4603      	mov	r3, r0
 8019710:	2b00      	cmp	r3, #0
 8019712:	bf14      	ite	ne
 8019714:	2301      	movne	r3, #1
 8019716:	2300      	moveq	r3, #0
 8019718:	b2db      	uxtb	r3, r3
 801971a:	2b00      	cmp	r3, #0
 801971c:	d008      	beq.n	8019730 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801971e:	4807      	ldr	r0, [pc, #28]	; (801973c <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8019720:	f7ff ffc8 	bl	80196b4 <_ZN21MockIgnoredActualCallC1Ev>
 8019724:	4804      	ldr	r0, [pc, #16]	; (8019738 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019726:	f005 fd7f 	bl	801f228 <__cxa_guard_release>
 801972a:	4805      	ldr	r0, [pc, #20]	; (8019740 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 801972c:	f005 fda3 	bl	801f276 <atexit>
    return call;
 8019730:	4b02      	ldr	r3, [pc, #8]	; (801973c <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 8019732:	4618      	mov	r0, r3
 8019734:	bd80      	pop	{r7, pc}
 8019736:	bf00      	nop
 8019738:	20000eb8 	.word	0x20000eb8
 801973c:	20000eb4 	.word	0x20000eb4
 8019740:	080196d9 	.word	0x080196d9

08019744 <_ZN21MockIgnoredActualCallD1Ev>:
 8019744:	b580      	push	{r7, lr}
 8019746:	b082      	sub	sp, #8
 8019748:	af00      	add	r7, sp, #0
 801974a:	6078      	str	r0, [r7, #4]
 801974c:	4a05      	ldr	r2, [pc, #20]	; (8019764 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	601a      	str	r2, [r3, #0]
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	4618      	mov	r0, r3
 8019756:	f7fd fe5f 	bl	8017418 <_ZN14MockActualCallD1Ev>
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	4618      	mov	r0, r3
 801975e:	3708      	adds	r7, #8
 8019760:	46bd      	mov	sp, r7
 8019762:	bd80      	pop	{r7, pc}
 8019764:	0802856c 	.word	0x0802856c

08019768 <_ZN21MockIgnoredActualCallD0Ev>:
 8019768:	b580      	push	{r7, lr}
 801976a:	b082      	sub	sp, #8
 801976c:	af00      	add	r7, sp, #0
 801976e:	6078      	str	r0, [r7, #4]
 8019770:	6878      	ldr	r0, [r7, #4]
 8019772:	f7ff ffe7 	bl	8019744 <_ZN21MockIgnoredActualCallD1Ev>
 8019776:	2104      	movs	r1, #4
 8019778:	6878      	ldr	r0, [r7, #4]
 801977a:	f7f0 fadb 	bl	8009d34 <_ZdlPvj>
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	4618      	mov	r0, r3
 8019782:	3708      	adds	r7, #8
 8019784:	46bd      	mov	sp, r7
 8019786:	bd80      	pop	{r7, pc}

08019788 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8019788:	b580      	push	{r7, lr}
 801978a:	b082      	sub	sp, #8
 801978c:	af00      	add	r7, sp, #0
 801978e:	6078      	str	r0, [r7, #4]
 8019790:	4a05      	ldr	r2, [pc, #20]	; (80197a8 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	601a      	str	r2, [r3, #0]
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	4618      	mov	r0, r3
 801979a:	f7f0 fefd 	bl	800a598 <_ZN11MockFailureD1Ev>
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	4618      	mov	r0, r3
 80197a2:	3708      	adds	r7, #8
 80197a4:	46bd      	mov	sp, r7
 80197a6:	bd80      	pop	{r7, pc}
 80197a8:	08028464 	.word	0x08028464

080197ac <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 80197ac:	b580      	push	{r7, lr}
 80197ae:	b082      	sub	sp, #8
 80197b0:	af00      	add	r7, sp, #0
 80197b2:	6078      	str	r0, [r7, #4]
 80197b4:	6878      	ldr	r0, [r7, #4]
 80197b6:	f7ff ffe7 	bl	8019788 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 80197ba:	2134      	movs	r1, #52	; 0x34
 80197bc:	6878      	ldr	r0, [r7, #4]
 80197be:	f7f0 fab9 	bl	8009d34 <_ZdlPvj>
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	4618      	mov	r0, r3
 80197c6:	3708      	adds	r7, #8
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bd80      	pop	{r7, pc}

080197cc <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b082      	sub	sp, #8
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
 80197d4:	4a05      	ldr	r2, [pc, #20]	; (80197ec <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	601a      	str	r2, [r3, #0]
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	4618      	mov	r0, r3
 80197de:	f7f0 fedb 	bl	800a598 <_ZN11MockFailureD1Ev>
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	4618      	mov	r0, r3
 80197e6:	3708      	adds	r7, #8
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}
 80197ec:	08028540 	.word	0x08028540

080197f0 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b082      	sub	sp, #8
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
 80197f8:	6878      	ldr	r0, [r7, #4]
 80197fa:	f7ff ffe7 	bl	80197cc <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 80197fe:	2134      	movs	r1, #52	; 0x34
 8019800:	6878      	ldr	r0, [r7, #4]
 8019802:	f7f0 fa97 	bl	8009d34 <_ZdlPvj>
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	4618      	mov	r0, r3
 801980a:	3708      	adds	r7, #8
 801980c:	46bd      	mov	sp, r7
 801980e:	bd80      	pop	{r7, pc}

08019810 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8019810:	b580      	push	{r7, lr}
 8019812:	b082      	sub	sp, #8
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]
 8019818:	4a05      	ldr	r2, [pc, #20]	; (8019830 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	601a      	str	r2, [r3, #0]
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	4618      	mov	r0, r3
 8019822:	f7f0 feb9 	bl	800a598 <_ZN11MockFailureD1Ev>
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	4618      	mov	r0, r3
 801982a:	3708      	adds	r7, #8
 801982c:	46bd      	mov	sp, r7
 801982e:	bd80      	pop	{r7, pc}
 8019830:	08028514 	.word	0x08028514

08019834 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 8019834:	b580      	push	{r7, lr}
 8019836:	b082      	sub	sp, #8
 8019838:	af00      	add	r7, sp, #0
 801983a:	6078      	str	r0, [r7, #4]
 801983c:	6878      	ldr	r0, [r7, #4]
 801983e:	f7ff ffe7 	bl	8019810 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8019842:	2134      	movs	r1, #52	; 0x34
 8019844:	6878      	ldr	r0, [r7, #4]
 8019846:	f7f0 fa75 	bl	8009d34 <_ZdlPvj>
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	4618      	mov	r0, r3
 801984e:	3708      	adds	r7, #8
 8019850:	46bd      	mov	sp, r7
 8019852:	bd80      	pop	{r7, pc}

08019854 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 8019854:	b580      	push	{r7, lr}
 8019856:	b082      	sub	sp, #8
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
 801985c:	4a05      	ldr	r2, [pc, #20]	; (8019874 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	601a      	str	r2, [r3, #0]
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	4618      	mov	r0, r3
 8019866:	f7f0 fe97 	bl	800a598 <_ZN11MockFailureD1Ev>
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	4618      	mov	r0, r3
 801986e:	3708      	adds	r7, #8
 8019870:	46bd      	mov	sp, r7
 8019872:	bd80      	pop	{r7, pc}
 8019874:	080284e8 	.word	0x080284e8

08019878 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 8019878:	b580      	push	{r7, lr}
 801987a:	b082      	sub	sp, #8
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
 8019880:	6878      	ldr	r0, [r7, #4]
 8019882:	f7ff ffe7 	bl	8019854 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8019886:	2134      	movs	r1, #52	; 0x34
 8019888:	6878      	ldr	r0, [r7, #4]
 801988a:	f7f0 fa53 	bl	8009d34 <_ZdlPvj>
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	4618      	mov	r0, r3
 8019892:	3708      	adds	r7, #8
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}

08019898 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 8019898:	b580      	push	{r7, lr}
 801989a:	b082      	sub	sp, #8
 801989c:	af00      	add	r7, sp, #0
 801989e:	6078      	str	r0, [r7, #4]
 80198a0:	4a05      	ldr	r2, [pc, #20]	; (80198b8 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	601a      	str	r2, [r3, #0]
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	4618      	mov	r0, r3
 80198aa:	f7f0 fe75 	bl	800a598 <_ZN11MockFailureD1Ev>
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	4618      	mov	r0, r3
 80198b2:	3708      	adds	r7, #8
 80198b4:	46bd      	mov	sp, r7
 80198b6:	bd80      	pop	{r7, pc}
 80198b8:	08028490 	.word	0x08028490

080198bc <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 80198bc:	b580      	push	{r7, lr}
 80198be:	b082      	sub	sp, #8
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	6078      	str	r0, [r7, #4]
 80198c4:	6878      	ldr	r0, [r7, #4]
 80198c6:	f7ff ffe7 	bl	8019898 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80198ca:	2134      	movs	r1, #52	; 0x34
 80198cc:	6878      	ldr	r0, [r7, #4]
 80198ce:	f7f0 fa31 	bl	8009d34 <_ZdlPvj>
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	4618      	mov	r0, r3
 80198d6:	3708      	adds	r7, #8
 80198d8:	46bd      	mov	sp, r7
 80198da:	bd80      	pop	{r7, pc}

080198dc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 80198dc:	b580      	push	{r7, lr}
 80198de:	b082      	sub	sp, #8
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	6078      	str	r0, [r7, #4]
 80198e4:	4a05      	ldr	r2, [pc, #20]	; (80198fc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	601a      	str	r2, [r3, #0]
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	4618      	mov	r0, r3
 80198ee:	f7f0 fe53 	bl	800a598 <_ZN11MockFailureD1Ev>
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	4618      	mov	r0, r3
 80198f6:	3708      	adds	r7, #8
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bd80      	pop	{r7, pc}
 80198fc:	080284bc 	.word	0x080284bc

08019900 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 8019900:	b580      	push	{r7, lr}
 8019902:	b082      	sub	sp, #8
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
 8019908:	6878      	ldr	r0, [r7, #4]
 801990a:	f7ff ffe7 	bl	80198dc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801990e:	2134      	movs	r1, #52	; 0x34
 8019910:	6878      	ldr	r0, [r7, #4]
 8019912:	f7f0 fa0f 	bl	8009d34 <_ZdlPvj>
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	4618      	mov	r0, r3
 801991a:	3708      	adds	r7, #8
 801991c:	46bd      	mov	sp, r7
 801991e:	bd80      	pop	{r7, pc}

08019920 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 8019920:	b580      	push	{r7, lr}
 8019922:	b082      	sub	sp, #8
 8019924:	af00      	add	r7, sp, #0
 8019926:	6078      	str	r0, [r7, #4]
 8019928:	4a05      	ldr	r2, [pc, #20]	; (8019940 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	601a      	str	r2, [r3, #0]
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	4618      	mov	r0, r3
 8019932:	f7f0 fe31 	bl	800a598 <_ZN11MockFailureD1Ev>
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	4618      	mov	r0, r3
 801993a:	3708      	adds	r7, #8
 801993c:	46bd      	mov	sp, r7
 801993e:	bd80      	pop	{r7, pc}
 8019940:	0802840c 	.word	0x0802840c

08019944 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 8019944:	b580      	push	{r7, lr}
 8019946:	b082      	sub	sp, #8
 8019948:	af00      	add	r7, sp, #0
 801994a:	6078      	str	r0, [r7, #4]
 801994c:	6878      	ldr	r0, [r7, #4]
 801994e:	f7ff ffe7 	bl	8019920 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8019952:	2134      	movs	r1, #52	; 0x34
 8019954:	6878      	ldr	r0, [r7, #4]
 8019956:	f7f0 f9ed 	bl	8009d34 <_ZdlPvj>
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	4618      	mov	r0, r3
 801995e:	3708      	adds	r7, #8
 8019960:	46bd      	mov	sp, r7
 8019962:	bd80      	pop	{r7, pc}

08019964 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 8019964:	b580      	push	{r7, lr}
 8019966:	b082      	sub	sp, #8
 8019968:	af00      	add	r7, sp, #0
 801996a:	6078      	str	r0, [r7, #4]
 801996c:	4a05      	ldr	r2, [pc, #20]	; (8019984 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	601a      	str	r2, [r3, #0]
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	4618      	mov	r0, r3
 8019976:	f7f0 fe0f 	bl	800a598 <_ZN11MockFailureD1Ev>
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	4618      	mov	r0, r3
 801997e:	3708      	adds	r7, #8
 8019980:	46bd      	mov	sp, r7
 8019982:	bd80      	pop	{r7, pc}
 8019984:	08028438 	.word	0x08028438

08019988 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8019988:	b580      	push	{r7, lr}
 801998a:	b082      	sub	sp, #8
 801998c:	af00      	add	r7, sp, #0
 801998e:	6078      	str	r0, [r7, #4]
 8019990:	6878      	ldr	r0, [r7, #4]
 8019992:	f7ff ffe7 	bl	8019964 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8019996:	2134      	movs	r1, #52	; 0x34
 8019998:	6878      	ldr	r0, [r7, #4]
 801999a:	f7f0 f9cb 	bl	8009d34 <_ZdlPvj>
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	4618      	mov	r0, r3
 80199a2:	3708      	adds	r7, #8
 80199a4:	46bd      	mov	sp, r7
 80199a6:	bd80      	pop	{r7, pc}

080199a8 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b082      	sub	sp, #8
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
 80199b0:	6039      	str	r1, [r7, #0]
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	3310      	adds	r3, #16
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	683a      	ldr	r2, [r7, #0]
 80199bc:	6839      	ldr	r1, [r7, #0]
 80199be:	6878      	ldr	r0, [r7, #4]
 80199c0:	4798      	blx	r3
 80199c2:	4603      	mov	r3, r0
 80199c4:	4618      	mov	r0, r3
 80199c6:	3708      	adds	r7, #8
 80199c8:	46bd      	mov	sp, r7
 80199ca:	bd80      	pop	{r7, pc}

080199cc <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 80199cc:	b480      	push	{r7}
 80199ce:	b083      	sub	sp, #12
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
 80199d4:	6039      	str	r1, [r7, #0]
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	4618      	mov	r0, r3
 80199da:	370c      	adds	r7, #12
 80199dc:	46bd      	mov	sp, r7
 80199de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e2:	4770      	bx	lr

080199e4 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 80199e4:	b480      	push	{r7}
 80199e6:	b083      	sub	sp, #12
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
 80199ec:	6039      	str	r1, [r7, #0]
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	4618      	mov	r0, r3
 80199f2:	370c      	adds	r7, #12
 80199f4:	46bd      	mov	sp, r7
 80199f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199fa:	4770      	bx	lr

080199fc <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 80199fc:	b480      	push	{r7}
 80199fe:	b085      	sub	sp, #20
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	60f8      	str	r0, [r7, #12]
 8019a04:	60b9      	str	r1, [r7, #8]
 8019a06:	607a      	str	r2, [r7, #4]
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	3714      	adds	r7, #20
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a14:	4770      	bx	lr

08019a16 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8019a16:	b480      	push	{r7}
 8019a18:	b085      	sub	sp, #20
 8019a1a:	af00      	add	r7, sp, #0
 8019a1c:	60f8      	str	r0, [r7, #12]
 8019a1e:	60b9      	str	r1, [r7, #8]
 8019a20:	4613      	mov	r3, r2
 8019a22:	71fb      	strb	r3, [r7, #7]
 8019a24:	68fb      	ldr	r3, [r7, #12]
 8019a26:	4618      	mov	r0, r3
 8019a28:	3714      	adds	r7, #20
 8019a2a:	46bd      	mov	sp, r7
 8019a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a30:	4770      	bx	lr

08019a32 <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8019a32:	b480      	push	{r7}
 8019a34:	b085      	sub	sp, #20
 8019a36:	af00      	add	r7, sp, #0
 8019a38:	60f8      	str	r0, [r7, #12]
 8019a3a:	60b9      	str	r1, [r7, #8]
 8019a3c:	607a      	str	r2, [r7, #4]
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	4618      	mov	r0, r3
 8019a42:	3714      	adds	r7, #20
 8019a44:	46bd      	mov	sp, r7
 8019a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a4a:	4770      	bx	lr

08019a4c <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8019a4c:	b480      	push	{r7}
 8019a4e:	b085      	sub	sp, #20
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	60f8      	str	r0, [r7, #12]
 8019a54:	60b9      	str	r1, [r7, #8]
 8019a56:	607a      	str	r2, [r7, #4]
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	3714      	adds	r7, #20
 8019a5e:	46bd      	mov	sp, r7
 8019a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a64:	4770      	bx	lr

08019a66 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8019a66:	b480      	push	{r7}
 8019a68:	b085      	sub	sp, #20
 8019a6a:	af00      	add	r7, sp, #0
 8019a6c:	60f8      	str	r0, [r7, #12]
 8019a6e:	60b9      	str	r1, [r7, #8]
 8019a70:	607a      	str	r2, [r7, #4]
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	4618      	mov	r0, r3
 8019a76:	3714      	adds	r7, #20
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a7e:	4770      	bx	lr

08019a80 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8019a80:	b480      	push	{r7}
 8019a82:	b085      	sub	sp, #20
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	60f8      	str	r0, [r7, #12]
 8019a88:	60b9      	str	r1, [r7, #8]
 8019a8a:	607a      	str	r2, [r7, #4]
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	4618      	mov	r0, r3
 8019a90:	3714      	adds	r7, #20
 8019a92:	46bd      	mov	sp, r7
 8019a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a98:	4770      	bx	lr

08019a9a <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8019a9a:	b480      	push	{r7}
 8019a9c:	b085      	sub	sp, #20
 8019a9e:	af00      	add	r7, sp, #0
 8019aa0:	60f8      	str	r0, [r7, #12]
 8019aa2:	60b9      	str	r1, [r7, #8]
 8019aa4:	4639      	mov	r1, r7
 8019aa6:	e881 000c 	stmia.w	r1, {r2, r3}
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	4618      	mov	r0, r3
 8019aae:	3714      	adds	r7, #20
 8019ab0:	46bd      	mov	sp, r7
 8019ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ab6:	4770      	bx	lr

08019ab8 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8019ab8:	b480      	push	{r7}
 8019aba:	b085      	sub	sp, #20
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	60f8      	str	r0, [r7, #12]
 8019ac0:	60b9      	str	r1, [r7, #8]
 8019ac2:	4639      	mov	r1, r7
 8019ac4:	e881 000c 	stmia.w	r1, {r2, r3}
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	4618      	mov	r0, r3
 8019acc:	3714      	adds	r7, #20
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad4:	4770      	bx	lr

08019ad6 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8019ad6:	b480      	push	{r7}
 8019ad8:	b085      	sub	sp, #20
 8019ada:	af00      	add	r7, sp, #0
 8019adc:	60f8      	str	r0, [r7, #12]
 8019ade:	60b9      	str	r1, [r7, #8]
 8019ae0:	ed87 0b00 	vstr	d0, [r7]
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	3714      	adds	r7, #20
 8019aea:	46bd      	mov	sp, r7
 8019aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af0:	4770      	bx	lr

08019af2 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 8019af2:	b480      	push	{r7}
 8019af4:	b087      	sub	sp, #28
 8019af6:	af00      	add	r7, sp, #0
 8019af8:	6178      	str	r0, [r7, #20]
 8019afa:	6139      	str	r1, [r7, #16]
 8019afc:	ed87 0b02 	vstr	d0, [r7, #8]
 8019b00:	ed87 1b00 	vstr	d1, [r7]
 8019b04:	697b      	ldr	r3, [r7, #20]
 8019b06:	4618      	mov	r0, r3
 8019b08:	371c      	adds	r7, #28
 8019b0a:	46bd      	mov	sp, r7
 8019b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b10:	4770      	bx	lr

08019b12 <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8019b12:	b480      	push	{r7}
 8019b14:	b085      	sub	sp, #20
 8019b16:	af00      	add	r7, sp, #0
 8019b18:	60f8      	str	r0, [r7, #12]
 8019b1a:	60b9      	str	r1, [r7, #8]
 8019b1c:	607a      	str	r2, [r7, #4]
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	4618      	mov	r0, r3
 8019b22:	3714      	adds	r7, #20
 8019b24:	46bd      	mov	sp, r7
 8019b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b2a:	4770      	bx	lr

08019b2c <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8019b2c:	b480      	push	{r7}
 8019b2e:	b085      	sub	sp, #20
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	60f8      	str	r0, [r7, #12]
 8019b34:	60b9      	str	r1, [r7, #8]
 8019b36:	607a      	str	r2, [r7, #4]
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	3714      	adds	r7, #20
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b44:	4770      	bx	lr

08019b46 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8019b46:	b480      	push	{r7}
 8019b48:	b085      	sub	sp, #20
 8019b4a:	af00      	add	r7, sp, #0
 8019b4c:	60f8      	str	r0, [r7, #12]
 8019b4e:	60b9      	str	r1, [r7, #8]
 8019b50:	607a      	str	r2, [r7, #4]
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	4618      	mov	r0, r3
 8019b56:	3714      	adds	r7, #20
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b5e:	4770      	bx	lr

08019b60 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 8019b60:	b480      	push	{r7}
 8019b62:	b085      	sub	sp, #20
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	60f8      	str	r0, [r7, #12]
 8019b68:	60b9      	str	r1, [r7, #8]
 8019b6a:	607a      	str	r2, [r7, #4]
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	4618      	mov	r0, r3
 8019b70:	3714      	adds	r7, #20
 8019b72:	46bd      	mov	sp, r7
 8019b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b78:	4770      	bx	lr

08019b7a <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 8019b7a:	b480      	push	{r7}
 8019b7c:	b085      	sub	sp, #20
 8019b7e:	af00      	add	r7, sp, #0
 8019b80:	60f8      	str	r0, [r7, #12]
 8019b82:	60b9      	str	r1, [r7, #8]
 8019b84:	607a      	str	r2, [r7, #4]
 8019b86:	603b      	str	r3, [r7, #0]
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	3714      	adds	r7, #20
 8019b8e:	46bd      	mov	sp, r7
 8019b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b94:	4770      	bx	lr

08019b96 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8019b96:	b480      	push	{r7}
 8019b98:	b085      	sub	sp, #20
 8019b9a:	af00      	add	r7, sp, #0
 8019b9c:	60f8      	str	r0, [r7, #12]
 8019b9e:	60b9      	str	r1, [r7, #8]
 8019ba0:	607a      	str	r2, [r7, #4]
 8019ba2:	603b      	str	r3, [r7, #0]
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	4618      	mov	r0, r3
 8019ba8:	3714      	adds	r7, #20
 8019baa:	46bd      	mov	sp, r7
 8019bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb0:	4770      	bx	lr

08019bb2 <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 8019bb2:	b480      	push	{r7}
 8019bb4:	b085      	sub	sp, #20
 8019bb6:	af00      	add	r7, sp, #0
 8019bb8:	60f8      	str	r0, [r7, #12]
 8019bba:	60b9      	str	r1, [r7, #8]
 8019bbc:	607a      	str	r2, [r7, #4]
 8019bbe:	603b      	str	r3, [r7, #0]
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	3714      	adds	r7, #20
 8019bc6:	46bd      	mov	sp, r7
 8019bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bcc:	4770      	bx	lr

08019bce <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8019bce:	b480      	push	{r7}
 8019bd0:	b085      	sub	sp, #20
 8019bd2:	af00      	add	r7, sp, #0
 8019bd4:	60f8      	str	r0, [r7, #12]
 8019bd6:	60b9      	str	r1, [r7, #8]
 8019bd8:	607a      	str	r2, [r7, #4]
 8019bda:	603b      	str	r3, [r7, #0]
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	4618      	mov	r0, r3
 8019be0:	3714      	adds	r7, #20
 8019be2:	46bd      	mov	sp, r7
 8019be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be8:	4770      	bx	lr

08019bea <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8019bea:	b480      	push	{r7}
 8019bec:	b083      	sub	sp, #12
 8019bee:	af00      	add	r7, sp, #0
 8019bf0:	6078      	str	r0, [r7, #4]
 8019bf2:	6039      	str	r1, [r7, #0]
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	4618      	mov	r0, r3
 8019bf8:	370c      	adds	r7, #12
 8019bfa:	46bd      	mov	sp, r7
 8019bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c00:	4770      	bx	lr

08019c02 <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 8019c02:	b480      	push	{r7}
 8019c04:	b083      	sub	sp, #12
 8019c06:	af00      	add	r7, sp, #0
 8019c08:	6078      	str	r0, [r7, #4]
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	4618      	mov	r0, r3
 8019c0e:	370c      	adds	r7, #12
 8019c10:	46bd      	mov	sp, r7
 8019c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c16:	4770      	bx	lr

08019c18 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8019c18:	b480      	push	{r7}
 8019c1a:	b083      	sub	sp, #12
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	6078      	str	r0, [r7, #4]
 8019c20:	460b      	mov	r3, r1
 8019c22:	70fb      	strb	r3, [r7, #3]
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	4618      	mov	r0, r3
 8019c28:	370c      	adds	r7, #12
 8019c2a:	46bd      	mov	sp, r7
 8019c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c30:	4770      	bx	lr

08019c32 <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 8019c32:	b480      	push	{r7}
 8019c34:	b083      	sub	sp, #12
 8019c36:	af00      	add	r7, sp, #0
 8019c38:	6078      	str	r0, [r7, #4]
 8019c3a:	6039      	str	r1, [r7, #0]
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	4618      	mov	r0, r3
 8019c40:	370c      	adds	r7, #12
 8019c42:	46bd      	mov	sp, r7
 8019c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c48:	4770      	bx	lr

08019c4a <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8019c4a:	b480      	push	{r7}
 8019c4c:	b083      	sub	sp, #12
 8019c4e:	af00      	add	r7, sp, #0
 8019c50:	6078      	str	r0, [r7, #4]
 8019c52:	6039      	str	r1, [r7, #0]
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	4618      	mov	r0, r3
 8019c58:	370c      	adds	r7, #12
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c60:	4770      	bx	lr

08019c62 <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 8019c62:	b480      	push	{r7}
 8019c64:	b083      	sub	sp, #12
 8019c66:	af00      	add	r7, sp, #0
 8019c68:	6078      	str	r0, [r7, #4]
 8019c6a:	6039      	str	r1, [r7, #0]
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	4618      	mov	r0, r3
 8019c70:	370c      	adds	r7, #12
 8019c72:	46bd      	mov	sp, r7
 8019c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c78:	4770      	bx	lr

08019c7a <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 8019c7a:	b480      	push	{r7}
 8019c7c:	b083      	sub	sp, #12
 8019c7e:	af00      	add	r7, sp, #0
 8019c80:	6078      	str	r0, [r7, #4]
 8019c82:	6039      	str	r1, [r7, #0]
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	4618      	mov	r0, r3
 8019c88:	370c      	adds	r7, #12
 8019c8a:	46bd      	mov	sp, r7
 8019c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c90:	4770      	bx	lr

08019c92 <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 8019c92:	b480      	push	{r7}
 8019c94:	b085      	sub	sp, #20
 8019c96:	af00      	add	r7, sp, #0
 8019c98:	60f8      	str	r0, [r7, #12]
 8019c9a:	1d3b      	adds	r3, r7, #4
 8019c9c:	e883 0006 	stmia.w	r3, {r1, r2}
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	3714      	adds	r7, #20
 8019ca6:	46bd      	mov	sp, r7
 8019ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cac:	4770      	bx	lr

08019cae <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 8019cae:	b480      	push	{r7}
 8019cb0:	b085      	sub	sp, #20
 8019cb2:	af00      	add	r7, sp, #0
 8019cb4:	60f8      	str	r0, [r7, #12]
 8019cb6:	1d3b      	adds	r3, r7, #4
 8019cb8:	e883 0006 	stmia.w	r3, {r1, r2}
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	4618      	mov	r0, r3
 8019cc0:	3714      	adds	r7, #20
 8019cc2:	46bd      	mov	sp, r7
 8019cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc8:	4770      	bx	lr

08019cca <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 8019cca:	b480      	push	{r7}
 8019ccc:	b085      	sub	sp, #20
 8019cce:	af00      	add	r7, sp, #0
 8019cd0:	60f8      	str	r0, [r7, #12]
 8019cd2:	ed87 0b00 	vstr	d0, [r7]
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	4618      	mov	r0, r3
 8019cda:	3714      	adds	r7, #20
 8019cdc:	46bd      	mov	sp, r7
 8019cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ce2:	4770      	bx	lr

08019ce4 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 8019ce4:	b480      	push	{r7}
 8019ce6:	b083      	sub	sp, #12
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	6078      	str	r0, [r7, #4]
 8019cec:	6039      	str	r1, [r7, #0]
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	370c      	adds	r7, #12
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cfa:	4770      	bx	lr

08019cfc <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 8019cfc:	b480      	push	{r7}
 8019cfe:	b083      	sub	sp, #12
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	6078      	str	r0, [r7, #4]
 8019d04:	6039      	str	r1, [r7, #0]
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	4618      	mov	r0, r3
 8019d0a:	370c      	adds	r7, #12
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d12:	4770      	bx	lr

08019d14 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 8019d14:	b480      	push	{r7}
 8019d16:	b083      	sub	sp, #12
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
 8019d1c:	6039      	str	r1, [r7, #0]
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	4618      	mov	r0, r3
 8019d22:	370c      	adds	r7, #12
 8019d24:	46bd      	mov	sp, r7
 8019d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d2a:	4770      	bx	lr

08019d2c <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 8019d2c:	b480      	push	{r7}
 8019d2e:	b083      	sub	sp, #12
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	6078      	str	r0, [r7, #4]
 8019d34:	6039      	str	r1, [r7, #0]
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	4618      	mov	r0, r3
 8019d3a:	370c      	adds	r7, #12
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d42:	4770      	bx	lr

08019d44 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 8019d44:	b480      	push	{r7}
 8019d46:	b083      	sub	sp, #12
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
 8019d4c:	6039      	str	r1, [r7, #0]
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	4618      	mov	r0, r3
 8019d52:	370c      	adds	r7, #12
 8019d54:	46bd      	mov	sp, r7
 8019d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5a:	4770      	bx	lr

08019d5c <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8019d5c:	b480      	push	{r7}
 8019d5e:	b083      	sub	sp, #12
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	6078      	str	r0, [r7, #4]
 8019d64:	4a04      	ldr	r2, [pc, #16]	; (8019d78 <_ZN16MockExpectedCallC1Ev+0x1c>)
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	601a      	str	r2, [r3, #0]
{
}
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	370c      	adds	r7, #12
 8019d70:	46bd      	mov	sp, r7
 8019d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d76:	4770      	bx	lr
 8019d78:	08028b10 	.word	0x08028b10

08019d7c <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 8019d7c:	b480      	push	{r7}
 8019d7e:	b083      	sub	sp, #12
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	6078      	str	r0, [r7, #4]
 8019d84:	4a04      	ldr	r2, [pc, #16]	; (8019d98 <_ZN16MockExpectedCallD1Ev+0x1c>)
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	601a      	str	r2, [r3, #0]
{
}
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	370c      	adds	r7, #12
 8019d90:	46bd      	mov	sp, r7
 8019d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d96:	4770      	bx	lr
 8019d98:	08028b10 	.word	0x08028b10

08019d9c <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b082      	sub	sp, #8
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	6078      	str	r0, [r7, #4]
 8019da4:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	3358      	adds	r3, #88	; 0x58
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	687a      	ldr	r2, [r7, #4]
 8019db0:	6839      	ldr	r1, [r7, #0]
 8019db2:	4610      	mov	r0, r2
 8019db4:	4798      	blx	r3
}
 8019db6:	6878      	ldr	r0, [r7, #4]
 8019db8:	3708      	adds	r7, #8
 8019dba:	46bd      	mov	sp, r7
 8019dbc:	bd80      	pop	{r7, pc}

08019dbe <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 8019dbe:	b580      	push	{r7, lr}
 8019dc0:	b082      	sub	sp, #8
 8019dc2:	af00      	add	r7, sp, #0
 8019dc4:	6078      	str	r0, [r7, #4]
 8019dc6:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	3304      	adds	r3, #4
 8019dcc:	6839      	ldr	r1, [r7, #0]
 8019dce:	4618      	mov	r0, r3
 8019dd0:	f7f2 fbcb 	bl	800c56a <_ZN12SimpleStringaSERKS_>
}
 8019dd4:	bf00      	nop
 8019dd6:	3708      	adds	r7, #8
 8019dd8:	46bd      	mov	sp, r7
 8019dda:	bd80      	pop	{r7, pc}

08019ddc <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b082      	sub	sp, #8
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
 8019de4:	6039      	str	r1, [r7, #0]
    return functionName_;
 8019de6:	683b      	ldr	r3, [r7, #0]
 8019de8:	3304      	adds	r3, #4
 8019dea:	4619      	mov	r1, r3
 8019dec:	6878      	ldr	r0, [r7, #4]
 8019dee:	f7f2 fba4 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
}
 8019df2:	6878      	ldr	r0, [r7, #4]
 8019df4:	3708      	adds	r7, #8
 8019df6:	46bd      	mov	sp, r7
 8019df8:	bd80      	pop	{r7, pc}
	...

08019dfc <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 8019dfc:	b590      	push	{r4, r7, lr}
 8019dfe:	b085      	sub	sp, #20
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	6078      	str	r0, [r7, #4]
 8019e04:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	4618      	mov	r0, r3
 8019e0a:	f7ff ffa7 	bl	8019d5c <_ZN16MockExpectedCallC1Ev>
 8019e0e:	4a2c      	ldr	r2, [pc, #176]	; (8019ec0 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	601a      	str	r2, [r3, #0]
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	3304      	adds	r3, #4
 8019e18:	492a      	ldr	r1, [pc, #168]	; (8019ec4 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	f7f2 fb39 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	2200      	movs	r2, #0
 8019e24:	731a      	strb	r2, [r3, #12]
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	2200      	movs	r2, #0
 8019e2a:	735a      	strb	r2, [r3, #13]
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	2200      	movs	r2, #0
 8019e30:	611a      	str	r2, [r3, #16]
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	2200      	movs	r2, #0
 8019e36:	615a      	str	r2, [r3, #20]
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	761a      	strb	r2, [r3, #24]
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8019e44:	f107 0308 	add.w	r3, r7, #8
 8019e48:	491e      	ldr	r1, [pc, #120]	; (8019ec4 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f7f2 fb21 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 8019e50:	f107 0308 	add.w	r3, r7, #8
 8019e54:	4619      	mov	r1, r3
 8019e56:	4620      	mov	r0, r4
 8019e58:	f003 f840 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
 8019e5c:	f107 0308 	add.w	r3, r7, #8
 8019e60:	4618      	mov	r0, r3
 8019e62:	f7f2 fece 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	2200      	movs	r2, #0
 8019e6a:	661a      	str	r2, [r3, #96]	; 0x60
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	2200      	movs	r2, #0
 8019e70:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	2201      	movs	r2, #1
 8019e78:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	2200      	movs	r2, #0
 8019e80:	669a      	str	r2, [r3, #104]	; 0x68
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	683a      	ldr	r2, [r7, #0]
 8019e86:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 8019e88:	2246      	movs	r2, #70	; 0x46
 8019e8a:	490f      	ldr	r1, [pc, #60]	; (8019ec8 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8019e8c:	2004      	movs	r0, #4
 8019e8e:	f7ef ff3d 	bl	8009d0c <_ZnwjPKci>
 8019e92:	4604      	mov	r4, r0
 8019e94:	4620      	mov	r0, r4
 8019e96:	f004 ff34 	bl	801ed02 <_ZN18MockNamedValueListC1Ev>
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 8019e9e:	2247      	movs	r2, #71	; 0x47
 8019ea0:	4909      	ldr	r1, [pc, #36]	; (8019ec8 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8019ea2:	2004      	movs	r0, #4
 8019ea4:	f7ef ff32 	bl	8009d0c <_ZnwjPKci>
 8019ea8:	4604      	mov	r4, r0
 8019eaa:	4620      	mov	r0, r4
 8019eac:	f004 ff29 	bl	801ed02 <_ZN18MockNamedValueListC1Ev>
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	621c      	str	r4, [r3, #32]
}
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	3714      	adds	r7, #20
 8019eba:	46bd      	mov	sp, r7
 8019ebc:	bd90      	pop	{r4, r7, pc}
 8019ebe:	bf00      	nop
 8019ec0:	08028954 	.word	0x08028954
 8019ec4:	0802592c 	.word	0x0802592c
 8019ec8:	08025930 	.word	0x08025930

08019ecc <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8019ecc:	b580      	push	{r7, lr}
 8019ece:	b082      	sub	sp, #8
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	6078      	str	r0, [r7, #4]
 8019ed4:	4a17      	ldr	r2, [pc, #92]	; (8019f34 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	69db      	ldr	r3, [r3, #28]
 8019ede:	4618      	mov	r0, r3
 8019ee0:	f004 ff1d 	bl	801ed1e <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	69db      	ldr	r3, [r3, #28]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d003      	beq.n	8019ef4 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 8019eec:	2104      	movs	r1, #4
 8019eee:	4618      	mov	r0, r3
 8019ef0:	f7ef ff20 	bl	8009d34 <_ZdlPvj>
    outputParameters_->clear();
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	6a1b      	ldr	r3, [r3, #32]
 8019ef8:	4618      	mov	r0, r3
 8019efa:	f004 ff10 	bl	801ed1e <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	6a1b      	ldr	r3, [r3, #32]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d003      	beq.n	8019f0e <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 8019f06:	2104      	movs	r1, #4
 8019f08:	4618      	mov	r0, r3
 8019f0a:	f7ef ff13 	bl	8009d34 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	3328      	adds	r3, #40	; 0x28
 8019f12:	4618      	mov	r0, r3
 8019f14:	f003 f80c 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	3304      	adds	r3, #4
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	f7f2 fe70 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	4618      	mov	r0, r3
 8019f26:	f7ff ff29 	bl	8019d7c <_ZN16MockExpectedCallD1Ev>
}
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	3708      	adds	r7, #8
 8019f30:	46bd      	mov	sp, r7
 8019f32:	bd80      	pop	{r7, pc}
 8019f34:	08028954 	.word	0x08028954

08019f38 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8019f38:	b580      	push	{r7, lr}
 8019f3a:	b082      	sub	sp, #8
 8019f3c:	af00      	add	r7, sp, #0
 8019f3e:	6078      	str	r0, [r7, #4]
}
 8019f40:	6878      	ldr	r0, [r7, #4]
 8019f42:	f7ff ffc3 	bl	8019ecc <_ZN23MockCheckedExpectedCallD1Ev>
 8019f46:	2170      	movs	r1, #112	; 0x70
 8019f48:	6878      	ldr	r0, [r7, #4]
 8019f4a:	f7ef fef3 	bl	8009d34 <_ZdlPvj>
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	4618      	mov	r0, r3
 8019f52:	3708      	adds	r7, #8
 8019f54:	46bd      	mov	sp, r7
 8019f56:	bd80      	pop	{r7, pc}

08019f58 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b082      	sub	sp, #8
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
 8019f60:	6039      	str	r1, [r7, #0]
    setName(name);
 8019f62:	6839      	ldr	r1, [r7, #0]
 8019f64:	6878      	ldr	r0, [r7, #4]
 8019f66:	f7ff ff2a 	bl	8019dbe <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 8019f6a:	687b      	ldr	r3, [r7, #4]
}
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	3708      	adds	r7, #8
 8019f70:	46bd      	mov	sp, r7
 8019f72:	bd80      	pop	{r7, pc}

08019f74 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 8019f74:	b590      	push	{r4, r7, lr}
 8019f76:	b087      	sub	sp, #28
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	60f8      	str	r0, [r7, #12]
 8019f7c:	60b9      	str	r1, [r7, #8]
 8019f7e:	4613      	mov	r3, r2
 8019f80:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019f82:	225a      	movs	r2, #90	; 0x5a
 8019f84:	490e      	ldr	r1, [pc, #56]	; (8019fc0 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 8019f86:	2038      	movs	r0, #56	; 0x38
 8019f88:	f7ef fec0 	bl	8009d0c <_ZnwjPKci>
 8019f8c:	4604      	mov	r4, r0
 8019f8e:	68b9      	ldr	r1, [r7, #8]
 8019f90:	4620      	mov	r0, r4
 8019f92:	f001 f851 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019f96:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	69db      	ldr	r3, [r3, #28]
 8019f9c:	6979      	ldr	r1, [r7, #20]
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	f004 fee0 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8019fa4:	697b      	ldr	r3, [r7, #20]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	3308      	adds	r3, #8
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	79fa      	ldrb	r2, [r7, #7]
 8019fae:	4611      	mov	r1, r2
 8019fb0:	6978      	ldr	r0, [r7, #20]
 8019fb2:	4798      	blx	r3
    return *this;
 8019fb4:	68fb      	ldr	r3, [r7, #12]
}
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	371c      	adds	r7, #28
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	bd90      	pop	{r4, r7, pc}
 8019fbe:	bf00      	nop
 8019fc0:	08025930 	.word	0x08025930

08019fc4 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8019fc4:	b590      	push	{r4, r7, lr}
 8019fc6:	b087      	sub	sp, #28
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	60f8      	str	r0, [r7, #12]
 8019fcc:	60b9      	str	r1, [r7, #8]
 8019fce:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019fd0:	2262      	movs	r2, #98	; 0x62
 8019fd2:	490e      	ldr	r1, [pc, #56]	; (801a00c <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 8019fd4:	2038      	movs	r0, #56	; 0x38
 8019fd6:	f7ef fe99 	bl	8009d0c <_ZnwjPKci>
 8019fda:	4604      	mov	r4, r0
 8019fdc:	68b9      	ldr	r1, [r7, #8]
 8019fde:	4620      	mov	r0, r4
 8019fe0:	f001 f82a 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019fe4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	69db      	ldr	r3, [r3, #28]
 8019fea:	6979      	ldr	r1, [r7, #20]
 8019fec:	4618      	mov	r0, r3
 8019fee:	f004 feb9 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8019ff2:	697b      	ldr	r3, [r7, #20]
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	3310      	adds	r3, #16
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	6879      	ldr	r1, [r7, #4]
 8019ffc:	6978      	ldr	r0, [r7, #20]
 8019ffe:	4798      	blx	r3
    return *this;
 801a000:	68fb      	ldr	r3, [r7, #12]
}
 801a002:	4618      	mov	r0, r3
 801a004:	371c      	adds	r7, #28
 801a006:	46bd      	mov	sp, r7
 801a008:	bd90      	pop	{r4, r7, pc}
 801a00a:	bf00      	nop
 801a00c:	08025930 	.word	0x08025930

0801a010 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801a010:	b590      	push	{r4, r7, lr}
 801a012:	b087      	sub	sp, #28
 801a014:	af00      	add	r7, sp, #0
 801a016:	60f8      	str	r0, [r7, #12]
 801a018:	60b9      	str	r1, [r7, #8]
 801a01a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a01c:	226a      	movs	r2, #106	; 0x6a
 801a01e:	490e      	ldr	r1, [pc, #56]	; (801a058 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801a020:	2038      	movs	r0, #56	; 0x38
 801a022:	f7ef fe73 	bl	8009d0c <_ZnwjPKci>
 801a026:	4604      	mov	r4, r0
 801a028:	68b9      	ldr	r1, [r7, #8]
 801a02a:	4620      	mov	r0, r4
 801a02c:	f001 f804 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a030:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	69db      	ldr	r3, [r3, #28]
 801a036:	6979      	ldr	r1, [r7, #20]
 801a038:	4618      	mov	r0, r3
 801a03a:	f004 fe93 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a03e:	697b      	ldr	r3, [r7, #20]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	330c      	adds	r3, #12
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	6879      	ldr	r1, [r7, #4]
 801a048:	6978      	ldr	r0, [r7, #20]
 801a04a:	4798      	blx	r3
    return *this;
 801a04c:	68fb      	ldr	r3, [r7, #12]
}
 801a04e:	4618      	mov	r0, r3
 801a050:	371c      	adds	r7, #28
 801a052:	46bd      	mov	sp, r7
 801a054:	bd90      	pop	{r4, r7, pc}
 801a056:	bf00      	nop
 801a058:	08025930 	.word	0x08025930

0801a05c <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801a05c:	b590      	push	{r4, r7, lr}
 801a05e:	b087      	sub	sp, #28
 801a060:	af00      	add	r7, sp, #0
 801a062:	60f8      	str	r0, [r7, #12]
 801a064:	60b9      	str	r1, [r7, #8]
 801a066:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a068:	2272      	movs	r2, #114	; 0x72
 801a06a:	490e      	ldr	r1, [pc, #56]	; (801a0a4 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801a06c:	2038      	movs	r0, #56	; 0x38
 801a06e:	f7ef fe4d 	bl	8009d0c <_ZnwjPKci>
 801a072:	4604      	mov	r4, r0
 801a074:	68b9      	ldr	r1, [r7, #8]
 801a076:	4620      	mov	r0, r4
 801a078:	f000 ffde 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a07c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	69db      	ldr	r3, [r3, #28]
 801a082:	6979      	ldr	r1, [r7, #20]
 801a084:	4618      	mov	r0, r3
 801a086:	f004 fe6d 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a08a:	697b      	ldr	r3, [r7, #20]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	3314      	adds	r3, #20
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	6879      	ldr	r1, [r7, #4]
 801a094:	6978      	ldr	r0, [r7, #20]
 801a096:	4798      	blx	r3
    return *this;
 801a098:	68fb      	ldr	r3, [r7, #12]
}
 801a09a:	4618      	mov	r0, r3
 801a09c:	371c      	adds	r7, #28
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	bd90      	pop	{r4, r7, pc}
 801a0a2:	bf00      	nop
 801a0a4:	08025930 	.word	0x08025930

0801a0a8 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801a0a8:	b590      	push	{r4, r7, lr}
 801a0aa:	b087      	sub	sp, #28
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	60f8      	str	r0, [r7, #12]
 801a0b0:	60b9      	str	r1, [r7, #8]
 801a0b2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a0b4:	227a      	movs	r2, #122	; 0x7a
 801a0b6:	490e      	ldr	r1, [pc, #56]	; (801a0f0 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801a0b8:	2038      	movs	r0, #56	; 0x38
 801a0ba:	f7ef fe27 	bl	8009d0c <_ZnwjPKci>
 801a0be:	4604      	mov	r4, r0
 801a0c0:	68b9      	ldr	r1, [r7, #8]
 801a0c2:	4620      	mov	r0, r4
 801a0c4:	f000 ffb8 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a0c8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	69db      	ldr	r3, [r3, #28]
 801a0ce:	6979      	ldr	r1, [r7, #20]
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	f004 fe47 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a0d6:	697b      	ldr	r3, [r7, #20]
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	3318      	adds	r3, #24
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	6879      	ldr	r1, [r7, #4]
 801a0e0:	6978      	ldr	r0, [r7, #20]
 801a0e2:	4798      	blx	r3
    return *this;
 801a0e4:	68fb      	ldr	r3, [r7, #12]
}
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	371c      	adds	r7, #28
 801a0ea:	46bd      	mov	sp, r7
 801a0ec:	bd90      	pop	{r4, r7, pc}
 801a0ee:	bf00      	nop
 801a0f0:	08025930 	.word	0x08025930

0801a0f4 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801a0f4:	b5b0      	push	{r4, r5, r7, lr}
 801a0f6:	b086      	sub	sp, #24
 801a0f8:	af02      	add	r7, sp, #8
 801a0fa:	60f8      	str	r0, [r7, #12]
 801a0fc:	60b9      	str	r1, [r7, #8]
 801a0fe:	4639      	mov	r1, r7
 801a100:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a104:	f7f9 fda8 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801a108:	4604      	mov	r4, r0
 801a10a:	6823      	ldr	r3, [r4, #0]
 801a10c:	3368      	adds	r3, #104	; 0x68
 801a10e:	681d      	ldr	r5, [r3, #0]
 801a110:	f7f9 fdb2 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a114:	4603      	mov	r3, r0
 801a116:	9300      	str	r3, [sp, #0]
 801a118:	2396      	movs	r3, #150	; 0x96
 801a11a:	4a04      	ldr	r2, [pc, #16]	; (801a12c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801a11c:	4904      	ldr	r1, [pc, #16]	; (801a130 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801a11e:	4620      	mov	r0, r4
 801a120:	47a8      	blx	r5
    return *this;
 801a122:	68fb      	ldr	r3, [r7, #12]
}
 801a124:	4618      	mov	r0, r3
 801a126:	3710      	adds	r7, #16
 801a128:	46bd      	mov	sp, r7
 801a12a:	bdb0      	pop	{r4, r5, r7, pc}
 801a12c:	08025930 	.word	0x08025930
 801a130:	0802594c 	.word	0x0802594c

0801a134 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801a134:	b5b0      	push	{r4, r5, r7, lr}
 801a136:	b086      	sub	sp, #24
 801a138:	af02      	add	r7, sp, #8
 801a13a:	60f8      	str	r0, [r7, #12]
 801a13c:	60b9      	str	r1, [r7, #8]
 801a13e:	4639      	mov	r1, r7
 801a140:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a144:	f7f9 fd88 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801a148:	4604      	mov	r4, r0
 801a14a:	6823      	ldr	r3, [r4, #0]
 801a14c:	3368      	adds	r3, #104	; 0x68
 801a14e:	681d      	ldr	r5, [r3, #0]
 801a150:	f7f9 fd92 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a154:	4603      	mov	r3, r0
 801a156:	9300      	str	r3, [sp, #0]
 801a158:	239c      	movs	r3, #156	; 0x9c
 801a15a:	4a04      	ldr	r2, [pc, #16]	; (801a16c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801a15c:	4904      	ldr	r1, [pc, #16]	; (801a170 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801a15e:	4620      	mov	r0, r4
 801a160:	47a8      	blx	r5
    return *this;
 801a162:	68fb      	ldr	r3, [r7, #12]
}
 801a164:	4618      	mov	r0, r3
 801a166:	3710      	adds	r7, #16
 801a168:	46bd      	mov	sp, r7
 801a16a:	bdb0      	pop	{r4, r5, r7, pc}
 801a16c:	08025930 	.word	0x08025930
 801a170:	0802596c 	.word	0x0802596c

0801a174 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801a174:	b590      	push	{r4, r7, lr}
 801a176:	b087      	sub	sp, #28
 801a178:	af00      	add	r7, sp, #0
 801a17a:	60f8      	str	r0, [r7, #12]
 801a17c:	60b9      	str	r1, [r7, #8]
 801a17e:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a182:	22a4      	movs	r2, #164	; 0xa4
 801a184:	490e      	ldr	r1, [pc, #56]	; (801a1c0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801a186:	2038      	movs	r0, #56	; 0x38
 801a188:	f7ef fdc0 	bl	8009d0c <_ZnwjPKci>
 801a18c:	4604      	mov	r4, r0
 801a18e:	68b9      	ldr	r1, [r7, #8]
 801a190:	4620      	mov	r0, r4
 801a192:	f000 ff51 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a196:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	69db      	ldr	r3, [r3, #28]
 801a19c:	6979      	ldr	r1, [r7, #20]
 801a19e:	4618      	mov	r0, r3
 801a1a0:	f004 fde0 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a1a4:	697b      	ldr	r3, [r7, #20]
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	3324      	adds	r3, #36	; 0x24
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	ed97 0b00 	vldr	d0, [r7]
 801a1b0:	6978      	ldr	r0, [r7, #20]
 801a1b2:	4798      	blx	r3
    return *this;
 801a1b4:	68fb      	ldr	r3, [r7, #12]
}
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	371c      	adds	r7, #28
 801a1ba:	46bd      	mov	sp, r7
 801a1bc:	bd90      	pop	{r4, r7, pc}
 801a1be:	bf00      	nop
 801a1c0:	08025930 	.word	0x08025930

0801a1c4 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801a1c4:	b590      	push	{r4, r7, lr}
 801a1c6:	b089      	sub	sp, #36	; 0x24
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6178      	str	r0, [r7, #20]
 801a1cc:	6139      	str	r1, [r7, #16]
 801a1ce:	ed87 0b02 	vstr	d0, [r7, #8]
 801a1d2:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a1d6:	22ac      	movs	r2, #172	; 0xac
 801a1d8:	490f      	ldr	r1, [pc, #60]	; (801a218 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801a1da:	2038      	movs	r0, #56	; 0x38
 801a1dc:	f7ef fd96 	bl	8009d0c <_ZnwjPKci>
 801a1e0:	4604      	mov	r4, r0
 801a1e2:	6939      	ldr	r1, [r7, #16]
 801a1e4:	4620      	mov	r0, r4
 801a1e6:	f000 ff27 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a1ea:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801a1ec:	697b      	ldr	r3, [r7, #20]
 801a1ee:	69db      	ldr	r3, [r3, #28]
 801a1f0:	69f9      	ldr	r1, [r7, #28]
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f004 fdb6 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801a1f8:	69fb      	ldr	r3, [r7, #28]
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	3328      	adds	r3, #40	; 0x28
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	ed97 1b00 	vldr	d1, [r7]
 801a204:	ed97 0b02 	vldr	d0, [r7, #8]
 801a208:	69f8      	ldr	r0, [r7, #28]
 801a20a:	4798      	blx	r3
    return *this;
 801a20c:	697b      	ldr	r3, [r7, #20]
}
 801a20e:	4618      	mov	r0, r3
 801a210:	3724      	adds	r7, #36	; 0x24
 801a212:	46bd      	mov	sp, r7
 801a214:	bd90      	pop	{r4, r7, pc}
 801a216:	bf00      	nop
 801a218:	08025930 	.word	0x08025930

0801a21c <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801a21c:	b590      	push	{r4, r7, lr}
 801a21e:	b087      	sub	sp, #28
 801a220:	af00      	add	r7, sp, #0
 801a222:	60f8      	str	r0, [r7, #12]
 801a224:	60b9      	str	r1, [r7, #8]
 801a226:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a228:	22b4      	movs	r2, #180	; 0xb4
 801a22a:	490e      	ldr	r1, [pc, #56]	; (801a264 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801a22c:	2038      	movs	r0, #56	; 0x38
 801a22e:	f7ef fd6d 	bl	8009d0c <_ZnwjPKci>
 801a232:	4604      	mov	r4, r0
 801a234:	68b9      	ldr	r1, [r7, #8]
 801a236:	4620      	mov	r0, r4
 801a238:	f000 fefe 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a23c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	69db      	ldr	r3, [r3, #28]
 801a242:	6979      	ldr	r1, [r7, #20]
 801a244:	4618      	mov	r0, r3
 801a246:	f004 fd8d 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a24a:	697b      	ldr	r3, [r7, #20]
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	3338      	adds	r3, #56	; 0x38
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	6879      	ldr	r1, [r7, #4]
 801a254:	6978      	ldr	r0, [r7, #20]
 801a256:	4798      	blx	r3
    return *this;
 801a258:	68fb      	ldr	r3, [r7, #12]
}
 801a25a:	4618      	mov	r0, r3
 801a25c:	371c      	adds	r7, #28
 801a25e:	46bd      	mov	sp, r7
 801a260:	bd90      	pop	{r4, r7, pc}
 801a262:	bf00      	nop
 801a264:	08025930 	.word	0x08025930

0801a268 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801a268:	b590      	push	{r4, r7, lr}
 801a26a:	b087      	sub	sp, #28
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	60f8      	str	r0, [r7, #12]
 801a270:	60b9      	str	r1, [r7, #8]
 801a272:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a274:	22bc      	movs	r2, #188	; 0xbc
 801a276:	490e      	ldr	r1, [pc, #56]	; (801a2b0 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801a278:	2038      	movs	r0, #56	; 0x38
 801a27a:	f7ef fd47 	bl	8009d0c <_ZnwjPKci>
 801a27e:	4604      	mov	r4, r0
 801a280:	68b9      	ldr	r1, [r7, #8]
 801a282:	4620      	mov	r0, r4
 801a284:	f000 fed8 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a288:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	69db      	ldr	r3, [r3, #28]
 801a28e:	6979      	ldr	r1, [r7, #20]
 801a290:	4618      	mov	r0, r3
 801a292:	f004 fd67 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a296:	697b      	ldr	r3, [r7, #20]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	332c      	adds	r3, #44	; 0x2c
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	6879      	ldr	r1, [r7, #4]
 801a2a0:	6978      	ldr	r0, [r7, #20]
 801a2a2:	4798      	blx	r3
    return *this;
 801a2a4:	68fb      	ldr	r3, [r7, #12]
}
 801a2a6:	4618      	mov	r0, r3
 801a2a8:	371c      	adds	r7, #28
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	bd90      	pop	{r4, r7, pc}
 801a2ae:	bf00      	nop
 801a2b0:	08025930 	.word	0x08025930

0801a2b4 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801a2b4:	b590      	push	{r4, r7, lr}
 801a2b6:	b087      	sub	sp, #28
 801a2b8:	af00      	add	r7, sp, #0
 801a2ba:	60f8      	str	r0, [r7, #12]
 801a2bc:	60b9      	str	r1, [r7, #8]
 801a2be:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a2c0:	22c4      	movs	r2, #196	; 0xc4
 801a2c2:	490e      	ldr	r1, [pc, #56]	; (801a2fc <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801a2c4:	2038      	movs	r0, #56	; 0x38
 801a2c6:	f7ef fd21 	bl	8009d0c <_ZnwjPKci>
 801a2ca:	4604      	mov	r4, r0
 801a2cc:	68b9      	ldr	r1, [r7, #8]
 801a2ce:	4620      	mov	r0, r4
 801a2d0:	f000 feb2 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a2d4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a2d6:	68fb      	ldr	r3, [r7, #12]
 801a2d8:	69db      	ldr	r3, [r3, #28]
 801a2da:	6979      	ldr	r1, [r7, #20]
 801a2dc:	4618      	mov	r0, r3
 801a2de:	f004 fd41 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a2e2:	697b      	ldr	r3, [r7, #20]
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	3330      	adds	r3, #48	; 0x30
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	6879      	ldr	r1, [r7, #4]
 801a2ec:	6978      	ldr	r0, [r7, #20]
 801a2ee:	4798      	blx	r3
    return *this;
 801a2f0:	68fb      	ldr	r3, [r7, #12]
}
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	371c      	adds	r7, #28
 801a2f6:	46bd      	mov	sp, r7
 801a2f8:	bd90      	pop	{r4, r7, pc}
 801a2fa:	bf00      	nop
 801a2fc:	08025930 	.word	0x08025930

0801a300 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801a300:	b590      	push	{r4, r7, lr}
 801a302:	b087      	sub	sp, #28
 801a304:	af00      	add	r7, sp, #0
 801a306:	60f8      	str	r0, [r7, #12]
 801a308:	60b9      	str	r1, [r7, #8]
 801a30a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a30c:	22cc      	movs	r2, #204	; 0xcc
 801a30e:	490e      	ldr	r1, [pc, #56]	; (801a348 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801a310:	2038      	movs	r0, #56	; 0x38
 801a312:	f7ef fcfb 	bl	8009d0c <_ZnwjPKci>
 801a316:	4604      	mov	r4, r0
 801a318:	68b9      	ldr	r1, [r7, #8]
 801a31a:	4620      	mov	r0, r4
 801a31c:	f000 fe8c 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a320:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	69db      	ldr	r3, [r3, #28]
 801a326:	6979      	ldr	r1, [r7, #20]
 801a328:	4618      	mov	r0, r3
 801a32a:	f004 fd1b 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a32e:	697b      	ldr	r3, [r7, #20]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	3334      	adds	r3, #52	; 0x34
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	6879      	ldr	r1, [r7, #4]
 801a338:	6978      	ldr	r0, [r7, #20]
 801a33a:	4798      	blx	r3
    return *this;
 801a33c:	68fb      	ldr	r3, [r7, #12]
}
 801a33e:	4618      	mov	r0, r3
 801a340:	371c      	adds	r7, #28
 801a342:	46bd      	mov	sp, r7
 801a344:	bd90      	pop	{r4, r7, pc}
 801a346:	bf00      	nop
 801a348:	08025930 	.word	0x08025930

0801a34c <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801a34c:	b590      	push	{r4, r7, lr}
 801a34e:	b087      	sub	sp, #28
 801a350:	af00      	add	r7, sp, #0
 801a352:	60f8      	str	r0, [r7, #12]
 801a354:	60b9      	str	r1, [r7, #8]
 801a356:	607a      	str	r2, [r7, #4]
 801a358:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a35a:	22d4      	movs	r2, #212	; 0xd4
 801a35c:	490e      	ldr	r1, [pc, #56]	; (801a398 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801a35e:	2038      	movs	r0, #56	; 0x38
 801a360:	f7ef fcd4 	bl	8009d0c <_ZnwjPKci>
 801a364:	4604      	mov	r4, r0
 801a366:	68b9      	ldr	r1, [r7, #8]
 801a368:	4620      	mov	r0, r4
 801a36a:	f000 fe65 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a36e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	69db      	ldr	r3, [r3, #28]
 801a374:	6979      	ldr	r1, [r7, #20]
 801a376:	4618      	mov	r0, r3
 801a378:	f004 fcf4 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801a37c:	697b      	ldr	r3, [r7, #20]
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	333c      	adds	r3, #60	; 0x3c
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	683a      	ldr	r2, [r7, #0]
 801a386:	6879      	ldr	r1, [r7, #4]
 801a388:	6978      	ldr	r0, [r7, #20]
 801a38a:	4798      	blx	r3
    return *this;
 801a38c:	68fb      	ldr	r3, [r7, #12]
}
 801a38e:	4618      	mov	r0, r3
 801a390:	371c      	adds	r7, #28
 801a392:	46bd      	mov	sp, r7
 801a394:	bd90      	pop	{r4, r7, pc}
 801a396:	bf00      	nop
 801a398:	08025930 	.word	0x08025930

0801a39c <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801a39c:	b590      	push	{r4, r7, lr}
 801a39e:	b087      	sub	sp, #28
 801a3a0:	af00      	add	r7, sp, #0
 801a3a2:	60f8      	str	r0, [r7, #12]
 801a3a4:	60b9      	str	r1, [r7, #8]
 801a3a6:	607a      	str	r2, [r7, #4]
 801a3a8:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a3aa:	22dc      	movs	r2, #220	; 0xdc
 801a3ac:	490e      	ldr	r1, [pc, #56]	; (801a3e8 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801a3ae:	2038      	movs	r0, #56	; 0x38
 801a3b0:	f7ef fcac 	bl	8009d0c <_ZnwjPKci>
 801a3b4:	4604      	mov	r4, r0
 801a3b6:	6879      	ldr	r1, [r7, #4]
 801a3b8:	4620      	mov	r0, r4
 801a3ba:	f000 fe3d 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a3be:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	69db      	ldr	r3, [r3, #28]
 801a3c4:	6979      	ldr	r1, [r7, #20]
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	f004 fccc 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801a3cc:	697b      	ldr	r3, [r7, #20]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	3340      	adds	r3, #64	; 0x40
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	683a      	ldr	r2, [r7, #0]
 801a3d6:	68b9      	ldr	r1, [r7, #8]
 801a3d8:	6978      	ldr	r0, [r7, #20]
 801a3da:	4798      	blx	r3
    return *this;
 801a3dc:	68fb      	ldr	r3, [r7, #12]
}
 801a3de:	4618      	mov	r0, r3
 801a3e0:	371c      	adds	r7, #28
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bd90      	pop	{r4, r7, pc}
 801a3e6:	bf00      	nop
 801a3e8:	08025930 	.word	0x08025930

0801a3ec <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801a3ec:	b590      	push	{r4, r7, lr}
 801a3ee:	b087      	sub	sp, #28
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	60f8      	str	r0, [r7, #12]
 801a3f4:	60b9      	str	r1, [r7, #8]
 801a3f6:	607a      	str	r2, [r7, #4]
 801a3f8:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a3fa:	22e4      	movs	r2, #228	; 0xe4
 801a3fc:	4911      	ldr	r1, [pc, #68]	; (801a444 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801a3fe:	2038      	movs	r0, #56	; 0x38
 801a400:	f7ef fc84 	bl	8009d0c <_ZnwjPKci>
 801a404:	4604      	mov	r4, r0
 801a406:	68b9      	ldr	r1, [r7, #8]
 801a408:	4620      	mov	r0, r4
 801a40a:	f000 fe15 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a40e:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	6a1b      	ldr	r3, [r3, #32]
 801a414:	6979      	ldr	r1, [r7, #20]
 801a416:	4618      	mov	r0, r3
 801a418:	f004 fca4 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a41c:	697b      	ldr	r3, [r7, #20]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	3330      	adds	r3, #48	; 0x30
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	6879      	ldr	r1, [r7, #4]
 801a426:	6978      	ldr	r0, [r7, #20]
 801a428:	4798      	blx	r3
    newParameter->setSize(size);
 801a42a:	697b      	ldr	r3, [r7, #20]
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	3348      	adds	r3, #72	; 0x48
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	6839      	ldr	r1, [r7, #0]
 801a434:	6978      	ldr	r0, [r7, #20]
 801a436:	4798      	blx	r3
    return *this;
 801a438:	68fb      	ldr	r3, [r7, #12]
}
 801a43a:	4618      	mov	r0, r3
 801a43c:	371c      	adds	r7, #28
 801a43e:	46bd      	mov	sp, r7
 801a440:	bd90      	pop	{r4, r7, pc}
 801a442:	bf00      	nop
 801a444:	08025930 	.word	0x08025930

0801a448 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801a448:	b590      	push	{r4, r7, lr}
 801a44a:	b087      	sub	sp, #28
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	60f8      	str	r0, [r7, #12]
 801a450:	60b9      	str	r1, [r7, #8]
 801a452:	607a      	str	r2, [r7, #4]
 801a454:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a456:	22ed      	movs	r2, #237	; 0xed
 801a458:	490e      	ldr	r1, [pc, #56]	; (801a494 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801a45a:	2038      	movs	r0, #56	; 0x38
 801a45c:	f7ef fc56 	bl	8009d0c <_ZnwjPKci>
 801a460:	4604      	mov	r4, r0
 801a462:	6879      	ldr	r1, [r7, #4]
 801a464:	4620      	mov	r0, r4
 801a466:	f000 fde7 	bl	801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a46a:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	6a1b      	ldr	r3, [r3, #32]
 801a470:	6979      	ldr	r1, [r7, #20]
 801a472:	4618      	mov	r0, r3
 801a474:	f004 fc76 	bl	801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801a478:	697b      	ldr	r3, [r7, #20]
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	3340      	adds	r3, #64	; 0x40
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	683a      	ldr	r2, [r7, #0]
 801a482:	68b9      	ldr	r1, [r7, #8]
 801a484:	6978      	ldr	r0, [r7, #20]
 801a486:	4798      	blx	r3
    return *this;
 801a488:	68fb      	ldr	r3, [r7, #12]
}
 801a48a:	4618      	mov	r0, r3
 801a48c:	371c      	adds	r7, #28
 801a48e:	46bd      	mov	sp, r7
 801a490:	bd90      	pop	{r4, r7, pc}
 801a492:	bf00      	nop
 801a494:	08025930 	.word	0x08025930

0801a498 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801a498:	b590      	push	{r4, r7, lr}
 801a49a:	b083      	sub	sp, #12
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	6078      	str	r0, [r7, #4]
 801a4a0:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	3318      	adds	r3, #24
 801a4a8:	681c      	ldr	r4, [r3, #0]
 801a4aa:	2300      	movs	r3, #0
 801a4ac:	2200      	movs	r2, #0
 801a4ae:	6839      	ldr	r1, [r7, #0]
 801a4b0:	6878      	ldr	r0, [r7, #4]
 801a4b2:	47a0      	blx	r4
 801a4b4:	4603      	mov	r3, r0
}
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	370c      	adds	r7, #12
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	bd90      	pop	{r4, r7, pc}
	...

0801a4c0 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	b086      	sub	sp, #24
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	60f8      	str	r0, [r7, #12]
 801a4c8:	60b9      	str	r1, [r7, #8]
 801a4ca:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a4cc:	68bb      	ldr	r3, [r7, #8]
 801a4ce:	69db      	ldr	r3, [r3, #28]
 801a4d0:	6879      	ldr	r1, [r7, #4]
 801a4d2:	4618      	mov	r0, r3
 801a4d4:	f004 fc7c 	bl	801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a4d8:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801a4da:	697b      	ldr	r3, [r7, #20]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d008      	beq.n	801a4f2 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801a4e0:	697b      	ldr	r3, [r7, #20]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	3360      	adds	r3, #96	; 0x60
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	68fa      	ldr	r2, [r7, #12]
 801a4ea:	6979      	ldr	r1, [r7, #20]
 801a4ec:	4610      	mov	r0, r2
 801a4ee:	4798      	blx	r3
 801a4f0:	e004      	b.n	801a4fc <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	4903      	ldr	r1, [pc, #12]	; (801a504 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	f7f2 fe10 	bl	800d11c <_Z10StringFromPKc>
}
 801a4fc:	68f8      	ldr	r0, [r7, #12]
 801a4fe:	3718      	adds	r7, #24
 801a500:	46bd      	mov	sp, r7
 801a502:	bd80      	pop	{r7, pc}
 801a504:	0802592c 	.word	0x0802592c

0801a508 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801a508:	b580      	push	{r7, lr}
 801a50a:	b084      	sub	sp, #16
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
 801a510:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	69db      	ldr	r3, [r3, #28]
 801a516:	6839      	ldr	r1, [r7, #0]
 801a518:	4618      	mov	r0, r3
 801a51a:	f004 fc59 	bl	801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a51e:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	2b00      	cmp	r3, #0
 801a524:	bf14      	ite	ne
 801a526:	2301      	movne	r3, #1
 801a528:	2300      	moveq	r3, #0
 801a52a:	b2db      	uxtb	r3, r3
}
 801a52c:	4618      	mov	r0, r3
 801a52e:	3710      	adds	r7, #16
 801a530:	46bd      	mov	sp, r7
 801a532:	bd80      	pop	{r7, pc}

0801a534 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801a534:	b580      	push	{r7, lr}
 801a536:	b084      	sub	sp, #16
 801a538:	af00      	add	r7, sp, #0
 801a53a:	6078      	str	r0, [r7, #4]
 801a53c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	6a1b      	ldr	r3, [r3, #32]
 801a542:	6839      	ldr	r1, [r7, #0]
 801a544:	4618      	mov	r0, r3
 801a546:	f004 fc43 	bl	801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a54a:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	bf14      	ite	ne
 801a552:	2301      	movne	r3, #1
 801a554:	2300      	moveq	r3, #0
 801a556:	b2db      	uxtb	r3, r3
}
 801a558:	4618      	mov	r0, r3
 801a55a:	3710      	adds	r7, #16
 801a55c:	46bd      	mov	sp, r7
 801a55e:	bd80      	pop	{r7, pc}

0801a560 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801a560:	b590      	push	{r4, r7, lr}
 801a562:	b089      	sub	sp, #36	; 0x24
 801a564:	af00      	add	r7, sp, #0
 801a566:	60f8      	str	r0, [r7, #12]
 801a568:	60b9      	str	r1, [r7, #8]
 801a56a:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a56c:	68bb      	ldr	r3, [r7, #8]
 801a56e:	69db      	ldr	r3, [r3, #28]
 801a570:	6879      	ldr	r1, [r7, #4]
 801a572:	4618      	mov	r0, r3
 801a574:	f004 fc2c 	bl	801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a578:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801a57a:	2400      	movs	r4, #0
 801a57c:	69fb      	ldr	r3, [r7, #28]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d004      	beq.n	801a58c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801a582:	69f9      	ldr	r1, [r7, #28]
 801a584:	68f8      	ldr	r0, [r7, #12]
 801a586:	f7f0 f829 	bl	800a5dc <_ZN14MockNamedValueC1ERKS_>
 801a58a:	e00c      	b.n	801a5a6 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801a58c:	f107 0314 	add.w	r3, r7, #20
 801a590:	490a      	ldr	r1, [pc, #40]	; (801a5bc <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801a592:	4618      	mov	r0, r3
 801a594:	f7f1 ff7d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801a598:	2401      	movs	r4, #1
 801a59a:	f107 0314 	add.w	r3, r7, #20
 801a59e:	4619      	mov	r1, r3
 801a5a0:	68f8      	ldr	r0, [r7, #12]
 801a5a2:	f002 fc9b 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
 801a5a6:	2c00      	cmp	r4, #0
 801a5a8:	d004      	beq.n	801a5b4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801a5aa:	f107 0314 	add.w	r3, r7, #20
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	f7f2 fb27 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801a5b4:	68f8      	ldr	r0, [r7, #12]
 801a5b6:	3724      	adds	r7, #36	; 0x24
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	bd90      	pop	{r4, r7, pc}
 801a5bc:	0802592c 	.word	0x0802592c

0801a5c0 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801a5c0:	b590      	push	{r4, r7, lr}
 801a5c2:	b089      	sub	sp, #36	; 0x24
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	60f8      	str	r0, [r7, #12]
 801a5c8:	60b9      	str	r1, [r7, #8]
 801a5ca:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801a5cc:	68bb      	ldr	r3, [r7, #8]
 801a5ce:	6a1b      	ldr	r3, [r3, #32]
 801a5d0:	6879      	ldr	r1, [r7, #4]
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	f004 fbfc 	bl	801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a5d8:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801a5da:	2400      	movs	r4, #0
 801a5dc:	69fb      	ldr	r3, [r7, #28]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d004      	beq.n	801a5ec <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801a5e2:	69f9      	ldr	r1, [r7, #28]
 801a5e4:	68f8      	ldr	r0, [r7, #12]
 801a5e6:	f7ef fff9 	bl	800a5dc <_ZN14MockNamedValueC1ERKS_>
 801a5ea:	e00c      	b.n	801a606 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801a5ec:	f107 0314 	add.w	r3, r7, #20
 801a5f0:	490a      	ldr	r1, [pc, #40]	; (801a61c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f7f1 ff4d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801a5f8:	2401      	movs	r4, #1
 801a5fa:	f107 0314 	add.w	r3, r7, #20
 801a5fe:	4619      	mov	r1, r3
 801a600:	68f8      	ldr	r0, [r7, #12]
 801a602:	f002 fc6b 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
 801a606:	2c00      	cmp	r4, #0
 801a608:	d004      	beq.n	801a614 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801a60a:	f107 0314 	add.w	r3, r7, #20
 801a60e:	4618      	mov	r0, r3
 801a610:	f7f2 faf7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801a614:	68f8      	ldr	r0, [r7, #12]
 801a616:	3724      	adds	r7, #36	; 0x24
 801a618:	46bd      	mov	sp, r7
 801a61a:	bd90      	pop	{r4, r7, pc}
 801a61c:	0802592c 	.word	0x0802592c

0801a620 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801a620:	b580      	push	{r7, lr}
 801a622:	b084      	sub	sp, #16
 801a624:	af00      	add	r7, sp, #0
 801a626:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	69db      	ldr	r3, [r3, #28]
 801a62c:	4618      	mov	r0, r3
 801a62e:	f004 fbfe 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801a632:	60f8      	str	r0, [r7, #12]
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d014      	beq.n	801a664 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801a63a:	68f9      	ldr	r1, [r7, #12]
 801a63c:	6878      	ldr	r0, [r7, #4]
 801a63e:	f000 fced 	bl	801b01c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a642:	4603      	mov	r3, r0
 801a644:	4618      	mov	r0, r3
 801a646:	f000 fd1f 	bl	801b088 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801a64a:	4603      	mov	r3, r0
 801a64c:	f083 0301 	eor.w	r3, r3, #1
 801a650:	b2db      	uxtb	r3, r3
 801a652:	2b00      	cmp	r3, #0
 801a654:	d001      	beq.n	801a65a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801a656:	2300      	movs	r3, #0
 801a658:	e023      	b.n	801a6a2 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801a65a:	68f8      	ldr	r0, [r7, #12]
 801a65c:	f004 faf0 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801a660:	60f8      	str	r0, [r7, #12]
 801a662:	e7e7      	b.n	801a634 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	6a1b      	ldr	r3, [r3, #32]
 801a668:	4618      	mov	r0, r3
 801a66a:	f004 fbe0 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801a66e:	60f8      	str	r0, [r7, #12]
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	2b00      	cmp	r3, #0
 801a674:	d014      	beq.n	801a6a0 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801a676:	68f9      	ldr	r1, [r7, #12]
 801a678:	6878      	ldr	r0, [r7, #4]
 801a67a:	f000 fccf 	bl	801b01c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a67e:	4603      	mov	r3, r0
 801a680:	4618      	mov	r0, r3
 801a682:	f000 fd01 	bl	801b088 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801a686:	4603      	mov	r3, r0
 801a688:	f083 0301 	eor.w	r3, r3, #1
 801a68c:	b2db      	uxtb	r3, r3
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d001      	beq.n	801a696 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801a692:	2300      	movs	r3, #0
 801a694:	e005      	b.n	801a6a2 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a696:	68f8      	ldr	r0, [r7, #12]
 801a698:	f004 fad2 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801a69c:	60f8      	str	r0, [r7, #12]
 801a69e:	e7e7      	b.n	801a670 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801a6a0:	2301      	movs	r3, #1
}
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	3710      	adds	r7, #16
 801a6a6:	46bd      	mov	sp, r7
 801a6a8:	bd80      	pop	{r7, pc}

0801a6aa <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801a6aa:	b480      	push	{r7}
 801a6ac:	b083      	sub	sp, #12
 801a6ae:	af00      	add	r7, sp, #0
 801a6b0:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	2201      	movs	r2, #1
 801a6b6:	731a      	strb	r2, [r3, #12]
    return *this;
 801a6b8:	687b      	ldr	r3, [r7, #4]
}
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	370c      	adds	r7, #12
 801a6be:	46bd      	mov	sp, r7
 801a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6c4:	4770      	bx	lr

0801a6c6 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801a6c6:	b480      	push	{r7}
 801a6c8:	b083      	sub	sp, #12
 801a6ca:	af00      	add	r7, sp, #0
 801a6cc:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6d6:	429a      	cmp	r2, r3
 801a6d8:	bf0c      	ite	eq
 801a6da:	2301      	moveq	r3, #1
 801a6dc:	2300      	movne	r3, #0
 801a6de:	b2db      	uxtb	r3, r3
}
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	370c      	adds	r7, #12
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ea:	4770      	bx	lr

0801a6ec <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801a6ec:	b480      	push	{r7}
 801a6ee:	b083      	sub	sp, #12
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6fc:	429a      	cmp	r2, r3
 801a6fe:	bf34      	ite	cc
 801a700:	2301      	movcc	r3, #1
 801a702:	2300      	movcs	r3, #0
 801a704:	b2db      	uxtb	r3, r3
}
 801a706:	4618      	mov	r0, r3
 801a708:	370c      	adds	r7, #12
 801a70a:	46bd      	mov	sp, r7
 801a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a710:	4770      	bx	lr

0801a712 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801a712:	b580      	push	{r7, lr}
 801a714:	b082      	sub	sp, #8
 801a716:	af00      	add	r7, sp, #0
 801a718:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	33cc      	adds	r3, #204	; 0xcc
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	6878      	ldr	r0, [r7, #4]
 801a724:	4798      	blx	r3
 801a726:	4603      	mov	r3, r0
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d00c      	beq.n	801a746 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	7b1b      	ldrb	r3, [r3, #12]
 801a730:	f083 0301 	eor.w	r3, r3, #1
 801a734:	b2db      	uxtb	r3, r3
 801a736:	2b00      	cmp	r3, #0
 801a738:	d103      	bne.n	801a742 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	7b5b      	ldrb	r3, [r3, #13]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d001      	beq.n	801a746 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801a742:	2301      	movs	r3, #1
 801a744:	e000      	b.n	801a748 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801a746:	2300      	movs	r3, #0
}
 801a748:	4618      	mov	r0, r3
 801a74a:	3708      	adds	r7, #8
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd80      	pop	{r7, pc}

0801a750 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801a750:	b580      	push	{r7, lr}
 801a752:	b082      	sub	sp, #8
 801a754:	af00      	add	r7, sp, #0
 801a756:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	33d0      	adds	r3, #208	; 0xd0
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	6878      	ldr	r0, [r7, #4]
 801a762:	4798      	blx	r3
 801a764:	4603      	mov	r3, r0
 801a766:	2b00      	cmp	r3, #0
 801a768:	d006      	beq.n	801a778 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801a770:	2b00      	cmp	r3, #0
 801a772:	d001      	beq.n	801a778 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801a774:	2301      	movs	r3, #1
 801a776:	e000      	b.n	801a77a <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801a778:	2300      	movs	r3, #0
}
 801a77a:	4618      	mov	r0, r3
 801a77c:	3708      	adds	r7, #8
 801a77e:	46bd      	mov	sp, r7
 801a780:	bd80      	pop	{r7, pc}

0801a782 <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801a782:	b580      	push	{r7, lr}
 801a784:	b082      	sub	sp, #8
 801a786:	af00      	add	r7, sp, #0
 801a788:	6078      	str	r0, [r7, #4]
 801a78a:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a790:	1c5a      	adds	r2, r3, #1
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	691b      	ldr	r3, [r3, #16]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d00c      	beq.n	801a7b8 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801a7a2:	683a      	ldr	r2, [r7, #0]
 801a7a4:	429a      	cmp	r2, r3
 801a7a6:	d304      	bcc.n	801a7b2 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	695b      	ldr	r3, [r3, #20]
 801a7ac:	683a      	ldr	r2, [r7, #0]
 801a7ae:	429a      	cmp	r2, r3
 801a7b0:	d902      	bls.n	801a7b8 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	2201      	movs	r2, #1
 801a7b6:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	33ec      	adds	r3, #236	; 0xec
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	6878      	ldr	r0, [r7, #4]
 801a7c2:	4798      	blx	r3
}
 801a7c4:	bf00      	nop
 801a7c6:	3708      	adds	r7, #8
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	bd80      	pop	{r7, pc}

0801a7cc <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801a7cc:	b480      	push	{r7}
 801a7ce:	b083      	sub	sp, #12
 801a7d0:	af00      	add	r7, sp, #0
 801a7d2:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	2201      	movs	r2, #1
 801a7d8:	735a      	strb	r2, [r3, #13]
}
 801a7da:	bf00      	nop
 801a7dc:	370c      	adds	r7, #12
 801a7de:	46bd      	mov	sp, r7
 801a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e4:	4770      	bx	lr

0801a7e6 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801a7e6:	b480      	push	{r7}
 801a7e8:	b083      	sub	sp, #12
 801a7ea:	af00      	add	r7, sp, #0
 801a7ec:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	2201      	movs	r2, #1
 801a7f2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801a7f6:	bf00      	nop
 801a7f8:	370c      	adds	r7, #12
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a800:	4770      	bx	lr

0801a802 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801a802:	b580      	push	{r7, lr}
 801a804:	b084      	sub	sp, #16
 801a806:	af00      	add	r7, sp, #0
 801a808:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801a810:	f083 0301 	eor.w	r3, r3, #1
 801a814:	b2da      	uxtb	r2, r3
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	2200      	movs	r2, #0
 801a820:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	69db      	ldr	r3, [r3, #28]
 801a826:	4618      	mov	r0, r3
 801a828:	f004 fb01 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801a82c:	60f8      	str	r0, [r7, #12]
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d00d      	beq.n	801a850 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801a834:	68f9      	ldr	r1, [r7, #12]
 801a836:	6878      	ldr	r0, [r7, #4]
 801a838:	f000 fbf0 	bl	801b01c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a83c:	4603      	mov	r3, r0
 801a83e:	2100      	movs	r1, #0
 801a840:	4618      	mov	r0, r3
 801a842:	f000 fc11 	bl	801b068 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801a846:	68f8      	ldr	r0, [r7, #12]
 801a848:	f004 f9fa 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801a84c:	60f8      	str	r0, [r7, #12]
 801a84e:	e7ee      	b.n	801a82e <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	6a1b      	ldr	r3, [r3, #32]
 801a854:	4618      	mov	r0, r3
 801a856:	f004 faea 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801a85a:	60f8      	str	r0, [r7, #12]
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d00d      	beq.n	801a87e <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801a862:	68f9      	ldr	r1, [r7, #12]
 801a864:	6878      	ldr	r0, [r7, #4]
 801a866:	f000 fbd9 	bl	801b01c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a86a:	4603      	mov	r3, r0
 801a86c:	2100      	movs	r1, #0
 801a86e:	4618      	mov	r0, r3
 801a870:	f000 fbfa 	bl	801b068 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a874:	68f8      	ldr	r0, [r7, #12]
 801a876:	f004 f9e3 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801a87a:	60f8      	str	r0, [r7, #12]
 801a87c:	e7ee      	b.n	801a85c <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801a87e:	bf00      	nop
 801a880:	3710      	adds	r7, #16
 801a882:	46bd      	mov	sp, r7
 801a884:	bd80      	pop	{r7, pc}

0801a886 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801a886:	b590      	push	{r4, r7, lr}
 801a888:	b087      	sub	sp, #28
 801a88a:	af00      	add	r7, sp, #0
 801a88c:	6078      	str	r0, [r7, #4]
 801a88e:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	69db      	ldr	r3, [r3, #28]
 801a894:	4618      	mov	r0, r3
 801a896:	f004 faca 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801a89a:	6178      	str	r0, [r7, #20]
 801a89c:	697b      	ldr	r3, [r7, #20]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d022      	beq.n	801a8e8 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801a8a2:	f107 030c 	add.w	r3, r7, #12
 801a8a6:	6979      	ldr	r1, [r7, #20]
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f004 fa04 	bl	801ecb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801a8ae:	f107 030c 	add.w	r3, r7, #12
 801a8b2:	6839      	ldr	r1, [r7, #0]
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	f7f2 f9b0 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801a8ba:	4603      	mov	r3, r0
 801a8bc:	461c      	mov	r4, r3
 801a8be:	f107 030c 	add.w	r3, r7, #12
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	f7f2 f99d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801a8c8:	2c00      	cmp	r4, #0
 801a8ca:	d008      	beq.n	801a8de <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801a8cc:	6979      	ldr	r1, [r7, #20]
 801a8ce:	6878      	ldr	r0, [r7, #4]
 801a8d0:	f000 fba4 	bl	801b01c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a8d4:	4603      	mov	r3, r0
 801a8d6:	2101      	movs	r1, #1
 801a8d8:	4618      	mov	r0, r3
 801a8da:	f000 fbc5 	bl	801b068 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801a8de:	6978      	ldr	r0, [r7, #20]
 801a8e0:	f004 f9ae 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801a8e4:	6178      	str	r0, [r7, #20]
 801a8e6:	e7d9      	b.n	801a89c <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801a8e8:	bf00      	nop
 801a8ea:	371c      	adds	r7, #28
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	bd90      	pop	{r4, r7, pc}

0801a8f0 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801a8f0:	b590      	push	{r4, r7, lr}
 801a8f2:	b087      	sub	sp, #28
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
 801a8f8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	6a1b      	ldr	r3, [r3, #32]
 801a8fe:	4618      	mov	r0, r3
 801a900:	f004 fa95 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801a904:	6178      	str	r0, [r7, #20]
 801a906:	697b      	ldr	r3, [r7, #20]
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d022      	beq.n	801a952 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801a90c:	f107 030c 	add.w	r3, r7, #12
 801a910:	6979      	ldr	r1, [r7, #20]
 801a912:	4618      	mov	r0, r3
 801a914:	f004 f9cf 	bl	801ecb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801a918:	f107 030c 	add.w	r3, r7, #12
 801a91c:	6839      	ldr	r1, [r7, #0]
 801a91e:	4618      	mov	r0, r3
 801a920:	f7f2 f97b 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801a924:	4603      	mov	r3, r0
 801a926:	461c      	mov	r4, r3
 801a928:	f107 030c 	add.w	r3, r7, #12
 801a92c:	4618      	mov	r0, r3
 801a92e:	f7f2 f968 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801a932:	2c00      	cmp	r4, #0
 801a934:	d008      	beq.n	801a948 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801a936:	6979      	ldr	r1, [r7, #20]
 801a938:	6878      	ldr	r0, [r7, #4]
 801a93a:	f000 fb6f 	bl	801b01c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a93e:	4603      	mov	r3, r0
 801a940:	2101      	movs	r1, #1
 801a942:	4618      	mov	r0, r3
 801a944:	f000 fb90 	bl	801b068 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801a948:	6978      	ldr	r0, [r7, #20]
 801a94a:	f004 f979 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801a94e:	6178      	str	r0, [r7, #20]
 801a950:	e7d9      	b.n	801a906 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801a952:	bf00      	nop
 801a954:	371c      	adds	r7, #28
 801a956:	46bd      	mov	sp, r7
 801a958:	bd90      	pop	{r4, r7, pc}
	...

0801a95c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b086      	sub	sp, #24
 801a960:	af00      	add	r7, sp, #0
 801a962:	60f8      	str	r0, [r7, #12]
 801a964:	60b9      	str	r1, [r7, #8]
 801a966:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a968:	68bb      	ldr	r3, [r7, #8]
 801a96a:	69db      	ldr	r3, [r3, #28]
 801a96c:	6879      	ldr	r1, [r7, #4]
 801a96e:	4618      	mov	r0, r3
 801a970:	f004 fa2e 	bl	801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a974:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801a976:	697b      	ldr	r3, [r7, #20]
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d005      	beq.n	801a988 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	6979      	ldr	r1, [r7, #20]
 801a980:	4618      	mov	r0, r3
 801a982:	f7ff fa0b 	bl	8019d9c <_Z10StringFromRK14MockNamedValue>
 801a986:	e003      	b.n	801a990 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801a988:	4903      	ldr	r1, [pc, #12]	; (801a998 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801a98a:	68f8      	ldr	r0, [r7, #12]
 801a98c:	f7f1 fd81 	bl	800c492 <_ZN12SimpleStringC1EPKc>
}
 801a990:	68f8      	ldr	r0, [r7, #12]
 801a992:	3718      	adds	r7, #24
 801a994:	46bd      	mov	sp, r7
 801a996:	bd80      	pop	{r7, pc}
 801a998:	08025998 	.word	0x08025998

0801a99c <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801a99c:	b590      	push	{r4, r7, lr}
 801a99e:	b087      	sub	sp, #28
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	6078      	str	r0, [r7, #4]
 801a9a4:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	69dc      	ldr	r4, [r3, #28]
 801a9aa:	683b      	ldr	r3, [r7, #0]
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	335c      	adds	r3, #92	; 0x5c
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	f107 020c 	add.w	r2, r7, #12
 801a9b6:	6839      	ldr	r1, [r7, #0]
 801a9b8:	4610      	mov	r0, r2
 801a9ba:	4798      	blx	r3
 801a9bc:	f107 030c 	add.w	r3, r7, #12
 801a9c0:	4619      	mov	r1, r3
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	f004 fa04 	bl	801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a9c8:	6178      	str	r0, [r7, #20]
 801a9ca:	f107 030c 	add.w	r3, r7, #12
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	f7f2 f917 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801a9d4:	697b      	ldr	r3, [r7, #20]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d00d      	beq.n	801a9f6 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801a9da:	697b      	ldr	r3, [r7, #20]
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	3350      	adds	r3, #80	; 0x50
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	6839      	ldr	r1, [r7, #0]
 801a9e4:	6978      	ldr	r0, [r7, #20]
 801a9e6:	4798      	blx	r3
 801a9e8:	4603      	mov	r3, r0
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	bf14      	ite	ne
 801a9ee:	2301      	movne	r3, #1
 801a9f0:	2300      	moveq	r3, #0
 801a9f2:	b2db      	uxtb	r3, r3
 801a9f4:	e006      	b.n	801aa04 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	7b1b      	ldrb	r3, [r3, #12]
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	bf14      	ite	ne
 801a9fe:	2301      	movne	r3, #1
 801aa00:	2300      	moveq	r3, #0
 801aa02:	b2db      	uxtb	r3, r3
}
 801aa04:	4618      	mov	r0, r3
 801aa06:	371c      	adds	r7, #28
 801aa08:	46bd      	mov	sp, r7
 801aa0a:	bd90      	pop	{r4, r7, pc}

0801aa0c <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801aa0c:	b590      	push	{r4, r7, lr}
 801aa0e:	b087      	sub	sp, #28
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	6078      	str	r0, [r7, #4]
 801aa14:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	6a1c      	ldr	r4, [r3, #32]
 801aa1a:	683b      	ldr	r3, [r7, #0]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	335c      	adds	r3, #92	; 0x5c
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	f107 020c 	add.w	r2, r7, #12
 801aa26:	6839      	ldr	r1, [r7, #0]
 801aa28:	4610      	mov	r0, r2
 801aa2a:	4798      	blx	r3
 801aa2c:	f107 030c 	add.w	r3, r7, #12
 801aa30:	4619      	mov	r1, r3
 801aa32:	4620      	mov	r0, r4
 801aa34:	f004 f9cc 	bl	801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801aa38:	6178      	str	r0, [r7, #20]
 801aa3a:	f107 030c 	add.w	r3, r7, #12
 801aa3e:	4618      	mov	r0, r3
 801aa40:	f7f2 f8df 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801aa44:	697b      	ldr	r3, [r7, #20]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d00d      	beq.n	801aa66 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801aa4a:	697b      	ldr	r3, [r7, #20]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	3354      	adds	r3, #84	; 0x54
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	6839      	ldr	r1, [r7, #0]
 801aa54:	6978      	ldr	r0, [r7, #20]
 801aa56:	4798      	blx	r3
 801aa58:	4603      	mov	r3, r0
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	bf14      	ite	ne
 801aa5e:	2301      	movne	r3, #1
 801aa60:	2300      	moveq	r3, #0
 801aa62:	b2db      	uxtb	r3, r3
 801aa64:	e006      	b.n	801aa74 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	7b1b      	ldrb	r3, [r3, #12]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	bf14      	ite	ne
 801aa6e:	2301      	movne	r3, #1
 801aa70:	2300      	moveq	r3, #0
 801aa72:	b2db      	uxtb	r3, r3
}
 801aa74:	4618      	mov	r0, r3
 801aa76:	371c      	adds	r7, #28
 801aa78:	46bd      	mov	sp, r7
 801aa7a:	bd90      	pop	{r4, r7, pc}

0801aa7c <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801aa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa7e:	b0a1      	sub	sp, #132	; 0x84
 801aa80:	af02      	add	r7, sp, #8
 801aa82:	6078      	str	r0, [r7, #4]
 801aa84:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801aa86:	49bc      	ldr	r1, [pc, #752]	; (801ad78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801aa88:	6878      	ldr	r0, [r7, #4]
 801aa8a:	f7f1 fd02 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801aa8e:	683b      	ldr	r3, [r7, #0]
 801aa90:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d012      	beq.n	801aabe <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801aa98:	683b      	ldr	r3, [r7, #0]
 801aa9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801aa9c:	f107 030c 	add.w	r3, r7, #12
 801aaa0:	49b6      	ldr	r1, [pc, #728]	; (801ad7c <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801aaa2:	4618      	mov	r0, r3
 801aaa4:	f7f2 fdb4 	bl	800d610 <_Z16StringFromFormatPKcz>
 801aaa8:	f107 030c 	add.w	r3, r7, #12
 801aaac:	4619      	mov	r1, r3
 801aaae:	6878      	ldr	r0, [r7, #4]
 801aab0:	f7f1 fd5b 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801aab4:	f107 030c 	add.w	r3, r7, #12
 801aab8:	4618      	mov	r0, r3
 801aaba:	f7f2 f8a2 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    str += getName();
 801aabe:	f107 0314 	add.w	r3, r7, #20
 801aac2:	6839      	ldr	r1, [r7, #0]
 801aac4:	4618      	mov	r0, r3
 801aac6:	f7ff f989 	bl	8019ddc <_ZNK23MockCheckedExpectedCall7getNameEv>
 801aaca:	f107 0314 	add.w	r3, r7, #20
 801aace:	4619      	mov	r1, r3
 801aad0:	6878      	ldr	r0, [r7, #4]
 801aad2:	f7f2 f913 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801aad6:	f107 0314 	add.w	r3, r7, #20
 801aada:	4618      	mov	r0, r3
 801aadc:	f7f2 f891 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801aae0:	49a7      	ldr	r1, [pc, #668]	; (801ad80 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801aae2:	6878      	ldr	r0, [r7, #4]
 801aae4:	f7f2 f91c 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801aae8:	683b      	ldr	r3, [r7, #0]
 801aaea:	691b      	ldr	r3, [r3, #16]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d02d      	beq.n	801ab4c <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801aaf0:	683b      	ldr	r3, [r7, #0]
 801aaf2:	691a      	ldr	r2, [r3, #16]
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	695b      	ldr	r3, [r3, #20]
 801aaf8:	429a      	cmp	r2, r3
 801aafa:	d113      	bne.n	801ab24 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801aafc:	683b      	ldr	r3, [r7, #0]
 801aafe:	691a      	ldr	r2, [r3, #16]
 801ab00:	f107 031c 	add.w	r3, r7, #28
 801ab04:	499f      	ldr	r1, [pc, #636]	; (801ad84 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801ab06:	4618      	mov	r0, r3
 801ab08:	f7f2 fd82 	bl	800d610 <_Z16StringFromFormatPKcz>
 801ab0c:	f107 031c 	add.w	r3, r7, #28
 801ab10:	4619      	mov	r1, r3
 801ab12:	6878      	ldr	r0, [r7, #4]
 801ab14:	f7f2 f8f2 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801ab18:	f107 031c 	add.w	r3, r7, #28
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	f7f2 f870 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ab22:	e013      	b.n	801ab4c <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801ab24:	683b      	ldr	r3, [r7, #0]
 801ab26:	691a      	ldr	r2, [r3, #16]
 801ab28:	683b      	ldr	r3, [r7, #0]
 801ab2a:	695b      	ldr	r3, [r3, #20]
 801ab2c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801ab30:	4995      	ldr	r1, [pc, #596]	; (801ad88 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801ab32:	f7f2 fd6d 	bl	800d610 <_Z16StringFromFormatPKcz>
 801ab36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ab3a:	4619      	mov	r1, r3
 801ab3c:	6878      	ldr	r0, [r7, #4]
 801ab3e:	f7f2 f8dd 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801ab42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ab46:	4618      	mov	r0, r3
 801ab48:	f7f2 f85b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801ab4c:	683b      	ldr	r3, [r7, #0]
 801ab4e:	69db      	ldr	r3, [r3, #28]
 801ab50:	4618      	mov	r0, r3
 801ab52:	f004 f96c 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801ab56:	4603      	mov	r3, r0
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d109      	bne.n	801ab70 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801ab5c:	683b      	ldr	r3, [r7, #0]
 801ab5e:	6a1b      	ldr	r3, [r3, #32]
 801ab60:	4618      	mov	r0, r3
 801ab62:	f004 f964 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801ab66:	4603      	mov	r3, r0
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d101      	bne.n	801ab70 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801ab6c:	2301      	movs	r3, #1
 801ab6e:	e000      	b.n	801ab72 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801ab70:	2300      	movs	r3, #0
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d00b      	beq.n	801ab8e <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801ab76:	683b      	ldr	r3, [r7, #0]
 801ab78:	7b1b      	ldrb	r3, [r3, #12]
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d001      	beq.n	801ab82 <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801ab7e:	4b83      	ldr	r3, [pc, #524]	; (801ad8c <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801ab80:	e000      	b.n	801ab84 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801ab82:	4b83      	ldr	r3, [pc, #524]	; (801ad90 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801ab84:	4619      	mov	r1, r3
 801ab86:	6878      	ldr	r0, [r7, #4]
 801ab88:	f7f2 f8ca 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
 801ab8c:	e0e3      	b.n	801ad56 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801ab8e:	683b      	ldr	r3, [r7, #0]
 801ab90:	69db      	ldr	r3, [r3, #28]
 801ab92:	4618      	mov	r0, r3
 801ab94:	f004 f94b 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801ab98:	6778      	str	r0, [r7, #116]	; 0x74
 801ab9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d069      	beq.n	801ac74 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801aba0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801aba4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801aba6:	4618      	mov	r0, r3
 801aba8:	f004 f898 	bl	801ecdc <_ZNK22MockNamedValueListNode7getTypeEv>
 801abac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801abb0:	4618      	mov	r0, r3
 801abb2:	f7f1 fff9 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801abb6:	4605      	mov	r5, r0
 801abb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801abbc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801abbe:	4618      	mov	r0, r3
 801abc0:	f004 f879 	bl	801ecb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801abc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801abc8:	4618      	mov	r0, r3
 801abca:	f7f1 ffed 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801abce:	4606      	mov	r6, r0
 801abd0:	683b      	ldr	r3, [r7, #0]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	33a4      	adds	r3, #164	; 0xa4
 801abd6:	681c      	ldr	r4, [r3, #0]
 801abd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801abdc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801abde:	4618      	mov	r0, r3
 801abe0:	f004 f869 	bl	801ecb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801abe4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801abe8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801abec:	6839      	ldr	r1, [r7, #0]
 801abee:	4618      	mov	r0, r3
 801abf0:	47a0      	blx	r4
 801abf2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801abf6:	4618      	mov	r0, r3
 801abf8:	f7f1 ffd6 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801abfc:	4603      	mov	r3, r0
 801abfe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801ac02:	9300      	str	r3, [sp, #0]
 801ac04:	4633      	mov	r3, r6
 801ac06:	462a      	mov	r2, r5
 801ac08:	4962      	ldr	r1, [pc, #392]	; (801ad94 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801ac0a:	f7f2 fd01 	bl	800d610 <_Z16StringFromFormatPKcz>
 801ac0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ac12:	4619      	mov	r1, r3
 801ac14:	6878      	ldr	r0, [r7, #4]
 801ac16:	f7f2 f871 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801ac1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ac1e:	4618      	mov	r0, r3
 801ac20:	f7f1 ffef 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ac24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ac28:	4618      	mov	r0, r3
 801ac2a:	f7f1 ffea 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ac2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac32:	4618      	mov	r0, r3
 801ac34:	f7f1 ffe5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ac38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	f7f1 ffe0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ac42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ac46:	4618      	mov	r0, r3
 801ac48:	f7f1 ffdb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801ac4c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ac4e:	f003 fff7 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801ac52:	4603      	mov	r3, r0
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	bf14      	ite	ne
 801ac58:	2301      	movne	r3, #1
 801ac5a:	2300      	moveq	r3, #0
 801ac5c:	b2db      	uxtb	r3, r3
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d003      	beq.n	801ac6a <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801ac62:	494d      	ldr	r1, [pc, #308]	; (801ad98 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801ac64:	6878      	ldr	r0, [r7, #4]
 801ac66:	f7f2 f85b 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801ac6a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ac6c:	f003 ffe8 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801ac70:	6778      	str	r0, [r7, #116]	; 0x74
 801ac72:	e792      	b.n	801ab9a <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801ac74:	683b      	ldr	r3, [r7, #0]
 801ac76:	69db      	ldr	r3, [r3, #28]
 801ac78:	4618      	mov	r0, r3
 801ac7a:	f004 f8d8 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d009      	beq.n	801ac98 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801ac84:	683b      	ldr	r3, [r7, #0]
 801ac86:	6a1b      	ldr	r3, [r3, #32]
 801ac88:	4618      	mov	r0, r3
 801ac8a:	f004 f8d0 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801ac8e:	4603      	mov	r3, r0
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d001      	beq.n	801ac98 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801ac94:	2301      	movs	r3, #1
 801ac96:	e000      	b.n	801ac9a <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801ac98:	2300      	movs	r3, #0
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d003      	beq.n	801aca6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801ac9e:	493e      	ldr	r1, [pc, #248]	; (801ad98 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801aca0:	6878      	ldr	r0, [r7, #4]
 801aca2:	f7f2 f83d 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801aca6:	683b      	ldr	r3, [r7, #0]
 801aca8:	6a1b      	ldr	r3, [r3, #32]
 801acaa:	4618      	mov	r0, r3
 801acac:	f004 f8bf 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801acb0:	6778      	str	r0, [r7, #116]	; 0x74
 801acb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d046      	beq.n	801ad46 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801acb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801acbc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801acbe:	4618      	mov	r0, r3
 801acc0:	f004 f80c 	bl	801ecdc <_ZNK22MockNamedValueListNode7getTypeEv>
 801acc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801acc8:	4618      	mov	r0, r3
 801acca:	f7f1 ff6d 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801acce:	4604      	mov	r4, r0
 801acd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801acd4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801acd6:	4618      	mov	r0, r3
 801acd8:	f003 ffed 	bl	801ecb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801acdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801ace0:	4618      	mov	r0, r3
 801ace2:	f7f1 ff61 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801ace6:	4603      	mov	r3, r0
 801ace8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801acec:	4622      	mov	r2, r4
 801acee:	492b      	ldr	r1, [pc, #172]	; (801ad9c <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801acf0:	f7f2 fc8e 	bl	800d610 <_Z16StringFromFormatPKcz>
 801acf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801acf8:	4619      	mov	r1, r3
 801acfa:	6878      	ldr	r0, [r7, #4]
 801acfc:	f7f1 fffe 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801ad00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ad04:	4618      	mov	r0, r3
 801ad06:	f7f1 ff7c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ad0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801ad0e:	4618      	mov	r0, r3
 801ad10:	f7f1 ff77 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ad14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801ad18:	4618      	mov	r0, r3
 801ad1a:	f7f1 ff72 	bl	800cc02 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801ad1e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ad20:	f003 ff8e 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801ad24:	4603      	mov	r3, r0
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	bf14      	ite	ne
 801ad2a:	2301      	movne	r3, #1
 801ad2c:	2300      	moveq	r3, #0
 801ad2e:	b2db      	uxtb	r3, r3
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d003      	beq.n	801ad3c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801ad34:	4918      	ldr	r1, [pc, #96]	; (801ad98 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801ad36:	6878      	ldr	r0, [r7, #4]
 801ad38:	f7f1 fff2 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801ad3c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ad3e:	f003 ff7f 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801ad42:	6778      	str	r0, [r7, #116]	; 0x74
 801ad44:	e7b5      	b.n	801acb2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	7b1b      	ldrb	r3, [r3, #12]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d003      	beq.n	801ad56 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801ad4e:	4914      	ldr	r1, [pc, #80]	; (801ada0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801ad50:	6878      	ldr	r0, [r7, #4]
 801ad52:	f7f1 ffe5 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801ad5a:	683b      	ldr	r3, [r7, #0]
 801ad5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801ad5e:	2b01      	cmp	r3, #1
 801ad60:	d101      	bne.n	801ad66 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801ad62:	4c05      	ldr	r4, [pc, #20]	; (801ad78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801ad64:	e000      	b.n	801ad68 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801ad66:	4c0f      	ldr	r4, [pc, #60]	; (801ada4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801ad68:	683b      	ldr	r3, [r7, #0]
 801ad6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801ad6c:	683a      	ldr	r2, [r7, #0]
 801ad6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801ad70:	2a01      	cmp	r2, #1
 801ad72:	d119      	bne.n	801ada8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801ad74:	4a00      	ldr	r2, [pc, #0]	; (801ad78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801ad76:	e018      	b.n	801adaa <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801ad78:	0802592c 	.word	0x0802592c
 801ad7c:	080259a0 	.word	0x080259a0
 801ad80:	080259b8 	.word	0x080259b8
 801ad84:	080259c0 	.word	0x080259c0
 801ad88:	080259e0 	.word	0x080259e0
 801ad8c:	08025a04 	.word	0x08025a04
 801ad90:	08025a1c 	.word	0x08025a1c
 801ad94:	08025a2c 	.word	0x08025a2c
 801ad98:	08025a38 	.word	0x08025a38
 801ad9c:	08025a3c 	.word	0x08025a3c
 801ada0:	08025a4c 	.word	0x08025a4c
 801ada4:	08025a6c 	.word	0x08025a6c
 801ada8:	4a0c      	ldr	r2, [pc, #48]	; (801addc <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801adaa:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801adae:	9201      	str	r2, [sp, #4]
 801adb0:	9300      	str	r3, [sp, #0]
 801adb2:	4623      	mov	r3, r4
 801adb4:	460a      	mov	r2, r1
 801adb6:	490a      	ldr	r1, [pc, #40]	; (801ade0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801adb8:	f7f2 fc2a 	bl	800d610 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801adbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801adc0:	4619      	mov	r1, r3
 801adc2:	6878      	ldr	r0, [r7, #4]
 801adc4:	f7f1 ff9a 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801adc8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801adcc:	4618      	mov	r0, r3
 801adce:	f7f1 ff18 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    return str;
 801add2:	bf00      	nop
}
 801add4:	6878      	ldr	r0, [r7, #4]
 801add6:	377c      	adds	r7, #124	; 0x7c
 801add8:	46bd      	mov	sp, r7
 801adda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801addc:	08025a6c 	.word	0x08025a6c
 801ade0:	08025a70 	.word	0x08025a70

0801ade4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801ade4:	b590      	push	{r4, r7, lr}
 801ade6:	b095      	sub	sp, #84	; 0x54
 801ade8:	af00      	add	r7, sp, #0
 801adea:	6078      	str	r0, [r7, #4]
 801adec:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801adee:	496c      	ldr	r1, [pc, #432]	; (801afa0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801adf0:	6878      	ldr	r0, [r7, #4]
 801adf2:	f7f1 fb4e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801adf6:	683b      	ldr	r3, [r7, #0]
 801adf8:	69db      	ldr	r3, [r3, #28]
 801adfa:	4618      	mov	r0, r3
 801adfc:	f004 f817 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801ae00:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ae02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d05e      	beq.n	801aec6 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801ae08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ae0a:	6838      	ldr	r0, [r7, #0]
 801ae0c:	f000 f906 	bl	801b01c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801ae10:	4603      	mov	r3, r0
 801ae12:	4618      	mov	r0, r3
 801ae14:	f000 f938 	bl	801b088 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801ae18:	4603      	mov	r3, r0
 801ae1a:	f083 0301 	eor.w	r3, r3, #1
 801ae1e:	b2db      	uxtb	r3, r3
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d04b      	beq.n	801aebc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801ae24:	f107 030c 	add.w	r3, r7, #12
 801ae28:	495d      	ldr	r1, [pc, #372]	; (801afa0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	f7f1 fb31 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801ae30:	f107 030c 	add.w	r3, r7, #12
 801ae34:	4619      	mov	r1, r3
 801ae36:	6878      	ldr	r0, [r7, #4]
 801ae38:	f7f1 ff34 	bl	800cca4 <_ZneRK12SimpleStringS1_>
 801ae3c:	4603      	mov	r3, r0
 801ae3e:	461c      	mov	r4, r3
 801ae40:	f107 030c 	add.w	r3, r7, #12
 801ae44:	4618      	mov	r0, r3
 801ae46:	f7f1 fedc 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ae4a:	2c00      	cmp	r4, #0
 801ae4c:	d003      	beq.n	801ae56 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801ae4e:	4955      	ldr	r1, [pc, #340]	; (801afa4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801ae50:	6878      	ldr	r0, [r7, #4]
 801ae52:	f7f1 ff65 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801ae56:	f107 031c 	add.w	r3, r7, #28
 801ae5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ae5c:	4618      	mov	r0, r3
 801ae5e:	f003 ff3d 	bl	801ecdc <_ZNK22MockNamedValueListNode7getTypeEv>
 801ae62:	f107 031c 	add.w	r3, r7, #28
 801ae66:	4618      	mov	r0, r3
 801ae68:	f7f1 fe9e 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801ae6c:	4604      	mov	r4, r0
 801ae6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ae72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ae74:	4618      	mov	r0, r3
 801ae76:	f003 ff1e 	bl	801ecb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801ae7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f7f1 fe92 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801ae84:	4603      	mov	r3, r0
 801ae86:	f107 0014 	add.w	r0, r7, #20
 801ae8a:	4622      	mov	r2, r4
 801ae8c:	4946      	ldr	r1, [pc, #280]	; (801afa8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801ae8e:	f7f2 fbbf 	bl	800d610 <_Z16StringFromFormatPKcz>
 801ae92:	f107 0314 	add.w	r3, r7, #20
 801ae96:	4619      	mov	r1, r3
 801ae98:	6878      	ldr	r0, [r7, #4]
 801ae9a:	f7f1 ff2f 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801ae9e:	f107 0314 	add.w	r3, r7, #20
 801aea2:	4618      	mov	r0, r3
 801aea4:	f7f1 fead 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801aea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aeac:	4618      	mov	r0, r3
 801aeae:	f7f1 fea8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801aeb2:	f107 031c 	add.w	r3, r7, #28
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	f7f1 fea3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801aebc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801aebe:	f003 febf 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801aec2:	64f8      	str	r0, [r7, #76]	; 0x4c
 801aec4:	e79d      	b.n	801ae02 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801aec6:	683b      	ldr	r3, [r7, #0]
 801aec8:	6a1b      	ldr	r3, [r3, #32]
 801aeca:	4618      	mov	r0, r3
 801aecc:	f003 ffaf 	bl	801ee2e <_ZN18MockNamedValueList5beginEv>
 801aed0:	64f8      	str	r0, [r7, #76]	; 0x4c
 801aed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d05e      	beq.n	801af96 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801aed8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801aeda:	6838      	ldr	r0, [r7, #0]
 801aedc:	f000 f89e 	bl	801b01c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801aee0:	4603      	mov	r3, r0
 801aee2:	4618      	mov	r0, r3
 801aee4:	f000 f8d0 	bl	801b088 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801aee8:	4603      	mov	r3, r0
 801aeea:	f083 0301 	eor.w	r3, r3, #1
 801aeee:	b2db      	uxtb	r3, r3
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d04b      	beq.n	801af8c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801aef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aef8:	4929      	ldr	r1, [pc, #164]	; (801afa0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801aefa:	4618      	mov	r0, r3
 801aefc:	f7f1 fac9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801af00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801af04:	4619      	mov	r1, r3
 801af06:	6878      	ldr	r0, [r7, #4]
 801af08:	f7f1 fecc 	bl	800cca4 <_ZneRK12SimpleStringS1_>
 801af0c:	4603      	mov	r3, r0
 801af0e:	461c      	mov	r4, r3
 801af10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801af14:	4618      	mov	r0, r3
 801af16:	f7f1 fe74 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801af1a:	2c00      	cmp	r4, #0
 801af1c:	d003      	beq.n	801af26 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801af1e:	4921      	ldr	r1, [pc, #132]	; (801afa4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801af20:	6878      	ldr	r0, [r7, #4]
 801af22:	f7f1 fefd 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801af26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801af2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801af2c:	4618      	mov	r0, r3
 801af2e:	f003 fed5 	bl	801ecdc <_ZNK22MockNamedValueListNode7getTypeEv>
 801af32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801af36:	4618      	mov	r0, r3
 801af38:	f7f1 fe36 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801af3c:	4604      	mov	r4, r0
 801af3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801af42:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801af44:	4618      	mov	r0, r3
 801af46:	f003 feb6 	bl	801ecb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801af4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801af4e:	4618      	mov	r0, r3
 801af50:	f7f1 fe2a 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801af54:	4603      	mov	r3, r0
 801af56:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801af5a:	4622      	mov	r2, r4
 801af5c:	4912      	ldr	r1, [pc, #72]	; (801afa8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801af5e:	f7f2 fb57 	bl	800d610 <_Z16StringFromFormatPKcz>
 801af62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801af66:	4619      	mov	r1, r3
 801af68:	6878      	ldr	r0, [r7, #4]
 801af6a:	f7f1 fec7 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801af6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801af72:	4618      	mov	r0, r3
 801af74:	f7f1 fe45 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801af78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801af7c:	4618      	mov	r0, r3
 801af7e:	f7f1 fe40 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801af82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801af86:	4618      	mov	r0, r3
 801af88:	f7f1 fe3b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801af8c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801af8e:	f003 fe57 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801af92:	64f8      	str	r0, [r7, #76]	; 0x4c
 801af94:	e79d      	b.n	801aed2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801af96:	bf00      	nop
}
 801af98:	6878      	ldr	r0, [r7, #4]
 801af9a:	3754      	adds	r7, #84	; 0x54
 801af9c:	46bd      	mov	sp, r7
 801af9e:	bd90      	pop	{r4, r7, pc}
 801afa0:	0802592c 	.word	0x0802592c
 801afa4:	08025a38 	.word	0x08025a38
 801afa8:	08025a98 	.word	0x08025a98

0801afac <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801afac:	b590      	push	{r4, r7, lr}
 801afae:	b085      	sub	sp, #20
 801afb0:	af00      	add	r7, sp, #0
 801afb2:	6078      	str	r0, [r7, #4]
 801afb4:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801afb6:	f107 0308 	add.w	r3, r7, #8
 801afba:	6879      	ldr	r1, [r7, #4]
 801afbc:	4618      	mov	r0, r3
 801afbe:	f7fe ff0d 	bl	8019ddc <_ZNK23MockCheckedExpectedCall7getNameEv>
 801afc2:	f107 0308 	add.w	r3, r7, #8
 801afc6:	4619      	mov	r1, r3
 801afc8:	6838      	ldr	r0, [r7, #0]
 801afca:	f7f1 fe26 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801afce:	4603      	mov	r3, r0
 801afd0:	461c      	mov	r4, r3
 801afd2:	f107 0308 	add.w	r3, r7, #8
 801afd6:	4618      	mov	r0, r3
 801afd8:	f7f1 fe13 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801afdc:	4623      	mov	r3, r4
}
 801afde:	4618      	mov	r0, r3
 801afe0:	3714      	adds	r7, #20
 801afe2:	46bd      	mov	sp, r7
 801afe4:	bd90      	pop	{r4, r7, pc}

0801afe6 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801afe6:	b480      	push	{r7}
 801afe8:	b083      	sub	sp, #12
 801afea:	af00      	add	r7, sp, #0
 801afec:	6078      	str	r0, [r7, #4]
 801afee:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801aff6:	f083 0301 	eor.w	r3, r3, #1
 801affa:	b2db      	uxtb	r3, r3
 801affc:	2b00      	cmp	r3, #0
 801affe:	d104      	bne.n	801b00a <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b004:	683a      	ldr	r2, [r7, #0]
 801b006:	429a      	cmp	r2, r3
 801b008:	d101      	bne.n	801b00e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801b00a:	2301      	movs	r3, #1
 801b00c:	e000      	b.n	801b010 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801b00e:	2300      	movs	r3, #0
}
 801b010:	4618      	mov	r0, r3
 801b012:	370c      	adds	r7, #12
 801b014:	46bd      	mov	sp, r7
 801b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b01a:	4770      	bx	lr

0801b01c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b082      	sub	sp, #8
 801b020:	af00      	add	r7, sp, #0
 801b022:	6078      	str	r0, [r7, #4]
 801b024:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801b026:	6838      	ldr	r0, [r7, #0]
 801b028:	f003 fe16 	bl	801ec58 <_ZN22MockNamedValueListNode4itemEv>
 801b02c:	4603      	mov	r3, r0
}
 801b02e:	4618      	mov	r0, r3
 801b030:	3708      	adds	r7, #8
 801b032:	46bd      	mov	sp, r7
 801b034:	bd80      	pop	{r7, pc}
	...

0801b038 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801b038:	b580      	push	{r7, lr}
 801b03a:	b082      	sub	sp, #8
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	6078      	str	r0, [r7, #4]
 801b040:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	6839      	ldr	r1, [r7, #0]
 801b046:	4618      	mov	r0, r3
 801b048:	f001 ff48 	bl	801cedc <_ZN14MockNamedValueC1ERK12SimpleString>
 801b04c:	4a05      	ldr	r2, [pc, #20]	; (801b064 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	601a      	str	r2, [r3, #0]
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	2200      	movs	r2, #0
 801b056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	4618      	mov	r0, r3
 801b05e:	3708      	adds	r7, #8
 801b060:	46bd      	mov	sp, r7
 801b062:	bd80      	pop	{r7, pc}
 801b064:	08028a58 	.word	0x08028a58

0801b068 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801b068:	b480      	push	{r7}
 801b06a:	b083      	sub	sp, #12
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	6078      	str	r0, [r7, #4]
 801b070:	460b      	mov	r3, r1
 801b072:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	78fa      	ldrb	r2, [r7, #3]
 801b078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801b07c:	bf00      	nop
 801b07e:	370c      	adds	r7, #12
 801b080:	46bd      	mov	sp, r7
 801b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b086:	4770      	bx	lr

0801b088 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801b088:	b480      	push	{r7}
 801b08a:	b083      	sub	sp, #12
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801b096:	4618      	mov	r0, r3
 801b098:	370c      	adds	r7, #12
 801b09a:	46bd      	mov	sp, r7
 801b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a0:	4770      	bx	lr
	...

0801b0a4 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801b0a4:	b580      	push	{r7, lr}
 801b0a6:	b082      	sub	sp, #8
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	6078      	str	r0, [r7, #4]
 801b0ac:	460b      	mov	r3, r1
 801b0ae:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	3328      	adds	r3, #40	; 0x28
 801b0b4:	4907      	ldr	r1, [pc, #28]	; (801b0d4 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801b0b6:	4618      	mov	r0, r3
 801b0b8:	f002 f9b2 	bl	801d420 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	3328      	adds	r3, #40	; 0x28
 801b0c0:	78fa      	ldrb	r2, [r7, #3]
 801b0c2:	4611      	mov	r1, r2
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	f001 ff5b 	bl	801cf80 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801b0ca:	687b      	ldr	r3, [r7, #4]
}
 801b0cc:	4618      	mov	r0, r3
 801b0ce:	3708      	adds	r7, #8
 801b0d0:	46bd      	mov	sp, r7
 801b0d2:	bd80      	pop	{r7, pc}
 801b0d4:	08025aa0 	.word	0x08025aa0

0801b0d8 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801b0d8:	b580      	push	{r7, lr}
 801b0da:	b082      	sub	sp, #8
 801b0dc:	af00      	add	r7, sp, #0
 801b0de:	6078      	str	r0, [r7, #4]
 801b0e0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	3328      	adds	r3, #40	; 0x28
 801b0e6:	4907      	ldr	r1, [pc, #28]	; (801b104 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801b0e8:	4618      	mov	r0, r3
 801b0ea:	f002 f999 	bl	801d420 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	3328      	adds	r3, #40	; 0x28
 801b0f2:	6839      	ldr	r1, [r7, #0]
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	f001 ff67 	bl	801cfc8 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801b0fa:	687b      	ldr	r3, [r7, #4]
}
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	3708      	adds	r7, #8
 801b100:	46bd      	mov	sp, r7
 801b102:	bd80      	pop	{r7, pc}
 801b104:	08025aa0 	.word	0x08025aa0

0801b108 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b082      	sub	sp, #8
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
 801b110:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	3328      	adds	r3, #40	; 0x28
 801b116:	4907      	ldr	r1, [pc, #28]	; (801b134 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801b118:	4618      	mov	r0, r3
 801b11a:	f002 f981 	bl	801d420 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	3328      	adds	r3, #40	; 0x28
 801b122:	6839      	ldr	r1, [r7, #0]
 801b124:	4618      	mov	r0, r3
 801b126:	f001 ff71 	bl	801d00c <_ZN14MockNamedValue8setValueEi>
    return *this;
 801b12a:	687b      	ldr	r3, [r7, #4]
}
 801b12c:	4618      	mov	r0, r3
 801b12e:	3708      	adds	r7, #8
 801b130:	46bd      	mov	sp, r7
 801b132:	bd80      	pop	{r7, pc}
 801b134:	08025aa0 	.word	0x08025aa0

0801b138 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801b138:	b580      	push	{r7, lr}
 801b13a:	b082      	sub	sp, #8
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
 801b140:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	3328      	adds	r3, #40	; 0x28
 801b146:	4907      	ldr	r1, [pc, #28]	; (801b164 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801b148:	4618      	mov	r0, r3
 801b14a:	f002 f969 	bl	801d420 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	3328      	adds	r3, #40	; 0x28
 801b152:	6839      	ldr	r1, [r7, #0]
 801b154:	4618      	mov	r0, r3
 801b156:	f001 ff7b 	bl	801d050 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801b15a:	687b      	ldr	r3, [r7, #4]
}
 801b15c:	4618      	mov	r0, r3
 801b15e:	3708      	adds	r7, #8
 801b160:	46bd      	mov	sp, r7
 801b162:	bd80      	pop	{r7, pc}
 801b164:	08025aa0 	.word	0x08025aa0

0801b168 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801b168:	b580      	push	{r7, lr}
 801b16a:	b082      	sub	sp, #8
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	6078      	str	r0, [r7, #4]
 801b170:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	3328      	adds	r3, #40	; 0x28
 801b176:	4907      	ldr	r1, [pc, #28]	; (801b194 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801b178:	4618      	mov	r0, r3
 801b17a:	f002 f951 	bl	801d420 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	3328      	adds	r3, #40	; 0x28
 801b182:	6839      	ldr	r1, [r7, #0]
 801b184:	4618      	mov	r0, r3
 801b186:	f001 ff85 	bl	801d094 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801b18a:	687b      	ldr	r3, [r7, #4]
}
 801b18c:	4618      	mov	r0, r3
 801b18e:	3708      	adds	r7, #8
 801b190:	46bd      	mov	sp, r7
 801b192:	bd80      	pop	{r7, pc}
 801b194:	08025aa0 	.word	0x08025aa0

0801b198 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801b198:	b5b0      	push	{r4, r5, r7, lr}
 801b19a:	b086      	sub	sp, #24
 801b19c:	af02      	add	r7, sp, #8
 801b19e:	60f8      	str	r0, [r7, #12]
 801b1a0:	1d3b      	adds	r3, r7, #4
 801b1a2:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801b1a6:	f7f8 fd57 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801b1aa:	4604      	mov	r4, r0
 801b1ac:	6823      	ldr	r3, [r4, #0]
 801b1ae:	3368      	adds	r3, #104	; 0x68
 801b1b0:	681d      	ldr	r5, [r3, #0]
 801b1b2:	f7f8 fd61 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b1b6:	4603      	mov	r3, r0
 801b1b8:	9300      	str	r3, [sp, #0]
 801b1ba:	f240 2319 	movw	r3, #537	; 0x219
 801b1be:	4a04      	ldr	r2, [pc, #16]	; (801b1d0 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801b1c0:	4904      	ldr	r1, [pc, #16]	; (801b1d4 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801b1c2:	4620      	mov	r0, r4
 801b1c4:	47a8      	blx	r5
    return *this;
 801b1c6:	68fb      	ldr	r3, [r7, #12]
}
 801b1c8:	4618      	mov	r0, r3
 801b1ca:	3710      	adds	r7, #16
 801b1cc:	46bd      	mov	sp, r7
 801b1ce:	bdb0      	pop	{r4, r5, r7, pc}
 801b1d0:	08025930 	.word	0x08025930
 801b1d4:	0802594c 	.word	0x0802594c

0801b1d8 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801b1d8:	b5b0      	push	{r4, r5, r7, lr}
 801b1da:	b086      	sub	sp, #24
 801b1dc:	af02      	add	r7, sp, #8
 801b1de:	60f8      	str	r0, [r7, #12]
 801b1e0:	1d3b      	adds	r3, r7, #4
 801b1e2:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801b1e6:	f7f8 fd37 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801b1ea:	4604      	mov	r4, r0
 801b1ec:	6823      	ldr	r3, [r4, #0]
 801b1ee:	3368      	adds	r3, #104	; 0x68
 801b1f0:	681d      	ldr	r5, [r3, #0]
 801b1f2:	f7f8 fd41 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	9300      	str	r3, [sp, #0]
 801b1fa:	f240 231f 	movw	r3, #543	; 0x21f
 801b1fe:	4a04      	ldr	r2, [pc, #16]	; (801b210 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801b200:	4904      	ldr	r1, [pc, #16]	; (801b214 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801b202:	4620      	mov	r0, r4
 801b204:	47a8      	blx	r5
    return *this;
 801b206:	68fb      	ldr	r3, [r7, #12]
}
 801b208:	4618      	mov	r0, r3
 801b20a:	3710      	adds	r7, #16
 801b20c:	46bd      	mov	sp, r7
 801b20e:	bdb0      	pop	{r4, r5, r7, pc}
 801b210:	08025930 	.word	0x08025930
 801b214:	0802596c 	.word	0x0802596c

0801b218 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b082      	sub	sp, #8
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	6078      	str	r0, [r7, #4]
 801b220:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	3328      	adds	r3, #40	; 0x28
 801b226:	4907      	ldr	r1, [pc, #28]	; (801b244 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801b228:	4618      	mov	r0, r3
 801b22a:	f002 f8f9 	bl	801d420 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	3328      	adds	r3, #40	; 0x28
 801b232:	6839      	ldr	r1, [r7, #0]
 801b234:	4618      	mov	r0, r3
 801b236:	f002 f835 	bl	801d2a4 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801b23a:	687b      	ldr	r3, [r7, #4]
}
 801b23c:	4618      	mov	r0, r3
 801b23e:	3708      	adds	r7, #8
 801b240:	46bd      	mov	sp, r7
 801b242:	bd80      	pop	{r7, pc}
 801b244:	08025aa0 	.word	0x08025aa0

0801b248 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801b248:	b580      	push	{r7, lr}
 801b24a:	b084      	sub	sp, #16
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	60f8      	str	r0, [r7, #12]
 801b250:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	3328      	adds	r3, #40	; 0x28
 801b258:	4907      	ldr	r1, [pc, #28]	; (801b278 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801b25a:	4618      	mov	r0, r3
 801b25c:	f002 f8e0 	bl	801d420 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b260:	68fb      	ldr	r3, [r7, #12]
 801b262:	3328      	adds	r3, #40	; 0x28
 801b264:	ed97 0b00 	vldr	d0, [r7]
 801b268:	4618      	mov	r0, r3
 801b26a:	f001 ff71 	bl	801d150 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801b26e:	68fb      	ldr	r3, [r7, #12]
}
 801b270:	4618      	mov	r0, r3
 801b272:	3710      	adds	r7, #16
 801b274:	46bd      	mov	sp, r7
 801b276:	bd80      	pop	{r7, pc}
 801b278:	08025aa0 	.word	0x08025aa0

0801b27c <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b082      	sub	sp, #8
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
 801b284:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	3328      	adds	r3, #40	; 0x28
 801b28a:	4907      	ldr	r1, [pc, #28]	; (801b2a8 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801b28c:	4618      	mov	r0, r3
 801b28e:	f002 f8c7 	bl	801d420 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	3328      	adds	r3, #40	; 0x28
 801b296:	6839      	ldr	r1, [r7, #0]
 801b298:	4618      	mov	r0, r3
 801b29a:	f001 ff9d 	bl	801d1d8 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801b29e:	687b      	ldr	r3, [r7, #4]
}
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	3708      	adds	r7, #8
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	bd80      	pop	{r7, pc}
 801b2a8:	08025aa0 	.word	0x08025aa0

0801b2ac <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b082      	sub	sp, #8
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
 801b2b4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	3328      	adds	r3, #40	; 0x28
 801b2ba:	4907      	ldr	r1, [pc, #28]	; (801b2d8 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801b2bc:	4618      	mov	r0, r3
 801b2be:	f002 f8af 	bl	801d420 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	3328      	adds	r3, #40	; 0x28
 801b2c6:	6839      	ldr	r1, [r7, #0]
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	f001 ffa7 	bl	801d21c <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801b2ce:	687b      	ldr	r3, [r7, #4]
}
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	3708      	adds	r7, #8
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	bd80      	pop	{r7, pc}
 801b2d8:	08025aa0 	.word	0x08025aa0

0801b2dc <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801b2dc:	b580      	push	{r7, lr}
 801b2de:	b082      	sub	sp, #8
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	6078      	str	r0, [r7, #4]
 801b2e4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	3328      	adds	r3, #40	; 0x28
 801b2ea:	4907      	ldr	r1, [pc, #28]	; (801b308 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	f002 f897 	bl	801d420 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	3328      	adds	r3, #40	; 0x28
 801b2f6:	6839      	ldr	r1, [r7, #0]
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	f001 ffb1 	bl	801d260 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801b2fe:	687b      	ldr	r3, [r7, #4]
}
 801b300:	4618      	mov	r0, r3
 801b302:	3708      	adds	r7, #8
 801b304:	46bd      	mov	sp, r7
 801b306:	bd80      	pop	{r7, pc}
 801b308:	08025aa0 	.word	0x08025aa0

0801b30c <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801b30c:	b480      	push	{r7}
 801b30e:	b083      	sub	sp, #12
 801b310:	af00      	add	r7, sp, #0
 801b312:	6078      	str	r0, [r7, #4]
 801b314:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	2201      	movs	r2, #1
 801b31a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	2200      	movs	r2, #0
 801b322:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	683a      	ldr	r2, [r7, #0]
 801b32a:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801b32c:	687b      	ldr	r3, [r7, #4]
}
 801b32e:	4618      	mov	r0, r3
 801b330:	370c      	adds	r7, #12
 801b332:	46bd      	mov	sp, r7
 801b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b338:	4770      	bx	lr

0801b33a <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801b33a:	b580      	push	{r7, lr}
 801b33c:	b082      	sub	sp, #8
 801b33e:	af00      	add	r7, sp, #0
 801b340:	6078      	str	r0, [r7, #4]
 801b342:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801b344:	683b      	ldr	r3, [r7, #0]
 801b346:	3328      	adds	r3, #40	; 0x28
 801b348:	4619      	mov	r1, r3
 801b34a:	6878      	ldr	r0, [r7, #4]
 801b34c:	f7ef f946 	bl	800a5dc <_ZN14MockNamedValueC1ERKS_>
}
 801b350:	6878      	ldr	r0, [r7, #4]
 801b352:	3708      	adds	r7, #8
 801b354:	46bd      	mov	sp, r7
 801b356:	bd80      	pop	{r7, pc}

0801b358 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801b358:	b480      	push	{r7}
 801b35a:	b085      	sub	sp, #20
 801b35c:	af00      	add	r7, sp, #0
 801b35e:	60f8      	str	r0, [r7, #12]
 801b360:	60b9      	str	r1, [r7, #8]
 801b362:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	68ba      	ldr	r2, [r7, #8]
 801b368:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	687a      	ldr	r2, [r7, #4]
 801b36e:	615a      	str	r2, [r3, #20]
    return *this;
 801b370:	68fb      	ldr	r3, [r7, #12]
}
 801b372:	4618      	mov	r0, r3
 801b374:	3714      	adds	r7, #20
 801b376:	46bd      	mov	sp, r7
 801b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b37c:	4770      	bx	lr

0801b37e <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801b37e:	b480      	push	{r7}
 801b380:	b083      	sub	sp, #12
 801b382:	af00      	add	r7, sp, #0
 801b384:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	7e1b      	ldrb	r3, [r3, #24]
}
 801b38a:	4618      	mov	r0, r3
 801b38c:	370c      	adds	r7, #12
 801b38e:	46bd      	mov	sp, r7
 801b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b394:	4770      	bx	lr

0801b396 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801b396:	b480      	push	{r7}
 801b398:	b083      	sub	sp, #12
 801b39a:	af00      	add	r7, sp, #0
 801b39c:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	370c      	adds	r7, #12
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ac:	4770      	bx	lr
	...

0801b3b0 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	b082      	sub	sp, #8
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	6078      	str	r0, [r7, #4]
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	f7fe fcce 	bl	8019d5c <_ZN16MockExpectedCallC1Ev>
 801b3c0:	4a03      	ldr	r2, [pc, #12]	; (801b3d0 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	601a      	str	r2, [r3, #0]
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	3708      	adds	r7, #8
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	bd80      	pop	{r7, pc}
 801b3d0:	080288b8 	.word	0x080288b8

0801b3d4 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	af00      	add	r7, sp, #0
 801b3d8:	4801      	ldr	r0, [pc, #4]	; (801b3e0 <__tcf_0+0xc>)
 801b3da:	f000 f831 	bl	801b440 <_ZN23MockIgnoredExpectedCallD1Ev>
 801b3de:	bd80      	pop	{r7, pc}
 801b3e0:	20000ebc 	.word	0x20000ebc

0801b3e4 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801b3e4:	b580      	push	{r7, lr}
 801b3e6:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801b3e8:	4b12      	ldr	r3, [pc, #72]	; (801b434 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b3ea:	781b      	ldrb	r3, [r3, #0]
 801b3ec:	f3bf 8f5b 	dmb	ish
 801b3f0:	b2db      	uxtb	r3, r3
 801b3f2:	f003 0301 	and.w	r3, r3, #1
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	bf0c      	ite	eq
 801b3fa:	2301      	moveq	r3, #1
 801b3fc:	2300      	movne	r3, #0
 801b3fe:	b2db      	uxtb	r3, r3
 801b400:	2b00      	cmp	r3, #0
 801b402:	d013      	beq.n	801b42c <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801b404:	480b      	ldr	r0, [pc, #44]	; (801b434 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b406:	f003 ff03 	bl	801f210 <__cxa_guard_acquire>
 801b40a:	4603      	mov	r3, r0
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	bf14      	ite	ne
 801b410:	2301      	movne	r3, #1
 801b412:	2300      	moveq	r3, #0
 801b414:	b2db      	uxtb	r3, r3
 801b416:	2b00      	cmp	r3, #0
 801b418:	d008      	beq.n	801b42c <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801b41a:	4807      	ldr	r0, [pc, #28]	; (801b438 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801b41c:	f7ff ffc8 	bl	801b3b0 <_ZN23MockIgnoredExpectedCallC1Ev>
 801b420:	4804      	ldr	r0, [pc, #16]	; (801b434 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b422:	f003 ff01 	bl	801f228 <__cxa_guard_release>
 801b426:	4805      	ldr	r0, [pc, #20]	; (801b43c <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801b428:	f003 ff25 	bl	801f276 <atexit>
    return call;
 801b42c:	4b02      	ldr	r3, [pc, #8]	; (801b438 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801b42e:	4618      	mov	r0, r3
 801b430:	bd80      	pop	{r7, pc}
 801b432:	bf00      	nop
 801b434:	20000ec0 	.word	0x20000ec0
 801b438:	20000ebc 	.word	0x20000ebc
 801b43c:	0801b3d5 	.word	0x0801b3d5

0801b440 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801b440:	b580      	push	{r7, lr}
 801b442:	b082      	sub	sp, #8
 801b444:	af00      	add	r7, sp, #0
 801b446:	6078      	str	r0, [r7, #4]
 801b448:	4a05      	ldr	r2, [pc, #20]	; (801b460 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	601a      	str	r2, [r3, #0]
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	4618      	mov	r0, r3
 801b452:	f7fe fc93 	bl	8019d7c <_ZN16MockExpectedCallD1Ev>
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	4618      	mov	r0, r3
 801b45a:	3708      	adds	r7, #8
 801b45c:	46bd      	mov	sp, r7
 801b45e:	bd80      	pop	{r7, pc}
 801b460:	080288b8 	.word	0x080288b8

0801b464 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801b464:	b580      	push	{r7, lr}
 801b466:	b082      	sub	sp, #8
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
 801b46c:	6878      	ldr	r0, [r7, #4]
 801b46e:	f7ff ffe7 	bl	801b440 <_ZN23MockIgnoredExpectedCallD1Ev>
 801b472:	2104      	movs	r1, #4
 801b474:	6878      	ldr	r0, [r7, #4]
 801b476:	f7ee fc5d 	bl	8009d34 <_ZdlPvj>
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	4618      	mov	r0, r3
 801b47e:	3708      	adds	r7, #8
 801b480:	46bd      	mov	sp, r7
 801b482:	bd80      	pop	{r7, pc}

0801b484 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801b484:	b580      	push	{r7, lr}
 801b486:	b082      	sub	sp, #8
 801b488:	af00      	add	r7, sp, #0
 801b48a:	6078      	str	r0, [r7, #4]
 801b48c:	4a05      	ldr	r2, [pc, #20]	; (801b4a4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	601a      	str	r2, [r3, #0]
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	4618      	mov	r0, r3
 801b496:	f001 fd4b 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	4618      	mov	r0, r3
 801b49e:	3708      	adds	r7, #8
 801b4a0:	46bd      	mov	sp, r7
 801b4a2:	bd80      	pop	{r7, pc}
 801b4a4:	08028a58 	.word	0x08028a58

0801b4a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801b4a8:	b580      	push	{r7, lr}
 801b4aa:	b082      	sub	sp, #8
 801b4ac:	af00      	add	r7, sp, #0
 801b4ae:	6078      	str	r0, [r7, #4]
 801b4b0:	6878      	ldr	r0, [r7, #4]
 801b4b2:	f7ff ffe7 	bl	801b484 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801b4b6:	2138      	movs	r1, #56	; 0x38
 801b4b8:	6878      	ldr	r0, [r7, #4]
 801b4ba:	f7ee fc3b 	bl	8009d34 <_ZdlPvj>
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	4618      	mov	r0, r3
 801b4c2:	3708      	adds	r7, #8
 801b4c4:	46bd      	mov	sp, r7
 801b4c6:	bd80      	pop	{r7, pc}

0801b4c8 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801b4c8:	b480      	push	{r7}
 801b4ca:	b083      	sub	sp, #12
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	6078      	str	r0, [r7, #4]
 801b4d0:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	683a      	ldr	r2, [r7, #0]
 801b4d6:	601a      	str	r2, [r3, #0]
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	2200      	movs	r2, #0
 801b4dc:	605a      	str	r2, [r3, #4]
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	370c      	adds	r7, #12
 801b4e4:	46bd      	mov	sp, r7
 801b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ea:	4770      	bx	lr

0801b4ec <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801b4ec:	b480      	push	{r7}
 801b4ee:	b083      	sub	sp, #12
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
 801b4f4:	4a06      	ldr	r2, [pc, #24]	; (801b510 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	601a      	str	r2, [r3, #0]
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	2200      	movs	r2, #0
 801b4fe:	605a      	str	r2, [r3, #4]
{
}
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	4618      	mov	r0, r3
 801b504:	370c      	adds	r7, #12
 801b506:	46bd      	mov	sp, r7
 801b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b50c:	4770      	bx	lr
 801b50e:	bf00      	nop
 801b510:	08028bac 	.word	0x08028bac

0801b514 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801b514:	b580      	push	{r7, lr}
 801b516:	b084      	sub	sp, #16
 801b518:	af00      	add	r7, sp, #0
 801b51a:	6078      	str	r0, [r7, #4]
 801b51c:	4a0d      	ldr	r2, [pc, #52]	; (801b554 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	685b      	ldr	r3, [r3, #4]
 801b526:	2b00      	cmp	r3, #0
 801b528:	d00f      	beq.n	801b54a <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	685b      	ldr	r3, [r3, #4]
 801b52e:	685b      	ldr	r3, [r3, #4]
 801b530:	60fb      	str	r3, [r7, #12]
        delete head_;
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	685b      	ldr	r3, [r3, #4]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d003      	beq.n	801b542 <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801b53a:	2108      	movs	r1, #8
 801b53c:	4618      	mov	r0, r3
 801b53e:	f7ee fbf9 	bl	8009d34 <_ZdlPvj>
        head_ = next;
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	68fa      	ldr	r2, [r7, #12]
 801b546:	605a      	str	r2, [r3, #4]
    while (head_) {
 801b548:	e7eb      	b.n	801b522 <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	4618      	mov	r0, r3
 801b54e:	3710      	adds	r7, #16
 801b550:	46bd      	mov	sp, r7
 801b552:	bd80      	pop	{r7, pc}
 801b554:	08028bac 	.word	0x08028bac

0801b558 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801b558:	b580      	push	{r7, lr}
 801b55a:	b082      	sub	sp, #8
 801b55c:	af00      	add	r7, sp, #0
 801b55e:	6078      	str	r0, [r7, #4]
}
 801b560:	6878      	ldr	r0, [r7, #4]
 801b562:	f7ff ffd7 	bl	801b514 <_ZN21MockExpectedCallsListD1Ev>
 801b566:	2108      	movs	r1, #8
 801b568:	6878      	ldr	r0, [r7, #4]
 801b56a:	f7ee fbe3 	bl	8009d34 <_ZdlPvj>
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	4618      	mov	r0, r3
 801b572:	3708      	adds	r7, #8
 801b574:	46bd      	mov	sp, r7
 801b576:	bd80      	pop	{r7, pc}

0801b578 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b084      	sub	sp, #16
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	685b      	ldr	r3, [r3, #4]
 801b584:	60fb      	str	r3, [r7, #12]
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d011      	beq.n	801b5b0 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	681a      	ldr	r2, [r3, #0]
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	33d4      	adds	r3, #212	; 0xd4
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	4610      	mov	r0, r2
 801b59c:	4798      	blx	r3
 801b59e:	4603      	mov	r3, r0
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d001      	beq.n	801b5a8 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801b5a4:	2301      	movs	r3, #1
 801b5a6:	e004      	b.n	801b5b2 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	685b      	ldr	r3, [r3, #4]
 801b5ac:	60fb      	str	r3, [r7, #12]
 801b5ae:	e7ea      	b.n	801b586 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801b5b0:	2300      	movs	r3, #0
}
 801b5b2:	4618      	mov	r0, r3
 801b5b4:	3710      	adds	r7, #16
 801b5b6:	46bd      	mov	sp, r7
 801b5b8:	bd80      	pop	{r7, pc}

0801b5ba <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801b5ba:	b480      	push	{r7}
 801b5bc:	b085      	sub	sp, #20
 801b5be:	af00      	add	r7, sp, #0
 801b5c0:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	685b      	ldr	r3, [r3, #4]
 801b5ca:	60bb      	str	r3, [r7, #8]
 801b5cc:	68bb      	ldr	r3, [r7, #8]
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	d006      	beq.n	801b5e0 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	3301      	adds	r3, #1
 801b5d6:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b5d8:	68bb      	ldr	r3, [r7, #8]
 801b5da:	685b      	ldr	r3, [r3, #4]
 801b5dc:	60bb      	str	r3, [r7, #8]
 801b5de:	e7f5      	b.n	801b5cc <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801b5e0:	68fb      	ldr	r3, [r7, #12]
}
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	3714      	adds	r7, #20
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ec:	4770      	bx	lr

0801b5ee <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801b5ee:	b480      	push	{r7}
 801b5f0:	b083      	sub	sp, #12
 801b5f2:	af00      	add	r7, sp, #0
 801b5f4:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	685b      	ldr	r3, [r3, #4]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	bf0c      	ite	eq
 801b5fe:	2301      	moveq	r3, #1
 801b600:	2300      	movne	r3, #0
 801b602:	b2db      	uxtb	r3, r3
}
 801b604:	4618      	mov	r0, r3
 801b606:	370c      	adds	r7, #12
 801b608:	46bd      	mov	sp, r7
 801b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b60e:	4770      	bx	lr

0801b610 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801b610:	b580      	push	{r7, lr}
 801b612:	b084      	sub	sp, #16
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
 801b618:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801b61a:	2300      	movs	r3, #0
 801b61c:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	685b      	ldr	r3, [r3, #4]
 801b622:	60bb      	str	r3, [r7, #8]
 801b624:	68bb      	ldr	r3, [r7, #8]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d01d      	beq.n	801b666 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801b62a:	68bb      	ldr	r3, [r7, #8]
 801b62c:	681a      	ldr	r2, [r3, #0]
 801b62e:	68bb      	ldr	r3, [r7, #8]
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	33b8      	adds	r3, #184	; 0xb8
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	6839      	ldr	r1, [r7, #0]
 801b63a:	4610      	mov	r0, r2
 801b63c:	4798      	blx	r3
 801b63e:	4603      	mov	r3, r0
 801b640:	2b00      	cmp	r3, #0
 801b642:	d00c      	beq.n	801b65e <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801b644:	68bb      	ldr	r3, [r7, #8]
 801b646:	681a      	ldr	r2, [r3, #0]
 801b648:	68bb      	ldr	r3, [r7, #8]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	33f8      	adds	r3, #248	; 0xf8
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	4610      	mov	r0, r2
 801b654:	4798      	blx	r3
 801b656:	4602      	mov	r2, r0
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	4413      	add	r3, r2
 801b65c:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b65e:	68bb      	ldr	r3, [r7, #8]
 801b660:	685b      	ldr	r3, [r3, #4]
 801b662:	60bb      	str	r3, [r7, #8]
 801b664:	e7de      	b.n	801b624 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801b666:	68fb      	ldr	r3, [r7, #12]
}
 801b668:	4618      	mov	r0, r3
 801b66a:	3710      	adds	r7, #16
 801b66c:	46bd      	mov	sp, r7
 801b66e:	bd80      	pop	{r7, pc}

0801b670 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801b670:	b580      	push	{r7, lr}
 801b672:	b084      	sub	sp, #16
 801b674:	af00      	add	r7, sp, #0
 801b676:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801b678:	2300      	movs	r3, #0
 801b67a:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	685b      	ldr	r3, [r3, #4]
 801b680:	60bb      	str	r3, [r7, #8]
 801b682:	68bb      	ldr	r3, [r7, #8]
 801b684:	2b00      	cmp	r3, #0
 801b686:	d015      	beq.n	801b6b4 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801b688:	68bb      	ldr	r3, [r7, #8]
 801b68a:	681a      	ldr	r2, [r3, #0]
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	33c0      	adds	r3, #192	; 0xc0
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	4610      	mov	r0, r2
 801b698:	4798      	blx	r3
 801b69a:	4603      	mov	r3, r0
 801b69c:	f083 0301 	eor.w	r3, r3, #1
 801b6a0:	b2db      	uxtb	r3, r3
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d002      	beq.n	801b6ac <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	3301      	adds	r3, #1
 801b6aa:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b6ac:	68bb      	ldr	r3, [r7, #8]
 801b6ae:	685b      	ldr	r3, [r3, #4]
 801b6b0:	60bb      	str	r3, [r7, #8]
 801b6b2:	e7e6      	b.n	801b682 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801b6b4:	68fb      	ldr	r3, [r7, #12]
}
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	3710      	adds	r7, #16
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	bd80      	pop	{r7, pc}

0801b6be <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801b6be:	b580      	push	{r7, lr}
 801b6c0:	b084      	sub	sp, #16
 801b6c2:	af00      	add	r7, sp, #0
 801b6c4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	685b      	ldr	r3, [r3, #4]
 801b6ca:	60fb      	str	r3, [r7, #12]
 801b6cc:	68fb      	ldr	r3, [r7, #12]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d011      	beq.n	801b6f6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801b6d2:	68fb      	ldr	r3, [r7, #12]
 801b6d4:	681a      	ldr	r2, [r3, #0]
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	33c8      	adds	r3, #200	; 0xc8
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	4610      	mov	r0, r2
 801b6e2:	4798      	blx	r3
 801b6e4:	4603      	mov	r3, r0
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d001      	beq.n	801b6ee <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801b6ea:	2301      	movs	r3, #1
 801b6ec:	e004      	b.n	801b6f8 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	685b      	ldr	r3, [r3, #4]
 801b6f2:	60fb      	str	r3, [r7, #12]
 801b6f4:	e7ea      	b.n	801b6cc <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801b6f6:	2300      	movs	r3, #0
}
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	3710      	adds	r7, #16
 801b6fc:	46bd      	mov	sp, r7
 801b6fe:	bd80      	pop	{r7, pc}

0801b700 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801b700:	b580      	push	{r7, lr}
 801b702:	b084      	sub	sp, #16
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	685b      	ldr	r3, [r3, #4]
 801b70c:	60fb      	str	r3, [r7, #12]
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	2b00      	cmp	r3, #0
 801b712:	d014      	beq.n	801b73e <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	681a      	ldr	r2, [r3, #0]
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	33c0      	adds	r3, #192	; 0xc0
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	4610      	mov	r0, r2
 801b724:	4798      	blx	r3
 801b726:	4603      	mov	r3, r0
 801b728:	f083 0301 	eor.w	r3, r3, #1
 801b72c:	b2db      	uxtb	r3, r3
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d001      	beq.n	801b736 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801b732:	2301      	movs	r3, #1
 801b734:	e004      	b.n	801b740 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	685b      	ldr	r3, [r3, #4]
 801b73a:	60fb      	str	r3, [r7, #12]
 801b73c:	e7e7      	b.n	801b70e <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801b73e:	2300      	movs	r3, #0
}
 801b740:	4618      	mov	r0, r3
 801b742:	3710      	adds	r7, #16
 801b744:	46bd      	mov	sp, r7
 801b746:	bd80      	pop	{r7, pc}

0801b748 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801b748:	b580      	push	{r7, lr}
 801b74a:	b084      	sub	sp, #16
 801b74c:	af00      	add	r7, sp, #0
 801b74e:	6078      	str	r0, [r7, #4]
 801b750:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	685b      	ldr	r3, [r3, #4]
 801b756:	60fb      	str	r3, [r7, #12]
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d012      	beq.n	801b784 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801b75e:	68fb      	ldr	r3, [r7, #12]
 801b760:	681a      	ldr	r2, [r3, #0]
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	33b8      	adds	r3, #184	; 0xb8
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	6839      	ldr	r1, [r7, #0]
 801b76e:	4610      	mov	r0, r2
 801b770:	4798      	blx	r3
 801b772:	4603      	mov	r3, r0
 801b774:	2b00      	cmp	r3, #0
 801b776:	d001      	beq.n	801b77c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801b778:	2301      	movs	r3, #1
 801b77a:	e004      	b.n	801b786 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b77c:	68fb      	ldr	r3, [r7, #12]
 801b77e:	685b      	ldr	r3, [r3, #4]
 801b780:	60fb      	str	r3, [r7, #12]
 801b782:	e7e9      	b.n	801b758 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801b784:	2300      	movs	r3, #0
}
 801b786:	4618      	mov	r0, r3
 801b788:	3710      	adds	r7, #16
 801b78a:	46bd      	mov	sp, r7
 801b78c:	bd80      	pop	{r7, pc}
	...

0801b790 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801b790:	b590      	push	{r4, r7, lr}
 801b792:	b085      	sub	sp, #20
 801b794:	af00      	add	r7, sp, #0
 801b796:	6078      	str	r0, [r7, #4]
 801b798:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801b79a:	2273      	movs	r2, #115	; 0x73
 801b79c:	4911      	ldr	r1, [pc, #68]	; (801b7e4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801b79e:	2008      	movs	r0, #8
 801b7a0:	f7ee fab4 	bl	8009d0c <_ZnwjPKci>
 801b7a4:	4604      	mov	r4, r0
 801b7a6:	6839      	ldr	r1, [r7, #0]
 801b7a8:	4620      	mov	r0, r4
 801b7aa:	f7ff fe8d 	bl	801b4c8 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801b7ae:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	685b      	ldr	r3, [r3, #4]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d103      	bne.n	801b7c0 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	68ba      	ldr	r2, [r7, #8]
 801b7bc:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801b7be:	e00d      	b.n	801b7dc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	685b      	ldr	r3, [r3, #4]
 801b7c4:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801b7c6:	68fb      	ldr	r3, [r7, #12]
 801b7c8:	685b      	ldr	r3, [r3, #4]
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d003      	beq.n	801b7d6 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	685b      	ldr	r3, [r3, #4]
 801b7d2:	60fb      	str	r3, [r7, #12]
 801b7d4:	e7f7      	b.n	801b7c6 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801b7d6:	68fb      	ldr	r3, [r7, #12]
 801b7d8:	68ba      	ldr	r2, [r7, #8]
 801b7da:	605a      	str	r2, [r3, #4]
}
 801b7dc:	bf00      	nop
 801b7de:	3714      	adds	r7, #20
 801b7e0:	46bd      	mov	sp, r7
 801b7e2:	bd90      	pop	{r4, r7, pc}
 801b7e4:	08025aac 	.word	0x08025aac

0801b7e8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801b7e8:	b580      	push	{r7, lr}
 801b7ea:	b084      	sub	sp, #16
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	6078      	str	r0, [r7, #4]
 801b7f0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b7f2:	683b      	ldr	r3, [r7, #0]
 801b7f4:	685b      	ldr	r3, [r3, #4]
 801b7f6:	60fb      	str	r3, [r7, #12]
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d018      	beq.n	801b830 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	681a      	ldr	r2, [r3, #0]
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	33c4      	adds	r3, #196	; 0xc4
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	4610      	mov	r0, r2
 801b80e:	4798      	blx	r3
 801b810:	4603      	mov	r3, r0
 801b812:	2b00      	cmp	r3, #0
 801b814:	d008      	beq.n	801b828 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	3330      	adds	r3, #48	; 0x30
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	68fa      	ldr	r2, [r7, #12]
 801b820:	6812      	ldr	r2, [r2, #0]
 801b822:	4611      	mov	r1, r2
 801b824:	6878      	ldr	r0, [r7, #4]
 801b826:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	685b      	ldr	r3, [r3, #4]
 801b82c:	60fb      	str	r3, [r7, #12]
 801b82e:	e7e3      	b.n	801b7f8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801b830:	bf00      	nop
 801b832:	3710      	adds	r7, #16
 801b834:	46bd      	mov	sp, r7
 801b836:	bd80      	pop	{r7, pc}

0801b838 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801b838:	b580      	push	{r7, lr}
 801b83a:	b086      	sub	sp, #24
 801b83c:	af00      	add	r7, sp, #0
 801b83e:	60f8      	str	r0, [r7, #12]
 801b840:	60b9      	str	r1, [r7, #8]
 801b842:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	685b      	ldr	r3, [r3, #4]
 801b848:	617b      	str	r3, [r7, #20]
 801b84a:	697b      	ldr	r3, [r7, #20]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d019      	beq.n	801b884 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801b850:	697b      	ldr	r3, [r7, #20]
 801b852:	681a      	ldr	r2, [r3, #0]
 801b854:	697b      	ldr	r3, [r7, #20]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	33b8      	adds	r3, #184	; 0xb8
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	68b9      	ldr	r1, [r7, #8]
 801b860:	4610      	mov	r0, r2
 801b862:	4798      	blx	r3
 801b864:	4603      	mov	r3, r0
 801b866:	2b00      	cmp	r3, #0
 801b868:	d008      	beq.n	801b87c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	3330      	adds	r3, #48	; 0x30
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	697a      	ldr	r2, [r7, #20]
 801b874:	6812      	ldr	r2, [r2, #0]
 801b876:	4611      	mov	r1, r2
 801b878:	68f8      	ldr	r0, [r7, #12]
 801b87a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b87c:	697b      	ldr	r3, [r7, #20]
 801b87e:	685b      	ldr	r3, [r3, #4]
 801b880:	617b      	str	r3, [r7, #20]
 801b882:	e7e2      	b.n	801b84a <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801b884:	bf00      	nop
 801b886:	3718      	adds	r7, #24
 801b888:	46bd      	mov	sp, r7
 801b88a:	bd80      	pop	{r7, pc}

0801b88c <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801b88c:	b580      	push	{r7, lr}
 801b88e:	b084      	sub	sp, #16
 801b890:	af00      	add	r7, sp, #0
 801b892:	6078      	str	r0, [r7, #4]
 801b894:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b896:	683b      	ldr	r3, [r7, #0]
 801b898:	685b      	ldr	r3, [r3, #4]
 801b89a:	60fb      	str	r3, [r7, #12]
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d00c      	beq.n	801b8bc <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	3330      	adds	r3, #48	; 0x30
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	68fa      	ldr	r2, [r7, #12]
 801b8ac:	6812      	ldr	r2, [r2, #0]
 801b8ae:	4611      	mov	r1, r2
 801b8b0:	6878      	ldr	r0, [r7, #4]
 801b8b2:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	685b      	ldr	r3, [r3, #4]
 801b8b8:	60fb      	str	r3, [r7, #12]
 801b8ba:	e7ef      	b.n	801b89c <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801b8bc:	bf00      	nop
 801b8be:	3710      	adds	r7, #16
 801b8c0:	46bd      	mov	sp, r7
 801b8c2:	bd80      	pop	{r7, pc}

0801b8c4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801b8c4:	b580      	push	{r7, lr}
 801b8c6:	b084      	sub	sp, #16
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	6078      	str	r0, [r7, #4]
 801b8cc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	685b      	ldr	r3, [r3, #4]
 801b8d2:	60fb      	str	r3, [r7, #12]
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d016      	beq.n	801b908 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801b8da:	68fb      	ldr	r3, [r7, #12]
 801b8dc:	681a      	ldr	r2, [r3, #0]
 801b8de:	68fb      	ldr	r3, [r7, #12]
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	33b8      	adds	r3, #184	; 0xb8
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	6839      	ldr	r1, [r7, #0]
 801b8ea:	4610      	mov	r0, r2
 801b8ec:	4798      	blx	r3
 801b8ee:	4603      	mov	r3, r0
 801b8f0:	f083 0301 	eor.w	r3, r3, #1
 801b8f4:	b2db      	uxtb	r3, r3
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d002      	beq.n	801b900 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801b8fa:	68fb      	ldr	r3, [r7, #12]
 801b8fc:	2200      	movs	r2, #0
 801b8fe:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	685b      	ldr	r3, [r3, #4]
 801b904:	60fb      	str	r3, [r7, #12]
 801b906:	e7e5      	b.n	801b8d4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	3388      	adds	r3, #136	; 0x88
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	6878      	ldr	r0, [r7, #4]
 801b912:	4798      	blx	r3
}
 801b914:	bf00      	nop
 801b916:	3710      	adds	r7, #16
 801b918:	46bd      	mov	sp, r7
 801b91a:	bd80      	pop	{r7, pc}

0801b91c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801b91c:	b580      	push	{r7, lr}
 801b91e:	b084      	sub	sp, #16
 801b920:	af00      	add	r7, sp, #0
 801b922:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	685b      	ldr	r3, [r3, #4]
 801b928:	60fb      	str	r3, [r7, #12]
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d015      	beq.n	801b95c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	681a      	ldr	r2, [r3, #0]
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	33d4      	adds	r3, #212	; 0xd4
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	4610      	mov	r0, r2
 801b940:	4798      	blx	r3
 801b942:	4603      	mov	r3, r0
 801b944:	f083 0301 	eor.w	r3, r3, #1
 801b948:	b2db      	uxtb	r3, r3
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d002      	beq.n	801b954 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	2200      	movs	r2, #0
 801b952:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	685b      	ldr	r3, [r3, #4]
 801b958:	60fb      	str	r3, [r7, #12]
 801b95a:	e7e6      	b.n	801b92a <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	3388      	adds	r3, #136	; 0x88
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	6878      	ldr	r0, [r7, #4]
 801b966:	4798      	blx	r3
}
 801b968:	bf00      	nop
 801b96a:	3710      	adds	r7, #16
 801b96c:	46bd      	mov	sp, r7
 801b96e:	bd80      	pop	{r7, pc}

0801b970 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801b970:	b580      	push	{r7, lr}
 801b972:	b084      	sub	sp, #16
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	685b      	ldr	r3, [r3, #4]
 801b97c:	60fb      	str	r3, [r7, #12]
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	2b00      	cmp	r3, #0
 801b982:	d01b      	beq.n	801b9bc <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801b984:	68fb      	ldr	r3, [r7, #12]
 801b986:	681a      	ldr	r2, [r3, #0]
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	33c8      	adds	r3, #200	; 0xc8
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	4610      	mov	r0, r2
 801b994:	4798      	blx	r3
 801b996:	4603      	mov	r3, r0
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d00b      	beq.n	801b9b4 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801b99c:	68fb      	ldr	r3, [r7, #12]
 801b99e:	681a      	ldr	r2, [r3, #0]
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	33ec      	adds	r3, #236	; 0xec
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	4610      	mov	r0, r2
 801b9ac:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	2200      	movs	r2, #0
 801b9b2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b9b4:	68fb      	ldr	r3, [r7, #12]
 801b9b6:	685b      	ldr	r3, [r3, #4]
 801b9b8:	60fb      	str	r3, [r7, #12]
 801b9ba:	e7e0      	b.n	801b97e <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	681b      	ldr	r3, [r3, #0]
 801b9c0:	3388      	adds	r3, #136	; 0x88
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	6878      	ldr	r0, [r7, #4]
 801b9c6:	4798      	blx	r3
}
 801b9c8:	bf00      	nop
 801b9ca:	3710      	adds	r7, #16
 801b9cc:	46bd      	mov	sp, r7
 801b9ce:	bd80      	pop	{r7, pc}

0801b9d0 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b084      	sub	sp, #16
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	6078      	str	r0, [r7, #4]
 801b9d8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	685b      	ldr	r3, [r3, #4]
 801b9de:	60fb      	str	r3, [r7, #12]
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d016      	beq.n	801ba14 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801b9e6:	68fb      	ldr	r3, [r7, #12]
 801b9e8:	681a      	ldr	r2, [r3, #0]
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	33a8      	adds	r3, #168	; 0xa8
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	6839      	ldr	r1, [r7, #0]
 801b9f6:	4610      	mov	r0, r2
 801b9f8:	4798      	blx	r3
 801b9fa:	4603      	mov	r3, r0
 801b9fc:	f083 0301 	eor.w	r3, r3, #1
 801ba00:	b2db      	uxtb	r3, r3
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d002      	beq.n	801ba0c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801ba06:	68fb      	ldr	r3, [r7, #12]
 801ba08:	2200      	movs	r2, #0
 801ba0a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba0c:	68fb      	ldr	r3, [r7, #12]
 801ba0e:	685b      	ldr	r3, [r3, #4]
 801ba10:	60fb      	str	r3, [r7, #12]
 801ba12:	e7e5      	b.n	801b9e0 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	681b      	ldr	r3, [r3, #0]
 801ba18:	3388      	adds	r3, #136	; 0x88
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	6878      	ldr	r0, [r7, #4]
 801ba1e:	4798      	blx	r3
}
 801ba20:	bf00      	nop
 801ba22:	3710      	adds	r7, #16
 801ba24:	46bd      	mov	sp, r7
 801ba26:	bd80      	pop	{r7, pc}

0801ba28 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801ba28:	b580      	push	{r7, lr}
 801ba2a:	b084      	sub	sp, #16
 801ba2c:	af00      	add	r7, sp, #0
 801ba2e:	6078      	str	r0, [r7, #4]
 801ba30:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	685b      	ldr	r3, [r3, #4]
 801ba36:	60fb      	str	r3, [r7, #12]
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d016      	beq.n	801ba6c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	681a      	ldr	r2, [r3, #0]
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	33b0      	adds	r3, #176	; 0xb0
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	6839      	ldr	r1, [r7, #0]
 801ba4e:	4610      	mov	r0, r2
 801ba50:	4798      	blx	r3
 801ba52:	4603      	mov	r3, r0
 801ba54:	f083 0301 	eor.w	r3, r3, #1
 801ba58:	b2db      	uxtb	r3, r3
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d002      	beq.n	801ba64 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	2200      	movs	r2, #0
 801ba62:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	685b      	ldr	r3, [r3, #4]
 801ba68:	60fb      	str	r3, [r7, #12]
 801ba6a:	e7e5      	b.n	801ba38 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	3388      	adds	r3, #136	; 0x88
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	6878      	ldr	r0, [r7, #4]
 801ba76:	4798      	blx	r3
}
 801ba78:	bf00      	nop
 801ba7a:	3710      	adds	r7, #16
 801ba7c:	46bd      	mov	sp, r7
 801ba7e:	bd80      	pop	{r7, pc}

0801ba80 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801ba80:	b580      	push	{r7, lr}
 801ba82:	b084      	sub	sp, #16
 801ba84:	af00      	add	r7, sp, #0
 801ba86:	6078      	str	r0, [r7, #4]
 801ba88:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	685b      	ldr	r3, [r3, #4]
 801ba8e:	60fb      	str	r3, [r7, #12]
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d016      	beq.n	801bac4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801ba96:	68fb      	ldr	r3, [r7, #12]
 801ba98:	681a      	ldr	r2, [r3, #0]
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	33ac      	adds	r3, #172	; 0xac
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	6839      	ldr	r1, [r7, #0]
 801baa6:	4610      	mov	r0, r2
 801baa8:	4798      	blx	r3
 801baaa:	4603      	mov	r3, r0
 801baac:	f083 0301 	eor.w	r3, r3, #1
 801bab0:	b2db      	uxtb	r3, r3
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d002      	beq.n	801babc <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	2200      	movs	r2, #0
 801baba:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	685b      	ldr	r3, [r3, #4]
 801bac0:	60fb      	str	r3, [r7, #12]
 801bac2:	e7e5      	b.n	801ba90 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	3388      	adds	r3, #136	; 0x88
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	6878      	ldr	r0, [r7, #4]
 801bace:	4798      	blx	r3
}
 801bad0:	bf00      	nop
 801bad2:	3710      	adds	r7, #16
 801bad4:	46bd      	mov	sp, r7
 801bad6:	bd80      	pop	{r7, pc}

0801bad8 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801bad8:	b580      	push	{r7, lr}
 801bada:	b084      	sub	sp, #16
 801badc:	af00      	add	r7, sp, #0
 801bade:	6078      	str	r0, [r7, #4]
 801bae0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	685b      	ldr	r3, [r3, #4]
 801bae6:	60fb      	str	r3, [r7, #12]
 801bae8:	68fb      	ldr	r3, [r7, #12]
 801baea:	2b00      	cmp	r3, #0
 801baec:	d016      	beq.n	801bb1c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	681a      	ldr	r2, [r3, #0]
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	33b4      	adds	r3, #180	; 0xb4
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	6839      	ldr	r1, [r7, #0]
 801bafe:	4610      	mov	r0, r2
 801bb00:	4798      	blx	r3
 801bb02:	4603      	mov	r3, r0
 801bb04:	f083 0301 	eor.w	r3, r3, #1
 801bb08:	b2db      	uxtb	r3, r3
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d002      	beq.n	801bb14 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	2200      	movs	r2, #0
 801bb12:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bb14:	68fb      	ldr	r3, [r7, #12]
 801bb16:	685b      	ldr	r3, [r3, #4]
 801bb18:	60fb      	str	r3, [r7, #12]
 801bb1a:	e7e5      	b.n	801bae8 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	3388      	adds	r3, #136	; 0x88
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	6878      	ldr	r0, [r7, #4]
 801bb26:	4798      	blx	r3
}
 801bb28:	bf00      	nop
 801bb2a:	3710      	adds	r7, #16
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	bd80      	pop	{r7, pc}

0801bb30 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801bb30:	b580      	push	{r7, lr}
 801bb32:	b084      	sub	sp, #16
 801bb34:	af00      	add	r7, sp, #0
 801bb36:	6078      	str	r0, [r7, #4]
 801bb38:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	685b      	ldr	r3, [r3, #4]
 801bb3e:	60fb      	str	r3, [r7, #12]
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d016      	beq.n	801bb74 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801bb46:	68fb      	ldr	r3, [r7, #12]
 801bb48:	681a      	ldr	r2, [r3, #0]
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	33bc      	adds	r3, #188	; 0xbc
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	6839      	ldr	r1, [r7, #0]
 801bb56:	4610      	mov	r0, r2
 801bb58:	4798      	blx	r3
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	f083 0301 	eor.w	r3, r3, #1
 801bb60:	b2db      	uxtb	r3, r3
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d002      	beq.n	801bb6c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	2200      	movs	r2, #0
 801bb6a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	685b      	ldr	r3, [r3, #4]
 801bb70:	60fb      	str	r3, [r7, #12]
 801bb72:	e7e5      	b.n	801bb40 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	3388      	adds	r3, #136	; 0x88
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	6878      	ldr	r0, [r7, #4]
 801bb7e:	4798      	blx	r3
}
 801bb80:	bf00      	nop
 801bb82:	3710      	adds	r7, #16
 801bb84:	46bd      	mov	sp, r7
 801bb86:	bd80      	pop	{r7, pc}

0801bb88 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801bb88:	b580      	push	{r7, lr}
 801bb8a:	b084      	sub	sp, #16
 801bb8c:	af00      	add	r7, sp, #0
 801bb8e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	685b      	ldr	r3, [r3, #4]
 801bb94:	60fb      	str	r3, [r7, #12]
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d01d      	beq.n	801bbd8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	681a      	ldr	r2, [r3, #0]
 801bba0:	68fb      	ldr	r3, [r7, #12]
 801bba2:	681b      	ldr	r3, [r3, #0]
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	33c8      	adds	r3, #200	; 0xc8
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	4610      	mov	r0, r2
 801bbac:	4798      	blx	r3
 801bbae:	4603      	mov	r3, r0
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d00d      	beq.n	801bbd0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801bbb4:	68fb      	ldr	r3, [r7, #12]
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	2200      	movs	r2, #0
 801bbbe:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	3388      	adds	r3, #136	; 0x88
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	6878      	ldr	r0, [r7, #4]
 801bbca:	4798      	blx	r3
            return matchingCall;
 801bbcc:	68bb      	ldr	r3, [r7, #8]
 801bbce:	e004      	b.n	801bbda <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bbd0:	68fb      	ldr	r3, [r7, #12]
 801bbd2:	685b      	ldr	r3, [r3, #4]
 801bbd4:	60fb      	str	r3, [r7, #12]
 801bbd6:	e7de      	b.n	801bb96 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801bbd8:	2300      	movs	r3, #0
}
 801bbda:	4618      	mov	r0, r3
 801bbdc:	3710      	adds	r7, #16
 801bbde:	46bd      	mov	sp, r7
 801bbe0:	bd80      	pop	{r7, pc}

0801bbe2 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801bbe2:	b580      	push	{r7, lr}
 801bbe4:	b084      	sub	sp, #16
 801bbe6:	af00      	add	r7, sp, #0
 801bbe8:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	685b      	ldr	r3, [r3, #4]
 801bbee:	60fb      	str	r3, [r7, #12]
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d012      	beq.n	801bc1c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801bbf6:	68fb      	ldr	r3, [r7, #12]
 801bbf8:	681a      	ldr	r2, [r3, #0]
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	33cc      	adds	r3, #204	; 0xcc
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	4610      	mov	r0, r2
 801bc06:	4798      	blx	r3
 801bc08:	4603      	mov	r3, r0
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d002      	beq.n	801bc14 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	e004      	b.n	801bc1e <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	685b      	ldr	r3, [r3, #4]
 801bc18:	60fb      	str	r3, [r7, #12]
 801bc1a:	e7e9      	b.n	801bbf0 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801bc1c:	2300      	movs	r3, #0
}
 801bc1e:	4618      	mov	r0, r3
 801bc20:	3710      	adds	r7, #16
 801bc22:	46bd      	mov	sp, r7
 801bc24:	bd80      	pop	{r7, pc}

0801bc26 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801bc26:	b580      	push	{r7, lr}
 801bc28:	b084      	sub	sp, #16
 801bc2a:	af00      	add	r7, sp, #0
 801bc2c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	685b      	ldr	r3, [r3, #4]
 801bc32:	60fb      	str	r3, [r7, #12]
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d01d      	beq.n	801bc76 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	681a      	ldr	r2, [r3, #0]
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	33cc      	adds	r3, #204	; 0xcc
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	4610      	mov	r0, r2
 801bc4a:	4798      	blx	r3
 801bc4c:	4603      	mov	r3, r0
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d00d      	beq.n	801bc6e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	2200      	movs	r2, #0
 801bc5c:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	3388      	adds	r3, #136	; 0x88
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	6878      	ldr	r0, [r7, #4]
 801bc68:	4798      	blx	r3
            return matchingCall;
 801bc6a:	68bb      	ldr	r3, [r7, #8]
 801bc6c:	e004      	b.n	801bc78 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bc6e:	68fb      	ldr	r3, [r7, #12]
 801bc70:	685b      	ldr	r3, [r3, #4]
 801bc72:	60fb      	str	r3, [r7, #12]
 801bc74:	e7de      	b.n	801bc34 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801bc76:	2300      	movs	r3, #0
}
 801bc78:	4618      	mov	r0, r3
 801bc7a:	3710      	adds	r7, #16
 801bc7c:	46bd      	mov	sp, r7
 801bc7e:	bd80      	pop	{r7, pc}

0801bc80 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b086      	sub	sp, #24
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	685b      	ldr	r3, [r3, #4]
 801bc8c:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801bc8e:	2300      	movs	r3, #0
 801bc90:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801bc92:	2300      	movs	r3, #0
 801bc94:	60fb      	str	r3, [r7, #12]

    while (current) {
 801bc96:	697b      	ldr	r3, [r7, #20]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d024      	beq.n	801bce6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801bc9c:	697b      	ldr	r3, [r7, #20]
 801bc9e:	681b      	ldr	r3, [r3, #0]
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	d11a      	bne.n	801bcda <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801bca4:	697b      	ldr	r3, [r7, #20]
 801bca6:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801bca8:	693b      	ldr	r3, [r7, #16]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d106      	bne.n	801bcbc <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801bcae:	697b      	ldr	r3, [r7, #20]
 801bcb0:	685b      	ldr	r3, [r3, #4]
 801bcb2:	617b      	str	r3, [r7, #20]
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	697a      	ldr	r2, [r7, #20]
 801bcb8:	605a      	str	r2, [r3, #4]
 801bcba:	e006      	b.n	801bcca <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801bcbc:	697b      	ldr	r3, [r7, #20]
 801bcbe:	685a      	ldr	r2, [r3, #4]
 801bcc0:	693b      	ldr	r3, [r7, #16]
 801bcc2:	605a      	str	r2, [r3, #4]
 801bcc4:	693b      	ldr	r3, [r7, #16]
 801bcc6:	685b      	ldr	r3, [r3, #4]
 801bcc8:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801bcca:	68fb      	ldr	r3, [r7, #12]
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d0e2      	beq.n	801bc96 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801bcd0:	2108      	movs	r1, #8
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	f7ee f82e 	bl	8009d34 <_ZdlPvj>
 801bcd8:	e7dd      	b.n	801bc96 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801bcda:	697b      	ldr	r3, [r7, #20]
 801bcdc:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801bcde:	697b      	ldr	r3, [r7, #20]
 801bce0:	685b      	ldr	r3, [r3, #4]
 801bce2:	617b      	str	r3, [r7, #20]
    while (current) {
 801bce4:	e7d7      	b.n	801bc96 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801bce6:	bf00      	nop
 801bce8:	3718      	adds	r7, #24
 801bcea:	46bd      	mov	sp, r7
 801bcec:	bd80      	pop	{r7, pc}

0801bcee <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801bcee:	b580      	push	{r7, lr}
 801bcf0:	b084      	sub	sp, #16
 801bcf2:	af00      	add	r7, sp, #0
 801bcf4:	6078      	str	r0, [r7, #4]
    while (head_) {
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	685b      	ldr	r3, [r3, #4]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d019      	beq.n	801bd32 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	685b      	ldr	r3, [r3, #4]
 801bd02:	685b      	ldr	r3, [r3, #4]
 801bd04:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	685b      	ldr	r3, [r3, #4]
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d004      	beq.n	801bd1a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801bd10:	681a      	ldr	r2, [r3, #0]
 801bd12:	3204      	adds	r2, #4
 801bd14:	6812      	ldr	r2, [r2, #0]
 801bd16:	4618      	mov	r0, r3
 801bd18:	4790      	blx	r2
        delete head_;
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	685b      	ldr	r3, [r3, #4]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d003      	beq.n	801bd2a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801bd22:	2108      	movs	r1, #8
 801bd24:	4618      	mov	r0, r3
 801bd26:	f7ee f805 	bl	8009d34 <_ZdlPvj>
        head_ = next;
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	68fa      	ldr	r2, [r7, #12]
 801bd2e:	605a      	str	r2, [r3, #4]
    while (head_) {
 801bd30:	e7e1      	b.n	801bcf6 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801bd32:	bf00      	nop
 801bd34:	3710      	adds	r7, #16
 801bd36:	46bd      	mov	sp, r7
 801bd38:	bd80      	pop	{r7, pc}

0801bd3a <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801bd3a:	b580      	push	{r7, lr}
 801bd3c:	b084      	sub	sp, #16
 801bd3e:	af00      	add	r7, sp, #0
 801bd40:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	685b      	ldr	r3, [r3, #4]
 801bd46:	60fb      	str	r3, [r7, #12]
 801bd48:	68fb      	ldr	r3, [r7, #12]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d00c      	beq.n	801bd68 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801bd4e:	68fb      	ldr	r3, [r7, #12]
 801bd50:	681a      	ldr	r2, [r3, #0]
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	33ec      	adds	r3, #236	; 0xec
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	4610      	mov	r0, r2
 801bd5e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	685b      	ldr	r3, [r3, #4]
 801bd64:	60fb      	str	r3, [r7, #12]
 801bd66:	e7ef      	b.n	801bd48 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801bd68:	bf00      	nop
 801bd6a:	3710      	adds	r7, #16
 801bd6c:	46bd      	mov	sp, r7
 801bd6e:	bd80      	pop	{r7, pc}

0801bd70 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	b084      	sub	sp, #16
 801bd74:	af00      	add	r7, sp, #0
 801bd76:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	685b      	ldr	r3, [r3, #4]
 801bd7c:	60fb      	str	r3, [r7, #12]
 801bd7e:	68fb      	ldr	r3, [r7, #12]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d00c      	beq.n	801bd9e <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	681a      	ldr	r2, [r3, #0]
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	33e8      	adds	r3, #232	; 0xe8
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	4610      	mov	r0, r2
 801bd94:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd96:	68fb      	ldr	r3, [r7, #12]
 801bd98:	685b      	ldr	r3, [r3, #4]
 801bd9a:	60fb      	str	r3, [r7, #12]
 801bd9c:	e7ef      	b.n	801bd7e <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801bd9e:	bf00      	nop
 801bda0:	3710      	adds	r7, #16
 801bda2:	46bd      	mov	sp, r7
 801bda4:	bd80      	pop	{r7, pc}

0801bda6 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801bda6:	b580      	push	{r7, lr}
 801bda8:	b084      	sub	sp, #16
 801bdaa:	af00      	add	r7, sp, #0
 801bdac:	6078      	str	r0, [r7, #4]
 801bdae:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	685b      	ldr	r3, [r3, #4]
 801bdb4:	60fb      	str	r3, [r7, #12]
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d00d      	beq.n	801bdd8 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801bdbc:	68fb      	ldr	r3, [r7, #12]
 801bdbe:	681a      	ldr	r2, [r3, #0]
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	681b      	ldr	r3, [r3, #0]
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	33dc      	adds	r3, #220	; 0xdc
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	6839      	ldr	r1, [r7, #0]
 801bdcc:	4610      	mov	r0, r2
 801bdce:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdd0:	68fb      	ldr	r3, [r7, #12]
 801bdd2:	685b      	ldr	r3, [r3, #4]
 801bdd4:	60fb      	str	r3, [r7, #12]
 801bdd6:	e7ee      	b.n	801bdb6 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801bdd8:	bf00      	nop
 801bdda:	3710      	adds	r7, #16
 801bddc:	46bd      	mov	sp, r7
 801bdde:	bd80      	pop	{r7, pc}

0801bde0 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801bde0:	b580      	push	{r7, lr}
 801bde2:	b084      	sub	sp, #16
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	6078      	str	r0, [r7, #4]
 801bde8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	685b      	ldr	r3, [r3, #4]
 801bdee:	60fb      	str	r3, [r7, #12]
 801bdf0:	68fb      	ldr	r3, [r7, #12]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d00d      	beq.n	801be12 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801bdf6:	68fb      	ldr	r3, [r7, #12]
 801bdf8:	681a      	ldr	r2, [r3, #0]
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	681b      	ldr	r3, [r3, #0]
 801be00:	33e0      	adds	r3, #224	; 0xe0
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	6839      	ldr	r1, [r7, #0]
 801be06:	4610      	mov	r0, r2
 801be08:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	685b      	ldr	r3, [r3, #4]
 801be0e:	60fb      	str	r3, [r7, #12]
 801be10:	e7ee      	b.n	801bdf0 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801be12:	bf00      	nop
 801be14:	3710      	adds	r7, #16
 801be16:	46bd      	mov	sp, r7
 801be18:	bd80      	pop	{r7, pc}
	...

0801be1c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801be1c:	b590      	push	{r4, r7, lr}
 801be1e:	b087      	sub	sp, #28
 801be20:	af00      	add	r7, sp, #0
 801be22:	60f8      	str	r0, [r7, #12]
 801be24:	60b9      	str	r1, [r7, #8]
 801be26:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801be28:	68b9      	ldr	r1, [r7, #8]
 801be2a:	68f8      	ldr	r0, [r7, #12]
 801be2c:	f7f0 fb85 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801be30:	f107 0310 	add.w	r3, r7, #16
 801be34:	490f      	ldr	r1, [pc, #60]	; (801be74 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801be36:	4618      	mov	r0, r3
 801be38:	f7f0 fb2b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801be3c:	f107 0310 	add.w	r3, r7, #16
 801be40:	4619      	mov	r1, r3
 801be42:	68f8      	ldr	r0, [r7, #12]
 801be44:	f7f0 fee9 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801be48:	4603      	mov	r3, r0
 801be4a:	461c      	mov	r4, r3
 801be4c:	f107 0310 	add.w	r3, r7, #16
 801be50:	4618      	mov	r0, r3
 801be52:	f7f0 fed6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801be56:	2c00      	cmp	r4, #0
 801be58:	d007      	beq.n	801be6a <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801be5a:	6879      	ldr	r1, [r7, #4]
 801be5c:	68f8      	ldr	r0, [r7, #12]
 801be5e:	f7f0 ff4d 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801be62:	4905      	ldr	r1, [pc, #20]	; (801be78 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801be64:	68f8      	ldr	r0, [r7, #12]
 801be66:	f7f0 ff5b 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801be6a:	bf00      	nop
}
 801be6c:	68f8      	ldr	r0, [r7, #12]
 801be6e:	371c      	adds	r7, #28
 801be70:	46bd      	mov	sp, r7
 801be72:	bd90      	pop	{r4, r7, pc}
 801be74:	08025ad0 	.word	0x08025ad0
 801be78:	08025ad4 	.word	0x08025ad4

0801be7c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801be7c:	b590      	push	{r4, r7, lr}
 801be7e:	b087      	sub	sp, #28
 801be80:	af00      	add	r7, sp, #0
 801be82:	60f8      	str	r0, [r7, #12]
 801be84:	60b9      	str	r1, [r7, #8]
 801be86:	607a      	str	r2, [r7, #4]
 801be88:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801be8a:	68b9      	ldr	r1, [r7, #8]
 801be8c:	68f8      	ldr	r0, [r7, #12]
 801be8e:	f7f0 fb54 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801be92:	f107 0310 	add.w	r3, r7, #16
 801be96:	4912      	ldr	r1, [pc, #72]	; (801bee0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801be98:	4618      	mov	r0, r3
 801be9a:	f7f0 fafa 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801be9e:	f107 0310 	add.w	r3, r7, #16
 801bea2:	4619      	mov	r1, r3
 801bea4:	68f8      	ldr	r0, [r7, #12]
 801bea6:	f7f0 fefd 	bl	800cca4 <_ZneRK12SimpleStringS1_>
 801beaa:	4603      	mov	r3, r0
 801beac:	461c      	mov	r4, r3
 801beae:	f107 0310 	add.w	r3, r7, #16
 801beb2:	4618      	mov	r0, r3
 801beb4:	f7f0 fea5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801beb8:	2c00      	cmp	r4, #0
 801beba:	d003      	beq.n	801bec4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801bebc:	4909      	ldr	r1, [pc, #36]	; (801bee4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801bebe:	68f8      	ldr	r0, [r7, #12]
 801bec0:	f7f0 ff2e 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801bec4:	6879      	ldr	r1, [r7, #4]
 801bec6:	68f8      	ldr	r0, [r7, #12]
 801bec8:	f7f0 ff18 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801becc:	6839      	ldr	r1, [r7, #0]
 801bece:	68f8      	ldr	r0, [r7, #12]
 801bed0:	f7f0 ff14 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    return str;
 801bed4:	bf00      	nop
}
 801bed6:	68f8      	ldr	r0, [r7, #12]
 801bed8:	371c      	adds	r7, #28
 801beda:	46bd      	mov	sp, r7
 801bedc:	bd90      	pop	{r4, r7, pc}
 801bede:	bf00      	nop
 801bee0:	08025ad0 	.word	0x08025ad0
 801bee4:	08025adc 	.word	0x08025adc

0801bee8 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801bee8:	b580      	push	{r7, lr}
 801beea:	b08c      	sub	sp, #48	; 0x30
 801beec:	af00      	add	r7, sp, #0
 801beee:	60f8      	str	r0, [r7, #12]
 801bef0:	60b9      	str	r1, [r7, #8]
 801bef2:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801bef4:	f107 0314 	add.w	r3, r7, #20
 801bef8:	4929      	ldr	r1, [pc, #164]	; (801bfa0 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801befa:	4618      	mov	r0, r3
 801befc:	f7f0 fac9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bf00:	68bb      	ldr	r3, [r7, #8]
 801bf02:	685b      	ldr	r3, [r3, #4]
 801bf04:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d038      	beq.n	801bf7e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801bf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf0e:	681a      	ldr	r2, [r3, #0]
 801bf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf12:	681b      	ldr	r3, [r3, #0]
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	33c0      	adds	r3, #192	; 0xc0
 801bf18:	681b      	ldr	r3, [r3, #0]
 801bf1a:	4610      	mov	r0, r2
 801bf1c:	4798      	blx	r3
 801bf1e:	4603      	mov	r3, r0
 801bf20:	f083 0301 	eor.w	r3, r3, #1
 801bf24:	b2db      	uxtb	r3, r3
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d025      	beq.n	801bf76 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf2c:	6819      	ldr	r1, [r3, #0]
 801bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf30:	681b      	ldr	r3, [r3, #0]
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	33f0      	adds	r3, #240	; 0xf0
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801bf3c:	4610      	mov	r0, r2
 801bf3e:	4798      	blx	r3
 801bf40:	f107 001c 	add.w	r0, r7, #28
 801bf44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bf48:	f107 0114 	add.w	r1, r7, #20
 801bf4c:	687a      	ldr	r2, [r7, #4]
 801bf4e:	f7ff ff95 	bl	801be7c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801bf52:	f107 021c 	add.w	r2, r7, #28
 801bf56:	f107 0314 	add.w	r3, r7, #20
 801bf5a:	4611      	mov	r1, r2
 801bf5c:	4618      	mov	r0, r3
 801bf5e:	f7f0 fb04 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801bf62:	f107 031c 	add.w	r3, r7, #28
 801bf66:	4618      	mov	r0, r3
 801bf68:	f7f0 fe4b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801bf6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bf70:	4618      	mov	r0, r3
 801bf72:	f7f0 fe46 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf78:	685b      	ldr	r3, [r3, #4]
 801bf7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf7c:	e7c3      	b.n	801bf06 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	f107 0114 	add.w	r1, r7, #20
 801bf84:	687a      	ldr	r2, [r7, #4]
 801bf86:	4618      	mov	r0, r3
 801bf88:	f7ff ff48 	bl	801be1c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801bf8c:	f107 0314 	add.w	r3, r7, #20
 801bf90:	4618      	mov	r0, r3
 801bf92:	f7f0 fe36 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801bf96:	bf00      	nop
}
 801bf98:	68f8      	ldr	r0, [r7, #12]
 801bf9a:	3730      	adds	r7, #48	; 0x30
 801bf9c:	46bd      	mov	sp, r7
 801bf9e:	bd80      	pop	{r7, pc}
 801bfa0:	08025ad0 	.word	0x08025ad0

0801bfa4 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801bfa4:	b580      	push	{r7, lr}
 801bfa6:	b08c      	sub	sp, #48	; 0x30
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	60f8      	str	r0, [r7, #12]
 801bfac:	60b9      	str	r1, [r7, #8]
 801bfae:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801bfb0:	f107 0314 	add.w	r3, r7, #20
 801bfb4:	4928      	ldr	r1, [pc, #160]	; (801c058 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801bfb6:	4618      	mov	r0, r3
 801bfb8:	f7f0 fa6b 	bl	800c492 <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bfbc:	68bb      	ldr	r3, [r7, #8]
 801bfbe:	685b      	ldr	r3, [r3, #4]
 801bfc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d035      	beq.n	801c034 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfca:	681a      	ldr	r2, [r3, #0]
 801bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	33c0      	adds	r3, #192	; 0xc0
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	4610      	mov	r0, r2
 801bfd8:	4798      	blx	r3
 801bfda:	4603      	mov	r3, r0
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d025      	beq.n	801c02c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801bfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfe2:	6819      	ldr	r1, [r3, #0]
 801bfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	33f0      	adds	r3, #240	; 0xf0
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801bff2:	4610      	mov	r0, r2
 801bff4:	4798      	blx	r3
 801bff6:	f107 001c 	add.w	r0, r7, #28
 801bffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bffe:	f107 0114 	add.w	r1, r7, #20
 801c002:	687a      	ldr	r2, [r7, #4]
 801c004:	f7ff ff3a 	bl	801be7c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c008:	f107 021c 	add.w	r2, r7, #28
 801c00c:	f107 0314 	add.w	r3, r7, #20
 801c010:	4611      	mov	r1, r2
 801c012:	4618      	mov	r0, r3
 801c014:	f7f0 faa9 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801c018:	f107 031c 	add.w	r3, r7, #28
 801c01c:	4618      	mov	r0, r3
 801c01e:	f7f0 fdf0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801c022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c026:	4618      	mov	r0, r3
 801c028:	f7f0 fdeb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c02e:	685b      	ldr	r3, [r3, #4]
 801c030:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c032:	e7c6      	b.n	801bfc2 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	f107 0114 	add.w	r1, r7, #20
 801c03a:	687a      	ldr	r2, [r7, #4]
 801c03c:	4618      	mov	r0, r3
 801c03e:	f7ff feed 	bl	801be1c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c042:	f107 0314 	add.w	r3, r7, #20
 801c046:	4618      	mov	r0, r3
 801c048:	f7f0 fddb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c04c:	bf00      	nop
}
 801c04e:	68f8      	ldr	r0, [r7, #12]
 801c050:	3730      	adds	r7, #48	; 0x30
 801c052:	46bd      	mov	sp, r7
 801c054:	bd80      	pop	{r7, pc}
 801c056:	bf00      	nop
 801c058:	08025ad0 	.word	0x08025ad0

0801c05c <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801c05c:	b580      	push	{r7, lr}
 801c05e:	b08e      	sub	sp, #56	; 0x38
 801c060:	af00      	add	r7, sp, #0
 801c062:	6078      	str	r0, [r7, #4]
 801c064:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801c066:	f107 030c 	add.w	r3, r7, #12
 801c06a:	4936      	ldr	r1, [pc, #216]	; (801c144 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c06c:	4618      	mov	r0, r3
 801c06e:	f7f0 fa10 	bl	800c492 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c072:	683b      	ldr	r3, [r7, #0]
 801c074:	685b      	ldr	r3, [r3, #4]
 801c076:	637b      	str	r3, [r7, #52]	; 0x34
 801c078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d044      	beq.n	801c108 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801c07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c080:	681a      	ldr	r2, [r3, #0]
 801c082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	33cc      	adds	r3, #204	; 0xcc
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	4610      	mov	r0, r2
 801c08e:	4798      	blx	r3
 801c090:	4603      	mov	r3, r0
 801c092:	f083 0301 	eor.w	r3, r3, #1
 801c096:	b2db      	uxtb	r3, r3
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d031      	beq.n	801c100 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801c09c:	f107 031c 	add.w	r3, r7, #28
 801c0a0:	4928      	ldr	r1, [pc, #160]	; (801c144 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c0a2:	4618      	mov	r0, r3
 801c0a4:	f7f0 f9f5 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0aa:	6819      	ldr	r1, [r3, #0]
 801c0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	33f4      	adds	r3, #244	; 0xf4
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c0ba:	4610      	mov	r0, r2
 801c0bc:	4798      	blx	r3
 801c0be:	f107 0014 	add.w	r0, r7, #20
 801c0c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c0c6:	f107 021c 	add.w	r2, r7, #28
 801c0ca:	f107 010c 	add.w	r1, r7, #12
 801c0ce:	f7ff fed5 	bl	801be7c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c0d2:	f107 0214 	add.w	r2, r7, #20
 801c0d6:	f107 030c 	add.w	r3, r7, #12
 801c0da:	4611      	mov	r1, r2
 801c0dc:	4618      	mov	r0, r3
 801c0de:	f7f0 fa44 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801c0e2:	f107 0314 	add.w	r3, r7, #20
 801c0e6:	4618      	mov	r0, r3
 801c0e8:	f7f0 fd8b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801c0ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c0f0:	4618      	mov	r0, r3
 801c0f2:	f7f0 fd86 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801c0f6:	f107 031c 	add.w	r3, r7, #28
 801c0fa:	4618      	mov	r0, r3
 801c0fc:	f7f0 fd81 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c102:	685b      	ldr	r3, [r3, #4]
 801c104:	637b      	str	r3, [r7, #52]	; 0x34
 801c106:	e7b7      	b.n	801c078 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801c108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c10c:	490d      	ldr	r1, [pc, #52]	; (801c144 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c10e:	4618      	mov	r0, r3
 801c110:	f7f0 f9bf 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801c11a:	f107 010c 	add.w	r1, r7, #12
 801c11e:	4618      	mov	r0, r3
 801c120:	f7ff fe7c 	bl	801be1c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801c124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c128:	4618      	mov	r0, r3
 801c12a:	f7f0 fd6a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801c12e:	f107 030c 	add.w	r3, r7, #12
 801c132:	4618      	mov	r0, r3
 801c134:	f7f0 fd65 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801c138:	bf00      	nop
}
 801c13a:	6878      	ldr	r0, [r7, #4]
 801c13c:	3738      	adds	r7, #56	; 0x38
 801c13e:	46bd      	mov	sp, r7
 801c140:	bd80      	pop	{r7, pc}
 801c142:	bf00      	nop
 801c144:	08025ad0 	.word	0x08025ad0

0801c148 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801c148:	b580      	push	{r7, lr}
 801c14a:	b084      	sub	sp, #16
 801c14c:	af00      	add	r7, sp, #0
 801c14e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	685b      	ldr	r3, [r3, #4]
 801c154:	60fb      	str	r3, [r7, #12]
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d014      	beq.n	801c186 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801c15c:	68fb      	ldr	r3, [r7, #12]
 801c15e:	681a      	ldr	r2, [r3, #0]
 801c160:	68fb      	ldr	r3, [r7, #12]
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	33d0      	adds	r3, #208	; 0xd0
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	4610      	mov	r0, r2
 801c16c:	4798      	blx	r3
 801c16e:	4603      	mov	r3, r0
 801c170:	f083 0301 	eor.w	r3, r3, #1
 801c174:	b2db      	uxtb	r3, r3
 801c176:	2b00      	cmp	r3, #0
 801c178:	d001      	beq.n	801c17e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801c17a:	2301      	movs	r3, #1
 801c17c:	e004      	b.n	801c188 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	685b      	ldr	r3, [r3, #4]
 801c182:	60fb      	str	r3, [r7, #12]
 801c184:	e7e7      	b.n	801c156 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801c186:	2300      	movs	r3, #0
}
 801c188:	4618      	mov	r0, r3
 801c18a:	3710      	adds	r7, #16
 801c18c:	46bd      	mov	sp, r7
 801c18e:	bd80      	pop	{r7, pc}

0801c190 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801c190:	b480      	push	{r7}
 801c192:	b083      	sub	sp, #12
 801c194:	af00      	add	r7, sp, #0
 801c196:	6078      	str	r0, [r7, #4]
 801c198:	460b      	mov	r3, r1
 801c19a:	70fb      	strb	r3, [r7, #3]
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	78fa      	ldrb	r2, [r7, #3]
 801c1a0:	711a      	strb	r2, [r3, #4]
 801c1a2:	bf00      	nop
 801c1a4:	370c      	adds	r7, #12
 801c1a6:	46bd      	mov	sp, r7
 801c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ac:	4770      	bx	lr
	...

0801c1b0 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801c1b0:	b580      	push	{r7, lr}
 801c1b2:	b082      	sub	sp, #8
 801c1b4:	af00      	add	r7, sp, #0
 801c1b6:	6078      	str	r0, [r7, #4]
 801c1b8:	460b      	mov	r3, r1
 801c1ba:	70fb      	strb	r3, [r7, #3]
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	4618      	mov	r0, r3
 801c1c0:	f7ed ff6a 	bl	800a098 <_ZN14TestTerminatorC1Ev>
 801c1c4:	4a05      	ldr	r2, [pc, #20]	; (801c1dc <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	601a      	str	r2, [r3, #0]
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	78fa      	ldrb	r2, [r7, #3]
 801c1ce:	711a      	strb	r2, [r3, #4]
    {
    }
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	3708      	adds	r7, #8
 801c1d6:	46bd      	mov	sp, r7
 801c1d8:	bd80      	pop	{r7, pc}
 801c1da:	bf00      	nop
 801c1dc:	08028c40 	.word	0x08028c40

0801c1e0 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801c1e0:	b580      	push	{r7, lr}
 801c1e2:	b082      	sub	sp, #8
 801c1e4:	af00      	add	r7, sp, #0
 801c1e6:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	791b      	ldrb	r3, [r3, #4]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d001      	beq.n	801c1f4 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801c1f0:	f7f6 f9fe 	bl	80125f0 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801c1f4:	f7f7 fd40 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c1f8:	4603      	mov	r3, r0
 801c1fa:	681a      	ldr	r2, [r3, #0]
 801c1fc:	6812      	ldr	r2, [r2, #0]
 801c1fe:	4618      	mov	r0, r3
 801c200:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801c202:	bf00      	nop
 801c204:	3708      	adds	r7, #8
 801c206:	46bd      	mov	sp, r7
 801c208:	bd80      	pop	{r7, pc}
	...

0801c20c <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b082      	sub	sp, #8
 801c210:	af00      	add	r7, sp, #0
 801c212:	6078      	str	r0, [r7, #4]
    {
 801c214:	4a05      	ldr	r2, [pc, #20]	; (801c22c <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	601a      	str	r2, [r3, #0]
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	4618      	mov	r0, r3
 801c21e:	f7f7 fdbb 	bl	8013d98 <_ZN14TestTerminatorD1Ev>
    }
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	4618      	mov	r0, r3
 801c226:	3708      	adds	r7, #8
 801c228:	46bd      	mov	sp, r7
 801c22a:	bd80      	pop	{r7, pc}
 801c22c:	08028c40 	.word	0x08028c40

0801c230 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801c230:	b580      	push	{r7, lr}
 801c232:	b082      	sub	sp, #8
 801c234:	af00      	add	r7, sp, #0
 801c236:	6078      	str	r0, [r7, #4]
    }
 801c238:	6878      	ldr	r0, [r7, #4]
 801c23a:	f7ff ffe7 	bl	801c20c <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801c23e:	2108      	movs	r1, #8
 801c240:	6878      	ldr	r0, [r7, #4]
 801c242:	f7ed fd77 	bl	8009d34 <_ZdlPvj>
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	4618      	mov	r0, r3
 801c24a:	3708      	adds	r7, #8
 801c24c:	46bd      	mov	sp, r7
 801c24e:	bd80      	pop	{r7, pc}

0801c250 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801c250:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c252:	b085      	sub	sp, #20
 801c254:	af00      	add	r7, sp, #0
 801c256:	6078      	str	r0, [r7, #4]
 801c258:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	330c      	adds	r3, #12
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	6878      	ldr	r0, [r7, #4]
 801c264:	4798      	blx	r3
 801c266:	4603      	mov	r3, r0
 801c268:	681a      	ldr	r2, [r3, #0]
 801c26a:	321c      	adds	r2, #28
 801c26c:	6812      	ldr	r2, [r2, #0]
 801c26e:	4618      	mov	r0, r3
 801c270:	4790      	blx	r2
 801c272:	4603      	mov	r3, r0
 801c274:	f083 0301 	eor.w	r3, r3, #1
 801c278:	b2db      	uxtb	r3, r3
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d01d      	beq.n	801c2ba <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	681b      	ldr	r3, [r3, #0]
 801c282:	330c      	adds	r3, #12
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	6878      	ldr	r0, [r7, #4]
 801c288:	4798      	blx	r3
 801c28a:	4604      	mov	r4, r0
 801c28c:	6823      	ldr	r3, [r4, #0]
 801c28e:	339c      	adds	r3, #156	; 0x9c
 801c290:	681d      	ldr	r5, [r3, #0]
 801c292:	683e      	ldr	r6, [r7, #0]
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	791a      	ldrb	r2, [r3, #4]
 801c298:	f107 0308 	add.w	r3, r7, #8
 801c29c:	4611      	mov	r1, r2
 801c29e:	4618      	mov	r0, r3
 801c2a0:	f7ff ff86 	bl	801c1b0 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801c2a4:	f107 0308 	add.w	r3, r7, #8
 801c2a8:	461a      	mov	r2, r3
 801c2aa:	4631      	mov	r1, r6
 801c2ac:	4620      	mov	r0, r4
 801c2ae:	47a8      	blx	r5
 801c2b0:	f107 0308 	add.w	r3, r7, #8
 801c2b4:	4618      	mov	r0, r3
 801c2b6:	f7ff ffa9 	bl	801c20c <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801c2ba:	bf00      	nop
 801c2bc:	3714      	adds	r7, #20
 801c2be:	46bd      	mov	sp, r7
 801c2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c2c2 <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801c2c2:	b580      	push	{r7, lr}
 801c2c4:	b082      	sub	sp, #8
 801c2c6:	af00      	add	r7, sp, #0
 801c2c8:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801c2ca:	f7f7 fcc5 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801c2ce:	4603      	mov	r3, r0
}
 801c2d0:	4618      	mov	r0, r3
 801c2d2:	3708      	adds	r7, #8
 801c2d4:	46bd      	mov	sp, r7
 801c2d6:	bd80      	pop	{r7, pc}

0801c2d8 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801c2d8:	b590      	push	{r4, r7, lr}
 801c2da:	b085      	sub	sp, #20
 801c2dc:	af00      	add	r7, sp, #0
 801c2de:	6078      	str	r0, [r7, #4]
 801c2e0:	6039      	str	r1, [r7, #0]
 801c2e2:	687c      	ldr	r4, [r7, #4]
 801c2e4:	f107 0308 	add.w	r3, r7, #8
 801c2e8:	490b      	ldr	r1, [pc, #44]	; (801c318 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801c2ea:	4618      	mov	r0, r3
 801c2ec:	f7f0 f8d1 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c2f0:	f107 0308 	add.w	r3, r7, #8
 801c2f4:	461a      	mov	r2, r3
 801c2f6:	6839      	ldr	r1, [r7, #0]
 801c2f8:	4620      	mov	r0, r4
 801c2fa:	f7f1 ff29 	bl	800e150 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801c2fe:	f107 0308 	add.w	r3, r7, #8
 801c302:	4618      	mov	r0, r3
 801c304:	f7f0 fc7d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801c308:	4a04      	ldr	r2, [pc, #16]	; (801c31c <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	601a      	str	r2, [r3, #0]
{
}
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	4618      	mov	r0, r3
 801c312:	3714      	adds	r7, #20
 801c314:	46bd      	mov	sp, r7
 801c316:	bd90      	pop	{r4, r7, pc}
 801c318:	08025ae0 	.word	0x08025ae0
 801c31c:	08027bcc 	.word	0x08027bcc

0801c320 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801c320:	b5b0      	push	{r4, r5, r7, lr}
 801c322:	b08a      	sub	sp, #40	; 0x28
 801c324:	af00      	add	r7, sp, #0
 801c326:	6078      	str	r0, [r7, #4]
 801c328:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	332c      	adds	r3, #44	; 0x2c
 801c32e:	492b      	ldr	r1, [pc, #172]	; (801c3dc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801c330:	4618      	mov	r0, r3
 801c332:	f7f0 fcf5 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801c33c:	683b      	ldr	r3, [r7, #0]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	337c      	adds	r3, #124	; 0x7c
 801c342:	681c      	ldr	r4, [r3, #0]
 801c344:	f107 0310 	add.w	r3, r7, #16
 801c348:	4925      	ldr	r1, [pc, #148]	; (801c3e0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801c34a:	4618      	mov	r0, r3
 801c34c:	f7f0 f8a1 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c350:	f107 0308 	add.w	r3, r7, #8
 801c354:	f107 0210 	add.w	r2, r7, #16
 801c358:	6839      	ldr	r1, [r7, #0]
 801c35a:	4618      	mov	r0, r3
 801c35c:	47a0      	blx	r4
 801c35e:	f107 0308 	add.w	r3, r7, #8
 801c362:	4619      	mov	r1, r3
 801c364:	4628      	mov	r0, r5
 801c366:	f7f0 fcc9 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801c36a:	f107 0308 	add.w	r3, r7, #8
 801c36e:	4618      	mov	r0, r3
 801c370:	f7f0 fc47 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801c374:	f107 0310 	add.w	r3, r7, #16
 801c378:	4618      	mov	r0, r3
 801c37a:	f7f0 fc42 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	332c      	adds	r3, #44	; 0x2c
 801c382:	4918      	ldr	r1, [pc, #96]	; (801c3e4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801c384:	4618      	mov	r0, r3
 801c386:	f7f0 fccb 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801c390:	683b      	ldr	r3, [r7, #0]
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	3380      	adds	r3, #128	; 0x80
 801c396:	681c      	ldr	r4, [r3, #0]
 801c398:	f107 0320 	add.w	r3, r7, #32
 801c39c:	4910      	ldr	r1, [pc, #64]	; (801c3e0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801c39e:	4618      	mov	r0, r3
 801c3a0:	f7f0 f877 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c3a4:	f107 0318 	add.w	r3, r7, #24
 801c3a8:	f107 0220 	add.w	r2, r7, #32
 801c3ac:	6839      	ldr	r1, [r7, #0]
 801c3ae:	4618      	mov	r0, r3
 801c3b0:	47a0      	blx	r4
 801c3b2:	f107 0318 	add.w	r3, r7, #24
 801c3b6:	4619      	mov	r1, r3
 801c3b8:	4628      	mov	r0, r5
 801c3ba:	f7f0 fc9f 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801c3be:	f107 0318 	add.w	r3, r7, #24
 801c3c2:	4618      	mov	r0, r3
 801c3c4:	f7f0 fc1d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801c3c8:	f107 0320 	add.w	r3, r7, #32
 801c3cc:	4618      	mov	r0, r3
 801c3ce:	f7f0 fc18 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801c3d2:	bf00      	nop
 801c3d4:	3728      	adds	r7, #40	; 0x28
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	bdb0      	pop	{r4, r5, r7, pc}
 801c3da:	bf00      	nop
 801c3dc:	08025b30 	.word	0x08025b30
 801c3e0:	08025b5c 	.word	0x08025b5c
 801c3e4:	08025b60 	.word	0x08025b60

0801c3e8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801c3e8:	b590      	push	{r4, r7, lr}
 801c3ea:	b08f      	sub	sp, #60	; 0x3c
 801c3ec:	af00      	add	r7, sp, #0
 801c3ee:	60f8      	str	r0, [r7, #12]
 801c3f0:	60b9      	str	r1, [r7, #8]
 801c3f2:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801c3f4:	f107 0310 	add.w	r3, r7, #16
 801c3f8:	4618      	mov	r0, r3
 801c3fa:	f7ff f877 	bl	801b4ec <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801c3fe:	f107 0310 	add.w	r3, r7, #16
 801c402:	687a      	ldr	r2, [r7, #4]
 801c404:	68b9      	ldr	r1, [r7, #8]
 801c406:	4618      	mov	r0, r3
 801c408:	f7ff fa16 	bl	801b838 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	332c      	adds	r3, #44	; 0x2c
 801c410:	4937      	ldr	r1, [pc, #220]	; (801c4f0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801c412:	4618      	mov	r0, r3
 801c414:	f7f0 fc84 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	332c      	adds	r3, #44	; 0x2c
 801c41c:	68b9      	ldr	r1, [r7, #8]
 801c41e:	4618      	mov	r0, r3
 801c420:	f7f0 fc6c 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c424:	68fb      	ldr	r3, [r7, #12]
 801c426:	332c      	adds	r3, #44	; 0x2c
 801c428:	4932      	ldr	r1, [pc, #200]	; (801c4f4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801c42a:	4618      	mov	r0, r3
 801c42c:	f7f0 fc78 	bl	800cd20 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c436:	f107 0320 	add.w	r3, r7, #32
 801c43a:	492f      	ldr	r1, [pc, #188]	; (801c4f8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801c43c:	4618      	mov	r0, r3
 801c43e:	f7f0 f828 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c442:	f107 0318 	add.w	r3, r7, #24
 801c446:	f107 0220 	add.w	r2, r7, #32
 801c44a:	f107 0110 	add.w	r1, r7, #16
 801c44e:	4618      	mov	r0, r3
 801c450:	f7ff fd4a 	bl	801bee8 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801c454:	f107 0318 	add.w	r3, r7, #24
 801c458:	4619      	mov	r1, r3
 801c45a:	4620      	mov	r0, r4
 801c45c:	f7f0 fc4e 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801c460:	f107 0318 	add.w	r3, r7, #24
 801c464:	4618      	mov	r0, r3
 801c466:	f7f0 fbcc 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801c46a:	f107 0320 	add.w	r3, r7, #32
 801c46e:	4618      	mov	r0, r3
 801c470:	f7f0 fbc7 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	332c      	adds	r3, #44	; 0x2c
 801c478:	4920      	ldr	r1, [pc, #128]	; (801c4fc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801c47a:	4618      	mov	r0, r3
 801c47c:	f7f0 fc50 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	332c      	adds	r3, #44	; 0x2c
 801c484:	68b9      	ldr	r1, [r7, #8]
 801c486:	4618      	mov	r0, r3
 801c488:	f7f0 fc38 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	332c      	adds	r3, #44	; 0x2c
 801c490:	4918      	ldr	r1, [pc, #96]	; (801c4f4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801c492:	4618      	mov	r0, r3
 801c494:	f7f0 fc44 	bl	800cd20 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c49e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c4a2:	4915      	ldr	r1, [pc, #84]	; (801c4f8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801c4a4:	4618      	mov	r0, r3
 801c4a6:	f7ef fff4 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c4aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c4ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c4b2:	f107 0110 	add.w	r1, r7, #16
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	f7ff fd74 	bl	801bfa4 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801c4bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c4c0:	4619      	mov	r1, r3
 801c4c2:	4620      	mov	r0, r4
 801c4c4:	f7f0 fc1a 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801c4c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c4cc:	4618      	mov	r0, r3
 801c4ce:	f7f0 fb98 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801c4d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c4d6:	4618      	mov	r0, r3
 801c4d8:	f7f0 fb93 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801c4dc:	f107 0310 	add.w	r3, r7, #16
 801c4e0:	4618      	mov	r0, r3
 801c4e2:	f7ff f817 	bl	801b514 <_ZN21MockExpectedCallsListD1Ev>
}
 801c4e6:	bf00      	nop
 801c4e8:	373c      	adds	r7, #60	; 0x3c
 801c4ea:	46bd      	mov	sp, r7
 801c4ec:	bd90      	pop	{r4, r7, pc}
 801c4ee:	bf00      	nop
 801c4f0:	08025b88 	.word	0x08025b88
 801c4f4:	08025bc8 	.word	0x08025bc8
 801c4f8:	08025b5c 	.word	0x08025b5c
 801c4fc:	08025bcc 	.word	0x08025bcc

0801c500 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c500:	b590      	push	{r4, r7, lr}
 801c502:	b087      	sub	sp, #28
 801c504:	af00      	add	r7, sp, #0
 801c506:	60f8      	str	r0, [r7, #12]
 801c508:	60b9      	str	r1, [r7, #8]
 801c50a:	607a      	str	r2, [r7, #4]
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	68b9      	ldr	r1, [r7, #8]
 801c510:	4618      	mov	r0, r3
 801c512:	f7ff fee1 	bl	801c2d8 <_ZN11MockFailureC1EP10UtestShell>
 801c516:	4a10      	ldr	r2, [pc, #64]	; (801c558 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c522:	f107 0310 	add.w	r3, r7, #16
 801c526:	490d      	ldr	r1, [pc, #52]	; (801c55c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801c528:	4618      	mov	r0, r3
 801c52a:	f7ef ffb2 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c52e:	f107 0310 	add.w	r3, r7, #16
 801c532:	4619      	mov	r1, r3
 801c534:	4620      	mov	r0, r4
 801c536:	f7f0 f818 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801c53a:	f107 0310 	add.w	r3, r7, #16
 801c53e:	4618      	mov	r0, r3
 801c540:	f7f0 fb5f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	6879      	ldr	r1, [r7, #4]
 801c548:	4618      	mov	r0, r3
 801c54a:	f7ff fee9 	bl	801c320 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	4618      	mov	r0, r3
 801c552:	371c      	adds	r7, #28
 801c554:	46bd      	mov	sp, r7
 801c556:	bd90      	pop	{r4, r7, pc}
 801c558:	08027ba0 	.word	0x08027ba0
 801c55c:	08025c08 	.word	0x08025c08

0801c560 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c560:	b590      	push	{r4, r7, lr}
 801c562:	b08d      	sub	sp, #52	; 0x34
 801c564:	af00      	add	r7, sp, #0
 801c566:	60f8      	str	r0, [r7, #12]
 801c568:	60b9      	str	r1, [r7, #8]
 801c56a:	607a      	str	r2, [r7, #4]
 801c56c:	603b      	str	r3, [r7, #0]
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	68b9      	ldr	r1, [r7, #8]
 801c572:	4618      	mov	r0, r3
 801c574:	f7ff feb0 	bl	801c2d8 <_ZN11MockFailureC1EP10UtestShell>
 801c578:	4a2f      	ldr	r2, [pc, #188]	; (801c638 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801c57a:	68fb      	ldr	r3, [r7, #12]
 801c57c:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801c57e:	683b      	ldr	r3, [r7, #0]
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	3310      	adds	r3, #16
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	6879      	ldr	r1, [r7, #4]
 801c588:	6838      	ldr	r0, [r7, #0]
 801c58a:	4798      	blx	r3
 801c58c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801c58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c590:	2b00      	cmp	r3, #0
 801c592:	d027      	beq.n	801c5e4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c596:	1c5a      	adds	r2, r3, #1
 801c598:	f107 0314 	add.w	r3, r7, #20
 801c59c:	4611      	mov	r1, r2
 801c59e:	4618      	mov	r0, r3
 801c5a0:	f7f1 fa00 	bl	800d9a4 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c5aa:	f107 0314 	add.w	r3, r7, #20
 801c5ae:	4618      	mov	r0, r3
 801c5b0:	f7f0 fafa 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801c5b4:	4602      	mov	r2, r0
 801c5b6:	f107 031c 	add.w	r3, r7, #28
 801c5ba:	4920      	ldr	r1, [pc, #128]	; (801c63c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801c5bc:	4618      	mov	r0, r3
 801c5be:	f7f1 f827 	bl	800d610 <_Z16StringFromFormatPKcz>
 801c5c2:	f107 031c 	add.w	r3, r7, #28
 801c5c6:	4619      	mov	r1, r3
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	f7ef ffce 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801c5ce:	f107 031c 	add.w	r3, r7, #28
 801c5d2:	4618      	mov	r0, r3
 801c5d4:	f7f0 fb15 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801c5d8:	f107 0314 	add.w	r3, r7, #20
 801c5dc:	4618      	mov	r0, r3
 801c5de:	f7f0 fb10 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801c5e2:	e013      	b.n	801c60c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c5ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c5ee:	4914      	ldr	r1, [pc, #80]	; (801c640 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	f7ef ff4e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c5f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c5fa:	4619      	mov	r1, r3
 801c5fc:	4620      	mov	r0, r4
 801c5fe:	f7ef ffb4 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801c602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c606:	4618      	mov	r0, r3
 801c608:	f7f0 fafb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	332c      	adds	r3, #44	; 0x2c
 801c610:	6879      	ldr	r1, [r7, #4]
 801c612:	4618      	mov	r0, r3
 801c614:	f7f0 fb72 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	332c      	adds	r3, #44	; 0x2c
 801c61c:	4909      	ldr	r1, [pc, #36]	; (801c644 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801c61e:	4618      	mov	r0, r3
 801c620:	f7f0 fb7e 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	6839      	ldr	r1, [r7, #0]
 801c628:	4618      	mov	r0, r3
 801c62a:	f7ff fe79 	bl	801c320 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	4618      	mov	r0, r3
 801c632:	3734      	adds	r7, #52	; 0x34
 801c634:	46bd      	mov	sp, r7
 801c636:	bd90      	pop	{r4, r7, pc}
 801c638:	08028540 	.word	0x08028540
 801c63c:	08025c38 	.word	0x08025c38
 801c640:	08025c74 	.word	0x08025c74
 801c644:	08025bc8 	.word	0x08025bc8

0801c648 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c648:	b590      	push	{r4, r7, lr}
 801c64a:	b089      	sub	sp, #36	; 0x24
 801c64c:	af00      	add	r7, sp, #0
 801c64e:	60f8      	str	r0, [r7, #12]
 801c650:	60b9      	str	r1, [r7, #8]
 801c652:	607a      	str	r2, [r7, #4]
 801c654:	68fb      	ldr	r3, [r7, #12]
 801c656:	68b9      	ldr	r1, [r7, #8]
 801c658:	4618      	mov	r0, r3
 801c65a:	f7ff fe3d 	bl	801c2d8 <_ZN11MockFailureC1EP10UtestShell>
 801c65e:	4a1f      	ldr	r2, [pc, #124]	; (801c6dc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801c664:	f107 0310 	add.w	r3, r7, #16
 801c668:	4618      	mov	r0, r3
 801c66a:	f7fe ff3f 	bl	801b4ec <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801c66e:	f107 0310 	add.w	r3, r7, #16
 801c672:	6879      	ldr	r1, [r7, #4]
 801c674:	4618      	mov	r0, r3
 801c676:	f7ff f909 	bl	801b88c <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801c67a:	f107 0310 	add.w	r3, r7, #16
 801c67e:	4618      	mov	r0, r3
 801c680:	f7ff f94c 	bl	801b91c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c68a:	f107 0318 	add.w	r3, r7, #24
 801c68e:	4914      	ldr	r1, [pc, #80]	; (801c6e0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801c690:	4618      	mov	r0, r3
 801c692:	f7ef fefe 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c696:	f107 0318 	add.w	r3, r7, #24
 801c69a:	4619      	mov	r1, r3
 801c69c:	4620      	mov	r0, r4
 801c69e:	f7ef ff64 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801c6a2:	f107 0318 	add.w	r3, r7, #24
 801c6a6:	4618      	mov	r0, r3
 801c6a8:	f7f0 faab 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	332c      	adds	r3, #44	; 0x2c
 801c6b0:	490c      	ldr	r1, [pc, #48]	; (801c6e4 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	f7f0 fb34 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	f107 0210 	add.w	r2, r7, #16
 801c6be:	4611      	mov	r1, r2
 801c6c0:	4618      	mov	r0, r3
 801c6c2:	f7ff fe2d 	bl	801c320 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801c6c6:	f107 0310 	add.w	r3, r7, #16
 801c6ca:	4618      	mov	r0, r3
 801c6cc:	f7fe ff22 	bl	801b514 <_ZN21MockExpectedCallsListD1Ev>
}
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	3724      	adds	r7, #36	; 0x24
 801c6d6:	46bd      	mov	sp, r7
 801c6d8:	bd90      	pop	{r4, r7, pc}
 801c6da:	bf00      	nop
 801c6dc:	08027b74 	.word	0x08027b74
 801c6e0:	08025ca0 	.word	0x08025ca0
 801c6e4:	08025bc8 	.word	0x08025bc8

0801c6e8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801c6e8:	b590      	push	{r4, r7, lr}
 801c6ea:	b099      	sub	sp, #100	; 0x64
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	60f8      	str	r0, [r7, #12]
 801c6f0:	60b9      	str	r1, [r7, #8]
 801c6f2:	607a      	str	r2, [r7, #4]
 801c6f4:	603b      	str	r3, [r7, #0]
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	68b9      	ldr	r1, [r7, #8]
 801c6fa:	4618      	mov	r0, r3
 801c6fc:	f7ff fdec 	bl	801c2d8 <_ZN11MockFailureC1EP10UtestShell>
 801c700:	4a9e      	ldr	r2, [pc, #632]	; (801c97c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801c706:	f107 0310 	add.w	r3, r7, #16
 801c70a:	4618      	mov	r0, r3
 801c70c:	f7fe feee 	bl	801b4ec <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801c710:	f107 0310 	add.w	r3, r7, #16
 801c714:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c716:	6879      	ldr	r1, [r7, #4]
 801c718:	4618      	mov	r0, r3
 801c71a:	f7ff f88d 	bl	801b838 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801c71e:	683b      	ldr	r3, [r7, #0]
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	335c      	adds	r3, #92	; 0x5c
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	f107 0218 	add.w	r2, r7, #24
 801c72a:	6839      	ldr	r1, [r7, #0]
 801c72c:	4610      	mov	r0, r2
 801c72e:	4798      	blx	r3
 801c730:	f107 0218 	add.w	r2, r7, #24
 801c734:	f107 0310 	add.w	r3, r7, #16
 801c738:	4611      	mov	r1, r2
 801c73a:	4618      	mov	r0, r3
 801c73c:	f7ff f948 	bl	801b9d0 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801c740:	f107 0318 	add.w	r3, r7, #24
 801c744:	4618      	mov	r0, r3
 801c746:	f7f0 fa5c 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801c74a:	f107 0310 	add.w	r3, r7, #16
 801c74e:	4618      	mov	r0, r3
 801c750:	f7fe ff4d 	bl	801b5ee <_ZNK21MockExpectedCallsList7isEmptyEv>
 801c754:	4603      	mov	r3, r0
 801c756:	2b00      	cmp	r3, #0
 801c758:	d037      	beq.n	801c7ca <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c760:	f107 0320 	add.w	r3, r7, #32
 801c764:	4986      	ldr	r1, [pc, #536]	; (801c980 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801c766:	4618      	mov	r0, r3
 801c768:	f7ef fe93 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c76c:	f107 0320 	add.w	r3, r7, #32
 801c770:	4619      	mov	r1, r3
 801c772:	4620      	mov	r0, r4
 801c774:	f7ef fef9 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801c778:	f107 0320 	add.w	r3, r7, #32
 801c77c:	4618      	mov	r0, r3
 801c77e:	f7f0 fa40 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	332c      	adds	r3, #44	; 0x2c
 801c786:	6879      	ldr	r1, [r7, #4]
 801c788:	4618      	mov	r0, r3
 801c78a:	f7f0 fab7 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	332c      	adds	r3, #44	; 0x2c
 801c792:	497c      	ldr	r1, [pc, #496]	; (801c984 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801c794:	4618      	mov	r0, r3
 801c796:	f7f0 fac3 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c7a0:	683b      	ldr	r3, [r7, #0]
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	335c      	adds	r3, #92	; 0x5c
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c7ac:	6839      	ldr	r1, [r7, #0]
 801c7ae:	4610      	mov	r0, r2
 801c7b0:	4798      	blx	r3
 801c7b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c7b6:	4619      	mov	r1, r3
 801c7b8:	4620      	mov	r0, r4
 801c7ba:	f7f0 fa9f 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801c7be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c7c2:	4618      	mov	r0, r3
 801c7c4:	f7f0 fa1d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801c7c8:	e056      	b.n	801c878 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c7d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7d4:	496c      	ldr	r1, [pc, #432]	; (801c988 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801c7d6:	4618      	mov	r0, r3
 801c7d8:	f7ef fe5b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801c7dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7e0:	4619      	mov	r1, r3
 801c7e2:	4620      	mov	r0, r4
 801c7e4:	f7ef fec1 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801c7e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7ec:	4618      	mov	r0, r3
 801c7ee:	f7f0 fa08 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801c7f2:	68fb      	ldr	r3, [r7, #12]
 801c7f4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c7f8:	683b      	ldr	r3, [r7, #0]
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	335c      	adds	r3, #92	; 0x5c
 801c7fe:	681b      	ldr	r3, [r3, #0]
 801c800:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c804:	6839      	ldr	r1, [r7, #0]
 801c806:	4610      	mov	r0, r2
 801c808:	4798      	blx	r3
 801c80a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c80e:	4619      	mov	r1, r3
 801c810:	4620      	mov	r0, r4
 801c812:	f7f0 fa73 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801c816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c81a:	4618      	mov	r0, r3
 801c81c:	f7f0 f9f1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	332c      	adds	r3, #44	; 0x2c
 801c824:	4959      	ldr	r1, [pc, #356]	; (801c98c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801c826:	4618      	mov	r0, r3
 801c828:	f7f0 fa7a 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	332c      	adds	r3, #44	; 0x2c
 801c830:	6879      	ldr	r1, [r7, #4]
 801c832:	4618      	mov	r0, r3
 801c834:	f7f0 fa62 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801c838:	68fb      	ldr	r3, [r7, #12]
 801c83a:	332c      	adds	r3, #44	; 0x2c
 801c83c:	4954      	ldr	r1, [pc, #336]	; (801c990 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801c83e:	4618      	mov	r0, r3
 801c840:	f7f0 fa6e 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801c844:	68fb      	ldr	r3, [r7, #12]
 801c846:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c84a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c84e:	6839      	ldr	r1, [r7, #0]
 801c850:	4618      	mov	r0, r3
 801c852:	f7fd faa3 	bl	8019d9c <_Z10StringFromRK14MockNamedValue>
 801c856:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c85a:	4619      	mov	r1, r3
 801c85c:	4620      	mov	r0, r4
 801c85e:	f7f0 fa4d 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801c862:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c866:	4618      	mov	r0, r3
 801c868:	f7f0 f9cb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	332c      	adds	r3, #44	; 0x2c
 801c870:	4948      	ldr	r1, [pc, #288]	; (801c994 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801c872:	4618      	mov	r0, r3
 801c874:	f7f0 fa54 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	332c      	adds	r3, #44	; 0x2c
 801c87c:	4946      	ldr	r1, [pc, #280]	; (801c998 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801c87e:	4618      	mov	r0, r3
 801c880:	f7f0 fa4e 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c888:	6879      	ldr	r1, [r7, #4]
 801c88a:	4618      	mov	r0, r3
 801c88c:	f7ff fdac 	bl	801c3e8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	332c      	adds	r3, #44	; 0x2c
 801c894:	4941      	ldr	r1, [pc, #260]	; (801c99c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801c896:	4618      	mov	r0, r3
 801c898:	f7f0 fa42 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	332c      	adds	r3, #44	; 0x2c
 801c8a0:	6879      	ldr	r1, [r7, #4]
 801c8a2:	4618      	mov	r0, r3
 801c8a4:	f7f0 fa2a 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	332c      	adds	r3, #44	; 0x2c
 801c8ac:	493a      	ldr	r1, [pc, #232]	; (801c998 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	f7f0 fa36 	bl	800cd20 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	332c      	adds	r3, #44	; 0x2c
 801c8b8:	4939      	ldr	r1, [pc, #228]	; (801c9a0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	f7f0 fa30 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c8c6:	683b      	ldr	r3, [r7, #0]
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	3360      	adds	r3, #96	; 0x60
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801c8d2:	6839      	ldr	r1, [r7, #0]
 801c8d4:	4610      	mov	r0, r2
 801c8d6:	4798      	blx	r3
 801c8d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c8dc:	4619      	mov	r1, r3
 801c8de:	4620      	mov	r0, r4
 801c8e0:	f7f0 fa0c 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801c8e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	f7f0 f98a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	332c      	adds	r3, #44	; 0x2c
 801c8f2:	492c      	ldr	r1, [pc, #176]	; (801c9a4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801c8f4:	4618      	mov	r0, r3
 801c8f6:	f7f0 fa13 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c900:	683b      	ldr	r3, [r7, #0]
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	335c      	adds	r3, #92	; 0x5c
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c90c:	6839      	ldr	r1, [r7, #0]
 801c90e:	4610      	mov	r0, r2
 801c910:	4798      	blx	r3
 801c912:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c916:	4619      	mov	r1, r3
 801c918:	4620      	mov	r0, r4
 801c91a:	f7f0 f9ef 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801c91e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c922:	4618      	mov	r0, r3
 801c924:	f7f0 f96d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	332c      	adds	r3, #44	; 0x2c
 801c92c:	491e      	ldr	r1, [pc, #120]	; (801c9a8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801c92e:	4618      	mov	r0, r3
 801c930:	f7f0 f9f6 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c93a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c93e:	6839      	ldr	r1, [r7, #0]
 801c940:	4618      	mov	r0, r3
 801c942:	f7fd fa2b 	bl	8019d9c <_Z10StringFromRK14MockNamedValue>
 801c946:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c94a:	4619      	mov	r1, r3
 801c94c:	4620      	mov	r0, r4
 801c94e:	f7f0 f9d5 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801c952:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c956:	4618      	mov	r0, r3
 801c958:	f7f0 f953 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	332c      	adds	r3, #44	; 0x2c
 801c960:	490c      	ldr	r1, [pc, #48]	; (801c994 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801c962:	4618      	mov	r0, r3
 801c964:	f7f0 f9dc 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801c968:	f107 0310 	add.w	r3, r7, #16
 801c96c:	4618      	mov	r0, r3
 801c96e:	f7fe fdd1 	bl	801b514 <_ZN21MockExpectedCallsListD1Ev>
}
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	4618      	mov	r0, r3
 801c976:	3764      	adds	r7, #100	; 0x64
 801c978:	46bd      	mov	sp, r7
 801c97a:	bd90      	pop	{r4, r7, pc}
 801c97c:	08028514 	.word	0x08028514
 801c980:	08025cc4 	.word	0x08025cc4
 801c984:	08025cfc 	.word	0x08025cfc
 801c988:	08025d00 	.word	0x08025d00
 801c98c:	08025d38 	.word	0x08025d38
 801c990:	08025d48 	.word	0x08025d48
 801c994:	08025d50 	.word	0x08025d50
 801c998:	08025bc8 	.word	0x08025bc8
 801c99c:	08025d54 	.word	0x08025d54
 801c9a0:	08025b5c 	.word	0x08025b5c
 801c9a4:	08025d88 	.word	0x08025d88
 801c9a8:	08025d8c 	.word	0x08025d8c

0801c9ac <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801c9ac:	b590      	push	{r4, r7, lr}
 801c9ae:	b097      	sub	sp, #92	; 0x5c
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	60f8      	str	r0, [r7, #12]
 801c9b4:	60b9      	str	r1, [r7, #8]
 801c9b6:	607a      	str	r2, [r7, #4]
 801c9b8:	603b      	str	r3, [r7, #0]
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	68b9      	ldr	r1, [r7, #8]
 801c9be:	4618      	mov	r0, r3
 801c9c0:	f7ff fc8a 	bl	801c2d8 <_ZN11MockFailureC1EP10UtestShell>
 801c9c4:	4a90      	ldr	r2, [pc, #576]	; (801cc08 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801c9ca:	f107 0310 	add.w	r3, r7, #16
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	f7fe fd8c 	bl	801b4ec <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801c9d4:	f107 0310 	add.w	r3, r7, #16
 801c9d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c9da:	6879      	ldr	r1, [r7, #4]
 801c9dc:	4618      	mov	r0, r3
 801c9de:	f7fe ff2b 	bl	801b838 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801c9e2:	683b      	ldr	r3, [r7, #0]
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	335c      	adds	r3, #92	; 0x5c
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	f107 0218 	add.w	r2, r7, #24
 801c9ee:	6839      	ldr	r1, [r7, #0]
 801c9f0:	4610      	mov	r0, r2
 801c9f2:	4798      	blx	r3
 801c9f4:	f107 0218 	add.w	r2, r7, #24
 801c9f8:	f107 0310 	add.w	r3, r7, #16
 801c9fc:	4611      	mov	r1, r2
 801c9fe:	4618      	mov	r0, r3
 801ca00:	f7ff f812 	bl	801ba28 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801ca04:	f107 0318 	add.w	r3, r7, #24
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f7f0 f8fa 	bl	800cc02 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801ca0e:	f107 0310 	add.w	r3, r7, #16
 801ca12:	4618      	mov	r0, r3
 801ca14:	f7fe fdeb 	bl	801b5ee <_ZNK21MockExpectedCallsList7isEmptyEv>
 801ca18:	4603      	mov	r3, r0
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d037      	beq.n	801ca8e <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ca24:	f107 0320 	add.w	r3, r7, #32
 801ca28:	4978      	ldr	r1, [pc, #480]	; (801cc0c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801ca2a:	4618      	mov	r0, r3
 801ca2c:	f7ef fd31 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801ca30:	f107 0320 	add.w	r3, r7, #32
 801ca34:	4619      	mov	r1, r3
 801ca36:	4620      	mov	r0, r4
 801ca38:	f7ef fd97 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801ca3c:	f107 0320 	add.w	r3, r7, #32
 801ca40:	4618      	mov	r0, r3
 801ca42:	f7f0 f8de 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801ca46:	68fb      	ldr	r3, [r7, #12]
 801ca48:	332c      	adds	r3, #44	; 0x2c
 801ca4a:	6879      	ldr	r1, [r7, #4]
 801ca4c:	4618      	mov	r0, r3
 801ca4e:	f7f0 f955 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801ca52:	68fb      	ldr	r3, [r7, #12]
 801ca54:	332c      	adds	r3, #44	; 0x2c
 801ca56:	496e      	ldr	r1, [pc, #440]	; (801cc10 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801ca58:	4618      	mov	r0, r3
 801ca5a:	f7f0 f961 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ca64:	683b      	ldr	r3, [r7, #0]
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	335c      	adds	r3, #92	; 0x5c
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ca70:	6839      	ldr	r1, [r7, #0]
 801ca72:	4610      	mov	r0, r2
 801ca74:	4798      	blx	r3
 801ca76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ca7a:	4619      	mov	r1, r3
 801ca7c:	4620      	mov	r0, r4
 801ca7e:	f7f0 f93d 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801ca82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ca86:	4618      	mov	r0, r3
 801ca88:	f7f0 f8bb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ca8c:	e059      	b.n	801cb42 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801ca8e:	68fb      	ldr	r3, [r7, #12]
 801ca90:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ca94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ca98:	495e      	ldr	r1, [pc, #376]	; (801cc14 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801ca9a:	4618      	mov	r0, r3
 801ca9c:	f7ef fcf9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801caa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801caa4:	4619      	mov	r1, r3
 801caa6:	4620      	mov	r0, r4
 801caa8:	f7ef fd5f 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801caac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cab0:	4618      	mov	r0, r3
 801cab2:	f7f0 f8a6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cabc:	683b      	ldr	r3, [r7, #0]
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	3360      	adds	r3, #96	; 0x60
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801cac8:	6839      	ldr	r1, [r7, #0]
 801caca:	4610      	mov	r0, r2
 801cacc:	4798      	blx	r3
 801cace:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cad2:	4619      	mov	r1, r3
 801cad4:	4620      	mov	r0, r4
 801cad6:	f7f0 f911 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801cada:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cade:	4618      	mov	r0, r3
 801cae0:	f7f0 f88f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801cae4:	68fb      	ldr	r3, [r7, #12]
 801cae6:	332c      	adds	r3, #44	; 0x2c
 801cae8:	494b      	ldr	r1, [pc, #300]	; (801cc18 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801caea:	4618      	mov	r0, r3
 801caec:	f7f0 f918 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801caf6:	683b      	ldr	r3, [r7, #0]
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	335c      	adds	r3, #92	; 0x5c
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801cb02:	6839      	ldr	r1, [r7, #0]
 801cb04:	4610      	mov	r0, r2
 801cb06:	4798      	blx	r3
 801cb08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cb0c:	4619      	mov	r1, r3
 801cb0e:	4620      	mov	r0, r4
 801cb10:	f7f0 f8f4 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801cb14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cb18:	4618      	mov	r0, r3
 801cb1a:	f7f0 f872 	bl	800cc02 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801cb1e:	68fb      	ldr	r3, [r7, #12]
 801cb20:	332c      	adds	r3, #44	; 0x2c
 801cb22:	493e      	ldr	r1, [pc, #248]	; (801cc1c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801cb24:	4618      	mov	r0, r3
 801cb26:	f7f0 f8fb 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	332c      	adds	r3, #44	; 0x2c
 801cb2e:	6879      	ldr	r1, [r7, #4]
 801cb30:	4618      	mov	r0, r3
 801cb32:	f7f0 f8e3 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	332c      	adds	r3, #44	; 0x2c
 801cb3a:	4939      	ldr	r1, [pc, #228]	; (801cc20 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801cb3c:	4618      	mov	r0, r3
 801cb3e:	f7f0 f8ef 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801cb42:	68fb      	ldr	r3, [r7, #12]
 801cb44:	332c      	adds	r3, #44	; 0x2c
 801cb46:	4937      	ldr	r1, [pc, #220]	; (801cc24 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801cb48:	4618      	mov	r0, r3
 801cb4a:	f7f0 f8e9 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801cb4e:	68fb      	ldr	r3, [r7, #12]
 801cb50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cb52:	6879      	ldr	r1, [r7, #4]
 801cb54:	4618      	mov	r0, r3
 801cb56:	f7ff fc47 	bl	801c3e8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801cb5a:	68fb      	ldr	r3, [r7, #12]
 801cb5c:	332c      	adds	r3, #44	; 0x2c
 801cb5e:	4932      	ldr	r1, [pc, #200]	; (801cc28 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801cb60:	4618      	mov	r0, r3
 801cb62:	f7f0 f8dd 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801cb66:	68fb      	ldr	r3, [r7, #12]
 801cb68:	332c      	adds	r3, #44	; 0x2c
 801cb6a:	6879      	ldr	r1, [r7, #4]
 801cb6c:	4618      	mov	r0, r3
 801cb6e:	f7f0 f8c5 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	332c      	adds	r3, #44	; 0x2c
 801cb76:	492b      	ldr	r1, [pc, #172]	; (801cc24 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801cb78:	4618      	mov	r0, r3
 801cb7a:	f7f0 f8d1 	bl	800cd20 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	332c      	adds	r3, #44	; 0x2c
 801cb82:	492a      	ldr	r1, [pc, #168]	; (801cc2c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801cb84:	4618      	mov	r0, r3
 801cb86:	f7f0 f8cb 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cb90:	683b      	ldr	r3, [r7, #0]
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	3360      	adds	r3, #96	; 0x60
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801cb9c:	6839      	ldr	r1, [r7, #0]
 801cb9e:	4610      	mov	r0, r2
 801cba0:	4798      	blx	r3
 801cba2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cba6:	4619      	mov	r1, r3
 801cba8:	4620      	mov	r0, r4
 801cbaa:	f7f0 f8a7 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801cbae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cbb2:	4618      	mov	r0, r3
 801cbb4:	f7f0 f825 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801cbb8:	68fb      	ldr	r3, [r7, #12]
 801cbba:	332c      	adds	r3, #44	; 0x2c
 801cbbc:	491c      	ldr	r1, [pc, #112]	; (801cc30 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801cbbe:	4618      	mov	r0, r3
 801cbc0:	f7f0 f8ae 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801cbc4:	68fb      	ldr	r3, [r7, #12]
 801cbc6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cbca:	683b      	ldr	r3, [r7, #0]
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	335c      	adds	r3, #92	; 0x5c
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801cbd6:	6839      	ldr	r1, [r7, #0]
 801cbd8:	4610      	mov	r0, r2
 801cbda:	4798      	blx	r3
 801cbdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cbe0:	4619      	mov	r1, r3
 801cbe2:	4620      	mov	r0, r4
 801cbe4:	f7f0 f88a 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801cbe8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cbec:	4618      	mov	r0, r3
 801cbee:	f7f0 f808 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801cbf2:	f107 0310 	add.w	r3, r7, #16
 801cbf6:	4618      	mov	r0, r3
 801cbf8:	f7fe fc8c 	bl	801b514 <_ZN21MockExpectedCallsListD1Ev>
}
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	4618      	mov	r0, r3
 801cc00:	375c      	adds	r7, #92	; 0x5c
 801cc02:	46bd      	mov	sp, r7
 801cc04:	bd90      	pop	{r4, r7, pc}
 801cc06:	bf00      	nop
 801cc08:	080284e8 	.word	0x080284e8
 801cc0c:	08025d90 	.word	0x08025d90
 801cc10:	08025cfc 	.word	0x08025cfc
 801cc14:	08025dd0 	.word	0x08025dd0
 801cc18:	08025dfc 	.word	0x08025dfc
 801cc1c:	08025d38 	.word	0x08025d38
 801cc20:	08025e14 	.word	0x08025e14
 801cc24:	08025bc8 	.word	0x08025bc8
 801cc28:	08025e18 	.word	0x08025e18
 801cc2c:	08025b5c 	.word	0x08025b5c
 801cc30:	08025d88 	.word	0x08025d88

0801cc34 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cc34:	b590      	push	{r4, r7, lr}
 801cc36:	b08b      	sub	sp, #44	; 0x2c
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	60f8      	str	r0, [r7, #12]
 801cc3c:	60b9      	str	r1, [r7, #8]
 801cc3e:	607a      	str	r2, [r7, #4]
 801cc40:	603b      	str	r3, [r7, #0]
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	68b9      	ldr	r1, [r7, #8]
 801cc46:	4618      	mov	r0, r3
 801cc48:	f7ff fb46 	bl	801c2d8 <_ZN11MockFailureC1EP10UtestShell>
 801cc4c:	4a30      	ldr	r2, [pc, #192]	; (801cd10 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801cc4e:	68fb      	ldr	r3, [r7, #12]
 801cc50:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801cc52:	f107 0310 	add.w	r3, r7, #16
 801cc56:	4618      	mov	r0, r3
 801cc58:	f7fe fc48 	bl	801b4ec <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801cc5c:	f107 0310 	add.w	r3, r7, #16
 801cc60:	683a      	ldr	r2, [r7, #0]
 801cc62:	6879      	ldr	r1, [r7, #4]
 801cc64:	4618      	mov	r0, r3
 801cc66:	f7fe fde7 	bl	801b838 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cc70:	f107 0318 	add.w	r3, r7, #24
 801cc74:	4927      	ldr	r1, [pc, #156]	; (801cd14 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801cc76:	4618      	mov	r0, r3
 801cc78:	f7ef fc0b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801cc7c:	f107 0318 	add.w	r3, r7, #24
 801cc80:	4619      	mov	r1, r3
 801cc82:	4620      	mov	r0, r4
 801cc84:	f7ef fc71 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801cc88:	f107 0318 	add.w	r3, r7, #24
 801cc8c:	4618      	mov	r0, r3
 801cc8e:	f7ef ffb8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	332c      	adds	r3, #44	; 0x2c
 801cc96:	6879      	ldr	r1, [r7, #4]
 801cc98:	4618      	mov	r0, r3
 801cc9a:	f7f0 f82f 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	332c      	adds	r3, #44	; 0x2c
 801cca2:	491d      	ldr	r1, [pc, #116]	; (801cd18 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801cca4:	4618      	mov	r0, r3
 801cca6:	f7f0 f83b 	bl	800cd20 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801ccaa:	68fb      	ldr	r3, [r7, #12]
 801ccac:	683a      	ldr	r2, [r7, #0]
 801ccae:	6879      	ldr	r1, [r7, #4]
 801ccb0:	4618      	mov	r0, r3
 801ccb2:	f7ff fb99 	bl	801c3e8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	332c      	adds	r3, #44	; 0x2c
 801ccba:	4918      	ldr	r1, [pc, #96]	; (801cd1c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	f7f0 f82f 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	332c      	adds	r3, #44	; 0x2c
 801ccc6:	4916      	ldr	r1, [pc, #88]	; (801cd20 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801ccc8:	4618      	mov	r0, r3
 801ccca:	f7f0 f829 	bl	800cd20 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ccd4:	f107 0320 	add.w	r3, r7, #32
 801ccd8:	f107 0210 	add.w	r2, r7, #16
 801ccdc:	4611      	mov	r1, r2
 801ccde:	4618      	mov	r0, r3
 801cce0:	f7ff f9bc 	bl	801c05c <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801cce4:	f107 0320 	add.w	r3, r7, #32
 801cce8:	4619      	mov	r1, r3
 801ccea:	4620      	mov	r0, r4
 801ccec:	f7f0 f806 	bl	800ccfc <_ZN12SimpleStringpLERKS_>
 801ccf0:	f107 0320 	add.w	r3, r7, #32
 801ccf4:	4618      	mov	r0, r3
 801ccf6:	f7ef ff84 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801ccfa:	f107 0310 	add.w	r3, r7, #16
 801ccfe:	4618      	mov	r0, r3
 801cd00:	f7fe fc08 	bl	801b514 <_ZN21MockExpectedCallsListD1Ev>
}
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	4618      	mov	r0, r3
 801cd08:	372c      	adds	r7, #44	; 0x2c
 801cd0a:	46bd      	mov	sp, r7
 801cd0c:	bd90      	pop	{r4, r7, pc}
 801cd0e:	bf00      	nop
 801cd10:	080284bc 	.word	0x080284bc
 801cd14:	08025e54 	.word	0x08025e54
 801cd18:	08025e84 	.word	0x08025e84
 801cd1c:	08025e98 	.word	0x08025e98
 801cd20:	08025b5c 	.word	0x08025b5c

0801cd24 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801cd24:	b590      	push	{r4, r7, lr}
 801cd26:	b087      	sub	sp, #28
 801cd28:	af00      	add	r7, sp, #0
 801cd2a:	60f8      	str	r0, [r7, #12]
 801cd2c:	60b9      	str	r1, [r7, #8]
 801cd2e:	607a      	str	r2, [r7, #4]
 801cd30:	68fb      	ldr	r3, [r7, #12]
 801cd32:	68b9      	ldr	r1, [r7, #8]
 801cd34:	4618      	mov	r0, r3
 801cd36:	f7ff facf 	bl	801c2d8 <_ZN11MockFailureC1EP10UtestShell>
 801cd3a:	4a10      	ldr	r2, [pc, #64]	; (801cd7c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801cd3c:	68fb      	ldr	r3, [r7, #12]
 801cd3e:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801cd40:	68fb      	ldr	r3, [r7, #12]
 801cd42:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cd46:	6878      	ldr	r0, [r7, #4]
 801cd48:	f7ef ff2e 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801cd4c:	4602      	mov	r2, r0
 801cd4e:	f107 0310 	add.w	r3, r7, #16
 801cd52:	490b      	ldr	r1, [pc, #44]	; (801cd80 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801cd54:	4618      	mov	r0, r3
 801cd56:	f7f0 fc5b 	bl	800d610 <_Z16StringFromFormatPKcz>
 801cd5a:	f107 0310 	add.w	r3, r7, #16
 801cd5e:	4619      	mov	r1, r3
 801cd60:	4620      	mov	r0, r4
 801cd62:	f7ef fc02 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801cd66:	f107 0310 	add.w	r3, r7, #16
 801cd6a:	4618      	mov	r0, r3
 801cd6c:	f7ef ff49 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	4618      	mov	r0, r3
 801cd74:	371c      	adds	r7, #28
 801cd76:	46bd      	mov	sp, r7
 801cd78:	bd90      	pop	{r4, r7, pc}
 801cd7a:	bf00      	nop
 801cd7c:	08028490 	.word	0x08028490
 801cd80:	08025ec4 	.word	0x08025ec4

0801cd84 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801cd84:	b590      	push	{r4, r7, lr}
 801cd86:	b087      	sub	sp, #28
 801cd88:	af00      	add	r7, sp, #0
 801cd8a:	60f8      	str	r0, [r7, #12]
 801cd8c:	60b9      	str	r1, [r7, #8]
 801cd8e:	607a      	str	r2, [r7, #4]
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	68b9      	ldr	r1, [r7, #8]
 801cd94:	4618      	mov	r0, r3
 801cd96:	f7ff fa9f 	bl	801c2d8 <_ZN11MockFailureC1EP10UtestShell>
 801cd9a:	4a10      	ldr	r2, [pc, #64]	; (801cddc <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801cda0:	68fb      	ldr	r3, [r7, #12]
 801cda2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cda6:	6878      	ldr	r0, [r7, #4]
 801cda8:	f7ef fefe 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801cdac:	4602      	mov	r2, r0
 801cdae:	f107 0310 	add.w	r3, r7, #16
 801cdb2:	490b      	ldr	r1, [pc, #44]	; (801cde0 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801cdb4:	4618      	mov	r0, r3
 801cdb6:	f7f0 fc2b 	bl	800d610 <_Z16StringFromFormatPKcz>
 801cdba:	f107 0310 	add.w	r3, r7, #16
 801cdbe:	4619      	mov	r1, r3
 801cdc0:	4620      	mov	r0, r4
 801cdc2:	f7ef fbd2 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801cdc6:	f107 0310 	add.w	r3, r7, #16
 801cdca:	4618      	mov	r0, r3
 801cdcc:	f7ef ff19 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801cdd0:	68fb      	ldr	r3, [r7, #12]
 801cdd2:	4618      	mov	r0, r3
 801cdd4:	371c      	adds	r7, #28
 801cdd6:	46bd      	mov	sp, r7
 801cdd8:	bd90      	pop	{r4, r7, pc}
 801cdda:	bf00      	nop
 801cddc:	08028464 	.word	0x08028464
 801cde0:	08025f1c 	.word	0x08025f1c

0801cde4 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cde4:	b590      	push	{r4, r7, lr}
 801cde6:	b087      	sub	sp, #28
 801cde8:	af00      	add	r7, sp, #0
 801cdea:	60f8      	str	r0, [r7, #12]
 801cdec:	60b9      	str	r1, [r7, #8]
 801cdee:	607a      	str	r2, [r7, #4]
 801cdf0:	603b      	str	r3, [r7, #0]
 801cdf2:	68fb      	ldr	r3, [r7, #12]
 801cdf4:	68b9      	ldr	r1, [r7, #8]
 801cdf6:	4618      	mov	r0, r3
 801cdf8:	f7ff fa6e 	bl	801c2d8 <_ZN11MockFailureC1EP10UtestShell>
 801cdfc:	4a12      	ldr	r2, [pc, #72]	; (801ce48 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801cdfe:	68fb      	ldr	r3, [r7, #12]
 801ce00:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801ce02:	68fb      	ldr	r3, [r7, #12]
 801ce04:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801ce08:	6878      	ldr	r0, [r7, #4]
 801ce0a:	f7ef fecd 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801ce0e:	4602      	mov	r2, r0
 801ce10:	f107 0010 	add.w	r0, r7, #16
 801ce14:	683b      	ldr	r3, [r7, #0]
 801ce16:	490d      	ldr	r1, [pc, #52]	; (801ce4c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801ce18:	f7f0 fbfa 	bl	800d610 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801ce1c:	f107 0310 	add.w	r3, r7, #16
 801ce20:	4619      	mov	r1, r3
 801ce22:	4620      	mov	r0, r4
 801ce24:	f7ef fba1 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801ce28:	f107 0310 	add.w	r3, r7, #16
 801ce2c:	4618      	mov	r0, r3
 801ce2e:	f7ef fee8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ce36:	6879      	ldr	r1, [r7, #4]
 801ce38:	4618      	mov	r0, r3
 801ce3a:	f7ff fad5 	bl	801c3e8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	4618      	mov	r0, r3
 801ce42:	371c      	adds	r7, #28
 801ce44:	46bd      	mov	sp, r7
 801ce46:	bd90      	pop	{r4, r7, pc}
 801ce48:	08028438 	.word	0x08028438
 801ce4c:	08025f6c 	.word	0x08025f6c

0801ce50 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ce50:	b590      	push	{r4, r7, lr}
 801ce52:	b087      	sub	sp, #28
 801ce54:	af00      	add	r7, sp, #0
 801ce56:	60f8      	str	r0, [r7, #12]
 801ce58:	60b9      	str	r1, [r7, #8]
 801ce5a:	607a      	str	r2, [r7, #4]
 801ce5c:	603b      	str	r3, [r7, #0]
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	68b9      	ldr	r1, [r7, #8]
 801ce62:	4618      	mov	r0, r3
 801ce64:	f7ff fa38 	bl	801c2d8 <_ZN11MockFailureC1EP10UtestShell>
 801ce68:	4a12      	ldr	r2, [pc, #72]	; (801ceb4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ce74:	6878      	ldr	r0, [r7, #4]
 801ce76:	f7ef fe97 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801ce7a:	4602      	mov	r2, r0
 801ce7c:	f107 0310 	add.w	r3, r7, #16
 801ce80:	490d      	ldr	r1, [pc, #52]	; (801ceb8 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801ce82:	4618      	mov	r0, r3
 801ce84:	f7f0 fbc4 	bl	800d610 <_Z16StringFromFormatPKcz>
 801ce88:	f107 0310 	add.w	r3, r7, #16
 801ce8c:	4619      	mov	r1, r3
 801ce8e:	4620      	mov	r0, r4
 801ce90:	f7ef fb6b 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801ce94:	f107 0310 	add.w	r3, r7, #16
 801ce98:	4618      	mov	r0, r3
 801ce9a:	f7ef feb2 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801ce9e:	68fb      	ldr	r3, [r7, #12]
 801cea0:	683a      	ldr	r2, [r7, #0]
 801cea2:	6879      	ldr	r1, [r7, #4]
 801cea4:	4618      	mov	r0, r3
 801cea6:	f7ff fa9f 	bl	801c3e8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	4618      	mov	r0, r3
 801ceae:	371c      	adds	r7, #28
 801ceb0:	46bd      	mov	sp, r7
 801ceb2:	bd90      	pop	{r4, r7, pc}
 801ceb4:	0802840c 	.word	0x0802840c
 801ceb8:	08025fd0 	.word	0x08025fd0

0801cebc <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801cebc:	b480      	push	{r7}
 801cebe:	b083      	sub	sp, #12
 801cec0:	af00      	add	r7, sp, #0
 801cec2:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801cec4:	4a04      	ldr	r2, [pc, #16]	; (801ced8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	6013      	str	r3, [r2, #0]
}
 801ceca:	bf00      	nop
 801cecc:	370c      	adds	r7, #12
 801cece:	46bd      	mov	sp, r7
 801ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ced4:	4770      	bx	lr
 801ced6:	bf00      	nop
 801ced8:	20000ec4 	.word	0x20000ec4

0801cedc <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801cedc:	b580      	push	{r7, lr}
 801cede:	b082      	sub	sp, #8
 801cee0:	af00      	add	r7, sp, #0
 801cee2:	6078      	str	r0, [r7, #4]
 801cee4:	6039      	str	r1, [r7, #0]
 801cee6:	4a10      	ldr	r2, [pc, #64]	; (801cf28 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	601a      	str	r2, [r3, #0]
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	3304      	adds	r3, #4
 801cef0:	6839      	ldr	r1, [r7, #0]
 801cef2:	4618      	mov	r0, r3
 801cef4:	f7ef fb21 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	330c      	adds	r3, #12
 801cefc:	490b      	ldr	r1, [pc, #44]	; (801cf2c <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801cefe:	4618      	mov	r0, r3
 801cf00:	f7ef fac7 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	2200      	movs	r2, #0
 801cf08:	629a      	str	r2, [r3, #40]	; 0x28
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	2200      	movs	r2, #0
 801cf0e:	62da      	str	r2, [r3, #44]	; 0x2c
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	2200      	movs	r2, #0
 801cf14:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	2200      	movs	r2, #0
 801cf1a:	619a      	str	r2, [r3, #24]
}
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	4618      	mov	r0, r3
 801cf20:	3708      	adds	r7, #8
 801cf22:	46bd      	mov	sp, r7
 801cf24:	bd80      	pop	{r7, pc}
 801cf26:	bf00      	nop
 801cf28:	08028c94 	.word	0x08028c94
 801cf2c:	08026020 	.word	0x08026020

0801cf30 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801cf30:	b580      	push	{r7, lr}
 801cf32:	b082      	sub	sp, #8
 801cf34:	af00      	add	r7, sp, #0
 801cf36:	6078      	str	r0, [r7, #4]
 801cf38:	4a08      	ldr	r2, [pc, #32]	; (801cf5c <_ZN14MockNamedValueD1Ev+0x2c>)
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	601a      	str	r2, [r3, #0]
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	330c      	adds	r3, #12
 801cf42:	4618      	mov	r0, r3
 801cf44:	f7ef fe5d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	3304      	adds	r3, #4
 801cf4c:	4618      	mov	r0, r3
 801cf4e:	f7ef fe58 	bl	800cc02 <_ZN12SimpleStringD1Ev>
{
}
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	4618      	mov	r0, r3
 801cf56:	3708      	adds	r7, #8
 801cf58:	46bd      	mov	sp, r7
 801cf5a:	bd80      	pop	{r7, pc}
 801cf5c:	08028c94 	.word	0x08028c94

0801cf60 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b082      	sub	sp, #8
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
}
 801cf68:	6878      	ldr	r0, [r7, #4]
 801cf6a:	f7ff ffe1 	bl	801cf30 <_ZN14MockNamedValueD1Ev>
 801cf6e:	2138      	movs	r1, #56	; 0x38
 801cf70:	6878      	ldr	r0, [r7, #4]
 801cf72:	f7ec fedf 	bl	8009d34 <_ZdlPvj>
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	4618      	mov	r0, r3
 801cf7a:	3708      	adds	r7, #8
 801cf7c:	46bd      	mov	sp, r7
 801cf7e:	bd80      	pop	{r7, pc}

0801cf80 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801cf80:	b590      	push	{r4, r7, lr}
 801cf82:	b085      	sub	sp, #20
 801cf84:	af00      	add	r7, sp, #0
 801cf86:	6078      	str	r0, [r7, #4]
 801cf88:	460b      	mov	r3, r1
 801cf8a:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	f103 040c 	add.w	r4, r3, #12
 801cf92:	f107 0308 	add.w	r3, r7, #8
 801cf96:	490b      	ldr	r1, [pc, #44]	; (801cfc4 <_ZN14MockNamedValue8setValueEb+0x44>)
 801cf98:	4618      	mov	r0, r3
 801cf9a:	f7ef fa7a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801cf9e:	f107 0308 	add.w	r3, r7, #8
 801cfa2:	4619      	mov	r1, r3
 801cfa4:	4620      	mov	r0, r4
 801cfa6:	f7ef fae0 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801cfaa:	f107 0308 	add.w	r3, r7, #8
 801cfae:	4618      	mov	r0, r3
 801cfb0:	f7ef fe27 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	78fa      	ldrb	r2, [r7, #3]
 801cfb8:	761a      	strb	r2, [r3, #24]
}
 801cfba:	bf00      	nop
 801cfbc:	3714      	adds	r7, #20
 801cfbe:	46bd      	mov	sp, r7
 801cfc0:	bd90      	pop	{r4, r7, pc}
 801cfc2:	bf00      	nop
 801cfc4:	08026024 	.word	0x08026024

0801cfc8 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801cfc8:	b590      	push	{r4, r7, lr}
 801cfca:	b085      	sub	sp, #20
 801cfcc:	af00      	add	r7, sp, #0
 801cfce:	6078      	str	r0, [r7, #4]
 801cfd0:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	f103 040c 	add.w	r4, r3, #12
 801cfd8:	f107 0308 	add.w	r3, r7, #8
 801cfdc:	490a      	ldr	r1, [pc, #40]	; (801d008 <_ZN14MockNamedValue8setValueEj+0x40>)
 801cfde:	4618      	mov	r0, r3
 801cfe0:	f7ef fa57 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801cfe4:	f107 0308 	add.w	r3, r7, #8
 801cfe8:	4619      	mov	r1, r3
 801cfea:	4620      	mov	r0, r4
 801cfec:	f7ef fabd 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801cff0:	f107 0308 	add.w	r3, r7, #8
 801cff4:	4618      	mov	r0, r3
 801cff6:	f7ef fe04 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	683a      	ldr	r2, [r7, #0]
 801cffe:	619a      	str	r2, [r3, #24]
}
 801d000:	bf00      	nop
 801d002:	3714      	adds	r7, #20
 801d004:	46bd      	mov	sp, r7
 801d006:	bd90      	pop	{r4, r7, pc}
 801d008:	0802602c 	.word	0x0802602c

0801d00c <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801d00c:	b590      	push	{r4, r7, lr}
 801d00e:	b085      	sub	sp, #20
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
 801d014:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	f103 040c 	add.w	r4, r3, #12
 801d01c:	f107 0308 	add.w	r3, r7, #8
 801d020:	490a      	ldr	r1, [pc, #40]	; (801d04c <_ZN14MockNamedValue8setValueEi+0x40>)
 801d022:	4618      	mov	r0, r3
 801d024:	f7ef fa35 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d028:	f107 0308 	add.w	r3, r7, #8
 801d02c:	4619      	mov	r1, r3
 801d02e:	4620      	mov	r0, r4
 801d030:	f7ef fa9b 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801d034:	f107 0308 	add.w	r3, r7, #8
 801d038:	4618      	mov	r0, r3
 801d03a:	f7ef fde2 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	683a      	ldr	r2, [r7, #0]
 801d042:	619a      	str	r2, [r3, #24]
}
 801d044:	bf00      	nop
 801d046:	3714      	adds	r7, #20
 801d048:	46bd      	mov	sp, r7
 801d04a:	bd90      	pop	{r4, r7, pc}
 801d04c:	08026020 	.word	0x08026020

0801d050 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801d050:	b590      	push	{r4, r7, lr}
 801d052:	b085      	sub	sp, #20
 801d054:	af00      	add	r7, sp, #0
 801d056:	6078      	str	r0, [r7, #4]
 801d058:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	f103 040c 	add.w	r4, r3, #12
 801d060:	f107 0308 	add.w	r3, r7, #8
 801d064:	490a      	ldr	r1, [pc, #40]	; (801d090 <_ZN14MockNamedValue8setValueEl+0x40>)
 801d066:	4618      	mov	r0, r3
 801d068:	f7ef fa13 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d06c:	f107 0308 	add.w	r3, r7, #8
 801d070:	4619      	mov	r1, r3
 801d072:	4620      	mov	r0, r4
 801d074:	f7ef fa79 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801d078:	f107 0308 	add.w	r3, r7, #8
 801d07c:	4618      	mov	r0, r3
 801d07e:	f7ef fdc0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	683a      	ldr	r2, [r7, #0]
 801d086:	619a      	str	r2, [r3, #24]
}
 801d088:	bf00      	nop
 801d08a:	3714      	adds	r7, #20
 801d08c:	46bd      	mov	sp, r7
 801d08e:	bd90      	pop	{r4, r7, pc}
 801d090:	0802603c 	.word	0x0802603c

0801d094 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801d094:	b590      	push	{r4, r7, lr}
 801d096:	b085      	sub	sp, #20
 801d098:	af00      	add	r7, sp, #0
 801d09a:	6078      	str	r0, [r7, #4]
 801d09c:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	f103 040c 	add.w	r4, r3, #12
 801d0a4:	f107 0308 	add.w	r3, r7, #8
 801d0a8:	490a      	ldr	r1, [pc, #40]	; (801d0d4 <_ZN14MockNamedValue8setValueEm+0x40>)
 801d0aa:	4618      	mov	r0, r3
 801d0ac:	f7ef f9f1 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d0b0:	f107 0308 	add.w	r3, r7, #8
 801d0b4:	4619      	mov	r1, r3
 801d0b6:	4620      	mov	r0, r4
 801d0b8:	f7ef fa57 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801d0bc:	f107 0308 	add.w	r3, r7, #8
 801d0c0:	4618      	mov	r0, r3
 801d0c2:	f7ef fd9e 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	683a      	ldr	r2, [r7, #0]
 801d0ca:	619a      	str	r2, [r3, #24]
}
 801d0cc:	bf00      	nop
 801d0ce:	3714      	adds	r7, #20
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	bd90      	pop	{r4, r7, pc}
 801d0d4:	08026048 	.word	0x08026048

0801d0d8 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801d0d8:	b5b0      	push	{r4, r5, r7, lr}
 801d0da:	b086      	sub	sp, #24
 801d0dc:	af02      	add	r7, sp, #8
 801d0de:	60f8      	str	r0, [r7, #12]
 801d0e0:	1d3b      	adds	r3, r7, #4
 801d0e2:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801d0e6:	f7f6 fdb7 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d0ea:	4604      	mov	r4, r0
 801d0ec:	6823      	ldr	r3, [r4, #0]
 801d0ee:	3368      	adds	r3, #104	; 0x68
 801d0f0:	681d      	ldr	r5, [r3, #0]
 801d0f2:	f7f6 fdc1 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	9300      	str	r3, [sp, #0]
 801d0fa:	2367      	movs	r3, #103	; 0x67
 801d0fc:	4a03      	ldr	r2, [pc, #12]	; (801d10c <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801d0fe:	4904      	ldr	r1, [pc, #16]	; (801d110 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801d100:	4620      	mov	r0, r4
 801d102:	47a8      	blx	r5
}
 801d104:	bf00      	nop
 801d106:	3710      	adds	r7, #16
 801d108:	46bd      	mov	sp, r7
 801d10a:	bdb0      	pop	{r4, r5, r7, pc}
 801d10c:	0802605c 	.word	0x0802605c
 801d110:	08026078 	.word	0x08026078

0801d114 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801d114:	b5b0      	push	{r4, r5, r7, lr}
 801d116:	b086      	sub	sp, #24
 801d118:	af02      	add	r7, sp, #8
 801d11a:	60f8      	str	r0, [r7, #12]
 801d11c:	1d3b      	adds	r3, r7, #4
 801d11e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801d122:	f7f6 fd99 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d126:	4604      	mov	r4, r0
 801d128:	6823      	ldr	r3, [r4, #0]
 801d12a:	3368      	adds	r3, #104	; 0x68
 801d12c:	681d      	ldr	r5, [r3, #0]
 801d12e:	f7f6 fda3 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d132:	4603      	mov	r3, r0
 801d134:	9300      	str	r3, [sp, #0]
 801d136:	236c      	movs	r3, #108	; 0x6c
 801d138:	4a03      	ldr	r2, [pc, #12]	; (801d148 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801d13a:	4904      	ldr	r1, [pc, #16]	; (801d14c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801d13c:	4620      	mov	r0, r4
 801d13e:	47a8      	blx	r5
}
 801d140:	bf00      	nop
 801d142:	3710      	adds	r7, #16
 801d144:	46bd      	mov	sp, r7
 801d146:	bdb0      	pop	{r4, r5, r7, pc}
 801d148:	0802605c 	.word	0x0802605c
 801d14c:	08026098 	.word	0x08026098

0801d150 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801d150:	b580      	push	{r7, lr}
 801d152:	b084      	sub	sp, #16
 801d154:	af00      	add	r7, sp, #0
 801d156:	60f8      	str	r0, [r7, #12]
 801d158:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801d15c:	68fb      	ldr	r3, [r7, #12]
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	3328      	adds	r3, #40	; 0x28
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801d178 <_ZN14MockNamedValue8setValueEd+0x28>
 801d168:	ed97 0b00 	vldr	d0, [r7]
 801d16c:	68f8      	ldr	r0, [r7, #12]
 801d16e:	4798      	blx	r3
}
 801d170:	bf00      	nop
 801d172:	3710      	adds	r7, #16
 801d174:	46bd      	mov	sp, r7
 801d176:	bd80      	pop	{r7, pc}
 801d178:	47ae147b 	.word	0x47ae147b
 801d17c:	3f747ae1 	.word	0x3f747ae1

0801d180 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801d180:	b590      	push	{r4, r7, lr}
 801d182:	b089      	sub	sp, #36	; 0x24
 801d184:	af00      	add	r7, sp, #0
 801d186:	6178      	str	r0, [r7, #20]
 801d188:	ed87 0b02 	vstr	d0, [r7, #8]
 801d18c:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801d190:	697b      	ldr	r3, [r7, #20]
 801d192:	f103 040c 	add.w	r4, r3, #12
 801d196:	f107 0318 	add.w	r3, r7, #24
 801d19a:	490e      	ldr	r1, [pc, #56]	; (801d1d4 <_ZN14MockNamedValue8setValueEdd+0x54>)
 801d19c:	4618      	mov	r0, r3
 801d19e:	f7ef f978 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d1a2:	f107 0318 	add.w	r3, r7, #24
 801d1a6:	4619      	mov	r1, r3
 801d1a8:	4620      	mov	r0, r4
 801d1aa:	f7ef f9de 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801d1ae:	f107 0318 	add.w	r3, r7, #24
 801d1b2:	4618      	mov	r0, r3
 801d1b4:	f7ef fd25 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801d1b8:	6979      	ldr	r1, [r7, #20]
 801d1ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801d1be:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801d1c2:	6979      	ldr	r1, [r7, #20]
 801d1c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d1c8:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801d1cc:	bf00      	nop
 801d1ce:	3724      	adds	r7, #36	; 0x24
 801d1d0:	46bd      	mov	sp, r7
 801d1d2:	bd90      	pop	{r4, r7, pc}
 801d1d4:	080260c4 	.word	0x080260c4

0801d1d8 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801d1d8:	b590      	push	{r4, r7, lr}
 801d1da:	b085      	sub	sp, #20
 801d1dc:	af00      	add	r7, sp, #0
 801d1de:	6078      	str	r0, [r7, #4]
 801d1e0:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	f103 040c 	add.w	r4, r3, #12
 801d1e8:	f107 0308 	add.w	r3, r7, #8
 801d1ec:	490a      	ldr	r1, [pc, #40]	; (801d218 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801d1ee:	4618      	mov	r0, r3
 801d1f0:	f7ef f94f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d1f4:	f107 0308 	add.w	r3, r7, #8
 801d1f8:	4619      	mov	r1, r3
 801d1fa:	4620      	mov	r0, r4
 801d1fc:	f7ef f9b5 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801d200:	f107 0308 	add.w	r3, r7, #8
 801d204:	4618      	mov	r0, r3
 801d206:	f7ef fcfc 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	683a      	ldr	r2, [r7, #0]
 801d20e:	619a      	str	r2, [r3, #24]
}
 801d210:	bf00      	nop
 801d212:	3714      	adds	r7, #20
 801d214:	46bd      	mov	sp, r7
 801d216:	bd90      	pop	{r4, r7, pc}
 801d218:	080260cc 	.word	0x080260cc

0801d21c <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801d21c:	b590      	push	{r4, r7, lr}
 801d21e:	b085      	sub	sp, #20
 801d220:	af00      	add	r7, sp, #0
 801d222:	6078      	str	r0, [r7, #4]
 801d224:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	f103 040c 	add.w	r4, r3, #12
 801d22c:	f107 0308 	add.w	r3, r7, #8
 801d230:	490a      	ldr	r1, [pc, #40]	; (801d25c <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801d232:	4618      	mov	r0, r3
 801d234:	f7ef f92d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d238:	f107 0308 	add.w	r3, r7, #8
 801d23c:	4619      	mov	r1, r3
 801d23e:	4620      	mov	r0, r4
 801d240:	f7ef f993 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801d244:	f107 0308 	add.w	r3, r7, #8
 801d248:	4618      	mov	r0, r3
 801d24a:	f7ef fcda 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	683a      	ldr	r2, [r7, #0]
 801d252:	619a      	str	r2, [r3, #24]
}
 801d254:	bf00      	nop
 801d256:	3714      	adds	r7, #20
 801d258:	46bd      	mov	sp, r7
 801d25a:	bd90      	pop	{r4, r7, pc}
 801d25c:	080260d4 	.word	0x080260d4

0801d260 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801d260:	b590      	push	{r4, r7, lr}
 801d262:	b085      	sub	sp, #20
 801d264:	af00      	add	r7, sp, #0
 801d266:	6078      	str	r0, [r7, #4]
 801d268:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	f103 040c 	add.w	r4, r3, #12
 801d270:	f107 0308 	add.w	r3, r7, #8
 801d274:	490a      	ldr	r1, [pc, #40]	; (801d2a0 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801d276:	4618      	mov	r0, r3
 801d278:	f7ef f90b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d27c:	f107 0308 	add.w	r3, r7, #8
 801d280:	4619      	mov	r1, r3
 801d282:	4620      	mov	r0, r4
 801d284:	f7ef f971 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801d288:	f107 0308 	add.w	r3, r7, #8
 801d28c:	4618      	mov	r0, r3
 801d28e:	f7ef fcb8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	683a      	ldr	r2, [r7, #0]
 801d296:	619a      	str	r2, [r3, #24]
}
 801d298:	bf00      	nop
 801d29a:	3714      	adds	r7, #20
 801d29c:	46bd      	mov	sp, r7
 801d29e:	bd90      	pop	{r4, r7, pc}
 801d2a0:	080260e0 	.word	0x080260e0

0801d2a4 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801d2a4:	b590      	push	{r4, r7, lr}
 801d2a6:	b085      	sub	sp, #20
 801d2a8:	af00      	add	r7, sp, #0
 801d2aa:	6078      	str	r0, [r7, #4]
 801d2ac:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	f103 040c 	add.w	r4, r3, #12
 801d2b4:	f107 0308 	add.w	r3, r7, #8
 801d2b8:	490a      	ldr	r1, [pc, #40]	; (801d2e4 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801d2ba:	4618      	mov	r0, r3
 801d2bc:	f7ef f8e9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d2c0:	f107 0308 	add.w	r3, r7, #8
 801d2c4:	4619      	mov	r1, r3
 801d2c6:	4620      	mov	r0, r4
 801d2c8:	f7ef f94f 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801d2cc:	f107 0308 	add.w	r3, r7, #8
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	f7ef fc96 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	683a      	ldr	r2, [r7, #0]
 801d2da:	619a      	str	r2, [r3, #24]
}
 801d2dc:	bf00      	nop
 801d2de:	3714      	adds	r7, #20
 801d2e0:	46bd      	mov	sp, r7
 801d2e2:	bd90      	pop	{r4, r7, pc}
 801d2e4:	080260ec 	.word	0x080260ec

0801d2e8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801d2e8:	b590      	push	{r4, r7, lr}
 801d2ea:	b087      	sub	sp, #28
 801d2ec:	af00      	add	r7, sp, #0
 801d2ee:	60f8      	str	r0, [r7, #12]
 801d2f0:	60b9      	str	r1, [r7, #8]
 801d2f2:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	f103 040c 	add.w	r4, r3, #12
 801d2fa:	f107 0310 	add.w	r3, r7, #16
 801d2fe:	490c      	ldr	r1, [pc, #48]	; (801d330 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801d300:	4618      	mov	r0, r3
 801d302:	f7ef f8c6 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d306:	f107 0310 	add.w	r3, r7, #16
 801d30a:	4619      	mov	r1, r3
 801d30c:	4620      	mov	r0, r4
 801d30e:	f7ef f92c 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801d312:	f107 0310 	add.w	r3, r7, #16
 801d316:	4618      	mov	r0, r3
 801d318:	f7ef fc73 	bl	800cc02 <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	68ba      	ldr	r2, [r7, #8]
 801d320:	619a      	str	r2, [r3, #24]
    size_ = size;
 801d322:	68fb      	ldr	r3, [r7, #12]
 801d324:	687a      	ldr	r2, [r7, #4]
 801d326:	629a      	str	r2, [r3, #40]	; 0x28
}
 801d328:	bf00      	nop
 801d32a:	371c      	adds	r7, #28
 801d32c:	46bd      	mov	sp, r7
 801d32e:	bd90      	pop	{r4, r7, pc}
 801d330:	080260f8 	.word	0x080260f8

0801d334 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801d334:	b580      	push	{r7, lr}
 801d336:	b084      	sub	sp, #16
 801d338:	af00      	add	r7, sp, #0
 801d33a:	60f8      	str	r0, [r7, #12]
 801d33c:	60b9      	str	r1, [r7, #8]
 801d33e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801d340:	68fb      	ldr	r3, [r7, #12]
 801d342:	330c      	adds	r3, #12
 801d344:	68b9      	ldr	r1, [r7, #8]
 801d346:	4618      	mov	r0, r3
 801d348:	f7ef f90f 	bl	800c56a <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801d34c:	68fb      	ldr	r3, [r7, #12]
 801d34e:	687a      	ldr	r2, [r7, #4]
 801d350:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801d352:	4b11      	ldr	r3, [pc, #68]	; (801d398 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	2b00      	cmp	r3, #0
 801d358:	d019      	beq.n	801d38e <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801d35a:	4b0f      	ldr	r3, [pc, #60]	; (801d398 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d35c:	681a      	ldr	r2, [r3, #0]
 801d35e:	4b0e      	ldr	r3, [pc, #56]	; (801d398 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	3314      	adds	r3, #20
 801d366:	681b      	ldr	r3, [r3, #0]
 801d368:	68b9      	ldr	r1, [r7, #8]
 801d36a:	4610      	mov	r0, r2
 801d36c:	4798      	blx	r3
 801d36e:	4602      	mov	r2, r0
 801d370:	68fb      	ldr	r3, [r7, #12]
 801d372:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801d374:	4b08      	ldr	r3, [pc, #32]	; (801d398 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d376:	681a      	ldr	r2, [r3, #0]
 801d378:	4b07      	ldr	r3, [pc, #28]	; (801d398 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	681b      	ldr	r3, [r3, #0]
 801d37e:	3318      	adds	r3, #24
 801d380:	681b      	ldr	r3, [r3, #0]
 801d382:	68b9      	ldr	r1, [r7, #8]
 801d384:	4610      	mov	r0, r2
 801d386:	4798      	blx	r3
 801d388:	4602      	mov	r2, r0
 801d38a:	68fb      	ldr	r3, [r7, #12]
 801d38c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801d38e:	bf00      	nop
 801d390:	3710      	adds	r7, #16
 801d392:	46bd      	mov	sp, r7
 801d394:	bd80      	pop	{r7, pc}
 801d396:	bf00      	nop
 801d398:	20000ec4 	.word	0x20000ec4

0801d39c <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801d39c:	b580      	push	{r7, lr}
 801d39e:	b084      	sub	sp, #16
 801d3a0:	af00      	add	r7, sp, #0
 801d3a2:	60f8      	str	r0, [r7, #12]
 801d3a4:	60b9      	str	r1, [r7, #8]
 801d3a6:	607a      	str	r2, [r7, #4]
    type_ = type;
 801d3a8:	68fb      	ldr	r3, [r7, #12]
 801d3aa:	330c      	adds	r3, #12
 801d3ac:	68b9      	ldr	r1, [r7, #8]
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	f7ef f8db 	bl	800c56a <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	687a      	ldr	r2, [r7, #4]
 801d3b8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801d3ba:	4b11      	ldr	r3, [pc, #68]	; (801d400 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d019      	beq.n	801d3f6 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801d3c2:	4b0f      	ldr	r3, [pc, #60]	; (801d400 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d3c4:	681a      	ldr	r2, [r3, #0]
 801d3c6:	4b0e      	ldr	r3, [pc, #56]	; (801d400 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	3314      	adds	r3, #20
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	68b9      	ldr	r1, [r7, #8]
 801d3d2:	4610      	mov	r0, r2
 801d3d4:	4798      	blx	r3
 801d3d6:	4602      	mov	r2, r0
 801d3d8:	68fb      	ldr	r3, [r7, #12]
 801d3da:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801d3dc:	4b08      	ldr	r3, [pc, #32]	; (801d400 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d3de:	681a      	ldr	r2, [r3, #0]
 801d3e0:	4b07      	ldr	r3, [pc, #28]	; (801d400 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	681b      	ldr	r3, [r3, #0]
 801d3e6:	3318      	adds	r3, #24
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	68b9      	ldr	r1, [r7, #8]
 801d3ec:	4610      	mov	r0, r2
 801d3ee:	4798      	blx	r3
 801d3f0:	4602      	mov	r2, r0
 801d3f2:	68fb      	ldr	r3, [r7, #12]
 801d3f4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801d3f6:	bf00      	nop
 801d3f8:	3710      	adds	r7, #16
 801d3fa:	46bd      	mov	sp, r7
 801d3fc:	bd80      	pop	{r7, pc}
 801d3fe:	bf00      	nop
 801d400:	20000ec4 	.word	0x20000ec4

0801d404 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801d404:	b480      	push	{r7}
 801d406:	b083      	sub	sp, #12
 801d408:	af00      	add	r7, sp, #0
 801d40a:	6078      	str	r0, [r7, #4]
 801d40c:	6039      	str	r1, [r7, #0]
    size_ = size;
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	683a      	ldr	r2, [r7, #0]
 801d412:	629a      	str	r2, [r3, #40]	; 0x28
}
 801d414:	bf00      	nop
 801d416:	370c      	adds	r7, #12
 801d418:	46bd      	mov	sp, r7
 801d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d41e:	4770      	bx	lr

0801d420 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801d420:	b590      	push	{r4, r7, lr}
 801d422:	b085      	sub	sp, #20
 801d424:	af00      	add	r7, sp, #0
 801d426:	6078      	str	r0, [r7, #4]
 801d428:	6039      	str	r1, [r7, #0]
    name_ = name;
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	1d1c      	adds	r4, r3, #4
 801d42e:	f107 0308 	add.w	r3, r7, #8
 801d432:	6839      	ldr	r1, [r7, #0]
 801d434:	4618      	mov	r0, r3
 801d436:	f7ef f82c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d43a:	f107 0308 	add.w	r3, r7, #8
 801d43e:	4619      	mov	r1, r3
 801d440:	4620      	mov	r0, r4
 801d442:	f7ef f892 	bl	800c56a <_ZN12SimpleStringaSERKS_>
 801d446:	f107 0308 	add.w	r3, r7, #8
 801d44a:	4618      	mov	r0, r3
 801d44c:	f7ef fbd9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
}
 801d450:	bf00      	nop
 801d452:	3714      	adds	r7, #20
 801d454:	46bd      	mov	sp, r7
 801d456:	bd90      	pop	{r4, r7, pc}

0801d458 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801d458:	b580      	push	{r7, lr}
 801d45a:	b082      	sub	sp, #8
 801d45c:	af00      	add	r7, sp, #0
 801d45e:	6078      	str	r0, [r7, #4]
 801d460:	6039      	str	r1, [r7, #0]
    return name_;
 801d462:	683b      	ldr	r3, [r7, #0]
 801d464:	3304      	adds	r3, #4
 801d466:	4619      	mov	r1, r3
 801d468:	6878      	ldr	r0, [r7, #4]
 801d46a:	f7ef f866 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
}
 801d46e:	6878      	ldr	r0, [r7, #4]
 801d470:	3708      	adds	r7, #8
 801d472:	46bd      	mov	sp, r7
 801d474:	bd80      	pop	{r7, pc}

0801d476 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801d476:	b580      	push	{r7, lr}
 801d478:	b082      	sub	sp, #8
 801d47a:	af00      	add	r7, sp, #0
 801d47c:	6078      	str	r0, [r7, #4]
 801d47e:	6039      	str	r1, [r7, #0]
    return type_;
 801d480:	683b      	ldr	r3, [r7, #0]
 801d482:	330c      	adds	r3, #12
 801d484:	4619      	mov	r1, r3
 801d486:	6878      	ldr	r0, [r7, #4]
 801d488:	f7ef f857 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
}
 801d48c:	6878      	ldr	r0, [r7, #4]
 801d48e:	3708      	adds	r7, #8
 801d490:	46bd      	mov	sp, r7
 801d492:	bd80      	pop	{r7, pc}

0801d494 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801d494:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d496:	b087      	sub	sp, #28
 801d498:	af04      	add	r7, sp, #16
 801d49a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801d49c:	f7f6 fbdc 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d4a0:	4604      	mov	r4, r0
 801d4a2:	6823      	ldr	r3, [r4, #0]
 801d4a4:	3324      	adds	r3, #36	; 0x24
 801d4a6:	681d      	ldr	r5, [r3, #0]
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	330c      	adds	r3, #12
 801d4ac:	4618      	mov	r0, r3
 801d4ae:	f7ef fb7b 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801d4b2:	4606      	mov	r6, r0
 801d4b4:	f7f6 fbe0 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d4b8:	4603      	mov	r3, r0
 801d4ba:	9302      	str	r3, [sp, #8]
 801d4bc:	23c8      	movs	r3, #200	; 0xc8
 801d4be:	9301      	str	r3, [sp, #4]
 801d4c0:	4b06      	ldr	r3, [pc, #24]	; (801d4dc <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801d4c2:	9300      	str	r3, [sp, #0]
 801d4c4:	2300      	movs	r3, #0
 801d4c6:	4632      	mov	r2, r6
 801d4c8:	4905      	ldr	r1, [pc, #20]	; (801d4e0 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801d4ca:	4620      	mov	r0, r4
 801d4cc:	47a8      	blx	r5
    return value_.boolValue_;
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	7e1b      	ldrb	r3, [r3, #24]
}
 801d4d2:	4618      	mov	r0, r3
 801d4d4:	370c      	adds	r7, #12
 801d4d6:	46bd      	mov	sp, r7
 801d4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4da:	bf00      	nop
 801d4dc:	0802605c 	.word	0x0802605c
 801d4e0:	08026024 	.word	0x08026024

0801d4e4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801d4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4e6:	b089      	sub	sp, #36	; 0x24
 801d4e8:	af04      	add	r7, sp, #16
 801d4ea:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801d4ec:	687b      	ldr	r3, [r7, #4]
 801d4ee:	f103 040c 	add.w	r4, r3, #12
 801d4f2:	f107 0308 	add.w	r3, r7, #8
 801d4f6:	4920      	ldr	r1, [pc, #128]	; (801d578 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801d4f8:	4618      	mov	r0, r3
 801d4fa:	f7ee ffca 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d4fe:	2501      	movs	r5, #1
 801d500:	f107 0308 	add.w	r3, r7, #8
 801d504:	4619      	mov	r1, r3
 801d506:	4620      	mov	r0, r4
 801d508:	f7ef fb87 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801d50c:	4603      	mov	r3, r0
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d005      	beq.n	801d51e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	699b      	ldr	r3, [r3, #24]
 801d516:	2b00      	cmp	r3, #0
 801d518:	db01      	blt.n	801d51e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801d51a:	2401      	movs	r4, #1
 801d51c:	e000      	b.n	801d520 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801d51e:	2400      	movs	r4, #0
 801d520:	2d00      	cmp	r5, #0
 801d522:	d004      	beq.n	801d52e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801d524:	f107 0308 	add.w	r3, r7, #8
 801d528:	4618      	mov	r0, r3
 801d52a:	f7ef fb6a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801d52e:	2c00      	cmp	r4, #0
 801d530:	d002      	beq.n	801d538 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	699b      	ldr	r3, [r3, #24]
 801d536:	e01a      	b.n	801d56e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801d538:	f7f6 fb8e 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d53c:	4604      	mov	r4, r0
 801d53e:	6823      	ldr	r3, [r4, #0]
 801d540:	3324      	adds	r3, #36	; 0x24
 801d542:	681d      	ldr	r5, [r3, #0]
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	330c      	adds	r3, #12
 801d548:	4618      	mov	r0, r3
 801d54a:	f7ef fb2d 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801d54e:	4606      	mov	r6, r0
 801d550:	f7f6 fb92 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d554:	4603      	mov	r3, r0
 801d556:	9302      	str	r3, [sp, #8]
 801d558:	23d2      	movs	r3, #210	; 0xd2
 801d55a:	9301      	str	r3, [sp, #4]
 801d55c:	4b07      	ldr	r3, [pc, #28]	; (801d57c <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801d55e:	9300      	str	r3, [sp, #0]
 801d560:	2300      	movs	r3, #0
 801d562:	4632      	mov	r2, r6
 801d564:	4906      	ldr	r1, [pc, #24]	; (801d580 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801d566:	4620      	mov	r0, r4
 801d568:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	699b      	ldr	r3, [r3, #24]
    }
}
 801d56e:	4618      	mov	r0, r3
 801d570:	3714      	adds	r7, #20
 801d572:	46bd      	mov	sp, r7
 801d574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d576:	bf00      	nop
 801d578:	08026020 	.word	0x08026020
 801d57c:	0802605c 	.word	0x0802605c
 801d580:	0802602c 	.word	0x0802602c

0801d584 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801d584:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d586:	b087      	sub	sp, #28
 801d588:	af04      	add	r7, sp, #16
 801d58a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801d58c:	f7f6 fb64 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d590:	4604      	mov	r4, r0
 801d592:	6823      	ldr	r3, [r4, #0]
 801d594:	3324      	adds	r3, #36	; 0x24
 801d596:	681d      	ldr	r5, [r3, #0]
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	330c      	adds	r3, #12
 801d59c:	4618      	mov	r0, r3
 801d59e:	f7ef fb03 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801d5a2:	4606      	mov	r6, r0
 801d5a4:	f7f6 fb68 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d5a8:	4603      	mov	r3, r0
 801d5aa:	9302      	str	r3, [sp, #8]
 801d5ac:	23d9      	movs	r3, #217	; 0xd9
 801d5ae:	9301      	str	r3, [sp, #4]
 801d5b0:	4b06      	ldr	r3, [pc, #24]	; (801d5cc <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801d5b2:	9300      	str	r3, [sp, #0]
 801d5b4:	2300      	movs	r3, #0
 801d5b6:	4632      	mov	r2, r6
 801d5b8:	4905      	ldr	r1, [pc, #20]	; (801d5d0 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801d5ba:	4620      	mov	r0, r4
 801d5bc:	47a8      	blx	r5
    return value_.intValue_;
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	699b      	ldr	r3, [r3, #24]
}
 801d5c2:	4618      	mov	r0, r3
 801d5c4:	370c      	adds	r7, #12
 801d5c6:	46bd      	mov	sp, r7
 801d5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d5ca:	bf00      	nop
 801d5cc:	0802605c 	.word	0x0802605c
 801d5d0:	08026020 	.word	0x08026020

0801d5d4 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801d5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5d6:	b08b      	sub	sp, #44	; 0x2c
 801d5d8:	af04      	add	r7, sp, #16
 801d5da:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	f103 040c 	add.w	r4, r3, #12
 801d5e2:	f107 0308 	add.w	r3, r7, #8
 801d5e6:	4928      	ldr	r1, [pc, #160]	; (801d688 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801d5e8:	4618      	mov	r0, r3
 801d5ea:	f7ee ff52 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d5ee:	f107 0308 	add.w	r3, r7, #8
 801d5f2:	4619      	mov	r1, r3
 801d5f4:	4620      	mov	r0, r4
 801d5f6:	f7ef fb10 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801d5fa:	4603      	mov	r3, r0
 801d5fc:	461c      	mov	r4, r3
 801d5fe:	f107 0308 	add.w	r3, r7, #8
 801d602:	4618      	mov	r0, r3
 801d604:	f7ef fafd 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801d608:	2c00      	cmp	r4, #0
 801d60a:	d002      	beq.n	801d612 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	699b      	ldr	r3, [r3, #24]
 801d610:	e035      	b.n	801d67e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	f103 040c 	add.w	r4, r3, #12
 801d618:	f107 0310 	add.w	r3, r7, #16
 801d61c:	491b      	ldr	r1, [pc, #108]	; (801d68c <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801d61e:	4618      	mov	r0, r3
 801d620:	f7ee ff37 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d624:	f107 0310 	add.w	r3, r7, #16
 801d628:	4619      	mov	r1, r3
 801d62a:	4620      	mov	r0, r4
 801d62c:	f7ef faf5 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801d630:	4603      	mov	r3, r0
 801d632:	461c      	mov	r4, r3
 801d634:	f107 0310 	add.w	r3, r7, #16
 801d638:	4618      	mov	r0, r3
 801d63a:	f7ef fae2 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801d63e:	2c00      	cmp	r4, #0
 801d640:	d002      	beq.n	801d648 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	699b      	ldr	r3, [r3, #24]
 801d646:	e01a      	b.n	801d67e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801d648:	f7f6 fb06 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d64c:	4604      	mov	r4, r0
 801d64e:	6823      	ldr	r3, [r4, #0]
 801d650:	3324      	adds	r3, #36	; 0x24
 801d652:	681d      	ldr	r5, [r3, #0]
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	330c      	adds	r3, #12
 801d658:	4618      	mov	r0, r3
 801d65a:	f7ef faa5 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801d65e:	4606      	mov	r6, r0
 801d660:	f7f6 fb0a 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d664:	4603      	mov	r3, r0
 801d666:	9302      	str	r3, [sp, #8]
 801d668:	23e5      	movs	r3, #229	; 0xe5
 801d66a:	9301      	str	r3, [sp, #4]
 801d66c:	4b08      	ldr	r3, [pc, #32]	; (801d690 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801d66e:	9300      	str	r3, [sp, #0]
 801d670:	2300      	movs	r3, #0
 801d672:	4632      	mov	r2, r6
 801d674:	4907      	ldr	r1, [pc, #28]	; (801d694 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801d676:	4620      	mov	r0, r4
 801d678:	47a8      	blx	r5
        return value_.longIntValue_;
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	699b      	ldr	r3, [r3, #24]
    }
}
 801d67e:	4618      	mov	r0, r3
 801d680:	371c      	adds	r7, #28
 801d682:	46bd      	mov	sp, r7
 801d684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d686:	bf00      	nop
 801d688:	08026020 	.word	0x08026020
 801d68c:	0802602c 	.word	0x0802602c
 801d690:	0802605c 	.word	0x0802605c
 801d694:	0802603c 	.word	0x0802603c

0801d698 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801d698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d69a:	b08d      	sub	sp, #52	; 0x34
 801d69c:	af04      	add	r7, sp, #16
 801d69e:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	f103 040c 	add.w	r4, r3, #12
 801d6a6:	f107 0308 	add.w	r3, r7, #8
 801d6aa:	4940      	ldr	r1, [pc, #256]	; (801d7ac <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801d6ac:	4618      	mov	r0, r3
 801d6ae:	f7ee fef0 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d6b2:	f107 0308 	add.w	r3, r7, #8
 801d6b6:	4619      	mov	r1, r3
 801d6b8:	4620      	mov	r0, r4
 801d6ba:	f7ef faae 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801d6be:	4603      	mov	r3, r0
 801d6c0:	461c      	mov	r4, r3
 801d6c2:	f107 0308 	add.w	r3, r7, #8
 801d6c6:	4618      	mov	r0, r3
 801d6c8:	f7ef fa9b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801d6cc:	2c00      	cmp	r4, #0
 801d6ce:	d002      	beq.n	801d6d6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	699b      	ldr	r3, [r3, #24]
 801d6d4:	e066      	b.n	801d7a4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	f103 040c 	add.w	r4, r3, #12
 801d6dc:	f107 0310 	add.w	r3, r7, #16
 801d6e0:	4933      	ldr	r1, [pc, #204]	; (801d7b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	f7ee fed5 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d6e8:	2501      	movs	r5, #1
 801d6ea:	f107 0310 	add.w	r3, r7, #16
 801d6ee:	4619      	mov	r1, r3
 801d6f0:	4620      	mov	r0, r4
 801d6f2:	f7ef fa92 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801d6f6:	4603      	mov	r3, r0
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d005      	beq.n	801d708 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	699b      	ldr	r3, [r3, #24]
 801d700:	2b00      	cmp	r3, #0
 801d702:	db01      	blt.n	801d708 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801d704:	2401      	movs	r4, #1
 801d706:	e000      	b.n	801d70a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801d708:	2400      	movs	r4, #0
 801d70a:	2d00      	cmp	r5, #0
 801d70c:	d004      	beq.n	801d718 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801d70e:	f107 0310 	add.w	r3, r7, #16
 801d712:	4618      	mov	r0, r3
 801d714:	f7ef fa75 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801d718:	2c00      	cmp	r4, #0
 801d71a:	d002      	beq.n	801d722 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801d71c:	687b      	ldr	r3, [r7, #4]
 801d71e:	699b      	ldr	r3, [r3, #24]
 801d720:	e040      	b.n	801d7a4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801d722:	687b      	ldr	r3, [r7, #4]
 801d724:	f103 040c 	add.w	r4, r3, #12
 801d728:	f107 0318 	add.w	r3, r7, #24
 801d72c:	4921      	ldr	r1, [pc, #132]	; (801d7b4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801d72e:	4618      	mov	r0, r3
 801d730:	f7ee feaf 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801d734:	2501      	movs	r5, #1
 801d736:	f107 0318 	add.w	r3, r7, #24
 801d73a:	4619      	mov	r1, r3
 801d73c:	4620      	mov	r0, r4
 801d73e:	f7ef fa6c 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801d742:	4603      	mov	r3, r0
 801d744:	2b00      	cmp	r3, #0
 801d746:	d005      	beq.n	801d754 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	699b      	ldr	r3, [r3, #24]
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	db01      	blt.n	801d754 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801d750:	2401      	movs	r4, #1
 801d752:	e000      	b.n	801d756 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801d754:	2400      	movs	r4, #0
 801d756:	2d00      	cmp	r5, #0
 801d758:	d004      	beq.n	801d764 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801d75a:	f107 0318 	add.w	r3, r7, #24
 801d75e:	4618      	mov	r0, r3
 801d760:	f7ef fa4f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801d764:	2c00      	cmp	r4, #0
 801d766:	d002      	beq.n	801d76e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	699b      	ldr	r3, [r3, #24]
 801d76c:	e01a      	b.n	801d7a4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801d76e:	f7f6 fa73 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d772:	4604      	mov	r4, r0
 801d774:	6823      	ldr	r3, [r4, #0]
 801d776:	3324      	adds	r3, #36	; 0x24
 801d778:	681d      	ldr	r5, [r3, #0]
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	330c      	adds	r3, #12
 801d77e:	4618      	mov	r0, r3
 801d780:	f7ef fa12 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801d784:	4606      	mov	r6, r0
 801d786:	f7f6 fa77 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d78a:	4603      	mov	r3, r0
 801d78c:	9302      	str	r3, [sp, #8]
 801d78e:	23f4      	movs	r3, #244	; 0xf4
 801d790:	9301      	str	r3, [sp, #4]
 801d792:	4b09      	ldr	r3, [pc, #36]	; (801d7b8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801d794:	9300      	str	r3, [sp, #0]
 801d796:	2300      	movs	r3, #0
 801d798:	4632      	mov	r2, r6
 801d79a:	4908      	ldr	r1, [pc, #32]	; (801d7bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801d79c:	4620      	mov	r0, r4
 801d79e:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	699b      	ldr	r3, [r3, #24]
    }
}
 801d7a4:	4618      	mov	r0, r3
 801d7a6:	3724      	adds	r7, #36	; 0x24
 801d7a8:	46bd      	mov	sp, r7
 801d7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7ac:	0802602c 	.word	0x0802602c
 801d7b0:	08026020 	.word	0x08026020
 801d7b4:	0802603c 	.word	0x0802603c
 801d7b8:	0802605c 	.word	0x0802605c
 801d7bc:	08026048 	.word	0x08026048

0801d7c0 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801d7c0:	b5b0      	push	{r4, r5, r7, lr}
 801d7c2:	b084      	sub	sp, #16
 801d7c4:	af02      	add	r7, sp, #8
 801d7c6:	6078      	str	r0, [r7, #4]
 801d7c8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801d7ca:	f7f6 fa45 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d7ce:	4604      	mov	r4, r0
 801d7d0:	6823      	ldr	r3, [r4, #0]
 801d7d2:	3368      	adds	r3, #104	; 0x68
 801d7d4:	681d      	ldr	r5, [r3, #0]
 801d7d6:	f7f6 fa4f 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d7da:	4603      	mov	r3, r0
 801d7dc:	9300      	str	r3, [sp, #0]
 801d7de:	f240 1323 	movw	r3, #291	; 0x123
 801d7e2:	4a06      	ldr	r2, [pc, #24]	; (801d7fc <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801d7e4:	4906      	ldr	r1, [pc, #24]	; (801d800 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801d7e6:	4620      	mov	r0, r4
 801d7e8:	47a8      	blx	r5
    return cpputest_longlong(0);
 801d7ea:	2100      	movs	r1, #0
 801d7ec:	6878      	ldr	r0, [r7, #4]
 801d7ee:	f7ec fe87 	bl	800a500 <_ZN17cpputest_longlongC1Ei>
}
 801d7f2:	6878      	ldr	r0, [r7, #4]
 801d7f4:	3708      	adds	r7, #8
 801d7f6:	46bd      	mov	sp, r7
 801d7f8:	bdb0      	pop	{r4, r5, r7, pc}
 801d7fa:	bf00      	nop
 801d7fc:	0802605c 	.word	0x0802605c
 801d800:	08026078 	.word	0x08026078

0801d804 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801d804:	b5b0      	push	{r4, r5, r7, lr}
 801d806:	b084      	sub	sp, #16
 801d808:	af02      	add	r7, sp, #8
 801d80a:	6078      	str	r0, [r7, #4]
 801d80c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801d80e:	f7f6 fa23 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d812:	4604      	mov	r4, r0
 801d814:	6823      	ldr	r3, [r4, #0]
 801d816:	3368      	adds	r3, #104	; 0x68
 801d818:	681d      	ldr	r5, [r3, #0]
 801d81a:	f7f6 fa2d 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d81e:	4603      	mov	r3, r0
 801d820:	9300      	str	r3, [sp, #0]
 801d822:	f240 1329 	movw	r3, #297	; 0x129
 801d826:	4a06      	ldr	r2, [pc, #24]	; (801d840 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801d828:	4906      	ldr	r1, [pc, #24]	; (801d844 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801d82a:	4620      	mov	r0, r4
 801d82c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801d82e:	2100      	movs	r1, #0
 801d830:	6878      	ldr	r0, [r7, #4]
 801d832:	f7ec fe71 	bl	800a518 <_ZN18cpputest_ulonglongC1Ei>
}
 801d836:	6878      	ldr	r0, [r7, #4]
 801d838:	3708      	adds	r7, #8
 801d83a:	46bd      	mov	sp, r7
 801d83c:	bdb0      	pop	{r4, r5, r7, pc}
 801d83e:	bf00      	nop
 801d840:	0802605c 	.word	0x0802605c
 801d844:	08026098 	.word	0x08026098

0801d848 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801d848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d84a:	b087      	sub	sp, #28
 801d84c:	af04      	add	r7, sp, #16
 801d84e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801d850:	f7f6 fa02 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d854:	4604      	mov	r4, r0
 801d856:	6823      	ldr	r3, [r4, #0]
 801d858:	3324      	adds	r3, #36	; 0x24
 801d85a:	681d      	ldr	r5, [r3, #0]
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	330c      	adds	r3, #12
 801d860:	4618      	mov	r0, r3
 801d862:	f7ef f9a1 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801d866:	4606      	mov	r6, r0
 801d868:	f7f6 fa06 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d86c:	4603      	mov	r3, r0
 801d86e:	9302      	str	r3, [sp, #8]
 801d870:	f240 1331 	movw	r3, #305	; 0x131
 801d874:	9301      	str	r3, [sp, #4]
 801d876:	4b09      	ldr	r3, [pc, #36]	; (801d89c <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801d878:	9300      	str	r3, [sp, #0]
 801d87a:	2300      	movs	r3, #0
 801d87c:	4632      	mov	r2, r6
 801d87e:	4908      	ldr	r1, [pc, #32]	; (801d8a0 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801d880:	4620      	mov	r0, r4
 801d882:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801d88a:	ec43 2b17 	vmov	d7, r2, r3
}
 801d88e:	eeb0 0a47 	vmov.f32	s0, s14
 801d892:	eef0 0a67 	vmov.f32	s1, s15
 801d896:	370c      	adds	r7, #12
 801d898:	46bd      	mov	sp, r7
 801d89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d89c:	0802605c 	.word	0x0802605c
 801d8a0:	080260c4 	.word	0x080260c4

0801d8a4 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801d8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8a6:	b087      	sub	sp, #28
 801d8a8:	af04      	add	r7, sp, #16
 801d8aa:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801d8ac:	f7f6 f9d4 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d8b0:	4604      	mov	r4, r0
 801d8b2:	6823      	ldr	r3, [r4, #0]
 801d8b4:	3324      	adds	r3, #36	; 0x24
 801d8b6:	681d      	ldr	r5, [r3, #0]
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	330c      	adds	r3, #12
 801d8bc:	4618      	mov	r0, r3
 801d8be:	f7ef f973 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801d8c2:	4606      	mov	r6, r0
 801d8c4:	f7f6 f9d8 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d8c8:	4603      	mov	r3, r0
 801d8ca:	9302      	str	r3, [sp, #8]
 801d8cc:	f240 1337 	movw	r3, #311	; 0x137
 801d8d0:	9301      	str	r3, [sp, #4]
 801d8d2:	4b09      	ldr	r3, [pc, #36]	; (801d8f8 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801d8d4:	9300      	str	r3, [sp, #0]
 801d8d6:	2300      	movs	r3, #0
 801d8d8:	4632      	mov	r2, r6
 801d8da:	4908      	ldr	r1, [pc, #32]	; (801d8fc <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801d8dc:	4620      	mov	r0, r4
 801d8de:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d8e6:	ec43 2b17 	vmov	d7, r2, r3
}
 801d8ea:	eeb0 0a47 	vmov.f32	s0, s14
 801d8ee:	eef0 0a67 	vmov.f32	s1, s15
 801d8f2:	370c      	adds	r7, #12
 801d8f4:	46bd      	mov	sp, r7
 801d8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8f8:	0802605c 	.word	0x0802605c
 801d8fc:	080260c4 	.word	0x080260c4

0801d900 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801d900:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d902:	b087      	sub	sp, #28
 801d904:	af04      	add	r7, sp, #16
 801d906:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801d908:	f7f6 f9a6 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d90c:	4604      	mov	r4, r0
 801d90e:	6823      	ldr	r3, [r4, #0]
 801d910:	3324      	adds	r3, #36	; 0x24
 801d912:	681d      	ldr	r5, [r3, #0]
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	330c      	adds	r3, #12
 801d918:	4618      	mov	r0, r3
 801d91a:	f7ef f945 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801d91e:	4606      	mov	r6, r0
 801d920:	f7f6 f9aa 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d924:	4603      	mov	r3, r0
 801d926:	9302      	str	r3, [sp, #8]
 801d928:	f240 133d 	movw	r3, #317	; 0x13d
 801d92c:	9301      	str	r3, [sp, #4]
 801d92e:	4b06      	ldr	r3, [pc, #24]	; (801d948 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801d930:	9300      	str	r3, [sp, #0]
 801d932:	2300      	movs	r3, #0
 801d934:	4632      	mov	r2, r6
 801d936:	4905      	ldr	r1, [pc, #20]	; (801d94c <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801d938:	4620      	mov	r0, r4
 801d93a:	47a8      	blx	r5
    return value_.stringValue_;
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	699b      	ldr	r3, [r3, #24]
}
 801d940:	4618      	mov	r0, r3
 801d942:	370c      	adds	r7, #12
 801d944:	46bd      	mov	sp, r7
 801d946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d948:	0802605c 	.word	0x0802605c
 801d94c:	080260ec 	.word	0x080260ec

0801d950 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801d950:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d952:	b087      	sub	sp, #28
 801d954:	af04      	add	r7, sp, #16
 801d956:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801d958:	f7f6 f97e 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d95c:	4604      	mov	r4, r0
 801d95e:	6823      	ldr	r3, [r4, #0]
 801d960:	3324      	adds	r3, #36	; 0x24
 801d962:	681d      	ldr	r5, [r3, #0]
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	330c      	adds	r3, #12
 801d968:	4618      	mov	r0, r3
 801d96a:	f7ef f91d 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801d96e:	4606      	mov	r6, r0
 801d970:	f7f6 f982 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d974:	4603      	mov	r3, r0
 801d976:	9302      	str	r3, [sp, #8]
 801d978:	f240 1343 	movw	r3, #323	; 0x143
 801d97c:	9301      	str	r3, [sp, #4]
 801d97e:	4b06      	ldr	r3, [pc, #24]	; (801d998 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801d980:	9300      	str	r3, [sp, #0]
 801d982:	2300      	movs	r3, #0
 801d984:	4632      	mov	r2, r6
 801d986:	4905      	ldr	r1, [pc, #20]	; (801d99c <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801d988:	4620      	mov	r0, r4
 801d98a:	47a8      	blx	r5
    return value_.pointerValue_;
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	699b      	ldr	r3, [r3, #24]
}
 801d990:	4618      	mov	r0, r3
 801d992:	370c      	adds	r7, #12
 801d994:	46bd      	mov	sp, r7
 801d996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d998:	0802605c 	.word	0x0802605c
 801d99c:	080260cc 	.word	0x080260cc

0801d9a0 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801d9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9a2:	b087      	sub	sp, #28
 801d9a4:	af04      	add	r7, sp, #16
 801d9a6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801d9a8:	f7f6 f956 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d9ac:	4604      	mov	r4, r0
 801d9ae:	6823      	ldr	r3, [r4, #0]
 801d9b0:	3324      	adds	r3, #36	; 0x24
 801d9b2:	681d      	ldr	r5, [r3, #0]
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	330c      	adds	r3, #12
 801d9b8:	4618      	mov	r0, r3
 801d9ba:	f7ef f8f5 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801d9be:	4606      	mov	r6, r0
 801d9c0:	f7f6 f95a 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d9c4:	4603      	mov	r3, r0
 801d9c6:	9302      	str	r3, [sp, #8]
 801d9c8:	f240 1349 	movw	r3, #329	; 0x149
 801d9cc:	9301      	str	r3, [sp, #4]
 801d9ce:	4b06      	ldr	r3, [pc, #24]	; (801d9e8 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801d9d0:	9300      	str	r3, [sp, #0]
 801d9d2:	2300      	movs	r3, #0
 801d9d4:	4632      	mov	r2, r6
 801d9d6:	4905      	ldr	r1, [pc, #20]	; (801d9ec <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801d9d8:	4620      	mov	r0, r4
 801d9da:	47a8      	blx	r5
    return value_.pointerValue_;
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	699b      	ldr	r3, [r3, #24]
}
 801d9e0:	4618      	mov	r0, r3
 801d9e2:	370c      	adds	r7, #12
 801d9e4:	46bd      	mov	sp, r7
 801d9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9e8:	0802605c 	.word	0x0802605c
 801d9ec:	080260d4 	.word	0x080260d4

0801d9f0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801d9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9f2:	b087      	sub	sp, #28
 801d9f4:	af04      	add	r7, sp, #16
 801d9f6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801d9f8:	f7f6 f92e 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801d9fc:	4604      	mov	r4, r0
 801d9fe:	6823      	ldr	r3, [r4, #0]
 801da00:	3324      	adds	r3, #36	; 0x24
 801da02:	681d      	ldr	r5, [r3, #0]
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	330c      	adds	r3, #12
 801da08:	4618      	mov	r0, r3
 801da0a:	f7ef f8cd 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801da0e:	4606      	mov	r6, r0
 801da10:	f7f6 f932 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801da14:	4603      	mov	r3, r0
 801da16:	9302      	str	r3, [sp, #8]
 801da18:	f240 134f 	movw	r3, #335	; 0x14f
 801da1c:	9301      	str	r3, [sp, #4]
 801da1e:	4b06      	ldr	r3, [pc, #24]	; (801da38 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801da20:	9300      	str	r3, [sp, #0]
 801da22:	2300      	movs	r3, #0
 801da24:	4632      	mov	r2, r6
 801da26:	4905      	ldr	r1, [pc, #20]	; (801da3c <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801da28:	4620      	mov	r0, r4
 801da2a:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	699b      	ldr	r3, [r3, #24]
}
 801da30:	4618      	mov	r0, r3
 801da32:	370c      	adds	r7, #12
 801da34:	46bd      	mov	sp, r7
 801da36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da38:	0802605c 	.word	0x0802605c
 801da3c:	080260e0 	.word	0x080260e0

0801da40 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801da40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da42:	b087      	sub	sp, #28
 801da44:	af04      	add	r7, sp, #16
 801da46:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801da48:	f7f6 f906 	bl	8013c58 <_ZN10UtestShell10getCurrentEv>
 801da4c:	4604      	mov	r4, r0
 801da4e:	6823      	ldr	r3, [r4, #0]
 801da50:	3324      	adds	r3, #36	; 0x24
 801da52:	681d      	ldr	r5, [r3, #0]
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	330c      	adds	r3, #12
 801da58:	4618      	mov	r0, r3
 801da5a:	f7ef f8a5 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801da5e:	4606      	mov	r6, r0
 801da60:	f7f6 f90a 	bl	8013c78 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801da64:	4603      	mov	r3, r0
 801da66:	9302      	str	r3, [sp, #8]
 801da68:	f240 1355 	movw	r3, #341	; 0x155
 801da6c:	9301      	str	r3, [sp, #4]
 801da6e:	4b06      	ldr	r3, [pc, #24]	; (801da88 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801da70:	9300      	str	r3, [sp, #0]
 801da72:	2300      	movs	r3, #0
 801da74:	4632      	mov	r2, r6
 801da76:	4905      	ldr	r1, [pc, #20]	; (801da8c <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801da78:	4620      	mov	r0, r4
 801da7a:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	699b      	ldr	r3, [r3, #24]
}
 801da80:	4618      	mov	r0, r3
 801da82:	370c      	adds	r7, #12
 801da84:	46bd      	mov	sp, r7
 801da86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da88:	0802605c 	.word	0x0802605c
 801da8c:	080260f8 	.word	0x080260f8

0801da90 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801da90:	b480      	push	{r7}
 801da92:	b083      	sub	sp, #12
 801da94:	af00      	add	r7, sp, #0
 801da96:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	699b      	ldr	r3, [r3, #24]
}
 801da9c:	4618      	mov	r0, r3
 801da9e:	370c      	adds	r7, #12
 801daa0:	46bd      	mov	sp, r7
 801daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daa6:	4770      	bx	lr

0801daa8 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801daa8:	b480      	push	{r7}
 801daaa:	b083      	sub	sp, #12
 801daac:	af00      	add	r7, sp, #0
 801daae:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	699b      	ldr	r3, [r3, #24]
}
 801dab4:	4618      	mov	r0, r3
 801dab6:	370c      	adds	r7, #12
 801dab8:	46bd      	mov	sp, r7
 801daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dabe:	4770      	bx	lr

0801dac0 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801dac0:	b480      	push	{r7}
 801dac2:	b083      	sub	sp, #12
 801dac4:	af00      	add	r7, sp, #0
 801dac6:	6078      	str	r0, [r7, #4]
    return size_;
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801dacc:	4618      	mov	r0, r3
 801dace:	370c      	adds	r7, #12
 801dad0:	46bd      	mov	sp, r7
 801dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dad6:	4770      	bx	lr

0801dad8 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801dad8:	b480      	push	{r7}
 801dada:	b083      	sub	sp, #12
 801dadc:	af00      	add	r7, sp, #0
 801dade:	6078      	str	r0, [r7, #4]
    return comparator_;
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801dae4:	4618      	mov	r0, r3
 801dae6:	370c      	adds	r7, #12
 801dae8:	46bd      	mov	sp, r7
 801daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daee:	4770      	bx	lr

0801daf0 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801daf0:	b480      	push	{r7}
 801daf2:	b083      	sub	sp, #12
 801daf4:	af00      	add	r7, sp, #0
 801daf6:	6078      	str	r0, [r7, #4]
    return copier_;
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801dafc:	4618      	mov	r0, r3
 801dafe:	370c      	adds	r7, #12
 801db00:	46bd      	mov	sp, r7
 801db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db06:	4770      	bx	lr

0801db08 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801db08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db0a:	b0cd      	sub	sp, #308	; 0x134
 801db0c:	af00      	add	r7, sp, #0
 801db0e:	1d3b      	adds	r3, r7, #4
 801db10:	6018      	str	r0, [r3, #0]
 801db12:	463b      	mov	r3, r7
 801db14:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801db16:	2500      	movs	r5, #0
 801db18:	1d3b      	adds	r3, r7, #4
 801db1a:	681b      	ldr	r3, [r3, #0]
 801db1c:	f103 040c 	add.w	r4, r3, #12
 801db20:	f107 0308 	add.w	r3, r7, #8
 801db24:	49bb      	ldr	r1, [pc, #748]	; (801de14 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801db26:	4618      	mov	r0, r3
 801db28:	f7ee fcb3 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801db2c:	2601      	movs	r6, #1
 801db2e:	f107 0308 	add.w	r3, r7, #8
 801db32:	4619      	mov	r1, r3
 801db34:	4620      	mov	r0, r4
 801db36:	f7ef f870 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801db3a:	4603      	mov	r3, r0
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	d015      	beq.n	801db6c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801db40:	463b      	mov	r3, r7
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	f103 040c 	add.w	r4, r3, #12
 801db48:	f107 0310 	add.w	r3, r7, #16
 801db4c:	49b2      	ldr	r1, [pc, #712]	; (801de18 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801db4e:	4618      	mov	r0, r3
 801db50:	f7ee fc9f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801db54:	2501      	movs	r5, #1
 801db56:	f107 0310 	add.w	r3, r7, #16
 801db5a:	4619      	mov	r1, r3
 801db5c:	4620      	mov	r0, r4
 801db5e:	f7ef f85c 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801db62:	4603      	mov	r3, r0
 801db64:	2b00      	cmp	r3, #0
 801db66:	d001      	beq.n	801db6c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801db68:	2401      	movs	r4, #1
 801db6a:	e000      	b.n	801db6e <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801db6c:	2400      	movs	r4, #0
 801db6e:	2d00      	cmp	r5, #0
 801db70:	d004      	beq.n	801db7c <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801db72:	f107 0310 	add.w	r3, r7, #16
 801db76:	4618      	mov	r0, r3
 801db78:	f7ef f843 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801db7c:	2e00      	cmp	r6, #0
 801db7e:	d004      	beq.n	801db8a <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801db80:	f107 0308 	add.w	r3, r7, #8
 801db84:	4618      	mov	r0, r3
 801db86:	f7ef f83c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801db8a:	2c00      	cmp	r4, #0
 801db8c:	d00c      	beq.n	801dba8 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801db8e:	1d3b      	adds	r3, r7, #4
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	699a      	ldr	r2, [r3, #24]
 801db94:	463b      	mov	r3, r7
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	699b      	ldr	r3, [r3, #24]
 801db9a:	429a      	cmp	r2, r3
 801db9c:	bf0c      	ite	eq
 801db9e:	2301      	moveq	r3, #1
 801dba0:	2300      	movne	r3, #0
 801dba2:	b2dc      	uxtb	r4, r3
 801dba4:	f000 bd60 	b.w	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801dba8:	2500      	movs	r5, #0
 801dbaa:	1d3b      	adds	r3, r7, #4
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	f103 040c 	add.w	r4, r3, #12
 801dbb2:	f107 0318 	add.w	r3, r7, #24
 801dbb6:	4998      	ldr	r1, [pc, #608]	; (801de18 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801dbb8:	4618      	mov	r0, r3
 801dbba:	f7ee fc6a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801dbbe:	2601      	movs	r6, #1
 801dbc0:	f107 0318 	add.w	r3, r7, #24
 801dbc4:	4619      	mov	r1, r3
 801dbc6:	4620      	mov	r0, r4
 801dbc8:	f7ef f827 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801dbcc:	4603      	mov	r3, r0
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d015      	beq.n	801dbfe <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801dbd2:	463b      	mov	r3, r7
 801dbd4:	681b      	ldr	r3, [r3, #0]
 801dbd6:	f103 040c 	add.w	r4, r3, #12
 801dbda:	f107 0320 	add.w	r3, r7, #32
 801dbde:	498d      	ldr	r1, [pc, #564]	; (801de14 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801dbe0:	4618      	mov	r0, r3
 801dbe2:	f7ee fc56 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801dbe6:	2501      	movs	r5, #1
 801dbe8:	f107 0320 	add.w	r3, r7, #32
 801dbec:	4619      	mov	r1, r3
 801dbee:	4620      	mov	r0, r4
 801dbf0:	f7ef f813 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801dbf4:	4603      	mov	r3, r0
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d001      	beq.n	801dbfe <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801dbfa:	2401      	movs	r4, #1
 801dbfc:	e000      	b.n	801dc00 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801dbfe:	2400      	movs	r4, #0
 801dc00:	2d00      	cmp	r5, #0
 801dc02:	d004      	beq.n	801dc0e <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801dc04:	f107 0320 	add.w	r3, r7, #32
 801dc08:	4618      	mov	r0, r3
 801dc0a:	f7ee fffa 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801dc0e:	2e00      	cmp	r6, #0
 801dc10:	d004      	beq.n	801dc1c <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801dc12:	f107 0318 	add.w	r3, r7, #24
 801dc16:	4618      	mov	r0, r3
 801dc18:	f7ee fff3 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801dc1c:	2c00      	cmp	r4, #0
 801dc1e:	d00c      	beq.n	801dc3a <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801dc20:	1d3b      	adds	r3, r7, #4
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	699a      	ldr	r2, [r3, #24]
 801dc26:	463b      	mov	r3, r7
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	699b      	ldr	r3, [r3, #24]
 801dc2c:	429a      	cmp	r2, r3
 801dc2e:	bf0c      	ite	eq
 801dc30:	2301      	moveq	r3, #1
 801dc32:	2300      	movne	r3, #0
 801dc34:	b2dc      	uxtb	r4, r3
 801dc36:	f000 bd17 	b.w	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801dc3a:	2500      	movs	r5, #0
 801dc3c:	1d3b      	adds	r3, r7, #4
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	f103 040c 	add.w	r4, r3, #12
 801dc44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dc48:	4974      	ldr	r1, [pc, #464]	; (801de1c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801dc4a:	4618      	mov	r0, r3
 801dc4c:	f7ee fc21 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801dc50:	2601      	movs	r6, #1
 801dc52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dc56:	4619      	mov	r1, r3
 801dc58:	4620      	mov	r0, r4
 801dc5a:	f7ee ffde 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801dc5e:	4603      	mov	r3, r0
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	d015      	beq.n	801dc90 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801dc64:	463b      	mov	r3, r7
 801dc66:	681b      	ldr	r3, [r3, #0]
 801dc68:	f103 040c 	add.w	r4, r3, #12
 801dc6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dc70:	4969      	ldr	r1, [pc, #420]	; (801de18 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801dc72:	4618      	mov	r0, r3
 801dc74:	f7ee fc0d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801dc78:	2501      	movs	r5, #1
 801dc7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dc7e:	4619      	mov	r1, r3
 801dc80:	4620      	mov	r0, r4
 801dc82:	f7ee ffca 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801dc86:	4603      	mov	r3, r0
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d001      	beq.n	801dc90 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801dc8c:	2401      	movs	r4, #1
 801dc8e:	e000      	b.n	801dc92 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801dc90:	2400      	movs	r4, #0
 801dc92:	2d00      	cmp	r5, #0
 801dc94:	d004      	beq.n	801dca0 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801dc96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dc9a:	4618      	mov	r0, r3
 801dc9c:	f7ee ffb1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801dca0:	2e00      	cmp	r6, #0
 801dca2:	d004      	beq.n	801dcae <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801dca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dca8:	4618      	mov	r0, r3
 801dcaa:	f7ee ffaa 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801dcae:	2c00      	cmp	r4, #0
 801dcb0:	d012      	beq.n	801dcd8 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801dcb2:	463b      	mov	r3, r7
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	699b      	ldr	r3, [r3, #24]
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	db0a      	blt.n	801dcd2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801dcbc:	1d3b      	adds	r3, r7, #4
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	699b      	ldr	r3, [r3, #24]
 801dcc2:	463a      	mov	r2, r7
 801dcc4:	6812      	ldr	r2, [r2, #0]
 801dcc6:	6992      	ldr	r2, [r2, #24]
 801dcc8:	4293      	cmp	r3, r2
 801dcca:	d102      	bne.n	801dcd2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801dccc:	2401      	movs	r4, #1
 801dcce:	f000 bccb 	b.w	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801dcd2:	2400      	movs	r4, #0
 801dcd4:	f000 bcc8 	b.w	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801dcd8:	2500      	movs	r5, #0
 801dcda:	1d3b      	adds	r3, r7, #4
 801dcdc:	681b      	ldr	r3, [r3, #0]
 801dcde:	f103 040c 	add.w	r4, r3, #12
 801dce2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dce6:	494c      	ldr	r1, [pc, #304]	; (801de18 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801dce8:	4618      	mov	r0, r3
 801dcea:	f7ee fbd2 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801dcee:	2601      	movs	r6, #1
 801dcf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dcf4:	4619      	mov	r1, r3
 801dcf6:	4620      	mov	r0, r4
 801dcf8:	f7ee ff8f 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801dcfc:	4603      	mov	r3, r0
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d015      	beq.n	801dd2e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801dd02:	463b      	mov	r3, r7
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	f103 040c 	add.w	r4, r3, #12
 801dd0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dd0e:	4943      	ldr	r1, [pc, #268]	; (801de1c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801dd10:	4618      	mov	r0, r3
 801dd12:	f7ee fbbe 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801dd16:	2501      	movs	r5, #1
 801dd18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dd1c:	4619      	mov	r1, r3
 801dd1e:	4620      	mov	r0, r4
 801dd20:	f7ee ff7b 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801dd24:	4603      	mov	r3, r0
 801dd26:	2b00      	cmp	r3, #0
 801dd28:	d001      	beq.n	801dd2e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801dd2a:	2401      	movs	r4, #1
 801dd2c:	e000      	b.n	801dd30 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801dd2e:	2400      	movs	r4, #0
 801dd30:	2d00      	cmp	r5, #0
 801dd32:	d004      	beq.n	801dd3e <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801dd34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dd38:	4618      	mov	r0, r3
 801dd3a:	f7ee ff62 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801dd3e:	2e00      	cmp	r6, #0
 801dd40:	d004      	beq.n	801dd4c <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801dd42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dd46:	4618      	mov	r0, r3
 801dd48:	f7ee ff5b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801dd4c:	2c00      	cmp	r4, #0
 801dd4e:	d012      	beq.n	801dd76 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801dd50:	1d3b      	adds	r3, r7, #4
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	699b      	ldr	r3, [r3, #24]
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	db0a      	blt.n	801dd70 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801dd5a:	1d3b      	adds	r3, r7, #4
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	699b      	ldr	r3, [r3, #24]
 801dd60:	463a      	mov	r2, r7
 801dd62:	6812      	ldr	r2, [r2, #0]
 801dd64:	6992      	ldr	r2, [r2, #24]
 801dd66:	4293      	cmp	r3, r2
 801dd68:	d102      	bne.n	801dd70 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801dd6a:	2401      	movs	r4, #1
 801dd6c:	f000 bc7c 	b.w	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801dd70:	2400      	movs	r4, #0
 801dd72:	f000 bc79 	b.w	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801dd76:	2500      	movs	r5, #0
 801dd78:	1d3b      	adds	r3, r7, #4
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	f103 040c 	add.w	r4, r3, #12
 801dd80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801dd84:	4926      	ldr	r1, [pc, #152]	; (801de20 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801dd86:	4618      	mov	r0, r3
 801dd88:	f7ee fb83 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801dd8c:	2601      	movs	r6, #1
 801dd8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801dd92:	4619      	mov	r1, r3
 801dd94:	4620      	mov	r0, r4
 801dd96:	f7ee ff40 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801dd9a:	4603      	mov	r3, r0
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	d015      	beq.n	801ddcc <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801dda0:	463b      	mov	r3, r7
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	f103 040c 	add.w	r4, r3, #12
 801dda8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ddac:	491a      	ldr	r1, [pc, #104]	; (801de18 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ddae:	4618      	mov	r0, r3
 801ddb0:	f7ee fb6f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801ddb4:	2501      	movs	r5, #1
 801ddb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ddba:	4619      	mov	r1, r3
 801ddbc:	4620      	mov	r0, r4
 801ddbe:	f7ee ff2c 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801ddc2:	4603      	mov	r3, r0
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d001      	beq.n	801ddcc <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801ddc8:	2401      	movs	r4, #1
 801ddca:	e000      	b.n	801ddce <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801ddcc:	2400      	movs	r4, #0
 801ddce:	2d00      	cmp	r5, #0
 801ddd0:	d004      	beq.n	801dddc <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801ddd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	f7ee ff13 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801dddc:	2e00      	cmp	r6, #0
 801ddde:	d004      	beq.n	801ddea <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801dde0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801dde4:	4618      	mov	r0, r3
 801dde6:	f7ee ff0c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ddea:	2c00      	cmp	r4, #0
 801ddec:	d01a      	beq.n	801de24 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801ddee:	463b      	mov	r3, r7
 801ddf0:	681b      	ldr	r3, [r3, #0]
 801ddf2:	699b      	ldr	r3, [r3, #24]
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	db0a      	blt.n	801de0e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801ddf8:	1d3b      	adds	r3, r7, #4
 801ddfa:	681b      	ldr	r3, [r3, #0]
 801ddfc:	699b      	ldr	r3, [r3, #24]
 801ddfe:	463a      	mov	r2, r7
 801de00:	6812      	ldr	r2, [r2, #0]
 801de02:	6992      	ldr	r2, [r2, #24]
 801de04:	4293      	cmp	r3, r2
 801de06:	d102      	bne.n	801de0e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801de08:	2401      	movs	r4, #1
 801de0a:	f000 bc2d 	b.w	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801de0e:	2400      	movs	r4, #0
 801de10:	f000 bc2a 	b.w	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801de14:	0802603c 	.word	0x0802603c
 801de18:	08026020 	.word	0x08026020
 801de1c:	0802602c 	.word	0x0802602c
 801de20:	08026048 	.word	0x08026048
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801de24:	2500      	movs	r5, #0
 801de26:	1d3b      	adds	r3, r7, #4
 801de28:	681b      	ldr	r3, [r3, #0]
 801de2a:	f103 040c 	add.w	r4, r3, #12
 801de2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801de32:	49b8      	ldr	r1, [pc, #736]	; (801e114 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801de34:	4618      	mov	r0, r3
 801de36:	f7ee fb2c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801de3a:	2601      	movs	r6, #1
 801de3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801de40:	4619      	mov	r1, r3
 801de42:	4620      	mov	r0, r4
 801de44:	f7ee fee9 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801de48:	4603      	mov	r3, r0
 801de4a:	2b00      	cmp	r3, #0
 801de4c:	d015      	beq.n	801de7a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801de4e:	463b      	mov	r3, r7
 801de50:	681b      	ldr	r3, [r3, #0]
 801de52:	f103 040c 	add.w	r4, r3, #12
 801de56:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801de5a:	49af      	ldr	r1, [pc, #700]	; (801e118 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801de5c:	4618      	mov	r0, r3
 801de5e:	f7ee fb18 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801de62:	2501      	movs	r5, #1
 801de64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801de68:	4619      	mov	r1, r3
 801de6a:	4620      	mov	r0, r4
 801de6c:	f7ee fed5 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801de70:	4603      	mov	r3, r0
 801de72:	2b00      	cmp	r3, #0
 801de74:	d001      	beq.n	801de7a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801de76:	2401      	movs	r4, #1
 801de78:	e000      	b.n	801de7c <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801de7a:	2400      	movs	r4, #0
 801de7c:	2d00      	cmp	r5, #0
 801de7e:	d004      	beq.n	801de8a <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801de80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801de84:	4618      	mov	r0, r3
 801de86:	f7ee febc 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801de8a:	2e00      	cmp	r6, #0
 801de8c:	d004      	beq.n	801de98 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801de8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801de92:	4618      	mov	r0, r3
 801de94:	f7ee feb5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801de98:	2c00      	cmp	r4, #0
 801de9a:	d010      	beq.n	801debe <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801de9c:	1d3b      	adds	r3, r7, #4
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	699b      	ldr	r3, [r3, #24]
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	db09      	blt.n	801deba <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801dea6:	1d3b      	adds	r3, r7, #4
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	699b      	ldr	r3, [r3, #24]
 801deac:	463a      	mov	r2, r7
 801deae:	6812      	ldr	r2, [r2, #0]
 801deb0:	6992      	ldr	r2, [r2, #24]
 801deb2:	4293      	cmp	r3, r2
 801deb4:	d101      	bne.n	801deba <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801deb6:	2401      	movs	r4, #1
 801deb8:	e3d6      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801deba:	2400      	movs	r4, #0
 801debc:	e3d4      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801debe:	2500      	movs	r5, #0
 801dec0:	1d3b      	adds	r3, r7, #4
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	f103 040c 	add.w	r4, r3, #12
 801dec8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801decc:	4993      	ldr	r1, [pc, #588]	; (801e11c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801dece:	4618      	mov	r0, r3
 801ded0:	f7ee fadf 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801ded4:	2601      	movs	r6, #1
 801ded6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801deda:	4619      	mov	r1, r3
 801dedc:	4620      	mov	r0, r4
 801dede:	f7ee fe9c 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801dee2:	4603      	mov	r3, r0
 801dee4:	2b00      	cmp	r3, #0
 801dee6:	d015      	beq.n	801df14 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801dee8:	463b      	mov	r3, r7
 801deea:	681b      	ldr	r3, [r3, #0]
 801deec:	f103 040c 	add.w	r4, r3, #12
 801def0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801def4:	498a      	ldr	r1, [pc, #552]	; (801e120 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801def6:	4618      	mov	r0, r3
 801def8:	f7ee facb 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801defc:	2501      	movs	r5, #1
 801defe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801df02:	4619      	mov	r1, r3
 801df04:	4620      	mov	r0, r4
 801df06:	f7ee fe88 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801df0a:	4603      	mov	r3, r0
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d001      	beq.n	801df14 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801df10:	2401      	movs	r4, #1
 801df12:	e000      	b.n	801df16 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801df14:	2400      	movs	r4, #0
 801df16:	2d00      	cmp	r5, #0
 801df18:	d004      	beq.n	801df24 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801df1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801df1e:	4618      	mov	r0, r3
 801df20:	f7ee fe6f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801df24:	2e00      	cmp	r6, #0
 801df26:	d004      	beq.n	801df32 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801df28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801df2c:	4618      	mov	r0, r3
 801df2e:	f7ee fe68 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801df32:	2c00      	cmp	r4, #0
 801df34:	d010      	beq.n	801df58 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801df36:	463b      	mov	r3, r7
 801df38:	681b      	ldr	r3, [r3, #0]
 801df3a:	699b      	ldr	r3, [r3, #24]
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	db09      	blt.n	801df54 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801df40:	1d3b      	adds	r3, r7, #4
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	699b      	ldr	r3, [r3, #24]
 801df46:	463a      	mov	r2, r7
 801df48:	6812      	ldr	r2, [r2, #0]
 801df4a:	6992      	ldr	r2, [r2, #24]
 801df4c:	4293      	cmp	r3, r2
 801df4e:	d101      	bne.n	801df54 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801df50:	2401      	movs	r4, #1
 801df52:	e389      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801df54:	2400      	movs	r4, #0
 801df56:	e387      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801df58:	2500      	movs	r5, #0
 801df5a:	1d3b      	adds	r3, r7, #4
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	f103 040c 	add.w	r4, r3, #12
 801df62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801df66:	496e      	ldr	r1, [pc, #440]	; (801e120 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801df68:	4618      	mov	r0, r3
 801df6a:	f7ee fa92 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801df6e:	2601      	movs	r6, #1
 801df70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801df74:	4619      	mov	r1, r3
 801df76:	4620      	mov	r0, r4
 801df78:	f7ee fe4f 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801df7c:	4603      	mov	r3, r0
 801df7e:	2b00      	cmp	r3, #0
 801df80:	d015      	beq.n	801dfae <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801df82:	463b      	mov	r3, r7
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	f103 040c 	add.w	r4, r3, #12
 801df8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801df8e:	4963      	ldr	r1, [pc, #396]	; (801e11c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801df90:	4618      	mov	r0, r3
 801df92:	f7ee fa7e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801df96:	2501      	movs	r5, #1
 801df98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801df9c:	4619      	mov	r1, r3
 801df9e:	4620      	mov	r0, r4
 801dfa0:	f7ee fe3b 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801dfa4:	4603      	mov	r3, r0
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d001      	beq.n	801dfae <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801dfaa:	2401      	movs	r4, #1
 801dfac:	e000      	b.n	801dfb0 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801dfae:	2400      	movs	r4, #0
 801dfb0:	2d00      	cmp	r5, #0
 801dfb2:	d004      	beq.n	801dfbe <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801dfb4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801dfb8:	4618      	mov	r0, r3
 801dfba:	f7ee fe22 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801dfbe:	2e00      	cmp	r6, #0
 801dfc0:	d004      	beq.n	801dfcc <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801dfc2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801dfc6:	4618      	mov	r0, r3
 801dfc8:	f7ee fe1b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801dfcc:	2c00      	cmp	r4, #0
 801dfce:	d010      	beq.n	801dff2 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801dfd0:	1d3b      	adds	r3, r7, #4
 801dfd2:	681b      	ldr	r3, [r3, #0]
 801dfd4:	699b      	ldr	r3, [r3, #24]
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	db09      	blt.n	801dfee <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801dfda:	1d3b      	adds	r3, r7, #4
 801dfdc:	681b      	ldr	r3, [r3, #0]
 801dfde:	699b      	ldr	r3, [r3, #24]
 801dfe0:	463a      	mov	r2, r7
 801dfe2:	6812      	ldr	r2, [r2, #0]
 801dfe4:	6992      	ldr	r2, [r2, #24]
 801dfe6:	4293      	cmp	r3, r2
 801dfe8:	d101      	bne.n	801dfee <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801dfea:	2401      	movs	r4, #1
 801dfec:	e33c      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801dfee:	2400      	movs	r4, #0
 801dff0:	e33a      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801dff2:	2500      	movs	r5, #0
 801dff4:	1d3b      	adds	r3, r7, #4
 801dff6:	681b      	ldr	r3, [r3, #0]
 801dff8:	f103 040c 	add.w	r4, r3, #12
 801dffc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e000:	4946      	ldr	r1, [pc, #280]	; (801e11c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e002:	4618      	mov	r0, r3
 801e004:	f7ee fa45 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e008:	2601      	movs	r6, #1
 801e00a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e00e:	4619      	mov	r1, r3
 801e010:	4620      	mov	r0, r4
 801e012:	f7ee fe02 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e016:	4603      	mov	r3, r0
 801e018:	2b00      	cmp	r3, #0
 801e01a:	d015      	beq.n	801e048 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e01c:	463b      	mov	r3, r7
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	f103 040c 	add.w	r4, r3, #12
 801e024:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e028:	493b      	ldr	r1, [pc, #236]	; (801e118 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e02a:	4618      	mov	r0, r3
 801e02c:	f7ee fa31 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e030:	2501      	movs	r5, #1
 801e032:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e036:	4619      	mov	r1, r3
 801e038:	4620      	mov	r0, r4
 801e03a:	f7ee fdee 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e03e:	4603      	mov	r3, r0
 801e040:	2b00      	cmp	r3, #0
 801e042:	d001      	beq.n	801e048 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e044:	2401      	movs	r4, #1
 801e046:	e000      	b.n	801e04a <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801e048:	2400      	movs	r4, #0
 801e04a:	2d00      	cmp	r5, #0
 801e04c:	d004      	beq.n	801e058 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801e04e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e052:	4618      	mov	r0, r3
 801e054:	f7ee fdd5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e058:	2e00      	cmp	r6, #0
 801e05a:	d004      	beq.n	801e066 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801e05c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e060:	4618      	mov	r0, r3
 801e062:	f7ee fdce 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e066:	2c00      	cmp	r4, #0
 801e068:	d00b      	beq.n	801e082 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801e06a:	1d3b      	adds	r3, r7, #4
 801e06c:	681b      	ldr	r3, [r3, #0]
 801e06e:	699a      	ldr	r2, [r3, #24]
 801e070:	463b      	mov	r3, r7
 801e072:	681b      	ldr	r3, [r3, #0]
 801e074:	699b      	ldr	r3, [r3, #24]
 801e076:	429a      	cmp	r2, r3
 801e078:	bf0c      	ite	eq
 801e07a:	2301      	moveq	r3, #1
 801e07c:	2300      	movne	r3, #0
 801e07e:	b2dc      	uxtb	r4, r3
 801e080:	e2f2      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801e082:	2500      	movs	r5, #0
 801e084:	1d3b      	adds	r3, r7, #4
 801e086:	681b      	ldr	r3, [r3, #0]
 801e088:	f103 040c 	add.w	r4, r3, #12
 801e08c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e090:	4921      	ldr	r1, [pc, #132]	; (801e118 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e092:	4618      	mov	r0, r3
 801e094:	f7ee f9fd 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e098:	2601      	movs	r6, #1
 801e09a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e09e:	4619      	mov	r1, r3
 801e0a0:	4620      	mov	r0, r4
 801e0a2:	f7ee fdba 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e0a6:	4603      	mov	r3, r0
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d015      	beq.n	801e0d8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e0ac:	463b      	mov	r3, r7
 801e0ae:	681b      	ldr	r3, [r3, #0]
 801e0b0:	f103 040c 	add.w	r4, r3, #12
 801e0b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e0b8:	4918      	ldr	r1, [pc, #96]	; (801e11c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e0ba:	4618      	mov	r0, r3
 801e0bc:	f7ee f9e9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e0c0:	2501      	movs	r5, #1
 801e0c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e0c6:	4619      	mov	r1, r3
 801e0c8:	4620      	mov	r0, r4
 801e0ca:	f7ee fda6 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e0ce:	4603      	mov	r3, r0
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	d001      	beq.n	801e0d8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e0d4:	2401      	movs	r4, #1
 801e0d6:	e000      	b.n	801e0da <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801e0d8:	2400      	movs	r4, #0
 801e0da:	2d00      	cmp	r5, #0
 801e0dc:	d004      	beq.n	801e0e8 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801e0de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e0e2:	4618      	mov	r0, r3
 801e0e4:	f7ee fd8d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e0e8:	2e00      	cmp	r6, #0
 801e0ea:	d004      	beq.n	801e0f6 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801e0ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e0f0:	4618      	mov	r0, r3
 801e0f2:	f7ee fd86 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e0f6:	2c00      	cmp	r4, #0
 801e0f8:	d014      	beq.n	801e124 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801e0fa:	1d3b      	adds	r3, r7, #4
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	699a      	ldr	r2, [r3, #24]
 801e100:	463b      	mov	r3, r7
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	699b      	ldr	r3, [r3, #24]
 801e106:	429a      	cmp	r2, r3
 801e108:	bf0c      	ite	eq
 801e10a:	2301      	moveq	r3, #1
 801e10c:	2300      	movne	r3, #0
 801e10e:	b2dc      	uxtb	r4, r3
 801e110:	e2aa      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e112:	bf00      	nop
 801e114:	08026020 	.word	0x08026020
 801e118:	08026048 	.word	0x08026048
 801e11c:	0802602c 	.word	0x0802602c
 801e120:	0802603c 	.word	0x0802603c
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801e124:	2500      	movs	r5, #0
 801e126:	1d3b      	adds	r3, r7, #4
 801e128:	681b      	ldr	r3, [r3, #0]
 801e12a:	f103 040c 	add.w	r4, r3, #12
 801e12e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e132:	49ae      	ldr	r1, [pc, #696]	; (801e3ec <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e134:	4618      	mov	r0, r3
 801e136:	f7ee f9ac 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e13a:	2601      	movs	r6, #1
 801e13c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e140:	4619      	mov	r1, r3
 801e142:	4620      	mov	r0, r4
 801e144:	f7ee fd69 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e148:	4603      	mov	r3, r0
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	d015      	beq.n	801e17a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e14e:	463b      	mov	r3, r7
 801e150:	681b      	ldr	r3, [r3, #0]
 801e152:	f103 040c 	add.w	r4, r3, #12
 801e156:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e15a:	49a5      	ldr	r1, [pc, #660]	; (801e3f0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e15c:	4618      	mov	r0, r3
 801e15e:	f7ee f998 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e162:	2501      	movs	r5, #1
 801e164:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e168:	4619      	mov	r1, r3
 801e16a:	4620      	mov	r0, r4
 801e16c:	f7ee fd55 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e170:	4603      	mov	r3, r0
 801e172:	2b00      	cmp	r3, #0
 801e174:	d001      	beq.n	801e17a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e176:	2401      	movs	r4, #1
 801e178:	e000      	b.n	801e17c <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801e17a:	2400      	movs	r4, #0
 801e17c:	2d00      	cmp	r5, #0
 801e17e:	d004      	beq.n	801e18a <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801e180:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e184:	4618      	mov	r0, r3
 801e186:	f7ee fd3c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e18a:	2e00      	cmp	r6, #0
 801e18c:	d004      	beq.n	801e198 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801e18e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e192:	4618      	mov	r0, r3
 801e194:	f7ee fd35 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e198:	2c00      	cmp	r4, #0
 801e19a:	d010      	beq.n	801e1be <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801e19c:	1d3b      	adds	r3, r7, #4
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	699b      	ldr	r3, [r3, #24]
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	db09      	blt.n	801e1ba <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801e1a6:	1d3b      	adds	r3, r7, #4
 801e1a8:	681b      	ldr	r3, [r3, #0]
 801e1aa:	699b      	ldr	r3, [r3, #24]
 801e1ac:	463a      	mov	r2, r7
 801e1ae:	6812      	ldr	r2, [r2, #0]
 801e1b0:	6992      	ldr	r2, [r2, #24]
 801e1b2:	4293      	cmp	r3, r2
 801e1b4:	d101      	bne.n	801e1ba <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801e1b6:	2401      	movs	r4, #1
 801e1b8:	e256      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e1ba:	2400      	movs	r4, #0
 801e1bc:	e254      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801e1be:	2500      	movs	r5, #0
 801e1c0:	1d3b      	adds	r3, r7, #4
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	f103 040c 	add.w	r4, r3, #12
 801e1c8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e1cc:	4988      	ldr	r1, [pc, #544]	; (801e3f0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e1ce:	4618      	mov	r0, r3
 801e1d0:	f7ee f95f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e1d4:	2601      	movs	r6, #1
 801e1d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e1da:	4619      	mov	r1, r3
 801e1dc:	4620      	mov	r0, r4
 801e1de:	f7ee fd1c 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e1e2:	4603      	mov	r3, r0
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d015      	beq.n	801e214 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801e1e8:	463b      	mov	r3, r7
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	f103 040c 	add.w	r4, r3, #12
 801e1f0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e1f4:	497d      	ldr	r1, [pc, #500]	; (801e3ec <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e1f6:	4618      	mov	r0, r3
 801e1f8:	f7ee f94b 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e1fc:	2501      	movs	r5, #1
 801e1fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e202:	4619      	mov	r1, r3
 801e204:	4620      	mov	r0, r4
 801e206:	f7ee fd08 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e20a:	4603      	mov	r3, r0
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	d001      	beq.n	801e214 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801e210:	2401      	movs	r4, #1
 801e212:	e000      	b.n	801e216 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801e214:	2400      	movs	r4, #0
 801e216:	2d00      	cmp	r5, #0
 801e218:	d004      	beq.n	801e224 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801e21a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e21e:	4618      	mov	r0, r3
 801e220:	f7ee fcef 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e224:	2e00      	cmp	r6, #0
 801e226:	d004      	beq.n	801e232 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801e228:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e22c:	4618      	mov	r0, r3
 801e22e:	f7ee fce8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e232:	2c00      	cmp	r4, #0
 801e234:	d010      	beq.n	801e258 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801e236:	463b      	mov	r3, r7
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	699b      	ldr	r3, [r3, #24]
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	db09      	blt.n	801e254 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801e240:	1d3b      	adds	r3, r7, #4
 801e242:	681b      	ldr	r3, [r3, #0]
 801e244:	699b      	ldr	r3, [r3, #24]
 801e246:	463a      	mov	r2, r7
 801e248:	6812      	ldr	r2, [r2, #0]
 801e24a:	6992      	ldr	r2, [r2, #24]
 801e24c:	4293      	cmp	r3, r2
 801e24e:	d101      	bne.n	801e254 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801e250:	2401      	movs	r4, #1
 801e252:	e209      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e254:	2400      	movs	r4, #0
 801e256:	e207      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801e258:	1d3b      	adds	r3, r7, #4
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	f103 020c 	add.w	r2, r3, #12
 801e260:	463b      	mov	r3, r7
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	330c      	adds	r3, #12
 801e266:	4619      	mov	r1, r3
 801e268:	4610      	mov	r0, r2
 801e26a:	f7ee fd1b 	bl	800cca4 <_ZneRK12SimpleStringS1_>
 801e26e:	4603      	mov	r3, r0
 801e270:	2b00      	cmp	r3, #0
 801e272:	d001      	beq.n	801e278 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801e274:	2400      	movs	r4, #0
 801e276:	e1f7      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801e278:	1d3b      	adds	r3, r7, #4
 801e27a:	681b      	ldr	r3, [r3, #0]
 801e27c:	f103 040c 	add.w	r4, r3, #12
 801e280:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e284:	495b      	ldr	r1, [pc, #364]	; (801e3f4 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801e286:	4618      	mov	r0, r3
 801e288:	f7ee f903 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e28c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e290:	4619      	mov	r1, r3
 801e292:	4620      	mov	r0, r4
 801e294:	f7ee fcc1 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e298:	4603      	mov	r3, r0
 801e29a:	461c      	mov	r4, r3
 801e29c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e2a0:	4618      	mov	r0, r3
 801e2a2:	f7ee fcae 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e2a6:	2c00      	cmp	r4, #0
 801e2a8:	d00b      	beq.n	801e2c2 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801e2aa:	1d3b      	adds	r3, r7, #4
 801e2ac:	681b      	ldr	r3, [r3, #0]
 801e2ae:	7e1a      	ldrb	r2, [r3, #24]
 801e2b0:	463b      	mov	r3, r7
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	7e1b      	ldrb	r3, [r3, #24]
 801e2b6:	429a      	cmp	r2, r3
 801e2b8:	bf0c      	ite	eq
 801e2ba:	2301      	moveq	r3, #1
 801e2bc:	2300      	movne	r3, #0
 801e2be:	b2dc      	uxtb	r4, r3
 801e2c0:	e1d2      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801e2c2:	1d3b      	adds	r3, r7, #4
 801e2c4:	681b      	ldr	r3, [r3, #0]
 801e2c6:	f103 040c 	add.w	r4, r3, #12
 801e2ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e2ce:	494a      	ldr	r1, [pc, #296]	; (801e3f8 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801e2d0:	4618      	mov	r0, r3
 801e2d2:	f7ee f8de 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e2d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e2da:	4619      	mov	r1, r3
 801e2dc:	4620      	mov	r0, r4
 801e2de:	f7ee fc9c 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e2e2:	4603      	mov	r3, r0
 801e2e4:	461c      	mov	r4, r3
 801e2e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e2ea:	4618      	mov	r0, r3
 801e2ec:	f7ee fc89 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e2f0:	2c00      	cmp	r4, #0
 801e2f2:	d00b      	beq.n	801e30c <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801e2f4:	1d3b      	adds	r3, r7, #4
 801e2f6:	681b      	ldr	r3, [r3, #0]
 801e2f8:	699a      	ldr	r2, [r3, #24]
 801e2fa:	463b      	mov	r3, r7
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	699b      	ldr	r3, [r3, #24]
 801e300:	429a      	cmp	r2, r3
 801e302:	bf0c      	ite	eq
 801e304:	2301      	moveq	r3, #1
 801e306:	2300      	movne	r3, #0
 801e308:	b2dc      	uxtb	r4, r3
 801e30a:	e1ad      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801e30c:	1d3b      	adds	r3, r7, #4
 801e30e:	681b      	ldr	r3, [r3, #0]
 801e310:	f103 040c 	add.w	r4, r3, #12
 801e314:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e318:	4938      	ldr	r1, [pc, #224]	; (801e3fc <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801e31a:	4618      	mov	r0, r3
 801e31c:	f7ee f8b9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e320:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e324:	4619      	mov	r1, r3
 801e326:	4620      	mov	r0, r4
 801e328:	f7ee fc77 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e32c:	4603      	mov	r3, r0
 801e32e:	461c      	mov	r4, r3
 801e330:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e334:	4618      	mov	r0, r3
 801e336:	f7ee fc64 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e33a:	2c00      	cmp	r4, #0
 801e33c:	d00b      	beq.n	801e356 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801e33e:	1d3b      	adds	r3, r7, #4
 801e340:	681b      	ldr	r3, [r3, #0]
 801e342:	699a      	ldr	r2, [r3, #24]
 801e344:	463b      	mov	r3, r7
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	699b      	ldr	r3, [r3, #24]
 801e34a:	429a      	cmp	r2, r3
 801e34c:	bf0c      	ite	eq
 801e34e:	2301      	moveq	r3, #1
 801e350:	2300      	movne	r3, #0
 801e352:	b2dc      	uxtb	r4, r3
 801e354:	e188      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801e356:	1d3b      	adds	r3, r7, #4
 801e358:	681b      	ldr	r3, [r3, #0]
 801e35a:	f103 040c 	add.w	r4, r3, #12
 801e35e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e362:	4922      	ldr	r1, [pc, #136]	; (801e3ec <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e364:	4618      	mov	r0, r3
 801e366:	f7ee f894 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e36a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e36e:	4619      	mov	r1, r3
 801e370:	4620      	mov	r0, r4
 801e372:	f7ee fc52 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e376:	4603      	mov	r3, r0
 801e378:	461c      	mov	r4, r3
 801e37a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e37e:	4618      	mov	r0, r3
 801e380:	f7ee fc3f 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e384:	2c00      	cmp	r4, #0
 801e386:	d00b      	beq.n	801e3a0 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801e388:	1d3b      	adds	r3, r7, #4
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	699a      	ldr	r2, [r3, #24]
 801e38e:	463b      	mov	r3, r7
 801e390:	681b      	ldr	r3, [r3, #0]
 801e392:	699b      	ldr	r3, [r3, #24]
 801e394:	429a      	cmp	r2, r3
 801e396:	bf0c      	ite	eq
 801e398:	2301      	moveq	r3, #1
 801e39a:	2300      	movne	r3, #0
 801e39c:	b2dc      	uxtb	r4, r3
 801e39e:	e163      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801e3a0:	1d3b      	adds	r3, r7, #4
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	f103 040c 	add.w	r4, r3, #12
 801e3a8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e3ac:	4910      	ldr	r1, [pc, #64]	; (801e3f0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e3ae:	4618      	mov	r0, r3
 801e3b0:	f7ee f86f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e3b4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e3b8:	4619      	mov	r1, r3
 801e3ba:	4620      	mov	r0, r4
 801e3bc:	f7ee fc2d 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e3c0:	4603      	mov	r3, r0
 801e3c2:	461c      	mov	r4, r3
 801e3c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e3c8:	4618      	mov	r0, r3
 801e3ca:	f7ee fc1a 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e3ce:	2c00      	cmp	r4, #0
 801e3d0:	d016      	beq.n	801e400 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801e3d2:	1d3b      	adds	r3, r7, #4
 801e3d4:	681b      	ldr	r3, [r3, #0]
 801e3d6:	699a      	ldr	r2, [r3, #24]
 801e3d8:	463b      	mov	r3, r7
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	699b      	ldr	r3, [r3, #24]
 801e3de:	429a      	cmp	r2, r3
 801e3e0:	bf0c      	ite	eq
 801e3e2:	2301      	moveq	r3, #1
 801e3e4:	2300      	movne	r3, #0
 801e3e6:	b2dc      	uxtb	r4, r3
 801e3e8:	e13e      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e3ea:	bf00      	nop
 801e3ec:	0802603c 	.word	0x0802603c
 801e3f0:	08026048 	.word	0x08026048
 801e3f4:	08026024 	.word	0x08026024
 801e3f8:	08026020 	.word	0x08026020
 801e3fc:	0802602c 	.word	0x0802602c
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801e400:	1d3b      	adds	r3, r7, #4
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	f103 040c 	add.w	r4, r3, #12
 801e408:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e40c:	4999      	ldr	r1, [pc, #612]	; (801e674 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801e40e:	4618      	mov	r0, r3
 801e410:	f7ee f83f 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e414:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e418:	4619      	mov	r1, r3
 801e41a:	4620      	mov	r0, r4
 801e41c:	f7ee fbfd 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e420:	4603      	mov	r3, r0
 801e422:	461c      	mov	r4, r3
 801e424:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e428:	4618      	mov	r0, r3
 801e42a:	f7ee fbea 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e42e:	2c00      	cmp	r4, #0
 801e430:	d026      	beq.n	801e480 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801e432:	1d3b      	adds	r3, r7, #4
 801e434:	681b      	ldr	r3, [r3, #0]
 801e436:	699a      	ldr	r2, [r3, #24]
 801e438:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e43c:	4611      	mov	r1, r2
 801e43e:	4618      	mov	r0, r3
 801e440:	f7ee f827 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e444:	463b      	mov	r3, r7
 801e446:	681b      	ldr	r3, [r3, #0]
 801e448:	699a      	ldr	r2, [r3, #24]
 801e44a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e44e:	4611      	mov	r1, r2
 801e450:	4618      	mov	r0, r3
 801e452:	f7ee f81e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e456:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801e45a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e45e:	4611      	mov	r1, r2
 801e460:	4618      	mov	r0, r3
 801e462:	f7ee fbda 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e466:	4603      	mov	r3, r0
 801e468:	461c      	mov	r4, r3
 801e46a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e46e:	4618      	mov	r0, r3
 801e470:	f7ee fbc7 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e474:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e478:	4618      	mov	r0, r3
 801e47a:	f7ee fbc2 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e47e:	e0f3      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801e480:	1d3b      	adds	r3, r7, #4
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	f103 040c 	add.w	r4, r3, #12
 801e488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e48c:	497a      	ldr	r1, [pc, #488]	; (801e678 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801e48e:	4618      	mov	r0, r3
 801e490:	f7ed ffff 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e498:	4619      	mov	r1, r3
 801e49a:	4620      	mov	r0, r4
 801e49c:	f7ee fbbd 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e4a0:	4603      	mov	r3, r0
 801e4a2:	461c      	mov	r4, r3
 801e4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	f7ee fbaa 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e4ae:	2c00      	cmp	r4, #0
 801e4b0:	d00b      	beq.n	801e4ca <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801e4b2:	1d3b      	adds	r3, r7, #4
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	699a      	ldr	r2, [r3, #24]
 801e4b8:	463b      	mov	r3, r7
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	699b      	ldr	r3, [r3, #24]
 801e4be:	429a      	cmp	r2, r3
 801e4c0:	bf0c      	ite	eq
 801e4c2:	2301      	moveq	r3, #1
 801e4c4:	2300      	movne	r3, #0
 801e4c6:	b2dc      	uxtb	r4, r3
 801e4c8:	e0ce      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801e4ca:	1d3b      	adds	r3, r7, #4
 801e4cc:	681b      	ldr	r3, [r3, #0]
 801e4ce:	f103 040c 	add.w	r4, r3, #12
 801e4d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e4d6:	4969      	ldr	r1, [pc, #420]	; (801e67c <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801e4d8:	4618      	mov	r0, r3
 801e4da:	f7ed ffda 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e4de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e4e2:	4619      	mov	r1, r3
 801e4e4:	4620      	mov	r0, r4
 801e4e6:	f7ee fb98 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e4ea:	4603      	mov	r3, r0
 801e4ec:	461c      	mov	r4, r3
 801e4ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e4f2:	4618      	mov	r0, r3
 801e4f4:	f7ee fb85 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e4f8:	2c00      	cmp	r4, #0
 801e4fa:	d00b      	beq.n	801e514 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801e4fc:	1d3b      	adds	r3, r7, #4
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	699a      	ldr	r2, [r3, #24]
 801e502:	463b      	mov	r3, r7
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	699b      	ldr	r3, [r3, #24]
 801e508:	429a      	cmp	r2, r3
 801e50a:	bf0c      	ite	eq
 801e50c:	2301      	moveq	r3, #1
 801e50e:	2300      	movne	r3, #0
 801e510:	b2dc      	uxtb	r4, r3
 801e512:	e0a9      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801e514:	1d3b      	adds	r3, r7, #4
 801e516:	681b      	ldr	r3, [r3, #0]
 801e518:	f103 040c 	add.w	r4, r3, #12
 801e51c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e520:	4957      	ldr	r1, [pc, #348]	; (801e680 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801e522:	4618      	mov	r0, r3
 801e524:	f7ed ffb5 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e528:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e52c:	4619      	mov	r1, r3
 801e52e:	4620      	mov	r0, r4
 801e530:	f7ee fb73 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e534:	4603      	mov	r3, r0
 801e536:	461c      	mov	r4, r3
 801e538:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e53c:	4618      	mov	r0, r3
 801e53e:	f7ee fb60 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e542:	2c00      	cmp	r4, #0
 801e544:	d00b      	beq.n	801e55e <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801e546:	1d3b      	adds	r3, r7, #4
 801e548:	681b      	ldr	r3, [r3, #0]
 801e54a:	699a      	ldr	r2, [r3, #24]
 801e54c:	463b      	mov	r3, r7
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	699b      	ldr	r3, [r3, #24]
 801e552:	429a      	cmp	r2, r3
 801e554:	bf0c      	ite	eq
 801e556:	2301      	moveq	r3, #1
 801e558:	2300      	movne	r3, #0
 801e55a:	b2dc      	uxtb	r4, r3
 801e55c:	e084      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801e55e:	1d3b      	adds	r3, r7, #4
 801e560:	681b      	ldr	r3, [r3, #0]
 801e562:	f103 040c 	add.w	r4, r3, #12
 801e566:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e56a:	4946      	ldr	r1, [pc, #280]	; (801e684 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801e56c:	4618      	mov	r0, r3
 801e56e:	f7ed ff90 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e572:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e576:	4619      	mov	r1, r3
 801e578:	4620      	mov	r0, r4
 801e57a:	f7ee fb4e 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e57e:	4603      	mov	r3, r0
 801e580:	461c      	mov	r4, r3
 801e582:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e586:	4618      	mov	r0, r3
 801e588:	f7ee fb3b 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e58c:	2c00      	cmp	r4, #0
 801e58e:	d01c      	beq.n	801e5ca <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801e590:	1d3b      	adds	r3, r7, #4
 801e592:	681b      	ldr	r3, [r3, #0]
 801e594:	ed93 7b06 	vldr	d7, [r3, #24]
 801e598:	463b      	mov	r3, r7
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	ed93 6b06 	vldr	d6, [r3, #24]
 801e5a0:	1d3b      	adds	r3, r7, #4
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	ed93 5b08 	vldr	d5, [r3, #32]
 801e5a8:	eeb0 2a45 	vmov.f32	s4, s10
 801e5ac:	eef0 2a65 	vmov.f32	s5, s11
 801e5b0:	eeb0 1a46 	vmov.f32	s2, s12
 801e5b4:	eef0 1a66 	vmov.f32	s3, s13
 801e5b8:	eeb0 0a47 	vmov.f32	s0, s14
 801e5bc:	eef0 0a67 	vmov.f32	s1, s15
 801e5c0:	f7f3 fe1a 	bl	80121f8 <_Z13doubles_equalddd>
 801e5c4:	4603      	mov	r3, r0
 801e5c6:	461c      	mov	r4, r3
 801e5c8:	e04e      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801e5ca:	1d3b      	adds	r3, r7, #4
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	f103 040c 	add.w	r4, r3, #12
 801e5d2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e5d6:	492c      	ldr	r1, [pc, #176]	; (801e688 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801e5d8:	4618      	mov	r0, r3
 801e5da:	f7ed ff5a 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e5de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e5e2:	4619      	mov	r1, r3
 801e5e4:	4620      	mov	r0, r4
 801e5e6:	f7ee fb18 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e5ea:	4603      	mov	r3, r0
 801e5ec:	461c      	mov	r4, r3
 801e5ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e5f2:	4618      	mov	r0, r3
 801e5f4:	f7ee fb05 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e5f8:	2c00      	cmp	r4, #0
 801e5fa:	d01c      	beq.n	801e636 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801e5fc:	1d3b      	adds	r3, r7, #4
 801e5fe:	681b      	ldr	r3, [r3, #0]
 801e600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e602:	463b      	mov	r3, r7
 801e604:	681b      	ldr	r3, [r3, #0]
 801e606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e608:	429a      	cmp	r2, r3
 801e60a:	d001      	beq.n	801e610 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801e60c:	2400      	movs	r4, #0
 801e60e:	e02b      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801e610:	1d3b      	adds	r3, r7, #4
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	6998      	ldr	r0, [r3, #24]
 801e616:	463b      	mov	r3, r7
 801e618:	681b      	ldr	r3, [r3, #0]
 801e61a:	6999      	ldr	r1, [r3, #24]
 801e61c:	1d3b      	adds	r3, r7, #4
 801e61e:	681b      	ldr	r3, [r3, #0]
 801e620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e622:	461a      	mov	r2, r3
 801e624:	f7ed fe54 	bl	800c2d0 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801e628:	4603      	mov	r3, r0
 801e62a:	2b00      	cmp	r3, #0
 801e62c:	bf0c      	ite	eq
 801e62e:	2301      	moveq	r3, #1
 801e630:	2300      	movne	r3, #0
 801e632:	b2dc      	uxtb	r4, r3
 801e634:	e018      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801e636:	1d3b      	adds	r3, r7, #4
 801e638:	681b      	ldr	r3, [r3, #0]
 801e63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d012      	beq.n	801e666 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801e640:	1d3b      	adds	r3, r7, #4
 801e642:	681b      	ldr	r3, [r3, #0]
 801e644:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801e646:	1d3b      	adds	r3, r7, #4
 801e648:	681b      	ldr	r3, [r3, #0]
 801e64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	3308      	adds	r3, #8
 801e650:	681b      	ldr	r3, [r3, #0]
 801e652:	1d3a      	adds	r2, r7, #4
 801e654:	6812      	ldr	r2, [r2, #0]
 801e656:	6991      	ldr	r1, [r2, #24]
 801e658:	463a      	mov	r2, r7
 801e65a:	6812      	ldr	r2, [r2, #0]
 801e65c:	6992      	ldr	r2, [r2, #24]
 801e65e:	4798      	blx	r3
 801e660:	4603      	mov	r3, r0
 801e662:	461c      	mov	r4, r3
 801e664:	e000      	b.n	801e668 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801e666:	2400      	movs	r4, #0
 801e668:	4623      	mov	r3, r4
}
 801e66a:	4618      	mov	r0, r3
 801e66c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801e670:	46bd      	mov	sp, r7
 801e672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e674:	080260ec 	.word	0x080260ec
 801e678:	080260cc 	.word	0x080260cc
 801e67c:	080260d4 	.word	0x080260d4
 801e680:	080260e0 	.word	0x080260e0
 801e684:	080260c4 	.word	0x080260c4
 801e688:	080260f8 	.word	0x080260f8

0801e68c <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801e68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e68e:	b087      	sub	sp, #28
 801e690:	af00      	add	r7, sp, #0
 801e692:	6078      	str	r0, [r7, #4]
 801e694:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	f103 020c 	add.w	r2, r3, #12
 801e69c:	683b      	ldr	r3, [r7, #0]
 801e69e:	330c      	adds	r3, #12
 801e6a0:	4619      	mov	r1, r3
 801e6a2:	4610      	mov	r0, r2
 801e6a4:	f7ee fab9 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e6a8:	4603      	mov	r3, r0
 801e6aa:	2b00      	cmp	r3, #0
 801e6ac:	d001      	beq.n	801e6b2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801e6ae:	2301      	movs	r3, #1
 801e6b0:	e03c      	b.n	801e72c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801e6b2:	2500      	movs	r5, #0
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	f103 040c 	add.w	r4, r3, #12
 801e6ba:	f107 0308 	add.w	r3, r7, #8
 801e6be:	491d      	ldr	r1, [pc, #116]	; (801e734 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801e6c0:	4618      	mov	r0, r3
 801e6c2:	f7ed fee6 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e6c6:	2601      	movs	r6, #1
 801e6c8:	f107 0308 	add.w	r3, r7, #8
 801e6cc:	4619      	mov	r1, r3
 801e6ce:	4620      	mov	r0, r4
 801e6d0:	f7ee faa3 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e6d4:	4603      	mov	r3, r0
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d014      	beq.n	801e704 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801e6da:	683b      	ldr	r3, [r7, #0]
 801e6dc:	f103 040c 	add.w	r4, r3, #12
 801e6e0:	f107 0310 	add.w	r3, r7, #16
 801e6e4:	4914      	ldr	r1, [pc, #80]	; (801e738 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801e6e6:	4618      	mov	r0, r3
 801e6e8:	f7ed fed3 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e6ec:	2501      	movs	r5, #1
 801e6ee:	f107 0310 	add.w	r3, r7, #16
 801e6f2:	4619      	mov	r1, r3
 801e6f4:	4620      	mov	r0, r4
 801e6f6:	f7ee fa90 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e6fa:	4603      	mov	r3, r0
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d001      	beq.n	801e704 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801e700:	2401      	movs	r4, #1
 801e702:	e000      	b.n	801e706 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801e704:	2400      	movs	r4, #0
 801e706:	2d00      	cmp	r5, #0
 801e708:	d004      	beq.n	801e714 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801e70a:	f107 0310 	add.w	r3, r7, #16
 801e70e:	4618      	mov	r0, r3
 801e710:	f7ee fa77 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e714:	2e00      	cmp	r6, #0
 801e716:	d004      	beq.n	801e722 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801e718:	f107 0308 	add.w	r3, r7, #8
 801e71c:	4618      	mov	r0, r3
 801e71e:	f7ee fa70 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e722:	2c00      	cmp	r4, #0
 801e724:	d001      	beq.n	801e72a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801e726:	2301      	movs	r3, #1
 801e728:	e000      	b.n	801e72c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801e72a:	2300      	movs	r3, #0
}
 801e72c:	4618      	mov	r0, r3
 801e72e:	371c      	adds	r7, #28
 801e730:	46bd      	mov	sp, r7
 801e732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e734:	080260d4 	.word	0x080260d4
 801e738:	080260cc 	.word	0x080260cc

0801e73c <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801e73c:	b590      	push	{r4, r7, lr}
 801e73e:	b0b9      	sub	sp, #228	; 0xe4
 801e740:	af00      	add	r7, sp, #0
 801e742:	6078      	str	r0, [r7, #4]
 801e744:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801e746:	683b      	ldr	r3, [r7, #0]
 801e748:	f103 040c 	add.w	r4, r3, #12
 801e74c:	f107 0308 	add.w	r3, r7, #8
 801e750:	49d4      	ldr	r1, [pc, #848]	; (801eaa4 <_ZNK14MockNamedValue8toStringEv+0x368>)
 801e752:	4618      	mov	r0, r3
 801e754:	f7ed fe9d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e758:	f107 0308 	add.w	r3, r7, #8
 801e75c:	4619      	mov	r1, r3
 801e75e:	4620      	mov	r0, r4
 801e760:	f7ee fa5b 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e764:	4603      	mov	r3, r0
 801e766:	461c      	mov	r4, r3
 801e768:	f107 0308 	add.w	r3, r7, #8
 801e76c:	4618      	mov	r0, r3
 801e76e:	f7ee fa48 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e772:	2c00      	cmp	r4, #0
 801e774:	d007      	beq.n	801e786 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801e776:	683b      	ldr	r3, [r7, #0]
 801e778:	7e1a      	ldrb	r2, [r3, #24]
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	4611      	mov	r1, r2
 801e77e:	4618      	mov	r0, r3
 801e780:	f7ee fcb0 	bl	800d0e4 <_Z10StringFromb>
 801e784:	e23f      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801e786:	683b      	ldr	r3, [r7, #0]
 801e788:	f103 040c 	add.w	r4, r3, #12
 801e78c:	f107 0310 	add.w	r3, r7, #16
 801e790:	49c5      	ldr	r1, [pc, #788]	; (801eaa8 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801e792:	4618      	mov	r0, r3
 801e794:	f7ed fe7d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e798:	f107 0310 	add.w	r3, r7, #16
 801e79c:	4619      	mov	r1, r3
 801e79e:	4620      	mov	r0, r4
 801e7a0:	f7ee fa3b 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e7a4:	4603      	mov	r3, r0
 801e7a6:	461c      	mov	r4, r3
 801e7a8:	f107 0310 	add.w	r3, r7, #16
 801e7ac:	4618      	mov	r0, r3
 801e7ae:	f7ee fa28 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e7b2:	2c00      	cmp	r4, #0
 801e7b4:	d03b      	beq.n	801e82e <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801e7b6:	683b      	ldr	r3, [r7, #0]
 801e7b8:	699a      	ldr	r2, [r3, #24]
 801e7ba:	f107 0320 	add.w	r3, r7, #32
 801e7be:	4611      	mov	r1, r2
 801e7c0:	4618      	mov	r0, r3
 801e7c2:	f7ee fce5 	bl	800d190 <_Z10StringFromi>
 801e7c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e7ca:	49b8      	ldr	r1, [pc, #736]	; (801eaac <_ZNK14MockNamedValue8toStringEv+0x370>)
 801e7cc:	4618      	mov	r0, r3
 801e7ce:	f7ed fe60 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e7d2:	f107 0318 	add.w	r3, r7, #24
 801e7d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e7da:	f107 0120 	add.w	r1, r7, #32
 801e7de:	4618      	mov	r0, r3
 801e7e0:	f7ee fa71 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 801e7e4:	683b      	ldr	r3, [r7, #0]
 801e7e6:	699a      	ldr	r2, [r3, #24]
 801e7e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e7ec:	4611      	mov	r1, r2
 801e7ee:	4618      	mov	r0, r3
 801e7f0:	f7ee fdbe 	bl	800d370 <_Z30BracketsFormattedHexStringFromi>
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801e7fa:	f107 0118 	add.w	r1, r7, #24
 801e7fe:	4618      	mov	r0, r3
 801e800:	f7ee fa61 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 801e804:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e808:	4618      	mov	r0, r3
 801e80a:	f7ee f9fa 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e80e:	f107 0318 	add.w	r3, r7, #24
 801e812:	4618      	mov	r0, r3
 801e814:	f7ee f9f5 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e81c:	4618      	mov	r0, r3
 801e81e:	f7ee f9f0 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e822:	f107 0320 	add.w	r3, r7, #32
 801e826:	4618      	mov	r0, r3
 801e828:	f7ee f9eb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e82c:	e1eb      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801e82e:	683b      	ldr	r3, [r7, #0]
 801e830:	f103 040c 	add.w	r4, r3, #12
 801e834:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e838:	499d      	ldr	r1, [pc, #628]	; (801eab0 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801e83a:	4618      	mov	r0, r3
 801e83c:	f7ed fe29 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e840:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e844:	4619      	mov	r1, r3
 801e846:	4620      	mov	r0, r4
 801e848:	f7ee f9e7 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e84c:	4603      	mov	r3, r0
 801e84e:	461c      	mov	r4, r3
 801e850:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e854:	4618      	mov	r0, r3
 801e856:	f7ee f9d4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e85a:	2c00      	cmp	r4, #0
 801e85c:	d03b      	beq.n	801e8d6 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801e85e:	683b      	ldr	r3, [r7, #0]
 801e860:	699a      	ldr	r2, [r3, #24]
 801e862:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e866:	4611      	mov	r1, r2
 801e868:	4618      	mov	r0, r3
 801e86a:	f7ee fef9 	bl	800d660 <_Z10StringFromj>
 801e86e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e872:	498e      	ldr	r1, [pc, #568]	; (801eaac <_ZNK14MockNamedValue8toStringEv+0x370>)
 801e874:	4618      	mov	r0, r3
 801e876:	f7ed fe0c 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e87a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e87e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801e882:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801e886:	4618      	mov	r0, r3
 801e888:	f7ee fa1d 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 801e88c:	683b      	ldr	r3, [r7, #0]
 801e88e:	699a      	ldr	r2, [r3, #24]
 801e890:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e894:	4611      	mov	r1, r2
 801e896:	4618      	mov	r0, r3
 801e898:	f7ee fd86 	bl	800d3a8 <_Z30BracketsFormattedHexStringFromj>
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e8a2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801e8a6:	4618      	mov	r0, r3
 801e8a8:	f7ee fa0d 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 801e8ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e8b0:	4618      	mov	r0, r3
 801e8b2:	f7ee f9a6 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e8b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e8ba:	4618      	mov	r0, r3
 801e8bc:	f7ee f9a1 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e8c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e8c4:	4618      	mov	r0, r3
 801e8c6:	f7ee f99c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e8ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e8ce:	4618      	mov	r0, r3
 801e8d0:	f7ee f997 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e8d4:	e197      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801e8d6:	683b      	ldr	r3, [r7, #0]
 801e8d8:	f103 040c 	add.w	r4, r3, #12
 801e8dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e8e0:	4974      	ldr	r1, [pc, #464]	; (801eab4 <_ZNK14MockNamedValue8toStringEv+0x378>)
 801e8e2:	4618      	mov	r0, r3
 801e8e4:	f7ed fdd5 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e8e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e8ec:	4619      	mov	r1, r3
 801e8ee:	4620      	mov	r0, r4
 801e8f0:	f7ee f993 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e8f4:	4603      	mov	r3, r0
 801e8f6:	461c      	mov	r4, r3
 801e8f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e8fc:	4618      	mov	r0, r3
 801e8fe:	f7ee f980 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e902:	2c00      	cmp	r4, #0
 801e904:	d03b      	beq.n	801e97e <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801e906:	683b      	ldr	r3, [r7, #0]
 801e908:	699a      	ldr	r2, [r3, #24]
 801e90a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e90e:	4611      	mov	r1, r2
 801e910:	4618      	mov	r0, r3
 801e912:	f7ee fc4f 	bl	800d1b4 <_Z10StringFroml>
 801e916:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e91a:	4964      	ldr	r1, [pc, #400]	; (801eaac <_ZNK14MockNamedValue8toStringEv+0x370>)
 801e91c:	4618      	mov	r0, r3
 801e91e:	f7ed fdb8 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e922:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e926:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801e92a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801e92e:	4618      	mov	r0, r3
 801e930:	f7ee f9c9 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 801e934:	683b      	ldr	r3, [r7, #0]
 801e936:	699a      	ldr	r2, [r3, #24]
 801e938:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e93c:	4611      	mov	r1, r2
 801e93e:	4618      	mov	r0, r3
 801e940:	f7ee fd4e 	bl	800d3e0 <_Z30BracketsFormattedHexStringFroml>
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801e94a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801e94e:	4618      	mov	r0, r3
 801e950:	f7ee f9b9 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 801e954:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e958:	4618      	mov	r0, r3
 801e95a:	f7ee f952 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e95e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e962:	4618      	mov	r0, r3
 801e964:	f7ee f94d 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e968:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e96c:	4618      	mov	r0, r3
 801e96e:	f7ee f948 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e972:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e976:	4618      	mov	r0, r3
 801e978:	f7ee f943 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e97c:	e143      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801e97e:	683b      	ldr	r3, [r7, #0]
 801e980:	f103 040c 	add.w	r4, r3, #12
 801e984:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e988:	494b      	ldr	r1, [pc, #300]	; (801eab8 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801e98a:	4618      	mov	r0, r3
 801e98c:	f7ed fd81 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e990:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e994:	4619      	mov	r1, r3
 801e996:	4620      	mov	r0, r4
 801e998:	f7ee f93f 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801e99c:	4603      	mov	r3, r0
 801e99e:	461c      	mov	r4, r3
 801e9a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e9a4:	4618      	mov	r0, r3
 801e9a6:	f7ee f92c 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801e9aa:	2c00      	cmp	r4, #0
 801e9ac:	d03b      	beq.n	801ea26 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801e9ae:	683b      	ldr	r3, [r7, #0]
 801e9b0:	699a      	ldr	r2, [r3, #24]
 801e9b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e9b6:	4611      	mov	r1, r2
 801e9b8:	4618      	mov	r0, r3
 801e9ba:	f7ee fe63 	bl	800d684 <_Z10StringFromm>
 801e9be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e9c2:	493a      	ldr	r1, [pc, #232]	; (801eaac <_ZNK14MockNamedValue8toStringEv+0x370>)
 801e9c4:	4618      	mov	r0, r3
 801e9c6:	f7ed fd64 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801e9ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e9ce:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801e9d2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801e9d6:	4618      	mov	r0, r3
 801e9d8:	f7ee f975 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 801e9dc:	683b      	ldr	r3, [r7, #0]
 801e9de:	699a      	ldr	r2, [r3, #24]
 801e9e0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e9e4:	4611      	mov	r1, r2
 801e9e6:	4618      	mov	r0, r3
 801e9e8:	f7ee fd16 	bl	800d418 <_Z30BracketsFormattedHexStringFromm>
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801e9f2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801e9f6:	4618      	mov	r0, r3
 801e9f8:	f7ee f965 	bl	800ccc6 <_ZNK12SimpleStringplERKS_>
 801e9fc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ea00:	4618      	mov	r0, r3
 801ea02:	f7ee f8fe 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ea06:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	f7ee f8f9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ea10:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ea14:	4618      	mov	r0, r3
 801ea16:	f7ee f8f4 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ea1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ea1e:	4618      	mov	r0, r3
 801ea20:	f7ee f8ef 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ea24:	e0ef      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801ea26:	683b      	ldr	r3, [r7, #0]
 801ea28:	f103 040c 	add.w	r4, r3, #12
 801ea2c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ea30:	4922      	ldr	r1, [pc, #136]	; (801eabc <_ZNK14MockNamedValue8toStringEv+0x380>)
 801ea32:	4618      	mov	r0, r3
 801ea34:	f7ed fd2d 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801ea38:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ea3c:	4619      	mov	r1, r3
 801ea3e:	4620      	mov	r0, r4
 801ea40:	f7ee f8eb 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801ea44:	4603      	mov	r3, r0
 801ea46:	461c      	mov	r4, r3
 801ea48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ea4c:	4618      	mov	r0, r3
 801ea4e:	f7ee f8d8 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ea52:	2c00      	cmp	r4, #0
 801ea54:	d006      	beq.n	801ea64 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801ea56:	683b      	ldr	r3, [r7, #0]
 801ea58:	699b      	ldr	r3, [r3, #24]
 801ea5a:	4619      	mov	r1, r3
 801ea5c:	6878      	ldr	r0, [r7, #4]
 801ea5e:	f7ed fd18 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801ea62:	e0d0      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801ea64:	683b      	ldr	r3, [r7, #0]
 801ea66:	f103 040c 	add.w	r4, r3, #12
 801ea6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea6e:	4914      	ldr	r1, [pc, #80]	; (801eac0 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801ea70:	4618      	mov	r0, r3
 801ea72:	f7ed fd0e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801ea76:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea7a:	4619      	mov	r1, r3
 801ea7c:	4620      	mov	r0, r4
 801ea7e:	f7ee f8cc 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801ea82:	4603      	mov	r3, r0
 801ea84:	461c      	mov	r4, r3
 801ea86:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea8a:	4618      	mov	r0, r3
 801ea8c:	f7ee f8b9 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ea90:	2c00      	cmp	r4, #0
 801ea92:	d017      	beq.n	801eac4 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801ea94:	683b      	ldr	r3, [r7, #0]
 801ea96:	699a      	ldr	r2, [r3, #24]
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	4611      	mov	r1, r2
 801ea9c:	4618      	mov	r0, r3
 801ea9e:	f7ee fb9b 	bl	800d1d8 <_Z10StringFromPKv>
 801eaa2:	e0b0      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801eaa4:	08026024 	.word	0x08026024
 801eaa8:	08026020 	.word	0x08026020
 801eaac:	08026110 	.word	0x08026110
 801eab0:	0802602c 	.word	0x0802602c
 801eab4:	0802603c 	.word	0x0802603c
 801eab8:	08026048 	.word	0x08026048
 801eabc:	080260ec 	.word	0x080260ec
 801eac0:	080260cc 	.word	0x080260cc
    else if (type_ == "void (*)()")
 801eac4:	683b      	ldr	r3, [r7, #0]
 801eac6:	f103 040c 	add.w	r4, r3, #12
 801eaca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eace:	4950      	ldr	r1, [pc, #320]	; (801ec10 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801ead0:	4618      	mov	r0, r3
 801ead2:	f7ed fcde 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801ead6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eada:	4619      	mov	r1, r3
 801eadc:	4620      	mov	r0, r4
 801eade:	f7ee f89c 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801eae2:	4603      	mov	r3, r0
 801eae4:	461c      	mov	r4, r3
 801eae6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eaea:	4618      	mov	r0, r3
 801eaec:	f7ee f889 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801eaf0:	2c00      	cmp	r4, #0
 801eaf2:	d007      	beq.n	801eb04 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801eaf4:	683b      	ldr	r3, [r7, #0]
 801eaf6:	699a      	ldr	r2, [r3, #24]
 801eaf8:	687b      	ldr	r3, [r7, #4]
 801eafa:	4611      	mov	r1, r2
 801eafc:	4618      	mov	r0, r3
 801eafe:	f7ee fb95 	bl	800d22c <_Z10StringFromPFvvE>
 801eb02:	e080      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801eb04:	683b      	ldr	r3, [r7, #0]
 801eb06:	f103 040c 	add.w	r4, r3, #12
 801eb0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eb0e:	4941      	ldr	r1, [pc, #260]	; (801ec14 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801eb10:	4618      	mov	r0, r3
 801eb12:	f7ed fcbe 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801eb16:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eb1a:	4619      	mov	r1, r3
 801eb1c:	4620      	mov	r0, r4
 801eb1e:	f7ee f87c 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801eb22:	4603      	mov	r3, r0
 801eb24:	461c      	mov	r4, r3
 801eb26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eb2a:	4618      	mov	r0, r3
 801eb2c:	f7ee f869 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801eb30:	2c00      	cmp	r4, #0
 801eb32:	d007      	beq.n	801eb44 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801eb34:	683b      	ldr	r3, [r7, #0]
 801eb36:	699a      	ldr	r2, [r3, #24]
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	4611      	mov	r1, r2
 801eb3c:	4618      	mov	r0, r3
 801eb3e:	f7ee fb4b 	bl	800d1d8 <_Z10StringFromPKv>
 801eb42:	e060      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801eb44:	683b      	ldr	r3, [r7, #0]
 801eb46:	f103 040c 	add.w	r4, r3, #12
 801eb4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb4e:	4932      	ldr	r1, [pc, #200]	; (801ec18 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801eb50:	4618      	mov	r0, r3
 801eb52:	f7ed fc9e 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801eb56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb5a:	4619      	mov	r1, r3
 801eb5c:	4620      	mov	r0, r4
 801eb5e:	f7ee f85c 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801eb62:	4603      	mov	r3, r0
 801eb64:	461c      	mov	r4, r3
 801eb66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb6a:	4618      	mov	r0, r3
 801eb6c:	f7ee f849 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801eb70:	2c00      	cmp	r4, #0
 801eb72:	d00c      	beq.n	801eb8e <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801eb74:	683b      	ldr	r3, [r7, #0]
 801eb76:	ed93 7b06 	vldr	d7, [r3, #24]
 801eb7a:	687b      	ldr	r3, [r7, #4]
 801eb7c:	2106      	movs	r1, #6
 801eb7e:	eeb0 0a47 	vmov.f32	s0, s14
 801eb82:	eef0 0a67 	vmov.f32	s1, s15
 801eb86:	4618      	mov	r0, r3
 801eb88:	f7ee fd00 	bl	800d58c <_Z10StringFromdi>
 801eb8c:	e03b      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801eb8e:	683b      	ldr	r3, [r7, #0]
 801eb90:	f103 040c 	add.w	r4, r3, #12
 801eb94:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801eb98:	4920      	ldr	r1, [pc, #128]	; (801ec1c <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801eb9a:	4618      	mov	r0, r3
 801eb9c:	f7ed fc79 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801eba0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801eba4:	4619      	mov	r1, r3
 801eba6:	4620      	mov	r0, r4
 801eba8:	f7ee f837 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801ebac:	4603      	mov	r3, r0
 801ebae:	461c      	mov	r4, r3
 801ebb0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ebb4:	4618      	mov	r0, r3
 801ebb6:	f7ee f824 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ebba:	2c00      	cmp	r4, #0
 801ebbc:	d008      	beq.n	801ebd0 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801ebbe:	683b      	ldr	r3, [r7, #0]
 801ebc0:	6999      	ldr	r1, [r3, #24]
 801ebc2:	683b      	ldr	r3, [r7, #0]
 801ebc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ebc6:	687b      	ldr	r3, [r7, #4]
 801ebc8:	4618      	mov	r0, r3
 801ebca:	f7ee fe73 	bl	800d8b4 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801ebce:	e01a      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801ebd0:	683b      	ldr	r3, [r7, #0]
 801ebd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d00b      	beq.n	801ebf0 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801ebd8:	683b      	ldr	r3, [r7, #0]
 801ebda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801ebdc:	683b      	ldr	r3, [r7, #0]
 801ebde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	330c      	adds	r3, #12
 801ebe4:	681b      	ldr	r3, [r3, #0]
 801ebe6:	683a      	ldr	r2, [r7, #0]
 801ebe8:	6992      	ldr	r2, [r2, #24]
 801ebea:	6878      	ldr	r0, [r7, #4]
 801ebec:	4798      	blx	r3
 801ebee:	e00a      	b.n	801ec06 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801ebf0:	683b      	ldr	r3, [r7, #0]
 801ebf2:	330c      	adds	r3, #12
 801ebf4:	4618      	mov	r0, r3
 801ebf6:	f7ed ffd7 	bl	800cba8 <_ZNK12SimpleString12asCharStringEv>
 801ebfa:	4602      	mov	r2, r0
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	4908      	ldr	r1, [pc, #32]	; (801ec20 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801ec00:	4618      	mov	r0, r3
 801ec02:	f7ee fd05 	bl	800d610 <_Z16StringFromFormatPKcz>

}
 801ec06:	6878      	ldr	r0, [r7, #4]
 801ec08:	37e4      	adds	r7, #228	; 0xe4
 801ec0a:	46bd      	mov	sp, r7
 801ec0c:	bd90      	pop	{r4, r7, pc}
 801ec0e:	bf00      	nop
 801ec10:	080260e0 	.word	0x080260e0
 801ec14:	080260d4 	.word	0x080260d4
 801ec18:	080260c4 	.word	0x080260c4
 801ec1c:	080260f8 	.word	0x080260f8
 801ec20:	08026114 	.word	0x08026114

0801ec24 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801ec24:	b480      	push	{r7}
 801ec26:	b083      	sub	sp, #12
 801ec28:	af00      	add	r7, sp, #0
 801ec2a:	6078      	str	r0, [r7, #4]
 801ec2c:	6039      	str	r1, [r7, #0]
    next_ = node;
 801ec2e:	687b      	ldr	r3, [r7, #4]
 801ec30:	683a      	ldr	r2, [r7, #0]
 801ec32:	605a      	str	r2, [r3, #4]
}
 801ec34:	bf00      	nop
 801ec36:	370c      	adds	r7, #12
 801ec38:	46bd      	mov	sp, r7
 801ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec3e:	4770      	bx	lr

0801ec40 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801ec40:	b480      	push	{r7}
 801ec42:	b083      	sub	sp, #12
 801ec44:	af00      	add	r7, sp, #0
 801ec46:	6078      	str	r0, [r7, #4]
    return next_;
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	685b      	ldr	r3, [r3, #4]
}
 801ec4c:	4618      	mov	r0, r3
 801ec4e:	370c      	adds	r7, #12
 801ec50:	46bd      	mov	sp, r7
 801ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec56:	4770      	bx	lr

0801ec58 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801ec58:	b480      	push	{r7}
 801ec5a:	b083      	sub	sp, #12
 801ec5c:	af00      	add	r7, sp, #0
 801ec5e:	6078      	str	r0, [r7, #4]
    return data_;
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	681b      	ldr	r3, [r3, #0]
}
 801ec64:	4618      	mov	r0, r3
 801ec66:	370c      	adds	r7, #12
 801ec68:	46bd      	mov	sp, r7
 801ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec6e:	4770      	bx	lr

0801ec70 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801ec70:	b580      	push	{r7, lr}
 801ec72:	b082      	sub	sp, #8
 801ec74:	af00      	add	r7, sp, #0
 801ec76:	6078      	str	r0, [r7, #4]
    delete data_;
 801ec78:	687b      	ldr	r3, [r7, #4]
 801ec7a:	681b      	ldr	r3, [r3, #0]
 801ec7c:	2b00      	cmp	r3, #0
 801ec7e:	d004      	beq.n	801ec8a <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801ec80:	681a      	ldr	r2, [r3, #0]
 801ec82:	3204      	adds	r2, #4
 801ec84:	6812      	ldr	r2, [r2, #0]
 801ec86:	4618      	mov	r0, r3
 801ec88:	4790      	blx	r2
}
 801ec8a:	bf00      	nop
 801ec8c:	3708      	adds	r7, #8
 801ec8e:	46bd      	mov	sp, r7
 801ec90:	bd80      	pop	{r7, pc}

0801ec92 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801ec92:	b480      	push	{r7}
 801ec94:	b083      	sub	sp, #12
 801ec96:	af00      	add	r7, sp, #0
 801ec98:	6078      	str	r0, [r7, #4]
 801ec9a:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	683a      	ldr	r2, [r7, #0]
 801eca0:	601a      	str	r2, [r3, #0]
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	2200      	movs	r2, #0
 801eca6:	605a      	str	r2, [r3, #4]
{
}
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	4618      	mov	r0, r3
 801ecac:	370c      	adds	r7, #12
 801ecae:	46bd      	mov	sp, r7
 801ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecb4:	4770      	bx	lr

0801ecb6 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801ecb6:	b580      	push	{r7, lr}
 801ecb8:	b082      	sub	sp, #8
 801ecba:	af00      	add	r7, sp, #0
 801ecbc:	6078      	str	r0, [r7, #4]
 801ecbe:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801ecc0:	683b      	ldr	r3, [r7, #0]
 801ecc2:	6819      	ldr	r1, [r3, #0]
 801ecc4:	683b      	ldr	r3, [r7, #0]
 801ecc6:	681b      	ldr	r3, [r3, #0]
 801ecc8:	681b      	ldr	r3, [r3, #0]
 801ecca:	335c      	adds	r3, #92	; 0x5c
 801eccc:	681b      	ldr	r3, [r3, #0]
 801ecce:	687a      	ldr	r2, [r7, #4]
 801ecd0:	4610      	mov	r0, r2
 801ecd2:	4798      	blx	r3
}
 801ecd4:	6878      	ldr	r0, [r7, #4]
 801ecd6:	3708      	adds	r7, #8
 801ecd8:	46bd      	mov	sp, r7
 801ecda:	bd80      	pop	{r7, pc}

0801ecdc <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801ecdc:	b580      	push	{r7, lr}
 801ecde:	b082      	sub	sp, #8
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	6078      	str	r0, [r7, #4]
 801ece4:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801ece6:	683b      	ldr	r3, [r7, #0]
 801ece8:	6819      	ldr	r1, [r3, #0]
 801ecea:	683b      	ldr	r3, [r7, #0]
 801ecec:	681b      	ldr	r3, [r3, #0]
 801ecee:	681b      	ldr	r3, [r3, #0]
 801ecf0:	3360      	adds	r3, #96	; 0x60
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	687a      	ldr	r2, [r7, #4]
 801ecf6:	4610      	mov	r0, r2
 801ecf8:	4798      	blx	r3
}
 801ecfa:	6878      	ldr	r0, [r7, #4]
 801ecfc:	3708      	adds	r7, #8
 801ecfe:	46bd      	mov	sp, r7
 801ed00:	bd80      	pop	{r7, pc}

0801ed02 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801ed02:	b480      	push	{r7}
 801ed04:	b083      	sub	sp, #12
 801ed06:	af00      	add	r7, sp, #0
 801ed08:	6078      	str	r0, [r7, #4]
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	2200      	movs	r2, #0
 801ed0e:	601a      	str	r2, [r3, #0]
{
}
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	4618      	mov	r0, r3
 801ed14:	370c      	adds	r7, #12
 801ed16:	46bd      	mov	sp, r7
 801ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed1c:	4770      	bx	lr

0801ed1e <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801ed1e:	b580      	push	{r7, lr}
 801ed20:	b084      	sub	sp, #16
 801ed22:	af00      	add	r7, sp, #0
 801ed24:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	681b      	ldr	r3, [r3, #0]
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d016      	beq.n	801ed5c <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	681b      	ldr	r3, [r3, #0]
 801ed32:	4618      	mov	r0, r3
 801ed34:	f7ff ff84 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801ed38:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801ed3a:	687b      	ldr	r3, [r7, #4]
 801ed3c:	681b      	ldr	r3, [r3, #0]
 801ed3e:	4618      	mov	r0, r3
 801ed40:	f7ff ff96 	bl	801ec70 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d003      	beq.n	801ed54 <_ZN18MockNamedValueList5clearEv+0x36>
 801ed4c:	2108      	movs	r1, #8
 801ed4e:	4618      	mov	r0, r3
 801ed50:	f7ea fff0 	bl	8009d34 <_ZdlPvj>
        head_ = n;
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	68fa      	ldr	r2, [r7, #12]
 801ed58:	601a      	str	r2, [r3, #0]
    while (head_) {
 801ed5a:	e7e4      	b.n	801ed26 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801ed5c:	bf00      	nop
 801ed5e:	3710      	adds	r7, #16
 801ed60:	46bd      	mov	sp, r7
 801ed62:	bd80      	pop	{r7, pc}

0801ed64 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801ed64:	b590      	push	{r4, r7, lr}
 801ed66:	b085      	sub	sp, #20
 801ed68:	af00      	add	r7, sp, #0
 801ed6a:	6078      	str	r0, [r7, #4]
 801ed6c:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801ed6e:	f44f 7210 	mov.w	r2, #576	; 0x240
 801ed72:	4916      	ldr	r1, [pc, #88]	; (801edcc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801ed74:	2008      	movs	r0, #8
 801ed76:	f7ea ffc9 	bl	8009d0c <_ZnwjPKci>
 801ed7a:	4604      	mov	r4, r0
 801ed7c:	6839      	ldr	r1, [r7, #0]
 801ed7e:	4620      	mov	r0, r4
 801ed80:	f7ff ff87 	bl	801ec92 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801ed84:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	681b      	ldr	r3, [r3, #0]
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	d103      	bne.n	801ed96 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	68ba      	ldr	r2, [r7, #8]
 801ed92:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801ed94:	e016      	b.n	801edc4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	681b      	ldr	r3, [r3, #0]
 801ed9a:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801ed9c:	68f8      	ldr	r0, [r7, #12]
 801ed9e:	f7ff ff4f 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801eda2:	4603      	mov	r3, r0
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	bf14      	ite	ne
 801eda8:	2301      	movne	r3, #1
 801edaa:	2300      	moveq	r3, #0
 801edac:	b2db      	uxtb	r3, r3
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d004      	beq.n	801edbc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801edb2:	68f8      	ldr	r0, [r7, #12]
 801edb4:	f7ff ff44 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801edb8:	60f8      	str	r0, [r7, #12]
 801edba:	e7ef      	b.n	801ed9c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801edbc:	68b9      	ldr	r1, [r7, #8]
 801edbe:	68f8      	ldr	r0, [r7, #12]
 801edc0:	f7ff ff30 	bl	801ec24 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801edc4:	bf00      	nop
 801edc6:	3714      	adds	r7, #20
 801edc8:	46bd      	mov	sp, r7
 801edca:	bd90      	pop	{r4, r7, pc}
 801edcc:	0802605c 	.word	0x0802605c

0801edd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801edd0:	b590      	push	{r4, r7, lr}
 801edd2:	b087      	sub	sp, #28
 801edd4:	af00      	add	r7, sp, #0
 801edd6:	6078      	str	r0, [r7, #4]
 801edd8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801edda:	687b      	ldr	r3, [r7, #4]
 801eddc:	681b      	ldr	r3, [r3, #0]
 801edde:	617b      	str	r3, [r7, #20]
 801ede0:	697b      	ldr	r3, [r7, #20]
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	d01e      	beq.n	801ee24 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801ede6:	f107 030c 	add.w	r3, r7, #12
 801edea:	6979      	ldr	r1, [r7, #20]
 801edec:	4618      	mov	r0, r3
 801edee:	f7ff ff62 	bl	801ecb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801edf2:	f107 030c 	add.w	r3, r7, #12
 801edf6:	6839      	ldr	r1, [r7, #0]
 801edf8:	4618      	mov	r0, r3
 801edfa:	f7ed ff0e 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801edfe:	4603      	mov	r3, r0
 801ee00:	461c      	mov	r4, r3
 801ee02:	f107 030c 	add.w	r3, r7, #12
 801ee06:	4618      	mov	r0, r3
 801ee08:	f7ed fefb 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ee0c:	2c00      	cmp	r4, #0
 801ee0e:	d004      	beq.n	801ee1a <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801ee10:	6978      	ldr	r0, [r7, #20]
 801ee12:	f7ff ff21 	bl	801ec58 <_ZN22MockNamedValueListNode4itemEv>
 801ee16:	4603      	mov	r3, r0
 801ee18:	e005      	b.n	801ee26 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801ee1a:	6978      	ldr	r0, [r7, #20]
 801ee1c:	f7ff ff10 	bl	801ec40 <_ZN22MockNamedValueListNode4nextEv>
 801ee20:	6178      	str	r0, [r7, #20]
 801ee22:	e7dd      	b.n	801ede0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801ee24:	2300      	movs	r3, #0
}
 801ee26:	4618      	mov	r0, r3
 801ee28:	371c      	adds	r7, #28
 801ee2a:	46bd      	mov	sp, r7
 801ee2c:	bd90      	pop	{r4, r7, pc}

0801ee2e <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801ee2e:	b480      	push	{r7}
 801ee30:	b083      	sub	sp, #12
 801ee32:	af00      	add	r7, sp, #0
 801ee34:	6078      	str	r0, [r7, #4]
    return head_;
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	681b      	ldr	r3, [r3, #0]
}
 801ee3a:	4618      	mov	r0, r3
 801ee3c:	370c      	adds	r7, #12
 801ee3e:	46bd      	mov	sp, r7
 801ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee44:	4770      	bx	lr

0801ee46 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801ee46:	b580      	push	{r7, lr}
 801ee48:	b084      	sub	sp, #16
 801ee4a:	af00      	add	r7, sp, #0
 801ee4c:	60f8      	str	r0, [r7, #12]
 801ee4e:	60b9      	str	r1, [r7, #8]
 801ee50:	607a      	str	r2, [r7, #4]
 801ee52:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801ee54:	68fb      	ldr	r3, [r7, #12]
 801ee56:	68b9      	ldr	r1, [r7, #8]
 801ee58:	4618      	mov	r0, r3
 801ee5a:	f7ed fb6e 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 801ee5e:	68fb      	ldr	r3, [r7, #12]
 801ee60:	687a      	ldr	r2, [r7, #4]
 801ee62:	609a      	str	r2, [r3, #8]
 801ee64:	68fb      	ldr	r3, [r7, #12]
 801ee66:	2200      	movs	r2, #0
 801ee68:	60da      	str	r2, [r3, #12]
 801ee6a:	68fb      	ldr	r3, [r7, #12]
 801ee6c:	683a      	ldr	r2, [r7, #0]
 801ee6e:	611a      	str	r2, [r3, #16]
 801ee70:	68fb      	ldr	r3, [r7, #12]
 801ee72:	4618      	mov	r0, r3
 801ee74:	3710      	adds	r7, #16
 801ee76:	46bd      	mov	sp, r7
 801ee78:	bd80      	pop	{r7, pc}

0801ee7a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801ee7a:	b580      	push	{r7, lr}
 801ee7c:	b084      	sub	sp, #16
 801ee7e:	af00      	add	r7, sp, #0
 801ee80:	60f8      	str	r0, [r7, #12]
 801ee82:	60b9      	str	r1, [r7, #8]
 801ee84:	607a      	str	r2, [r7, #4]
 801ee86:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801ee88:	68fb      	ldr	r3, [r7, #12]
 801ee8a:	68b9      	ldr	r1, [r7, #8]
 801ee8c:	4618      	mov	r0, r3
 801ee8e:	f7ed fb54 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 801ee92:	68fb      	ldr	r3, [r7, #12]
 801ee94:	2200      	movs	r2, #0
 801ee96:	609a      	str	r2, [r3, #8]
 801ee98:	68fb      	ldr	r3, [r7, #12]
 801ee9a:	687a      	ldr	r2, [r7, #4]
 801ee9c:	60da      	str	r2, [r3, #12]
 801ee9e:	68fb      	ldr	r3, [r7, #12]
 801eea0:	683a      	ldr	r2, [r7, #0]
 801eea2:	611a      	str	r2, [r3, #16]
 801eea4:	68fb      	ldr	r3, [r7, #12]
 801eea6:	4618      	mov	r0, r3
 801eea8:	3710      	adds	r7, #16
 801eeaa:	46bd      	mov	sp, r7
 801eeac:	bd80      	pop	{r7, pc}

0801eeae <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801eeae:	b580      	push	{r7, lr}
 801eeb0:	b084      	sub	sp, #16
 801eeb2:	af00      	add	r7, sp, #0
 801eeb4:	60f8      	str	r0, [r7, #12]
 801eeb6:	60b9      	str	r1, [r7, #8]
 801eeb8:	607a      	str	r2, [r7, #4]
 801eeba:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801eebc:	68fb      	ldr	r3, [r7, #12]
 801eebe:	68b9      	ldr	r1, [r7, #8]
 801eec0:	4618      	mov	r0, r3
 801eec2:	f7ed fb3a 	bl	800c53a <_ZN12SimpleStringC1ERKS_>
 801eec6:	68fb      	ldr	r3, [r7, #12]
 801eec8:	687a      	ldr	r2, [r7, #4]
 801eeca:	609a      	str	r2, [r3, #8]
 801eecc:	68fb      	ldr	r3, [r7, #12]
 801eece:	683a      	ldr	r2, [r7, #0]
 801eed0:	60da      	str	r2, [r3, #12]
 801eed2:	68fb      	ldr	r3, [r7, #12]
 801eed4:	69ba      	ldr	r2, [r7, #24]
 801eed6:	611a      	str	r2, [r3, #16]
 801eed8:	68fb      	ldr	r3, [r7, #12]
 801eeda:	4618      	mov	r0, r3
 801eedc:	3710      	adds	r7, #16
 801eede:	46bd      	mov	sp, r7
 801eee0:	bd80      	pop	{r7, pc}
	...

0801eee4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801eee4:	b480      	push	{r7}
 801eee6:	b083      	sub	sp, #12
 801eee8:	af00      	add	r7, sp, #0
 801eeea:	6078      	str	r0, [r7, #4]
 801eeec:	4a06      	ldr	r2, [pc, #24]	; (801ef08 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	601a      	str	r2, [r3, #0]
 801eef2:	687b      	ldr	r3, [r7, #4]
 801eef4:	2200      	movs	r2, #0
 801eef6:	605a      	str	r2, [r3, #4]
{

}
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	4618      	mov	r0, r3
 801eefc:	370c      	adds	r7, #12
 801eefe:	46bd      	mov	sp, r7
 801ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef04:	4770      	bx	lr
 801ef06:	bf00      	nop
 801ef08:	08028c70 	.word	0x08028c70

0801ef0c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801ef0c:	b580      	push	{r7, lr}
 801ef0e:	b082      	sub	sp, #8
 801ef10:	af00      	add	r7, sp, #0
 801ef12:	6078      	str	r0, [r7, #4]
 801ef14:	4a05      	ldr	r2, [pc, #20]	; (801ef2c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	601a      	str	r2, [r3, #0]
{
    clear();
 801ef1a:	6878      	ldr	r0, [r7, #4]
 801ef1c:	f000 f825 	bl	801ef6a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801ef20:	687b      	ldr	r3, [r7, #4]
 801ef22:	4618      	mov	r0, r3
 801ef24:	3708      	adds	r7, #8
 801ef26:	46bd      	mov	sp, r7
 801ef28:	bd80      	pop	{r7, pc}
 801ef2a:	bf00      	nop
 801ef2c:	08028c70 	.word	0x08028c70

0801ef30 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801ef30:	b580      	push	{r7, lr}
 801ef32:	b082      	sub	sp, #8
 801ef34:	af00      	add	r7, sp, #0
 801ef36:	6078      	str	r0, [r7, #4]
}
 801ef38:	6878      	ldr	r0, [r7, #4]
 801ef3a:	f7ff ffe7 	bl	801ef0c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801ef3e:	2108      	movs	r1, #8
 801ef40:	6878      	ldr	r0, [r7, #4]
 801ef42:	f7ea fef7 	bl	8009d34 <_ZdlPvj>
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	4618      	mov	r0, r3
 801ef4a:	3708      	adds	r7, #8
 801ef4c:	46bd      	mov	sp, r7
 801ef4e:	bd80      	pop	{r7, pc}

0801ef50 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801ef50:	b580      	push	{r7, lr}
 801ef52:	b082      	sub	sp, #8
 801ef54:	af00      	add	r7, sp, #0
 801ef56:	6078      	str	r0, [r7, #4]
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	4618      	mov	r0, r3
 801ef5c:	f7ed fe51 	bl	800cc02 <_ZN12SimpleStringD1Ev>
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	4618      	mov	r0, r3
 801ef64:	3708      	adds	r7, #8
 801ef66:	46bd      	mov	sp, r7
 801ef68:	bd80      	pop	{r7, pc}

0801ef6a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801ef6a:	b590      	push	{r4, r7, lr}
 801ef6c:	b085      	sub	sp, #20
 801ef6e:	af00      	add	r7, sp, #0
 801ef70:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	685b      	ldr	r3, [r3, #4]
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	d012      	beq.n	801efa0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801ef7a:	687b      	ldr	r3, [r7, #4]
 801ef7c:	685b      	ldr	r3, [r3, #4]
 801ef7e:	691b      	ldr	r3, [r3, #16]
 801ef80:	60fb      	str	r3, [r7, #12]
        delete head_;
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	685c      	ldr	r4, [r3, #4]
 801ef86:	2c00      	cmp	r4, #0
 801ef88:	d006      	beq.n	801ef98 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801ef8a:	4620      	mov	r0, r4
 801ef8c:	f7ff ffe0 	bl	801ef50 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801ef90:	2114      	movs	r1, #20
 801ef92:	4620      	mov	r0, r4
 801ef94:	f7ea fece 	bl	8009d34 <_ZdlPvj>
        head_ = next;
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	68fa      	ldr	r2, [r7, #12]
 801ef9c:	605a      	str	r2, [r3, #4]
    while (head_) {
 801ef9e:	e7e8      	b.n	801ef72 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801efa0:	bf00      	nop
 801efa2:	3714      	adds	r7, #20
 801efa4:	46bd      	mov	sp, r7
 801efa6:	bd90      	pop	{r4, r7, pc}

0801efa8 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801efa8:	b590      	push	{r4, r7, lr}
 801efaa:	b085      	sub	sp, #20
 801efac:	af00      	add	r7, sp, #0
 801efae:	60f8      	str	r0, [r7, #12]
 801efb0:	60b9      	str	r1, [r7, #8]
 801efb2:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801efb4:	f240 227a 	movw	r2, #634	; 0x27a
 801efb8:	4908      	ldr	r1, [pc, #32]	; (801efdc <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801efba:	2014      	movs	r0, #20
 801efbc:	f7ea fea6 	bl	8009d0c <_ZnwjPKci>
 801efc0:	4604      	mov	r4, r0
 801efc2:	68fb      	ldr	r3, [r7, #12]
 801efc4:	685b      	ldr	r3, [r3, #4]
 801efc6:	687a      	ldr	r2, [r7, #4]
 801efc8:	68b9      	ldr	r1, [r7, #8]
 801efca:	4620      	mov	r0, r4
 801efcc:	f7ff ff3b 	bl	801ee46 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801efd0:	68fb      	ldr	r3, [r7, #12]
 801efd2:	605c      	str	r4, [r3, #4]
}
 801efd4:	bf00      	nop
 801efd6:	3714      	adds	r7, #20
 801efd8:	46bd      	mov	sp, r7
 801efda:	bd90      	pop	{r4, r7, pc}
 801efdc:	0802605c 	.word	0x0802605c

0801efe0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801efe0:	b590      	push	{r4, r7, lr}
 801efe2:	b085      	sub	sp, #20
 801efe4:	af00      	add	r7, sp, #0
 801efe6:	60f8      	str	r0, [r7, #12]
 801efe8:	60b9      	str	r1, [r7, #8]
 801efea:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801efec:	f240 227f 	movw	r2, #639	; 0x27f
 801eff0:	4908      	ldr	r1, [pc, #32]	; (801f014 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801eff2:	2014      	movs	r0, #20
 801eff4:	f7ea fe8a 	bl	8009d0c <_ZnwjPKci>
 801eff8:	4604      	mov	r4, r0
 801effa:	68fb      	ldr	r3, [r7, #12]
 801effc:	685b      	ldr	r3, [r3, #4]
 801effe:	687a      	ldr	r2, [r7, #4]
 801f000:	68b9      	ldr	r1, [r7, #8]
 801f002:	4620      	mov	r0, r4
 801f004:	f7ff ff39 	bl	801ee7a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801f008:	68fb      	ldr	r3, [r7, #12]
 801f00a:	605c      	str	r4, [r3, #4]
}
 801f00c:	bf00      	nop
 801f00e:	3714      	adds	r7, #20
 801f010:	46bd      	mov	sp, r7
 801f012:	bd90      	pop	{r4, r7, pc}
 801f014:	0802605c 	.word	0x0802605c

0801f018 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801f018:	b580      	push	{r7, lr}
 801f01a:	b084      	sub	sp, #16
 801f01c:	af00      	add	r7, sp, #0
 801f01e:	6078      	str	r0, [r7, #4]
 801f020:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f022:	687b      	ldr	r3, [r7, #4]
 801f024:	685b      	ldr	r3, [r3, #4]
 801f026:	60fb      	str	r3, [r7, #12]
 801f028:	68fb      	ldr	r3, [r7, #12]
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	d017      	beq.n	801f05e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801f02e:	68fb      	ldr	r3, [r7, #12]
 801f030:	6839      	ldr	r1, [r7, #0]
 801f032:	4618      	mov	r0, r3
 801f034:	f7ed fdf1 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801f038:	4603      	mov	r3, r0
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	d005      	beq.n	801f04a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f03e:	68fb      	ldr	r3, [r7, #12]
 801f040:	689b      	ldr	r3, [r3, #8]
 801f042:	2b00      	cmp	r3, #0
 801f044:	d001      	beq.n	801f04a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f046:	2301      	movs	r3, #1
 801f048:	e000      	b.n	801f04c <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801f04a:	2300      	movs	r3, #0
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	d002      	beq.n	801f056 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	689b      	ldr	r3, [r3, #8]
 801f054:	e004      	b.n	801f060 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f056:	68fb      	ldr	r3, [r7, #12]
 801f058:	691b      	ldr	r3, [r3, #16]
 801f05a:	60fb      	str	r3, [r7, #12]
 801f05c:	e7e4      	b.n	801f028 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f05e:	2300      	movs	r3, #0
}
 801f060:	4618      	mov	r0, r3
 801f062:	3710      	adds	r7, #16
 801f064:	46bd      	mov	sp, r7
 801f066:	bd80      	pop	{r7, pc}

0801f068 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801f068:	b580      	push	{r7, lr}
 801f06a:	b084      	sub	sp, #16
 801f06c:	af00      	add	r7, sp, #0
 801f06e:	6078      	str	r0, [r7, #4]
 801f070:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	685b      	ldr	r3, [r3, #4]
 801f076:	60fb      	str	r3, [r7, #12]
 801f078:	68fb      	ldr	r3, [r7, #12]
 801f07a:	2b00      	cmp	r3, #0
 801f07c:	d017      	beq.n	801f0ae <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801f07e:	68fb      	ldr	r3, [r7, #12]
 801f080:	6839      	ldr	r1, [r7, #0]
 801f082:	4618      	mov	r0, r3
 801f084:	f7ed fdc9 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801f088:	4603      	mov	r3, r0
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d005      	beq.n	801f09a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f08e:	68fb      	ldr	r3, [r7, #12]
 801f090:	68db      	ldr	r3, [r3, #12]
 801f092:	2b00      	cmp	r3, #0
 801f094:	d001      	beq.n	801f09a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f096:	2301      	movs	r3, #1
 801f098:	e000      	b.n	801f09c <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801f09a:	2300      	movs	r3, #0
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d002      	beq.n	801f0a6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801f0a0:	68fb      	ldr	r3, [r7, #12]
 801f0a2:	68db      	ldr	r3, [r3, #12]
 801f0a4:	e004      	b.n	801f0b0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f0a6:	68fb      	ldr	r3, [r7, #12]
 801f0a8:	691b      	ldr	r3, [r3, #16]
 801f0aa:	60fb      	str	r3, [r7, #12]
 801f0ac:	e7e4      	b.n	801f078 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f0ae:	2300      	movs	r3, #0
}
 801f0b0:	4618      	mov	r0, r3
 801f0b2:	3710      	adds	r7, #16
 801f0b4:	46bd      	mov	sp, r7
 801f0b6:	bd80      	pop	{r7, pc}

0801f0b8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801f0b8:	b590      	push	{r4, r7, lr}
 801f0ba:	b087      	sub	sp, #28
 801f0bc:	af02      	add	r7, sp, #8
 801f0be:	6078      	str	r0, [r7, #4]
 801f0c0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f0c2:	683b      	ldr	r3, [r7, #0]
 801f0c4:	685b      	ldr	r3, [r3, #4]
 801f0c6:	60fb      	str	r3, [r7, #12]
 801f0c8:	68fb      	ldr	r3, [r7, #12]
 801f0ca:	2b00      	cmp	r3, #0
 801f0cc:	d018      	beq.n	801f100 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801f0ce:	f240 2293 	movw	r2, #659	; 0x293
 801f0d2:	490d      	ldr	r1, [pc, #52]	; (801f108 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801f0d4:	2014      	movs	r0, #20
 801f0d6:	f7ea fe19 	bl	8009d0c <_ZnwjPKci>
 801f0da:	4604      	mov	r4, r0
 801f0dc:	68f9      	ldr	r1, [r7, #12]
 801f0de:	68fb      	ldr	r3, [r7, #12]
 801f0e0:	689a      	ldr	r2, [r3, #8]
 801f0e2:	68fb      	ldr	r3, [r7, #12]
 801f0e4:	68d8      	ldr	r0, [r3, #12]
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	685b      	ldr	r3, [r3, #4]
 801f0ea:	9300      	str	r3, [sp, #0]
 801f0ec:	4603      	mov	r3, r0
 801f0ee:	4620      	mov	r0, r4
 801f0f0:	f7ff fedd 	bl	801eeae <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f0f8:	68fb      	ldr	r3, [r7, #12]
 801f0fa:	691b      	ldr	r3, [r3, #16]
 801f0fc:	60fb      	str	r3, [r7, #12]
 801f0fe:	e7e3      	b.n	801f0c8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801f100:	bf00      	nop
 801f102:	3714      	adds	r7, #20
 801f104:	46bd      	mov	sp, r7
 801f106:	bd90      	pop	{r4, r7, pc}
 801f108:	0802605c 	.word	0x0802605c

0801f10c <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801f10c:	b580      	push	{r7, lr}
 801f10e:	b082      	sub	sp, #8
 801f110:	af00      	add	r7, sp, #0
 801f112:	6078      	str	r0, [r7, #4]
 801f114:	6039      	str	r1, [r7, #0]
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	490b      	ldr	r1, [pc, #44]	; (801f148 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801f11a:	4618      	mov	r0, r3
 801f11c:	f7ed f9b9 	bl	800c492 <_ZN12SimpleStringC1EPKc>
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	2200      	movs	r2, #0
 801f124:	721a      	strb	r2, [r3, #8]
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	2200      	movs	r2, #0
 801f12a:	725a      	strb	r2, [r3, #9]
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	2200      	movs	r2, #0
 801f130:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801f132:	687b      	ldr	r3, [r7, #4]
 801f134:	6839      	ldr	r1, [r7, #0]
 801f136:	4618      	mov	r0, r3
 801f138:	f7ed fa17 	bl	800c56a <_ZN12SimpleStringaSERKS_>
}
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	4618      	mov	r0, r3
 801f140:	3708      	adds	r7, #8
 801f142:	46bd      	mov	sp, r7
 801f144:	bd80      	pop	{r7, pc}
 801f146:	bf00      	nop
 801f148:	08026138 	.word	0x08026138

0801f14c <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801f14c:	b480      	push	{r7}
 801f14e:	b083      	sub	sp, #12
 801f150:	af00      	add	r7, sp, #0
 801f152:	6078      	str	r0, [r7, #4]
 801f154:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	683a      	ldr	r2, [r7, #0]
 801f15a:	60da      	str	r2, [r3, #12]
    return this;
 801f15c:	687b      	ldr	r3, [r7, #4]
}
 801f15e:	4618      	mov	r0, r3
 801f160:	370c      	adds	r7, #12
 801f162:	46bd      	mov	sp, r7
 801f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f168:	4770      	bx	lr

0801f16a <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801f16a:	b480      	push	{r7}
 801f16c:	b083      	sub	sp, #12
 801f16e:	af00      	add	r7, sp, #0
 801f170:	6078      	str	r0, [r7, #4]
    return next_;
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	68db      	ldr	r3, [r3, #12]
}
 801f176:	4618      	mov	r0, r3
 801f178:	370c      	adds	r7, #12
 801f17a:	46bd      	mov	sp, r7
 801f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f180:	4770      	bx	lr

0801f182 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801f182:	b480      	push	{r7}
 801f184:	b083      	sub	sp, #12
 801f186:	af00      	add	r7, sp, #0
 801f188:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	2201      	movs	r2, #1
 801f18e:	721a      	strb	r2, [r3, #8]
}
 801f190:	bf00      	nop
 801f192:	370c      	adds	r7, #12
 801f194:	46bd      	mov	sp, r7
 801f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f19a:	4770      	bx	lr

0801f19c <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801f19c:	b480      	push	{r7}
 801f19e:	b083      	sub	sp, #12
 801f1a0:	af00      	add	r7, sp, #0
 801f1a2:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	2201      	movs	r2, #1
 801f1a8:	725a      	strb	r2, [r3, #9]
}
 801f1aa:	bf00      	nop
 801f1ac:	370c      	adds	r7, #12
 801f1ae:	46bd      	mov	sp, r7
 801f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1b4:	4770      	bx	lr

0801f1b6 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801f1b6:	b580      	push	{r7, lr}
 801f1b8:	b084      	sub	sp, #16
 801f1ba:	af00      	add	r7, sp, #0
 801f1bc:	6078      	str	r0, [r7, #4]
 801f1be:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801f1c0:	2300      	movs	r3, #0
 801f1c2:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	7a1b      	ldrb	r3, [r3, #8]
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	d007      	beq.n	801f1dc <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	4619      	mov	r1, r3
 801f1d0:	6838      	ldr	r0, [r7, #0]
 801f1d2:	f7ed fd22 	bl	800cc1a <_ZeqRK12SimpleStringS1_>
 801f1d6:	4603      	mov	r3, r0
 801f1d8:	73fb      	strb	r3, [r7, #15]
 801f1da:	e006      	b.n	801f1ea <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	4619      	mov	r1, r3
 801f1e0:	6838      	ldr	r0, [r7, #0]
 801f1e2:	f7ed f9d4 	bl	800c58e <_ZNK12SimpleString8containsERKS_>
 801f1e6:	4603      	mov	r3, r0
 801f1e8:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	7a5b      	ldrb	r3, [r3, #9]
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	d004      	beq.n	801f1fc <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801f1f2:	7bfb      	ldrb	r3, [r7, #15]
 801f1f4:	f083 0301 	eor.w	r3, r3, #1
 801f1f8:	b2db      	uxtb	r3, r3
 801f1fa:	e005      	b.n	801f208 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801f1fc:	7bfb      	ldrb	r3, [r7, #15]
 801f1fe:	2b00      	cmp	r3, #0
 801f200:	bf14      	ite	ne
 801f202:	2301      	movne	r3, #1
 801f204:	2300      	moveq	r3, #0
 801f206:	b2db      	uxtb	r3, r3
}
 801f208:	4618      	mov	r0, r3
 801f20a:	3710      	adds	r7, #16
 801f20c:	46bd      	mov	sp, r7
 801f20e:	bd80      	pop	{r7, pc}

0801f210 <__cxa_guard_acquire>:
 801f210:	6803      	ldr	r3, [r0, #0]
 801f212:	07db      	lsls	r3, r3, #31
 801f214:	d406      	bmi.n	801f224 <__cxa_guard_acquire+0x14>
 801f216:	7843      	ldrb	r3, [r0, #1]
 801f218:	b103      	cbz	r3, 801f21c <__cxa_guard_acquire+0xc>
 801f21a:	deff      	udf	#255	; 0xff
 801f21c:	2301      	movs	r3, #1
 801f21e:	7043      	strb	r3, [r0, #1]
 801f220:	4618      	mov	r0, r3
 801f222:	4770      	bx	lr
 801f224:	2000      	movs	r0, #0
 801f226:	4770      	bx	lr

0801f228 <__cxa_guard_release>:
 801f228:	2301      	movs	r3, #1
 801f22a:	6003      	str	r3, [r0, #0]
 801f22c:	4770      	bx	lr

0801f22e <__cxa_pure_virtual>:
 801f22e:	b508      	push	{r3, lr}
 801f230:	f000 f80c 	bl	801f24c <_ZSt9terminatev>

0801f234 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f234:	b508      	push	{r3, lr}
 801f236:	4780      	blx	r0
 801f238:	f000 f816 	bl	801f268 <abort>

0801f23c <_ZSt13get_terminatev>:
 801f23c:	4b02      	ldr	r3, [pc, #8]	; (801f248 <_ZSt13get_terminatev+0xc>)
 801f23e:	6818      	ldr	r0, [r3, #0]
 801f240:	f3bf 8f5b 	dmb	ish
 801f244:	4770      	bx	lr
 801f246:	bf00      	nop
 801f248:	20000104 	.word	0x20000104

0801f24c <_ZSt9terminatev>:
 801f24c:	b508      	push	{r3, lr}
 801f24e:	f7ff fff5 	bl	801f23c <_ZSt13get_terminatev>
 801f252:	f7ff ffef 	bl	801f234 <_ZN10__cxxabiv111__terminateEPFvvE>

0801f256 <fabs>:
 801f256:	ec51 0b10 	vmov	r0, r1, d0
 801f25a:	ee10 2a10 	vmov	r2, s0
 801f25e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f262:	ec43 2b10 	vmov	d0, r2, r3
 801f266:	4770      	bx	lr

0801f268 <abort>:
 801f268:	b508      	push	{r3, lr}
 801f26a:	2006      	movs	r0, #6
 801f26c:	f000 ff8c 	bl	8020188 <raise>
 801f270:	2001      	movs	r0, #1
 801f272:	f7e1 fd7c 	bl	8000d6e <_exit>

0801f276 <atexit>:
 801f276:	2300      	movs	r3, #0
 801f278:	4601      	mov	r1, r0
 801f27a:	461a      	mov	r2, r3
 801f27c:	4618      	mov	r0, r3
 801f27e:	f002 b9d3 	b.w	8021628 <__register_exitproc>

0801f282 <atoi>:
 801f282:	220a      	movs	r2, #10
 801f284:	2100      	movs	r1, #0
 801f286:	f001 bdfb 	b.w	8020e80 <strtol>
	...

0801f28c <calloc>:
 801f28c:	4b02      	ldr	r3, [pc, #8]	; (801f298 <calloc+0xc>)
 801f28e:	460a      	mov	r2, r1
 801f290:	4601      	mov	r1, r0
 801f292:	6818      	ldr	r0, [r3, #0]
 801f294:	f000 bde8 	b.w	801fe68 <_calloc_r>
 801f298:	20000108 	.word	0x20000108

0801f29c <__errno>:
 801f29c:	4b01      	ldr	r3, [pc, #4]	; (801f2a4 <__errno+0x8>)
 801f29e:	6818      	ldr	r0, [r3, #0]
 801f2a0:	4770      	bx	lr
 801f2a2:	bf00      	nop
 801f2a4:	20000108 	.word	0x20000108

0801f2a8 <_fclose_r>:
 801f2a8:	b570      	push	{r4, r5, r6, lr}
 801f2aa:	4605      	mov	r5, r0
 801f2ac:	460c      	mov	r4, r1
 801f2ae:	b911      	cbnz	r1, 801f2b6 <_fclose_r+0xe>
 801f2b0:	2600      	movs	r6, #0
 801f2b2:	4630      	mov	r0, r6
 801f2b4:	bd70      	pop	{r4, r5, r6, pc}
 801f2b6:	b118      	cbz	r0, 801f2c0 <_fclose_r+0x18>
 801f2b8:	6983      	ldr	r3, [r0, #24]
 801f2ba:	b90b      	cbnz	r3, 801f2c0 <_fclose_r+0x18>
 801f2bc:	f000 f994 	bl	801f5e8 <__sinit>
 801f2c0:	4b2c      	ldr	r3, [pc, #176]	; (801f374 <_fclose_r+0xcc>)
 801f2c2:	429c      	cmp	r4, r3
 801f2c4:	d114      	bne.n	801f2f0 <_fclose_r+0x48>
 801f2c6:	686c      	ldr	r4, [r5, #4]
 801f2c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f2ca:	07d8      	lsls	r0, r3, #31
 801f2cc:	d405      	bmi.n	801f2da <_fclose_r+0x32>
 801f2ce:	89a3      	ldrh	r3, [r4, #12]
 801f2d0:	0599      	lsls	r1, r3, #22
 801f2d2:	d402      	bmi.n	801f2da <_fclose_r+0x32>
 801f2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f2d6:	f000 fd3a 	bl	801fd4e <__retarget_lock_acquire_recursive>
 801f2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2de:	b98b      	cbnz	r3, 801f304 <_fclose_r+0x5c>
 801f2e0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801f2e2:	f016 0601 	ands.w	r6, r6, #1
 801f2e6:	d1e3      	bne.n	801f2b0 <_fclose_r+0x8>
 801f2e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f2ea:	f000 fd32 	bl	801fd52 <__retarget_lock_release_recursive>
 801f2ee:	e7e0      	b.n	801f2b2 <_fclose_r+0xa>
 801f2f0:	4b21      	ldr	r3, [pc, #132]	; (801f378 <_fclose_r+0xd0>)
 801f2f2:	429c      	cmp	r4, r3
 801f2f4:	d101      	bne.n	801f2fa <_fclose_r+0x52>
 801f2f6:	68ac      	ldr	r4, [r5, #8]
 801f2f8:	e7e6      	b.n	801f2c8 <_fclose_r+0x20>
 801f2fa:	4b20      	ldr	r3, [pc, #128]	; (801f37c <_fclose_r+0xd4>)
 801f2fc:	429c      	cmp	r4, r3
 801f2fe:	bf08      	it	eq
 801f300:	68ec      	ldreq	r4, [r5, #12]
 801f302:	e7e1      	b.n	801f2c8 <_fclose_r+0x20>
 801f304:	4621      	mov	r1, r4
 801f306:	4628      	mov	r0, r5
 801f308:	f000 f842 	bl	801f390 <__sflush_r>
 801f30c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f30e:	4606      	mov	r6, r0
 801f310:	b133      	cbz	r3, 801f320 <_fclose_r+0x78>
 801f312:	6a21      	ldr	r1, [r4, #32]
 801f314:	4628      	mov	r0, r5
 801f316:	4798      	blx	r3
 801f318:	2800      	cmp	r0, #0
 801f31a:	bfb8      	it	lt
 801f31c:	f04f 36ff 	movlt.w	r6, #4294967295
 801f320:	89a3      	ldrh	r3, [r4, #12]
 801f322:	061a      	lsls	r2, r3, #24
 801f324:	d503      	bpl.n	801f32e <_fclose_r+0x86>
 801f326:	6921      	ldr	r1, [r4, #16]
 801f328:	4628      	mov	r0, r5
 801f32a:	f000 fdad 	bl	801fe88 <_free_r>
 801f32e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f330:	b141      	cbz	r1, 801f344 <_fclose_r+0x9c>
 801f332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f336:	4299      	cmp	r1, r3
 801f338:	d002      	beq.n	801f340 <_fclose_r+0x98>
 801f33a:	4628      	mov	r0, r5
 801f33c:	f000 fda4 	bl	801fe88 <_free_r>
 801f340:	2300      	movs	r3, #0
 801f342:	6363      	str	r3, [r4, #52]	; 0x34
 801f344:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f346:	b121      	cbz	r1, 801f352 <_fclose_r+0xaa>
 801f348:	4628      	mov	r0, r5
 801f34a:	f000 fd9d 	bl	801fe88 <_free_r>
 801f34e:	2300      	movs	r3, #0
 801f350:	64a3      	str	r3, [r4, #72]	; 0x48
 801f352:	f000 f931 	bl	801f5b8 <__sfp_lock_acquire>
 801f356:	2300      	movs	r3, #0
 801f358:	81a3      	strh	r3, [r4, #12]
 801f35a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f35c:	07db      	lsls	r3, r3, #31
 801f35e:	d402      	bmi.n	801f366 <_fclose_r+0xbe>
 801f360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f362:	f000 fcf6 	bl	801fd52 <__retarget_lock_release_recursive>
 801f366:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f368:	f000 fcef 	bl	801fd4a <__retarget_lock_close_recursive>
 801f36c:	f000 f92a 	bl	801f5c4 <__sfp_lock_release>
 801f370:	e79f      	b.n	801f2b2 <_fclose_r+0xa>
 801f372:	bf00      	nop
 801f374:	08028d64 	.word	0x08028d64
 801f378:	08028d84 	.word	0x08028d84
 801f37c:	08028d44 	.word	0x08028d44

0801f380 <fclose>:
 801f380:	4b02      	ldr	r3, [pc, #8]	; (801f38c <fclose+0xc>)
 801f382:	4601      	mov	r1, r0
 801f384:	6818      	ldr	r0, [r3, #0]
 801f386:	f7ff bf8f 	b.w	801f2a8 <_fclose_r>
 801f38a:	bf00      	nop
 801f38c:	20000108 	.word	0x20000108

0801f390 <__sflush_r>:
 801f390:	898a      	ldrh	r2, [r1, #12]
 801f392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f396:	4605      	mov	r5, r0
 801f398:	0710      	lsls	r0, r2, #28
 801f39a:	460c      	mov	r4, r1
 801f39c:	d458      	bmi.n	801f450 <__sflush_r+0xc0>
 801f39e:	684b      	ldr	r3, [r1, #4]
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	dc05      	bgt.n	801f3b0 <__sflush_r+0x20>
 801f3a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f3a6:	2b00      	cmp	r3, #0
 801f3a8:	dc02      	bgt.n	801f3b0 <__sflush_r+0x20>
 801f3aa:	2000      	movs	r0, #0
 801f3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f3b2:	2e00      	cmp	r6, #0
 801f3b4:	d0f9      	beq.n	801f3aa <__sflush_r+0x1a>
 801f3b6:	2300      	movs	r3, #0
 801f3b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f3bc:	682f      	ldr	r7, [r5, #0]
 801f3be:	602b      	str	r3, [r5, #0]
 801f3c0:	d032      	beq.n	801f428 <__sflush_r+0x98>
 801f3c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f3c4:	89a3      	ldrh	r3, [r4, #12]
 801f3c6:	075a      	lsls	r2, r3, #29
 801f3c8:	d505      	bpl.n	801f3d6 <__sflush_r+0x46>
 801f3ca:	6863      	ldr	r3, [r4, #4]
 801f3cc:	1ac0      	subs	r0, r0, r3
 801f3ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f3d0:	b10b      	cbz	r3, 801f3d6 <__sflush_r+0x46>
 801f3d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f3d4:	1ac0      	subs	r0, r0, r3
 801f3d6:	2300      	movs	r3, #0
 801f3d8:	4602      	mov	r2, r0
 801f3da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f3dc:	6a21      	ldr	r1, [r4, #32]
 801f3de:	4628      	mov	r0, r5
 801f3e0:	47b0      	blx	r6
 801f3e2:	1c43      	adds	r3, r0, #1
 801f3e4:	89a3      	ldrh	r3, [r4, #12]
 801f3e6:	d106      	bne.n	801f3f6 <__sflush_r+0x66>
 801f3e8:	6829      	ldr	r1, [r5, #0]
 801f3ea:	291d      	cmp	r1, #29
 801f3ec:	d82c      	bhi.n	801f448 <__sflush_r+0xb8>
 801f3ee:	4a2a      	ldr	r2, [pc, #168]	; (801f498 <__sflush_r+0x108>)
 801f3f0:	40ca      	lsrs	r2, r1
 801f3f2:	07d6      	lsls	r6, r2, #31
 801f3f4:	d528      	bpl.n	801f448 <__sflush_r+0xb8>
 801f3f6:	2200      	movs	r2, #0
 801f3f8:	6062      	str	r2, [r4, #4]
 801f3fa:	04d9      	lsls	r1, r3, #19
 801f3fc:	6922      	ldr	r2, [r4, #16]
 801f3fe:	6022      	str	r2, [r4, #0]
 801f400:	d504      	bpl.n	801f40c <__sflush_r+0x7c>
 801f402:	1c42      	adds	r2, r0, #1
 801f404:	d101      	bne.n	801f40a <__sflush_r+0x7a>
 801f406:	682b      	ldr	r3, [r5, #0]
 801f408:	b903      	cbnz	r3, 801f40c <__sflush_r+0x7c>
 801f40a:	6560      	str	r0, [r4, #84]	; 0x54
 801f40c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f40e:	602f      	str	r7, [r5, #0]
 801f410:	2900      	cmp	r1, #0
 801f412:	d0ca      	beq.n	801f3aa <__sflush_r+0x1a>
 801f414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f418:	4299      	cmp	r1, r3
 801f41a:	d002      	beq.n	801f422 <__sflush_r+0x92>
 801f41c:	4628      	mov	r0, r5
 801f41e:	f000 fd33 	bl	801fe88 <_free_r>
 801f422:	2000      	movs	r0, #0
 801f424:	6360      	str	r0, [r4, #52]	; 0x34
 801f426:	e7c1      	b.n	801f3ac <__sflush_r+0x1c>
 801f428:	6a21      	ldr	r1, [r4, #32]
 801f42a:	2301      	movs	r3, #1
 801f42c:	4628      	mov	r0, r5
 801f42e:	47b0      	blx	r6
 801f430:	1c41      	adds	r1, r0, #1
 801f432:	d1c7      	bne.n	801f3c4 <__sflush_r+0x34>
 801f434:	682b      	ldr	r3, [r5, #0]
 801f436:	2b00      	cmp	r3, #0
 801f438:	d0c4      	beq.n	801f3c4 <__sflush_r+0x34>
 801f43a:	2b1d      	cmp	r3, #29
 801f43c:	d001      	beq.n	801f442 <__sflush_r+0xb2>
 801f43e:	2b16      	cmp	r3, #22
 801f440:	d101      	bne.n	801f446 <__sflush_r+0xb6>
 801f442:	602f      	str	r7, [r5, #0]
 801f444:	e7b1      	b.n	801f3aa <__sflush_r+0x1a>
 801f446:	89a3      	ldrh	r3, [r4, #12]
 801f448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f44c:	81a3      	strh	r3, [r4, #12]
 801f44e:	e7ad      	b.n	801f3ac <__sflush_r+0x1c>
 801f450:	690f      	ldr	r7, [r1, #16]
 801f452:	2f00      	cmp	r7, #0
 801f454:	d0a9      	beq.n	801f3aa <__sflush_r+0x1a>
 801f456:	0793      	lsls	r3, r2, #30
 801f458:	680e      	ldr	r6, [r1, #0]
 801f45a:	bf08      	it	eq
 801f45c:	694b      	ldreq	r3, [r1, #20]
 801f45e:	600f      	str	r7, [r1, #0]
 801f460:	bf18      	it	ne
 801f462:	2300      	movne	r3, #0
 801f464:	eba6 0807 	sub.w	r8, r6, r7
 801f468:	608b      	str	r3, [r1, #8]
 801f46a:	f1b8 0f00 	cmp.w	r8, #0
 801f46e:	dd9c      	ble.n	801f3aa <__sflush_r+0x1a>
 801f470:	6a21      	ldr	r1, [r4, #32]
 801f472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f474:	4643      	mov	r3, r8
 801f476:	463a      	mov	r2, r7
 801f478:	4628      	mov	r0, r5
 801f47a:	47b0      	blx	r6
 801f47c:	2800      	cmp	r0, #0
 801f47e:	dc06      	bgt.n	801f48e <__sflush_r+0xfe>
 801f480:	89a3      	ldrh	r3, [r4, #12]
 801f482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f486:	81a3      	strh	r3, [r4, #12]
 801f488:	f04f 30ff 	mov.w	r0, #4294967295
 801f48c:	e78e      	b.n	801f3ac <__sflush_r+0x1c>
 801f48e:	4407      	add	r7, r0
 801f490:	eba8 0800 	sub.w	r8, r8, r0
 801f494:	e7e9      	b.n	801f46a <__sflush_r+0xda>
 801f496:	bf00      	nop
 801f498:	20400001 	.word	0x20400001

0801f49c <_fflush_r>:
 801f49c:	b538      	push	{r3, r4, r5, lr}
 801f49e:	690b      	ldr	r3, [r1, #16]
 801f4a0:	4605      	mov	r5, r0
 801f4a2:	460c      	mov	r4, r1
 801f4a4:	b913      	cbnz	r3, 801f4ac <_fflush_r+0x10>
 801f4a6:	2500      	movs	r5, #0
 801f4a8:	4628      	mov	r0, r5
 801f4aa:	bd38      	pop	{r3, r4, r5, pc}
 801f4ac:	b118      	cbz	r0, 801f4b6 <_fflush_r+0x1a>
 801f4ae:	6983      	ldr	r3, [r0, #24]
 801f4b0:	b90b      	cbnz	r3, 801f4b6 <_fflush_r+0x1a>
 801f4b2:	f000 f899 	bl	801f5e8 <__sinit>
 801f4b6:	4b14      	ldr	r3, [pc, #80]	; (801f508 <_fflush_r+0x6c>)
 801f4b8:	429c      	cmp	r4, r3
 801f4ba:	d11b      	bne.n	801f4f4 <_fflush_r+0x58>
 801f4bc:	686c      	ldr	r4, [r5, #4]
 801f4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f4c2:	2b00      	cmp	r3, #0
 801f4c4:	d0ef      	beq.n	801f4a6 <_fflush_r+0xa>
 801f4c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f4c8:	07d0      	lsls	r0, r2, #31
 801f4ca:	d404      	bmi.n	801f4d6 <_fflush_r+0x3a>
 801f4cc:	0599      	lsls	r1, r3, #22
 801f4ce:	d402      	bmi.n	801f4d6 <_fflush_r+0x3a>
 801f4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f4d2:	f000 fc3c 	bl	801fd4e <__retarget_lock_acquire_recursive>
 801f4d6:	4628      	mov	r0, r5
 801f4d8:	4621      	mov	r1, r4
 801f4da:	f7ff ff59 	bl	801f390 <__sflush_r>
 801f4de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f4e0:	07da      	lsls	r2, r3, #31
 801f4e2:	4605      	mov	r5, r0
 801f4e4:	d4e0      	bmi.n	801f4a8 <_fflush_r+0xc>
 801f4e6:	89a3      	ldrh	r3, [r4, #12]
 801f4e8:	059b      	lsls	r3, r3, #22
 801f4ea:	d4dd      	bmi.n	801f4a8 <_fflush_r+0xc>
 801f4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f4ee:	f000 fc30 	bl	801fd52 <__retarget_lock_release_recursive>
 801f4f2:	e7d9      	b.n	801f4a8 <_fflush_r+0xc>
 801f4f4:	4b05      	ldr	r3, [pc, #20]	; (801f50c <_fflush_r+0x70>)
 801f4f6:	429c      	cmp	r4, r3
 801f4f8:	d101      	bne.n	801f4fe <_fflush_r+0x62>
 801f4fa:	68ac      	ldr	r4, [r5, #8]
 801f4fc:	e7df      	b.n	801f4be <_fflush_r+0x22>
 801f4fe:	4b04      	ldr	r3, [pc, #16]	; (801f510 <_fflush_r+0x74>)
 801f500:	429c      	cmp	r4, r3
 801f502:	bf08      	it	eq
 801f504:	68ec      	ldreq	r4, [r5, #12]
 801f506:	e7da      	b.n	801f4be <_fflush_r+0x22>
 801f508:	08028d64 	.word	0x08028d64
 801f50c:	08028d84 	.word	0x08028d84
 801f510:	08028d44 	.word	0x08028d44

0801f514 <fflush>:
 801f514:	4601      	mov	r1, r0
 801f516:	b920      	cbnz	r0, 801f522 <fflush+0xe>
 801f518:	4b04      	ldr	r3, [pc, #16]	; (801f52c <fflush+0x18>)
 801f51a:	4905      	ldr	r1, [pc, #20]	; (801f530 <fflush+0x1c>)
 801f51c:	6818      	ldr	r0, [r3, #0]
 801f51e:	f000 babb 	b.w	801fa98 <_fwalk_reent>
 801f522:	4b04      	ldr	r3, [pc, #16]	; (801f534 <fflush+0x20>)
 801f524:	6818      	ldr	r0, [r3, #0]
 801f526:	f7ff bfb9 	b.w	801f49c <_fflush_r>
 801f52a:	bf00      	nop
 801f52c:	08028da4 	.word	0x08028da4
 801f530:	0801f49d 	.word	0x0801f49d
 801f534:	20000108 	.word	0x20000108

0801f538 <std>:
 801f538:	2300      	movs	r3, #0
 801f53a:	b510      	push	{r4, lr}
 801f53c:	4604      	mov	r4, r0
 801f53e:	e9c0 3300 	strd	r3, r3, [r0]
 801f542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f546:	6083      	str	r3, [r0, #8]
 801f548:	8181      	strh	r1, [r0, #12]
 801f54a:	6643      	str	r3, [r0, #100]	; 0x64
 801f54c:	81c2      	strh	r2, [r0, #14]
 801f54e:	6183      	str	r3, [r0, #24]
 801f550:	4619      	mov	r1, r3
 801f552:	2208      	movs	r2, #8
 801f554:	305c      	adds	r0, #92	; 0x5c
 801f556:	f000 fc7f 	bl	801fe58 <memset>
 801f55a:	4b05      	ldr	r3, [pc, #20]	; (801f570 <std+0x38>)
 801f55c:	6263      	str	r3, [r4, #36]	; 0x24
 801f55e:	4b05      	ldr	r3, [pc, #20]	; (801f574 <std+0x3c>)
 801f560:	62a3      	str	r3, [r4, #40]	; 0x28
 801f562:	4b05      	ldr	r3, [pc, #20]	; (801f578 <std+0x40>)
 801f564:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f566:	4b05      	ldr	r3, [pc, #20]	; (801f57c <std+0x44>)
 801f568:	6224      	str	r4, [r4, #32]
 801f56a:	6323      	str	r3, [r4, #48]	; 0x30
 801f56c:	bd10      	pop	{r4, pc}
 801f56e:	bf00      	nop
 801f570:	08020201 	.word	0x08020201
 801f574:	08020227 	.word	0x08020227
 801f578:	0802025f 	.word	0x0802025f
 801f57c:	08020283 	.word	0x08020283

0801f580 <_cleanup_r>:
 801f580:	4901      	ldr	r1, [pc, #4]	; (801f588 <_cleanup_r+0x8>)
 801f582:	f000 ba89 	b.w	801fa98 <_fwalk_reent>
 801f586:	bf00      	nop
 801f588:	0801f49d 	.word	0x0801f49d

0801f58c <__sfmoreglue>:
 801f58c:	b570      	push	{r4, r5, r6, lr}
 801f58e:	1e4a      	subs	r2, r1, #1
 801f590:	2568      	movs	r5, #104	; 0x68
 801f592:	4355      	muls	r5, r2
 801f594:	460e      	mov	r6, r1
 801f596:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f59a:	f000 fcc5 	bl	801ff28 <_malloc_r>
 801f59e:	4604      	mov	r4, r0
 801f5a0:	b140      	cbz	r0, 801f5b4 <__sfmoreglue+0x28>
 801f5a2:	2100      	movs	r1, #0
 801f5a4:	e9c0 1600 	strd	r1, r6, [r0]
 801f5a8:	300c      	adds	r0, #12
 801f5aa:	60a0      	str	r0, [r4, #8]
 801f5ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f5b0:	f000 fc52 	bl	801fe58 <memset>
 801f5b4:	4620      	mov	r0, r4
 801f5b6:	bd70      	pop	{r4, r5, r6, pc}

0801f5b8 <__sfp_lock_acquire>:
 801f5b8:	4801      	ldr	r0, [pc, #4]	; (801f5c0 <__sfp_lock_acquire+0x8>)
 801f5ba:	f000 bbc8 	b.w	801fd4e <__retarget_lock_acquire_recursive>
 801f5be:	bf00      	nop
 801f5c0:	20000f90 	.word	0x20000f90

0801f5c4 <__sfp_lock_release>:
 801f5c4:	4801      	ldr	r0, [pc, #4]	; (801f5cc <__sfp_lock_release+0x8>)
 801f5c6:	f000 bbc4 	b.w	801fd52 <__retarget_lock_release_recursive>
 801f5ca:	bf00      	nop
 801f5cc:	20000f90 	.word	0x20000f90

0801f5d0 <__sinit_lock_acquire>:
 801f5d0:	4801      	ldr	r0, [pc, #4]	; (801f5d8 <__sinit_lock_acquire+0x8>)
 801f5d2:	f000 bbbc 	b.w	801fd4e <__retarget_lock_acquire_recursive>
 801f5d6:	bf00      	nop
 801f5d8:	20000f8b 	.word	0x20000f8b

0801f5dc <__sinit_lock_release>:
 801f5dc:	4801      	ldr	r0, [pc, #4]	; (801f5e4 <__sinit_lock_release+0x8>)
 801f5de:	f000 bbb8 	b.w	801fd52 <__retarget_lock_release_recursive>
 801f5e2:	bf00      	nop
 801f5e4:	20000f8b 	.word	0x20000f8b

0801f5e8 <__sinit>:
 801f5e8:	b510      	push	{r4, lr}
 801f5ea:	4604      	mov	r4, r0
 801f5ec:	f7ff fff0 	bl	801f5d0 <__sinit_lock_acquire>
 801f5f0:	69a3      	ldr	r3, [r4, #24]
 801f5f2:	b11b      	cbz	r3, 801f5fc <__sinit+0x14>
 801f5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5f8:	f7ff bff0 	b.w	801f5dc <__sinit_lock_release>
 801f5fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f600:	6523      	str	r3, [r4, #80]	; 0x50
 801f602:	4b13      	ldr	r3, [pc, #76]	; (801f650 <__sinit+0x68>)
 801f604:	4a13      	ldr	r2, [pc, #76]	; (801f654 <__sinit+0x6c>)
 801f606:	681b      	ldr	r3, [r3, #0]
 801f608:	62a2      	str	r2, [r4, #40]	; 0x28
 801f60a:	42a3      	cmp	r3, r4
 801f60c:	bf04      	itt	eq
 801f60e:	2301      	moveq	r3, #1
 801f610:	61a3      	streq	r3, [r4, #24]
 801f612:	4620      	mov	r0, r4
 801f614:	f000 f820 	bl	801f658 <__sfp>
 801f618:	6060      	str	r0, [r4, #4]
 801f61a:	4620      	mov	r0, r4
 801f61c:	f000 f81c 	bl	801f658 <__sfp>
 801f620:	60a0      	str	r0, [r4, #8]
 801f622:	4620      	mov	r0, r4
 801f624:	f000 f818 	bl	801f658 <__sfp>
 801f628:	2200      	movs	r2, #0
 801f62a:	60e0      	str	r0, [r4, #12]
 801f62c:	2104      	movs	r1, #4
 801f62e:	6860      	ldr	r0, [r4, #4]
 801f630:	f7ff ff82 	bl	801f538 <std>
 801f634:	68a0      	ldr	r0, [r4, #8]
 801f636:	2201      	movs	r2, #1
 801f638:	2109      	movs	r1, #9
 801f63a:	f7ff ff7d 	bl	801f538 <std>
 801f63e:	68e0      	ldr	r0, [r4, #12]
 801f640:	2202      	movs	r2, #2
 801f642:	2112      	movs	r1, #18
 801f644:	f7ff ff78 	bl	801f538 <std>
 801f648:	2301      	movs	r3, #1
 801f64a:	61a3      	str	r3, [r4, #24]
 801f64c:	e7d2      	b.n	801f5f4 <__sinit+0xc>
 801f64e:	bf00      	nop
 801f650:	08028da4 	.word	0x08028da4
 801f654:	0801f581 	.word	0x0801f581

0801f658 <__sfp>:
 801f658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f65a:	4607      	mov	r7, r0
 801f65c:	f7ff ffac 	bl	801f5b8 <__sfp_lock_acquire>
 801f660:	4b1e      	ldr	r3, [pc, #120]	; (801f6dc <__sfp+0x84>)
 801f662:	681e      	ldr	r6, [r3, #0]
 801f664:	69b3      	ldr	r3, [r6, #24]
 801f666:	b913      	cbnz	r3, 801f66e <__sfp+0x16>
 801f668:	4630      	mov	r0, r6
 801f66a:	f7ff ffbd 	bl	801f5e8 <__sinit>
 801f66e:	3648      	adds	r6, #72	; 0x48
 801f670:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f674:	3b01      	subs	r3, #1
 801f676:	d503      	bpl.n	801f680 <__sfp+0x28>
 801f678:	6833      	ldr	r3, [r6, #0]
 801f67a:	b30b      	cbz	r3, 801f6c0 <__sfp+0x68>
 801f67c:	6836      	ldr	r6, [r6, #0]
 801f67e:	e7f7      	b.n	801f670 <__sfp+0x18>
 801f680:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f684:	b9d5      	cbnz	r5, 801f6bc <__sfp+0x64>
 801f686:	4b16      	ldr	r3, [pc, #88]	; (801f6e0 <__sfp+0x88>)
 801f688:	60e3      	str	r3, [r4, #12]
 801f68a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f68e:	6665      	str	r5, [r4, #100]	; 0x64
 801f690:	f000 fb5a 	bl	801fd48 <__retarget_lock_init_recursive>
 801f694:	f7ff ff96 	bl	801f5c4 <__sfp_lock_release>
 801f698:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f69c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f6a0:	6025      	str	r5, [r4, #0]
 801f6a2:	61a5      	str	r5, [r4, #24]
 801f6a4:	2208      	movs	r2, #8
 801f6a6:	4629      	mov	r1, r5
 801f6a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f6ac:	f000 fbd4 	bl	801fe58 <memset>
 801f6b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f6b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f6b8:	4620      	mov	r0, r4
 801f6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f6bc:	3468      	adds	r4, #104	; 0x68
 801f6be:	e7d9      	b.n	801f674 <__sfp+0x1c>
 801f6c0:	2104      	movs	r1, #4
 801f6c2:	4638      	mov	r0, r7
 801f6c4:	f7ff ff62 	bl	801f58c <__sfmoreglue>
 801f6c8:	4604      	mov	r4, r0
 801f6ca:	6030      	str	r0, [r6, #0]
 801f6cc:	2800      	cmp	r0, #0
 801f6ce:	d1d5      	bne.n	801f67c <__sfp+0x24>
 801f6d0:	f7ff ff78 	bl	801f5c4 <__sfp_lock_release>
 801f6d4:	230c      	movs	r3, #12
 801f6d6:	603b      	str	r3, [r7, #0]
 801f6d8:	e7ee      	b.n	801f6b8 <__sfp+0x60>
 801f6da:	bf00      	nop
 801f6dc:	08028da4 	.word	0x08028da4
 801f6e0:	ffff0001 	.word	0xffff0001

0801f6e4 <_fopen_r>:
 801f6e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f6e6:	460f      	mov	r7, r1
 801f6e8:	4611      	mov	r1, r2
 801f6ea:	aa01      	add	r2, sp, #4
 801f6ec:	4605      	mov	r5, r0
 801f6ee:	f002 f82f 	bl	8021750 <__sflags>
 801f6f2:	4606      	mov	r6, r0
 801f6f4:	b918      	cbnz	r0, 801f6fe <_fopen_r+0x1a>
 801f6f6:	2400      	movs	r4, #0
 801f6f8:	4620      	mov	r0, r4
 801f6fa:	b003      	add	sp, #12
 801f6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6fe:	4628      	mov	r0, r5
 801f700:	f7ff ffaa 	bl	801f658 <__sfp>
 801f704:	4604      	mov	r4, r0
 801f706:	2800      	cmp	r0, #0
 801f708:	d0f5      	beq.n	801f6f6 <_fopen_r+0x12>
 801f70a:	4639      	mov	r1, r7
 801f70c:	9a01      	ldr	r2, [sp, #4]
 801f70e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801f712:	4628      	mov	r0, r5
 801f714:	f000 fc62 	bl	801ffdc <_open_r>
 801f718:	1e07      	subs	r7, r0, #0
 801f71a:	da09      	bge.n	801f730 <_fopen_r+0x4c>
 801f71c:	2500      	movs	r5, #0
 801f71e:	f7ff ff4b 	bl	801f5b8 <__sfp_lock_acquire>
 801f722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f724:	81a5      	strh	r5, [r4, #12]
 801f726:	f000 fb10 	bl	801fd4a <__retarget_lock_close_recursive>
 801f72a:	f7ff ff4b 	bl	801f5c4 <__sfp_lock_release>
 801f72e:	e7e2      	b.n	801f6f6 <_fopen_r+0x12>
 801f730:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f732:	07db      	lsls	r3, r3, #31
 801f734:	d405      	bmi.n	801f742 <_fopen_r+0x5e>
 801f736:	89a3      	ldrh	r3, [r4, #12]
 801f738:	0598      	lsls	r0, r3, #22
 801f73a:	d402      	bmi.n	801f742 <_fopen_r+0x5e>
 801f73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f73e:	f000 fb06 	bl	801fd4e <__retarget_lock_acquire_recursive>
 801f742:	4b0e      	ldr	r3, [pc, #56]	; (801f77c <_fopen_r+0x98>)
 801f744:	6263      	str	r3, [r4, #36]	; 0x24
 801f746:	4b0e      	ldr	r3, [pc, #56]	; (801f780 <_fopen_r+0x9c>)
 801f748:	62a3      	str	r3, [r4, #40]	; 0x28
 801f74a:	4b0e      	ldr	r3, [pc, #56]	; (801f784 <_fopen_r+0xa0>)
 801f74c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f74e:	05f1      	lsls	r1, r6, #23
 801f750:	4b0d      	ldr	r3, [pc, #52]	; (801f788 <_fopen_r+0xa4>)
 801f752:	81e7      	strh	r7, [r4, #14]
 801f754:	81a6      	strh	r6, [r4, #12]
 801f756:	6224      	str	r4, [r4, #32]
 801f758:	6323      	str	r3, [r4, #48]	; 0x30
 801f75a:	d505      	bpl.n	801f768 <_fopen_r+0x84>
 801f75c:	2302      	movs	r3, #2
 801f75e:	2200      	movs	r2, #0
 801f760:	4621      	mov	r1, r4
 801f762:	4628      	mov	r0, r5
 801f764:	f000 f888 	bl	801f878 <_fseek_r>
 801f768:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f76a:	07da      	lsls	r2, r3, #31
 801f76c:	d4c4      	bmi.n	801f6f8 <_fopen_r+0x14>
 801f76e:	89a3      	ldrh	r3, [r4, #12]
 801f770:	059b      	lsls	r3, r3, #22
 801f772:	d4c1      	bmi.n	801f6f8 <_fopen_r+0x14>
 801f774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f776:	f000 faec 	bl	801fd52 <__retarget_lock_release_recursive>
 801f77a:	e7bd      	b.n	801f6f8 <_fopen_r+0x14>
 801f77c:	08020201 	.word	0x08020201
 801f780:	08020227 	.word	0x08020227
 801f784:	0802025f 	.word	0x0802025f
 801f788:	08020283 	.word	0x08020283

0801f78c <fopen>:
 801f78c:	4b02      	ldr	r3, [pc, #8]	; (801f798 <fopen+0xc>)
 801f78e:	460a      	mov	r2, r1
 801f790:	4601      	mov	r1, r0
 801f792:	6818      	ldr	r0, [r3, #0]
 801f794:	f7ff bfa6 	b.w	801f6e4 <_fopen_r>
 801f798:	20000108 	.word	0x20000108

0801f79c <_fputs_r>:
 801f79c:	b570      	push	{r4, r5, r6, lr}
 801f79e:	460e      	mov	r6, r1
 801f7a0:	4614      	mov	r4, r2
 801f7a2:	4605      	mov	r5, r0
 801f7a4:	b118      	cbz	r0, 801f7ae <_fputs_r+0x12>
 801f7a6:	6983      	ldr	r3, [r0, #24]
 801f7a8:	b90b      	cbnz	r3, 801f7ae <_fputs_r+0x12>
 801f7aa:	f7ff ff1d 	bl	801f5e8 <__sinit>
 801f7ae:	4b2b      	ldr	r3, [pc, #172]	; (801f85c <_fputs_r+0xc0>)
 801f7b0:	429c      	cmp	r4, r3
 801f7b2:	d11e      	bne.n	801f7f2 <_fputs_r+0x56>
 801f7b4:	686c      	ldr	r4, [r5, #4]
 801f7b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f7b8:	07da      	lsls	r2, r3, #31
 801f7ba:	d405      	bmi.n	801f7c8 <_fputs_r+0x2c>
 801f7bc:	89a3      	ldrh	r3, [r4, #12]
 801f7be:	059b      	lsls	r3, r3, #22
 801f7c0:	d402      	bmi.n	801f7c8 <_fputs_r+0x2c>
 801f7c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7c4:	f000 fac3 	bl	801fd4e <__retarget_lock_acquire_recursive>
 801f7c8:	89a3      	ldrh	r3, [r4, #12]
 801f7ca:	0718      	lsls	r0, r3, #28
 801f7cc:	d51b      	bpl.n	801f806 <_fputs_r+0x6a>
 801f7ce:	6923      	ldr	r3, [r4, #16]
 801f7d0:	b1cb      	cbz	r3, 801f806 <_fputs_r+0x6a>
 801f7d2:	3e01      	subs	r6, #1
 801f7d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f7d8:	bb39      	cbnz	r1, 801f82a <_fputs_r+0x8e>
 801f7da:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801f7dc:	f015 0501 	ands.w	r5, r5, #1
 801f7e0:	d139      	bne.n	801f856 <_fputs_r+0xba>
 801f7e2:	89a3      	ldrh	r3, [r4, #12]
 801f7e4:	0599      	lsls	r1, r3, #22
 801f7e6:	d402      	bmi.n	801f7ee <_fputs_r+0x52>
 801f7e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7ea:	f000 fab2 	bl	801fd52 <__retarget_lock_release_recursive>
 801f7ee:	4628      	mov	r0, r5
 801f7f0:	bd70      	pop	{r4, r5, r6, pc}
 801f7f2:	4b1b      	ldr	r3, [pc, #108]	; (801f860 <_fputs_r+0xc4>)
 801f7f4:	429c      	cmp	r4, r3
 801f7f6:	d101      	bne.n	801f7fc <_fputs_r+0x60>
 801f7f8:	68ac      	ldr	r4, [r5, #8]
 801f7fa:	e7dc      	b.n	801f7b6 <_fputs_r+0x1a>
 801f7fc:	4b19      	ldr	r3, [pc, #100]	; (801f864 <_fputs_r+0xc8>)
 801f7fe:	429c      	cmp	r4, r3
 801f800:	bf08      	it	eq
 801f802:	68ec      	ldreq	r4, [r5, #12]
 801f804:	e7d7      	b.n	801f7b6 <_fputs_r+0x1a>
 801f806:	4621      	mov	r1, r4
 801f808:	4628      	mov	r0, r5
 801f80a:	f001 fe9f 	bl	802154c <__swsetup_r>
 801f80e:	2800      	cmp	r0, #0
 801f810:	d0df      	beq.n	801f7d2 <_fputs_r+0x36>
 801f812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f814:	07da      	lsls	r2, r3, #31
 801f816:	d405      	bmi.n	801f824 <_fputs_r+0x88>
 801f818:	89a3      	ldrh	r3, [r4, #12]
 801f81a:	059b      	lsls	r3, r3, #22
 801f81c:	d402      	bmi.n	801f824 <_fputs_r+0x88>
 801f81e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f820:	f000 fa97 	bl	801fd52 <__retarget_lock_release_recursive>
 801f824:	f04f 35ff 	mov.w	r5, #4294967295
 801f828:	e7e1      	b.n	801f7ee <_fputs_r+0x52>
 801f82a:	68a3      	ldr	r3, [r4, #8]
 801f82c:	3b01      	subs	r3, #1
 801f82e:	2b00      	cmp	r3, #0
 801f830:	60a3      	str	r3, [r4, #8]
 801f832:	da04      	bge.n	801f83e <_fputs_r+0xa2>
 801f834:	69a2      	ldr	r2, [r4, #24]
 801f836:	4293      	cmp	r3, r2
 801f838:	db06      	blt.n	801f848 <_fputs_r+0xac>
 801f83a:	290a      	cmp	r1, #10
 801f83c:	d004      	beq.n	801f848 <_fputs_r+0xac>
 801f83e:	6823      	ldr	r3, [r4, #0]
 801f840:	1c5a      	adds	r2, r3, #1
 801f842:	6022      	str	r2, [r4, #0]
 801f844:	7019      	strb	r1, [r3, #0]
 801f846:	e7c5      	b.n	801f7d4 <_fputs_r+0x38>
 801f848:	4622      	mov	r2, r4
 801f84a:	4628      	mov	r0, r5
 801f84c:	f001 fe1a 	bl	8021484 <__swbuf_r>
 801f850:	3001      	adds	r0, #1
 801f852:	d1bf      	bne.n	801f7d4 <_fputs_r+0x38>
 801f854:	e7dd      	b.n	801f812 <_fputs_r+0x76>
 801f856:	460d      	mov	r5, r1
 801f858:	e7c9      	b.n	801f7ee <_fputs_r+0x52>
 801f85a:	bf00      	nop
 801f85c:	08028d64 	.word	0x08028d64
 801f860:	08028d84 	.word	0x08028d84
 801f864:	08028d44 	.word	0x08028d44

0801f868 <fputs>:
 801f868:	4b02      	ldr	r3, [pc, #8]	; (801f874 <fputs+0xc>)
 801f86a:	460a      	mov	r2, r1
 801f86c:	4601      	mov	r1, r0
 801f86e:	6818      	ldr	r0, [r3, #0]
 801f870:	f7ff bf94 	b.w	801f79c <_fputs_r>
 801f874:	20000108 	.word	0x20000108

0801f878 <_fseek_r>:
 801f878:	f000 b800 	b.w	801f87c <_fseeko_r>

0801f87c <_fseeko_r>:
 801f87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f880:	460c      	mov	r4, r1
 801f882:	4617      	mov	r7, r2
 801f884:	461e      	mov	r6, r3
 801f886:	4605      	mov	r5, r0
 801f888:	b118      	cbz	r0, 801f892 <_fseeko_r+0x16>
 801f88a:	6983      	ldr	r3, [r0, #24]
 801f88c:	b90b      	cbnz	r3, 801f892 <_fseeko_r+0x16>
 801f88e:	f7ff feab 	bl	801f5e8 <__sinit>
 801f892:	4b44      	ldr	r3, [pc, #272]	; (801f9a4 <_fseeko_r+0x128>)
 801f894:	429c      	cmp	r4, r3
 801f896:	d122      	bne.n	801f8de <_fseeko_r+0x62>
 801f898:	686c      	ldr	r4, [r5, #4]
 801f89a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f89c:	07d9      	lsls	r1, r3, #31
 801f89e:	d405      	bmi.n	801f8ac <_fseeko_r+0x30>
 801f8a0:	89a3      	ldrh	r3, [r4, #12]
 801f8a2:	059a      	lsls	r2, r3, #22
 801f8a4:	d402      	bmi.n	801f8ac <_fseeko_r+0x30>
 801f8a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f8a8:	f000 fa51 	bl	801fd4e <__retarget_lock_acquire_recursive>
 801f8ac:	89a3      	ldrh	r3, [r4, #12]
 801f8ae:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801f8b2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801f8b6:	d103      	bne.n	801f8c0 <_fseeko_r+0x44>
 801f8b8:	4621      	mov	r1, r4
 801f8ba:	4628      	mov	r0, r5
 801f8bc:	f7ff fdee 	bl	801f49c <_fflush_r>
 801f8c0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801f8c4:	f1b8 0f00 	cmp.w	r8, #0
 801f8c8:	d113      	bne.n	801f8f2 <_fseeko_r+0x76>
 801f8ca:	231d      	movs	r3, #29
 801f8cc:	602b      	str	r3, [r5, #0]
 801f8ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f8d0:	07d9      	lsls	r1, r3, #31
 801f8d2:	d55d      	bpl.n	801f990 <_fseeko_r+0x114>
 801f8d4:	f04f 36ff 	mov.w	r6, #4294967295
 801f8d8:	4630      	mov	r0, r6
 801f8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8de:	4b32      	ldr	r3, [pc, #200]	; (801f9a8 <_fseeko_r+0x12c>)
 801f8e0:	429c      	cmp	r4, r3
 801f8e2:	d101      	bne.n	801f8e8 <_fseeko_r+0x6c>
 801f8e4:	68ac      	ldr	r4, [r5, #8]
 801f8e6:	e7d8      	b.n	801f89a <_fseeko_r+0x1e>
 801f8e8:	4b30      	ldr	r3, [pc, #192]	; (801f9ac <_fseeko_r+0x130>)
 801f8ea:	429c      	cmp	r4, r3
 801f8ec:	bf08      	it	eq
 801f8ee:	68ec      	ldreq	r4, [r5, #12]
 801f8f0:	e7d3      	b.n	801f89a <_fseeko_r+0x1e>
 801f8f2:	2e01      	cmp	r6, #1
 801f8f4:	d036      	beq.n	801f964 <_fseeko_r+0xe8>
 801f8f6:	f036 0302 	bics.w	r3, r6, #2
 801f8fa:	d147      	bne.n	801f98c <_fseeko_r+0x110>
 801f8fc:	6923      	ldr	r3, [r4, #16]
 801f8fe:	b91b      	cbnz	r3, 801f908 <_fseeko_r+0x8c>
 801f900:	4621      	mov	r1, r4
 801f902:	4628      	mov	r0, r5
 801f904:	f000 fa4a 	bl	801fd9c <__smakebuf_r>
 801f908:	4621      	mov	r1, r4
 801f90a:	4628      	mov	r0, r5
 801f90c:	f7ff fdc6 	bl	801f49c <_fflush_r>
 801f910:	2800      	cmp	r0, #0
 801f912:	d1dc      	bne.n	801f8ce <_fseeko_r+0x52>
 801f914:	6a21      	ldr	r1, [r4, #32]
 801f916:	4633      	mov	r3, r6
 801f918:	463a      	mov	r2, r7
 801f91a:	4628      	mov	r0, r5
 801f91c:	47c0      	blx	r8
 801f91e:	3001      	adds	r0, #1
 801f920:	d0d5      	beq.n	801f8ce <_fseeko_r+0x52>
 801f922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f924:	b141      	cbz	r1, 801f938 <_fseeko_r+0xbc>
 801f926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f92a:	4299      	cmp	r1, r3
 801f92c:	d002      	beq.n	801f934 <_fseeko_r+0xb8>
 801f92e:	4628      	mov	r0, r5
 801f930:	f000 faaa 	bl	801fe88 <_free_r>
 801f934:	2300      	movs	r3, #0
 801f936:	6363      	str	r3, [r4, #52]	; 0x34
 801f938:	6923      	ldr	r3, [r4, #16]
 801f93a:	6023      	str	r3, [r4, #0]
 801f93c:	89a3      	ldrh	r3, [r4, #12]
 801f93e:	2500      	movs	r5, #0
 801f940:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801f944:	6065      	str	r5, [r4, #4]
 801f946:	81a3      	strh	r3, [r4, #12]
 801f948:	2208      	movs	r2, #8
 801f94a:	4629      	mov	r1, r5
 801f94c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f950:	f000 fa82 	bl	801fe58 <memset>
 801f954:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801f956:	f016 0601 	ands.w	r6, r6, #1
 801f95a:	d120      	bne.n	801f99e <_fseeko_r+0x122>
 801f95c:	89a3      	ldrh	r3, [r4, #12]
 801f95e:	059b      	lsls	r3, r3, #22
 801f960:	d4ba      	bmi.n	801f8d8 <_fseeko_r+0x5c>
 801f962:	e00c      	b.n	801f97e <_fseeko_r+0x102>
 801f964:	4621      	mov	r1, r4
 801f966:	4628      	mov	r0, r5
 801f968:	f000 f822 	bl	801f9b0 <_ftello_r>
 801f96c:	1c43      	adds	r3, r0, #1
 801f96e:	4606      	mov	r6, r0
 801f970:	d109      	bne.n	801f986 <_fseeko_r+0x10a>
 801f972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f974:	07dd      	lsls	r5, r3, #31
 801f976:	d4ad      	bmi.n	801f8d4 <_fseeko_r+0x58>
 801f978:	89a3      	ldrh	r3, [r4, #12]
 801f97a:	0598      	lsls	r0, r3, #22
 801f97c:	d4aa      	bmi.n	801f8d4 <_fseeko_r+0x58>
 801f97e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f980:	f000 f9e7 	bl	801fd52 <__retarget_lock_release_recursive>
 801f984:	e7a8      	b.n	801f8d8 <_fseeko_r+0x5c>
 801f986:	4407      	add	r7, r0
 801f988:	2600      	movs	r6, #0
 801f98a:	e7b7      	b.n	801f8fc <_fseeko_r+0x80>
 801f98c:	2316      	movs	r3, #22
 801f98e:	e79d      	b.n	801f8cc <_fseeko_r+0x50>
 801f990:	89a3      	ldrh	r3, [r4, #12]
 801f992:	059a      	lsls	r2, r3, #22
 801f994:	d49e      	bmi.n	801f8d4 <_fseeko_r+0x58>
 801f996:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f998:	f000 f9db 	bl	801fd52 <__retarget_lock_release_recursive>
 801f99c:	e79a      	b.n	801f8d4 <_fseeko_r+0x58>
 801f99e:	462e      	mov	r6, r5
 801f9a0:	e79a      	b.n	801f8d8 <_fseeko_r+0x5c>
 801f9a2:	bf00      	nop
 801f9a4:	08028d64 	.word	0x08028d64
 801f9a8:	08028d84 	.word	0x08028d84
 801f9ac:	08028d44 	.word	0x08028d44

0801f9b0 <_ftello_r>:
 801f9b0:	b570      	push	{r4, r5, r6, lr}
 801f9b2:	460c      	mov	r4, r1
 801f9b4:	4605      	mov	r5, r0
 801f9b6:	b118      	cbz	r0, 801f9c0 <_ftello_r+0x10>
 801f9b8:	6983      	ldr	r3, [r0, #24]
 801f9ba:	b90b      	cbnz	r3, 801f9c0 <_ftello_r+0x10>
 801f9bc:	f7ff fe14 	bl	801f5e8 <__sinit>
 801f9c0:	4b32      	ldr	r3, [pc, #200]	; (801fa8c <_ftello_r+0xdc>)
 801f9c2:	429c      	cmp	r4, r3
 801f9c4:	d114      	bne.n	801f9f0 <_ftello_r+0x40>
 801f9c6:	686c      	ldr	r4, [r5, #4]
 801f9c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f9ca:	07da      	lsls	r2, r3, #31
 801f9cc:	d405      	bmi.n	801f9da <_ftello_r+0x2a>
 801f9ce:	89a3      	ldrh	r3, [r4, #12]
 801f9d0:	059b      	lsls	r3, r3, #22
 801f9d2:	d402      	bmi.n	801f9da <_ftello_r+0x2a>
 801f9d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f9d6:	f000 f9ba 	bl	801fd4e <__retarget_lock_acquire_recursive>
 801f9da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f9dc:	b9ce      	cbnz	r6, 801fa12 <_ftello_r+0x62>
 801f9de:	231d      	movs	r3, #29
 801f9e0:	602b      	str	r3, [r5, #0]
 801f9e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f9e4:	07de      	lsls	r6, r3, #31
 801f9e6:	d50d      	bpl.n	801fa04 <_ftello_r+0x54>
 801f9e8:	f04f 35ff 	mov.w	r5, #4294967295
 801f9ec:	4628      	mov	r0, r5
 801f9ee:	bd70      	pop	{r4, r5, r6, pc}
 801f9f0:	4b27      	ldr	r3, [pc, #156]	; (801fa90 <_ftello_r+0xe0>)
 801f9f2:	429c      	cmp	r4, r3
 801f9f4:	d101      	bne.n	801f9fa <_ftello_r+0x4a>
 801f9f6:	68ac      	ldr	r4, [r5, #8]
 801f9f8:	e7e6      	b.n	801f9c8 <_ftello_r+0x18>
 801f9fa:	4b26      	ldr	r3, [pc, #152]	; (801fa94 <_ftello_r+0xe4>)
 801f9fc:	429c      	cmp	r4, r3
 801f9fe:	bf08      	it	eq
 801fa00:	68ec      	ldreq	r4, [r5, #12]
 801fa02:	e7e1      	b.n	801f9c8 <_ftello_r+0x18>
 801fa04:	89a3      	ldrh	r3, [r4, #12]
 801fa06:	059d      	lsls	r5, r3, #22
 801fa08:	d4ee      	bmi.n	801f9e8 <_ftello_r+0x38>
 801fa0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa0c:	f000 f9a1 	bl	801fd52 <__retarget_lock_release_recursive>
 801fa10:	e7ea      	b.n	801f9e8 <_ftello_r+0x38>
 801fa12:	89a2      	ldrh	r2, [r4, #12]
 801fa14:	f002 030c 	and.w	r3, r2, #12
 801fa18:	2b08      	cmp	r3, #8
 801fa1a:	d119      	bne.n	801fa50 <_ftello_r+0xa0>
 801fa1c:	6823      	ldr	r3, [r4, #0]
 801fa1e:	b1bb      	cbz	r3, 801fa50 <_ftello_r+0xa0>
 801fa20:	6921      	ldr	r1, [r4, #16]
 801fa22:	1a5b      	subs	r3, r3, r1
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	dd13      	ble.n	801fa50 <_ftello_r+0xa0>
 801fa28:	05d0      	lsls	r0, r2, #23
 801fa2a:	d511      	bpl.n	801fa50 <_ftello_r+0xa0>
 801fa2c:	2302      	movs	r3, #2
 801fa2e:	2200      	movs	r2, #0
 801fa30:	6a21      	ldr	r1, [r4, #32]
 801fa32:	4628      	mov	r0, r5
 801fa34:	47b0      	blx	r6
 801fa36:	1c41      	adds	r1, r0, #1
 801fa38:	4605      	mov	r5, r0
 801fa3a:	d10d      	bne.n	801fa58 <_ftello_r+0xa8>
 801fa3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa3e:	07da      	lsls	r2, r3, #31
 801fa40:	d4d2      	bmi.n	801f9e8 <_ftello_r+0x38>
 801fa42:	89a3      	ldrh	r3, [r4, #12]
 801fa44:	059b      	lsls	r3, r3, #22
 801fa46:	d4cf      	bmi.n	801f9e8 <_ftello_r+0x38>
 801fa48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa4a:	f000 f982 	bl	801fd52 <__retarget_lock_release_recursive>
 801fa4e:	e7cd      	b.n	801f9ec <_ftello_r+0x3c>
 801fa50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fa54:	d00f      	beq.n	801fa76 <_ftello_r+0xc6>
 801fa56:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801fa58:	89a2      	ldrh	r2, [r4, #12]
 801fa5a:	0756      	lsls	r6, r2, #29
 801fa5c:	d50d      	bpl.n	801fa7a <_ftello_r+0xca>
 801fa5e:	6863      	ldr	r3, [r4, #4]
 801fa60:	1aed      	subs	r5, r5, r3
 801fa62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fa64:	b10b      	cbz	r3, 801fa6a <_ftello_r+0xba>
 801fa66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fa68:	1aed      	subs	r5, r5, r3
 801fa6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa6c:	07d9      	lsls	r1, r3, #31
 801fa6e:	d4bd      	bmi.n	801f9ec <_ftello_r+0x3c>
 801fa70:	0593      	lsls	r3, r2, #22
 801fa72:	d4bb      	bmi.n	801f9ec <_ftello_r+0x3c>
 801fa74:	e7e8      	b.n	801fa48 <_ftello_r+0x98>
 801fa76:	2301      	movs	r3, #1
 801fa78:	e7da      	b.n	801fa30 <_ftello_r+0x80>
 801fa7a:	0710      	lsls	r0, r2, #28
 801fa7c:	d5f5      	bpl.n	801fa6a <_ftello_r+0xba>
 801fa7e:	6823      	ldr	r3, [r4, #0]
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	d0f2      	beq.n	801fa6a <_ftello_r+0xba>
 801fa84:	6921      	ldr	r1, [r4, #16]
 801fa86:	1a5b      	subs	r3, r3, r1
 801fa88:	441d      	add	r5, r3
 801fa8a:	e7ee      	b.n	801fa6a <_ftello_r+0xba>
 801fa8c:	08028d64 	.word	0x08028d64
 801fa90:	08028d84 	.word	0x08028d84
 801fa94:	08028d44 	.word	0x08028d44

0801fa98 <_fwalk_reent>:
 801fa98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fa9c:	4606      	mov	r6, r0
 801fa9e:	4688      	mov	r8, r1
 801faa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801faa4:	2700      	movs	r7, #0
 801faa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801faaa:	f1b9 0901 	subs.w	r9, r9, #1
 801faae:	d505      	bpl.n	801fabc <_fwalk_reent+0x24>
 801fab0:	6824      	ldr	r4, [r4, #0]
 801fab2:	2c00      	cmp	r4, #0
 801fab4:	d1f7      	bne.n	801faa6 <_fwalk_reent+0xe>
 801fab6:	4638      	mov	r0, r7
 801fab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fabc:	89ab      	ldrh	r3, [r5, #12]
 801fabe:	2b01      	cmp	r3, #1
 801fac0:	d907      	bls.n	801fad2 <_fwalk_reent+0x3a>
 801fac2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fac6:	3301      	adds	r3, #1
 801fac8:	d003      	beq.n	801fad2 <_fwalk_reent+0x3a>
 801faca:	4629      	mov	r1, r5
 801facc:	4630      	mov	r0, r6
 801face:	47c0      	blx	r8
 801fad0:	4307      	orrs	r7, r0
 801fad2:	3568      	adds	r5, #104	; 0x68
 801fad4:	e7e9      	b.n	801faaa <_fwalk_reent+0x12>
	...

0801fad8 <__libc_init_array>:
 801fad8:	b570      	push	{r4, r5, r6, lr}
 801fada:	4d0d      	ldr	r5, [pc, #52]	; (801fb10 <__libc_init_array+0x38>)
 801fadc:	4c0d      	ldr	r4, [pc, #52]	; (801fb14 <__libc_init_array+0x3c>)
 801fade:	1b64      	subs	r4, r4, r5
 801fae0:	10a4      	asrs	r4, r4, #2
 801fae2:	2600      	movs	r6, #0
 801fae4:	42a6      	cmp	r6, r4
 801fae6:	d109      	bne.n	801fafc <__libc_init_array+0x24>
 801fae8:	4d0b      	ldr	r5, [pc, #44]	; (801fb18 <__libc_init_array+0x40>)
 801faea:	4c0c      	ldr	r4, [pc, #48]	; (801fb1c <__libc_init_array+0x44>)
 801faec:	f003 f8d6 	bl	8022c9c <_init>
 801faf0:	1b64      	subs	r4, r4, r5
 801faf2:	10a4      	asrs	r4, r4, #2
 801faf4:	2600      	movs	r6, #0
 801faf6:	42a6      	cmp	r6, r4
 801faf8:	d105      	bne.n	801fb06 <__libc_init_array+0x2e>
 801fafa:	bd70      	pop	{r4, r5, r6, pc}
 801fafc:	f855 3b04 	ldr.w	r3, [r5], #4
 801fb00:	4798      	blx	r3
 801fb02:	3601      	adds	r6, #1
 801fb04:	e7ee      	b.n	801fae4 <__libc_init_array+0xc>
 801fb06:	f855 3b04 	ldr.w	r3, [r5], #4
 801fb0a:	4798      	blx	r3
 801fb0c:	3601      	adds	r6, #1
 801fb0e:	e7f2      	b.n	801faf6 <__libc_init_array+0x1e>
 801fb10:	0802933c 	.word	0x0802933c
 801fb14:	0802933c 	.word	0x0802933c
 801fb18:	0802933c 	.word	0x0802933c
 801fb1c:	0802934c 	.word	0x0802934c

0801fb20 <localtime>:
 801fb20:	b538      	push	{r3, r4, r5, lr}
 801fb22:	4b0b      	ldr	r3, [pc, #44]	; (801fb50 <localtime+0x30>)
 801fb24:	681d      	ldr	r5, [r3, #0]
 801fb26:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801fb28:	4604      	mov	r4, r0
 801fb2a:	b953      	cbnz	r3, 801fb42 <localtime+0x22>
 801fb2c:	2024      	movs	r0, #36	; 0x24
 801fb2e:	f000 f975 	bl	801fe1c <malloc>
 801fb32:	4602      	mov	r2, r0
 801fb34:	63e8      	str	r0, [r5, #60]	; 0x3c
 801fb36:	b920      	cbnz	r0, 801fb42 <localtime+0x22>
 801fb38:	4b06      	ldr	r3, [pc, #24]	; (801fb54 <localtime+0x34>)
 801fb3a:	4807      	ldr	r0, [pc, #28]	; (801fb58 <localtime+0x38>)
 801fb3c:	2132      	movs	r1, #50	; 0x32
 801fb3e:	f001 fdd9 	bl	80216f4 <__assert_func>
 801fb42:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801fb44:	4620      	mov	r0, r4
 801fb46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fb4a:	f000 b807 	b.w	801fb5c <localtime_r>
 801fb4e:	bf00      	nop
 801fb50:	20000108 	.word	0x20000108
 801fb54:	08028da8 	.word	0x08028da8
 801fb58:	08028dbf 	.word	0x08028dbf

0801fb5c <localtime_r>:
 801fb5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801fb60:	4607      	mov	r7, r0
 801fb62:	9101      	str	r1, [sp, #4]
 801fb64:	f001 fe90 	bl	8021888 <__gettzinfo>
 801fb68:	9901      	ldr	r1, [sp, #4]
 801fb6a:	4680      	mov	r8, r0
 801fb6c:	4638      	mov	r0, r7
 801fb6e:	f001 fe8f 	bl	8021890 <gmtime_r>
 801fb72:	6943      	ldr	r3, [r0, #20]
 801fb74:	079a      	lsls	r2, r3, #30
 801fb76:	4604      	mov	r4, r0
 801fb78:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801fb7c:	d105      	bne.n	801fb8a <localtime_r+0x2e>
 801fb7e:	2264      	movs	r2, #100	; 0x64
 801fb80:	fb96 f3f2 	sdiv	r3, r6, r2
 801fb84:	fb02 6313 	mls	r3, r2, r3, r6
 801fb88:	bb7b      	cbnz	r3, 801fbea <localtime_r+0x8e>
 801fb8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801fb8e:	fb96 f5f3 	sdiv	r5, r6, r3
 801fb92:	fb03 6515 	mls	r5, r3, r5, r6
 801fb96:	fab5 f585 	clz	r5, r5
 801fb9a:	096d      	lsrs	r5, r5, #5
 801fb9c:	4b68      	ldr	r3, [pc, #416]	; (801fd40 <localtime_r+0x1e4>)
 801fb9e:	2230      	movs	r2, #48	; 0x30
 801fba0:	fb02 3505 	mla	r5, r2, r5, r3
 801fba4:	f001 faa6 	bl	80210f4 <__tz_lock>
 801fba8:	f001 fab0 	bl	802110c <_tzset_unlocked>
 801fbac:	4b65      	ldr	r3, [pc, #404]	; (801fd44 <localtime_r+0x1e8>)
 801fbae:	681b      	ldr	r3, [r3, #0]
 801fbb0:	b353      	cbz	r3, 801fc08 <localtime_r+0xac>
 801fbb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fbb6:	42b3      	cmp	r3, r6
 801fbb8:	d119      	bne.n	801fbee <localtime_r+0x92>
 801fbba:	f8d8 1000 	ldr.w	r1, [r8]
 801fbbe:	e9d7 6700 	ldrd	r6, r7, [r7]
 801fbc2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801fbc6:	b9d1      	cbnz	r1, 801fbfe <localtime_r+0xa2>
 801fbc8:	4296      	cmp	r6, r2
 801fbca:	eb77 0303 	sbcs.w	r3, r7, r3
 801fbce:	da23      	bge.n	801fc18 <localtime_r+0xbc>
 801fbd0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801fbd4:	4296      	cmp	r6, r2
 801fbd6:	eb77 0303 	sbcs.w	r3, r7, r3
 801fbda:	bfb4      	ite	lt
 801fbdc:	2301      	movlt	r3, #1
 801fbde:	2300      	movge	r3, #0
 801fbe0:	6223      	str	r3, [r4, #32]
 801fbe2:	db1b      	blt.n	801fc1c <localtime_r+0xc0>
 801fbe4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801fbe8:	e01a      	b.n	801fc20 <localtime_r+0xc4>
 801fbea:	2501      	movs	r5, #1
 801fbec:	e7d6      	b.n	801fb9c <localtime_r+0x40>
 801fbee:	4630      	mov	r0, r6
 801fbf0:	f001 f9d8 	bl	8020fa4 <__tzcalc_limits>
 801fbf4:	2800      	cmp	r0, #0
 801fbf6:	d1e0      	bne.n	801fbba <localtime_r+0x5e>
 801fbf8:	f04f 33ff 	mov.w	r3, #4294967295
 801fbfc:	e004      	b.n	801fc08 <localtime_r+0xac>
 801fbfe:	4296      	cmp	r6, r2
 801fc00:	eb77 0303 	sbcs.w	r3, r7, r3
 801fc04:	da02      	bge.n	801fc0c <localtime_r+0xb0>
 801fc06:	2300      	movs	r3, #0
 801fc08:	6223      	str	r3, [r4, #32]
 801fc0a:	e7eb      	b.n	801fbe4 <localtime_r+0x88>
 801fc0c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801fc10:	4296      	cmp	r6, r2
 801fc12:	eb77 0303 	sbcs.w	r3, r7, r3
 801fc16:	daf6      	bge.n	801fc06 <localtime_r+0xaa>
 801fc18:	2301      	movs	r3, #1
 801fc1a:	6223      	str	r3, [r4, #32]
 801fc1c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801fc20:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801fc24:	203c      	movs	r0, #60	; 0x3c
 801fc26:	fb91 f6f3 	sdiv	r6, r1, r3
 801fc2a:	fb03 1316 	mls	r3, r3, r6, r1
 801fc2e:	6861      	ldr	r1, [r4, #4]
 801fc30:	fb93 f2f0 	sdiv	r2, r3, r0
 801fc34:	fb00 3012 	mls	r0, r0, r2, r3
 801fc38:	6823      	ldr	r3, [r4, #0]
 801fc3a:	1a89      	subs	r1, r1, r2
 801fc3c:	68a2      	ldr	r2, [r4, #8]
 801fc3e:	6061      	str	r1, [r4, #4]
 801fc40:	1a1b      	subs	r3, r3, r0
 801fc42:	1b92      	subs	r2, r2, r6
 801fc44:	2b3b      	cmp	r3, #59	; 0x3b
 801fc46:	6023      	str	r3, [r4, #0]
 801fc48:	60a2      	str	r2, [r4, #8]
 801fc4a:	dd35      	ble.n	801fcb8 <localtime_r+0x15c>
 801fc4c:	3101      	adds	r1, #1
 801fc4e:	6061      	str	r1, [r4, #4]
 801fc50:	3b3c      	subs	r3, #60	; 0x3c
 801fc52:	6023      	str	r3, [r4, #0]
 801fc54:	6863      	ldr	r3, [r4, #4]
 801fc56:	2b3b      	cmp	r3, #59	; 0x3b
 801fc58:	dd34      	ble.n	801fcc4 <localtime_r+0x168>
 801fc5a:	3201      	adds	r2, #1
 801fc5c:	60a2      	str	r2, [r4, #8]
 801fc5e:	3b3c      	subs	r3, #60	; 0x3c
 801fc60:	6063      	str	r3, [r4, #4]
 801fc62:	68a3      	ldr	r3, [r4, #8]
 801fc64:	2b17      	cmp	r3, #23
 801fc66:	dd33      	ble.n	801fcd0 <localtime_r+0x174>
 801fc68:	69e2      	ldr	r2, [r4, #28]
 801fc6a:	3201      	adds	r2, #1
 801fc6c:	61e2      	str	r2, [r4, #28]
 801fc6e:	69a2      	ldr	r2, [r4, #24]
 801fc70:	3201      	adds	r2, #1
 801fc72:	2a06      	cmp	r2, #6
 801fc74:	bfc8      	it	gt
 801fc76:	2200      	movgt	r2, #0
 801fc78:	61a2      	str	r2, [r4, #24]
 801fc7a:	68e2      	ldr	r2, [r4, #12]
 801fc7c:	3b18      	subs	r3, #24
 801fc7e:	3201      	adds	r2, #1
 801fc80:	60a3      	str	r3, [r4, #8]
 801fc82:	6923      	ldr	r3, [r4, #16]
 801fc84:	60e2      	str	r2, [r4, #12]
 801fc86:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801fc8a:	428a      	cmp	r2, r1
 801fc8c:	dd0e      	ble.n	801fcac <localtime_r+0x150>
 801fc8e:	2b0b      	cmp	r3, #11
 801fc90:	eba2 0201 	sub.w	r2, r2, r1
 801fc94:	60e2      	str	r2, [r4, #12]
 801fc96:	f103 0201 	add.w	r2, r3, #1
 801fc9a:	bf09      	itett	eq
 801fc9c:	6963      	ldreq	r3, [r4, #20]
 801fc9e:	6122      	strne	r2, [r4, #16]
 801fca0:	2200      	moveq	r2, #0
 801fca2:	3301      	addeq	r3, #1
 801fca4:	bf02      	ittt	eq
 801fca6:	6122      	streq	r2, [r4, #16]
 801fca8:	6163      	streq	r3, [r4, #20]
 801fcaa:	61e2      	streq	r2, [r4, #28]
 801fcac:	f001 fa28 	bl	8021100 <__tz_unlock>
 801fcb0:	4620      	mov	r0, r4
 801fcb2:	b002      	add	sp, #8
 801fcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	dacb      	bge.n	801fc54 <localtime_r+0xf8>
 801fcbc:	3901      	subs	r1, #1
 801fcbe:	6061      	str	r1, [r4, #4]
 801fcc0:	333c      	adds	r3, #60	; 0x3c
 801fcc2:	e7c6      	b.n	801fc52 <localtime_r+0xf6>
 801fcc4:	2b00      	cmp	r3, #0
 801fcc6:	dacc      	bge.n	801fc62 <localtime_r+0x106>
 801fcc8:	3a01      	subs	r2, #1
 801fcca:	60a2      	str	r2, [r4, #8]
 801fccc:	333c      	adds	r3, #60	; 0x3c
 801fcce:	e7c7      	b.n	801fc60 <localtime_r+0x104>
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	daeb      	bge.n	801fcac <localtime_r+0x150>
 801fcd4:	69e2      	ldr	r2, [r4, #28]
 801fcd6:	3a01      	subs	r2, #1
 801fcd8:	61e2      	str	r2, [r4, #28]
 801fcda:	69a2      	ldr	r2, [r4, #24]
 801fcdc:	3a01      	subs	r2, #1
 801fcde:	bf48      	it	mi
 801fce0:	2206      	movmi	r2, #6
 801fce2:	61a2      	str	r2, [r4, #24]
 801fce4:	68e2      	ldr	r2, [r4, #12]
 801fce6:	3318      	adds	r3, #24
 801fce8:	3a01      	subs	r2, #1
 801fcea:	60e2      	str	r2, [r4, #12]
 801fcec:	60a3      	str	r3, [r4, #8]
 801fcee:	2a00      	cmp	r2, #0
 801fcf0:	d1dc      	bne.n	801fcac <localtime_r+0x150>
 801fcf2:	6923      	ldr	r3, [r4, #16]
 801fcf4:	3b01      	subs	r3, #1
 801fcf6:	d405      	bmi.n	801fd04 <localtime_r+0x1a8>
 801fcf8:	6123      	str	r3, [r4, #16]
 801fcfa:	6923      	ldr	r3, [r4, #16]
 801fcfc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fd00:	60e3      	str	r3, [r4, #12]
 801fd02:	e7d3      	b.n	801fcac <localtime_r+0x150>
 801fd04:	230b      	movs	r3, #11
 801fd06:	6123      	str	r3, [r4, #16]
 801fd08:	6963      	ldr	r3, [r4, #20]
 801fd0a:	1e5a      	subs	r2, r3, #1
 801fd0c:	6162      	str	r2, [r4, #20]
 801fd0e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801fd12:	0793      	lsls	r3, r2, #30
 801fd14:	d105      	bne.n	801fd22 <localtime_r+0x1c6>
 801fd16:	2164      	movs	r1, #100	; 0x64
 801fd18:	fb92 f3f1 	sdiv	r3, r2, r1
 801fd1c:	fb01 2313 	mls	r3, r1, r3, r2
 801fd20:	b963      	cbnz	r3, 801fd3c <localtime_r+0x1e0>
 801fd22:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801fd26:	fb92 f3f1 	sdiv	r3, r2, r1
 801fd2a:	fb01 2313 	mls	r3, r1, r3, r2
 801fd2e:	fab3 f383 	clz	r3, r3
 801fd32:	095b      	lsrs	r3, r3, #5
 801fd34:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801fd38:	61e3      	str	r3, [r4, #28]
 801fd3a:	e7de      	b.n	801fcfa <localtime_r+0x19e>
 801fd3c:	2301      	movs	r3, #1
 801fd3e:	e7f9      	b.n	801fd34 <localtime_r+0x1d8>
 801fd40:	08028e20 	.word	0x08028e20
 801fd44:	20000eec 	.word	0x20000eec

0801fd48 <__retarget_lock_init_recursive>:
 801fd48:	4770      	bx	lr

0801fd4a <__retarget_lock_close_recursive>:
 801fd4a:	4770      	bx	lr

0801fd4c <__retarget_lock_acquire>:
 801fd4c:	4770      	bx	lr

0801fd4e <__retarget_lock_acquire_recursive>:
 801fd4e:	4770      	bx	lr

0801fd50 <__retarget_lock_release>:
 801fd50:	4770      	bx	lr

0801fd52 <__retarget_lock_release_recursive>:
 801fd52:	4770      	bx	lr

0801fd54 <__swhatbuf_r>:
 801fd54:	b570      	push	{r4, r5, r6, lr}
 801fd56:	460e      	mov	r6, r1
 801fd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd5c:	2900      	cmp	r1, #0
 801fd5e:	b096      	sub	sp, #88	; 0x58
 801fd60:	4614      	mov	r4, r2
 801fd62:	461d      	mov	r5, r3
 801fd64:	da07      	bge.n	801fd76 <__swhatbuf_r+0x22>
 801fd66:	2300      	movs	r3, #0
 801fd68:	602b      	str	r3, [r5, #0]
 801fd6a:	89b3      	ldrh	r3, [r6, #12]
 801fd6c:	061a      	lsls	r2, r3, #24
 801fd6e:	d410      	bmi.n	801fd92 <__swhatbuf_r+0x3e>
 801fd70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fd74:	e00e      	b.n	801fd94 <__swhatbuf_r+0x40>
 801fd76:	466a      	mov	r2, sp
 801fd78:	f001 fd32 	bl	80217e0 <_fstat_r>
 801fd7c:	2800      	cmp	r0, #0
 801fd7e:	dbf2      	blt.n	801fd66 <__swhatbuf_r+0x12>
 801fd80:	9a01      	ldr	r2, [sp, #4]
 801fd82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fd86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fd8a:	425a      	negs	r2, r3
 801fd8c:	415a      	adcs	r2, r3
 801fd8e:	602a      	str	r2, [r5, #0]
 801fd90:	e7ee      	b.n	801fd70 <__swhatbuf_r+0x1c>
 801fd92:	2340      	movs	r3, #64	; 0x40
 801fd94:	2000      	movs	r0, #0
 801fd96:	6023      	str	r3, [r4, #0]
 801fd98:	b016      	add	sp, #88	; 0x58
 801fd9a:	bd70      	pop	{r4, r5, r6, pc}

0801fd9c <__smakebuf_r>:
 801fd9c:	898b      	ldrh	r3, [r1, #12]
 801fd9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fda0:	079d      	lsls	r5, r3, #30
 801fda2:	4606      	mov	r6, r0
 801fda4:	460c      	mov	r4, r1
 801fda6:	d507      	bpl.n	801fdb8 <__smakebuf_r+0x1c>
 801fda8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fdac:	6023      	str	r3, [r4, #0]
 801fdae:	6123      	str	r3, [r4, #16]
 801fdb0:	2301      	movs	r3, #1
 801fdb2:	6163      	str	r3, [r4, #20]
 801fdb4:	b002      	add	sp, #8
 801fdb6:	bd70      	pop	{r4, r5, r6, pc}
 801fdb8:	ab01      	add	r3, sp, #4
 801fdba:	466a      	mov	r2, sp
 801fdbc:	f7ff ffca 	bl	801fd54 <__swhatbuf_r>
 801fdc0:	9900      	ldr	r1, [sp, #0]
 801fdc2:	4605      	mov	r5, r0
 801fdc4:	4630      	mov	r0, r6
 801fdc6:	f000 f8af 	bl	801ff28 <_malloc_r>
 801fdca:	b948      	cbnz	r0, 801fde0 <__smakebuf_r+0x44>
 801fdcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fdd0:	059a      	lsls	r2, r3, #22
 801fdd2:	d4ef      	bmi.n	801fdb4 <__smakebuf_r+0x18>
 801fdd4:	f023 0303 	bic.w	r3, r3, #3
 801fdd8:	f043 0302 	orr.w	r3, r3, #2
 801fddc:	81a3      	strh	r3, [r4, #12]
 801fdde:	e7e3      	b.n	801fda8 <__smakebuf_r+0xc>
 801fde0:	4b0d      	ldr	r3, [pc, #52]	; (801fe18 <__smakebuf_r+0x7c>)
 801fde2:	62b3      	str	r3, [r6, #40]	; 0x28
 801fde4:	89a3      	ldrh	r3, [r4, #12]
 801fde6:	6020      	str	r0, [r4, #0]
 801fde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fdec:	81a3      	strh	r3, [r4, #12]
 801fdee:	9b00      	ldr	r3, [sp, #0]
 801fdf0:	6163      	str	r3, [r4, #20]
 801fdf2:	9b01      	ldr	r3, [sp, #4]
 801fdf4:	6120      	str	r0, [r4, #16]
 801fdf6:	b15b      	cbz	r3, 801fe10 <__smakebuf_r+0x74>
 801fdf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fdfc:	4630      	mov	r0, r6
 801fdfe:	f001 fdf7 	bl	80219f0 <_isatty_r>
 801fe02:	b128      	cbz	r0, 801fe10 <__smakebuf_r+0x74>
 801fe04:	89a3      	ldrh	r3, [r4, #12]
 801fe06:	f023 0303 	bic.w	r3, r3, #3
 801fe0a:	f043 0301 	orr.w	r3, r3, #1
 801fe0e:	81a3      	strh	r3, [r4, #12]
 801fe10:	89a0      	ldrh	r0, [r4, #12]
 801fe12:	4305      	orrs	r5, r0
 801fe14:	81a5      	strh	r5, [r4, #12]
 801fe16:	e7cd      	b.n	801fdb4 <__smakebuf_r+0x18>
 801fe18:	0801f581 	.word	0x0801f581

0801fe1c <malloc>:
 801fe1c:	4b02      	ldr	r3, [pc, #8]	; (801fe28 <malloc+0xc>)
 801fe1e:	4601      	mov	r1, r0
 801fe20:	6818      	ldr	r0, [r3, #0]
 801fe22:	f000 b881 	b.w	801ff28 <_malloc_r>
 801fe26:	bf00      	nop
 801fe28:	20000108 	.word	0x20000108

0801fe2c <free>:
 801fe2c:	4b02      	ldr	r3, [pc, #8]	; (801fe38 <free+0xc>)
 801fe2e:	4601      	mov	r1, r0
 801fe30:	6818      	ldr	r0, [r3, #0]
 801fe32:	f000 b829 	b.w	801fe88 <_free_r>
 801fe36:	bf00      	nop
 801fe38:	20000108 	.word	0x20000108

0801fe3c <memcpy>:
 801fe3c:	440a      	add	r2, r1
 801fe3e:	4291      	cmp	r1, r2
 801fe40:	f100 33ff 	add.w	r3, r0, #4294967295
 801fe44:	d100      	bne.n	801fe48 <memcpy+0xc>
 801fe46:	4770      	bx	lr
 801fe48:	b510      	push	{r4, lr}
 801fe4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fe4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fe52:	4291      	cmp	r1, r2
 801fe54:	d1f9      	bne.n	801fe4a <memcpy+0xe>
 801fe56:	bd10      	pop	{r4, pc}

0801fe58 <memset>:
 801fe58:	4402      	add	r2, r0
 801fe5a:	4603      	mov	r3, r0
 801fe5c:	4293      	cmp	r3, r2
 801fe5e:	d100      	bne.n	801fe62 <memset+0xa>
 801fe60:	4770      	bx	lr
 801fe62:	f803 1b01 	strb.w	r1, [r3], #1
 801fe66:	e7f9      	b.n	801fe5c <memset+0x4>

0801fe68 <_calloc_r>:
 801fe68:	b513      	push	{r0, r1, r4, lr}
 801fe6a:	434a      	muls	r2, r1
 801fe6c:	4611      	mov	r1, r2
 801fe6e:	9201      	str	r2, [sp, #4]
 801fe70:	f000 f85a 	bl	801ff28 <_malloc_r>
 801fe74:	4604      	mov	r4, r0
 801fe76:	b118      	cbz	r0, 801fe80 <_calloc_r+0x18>
 801fe78:	9a01      	ldr	r2, [sp, #4]
 801fe7a:	2100      	movs	r1, #0
 801fe7c:	f7ff ffec 	bl	801fe58 <memset>
 801fe80:	4620      	mov	r0, r4
 801fe82:	b002      	add	sp, #8
 801fe84:	bd10      	pop	{r4, pc}
	...

0801fe88 <_free_r>:
 801fe88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fe8a:	2900      	cmp	r1, #0
 801fe8c:	d048      	beq.n	801ff20 <_free_r+0x98>
 801fe8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fe92:	9001      	str	r0, [sp, #4]
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	f1a1 0404 	sub.w	r4, r1, #4
 801fe9a:	bfb8      	it	lt
 801fe9c:	18e4      	addlt	r4, r4, r3
 801fe9e:	f001 fddf 	bl	8021a60 <__malloc_lock>
 801fea2:	4a20      	ldr	r2, [pc, #128]	; (801ff24 <_free_r+0x9c>)
 801fea4:	9801      	ldr	r0, [sp, #4]
 801fea6:	6813      	ldr	r3, [r2, #0]
 801fea8:	4615      	mov	r5, r2
 801feaa:	b933      	cbnz	r3, 801feba <_free_r+0x32>
 801feac:	6063      	str	r3, [r4, #4]
 801feae:	6014      	str	r4, [r2, #0]
 801feb0:	b003      	add	sp, #12
 801feb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801feb6:	f001 bdd9 	b.w	8021a6c <__malloc_unlock>
 801feba:	42a3      	cmp	r3, r4
 801febc:	d90b      	bls.n	801fed6 <_free_r+0x4e>
 801febe:	6821      	ldr	r1, [r4, #0]
 801fec0:	1862      	adds	r2, r4, r1
 801fec2:	4293      	cmp	r3, r2
 801fec4:	bf04      	itt	eq
 801fec6:	681a      	ldreq	r2, [r3, #0]
 801fec8:	685b      	ldreq	r3, [r3, #4]
 801feca:	6063      	str	r3, [r4, #4]
 801fecc:	bf04      	itt	eq
 801fece:	1852      	addeq	r2, r2, r1
 801fed0:	6022      	streq	r2, [r4, #0]
 801fed2:	602c      	str	r4, [r5, #0]
 801fed4:	e7ec      	b.n	801feb0 <_free_r+0x28>
 801fed6:	461a      	mov	r2, r3
 801fed8:	685b      	ldr	r3, [r3, #4]
 801feda:	b10b      	cbz	r3, 801fee0 <_free_r+0x58>
 801fedc:	42a3      	cmp	r3, r4
 801fede:	d9fa      	bls.n	801fed6 <_free_r+0x4e>
 801fee0:	6811      	ldr	r1, [r2, #0]
 801fee2:	1855      	adds	r5, r2, r1
 801fee4:	42a5      	cmp	r5, r4
 801fee6:	d10b      	bne.n	801ff00 <_free_r+0x78>
 801fee8:	6824      	ldr	r4, [r4, #0]
 801feea:	4421      	add	r1, r4
 801feec:	1854      	adds	r4, r2, r1
 801feee:	42a3      	cmp	r3, r4
 801fef0:	6011      	str	r1, [r2, #0]
 801fef2:	d1dd      	bne.n	801feb0 <_free_r+0x28>
 801fef4:	681c      	ldr	r4, [r3, #0]
 801fef6:	685b      	ldr	r3, [r3, #4]
 801fef8:	6053      	str	r3, [r2, #4]
 801fefa:	4421      	add	r1, r4
 801fefc:	6011      	str	r1, [r2, #0]
 801fefe:	e7d7      	b.n	801feb0 <_free_r+0x28>
 801ff00:	d902      	bls.n	801ff08 <_free_r+0x80>
 801ff02:	230c      	movs	r3, #12
 801ff04:	6003      	str	r3, [r0, #0]
 801ff06:	e7d3      	b.n	801feb0 <_free_r+0x28>
 801ff08:	6825      	ldr	r5, [r4, #0]
 801ff0a:	1961      	adds	r1, r4, r5
 801ff0c:	428b      	cmp	r3, r1
 801ff0e:	bf04      	itt	eq
 801ff10:	6819      	ldreq	r1, [r3, #0]
 801ff12:	685b      	ldreq	r3, [r3, #4]
 801ff14:	6063      	str	r3, [r4, #4]
 801ff16:	bf04      	itt	eq
 801ff18:	1949      	addeq	r1, r1, r5
 801ff1a:	6021      	streq	r1, [r4, #0]
 801ff1c:	6054      	str	r4, [r2, #4]
 801ff1e:	e7c7      	b.n	801feb0 <_free_r+0x28>
 801ff20:	b003      	add	sp, #12
 801ff22:	bd30      	pop	{r4, r5, pc}
 801ff24:	20000ec8 	.word	0x20000ec8

0801ff28 <_malloc_r>:
 801ff28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff2a:	1ccd      	adds	r5, r1, #3
 801ff2c:	f025 0503 	bic.w	r5, r5, #3
 801ff30:	3508      	adds	r5, #8
 801ff32:	2d0c      	cmp	r5, #12
 801ff34:	bf38      	it	cc
 801ff36:	250c      	movcc	r5, #12
 801ff38:	2d00      	cmp	r5, #0
 801ff3a:	4606      	mov	r6, r0
 801ff3c:	db01      	blt.n	801ff42 <_malloc_r+0x1a>
 801ff3e:	42a9      	cmp	r1, r5
 801ff40:	d903      	bls.n	801ff4a <_malloc_r+0x22>
 801ff42:	230c      	movs	r3, #12
 801ff44:	6033      	str	r3, [r6, #0]
 801ff46:	2000      	movs	r0, #0
 801ff48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff4a:	f001 fd89 	bl	8021a60 <__malloc_lock>
 801ff4e:	4921      	ldr	r1, [pc, #132]	; (801ffd4 <_malloc_r+0xac>)
 801ff50:	680a      	ldr	r2, [r1, #0]
 801ff52:	4614      	mov	r4, r2
 801ff54:	b99c      	cbnz	r4, 801ff7e <_malloc_r+0x56>
 801ff56:	4f20      	ldr	r7, [pc, #128]	; (801ffd8 <_malloc_r+0xb0>)
 801ff58:	683b      	ldr	r3, [r7, #0]
 801ff5a:	b923      	cbnz	r3, 801ff66 <_malloc_r+0x3e>
 801ff5c:	4621      	mov	r1, r4
 801ff5e:	4630      	mov	r0, r6
 801ff60:	f000 f8da 	bl	8020118 <_sbrk_r>
 801ff64:	6038      	str	r0, [r7, #0]
 801ff66:	4629      	mov	r1, r5
 801ff68:	4630      	mov	r0, r6
 801ff6a:	f000 f8d5 	bl	8020118 <_sbrk_r>
 801ff6e:	1c43      	adds	r3, r0, #1
 801ff70:	d123      	bne.n	801ffba <_malloc_r+0x92>
 801ff72:	230c      	movs	r3, #12
 801ff74:	6033      	str	r3, [r6, #0]
 801ff76:	4630      	mov	r0, r6
 801ff78:	f001 fd78 	bl	8021a6c <__malloc_unlock>
 801ff7c:	e7e3      	b.n	801ff46 <_malloc_r+0x1e>
 801ff7e:	6823      	ldr	r3, [r4, #0]
 801ff80:	1b5b      	subs	r3, r3, r5
 801ff82:	d417      	bmi.n	801ffb4 <_malloc_r+0x8c>
 801ff84:	2b0b      	cmp	r3, #11
 801ff86:	d903      	bls.n	801ff90 <_malloc_r+0x68>
 801ff88:	6023      	str	r3, [r4, #0]
 801ff8a:	441c      	add	r4, r3
 801ff8c:	6025      	str	r5, [r4, #0]
 801ff8e:	e004      	b.n	801ff9a <_malloc_r+0x72>
 801ff90:	6863      	ldr	r3, [r4, #4]
 801ff92:	42a2      	cmp	r2, r4
 801ff94:	bf0c      	ite	eq
 801ff96:	600b      	streq	r3, [r1, #0]
 801ff98:	6053      	strne	r3, [r2, #4]
 801ff9a:	4630      	mov	r0, r6
 801ff9c:	f001 fd66 	bl	8021a6c <__malloc_unlock>
 801ffa0:	f104 000b 	add.w	r0, r4, #11
 801ffa4:	1d23      	adds	r3, r4, #4
 801ffa6:	f020 0007 	bic.w	r0, r0, #7
 801ffaa:	1ac2      	subs	r2, r0, r3
 801ffac:	d0cc      	beq.n	801ff48 <_malloc_r+0x20>
 801ffae:	1a1b      	subs	r3, r3, r0
 801ffb0:	50a3      	str	r3, [r4, r2]
 801ffb2:	e7c9      	b.n	801ff48 <_malloc_r+0x20>
 801ffb4:	4622      	mov	r2, r4
 801ffb6:	6864      	ldr	r4, [r4, #4]
 801ffb8:	e7cc      	b.n	801ff54 <_malloc_r+0x2c>
 801ffba:	1cc4      	adds	r4, r0, #3
 801ffbc:	f024 0403 	bic.w	r4, r4, #3
 801ffc0:	42a0      	cmp	r0, r4
 801ffc2:	d0e3      	beq.n	801ff8c <_malloc_r+0x64>
 801ffc4:	1a21      	subs	r1, r4, r0
 801ffc6:	4630      	mov	r0, r6
 801ffc8:	f000 f8a6 	bl	8020118 <_sbrk_r>
 801ffcc:	3001      	adds	r0, #1
 801ffce:	d1dd      	bne.n	801ff8c <_malloc_r+0x64>
 801ffd0:	e7cf      	b.n	801ff72 <_malloc_r+0x4a>
 801ffd2:	bf00      	nop
 801ffd4:	20000ec8 	.word	0x20000ec8
 801ffd8:	20000ecc 	.word	0x20000ecc

0801ffdc <_open_r>:
 801ffdc:	b538      	push	{r3, r4, r5, lr}
 801ffde:	4d07      	ldr	r5, [pc, #28]	; (801fffc <_open_r+0x20>)
 801ffe0:	4604      	mov	r4, r0
 801ffe2:	4608      	mov	r0, r1
 801ffe4:	4611      	mov	r1, r2
 801ffe6:	2200      	movs	r2, #0
 801ffe8:	602a      	str	r2, [r5, #0]
 801ffea:	461a      	mov	r2, r3
 801ffec:	f7e0 ff36 	bl	8000e5c <_open>
 801fff0:	1c43      	adds	r3, r0, #1
 801fff2:	d102      	bne.n	801fffa <_open_r+0x1e>
 801fff4:	682b      	ldr	r3, [r5, #0]
 801fff6:	b103      	cbz	r3, 801fffa <_open_r+0x1e>
 801fff8:	6023      	str	r3, [r4, #0]
 801fffa:	bd38      	pop	{r3, r4, r5, pc}
 801fffc:	20000f94 	.word	0x20000f94

08020000 <putchar>:
 8020000:	4b09      	ldr	r3, [pc, #36]	; (8020028 <putchar+0x28>)
 8020002:	b513      	push	{r0, r1, r4, lr}
 8020004:	681c      	ldr	r4, [r3, #0]
 8020006:	4601      	mov	r1, r0
 8020008:	b134      	cbz	r4, 8020018 <putchar+0x18>
 802000a:	69a3      	ldr	r3, [r4, #24]
 802000c:	b923      	cbnz	r3, 8020018 <putchar+0x18>
 802000e:	9001      	str	r0, [sp, #4]
 8020010:	4620      	mov	r0, r4
 8020012:	f7ff fae9 	bl	801f5e8 <__sinit>
 8020016:	9901      	ldr	r1, [sp, #4]
 8020018:	68a2      	ldr	r2, [r4, #8]
 802001a:	4620      	mov	r0, r4
 802001c:	b002      	add	sp, #8
 802001e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020022:	f002 b999 	b.w	8022358 <_putc_r>
 8020026:	bf00      	nop
 8020028:	20000108 	.word	0x20000108

0802002c <srand>:
 802002c:	b538      	push	{r3, r4, r5, lr}
 802002e:	4b10      	ldr	r3, [pc, #64]	; (8020070 <srand+0x44>)
 8020030:	681d      	ldr	r5, [r3, #0]
 8020032:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020034:	4604      	mov	r4, r0
 8020036:	b9b3      	cbnz	r3, 8020066 <srand+0x3a>
 8020038:	2018      	movs	r0, #24
 802003a:	f7ff feef 	bl	801fe1c <malloc>
 802003e:	4602      	mov	r2, r0
 8020040:	63a8      	str	r0, [r5, #56]	; 0x38
 8020042:	b920      	cbnz	r0, 802004e <srand+0x22>
 8020044:	4b0b      	ldr	r3, [pc, #44]	; (8020074 <srand+0x48>)
 8020046:	480c      	ldr	r0, [pc, #48]	; (8020078 <srand+0x4c>)
 8020048:	2142      	movs	r1, #66	; 0x42
 802004a:	f001 fb53 	bl	80216f4 <__assert_func>
 802004e:	490b      	ldr	r1, [pc, #44]	; (802007c <srand+0x50>)
 8020050:	4b0b      	ldr	r3, [pc, #44]	; (8020080 <srand+0x54>)
 8020052:	e9c0 1300 	strd	r1, r3, [r0]
 8020056:	4b0b      	ldr	r3, [pc, #44]	; (8020084 <srand+0x58>)
 8020058:	6083      	str	r3, [r0, #8]
 802005a:	230b      	movs	r3, #11
 802005c:	8183      	strh	r3, [r0, #12]
 802005e:	2100      	movs	r1, #0
 8020060:	2001      	movs	r0, #1
 8020062:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020066:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020068:	2200      	movs	r2, #0
 802006a:	611c      	str	r4, [r3, #16]
 802006c:	615a      	str	r2, [r3, #20]
 802006e:	bd38      	pop	{r3, r4, r5, pc}
 8020070:	20000108 	.word	0x20000108
 8020074:	08028da8 	.word	0x08028da8
 8020078:	08028e80 	.word	0x08028e80
 802007c:	abcd330e 	.word	0xabcd330e
 8020080:	e66d1234 	.word	0xe66d1234
 8020084:	0005deec 	.word	0x0005deec

08020088 <rand>:
 8020088:	4b17      	ldr	r3, [pc, #92]	; (80200e8 <rand+0x60>)
 802008a:	b510      	push	{r4, lr}
 802008c:	681c      	ldr	r4, [r3, #0]
 802008e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020090:	b9b3      	cbnz	r3, 80200c0 <rand+0x38>
 8020092:	2018      	movs	r0, #24
 8020094:	f7ff fec2 	bl	801fe1c <malloc>
 8020098:	63a0      	str	r0, [r4, #56]	; 0x38
 802009a:	b928      	cbnz	r0, 80200a8 <rand+0x20>
 802009c:	4602      	mov	r2, r0
 802009e:	4b13      	ldr	r3, [pc, #76]	; (80200ec <rand+0x64>)
 80200a0:	4813      	ldr	r0, [pc, #76]	; (80200f0 <rand+0x68>)
 80200a2:	214e      	movs	r1, #78	; 0x4e
 80200a4:	f001 fb26 	bl	80216f4 <__assert_func>
 80200a8:	4a12      	ldr	r2, [pc, #72]	; (80200f4 <rand+0x6c>)
 80200aa:	4b13      	ldr	r3, [pc, #76]	; (80200f8 <rand+0x70>)
 80200ac:	e9c0 2300 	strd	r2, r3, [r0]
 80200b0:	4b12      	ldr	r3, [pc, #72]	; (80200fc <rand+0x74>)
 80200b2:	6083      	str	r3, [r0, #8]
 80200b4:	230b      	movs	r3, #11
 80200b6:	8183      	strh	r3, [r0, #12]
 80200b8:	2201      	movs	r2, #1
 80200ba:	2300      	movs	r3, #0
 80200bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80200c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80200c2:	480f      	ldr	r0, [pc, #60]	; (8020100 <rand+0x78>)
 80200c4:	690a      	ldr	r2, [r1, #16]
 80200c6:	694b      	ldr	r3, [r1, #20]
 80200c8:	4c0e      	ldr	r4, [pc, #56]	; (8020104 <rand+0x7c>)
 80200ca:	4350      	muls	r0, r2
 80200cc:	fb04 0003 	mla	r0, r4, r3, r0
 80200d0:	fba2 3404 	umull	r3, r4, r2, r4
 80200d4:	1c5a      	adds	r2, r3, #1
 80200d6:	4404      	add	r4, r0
 80200d8:	f144 0000 	adc.w	r0, r4, #0
 80200dc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80200e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80200e4:	bd10      	pop	{r4, pc}
 80200e6:	bf00      	nop
 80200e8:	20000108 	.word	0x20000108
 80200ec:	08028da8 	.word	0x08028da8
 80200f0:	08028e80 	.word	0x08028e80
 80200f4:	abcd330e 	.word	0xabcd330e
 80200f8:	e66d1234 	.word	0xe66d1234
 80200fc:	0005deec 	.word	0x0005deec
 8020100:	5851f42d 	.word	0x5851f42d
 8020104:	4c957f2d 	.word	0x4c957f2d

08020108 <realloc>:
 8020108:	4b02      	ldr	r3, [pc, #8]	; (8020114 <realloc+0xc>)
 802010a:	460a      	mov	r2, r1
 802010c:	4601      	mov	r1, r0
 802010e:	6818      	ldr	r0, [r3, #0]
 8020110:	f001 bcb2 	b.w	8021a78 <_realloc_r>
 8020114:	20000108 	.word	0x20000108

08020118 <_sbrk_r>:
 8020118:	b538      	push	{r3, r4, r5, lr}
 802011a:	4d06      	ldr	r5, [pc, #24]	; (8020134 <_sbrk_r+0x1c>)
 802011c:	2300      	movs	r3, #0
 802011e:	4604      	mov	r4, r0
 8020120:	4608      	mov	r0, r1
 8020122:	602b      	str	r3, [r5, #0]
 8020124:	f7e0 fea8 	bl	8000e78 <_sbrk>
 8020128:	1c43      	adds	r3, r0, #1
 802012a:	d102      	bne.n	8020132 <_sbrk_r+0x1a>
 802012c:	682b      	ldr	r3, [r5, #0]
 802012e:	b103      	cbz	r3, 8020132 <_sbrk_r+0x1a>
 8020130:	6023      	str	r3, [r4, #0]
 8020132:	bd38      	pop	{r3, r4, r5, pc}
 8020134:	20000f94 	.word	0x20000f94

08020138 <_raise_r>:
 8020138:	291f      	cmp	r1, #31
 802013a:	b538      	push	{r3, r4, r5, lr}
 802013c:	4604      	mov	r4, r0
 802013e:	460d      	mov	r5, r1
 8020140:	d904      	bls.n	802014c <_raise_r+0x14>
 8020142:	2316      	movs	r3, #22
 8020144:	6003      	str	r3, [r0, #0]
 8020146:	f04f 30ff 	mov.w	r0, #4294967295
 802014a:	bd38      	pop	{r3, r4, r5, pc}
 802014c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802014e:	b112      	cbz	r2, 8020156 <_raise_r+0x1e>
 8020150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020154:	b94b      	cbnz	r3, 802016a <_raise_r+0x32>
 8020156:	4620      	mov	r0, r4
 8020158:	f000 f830 	bl	80201bc <_getpid_r>
 802015c:	462a      	mov	r2, r5
 802015e:	4601      	mov	r1, r0
 8020160:	4620      	mov	r0, r4
 8020162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020166:	f000 b817 	b.w	8020198 <_kill_r>
 802016a:	2b01      	cmp	r3, #1
 802016c:	d00a      	beq.n	8020184 <_raise_r+0x4c>
 802016e:	1c59      	adds	r1, r3, #1
 8020170:	d103      	bne.n	802017a <_raise_r+0x42>
 8020172:	2316      	movs	r3, #22
 8020174:	6003      	str	r3, [r0, #0]
 8020176:	2001      	movs	r0, #1
 8020178:	e7e7      	b.n	802014a <_raise_r+0x12>
 802017a:	2400      	movs	r4, #0
 802017c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020180:	4628      	mov	r0, r5
 8020182:	4798      	blx	r3
 8020184:	2000      	movs	r0, #0
 8020186:	e7e0      	b.n	802014a <_raise_r+0x12>

08020188 <raise>:
 8020188:	4b02      	ldr	r3, [pc, #8]	; (8020194 <raise+0xc>)
 802018a:	4601      	mov	r1, r0
 802018c:	6818      	ldr	r0, [r3, #0]
 802018e:	f7ff bfd3 	b.w	8020138 <_raise_r>
 8020192:	bf00      	nop
 8020194:	20000108 	.word	0x20000108

08020198 <_kill_r>:
 8020198:	b538      	push	{r3, r4, r5, lr}
 802019a:	4d07      	ldr	r5, [pc, #28]	; (80201b8 <_kill_r+0x20>)
 802019c:	2300      	movs	r3, #0
 802019e:	4604      	mov	r4, r0
 80201a0:	4608      	mov	r0, r1
 80201a2:	4611      	mov	r1, r2
 80201a4:	602b      	str	r3, [r5, #0]
 80201a6:	f7e0 fdd2 	bl	8000d4e <_kill>
 80201aa:	1c43      	adds	r3, r0, #1
 80201ac:	d102      	bne.n	80201b4 <_kill_r+0x1c>
 80201ae:	682b      	ldr	r3, [r5, #0]
 80201b0:	b103      	cbz	r3, 80201b4 <_kill_r+0x1c>
 80201b2:	6023      	str	r3, [r4, #0]
 80201b4:	bd38      	pop	{r3, r4, r5, pc}
 80201b6:	bf00      	nop
 80201b8:	20000f94 	.word	0x20000f94

080201bc <_getpid_r>:
 80201bc:	f7e0 bdbf 	b.w	8000d3e <_getpid>

080201c0 <siprintf>:
 80201c0:	b40e      	push	{r1, r2, r3}
 80201c2:	b500      	push	{lr}
 80201c4:	b09c      	sub	sp, #112	; 0x70
 80201c6:	ab1d      	add	r3, sp, #116	; 0x74
 80201c8:	9002      	str	r0, [sp, #8]
 80201ca:	9006      	str	r0, [sp, #24]
 80201cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80201d0:	4809      	ldr	r0, [pc, #36]	; (80201f8 <siprintf+0x38>)
 80201d2:	9107      	str	r1, [sp, #28]
 80201d4:	9104      	str	r1, [sp, #16]
 80201d6:	4909      	ldr	r1, [pc, #36]	; (80201fc <siprintf+0x3c>)
 80201d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80201dc:	9105      	str	r1, [sp, #20]
 80201de:	6800      	ldr	r0, [r0, #0]
 80201e0:	9301      	str	r3, [sp, #4]
 80201e2:	a902      	add	r1, sp, #8
 80201e4:	f001 fcca 	bl	8021b7c <_svfiprintf_r>
 80201e8:	9b02      	ldr	r3, [sp, #8]
 80201ea:	2200      	movs	r2, #0
 80201ec:	701a      	strb	r2, [r3, #0]
 80201ee:	b01c      	add	sp, #112	; 0x70
 80201f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80201f4:	b003      	add	sp, #12
 80201f6:	4770      	bx	lr
 80201f8:	20000108 	.word	0x20000108
 80201fc:	ffff0208 	.word	0xffff0208

08020200 <__sread>:
 8020200:	b510      	push	{r4, lr}
 8020202:	460c      	mov	r4, r1
 8020204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020208:	f002 f8ee 	bl	80223e8 <_read_r>
 802020c:	2800      	cmp	r0, #0
 802020e:	bfab      	itete	ge
 8020210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020212:	89a3      	ldrhlt	r3, [r4, #12]
 8020214:	181b      	addge	r3, r3, r0
 8020216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802021a:	bfac      	ite	ge
 802021c:	6563      	strge	r3, [r4, #84]	; 0x54
 802021e:	81a3      	strhlt	r3, [r4, #12]
 8020220:	bd10      	pop	{r4, pc}

08020222 <__seofread>:
 8020222:	2000      	movs	r0, #0
 8020224:	4770      	bx	lr

08020226 <__swrite>:
 8020226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802022a:	461f      	mov	r7, r3
 802022c:	898b      	ldrh	r3, [r1, #12]
 802022e:	05db      	lsls	r3, r3, #23
 8020230:	4605      	mov	r5, r0
 8020232:	460c      	mov	r4, r1
 8020234:	4616      	mov	r6, r2
 8020236:	d505      	bpl.n	8020244 <__swrite+0x1e>
 8020238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802023c:	2302      	movs	r3, #2
 802023e:	2200      	movs	r2, #0
 8020240:	f001 fbea 	bl	8021a18 <_lseek_r>
 8020244:	89a3      	ldrh	r3, [r4, #12]
 8020246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802024a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802024e:	81a3      	strh	r3, [r4, #12]
 8020250:	4632      	mov	r2, r6
 8020252:	463b      	mov	r3, r7
 8020254:	4628      	mov	r0, r5
 8020256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802025a:	f001 b965 	b.w	8021528 <_write_r>

0802025e <__sseek>:
 802025e:	b510      	push	{r4, lr}
 8020260:	460c      	mov	r4, r1
 8020262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020266:	f001 fbd7 	bl	8021a18 <_lseek_r>
 802026a:	1c43      	adds	r3, r0, #1
 802026c:	89a3      	ldrh	r3, [r4, #12]
 802026e:	bf15      	itete	ne
 8020270:	6560      	strne	r0, [r4, #84]	; 0x54
 8020272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802027a:	81a3      	strheq	r3, [r4, #12]
 802027c:	bf18      	it	ne
 802027e:	81a3      	strhne	r3, [r4, #12]
 8020280:	bd10      	pop	{r4, pc}

08020282 <__sclose>:
 8020282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020286:	f001 ba53 	b.w	8021730 <_close_r>
	...

0802028c <iso_year_adjust>:
 802028c:	6941      	ldr	r1, [r0, #20]
 802028e:	2900      	cmp	r1, #0
 8020290:	f240 736c 	movw	r3, #1900	; 0x76c
 8020294:	bfa8      	it	ge
 8020296:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 802029a:	18ca      	adds	r2, r1, r3
 802029c:	078b      	lsls	r3, r1, #30
 802029e:	d105      	bne.n	80202ac <iso_year_adjust+0x20>
 80202a0:	2164      	movs	r1, #100	; 0x64
 80202a2:	fb92 f3f1 	sdiv	r3, r2, r1
 80202a6:	fb01 2313 	mls	r3, r1, r3, r2
 80202aa:	b9db      	cbnz	r3, 80202e4 <iso_year_adjust+0x58>
 80202ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80202b0:	fb92 f3f1 	sdiv	r3, r2, r1
 80202b4:	fb01 2313 	mls	r3, r1, r3, r2
 80202b8:	fab3 f383 	clz	r3, r3
 80202bc:	095b      	lsrs	r3, r3, #5
 80202be:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80202c2:	0040      	lsls	r0, r0, #1
 80202c4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80202c8:	4418      	add	r0, r3
 80202ca:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80202ce:	4298      	cmp	r0, r3
 80202d0:	d03a      	beq.n	8020348 <iso_year_adjust+0xbc>
 80202d2:	dc21      	bgt.n	8020318 <iso_year_adjust+0x8c>
 80202d4:	2801      	cmp	r0, #1
 80202d6:	dc1a      	bgt.n	802030e <iso_year_adjust+0x82>
 80202d8:	2800      	cmp	r0, #0
 80202da:	bfb4      	ite	lt
 80202dc:	2000      	movlt	r0, #0
 80202de:	f04f 30ff 	movge.w	r0, #4294967295
 80202e2:	4770      	bx	lr
 80202e4:	2301      	movs	r3, #1
 80202e6:	e7ea      	b.n	80202be <iso_year_adjust+0x32>
 80202e8:	2817      	cmp	r0, #23
 80202ea:	d813      	bhi.n	8020314 <iso_year_adjust+0x88>
 80202ec:	e8df f000 	tbb	[pc, r0]
 80202f0:	0c0c0c0c 	.word	0x0c0c0c0c
 80202f4:	0c0c1212 	.word	0x0c0c1212
 80202f8:	12121212 	.word	0x12121212
 80202fc:	12121212 	.word	0x12121212
 8020300:	0c0c1212 	.word	0x0c0c1212
 8020304:	0c0c1212 	.word	0x0c0c1212
 8020308:	f04f 30ff 	mov.w	r0, #4294967295
 802030c:	4770      	bx	lr
 802030e:	380a      	subs	r0, #10
 8020310:	2817      	cmp	r0, #23
 8020312:	d9e9      	bls.n	80202e8 <iso_year_adjust+0x5c>
 8020314:	2000      	movs	r0, #0
 8020316:	4770      	bx	lr
 8020318:	f241 63b4 	movw	r3, #5812	; 0x16b4
 802031c:	4298      	cmp	r0, r3
 802031e:	dc06      	bgt.n	802032e <iso_year_adjust+0xa2>
 8020320:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8020324:	4298      	cmp	r0, r3
 8020326:	bfd4      	ite	le
 8020328:	2000      	movle	r0, #0
 802032a:	2001      	movgt	r0, #1
 802032c:	4770      	bx	lr
 802032e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8020332:	3802      	subs	r0, #2
 8020334:	2815      	cmp	r0, #21
 8020336:	d8ed      	bhi.n	8020314 <iso_year_adjust+0x88>
 8020338:	2301      	movs	r3, #1
 802033a:	4083      	lsls	r3, r0
 802033c:	4803      	ldr	r0, [pc, #12]	; (802034c <iso_year_adjust+0xc0>)
 802033e:	4018      	ands	r0, r3
 8020340:	3800      	subs	r0, #0
 8020342:	bf18      	it	ne
 8020344:	2001      	movne	r0, #1
 8020346:	4770      	bx	lr
 8020348:	2001      	movs	r0, #1
 802034a:	4770      	bx	lr
 802034c:	002a001f 	.word	0x002a001f

08020350 <__strftime>:
 8020350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020354:	b091      	sub	sp, #68	; 0x44
 8020356:	461d      	mov	r5, r3
 8020358:	2300      	movs	r3, #0
 802035a:	4681      	mov	r9, r0
 802035c:	4688      	mov	r8, r1
 802035e:	9304      	str	r3, [sp, #16]
 8020360:	461c      	mov	r4, r3
 8020362:	7813      	ldrb	r3, [r2, #0]
 8020364:	2b00      	cmp	r3, #0
 8020366:	f000 84d1 	beq.w	8020d0c <__strftime+0x9bc>
 802036a:	2b25      	cmp	r3, #37	; 0x25
 802036c:	d11b      	bne.n	80203a6 <__strftime+0x56>
 802036e:	7857      	ldrb	r7, [r2, #1]
 8020370:	2f30      	cmp	r7, #48	; 0x30
 8020372:	d024      	beq.n	80203be <__strftime+0x6e>
 8020374:	2f2b      	cmp	r7, #43	; 0x2b
 8020376:	d022      	beq.n	80203be <__strftime+0x6e>
 8020378:	f102 0b01 	add.w	fp, r2, #1
 802037c:	2700      	movs	r7, #0
 802037e:	f89b 3000 	ldrb.w	r3, [fp]
 8020382:	3b31      	subs	r3, #49	; 0x31
 8020384:	2b08      	cmp	r3, #8
 8020386:	d81d      	bhi.n	80203c4 <__strftime+0x74>
 8020388:	4658      	mov	r0, fp
 802038a:	220a      	movs	r2, #10
 802038c:	a908      	add	r1, sp, #32
 802038e:	f000 fdff 	bl	8020f90 <strtoul>
 8020392:	f8dd b020 	ldr.w	fp, [sp, #32]
 8020396:	4606      	mov	r6, r0
 8020398:	f89b 3000 	ldrb.w	r3, [fp]
 802039c:	2b45      	cmp	r3, #69	; 0x45
 802039e:	d113      	bne.n	80203c8 <__strftime+0x78>
 80203a0:	f10b 0b01 	add.w	fp, fp, #1
 80203a4:	e012      	b.n	80203cc <__strftime+0x7c>
 80203a6:	f108 31ff 	add.w	r1, r8, #4294967295
 80203aa:	42a1      	cmp	r1, r4
 80203ac:	d802      	bhi.n	80203b4 <__strftime+0x64>
 80203ae:	2400      	movs	r4, #0
 80203b0:	f000 bcb2 	b.w	8020d18 <__strftime+0x9c8>
 80203b4:	f809 3004 	strb.w	r3, [r9, r4]
 80203b8:	3201      	adds	r2, #1
 80203ba:	3401      	adds	r4, #1
 80203bc:	e7d1      	b.n	8020362 <__strftime+0x12>
 80203be:	f102 0b02 	add.w	fp, r2, #2
 80203c2:	e7dc      	b.n	802037e <__strftime+0x2e>
 80203c4:	2600      	movs	r6, #0
 80203c6:	e7e7      	b.n	8020398 <__strftime+0x48>
 80203c8:	2b4f      	cmp	r3, #79	; 0x4f
 80203ca:	d0e9      	beq.n	80203a0 <__strftime+0x50>
 80203cc:	f89b 0000 	ldrb.w	r0, [fp]
 80203d0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80203d4:	2b55      	cmp	r3, #85	; 0x55
 80203d6:	d8ea      	bhi.n	80203ae <__strftime+0x5e>
 80203d8:	a201      	add	r2, pc, #4	; (adr r2, 80203e0 <__strftime+0x90>)
 80203da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203de:	bf00      	nop
 80203e0:	08020cff 	.word	0x08020cff
 80203e4:	080203af 	.word	0x080203af
 80203e8:	080203af 	.word	0x080203af
 80203ec:	080203af 	.word	0x080203af
 80203f0:	080203af 	.word	0x080203af
 80203f4:	080203af 	.word	0x080203af
 80203f8:	080203af 	.word	0x080203af
 80203fc:	080203af 	.word	0x080203af
 8020400:	080203af 	.word	0x080203af
 8020404:	080203af 	.word	0x080203af
 8020408:	080203af 	.word	0x080203af
 802040c:	080203af 	.word	0x080203af
 8020410:	080203af 	.word	0x080203af
 8020414:	080203af 	.word	0x080203af
 8020418:	080203af 	.word	0x080203af
 802041c:	080203af 	.word	0x080203af
 8020420:	080203af 	.word	0x080203af
 8020424:	080203af 	.word	0x080203af
 8020428:	080203af 	.word	0x080203af
 802042c:	080203af 	.word	0x080203af
 8020430:	080203af 	.word	0x080203af
 8020434:	080203af 	.word	0x080203af
 8020438:	080203af 	.word	0x080203af
 802043c:	080203af 	.word	0x080203af
 8020440:	080203af 	.word	0x080203af
 8020444:	080203af 	.word	0x080203af
 8020448:	080203af 	.word	0x080203af
 802044c:	080203af 	.word	0x080203af
 8020450:	08020577 	.word	0x08020577
 8020454:	080205d1 	.word	0x080205d1
 8020458:	08020647 	.word	0x08020647
 802045c:	080206e1 	.word	0x080206e1
 8020460:	080203af 	.word	0x080203af
 8020464:	0802072d 	.word	0x0802072d
 8020468:	0802080d 	.word	0x0802080d
 802046c:	0802090f 	.word	0x0802090f
 8020470:	0802091d 	.word	0x0802091d
 8020474:	080203af 	.word	0x080203af
 8020478:	080203af 	.word	0x080203af
 802047c:	080203af 	.word	0x080203af
 8020480:	0802094d 	.word	0x0802094d
 8020484:	080203af 	.word	0x080203af
 8020488:	080203af 	.word	0x080203af
 802048c:	08020965 	.word	0x08020965
 8020490:	080203af 	.word	0x080203af
 8020494:	080209b3 	.word	0x080209b3
 8020498:	08020ac9 	.word	0x08020ac9
 802049c:	08020adb 	.word	0x08020adb
 80204a0:	08020b33 	.word	0x08020b33
 80204a4:	08020b43 	.word	0x08020b43
 80204a8:	08020bb9 	.word	0x08020bb9
 80204ac:	0802063f 	.word	0x0802063f
 80204b0:	08020bed 	.word	0x08020bed
 80204b4:	08020cab 	.word	0x08020cab
 80204b8:	080203af 	.word	0x080203af
 80204bc:	080203af 	.word	0x080203af
 80204c0:	080203af 	.word	0x080203af
 80204c4:	080203af 	.word	0x080203af
 80204c8:	080203af 	.word	0x080203af
 80204cc:	080203af 	.word	0x080203af
 80204d0:	08020539 	.word	0x08020539
 80204d4:	080205a5 	.word	0x080205a5
 80204d8:	080205ff 	.word	0x080205ff
 80204dc:	080206b9 	.word	0x080206b9
 80204e0:	080206b9 	.word	0x080206b9
 80204e4:	080203af 	.word	0x080203af
 80204e8:	08020775 	.word	0x08020775
 80204ec:	080205a5 	.word	0x080205a5
 80204f0:	080203af 	.word	0x080203af
 80204f4:	0802093f 	.word	0x0802093f
 80204f8:	0802090f 	.word	0x0802090f
 80204fc:	0802091d 	.word	0x0802091d
 8020500:	08020947 	.word	0x08020947
 8020504:	08020951 	.word	0x08020951
 8020508:	080203af 	.word	0x080203af
 802050c:	08020965 	.word	0x08020965
 8020510:	080203af 	.word	0x080203af
 8020514:	0802062f 	.word	0x0802062f
 8020518:	080209c9 	.word	0x080209c9
 802051c:	08020acd 	.word	0x08020acd
 8020520:	08020b15 	.word	0x08020b15
 8020524:	080203af 	.word	0x080203af
 8020528:	08020ba9 	.word	0x08020ba9
 802052c:	08020637 	.word	0x08020637
 8020530:	08020bd1 	.word	0x08020bd1
 8020534:	08020c3d 	.word	0x08020c3d
 8020538:	69ab      	ldr	r3, [r5, #24]
 802053a:	4aa7      	ldr	r2, [pc, #668]	; (80207d8 <__strftime+0x488>)
 802053c:	3318      	adds	r3, #24
 802053e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8020542:	4630      	mov	r0, r6
 8020544:	f7df fe7a 	bl	800023c <strlen>
 8020548:	3e01      	subs	r6, #1
 802054a:	4420      	add	r0, r4
 802054c:	f108 33ff 	add.w	r3, r8, #4294967295
 8020550:	42a0      	cmp	r0, r4
 8020552:	d107      	bne.n	8020564 <__strftime+0x214>
 8020554:	f89b 3000 	ldrb.w	r3, [fp]
 8020558:	2b00      	cmp	r3, #0
 802055a:	f000 83d7 	beq.w	8020d0c <__strftime+0x9bc>
 802055e:	f10b 0201 	add.w	r2, fp, #1
 8020562:	e6fe      	b.n	8020362 <__strftime+0x12>
 8020564:	42a3      	cmp	r3, r4
 8020566:	f67f af22 	bls.w	80203ae <__strftime+0x5e>
 802056a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802056e:	f809 2004 	strb.w	r2, [r9, r4]
 8020572:	3401      	adds	r4, #1
 8020574:	e7ec      	b.n	8020550 <__strftime+0x200>
 8020576:	69aa      	ldr	r2, [r5, #24]
 8020578:	4b97      	ldr	r3, [pc, #604]	; (80207d8 <__strftime+0x488>)
 802057a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802057e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8020580:	4630      	mov	r0, r6
 8020582:	f7df fe5b 	bl	800023c <strlen>
 8020586:	3e01      	subs	r6, #1
 8020588:	4420      	add	r0, r4
 802058a:	f108 33ff 	add.w	r3, r8, #4294967295
 802058e:	42a0      	cmp	r0, r4
 8020590:	d0e0      	beq.n	8020554 <__strftime+0x204>
 8020592:	42a3      	cmp	r3, r4
 8020594:	f67f af0b 	bls.w	80203ae <__strftime+0x5e>
 8020598:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802059c:	f809 2004 	strb.w	r2, [r9, r4]
 80205a0:	3401      	adds	r4, #1
 80205a2:	e7f4      	b.n	802058e <__strftime+0x23e>
 80205a4:	4b8c      	ldr	r3, [pc, #560]	; (80207d8 <__strftime+0x488>)
 80205a6:	692a      	ldr	r2, [r5, #16]
 80205a8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80205ac:	4630      	mov	r0, r6
 80205ae:	f7df fe45 	bl	800023c <strlen>
 80205b2:	3e01      	subs	r6, #1
 80205b4:	4420      	add	r0, r4
 80205b6:	f108 33ff 	add.w	r3, r8, #4294967295
 80205ba:	42a0      	cmp	r0, r4
 80205bc:	d0ca      	beq.n	8020554 <__strftime+0x204>
 80205be:	42a3      	cmp	r3, r4
 80205c0:	f67f aef5 	bls.w	80203ae <__strftime+0x5e>
 80205c4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80205c8:	f809 2004 	strb.w	r2, [r9, r4]
 80205cc:	3401      	adds	r4, #1
 80205ce:	e7f4      	b.n	80205ba <__strftime+0x26a>
 80205d0:	692b      	ldr	r3, [r5, #16]
 80205d2:	4a81      	ldr	r2, [pc, #516]	; (80207d8 <__strftime+0x488>)
 80205d4:	330c      	adds	r3, #12
 80205d6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80205da:	4630      	mov	r0, r6
 80205dc:	f7df fe2e 	bl	800023c <strlen>
 80205e0:	3e01      	subs	r6, #1
 80205e2:	4420      	add	r0, r4
 80205e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80205e8:	42a0      	cmp	r0, r4
 80205ea:	d0b3      	beq.n	8020554 <__strftime+0x204>
 80205ec:	42a3      	cmp	r3, r4
 80205ee:	f67f aede 	bls.w	80203ae <__strftime+0x5e>
 80205f2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80205f6:	f809 2004 	strb.w	r2, [r9, r4]
 80205fa:	3401      	adds	r4, #1
 80205fc:	e7f4      	b.n	80205e8 <__strftime+0x298>
 80205fe:	4b76      	ldr	r3, [pc, #472]	; (80207d8 <__strftime+0x488>)
 8020600:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8020604:	4630      	mov	r0, r6
 8020606:	f7df fe19 	bl	800023c <strlen>
 802060a:	7833      	ldrb	r3, [r6, #0]
 802060c:	2b00      	cmp	r3, #0
 802060e:	d0a1      	beq.n	8020554 <__strftime+0x204>
 8020610:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020612:	9300      	str	r3, [sp, #0]
 8020614:	4632      	mov	r2, r6
 8020616:	462b      	mov	r3, r5
 8020618:	eba8 0104 	sub.w	r1, r8, r4
 802061c:	eb09 0004 	add.w	r0, r9, r4
 8020620:	f7ff fe96 	bl	8020350 <__strftime>
 8020624:	2800      	cmp	r0, #0
 8020626:	f77f aec2 	ble.w	80203ae <__strftime+0x5e>
 802062a:	4404      	add	r4, r0
 802062c:	e792      	b.n	8020554 <__strftime+0x204>
 802062e:	4b6a      	ldr	r3, [pc, #424]	; (80207d8 <__strftime+0x488>)
 8020630:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8020634:	e7e6      	b.n	8020604 <__strftime+0x2b4>
 8020636:	4b68      	ldr	r3, [pc, #416]	; (80207d8 <__strftime+0x488>)
 8020638:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 802063c:	e7e2      	b.n	8020604 <__strftime+0x2b4>
 802063e:	4b66      	ldr	r3, [pc, #408]	; (80207d8 <__strftime+0x488>)
 8020640:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8020644:	e7de      	b.n	8020604 <__strftime+0x2b4>
 8020646:	4965      	ldr	r1, [pc, #404]	; (80207dc <__strftime+0x48c>)
 8020648:	f8d5 a014 	ldr.w	sl, [r5, #20]
 802064c:	458a      	cmp	sl, r1
 802064e:	bfac      	ite	ge
 8020650:	2100      	movge	r1, #0
 8020652:	2101      	movlt	r1, #1
 8020654:	f1ba 0f00 	cmp.w	sl, #0
 8020658:	db0e      	blt.n	8020678 <__strftime+0x328>
 802065a:	2064      	movs	r0, #100	; 0x64
 802065c:	fb9a f0f0 	sdiv	r0, sl, r0
 8020660:	3013      	adds	r0, #19
 8020662:	b19f      	cbz	r7, 802068c <__strftime+0x33c>
 8020664:	2863      	cmp	r0, #99	; 0x63
 8020666:	dd25      	ble.n	80206b4 <__strftime+0x364>
 8020668:	4a5d      	ldr	r2, [pc, #372]	; (80207e0 <__strftime+0x490>)
 802066a:	4b5e      	ldr	r3, [pc, #376]	; (80207e4 <__strftime+0x494>)
 802066c:	2f2b      	cmp	r7, #43	; 0x2b
 802066e:	bf14      	ite	ne
 8020670:	4617      	movne	r7, r2
 8020672:	461f      	moveq	r7, r3
 8020674:	4a5c      	ldr	r2, [pc, #368]	; (80207e8 <__strftime+0x498>)
 8020676:	e00b      	b.n	8020690 <__strftime+0x340>
 8020678:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 802067c:	9105      	str	r1, [sp, #20]
 802067e:	f001 f835 	bl	80216ec <abs>
 8020682:	2364      	movs	r3, #100	; 0x64
 8020684:	9905      	ldr	r1, [sp, #20]
 8020686:	fb90 f0f3 	sdiv	r0, r0, r3
 802068a:	e7ea      	b.n	8020662 <__strftime+0x312>
 802068c:	4f54      	ldr	r7, [pc, #336]	; (80207e0 <__strftime+0x490>)
 802068e:	4a57      	ldr	r2, [pc, #348]	; (80207ec <__strftime+0x49c>)
 8020690:	4b57      	ldr	r3, [pc, #348]	; (80207f0 <__strftime+0x4a0>)
 8020692:	9001      	str	r0, [sp, #4]
 8020694:	2e02      	cmp	r6, #2
 8020696:	bf2c      	ite	cs
 8020698:	ebc1 0606 	rsbcs	r6, r1, r6
 802069c:	f1c1 0602 	rsbcc	r6, r1, #2
 80206a0:	494e      	ldr	r1, [pc, #312]	; (80207dc <__strftime+0x48c>)
 80206a2:	9600      	str	r6, [sp, #0]
 80206a4:	458a      	cmp	sl, r1
 80206a6:	bfa8      	it	ge
 80206a8:	463b      	movge	r3, r7
 80206aa:	eba8 0104 	sub.w	r1, r8, r4
 80206ae:	eb09 0004 	add.w	r0, r9, r4
 80206b2:	e02a      	b.n	802070a <__strftime+0x3ba>
 80206b4:	4f4a      	ldr	r7, [pc, #296]	; (80207e0 <__strftime+0x490>)
 80206b6:	e7dd      	b.n	8020674 <__strftime+0x324>
 80206b8:	494e      	ldr	r1, [pc, #312]	; (80207f4 <__strftime+0x4a4>)
 80206ba:	4a4f      	ldr	r2, [pc, #316]	; (80207f8 <__strftime+0x4a8>)
 80206bc:	68eb      	ldr	r3, [r5, #12]
 80206be:	2864      	cmp	r0, #100	; 0x64
 80206c0:	bf08      	it	eq
 80206c2:	460a      	moveq	r2, r1
 80206c4:	eba8 0104 	sub.w	r1, r8, r4
 80206c8:	eb09 0004 	add.w	r0, r9, r4
 80206cc:	f001 fe9e 	bl	802240c <sniprintf>
 80206d0:	2800      	cmp	r0, #0
 80206d2:	f6ff ae6c 	blt.w	80203ae <__strftime+0x5e>
 80206d6:	4404      	add	r4, r0
 80206d8:	45a0      	cmp	r8, r4
 80206da:	f63f af3b 	bhi.w	8020554 <__strftime+0x204>
 80206de:	e666      	b.n	80203ae <__strftime+0x5e>
 80206e0:	6968      	ldr	r0, [r5, #20]
 80206e2:	692b      	ldr	r3, [r5, #16]
 80206e4:	68ef      	ldr	r7, [r5, #12]
 80206e6:	2800      	cmp	r0, #0
 80206e8:	eb09 0604 	add.w	r6, r9, r4
 80206ec:	eba8 0104 	sub.w	r1, r8, r4
 80206f0:	f103 0301 	add.w	r3, r3, #1
 80206f4:	db0c      	blt.n	8020710 <__strftime+0x3c0>
 80206f6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80206fa:	fb90 f2fc 	sdiv	r2, r0, ip
 80206fe:	fb0c 0212 	mls	r2, ip, r2, r0
 8020702:	e9cd 7200 	strd	r7, r2, [sp]
 8020706:	4a3d      	ldr	r2, [pc, #244]	; (80207fc <__strftime+0x4ac>)
 8020708:	4630      	mov	r0, r6
 802070a:	f001 fe7f 	bl	802240c <sniprintf>
 802070e:	e7df      	b.n	80206d0 <__strftime+0x380>
 8020710:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020714:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8020718:	f000 ffe8 	bl	80216ec <abs>
 802071c:	2264      	movs	r2, #100	; 0x64
 802071e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8020722:	fb90 fcf2 	sdiv	ip, r0, r2
 8020726:	fb0c 0212 	mls	r2, ip, r2, r0
 802072a:	e7ea      	b.n	8020702 <__strftime+0x3b2>
 802072c:	2325      	movs	r3, #37	; 0x25
 802072e:	f88d 3020 	strb.w	r3, [sp, #32]
 8020732:	b187      	cbz	r7, 8020756 <__strftime+0x406>
 8020734:	2e06      	cmp	r6, #6
 8020736:	bf38      	it	cc
 8020738:	2606      	movcc	r6, #6
 802073a:	1fb3      	subs	r3, r6, #6
 802073c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8020740:	d10c      	bne.n	802075c <__strftime+0x40c>
 8020742:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020746:	492e      	ldr	r1, [pc, #184]	; (8020800 <__strftime+0x4b0>)
 8020748:	f001 fec0 	bl	80224cc <strcpy>
 802074c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802074e:	9300      	str	r3, [sp, #0]
 8020750:	aa08      	add	r2, sp, #32
 8020752:	462b      	mov	r3, r5
 8020754:	e760      	b.n	8020618 <__strftime+0x2c8>
 8020756:	272b      	movs	r7, #43	; 0x2b
 8020758:	260a      	movs	r6, #10
 802075a:	e7ee      	b.n	802073a <__strftime+0x3ea>
 802075c:	4a29      	ldr	r2, [pc, #164]	; (8020804 <__strftime+0x4b4>)
 802075e:	211e      	movs	r1, #30
 8020760:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020764:	f001 fe52 	bl	802240c <sniprintf>
 8020768:	2800      	cmp	r0, #0
 802076a:	ddea      	ble.n	8020742 <__strftime+0x3f2>
 802076c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8020770:	4418      	add	r0, r3
 8020772:	e7e8      	b.n	8020746 <__strftime+0x3f6>
 8020774:	4628      	mov	r0, r5
 8020776:	f7ff fd89 	bl	802028c <iso_year_adjust>
 802077a:	4606      	mov	r6, r0
 802077c:	6968      	ldr	r0, [r5, #20]
 802077e:	2800      	cmp	r0, #0
 8020780:	db11      	blt.n	80207a6 <__strftime+0x456>
 8020782:	2264      	movs	r2, #100	; 0x64
 8020784:	fb90 f3f2 	sdiv	r3, r0, r2
 8020788:	fb02 0313 	mls	r3, r2, r3, r0
 802078c:	441e      	add	r6, r3
 802078e:	2364      	movs	r3, #100	; 0x64
 8020790:	fb96 f0f3 	sdiv	r0, r6, r3
 8020794:	fb03 6610 	mls	r6, r3, r0, r6
 8020798:	441e      	add	r6, r3
 802079a:	fbb6 f2f3 	udiv	r2, r6, r3
 802079e:	fb03 6312 	mls	r3, r3, r2, r6
 80207a2:	4a14      	ldr	r2, [pc, #80]	; (80207f4 <__strftime+0x4a4>)
 80207a4:	e78e      	b.n	80206c4 <__strftime+0x374>
 80207a6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80207aa:	f000 ff9f 	bl	80216ec <abs>
 80207ae:	2364      	movs	r3, #100	; 0x64
 80207b0:	2e00      	cmp	r6, #0
 80207b2:	fb90 f2f3 	sdiv	r2, r0, r3
 80207b6:	fb02 0313 	mls	r3, r2, r3, r0
 80207ba:	da05      	bge.n	80207c8 <__strftime+0x478>
 80207bc:	6969      	ldr	r1, [r5, #20]
 80207be:	4a12      	ldr	r2, [pc, #72]	; (8020808 <__strftime+0x4b8>)
 80207c0:	4291      	cmp	r1, r2
 80207c2:	bfb8      	it	lt
 80207c4:	2601      	movlt	r6, #1
 80207c6:	e7e1      	b.n	802078c <__strftime+0x43c>
 80207c8:	d0e0      	beq.n	802078c <__strftime+0x43c>
 80207ca:	6969      	ldr	r1, [r5, #20]
 80207cc:	4a03      	ldr	r2, [pc, #12]	; (80207dc <__strftime+0x48c>)
 80207ce:	4291      	cmp	r1, r2
 80207d0:	bfb8      	it	lt
 80207d2:	f04f 36ff 	movlt.w	r6, #4294967295
 80207d6:	e7d9      	b.n	802078c <__strftime+0x43c>
 80207d8:	08029064 	.word	0x08029064
 80207dc:	fffff894 	.word	0xfffff894
 80207e0:	080291d7 	.word	0x080291d7
 80207e4:	08028eee 	.word	0x08028eee
 80207e8:	08028ee6 	.word	0x08028ee6
 80207ec:	08028edf 	.word	0x08028edf
 80207f0:	08029317 	.word	0x08029317
 80207f4:	08028efe 	.word	0x08028efe
 80207f8:	08028ef0 	.word	0x08028ef0
 80207fc:	08028ef4 	.word	0x08028ef4
 8020800:	08028f07 	.word	0x08028f07
 8020804:	08028f03 	.word	0x08028f03
 8020808:	fffff895 	.word	0xfffff895
 802080c:	4bb6      	ldr	r3, [pc, #728]	; (8020ae8 <__strftime+0x798>)
 802080e:	6969      	ldr	r1, [r5, #20]
 8020810:	4299      	cmp	r1, r3
 8020812:	bfac      	ite	ge
 8020814:	2300      	movge	r3, #0
 8020816:	2301      	movlt	r3, #1
 8020818:	4628      	mov	r0, r5
 802081a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 802081e:	f7ff fd35 	bl	802028c <iso_year_adjust>
 8020822:	9906      	ldr	r1, [sp, #24]
 8020824:	2900      	cmp	r1, #0
 8020826:	4682      	mov	sl, r0
 8020828:	db27      	blt.n	802087a <__strftime+0x52a>
 802082a:	2264      	movs	r2, #100	; 0x64
 802082c:	fb91 f2f2 	sdiv	r2, r1, r2
 8020830:	3213      	adds	r2, #19
 8020832:	6968      	ldr	r0, [r5, #20]
 8020834:	2800      	cmp	r0, #0
 8020836:	db2b      	blt.n	8020890 <__strftime+0x540>
 8020838:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802083c:	fb90 fefc 	sdiv	lr, r0, ip
 8020840:	fb0c 001e 	mls	r0, ip, lr, r0
 8020844:	f1ba 0f00 	cmp.w	sl, #0
 8020848:	da31      	bge.n	80208ae <__strftime+0x55e>
 802084a:	6969      	ldr	r1, [r5, #20]
 802084c:	4ba7      	ldr	r3, [pc, #668]	; (8020aec <__strftime+0x79c>)
 802084e:	4299      	cmp	r1, r3
 8020850:	db38      	blt.n	80208c4 <__strftime+0x574>
 8020852:	eb0a 0300 	add.w	r3, sl, r0
 8020856:	1c59      	adds	r1, r3, #1
 8020858:	d139      	bne.n	80208ce <__strftime+0x57e>
 802085a:	3a01      	subs	r2, #1
 802085c:	2363      	movs	r3, #99	; 0x63
 802085e:	2064      	movs	r0, #100	; 0x64
 8020860:	fb00 3202 	mla	r2, r0, r2, r3
 8020864:	9b05      	ldr	r3, [sp, #20]
 8020866:	2b00      	cmp	r3, #0
 8020868:	d036      	beq.n	80208d8 <__strftime+0x588>
 802086a:	232d      	movs	r3, #45	; 0x2d
 802086c:	f88d 3020 	strb.w	r3, [sp, #32]
 8020870:	b106      	cbz	r6, 8020874 <__strftime+0x524>
 8020872:	3e01      	subs	r6, #1
 8020874:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8020878:	e038      	b.n	80208ec <__strftime+0x59c>
 802087a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 802087e:	9106      	str	r1, [sp, #24]
 8020880:	f000 ff34 	bl	80216ec <abs>
 8020884:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020888:	9906      	ldr	r1, [sp, #24]
 802088a:	fb90 f2fc 	sdiv	r2, r0, ip
 802088e:	e7d0      	b.n	8020832 <__strftime+0x4e2>
 8020890:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020894:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8020898:	f000 ff28 	bl	80216ec <abs>
 802089c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80208a0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80208a4:	fb90 fefc 	sdiv	lr, r0, ip
 80208a8:	fb0e 001c 	mls	r0, lr, ip, r0
 80208ac:	e7ca      	b.n	8020844 <__strftime+0x4f4>
 80208ae:	d0d0      	beq.n	8020852 <__strftime+0x502>
 80208b0:	4b8d      	ldr	r3, [pc, #564]	; (8020ae8 <__strftime+0x798>)
 80208b2:	4299      	cmp	r1, r3
 80208b4:	bfb4      	ite	lt
 80208b6:	2301      	movlt	r3, #1
 80208b8:	2300      	movge	r3, #0
 80208ba:	9305      	str	r3, [sp, #20]
 80208bc:	bfb8      	it	lt
 80208be:	f04f 3aff 	movlt.w	sl, #4294967295
 80208c2:	e7c6      	b.n	8020852 <__strftime+0x502>
 80208c4:	f04f 0a01 	mov.w	sl, #1
 80208c8:	f8cd a014 	str.w	sl, [sp, #20]
 80208cc:	e7c1      	b.n	8020852 <__strftime+0x502>
 80208ce:	2b64      	cmp	r3, #100	; 0x64
 80208d0:	bf04      	itt	eq
 80208d2:	3201      	addeq	r2, #1
 80208d4:	2300      	moveq	r3, #0
 80208d6:	e7c2      	b.n	802085e <__strftime+0x50e>
 80208d8:	2f2b      	cmp	r7, #43	; 0x2b
 80208da:	d106      	bne.n	80208ea <__strftime+0x59a>
 80208dc:	f242 730f 	movw	r3, #9999	; 0x270f
 80208e0:	429a      	cmp	r2, r3
 80208e2:	d902      	bls.n	80208ea <__strftime+0x59a>
 80208e4:	f88d 7020 	strb.w	r7, [sp, #32]
 80208e8:	e7c2      	b.n	8020870 <__strftime+0x520>
 80208ea:	ab08      	add	r3, sp, #32
 80208ec:	2125      	movs	r1, #37	; 0x25
 80208ee:	7019      	strb	r1, [r3, #0]
 80208f0:	b94f      	cbnz	r7, 8020906 <__strftime+0x5b6>
 80208f2:	1c58      	adds	r0, r3, #1
 80208f4:	497e      	ldr	r1, [pc, #504]	; (8020af0 <__strftime+0x7a0>)
 80208f6:	9205      	str	r2, [sp, #20]
 80208f8:	f001 fde8 	bl	80224cc <strcpy>
 80208fc:	9a05      	ldr	r2, [sp, #20]
 80208fe:	9200      	str	r2, [sp, #0]
 8020900:	4633      	mov	r3, r6
 8020902:	aa08      	add	r2, sp, #32
 8020904:	e059      	b.n	80209ba <__strftime+0x66a>
 8020906:	2130      	movs	r1, #48	; 0x30
 8020908:	1c98      	adds	r0, r3, #2
 802090a:	7059      	strb	r1, [r3, #1]
 802090c:	e7f2      	b.n	80208f4 <__strftime+0x5a4>
 802090e:	4979      	ldr	r1, [pc, #484]	; (8020af4 <__strftime+0x7a4>)
 8020910:	4a79      	ldr	r2, [pc, #484]	; (8020af8 <__strftime+0x7a8>)
 8020912:	68ab      	ldr	r3, [r5, #8]
 8020914:	286b      	cmp	r0, #107	; 0x6b
 8020916:	bf08      	it	eq
 8020918:	460a      	moveq	r2, r1
 802091a:	e6d3      	b.n	80206c4 <__strftime+0x374>
 802091c:	68ab      	ldr	r3, [r5, #8]
 802091e:	b163      	cbz	r3, 802093a <__strftime+0x5ea>
 8020920:	2b0c      	cmp	r3, #12
 8020922:	d004      	beq.n	802092e <__strftime+0x5de>
 8020924:	210c      	movs	r1, #12
 8020926:	fb93 f2f1 	sdiv	r2, r3, r1
 802092a:	fb01 3312 	mls	r3, r1, r2, r3
 802092e:	4972      	ldr	r1, [pc, #456]	; (8020af8 <__strftime+0x7a8>)
 8020930:	4a70      	ldr	r2, [pc, #448]	; (8020af4 <__strftime+0x7a4>)
 8020932:	2849      	cmp	r0, #73	; 0x49
 8020934:	bf08      	it	eq
 8020936:	460a      	moveq	r2, r1
 8020938:	e6c4      	b.n	80206c4 <__strftime+0x374>
 802093a:	230c      	movs	r3, #12
 802093c:	e7f7      	b.n	802092e <__strftime+0x5de>
 802093e:	69eb      	ldr	r3, [r5, #28]
 8020940:	4a6e      	ldr	r2, [pc, #440]	; (8020afc <__strftime+0x7ac>)
 8020942:	3301      	adds	r3, #1
 8020944:	e6be      	b.n	80206c4 <__strftime+0x374>
 8020946:	692b      	ldr	r3, [r5, #16]
 8020948:	3301      	adds	r3, #1
 802094a:	e72a      	b.n	80207a2 <__strftime+0x452>
 802094c:	686b      	ldr	r3, [r5, #4]
 802094e:	e728      	b.n	80207a2 <__strftime+0x452>
 8020950:	f108 33ff 	add.w	r3, r8, #4294967295
 8020954:	42a3      	cmp	r3, r4
 8020956:	f67f ad2a 	bls.w	80203ae <__strftime+0x5e>
 802095a:	230a      	movs	r3, #10
 802095c:	f809 3004 	strb.w	r3, [r9, r4]
 8020960:	3401      	adds	r4, #1
 8020962:	e5f7      	b.n	8020554 <__strftime+0x204>
 8020964:	68ab      	ldr	r3, [r5, #8]
 8020966:	2b0b      	cmp	r3, #11
 8020968:	bfcc      	ite	gt
 802096a:	22a4      	movgt	r2, #164	; 0xa4
 802096c:	22a0      	movle	r2, #160	; 0xa0
 802096e:	4b64      	ldr	r3, [pc, #400]	; (8020b00 <__strftime+0x7b0>)
 8020970:	4413      	add	r3, r2
 8020972:	685e      	ldr	r6, [r3, #4]
 8020974:	4630      	mov	r0, r6
 8020976:	f7df fc61 	bl	800023c <strlen>
 802097a:	1e72      	subs	r2, r6, #1
 802097c:	4420      	add	r0, r4
 802097e:	f108 36ff 	add.w	r6, r8, #4294967295
 8020982:	42a0      	cmp	r0, r4
 8020984:	f43f ade6 	beq.w	8020554 <__strftime+0x204>
 8020988:	42a6      	cmp	r6, r4
 802098a:	f67f ad10 	bls.w	80203ae <__strftime+0x5e>
 802098e:	f89b 1000 	ldrb.w	r1, [fp]
 8020992:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8020996:	2950      	cmp	r1, #80	; 0x50
 8020998:	d107      	bne.n	80209aa <__strftime+0x65a>
 802099a:	495a      	ldr	r1, [pc, #360]	; (8020b04 <__strftime+0x7b4>)
 802099c:	5cc9      	ldrb	r1, [r1, r3]
 802099e:	f001 0103 	and.w	r1, r1, #3
 80209a2:	2901      	cmp	r1, #1
 80209a4:	bf08      	it	eq
 80209a6:	3320      	addeq	r3, #32
 80209a8:	b2db      	uxtb	r3, r3
 80209aa:	f809 3004 	strb.w	r3, [r9, r4]
 80209ae:	3401      	adds	r4, #1
 80209b0:	e7e7      	b.n	8020982 <__strftime+0x632>
 80209b2:	686b      	ldr	r3, [r5, #4]
 80209b4:	9300      	str	r3, [sp, #0]
 80209b6:	4a54      	ldr	r2, [pc, #336]	; (8020b08 <__strftime+0x7b8>)
 80209b8:	68ab      	ldr	r3, [r5, #8]
 80209ba:	eba8 0104 	sub.w	r1, r8, r4
 80209be:	eb09 0004 	add.w	r0, r9, r4
 80209c2:	f001 fd23 	bl	802240c <sniprintf>
 80209c6:	e683      	b.n	80206d0 <__strftime+0x380>
 80209c8:	6a2b      	ldr	r3, [r5, #32]
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	db79      	blt.n	8020ac2 <__strftime+0x772>
 80209ce:	f000 fb91 	bl	80210f4 <__tz_lock>
 80209d2:	9b04      	ldr	r3, [sp, #16]
 80209d4:	b90b      	cbnz	r3, 80209da <__strftime+0x68a>
 80209d6:	f000 fb99 	bl	802110c <_tzset_unlocked>
 80209da:	f000 ff55 	bl	8021888 <__gettzinfo>
 80209de:	6a2b      	ldr	r3, [r5, #32]
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	bfcc      	ite	gt
 80209e4:	2350      	movgt	r3, #80	; 0x50
 80209e6:	2328      	movle	r3, #40	; 0x28
 80209e8:	58c3      	ldr	r3, [r0, r3]
 80209ea:	f1c3 0a00 	rsb	sl, r3, #0
 80209ee:	f000 fb87 	bl	8021100 <__tz_unlock>
 80209f2:	2301      	movs	r3, #1
 80209f4:	9304      	str	r3, [sp, #16]
 80209f6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80209fa:	4662      	mov	r2, ip
 80209fc:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8020a00:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020a04:	9602      	str	r6, [sp, #8]
 8020a06:	f143 36ff 	adc.w	r6, r3, #4294967295
 8020a0a:	9603      	str	r6, [sp, #12]
 8020a0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020a10:	2e00      	cmp	r6, #0
 8020a12:	f177 0600 	sbcs.w	r6, r7, #0
 8020a16:	eba8 0104 	sub.w	r1, r8, r4
 8020a1a:	eb09 0004 	add.w	r0, r9, r4
 8020a1e:	da05      	bge.n	8020a2c <__strftime+0x6dc>
 8020a20:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8020a24:	f143 33ff 	adc.w	r3, r3, #4294967295
 8020a28:	9602      	str	r6, [sp, #8]
 8020a2a:	9303      	str	r3, [sp, #12]
 8020a2c:	9b02      	ldr	r3, [sp, #8]
 8020a2e:	089e      	lsrs	r6, r3, #2
 8020a30:	9b03      	ldr	r3, [sp, #12]
 8020a32:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8020a36:	f10c 32ff 	add.w	r2, ip, #4294967295
 8020a3a:	109f      	asrs	r7, r3, #2
 8020a3c:	2364      	movs	r3, #100	; 0x64
 8020a3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a42:	1af6      	subs	r6, r6, r3
 8020a44:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8020a48:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8020a4c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8020a50:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a54:	18f6      	adds	r6, r6, r3
 8020a56:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020a5a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8020a5e:	f240 136d 	movw	r3, #365	; 0x16d
 8020a62:	fb03 fc0c 	mul.w	ip, r3, ip
 8020a66:	69eb      	ldr	r3, [r5, #28]
 8020a68:	eb16 060c 	adds.w	r6, r6, ip
 8020a6c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8020a70:	18f6      	adds	r6, r6, r3
 8020a72:	f04f 0c18 	mov.w	ip, #24
 8020a76:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020a7a:	fba6 230c 	umull	r2, r3, r6, ip
 8020a7e:	68ae      	ldr	r6, [r5, #8]
 8020a80:	fb0c 3307 	mla	r3, ip, r7, r3
 8020a84:	1992      	adds	r2, r2, r6
 8020a86:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8020a8a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8020a8e:	fba2 670c 	umull	r6, r7, r2, ip
 8020a92:	fb0c 7703 	mla	r7, ip, r3, r7
 8020a96:	686b      	ldr	r3, [r5, #4]
 8020a98:	18f6      	adds	r6, r6, r3
 8020a9a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020a9e:	fba6 230c 	umull	r2, r3, r6, ip
 8020aa2:	682e      	ldr	r6, [r5, #0]
 8020aa4:	fb0c 3307 	mla	r3, ip, r7, r3
 8020aa8:	1992      	adds	r2, r2, r6
 8020aaa:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8020aae:	ebb2 020a 	subs.w	r2, r2, sl
 8020ab2:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8020ab6:	e9cd 2300 	strd	r2, r3, [sp]
 8020aba:	4a14      	ldr	r2, [pc, #80]	; (8020b0c <__strftime+0x7bc>)
 8020abc:	f001 fca6 	bl	802240c <sniprintf>
 8020ac0:	e606      	b.n	80206d0 <__strftime+0x380>
 8020ac2:	f04f 0a00 	mov.w	sl, #0
 8020ac6:	e796      	b.n	80209f6 <__strftime+0x6a6>
 8020ac8:	682b      	ldr	r3, [r5, #0]
 8020aca:	e66a      	b.n	80207a2 <__strftime+0x452>
 8020acc:	f108 33ff 	add.w	r3, r8, #4294967295
 8020ad0:	42a3      	cmp	r3, r4
 8020ad2:	f67f ac6c 	bls.w	80203ae <__strftime+0x5e>
 8020ad6:	2309      	movs	r3, #9
 8020ad8:	e740      	b.n	802095c <__strftime+0x60c>
 8020ada:	682b      	ldr	r3, [r5, #0]
 8020adc:	9301      	str	r3, [sp, #4]
 8020ade:	686b      	ldr	r3, [r5, #4]
 8020ae0:	9300      	str	r3, [sp, #0]
 8020ae2:	4a0b      	ldr	r2, [pc, #44]	; (8020b10 <__strftime+0x7c0>)
 8020ae4:	68ab      	ldr	r3, [r5, #8]
 8020ae6:	e5e0      	b.n	80206aa <__strftime+0x35a>
 8020ae8:	fffff894 	.word	0xfffff894
 8020aec:	fffff895 	.word	0xfffff895
 8020af0:	08028f0f 	.word	0x08028f0f
 8020af4:	08028ef0 	.word	0x08028ef0
 8020af8:	08028efe 	.word	0x08028efe
 8020afc:	08028f13 	.word	0x08028f13
 8020b00:	08029064 	.word	0x08029064
 8020b04:	080291d9 	.word	0x080291d9
 8020b08:	08028f22 	.word	0x08028f22
 8020b0c:	08028f18 	.word	0x08028f18
 8020b10:	08028f1d 	.word	0x08028f1d
 8020b14:	f108 33ff 	add.w	r3, r8, #4294967295
 8020b18:	42a3      	cmp	r3, r4
 8020b1a:	f67f ac48 	bls.w	80203ae <__strftime+0x5e>
 8020b1e:	69ab      	ldr	r3, [r5, #24]
 8020b20:	eb09 0204 	add.w	r2, r9, r4
 8020b24:	3401      	adds	r4, #1
 8020b26:	b913      	cbnz	r3, 8020b2e <__strftime+0x7de>
 8020b28:	2337      	movs	r3, #55	; 0x37
 8020b2a:	7013      	strb	r3, [r2, #0]
 8020b2c:	e512      	b.n	8020554 <__strftime+0x204>
 8020b2e:	3330      	adds	r3, #48	; 0x30
 8020b30:	e7fb      	b.n	8020b2a <__strftime+0x7da>
 8020b32:	69eb      	ldr	r3, [r5, #28]
 8020b34:	69aa      	ldr	r2, [r5, #24]
 8020b36:	3307      	adds	r3, #7
 8020b38:	1a9b      	subs	r3, r3, r2
 8020b3a:	2207      	movs	r2, #7
 8020b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8020b40:	e62f      	b.n	80207a2 <__strftime+0x452>
 8020b42:	4628      	mov	r0, r5
 8020b44:	f7ff fba2 	bl	802028c <iso_year_adjust>
 8020b48:	69aa      	ldr	r2, [r5, #24]
 8020b4a:	b132      	cbz	r2, 8020b5a <__strftime+0x80a>
 8020b4c:	3a01      	subs	r2, #1
 8020b4e:	2800      	cmp	r0, #0
 8020b50:	dc28      	bgt.n	8020ba4 <__strftime+0x854>
 8020b52:	69eb      	ldr	r3, [r5, #28]
 8020b54:	d103      	bne.n	8020b5e <__strftime+0x80e>
 8020b56:	330a      	adds	r3, #10
 8020b58:	e7ee      	b.n	8020b38 <__strftime+0x7e8>
 8020b5a:	2206      	movs	r2, #6
 8020b5c:	e7f7      	b.n	8020b4e <__strftime+0x7fe>
 8020b5e:	6968      	ldr	r0, [r5, #20]
 8020b60:	2800      	cmp	r0, #0
 8020b62:	eba2 0303 	sub.w	r3, r2, r3
 8020b66:	f240 726b 	movw	r2, #1899	; 0x76b
 8020b6a:	bfa8      	it	ge
 8020b6c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8020b70:	4410      	add	r0, r2
 8020b72:	0782      	lsls	r2, r0, #30
 8020b74:	d105      	bne.n	8020b82 <__strftime+0x832>
 8020b76:	2264      	movs	r2, #100	; 0x64
 8020b78:	fb90 f1f2 	sdiv	r1, r0, r2
 8020b7c:	fb02 0111 	mls	r1, r2, r1, r0
 8020b80:	b971      	cbnz	r1, 8020ba0 <__strftime+0x850>
 8020b82:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020b86:	fb90 f2f1 	sdiv	r2, r0, r1
 8020b8a:	fb01 0212 	mls	r2, r1, r2, r0
 8020b8e:	fab2 f282 	clz	r2, r2
 8020b92:	0952      	lsrs	r2, r2, #5
 8020b94:	1a9a      	subs	r2, r3, r2
 8020b96:	2a05      	cmp	r2, #5
 8020b98:	bfb4      	ite	lt
 8020b9a:	2335      	movlt	r3, #53	; 0x35
 8020b9c:	2334      	movge	r3, #52	; 0x34
 8020b9e:	e600      	b.n	80207a2 <__strftime+0x452>
 8020ba0:	2201      	movs	r2, #1
 8020ba2:	e7f7      	b.n	8020b94 <__strftime+0x844>
 8020ba4:	2301      	movs	r3, #1
 8020ba6:	e5fc      	b.n	80207a2 <__strftime+0x452>
 8020ba8:	f108 33ff 	add.w	r3, r8, #4294967295
 8020bac:	42a3      	cmp	r3, r4
 8020bae:	f67f abfe 	bls.w	80203ae <__strftime+0x5e>
 8020bb2:	69ab      	ldr	r3, [r5, #24]
 8020bb4:	3330      	adds	r3, #48	; 0x30
 8020bb6:	e6d1      	b.n	802095c <__strftime+0x60c>
 8020bb8:	69ab      	ldr	r3, [r5, #24]
 8020bba:	b13b      	cbz	r3, 8020bcc <__strftime+0x87c>
 8020bbc:	3b01      	subs	r3, #1
 8020bbe:	69ea      	ldr	r2, [r5, #28]
 8020bc0:	3207      	adds	r2, #7
 8020bc2:	1ad2      	subs	r2, r2, r3
 8020bc4:	2307      	movs	r3, #7
 8020bc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bca:	e5ea      	b.n	80207a2 <__strftime+0x452>
 8020bcc:	2306      	movs	r3, #6
 8020bce:	e7f6      	b.n	8020bbe <__strftime+0x86e>
 8020bd0:	6968      	ldr	r0, [r5, #20]
 8020bd2:	2800      	cmp	r0, #0
 8020bd4:	db05      	blt.n	8020be2 <__strftime+0x892>
 8020bd6:	2264      	movs	r2, #100	; 0x64
 8020bd8:	fb90 f3f2 	sdiv	r3, r0, r2
 8020bdc:	fb03 0312 	mls	r3, r3, r2, r0
 8020be0:	e5df      	b.n	80207a2 <__strftime+0x452>
 8020be2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020be6:	f000 fd81 	bl	80216ec <abs>
 8020bea:	e7f4      	b.n	8020bd6 <__strftime+0x886>
 8020bec:	696b      	ldr	r3, [r5, #20]
 8020bee:	4a4c      	ldr	r2, [pc, #304]	; (8020d20 <__strftime+0x9d0>)
 8020bf0:	4293      	cmp	r3, r2
 8020bf2:	da09      	bge.n	8020c08 <__strftime+0x8b8>
 8020bf4:	212d      	movs	r1, #45	; 0x2d
 8020bf6:	f88d 1020 	strb.w	r1, [sp, #32]
 8020bfa:	eba2 0a03 	sub.w	sl, r2, r3
 8020bfe:	b106      	cbz	r6, 8020c02 <__strftime+0x8b2>
 8020c00:	3e01      	subs	r6, #1
 8020c02:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8020c06:	e00b      	b.n	8020c20 <__strftime+0x8d0>
 8020c08:	2f2b      	cmp	r7, #43	; 0x2b
 8020c0a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8020c0e:	d106      	bne.n	8020c1e <__strftime+0x8ce>
 8020c10:	f242 730f 	movw	r3, #9999	; 0x270f
 8020c14:	459a      	cmp	sl, r3
 8020c16:	d902      	bls.n	8020c1e <__strftime+0x8ce>
 8020c18:	f88d 7020 	strb.w	r7, [sp, #32]
 8020c1c:	e7ef      	b.n	8020bfe <__strftime+0x8ae>
 8020c1e:	ab08      	add	r3, sp, #32
 8020c20:	2225      	movs	r2, #37	; 0x25
 8020c22:	701a      	strb	r2, [r3, #0]
 8020c24:	b937      	cbnz	r7, 8020c34 <__strftime+0x8e4>
 8020c26:	1c58      	adds	r0, r3, #1
 8020c28:	493e      	ldr	r1, [pc, #248]	; (8020d24 <__strftime+0x9d4>)
 8020c2a:	f001 fc4f 	bl	80224cc <strcpy>
 8020c2e:	f8cd a000 	str.w	sl, [sp]
 8020c32:	e665      	b.n	8020900 <__strftime+0x5b0>
 8020c34:	2230      	movs	r2, #48	; 0x30
 8020c36:	1c98      	adds	r0, r3, #2
 8020c38:	705a      	strb	r2, [r3, #1]
 8020c3a:	e7f5      	b.n	8020c28 <__strftime+0x8d8>
 8020c3c:	6a2b      	ldr	r3, [r5, #32]
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	f6ff ac88 	blt.w	8020554 <__strftime+0x204>
 8020c44:	f000 fa56 	bl	80210f4 <__tz_lock>
 8020c48:	9b04      	ldr	r3, [sp, #16]
 8020c4a:	b90b      	cbnz	r3, 8020c50 <__strftime+0x900>
 8020c4c:	f000 fa5e 	bl	802110c <_tzset_unlocked>
 8020c50:	f000 fe1a 	bl	8021888 <__gettzinfo>
 8020c54:	6a2b      	ldr	r3, [r5, #32]
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	bfcc      	ite	gt
 8020c5a:	2350      	movgt	r3, #80	; 0x50
 8020c5c:	2328      	movle	r3, #40	; 0x28
 8020c5e:	eb09 0704 	add.w	r7, r9, r4
 8020c62:	58c6      	ldr	r6, [r0, r3]
 8020c64:	f000 fa4c 	bl	8021100 <__tz_unlock>
 8020c68:	4276      	negs	r6, r6
 8020c6a:	233c      	movs	r3, #60	; 0x3c
 8020c6c:	fb96 f0f3 	sdiv	r0, r6, r3
 8020c70:	f000 fece 	bl	8021a10 <labs>
 8020c74:	233c      	movs	r3, #60	; 0x3c
 8020c76:	eba8 0a04 	sub.w	sl, r8, r4
 8020c7a:	fb90 f2f3 	sdiv	r2, r0, r3
 8020c7e:	fb02 0013 	mls	r0, r2, r3, r0
 8020c82:	9000      	str	r0, [sp, #0]
 8020c84:	4a28      	ldr	r2, [pc, #160]	; (8020d28 <__strftime+0x9d8>)
 8020c86:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8020c8a:	4651      	mov	r1, sl
 8020c8c:	4638      	mov	r0, r7
 8020c8e:	fb96 f3f3 	sdiv	r3, r6, r3
 8020c92:	f001 fbbb 	bl	802240c <sniprintf>
 8020c96:	2800      	cmp	r0, #0
 8020c98:	f6ff ab89 	blt.w	80203ae <__strftime+0x5e>
 8020c9c:	4404      	add	r4, r0
 8020c9e:	45a0      	cmp	r8, r4
 8020ca0:	f67f ab85 	bls.w	80203ae <__strftime+0x5e>
 8020ca4:	2301      	movs	r3, #1
 8020ca6:	9304      	str	r3, [sp, #16]
 8020ca8:	e454      	b.n	8020554 <__strftime+0x204>
 8020caa:	6a2b      	ldr	r3, [r5, #32]
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	f6ff ac51 	blt.w	8020554 <__strftime+0x204>
 8020cb2:	f000 fa1f 	bl	80210f4 <__tz_lock>
 8020cb6:	9b04      	ldr	r3, [sp, #16]
 8020cb8:	b90b      	cbnz	r3, 8020cbe <__strftime+0x96e>
 8020cba:	f000 fa27 	bl	802110c <_tzset_unlocked>
 8020cbe:	6a2b      	ldr	r3, [r5, #32]
 8020cc0:	4a1a      	ldr	r2, [pc, #104]	; (8020d2c <__strftime+0x9dc>)
 8020cc2:	2b00      	cmp	r3, #0
 8020cc4:	bfd4      	ite	le
 8020cc6:	2300      	movle	r3, #0
 8020cc8:	2301      	movgt	r3, #1
 8020cca:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8020cce:	4630      	mov	r0, r6
 8020cd0:	f7df fab4 	bl	800023c <strlen>
 8020cd4:	3e01      	subs	r6, #1
 8020cd6:	4420      	add	r0, r4
 8020cd8:	f108 33ff 	add.w	r3, r8, #4294967295
 8020cdc:	42a0      	cmp	r0, r4
 8020cde:	d102      	bne.n	8020ce6 <__strftime+0x996>
 8020ce0:	f000 fa0e 	bl	8021100 <__tz_unlock>
 8020ce4:	e7de      	b.n	8020ca4 <__strftime+0x954>
 8020ce6:	42a3      	cmp	r3, r4
 8020ce8:	d905      	bls.n	8020cf6 <__strftime+0x9a6>
 8020cea:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020cee:	f809 2004 	strb.w	r2, [r9, r4]
 8020cf2:	3401      	adds	r4, #1
 8020cf4:	e7f2      	b.n	8020cdc <__strftime+0x98c>
 8020cf6:	f000 fa03 	bl	8021100 <__tz_unlock>
 8020cfa:	f7ff bb58 	b.w	80203ae <__strftime+0x5e>
 8020cfe:	f108 33ff 	add.w	r3, r8, #4294967295
 8020d02:	42a3      	cmp	r3, r4
 8020d04:	f67f ab53 	bls.w	80203ae <__strftime+0x5e>
 8020d08:	2325      	movs	r3, #37	; 0x25
 8020d0a:	e627      	b.n	802095c <__strftime+0x60c>
 8020d0c:	f1b8 0f00 	cmp.w	r8, #0
 8020d10:	d002      	beq.n	8020d18 <__strftime+0x9c8>
 8020d12:	2300      	movs	r3, #0
 8020d14:	f809 3004 	strb.w	r3, [r9, r4]
 8020d18:	4620      	mov	r0, r4
 8020d1a:	b011      	add	sp, #68	; 0x44
 8020d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d20:	fffff894 	.word	0xfffff894
 8020d24:	08028f0f 	.word	0x08028f0f
 8020d28:	08028f2c 	.word	0x08028f2c
 8020d2c:	2000016c 	.word	0x2000016c

08020d30 <strftime>:
 8020d30:	b513      	push	{r0, r1, r4, lr}
 8020d32:	4c03      	ldr	r4, [pc, #12]	; (8020d40 <strftime+0x10>)
 8020d34:	9400      	str	r4, [sp, #0]
 8020d36:	f7ff fb0b 	bl	8020350 <__strftime>
 8020d3a:	b002      	add	sp, #8
 8020d3c:	bd10      	pop	{r4, pc}
 8020d3e:	bf00      	nop
 8020d40:	200001d0 	.word	0x200001d0

08020d44 <strstr>:
 8020d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d46:	780c      	ldrb	r4, [r1, #0]
 8020d48:	b164      	cbz	r4, 8020d64 <strstr+0x20>
 8020d4a:	4603      	mov	r3, r0
 8020d4c:	781a      	ldrb	r2, [r3, #0]
 8020d4e:	4618      	mov	r0, r3
 8020d50:	1c5e      	adds	r6, r3, #1
 8020d52:	b90a      	cbnz	r2, 8020d58 <strstr+0x14>
 8020d54:	4610      	mov	r0, r2
 8020d56:	e005      	b.n	8020d64 <strstr+0x20>
 8020d58:	4294      	cmp	r4, r2
 8020d5a:	d108      	bne.n	8020d6e <strstr+0x2a>
 8020d5c:	460d      	mov	r5, r1
 8020d5e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8020d62:	b902      	cbnz	r2, 8020d66 <strstr+0x22>
 8020d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d66:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8020d6a:	4297      	cmp	r7, r2
 8020d6c:	d0f7      	beq.n	8020d5e <strstr+0x1a>
 8020d6e:	4633      	mov	r3, r6
 8020d70:	e7ec      	b.n	8020d4c <strstr+0x8>
	...

08020d74 <_strtol_l.isra.0>:
 8020d74:	2b01      	cmp	r3, #1
 8020d76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d7a:	d001      	beq.n	8020d80 <_strtol_l.isra.0+0xc>
 8020d7c:	2b24      	cmp	r3, #36	; 0x24
 8020d7e:	d906      	bls.n	8020d8e <_strtol_l.isra.0+0x1a>
 8020d80:	f7fe fa8c 	bl	801f29c <__errno>
 8020d84:	2316      	movs	r3, #22
 8020d86:	6003      	str	r3, [r0, #0]
 8020d88:	2000      	movs	r0, #0
 8020d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d8e:	4f3a      	ldr	r7, [pc, #232]	; (8020e78 <_strtol_l.isra.0+0x104>)
 8020d90:	468e      	mov	lr, r1
 8020d92:	4676      	mov	r6, lr
 8020d94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020d98:	5de5      	ldrb	r5, [r4, r7]
 8020d9a:	f015 0508 	ands.w	r5, r5, #8
 8020d9e:	d1f8      	bne.n	8020d92 <_strtol_l.isra.0+0x1e>
 8020da0:	2c2d      	cmp	r4, #45	; 0x2d
 8020da2:	d134      	bne.n	8020e0e <_strtol_l.isra.0+0x9a>
 8020da4:	f89e 4000 	ldrb.w	r4, [lr]
 8020da8:	f04f 0801 	mov.w	r8, #1
 8020dac:	f106 0e02 	add.w	lr, r6, #2
 8020db0:	2b00      	cmp	r3, #0
 8020db2:	d05c      	beq.n	8020e6e <_strtol_l.isra.0+0xfa>
 8020db4:	2b10      	cmp	r3, #16
 8020db6:	d10c      	bne.n	8020dd2 <_strtol_l.isra.0+0x5e>
 8020db8:	2c30      	cmp	r4, #48	; 0x30
 8020dba:	d10a      	bne.n	8020dd2 <_strtol_l.isra.0+0x5e>
 8020dbc:	f89e 4000 	ldrb.w	r4, [lr]
 8020dc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020dc4:	2c58      	cmp	r4, #88	; 0x58
 8020dc6:	d14d      	bne.n	8020e64 <_strtol_l.isra.0+0xf0>
 8020dc8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020dcc:	2310      	movs	r3, #16
 8020dce:	f10e 0e02 	add.w	lr, lr, #2
 8020dd2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020dd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020dda:	2600      	movs	r6, #0
 8020ddc:	fbbc f9f3 	udiv	r9, ip, r3
 8020de0:	4635      	mov	r5, r6
 8020de2:	fb03 ca19 	mls	sl, r3, r9, ip
 8020de6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020dea:	2f09      	cmp	r7, #9
 8020dec:	d818      	bhi.n	8020e20 <_strtol_l.isra.0+0xac>
 8020dee:	463c      	mov	r4, r7
 8020df0:	42a3      	cmp	r3, r4
 8020df2:	dd24      	ble.n	8020e3e <_strtol_l.isra.0+0xca>
 8020df4:	2e00      	cmp	r6, #0
 8020df6:	db1f      	blt.n	8020e38 <_strtol_l.isra.0+0xc4>
 8020df8:	45a9      	cmp	r9, r5
 8020dfa:	d31d      	bcc.n	8020e38 <_strtol_l.isra.0+0xc4>
 8020dfc:	d101      	bne.n	8020e02 <_strtol_l.isra.0+0x8e>
 8020dfe:	45a2      	cmp	sl, r4
 8020e00:	db1a      	blt.n	8020e38 <_strtol_l.isra.0+0xc4>
 8020e02:	fb05 4503 	mla	r5, r5, r3, r4
 8020e06:	2601      	movs	r6, #1
 8020e08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020e0c:	e7eb      	b.n	8020de6 <_strtol_l.isra.0+0x72>
 8020e0e:	2c2b      	cmp	r4, #43	; 0x2b
 8020e10:	bf08      	it	eq
 8020e12:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020e16:	46a8      	mov	r8, r5
 8020e18:	bf08      	it	eq
 8020e1a:	f106 0e02 	addeq.w	lr, r6, #2
 8020e1e:	e7c7      	b.n	8020db0 <_strtol_l.isra.0+0x3c>
 8020e20:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020e24:	2f19      	cmp	r7, #25
 8020e26:	d801      	bhi.n	8020e2c <_strtol_l.isra.0+0xb8>
 8020e28:	3c37      	subs	r4, #55	; 0x37
 8020e2a:	e7e1      	b.n	8020df0 <_strtol_l.isra.0+0x7c>
 8020e2c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8020e30:	2f19      	cmp	r7, #25
 8020e32:	d804      	bhi.n	8020e3e <_strtol_l.isra.0+0xca>
 8020e34:	3c57      	subs	r4, #87	; 0x57
 8020e36:	e7db      	b.n	8020df0 <_strtol_l.isra.0+0x7c>
 8020e38:	f04f 36ff 	mov.w	r6, #4294967295
 8020e3c:	e7e4      	b.n	8020e08 <_strtol_l.isra.0+0x94>
 8020e3e:	2e00      	cmp	r6, #0
 8020e40:	da05      	bge.n	8020e4e <_strtol_l.isra.0+0xda>
 8020e42:	2322      	movs	r3, #34	; 0x22
 8020e44:	6003      	str	r3, [r0, #0]
 8020e46:	4665      	mov	r5, ip
 8020e48:	b942      	cbnz	r2, 8020e5c <_strtol_l.isra.0+0xe8>
 8020e4a:	4628      	mov	r0, r5
 8020e4c:	e79d      	b.n	8020d8a <_strtol_l.isra.0+0x16>
 8020e4e:	f1b8 0f00 	cmp.w	r8, #0
 8020e52:	d000      	beq.n	8020e56 <_strtol_l.isra.0+0xe2>
 8020e54:	426d      	negs	r5, r5
 8020e56:	2a00      	cmp	r2, #0
 8020e58:	d0f7      	beq.n	8020e4a <_strtol_l.isra.0+0xd6>
 8020e5a:	b10e      	cbz	r6, 8020e60 <_strtol_l.isra.0+0xec>
 8020e5c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8020e60:	6011      	str	r1, [r2, #0]
 8020e62:	e7f2      	b.n	8020e4a <_strtol_l.isra.0+0xd6>
 8020e64:	2430      	movs	r4, #48	; 0x30
 8020e66:	2b00      	cmp	r3, #0
 8020e68:	d1b3      	bne.n	8020dd2 <_strtol_l.isra.0+0x5e>
 8020e6a:	2308      	movs	r3, #8
 8020e6c:	e7b1      	b.n	8020dd2 <_strtol_l.isra.0+0x5e>
 8020e6e:	2c30      	cmp	r4, #48	; 0x30
 8020e70:	d0a4      	beq.n	8020dbc <_strtol_l.isra.0+0x48>
 8020e72:	230a      	movs	r3, #10
 8020e74:	e7ad      	b.n	8020dd2 <_strtol_l.isra.0+0x5e>
 8020e76:	bf00      	nop
 8020e78:	080291d9 	.word	0x080291d9

08020e7c <_strtol_r>:
 8020e7c:	f7ff bf7a 	b.w	8020d74 <_strtol_l.isra.0>

08020e80 <strtol>:
 8020e80:	4613      	mov	r3, r2
 8020e82:	460a      	mov	r2, r1
 8020e84:	4601      	mov	r1, r0
 8020e86:	4802      	ldr	r0, [pc, #8]	; (8020e90 <strtol+0x10>)
 8020e88:	6800      	ldr	r0, [r0, #0]
 8020e8a:	f7ff bf73 	b.w	8020d74 <_strtol_l.isra.0>
 8020e8e:	bf00      	nop
 8020e90:	20000108 	.word	0x20000108

08020e94 <_strtoul_l.isra.0>:
 8020e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020e98:	4e3b      	ldr	r6, [pc, #236]	; (8020f88 <_strtoul_l.isra.0+0xf4>)
 8020e9a:	4686      	mov	lr, r0
 8020e9c:	468c      	mov	ip, r1
 8020e9e:	4660      	mov	r0, ip
 8020ea0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020ea4:	5da5      	ldrb	r5, [r4, r6]
 8020ea6:	f015 0508 	ands.w	r5, r5, #8
 8020eaa:	d1f8      	bne.n	8020e9e <_strtoul_l.isra.0+0xa>
 8020eac:	2c2d      	cmp	r4, #45	; 0x2d
 8020eae:	d134      	bne.n	8020f1a <_strtoul_l.isra.0+0x86>
 8020eb0:	f89c 4000 	ldrb.w	r4, [ip]
 8020eb4:	f04f 0801 	mov.w	r8, #1
 8020eb8:	f100 0c02 	add.w	ip, r0, #2
 8020ebc:	2b00      	cmp	r3, #0
 8020ebe:	d05e      	beq.n	8020f7e <_strtoul_l.isra.0+0xea>
 8020ec0:	2b10      	cmp	r3, #16
 8020ec2:	d10c      	bne.n	8020ede <_strtoul_l.isra.0+0x4a>
 8020ec4:	2c30      	cmp	r4, #48	; 0x30
 8020ec6:	d10a      	bne.n	8020ede <_strtoul_l.isra.0+0x4a>
 8020ec8:	f89c 0000 	ldrb.w	r0, [ip]
 8020ecc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8020ed0:	2858      	cmp	r0, #88	; 0x58
 8020ed2:	d14f      	bne.n	8020f74 <_strtoul_l.isra.0+0xe0>
 8020ed4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8020ed8:	2310      	movs	r3, #16
 8020eda:	f10c 0c02 	add.w	ip, ip, #2
 8020ede:	f04f 37ff 	mov.w	r7, #4294967295
 8020ee2:	2500      	movs	r5, #0
 8020ee4:	fbb7 f7f3 	udiv	r7, r7, r3
 8020ee8:	fb03 f907 	mul.w	r9, r3, r7
 8020eec:	ea6f 0909 	mvn.w	r9, r9
 8020ef0:	4628      	mov	r0, r5
 8020ef2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8020ef6:	2e09      	cmp	r6, #9
 8020ef8:	d818      	bhi.n	8020f2c <_strtoul_l.isra.0+0x98>
 8020efa:	4634      	mov	r4, r6
 8020efc:	42a3      	cmp	r3, r4
 8020efe:	dd24      	ble.n	8020f4a <_strtoul_l.isra.0+0xb6>
 8020f00:	2d00      	cmp	r5, #0
 8020f02:	db1f      	blt.n	8020f44 <_strtoul_l.isra.0+0xb0>
 8020f04:	4287      	cmp	r7, r0
 8020f06:	d31d      	bcc.n	8020f44 <_strtoul_l.isra.0+0xb0>
 8020f08:	d101      	bne.n	8020f0e <_strtoul_l.isra.0+0x7a>
 8020f0a:	45a1      	cmp	r9, r4
 8020f0c:	db1a      	blt.n	8020f44 <_strtoul_l.isra.0+0xb0>
 8020f0e:	fb00 4003 	mla	r0, r0, r3, r4
 8020f12:	2501      	movs	r5, #1
 8020f14:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020f18:	e7eb      	b.n	8020ef2 <_strtoul_l.isra.0+0x5e>
 8020f1a:	2c2b      	cmp	r4, #43	; 0x2b
 8020f1c:	bf08      	it	eq
 8020f1e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8020f22:	46a8      	mov	r8, r5
 8020f24:	bf08      	it	eq
 8020f26:	f100 0c02 	addeq.w	ip, r0, #2
 8020f2a:	e7c7      	b.n	8020ebc <_strtoul_l.isra.0+0x28>
 8020f2c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8020f30:	2e19      	cmp	r6, #25
 8020f32:	d801      	bhi.n	8020f38 <_strtoul_l.isra.0+0xa4>
 8020f34:	3c37      	subs	r4, #55	; 0x37
 8020f36:	e7e1      	b.n	8020efc <_strtoul_l.isra.0+0x68>
 8020f38:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8020f3c:	2e19      	cmp	r6, #25
 8020f3e:	d804      	bhi.n	8020f4a <_strtoul_l.isra.0+0xb6>
 8020f40:	3c57      	subs	r4, #87	; 0x57
 8020f42:	e7db      	b.n	8020efc <_strtoul_l.isra.0+0x68>
 8020f44:	f04f 35ff 	mov.w	r5, #4294967295
 8020f48:	e7e4      	b.n	8020f14 <_strtoul_l.isra.0+0x80>
 8020f4a:	2d00      	cmp	r5, #0
 8020f4c:	da07      	bge.n	8020f5e <_strtoul_l.isra.0+0xca>
 8020f4e:	2322      	movs	r3, #34	; 0x22
 8020f50:	f8ce 3000 	str.w	r3, [lr]
 8020f54:	f04f 30ff 	mov.w	r0, #4294967295
 8020f58:	b942      	cbnz	r2, 8020f6c <_strtoul_l.isra.0+0xd8>
 8020f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020f5e:	f1b8 0f00 	cmp.w	r8, #0
 8020f62:	d000      	beq.n	8020f66 <_strtoul_l.isra.0+0xd2>
 8020f64:	4240      	negs	r0, r0
 8020f66:	2a00      	cmp	r2, #0
 8020f68:	d0f7      	beq.n	8020f5a <_strtoul_l.isra.0+0xc6>
 8020f6a:	b10d      	cbz	r5, 8020f70 <_strtoul_l.isra.0+0xdc>
 8020f6c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8020f70:	6011      	str	r1, [r2, #0]
 8020f72:	e7f2      	b.n	8020f5a <_strtoul_l.isra.0+0xc6>
 8020f74:	2430      	movs	r4, #48	; 0x30
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	d1b1      	bne.n	8020ede <_strtoul_l.isra.0+0x4a>
 8020f7a:	2308      	movs	r3, #8
 8020f7c:	e7af      	b.n	8020ede <_strtoul_l.isra.0+0x4a>
 8020f7e:	2c30      	cmp	r4, #48	; 0x30
 8020f80:	d0a2      	beq.n	8020ec8 <_strtoul_l.isra.0+0x34>
 8020f82:	230a      	movs	r3, #10
 8020f84:	e7ab      	b.n	8020ede <_strtoul_l.isra.0+0x4a>
 8020f86:	bf00      	nop
 8020f88:	080291d9 	.word	0x080291d9

08020f8c <_strtoul_r>:
 8020f8c:	f7ff bf82 	b.w	8020e94 <_strtoul_l.isra.0>

08020f90 <strtoul>:
 8020f90:	4613      	mov	r3, r2
 8020f92:	460a      	mov	r2, r1
 8020f94:	4601      	mov	r1, r0
 8020f96:	4802      	ldr	r0, [pc, #8]	; (8020fa0 <strtoul+0x10>)
 8020f98:	6800      	ldr	r0, [r0, #0]
 8020f9a:	f7ff bf7b 	b.w	8020e94 <_strtoul_l.isra.0>
 8020f9e:	bf00      	nop
 8020fa0:	20000108 	.word	0x20000108

08020fa4 <__tzcalc_limits>:
 8020fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fa8:	4680      	mov	r8, r0
 8020faa:	f000 fc6d 	bl	8021888 <__gettzinfo>
 8020fae:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8020fb2:	4598      	cmp	r8, r3
 8020fb4:	f340 8098 	ble.w	80210e8 <__tzcalc_limits+0x144>
 8020fb8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8020fbc:	4443      	add	r3, r8
 8020fbe:	109b      	asrs	r3, r3, #2
 8020fc0:	f240 126d 	movw	r2, #365	; 0x16d
 8020fc4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8020fc8:	fb02 3505 	mla	r5, r2, r5, r3
 8020fcc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8020fd0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8020fd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8020fd8:	441d      	add	r5, r3
 8020fda:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8020fde:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8020fe2:	fb98 f7f3 	sdiv	r7, r8, r3
 8020fe6:	fb03 8717 	mls	r7, r3, r7, r8
 8020fea:	4442      	add	r2, r8
 8020fec:	fab7 fc87 	clz	ip, r7
 8020ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8020ff4:	f008 0303 	and.w	r3, r8, #3
 8020ff8:	4415      	add	r5, r2
 8020ffa:	2264      	movs	r2, #100	; 0x64
 8020ffc:	f8c0 8004 	str.w	r8, [r0, #4]
 8021000:	fb98 f6f2 	sdiv	r6, r8, r2
 8021004:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021008:	fb02 8616 	mls	r6, r2, r6, r8
 802100c:	4604      	mov	r4, r0
 802100e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8021012:	9300      	str	r3, [sp, #0]
 8021014:	f04f 0e07 	mov.w	lr, #7
 8021018:	7a22      	ldrb	r2, [r4, #8]
 802101a:	6963      	ldr	r3, [r4, #20]
 802101c:	2a4a      	cmp	r2, #74	; 0x4a
 802101e:	d128      	bne.n	8021072 <__tzcalc_limits+0xce>
 8021020:	9900      	ldr	r1, [sp, #0]
 8021022:	18ea      	adds	r2, r5, r3
 8021024:	b901      	cbnz	r1, 8021028 <__tzcalc_limits+0x84>
 8021026:	b906      	cbnz	r6, 802102a <__tzcalc_limits+0x86>
 8021028:	bb0f      	cbnz	r7, 802106e <__tzcalc_limits+0xca>
 802102a:	2b3b      	cmp	r3, #59	; 0x3b
 802102c:	bfd4      	ite	le
 802102e:	2300      	movle	r3, #0
 8021030:	2301      	movgt	r3, #1
 8021032:	4413      	add	r3, r2
 8021034:	1e5a      	subs	r2, r3, #1
 8021036:	69a3      	ldr	r3, [r4, #24]
 8021038:	492c      	ldr	r1, [pc, #176]	; (80210ec <__tzcalc_limits+0x148>)
 802103a:	fb01 3202 	mla	r2, r1, r2, r3
 802103e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021040:	4413      	add	r3, r2
 8021042:	461a      	mov	r2, r3
 8021044:	17db      	asrs	r3, r3, #31
 8021046:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802104a:	3428      	adds	r4, #40	; 0x28
 802104c:	45a3      	cmp	fp, r4
 802104e:	d1e3      	bne.n	8021018 <__tzcalc_limits+0x74>
 8021050:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8021054:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8021058:	4294      	cmp	r4, r2
 802105a:	eb75 0303 	sbcs.w	r3, r5, r3
 802105e:	bfb4      	ite	lt
 8021060:	2301      	movlt	r3, #1
 8021062:	2300      	movge	r3, #0
 8021064:	6003      	str	r3, [r0, #0]
 8021066:	2001      	movs	r0, #1
 8021068:	b003      	add	sp, #12
 802106a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802106e:	2300      	movs	r3, #0
 8021070:	e7df      	b.n	8021032 <__tzcalc_limits+0x8e>
 8021072:	2a44      	cmp	r2, #68	; 0x44
 8021074:	d101      	bne.n	802107a <__tzcalc_limits+0xd6>
 8021076:	18ea      	adds	r2, r5, r3
 8021078:	e7dd      	b.n	8021036 <__tzcalc_limits+0x92>
 802107a:	9a00      	ldr	r2, [sp, #0]
 802107c:	bb72      	cbnz	r2, 80210dc <__tzcalc_limits+0x138>
 802107e:	2e00      	cmp	r6, #0
 8021080:	bf0c      	ite	eq
 8021082:	46e0      	moveq	r8, ip
 8021084:	f04f 0801 	movne.w	r8, #1
 8021088:	4919      	ldr	r1, [pc, #100]	; (80210f0 <__tzcalc_limits+0x14c>)
 802108a:	68e2      	ldr	r2, [r4, #12]
 802108c:	9201      	str	r2, [sp, #4]
 802108e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8021092:	fb0a 1808 	mla	r8, sl, r8, r1
 8021096:	462a      	mov	r2, r5
 8021098:	f04f 0900 	mov.w	r9, #0
 802109c:	f1a8 0804 	sub.w	r8, r8, #4
 80210a0:	9901      	ldr	r1, [sp, #4]
 80210a2:	f109 0901 	add.w	r9, r9, #1
 80210a6:	4549      	cmp	r1, r9
 80210a8:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80210ac:	dc18      	bgt.n	80210e0 <__tzcalc_limits+0x13c>
 80210ae:	f102 0804 	add.w	r8, r2, #4
 80210b2:	fb98 f9fe 	sdiv	r9, r8, lr
 80210b6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80210ba:	eba8 0909 	sub.w	r9, r8, r9
 80210be:	ebb3 0909 	subs.w	r9, r3, r9
 80210c2:	6923      	ldr	r3, [r4, #16]
 80210c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80210c8:	bf48      	it	mi
 80210ca:	f109 0907 	addmi.w	r9, r9, #7
 80210ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80210d2:	444b      	add	r3, r9
 80210d4:	4553      	cmp	r3, sl
 80210d6:	da05      	bge.n	80210e4 <__tzcalc_limits+0x140>
 80210d8:	441a      	add	r2, r3
 80210da:	e7ac      	b.n	8021036 <__tzcalc_limits+0x92>
 80210dc:	46e0      	mov	r8, ip
 80210de:	e7d3      	b.n	8021088 <__tzcalc_limits+0xe4>
 80210e0:	4452      	add	r2, sl
 80210e2:	e7dd      	b.n	80210a0 <__tzcalc_limits+0xfc>
 80210e4:	3b07      	subs	r3, #7
 80210e6:	e7f5      	b.n	80210d4 <__tzcalc_limits+0x130>
 80210e8:	2000      	movs	r0, #0
 80210ea:	e7bd      	b.n	8021068 <__tzcalc_limits+0xc4>
 80210ec:	00015180 	.word	0x00015180
 80210f0:	08028e20 	.word	0x08028e20

080210f4 <__tz_lock>:
 80210f4:	4801      	ldr	r0, [pc, #4]	; (80210fc <__tz_lock+0x8>)
 80210f6:	f7fe be29 	b.w	801fd4c <__retarget_lock_acquire>
 80210fa:	bf00      	nop
 80210fc:	20000f8f 	.word	0x20000f8f

08021100 <__tz_unlock>:
 8021100:	4801      	ldr	r0, [pc, #4]	; (8021108 <__tz_unlock+0x8>)
 8021102:	f7fe be25 	b.w	801fd50 <__retarget_lock_release>
 8021106:	bf00      	nop
 8021108:	20000f8f 	.word	0x20000f8f

0802110c <_tzset_unlocked>:
 802110c:	4b01      	ldr	r3, [pc, #4]	; (8021114 <_tzset_unlocked+0x8>)
 802110e:	6818      	ldr	r0, [r3, #0]
 8021110:	f000 b802 	b.w	8021118 <_tzset_unlocked_r>
 8021114:	20000108 	.word	0x20000108

08021118 <_tzset_unlocked_r>:
 8021118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802111c:	b08d      	sub	sp, #52	; 0x34
 802111e:	4607      	mov	r7, r0
 8021120:	f000 fbb2 	bl	8021888 <__gettzinfo>
 8021124:	49ae      	ldr	r1, [pc, #696]	; (80213e0 <_tzset_unlocked_r+0x2c8>)
 8021126:	4eaf      	ldr	r6, [pc, #700]	; (80213e4 <_tzset_unlocked_r+0x2cc>)
 8021128:	4605      	mov	r5, r0
 802112a:	4638      	mov	r0, r7
 802112c:	f000 fba4 	bl	8021878 <_getenv_r>
 8021130:	4604      	mov	r4, r0
 8021132:	b970      	cbnz	r0, 8021152 <_tzset_unlocked_r+0x3a>
 8021134:	4bac      	ldr	r3, [pc, #688]	; (80213e8 <_tzset_unlocked_r+0x2d0>)
 8021136:	4aad      	ldr	r2, [pc, #692]	; (80213ec <_tzset_unlocked_r+0x2d4>)
 8021138:	6018      	str	r0, [r3, #0]
 802113a:	4bad      	ldr	r3, [pc, #692]	; (80213f0 <_tzset_unlocked_r+0x2d8>)
 802113c:	6018      	str	r0, [r3, #0]
 802113e:	4bad      	ldr	r3, [pc, #692]	; (80213f4 <_tzset_unlocked_r+0x2dc>)
 8021140:	6830      	ldr	r0, [r6, #0]
 8021142:	e9c3 2200 	strd	r2, r2, [r3]
 8021146:	f7fe fe71 	bl	801fe2c <free>
 802114a:	6034      	str	r4, [r6, #0]
 802114c:	b00d      	add	sp, #52	; 0x34
 802114e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021152:	6831      	ldr	r1, [r6, #0]
 8021154:	2900      	cmp	r1, #0
 8021156:	d15f      	bne.n	8021218 <_tzset_unlocked_r+0x100>
 8021158:	6830      	ldr	r0, [r6, #0]
 802115a:	f7fe fe67 	bl	801fe2c <free>
 802115e:	4620      	mov	r0, r4
 8021160:	f7df f86c 	bl	800023c <strlen>
 8021164:	1c41      	adds	r1, r0, #1
 8021166:	4638      	mov	r0, r7
 8021168:	f7fe fede 	bl	801ff28 <_malloc_r>
 802116c:	6030      	str	r0, [r6, #0]
 802116e:	2800      	cmp	r0, #0
 8021170:	d157      	bne.n	8021222 <_tzset_unlocked_r+0x10a>
 8021172:	7823      	ldrb	r3, [r4, #0]
 8021174:	4aa0      	ldr	r2, [pc, #640]	; (80213f8 <_tzset_unlocked_r+0x2e0>)
 8021176:	49a1      	ldr	r1, [pc, #644]	; (80213fc <_tzset_unlocked_r+0x2e4>)
 8021178:	2b3a      	cmp	r3, #58	; 0x3a
 802117a:	bf08      	it	eq
 802117c:	3401      	addeq	r4, #1
 802117e:	ae0a      	add	r6, sp, #40	; 0x28
 8021180:	4633      	mov	r3, r6
 8021182:	4620      	mov	r0, r4
 8021184:	f001 f976 	bl	8022474 <siscanf>
 8021188:	2800      	cmp	r0, #0
 802118a:	dddf      	ble.n	802114c <_tzset_unlocked_r+0x34>
 802118c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802118e:	18e7      	adds	r7, r4, r3
 8021190:	5ce3      	ldrb	r3, [r4, r3]
 8021192:	2b2d      	cmp	r3, #45	; 0x2d
 8021194:	d149      	bne.n	802122a <_tzset_unlocked_r+0x112>
 8021196:	3701      	adds	r7, #1
 8021198:	f04f 34ff 	mov.w	r4, #4294967295
 802119c:	f10d 0a20 	add.w	sl, sp, #32
 80211a0:	f10d 0b1e 	add.w	fp, sp, #30
 80211a4:	f04f 0800 	mov.w	r8, #0
 80211a8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80211ac:	4994      	ldr	r1, [pc, #592]	; (8021400 <_tzset_unlocked_r+0x2e8>)
 80211ae:	9603      	str	r6, [sp, #12]
 80211b0:	f8cd b000 	str.w	fp, [sp]
 80211b4:	4633      	mov	r3, r6
 80211b6:	aa07      	add	r2, sp, #28
 80211b8:	4638      	mov	r0, r7
 80211ba:	f8ad 801e 	strh.w	r8, [sp, #30]
 80211be:	f8ad 8020 	strh.w	r8, [sp, #32]
 80211c2:	f001 f957 	bl	8022474 <siscanf>
 80211c6:	4540      	cmp	r0, r8
 80211c8:	ddc0      	ble.n	802114c <_tzset_unlocked_r+0x34>
 80211ca:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80211ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80211d2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 802140c <_tzset_unlocked_r+0x2f4>
 80211d6:	213c      	movs	r1, #60	; 0x3c
 80211d8:	fb01 2203 	mla	r2, r1, r3, r2
 80211dc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80211e0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80211e4:	fb01 2303 	mla	r3, r1, r3, r2
 80211e8:	435c      	muls	r4, r3
 80211ea:	62ac      	str	r4, [r5, #40]	; 0x28
 80211ec:	4c81      	ldr	r4, [pc, #516]	; (80213f4 <_tzset_unlocked_r+0x2dc>)
 80211ee:	4b82      	ldr	r3, [pc, #520]	; (80213f8 <_tzset_unlocked_r+0x2e0>)
 80211f0:	6023      	str	r3, [r4, #0]
 80211f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211f4:	4981      	ldr	r1, [pc, #516]	; (80213fc <_tzset_unlocked_r+0x2e4>)
 80211f6:	441f      	add	r7, r3
 80211f8:	464a      	mov	r2, r9
 80211fa:	4633      	mov	r3, r6
 80211fc:	4638      	mov	r0, r7
 80211fe:	f001 f939 	bl	8022474 <siscanf>
 8021202:	4540      	cmp	r0, r8
 8021204:	dc16      	bgt.n	8021234 <_tzset_unlocked_r+0x11c>
 8021206:	6823      	ldr	r3, [r4, #0]
 8021208:	6063      	str	r3, [r4, #4]
 802120a:	4b77      	ldr	r3, [pc, #476]	; (80213e8 <_tzset_unlocked_r+0x2d0>)
 802120c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802120e:	601a      	str	r2, [r3, #0]
 8021210:	4b77      	ldr	r3, [pc, #476]	; (80213f0 <_tzset_unlocked_r+0x2d8>)
 8021212:	f8c3 8000 	str.w	r8, [r3]
 8021216:	e799      	b.n	802114c <_tzset_unlocked_r+0x34>
 8021218:	f7df f818 	bl	800024c <strcmp>
 802121c:	2800      	cmp	r0, #0
 802121e:	d19b      	bne.n	8021158 <_tzset_unlocked_r+0x40>
 8021220:	e794      	b.n	802114c <_tzset_unlocked_r+0x34>
 8021222:	4621      	mov	r1, r4
 8021224:	f001 f952 	bl	80224cc <strcpy>
 8021228:	e7a3      	b.n	8021172 <_tzset_unlocked_r+0x5a>
 802122a:	2b2b      	cmp	r3, #43	; 0x2b
 802122c:	bf08      	it	eq
 802122e:	3701      	addeq	r7, #1
 8021230:	2401      	movs	r4, #1
 8021232:	e7b3      	b.n	802119c <_tzset_unlocked_r+0x84>
 8021234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021236:	f8c4 9004 	str.w	r9, [r4, #4]
 802123a:	18fc      	adds	r4, r7, r3
 802123c:	5cfb      	ldrb	r3, [r7, r3]
 802123e:	2b2d      	cmp	r3, #45	; 0x2d
 8021240:	f040 808b 	bne.w	802135a <_tzset_unlocked_r+0x242>
 8021244:	3401      	adds	r4, #1
 8021246:	f04f 37ff 	mov.w	r7, #4294967295
 802124a:	2300      	movs	r3, #0
 802124c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021250:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021254:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021258:	930a      	str	r3, [sp, #40]	; 0x28
 802125a:	e9cd a602 	strd	sl, r6, [sp, #8]
 802125e:	e9cd b600 	strd	fp, r6, [sp]
 8021262:	4967      	ldr	r1, [pc, #412]	; (8021400 <_tzset_unlocked_r+0x2e8>)
 8021264:	4633      	mov	r3, r6
 8021266:	aa07      	add	r2, sp, #28
 8021268:	4620      	mov	r0, r4
 802126a:	f001 f903 	bl	8022474 <siscanf>
 802126e:	2800      	cmp	r0, #0
 8021270:	dc78      	bgt.n	8021364 <_tzset_unlocked_r+0x24c>
 8021272:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8021274:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8021278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802127a:	652f      	str	r7, [r5, #80]	; 0x50
 802127c:	441c      	add	r4, r3
 802127e:	462f      	mov	r7, r5
 8021280:	f04f 0900 	mov.w	r9, #0
 8021284:	7823      	ldrb	r3, [r4, #0]
 8021286:	2b2c      	cmp	r3, #44	; 0x2c
 8021288:	bf08      	it	eq
 802128a:	3401      	addeq	r4, #1
 802128c:	f894 8000 	ldrb.w	r8, [r4]
 8021290:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8021294:	d178      	bne.n	8021388 <_tzset_unlocked_r+0x270>
 8021296:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802129a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 802129e:	ab09      	add	r3, sp, #36	; 0x24
 80212a0:	9300      	str	r3, [sp, #0]
 80212a2:	4958      	ldr	r1, [pc, #352]	; (8021404 <_tzset_unlocked_r+0x2ec>)
 80212a4:	9603      	str	r6, [sp, #12]
 80212a6:	4633      	mov	r3, r6
 80212a8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80212ac:	4620      	mov	r0, r4
 80212ae:	f001 f8e1 	bl	8022474 <siscanf>
 80212b2:	2803      	cmp	r0, #3
 80212b4:	f47f af4a 	bne.w	802114c <_tzset_unlocked_r+0x34>
 80212b8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80212bc:	1e4b      	subs	r3, r1, #1
 80212be:	2b0b      	cmp	r3, #11
 80212c0:	f63f af44 	bhi.w	802114c <_tzset_unlocked_r+0x34>
 80212c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80212c8:	1e53      	subs	r3, r2, #1
 80212ca:	2b04      	cmp	r3, #4
 80212cc:	f63f af3e 	bhi.w	802114c <_tzset_unlocked_r+0x34>
 80212d0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80212d4:	2b06      	cmp	r3, #6
 80212d6:	f63f af39 	bhi.w	802114c <_tzset_unlocked_r+0x34>
 80212da:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80212de:	f887 8008 	strb.w	r8, [r7, #8]
 80212e2:	617b      	str	r3, [r7, #20]
 80212e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212e6:	eb04 0803 	add.w	r8, r4, r3
 80212ea:	2302      	movs	r3, #2
 80212ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80212f0:	2300      	movs	r3, #0
 80212f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80212f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80212fa:	930a      	str	r3, [sp, #40]	; 0x28
 80212fc:	f898 3000 	ldrb.w	r3, [r8]
 8021300:	2b2f      	cmp	r3, #47	; 0x2f
 8021302:	d109      	bne.n	8021318 <_tzset_unlocked_r+0x200>
 8021304:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021308:	e9cd b600 	strd	fp, r6, [sp]
 802130c:	493e      	ldr	r1, [pc, #248]	; (8021408 <_tzset_unlocked_r+0x2f0>)
 802130e:	4633      	mov	r3, r6
 8021310:	aa07      	add	r2, sp, #28
 8021312:	4640      	mov	r0, r8
 8021314:	f001 f8ae 	bl	8022474 <siscanf>
 8021318:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802131c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021320:	213c      	movs	r1, #60	; 0x3c
 8021322:	fb01 2203 	mla	r2, r1, r3, r2
 8021326:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802132a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802132e:	fb01 2303 	mla	r3, r1, r3, r2
 8021332:	61bb      	str	r3, [r7, #24]
 8021334:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021336:	3728      	adds	r7, #40	; 0x28
 8021338:	4444      	add	r4, r8
 802133a:	f1b9 0f00 	cmp.w	r9, #0
 802133e:	d020      	beq.n	8021382 <_tzset_unlocked_r+0x26a>
 8021340:	6868      	ldr	r0, [r5, #4]
 8021342:	f7ff fe2f 	bl	8020fa4 <__tzcalc_limits>
 8021346:	4b28      	ldr	r3, [pc, #160]	; (80213e8 <_tzset_unlocked_r+0x2d0>)
 8021348:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802134a:	601a      	str	r2, [r3, #0]
 802134c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802134e:	1a9b      	subs	r3, r3, r2
 8021350:	4a27      	ldr	r2, [pc, #156]	; (80213f0 <_tzset_unlocked_r+0x2d8>)
 8021352:	bf18      	it	ne
 8021354:	2301      	movne	r3, #1
 8021356:	6013      	str	r3, [r2, #0]
 8021358:	e6f8      	b.n	802114c <_tzset_unlocked_r+0x34>
 802135a:	2b2b      	cmp	r3, #43	; 0x2b
 802135c:	bf08      	it	eq
 802135e:	3401      	addeq	r4, #1
 8021360:	2701      	movs	r7, #1
 8021362:	e772      	b.n	802124a <_tzset_unlocked_r+0x132>
 8021364:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021368:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802136c:	213c      	movs	r1, #60	; 0x3c
 802136e:	fb01 2203 	mla	r2, r1, r3, r2
 8021372:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021376:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802137a:	fb01 2303 	mla	r3, r1, r3, r2
 802137e:	435f      	muls	r7, r3
 8021380:	e77a      	b.n	8021278 <_tzset_unlocked_r+0x160>
 8021382:	f04f 0901 	mov.w	r9, #1
 8021386:	e77d      	b.n	8021284 <_tzset_unlocked_r+0x16c>
 8021388:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 802138c:	bf06      	itte	eq
 802138e:	3401      	addeq	r4, #1
 8021390:	4643      	moveq	r3, r8
 8021392:	2344      	movne	r3, #68	; 0x44
 8021394:	220a      	movs	r2, #10
 8021396:	a90b      	add	r1, sp, #44	; 0x2c
 8021398:	4620      	mov	r0, r4
 802139a:	9305      	str	r3, [sp, #20]
 802139c:	f7ff fdf8 	bl	8020f90 <strtoul>
 80213a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80213a4:	9b05      	ldr	r3, [sp, #20]
 80213a6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80213aa:	45a0      	cmp	r8, r4
 80213ac:	d114      	bne.n	80213d8 <_tzset_unlocked_r+0x2c0>
 80213ae:	234d      	movs	r3, #77	; 0x4d
 80213b0:	f1b9 0f00 	cmp.w	r9, #0
 80213b4:	d107      	bne.n	80213c6 <_tzset_unlocked_r+0x2ae>
 80213b6:	722b      	strb	r3, [r5, #8]
 80213b8:	2103      	movs	r1, #3
 80213ba:	2302      	movs	r3, #2
 80213bc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80213c0:	f8c5 9014 	str.w	r9, [r5, #20]
 80213c4:	e791      	b.n	80212ea <_tzset_unlocked_r+0x1d2>
 80213c6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80213ca:	220b      	movs	r2, #11
 80213cc:	2301      	movs	r3, #1
 80213ce:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80213d2:	2300      	movs	r3, #0
 80213d4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80213d6:	e788      	b.n	80212ea <_tzset_unlocked_r+0x1d2>
 80213d8:	b280      	uxth	r0, r0
 80213da:	723b      	strb	r3, [r7, #8]
 80213dc:	6178      	str	r0, [r7, #20]
 80213de:	e784      	b.n	80212ea <_tzset_unlocked_r+0x1d2>
 80213e0:	08029160 	.word	0x08029160
 80213e4:	20000ee8 	.word	0x20000ee8
 80213e8:	20000ef0 	.word	0x20000ef0
 80213ec:	08029163 	.word	0x08029163
 80213f0:	20000eec 	.word	0x20000eec
 80213f4:	2000016c 	.word	0x2000016c
 80213f8:	20000edb 	.word	0x20000edb
 80213fc:	08029167 	.word	0x08029167
 8021400:	0802918a 	.word	0x0802918a
 8021404:	08029176 	.word	0x08029176
 8021408:	08029189 	.word	0x08029189
 802140c:	20000ed0 	.word	0x20000ed0

08021410 <_vsniprintf_r>:
 8021410:	b530      	push	{r4, r5, lr}
 8021412:	1e14      	subs	r4, r2, #0
 8021414:	4605      	mov	r5, r0
 8021416:	b09b      	sub	sp, #108	; 0x6c
 8021418:	4618      	mov	r0, r3
 802141a:	da05      	bge.n	8021428 <_vsniprintf_r+0x18>
 802141c:	238b      	movs	r3, #139	; 0x8b
 802141e:	602b      	str	r3, [r5, #0]
 8021420:	f04f 30ff 	mov.w	r0, #4294967295
 8021424:	b01b      	add	sp, #108	; 0x6c
 8021426:	bd30      	pop	{r4, r5, pc}
 8021428:	f44f 7302 	mov.w	r3, #520	; 0x208
 802142c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021430:	bf14      	ite	ne
 8021432:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021436:	4623      	moveq	r3, r4
 8021438:	9302      	str	r3, [sp, #8]
 802143a:	9305      	str	r3, [sp, #20]
 802143c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021440:	9100      	str	r1, [sp, #0]
 8021442:	9104      	str	r1, [sp, #16]
 8021444:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021448:	4602      	mov	r2, r0
 802144a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802144c:	4669      	mov	r1, sp
 802144e:	4628      	mov	r0, r5
 8021450:	f000 fb94 	bl	8021b7c <_svfiprintf_r>
 8021454:	1c43      	adds	r3, r0, #1
 8021456:	bfbc      	itt	lt
 8021458:	238b      	movlt	r3, #139	; 0x8b
 802145a:	602b      	strlt	r3, [r5, #0]
 802145c:	2c00      	cmp	r4, #0
 802145e:	d0e1      	beq.n	8021424 <_vsniprintf_r+0x14>
 8021460:	9b00      	ldr	r3, [sp, #0]
 8021462:	2200      	movs	r2, #0
 8021464:	701a      	strb	r2, [r3, #0]
 8021466:	e7dd      	b.n	8021424 <_vsniprintf_r+0x14>

08021468 <vsniprintf>:
 8021468:	b507      	push	{r0, r1, r2, lr}
 802146a:	9300      	str	r3, [sp, #0]
 802146c:	4613      	mov	r3, r2
 802146e:	460a      	mov	r2, r1
 8021470:	4601      	mov	r1, r0
 8021472:	4803      	ldr	r0, [pc, #12]	; (8021480 <vsniprintf+0x18>)
 8021474:	6800      	ldr	r0, [r0, #0]
 8021476:	f7ff ffcb 	bl	8021410 <_vsniprintf_r>
 802147a:	b003      	add	sp, #12
 802147c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021480:	20000108 	.word	0x20000108

08021484 <__swbuf_r>:
 8021484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021486:	460e      	mov	r6, r1
 8021488:	4614      	mov	r4, r2
 802148a:	4605      	mov	r5, r0
 802148c:	b118      	cbz	r0, 8021496 <__swbuf_r+0x12>
 802148e:	6983      	ldr	r3, [r0, #24]
 8021490:	b90b      	cbnz	r3, 8021496 <__swbuf_r+0x12>
 8021492:	f7fe f8a9 	bl	801f5e8 <__sinit>
 8021496:	4b21      	ldr	r3, [pc, #132]	; (802151c <__swbuf_r+0x98>)
 8021498:	429c      	cmp	r4, r3
 802149a:	d12b      	bne.n	80214f4 <__swbuf_r+0x70>
 802149c:	686c      	ldr	r4, [r5, #4]
 802149e:	69a3      	ldr	r3, [r4, #24]
 80214a0:	60a3      	str	r3, [r4, #8]
 80214a2:	89a3      	ldrh	r3, [r4, #12]
 80214a4:	071a      	lsls	r2, r3, #28
 80214a6:	d52f      	bpl.n	8021508 <__swbuf_r+0x84>
 80214a8:	6923      	ldr	r3, [r4, #16]
 80214aa:	b36b      	cbz	r3, 8021508 <__swbuf_r+0x84>
 80214ac:	6923      	ldr	r3, [r4, #16]
 80214ae:	6820      	ldr	r0, [r4, #0]
 80214b0:	1ac0      	subs	r0, r0, r3
 80214b2:	6963      	ldr	r3, [r4, #20]
 80214b4:	b2f6      	uxtb	r6, r6
 80214b6:	4283      	cmp	r3, r0
 80214b8:	4637      	mov	r7, r6
 80214ba:	dc04      	bgt.n	80214c6 <__swbuf_r+0x42>
 80214bc:	4621      	mov	r1, r4
 80214be:	4628      	mov	r0, r5
 80214c0:	f7fd ffec 	bl	801f49c <_fflush_r>
 80214c4:	bb30      	cbnz	r0, 8021514 <__swbuf_r+0x90>
 80214c6:	68a3      	ldr	r3, [r4, #8]
 80214c8:	3b01      	subs	r3, #1
 80214ca:	60a3      	str	r3, [r4, #8]
 80214cc:	6823      	ldr	r3, [r4, #0]
 80214ce:	1c5a      	adds	r2, r3, #1
 80214d0:	6022      	str	r2, [r4, #0]
 80214d2:	701e      	strb	r6, [r3, #0]
 80214d4:	6963      	ldr	r3, [r4, #20]
 80214d6:	3001      	adds	r0, #1
 80214d8:	4283      	cmp	r3, r0
 80214da:	d004      	beq.n	80214e6 <__swbuf_r+0x62>
 80214dc:	89a3      	ldrh	r3, [r4, #12]
 80214de:	07db      	lsls	r3, r3, #31
 80214e0:	d506      	bpl.n	80214f0 <__swbuf_r+0x6c>
 80214e2:	2e0a      	cmp	r6, #10
 80214e4:	d104      	bne.n	80214f0 <__swbuf_r+0x6c>
 80214e6:	4621      	mov	r1, r4
 80214e8:	4628      	mov	r0, r5
 80214ea:	f7fd ffd7 	bl	801f49c <_fflush_r>
 80214ee:	b988      	cbnz	r0, 8021514 <__swbuf_r+0x90>
 80214f0:	4638      	mov	r0, r7
 80214f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80214f4:	4b0a      	ldr	r3, [pc, #40]	; (8021520 <__swbuf_r+0x9c>)
 80214f6:	429c      	cmp	r4, r3
 80214f8:	d101      	bne.n	80214fe <__swbuf_r+0x7a>
 80214fa:	68ac      	ldr	r4, [r5, #8]
 80214fc:	e7cf      	b.n	802149e <__swbuf_r+0x1a>
 80214fe:	4b09      	ldr	r3, [pc, #36]	; (8021524 <__swbuf_r+0xa0>)
 8021500:	429c      	cmp	r4, r3
 8021502:	bf08      	it	eq
 8021504:	68ec      	ldreq	r4, [r5, #12]
 8021506:	e7ca      	b.n	802149e <__swbuf_r+0x1a>
 8021508:	4621      	mov	r1, r4
 802150a:	4628      	mov	r0, r5
 802150c:	f000 f81e 	bl	802154c <__swsetup_r>
 8021510:	2800      	cmp	r0, #0
 8021512:	d0cb      	beq.n	80214ac <__swbuf_r+0x28>
 8021514:	f04f 37ff 	mov.w	r7, #4294967295
 8021518:	e7ea      	b.n	80214f0 <__swbuf_r+0x6c>
 802151a:	bf00      	nop
 802151c:	08028d64 	.word	0x08028d64
 8021520:	08028d84 	.word	0x08028d84
 8021524:	08028d44 	.word	0x08028d44

08021528 <_write_r>:
 8021528:	b538      	push	{r3, r4, r5, lr}
 802152a:	4d07      	ldr	r5, [pc, #28]	; (8021548 <_write_r+0x20>)
 802152c:	4604      	mov	r4, r0
 802152e:	4608      	mov	r0, r1
 8021530:	4611      	mov	r1, r2
 8021532:	2200      	movs	r2, #0
 8021534:	602a      	str	r2, [r5, #0]
 8021536:	461a      	mov	r2, r3
 8021538:	f7df fc40 	bl	8000dbc <_write>
 802153c:	1c43      	adds	r3, r0, #1
 802153e:	d102      	bne.n	8021546 <_write_r+0x1e>
 8021540:	682b      	ldr	r3, [r5, #0]
 8021542:	b103      	cbz	r3, 8021546 <_write_r+0x1e>
 8021544:	6023      	str	r3, [r4, #0]
 8021546:	bd38      	pop	{r3, r4, r5, pc}
 8021548:	20000f94 	.word	0x20000f94

0802154c <__swsetup_r>:
 802154c:	4b32      	ldr	r3, [pc, #200]	; (8021618 <__swsetup_r+0xcc>)
 802154e:	b570      	push	{r4, r5, r6, lr}
 8021550:	681d      	ldr	r5, [r3, #0]
 8021552:	4606      	mov	r6, r0
 8021554:	460c      	mov	r4, r1
 8021556:	b125      	cbz	r5, 8021562 <__swsetup_r+0x16>
 8021558:	69ab      	ldr	r3, [r5, #24]
 802155a:	b913      	cbnz	r3, 8021562 <__swsetup_r+0x16>
 802155c:	4628      	mov	r0, r5
 802155e:	f7fe f843 	bl	801f5e8 <__sinit>
 8021562:	4b2e      	ldr	r3, [pc, #184]	; (802161c <__swsetup_r+0xd0>)
 8021564:	429c      	cmp	r4, r3
 8021566:	d10f      	bne.n	8021588 <__swsetup_r+0x3c>
 8021568:	686c      	ldr	r4, [r5, #4]
 802156a:	89a3      	ldrh	r3, [r4, #12]
 802156c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021570:	0719      	lsls	r1, r3, #28
 8021572:	d42c      	bmi.n	80215ce <__swsetup_r+0x82>
 8021574:	06dd      	lsls	r5, r3, #27
 8021576:	d411      	bmi.n	802159c <__swsetup_r+0x50>
 8021578:	2309      	movs	r3, #9
 802157a:	6033      	str	r3, [r6, #0]
 802157c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021580:	81a3      	strh	r3, [r4, #12]
 8021582:	f04f 30ff 	mov.w	r0, #4294967295
 8021586:	e03e      	b.n	8021606 <__swsetup_r+0xba>
 8021588:	4b25      	ldr	r3, [pc, #148]	; (8021620 <__swsetup_r+0xd4>)
 802158a:	429c      	cmp	r4, r3
 802158c:	d101      	bne.n	8021592 <__swsetup_r+0x46>
 802158e:	68ac      	ldr	r4, [r5, #8]
 8021590:	e7eb      	b.n	802156a <__swsetup_r+0x1e>
 8021592:	4b24      	ldr	r3, [pc, #144]	; (8021624 <__swsetup_r+0xd8>)
 8021594:	429c      	cmp	r4, r3
 8021596:	bf08      	it	eq
 8021598:	68ec      	ldreq	r4, [r5, #12]
 802159a:	e7e6      	b.n	802156a <__swsetup_r+0x1e>
 802159c:	0758      	lsls	r0, r3, #29
 802159e:	d512      	bpl.n	80215c6 <__swsetup_r+0x7a>
 80215a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80215a2:	b141      	cbz	r1, 80215b6 <__swsetup_r+0x6a>
 80215a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80215a8:	4299      	cmp	r1, r3
 80215aa:	d002      	beq.n	80215b2 <__swsetup_r+0x66>
 80215ac:	4630      	mov	r0, r6
 80215ae:	f7fe fc6b 	bl	801fe88 <_free_r>
 80215b2:	2300      	movs	r3, #0
 80215b4:	6363      	str	r3, [r4, #52]	; 0x34
 80215b6:	89a3      	ldrh	r3, [r4, #12]
 80215b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80215bc:	81a3      	strh	r3, [r4, #12]
 80215be:	2300      	movs	r3, #0
 80215c0:	6063      	str	r3, [r4, #4]
 80215c2:	6923      	ldr	r3, [r4, #16]
 80215c4:	6023      	str	r3, [r4, #0]
 80215c6:	89a3      	ldrh	r3, [r4, #12]
 80215c8:	f043 0308 	orr.w	r3, r3, #8
 80215cc:	81a3      	strh	r3, [r4, #12]
 80215ce:	6923      	ldr	r3, [r4, #16]
 80215d0:	b94b      	cbnz	r3, 80215e6 <__swsetup_r+0x9a>
 80215d2:	89a3      	ldrh	r3, [r4, #12]
 80215d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80215d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80215dc:	d003      	beq.n	80215e6 <__swsetup_r+0x9a>
 80215de:	4621      	mov	r1, r4
 80215e0:	4630      	mov	r0, r6
 80215e2:	f7fe fbdb 	bl	801fd9c <__smakebuf_r>
 80215e6:	89a0      	ldrh	r0, [r4, #12]
 80215e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80215ec:	f010 0301 	ands.w	r3, r0, #1
 80215f0:	d00a      	beq.n	8021608 <__swsetup_r+0xbc>
 80215f2:	2300      	movs	r3, #0
 80215f4:	60a3      	str	r3, [r4, #8]
 80215f6:	6963      	ldr	r3, [r4, #20]
 80215f8:	425b      	negs	r3, r3
 80215fa:	61a3      	str	r3, [r4, #24]
 80215fc:	6923      	ldr	r3, [r4, #16]
 80215fe:	b943      	cbnz	r3, 8021612 <__swsetup_r+0xc6>
 8021600:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021604:	d1ba      	bne.n	802157c <__swsetup_r+0x30>
 8021606:	bd70      	pop	{r4, r5, r6, pc}
 8021608:	0781      	lsls	r1, r0, #30
 802160a:	bf58      	it	pl
 802160c:	6963      	ldrpl	r3, [r4, #20]
 802160e:	60a3      	str	r3, [r4, #8]
 8021610:	e7f4      	b.n	80215fc <__swsetup_r+0xb0>
 8021612:	2000      	movs	r0, #0
 8021614:	e7f7      	b.n	8021606 <__swsetup_r+0xba>
 8021616:	bf00      	nop
 8021618:	20000108 	.word	0x20000108
 802161c:	08028d64 	.word	0x08028d64
 8021620:	08028d84 	.word	0x08028d84
 8021624:	08028d44 	.word	0x08028d44

08021628 <__register_exitproc>:
 8021628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802162c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80216e8 <__register_exitproc+0xc0>
 8021630:	4606      	mov	r6, r0
 8021632:	f8d8 0000 	ldr.w	r0, [r8]
 8021636:	461f      	mov	r7, r3
 8021638:	460d      	mov	r5, r1
 802163a:	4691      	mov	r9, r2
 802163c:	f7fe fb87 	bl	801fd4e <__retarget_lock_acquire_recursive>
 8021640:	4b25      	ldr	r3, [pc, #148]	; (80216d8 <__register_exitproc+0xb0>)
 8021642:	681c      	ldr	r4, [r3, #0]
 8021644:	b934      	cbnz	r4, 8021654 <__register_exitproc+0x2c>
 8021646:	4c25      	ldr	r4, [pc, #148]	; (80216dc <__register_exitproc+0xb4>)
 8021648:	601c      	str	r4, [r3, #0]
 802164a:	4b25      	ldr	r3, [pc, #148]	; (80216e0 <__register_exitproc+0xb8>)
 802164c:	b113      	cbz	r3, 8021654 <__register_exitproc+0x2c>
 802164e:	681b      	ldr	r3, [r3, #0]
 8021650:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8021654:	6863      	ldr	r3, [r4, #4]
 8021656:	2b1f      	cmp	r3, #31
 8021658:	dd07      	ble.n	802166a <__register_exitproc+0x42>
 802165a:	f8d8 0000 	ldr.w	r0, [r8]
 802165e:	f7fe fb78 	bl	801fd52 <__retarget_lock_release_recursive>
 8021662:	f04f 30ff 	mov.w	r0, #4294967295
 8021666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802166a:	b34e      	cbz	r6, 80216c0 <__register_exitproc+0x98>
 802166c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021670:	b988      	cbnz	r0, 8021696 <__register_exitproc+0x6e>
 8021672:	4b1c      	ldr	r3, [pc, #112]	; (80216e4 <__register_exitproc+0xbc>)
 8021674:	b923      	cbnz	r3, 8021680 <__register_exitproc+0x58>
 8021676:	f8d8 0000 	ldr.w	r0, [r8]
 802167a:	f7fe fb69 	bl	801fd50 <__retarget_lock_release>
 802167e:	e7f0      	b.n	8021662 <__register_exitproc+0x3a>
 8021680:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021684:	f7fe fbca 	bl	801fe1c <malloc>
 8021688:	2800      	cmp	r0, #0
 802168a:	d0f4      	beq.n	8021676 <__register_exitproc+0x4e>
 802168c:	2300      	movs	r3, #0
 802168e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8021692:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8021696:	6863      	ldr	r3, [r4, #4]
 8021698:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802169c:	2201      	movs	r2, #1
 802169e:	409a      	lsls	r2, r3
 80216a0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80216a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80216a8:	4313      	orrs	r3, r2
 80216aa:	2e02      	cmp	r6, #2
 80216ac:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80216b0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80216b4:	bf02      	ittt	eq
 80216b6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80216ba:	431a      	orreq	r2, r3
 80216bc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80216c0:	6863      	ldr	r3, [r4, #4]
 80216c2:	f8d8 0000 	ldr.w	r0, [r8]
 80216c6:	1c5a      	adds	r2, r3, #1
 80216c8:	3302      	adds	r3, #2
 80216ca:	6062      	str	r2, [r4, #4]
 80216cc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80216d0:	f7fe fb3f 	bl	801fd52 <__retarget_lock_release_recursive>
 80216d4:	2000      	movs	r0, #0
 80216d6:	e7c6      	b.n	8021666 <__register_exitproc+0x3e>
 80216d8:	20000f80 	.word	0x20000f80
 80216dc:	20000ef4 	.word	0x20000ef4
 80216e0:	00000000 	.word	0x00000000
 80216e4:	0801fe1d 	.word	0x0801fe1d
 80216e8:	20000174 	.word	0x20000174

080216ec <abs>:
 80216ec:	2800      	cmp	r0, #0
 80216ee:	bfb8      	it	lt
 80216f0:	4240      	neglt	r0, r0
 80216f2:	4770      	bx	lr

080216f4 <__assert_func>:
 80216f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80216f6:	4614      	mov	r4, r2
 80216f8:	461a      	mov	r2, r3
 80216fa:	4b09      	ldr	r3, [pc, #36]	; (8021720 <__assert_func+0x2c>)
 80216fc:	681b      	ldr	r3, [r3, #0]
 80216fe:	4605      	mov	r5, r0
 8021700:	68d8      	ldr	r0, [r3, #12]
 8021702:	b14c      	cbz	r4, 8021718 <__assert_func+0x24>
 8021704:	4b07      	ldr	r3, [pc, #28]	; (8021724 <__assert_func+0x30>)
 8021706:	9100      	str	r1, [sp, #0]
 8021708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802170c:	4906      	ldr	r1, [pc, #24]	; (8021728 <__assert_func+0x34>)
 802170e:	462b      	mov	r3, r5
 8021710:	f000 f854 	bl	80217bc <fiprintf>
 8021714:	f7fd fda8 	bl	801f268 <abort>
 8021718:	4b04      	ldr	r3, [pc, #16]	; (802172c <__assert_func+0x38>)
 802171a:	461c      	mov	r4, r3
 802171c:	e7f3      	b.n	8021706 <__assert_func+0x12>
 802171e:	bf00      	nop
 8021720:	20000108 	.word	0x20000108
 8021724:	0802919c 	.word	0x0802919c
 8021728:	080291a9 	.word	0x080291a9
 802172c:	080291d7 	.word	0x080291d7

08021730 <_close_r>:
 8021730:	b538      	push	{r3, r4, r5, lr}
 8021732:	4d06      	ldr	r5, [pc, #24]	; (802174c <_close_r+0x1c>)
 8021734:	2300      	movs	r3, #0
 8021736:	4604      	mov	r4, r0
 8021738:	4608      	mov	r0, r1
 802173a:	602b      	str	r3, [r5, #0]
 802173c:	f7df fb5a 	bl	8000df4 <_close>
 8021740:	1c43      	adds	r3, r0, #1
 8021742:	d102      	bne.n	802174a <_close_r+0x1a>
 8021744:	682b      	ldr	r3, [r5, #0]
 8021746:	b103      	cbz	r3, 802174a <_close_r+0x1a>
 8021748:	6023      	str	r3, [r4, #0]
 802174a:	bd38      	pop	{r3, r4, r5, pc}
 802174c:	20000f94 	.word	0x20000f94

08021750 <__sflags>:
 8021750:	780b      	ldrb	r3, [r1, #0]
 8021752:	2b72      	cmp	r3, #114	; 0x72
 8021754:	b530      	push	{r4, r5, lr}
 8021756:	d022      	beq.n	802179e <__sflags+0x4e>
 8021758:	2b77      	cmp	r3, #119	; 0x77
 802175a:	d024      	beq.n	80217a6 <__sflags+0x56>
 802175c:	2b61      	cmp	r3, #97	; 0x61
 802175e:	d027      	beq.n	80217b0 <__sflags+0x60>
 8021760:	2316      	movs	r3, #22
 8021762:	6003      	str	r3, [r0, #0]
 8021764:	2000      	movs	r0, #0
 8021766:	bd30      	pop	{r4, r5, pc}
 8021768:	2d62      	cmp	r5, #98	; 0x62
 802176a:	d012      	beq.n	8021792 <__sflags+0x42>
 802176c:	2d78      	cmp	r5, #120	; 0x78
 802176e:	d013      	beq.n	8021798 <__sflags+0x48>
 8021770:	2d2b      	cmp	r5, #43	; 0x2b
 8021772:	d107      	bne.n	8021784 <__sflags+0x34>
 8021774:	f020 001c 	bic.w	r0, r0, #28
 8021778:	f023 0303 	bic.w	r3, r3, #3
 802177c:	f040 0010 	orr.w	r0, r0, #16
 8021780:	f043 0302 	orr.w	r3, r3, #2
 8021784:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8021788:	2d00      	cmp	r5, #0
 802178a:	d1ed      	bne.n	8021768 <__sflags+0x18>
 802178c:	4323      	orrs	r3, r4
 802178e:	6013      	str	r3, [r2, #0]
 8021790:	e7e9      	b.n	8021766 <__sflags+0x16>
 8021792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021796:	e7f5      	b.n	8021784 <__sflags+0x34>
 8021798:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802179c:	e7f2      	b.n	8021784 <__sflags+0x34>
 802179e:	2400      	movs	r4, #0
 80217a0:	4623      	mov	r3, r4
 80217a2:	2004      	movs	r0, #4
 80217a4:	e7ee      	b.n	8021784 <__sflags+0x34>
 80217a6:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80217aa:	2301      	movs	r3, #1
 80217ac:	2008      	movs	r0, #8
 80217ae:	e7e9      	b.n	8021784 <__sflags+0x34>
 80217b0:	f44f 7402 	mov.w	r4, #520	; 0x208
 80217b4:	2301      	movs	r3, #1
 80217b6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80217ba:	e7e3      	b.n	8021784 <__sflags+0x34>

080217bc <fiprintf>:
 80217bc:	b40e      	push	{r1, r2, r3}
 80217be:	b503      	push	{r0, r1, lr}
 80217c0:	4601      	mov	r1, r0
 80217c2:	ab03      	add	r3, sp, #12
 80217c4:	4805      	ldr	r0, [pc, #20]	; (80217dc <fiprintf+0x20>)
 80217c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80217ca:	6800      	ldr	r0, [r0, #0]
 80217cc:	9301      	str	r3, [sp, #4]
 80217ce:	f000 faff 	bl	8021dd0 <_vfiprintf_r>
 80217d2:	b002      	add	sp, #8
 80217d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80217d8:	b003      	add	sp, #12
 80217da:	4770      	bx	lr
 80217dc:	20000108 	.word	0x20000108

080217e0 <_fstat_r>:
 80217e0:	b538      	push	{r3, r4, r5, lr}
 80217e2:	4d07      	ldr	r5, [pc, #28]	; (8021800 <_fstat_r+0x20>)
 80217e4:	2300      	movs	r3, #0
 80217e6:	4604      	mov	r4, r0
 80217e8:	4608      	mov	r0, r1
 80217ea:	4611      	mov	r1, r2
 80217ec:	602b      	str	r3, [r5, #0]
 80217ee:	f7df fb0d 	bl	8000e0c <_fstat>
 80217f2:	1c43      	adds	r3, r0, #1
 80217f4:	d102      	bne.n	80217fc <_fstat_r+0x1c>
 80217f6:	682b      	ldr	r3, [r5, #0]
 80217f8:	b103      	cbz	r3, 80217fc <_fstat_r+0x1c>
 80217fa:	6023      	str	r3, [r4, #0]
 80217fc:	bd38      	pop	{r3, r4, r5, pc}
 80217fe:	bf00      	nop
 8021800:	20000f94 	.word	0x20000f94

08021804 <_findenv_r>:
 8021804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021808:	4607      	mov	r7, r0
 802180a:	4689      	mov	r9, r1
 802180c:	4616      	mov	r6, r2
 802180e:	f000 fe85 	bl	802251c <__env_lock>
 8021812:	4b18      	ldr	r3, [pc, #96]	; (8021874 <_findenv_r+0x70>)
 8021814:	681c      	ldr	r4, [r3, #0]
 8021816:	469a      	mov	sl, r3
 8021818:	b134      	cbz	r4, 8021828 <_findenv_r+0x24>
 802181a:	464b      	mov	r3, r9
 802181c:	4698      	mov	r8, r3
 802181e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8021822:	b139      	cbz	r1, 8021834 <_findenv_r+0x30>
 8021824:	293d      	cmp	r1, #61	; 0x3d
 8021826:	d1f9      	bne.n	802181c <_findenv_r+0x18>
 8021828:	4638      	mov	r0, r7
 802182a:	f000 fe7d 	bl	8022528 <__env_unlock>
 802182e:	2000      	movs	r0, #0
 8021830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021834:	eba8 0809 	sub.w	r8, r8, r9
 8021838:	46a3      	mov	fp, r4
 802183a:	f854 0b04 	ldr.w	r0, [r4], #4
 802183e:	2800      	cmp	r0, #0
 8021840:	d0f2      	beq.n	8021828 <_findenv_r+0x24>
 8021842:	4642      	mov	r2, r8
 8021844:	4649      	mov	r1, r9
 8021846:	f000 fe49 	bl	80224dc <strncmp>
 802184a:	2800      	cmp	r0, #0
 802184c:	d1f4      	bne.n	8021838 <_findenv_r+0x34>
 802184e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8021852:	eb03 0508 	add.w	r5, r3, r8
 8021856:	f813 3008 	ldrb.w	r3, [r3, r8]
 802185a:	2b3d      	cmp	r3, #61	; 0x3d
 802185c:	d1ec      	bne.n	8021838 <_findenv_r+0x34>
 802185e:	f8da 3000 	ldr.w	r3, [sl]
 8021862:	ebab 0303 	sub.w	r3, fp, r3
 8021866:	109b      	asrs	r3, r3, #2
 8021868:	4638      	mov	r0, r7
 802186a:	6033      	str	r3, [r6, #0]
 802186c:	f000 fe5c 	bl	8022528 <__env_unlock>
 8021870:	1c68      	adds	r0, r5, #1
 8021872:	e7dd      	b.n	8021830 <_findenv_r+0x2c>
 8021874:	20000000 	.word	0x20000000

08021878 <_getenv_r>:
 8021878:	b507      	push	{r0, r1, r2, lr}
 802187a:	aa01      	add	r2, sp, #4
 802187c:	f7ff ffc2 	bl	8021804 <_findenv_r>
 8021880:	b003      	add	sp, #12
 8021882:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08021888 <__gettzinfo>:
 8021888:	4800      	ldr	r0, [pc, #0]	; (802188c <__gettzinfo+0x4>)
 802188a:	4770      	bx	lr
 802188c:	20000178 	.word	0x20000178

08021890 <gmtime_r>:
 8021890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021894:	e9d0 6700 	ldrd	r6, r7, [r0]
 8021898:	460c      	mov	r4, r1
 802189a:	4a51      	ldr	r2, [pc, #324]	; (80219e0 <gmtime_r+0x150>)
 802189c:	2300      	movs	r3, #0
 802189e:	4630      	mov	r0, r6
 80218a0:	4639      	mov	r1, r7
 80218a2:	f7de ff87 	bl	80007b4 <__aeabi_ldivmod>
 80218a6:	4639      	mov	r1, r7
 80218a8:	4605      	mov	r5, r0
 80218aa:	4a4d      	ldr	r2, [pc, #308]	; (80219e0 <gmtime_r+0x150>)
 80218ac:	4630      	mov	r0, r6
 80218ae:	2300      	movs	r3, #0
 80218b0:	f7de ff80 	bl	80007b4 <__aeabi_ldivmod>
 80218b4:	2a00      	cmp	r2, #0
 80218b6:	bfbc      	itt	lt
 80218b8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80218bc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80218c0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80218c4:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80218c8:	fbb2 f3f1 	udiv	r3, r2, r1
 80218cc:	fb01 2213 	mls	r2, r1, r3, r2
 80218d0:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80218d4:	bfac      	ite	ge
 80218d6:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80218da:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80218de:	60a3      	str	r3, [r4, #8]
 80218e0:	fbb2 f3f1 	udiv	r3, r2, r1
 80218e4:	fb01 2213 	mls	r2, r1, r3, r2
 80218e8:	6063      	str	r3, [r4, #4]
 80218ea:	6022      	str	r2, [r4, #0]
 80218ec:	1cc3      	adds	r3, r0, #3
 80218ee:	2207      	movs	r2, #7
 80218f0:	fb93 f2f2 	sdiv	r2, r3, r2
 80218f4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80218f8:	1a9b      	subs	r3, r3, r2
 80218fa:	bf48      	it	mi
 80218fc:	3307      	addmi	r3, #7
 80218fe:	2800      	cmp	r0, #0
 8021900:	61a3      	str	r3, [r4, #24]
 8021902:	bfb8      	it	lt
 8021904:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8021908:	4936      	ldr	r1, [pc, #216]	; (80219e4 <gmtime_r+0x154>)
 802190a:	bfae      	itee	ge
 802190c:	fb90 f1f1 	sdivge	r1, r0, r1
 8021910:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8021914:	fb93 f1f1 	sdivlt	r1, r3, r1
 8021918:	4b33      	ldr	r3, [pc, #204]	; (80219e8 <gmtime_r+0x158>)
 802191a:	fb03 0001 	mla	r0, r3, r1, r0
 802191e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8021922:	fbb0 f2f2 	udiv	r2, r0, r2
 8021926:	4402      	add	r2, r0
 8021928:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 802192c:	fbb0 f3fc 	udiv	r3, r0, ip
 8021930:	1ad2      	subs	r2, r2, r3
 8021932:	f240 176d 	movw	r7, #365	; 0x16d
 8021936:	4b2d      	ldr	r3, [pc, #180]	; (80219ec <gmtime_r+0x15c>)
 8021938:	fbb0 f3f3 	udiv	r3, r0, r3
 802193c:	2664      	movs	r6, #100	; 0x64
 802193e:	1ad3      	subs	r3, r2, r3
 8021940:	fbb3 f5f7 	udiv	r5, r3, r7
 8021944:	fbb3 f3fc 	udiv	r3, r3, ip
 8021948:	fbb5 f2f6 	udiv	r2, r5, r6
 802194c:	1ad3      	subs	r3, r2, r3
 802194e:	4403      	add	r3, r0
 8021950:	fb07 3315 	mls	r3, r7, r5, r3
 8021954:	2099      	movs	r0, #153	; 0x99
 8021956:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 802195a:	f10c 0c02 	add.w	ip, ip, #2
 802195e:	f103 0e01 	add.w	lr, r3, #1
 8021962:	fbbc f7f0 	udiv	r7, ip, r0
 8021966:	4378      	muls	r0, r7
 8021968:	3002      	adds	r0, #2
 802196a:	f04f 0805 	mov.w	r8, #5
 802196e:	fbb0 f0f8 	udiv	r0, r0, r8
 8021972:	ebae 0000 	sub.w	r0, lr, r0
 8021976:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 802197a:	45f4      	cmp	ip, lr
 802197c:	bf94      	ite	ls
 802197e:	f04f 0c02 	movls.w	ip, #2
 8021982:	f06f 0c09 	mvnhi.w	ip, #9
 8021986:	4467      	add	r7, ip
 8021988:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 802198c:	fb0c 5101 	mla	r1, ip, r1, r5
 8021990:	2f01      	cmp	r7, #1
 8021992:	bf98      	it	ls
 8021994:	3101      	addls	r1, #1
 8021996:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 802199a:	d30c      	bcc.n	80219b6 <gmtime_r+0x126>
 802199c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80219a0:	61e3      	str	r3, [r4, #28]
 80219a2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80219a6:	2300      	movs	r3, #0
 80219a8:	60e0      	str	r0, [r4, #12]
 80219aa:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80219ae:	6223      	str	r3, [r4, #32]
 80219b0:	4620      	mov	r0, r4
 80219b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219b6:	f015 0f03 	tst.w	r5, #3
 80219ba:	d102      	bne.n	80219c2 <gmtime_r+0x132>
 80219bc:	fb06 5212 	mls	r2, r6, r2, r5
 80219c0:	b95a      	cbnz	r2, 80219da <gmtime_r+0x14a>
 80219c2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80219c6:	fbb5 f2f6 	udiv	r2, r5, r6
 80219ca:	fb06 5212 	mls	r2, r6, r2, r5
 80219ce:	fab2 f282 	clz	r2, r2
 80219d2:	0952      	lsrs	r2, r2, #5
 80219d4:	333b      	adds	r3, #59	; 0x3b
 80219d6:	4413      	add	r3, r2
 80219d8:	e7e2      	b.n	80219a0 <gmtime_r+0x110>
 80219da:	2201      	movs	r2, #1
 80219dc:	e7fa      	b.n	80219d4 <gmtime_r+0x144>
 80219de:	bf00      	nop
 80219e0:	00015180 	.word	0x00015180
 80219e4:	00023ab1 	.word	0x00023ab1
 80219e8:	fffdc54f 	.word	0xfffdc54f
 80219ec:	00023ab0 	.word	0x00023ab0

080219f0 <_isatty_r>:
 80219f0:	b538      	push	{r3, r4, r5, lr}
 80219f2:	4d06      	ldr	r5, [pc, #24]	; (8021a0c <_isatty_r+0x1c>)
 80219f4:	2300      	movs	r3, #0
 80219f6:	4604      	mov	r4, r0
 80219f8:	4608      	mov	r0, r1
 80219fa:	602b      	str	r3, [r5, #0]
 80219fc:	f7df fa16 	bl	8000e2c <_isatty>
 8021a00:	1c43      	adds	r3, r0, #1
 8021a02:	d102      	bne.n	8021a0a <_isatty_r+0x1a>
 8021a04:	682b      	ldr	r3, [r5, #0]
 8021a06:	b103      	cbz	r3, 8021a0a <_isatty_r+0x1a>
 8021a08:	6023      	str	r3, [r4, #0]
 8021a0a:	bd38      	pop	{r3, r4, r5, pc}
 8021a0c:	20000f94 	.word	0x20000f94

08021a10 <labs>:
 8021a10:	2800      	cmp	r0, #0
 8021a12:	bfb8      	it	lt
 8021a14:	4240      	neglt	r0, r0
 8021a16:	4770      	bx	lr

08021a18 <_lseek_r>:
 8021a18:	b538      	push	{r3, r4, r5, lr}
 8021a1a:	4d07      	ldr	r5, [pc, #28]	; (8021a38 <_lseek_r+0x20>)
 8021a1c:	4604      	mov	r4, r0
 8021a1e:	4608      	mov	r0, r1
 8021a20:	4611      	mov	r1, r2
 8021a22:	2200      	movs	r2, #0
 8021a24:	602a      	str	r2, [r5, #0]
 8021a26:	461a      	mov	r2, r3
 8021a28:	f7df fa0b 	bl	8000e42 <_lseek>
 8021a2c:	1c43      	adds	r3, r0, #1
 8021a2e:	d102      	bne.n	8021a36 <_lseek_r+0x1e>
 8021a30:	682b      	ldr	r3, [r5, #0]
 8021a32:	b103      	cbz	r3, 8021a36 <_lseek_r+0x1e>
 8021a34:	6023      	str	r3, [r4, #0]
 8021a36:	bd38      	pop	{r3, r4, r5, pc}
 8021a38:	20000f94 	.word	0x20000f94

08021a3c <__ascii_mbtowc>:
 8021a3c:	b082      	sub	sp, #8
 8021a3e:	b901      	cbnz	r1, 8021a42 <__ascii_mbtowc+0x6>
 8021a40:	a901      	add	r1, sp, #4
 8021a42:	b142      	cbz	r2, 8021a56 <__ascii_mbtowc+0x1a>
 8021a44:	b14b      	cbz	r3, 8021a5a <__ascii_mbtowc+0x1e>
 8021a46:	7813      	ldrb	r3, [r2, #0]
 8021a48:	600b      	str	r3, [r1, #0]
 8021a4a:	7812      	ldrb	r2, [r2, #0]
 8021a4c:	1e10      	subs	r0, r2, #0
 8021a4e:	bf18      	it	ne
 8021a50:	2001      	movne	r0, #1
 8021a52:	b002      	add	sp, #8
 8021a54:	4770      	bx	lr
 8021a56:	4610      	mov	r0, r2
 8021a58:	e7fb      	b.n	8021a52 <__ascii_mbtowc+0x16>
 8021a5a:	f06f 0001 	mvn.w	r0, #1
 8021a5e:	e7f8      	b.n	8021a52 <__ascii_mbtowc+0x16>

08021a60 <__malloc_lock>:
 8021a60:	4801      	ldr	r0, [pc, #4]	; (8021a68 <__malloc_lock+0x8>)
 8021a62:	f7fe b974 	b.w	801fd4e <__retarget_lock_acquire_recursive>
 8021a66:	bf00      	nop
 8021a68:	20000f8c 	.word	0x20000f8c

08021a6c <__malloc_unlock>:
 8021a6c:	4801      	ldr	r0, [pc, #4]	; (8021a74 <__malloc_unlock+0x8>)
 8021a6e:	f7fe b970 	b.w	801fd52 <__retarget_lock_release_recursive>
 8021a72:	bf00      	nop
 8021a74:	20000f8c 	.word	0x20000f8c

08021a78 <_realloc_r>:
 8021a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a7a:	4607      	mov	r7, r0
 8021a7c:	4614      	mov	r4, r2
 8021a7e:	460e      	mov	r6, r1
 8021a80:	b921      	cbnz	r1, 8021a8c <_realloc_r+0x14>
 8021a82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021a86:	4611      	mov	r1, r2
 8021a88:	f7fe ba4e 	b.w	801ff28 <_malloc_r>
 8021a8c:	b922      	cbnz	r2, 8021a98 <_realloc_r+0x20>
 8021a8e:	f7fe f9fb 	bl	801fe88 <_free_r>
 8021a92:	4625      	mov	r5, r4
 8021a94:	4628      	mov	r0, r5
 8021a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021a98:	f000 fd66 	bl	8022568 <_malloc_usable_size_r>
 8021a9c:	42a0      	cmp	r0, r4
 8021a9e:	d20f      	bcs.n	8021ac0 <_realloc_r+0x48>
 8021aa0:	4621      	mov	r1, r4
 8021aa2:	4638      	mov	r0, r7
 8021aa4:	f7fe fa40 	bl	801ff28 <_malloc_r>
 8021aa8:	4605      	mov	r5, r0
 8021aaa:	2800      	cmp	r0, #0
 8021aac:	d0f2      	beq.n	8021a94 <_realloc_r+0x1c>
 8021aae:	4631      	mov	r1, r6
 8021ab0:	4622      	mov	r2, r4
 8021ab2:	f7fe f9c3 	bl	801fe3c <memcpy>
 8021ab6:	4631      	mov	r1, r6
 8021ab8:	4638      	mov	r0, r7
 8021aba:	f7fe f9e5 	bl	801fe88 <_free_r>
 8021abe:	e7e9      	b.n	8021a94 <_realloc_r+0x1c>
 8021ac0:	4635      	mov	r5, r6
 8021ac2:	e7e7      	b.n	8021a94 <_realloc_r+0x1c>

08021ac4 <__ssputs_r>:
 8021ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ac8:	688e      	ldr	r6, [r1, #8]
 8021aca:	429e      	cmp	r6, r3
 8021acc:	4682      	mov	sl, r0
 8021ace:	460c      	mov	r4, r1
 8021ad0:	4690      	mov	r8, r2
 8021ad2:	461f      	mov	r7, r3
 8021ad4:	d838      	bhi.n	8021b48 <__ssputs_r+0x84>
 8021ad6:	898a      	ldrh	r2, [r1, #12]
 8021ad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021adc:	d032      	beq.n	8021b44 <__ssputs_r+0x80>
 8021ade:	6825      	ldr	r5, [r4, #0]
 8021ae0:	6909      	ldr	r1, [r1, #16]
 8021ae2:	eba5 0901 	sub.w	r9, r5, r1
 8021ae6:	6965      	ldr	r5, [r4, #20]
 8021ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021aec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021af0:	3301      	adds	r3, #1
 8021af2:	444b      	add	r3, r9
 8021af4:	106d      	asrs	r5, r5, #1
 8021af6:	429d      	cmp	r5, r3
 8021af8:	bf38      	it	cc
 8021afa:	461d      	movcc	r5, r3
 8021afc:	0553      	lsls	r3, r2, #21
 8021afe:	d531      	bpl.n	8021b64 <__ssputs_r+0xa0>
 8021b00:	4629      	mov	r1, r5
 8021b02:	f7fe fa11 	bl	801ff28 <_malloc_r>
 8021b06:	4606      	mov	r6, r0
 8021b08:	b950      	cbnz	r0, 8021b20 <__ssputs_r+0x5c>
 8021b0a:	230c      	movs	r3, #12
 8021b0c:	f8ca 3000 	str.w	r3, [sl]
 8021b10:	89a3      	ldrh	r3, [r4, #12]
 8021b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b16:	81a3      	strh	r3, [r4, #12]
 8021b18:	f04f 30ff 	mov.w	r0, #4294967295
 8021b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b20:	6921      	ldr	r1, [r4, #16]
 8021b22:	464a      	mov	r2, r9
 8021b24:	f7fe f98a 	bl	801fe3c <memcpy>
 8021b28:	89a3      	ldrh	r3, [r4, #12]
 8021b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021b32:	81a3      	strh	r3, [r4, #12]
 8021b34:	6126      	str	r6, [r4, #16]
 8021b36:	6165      	str	r5, [r4, #20]
 8021b38:	444e      	add	r6, r9
 8021b3a:	eba5 0509 	sub.w	r5, r5, r9
 8021b3e:	6026      	str	r6, [r4, #0]
 8021b40:	60a5      	str	r5, [r4, #8]
 8021b42:	463e      	mov	r6, r7
 8021b44:	42be      	cmp	r6, r7
 8021b46:	d900      	bls.n	8021b4a <__ssputs_r+0x86>
 8021b48:	463e      	mov	r6, r7
 8021b4a:	4632      	mov	r2, r6
 8021b4c:	6820      	ldr	r0, [r4, #0]
 8021b4e:	4641      	mov	r1, r8
 8021b50:	f000 fcf0 	bl	8022534 <memmove>
 8021b54:	68a3      	ldr	r3, [r4, #8]
 8021b56:	6822      	ldr	r2, [r4, #0]
 8021b58:	1b9b      	subs	r3, r3, r6
 8021b5a:	4432      	add	r2, r6
 8021b5c:	60a3      	str	r3, [r4, #8]
 8021b5e:	6022      	str	r2, [r4, #0]
 8021b60:	2000      	movs	r0, #0
 8021b62:	e7db      	b.n	8021b1c <__ssputs_r+0x58>
 8021b64:	462a      	mov	r2, r5
 8021b66:	f7ff ff87 	bl	8021a78 <_realloc_r>
 8021b6a:	4606      	mov	r6, r0
 8021b6c:	2800      	cmp	r0, #0
 8021b6e:	d1e1      	bne.n	8021b34 <__ssputs_r+0x70>
 8021b70:	6921      	ldr	r1, [r4, #16]
 8021b72:	4650      	mov	r0, sl
 8021b74:	f7fe f988 	bl	801fe88 <_free_r>
 8021b78:	e7c7      	b.n	8021b0a <__ssputs_r+0x46>
	...

08021b7c <_svfiprintf_r>:
 8021b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b80:	4698      	mov	r8, r3
 8021b82:	898b      	ldrh	r3, [r1, #12]
 8021b84:	061b      	lsls	r3, r3, #24
 8021b86:	b09d      	sub	sp, #116	; 0x74
 8021b88:	4607      	mov	r7, r0
 8021b8a:	460d      	mov	r5, r1
 8021b8c:	4614      	mov	r4, r2
 8021b8e:	d50e      	bpl.n	8021bae <_svfiprintf_r+0x32>
 8021b90:	690b      	ldr	r3, [r1, #16]
 8021b92:	b963      	cbnz	r3, 8021bae <_svfiprintf_r+0x32>
 8021b94:	2140      	movs	r1, #64	; 0x40
 8021b96:	f7fe f9c7 	bl	801ff28 <_malloc_r>
 8021b9a:	6028      	str	r0, [r5, #0]
 8021b9c:	6128      	str	r0, [r5, #16]
 8021b9e:	b920      	cbnz	r0, 8021baa <_svfiprintf_r+0x2e>
 8021ba0:	230c      	movs	r3, #12
 8021ba2:	603b      	str	r3, [r7, #0]
 8021ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8021ba8:	e0d1      	b.n	8021d4e <_svfiprintf_r+0x1d2>
 8021baa:	2340      	movs	r3, #64	; 0x40
 8021bac:	616b      	str	r3, [r5, #20]
 8021bae:	2300      	movs	r3, #0
 8021bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8021bb2:	2320      	movs	r3, #32
 8021bb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8021bbc:	2330      	movs	r3, #48	; 0x30
 8021bbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021d68 <_svfiprintf_r+0x1ec>
 8021bc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021bc6:	f04f 0901 	mov.w	r9, #1
 8021bca:	4623      	mov	r3, r4
 8021bcc:	469a      	mov	sl, r3
 8021bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021bd2:	b10a      	cbz	r2, 8021bd8 <_svfiprintf_r+0x5c>
 8021bd4:	2a25      	cmp	r2, #37	; 0x25
 8021bd6:	d1f9      	bne.n	8021bcc <_svfiprintf_r+0x50>
 8021bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8021bdc:	d00b      	beq.n	8021bf6 <_svfiprintf_r+0x7a>
 8021bde:	465b      	mov	r3, fp
 8021be0:	4622      	mov	r2, r4
 8021be2:	4629      	mov	r1, r5
 8021be4:	4638      	mov	r0, r7
 8021be6:	f7ff ff6d 	bl	8021ac4 <__ssputs_r>
 8021bea:	3001      	adds	r0, #1
 8021bec:	f000 80aa 	beq.w	8021d44 <_svfiprintf_r+0x1c8>
 8021bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021bf2:	445a      	add	r2, fp
 8021bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8021bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8021bfa:	2b00      	cmp	r3, #0
 8021bfc:	f000 80a2 	beq.w	8021d44 <_svfiprintf_r+0x1c8>
 8021c00:	2300      	movs	r3, #0
 8021c02:	f04f 32ff 	mov.w	r2, #4294967295
 8021c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021c0a:	f10a 0a01 	add.w	sl, sl, #1
 8021c0e:	9304      	str	r3, [sp, #16]
 8021c10:	9307      	str	r3, [sp, #28]
 8021c12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021c16:	931a      	str	r3, [sp, #104]	; 0x68
 8021c18:	4654      	mov	r4, sl
 8021c1a:	2205      	movs	r2, #5
 8021c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c20:	4851      	ldr	r0, [pc, #324]	; (8021d68 <_svfiprintf_r+0x1ec>)
 8021c22:	f7de fb1d 	bl	8000260 <memchr>
 8021c26:	9a04      	ldr	r2, [sp, #16]
 8021c28:	b9d8      	cbnz	r0, 8021c62 <_svfiprintf_r+0xe6>
 8021c2a:	06d0      	lsls	r0, r2, #27
 8021c2c:	bf44      	itt	mi
 8021c2e:	2320      	movmi	r3, #32
 8021c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021c34:	0711      	lsls	r1, r2, #28
 8021c36:	bf44      	itt	mi
 8021c38:	232b      	movmi	r3, #43	; 0x2b
 8021c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8021c42:	2b2a      	cmp	r3, #42	; 0x2a
 8021c44:	d015      	beq.n	8021c72 <_svfiprintf_r+0xf6>
 8021c46:	9a07      	ldr	r2, [sp, #28]
 8021c48:	4654      	mov	r4, sl
 8021c4a:	2000      	movs	r0, #0
 8021c4c:	f04f 0c0a 	mov.w	ip, #10
 8021c50:	4621      	mov	r1, r4
 8021c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021c56:	3b30      	subs	r3, #48	; 0x30
 8021c58:	2b09      	cmp	r3, #9
 8021c5a:	d94e      	bls.n	8021cfa <_svfiprintf_r+0x17e>
 8021c5c:	b1b0      	cbz	r0, 8021c8c <_svfiprintf_r+0x110>
 8021c5e:	9207      	str	r2, [sp, #28]
 8021c60:	e014      	b.n	8021c8c <_svfiprintf_r+0x110>
 8021c62:	eba0 0308 	sub.w	r3, r0, r8
 8021c66:	fa09 f303 	lsl.w	r3, r9, r3
 8021c6a:	4313      	orrs	r3, r2
 8021c6c:	9304      	str	r3, [sp, #16]
 8021c6e:	46a2      	mov	sl, r4
 8021c70:	e7d2      	b.n	8021c18 <_svfiprintf_r+0x9c>
 8021c72:	9b03      	ldr	r3, [sp, #12]
 8021c74:	1d19      	adds	r1, r3, #4
 8021c76:	681b      	ldr	r3, [r3, #0]
 8021c78:	9103      	str	r1, [sp, #12]
 8021c7a:	2b00      	cmp	r3, #0
 8021c7c:	bfbb      	ittet	lt
 8021c7e:	425b      	neglt	r3, r3
 8021c80:	f042 0202 	orrlt.w	r2, r2, #2
 8021c84:	9307      	strge	r3, [sp, #28]
 8021c86:	9307      	strlt	r3, [sp, #28]
 8021c88:	bfb8      	it	lt
 8021c8a:	9204      	strlt	r2, [sp, #16]
 8021c8c:	7823      	ldrb	r3, [r4, #0]
 8021c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8021c90:	d10c      	bne.n	8021cac <_svfiprintf_r+0x130>
 8021c92:	7863      	ldrb	r3, [r4, #1]
 8021c94:	2b2a      	cmp	r3, #42	; 0x2a
 8021c96:	d135      	bne.n	8021d04 <_svfiprintf_r+0x188>
 8021c98:	9b03      	ldr	r3, [sp, #12]
 8021c9a:	1d1a      	adds	r2, r3, #4
 8021c9c:	681b      	ldr	r3, [r3, #0]
 8021c9e:	9203      	str	r2, [sp, #12]
 8021ca0:	2b00      	cmp	r3, #0
 8021ca2:	bfb8      	it	lt
 8021ca4:	f04f 33ff 	movlt.w	r3, #4294967295
 8021ca8:	3402      	adds	r4, #2
 8021caa:	9305      	str	r3, [sp, #20]
 8021cac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021d78 <_svfiprintf_r+0x1fc>
 8021cb0:	7821      	ldrb	r1, [r4, #0]
 8021cb2:	2203      	movs	r2, #3
 8021cb4:	4650      	mov	r0, sl
 8021cb6:	f7de fad3 	bl	8000260 <memchr>
 8021cba:	b140      	cbz	r0, 8021cce <_svfiprintf_r+0x152>
 8021cbc:	2340      	movs	r3, #64	; 0x40
 8021cbe:	eba0 000a 	sub.w	r0, r0, sl
 8021cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8021cc6:	9b04      	ldr	r3, [sp, #16]
 8021cc8:	4303      	orrs	r3, r0
 8021cca:	3401      	adds	r4, #1
 8021ccc:	9304      	str	r3, [sp, #16]
 8021cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021cd2:	4826      	ldr	r0, [pc, #152]	; (8021d6c <_svfiprintf_r+0x1f0>)
 8021cd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021cd8:	2206      	movs	r2, #6
 8021cda:	f7de fac1 	bl	8000260 <memchr>
 8021cde:	2800      	cmp	r0, #0
 8021ce0:	d038      	beq.n	8021d54 <_svfiprintf_r+0x1d8>
 8021ce2:	4b23      	ldr	r3, [pc, #140]	; (8021d70 <_svfiprintf_r+0x1f4>)
 8021ce4:	bb1b      	cbnz	r3, 8021d2e <_svfiprintf_r+0x1b2>
 8021ce6:	9b03      	ldr	r3, [sp, #12]
 8021ce8:	3307      	adds	r3, #7
 8021cea:	f023 0307 	bic.w	r3, r3, #7
 8021cee:	3308      	adds	r3, #8
 8021cf0:	9303      	str	r3, [sp, #12]
 8021cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021cf4:	4433      	add	r3, r6
 8021cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8021cf8:	e767      	b.n	8021bca <_svfiprintf_r+0x4e>
 8021cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8021cfe:	460c      	mov	r4, r1
 8021d00:	2001      	movs	r0, #1
 8021d02:	e7a5      	b.n	8021c50 <_svfiprintf_r+0xd4>
 8021d04:	2300      	movs	r3, #0
 8021d06:	3401      	adds	r4, #1
 8021d08:	9305      	str	r3, [sp, #20]
 8021d0a:	4619      	mov	r1, r3
 8021d0c:	f04f 0c0a 	mov.w	ip, #10
 8021d10:	4620      	mov	r0, r4
 8021d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021d16:	3a30      	subs	r2, #48	; 0x30
 8021d18:	2a09      	cmp	r2, #9
 8021d1a:	d903      	bls.n	8021d24 <_svfiprintf_r+0x1a8>
 8021d1c:	2b00      	cmp	r3, #0
 8021d1e:	d0c5      	beq.n	8021cac <_svfiprintf_r+0x130>
 8021d20:	9105      	str	r1, [sp, #20]
 8021d22:	e7c3      	b.n	8021cac <_svfiprintf_r+0x130>
 8021d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8021d28:	4604      	mov	r4, r0
 8021d2a:	2301      	movs	r3, #1
 8021d2c:	e7f0      	b.n	8021d10 <_svfiprintf_r+0x194>
 8021d2e:	ab03      	add	r3, sp, #12
 8021d30:	9300      	str	r3, [sp, #0]
 8021d32:	462a      	mov	r2, r5
 8021d34:	4b0f      	ldr	r3, [pc, #60]	; (8021d74 <_svfiprintf_r+0x1f8>)
 8021d36:	a904      	add	r1, sp, #16
 8021d38:	4638      	mov	r0, r7
 8021d3a:	f3af 8000 	nop.w
 8021d3e:	1c42      	adds	r2, r0, #1
 8021d40:	4606      	mov	r6, r0
 8021d42:	d1d6      	bne.n	8021cf2 <_svfiprintf_r+0x176>
 8021d44:	89ab      	ldrh	r3, [r5, #12]
 8021d46:	065b      	lsls	r3, r3, #25
 8021d48:	f53f af2c 	bmi.w	8021ba4 <_svfiprintf_r+0x28>
 8021d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021d4e:	b01d      	add	sp, #116	; 0x74
 8021d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d54:	ab03      	add	r3, sp, #12
 8021d56:	9300      	str	r3, [sp, #0]
 8021d58:	462a      	mov	r2, r5
 8021d5a:	4b06      	ldr	r3, [pc, #24]	; (8021d74 <_svfiprintf_r+0x1f8>)
 8021d5c:	a904      	add	r1, sp, #16
 8021d5e:	4638      	mov	r0, r7
 8021d60:	f000 f9d4 	bl	802210c <_printf_i>
 8021d64:	e7eb      	b.n	8021d3e <_svfiprintf_r+0x1c2>
 8021d66:	bf00      	nop
 8021d68:	080292e3 	.word	0x080292e3
 8021d6c:	080292ed 	.word	0x080292ed
 8021d70:	00000000 	.word	0x00000000
 8021d74:	08021ac5 	.word	0x08021ac5
 8021d78:	080292e9 	.word	0x080292e9

08021d7c <__sfputc_r>:
 8021d7c:	6893      	ldr	r3, [r2, #8]
 8021d7e:	3b01      	subs	r3, #1
 8021d80:	2b00      	cmp	r3, #0
 8021d82:	b410      	push	{r4}
 8021d84:	6093      	str	r3, [r2, #8]
 8021d86:	da08      	bge.n	8021d9a <__sfputc_r+0x1e>
 8021d88:	6994      	ldr	r4, [r2, #24]
 8021d8a:	42a3      	cmp	r3, r4
 8021d8c:	db01      	blt.n	8021d92 <__sfputc_r+0x16>
 8021d8e:	290a      	cmp	r1, #10
 8021d90:	d103      	bne.n	8021d9a <__sfputc_r+0x1e>
 8021d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d96:	f7ff bb75 	b.w	8021484 <__swbuf_r>
 8021d9a:	6813      	ldr	r3, [r2, #0]
 8021d9c:	1c58      	adds	r0, r3, #1
 8021d9e:	6010      	str	r0, [r2, #0]
 8021da0:	7019      	strb	r1, [r3, #0]
 8021da2:	4608      	mov	r0, r1
 8021da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021da8:	4770      	bx	lr

08021daa <__sfputs_r>:
 8021daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021dac:	4606      	mov	r6, r0
 8021dae:	460f      	mov	r7, r1
 8021db0:	4614      	mov	r4, r2
 8021db2:	18d5      	adds	r5, r2, r3
 8021db4:	42ac      	cmp	r4, r5
 8021db6:	d101      	bne.n	8021dbc <__sfputs_r+0x12>
 8021db8:	2000      	movs	r0, #0
 8021dba:	e007      	b.n	8021dcc <__sfputs_r+0x22>
 8021dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021dc0:	463a      	mov	r2, r7
 8021dc2:	4630      	mov	r0, r6
 8021dc4:	f7ff ffda 	bl	8021d7c <__sfputc_r>
 8021dc8:	1c43      	adds	r3, r0, #1
 8021dca:	d1f3      	bne.n	8021db4 <__sfputs_r+0xa>
 8021dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021dd0 <_vfiprintf_r>:
 8021dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dd4:	460d      	mov	r5, r1
 8021dd6:	b09d      	sub	sp, #116	; 0x74
 8021dd8:	4614      	mov	r4, r2
 8021dda:	4698      	mov	r8, r3
 8021ddc:	4606      	mov	r6, r0
 8021dde:	b118      	cbz	r0, 8021de8 <_vfiprintf_r+0x18>
 8021de0:	6983      	ldr	r3, [r0, #24]
 8021de2:	b90b      	cbnz	r3, 8021de8 <_vfiprintf_r+0x18>
 8021de4:	f7fd fc00 	bl	801f5e8 <__sinit>
 8021de8:	4b89      	ldr	r3, [pc, #548]	; (8022010 <_vfiprintf_r+0x240>)
 8021dea:	429d      	cmp	r5, r3
 8021dec:	d11b      	bne.n	8021e26 <_vfiprintf_r+0x56>
 8021dee:	6875      	ldr	r5, [r6, #4]
 8021df0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021df2:	07d9      	lsls	r1, r3, #31
 8021df4:	d405      	bmi.n	8021e02 <_vfiprintf_r+0x32>
 8021df6:	89ab      	ldrh	r3, [r5, #12]
 8021df8:	059a      	lsls	r2, r3, #22
 8021dfa:	d402      	bmi.n	8021e02 <_vfiprintf_r+0x32>
 8021dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021dfe:	f7fd ffa6 	bl	801fd4e <__retarget_lock_acquire_recursive>
 8021e02:	89ab      	ldrh	r3, [r5, #12]
 8021e04:	071b      	lsls	r3, r3, #28
 8021e06:	d501      	bpl.n	8021e0c <_vfiprintf_r+0x3c>
 8021e08:	692b      	ldr	r3, [r5, #16]
 8021e0a:	b9eb      	cbnz	r3, 8021e48 <_vfiprintf_r+0x78>
 8021e0c:	4629      	mov	r1, r5
 8021e0e:	4630      	mov	r0, r6
 8021e10:	f7ff fb9c 	bl	802154c <__swsetup_r>
 8021e14:	b1c0      	cbz	r0, 8021e48 <_vfiprintf_r+0x78>
 8021e16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021e18:	07dc      	lsls	r4, r3, #31
 8021e1a:	d50e      	bpl.n	8021e3a <_vfiprintf_r+0x6a>
 8021e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8021e20:	b01d      	add	sp, #116	; 0x74
 8021e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e26:	4b7b      	ldr	r3, [pc, #492]	; (8022014 <_vfiprintf_r+0x244>)
 8021e28:	429d      	cmp	r5, r3
 8021e2a:	d101      	bne.n	8021e30 <_vfiprintf_r+0x60>
 8021e2c:	68b5      	ldr	r5, [r6, #8]
 8021e2e:	e7df      	b.n	8021df0 <_vfiprintf_r+0x20>
 8021e30:	4b79      	ldr	r3, [pc, #484]	; (8022018 <_vfiprintf_r+0x248>)
 8021e32:	429d      	cmp	r5, r3
 8021e34:	bf08      	it	eq
 8021e36:	68f5      	ldreq	r5, [r6, #12]
 8021e38:	e7da      	b.n	8021df0 <_vfiprintf_r+0x20>
 8021e3a:	89ab      	ldrh	r3, [r5, #12]
 8021e3c:	0598      	lsls	r0, r3, #22
 8021e3e:	d4ed      	bmi.n	8021e1c <_vfiprintf_r+0x4c>
 8021e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021e42:	f7fd ff86 	bl	801fd52 <__retarget_lock_release_recursive>
 8021e46:	e7e9      	b.n	8021e1c <_vfiprintf_r+0x4c>
 8021e48:	2300      	movs	r3, #0
 8021e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8021e4c:	2320      	movs	r3, #32
 8021e4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021e52:	f8cd 800c 	str.w	r8, [sp, #12]
 8021e56:	2330      	movs	r3, #48	; 0x30
 8021e58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802201c <_vfiprintf_r+0x24c>
 8021e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021e60:	f04f 0901 	mov.w	r9, #1
 8021e64:	4623      	mov	r3, r4
 8021e66:	469a      	mov	sl, r3
 8021e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021e6c:	b10a      	cbz	r2, 8021e72 <_vfiprintf_r+0xa2>
 8021e6e:	2a25      	cmp	r2, #37	; 0x25
 8021e70:	d1f9      	bne.n	8021e66 <_vfiprintf_r+0x96>
 8021e72:	ebba 0b04 	subs.w	fp, sl, r4
 8021e76:	d00b      	beq.n	8021e90 <_vfiprintf_r+0xc0>
 8021e78:	465b      	mov	r3, fp
 8021e7a:	4622      	mov	r2, r4
 8021e7c:	4629      	mov	r1, r5
 8021e7e:	4630      	mov	r0, r6
 8021e80:	f7ff ff93 	bl	8021daa <__sfputs_r>
 8021e84:	3001      	adds	r0, #1
 8021e86:	f000 80aa 	beq.w	8021fde <_vfiprintf_r+0x20e>
 8021e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021e8c:	445a      	add	r2, fp
 8021e8e:	9209      	str	r2, [sp, #36]	; 0x24
 8021e90:	f89a 3000 	ldrb.w	r3, [sl]
 8021e94:	2b00      	cmp	r3, #0
 8021e96:	f000 80a2 	beq.w	8021fde <_vfiprintf_r+0x20e>
 8021e9a:	2300      	movs	r3, #0
 8021e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8021ea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021ea4:	f10a 0a01 	add.w	sl, sl, #1
 8021ea8:	9304      	str	r3, [sp, #16]
 8021eaa:	9307      	str	r3, [sp, #28]
 8021eac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021eb0:	931a      	str	r3, [sp, #104]	; 0x68
 8021eb2:	4654      	mov	r4, sl
 8021eb4:	2205      	movs	r2, #5
 8021eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021eba:	4858      	ldr	r0, [pc, #352]	; (802201c <_vfiprintf_r+0x24c>)
 8021ebc:	f7de f9d0 	bl	8000260 <memchr>
 8021ec0:	9a04      	ldr	r2, [sp, #16]
 8021ec2:	b9d8      	cbnz	r0, 8021efc <_vfiprintf_r+0x12c>
 8021ec4:	06d1      	lsls	r1, r2, #27
 8021ec6:	bf44      	itt	mi
 8021ec8:	2320      	movmi	r3, #32
 8021eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021ece:	0713      	lsls	r3, r2, #28
 8021ed0:	bf44      	itt	mi
 8021ed2:	232b      	movmi	r3, #43	; 0x2b
 8021ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8021edc:	2b2a      	cmp	r3, #42	; 0x2a
 8021ede:	d015      	beq.n	8021f0c <_vfiprintf_r+0x13c>
 8021ee0:	9a07      	ldr	r2, [sp, #28]
 8021ee2:	4654      	mov	r4, sl
 8021ee4:	2000      	movs	r0, #0
 8021ee6:	f04f 0c0a 	mov.w	ip, #10
 8021eea:	4621      	mov	r1, r4
 8021eec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021ef0:	3b30      	subs	r3, #48	; 0x30
 8021ef2:	2b09      	cmp	r3, #9
 8021ef4:	d94e      	bls.n	8021f94 <_vfiprintf_r+0x1c4>
 8021ef6:	b1b0      	cbz	r0, 8021f26 <_vfiprintf_r+0x156>
 8021ef8:	9207      	str	r2, [sp, #28]
 8021efa:	e014      	b.n	8021f26 <_vfiprintf_r+0x156>
 8021efc:	eba0 0308 	sub.w	r3, r0, r8
 8021f00:	fa09 f303 	lsl.w	r3, r9, r3
 8021f04:	4313      	orrs	r3, r2
 8021f06:	9304      	str	r3, [sp, #16]
 8021f08:	46a2      	mov	sl, r4
 8021f0a:	e7d2      	b.n	8021eb2 <_vfiprintf_r+0xe2>
 8021f0c:	9b03      	ldr	r3, [sp, #12]
 8021f0e:	1d19      	adds	r1, r3, #4
 8021f10:	681b      	ldr	r3, [r3, #0]
 8021f12:	9103      	str	r1, [sp, #12]
 8021f14:	2b00      	cmp	r3, #0
 8021f16:	bfbb      	ittet	lt
 8021f18:	425b      	neglt	r3, r3
 8021f1a:	f042 0202 	orrlt.w	r2, r2, #2
 8021f1e:	9307      	strge	r3, [sp, #28]
 8021f20:	9307      	strlt	r3, [sp, #28]
 8021f22:	bfb8      	it	lt
 8021f24:	9204      	strlt	r2, [sp, #16]
 8021f26:	7823      	ldrb	r3, [r4, #0]
 8021f28:	2b2e      	cmp	r3, #46	; 0x2e
 8021f2a:	d10c      	bne.n	8021f46 <_vfiprintf_r+0x176>
 8021f2c:	7863      	ldrb	r3, [r4, #1]
 8021f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8021f30:	d135      	bne.n	8021f9e <_vfiprintf_r+0x1ce>
 8021f32:	9b03      	ldr	r3, [sp, #12]
 8021f34:	1d1a      	adds	r2, r3, #4
 8021f36:	681b      	ldr	r3, [r3, #0]
 8021f38:	9203      	str	r2, [sp, #12]
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	bfb8      	it	lt
 8021f3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8021f42:	3402      	adds	r4, #2
 8021f44:	9305      	str	r3, [sp, #20]
 8021f46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802202c <_vfiprintf_r+0x25c>
 8021f4a:	7821      	ldrb	r1, [r4, #0]
 8021f4c:	2203      	movs	r2, #3
 8021f4e:	4650      	mov	r0, sl
 8021f50:	f7de f986 	bl	8000260 <memchr>
 8021f54:	b140      	cbz	r0, 8021f68 <_vfiprintf_r+0x198>
 8021f56:	2340      	movs	r3, #64	; 0x40
 8021f58:	eba0 000a 	sub.w	r0, r0, sl
 8021f5c:	fa03 f000 	lsl.w	r0, r3, r0
 8021f60:	9b04      	ldr	r3, [sp, #16]
 8021f62:	4303      	orrs	r3, r0
 8021f64:	3401      	adds	r4, #1
 8021f66:	9304      	str	r3, [sp, #16]
 8021f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f6c:	482c      	ldr	r0, [pc, #176]	; (8022020 <_vfiprintf_r+0x250>)
 8021f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021f72:	2206      	movs	r2, #6
 8021f74:	f7de f974 	bl	8000260 <memchr>
 8021f78:	2800      	cmp	r0, #0
 8021f7a:	d03f      	beq.n	8021ffc <_vfiprintf_r+0x22c>
 8021f7c:	4b29      	ldr	r3, [pc, #164]	; (8022024 <_vfiprintf_r+0x254>)
 8021f7e:	bb1b      	cbnz	r3, 8021fc8 <_vfiprintf_r+0x1f8>
 8021f80:	9b03      	ldr	r3, [sp, #12]
 8021f82:	3307      	adds	r3, #7
 8021f84:	f023 0307 	bic.w	r3, r3, #7
 8021f88:	3308      	adds	r3, #8
 8021f8a:	9303      	str	r3, [sp, #12]
 8021f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f8e:	443b      	add	r3, r7
 8021f90:	9309      	str	r3, [sp, #36]	; 0x24
 8021f92:	e767      	b.n	8021e64 <_vfiprintf_r+0x94>
 8021f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8021f98:	460c      	mov	r4, r1
 8021f9a:	2001      	movs	r0, #1
 8021f9c:	e7a5      	b.n	8021eea <_vfiprintf_r+0x11a>
 8021f9e:	2300      	movs	r3, #0
 8021fa0:	3401      	adds	r4, #1
 8021fa2:	9305      	str	r3, [sp, #20]
 8021fa4:	4619      	mov	r1, r3
 8021fa6:	f04f 0c0a 	mov.w	ip, #10
 8021faa:	4620      	mov	r0, r4
 8021fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021fb0:	3a30      	subs	r2, #48	; 0x30
 8021fb2:	2a09      	cmp	r2, #9
 8021fb4:	d903      	bls.n	8021fbe <_vfiprintf_r+0x1ee>
 8021fb6:	2b00      	cmp	r3, #0
 8021fb8:	d0c5      	beq.n	8021f46 <_vfiprintf_r+0x176>
 8021fba:	9105      	str	r1, [sp, #20]
 8021fbc:	e7c3      	b.n	8021f46 <_vfiprintf_r+0x176>
 8021fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8021fc2:	4604      	mov	r4, r0
 8021fc4:	2301      	movs	r3, #1
 8021fc6:	e7f0      	b.n	8021faa <_vfiprintf_r+0x1da>
 8021fc8:	ab03      	add	r3, sp, #12
 8021fca:	9300      	str	r3, [sp, #0]
 8021fcc:	462a      	mov	r2, r5
 8021fce:	4b16      	ldr	r3, [pc, #88]	; (8022028 <_vfiprintf_r+0x258>)
 8021fd0:	a904      	add	r1, sp, #16
 8021fd2:	4630      	mov	r0, r6
 8021fd4:	f3af 8000 	nop.w
 8021fd8:	4607      	mov	r7, r0
 8021fda:	1c78      	adds	r0, r7, #1
 8021fdc:	d1d6      	bne.n	8021f8c <_vfiprintf_r+0x1bc>
 8021fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021fe0:	07d9      	lsls	r1, r3, #31
 8021fe2:	d405      	bmi.n	8021ff0 <_vfiprintf_r+0x220>
 8021fe4:	89ab      	ldrh	r3, [r5, #12]
 8021fe6:	059a      	lsls	r2, r3, #22
 8021fe8:	d402      	bmi.n	8021ff0 <_vfiprintf_r+0x220>
 8021fea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021fec:	f7fd feb1 	bl	801fd52 <__retarget_lock_release_recursive>
 8021ff0:	89ab      	ldrh	r3, [r5, #12]
 8021ff2:	065b      	lsls	r3, r3, #25
 8021ff4:	f53f af12 	bmi.w	8021e1c <_vfiprintf_r+0x4c>
 8021ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021ffa:	e711      	b.n	8021e20 <_vfiprintf_r+0x50>
 8021ffc:	ab03      	add	r3, sp, #12
 8021ffe:	9300      	str	r3, [sp, #0]
 8022000:	462a      	mov	r2, r5
 8022002:	4b09      	ldr	r3, [pc, #36]	; (8022028 <_vfiprintf_r+0x258>)
 8022004:	a904      	add	r1, sp, #16
 8022006:	4630      	mov	r0, r6
 8022008:	f000 f880 	bl	802210c <_printf_i>
 802200c:	e7e4      	b.n	8021fd8 <_vfiprintf_r+0x208>
 802200e:	bf00      	nop
 8022010:	08028d64 	.word	0x08028d64
 8022014:	08028d84 	.word	0x08028d84
 8022018:	08028d44 	.word	0x08028d44
 802201c:	080292e3 	.word	0x080292e3
 8022020:	080292ed 	.word	0x080292ed
 8022024:	00000000 	.word	0x00000000
 8022028:	08021dab 	.word	0x08021dab
 802202c:	080292e9 	.word	0x080292e9

08022030 <_printf_common>:
 8022030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022034:	4616      	mov	r6, r2
 8022036:	4699      	mov	r9, r3
 8022038:	688a      	ldr	r2, [r1, #8]
 802203a:	690b      	ldr	r3, [r1, #16]
 802203c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022040:	4293      	cmp	r3, r2
 8022042:	bfb8      	it	lt
 8022044:	4613      	movlt	r3, r2
 8022046:	6033      	str	r3, [r6, #0]
 8022048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802204c:	4607      	mov	r7, r0
 802204e:	460c      	mov	r4, r1
 8022050:	b10a      	cbz	r2, 8022056 <_printf_common+0x26>
 8022052:	3301      	adds	r3, #1
 8022054:	6033      	str	r3, [r6, #0]
 8022056:	6823      	ldr	r3, [r4, #0]
 8022058:	0699      	lsls	r1, r3, #26
 802205a:	bf42      	ittt	mi
 802205c:	6833      	ldrmi	r3, [r6, #0]
 802205e:	3302      	addmi	r3, #2
 8022060:	6033      	strmi	r3, [r6, #0]
 8022062:	6825      	ldr	r5, [r4, #0]
 8022064:	f015 0506 	ands.w	r5, r5, #6
 8022068:	d106      	bne.n	8022078 <_printf_common+0x48>
 802206a:	f104 0a19 	add.w	sl, r4, #25
 802206e:	68e3      	ldr	r3, [r4, #12]
 8022070:	6832      	ldr	r2, [r6, #0]
 8022072:	1a9b      	subs	r3, r3, r2
 8022074:	42ab      	cmp	r3, r5
 8022076:	dc26      	bgt.n	80220c6 <_printf_common+0x96>
 8022078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802207c:	1e13      	subs	r3, r2, #0
 802207e:	6822      	ldr	r2, [r4, #0]
 8022080:	bf18      	it	ne
 8022082:	2301      	movne	r3, #1
 8022084:	0692      	lsls	r2, r2, #26
 8022086:	d42b      	bmi.n	80220e0 <_printf_common+0xb0>
 8022088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802208c:	4649      	mov	r1, r9
 802208e:	4638      	mov	r0, r7
 8022090:	47c0      	blx	r8
 8022092:	3001      	adds	r0, #1
 8022094:	d01e      	beq.n	80220d4 <_printf_common+0xa4>
 8022096:	6823      	ldr	r3, [r4, #0]
 8022098:	68e5      	ldr	r5, [r4, #12]
 802209a:	6832      	ldr	r2, [r6, #0]
 802209c:	f003 0306 	and.w	r3, r3, #6
 80220a0:	2b04      	cmp	r3, #4
 80220a2:	bf08      	it	eq
 80220a4:	1aad      	subeq	r5, r5, r2
 80220a6:	68a3      	ldr	r3, [r4, #8]
 80220a8:	6922      	ldr	r2, [r4, #16]
 80220aa:	bf0c      	ite	eq
 80220ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80220b0:	2500      	movne	r5, #0
 80220b2:	4293      	cmp	r3, r2
 80220b4:	bfc4      	itt	gt
 80220b6:	1a9b      	subgt	r3, r3, r2
 80220b8:	18ed      	addgt	r5, r5, r3
 80220ba:	2600      	movs	r6, #0
 80220bc:	341a      	adds	r4, #26
 80220be:	42b5      	cmp	r5, r6
 80220c0:	d11a      	bne.n	80220f8 <_printf_common+0xc8>
 80220c2:	2000      	movs	r0, #0
 80220c4:	e008      	b.n	80220d8 <_printf_common+0xa8>
 80220c6:	2301      	movs	r3, #1
 80220c8:	4652      	mov	r2, sl
 80220ca:	4649      	mov	r1, r9
 80220cc:	4638      	mov	r0, r7
 80220ce:	47c0      	blx	r8
 80220d0:	3001      	adds	r0, #1
 80220d2:	d103      	bne.n	80220dc <_printf_common+0xac>
 80220d4:	f04f 30ff 	mov.w	r0, #4294967295
 80220d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220dc:	3501      	adds	r5, #1
 80220de:	e7c6      	b.n	802206e <_printf_common+0x3e>
 80220e0:	18e1      	adds	r1, r4, r3
 80220e2:	1c5a      	adds	r2, r3, #1
 80220e4:	2030      	movs	r0, #48	; 0x30
 80220e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80220ea:	4422      	add	r2, r4
 80220ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80220f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80220f4:	3302      	adds	r3, #2
 80220f6:	e7c7      	b.n	8022088 <_printf_common+0x58>
 80220f8:	2301      	movs	r3, #1
 80220fa:	4622      	mov	r2, r4
 80220fc:	4649      	mov	r1, r9
 80220fe:	4638      	mov	r0, r7
 8022100:	47c0      	blx	r8
 8022102:	3001      	adds	r0, #1
 8022104:	d0e6      	beq.n	80220d4 <_printf_common+0xa4>
 8022106:	3601      	adds	r6, #1
 8022108:	e7d9      	b.n	80220be <_printf_common+0x8e>
	...

0802210c <_printf_i>:
 802210c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022110:	460c      	mov	r4, r1
 8022112:	4691      	mov	r9, r2
 8022114:	7e27      	ldrb	r7, [r4, #24]
 8022116:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022118:	2f78      	cmp	r7, #120	; 0x78
 802211a:	4680      	mov	r8, r0
 802211c:	469a      	mov	sl, r3
 802211e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022122:	d807      	bhi.n	8022134 <_printf_i+0x28>
 8022124:	2f62      	cmp	r7, #98	; 0x62
 8022126:	d80a      	bhi.n	802213e <_printf_i+0x32>
 8022128:	2f00      	cmp	r7, #0
 802212a:	f000 80d8 	beq.w	80222de <_printf_i+0x1d2>
 802212e:	2f58      	cmp	r7, #88	; 0x58
 8022130:	f000 80a3 	beq.w	802227a <_printf_i+0x16e>
 8022134:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802213c:	e03a      	b.n	80221b4 <_printf_i+0xa8>
 802213e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022142:	2b15      	cmp	r3, #21
 8022144:	d8f6      	bhi.n	8022134 <_printf_i+0x28>
 8022146:	a001      	add	r0, pc, #4	; (adr r0, 802214c <_printf_i+0x40>)
 8022148:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802214c:	080221a5 	.word	0x080221a5
 8022150:	080221b9 	.word	0x080221b9
 8022154:	08022135 	.word	0x08022135
 8022158:	08022135 	.word	0x08022135
 802215c:	08022135 	.word	0x08022135
 8022160:	08022135 	.word	0x08022135
 8022164:	080221b9 	.word	0x080221b9
 8022168:	08022135 	.word	0x08022135
 802216c:	08022135 	.word	0x08022135
 8022170:	08022135 	.word	0x08022135
 8022174:	08022135 	.word	0x08022135
 8022178:	080222c5 	.word	0x080222c5
 802217c:	080221e9 	.word	0x080221e9
 8022180:	080222a7 	.word	0x080222a7
 8022184:	08022135 	.word	0x08022135
 8022188:	08022135 	.word	0x08022135
 802218c:	080222e7 	.word	0x080222e7
 8022190:	08022135 	.word	0x08022135
 8022194:	080221e9 	.word	0x080221e9
 8022198:	08022135 	.word	0x08022135
 802219c:	08022135 	.word	0x08022135
 80221a0:	080222af 	.word	0x080222af
 80221a4:	680b      	ldr	r3, [r1, #0]
 80221a6:	1d1a      	adds	r2, r3, #4
 80221a8:	681b      	ldr	r3, [r3, #0]
 80221aa:	600a      	str	r2, [r1, #0]
 80221ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80221b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80221b4:	2301      	movs	r3, #1
 80221b6:	e0a3      	b.n	8022300 <_printf_i+0x1f4>
 80221b8:	6825      	ldr	r5, [r4, #0]
 80221ba:	6808      	ldr	r0, [r1, #0]
 80221bc:	062e      	lsls	r6, r5, #24
 80221be:	f100 0304 	add.w	r3, r0, #4
 80221c2:	d50a      	bpl.n	80221da <_printf_i+0xce>
 80221c4:	6805      	ldr	r5, [r0, #0]
 80221c6:	600b      	str	r3, [r1, #0]
 80221c8:	2d00      	cmp	r5, #0
 80221ca:	da03      	bge.n	80221d4 <_printf_i+0xc8>
 80221cc:	232d      	movs	r3, #45	; 0x2d
 80221ce:	426d      	negs	r5, r5
 80221d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80221d4:	485e      	ldr	r0, [pc, #376]	; (8022350 <_printf_i+0x244>)
 80221d6:	230a      	movs	r3, #10
 80221d8:	e019      	b.n	802220e <_printf_i+0x102>
 80221da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80221de:	6805      	ldr	r5, [r0, #0]
 80221e0:	600b      	str	r3, [r1, #0]
 80221e2:	bf18      	it	ne
 80221e4:	b22d      	sxthne	r5, r5
 80221e6:	e7ef      	b.n	80221c8 <_printf_i+0xbc>
 80221e8:	680b      	ldr	r3, [r1, #0]
 80221ea:	6825      	ldr	r5, [r4, #0]
 80221ec:	1d18      	adds	r0, r3, #4
 80221ee:	6008      	str	r0, [r1, #0]
 80221f0:	0628      	lsls	r0, r5, #24
 80221f2:	d501      	bpl.n	80221f8 <_printf_i+0xec>
 80221f4:	681d      	ldr	r5, [r3, #0]
 80221f6:	e002      	b.n	80221fe <_printf_i+0xf2>
 80221f8:	0669      	lsls	r1, r5, #25
 80221fa:	d5fb      	bpl.n	80221f4 <_printf_i+0xe8>
 80221fc:	881d      	ldrh	r5, [r3, #0]
 80221fe:	4854      	ldr	r0, [pc, #336]	; (8022350 <_printf_i+0x244>)
 8022200:	2f6f      	cmp	r7, #111	; 0x6f
 8022202:	bf0c      	ite	eq
 8022204:	2308      	moveq	r3, #8
 8022206:	230a      	movne	r3, #10
 8022208:	2100      	movs	r1, #0
 802220a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802220e:	6866      	ldr	r6, [r4, #4]
 8022210:	60a6      	str	r6, [r4, #8]
 8022212:	2e00      	cmp	r6, #0
 8022214:	bfa2      	ittt	ge
 8022216:	6821      	ldrge	r1, [r4, #0]
 8022218:	f021 0104 	bicge.w	r1, r1, #4
 802221c:	6021      	strge	r1, [r4, #0]
 802221e:	b90d      	cbnz	r5, 8022224 <_printf_i+0x118>
 8022220:	2e00      	cmp	r6, #0
 8022222:	d04d      	beq.n	80222c0 <_printf_i+0x1b4>
 8022224:	4616      	mov	r6, r2
 8022226:	fbb5 f1f3 	udiv	r1, r5, r3
 802222a:	fb03 5711 	mls	r7, r3, r1, r5
 802222e:	5dc7      	ldrb	r7, [r0, r7]
 8022230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022234:	462f      	mov	r7, r5
 8022236:	42bb      	cmp	r3, r7
 8022238:	460d      	mov	r5, r1
 802223a:	d9f4      	bls.n	8022226 <_printf_i+0x11a>
 802223c:	2b08      	cmp	r3, #8
 802223e:	d10b      	bne.n	8022258 <_printf_i+0x14c>
 8022240:	6823      	ldr	r3, [r4, #0]
 8022242:	07df      	lsls	r7, r3, #31
 8022244:	d508      	bpl.n	8022258 <_printf_i+0x14c>
 8022246:	6923      	ldr	r3, [r4, #16]
 8022248:	6861      	ldr	r1, [r4, #4]
 802224a:	4299      	cmp	r1, r3
 802224c:	bfde      	ittt	le
 802224e:	2330      	movle	r3, #48	; 0x30
 8022250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022254:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022258:	1b92      	subs	r2, r2, r6
 802225a:	6122      	str	r2, [r4, #16]
 802225c:	f8cd a000 	str.w	sl, [sp]
 8022260:	464b      	mov	r3, r9
 8022262:	aa03      	add	r2, sp, #12
 8022264:	4621      	mov	r1, r4
 8022266:	4640      	mov	r0, r8
 8022268:	f7ff fee2 	bl	8022030 <_printf_common>
 802226c:	3001      	adds	r0, #1
 802226e:	d14c      	bne.n	802230a <_printf_i+0x1fe>
 8022270:	f04f 30ff 	mov.w	r0, #4294967295
 8022274:	b004      	add	sp, #16
 8022276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802227a:	4835      	ldr	r0, [pc, #212]	; (8022350 <_printf_i+0x244>)
 802227c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022280:	6823      	ldr	r3, [r4, #0]
 8022282:	680e      	ldr	r6, [r1, #0]
 8022284:	061f      	lsls	r7, r3, #24
 8022286:	f856 5b04 	ldr.w	r5, [r6], #4
 802228a:	600e      	str	r6, [r1, #0]
 802228c:	d514      	bpl.n	80222b8 <_printf_i+0x1ac>
 802228e:	07d9      	lsls	r1, r3, #31
 8022290:	bf44      	itt	mi
 8022292:	f043 0320 	orrmi.w	r3, r3, #32
 8022296:	6023      	strmi	r3, [r4, #0]
 8022298:	b91d      	cbnz	r5, 80222a2 <_printf_i+0x196>
 802229a:	6823      	ldr	r3, [r4, #0]
 802229c:	f023 0320 	bic.w	r3, r3, #32
 80222a0:	6023      	str	r3, [r4, #0]
 80222a2:	2310      	movs	r3, #16
 80222a4:	e7b0      	b.n	8022208 <_printf_i+0xfc>
 80222a6:	6823      	ldr	r3, [r4, #0]
 80222a8:	f043 0320 	orr.w	r3, r3, #32
 80222ac:	6023      	str	r3, [r4, #0]
 80222ae:	2378      	movs	r3, #120	; 0x78
 80222b0:	4828      	ldr	r0, [pc, #160]	; (8022354 <_printf_i+0x248>)
 80222b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80222b6:	e7e3      	b.n	8022280 <_printf_i+0x174>
 80222b8:	065e      	lsls	r6, r3, #25
 80222ba:	bf48      	it	mi
 80222bc:	b2ad      	uxthmi	r5, r5
 80222be:	e7e6      	b.n	802228e <_printf_i+0x182>
 80222c0:	4616      	mov	r6, r2
 80222c2:	e7bb      	b.n	802223c <_printf_i+0x130>
 80222c4:	680b      	ldr	r3, [r1, #0]
 80222c6:	6826      	ldr	r6, [r4, #0]
 80222c8:	6960      	ldr	r0, [r4, #20]
 80222ca:	1d1d      	adds	r5, r3, #4
 80222cc:	600d      	str	r5, [r1, #0]
 80222ce:	0635      	lsls	r5, r6, #24
 80222d0:	681b      	ldr	r3, [r3, #0]
 80222d2:	d501      	bpl.n	80222d8 <_printf_i+0x1cc>
 80222d4:	6018      	str	r0, [r3, #0]
 80222d6:	e002      	b.n	80222de <_printf_i+0x1d2>
 80222d8:	0671      	lsls	r1, r6, #25
 80222da:	d5fb      	bpl.n	80222d4 <_printf_i+0x1c8>
 80222dc:	8018      	strh	r0, [r3, #0]
 80222de:	2300      	movs	r3, #0
 80222e0:	6123      	str	r3, [r4, #16]
 80222e2:	4616      	mov	r6, r2
 80222e4:	e7ba      	b.n	802225c <_printf_i+0x150>
 80222e6:	680b      	ldr	r3, [r1, #0]
 80222e8:	1d1a      	adds	r2, r3, #4
 80222ea:	600a      	str	r2, [r1, #0]
 80222ec:	681e      	ldr	r6, [r3, #0]
 80222ee:	6862      	ldr	r2, [r4, #4]
 80222f0:	2100      	movs	r1, #0
 80222f2:	4630      	mov	r0, r6
 80222f4:	f7dd ffb4 	bl	8000260 <memchr>
 80222f8:	b108      	cbz	r0, 80222fe <_printf_i+0x1f2>
 80222fa:	1b80      	subs	r0, r0, r6
 80222fc:	6060      	str	r0, [r4, #4]
 80222fe:	6863      	ldr	r3, [r4, #4]
 8022300:	6123      	str	r3, [r4, #16]
 8022302:	2300      	movs	r3, #0
 8022304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022308:	e7a8      	b.n	802225c <_printf_i+0x150>
 802230a:	6923      	ldr	r3, [r4, #16]
 802230c:	4632      	mov	r2, r6
 802230e:	4649      	mov	r1, r9
 8022310:	4640      	mov	r0, r8
 8022312:	47d0      	blx	sl
 8022314:	3001      	adds	r0, #1
 8022316:	d0ab      	beq.n	8022270 <_printf_i+0x164>
 8022318:	6823      	ldr	r3, [r4, #0]
 802231a:	079b      	lsls	r3, r3, #30
 802231c:	d413      	bmi.n	8022346 <_printf_i+0x23a>
 802231e:	68e0      	ldr	r0, [r4, #12]
 8022320:	9b03      	ldr	r3, [sp, #12]
 8022322:	4298      	cmp	r0, r3
 8022324:	bfb8      	it	lt
 8022326:	4618      	movlt	r0, r3
 8022328:	e7a4      	b.n	8022274 <_printf_i+0x168>
 802232a:	2301      	movs	r3, #1
 802232c:	4632      	mov	r2, r6
 802232e:	4649      	mov	r1, r9
 8022330:	4640      	mov	r0, r8
 8022332:	47d0      	blx	sl
 8022334:	3001      	adds	r0, #1
 8022336:	d09b      	beq.n	8022270 <_printf_i+0x164>
 8022338:	3501      	adds	r5, #1
 802233a:	68e3      	ldr	r3, [r4, #12]
 802233c:	9903      	ldr	r1, [sp, #12]
 802233e:	1a5b      	subs	r3, r3, r1
 8022340:	42ab      	cmp	r3, r5
 8022342:	dcf2      	bgt.n	802232a <_printf_i+0x21e>
 8022344:	e7eb      	b.n	802231e <_printf_i+0x212>
 8022346:	2500      	movs	r5, #0
 8022348:	f104 0619 	add.w	r6, r4, #25
 802234c:	e7f5      	b.n	802233a <_printf_i+0x22e>
 802234e:	bf00      	nop
 8022350:	080292f4 	.word	0x080292f4
 8022354:	08029305 	.word	0x08029305

08022358 <_putc_r>:
 8022358:	b570      	push	{r4, r5, r6, lr}
 802235a:	460d      	mov	r5, r1
 802235c:	4614      	mov	r4, r2
 802235e:	4606      	mov	r6, r0
 8022360:	b118      	cbz	r0, 802236a <_putc_r+0x12>
 8022362:	6983      	ldr	r3, [r0, #24]
 8022364:	b90b      	cbnz	r3, 802236a <_putc_r+0x12>
 8022366:	f7fd f93f 	bl	801f5e8 <__sinit>
 802236a:	4b1c      	ldr	r3, [pc, #112]	; (80223dc <_putc_r+0x84>)
 802236c:	429c      	cmp	r4, r3
 802236e:	d124      	bne.n	80223ba <_putc_r+0x62>
 8022370:	6874      	ldr	r4, [r6, #4]
 8022372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022374:	07d8      	lsls	r0, r3, #31
 8022376:	d405      	bmi.n	8022384 <_putc_r+0x2c>
 8022378:	89a3      	ldrh	r3, [r4, #12]
 802237a:	0599      	lsls	r1, r3, #22
 802237c:	d402      	bmi.n	8022384 <_putc_r+0x2c>
 802237e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022380:	f7fd fce5 	bl	801fd4e <__retarget_lock_acquire_recursive>
 8022384:	68a3      	ldr	r3, [r4, #8]
 8022386:	3b01      	subs	r3, #1
 8022388:	2b00      	cmp	r3, #0
 802238a:	60a3      	str	r3, [r4, #8]
 802238c:	da05      	bge.n	802239a <_putc_r+0x42>
 802238e:	69a2      	ldr	r2, [r4, #24]
 8022390:	4293      	cmp	r3, r2
 8022392:	db1c      	blt.n	80223ce <_putc_r+0x76>
 8022394:	b2eb      	uxtb	r3, r5
 8022396:	2b0a      	cmp	r3, #10
 8022398:	d019      	beq.n	80223ce <_putc_r+0x76>
 802239a:	6823      	ldr	r3, [r4, #0]
 802239c:	1c5a      	adds	r2, r3, #1
 802239e:	6022      	str	r2, [r4, #0]
 80223a0:	701d      	strb	r5, [r3, #0]
 80223a2:	b2ed      	uxtb	r5, r5
 80223a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80223a6:	07da      	lsls	r2, r3, #31
 80223a8:	d405      	bmi.n	80223b6 <_putc_r+0x5e>
 80223aa:	89a3      	ldrh	r3, [r4, #12]
 80223ac:	059b      	lsls	r3, r3, #22
 80223ae:	d402      	bmi.n	80223b6 <_putc_r+0x5e>
 80223b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80223b2:	f7fd fcce 	bl	801fd52 <__retarget_lock_release_recursive>
 80223b6:	4628      	mov	r0, r5
 80223b8:	bd70      	pop	{r4, r5, r6, pc}
 80223ba:	4b09      	ldr	r3, [pc, #36]	; (80223e0 <_putc_r+0x88>)
 80223bc:	429c      	cmp	r4, r3
 80223be:	d101      	bne.n	80223c4 <_putc_r+0x6c>
 80223c0:	68b4      	ldr	r4, [r6, #8]
 80223c2:	e7d6      	b.n	8022372 <_putc_r+0x1a>
 80223c4:	4b07      	ldr	r3, [pc, #28]	; (80223e4 <_putc_r+0x8c>)
 80223c6:	429c      	cmp	r4, r3
 80223c8:	bf08      	it	eq
 80223ca:	68f4      	ldreq	r4, [r6, #12]
 80223cc:	e7d1      	b.n	8022372 <_putc_r+0x1a>
 80223ce:	4629      	mov	r1, r5
 80223d0:	4622      	mov	r2, r4
 80223d2:	4630      	mov	r0, r6
 80223d4:	f7ff f856 	bl	8021484 <__swbuf_r>
 80223d8:	4605      	mov	r5, r0
 80223da:	e7e3      	b.n	80223a4 <_putc_r+0x4c>
 80223dc:	08028d64 	.word	0x08028d64
 80223e0:	08028d84 	.word	0x08028d84
 80223e4:	08028d44 	.word	0x08028d44

080223e8 <_read_r>:
 80223e8:	b538      	push	{r3, r4, r5, lr}
 80223ea:	4d07      	ldr	r5, [pc, #28]	; (8022408 <_read_r+0x20>)
 80223ec:	4604      	mov	r4, r0
 80223ee:	4608      	mov	r0, r1
 80223f0:	4611      	mov	r1, r2
 80223f2:	2200      	movs	r2, #0
 80223f4:	602a      	str	r2, [r5, #0]
 80223f6:	461a      	mov	r2, r3
 80223f8:	f7de fcc3 	bl	8000d82 <_read>
 80223fc:	1c43      	adds	r3, r0, #1
 80223fe:	d102      	bne.n	8022406 <_read_r+0x1e>
 8022400:	682b      	ldr	r3, [r5, #0]
 8022402:	b103      	cbz	r3, 8022406 <_read_r+0x1e>
 8022404:	6023      	str	r3, [r4, #0]
 8022406:	bd38      	pop	{r3, r4, r5, pc}
 8022408:	20000f94 	.word	0x20000f94

0802240c <sniprintf>:
 802240c:	b40c      	push	{r2, r3}
 802240e:	b530      	push	{r4, r5, lr}
 8022410:	4b17      	ldr	r3, [pc, #92]	; (8022470 <sniprintf+0x64>)
 8022412:	1e0c      	subs	r4, r1, #0
 8022414:	681d      	ldr	r5, [r3, #0]
 8022416:	b09d      	sub	sp, #116	; 0x74
 8022418:	da08      	bge.n	802242c <sniprintf+0x20>
 802241a:	238b      	movs	r3, #139	; 0x8b
 802241c:	602b      	str	r3, [r5, #0]
 802241e:	f04f 30ff 	mov.w	r0, #4294967295
 8022422:	b01d      	add	sp, #116	; 0x74
 8022424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022428:	b002      	add	sp, #8
 802242a:	4770      	bx	lr
 802242c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022430:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022434:	bf14      	ite	ne
 8022436:	f104 33ff 	addne.w	r3, r4, #4294967295
 802243a:	4623      	moveq	r3, r4
 802243c:	9304      	str	r3, [sp, #16]
 802243e:	9307      	str	r3, [sp, #28]
 8022440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022444:	9002      	str	r0, [sp, #8]
 8022446:	9006      	str	r0, [sp, #24]
 8022448:	f8ad 3016 	strh.w	r3, [sp, #22]
 802244c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802244e:	ab21      	add	r3, sp, #132	; 0x84
 8022450:	a902      	add	r1, sp, #8
 8022452:	4628      	mov	r0, r5
 8022454:	9301      	str	r3, [sp, #4]
 8022456:	f7ff fb91 	bl	8021b7c <_svfiprintf_r>
 802245a:	1c43      	adds	r3, r0, #1
 802245c:	bfbc      	itt	lt
 802245e:	238b      	movlt	r3, #139	; 0x8b
 8022460:	602b      	strlt	r3, [r5, #0]
 8022462:	2c00      	cmp	r4, #0
 8022464:	d0dd      	beq.n	8022422 <sniprintf+0x16>
 8022466:	9b02      	ldr	r3, [sp, #8]
 8022468:	2200      	movs	r2, #0
 802246a:	701a      	strb	r2, [r3, #0]
 802246c:	e7d9      	b.n	8022422 <sniprintf+0x16>
 802246e:	bf00      	nop
 8022470:	20000108 	.word	0x20000108

08022474 <siscanf>:
 8022474:	b40e      	push	{r1, r2, r3}
 8022476:	b510      	push	{r4, lr}
 8022478:	b09f      	sub	sp, #124	; 0x7c
 802247a:	ac21      	add	r4, sp, #132	; 0x84
 802247c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8022480:	f854 2b04 	ldr.w	r2, [r4], #4
 8022484:	9201      	str	r2, [sp, #4]
 8022486:	f8ad 101c 	strh.w	r1, [sp, #28]
 802248a:	9004      	str	r0, [sp, #16]
 802248c:	9008      	str	r0, [sp, #32]
 802248e:	f7dd fed5 	bl	800023c <strlen>
 8022492:	4b0c      	ldr	r3, [pc, #48]	; (80224c4 <siscanf+0x50>)
 8022494:	9005      	str	r0, [sp, #20]
 8022496:	9009      	str	r0, [sp, #36]	; 0x24
 8022498:	930d      	str	r3, [sp, #52]	; 0x34
 802249a:	480b      	ldr	r0, [pc, #44]	; (80224c8 <siscanf+0x54>)
 802249c:	9a01      	ldr	r2, [sp, #4]
 802249e:	6800      	ldr	r0, [r0, #0]
 80224a0:	9403      	str	r4, [sp, #12]
 80224a2:	2300      	movs	r3, #0
 80224a4:	9311      	str	r3, [sp, #68]	; 0x44
 80224a6:	9316      	str	r3, [sp, #88]	; 0x58
 80224a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80224ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80224b0:	a904      	add	r1, sp, #16
 80224b2:	4623      	mov	r3, r4
 80224b4:	f000 f8ba 	bl	802262c <__ssvfiscanf_r>
 80224b8:	b01f      	add	sp, #124	; 0x7c
 80224ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80224be:	b003      	add	sp, #12
 80224c0:	4770      	bx	lr
 80224c2:	bf00      	nop
 80224c4:	08020223 	.word	0x08020223
 80224c8:	20000108 	.word	0x20000108

080224cc <strcpy>:
 80224cc:	4603      	mov	r3, r0
 80224ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80224d2:	f803 2b01 	strb.w	r2, [r3], #1
 80224d6:	2a00      	cmp	r2, #0
 80224d8:	d1f9      	bne.n	80224ce <strcpy+0x2>
 80224da:	4770      	bx	lr

080224dc <strncmp>:
 80224dc:	b510      	push	{r4, lr}
 80224de:	b16a      	cbz	r2, 80224fc <strncmp+0x20>
 80224e0:	3901      	subs	r1, #1
 80224e2:	1884      	adds	r4, r0, r2
 80224e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80224e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80224ec:	4293      	cmp	r3, r2
 80224ee:	d103      	bne.n	80224f8 <strncmp+0x1c>
 80224f0:	42a0      	cmp	r0, r4
 80224f2:	d001      	beq.n	80224f8 <strncmp+0x1c>
 80224f4:	2b00      	cmp	r3, #0
 80224f6:	d1f5      	bne.n	80224e4 <strncmp+0x8>
 80224f8:	1a98      	subs	r0, r3, r2
 80224fa:	bd10      	pop	{r4, pc}
 80224fc:	4610      	mov	r0, r2
 80224fe:	e7fc      	b.n	80224fa <strncmp+0x1e>

08022500 <__ascii_wctomb>:
 8022500:	b149      	cbz	r1, 8022516 <__ascii_wctomb+0x16>
 8022502:	2aff      	cmp	r2, #255	; 0xff
 8022504:	bf85      	ittet	hi
 8022506:	238a      	movhi	r3, #138	; 0x8a
 8022508:	6003      	strhi	r3, [r0, #0]
 802250a:	700a      	strbls	r2, [r1, #0]
 802250c:	f04f 30ff 	movhi.w	r0, #4294967295
 8022510:	bf98      	it	ls
 8022512:	2001      	movls	r0, #1
 8022514:	4770      	bx	lr
 8022516:	4608      	mov	r0, r1
 8022518:	4770      	bx	lr
	...

0802251c <__env_lock>:
 802251c:	4801      	ldr	r0, [pc, #4]	; (8022524 <__env_lock+0x8>)
 802251e:	f7fd bc16 	b.w	801fd4e <__retarget_lock_acquire_recursive>
 8022522:	bf00      	nop
 8022524:	20000f8a 	.word	0x20000f8a

08022528 <__env_unlock>:
 8022528:	4801      	ldr	r0, [pc, #4]	; (8022530 <__env_unlock+0x8>)
 802252a:	f7fd bc12 	b.w	801fd52 <__retarget_lock_release_recursive>
 802252e:	bf00      	nop
 8022530:	20000f8a 	.word	0x20000f8a

08022534 <memmove>:
 8022534:	4288      	cmp	r0, r1
 8022536:	b510      	push	{r4, lr}
 8022538:	eb01 0402 	add.w	r4, r1, r2
 802253c:	d902      	bls.n	8022544 <memmove+0x10>
 802253e:	4284      	cmp	r4, r0
 8022540:	4623      	mov	r3, r4
 8022542:	d807      	bhi.n	8022554 <memmove+0x20>
 8022544:	1e43      	subs	r3, r0, #1
 8022546:	42a1      	cmp	r1, r4
 8022548:	d008      	beq.n	802255c <memmove+0x28>
 802254a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802254e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022552:	e7f8      	b.n	8022546 <memmove+0x12>
 8022554:	4402      	add	r2, r0
 8022556:	4601      	mov	r1, r0
 8022558:	428a      	cmp	r2, r1
 802255a:	d100      	bne.n	802255e <memmove+0x2a>
 802255c:	bd10      	pop	{r4, pc}
 802255e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022566:	e7f7      	b.n	8022558 <memmove+0x24>

08022568 <_malloc_usable_size_r>:
 8022568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802256c:	1f18      	subs	r0, r3, #4
 802256e:	2b00      	cmp	r3, #0
 8022570:	bfbc      	itt	lt
 8022572:	580b      	ldrlt	r3, [r1, r0]
 8022574:	18c0      	addlt	r0, r0, r3
 8022576:	4770      	bx	lr

08022578 <_sungetc_r>:
 8022578:	b538      	push	{r3, r4, r5, lr}
 802257a:	1c4b      	adds	r3, r1, #1
 802257c:	4614      	mov	r4, r2
 802257e:	d103      	bne.n	8022588 <_sungetc_r+0x10>
 8022580:	f04f 35ff 	mov.w	r5, #4294967295
 8022584:	4628      	mov	r0, r5
 8022586:	bd38      	pop	{r3, r4, r5, pc}
 8022588:	8993      	ldrh	r3, [r2, #12]
 802258a:	f023 0320 	bic.w	r3, r3, #32
 802258e:	8193      	strh	r3, [r2, #12]
 8022590:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022592:	6852      	ldr	r2, [r2, #4]
 8022594:	b2cd      	uxtb	r5, r1
 8022596:	b18b      	cbz	r3, 80225bc <_sungetc_r+0x44>
 8022598:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802259a:	4293      	cmp	r3, r2
 802259c:	dd08      	ble.n	80225b0 <_sungetc_r+0x38>
 802259e:	6823      	ldr	r3, [r4, #0]
 80225a0:	1e5a      	subs	r2, r3, #1
 80225a2:	6022      	str	r2, [r4, #0]
 80225a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80225a8:	6863      	ldr	r3, [r4, #4]
 80225aa:	3301      	adds	r3, #1
 80225ac:	6063      	str	r3, [r4, #4]
 80225ae:	e7e9      	b.n	8022584 <_sungetc_r+0xc>
 80225b0:	4621      	mov	r1, r4
 80225b2:	f000 fb39 	bl	8022c28 <__submore>
 80225b6:	2800      	cmp	r0, #0
 80225b8:	d0f1      	beq.n	802259e <_sungetc_r+0x26>
 80225ba:	e7e1      	b.n	8022580 <_sungetc_r+0x8>
 80225bc:	6921      	ldr	r1, [r4, #16]
 80225be:	6823      	ldr	r3, [r4, #0]
 80225c0:	b151      	cbz	r1, 80225d8 <_sungetc_r+0x60>
 80225c2:	4299      	cmp	r1, r3
 80225c4:	d208      	bcs.n	80225d8 <_sungetc_r+0x60>
 80225c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80225ca:	42a9      	cmp	r1, r5
 80225cc:	d104      	bne.n	80225d8 <_sungetc_r+0x60>
 80225ce:	3b01      	subs	r3, #1
 80225d0:	3201      	adds	r2, #1
 80225d2:	6023      	str	r3, [r4, #0]
 80225d4:	6062      	str	r2, [r4, #4]
 80225d6:	e7d5      	b.n	8022584 <_sungetc_r+0xc>
 80225d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80225dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80225e0:	6363      	str	r3, [r4, #52]	; 0x34
 80225e2:	2303      	movs	r3, #3
 80225e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80225e6:	4623      	mov	r3, r4
 80225e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80225ec:	6023      	str	r3, [r4, #0]
 80225ee:	2301      	movs	r3, #1
 80225f0:	e7dc      	b.n	80225ac <_sungetc_r+0x34>

080225f2 <__ssrefill_r>:
 80225f2:	b510      	push	{r4, lr}
 80225f4:	460c      	mov	r4, r1
 80225f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80225f8:	b169      	cbz	r1, 8022616 <__ssrefill_r+0x24>
 80225fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80225fe:	4299      	cmp	r1, r3
 8022600:	d001      	beq.n	8022606 <__ssrefill_r+0x14>
 8022602:	f7fd fc41 	bl	801fe88 <_free_r>
 8022606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022608:	6063      	str	r3, [r4, #4]
 802260a:	2000      	movs	r0, #0
 802260c:	6360      	str	r0, [r4, #52]	; 0x34
 802260e:	b113      	cbz	r3, 8022616 <__ssrefill_r+0x24>
 8022610:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022612:	6023      	str	r3, [r4, #0]
 8022614:	bd10      	pop	{r4, pc}
 8022616:	6923      	ldr	r3, [r4, #16]
 8022618:	6023      	str	r3, [r4, #0]
 802261a:	2300      	movs	r3, #0
 802261c:	6063      	str	r3, [r4, #4]
 802261e:	89a3      	ldrh	r3, [r4, #12]
 8022620:	f043 0320 	orr.w	r3, r3, #32
 8022624:	81a3      	strh	r3, [r4, #12]
 8022626:	f04f 30ff 	mov.w	r0, #4294967295
 802262a:	e7f3      	b.n	8022614 <__ssrefill_r+0x22>

0802262c <__ssvfiscanf_r>:
 802262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022630:	460c      	mov	r4, r1
 8022632:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8022636:	2100      	movs	r1, #0
 8022638:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802263c:	49b2      	ldr	r1, [pc, #712]	; (8022908 <__ssvfiscanf_r+0x2dc>)
 802263e:	91a0      	str	r1, [sp, #640]	; 0x280
 8022640:	f10d 0804 	add.w	r8, sp, #4
 8022644:	49b1      	ldr	r1, [pc, #708]	; (802290c <__ssvfiscanf_r+0x2e0>)
 8022646:	4fb2      	ldr	r7, [pc, #712]	; (8022910 <__ssvfiscanf_r+0x2e4>)
 8022648:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8022914 <__ssvfiscanf_r+0x2e8>
 802264c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8022650:	4606      	mov	r6, r0
 8022652:	91a1      	str	r1, [sp, #644]	; 0x284
 8022654:	9300      	str	r3, [sp, #0]
 8022656:	f892 a000 	ldrb.w	sl, [r2]
 802265a:	f1ba 0f00 	cmp.w	sl, #0
 802265e:	f000 8151 	beq.w	8022904 <__ssvfiscanf_r+0x2d8>
 8022662:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8022666:	f013 0308 	ands.w	r3, r3, #8
 802266a:	f102 0501 	add.w	r5, r2, #1
 802266e:	d019      	beq.n	80226a4 <__ssvfiscanf_r+0x78>
 8022670:	6863      	ldr	r3, [r4, #4]
 8022672:	2b00      	cmp	r3, #0
 8022674:	dd0f      	ble.n	8022696 <__ssvfiscanf_r+0x6a>
 8022676:	6823      	ldr	r3, [r4, #0]
 8022678:	781a      	ldrb	r2, [r3, #0]
 802267a:	5cba      	ldrb	r2, [r7, r2]
 802267c:	0712      	lsls	r2, r2, #28
 802267e:	d401      	bmi.n	8022684 <__ssvfiscanf_r+0x58>
 8022680:	462a      	mov	r2, r5
 8022682:	e7e8      	b.n	8022656 <__ssvfiscanf_r+0x2a>
 8022684:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022686:	3201      	adds	r2, #1
 8022688:	9245      	str	r2, [sp, #276]	; 0x114
 802268a:	6862      	ldr	r2, [r4, #4]
 802268c:	3301      	adds	r3, #1
 802268e:	3a01      	subs	r2, #1
 8022690:	6062      	str	r2, [r4, #4]
 8022692:	6023      	str	r3, [r4, #0]
 8022694:	e7ec      	b.n	8022670 <__ssvfiscanf_r+0x44>
 8022696:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022698:	4621      	mov	r1, r4
 802269a:	4630      	mov	r0, r6
 802269c:	4798      	blx	r3
 802269e:	2800      	cmp	r0, #0
 80226a0:	d0e9      	beq.n	8022676 <__ssvfiscanf_r+0x4a>
 80226a2:	e7ed      	b.n	8022680 <__ssvfiscanf_r+0x54>
 80226a4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80226a8:	f040 8083 	bne.w	80227b2 <__ssvfiscanf_r+0x186>
 80226ac:	9341      	str	r3, [sp, #260]	; 0x104
 80226ae:	9343      	str	r3, [sp, #268]	; 0x10c
 80226b0:	7853      	ldrb	r3, [r2, #1]
 80226b2:	2b2a      	cmp	r3, #42	; 0x2a
 80226b4:	bf02      	ittt	eq
 80226b6:	2310      	moveq	r3, #16
 80226b8:	1c95      	addeq	r5, r2, #2
 80226ba:	9341      	streq	r3, [sp, #260]	; 0x104
 80226bc:	220a      	movs	r2, #10
 80226be:	46ab      	mov	fp, r5
 80226c0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80226c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80226c8:	2b09      	cmp	r3, #9
 80226ca:	d91d      	bls.n	8022708 <__ssvfiscanf_r+0xdc>
 80226cc:	4891      	ldr	r0, [pc, #580]	; (8022914 <__ssvfiscanf_r+0x2e8>)
 80226ce:	2203      	movs	r2, #3
 80226d0:	f7dd fdc6 	bl	8000260 <memchr>
 80226d4:	b140      	cbz	r0, 80226e8 <__ssvfiscanf_r+0xbc>
 80226d6:	2301      	movs	r3, #1
 80226d8:	eba0 0009 	sub.w	r0, r0, r9
 80226dc:	fa03 f000 	lsl.w	r0, r3, r0
 80226e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80226e2:	4318      	orrs	r0, r3
 80226e4:	9041      	str	r0, [sp, #260]	; 0x104
 80226e6:	465d      	mov	r5, fp
 80226e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80226ec:	2b78      	cmp	r3, #120	; 0x78
 80226ee:	d806      	bhi.n	80226fe <__ssvfiscanf_r+0xd2>
 80226f0:	2b57      	cmp	r3, #87	; 0x57
 80226f2:	d810      	bhi.n	8022716 <__ssvfiscanf_r+0xea>
 80226f4:	2b25      	cmp	r3, #37	; 0x25
 80226f6:	d05c      	beq.n	80227b2 <__ssvfiscanf_r+0x186>
 80226f8:	d856      	bhi.n	80227a8 <__ssvfiscanf_r+0x17c>
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	d074      	beq.n	80227e8 <__ssvfiscanf_r+0x1bc>
 80226fe:	2303      	movs	r3, #3
 8022700:	9347      	str	r3, [sp, #284]	; 0x11c
 8022702:	230a      	movs	r3, #10
 8022704:	9342      	str	r3, [sp, #264]	; 0x108
 8022706:	e081      	b.n	802280c <__ssvfiscanf_r+0x1e0>
 8022708:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802270a:	fb02 1303 	mla	r3, r2, r3, r1
 802270e:	3b30      	subs	r3, #48	; 0x30
 8022710:	9343      	str	r3, [sp, #268]	; 0x10c
 8022712:	465d      	mov	r5, fp
 8022714:	e7d3      	b.n	80226be <__ssvfiscanf_r+0x92>
 8022716:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802271a:	2a20      	cmp	r2, #32
 802271c:	d8ef      	bhi.n	80226fe <__ssvfiscanf_r+0xd2>
 802271e:	a101      	add	r1, pc, #4	; (adr r1, 8022724 <__ssvfiscanf_r+0xf8>)
 8022720:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022724:	080227f7 	.word	0x080227f7
 8022728:	080226ff 	.word	0x080226ff
 802272c:	080226ff 	.word	0x080226ff
 8022730:	08022855 	.word	0x08022855
 8022734:	080226ff 	.word	0x080226ff
 8022738:	080226ff 	.word	0x080226ff
 802273c:	080226ff 	.word	0x080226ff
 8022740:	080226ff 	.word	0x080226ff
 8022744:	080226ff 	.word	0x080226ff
 8022748:	080226ff 	.word	0x080226ff
 802274c:	080226ff 	.word	0x080226ff
 8022750:	0802286b 	.word	0x0802286b
 8022754:	08022841 	.word	0x08022841
 8022758:	080227af 	.word	0x080227af
 802275c:	080227af 	.word	0x080227af
 8022760:	080227af 	.word	0x080227af
 8022764:	080226ff 	.word	0x080226ff
 8022768:	08022845 	.word	0x08022845
 802276c:	080226ff 	.word	0x080226ff
 8022770:	080226ff 	.word	0x080226ff
 8022774:	080226ff 	.word	0x080226ff
 8022778:	080226ff 	.word	0x080226ff
 802277c:	0802287b 	.word	0x0802287b
 8022780:	0802284d 	.word	0x0802284d
 8022784:	080227ef 	.word	0x080227ef
 8022788:	080226ff 	.word	0x080226ff
 802278c:	080226ff 	.word	0x080226ff
 8022790:	08022877 	.word	0x08022877
 8022794:	080226ff 	.word	0x080226ff
 8022798:	08022841 	.word	0x08022841
 802279c:	080226ff 	.word	0x080226ff
 80227a0:	080226ff 	.word	0x080226ff
 80227a4:	080227f7 	.word	0x080227f7
 80227a8:	3b45      	subs	r3, #69	; 0x45
 80227aa:	2b02      	cmp	r3, #2
 80227ac:	d8a7      	bhi.n	80226fe <__ssvfiscanf_r+0xd2>
 80227ae:	2305      	movs	r3, #5
 80227b0:	e02b      	b.n	802280a <__ssvfiscanf_r+0x1de>
 80227b2:	6863      	ldr	r3, [r4, #4]
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	dd0d      	ble.n	80227d4 <__ssvfiscanf_r+0x1a8>
 80227b8:	6823      	ldr	r3, [r4, #0]
 80227ba:	781a      	ldrb	r2, [r3, #0]
 80227bc:	4552      	cmp	r2, sl
 80227be:	f040 80a1 	bne.w	8022904 <__ssvfiscanf_r+0x2d8>
 80227c2:	3301      	adds	r3, #1
 80227c4:	6862      	ldr	r2, [r4, #4]
 80227c6:	6023      	str	r3, [r4, #0]
 80227c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80227ca:	3a01      	subs	r2, #1
 80227cc:	3301      	adds	r3, #1
 80227ce:	6062      	str	r2, [r4, #4]
 80227d0:	9345      	str	r3, [sp, #276]	; 0x114
 80227d2:	e755      	b.n	8022680 <__ssvfiscanf_r+0x54>
 80227d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80227d6:	4621      	mov	r1, r4
 80227d8:	4630      	mov	r0, r6
 80227da:	4798      	blx	r3
 80227dc:	2800      	cmp	r0, #0
 80227de:	d0eb      	beq.n	80227b8 <__ssvfiscanf_r+0x18c>
 80227e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80227e2:	2800      	cmp	r0, #0
 80227e4:	f040 8084 	bne.w	80228f0 <__ssvfiscanf_r+0x2c4>
 80227e8:	f04f 30ff 	mov.w	r0, #4294967295
 80227ec:	e086      	b.n	80228fc <__ssvfiscanf_r+0x2d0>
 80227ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80227f0:	f042 0220 	orr.w	r2, r2, #32
 80227f4:	9241      	str	r2, [sp, #260]	; 0x104
 80227f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80227f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80227fc:	9241      	str	r2, [sp, #260]	; 0x104
 80227fe:	2210      	movs	r2, #16
 8022800:	2b6f      	cmp	r3, #111	; 0x6f
 8022802:	9242      	str	r2, [sp, #264]	; 0x108
 8022804:	bf34      	ite	cc
 8022806:	2303      	movcc	r3, #3
 8022808:	2304      	movcs	r3, #4
 802280a:	9347      	str	r3, [sp, #284]	; 0x11c
 802280c:	6863      	ldr	r3, [r4, #4]
 802280e:	2b00      	cmp	r3, #0
 8022810:	dd41      	ble.n	8022896 <__ssvfiscanf_r+0x26a>
 8022812:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022814:	0659      	lsls	r1, r3, #25
 8022816:	d404      	bmi.n	8022822 <__ssvfiscanf_r+0x1f6>
 8022818:	6823      	ldr	r3, [r4, #0]
 802281a:	781a      	ldrb	r2, [r3, #0]
 802281c:	5cba      	ldrb	r2, [r7, r2]
 802281e:	0712      	lsls	r2, r2, #28
 8022820:	d440      	bmi.n	80228a4 <__ssvfiscanf_r+0x278>
 8022822:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8022824:	2b02      	cmp	r3, #2
 8022826:	dc4f      	bgt.n	80228c8 <__ssvfiscanf_r+0x29c>
 8022828:	466b      	mov	r3, sp
 802282a:	4622      	mov	r2, r4
 802282c:	a941      	add	r1, sp, #260	; 0x104
 802282e:	4630      	mov	r0, r6
 8022830:	f000 f874 	bl	802291c <_scanf_chars>
 8022834:	2801      	cmp	r0, #1
 8022836:	d065      	beq.n	8022904 <__ssvfiscanf_r+0x2d8>
 8022838:	2802      	cmp	r0, #2
 802283a:	f47f af21 	bne.w	8022680 <__ssvfiscanf_r+0x54>
 802283e:	e7cf      	b.n	80227e0 <__ssvfiscanf_r+0x1b4>
 8022840:	220a      	movs	r2, #10
 8022842:	e7dd      	b.n	8022800 <__ssvfiscanf_r+0x1d4>
 8022844:	2300      	movs	r3, #0
 8022846:	9342      	str	r3, [sp, #264]	; 0x108
 8022848:	2303      	movs	r3, #3
 802284a:	e7de      	b.n	802280a <__ssvfiscanf_r+0x1de>
 802284c:	2308      	movs	r3, #8
 802284e:	9342      	str	r3, [sp, #264]	; 0x108
 8022850:	2304      	movs	r3, #4
 8022852:	e7da      	b.n	802280a <__ssvfiscanf_r+0x1de>
 8022854:	4629      	mov	r1, r5
 8022856:	4640      	mov	r0, r8
 8022858:	f000 f9ac 	bl	8022bb4 <__sccl>
 802285c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802285e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022862:	9341      	str	r3, [sp, #260]	; 0x104
 8022864:	4605      	mov	r5, r0
 8022866:	2301      	movs	r3, #1
 8022868:	e7cf      	b.n	802280a <__ssvfiscanf_r+0x1de>
 802286a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802286c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022870:	9341      	str	r3, [sp, #260]	; 0x104
 8022872:	2300      	movs	r3, #0
 8022874:	e7c9      	b.n	802280a <__ssvfiscanf_r+0x1de>
 8022876:	2302      	movs	r3, #2
 8022878:	e7c7      	b.n	802280a <__ssvfiscanf_r+0x1de>
 802287a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802287c:	06c3      	lsls	r3, r0, #27
 802287e:	f53f aeff 	bmi.w	8022680 <__ssvfiscanf_r+0x54>
 8022882:	9b00      	ldr	r3, [sp, #0]
 8022884:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022886:	1d19      	adds	r1, r3, #4
 8022888:	9100      	str	r1, [sp, #0]
 802288a:	681b      	ldr	r3, [r3, #0]
 802288c:	07c0      	lsls	r0, r0, #31
 802288e:	bf4c      	ite	mi
 8022890:	801a      	strhmi	r2, [r3, #0]
 8022892:	601a      	strpl	r2, [r3, #0]
 8022894:	e6f4      	b.n	8022680 <__ssvfiscanf_r+0x54>
 8022896:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022898:	4621      	mov	r1, r4
 802289a:	4630      	mov	r0, r6
 802289c:	4798      	blx	r3
 802289e:	2800      	cmp	r0, #0
 80228a0:	d0b7      	beq.n	8022812 <__ssvfiscanf_r+0x1e6>
 80228a2:	e79d      	b.n	80227e0 <__ssvfiscanf_r+0x1b4>
 80228a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80228a6:	3201      	adds	r2, #1
 80228a8:	9245      	str	r2, [sp, #276]	; 0x114
 80228aa:	6862      	ldr	r2, [r4, #4]
 80228ac:	3a01      	subs	r2, #1
 80228ae:	2a00      	cmp	r2, #0
 80228b0:	6062      	str	r2, [r4, #4]
 80228b2:	dd02      	ble.n	80228ba <__ssvfiscanf_r+0x28e>
 80228b4:	3301      	adds	r3, #1
 80228b6:	6023      	str	r3, [r4, #0]
 80228b8:	e7ae      	b.n	8022818 <__ssvfiscanf_r+0x1ec>
 80228ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80228bc:	4621      	mov	r1, r4
 80228be:	4630      	mov	r0, r6
 80228c0:	4798      	blx	r3
 80228c2:	2800      	cmp	r0, #0
 80228c4:	d0a8      	beq.n	8022818 <__ssvfiscanf_r+0x1ec>
 80228c6:	e78b      	b.n	80227e0 <__ssvfiscanf_r+0x1b4>
 80228c8:	2b04      	cmp	r3, #4
 80228ca:	dc06      	bgt.n	80228da <__ssvfiscanf_r+0x2ae>
 80228cc:	466b      	mov	r3, sp
 80228ce:	4622      	mov	r2, r4
 80228d0:	a941      	add	r1, sp, #260	; 0x104
 80228d2:	4630      	mov	r0, r6
 80228d4:	f000 f87a 	bl	80229cc <_scanf_i>
 80228d8:	e7ac      	b.n	8022834 <__ssvfiscanf_r+0x208>
 80228da:	4b0f      	ldr	r3, [pc, #60]	; (8022918 <__ssvfiscanf_r+0x2ec>)
 80228dc:	2b00      	cmp	r3, #0
 80228de:	f43f aecf 	beq.w	8022680 <__ssvfiscanf_r+0x54>
 80228e2:	466b      	mov	r3, sp
 80228e4:	4622      	mov	r2, r4
 80228e6:	a941      	add	r1, sp, #260	; 0x104
 80228e8:	4630      	mov	r0, r6
 80228ea:	f3af 8000 	nop.w
 80228ee:	e7a1      	b.n	8022834 <__ssvfiscanf_r+0x208>
 80228f0:	89a3      	ldrh	r3, [r4, #12]
 80228f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80228f6:	bf18      	it	ne
 80228f8:	f04f 30ff 	movne.w	r0, #4294967295
 80228fc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8022900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022904:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022906:	e7f9      	b.n	80228fc <__ssvfiscanf_r+0x2d0>
 8022908:	08022579 	.word	0x08022579
 802290c:	080225f3 	.word	0x080225f3
 8022910:	080291d9 	.word	0x080291d9
 8022914:	080292e9 	.word	0x080292e9
 8022918:	00000000 	.word	0x00000000

0802291c <_scanf_chars>:
 802291c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022920:	4615      	mov	r5, r2
 8022922:	688a      	ldr	r2, [r1, #8]
 8022924:	4680      	mov	r8, r0
 8022926:	460c      	mov	r4, r1
 8022928:	b932      	cbnz	r2, 8022938 <_scanf_chars+0x1c>
 802292a:	698a      	ldr	r2, [r1, #24]
 802292c:	2a00      	cmp	r2, #0
 802292e:	bf0c      	ite	eq
 8022930:	2201      	moveq	r2, #1
 8022932:	f04f 32ff 	movne.w	r2, #4294967295
 8022936:	608a      	str	r2, [r1, #8]
 8022938:	6822      	ldr	r2, [r4, #0]
 802293a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80229c8 <_scanf_chars+0xac>
 802293e:	06d1      	lsls	r1, r2, #27
 8022940:	bf5f      	itttt	pl
 8022942:	681a      	ldrpl	r2, [r3, #0]
 8022944:	1d11      	addpl	r1, r2, #4
 8022946:	6019      	strpl	r1, [r3, #0]
 8022948:	6816      	ldrpl	r6, [r2, #0]
 802294a:	2700      	movs	r7, #0
 802294c:	69a0      	ldr	r0, [r4, #24]
 802294e:	b188      	cbz	r0, 8022974 <_scanf_chars+0x58>
 8022950:	2801      	cmp	r0, #1
 8022952:	d107      	bne.n	8022964 <_scanf_chars+0x48>
 8022954:	682b      	ldr	r3, [r5, #0]
 8022956:	781a      	ldrb	r2, [r3, #0]
 8022958:	6963      	ldr	r3, [r4, #20]
 802295a:	5c9b      	ldrb	r3, [r3, r2]
 802295c:	b953      	cbnz	r3, 8022974 <_scanf_chars+0x58>
 802295e:	bb27      	cbnz	r7, 80229aa <_scanf_chars+0x8e>
 8022960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022964:	2802      	cmp	r0, #2
 8022966:	d120      	bne.n	80229aa <_scanf_chars+0x8e>
 8022968:	682b      	ldr	r3, [r5, #0]
 802296a:	781b      	ldrb	r3, [r3, #0]
 802296c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8022970:	071b      	lsls	r3, r3, #28
 8022972:	d41a      	bmi.n	80229aa <_scanf_chars+0x8e>
 8022974:	6823      	ldr	r3, [r4, #0]
 8022976:	06da      	lsls	r2, r3, #27
 8022978:	bf5e      	ittt	pl
 802297a:	682b      	ldrpl	r3, [r5, #0]
 802297c:	781b      	ldrbpl	r3, [r3, #0]
 802297e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8022982:	682a      	ldr	r2, [r5, #0]
 8022984:	686b      	ldr	r3, [r5, #4]
 8022986:	3201      	adds	r2, #1
 8022988:	602a      	str	r2, [r5, #0]
 802298a:	68a2      	ldr	r2, [r4, #8]
 802298c:	3b01      	subs	r3, #1
 802298e:	3a01      	subs	r2, #1
 8022990:	606b      	str	r3, [r5, #4]
 8022992:	3701      	adds	r7, #1
 8022994:	60a2      	str	r2, [r4, #8]
 8022996:	b142      	cbz	r2, 80229aa <_scanf_chars+0x8e>
 8022998:	2b00      	cmp	r3, #0
 802299a:	dcd7      	bgt.n	802294c <_scanf_chars+0x30>
 802299c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80229a0:	4629      	mov	r1, r5
 80229a2:	4640      	mov	r0, r8
 80229a4:	4798      	blx	r3
 80229a6:	2800      	cmp	r0, #0
 80229a8:	d0d0      	beq.n	802294c <_scanf_chars+0x30>
 80229aa:	6823      	ldr	r3, [r4, #0]
 80229ac:	f013 0310 	ands.w	r3, r3, #16
 80229b0:	d105      	bne.n	80229be <_scanf_chars+0xa2>
 80229b2:	68e2      	ldr	r2, [r4, #12]
 80229b4:	3201      	adds	r2, #1
 80229b6:	60e2      	str	r2, [r4, #12]
 80229b8:	69a2      	ldr	r2, [r4, #24]
 80229ba:	b102      	cbz	r2, 80229be <_scanf_chars+0xa2>
 80229bc:	7033      	strb	r3, [r6, #0]
 80229be:	6923      	ldr	r3, [r4, #16]
 80229c0:	441f      	add	r7, r3
 80229c2:	6127      	str	r7, [r4, #16]
 80229c4:	2000      	movs	r0, #0
 80229c6:	e7cb      	b.n	8022960 <_scanf_chars+0x44>
 80229c8:	080291d9 	.word	0x080291d9

080229cc <_scanf_i>:
 80229cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229d0:	4698      	mov	r8, r3
 80229d2:	4b74      	ldr	r3, [pc, #464]	; (8022ba4 <_scanf_i+0x1d8>)
 80229d4:	460c      	mov	r4, r1
 80229d6:	4682      	mov	sl, r0
 80229d8:	4616      	mov	r6, r2
 80229da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80229de:	b087      	sub	sp, #28
 80229e0:	ab03      	add	r3, sp, #12
 80229e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80229e6:	4b70      	ldr	r3, [pc, #448]	; (8022ba8 <_scanf_i+0x1dc>)
 80229e8:	69a1      	ldr	r1, [r4, #24]
 80229ea:	4a70      	ldr	r2, [pc, #448]	; (8022bac <_scanf_i+0x1e0>)
 80229ec:	2903      	cmp	r1, #3
 80229ee:	bf18      	it	ne
 80229f0:	461a      	movne	r2, r3
 80229f2:	68a3      	ldr	r3, [r4, #8]
 80229f4:	9201      	str	r2, [sp, #4]
 80229f6:	1e5a      	subs	r2, r3, #1
 80229f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80229fc:	bf88      	it	hi
 80229fe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8022a02:	4627      	mov	r7, r4
 8022a04:	bf82      	ittt	hi
 8022a06:	eb03 0905 	addhi.w	r9, r3, r5
 8022a0a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8022a0e:	60a3      	strhi	r3, [r4, #8]
 8022a10:	f857 3b1c 	ldr.w	r3, [r7], #28
 8022a14:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8022a18:	bf98      	it	ls
 8022a1a:	f04f 0900 	movls.w	r9, #0
 8022a1e:	6023      	str	r3, [r4, #0]
 8022a20:	463d      	mov	r5, r7
 8022a22:	f04f 0b00 	mov.w	fp, #0
 8022a26:	6831      	ldr	r1, [r6, #0]
 8022a28:	ab03      	add	r3, sp, #12
 8022a2a:	7809      	ldrb	r1, [r1, #0]
 8022a2c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8022a30:	2202      	movs	r2, #2
 8022a32:	f7dd fc15 	bl	8000260 <memchr>
 8022a36:	b328      	cbz	r0, 8022a84 <_scanf_i+0xb8>
 8022a38:	f1bb 0f01 	cmp.w	fp, #1
 8022a3c:	d159      	bne.n	8022af2 <_scanf_i+0x126>
 8022a3e:	6862      	ldr	r2, [r4, #4]
 8022a40:	b92a      	cbnz	r2, 8022a4e <_scanf_i+0x82>
 8022a42:	6822      	ldr	r2, [r4, #0]
 8022a44:	2308      	movs	r3, #8
 8022a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022a4a:	6063      	str	r3, [r4, #4]
 8022a4c:	6022      	str	r2, [r4, #0]
 8022a4e:	6822      	ldr	r2, [r4, #0]
 8022a50:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8022a54:	6022      	str	r2, [r4, #0]
 8022a56:	68a2      	ldr	r2, [r4, #8]
 8022a58:	1e51      	subs	r1, r2, #1
 8022a5a:	60a1      	str	r1, [r4, #8]
 8022a5c:	b192      	cbz	r2, 8022a84 <_scanf_i+0xb8>
 8022a5e:	6832      	ldr	r2, [r6, #0]
 8022a60:	1c51      	adds	r1, r2, #1
 8022a62:	6031      	str	r1, [r6, #0]
 8022a64:	7812      	ldrb	r2, [r2, #0]
 8022a66:	f805 2b01 	strb.w	r2, [r5], #1
 8022a6a:	6872      	ldr	r2, [r6, #4]
 8022a6c:	3a01      	subs	r2, #1
 8022a6e:	2a00      	cmp	r2, #0
 8022a70:	6072      	str	r2, [r6, #4]
 8022a72:	dc07      	bgt.n	8022a84 <_scanf_i+0xb8>
 8022a74:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8022a78:	4631      	mov	r1, r6
 8022a7a:	4650      	mov	r0, sl
 8022a7c:	4790      	blx	r2
 8022a7e:	2800      	cmp	r0, #0
 8022a80:	f040 8085 	bne.w	8022b8e <_scanf_i+0x1c2>
 8022a84:	f10b 0b01 	add.w	fp, fp, #1
 8022a88:	f1bb 0f03 	cmp.w	fp, #3
 8022a8c:	d1cb      	bne.n	8022a26 <_scanf_i+0x5a>
 8022a8e:	6863      	ldr	r3, [r4, #4]
 8022a90:	b90b      	cbnz	r3, 8022a96 <_scanf_i+0xca>
 8022a92:	230a      	movs	r3, #10
 8022a94:	6063      	str	r3, [r4, #4]
 8022a96:	6863      	ldr	r3, [r4, #4]
 8022a98:	4945      	ldr	r1, [pc, #276]	; (8022bb0 <_scanf_i+0x1e4>)
 8022a9a:	6960      	ldr	r0, [r4, #20]
 8022a9c:	1ac9      	subs	r1, r1, r3
 8022a9e:	f000 f889 	bl	8022bb4 <__sccl>
 8022aa2:	f04f 0b00 	mov.w	fp, #0
 8022aa6:	68a3      	ldr	r3, [r4, #8]
 8022aa8:	6822      	ldr	r2, [r4, #0]
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	d03d      	beq.n	8022b2a <_scanf_i+0x15e>
 8022aae:	6831      	ldr	r1, [r6, #0]
 8022ab0:	6960      	ldr	r0, [r4, #20]
 8022ab2:	f891 c000 	ldrb.w	ip, [r1]
 8022ab6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8022aba:	2800      	cmp	r0, #0
 8022abc:	d035      	beq.n	8022b2a <_scanf_i+0x15e>
 8022abe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8022ac2:	d124      	bne.n	8022b0e <_scanf_i+0x142>
 8022ac4:	0510      	lsls	r0, r2, #20
 8022ac6:	d522      	bpl.n	8022b0e <_scanf_i+0x142>
 8022ac8:	f10b 0b01 	add.w	fp, fp, #1
 8022acc:	f1b9 0f00 	cmp.w	r9, #0
 8022ad0:	d003      	beq.n	8022ada <_scanf_i+0x10e>
 8022ad2:	3301      	adds	r3, #1
 8022ad4:	f109 39ff 	add.w	r9, r9, #4294967295
 8022ad8:	60a3      	str	r3, [r4, #8]
 8022ada:	6873      	ldr	r3, [r6, #4]
 8022adc:	3b01      	subs	r3, #1
 8022ade:	2b00      	cmp	r3, #0
 8022ae0:	6073      	str	r3, [r6, #4]
 8022ae2:	dd1b      	ble.n	8022b1c <_scanf_i+0x150>
 8022ae4:	6833      	ldr	r3, [r6, #0]
 8022ae6:	3301      	adds	r3, #1
 8022ae8:	6033      	str	r3, [r6, #0]
 8022aea:	68a3      	ldr	r3, [r4, #8]
 8022aec:	3b01      	subs	r3, #1
 8022aee:	60a3      	str	r3, [r4, #8]
 8022af0:	e7d9      	b.n	8022aa6 <_scanf_i+0xda>
 8022af2:	f1bb 0f02 	cmp.w	fp, #2
 8022af6:	d1ae      	bne.n	8022a56 <_scanf_i+0x8a>
 8022af8:	6822      	ldr	r2, [r4, #0]
 8022afa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8022afe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022b02:	d1bf      	bne.n	8022a84 <_scanf_i+0xb8>
 8022b04:	2310      	movs	r3, #16
 8022b06:	6063      	str	r3, [r4, #4]
 8022b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022b0c:	e7a2      	b.n	8022a54 <_scanf_i+0x88>
 8022b0e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8022b12:	6022      	str	r2, [r4, #0]
 8022b14:	780b      	ldrb	r3, [r1, #0]
 8022b16:	f805 3b01 	strb.w	r3, [r5], #1
 8022b1a:	e7de      	b.n	8022ada <_scanf_i+0x10e>
 8022b1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022b20:	4631      	mov	r1, r6
 8022b22:	4650      	mov	r0, sl
 8022b24:	4798      	blx	r3
 8022b26:	2800      	cmp	r0, #0
 8022b28:	d0df      	beq.n	8022aea <_scanf_i+0x11e>
 8022b2a:	6823      	ldr	r3, [r4, #0]
 8022b2c:	05d9      	lsls	r1, r3, #23
 8022b2e:	d50d      	bpl.n	8022b4c <_scanf_i+0x180>
 8022b30:	42bd      	cmp	r5, r7
 8022b32:	d909      	bls.n	8022b48 <_scanf_i+0x17c>
 8022b34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8022b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022b3c:	4632      	mov	r2, r6
 8022b3e:	4650      	mov	r0, sl
 8022b40:	4798      	blx	r3
 8022b42:	f105 39ff 	add.w	r9, r5, #4294967295
 8022b46:	464d      	mov	r5, r9
 8022b48:	42bd      	cmp	r5, r7
 8022b4a:	d028      	beq.n	8022b9e <_scanf_i+0x1d2>
 8022b4c:	6822      	ldr	r2, [r4, #0]
 8022b4e:	f012 0210 	ands.w	r2, r2, #16
 8022b52:	d113      	bne.n	8022b7c <_scanf_i+0x1b0>
 8022b54:	702a      	strb	r2, [r5, #0]
 8022b56:	6863      	ldr	r3, [r4, #4]
 8022b58:	9e01      	ldr	r6, [sp, #4]
 8022b5a:	4639      	mov	r1, r7
 8022b5c:	4650      	mov	r0, sl
 8022b5e:	47b0      	blx	r6
 8022b60:	f8d8 3000 	ldr.w	r3, [r8]
 8022b64:	6821      	ldr	r1, [r4, #0]
 8022b66:	1d1a      	adds	r2, r3, #4
 8022b68:	f8c8 2000 	str.w	r2, [r8]
 8022b6c:	f011 0f20 	tst.w	r1, #32
 8022b70:	681b      	ldr	r3, [r3, #0]
 8022b72:	d00f      	beq.n	8022b94 <_scanf_i+0x1c8>
 8022b74:	6018      	str	r0, [r3, #0]
 8022b76:	68e3      	ldr	r3, [r4, #12]
 8022b78:	3301      	adds	r3, #1
 8022b7a:	60e3      	str	r3, [r4, #12]
 8022b7c:	1bed      	subs	r5, r5, r7
 8022b7e:	44ab      	add	fp, r5
 8022b80:	6925      	ldr	r5, [r4, #16]
 8022b82:	445d      	add	r5, fp
 8022b84:	6125      	str	r5, [r4, #16]
 8022b86:	2000      	movs	r0, #0
 8022b88:	b007      	add	sp, #28
 8022b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b8e:	f04f 0b00 	mov.w	fp, #0
 8022b92:	e7ca      	b.n	8022b2a <_scanf_i+0x15e>
 8022b94:	07ca      	lsls	r2, r1, #31
 8022b96:	bf4c      	ite	mi
 8022b98:	8018      	strhmi	r0, [r3, #0]
 8022b9a:	6018      	strpl	r0, [r3, #0]
 8022b9c:	e7eb      	b.n	8022b76 <_scanf_i+0x1aa>
 8022b9e:	2001      	movs	r0, #1
 8022ba0:	e7f2      	b.n	8022b88 <_scanf_i+0x1bc>
 8022ba2:	bf00      	nop
 8022ba4:	080261a0 	.word	0x080261a0
 8022ba8:	08020f8d 	.word	0x08020f8d
 8022bac:	08020e7d 	.word	0x08020e7d
 8022bb0:	0802932f 	.word	0x0802932f

08022bb4 <__sccl>:
 8022bb4:	b570      	push	{r4, r5, r6, lr}
 8022bb6:	780b      	ldrb	r3, [r1, #0]
 8022bb8:	4604      	mov	r4, r0
 8022bba:	2b5e      	cmp	r3, #94	; 0x5e
 8022bbc:	bf0b      	itete	eq
 8022bbe:	784b      	ldrbeq	r3, [r1, #1]
 8022bc0:	1c48      	addne	r0, r1, #1
 8022bc2:	1c88      	addeq	r0, r1, #2
 8022bc4:	2200      	movne	r2, #0
 8022bc6:	bf08      	it	eq
 8022bc8:	2201      	moveq	r2, #1
 8022bca:	1e61      	subs	r1, r4, #1
 8022bcc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8022bd0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8022bd4:	42a9      	cmp	r1, r5
 8022bd6:	d1fb      	bne.n	8022bd0 <__sccl+0x1c>
 8022bd8:	b90b      	cbnz	r3, 8022bde <__sccl+0x2a>
 8022bda:	3801      	subs	r0, #1
 8022bdc:	bd70      	pop	{r4, r5, r6, pc}
 8022bde:	f082 0101 	eor.w	r1, r2, #1
 8022be2:	54e1      	strb	r1, [r4, r3]
 8022be4:	1c42      	adds	r2, r0, #1
 8022be6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8022bea:	2d2d      	cmp	r5, #45	; 0x2d
 8022bec:	f102 36ff 	add.w	r6, r2, #4294967295
 8022bf0:	4610      	mov	r0, r2
 8022bf2:	d006      	beq.n	8022c02 <__sccl+0x4e>
 8022bf4:	2d5d      	cmp	r5, #93	; 0x5d
 8022bf6:	d0f1      	beq.n	8022bdc <__sccl+0x28>
 8022bf8:	b90d      	cbnz	r5, 8022bfe <__sccl+0x4a>
 8022bfa:	4630      	mov	r0, r6
 8022bfc:	e7ee      	b.n	8022bdc <__sccl+0x28>
 8022bfe:	462b      	mov	r3, r5
 8022c00:	e7ef      	b.n	8022be2 <__sccl+0x2e>
 8022c02:	7816      	ldrb	r6, [r2, #0]
 8022c04:	2e5d      	cmp	r6, #93	; 0x5d
 8022c06:	d0fa      	beq.n	8022bfe <__sccl+0x4a>
 8022c08:	42b3      	cmp	r3, r6
 8022c0a:	dcf8      	bgt.n	8022bfe <__sccl+0x4a>
 8022c0c:	4618      	mov	r0, r3
 8022c0e:	3001      	adds	r0, #1
 8022c10:	4286      	cmp	r6, r0
 8022c12:	5421      	strb	r1, [r4, r0]
 8022c14:	dcfb      	bgt.n	8022c0e <__sccl+0x5a>
 8022c16:	43d8      	mvns	r0, r3
 8022c18:	4430      	add	r0, r6
 8022c1a:	1c5d      	adds	r5, r3, #1
 8022c1c:	42b3      	cmp	r3, r6
 8022c1e:	bfa8      	it	ge
 8022c20:	2000      	movge	r0, #0
 8022c22:	182b      	adds	r3, r5, r0
 8022c24:	3202      	adds	r2, #2
 8022c26:	e7de      	b.n	8022be6 <__sccl+0x32>

08022c28 <__submore>:
 8022c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c2c:	460c      	mov	r4, r1
 8022c2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022c34:	4299      	cmp	r1, r3
 8022c36:	d11d      	bne.n	8022c74 <__submore+0x4c>
 8022c38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022c3c:	f7fd f974 	bl	801ff28 <_malloc_r>
 8022c40:	b918      	cbnz	r0, 8022c4a <__submore+0x22>
 8022c42:	f04f 30ff 	mov.w	r0, #4294967295
 8022c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022c4e:	63a3      	str	r3, [r4, #56]	; 0x38
 8022c50:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8022c54:	6360      	str	r0, [r4, #52]	; 0x34
 8022c56:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8022c5a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8022c5e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8022c62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8022c66:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8022c6a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8022c6e:	6020      	str	r0, [r4, #0]
 8022c70:	2000      	movs	r0, #0
 8022c72:	e7e8      	b.n	8022c46 <__submore+0x1e>
 8022c74:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8022c76:	0077      	lsls	r7, r6, #1
 8022c78:	463a      	mov	r2, r7
 8022c7a:	f7fe fefd 	bl	8021a78 <_realloc_r>
 8022c7e:	4605      	mov	r5, r0
 8022c80:	2800      	cmp	r0, #0
 8022c82:	d0de      	beq.n	8022c42 <__submore+0x1a>
 8022c84:	eb00 0806 	add.w	r8, r0, r6
 8022c88:	4601      	mov	r1, r0
 8022c8a:	4632      	mov	r2, r6
 8022c8c:	4640      	mov	r0, r8
 8022c8e:	f7fd f8d5 	bl	801fe3c <memcpy>
 8022c92:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8022c96:	f8c4 8000 	str.w	r8, [r4]
 8022c9a:	e7e9      	b.n	8022c70 <__submore+0x48>

08022c9c <_init>:
 8022c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c9e:	bf00      	nop
 8022ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022ca2:	bc08      	pop	{r3}
 8022ca4:	469e      	mov	lr, r3
 8022ca6:	4770      	bx	lr

08022ca8 <_fini>:
 8022ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022caa:	bf00      	nop
 8022cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022cae:	bc08      	pop	{r3}
 8022cb0:	469e      	mov	lr, r3
 8022cb2:	4770      	bx	lr
 8022cb4:	0000      	movs	r0, r0
	...

08022cb8 <__time_veneer>:
 8022cb8:	e51ff004 	ldr	pc, [pc, #-4]	; 8022cbc <__time_veneer+0x4>
 8022cbc:	200005c0 	.word	0x200005c0
