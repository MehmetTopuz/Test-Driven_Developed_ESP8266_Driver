
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023348  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000065b8  08023528  08023528  00033528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029ae0  08029ae0  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08029ae0  08029ae0  00039ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029ae8  08029ae8  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08029ae8  08029ae8  00039ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08029af8  08029af8  00039af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08029b08  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c5c  2000033c  08029e44  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f98  08029e44  00040f98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006ab2c  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c113  00000000  00000000  000aae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000044f0  00000000  00000000  000b6fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000042d0  00000000  00000000  000bb4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d891  00000000  00000000  000bf770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d4f3  00000000  00000000  000ed001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001143b3  00000000  00000000  0011a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022e8a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014d70  00000000  00000000  0022e8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08023504 	.word	0x08023504

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08023504 	.word	0x08023504

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000040c 	.word	0x2000040c

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01e feca 	bl	801fb04 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01e fe22 	bl	801fb04 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000f98 	.word	0x20000f98

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01f f9f9 	bl	8020340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f003 f887 	bl	8004060 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	08029b08 	.word	0x08029b08
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000f98 	.word	0x20000f98

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000f84 	.word	0x20000f84
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000f84 	.word	0x20000f84

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08026958 	.word	0x08026958
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08026968 	.word	0x08026968

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08026968 	.word	0x08026968

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08026970 	.word	0x08026970
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08026988 	.word	0x08026988
 8003904:	08026990 	.word	0x08026990

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 faa2 	bl	8003e84 <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	2000049c 	.word	0x2000049c

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fab4 	bl	8003f06 <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	2000049c 	.word	0x2000049c

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fb2b 	bl	800401a <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	2000049c 	.word	0x2000049c

080039d4 <Wait_Response>:


Status Wait_Response(char* response, uint32_t timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <Wait_Response+0x74>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <Wait_Response+0x78>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <Wait_Response+0x7c>)
 80039f0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <Wait_Response+0x74>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <Wait_Response+0x80>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fb0b 	bl	800401a <ringBuffer_lookFor>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <Wait_Response+0x46>
	{
		firstCall = 0;
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <Wait_Response+0x74>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <Wait_Response+0x7c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e012      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <Wait_Response+0x78>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4798      	blx	r3
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <Wait_Response+0x7c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d807      	bhi.n	8003a3e <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <Wait_Response+0x74>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <Wait_Response+0x7c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e000      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003a3e:	2305      	movs	r3, #5
	}

}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2000036c 	.word	0x2000036c
 8003a4c:	20000360 	.word	0x20000360
 8003a50:	20000370 	.word	0x20000370
 8003a54:	2000049c 	.word	0x2000049c

08003a58 <Connect_Wifi>:

Status Connect_Wifi(char* ssid, char* password)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b098      	sub	sp, #96	; 0x60
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003a62:	4a16      	ldr	r2, [pc, #88]	; (8003abc <Connect_Wifi+0x64>)
 8003a64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003a6e:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <Connect_Wifi+0x68>)
 8003a70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003a7a:	2305      	movs	r3, #5
 8003a7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003a80:	f107 0008 	add.w	r0, r7, #8
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <Connect_Wifi+0x6c>)
 8003a8c:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <Connect_Wifi+0x70>)
 8003a8e:	f01c ffcb 	bl	8020a28 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003a92:	f107 0308 	add.w	r3, r7, #8
 8003a96:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003a98:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003a9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f82e 	bl	8003b04 <Command_Process>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003aae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3758      	adds	r7, #88	; 0x58
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	08023594 	.word	0x08023594
 8003ac0:	080235a0 	.word	0x080235a0
 8003ac4:	08023578 	.word	0x08023578
 8003ac8:	08023584 	.word	0x08023584

08003acc <Disconnect_Wifi>:

Status Disconnect_Wifi(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <Disconnect_Wifi+0x30>)
 8003ad4:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <Disconnect_Wifi+0x34>)
 8003ad8:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003ada:	2305      	movs	r3, #5
 8003adc:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003ade:	1d39      	adds	r1, r7, #4
 8003ae0:	f107 0308 	add.w	r3, r7, #8
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f80c 	bl	8003b04 <Command_Process>
 8003aec:	4603      	mov	r3, r0
 8003aee:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]

}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	08023538 	.word	0x08023538
 8003b00:	08023548 	.word	0x08023548

08003b04 <Command_Process>:

Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <Command_Process+0x1e>
 8003b18:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <Command_Process+0xfc>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	79fa      	ldrb	r2, [r7, #7]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d806      	bhi.n	8003b30 <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <Command_Process+0x100>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fa41 	bl	8003fae <ringBuffer_flush>
		return STATUS_ERROR;
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	e062      	b.n	8003bf6 <Command_Process+0xf2>
	}
	else
	{
		if(commandFlag)
 8003b30:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <Command_Process+0x104>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <Command_Process+0xfc>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff0b 	bl	8003960 <Send_AT_Command>
			commandFlag = 0;
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <Command_Process+0x104>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
		}
//		else
//		{
			response = Wait_Response(responseArray[currentCommand], 5000);
 8003b50:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <Command_Process+0xfc>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	4413      	add	r3, r2
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff37 	bl	80039d4 <Wait_Response>
 8003b66:	4603      	mov	r3, r0
 8003b68:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003b6a:	4828      	ldr	r0, [pc, #160]	; (8003c0c <Command_Process+0x108>)
 8003b6c:	f7ff ff20 	bl	80039b0 <Read_Response>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00c      	beq.n	8003b90 <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <Command_Process+0x104>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <Command_Process+0xfc>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <Command_Process+0x100>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fa11 	bl	8003fae <ringBuffer_flush>
				return STATUS_ERROR;
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	e032      	b.n	8003bf6 <Command_Process+0xf2>
			}
			else if(response == IDLE)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d101      	bne.n	8003b9a <Command_Process+0x96>
			{
				return response;
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	e02d      	b.n	8003bf6 <Command_Process+0xf2>
			}
			else if(response == FOUND)
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d123      	bne.n	8003be8 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <Command_Process+0xfc>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d10c      	bne.n	8003bc8 <Command_Process+0xc4>
				{
					commandFlag = 1;
 8003bae:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <Command_Process+0x104>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <Command_Process+0xfc>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003bba:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <Command_Process+0x100>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f9f5 	bl	8003fae <ringBuffer_flush>
					return STATUS_OK;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e016      	b.n	8003bf6 <Command_Process+0xf2>
				}
				else
				{
					commandFlag = 1;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <Command_Process+0x104>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <Command_Process+0xfc>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <Command_Process+0xfc>)
 8003bd8:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <Command_Process+0x100>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f9e5 	bl	8003fae <ringBuffer_flush>
					return response;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	e006      	b.n	8003bf6 <Command_Process+0xf2>
				}

			}
			else
			{
				commandFlag = 1;
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <Command_Process+0x104>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <Command_Process+0xfc>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
				return response;
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
			}
//		}
	}


}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000374 	.word	0x20000374
 8003c04:	2000049c 	.word	0x2000049c
 8003c08:	20000010 	.word	0x20000010
 8003c0c:	080235ac 	.word	0x080235ac

08003c10 <Connect_TCP_Server>:

Status Connect_TCP_Server(char* ip, char* port)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b0a4      	sub	sp, #144	; 0x90
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char *command_buffer[3] =
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <Connect_TCP_Server+0x64>)
 8003c22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c26:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		AT_CIPCLOSE,
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[3] =
 8003c2c:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <Connect_TCP_Server+0x68>)
 8003c2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c32:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003c38:	f107 0008 	add.w	r0, r7, #8
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a0e      	ldr	r2, [pc, #56]	; (8003c7c <Connect_TCP_Server+0x6c>)
 8003c44:	490e      	ldr	r1, [pc, #56]	; (8003c80 <Connect_TCP_Server+0x70>)
 8003c46:	f01c feef 	bl	8020a28 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003c52:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003c56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff51 	bl	8003b04 <Command_Process>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	return response_state;
 8003c68:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3788      	adds	r7, #136	; 0x88
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	080235d4 	.word	0x080235d4
 8003c78:	080235a0 	.word	0x080235a0
 8003c7c:	080235b4 	.word	0x080235b4
 8003c80:	080235c8 	.word	0x080235c8

08003c84 <Disconnect_TCP_Server>:

Status Disconnect_TCP_Server(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003c8a:	2305      	movs	r3, #5
 8003c8c:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <Disconnect_TCP_Server+0x30>)
 8003c90:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <Disconnect_TCP_Server+0x34>)
 8003c94:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003c96:	1d39      	adds	r1, r7, #4
 8003c98:	f107 0308 	add.w	r3, r7, #8
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff ff30 	bl	8003b04 <Command_Process>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]

}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	0802354c 	.word	0x0802354c
 8003cb8:	08023548 	.word	0x08023548

08003cbc <Send_TCP_Message>:

Status Send_TCP_Message(char* message)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b096      	sub	sp, #88	; 0x58
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fc fab4 	bl	800023c <strlen>
 8003cd4:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 8003cd6:	f107 001c 	add.w	r0, r7, #28
 8003cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cdc:	4a10      	ldr	r2, [pc, #64]	; (8003d20 <Send_TCP_Message+0x64>)
 8003cde:	4911      	ldr	r1, [pc, #68]	; (8003d24 <Send_TCP_Message+0x68>)
 8003ce0:	f01c fea2 	bl	8020a28 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8003ce4:	f107 031c 	add.w	r3, r7, #28
 8003ce8:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 8003cee:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <Send_TCP_Message+0x6c>)
 8003cf0:	f107 030c 	add.w	r3, r7, #12
 8003cf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cf8:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003cfc:	f107 010c 	add.w	r1, r7, #12
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	2202      	movs	r2, #2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fefc 	bl	8003b04 <Command_Process>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 8003d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3758      	adds	r7, #88	; 0x58
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	080235e0 	.word	0x080235e0
 8003d24:	080235ec 	.word	0x080235ec
 8003d28:	080235f4 	.word	0x080235f4

08003d2c <Read_TCP_Message>:

Status Read_TCP_Message(char* receivedMessage)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8003d34:	2305      	movs	r3, #5
 8003d36:	76fb      	strb	r3, [r7, #27]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 8003d38:	4b31      	ldr	r3, [pc, #196]	; (8003e00 <Read_TCP_Message+0xd4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	4931      	ldr	r1, [pc, #196]	; (8003e04 <Read_TCP_Message+0xd8>)
 8003d40:	4618      	mov	r0, r3
 8003d42:	f01d fc33 	bl	80215ac <strstr>
 8003d46:	6178      	str	r0, [r7, #20]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24


	if(substring != NULL)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d04a      	beq.n	8003dec <Read_TCP_Message+0xc0>
	{
		for(uint8_t i=0;i<3;i++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5c:	e01c      	b.n	8003d98 <Read_TCP_Message+0x6c>
		{
			if(*(substring+5+i) == ':')
 8003d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d62:	3305      	adds	r3, #5
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4413      	add	r3, r2
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b3a      	cmp	r3, #58	; 0x3a
 8003d6c:	d019      	beq.n	8003da2 <Read_TCP_Message+0x76>
				break;
			messageLengthString[i] = *(substring+5+i);
 8003d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d72:	3305      	adds	r3, #5
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	441a      	add	r2, r3
 8003d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d7c:	7812      	ldrb	r2, [r2, #0]
 8003d7e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003d82:	440b      	add	r3, r1
 8003d84:	f803 2c1c 	strb.w	r2, [r3, #-28]
			index += 1;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint8_t i=0;i<3;i++)
 8003d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d92:	3301      	adds	r3, #1
 8003d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d9de      	bls.n	8003d5e <Read_TCP_Message+0x32>
 8003da0:	e000      	b.n	8003da4 <Read_TCP_Message+0x78>
				break;
 8003da2:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 8003da4:	f107 030c 	add.w	r3, r7, #12
 8003da8:	4618      	mov	r0, r3
 8003daa:	f01b fe9e 	bl	801faea <atoi>
 8003dae:	4603      	mov	r3, r0
 8003db0:	613b      	str	r3, [r7, #16]

		for(uint32_t i=0;i<=messageLength+1;i++)
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	e00d      	b.n	8003dd4 <Read_TCP_Message+0xa8>
		{
			receivedMessage[i] = *(substring+6+index+i);
 8003db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3306      	adds	r3, #6
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	441a      	add	r2, r3
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	440b      	add	r3, r1
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<=messageLength+1;i++)
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d9ec      	bls.n	8003db8 <Read_TCP_Message+0x8c>
		}
		ringBuffer_flush(rx_buffer);
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <Read_TCP_Message+0xd4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f8e3 	bl	8003fae <ringBuffer_flush>
		return STATUS_OK;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e005      	b.n	8003df8 <Read_TCP_Message+0xcc>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <Read_TCP_Message+0xd4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f8dc 	bl	8003fae <ringBuffer_flush>
		return STATUS_ERROR;
 8003df6:	2304      	movs	r3, #4
	}


	return response_state;
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	2000049c 	.word	0x2000049c
 8003e04:	080235fc 	.word	0x080235fc

08003e08 <Wait_TCP_Message>:

Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 8003e12:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <Wait_TCP_Message+0x70>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 8003e1a:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <Wait_TCP_Message+0x74>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	4798      	blx	r3
 8003e20:	4603      	mov	r3, r0
 8003e22:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <Wait_TCP_Message+0x78>)
 8003e24:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 8003e26:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <Wait_TCP_Message+0x70>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff7d 	bl	8003d2c <Read_TCP_Message>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d107      	bne.n	8003e48 <Wait_TCP_Message+0x40>
	{
		time = 0;
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <Wait_TCP_Message+0x78>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 8003e3e:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <Wait_TCP_Message+0x70>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e012      	b.n	8003e6e <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <Wait_TCP_Message+0x74>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4798      	blx	r3
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <Wait_TCP_Message+0x78>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d807      	bhi.n	8003e6c <Wait_TCP_Message+0x64>
	{
		time = 0;
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <Wait_TCP_Message+0x78>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <Wait_TCP_Message+0x70>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e000      	b.n	8003e6e <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 8003e6c:	2305      	movs	r3, #5

}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000011 	.word	0x20000011
 8003e7c:	20000360 	.word	0x20000360
 8003e80:	20000378 	.word	0x20000378

08003e84 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003e8c:	2010      	movs	r0, #16
 8003e8e:	f01c fbf9 	bl	8020684 <malloc>
 8003e92:	4603      	mov	r3, r0
 8003e94:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e017      	b.n	8003ed0 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f01b fe1d 	bl	801faf4 <calloc>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003ece:	68fb      	ldr	r3, [r7, #12]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f01c fbce 	bl	8020694 <free>
		}
		free(buffer);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f01c fbcb 	bl	8020694 <free>
	}
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d00c      	beq.n	8003f3a <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003f38:	e009      	b.n	8003f4e <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4413      	add	r3, r2
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d00d      	beq.n	8003f8c <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	605a      	str	r2, [r3, #4]
		return data;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	e00a      	b.n	8003fa2 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	605a      	str	r2, [r3, #4]
		return data;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68d8      	ldr	r0, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	f01c fb7d 	bl	80206c0 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	601a      	str	r2, [r3, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	e00a      	b.n	8004002 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ff85 	bl	8003f06 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	6838      	ldr	r0, [r7, #0]
 8004004:	f7fc f91a 	bl	800023c <strlen>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	429a      	cmp	r2, r3
 800400e:	d8ed      	bhi.n	8003fec <ringBuffer_pushArray+0x10>
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f01d fabe 	bl	80215ac <strstr>
 8004030:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <ringBuffer_lookFor+0x22>
		return 1;
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <ringBuffer_lookFor+0x24>
	else
		return 0;
 800403c:	2300      	movs	r3, #0

}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
}
 8004052:	4618      	mov	r0, r3
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004066:	f7fc ff82 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800406a:	f000 f81d 	bl	80040a8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800406e:	f000 f951 	bl	8004314 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8004072:	f000 f891 	bl	8004198 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8004076:	f000 f8ed 	bl	8004254 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <main+0x44>)
 800407c:	463b      	mov	r3, r7
 800407e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004082:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8004086:	463b      	mov	r3, r7
 8004088:	4619      	mov	r1, r3
 800408a:	2002      	movs	r0, #2
 800408c:	f004 fda2 	bl	8008bd4 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004090:	2120      	movs	r1, #32
 8004092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004096:	f7fd fb67 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800409a:	2064      	movs	r0, #100	; 0x64
 800409c:	f7fc ffd8 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80040a0:	e7f6      	b.n	8004090 <main+0x30>
 80040a2:	bf00      	nop
 80040a4:	0802360c 	.word	0x0802360c

080040a8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b0a8      	sub	sp, #160	; 0xa0
 80040ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040b2:	2238      	movs	r2, #56	; 0x38
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f01c fb02 	bl	80206c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040cc:	463b      	mov	r3, r7
 80040ce:	2254      	movs	r2, #84	; 0x54
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f01c faf4 	bl	80206c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80040d8:	2000      	movs	r0, #0
 80040da:	f7fd fb83 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040de:	2302      	movs	r3, #2
 80040e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040e8:	2340      	movs	r3, #64	; 0x40
 80040ea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040ec:	2302      	movs	r3, #2
 80040ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040f2:	2302      	movs	r3, #2
 80040f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80040f8:	2304      	movs	r3, #4
 80040fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80040fe:	2355      	movs	r3, #85	; 0x55
 8004100:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004104:	2302      	movs	r3, #2
 8004106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800410a:	2302      	movs	r3, #2
 800410c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004110:	2302      	movs	r3, #2
 8004112:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004116:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd fc16 	bl	800194c <HAL_RCC_OscConfig>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	bf14      	ite	ne
 8004126:	2301      	movne	r3, #1
 8004128:	2300      	moveq	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8004130:	f000 f960 	bl	80043f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004134:	230f      	movs	r3, #15
 8004136:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004138:	2303      	movs	r3, #3
 800413a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800413c:	2300      	movs	r3, #0
 800413e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004140:	2300      	movs	r3, #0
 8004142:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004144:	2300      	movs	r3, #0
 8004146:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004148:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800414c:	2104      	movs	r1, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f7fd ff14 	bl	8001f7c <HAL_RCC_ClockConfig>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8004164:	f000 f946 	bl	80043f4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8004168:	2321      	movs	r3, #33	; 0x21
 800416a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800416c:	2300      	movs	r3, #0
 800416e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004174:	463b      	mov	r3, r7
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe f91c 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 800418c:	f000 f932 	bl	80043f4 <Error_Handler>
  }
}
 8004190:	bf00      	nop
 8004192:	37a0      	adds	r7, #160	; 0xa0
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800419c:	4b2b      	ldr	r3, [pc, #172]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800419e:	4a2c      	ldr	r2, [pc, #176]	; (8004250 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80041a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80041a2:	4b2a      	ldr	r3, [pc, #168]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041a8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041aa:	4b28      	ldr	r3, [pc, #160]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80041b0:	4b26      	ldr	r3, [pc, #152]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80041b6:	4b25      	ldr	r3, [pc, #148]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80041bc:	4b23      	ldr	r3, [pc, #140]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041be:	220c      	movs	r2, #12
 80041c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041c8:	4b20      	ldr	r3, [pc, #128]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041ce:	4b1f      	ldr	r3, [pc, #124]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041d4:	4b1d      	ldr	r3, [pc, #116]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80041da:	481c      	ldr	r0, [pc, #112]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041dc:	f7fe fb36 	bl	800284c <HAL_UART_Init>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bf14      	ite	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	2300      	moveq	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80041f0:	f000 f900 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041f4:	2100      	movs	r1, #0
 80041f6:	4815      	ldr	r0, [pc, #84]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041f8:	f7ff fabc 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bf14      	ite	ne
 8004202:	2301      	movne	r3, #1
 8004204:	2300      	moveq	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 800420c:	f000 f8f2 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004210:	2100      	movs	r1, #0
 8004212:	480e      	ldr	r0, [pc, #56]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004214:	f7ff faec 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf14      	ite	ne
 800421e:	2301      	movne	r3, #1
 8004220:	2300      	moveq	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8004228:	f000 f8e4 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800422c:	4807      	ldr	r0, [pc, #28]	; (800424c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800422e:	f7ff fa68 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8004242:	f000 f8d7 	bl	80043f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	2000037c 	.word	0x2000037c
 8004250:	40008000 	.word	0x40008000

08004254 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004258:	4b2c      	ldr	r3, [pc, #176]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800425a:	4a2d      	ldr	r2, [pc, #180]	; (8004310 <_ZL19MX_USART1_UART_Initv+0xbc>)
 800425c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800425e:	4b2b      	ldr	r3, [pc, #172]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004264:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004266:	4b29      	ldr	r3, [pc, #164]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800426c:	4b27      	ldr	r3, [pc, #156]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800426e:	2200      	movs	r2, #0
 8004270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004272:	4b26      	ldr	r3, [pc, #152]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004278:	4b24      	ldr	r3, [pc, #144]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800427a:	220c      	movs	r2, #12
 800427c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800427e:	4b23      	ldr	r3, [pc, #140]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004284:	4b21      	ldr	r3, [pc, #132]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800428a:	4b20      	ldr	r3, [pc, #128]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800428c:	2200      	movs	r2, #0
 800428e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004290:	4b1e      	ldr	r3, [pc, #120]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004292:	2200      	movs	r2, #0
 8004294:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004298:	2200      	movs	r2, #0
 800429a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800429c:	481b      	ldr	r0, [pc, #108]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800429e:	f7fe fad5 	bl	800284c <HAL_UART_Init>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80042b2:	f000 f89f 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042b6:	2100      	movs	r1, #0
 80042b8:	4814      	ldr	r0, [pc, #80]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042ba:	f7ff fa5b 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80042ce:	f000 f891 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042d2:	2100      	movs	r1, #0
 80042d4:	480d      	ldr	r0, [pc, #52]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042d6:	f7ff fa8b 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80042ea:	f000 f883 	bl	80043f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042ee:	4807      	ldr	r0, [pc, #28]	; (800430c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042f0:	f7ff fa07 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8004304:	f000 f876 	bl	80043f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004308:	bf00      	nop
 800430a:	bd80      	pop	{r7, pc}
 800430c:	2000040c 	.word	0x2000040c
 8004310:	40013800 	.word	0x40013800

08004314 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431a:	f107 0314 	add.w	r3, r7, #20
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	609a      	str	r2, [r3, #8]
 8004326:	60da      	str	r2, [r3, #12]
 8004328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800432a:	4b2f      	ldr	r3, [pc, #188]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	4a2e      	ldr	r2, [pc, #184]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004336:	4b2c      	ldr	r3, [pc, #176]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8004338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004342:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	4a28      	ldr	r2, [pc, #160]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8004348:	f043 0320 	orr.w	r3, r3, #32
 800434c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800434e:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8004350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800435a:	4b23      	ldr	r3, [pc, #140]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	4a22      	ldr	r2, [pc, #136]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8004368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8004374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004376:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8004378:	f043 0302 	orr.w	r3, r3, #2
 800437c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8004380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800438a:	2200      	movs	r2, #0
 800438c:	2120      	movs	r1, #32
 800438e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004392:	f7fd f9d1 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800439a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <_ZL12MX_GPIO_Initv+0xd8>)
 800439e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80043a4:	f107 0314 	add.w	r3, r7, #20
 80043a8:	4619      	mov	r1, r3
 80043aa:	4811      	ldr	r0, [pc, #68]	; (80043f0 <_ZL12MX_GPIO_Initv+0xdc>)
 80043ac:	f7fd f842 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80043b0:	2320      	movs	r3, #32
 80043b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b4:	2301      	movs	r3, #1
 80043b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043bc:	2300      	movs	r3, #0
 80043be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80043c0:	f107 0314 	add.w	r3, r7, #20
 80043c4:	4619      	mov	r1, r3
 80043c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ca:	f7fd f833 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2100      	movs	r1, #0
 80043d2:	2028      	movs	r0, #40	; 0x28
 80043d4:	f7fc ff39 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043d8:	2028      	movs	r0, #40	; 0x28
 80043da:	f7fc ff50 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 80043de:	bf00      	nop
 80043e0:	3728      	adds	r7, #40	; 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	10110000 	.word	0x10110000
 80043f0:	48000800 	.word	0x48000800

080043f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043f8:	b672      	cpsid	i
}
 80043fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043fc:	e7fe      	b.n	80043fc <Error_Handler+0x8>

080043fe <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8004406:	2032      	movs	r0, #50	; 0x32
 8004408:	f7ff fd3c 	bl	8003e84 <ringBuffer_init>
 800440c:	4602      	mov	r2, r0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	605a      	str	r2, [r3, #4]

	}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fd56 	bl	8003ed8 <ringBuffer_deInit>
	}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	f010 f866 	bl	8014510 <_ZN5UtestC1Ev>
 8004444:	4a03      	ldr	r2, [pc, #12]	; (8004454 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	080280dc 	.word	0x080280dc

08004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	4a05      	ldr	r2, [pc, #20]	; (8004478 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4618      	mov	r0, r3
 800446a:	f010 f861 	bl	8014530 <_ZN5UtestD1Ev>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	080280dc 	.word	0x080280dc

0800447c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff ffe7 	bl	8004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800448a:	2108      	movs	r1, #8
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f006 f883 	bl	800a598 <_ZdlPvj>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff ffbe 	bl	8004434 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80044b8:	4a03      	ldr	r2, [pc, #12]	; (80044c8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	080280bc 	.word	0x080280bc

080044cc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	2224      	movs	r2, #36	; 0x24
 80044d6:	4906      	ldr	r1, [pc, #24]	; (80044f0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80044d8:	2008      	movs	r0, #8
 80044da:	f006 f849 	bl	800a570 <_ZnwjPKci>
 80044de:	4604      	mov	r4, r0
 80044e0:	4620      	mov	r0, r4
 80044e2:	f7ff ffdb 	bl	800449c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80044e6:	4623      	mov	r3, r4
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}
 80044f0:	0802369c 	.word	0x0802369c

080044f4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4618      	mov	r0, r3
 8004500:	f00e fc24 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8004504:	4a03      	ldr	r2, [pc, #12]	; (8004514 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	08028010 	.word	0x08028010

08004518 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451a:	b087      	sub	sp, #28
 800451c:	af04      	add	r7, sp, #16
 800451e:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004520:	f00f ffcc 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004524:	4604      	mov	r4, r0
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	3338      	adds	r3, #56	; 0x38
 800452a:	681d      	ldr	r5, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	461e      	mov	r6, r3
 8004534:	f00f ffd2 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004538:	4603      	mov	r3, r0
 800453a:	9302      	str	r3, [sp, #8]
 800453c:	2327      	movs	r3, #39	; 0x27
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	4b2a      	ldr	r3, [pc, #168]	; (80045ec <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8004546:	4632      	mov	r2, r6
 8004548:	2132      	movs	r1, #50	; 0x32
 800454a:	4620      	mov	r0, r4
 800454c:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 800454e:	f00f ffb5 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004552:	4604      	mov	r4, r0
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	3320      	adds	r3, #32
 8004558:	681d      	ldr	r5, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2de      	uxtb	r6, r3
 800456a:	f00f ffb7 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800456e:	4603      	mov	r3, r0
 8004570:	9303      	str	r3, [sp, #12]
 8004572:	2328      	movs	r3, #40	; 0x28
 8004574:	9302      	str	r3, [sp, #8]
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	2300      	movs	r3, #0
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004580:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8004582:	4631      	mov	r1, r6
 8004584:	4620      	mov	r0, r4
 8004586:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004588:	f00f ff98 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 800458c:	4604      	mov	r4, r0
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	3338      	adds	r3, #56	; 0x38
 8004592:	681d      	ldr	r5, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461e      	mov	r6, r3
 800459c:	f00f ff9e 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045a0:	4603      	mov	r3, r0
 80045a2:	9302      	str	r3, [sp, #8]
 80045a4:	2329      	movs	r3, #41	; 0x29
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	4b10      	ldr	r3, [pc, #64]	; (80045ec <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	4b13      	ldr	r3, [pc, #76]	; (80045fc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 80045ae:	4632      	mov	r2, r6
 80045b0:	2100      	movs	r1, #0
 80045b2:	4620      	mov	r0, r4
 80045b4:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 80045b6:	f00f ff81 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80045ba:	4604      	mov	r4, r0
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	3338      	adds	r3, #56	; 0x38
 80045c0:	681d      	ldr	r5, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	461e      	mov	r6, r3
 80045ca:	f00f ff87 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045ce:	4603      	mov	r3, r0
 80045d0:	9302      	str	r3, [sp, #8]
 80045d2:	232a      	movs	r3, #42	; 0x2a
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	4b09      	ldr	r3, [pc, #36]	; (8004600 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80045dc:	4632      	mov	r2, r6
 80045de:	2100      	movs	r1, #0
 80045e0:	4620      	mov	r0, r4
 80045e2:	47a8      	blx	r5

}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ec:	0802369c 	.word	0x0802369c
 80045f0:	080236b0 	.word	0x080236b0
 80045f4:	080236d8 	.word	0x080236d8
 80045f8:	080236f0 	.word	0x080236f0
 80045fc:	080236f8 	.word	0x080236f8
 8004600:	08023720 	.word	0x08023720

08004604 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	605a      	str	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff ff0a 	bl	8004434 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004620:	4a03      	ldr	r2, [pc, #12]	; (8004630 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	08027ff0 	.word	0x08027ff0

08004634 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	222e      	movs	r2, #46	; 0x2e
 800463e:	4906      	ldr	r1, [pc, #24]	; (8004658 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004640:	2008      	movs	r0, #8
 8004642:	f005 ff95 	bl	800a570 <_ZnwjPKci>
 8004646:	4604      	mov	r4, r0
 8004648:	4620      	mov	r0, r4
 800464a:	f7ff ffdb 	bl	8004604 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 800464e:	4623      	mov	r3, r4
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bd90      	pop	{r4, r7, pc}
 8004658:	0802369c 	.word	0x0802369c

0800465c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4618      	mov	r0, r3
 8004668:	f00e fb70 	bl	8012d4c <_ZN10UtestShellC1Ev>
 800466c:	4a03      	ldr	r2, [pc, #12]	; (800467c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	08027f44 	.word	0x08027f44

08004680 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004682:	b087      	sub	sp, #28
 8004684:	af04      	add	r7, sp, #16
 8004686:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2145      	movs	r1, #69	; 0x45
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fc39 	bl	8003f06 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004694:	f00f ff12 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004698:	4604      	mov	r4, r0
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	3338      	adds	r3, #56	; 0x38
 800469e:	681d      	ldr	r5, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	461e      	mov	r6, r3
 80046aa:	f00f ff17 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046ae:	4603      	mov	r3, r0
 80046b0:	9302      	str	r3, [sp, #8]
 80046b2:	2331      	movs	r3, #49	; 0x31
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	4b15      	ldr	r3, [pc, #84]	; (800470c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 80046bc:	4632      	mov	r2, r6
 80046be:	2145      	movs	r1, #69	; 0x45
 80046c0:	4620      	mov	r0, r4
 80046c2:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2110      	movs	r1, #16
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fc1b 	bl	8003f06 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80046d0:	f00f fef4 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80046d4:	4604      	mov	r4, r0
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	3338      	adds	r3, #56	; 0x38
 80046da:	681d      	ldr	r5, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	3301      	adds	r3, #1
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	461e      	mov	r6, r3
 80046e8:	f00f fef8 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046ec:	4603      	mov	r3, r0
 80046ee:	9302      	str	r3, [sp, #8]
 80046f0:	2334      	movs	r3, #52	; 0x34
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80046fa:	4632      	mov	r2, r6
 80046fc:	2110      	movs	r1, #16
 80046fe:	4620      	mov	r0, r4
 8004700:	47a8      	blx	r5

}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800470a:	bf00      	nop
 800470c:	0802369c 	.word	0x0802369c
 8004710:	08023748 	.word	0x08023748
 8004714:	08023778 	.word	0x08023778

08004718 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	605a      	str	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fe80 	bl	8004434 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004734:	4a03      	ldr	r2, [pc, #12]	; (8004744 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	08027f24 	.word	0x08027f24

08004748 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	2238      	movs	r2, #56	; 0x38
 8004752:	4906      	ldr	r1, [pc, #24]	; (800476c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004754:	2008      	movs	r0, #8
 8004756:	f005 ff0b 	bl	800a570 <_ZnwjPKci>
 800475a:	4604      	mov	r4, r0
 800475c:	4620      	mov	r0, r4
 800475e:	f7ff ffdb 	bl	8004718 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 8004762:	4623      	mov	r3, r4
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bd90      	pop	{r4, r7, pc}
 800476c:	0802369c 	.word	0x0802369c

08004770 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4618      	mov	r0, r3
 800477c:	f00e fae6 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8004780:	4a03      	ldr	r2, [pc, #12]	; (8004790 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	08027e78 	.word	0x08027e78

08004794 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004796:	b089      	sub	sp, #36	; 0x24
 8004798:	af04      	add	r7, sp, #16
 800479a:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	429a      	cmp	r2, r3
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4293      	cmp	r3, r2
 80047c2:	da0b      	bge.n	80047dc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	4611      	mov	r1, r2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fb99 	bl	8003f06 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3301      	adds	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	e7e3      	b.n	80047a4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	21ff      	movs	r1, #255	; 0xff
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fb8f 	bl	8003f06 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80047e8:	f00f fe68 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80047ec:	4604      	mov	r4, r0
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	3338      	adds	r3, #56	; 0x38
 80047f2:	681d      	ldr	r5, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	461e      	mov	r6, r3
 80047fe:	f00f fe6d 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004802:	4603      	mov	r3, r0
 8004804:	9302      	str	r3, [sp, #8]
 8004806:	2340      	movs	r3, #64	; 0x40
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004810:	4632      	mov	r2, r6
 8004812:	21ff      	movs	r1, #255	; 0xff
 8004814:	4620      	mov	r0, r4
 8004816:	47a8      	blx	r5
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004820:	0802369c 	.word	0x0802369c
 8004824:	080237a8 	.word	0x080237a8

08004828 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	605a      	str	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fdf8 	bl	8004434 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004844:	4a03      	ldr	r2, [pc, #12]	; (8004854 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	08027e58 	.word	0x08027e58

08004858 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	2243      	movs	r2, #67	; 0x43
 8004862:	4906      	ldr	r1, [pc, #24]	; (800487c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004864:	2008      	movs	r0, #8
 8004866:	f005 fe83 	bl	800a570 <_ZnwjPKci>
 800486a:	4604      	mov	r4, r0
 800486c:	4620      	mov	r0, r4
 800486e:	f7ff ffdb 	bl	8004828 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 8004872:	4623      	mov	r3, r4
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	0802369c 	.word	0x0802369c

08004880 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4618      	mov	r0, r3
 800488c:	f00e fa5e 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8004890:	4a03      	ldr	r2, [pc, #12]	; (80048a0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	08027dac 	.word	0x08027dac

080048a4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 80048a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a6:	b089      	sub	sp, #36	; 0x24
 80048a8:	af04      	add	r7, sp, #16
 80048aa:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	21ff      	movs	r1, #255	; 0xff
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fb27 	bl	8003f06 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fb4c 	bl	8003f5a <ringBuffer_pop>
 80048c2:	4603      	mov	r3, r0
 80048c4:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 80048c6:	f00f fdf9 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80048ca:	4604      	mov	r4, r0
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	3338      	adds	r3, #56	; 0x38
 80048d0:	681d      	ldr	r5, [r3, #0]
 80048d2:	7bfe      	ldrb	r6, [r7, #15]
 80048d4:	f00f fe02 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048d8:	4603      	mov	r3, r0
 80048da:	9302      	str	r3, [sp, #8]
 80048dc:	2348      	movs	r3, #72	; 0x48
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80048e6:	4632      	mov	r2, r6
 80048e8:	21ff      	movs	r1, #255	; 0xff
 80048ea:	4620      	mov	r0, r4
 80048ec:	47a8      	blx	r5

}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f6:	bf00      	nop
 80048f8:	0802369c 	.word	0x0802369c
 80048fc:	080237d8 	.word	0x080237d8

08004900 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	605a      	str	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fd8c 	bl	8004434 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800491c:	4a03      	ldr	r2, [pc, #12]	; (800492c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	08027d8c 	.word	0x08027d8c

08004930 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004930:	b590      	push	{r4, r7, lr}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	224c      	movs	r2, #76	; 0x4c
 800493a:	4906      	ldr	r1, [pc, #24]	; (8004954 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 800493c:	2008      	movs	r0, #8
 800493e:	f005 fe17 	bl	800a570 <_ZnwjPKci>
 8004942:	4604      	mov	r4, r0
 8004944:	4620      	mov	r0, r4
 8004946:	f7ff ffdb 	bl	8004900 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 800494a:	4623      	mov	r3, r4
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	bd90      	pop	{r4, r7, pc}
 8004954:	0802369c 	.word	0x0802369c

08004958 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4618      	mov	r0, r3
 8004964:	f00e f9f2 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8004968:	4a03      	ldr	r2, [pc, #12]	; (8004978 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	08027ce0 	.word	0x08027ce0

0800497c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 800497c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800497e:	b089      	sub	sp, #36	; 0x24
 8004980:	af04      	add	r7, sp, #16
 8004982:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	21aa      	movs	r1, #170	; 0xaa
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fab9 	bl	8003f06 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	429a      	cmp	r2, r3
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4293      	cmp	r3, r2
 80049ba:	da0a      	bge.n	80049d2 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff faca 	bl	8003f5a <ringBuffer_pop>
 80049c6:	4603      	mov	r3, r0
 80049c8:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3301      	adds	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e7e4      	b.n	800499c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fabf 	bl	8003f5a <ringBuffer_pop>
 80049dc:	4603      	mov	r3, r0
 80049de:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80049e0:	f00f fd6c 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80049e4:	4604      	mov	r4, r0
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	3338      	adds	r3, #56	; 0x38
 80049ea:	681d      	ldr	r5, [r3, #0]
 80049ec:	7afe      	ldrb	r6, [r7, #11]
 80049ee:	f00f fd75 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049f2:	4603      	mov	r3, r0
 80049f4:	9302      	str	r3, [sp, #8]
 80049f6:	2359      	movs	r3, #89	; 0x59
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004a00:	4632      	mov	r2, r6
 8004a02:	21aa      	movs	r1, #170	; 0xaa
 8004a04:	4620      	mov	r0, r4
 8004a06:	47a8      	blx	r5
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a10:	0802369c 	.word	0x0802369c
 8004a14:	080237f8 	.word	0x080237f8

08004a18 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	605a      	str	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fd00 	bl	8004434 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a34:	4a03      	ldr	r2, [pc, #12]	; (8004a44 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	08027cc0 	.word	0x08027cc0

08004a48 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	225c      	movs	r2, #92	; 0x5c
 8004a52:	4906      	ldr	r1, [pc, #24]	; (8004a6c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004a54:	2008      	movs	r0, #8
 8004a56:	f005 fd8b 	bl	800a570 <_ZnwjPKci>
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f7ff ffdb 	bl	8004a18 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004a62:	4623      	mov	r3, r4
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd90      	pop	{r4, r7, pc}
 8004a6c:	0802369c 	.word	0x0802369c

08004a70 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f00e f966 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8004a80:	4a03      	ldr	r2, [pc, #12]	; (8004a90 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	08027c14 	.word	0x08027c14

08004a94 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af04      	add	r7, sp, #16
 8004a9a:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d20b      	bcs.n	8004ac4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fa25 	bl	8003f06 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e7ed      	b.n	8004aa0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004ac4:	f00f fcfa 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004ac8:	4604      	mov	r4, r0
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	3338      	adds	r3, #56	; 0x38
 8004ace:	681d      	ldr	r5, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	4413      	add	r3, r2
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	461e      	mov	r6, r3
 8004ae4:	f00f fcfa 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	9302      	str	r3, [sp, #8]
 8004aec:	2363      	movs	r3, #99	; 0x63
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	4b24      	ldr	r3, [pc, #144]	; (8004b84 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004af6:	4632      	mov	r2, r6
 8004af8:	2131      	movs	r1, #49	; 0x31
 8004afa:	4620      	mov	r0, r4
 8004afc:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fa53 	bl	8003fae <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004b08:	f00f fcd8 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	3338      	adds	r3, #56	; 0x38
 8004b12:	681d      	ldr	r5, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	461e      	mov	r6, r3
 8004b28:	f00f fcd8 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	9302      	str	r3, [sp, #8]
 8004b30:	2367      	movs	r3, #103	; 0x67
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	4b13      	ldr	r3, [pc, #76]	; (8004b84 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004b3a:	4632      	mov	r2, r6
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4620      	mov	r0, r4
 8004b40:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004b42:	f00f fcbb 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004b46:	4604      	mov	r4, r0
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	3338      	adds	r3, #56	; 0x38
 8004b4c:	681d      	ldr	r5, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	085b      	lsrs	r3, r3, #1
 8004b5c:	4413      	add	r3, r2
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	461e      	mov	r6, r3
 8004b62:	f00f fcbb 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b66:	4603      	mov	r3, r0
 8004b68:	9302      	str	r3, [sp, #8]
 8004b6a:	2368      	movs	r3, #104	; 0x68
 8004b6c:	9301      	str	r3, [sp, #4]
 8004b6e:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004b74:	4632      	mov	r2, r6
 8004b76:	2100      	movs	r1, #0
 8004b78:	4620      	mov	r0, r4
 8004b7a:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b84:	0802369c 	.word	0x0802369c
 8004b88:	08023818 	.word	0x08023818
 8004b8c:	08023854 	.word	0x08023854
 8004b90:	08023890 	.word	0x08023890

08004b94 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fc42 	bl	8004434 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004bb0:	4a03      	ldr	r2, [pc, #12]	; (8004bc0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	08027bf4 	.word	0x08027bf4

08004bc4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	2271      	movs	r2, #113	; 0x71
 8004bce:	4906      	ldr	r1, [pc, #24]	; (8004be8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004bd0:	2008      	movs	r0, #8
 8004bd2:	f005 fccd 	bl	800a570 <_ZnwjPKci>
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f7ff ffdb 	bl	8004b94 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004bde:	4623      	mov	r3, r4
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd90      	pop	{r4, r7, pc}
 8004be8:	0802369c 	.word	0x0802369c

08004bec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f00e f8a8 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8004bfc:	4a03      	ldr	r2, [pc, #12]	; (8004c0c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	08027b48 	.word	0x08027b48

08004c10 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af04      	add	r7, sp, #16
 8004c16:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	490e      	ldr	r1, [pc, #56]	; (8004c58 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff f9dc 	bl	8003fdc <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004c24:	f00f fc4a 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004c28:	4604      	mov	r4, r0
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	3324      	adds	r3, #36	; 0x24
 8004c2e:	681d      	ldr	r5, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	68de      	ldr	r6, [r3, #12]
 8004c36:	f00f fc51 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	9302      	str	r3, [sp, #8]
 8004c3e:	2375      	movs	r3, #117	; 0x75
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2300      	movs	r3, #0
 8004c48:	4632      	mov	r2, r6
 8004c4a:	4903      	ldr	r1, [pc, #12]	; (8004c58 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	47a8      	blx	r5
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c58:	080238c8 	.word	0x080238c8
 8004c5c:	0802369c 	.word	0x0802369c

08004c60 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fbdc 	bl	8004434 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004c7c:	4a03      	ldr	r2, [pc, #12]	; (8004c8c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	08027b28 	.word	0x08027b28

08004c90 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004c90:	b590      	push	{r4, r7, lr}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	2278      	movs	r2, #120	; 0x78
 8004c9a:	4906      	ldr	r1, [pc, #24]	; (8004cb4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004c9c:	2008      	movs	r0, #8
 8004c9e:	f005 fc67 	bl	800a570 <_ZnwjPKci>
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f7ff ffdb 	bl	8004c60 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004caa:	4623      	mov	r3, r4
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd90      	pop	{r4, r7, pc}
 8004cb4:	0802369c 	.word	0x0802369c

08004cb8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f00e f842 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8004cc8:	4a03      	ldr	r2, [pc, #12]	; (8004cd8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	08027a7c 	.word	0x08027a7c

08004cdc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce0:	b08a      	sub	sp, #40	; 0x28
 8004ce2:	af04      	add	r7, sp, #16
 8004ce4:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	494e      	ldr	r1, [pc, #312]	; (8004e24 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff f975 	bl	8003fdc <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004cf2:	f00f fbe3 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	3324      	adds	r3, #36	; 0x24
 8004cfc:	681d      	ldr	r5, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	68de      	ldr	r6, [r3, #12]
 8004d04:	f00f fbea 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	9302      	str	r3, [sp, #8]
 8004d0c:	237c      	movs	r3, #124	; 0x7c
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	4b45      	ldr	r3, [pc, #276]	; (8004e28 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2300      	movs	r3, #0
 8004d16:	4632      	mov	r2, r6
 8004d18:	4942      	ldr	r1, [pc, #264]	; (8004e24 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	4942      	ldr	r1, [pc, #264]	; (8004e2c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff f978 	bl	800401a <ringBuffer_lookFor>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d05c      	beq.n	8004df4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	493b      	ldr	r1, [pc, #236]	; (8004e2c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff f96a 	bl	800401a <ringBuffer_lookFor>
 8004d46:	4604      	mov	r4, r0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4937      	ldr	r1, [pc, #220]	; (8004e2c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff f963 	bl	800401a <ringBuffer_lookFor>
 8004d54:	4603      	mov	r3, r0
 8004d56:	429c      	cmp	r4, r3
 8004d58:	bf14      	ite	ne
 8004d5a:	2301      	movne	r3, #1
 8004d5c:	2300      	moveq	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d008      	beq.n	8004d76 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004d64:	f00f fbaa 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004d68:	6803      	ldr	r3, [r0, #0]
 8004d6a:	3370      	adds	r3, #112	; 0x70
 8004d6c:	681c      	ldr	r4, [r3, #0]
 8004d6e:	237d      	movs	r3, #125	; 0x7d
 8004d70:	4a2d      	ldr	r2, [pc, #180]	; (8004e28 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d72:	492f      	ldr	r1, [pc, #188]	; (8004e30 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004d74:	47a0      	blx	r4
 8004d76:	f00f fba1 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	3358      	adds	r3, #88	; 0x58
 8004d80:	681d      	ldr	r5, [r3, #0]
 8004d82:	f107 0308 	add.w	r3, r7, #8
 8004d86:	2101      	movs	r1, #1
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f008 fe33 	bl	800d9f4 <_Z10StringFromi>
 8004d8e:	f107 0308 	add.w	r3, r7, #8
 8004d92:	4618      	mov	r0, r3
 8004d94:	f008 fb3a 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8004d98:	4606      	mov	r6, r0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4923      	ldr	r1, [pc, #140]	; (8004e2c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff f93a 	bl	800401a <ringBuffer_lookFor>
 8004da6:	4602      	mov	r2, r0
 8004da8:	f107 0310 	add.w	r3, r7, #16
 8004dac:	4611      	mov	r1, r2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f009 f89a 	bl	800dee8 <_Z10StringFromm>
 8004db4:	f107 0310 	add.w	r3, r7, #16
 8004db8:	4618      	mov	r0, r3
 8004dba:	f008 fb27 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8004dbe:	4680      	mov	r8, r0
 8004dc0:	f00f fb8c 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	9303      	str	r3, [sp, #12]
 8004dc8:	237d      	movs	r3, #125	; 0x7d
 8004dca:	9302      	str	r3, [sp, #8]
 8004dcc:	4b16      	ldr	r3, [pc, #88]	; (8004e28 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	4643      	mov	r3, r8
 8004dd6:	4632      	mov	r2, r6
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4620      	mov	r0, r4
 8004ddc:	47a8      	blx	r5
 8004dde:	f107 0310 	add.w	r3, r7, #16
 8004de2:	4618      	mov	r0, r3
 8004de4:	f008 fb3f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8004de8:	f107 0308 	add.w	r3, r7, #8
 8004dec:	4618      	mov	r0, r3
 8004dee:	f008 fb3a 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8004df2:	e012      	b.n	8004e1a <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004df4:	f00f fb62 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004df8:	4604      	mov	r4, r0
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	3338      	adds	r3, #56	; 0x38
 8004dfe:	681d      	ldr	r5, [r3, #0]
 8004e00:	f00f fb6c 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004e04:	4603      	mov	r3, r0
 8004e06:	9302      	str	r3, [sp, #8]
 8004e08:	237d      	movs	r3, #125	; 0x7d
 8004e0a:	9301      	str	r3, [sp, #4]
 8004e0c:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2300      	movs	r3, #0
 8004e12:	2200      	movs	r2, #0
 8004e14:	2100      	movs	r1, #0
 8004e16:	4620      	mov	r0, r4
 8004e18:	47a8      	blx	r5
}
 8004e1a:	bf00      	nop
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e24:	080238d0 	.word	0x080238d0
 8004e28:	0802369c 	.word	0x0802369c
 8004e2c:	080238dc 	.word	0x080238dc
 8004e30:	080238e4 	.word	0x080238e4

08004e34 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	605a      	str	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff faf2 	bl	8004434 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004e50:	4a03      	ldr	r2, [pc, #12]	; (8004e60 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	08027a5c 	.word	0x08027a5c

08004e64 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	2280      	movs	r2, #128	; 0x80
 8004e6e:	4906      	ldr	r1, [pc, #24]	; (8004e88 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004e70:	2008      	movs	r0, #8
 8004e72:	f005 fb7d 	bl	800a570 <_ZnwjPKci>
 8004e76:	4604      	mov	r4, r0
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f7ff ffdb 	bl	8004e34 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004e7e:	4623      	mov	r3, r4
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd90      	pop	{r4, r7, pc}
 8004e88:	0802369c 	.word	0x0802369c

08004e8c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f00d ff58 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8004e9c:	4a03      	ldr	r2, [pc, #12]	; (8004eac <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	080279b0 	.word	0x080279b0

08004eb0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af04      	add	r7, sp, #16
 8004eb6:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004eb8:	f00f fb00 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	3338      	adds	r3, #56	; 0x38
 8004ec2:	681d      	ldr	r5, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff f8bc 	bl	8004046 <ringBuffer_capacity>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	461e      	mov	r6, r3
 8004ed2:	f00f fb03 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	9302      	str	r3, [sp, #8]
 8004eda:	2383      	movs	r3, #131	; 0x83
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	2132      	movs	r1, #50	; 0x32
 8004ee8:	4620      	mov	r0, r4
 8004eea:	47a8      	blx	r5

}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef4:	0802369c 	.word	0x0802369c
 8004ef8:	08023988 	.word	0x08023988

08004efc <_Z18UART_Transmit_FakePh>:


void UART_Transmit_Fake(uint8_t* data)
{
 8004efc:	b5b0      	push	{r4, r5, r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
//	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004f04:	f107 0308 	add.w	r3, r7, #8
 8004f08:	491d      	ldr	r1, [pc, #116]	; (8004f80 <_Z18UART_Transmit_FakePh+0x84>)
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f007 fef3 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8004f10:	f107 0308 	add.w	r3, r7, #8
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f005 ffc6 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	3318      	adds	r3, #24
 8004f22:	681d      	ldr	r5, [r3, #0]
 8004f24:	f107 0310 	add.w	r3, r7, #16
 8004f28:	4916      	ldr	r1, [pc, #88]	; (8004f84 <_Z18UART_Transmit_FakePh+0x88>)
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f007 fee3 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8004f30:	f107 0310 	add.w	r3, r7, #16
 8004f34:	4619      	mov	r1, r3
 8004f36:	4620      	mov	r0, r4
 8004f38:	47a8      	blx	r5
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	333c      	adds	r3, #60	; 0x3c
 8004f40:	681d      	ldr	r5, [r3, #0]
 8004f42:	f107 0318 	add.w	r3, r7, #24
 8004f46:	4910      	ldr	r1, [pc, #64]	; (8004f88 <_Z18UART_Transmit_FakePh+0x8c>)
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f007 fed4 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8004f4e:	f107 0318 	add.w	r3, r7, #24
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4619      	mov	r1, r3
 8004f56:	4620      	mov	r0, r4
 8004f58:	47a8      	blx	r5
 8004f5a:	f107 0318 	add.w	r3, r7, #24
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f008 fa81 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8004f64:	f107 0310 	add.w	r3, r7, #16
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f008 fa7c 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8004f6e:	f107 0308 	add.w	r3, r7, #8
 8004f72:	4618      	mov	r0, r3
 8004f74:	f008 fa77 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8004f78:	bf00      	nop
 8004f7a:	3720      	adds	r7, #32
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f80:	080239c0 	.word	0x080239c0
 8004f84:	080239c4 	.word	0x080239c4
 8004f88:	080239d8 	.word	0x080239d8

08004f8c <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004f8c:	b5b0      	push	{r4, r5, r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004f92:	463b      	mov	r3, r7
 8004f94:	4916      	ldr	r1, [pc, #88]	; (8004ff0 <_Z17UART_Receive_Fakev+0x64>)
 8004f96:	4618      	mov	r0, r3
 8004f98:	f007 fead 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f005 ff81 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	3318      	adds	r3, #24
 8004fac:	681d      	ldr	r5, [r3, #0]
 8004fae:	f107 0308 	add.w	r3, r7, #8
 8004fb2:	4910      	ldr	r1, [pc, #64]	; (8004ff4 <_Z17UART_Receive_Fakev+0x68>)
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f007 fe9e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8004fba:	f107 0308 	add.w	r3, r7, #8
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	47a8      	blx	r5
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	3264      	adds	r2, #100	; 0x64
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	4790      	blx	r2
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	b2dc      	uxtb	r4, r3
 8004fd4:	f107 0308 	add.w	r3, r7, #8
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f008 fa44 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8004fde:	463b      	mov	r3, r7
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f008 fa40 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8004fe6:	4623      	mov	r3, r4
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bdb0      	pop	{r4, r5, r7, pc}
 8004ff0:	080239c0 	.word	0x080239c0
 8004ff4:	080239e0 	.word	0x080239e0

08004ff8 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <_Z12getTick_Fakev+0x30>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d103      	bne.n	800500e <_Z12getTick_Fakev+0x16>
		time = 0;
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <_Z12getTick_Fakev+0x30>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	e004      	b.n	8005018 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <_Z12getTick_Fakev+0x30>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3301      	adds	r3, #1
 8005014:	4a04      	ldr	r2, [pc, #16]	; (8005028 <_Z12getTick_Fakev+0x30>)
 8005016:	6013      	str	r3, [r2, #0]
	return time;
 8005018:	4b03      	ldr	r3, [pc, #12]	; (8005028 <_Z12getTick_Fakev+0x30>)
 800501a:	681b      	ldr	r3, [r3, #0]
}
 800501c:	4618      	mov	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	200005c0 	.word	0x200005c0

0800502c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8005034:	2364      	movs	r3, #100	; 0x64
 8005036:	4a04      	ldr	r2, [pc, #16]	; (8005048 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8005038:	4904      	ldr	r1, [pc, #16]	; (800504c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 800503a:	4805      	ldr	r0, [pc, #20]	; (8005050 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 800503c:	f7fe fc64 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	08004ff9 	.word	0x08004ff9
 800504c:	08004f8d 	.word	0x08004f8d
 8005050:	08004efd 	.word	0x08004efd

08005054 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 800505c:	f107 0308 	add.w	r3, r7, #8
 8005060:	4917      	ldr	r1, [pc, #92]	; (80050c0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005062:	4618      	mov	r0, r3
 8005064:	f007 fe47 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005068:	f107 0308 	add.w	r3, r7, #8
 800506c:	2100      	movs	r1, #0
 800506e:	4618      	mov	r0, r3
 8005070:	f005 ff1a 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005074:	4603      	mov	r3, r0
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	3294      	adds	r2, #148	; 0x94
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	4790      	blx	r2
 8005080:	f107 0308 	add.w	r3, r7, #8
 8005084:	4618      	mov	r0, r3
 8005086:	f008 f9ee 	bl	800d466 <_ZN12SimpleStringD1Ev>
		mock().clear();
 800508a:	f107 0310 	add.w	r3, r7, #16
 800508e:	490c      	ldr	r1, [pc, #48]	; (80050c0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005090:	4618      	mov	r0, r3
 8005092:	f007 fe30 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005096:	f107 0310 	add.w	r3, r7, #16
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f005 ff03 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80050a2:	4603      	mov	r3, r0
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	329c      	adds	r2, #156	; 0x9c
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	4790      	blx	r2
 80050ae:	f107 0310 	add.w	r3, r7, #16
 80050b2:	4618      	mov	r0, r3
 80050b4:	f008 f9d7 	bl	800d466 <_ZN12SimpleStringD1Ev>
	}
 80050b8:	bf00      	nop
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	080239c0 	.word	0x080239c0

080050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f00f fa1e 	bl	8014510 <_ZN5UtestC1Ev>
 80050d4:	4a03      	ldr	r2, [pc, #12]	; (80050e4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	08027990 	.word	0x08027990

080050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	4a05      	ldr	r2, [pc, #20]	; (8005108 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f00f fa19 	bl	8014530 <_ZN5UtestD1Ev>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	08027990 	.word	0x08027990

0800510c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ffe7 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800511a:	2104      	movs	r1, #4
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f005 fa3b 	bl	800a598 <_ZdlPvj>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff ffc4 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800513c:	4a03      	ldr	r2, [pc, #12]	; (800514c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	08027970 	.word	0x08027970

08005150 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	22b8      	movs	r2, #184	; 0xb8
 800515a:	4906      	ldr	r1, [pc, #24]	; (8005174 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 800515c:	2004      	movs	r0, #4
 800515e:	f005 fa07 	bl	800a570 <_ZnwjPKci>
 8005162:	4604      	mov	r4, r0
 8005164:	4620      	mov	r0, r4
 8005166:	f7ff ffe1 	bl	800512c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 800516a:	4623      	mov	r3, r4
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	bd90      	pop	{r4, r7, pc}
 8005174:	0802369c 	.word	0x0802369c

08005178 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4618      	mov	r0, r3
 8005184:	f00d fde2 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8005188:	4a03      	ldr	r2, [pc, #12]	; (8005198 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	080278c4 	.word	0x080278c4

0800519c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 800519c:	b5b0      	push	{r4, r5, r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af04      	add	r7, sp, #16
 80051a2:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 80051a4:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80051a6:	4a11      	ldr	r2, [pc, #68]	; (80051ec <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 80051a8:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 80051aa:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	2364      	movs	r3, #100	; 0x64
 80051b0:	4a0f      	ldr	r2, [pc, #60]	; (80051f0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 80051b2:	4910      	ldr	r1, [pc, #64]	; (80051f4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 80051b4:	f7fe fba8 	bl	8003908 <ESP_Init>
 80051b8:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 80051ba:	f00f f97f 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80051be:	4604      	mov	r4, r0
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	3338      	adds	r3, #56	; 0x38
 80051c4:	681d      	ldr	r5, [r3, #0]
 80051c6:	f00f f989 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80051ca:	4603      	mov	r3, r0
 80051cc:	9302      	str	r3, [sp, #8]
 80051ce:	23c6      	movs	r3, #198	; 0xc6
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	4b09      	ldr	r3, [pc, #36]	; (80051fc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	2101      	movs	r1, #1
 80051dc:	4620      	mov	r0, r4
 80051de:	47a8      	blx	r5

}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bdb0      	pop	{r4, r5, r7, pc}
 80051e8:	200005c4 	.word	0x200005c4
 80051ec:	08004efd 	.word	0x08004efd
 80051f0:	08004ff9 	.word	0x08004ff9
 80051f4:	08004f8d 	.word	0x08004f8d
 80051f8:	0802369c 	.word	0x0802369c
 80051fc:	080239f4 	.word	0x080239f4

08005200 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff ff5a 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005210:	4a03      	ldr	r2, [pc, #12]	; (8005220 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	080278a4 	.word	0x080278a4

08005224 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8005224:	b590      	push	{r4, r7, lr}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	22ca      	movs	r2, #202	; 0xca
 800522e:	4906      	ldr	r1, [pc, #24]	; (8005248 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8005230:	2004      	movs	r0, #4
 8005232:	f005 f99d 	bl	800a570 <_ZnwjPKci>
 8005236:	4604      	mov	r4, r0
 8005238:	4620      	mov	r0, r4
 800523a:	f7ff ffe1 	bl	8005200 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 800523e:	4623      	mov	r3, r4
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bd90      	pop	{r4, r7, pc}
 8005248:	0802369c 	.word	0x0802369c

0800524c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4618      	mov	r0, r3
 8005258:	f00d fd78 	bl	8012d4c <_ZN10UtestShellC1Ev>
 800525c:	4a03      	ldr	r2, [pc, #12]	; (800526c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	080277f8 	.word	0x080277f8

08005270 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8005270:	b5b0      	push	{r4, r5, r7, lr}
 8005272:	b08e      	sub	sp, #56	; 0x38
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");
 8005278:	f107 0308 	add.w	r3, r7, #8
 800527c:	493d      	ldr	r1, [pc, #244]	; (8005374 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 800527e:	4618      	mov	r0, r3
 8005280:	f007 fd39 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005284:	f107 0308 	add.w	r3, r7, #8
 8005288:	2100      	movs	r1, #0
 800528a:	4618      	mov	r0, r3
 800528c:	f005 fe0c 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005290:	4604      	mov	r4, r0
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	681d      	ldr	r5, [r3, #0]
 8005298:	f107 0310 	add.w	r3, r7, #16
 800529c:	4936      	ldr	r1, [pc, #216]	; (8005378 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 800529e:	4618      	mov	r0, r3
 80052a0:	f007 fd29 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80052a4:	f107 0310 	add.w	r3, r7, #16
 80052a8:	4619      	mov	r1, r3
 80052aa:	4620      	mov	r0, r4
 80052ac:	47a8      	blx	r5
 80052ae:	4604      	mov	r4, r0
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	334c      	adds	r3, #76	; 0x4c
 80052b4:	681d      	ldr	r5, [r3, #0]
 80052b6:	f107 0318 	add.w	r3, r7, #24
 80052ba:	4930      	ldr	r1, [pc, #192]	; (800537c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 80052bc:	4618      	mov	r0, r3
 80052be:	f007 fd1a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80052c2:	f107 0318 	add.w	r3, r7, #24
 80052c6:	4a2e      	ldr	r2, [pc, #184]	; (8005380 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80052c8:	4619      	mov	r1, r3
 80052ca:	4620      	mov	r0, r4
 80052cc:	47a8      	blx	r5
 80052ce:	f107 0318 	add.w	r3, r7, #24
 80052d2:	4618      	mov	r0, r3
 80052d4:	f008 f8c7 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80052d8:	f107 0310 	add.w	r3, r7, #16
 80052dc:	4618      	mov	r0, r3
 80052de:	f008 f8c2 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80052e2:	f107 0308 	add.w	r3, r7, #8
 80052e6:	4618      	mov	r0, r3
 80052e8:	f008 f8bd 	bl	800d466 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 80052ec:	f107 0320 	add.w	r3, r7, #32
 80052f0:	4920      	ldr	r1, [pc, #128]	; (8005374 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80052f2:	4618      	mov	r0, r3
 80052f4:	f007 fcff 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80052f8:	f107 0320 	add.w	r3, r7, #32
 80052fc:	2100      	movs	r1, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	f005 fdd2 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005304:	4604      	mov	r4, r0
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	330c      	adds	r3, #12
 800530a:	681d      	ldr	r5, [r3, #0]
 800530c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005310:	4919      	ldr	r1, [pc, #100]	; (8005378 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8005312:	4618      	mov	r0, r3
 8005314:	f007 fcef 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800531c:	4619      	mov	r1, r3
 800531e:	4620      	mov	r0, r4
 8005320:	47a8      	blx	r5
 8005322:	4604      	mov	r4, r0
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	334c      	adds	r3, #76	; 0x4c
 8005328:	681d      	ldr	r5, [r3, #0]
 800532a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800532e:	4913      	ldr	r1, [pc, #76]	; (800537c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8005330:	4618      	mov	r0, r3
 8005332:	f007 fce0 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800533a:	4a12      	ldr	r2, [pc, #72]	; (8005384 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 800533c:	4619      	mov	r1, r3
 800533e:	4620      	mov	r0, r4
 8005340:	47a8      	blx	r5
 8005342:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005346:	4618      	mov	r0, r3
 8005348:	f008 f88d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800534c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005350:	4618      	mov	r0, r3
 8005352:	f008 f888 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005356:	f107 0320 	add.w	r3, r7, #32
 800535a:	4618      	mov	r0, r3
 800535c:	f008 f883 	bl	800d466 <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 8005360:	4807      	ldr	r0, [pc, #28]	; (8005380 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8005362:	f7fe fafd 	bl	8003960 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 8005366:	4807      	ldr	r0, [pc, #28]	; (8005384 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005368:	f7fe fafa 	bl	8003960 <Send_AT_Command>



}
 800536c:	bf00      	nop
 800536e:	3738      	adds	r7, #56	; 0x38
 8005370:	46bd      	mov	sp, r7
 8005372:	bdb0      	pop	{r4, r5, r7, pc}
 8005374:	080239c0 	.word	0x080239c0
 8005378:	080239c4 	.word	0x080239c4
 800537c:	080239d8 	.word	0x080239d8
 8005380:	080238c8 	.word	0x080238c8
 8005384:	08023a14 	.word	0x08023a14

08005388 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fe96 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005398:	4a03      	ldr	r2, [pc, #12]	; (80053a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	080277d8 	.word	0x080277d8

080053ac <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 80053ac:	b590      	push	{r4, r7, lr}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	22d6      	movs	r2, #214	; 0xd6
 80053b6:	4906      	ldr	r1, [pc, #24]	; (80053d0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 80053b8:	2004      	movs	r0, #4
 80053ba:	f005 f8d9 	bl	800a570 <_ZnwjPKci>
 80053be:	4604      	mov	r4, r0
 80053c0:	4620      	mov	r0, r4
 80053c2:	f7ff ffe1 	bl	8005388 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 80053c6:	4623      	mov	r3, r4
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd90      	pop	{r4, r7, pc}
 80053d0:	0802369c 	.word	0x0802369c

080053d4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4618      	mov	r0, r3
 80053e0:	f00d fcb4 	bl	8012d4c <_ZN10UtestShellC1Ev>
 80053e4:	4a03      	ldr	r2, [pc, #12]	; (80053f4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	0802772c 	.word	0x0802772c

080053f8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 80053f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053fa:	b097      	sub	sp, #92	; 0x5c
 80053fc:	af04      	add	r7, sp, #16
 80053fe:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 8005400:	f107 0308 	add.w	r3, r7, #8
 8005404:	4967      	ldr	r1, [pc, #412]	; (80055a4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 8005406:	4618      	mov	r0, r3
 8005408:	f007 fc75 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800540c:	f107 0308 	add.w	r3, r7, #8
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f005 fd48 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005418:	4604      	mov	r4, r0
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	681d      	ldr	r5, [r3, #0]
 8005420:	f107 0310 	add.w	r3, r7, #16
 8005424:	4960      	ldr	r1, [pc, #384]	; (80055a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 8005426:	4618      	mov	r0, r3
 8005428:	f007 fc65 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800542c:	f107 0310 	add.w	r3, r7, #16
 8005430:	4619      	mov	r1, r3
 8005432:	4620      	mov	r0, r4
 8005434:	47a8      	blx	r5
 8005436:	4603      	mov	r3, r0
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	3264      	adds	r2, #100	; 0x64
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	214f      	movs	r1, #79	; 0x4f
 8005440:	4618      	mov	r0, r3
 8005442:	4790      	blx	r2
 8005444:	f107 0310 	add.w	r3, r7, #16
 8005448:	4618      	mov	r0, r3
 800544a:	f008 f80c 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800544e:	f107 0308 	add.w	r3, r7, #8
 8005452:	4618      	mov	r0, r3
 8005454:	f008 f807 	bl	800d466 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005458:	f7fe fa90 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 800545c:	f107 0318 	add.w	r3, r7, #24
 8005460:	4950      	ldr	r1, [pc, #320]	; (80055a4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 8005462:	4618      	mov	r0, r3
 8005464:	f007 fc47 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005468:	f107 0318 	add.w	r3, r7, #24
 800546c:	2100      	movs	r1, #0
 800546e:	4618      	mov	r0, r3
 8005470:	f005 fd1a 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005474:	4604      	mov	r4, r0
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	681d      	ldr	r5, [r3, #0]
 800547c:	f107 0320 	add.w	r3, r7, #32
 8005480:	4949      	ldr	r1, [pc, #292]	; (80055a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 8005482:	4618      	mov	r0, r3
 8005484:	f007 fc37 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005488:	f107 0320 	add.w	r3, r7, #32
 800548c:	4619      	mov	r1, r3
 800548e:	4620      	mov	r0, r4
 8005490:	47a8      	blx	r5
 8005492:	4603      	mov	r3, r0
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	3264      	adds	r2, #100	; 0x64
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	214b      	movs	r1, #75	; 0x4b
 800549c:	4618      	mov	r0, r3
 800549e:	4790      	blx	r2
 80054a0:	f107 0320 	add.w	r3, r7, #32
 80054a4:	4618      	mov	r0, r3
 80054a6:	f007 ffde 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80054aa:	f107 0318 	add.w	r3, r7, #24
 80054ae:	4618      	mov	r0, r3
 80054b0:	f007 ffd9 	bl	800d466 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80054b4:	f7fe fa62 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 80054b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054bc:	4939      	ldr	r1, [pc, #228]	; (80055a4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 80054be:	4618      	mov	r0, r3
 80054c0:	f007 fc19 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80054c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f005 fcec 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80054d0:	4604      	mov	r4, r0
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	681d      	ldr	r5, [r3, #0]
 80054d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054dc:	4932      	ldr	r1, [pc, #200]	; (80055a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 80054de:	4618      	mov	r0, r3
 80054e0:	f007 fc09 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80054e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054e8:	4619      	mov	r1, r3
 80054ea:	4620      	mov	r0, r4
 80054ec:	47a8      	blx	r5
 80054ee:	4603      	mov	r3, r0
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	3264      	adds	r2, #100	; 0x64
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	210d      	movs	r1, #13
 80054f8:	4618      	mov	r0, r3
 80054fa:	4790      	blx	r2
 80054fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005500:	4618      	mov	r0, r3
 8005502:	f007 ffb0 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800550a:	4618      	mov	r0, r3
 800550c:	f007 ffab 	bl	800d466 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005510:	f7fe fa34 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 8005514:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005518:	4922      	ldr	r1, [pc, #136]	; (80055a4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 800551a:	4618      	mov	r0, r3
 800551c:	f007 fbeb 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005520:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005524:	2100      	movs	r1, #0
 8005526:	4618      	mov	r0, r3
 8005528:	f005 fcbe 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800552c:	4604      	mov	r4, r0
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	681d      	ldr	r5, [r3, #0]
 8005534:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005538:	491b      	ldr	r1, [pc, #108]	; (80055a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 800553a:	4618      	mov	r0, r3
 800553c:	f007 fbdb 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005540:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005544:	4619      	mov	r1, r3
 8005546:	4620      	mov	r0, r4
 8005548:	47a8      	blx	r5
 800554a:	4603      	mov	r3, r0
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	3264      	adds	r2, #100	; 0x64
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	210a      	movs	r1, #10
 8005554:	4618      	mov	r0, r3
 8005556:	4790      	blx	r2
 8005558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800555c:	4618      	mov	r0, r3
 800555e:	f007 ff82 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005562:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005566:	4618      	mov	r0, r3
 8005568:	f007 ff7d 	bl	800d466 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 800556c:	f7fe fa06 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 8005570:	f00e ffa4 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8005574:	4604      	mov	r4, r0
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	3324      	adds	r3, #36	; 0x24
 800557a:	681d      	ldr	r5, [r3, #0]
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68de      	ldr	r6, [r3, #12]
 8005582:	f00e ffab 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005586:	4603      	mov	r3, r0
 8005588:	9302      	str	r3, [sp, #8]
 800558a:	23e2      	movs	r3, #226	; 0xe2
 800558c:	9301      	str	r3, [sp, #4]
 800558e:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b8>)
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	2300      	movs	r3, #0
 8005594:	4632      	mov	r2, r6
 8005596:	4907      	ldr	r1, [pc, #28]	; (80055b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1bc>)
 8005598:	4620      	mov	r0, r4
 800559a:	47a8      	blx	r5

}
 800559c:	bf00      	nop
 800559e:	374c      	adds	r7, #76	; 0x4c
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a4:	080239c0 	.word	0x080239c0
 80055a8:	080239e0 	.word	0x080239e0
 80055ac:	2000049c 	.word	0x2000049c
 80055b0:	0802369c 	.word	0x0802369c
 80055b4:	08023614 	.word	0x08023614

080055b8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fd7e 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80055c8:	4a03      	ldr	r2, [pc, #12]	; (80055d8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	0802770c 	.word	0x0802770c

080055dc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	22e6      	movs	r2, #230	; 0xe6
 80055e6:	4906      	ldr	r1, [pc, #24]	; (8005600 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 80055e8:	2004      	movs	r0, #4
 80055ea:	f004 ffc1 	bl	800a570 <_ZnwjPKci>
 80055ee:	4604      	mov	r4, r0
 80055f0:	4620      	mov	r0, r4
 80055f2:	f7ff ffe1 	bl	80055b8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 80055f6:	4623      	mov	r3, r4
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd90      	pop	{r4, r7, pc}
 8005600:	0802369c 	.word	0x0802369c

08005604 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4618      	mov	r0, r3
 8005610:	f00d fb9c 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8005614:	4a03      	ldr	r2, [pc, #12]	; (8005624 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	08027660 	.word	0x08027660

08005628 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800562a:	b091      	sub	sp, #68	; 0x44
 800562c:	af04      	add	r7, sp, #16
 800562e:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 8005630:	4a35      	ldr	r2, [pc, #212]	; (8005708 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 8005632:	f107 030c 	add.w	r3, r7, #12
 8005636:	e892 0003 	ldmia.w	r2, {r0, r1}
 800563a:	6018      	str	r0, [r3, #0]
 800563c:	3304      	adds	r3, #4
 800563e:	7019      	strb	r1, [r3, #0]
 8005640:	f107 0311 	add.w	r3, r7, #17
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 800564a:	2300      	movs	r3, #0
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800564e:	f107 030c 	add.w	r3, r7, #12
 8005652:	4618      	mov	r0, r3
 8005654:	f7fa fdf2 	bl	800023c <strlen>
 8005658:	4603      	mov	r3, r0
 800565a:	461a      	mov	r2, r3
 800565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565e:	4293      	cmp	r3, r2
 8005660:	da35      	bge.n	80056ce <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005662:	f107 0318 	add.w	r3, r7, #24
 8005666:	4929      	ldr	r1, [pc, #164]	; (800570c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 8005668:	4618      	mov	r0, r3
 800566a:	f007 fb44 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800566e:	f107 0318 	add.w	r3, r7, #24
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f005 fc17 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800567a:	4604      	mov	r4, r0
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	330c      	adds	r3, #12
 8005680:	681d      	ldr	r5, [r3, #0]
 8005682:	f107 0320 	add.w	r3, r7, #32
 8005686:	4922      	ldr	r1, [pc, #136]	; (8005710 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8005688:	4618      	mov	r0, r3
 800568a:	f007 fb34 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800568e:	f107 0320 	add.w	r3, r7, #32
 8005692:	4619      	mov	r1, r3
 8005694:	4620      	mov	r0, r4
 8005696:	47a8      	blx	r5
 8005698:	4603      	mov	r3, r0
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	3264      	adds	r2, #100	; 0x64
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	f107 000c 	add.w	r0, r7, #12
 80056a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056a6:	4401      	add	r1, r0
 80056a8:	7809      	ldrb	r1, [r1, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	4790      	blx	r2
 80056ae:	f107 0320 	add.w	r3, r7, #32
 80056b2:	4618      	mov	r0, r3
 80056b4:	f007 fed7 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80056b8:	f107 0318 	add.w	r3, r7, #24
 80056bc:	4618      	mov	r0, r3
 80056be:	f007 fed2 	bl	800d466 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80056c2:	f7fe f95b 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	3301      	adds	r3, #1
 80056ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056cc:	e7bf      	b.n	800564e <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 80056ce:	4811      	ldr	r0, [pc, #68]	; (8005714 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xec>)
 80056d0:	f7fe f96e 	bl	80039b0 <Read_Response>
 80056d4:	62b8      	str	r0, [r7, #40]	; 0x28

	LONGS_EQUAL(1,result);
 80056d6:	f00e fef1 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80056da:	4604      	mov	r4, r0
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	3338      	adds	r3, #56	; 0x38
 80056e0:	681d      	ldr	r5, [r3, #0]
 80056e2:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80056e4:	f00e fefa 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80056e8:	4603      	mov	r3, r0
 80056ea:	9302      	str	r3, [sp, #8]
 80056ec:	23f2      	movs	r3, #242	; 0xf2
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf0>)
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	4b09      	ldr	r3, [pc, #36]	; (800571c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf4>)
 80056f6:	4632      	mov	r2, r6
 80056f8:	2101      	movs	r1, #1
 80056fa:	4620      	mov	r0, r4
 80056fc:	47a8      	blx	r5

}
 80056fe:	bf00      	nop
 8005700:	3734      	adds	r7, #52	; 0x34
 8005702:	46bd      	mov	sp, r7
 8005704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005706:	bf00      	nop
 8005708:	08023a20 	.word	0x08023a20
 800570c:	080239c0 	.word	0x080239c0
 8005710:	080239e0 	.word	0x080239e0
 8005714:	08023a1c 	.word	0x08023a1c
 8005718:	0802369c 	.word	0x0802369c
 800571c:	080239f4 	.word	0x080239f4

08005720 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fcca 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005730:	4a03      	ldr	r2, [pc, #12]	; (8005740 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	08027640 	.word	0x08027640

08005744 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 8005744:	b590      	push	{r4, r7, lr}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	22f7      	movs	r2, #247	; 0xf7
 800574e:	4906      	ldr	r1, [pc, #24]	; (8005768 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8005750:	2004      	movs	r0, #4
 8005752:	f004 ff0d 	bl	800a570 <_ZnwjPKci>
 8005756:	4604      	mov	r4, r0
 8005758:	4620      	mov	r0, r4
 800575a:	f7ff ffe1 	bl	8005720 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 800575e:	4623      	mov	r3, r4
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bd90      	pop	{r4, r7, pc}
 8005768:	0802369c 	.word	0x0802369c

0800576c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4618      	mov	r0, r3
 8005778:	f00d fae8 	bl	8012d4c <_ZN10UtestShellC1Ev>
 800577c:	4a03      	ldr	r2, [pc, #12]	; (800578c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	08027594 	.word	0x08027594

08005790 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005792:	b089      	sub	sp, #36	; 0x24
 8005794:	af04      	add	r7, sp, #16
 8005796:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005798:	2305      	movs	r3, #5
 800579a:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		response_state = Wait_Response((char*)"OK", 1000);
 800579c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80057a0:	4811      	ldr	r0, [pc, #68]	; (80057e8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 80057a2:	f7fe f917 	bl	80039d4 <Wait_Response>
 80057a6:	4603      	mov	r3, r0
 80057a8:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	2b05      	cmp	r3, #5
 80057ae:	d100      	bne.n	80057b2 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 80057b0:	e7f4      	b.n	800579c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 80057b2:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 80057b4:	f00e fe82 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80057b8:	4604      	mov	r4, r0
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	3338      	adds	r3, #56	; 0x38
 80057be:	681d      	ldr	r5, [r3, #0]
 80057c0:	7bfe      	ldrb	r6, [r7, #15]
 80057c2:	f00e fe8b 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80057c6:	4603      	mov	r3, r0
 80057c8:	9302      	str	r3, [sp, #8]
 80057ca:	f240 1303 	movw	r3, #259	; 0x103
 80057ce:	9301      	str	r3, [sp, #4]
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 80057d6:	4632      	mov	r2, r6
 80057d8:	2102      	movs	r1, #2
 80057da:	4620      	mov	r0, r4
 80057dc:	47a8      	blx	r5

}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e6:	bf00      	nop
 80057e8:	08023a1c 	.word	0x08023a1c
 80057ec:	0802369c 	.word	0x0802369c
 80057f0:	08023a2c 	.word	0x08023a2c

080057f4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fc60 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005804:	4a03      	ldr	r2, [pc, #12]	; (8005814 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	08027574 	.word	0x08027574

08005818 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	f240 1207 	movw	r2, #263	; 0x107
 8005824:	4906      	ldr	r1, [pc, #24]	; (8005840 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8005826:	2004      	movs	r0, #4
 8005828:	f004 fea2 	bl	800a570 <_ZnwjPKci>
 800582c:	4604      	mov	r4, r0
 800582e:	4620      	mov	r0, r4
 8005830:	f7ff ffe0 	bl	80057f4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005834:	4623      	mov	r3, r4
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	bd90      	pop	{r4, r7, pc}
 800583e:	bf00      	nop
 8005840:	0802369c 	.word	0x0802369c

08005844 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4618      	mov	r0, r3
 8005850:	f00d fa7c 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8005854:	4a03      	ldr	r2, [pc, #12]	; (8005864 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	080274c8 	.word	0x080274c8

08005868 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800586a:	b091      	sub	sp, #68	; 0x44
 800586c:	af04      	add	r7, sp, #16
 800586e:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005870:	2305      	movs	r3, #5
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	char response[10] = "OK\r\n";
 8005876:	4a3b      	ldr	r2, [pc, #236]	; (8005964 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 8005878:	f107 030c 	add.w	r3, r7, #12
 800587c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005880:	6018      	str	r0, [r3, #0]
 8005882:	3304      	adds	r3, #4
 8005884:	7019      	strb	r1, [r3, #0]
 8005886:	f107 0311 	add.w	r3, r7, #17
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	711a      	strb	r2, [r3, #4]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005890:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005894:	4834      	ldr	r0, [pc, #208]	; (8005968 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 8005896:	f7fe f89d 	bl	80039d4 <Wait_Response>
 800589a:	4603      	mov	r3, r0
 800589c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(response_state != IDLE)
 80058a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058a4:	2b05      	cmp	r3, #5
 80058a6:	d141      	bne.n	800592c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xc4>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 80058a8:	2300      	movs	r3, #0
 80058aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ac:	f107 030c 	add.w	r3, r7, #12
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fa fcc3 	bl	800023c <strlen>
 80058b6:	4603      	mov	r3, r0
 80058b8:	461a      	mov	r2, r3
 80058ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058bc:	4293      	cmp	r3, r2
 80058be:	dae7      	bge.n	8005890 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x28>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80058c0:	f107 0318 	add.w	r3, r7, #24
 80058c4:	4929      	ldr	r1, [pc, #164]	; (800596c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 80058c6:	4618      	mov	r0, r3
 80058c8:	f007 fa15 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80058cc:	f107 0318 	add.w	r3, r7, #24
 80058d0:	2100      	movs	r1, #0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f005 fae8 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80058d8:	4604      	mov	r4, r0
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	330c      	adds	r3, #12
 80058de:	681d      	ldr	r5, [r3, #0]
 80058e0:	f107 0320 	add.w	r3, r7, #32
 80058e4:	4922      	ldr	r1, [pc, #136]	; (8005970 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x108>)
 80058e6:	4618      	mov	r0, r3
 80058e8:	f007 fa05 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80058ec:	f107 0320 	add.w	r3, r7, #32
 80058f0:	4619      	mov	r1, r3
 80058f2:	4620      	mov	r0, r4
 80058f4:	47a8      	blx	r5
 80058f6:	4603      	mov	r3, r0
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	3264      	adds	r2, #100	; 0x64
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	f107 000c 	add.w	r0, r7, #12
 8005902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005904:	4401      	add	r1, r0
 8005906:	7809      	ldrb	r1, [r1, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	4790      	blx	r2
 800590c:	f107 0320 	add.w	r3, r7, #32
 8005910:	4618      	mov	r0, r3
 8005912:	f007 fda8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005916:	f107 0318 	add.w	r3, r7, #24
 800591a:	4618      	mov	r0, r3
 800591c:	f007 fda3 	bl	800d466 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005920:	f7fe f82c 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	3301      	adds	r3, #1
 8005928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800592a:	e7bf      	b.n	80058ac <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x44>
			break;
 800592c:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 800592e:	f00e fdc5 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8005932:	4604      	mov	r4, r0
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	3338      	adds	r3, #56	; 0x38
 8005938:	681d      	ldr	r5, [r3, #0]
 800593a:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 800593e:	f00e fdcd 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005942:	4603      	mov	r3, r0
 8005944:	9302      	str	r3, [sp, #8]
 8005946:	f44f 738d 	mov.w	r3, #282	; 0x11a
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	4b09      	ldr	r3, [pc, #36]	; (8005974 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x10c>)
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x110>)
 8005952:	4632      	mov	r2, r6
 8005954:	2100      	movs	r1, #0
 8005956:	4620      	mov	r0, r4
 8005958:	47a8      	blx	r5
}
 800595a:	bf00      	nop
 800595c:	3734      	adds	r7, #52	; 0x34
 800595e:	46bd      	mov	sp, r7
 8005960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005962:	bf00      	nop
 8005964:	08023a20 	.word	0x08023a20
 8005968:	08023a1c 	.word	0x08023a1c
 800596c:	080239c0 	.word	0x080239c0
 8005970:	080239e0 	.word	0x080239e0
 8005974:	0802369c 	.word	0x0802369c
 8005978:	08023a60 	.word	0x08023a60

0800597c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fb9c 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800598c:	4a03      	ldr	r2, [pc, #12]	; (800599c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	080274a8 	.word	0x080274a8

080059a0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 80059a0:	b590      	push	{r4, r7, lr}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	f240 121d 	movw	r2, #285	; 0x11d
 80059ac:	4906      	ldr	r1, [pc, #24]	; (80059c8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 80059ae:	2004      	movs	r0, #4
 80059b0:	f004 fdde 	bl	800a570 <_ZnwjPKci>
 80059b4:	4604      	mov	r4, r0
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7ff ffe0 	bl	800597c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 80059bc:	4623      	mov	r3, r4
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd90      	pop	{r4, r7, pc}
 80059c6:	bf00      	nop
 80059c8:	0802369c 	.word	0x0802369c

080059cc <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f00d f9b8 	bl	8012d4c <_ZN10UtestShellC1Ev>
 80059dc:	4a03      	ldr	r2, [pc, #12]	; (80059ec <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	080273fc 	.word	0x080273fc

080059f0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 80059f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f2:	b08f      	sub	sp, #60	; 0x3c
 80059f4:	af04      	add	r7, sp, #16
 80059f6:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 80059f8:	2302      	movs	r3, #2
 80059fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 80059fe:	f107 030c 	add.w	r3, r7, #12
 8005a02:	492f      	ldr	r1, [pc, #188]	; (8005ac0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005a04:	4618      	mov	r0, r3
 8005a06:	f007 f976 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005a0a:	f107 030c 	add.w	r3, r7, #12
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f005 fa49 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a16:	4604      	mov	r4, r0
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	681d      	ldr	r5, [r3, #0]
 8005a1e:	f107 0314 	add.w	r3, r7, #20
 8005a22:	4928      	ldr	r1, [pc, #160]	; (8005ac4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005a24:	4618      	mov	r0, r3
 8005a26:	f007 f966 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005a2a:	f107 0314 	add.w	r3, r7, #20
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4620      	mov	r0, r4
 8005a32:	47a8      	blx	r5
 8005a34:	4604      	mov	r4, r0
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	334c      	adds	r3, #76	; 0x4c
 8005a3a:	681d      	ldr	r5, [r3, #0]
 8005a3c:	f107 031c 	add.w	r3, r7, #28
 8005a40:	4921      	ldr	r1, [pc, #132]	; (8005ac8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8005a42:	4618      	mov	r0, r3
 8005a44:	f007 f957 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005a48:	f107 031c 	add.w	r3, r7, #28
 8005a4c:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4620      	mov	r0, r4
 8005a52:	47a8      	blx	r5
 8005a54:	f107 031c 	add.w	r3, r7, #28
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f007 fd04 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005a5e:	f107 0314 	add.w	r3, r7, #20
 8005a62:	4618      	mov	r0, r3
 8005a64:	f007 fcff 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005a68:	f107 030c 	add.w	r3, r7, #12
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f007 fcfa 	bl	800d466 <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005a72:	4917      	ldr	r1, [pc, #92]	; (8005ad0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 8005a74:	4817      	ldr	r0, [pc, #92]	; (8005ad4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 8005a76:	f7fd ffef 	bl	8003a58 <Connect_Wifi>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a84:	2b05      	cmp	r3, #5
 8005a86:	d100      	bne.n	8005a8a <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005a88:	e7f3      	b.n	8005a72 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005a8a:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005a8c:	f00e fd16 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8005a90:	4604      	mov	r4, r0
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	3338      	adds	r3, #56	; 0x38
 8005a96:	681d      	ldr	r5, [r3, #0]
 8005a98:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005a9c:	f00e fd1e 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	9302      	str	r3, [sp, #8]
 8005aa4:	f44f 7398 	mov.w	r3, #304	; 0x130
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005ab0:	4632      	mov	r2, r6
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	47a8      	blx	r5

}
 8005ab8:	bf00      	nop
 8005aba:	372c      	adds	r7, #44	; 0x2c
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac0:	080239c0 	.word	0x080239c0
 8005ac4:	080239c4 	.word	0x080239c4
 8005ac8:	080239d8 	.word	0x080239d8
 8005acc:	0802361c 	.word	0x0802361c
 8005ad0:	08023a8c 	.word	0x08023a8c
 8005ad4:	08023a94 	.word	0x08023a94
 8005ad8:	0802369c 	.word	0x0802369c
 8005adc:	08023a9c 	.word	0x08023a9c

08005ae0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff faea 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005af0:	4a03      	ldr	r2, [pc, #12]	; (8005b00 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	080273dc 	.word	0x080273dc

08005b04 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8005b04:	b590      	push	{r4, r7, lr}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005b10:	4906      	ldr	r1, [pc, #24]	; (8005b2c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005b12:	2004      	movs	r0, #4
 8005b14:	f004 fd2c 	bl	800a570 <_ZnwjPKci>
 8005b18:	4604      	mov	r4, r0
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f7ff ffe0 	bl	8005ae0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005b20:	4623      	mov	r3, r4
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd90      	pop	{r4, r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	0802369c 	.word	0x0802369c

08005b30 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f00d f906 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8005b40:	4a03      	ldr	r2, [pc, #12]	; (8005b50 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	08027330 	.word	0x08027330

08005b54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b56:	b0e1      	sub	sp, #388	; 0x184
 8005b58:	af04      	add	r7, sp, #16
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005b5e:	4a78      	ldr	r2, [pc, #480]	; (8005d40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005b60:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005b64:	4611      	mov	r1, r2
 8005b66:	2296      	movs	r2, #150	; 0x96
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f01a fd9b 	bl	80206a4 <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									// check disconnect response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	char fake_tx_buffer[3][50] =
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	4a74      	ldr	r2, [pc, #464]	; (8005d44 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005b74:	4618      	mov	r0, r3
 8005b76:	4611      	mov	r1, r2
 8005b78:	2396      	movs	r3, #150	; 0x96
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f01a fd92 	bl	80206a4 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005b80:	2300      	movs	r3, #0
 8005b82:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005b86:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	dc46      	bgt.n	8005c1c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005b8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b92:	496d      	ldr	r1, [pc, #436]	; (8005d48 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005b94:	4618      	mov	r0, r3
 8005b96:	f007 f8ae 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005b9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f005 f981 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	330c      	adds	r3, #12
 8005bac:	681d      	ldr	r5, [r3, #0]
 8005bae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005bb2:	4966      	ldr	r1, [pc, #408]	; (8005d4c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f007 f89e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005bba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	47a8      	blx	r5
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	334c      	adds	r3, #76	; 0x4c
 8005bca:	681d      	ldr	r5, [r3, #0]
 8005bcc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bd0:	495f      	ldr	r1, [pc, #380]	; (8005d50 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f007 f88f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005bd8:	f107 0208 	add.w	r2, r7, #8
 8005bdc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005be0:	2132      	movs	r1, #50	; 0x32
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	441a      	add	r2, r3
 8005be8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bec:	4619      	mov	r1, r3
 8005bee:	4620      	mov	r0, r4
 8005bf0:	47a8      	blx	r5
 8005bf2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f007 fc35 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005bfc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c00:	4618      	mov	r0, r3
 8005c02:	f007 fc30 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005c06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f007 fc2b 	bl	800d466 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005c10:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005c14:	3301      	adds	r3, #1
 8005c16:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005c1a:	e7b4      	b.n	8005b86 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005c1c:	2305      	movs	r3, #5
 8005c1e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005c28:	494a      	ldr	r1, [pc, #296]	; (8005d54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005c2a:	484b      	ldr	r0, [pc, #300]	; (8005d58 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005c2c:	f7fd ff14 	bl	8003a58 <Connect_Wifi>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8005c36:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d065      	beq.n	8005d0a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005c3e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d061      	beq.n	8005d0a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005c46:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d05d      	beq.n	8005d0a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
		{
			break;
		}

		if(i<3)
 8005c4e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	dce8      	bgt.n	8005c28 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005c56:	2300      	movs	r3, #0
 8005c58:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005c5c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005c60:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c64:	2132      	movs	r1, #50	; 0x32
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fa fae5 	bl	800023c <strlen>
 8005c72:	4603      	mov	r3, r0
 8005c74:	461a      	mov	r2, r3
 8005c76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	da3f      	bge.n	8005cfe <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1aa>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005c7e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005c82:	4931      	ldr	r1, [pc, #196]	; (8005d48 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005c84:	4618      	mov	r0, r3
 8005c86:	f007 f836 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005c8a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f005 f909 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005c96:	4604      	mov	r4, r0
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	681d      	ldr	r5, [r3, #0]
 8005c9e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005ca2:	492e      	ldr	r1, [pc, #184]	; (8005d5c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x208>)
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f007 f826 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005caa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	47a8      	blx	r5
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	3264      	adds	r2, #100	; 0x64
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005cc0:	2032      	movs	r0, #50	; 0x32
 8005cc2:	fb00 f101 	mul.w	r1, r0, r1
 8005cc6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005cca:	4408      	add	r0, r1
 8005ccc:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005cd0:	4401      	add	r1, r0
 8005cd2:	39d0      	subs	r1, #208	; 0xd0
 8005cd4:	7809      	ldrb	r1, [r1, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	4790      	blx	r2
 8005cda:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f007 fbc1 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005ce4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f007 fbbc 	bl	800d466 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005cee:	f7fd fe45 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005cf2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005cfc:	e7ae      	b.n	8005c5c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x108>
			}
			i++;
 8005cfe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d02:	3301      	adds	r3, #1
 8005d04:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005d08:	e78e      	b.n	8005c28 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
	LONGS_EQUAL(STATUS_ERROR,response);
 8005d0a:	f00e fbd7 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8005d0e:	4604      	mov	r4, r0
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	3338      	adds	r3, #56	; 0x38
 8005d14:	681d      	ldr	r5, [r3, #0]
 8005d16:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005d1a:	f00e fbdf 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	9302      	str	r3, [sp, #8]
 8005d22:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x20c>)
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x210>)
 8005d2e:	4632      	mov	r2, r6
 8005d30:	2104      	movs	r1, #4
 8005d32:	4620      	mov	r0, r4
 8005d34:	47a8      	blx	r5

}
 8005d36:	bf00      	nop
 8005d38:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d40:	08023af4 	.word	0x08023af4
 8005d44:	08023b8c 	.word	0x08023b8c
 8005d48:	080239c0 	.word	0x080239c0
 8005d4c:	080239c4 	.word	0x080239c4
 8005d50:	080239d8 	.word	0x080239d8
 8005d54:	08023a8c 	.word	0x08023a8c
 8005d58:	08023a94 	.word	0x08023a94
 8005d5c:	080239e0 	.word	0x080239e0
 8005d60:	0802369c 	.word	0x0802369c
 8005d64:	08023ac8 	.word	0x08023ac8

08005d68 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff f9a6 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005d78:	4a03      	ldr	r2, [pc, #12]	; (8005d88 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4618      	mov	r0, r3
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	08027310 	.word	0x08027310

08005d8c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005d98:	4906      	ldr	r1, [pc, #24]	; (8005db4 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005d9a:	2004      	movs	r0, #4
 8005d9c:	f004 fbe8 	bl	800a570 <_ZnwjPKci>
 8005da0:	4604      	mov	r4, r0
 8005da2:	4620      	mov	r0, r4
 8005da4:	f7ff ffe0 	bl	8005d68 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005da8:	4623      	mov	r3, r4
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd90      	pop	{r4, r7, pc}
 8005db2:	bf00      	nop
 8005db4:	0802369c 	.word	0x0802369c

08005db8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f00c ffc2 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8005dc8:	4a03      	ldr	r2, [pc, #12]	; (8005dd8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	08027264 	.word	0x08027264

08005ddc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dde:	b0e1      	sub	sp, #388	; 0x184
 8005de0:	af04      	add	r7, sp, #16
 8005de2:	1d3b      	adds	r3, r7, #4
 8005de4:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005de6:	4a77      	ldr	r2, [pc, #476]	; (8005fc4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005de8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005dec:	4611      	mov	r1, r2
 8005dee:	2296      	movs	r2, #150	; 0x96
 8005df0:	4618      	mov	r0, r3
 8005df2:	f01a fc57 	bl	80206a4 <memcpy>
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char fake_tx_buffer[3][50] =
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	4a73      	ldr	r2, [pc, #460]	; (8005fc8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	4611      	mov	r1, r2
 8005e00:	2396      	movs	r3, #150	; 0x96
 8005e02:	461a      	mov	r2, r3
 8005e04:	f01a fc4e 	bl	80206a4 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005e0e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	dc46      	bgt.n	8005ea4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005e16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e1a:	496c      	ldr	r1, [pc, #432]	; (8005fcc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f006 ff6a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005e22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e26:	2100      	movs	r1, #0
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f005 f83d 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005e2e:	4604      	mov	r4, r0
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	681d      	ldr	r5, [r3, #0]
 8005e36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e3a:	4965      	ldr	r1, [pc, #404]	; (8005fd0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f006 ff5a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005e42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e46:	4619      	mov	r1, r3
 8005e48:	4620      	mov	r0, r4
 8005e4a:	47a8      	blx	r5
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	334c      	adds	r3, #76	; 0x4c
 8005e52:	681d      	ldr	r5, [r3, #0]
 8005e54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e58:	495e      	ldr	r1, [pc, #376]	; (8005fd4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f006 ff4b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005e60:	f107 0208 	add.w	r2, r7, #8
 8005e64:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e68:	2132      	movs	r1, #50	; 0x32
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	441a      	add	r2, r3
 8005e70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e74:	4619      	mov	r1, r3
 8005e76:	4620      	mov	r0, r4
 8005e78:	47a8      	blx	r5
 8005e7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f007 faf1 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005e84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f007 faec 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005e8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e92:	4618      	mov	r0, r3
 8005e94:	f007 fae7 	bl	800d466 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005e98:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005ea2:	e7b4      	b.n	8005e0e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005eaa:	494b      	ldr	r1, [pc, #300]	; (8005fd8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005eac:	484b      	ldr	r0, [pc, #300]	; (8005fdc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x200>)
 8005eae:	f7fd fdd3 	bl	8003a58 <Connect_Wifi>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8005eb8:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d065      	beq.n	8005f8c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005ec0:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d061      	beq.n	8005f8c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005ec8:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d05d      	beq.n	8005f8c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
		{
			break;
		}

		if(i<3)
 8005ed0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	dce8      	bgt.n	8005eaa <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005ede:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005ee2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ee6:	2132      	movs	r1, #50	; 0x32
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	4413      	add	r3, r2
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fa f9a4 	bl	800023c <strlen>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005efc:	4293      	cmp	r3, r2
 8005efe:	da3f      	bge.n	8005f80 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005f00:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f04:	4931      	ldr	r1, [pc, #196]	; (8005fcc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005f06:	4618      	mov	r0, r3
 8005f08:	f006 fef5 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005f0c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f10:	2100      	movs	r1, #0
 8005f12:	4618      	mov	r0, r3
 8005f14:	f004 ffc8 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f18:	4604      	mov	r4, r0
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	681d      	ldr	r5, [r3, #0]
 8005f20:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f24:	492e      	ldr	r1, [pc, #184]	; (8005fe0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x204>)
 8005f26:	4618      	mov	r0, r3
 8005f28:	f006 fee5 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8005f2c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f30:	4619      	mov	r1, r3
 8005f32:	4620      	mov	r0, r4
 8005f34:	47a8      	blx	r5
 8005f36:	4603      	mov	r3, r0
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	3264      	adds	r2, #100	; 0x64
 8005f3c:	6812      	ldr	r2, [r2, #0]
 8005f3e:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005f42:	2032      	movs	r0, #50	; 0x32
 8005f44:	fb00 f101 	mul.w	r1, r0, r1
 8005f48:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005f4c:	4408      	add	r0, r1
 8005f4e:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005f52:	4401      	add	r1, r0
 8005f54:	39d0      	subs	r1, #208	; 0xd0
 8005f56:	7809      	ldrb	r1, [r1, #0]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	4790      	blx	r2
 8005f5c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f60:	4618      	mov	r0, r3
 8005f62:	f007 fa80 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8005f66:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f007 fa7b 	bl	800d466 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005f70:	f7fd fd04 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005f74:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005f78:	3301      	adds	r3, #1
 8005f7a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005f7e:	e7ae      	b.n	8005ede <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x102>
			}
			i++;
 8005f80:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005f84:	3301      	adds	r3, #1
 8005f86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005f8a:	e78e      	b.n	8005eaa <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
	LONGS_EQUAL(STATUS_OK,response);
 8005f8c:	f00e fa96 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8005f90:	4604      	mov	r4, r0
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	3338      	adds	r3, #56	; 0x38
 8005f96:	681d      	ldr	r5, [r3, #0]
 8005f98:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005f9c:	f00e fa9e 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	9302      	str	r3, [sp, #8]
 8005fa4:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8005fa8:	9301      	str	r3, [sp, #4]
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x208>)
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	4b0e      	ldr	r3, [pc, #56]	; (8005fe8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x20c>)
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	2103      	movs	r1, #3
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	47a8      	blx	r5

}
 8005fb8:	bf00      	nop
 8005fba:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	08023c4c 	.word	0x08023c4c
 8005fc8:	08023b8c 	.word	0x08023b8c
 8005fcc:	080239c0 	.word	0x080239c0
 8005fd0:	080239c4 	.word	0x080239c4
 8005fd4:	080239d8 	.word	0x080239d8
 8005fd8:	08023a8c 	.word	0x08023a8c
 8005fdc:	08023a94 	.word	0x08023a94
 8005fe0:	080239e0 	.word	0x080239e0
 8005fe4:	0802369c 	.word	0x0802369c
 8005fe8:	08023c24 	.word	0x08023c24

08005fec <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff f864 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ffc:	4a03      	ldr	r2, [pc, #12]	; (800600c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	08027244 	.word	0x08027244

08006010 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800601c:	4906      	ldr	r1, [pc, #24]	; (8006038 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 800601e:	2004      	movs	r0, #4
 8006020:	f004 faa6 	bl	800a570 <_ZnwjPKci>
 8006024:	4604      	mov	r4, r0
 8006026:	4620      	mov	r0, r4
 8006028:	f7ff ffe0 	bl	8005fec <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 800602c:	4623      	mov	r3, r4
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	bd90      	pop	{r4, r7, pc}
 8006036:	bf00      	nop
 8006038:	0802369c 	.word	0x0802369c

0800603c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4618      	mov	r0, r3
 8006048:	f00c fe80 	bl	8012d4c <_ZN10UtestShellC1Ev>
 800604c:	4a03      	ldr	r2, [pc, #12]	; (800605c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	08027198 	.word	0x08027198

08006060 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8006060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006062:	b08f      	sub	sp, #60	; 0x3c
 8006064:	af04      	add	r7, sp, #16
 8006066:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8006068:	f107 030c 	add.w	r3, r7, #12
 800606c:	492e      	ldr	r1, [pc, #184]	; (8006128 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 800606e:	4618      	mov	r0, r3
 8006070:	f006 fe41 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006074:	f107 030c 	add.w	r3, r7, #12
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f004 ff14 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006080:	4604      	mov	r4, r0
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	330c      	adds	r3, #12
 8006086:	681d      	ldr	r5, [r3, #0]
 8006088:	f107 0314 	add.w	r3, r7, #20
 800608c:	4927      	ldr	r1, [pc, #156]	; (800612c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 800608e:	4618      	mov	r0, r3
 8006090:	f006 fe31 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006094:	f107 0314 	add.w	r3, r7, #20
 8006098:	4619      	mov	r1, r3
 800609a:	4620      	mov	r0, r4
 800609c:	47a8      	blx	r5
 800609e:	4604      	mov	r4, r0
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	334c      	adds	r3, #76	; 0x4c
 80060a4:	681d      	ldr	r5, [r3, #0]
 80060a6:	f107 031c 	add.w	r3, r7, #28
 80060aa:	4921      	ldr	r1, [pc, #132]	; (8006130 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80060ac:	4618      	mov	r0, r3
 80060ae:	f006 fe22 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80060b2:	f107 031c 	add.w	r3, r7, #28
 80060b6:	4a1f      	ldr	r2, [pc, #124]	; (8006134 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 80060b8:	4619      	mov	r1, r3
 80060ba:	4620      	mov	r0, r4
 80060bc:	47a8      	blx	r5
 80060be:	f107 031c 	add.w	r3, r7, #28
 80060c2:	4618      	mov	r0, r3
 80060c4:	f007 f9cf 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80060c8:	f107 0314 	add.w	r3, r7, #20
 80060cc:	4618      	mov	r0, r3
 80060ce:	f007 f9ca 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80060d2:	f107 030c 	add.w	r3, r7, #12
 80060d6:	4618      	mov	r0, r3
 80060d8:	f007 f9c5 	bl	800d466 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80060dc:	f7fd fcf6 	bl	8003acc <Disconnect_Wifi>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 80060e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	d100      	bne.n	80060f0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 80060ee:	e7f5      	b.n	80060dc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 80060f0:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80060f2:	f00e f9e3 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80060f6:	4604      	mov	r4, r0
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	3338      	adds	r3, #56	; 0x38
 80060fc:	681d      	ldr	r5, [r3, #0]
 80060fe:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8006102:	f00e f9eb 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006106:	4603      	mov	r3, r0
 8006108:	9302      	str	r3, [sp, #8]
 800610a:	f240 139b 	movw	r3, #411	; 0x19b
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	4b09      	ldr	r3, [pc, #36]	; (8006138 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	4b09      	ldr	r3, [pc, #36]	; (800613c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8006116:	4632      	mov	r2, r6
 8006118:	2102      	movs	r1, #2
 800611a:	4620      	mov	r0, r4
 800611c:	47a8      	blx	r5
}
 800611e:	bf00      	nop
 8006120:	372c      	adds	r7, #44	; 0x2c
 8006122:	46bd      	mov	sp, r7
 8006124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006126:	bf00      	nop
 8006128:	080239c0 	.word	0x080239c0
 800612c:	080239c4 	.word	0x080239c4
 8006130:	080239d8 	.word	0x080239d8
 8006134:	0802362c 	.word	0x0802362c
 8006138:	0802369c 	.word	0x0802369c
 800613c:	08023a9c 	.word	0x08023a9c

08006140 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe ffba 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006150:	4a03      	ldr	r2, [pc, #12]	; (8006160 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	08027178 	.word	0x08027178

08006164 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8006170:	4906      	ldr	r1, [pc, #24]	; (800618c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 8006172:	2004      	movs	r0, #4
 8006174:	f004 f9fc 	bl	800a570 <_ZnwjPKci>
 8006178:	4604      	mov	r4, r0
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff ffe0 	bl	8006140 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 8006180:	4623      	mov	r3, r4
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	bd90      	pop	{r4, r7, pc}
 800618a:	bf00      	nop
 800618c:	0802369c 	.word	0x0802369c

08006190 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4618      	mov	r0, r3
 800619c:	f00c fdd6 	bl	8012d4c <_ZN10UtestShellC1Ev>
 80061a0:	4a03      	ldr	r2, [pc, #12]	; (80061b0 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	080270cc 	.word	0x080270cc

080061b4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 80061b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061b6:	b093      	sub	sp, #76	; 0x4c
 80061b8:	af04      	add	r7, sp, #16
 80061ba:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 80061bc:	f107 0308 	add.w	r3, r7, #8
 80061c0:	494a      	ldr	r1, [pc, #296]	; (80062ec <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 80061c2:	4618      	mov	r0, r3
 80061c4:	f006 fd97 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80061c8:	f107 0308 	add.w	r3, r7, #8
 80061cc:	2100      	movs	r1, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	f004 fe6a 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80061d4:	4604      	mov	r4, r0
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	330c      	adds	r3, #12
 80061da:	681d      	ldr	r5, [r3, #0]
 80061dc:	f107 0310 	add.w	r3, r7, #16
 80061e0:	4943      	ldr	r1, [pc, #268]	; (80062f0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 80061e2:	4618      	mov	r0, r3
 80061e4:	f006 fd87 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80061e8:	f107 0310 	add.w	r3, r7, #16
 80061ec:	4619      	mov	r1, r3
 80061ee:	4620      	mov	r0, r4
 80061f0:	47a8      	blx	r5
 80061f2:	4604      	mov	r4, r0
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	334c      	adds	r3, #76	; 0x4c
 80061f8:	681d      	ldr	r5, [r3, #0]
 80061fa:	f107 0318 	add.w	r3, r7, #24
 80061fe:	493d      	ldr	r1, [pc, #244]	; (80062f4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 8006200:	4618      	mov	r0, r3
 8006202:	f006 fd78 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006206:	f107 0318 	add.w	r3, r7, #24
 800620a:	4a3b      	ldr	r2, [pc, #236]	; (80062f8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 800620c:	4619      	mov	r1, r3
 800620e:	4620      	mov	r0, r4
 8006210:	47a8      	blx	r5
 8006212:	f107 0318 	add.w	r3, r7, #24
 8006216:	4618      	mov	r0, r3
 8006218:	f007 f925 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800621c:	f107 0310 	add.w	r3, r7, #16
 8006220:	4618      	mov	r0, r3
 8006222:	f007 f920 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006226:	f107 0308 	add.w	r3, r7, #8
 800622a:	4618      	mov	r0, r3
 800622c:	f007 f91b 	bl	800d466 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8006230:	f7fd fc4c 	bl	8003acc <Disconnect_Wifi>
 8006234:	4603      	mov	r3, r0
 8006236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 800623a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800623e:	2b05      	cmp	r3, #5
 8006240:	d139      	bne.n	80062b6 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006242:	2300      	movs	r3, #0
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
 8006246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006248:	2b01      	cmp	r3, #1
 800624a:	dcf1      	bgt.n	8006230 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 800624c:	f107 0320 	add.w	r3, r7, #32
 8006250:	4926      	ldr	r1, [pc, #152]	; (80062ec <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 8006252:	4618      	mov	r0, r3
 8006254:	f006 fd4f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006258:	f107 0320 	add.w	r3, r7, #32
 800625c:	2100      	movs	r1, #0
 800625e:	4618      	mov	r0, r3
 8006260:	f004 fe22 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006264:	4604      	mov	r4, r0
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	681d      	ldr	r5, [r3, #0]
 800626c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006270:	4922      	ldr	r1, [pc, #136]	; (80062fc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 8006272:	4618      	mov	r0, r3
 8006274:	f006 fd3f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800627c:	4619      	mov	r1, r3
 800627e:	4620      	mov	r0, r4
 8006280:	47a8      	blx	r5
 8006282:	4603      	mov	r3, r0
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	3264      	adds	r2, #100	; 0x64
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	481d      	ldr	r0, [pc, #116]	; (8006300 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 800628c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800628e:	4401      	add	r1, r0
 8006290:	7809      	ldrb	r1, [r1, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	4790      	blx	r2
 8006296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800629a:	4618      	mov	r0, r3
 800629c:	f007 f8e3 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80062a0:	f107 0320 	add.w	r3, r7, #32
 80062a4:	4618      	mov	r0, r3
 80062a6:	f007 f8de 	bl	800d466 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80062aa:	f7fd fb67 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b0:	3301      	adds	r3, #1
 80062b2:	637b      	str	r3, [r7, #52]	; 0x34
 80062b4:	e7c7      	b.n	8006246 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 80062b6:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 80062b8:	f00e f900 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80062bc:	4604      	mov	r4, r0
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	3338      	adds	r3, #56	; 0x38
 80062c2:	681d      	ldr	r5, [r3, #0]
 80062c4:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80062c8:	f00e f908 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80062cc:	4603      	mov	r3, r0
 80062ce:	9302      	str	r3, [sp, #8]
 80062d0:	f240 13b3 	movw	r3, #435	; 0x1b3
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 80062dc:	4632      	mov	r2, r6
 80062de:	2103      	movs	r1, #3
 80062e0:	4620      	mov	r0, r4
 80062e2:	47a8      	blx	r5
}
 80062e4:	bf00      	nop
 80062e6:	373c      	adds	r7, #60	; 0x3c
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ec:	080239c0 	.word	0x080239c0
 80062f0:	080239c4 	.word	0x080239c4
 80062f4:	080239d8 	.word	0x080239d8
 80062f8:	0802362c 	.word	0x0802362c
 80062fc:	080239e0 	.word	0x080239e0
 8006300:	08023a1c 	.word	0x08023a1c
 8006304:	0802369c 	.word	0x0802369c
 8006308:	08023c24 	.word	0x08023c24

0800630c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe fed4 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800631c:	4a03      	ldr	r2, [pc, #12]	; (800632c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	080270ac 	.word	0x080270ac

08006330 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 8006330:	b590      	push	{r4, r7, lr}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800633c:	4906      	ldr	r1, [pc, #24]	; (8006358 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 800633e:	2004      	movs	r0, #4
 8006340:	f004 f916 	bl	800a570 <_ZnwjPKci>
 8006344:	4604      	mov	r4, r0
 8006346:	4620      	mov	r0, r4
 8006348:	f7ff ffe0 	bl	800630c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 800634c:	4623      	mov	r3, r4
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	bd90      	pop	{r4, r7, pc}
 8006356:	bf00      	nop
 8006358:	0802369c 	.word	0x0802369c

0800635c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4618      	mov	r0, r3
 8006368:	f00c fcf0 	bl	8012d4c <_ZN10UtestShellC1Ev>
 800636c:	4a03      	ldr	r2, [pc, #12]	; (800637c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	08027000 	.word	0x08027000

08006380 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 8006380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006382:	b09b      	sub	sp, #108	; 0x6c
 8006384:	af04      	add	r7, sp, #16
 8006386:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 8006388:	4a6d      	ldr	r2, [pc, #436]	; (8006540 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 800638a:	f107 0314 	add.w	r3, r7, #20
 800638e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006390:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char *fake_command_buffer[3] =
 8006394:	4a6b      	ldr	r2, [pc, #428]	; (8006544 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 8006396:	f107 0308 	add.w	r3, r7, #8
 800639a:	ca07      	ldmia	r2, {r0, r1, r2}
 800639c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CWMODE=1\r\n",
		(char*)"AT+CWQAP\r\n",
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 80063a0:	2300      	movs	r3, #0
 80063a2:	657b      	str	r3, [r7, #84]	; 0x54
 80063a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	dc43      	bgt.n	8006432 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80063aa:	f107 0320 	add.w	r3, r7, #32
 80063ae:	4966      	ldr	r1, [pc, #408]	; (8006548 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 80063b0:	4618      	mov	r0, r3
 80063b2:	f006 fca0 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80063b6:	f107 0320 	add.w	r3, r7, #32
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f004 fd73 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80063c2:	4604      	mov	r4, r0
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	330c      	adds	r3, #12
 80063c8:	681d      	ldr	r5, [r3, #0]
 80063ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063ce:	495f      	ldr	r1, [pc, #380]	; (800654c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 80063d0:	4618      	mov	r0, r3
 80063d2:	f006 fc90 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80063d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063da:	4619      	mov	r1, r3
 80063dc:	4620      	mov	r0, r4
 80063de:	47a8      	blx	r5
 80063e0:	4604      	mov	r4, r0
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	334c      	adds	r3, #76	; 0x4c
 80063e6:	681d      	ldr	r5, [r3, #0]
 80063e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063ec:	4958      	ldr	r1, [pc, #352]	; (8006550 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 80063ee:	4618      	mov	r0, r3
 80063f0:	f006 fc81 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80063f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80063fc:	4413      	add	r3, r2
 80063fe:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8006402:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006406:	4619      	mov	r1, r3
 8006408:	4620      	mov	r0, r4
 800640a:	47a8      	blx	r5
 800640c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006410:	4618      	mov	r0, r3
 8006412:	f007 f828 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800641a:	4618      	mov	r0, r3
 800641c:	f007 f823 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006420:	f107 0320 	add.w	r3, r7, #32
 8006424:	4618      	mov	r0, r3
 8006426:	f007 f81e 	bl	800d466 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 800642a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800642c:	3301      	adds	r3, #1
 800642e:	657b      	str	r3, [r7, #84]	; 0x54
 8006430:	e7b8      	b.n	80063a4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 8006432:	2300      	movs	r3, #0
 8006434:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 8006436:	f107 0114 	add.w	r1, r7, #20
 800643a:	f107 0308 	add.w	r3, r7, #8
 800643e:	2203      	movs	r2, #3
 8006440:	4618      	mov	r0, r3
 8006442:	f7fd fb5f 	bl	8003b04 <Command_Process>
 8006446:	4603      	mov	r3, r0
 8006448:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 800644c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006450:	2b04      	cmp	r3, #4
 8006452:	d05b      	beq.n	800650c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
 8006454:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006458:	2b03      	cmp	r3, #3
 800645a:	d057      	beq.n	800650c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
 800645c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006460:	2b02      	cmp	r3, #2
 8006462:	d053      	beq.n	800650c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
		{
			break;
		}

		if(i<3)
 8006464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006466:	2b02      	cmp	r3, #2
 8006468:	dce5      	bgt.n	8006436 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800646a:	2300      	movs	r3, #0
 800646c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800646e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006476:	4413      	add	r3, r2
 8006478:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800647c:	4618      	mov	r0, r3
 800647e:	f7f9 fedd 	bl	800023c <strlen>
 8006482:	4603      	mov	r3, r0
 8006484:	461a      	mov	r2, r3
 8006486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006488:	4293      	cmp	r3, r2
 800648a:	da3b      	bge.n	8006504 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x184>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800648c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006490:	492d      	ldr	r1, [pc, #180]	; (8006548 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 8006492:	4618      	mov	r0, r3
 8006494:	f006 fc2f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006498:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f004 fd02 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80064a4:	4604      	mov	r4, r0
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	330c      	adds	r3, #12
 80064aa:	681d      	ldr	r5, [r3, #0]
 80064ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064b0:	4928      	ldr	r1, [pc, #160]	; (8006554 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d4>)
 80064b2:	4618      	mov	r0, r3
 80064b4:	f006 fc1f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80064b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064bc:	4619      	mov	r1, r3
 80064be:	4620      	mov	r0, r4
 80064c0:	47a8      	blx	r5
 80064c2:	4602      	mov	r2, r0
 80064c4:	6813      	ldr	r3, [r2, #0]
 80064c6:	3364      	adds	r3, #100	; 0x64
 80064c8:	681c      	ldr	r4, [r3, #0]
 80064ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80064d2:	440b      	add	r3, r1
 80064d4:	f853 1c44 	ldr.w	r1, [r3, #-68]
 80064d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064da:	440b      	add	r3, r1
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	47a0      	blx	r4
 80064e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064e8:	4618      	mov	r0, r3
 80064ea:	f006 ffbc 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80064ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064f2:	4618      	mov	r0, r3
 80064f4:	f006 ffb7 	bl	800d466 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80064f8:	f7fd fa40 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80064fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fe:	3301      	adds	r3, #1
 8006500:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006502:	e7b4      	b.n	800646e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xee>
			}
			i++;
 8006504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006506:	3301      	adds	r3, #1
 8006508:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 800650a:	e794      	b.n	8006436 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
	LONGS_EQUAL(STATUS_OK,response);
 800650c:	f00d ffd6 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8006510:	4604      	mov	r4, r0
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	3338      	adds	r3, #56	; 0x38
 8006516:	681d      	ldr	r5, [r3, #0]
 8006518:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 800651c:	f00d ffde 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006520:	4603      	mov	r3, r0
 8006522:	9302      	str	r3, [sp, #8]
 8006524:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d8>)
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	4b0b      	ldr	r3, [pc, #44]	; (800655c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1dc>)
 8006530:	4632      	mov	r2, r6
 8006532:	2103      	movs	r1, #3
 8006534:	4620      	mov	r0, r4
 8006536:	47a8      	blx	r5

}
 8006538:	bf00      	nop
 800653a:	375c      	adds	r7, #92	; 0x5c
 800653c:	46bd      	mov	sp, r7
 800653e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006540:	08023ce4 	.word	0x08023ce4
 8006544:	08023cf0 	.word	0x08023cf0
 8006548:	080239c0 	.word	0x080239c0
 800654c:	080239c4 	.word	0x080239c4
 8006550:	080239d8 	.word	0x080239d8
 8006554:	080239e0 	.word	0x080239e0
 8006558:	0802369c 	.word	0x0802369c
 800655c:	08023c24 	.word	0x08023c24

08006560 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe fdaa 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006570:	4a03      	ldr	r2, [pc, #12]	; (8006580 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	08026fe0 	.word	0x08026fe0

08006584 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8006590:	4906      	ldr	r1, [pc, #24]	; (80065ac <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 8006592:	2004      	movs	r0, #4
 8006594:	f003 ffec 	bl	800a570 <_ZnwjPKci>
 8006598:	4604      	mov	r4, r0
 800659a:	4620      	mov	r0, r4
 800659c:	f7ff ffe0 	bl	8006560 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 80065a0:	4623      	mov	r3, r4
 80065a2:	4618      	mov	r0, r3
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd90      	pop	{r4, r7, pc}
 80065aa:	bf00      	nop
 80065ac:	0802369c 	.word	0x0802369c

080065b0 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f00c fbc6 	bl	8012d4c <_ZN10UtestShellC1Ev>
 80065c0:	4a03      	ldr	r2, [pc, #12]	; (80065d0 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	08026f34 	.word	0x08026f34

080065d4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 80065d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d6:	b0bf      	sub	sp, #252	; 0xfc
 80065d8:	af04      	add	r7, sp, #16
 80065da:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 80065dc:	4a74      	ldr	r2, [pc, #464]	; (80067b0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 80065de:	f107 0318 	add.w	r3, r7, #24
 80065e2:	4611      	mov	r1, r2
 80065e4:	2296      	movs	r2, #150	; 0x96
 80065e6:	4618      	mov	r0, r3
 80065e8:	f01a f85c 	bl	80206a4 <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	char *fake_command_buffer[3] =
 80065ec:	4a71      	ldr	r2, [pc, #452]	; (80067b4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 80065ee:	f107 030c 	add.w	r3, r7, #12
 80065f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80065f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<3;i++)
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006602:	2b02      	cmp	r3, #2
 8006604:	dc46      	bgt.n	8006694 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8006606:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800660a:	496b      	ldr	r1, [pc, #428]	; (80067b8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 800660c:	4618      	mov	r0, r3
 800660e:	f006 fb72 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006612:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006616:	2100      	movs	r1, #0
 8006618:	4618      	mov	r0, r3
 800661a:	f004 fc45 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800661e:	4604      	mov	r4, r0
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	330c      	adds	r3, #12
 8006624:	681d      	ldr	r5, [r3, #0]
 8006626:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800662a:	4964      	ldr	r1, [pc, #400]	; (80067bc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 800662c:	4618      	mov	r0, r3
 800662e:	f006 fb62 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006632:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006636:	4619      	mov	r1, r3
 8006638:	4620      	mov	r0, r4
 800663a:	47a8      	blx	r5
 800663c:	4604      	mov	r4, r0
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	334c      	adds	r3, #76	; 0x4c
 8006642:	681d      	ldr	r5, [r3, #0]
 8006644:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006648:	495d      	ldr	r1, [pc, #372]	; (80067c0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 800664a:	4618      	mov	r0, r3
 800664c:	f006 fb53 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800665a:	4413      	add	r3, r2
 800665c:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8006660:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006664:	4619      	mov	r1, r3
 8006666:	4620      	mov	r0, r4
 8006668:	47a8      	blx	r5
 800666a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800666e:	4618      	mov	r0, r3
 8006670:	f006 fef9 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006674:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006678:	4618      	mov	r0, r3
 800667a:	f006 fef4 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800667e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006682:	4618      	mov	r0, r3
 8006684:	f006 feef 	bl	800d466 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668c:	3301      	adds	r3, #1
 800668e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006692:	e7b4      	b.n	80065fe <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2a>
	}

	Status response;
	int i = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 800669a:	494a      	ldr	r1, [pc, #296]	; (80067c4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 800669c:	484a      	ldr	r0, [pc, #296]	; (80067c8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 800669e:	f7fd fab7 	bl	8003c10 <Connect_TCP_Server>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 80066a8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d065      	beq.n	800677c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
 80066b0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d061      	beq.n	800677c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
 80066b8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d05d      	beq.n	800677c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
		{
			break;
		}

		if(i<3)
 80066c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	dce8      	bgt.n	800669a <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80066c8:	2300      	movs	r3, #0
 80066ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ce:	f107 0218 	add.w	r2, r7, #24
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d6:	2132      	movs	r1, #50	; 0x32
 80066d8:	fb01 f303 	mul.w	r3, r1, r3
 80066dc:	4413      	add	r3, r2
 80066de:	4618      	mov	r0, r3
 80066e0:	f7f9 fdac 	bl	800023c <strlen>
 80066e4:	4603      	mov	r3, r0
 80066e6:	461a      	mov	r2, r3
 80066e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ec:	4293      	cmp	r3, r2
 80066ee:	da3f      	bge.n	8006770 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19c>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80066f0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80066f4:	4930      	ldr	r1, [pc, #192]	; (80067b8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 80066f6:	4618      	mov	r0, r3
 80066f8:	f006 fafd 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80066fc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006700:	2100      	movs	r1, #0
 8006702:	4618      	mov	r0, r3
 8006704:	f004 fbd0 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006708:	4604      	mov	r4, r0
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	681d      	ldr	r5, [r3, #0]
 8006710:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006714:	492d      	ldr	r1, [pc, #180]	; (80067cc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f8>)
 8006716:	4618      	mov	r0, r3
 8006718:	f006 faed 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800671c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006720:	4619      	mov	r1, r3
 8006722:	4620      	mov	r0, r4
 8006724:	47a8      	blx	r5
 8006726:	4603      	mov	r3, r0
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	3264      	adds	r2, #100	; 0x64
 800672c:	6812      	ldr	r2, [r2, #0]
 800672e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006732:	2032      	movs	r0, #50	; 0x32
 8006734:	fb00 f101 	mul.w	r1, r0, r1
 8006738:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 800673c:	4408      	add	r0, r1
 800673e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006742:	4401      	add	r1, r0
 8006744:	39d0      	subs	r1, #208	; 0xd0
 8006746:	7809      	ldrb	r1, [r1, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	4790      	blx	r2
 800674c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006750:	4618      	mov	r0, r3
 8006752:	f006 fe88 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006756:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800675a:	4618      	mov	r0, r3
 800675c:	f006 fe83 	bl	800d466 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006760:	f7fd f90c 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006768:	3301      	adds	r3, #1
 800676a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800676e:	e7ae      	b.n	80066ce <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xfa>
			}
			i++;
 8006770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006774:	3301      	adds	r3, #1
 8006776:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 800677a:	e78e      	b.n	800669a <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(STATUS_OK,response);
 800677c:	f00d fe9e 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8006780:	4604      	mov	r4, r0
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	3338      	adds	r3, #56	; 0x38
 8006786:	681d      	ldr	r5, [r3, #0]
 8006788:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 800678c:	f00d fea6 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006790:	4603      	mov	r3, r0
 8006792:	9302      	str	r3, [sp, #8]
 8006794:	f240 230b 	movw	r3, #523	; 0x20b
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1fc>)
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x200>)
 80067a0:	4632      	mov	r2, r6
 80067a2:	2103      	movs	r1, #3
 80067a4:	4620      	mov	r0, r4
 80067a6:	47a8      	blx	r5

}
 80067a8:	bf00      	nop
 80067aa:	37ec      	adds	r7, #236	; 0xec
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b0:	08023c4c 	.word	0x08023c4c
 80067b4:	08023d0c 	.word	0x08023d0c
 80067b8:	080239c0 	.word	0x080239c0
 80067bc:	080239c4 	.word	0x080239c4
 80067c0:	080239d8 	.word	0x080239d8
 80067c4:	08023cfc 	.word	0x08023cfc
 80067c8:	08023d00 	.word	0x08023d00
 80067cc:	080239e0 	.word	0x080239e0
 80067d0:	0802369c 	.word	0x0802369c
 80067d4:	08023c24 	.word	0x08023c24

080067d8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fc6e 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80067e8:	4a03      	ldr	r2, [pc, #12]	; (80067f8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	08026f14 	.word	0x08026f14

080067fc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 80067fc:	b590      	push	{r4, r7, lr}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	f240 220f 	movw	r2, #527	; 0x20f
 8006808:	4906      	ldr	r1, [pc, #24]	; (8006824 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 800680a:	2004      	movs	r0, #4
 800680c:	f003 feb0 	bl	800a570 <_ZnwjPKci>
 8006810:	4604      	mov	r4, r0
 8006812:	4620      	mov	r0, r4
 8006814:	f7ff ffe0 	bl	80067d8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 8006818:	4623      	mov	r3, r4
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	bd90      	pop	{r4, r7, pc}
 8006822:	bf00      	nop
 8006824:	0802369c 	.word	0x0802369c

08006828 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4618      	mov	r0, r3
 8006834:	f00c fa8a 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8006838:	4a03      	ldr	r2, [pc, #12]	; (8006848 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	08026e68 	.word	0x08026e68

0800684c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 800684c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800684e:	b091      	sub	sp, #68	; 0x44
 8006850:	af04      	add	r7, sp, #16
 8006852:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[3] =
 8006854:	4a36      	ldr	r2, [pc, #216]	; (8006930 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 8006856:	f107 0308 	add.w	r3, r7, #8
 800685a:	ca07      	ldmia	r2, {r0, r1, r2}
 800685c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 8006860:	f107 0314 	add.w	r3, r7, #20
 8006864:	4933      	ldr	r1, [pc, #204]	; (8006934 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 8006866:	4618      	mov	r0, r3
 8006868:	f006 fa45 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800686c:	f107 0314 	add.w	r3, r7, #20
 8006870:	2100      	movs	r1, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f004 fb18 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006878:	4604      	mov	r4, r0
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	681d      	ldr	r5, [r3, #0]
 8006880:	f107 031c 	add.w	r3, r7, #28
 8006884:	492c      	ldr	r1, [pc, #176]	; (8006938 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 8006886:	4618      	mov	r0, r3
 8006888:	f006 fa35 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800688c:	f107 031c 	add.w	r3, r7, #28
 8006890:	4619      	mov	r1, r3
 8006892:	4620      	mov	r0, r4
 8006894:	47a8      	blx	r5
 8006896:	4604      	mov	r4, r0
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	334c      	adds	r3, #76	; 0x4c
 800689c:	681d      	ldr	r5, [r3, #0]
 800689e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068a2:	4926      	ldr	r1, [pc, #152]	; (800693c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 80068a4:	4618      	mov	r0, r3
 80068a6:	f006 fa26 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068b0:	4619      	mov	r1, r3
 80068b2:	4620      	mov	r0, r4
 80068b4:	47a8      	blx	r5
 80068b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ba:	4618      	mov	r0, r3
 80068bc:	f006 fdd3 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80068c0:	f107 031c 	add.w	r3, r7, #28
 80068c4:	4618      	mov	r0, r3
 80068c6:	f006 fdce 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80068ca:	f107 0314 	add.w	r3, r7, #20
 80068ce:	4618      	mov	r0, r3
 80068d0:	f006 fdc9 	bl	800d466 <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80068d4:	491a      	ldr	r1, [pc, #104]	; (8006940 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 80068d6:	481b      	ldr	r0, [pc, #108]	; (8006944 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf8>)
 80068d8:	f7fd f99a 	bl	8003c10 <Connect_TCP_Server>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 80068e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d008      	beq.n	80068fc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
 80068ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d004      	beq.n	80068fc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
 80068f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d000      	beq.n	80068fc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80068fa:	e7eb      	b.n	80068d4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x88>
		{
			break;
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80068fc:	f00d fdde 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8006900:	4604      	mov	r4, r0
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	3338      	adds	r3, #56	; 0x38
 8006906:	681d      	ldr	r5, [r3, #0]
 8006908:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 800690c:	f00d fde6 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006910:	4603      	mov	r3, r0
 8006912:	9302      	str	r3, [sp, #8]
 8006914:	f240 2326 	movw	r3, #550	; 0x226
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xfc>)
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	4b0b      	ldr	r3, [pc, #44]	; (800694c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x100>)
 8006920:	4632      	mov	r2, r6
 8006922:	2102      	movs	r1, #2
 8006924:	4620      	mov	r0, r4
 8006926:	47a8      	blx	r5

}
 8006928:	bf00      	nop
 800692a:	3734      	adds	r7, #52	; 0x34
 800692c:	46bd      	mov	sp, r7
 800692e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006930:	08023d0c 	.word	0x08023d0c
 8006934:	080239c0 	.word	0x080239c0
 8006938:	080239c4 	.word	0x080239c4
 800693c:	080239d8 	.word	0x080239d8
 8006940:	08023cfc 	.word	0x08023cfc
 8006944:	08023d00 	.word	0x08023d00
 8006948:	0802369c 	.word	0x0802369c
 800694c:	08023a9c 	.word	0x08023a9c

08006950 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe fbb2 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006960:	4a03      	ldr	r2, [pc, #12]	; (8006970 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	08026e48 	.word	0x08026e48

08006974 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 8006974:	b590      	push	{r4, r7, lr}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	f240 222a 	movw	r2, #554	; 0x22a
 8006980:	4906      	ldr	r1, [pc, #24]	; (800699c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 8006982:	2004      	movs	r0, #4
 8006984:	f003 fdf4 	bl	800a570 <_ZnwjPKci>
 8006988:	4604      	mov	r4, r0
 800698a:	4620      	mov	r0, r4
 800698c:	f7ff ffe0 	bl	8006950 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 8006990:	4623      	mov	r3, r4
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	bd90      	pop	{r4, r7, pc}
 800699a:	bf00      	nop
 800699c:	0802369c 	.word	0x0802369c

080069a0 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f00c f9ce 	bl	8012d4c <_ZN10UtestShellC1Ev>
 80069b0:	4a03      	ldr	r2, [pc, #12]	; (80069c0 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	08026d9c 	.word	0x08026d9c

080069c4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 80069c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c6:	b0bf      	sub	sp, #252	; 0xfc
 80069c8:	af04      	add	r7, sp, #16
 80069ca:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 80069cc:	4a74      	ldr	r2, [pc, #464]	; (8006ba0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 80069ce:	f107 0318 	add.w	r3, r7, #24
 80069d2:	4611      	mov	r1, r2
 80069d4:	2296      	movs	r2, #150	; 0x96
 80069d6:	4618      	mov	r0, r3
 80069d8:	f019 fe64 	bl	80206a4 <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "ERROR\r\n"
	};

	char *fake_command_buffer[3] =
 80069dc:	4a71      	ldr	r2, [pc, #452]	; (8006ba4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 80069de:	f107 030c 	add.w	r3, r7, #12
 80069e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80069e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<3;i++)
 80069e8:	2300      	movs	r3, #0
 80069ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	dc46      	bgt.n	8006a84 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80069f6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80069fa:	496b      	ldr	r1, [pc, #428]	; (8006ba8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 80069fc:	4618      	mov	r0, r3
 80069fe:	f006 f97a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006a02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f004 fa4d 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006a0e:	4604      	mov	r4, r0
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	330c      	adds	r3, #12
 8006a14:	681d      	ldr	r5, [r3, #0]
 8006a16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006a1a:	4964      	ldr	r1, [pc, #400]	; (8006bac <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f006 f96a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006a22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006a26:	4619      	mov	r1, r3
 8006a28:	4620      	mov	r0, r4
 8006a2a:	47a8      	blx	r5
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	334c      	adds	r3, #76	; 0x4c
 8006a32:	681d      	ldr	r5, [r3, #0]
 8006a34:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006a38:	495d      	ldr	r1, [pc, #372]	; (8006bb0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f006 f95b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8006a50:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006a54:	4619      	mov	r1, r3
 8006a56:	4620      	mov	r0, r4
 8006a58:	47a8      	blx	r5
 8006a5a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f006 fd01 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006a64:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f006 fcfc 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006a6e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f006 fcf7 	bl	800d466 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a82:	e7b4      	b.n	80069ee <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2a>
	}

	Status response;
	int i = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006a8a:	494a      	ldr	r1, [pc, #296]	; (8006bb4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 8006a8c:	484a      	ldr	r0, [pc, #296]	; (8006bb8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 8006a8e:	f7fd f8bf 	bl	8003c10 <Connect_TCP_Server>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006a98:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d065      	beq.n	8006b6c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
 8006aa0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d061      	beq.n	8006b6c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
 8006aa8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d05d      	beq.n	8006b6c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
		{
			break;
		}

		if(i<3)
 8006ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	dce8      	bgt.n	8006a8a <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006abe:	f107 0218 	add.w	r2, r7, #24
 8006ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac6:	2132      	movs	r1, #50	; 0x32
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7f9 fbb4 	bl	800023c <strlen>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006adc:	4293      	cmp	r3, r2
 8006ade:	da3f      	bge.n	8006b60 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19c>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006ae0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006ae4:	4930      	ldr	r1, [pc, #192]	; (8006ba8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f006 f905 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006aec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f004 f9d8 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006af8:	4604      	mov	r4, r0
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	330c      	adds	r3, #12
 8006afe:	681d      	ldr	r5, [r3, #0]
 8006b00:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006b04:	492d      	ldr	r1, [pc, #180]	; (8006bbc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f8>)
 8006b06:	4618      	mov	r0, r3
 8006b08:	f006 f8f5 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006b0c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006b10:	4619      	mov	r1, r3
 8006b12:	4620      	mov	r0, r4
 8006b14:	47a8      	blx	r5
 8006b16:	4603      	mov	r3, r0
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	3264      	adds	r2, #100	; 0x64
 8006b1c:	6812      	ldr	r2, [r2, #0]
 8006b1e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006b22:	2032      	movs	r0, #50	; 0x32
 8006b24:	fb00 f101 	mul.w	r1, r0, r1
 8006b28:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8006b2c:	4408      	add	r0, r1
 8006b2e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006b32:	4401      	add	r1, r0
 8006b34:	39d0      	subs	r1, #208	; 0xd0
 8006b36:	7809      	ldrb	r1, [r1, #0]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	4790      	blx	r2
 8006b3c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006b40:	4618      	mov	r0, r3
 8006b42:	f006 fc90 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006b46:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f006 fc8b 	bl	800d466 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006b50:	f7fc ff14 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b58:	3301      	adds	r3, #1
 8006b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b5e:	e7ae      	b.n	8006abe <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xfa>
			}
			i++;
 8006b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b64:	3301      	adds	r3, #1
 8006b66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 8006b6a:	e78e      	b.n	8006a8a <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(STATUS_ERROR,response);
 8006b6c:	f00d fca6 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8006b70:	4604      	mov	r4, r0
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	3338      	adds	r3, #56	; 0x38
 8006b76:	681d      	ldr	r5, [r3, #0]
 8006b78:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 8006b7c:	f00d fcae 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006b80:	4603      	mov	r3, r0
 8006b82:	9302      	str	r3, [sp, #8]
 8006b84:	f240 2353 	movw	r3, #595	; 0x253
 8006b88:	9301      	str	r3, [sp, #4]
 8006b8a:	4b0d      	ldr	r3, [pc, #52]	; (8006bc0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1fc>)
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x200>)
 8006b90:	4632      	mov	r2, r6
 8006b92:	2104      	movs	r1, #4
 8006b94:	4620      	mov	r0, r4
 8006b96:	47a8      	blx	r5

}
 8006b98:	bf00      	nop
 8006b9a:	37ec      	adds	r7, #236	; 0xec
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ba0:	08023af4 	.word	0x08023af4
 8006ba4:	08023d0c 	.word	0x08023d0c
 8006ba8:	080239c0 	.word	0x080239c0
 8006bac:	080239c4 	.word	0x080239c4
 8006bb0:	080239d8 	.word	0x080239d8
 8006bb4:	08023cfc 	.word	0x08023cfc
 8006bb8:	08023d00 	.word	0x08023d00
 8006bbc:	080239e0 	.word	0x080239e0
 8006bc0:	0802369c 	.word	0x0802369c
 8006bc4:	08023ac8 	.word	0x08023ac8

08006bc8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fa76 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006bd8:	4a03      	ldr	r2, [pc, #12]	; (8006be8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	08026d7c 	.word	0x08026d7c

08006bec <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006bec:	b590      	push	{r4, r7, lr}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	f240 2257 	movw	r2, #599	; 0x257
 8006bf8:	4906      	ldr	r1, [pc, #24]	; (8006c14 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006bfa:	2004      	movs	r0, #4
 8006bfc:	f003 fcb8 	bl	800a570 <_ZnwjPKci>
 8006c00:	4604      	mov	r4, r0
 8006c02:	4620      	mov	r0, r4
 8006c04:	f7ff ffe0 	bl	8006bc8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006c08:	4623      	mov	r3, r4
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd90      	pop	{r4, r7, pc}
 8006c12:	bf00      	nop
 8006c14:	0802369c 	.word	0x0802369c

08006c18 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f00c f892 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8006c28:	4a03      	ldr	r2, [pc, #12]	; (8006c38 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	08026cd0 	.word	0x08026cd0

08006c3c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8006c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c3e:	b093      	sub	sp, #76	; 0x4c
 8006c40:	af04      	add	r7, sp, #16
 8006c42:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 8006c44:	f107 0308 	add.w	r3, r7, #8
 8006c48:	494a      	ldr	r1, [pc, #296]	; (8006d74 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f006 f853 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006c50:	f107 0308 	add.w	r3, r7, #8
 8006c54:	2100      	movs	r1, #0
 8006c56:	4618      	mov	r0, r3
 8006c58:	f004 f926 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	681d      	ldr	r5, [r3, #0]
 8006c64:	f107 0310 	add.w	r3, r7, #16
 8006c68:	4943      	ldr	r1, [pc, #268]	; (8006d78 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f006 f843 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006c70:	f107 0310 	add.w	r3, r7, #16
 8006c74:	4619      	mov	r1, r3
 8006c76:	4620      	mov	r0, r4
 8006c78:	47a8      	blx	r5
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	334c      	adds	r3, #76	; 0x4c
 8006c80:	681d      	ldr	r5, [r3, #0]
 8006c82:	f107 0318 	add.w	r3, r7, #24
 8006c86:	493d      	ldr	r1, [pc, #244]	; (8006d7c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f006 f834 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006c8e:	f107 0318 	add.w	r3, r7, #24
 8006c92:	4a3b      	ldr	r2, [pc, #236]	; (8006d80 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 8006c94:	4619      	mov	r1, r3
 8006c96:	4620      	mov	r0, r4
 8006c98:	47a8      	blx	r5
 8006c9a:	f107 0318 	add.w	r3, r7, #24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f006 fbe1 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006ca4:	f107 0310 	add.w	r3, r7, #16
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f006 fbdc 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006cae:	f107 0308 	add.w	r3, r7, #8
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f006 fbd7 	bl	800d466 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006cb8:	f7fc ffe4 	bl	8003c84 <Disconnect_TCP_Server>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	d139      	bne.n	8006d3e <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006cca:	2300      	movs	r3, #0
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	dcf1      	bgt.n	8006cb8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006cd4:	f107 0320 	add.w	r3, r7, #32
 8006cd8:	4926      	ldr	r1, [pc, #152]	; (8006d74 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f006 f80b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006ce0:	f107 0320 	add.w	r3, r7, #32
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f004 f8de 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006cec:	4604      	mov	r4, r0
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	330c      	adds	r3, #12
 8006cf2:	681d      	ldr	r5, [r3, #0]
 8006cf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006cf8:	4922      	ldr	r1, [pc, #136]	; (8006d84 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f005 fffb 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d04:	4619      	mov	r1, r3
 8006d06:	4620      	mov	r0, r4
 8006d08:	47a8      	blx	r5
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	3264      	adds	r2, #100	; 0x64
 8006d10:	6812      	ldr	r2, [r2, #0]
 8006d12:	481d      	ldr	r0, [pc, #116]	; (8006d88 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 8006d14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d16:	4401      	add	r1, r0
 8006d18:	7809      	ldrb	r1, [r1, #0]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	4790      	blx	r2
 8006d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d22:	4618      	mov	r0, r3
 8006d24:	f006 fb9f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006d28:	f107 0320 	add.w	r3, r7, #32
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f006 fb9a 	bl	800d466 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006d32:	f7fc fe23 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d38:	3301      	adds	r3, #1
 8006d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3c:	e7c7      	b.n	8006cce <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 8006d3e:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006d40:	f00d fbbc 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8006d44:	4604      	mov	r4, r0
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	3338      	adds	r3, #56	; 0x38
 8006d4a:	681d      	ldr	r5, [r3, #0]
 8006d4c:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006d50:	f00d fbc4 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006d54:	4603      	mov	r3, r0
 8006d56:	9302      	str	r3, [sp, #8]
 8006d58:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 8006d64:	4632      	mov	r2, r6
 8006d66:	2103      	movs	r1, #3
 8006d68:	4620      	mov	r0, r4
 8006d6a:	47a8      	blx	r5

}
 8006d6c:	bf00      	nop
 8006d6e:	373c      	adds	r7, #60	; 0x3c
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d74:	080239c0 	.word	0x080239c0
 8006d78:	080239c4 	.word	0x080239c4
 8006d7c:	080239d8 	.word	0x080239d8
 8006d80:	08023654 	.word	0x08023654
 8006d84:	080239e0 	.word	0x080239e0
 8006d88:	08023a1c 	.word	0x08023a1c
 8006d8c:	0802369c 	.word	0x0802369c
 8006d90:	08023c24 	.word	0x08023c24

08006d94 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe f990 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006da4:	4a03      	ldr	r2, [pc, #12]	; (8006db4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	08026cb0 	.word	0x08026cb0

08006db8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006db8:	b590      	push	{r4, r7, lr}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	f44f 721c 	mov.w	r2, #624	; 0x270
 8006dc4:	4906      	ldr	r1, [pc, #24]	; (8006de0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006dc6:	2004      	movs	r0, #4
 8006dc8:	f003 fbd2 	bl	800a570 <_ZnwjPKci>
 8006dcc:	4604      	mov	r4, r0
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f7ff ffe0 	bl	8006d94 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8006dd4:	4623      	mov	r3, r4
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd90      	pop	{r4, r7, pc}
 8006dde:	bf00      	nop
 8006de0:	0802369c 	.word	0x0802369c

08006de4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f00b ffac 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8006df4:	4a03      	ldr	r2, [pc, #12]	; (8006e04 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	08026c04 	.word	0x08026c04

08006e08 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0a:	b0b3      	sub	sp, #204	; 0xcc
 8006e0c:	af04      	add	r7, sp, #16
 8006e0e:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 8006e16:	4a83      	ldr	r2, [pc, #524]	; (8007024 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 8006e18:	f107 0308 	add.w	r3, r7, #8
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	2264      	movs	r2, #100	; 0x64
 8006e20:	4618      	mov	r0, r3
 8006e22:	f019 fc3f 	bl	80206a4 <memcpy>
	{ ">\r\n",
	  "SEND OK\r\n",
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n"); // AT+CIPSEMD=11
 8006e26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e2a:	497f      	ldr	r1, [pc, #508]	; (8007028 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f005 ff62 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006e32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e36:	2100      	movs	r1, #0
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f004 f835 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006e3e:	4604      	mov	r4, r0
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	681d      	ldr	r5, [r3, #0]
 8006e46:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e4a:	4978      	ldr	r1, [pc, #480]	; (800702c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f005 ff52 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006e52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e56:	4619      	mov	r1, r3
 8006e58:	4620      	mov	r0, r4
 8006e5a:	47a8      	blx	r5
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	334c      	adds	r3, #76	; 0x4c
 8006e62:	681d      	ldr	r5, [r3, #0]
 8006e64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e68:	4971      	ldr	r1, [pc, #452]	; (8007030 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f005 ff43 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006e70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e74:	4a6f      	ldr	r2, [pc, #444]	; (8007034 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 8006e76:	4619      	mov	r1, r3
 8006e78:	4620      	mov	r0, r4
 8006e7a:	47a8      	blx	r5
 8006e7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e80:	4618      	mov	r0, r3
 8006e82:	f006 faf0 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006e86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f006 faeb 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006e90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e94:	4618      	mov	r0, r3
 8006e96:	f006 fae6 	bl	800d466 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 8006e9a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006e9e:	4962      	ldr	r1, [pc, #392]	; (8007028 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f005 ff28 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006ea6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f003 fffb 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	681d      	ldr	r5, [r3, #0]
 8006eba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006ebe:	495b      	ldr	r1, [pc, #364]	; (800702c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f005 ff18 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006ec6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006eca:	4619      	mov	r1, r3
 8006ecc:	4620      	mov	r0, r4
 8006ece:	47a8      	blx	r5
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	334c      	adds	r3, #76	; 0x4c
 8006ed6:	681d      	ldr	r5, [r3, #0]
 8006ed8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006edc:	4954      	ldr	r1, [pc, #336]	; (8007030 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f005 ff09 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006ee4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006ee8:	4a53      	ldr	r2, [pc, #332]	; (8007038 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x230>)
 8006eea:	4619      	mov	r1, r3
 8006eec:	4620      	mov	r0, r4
 8006eee:	47a8      	blx	r5
 8006ef0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f006 fab6 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006efa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006efe:	4618      	mov	r0, r3
 8006f00:	f006 fab1 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006f04:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f006 faac 	bl	800d466 <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 8006f0e:	484a      	ldr	r0, [pc, #296]	; (8007038 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x230>)
 8006f10:	f7fc fed4 	bl	8003cbc <Send_TCP_Message>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006f1a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d065      	beq.n	8006fee <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
 8006f22:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d061      	beq.n	8006fee <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
 8006f2a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d05d      	beq.n	8006fee <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
		{
			break;
		}

		if(i<2)
 8006f32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	dce9      	bgt.n	8006f0e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f40:	f107 0208 	add.w	r2, r7, #8
 8006f44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f48:	2132      	movs	r1, #50	; 0x32
 8006f4a:	fb01 f303 	mul.w	r3, r1, r3
 8006f4e:	4413      	add	r3, r2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7f9 f973 	bl	800023c <strlen>
 8006f56:	4603      	mov	r3, r0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	da3f      	bge.n	8006fe2 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1da>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006f62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f66:	4930      	ldr	r1, [pc, #192]	; (8007028 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f005 fec4 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006f6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f003 ff97 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	330c      	adds	r3, #12
 8006f80:	681d      	ldr	r5, [r3, #0]
 8006f82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f86:	492d      	ldr	r1, [pc, #180]	; (800703c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x234>)
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f005 feb4 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8006f8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f92:	4619      	mov	r1, r3
 8006f94:	4620      	mov	r0, r4
 8006f96:	47a8      	blx	r5
 8006f98:	4603      	mov	r3, r0
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	3264      	adds	r2, #100	; 0x64
 8006f9e:	6812      	ldr	r2, [r2, #0]
 8006fa0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006fa4:	2032      	movs	r0, #50	; 0x32
 8006fa6:	fb00 f101 	mul.w	r1, r0, r1
 8006faa:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006fae:	4408      	add	r0, r1
 8006fb0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006fb4:	4401      	add	r1, r0
 8006fb6:	39b0      	subs	r1, #176	; 0xb0
 8006fb8:	7809      	ldrb	r1, [r1, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	4790      	blx	r2
 8006fbe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f006 fa4f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8006fc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f006 fa4a 	bl	800d466 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006fd2:	f7fc fcd3 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006fd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fda:	3301      	adds	r3, #1
 8006fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fe0:	e7ae      	b.n	8006f40 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x138>
			}
			i++;
 8006fe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 8006fec:	e78f      	b.n	8006f0e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>

	LONGS_EQUAL(STATUS_OK,response);
 8006fee:	f00d fa65 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	3338      	adds	r3, #56	; 0x38
 8006ff8:	681d      	ldr	r5, [r3, #0]
 8006ffa:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 8006ffe:	f00d fa6d 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007002:	4603      	mov	r3, r0
 8007004:	9302      	str	r3, [sp, #8]
 8007006:	f240 2391 	movw	r3, #657	; 0x291
 800700a:	9301      	str	r3, [sp, #4]
 800700c:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x238>)
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x23c>)
 8007012:	4632      	mov	r2, r6
 8007014:	2103      	movs	r1, #3
 8007016:	4620      	mov	r0, r4
 8007018:	47a8      	blx	r5

}
 800701a:	bf00      	nop
 800701c:	37bc      	adds	r7, #188	; 0xbc
 800701e:	46bd      	mov	sp, r7
 8007020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007022:	bf00      	nop
 8007024:	08023d28 	.word	0x08023d28
 8007028:	080239c0 	.word	0x080239c0
 800702c:	080239c4 	.word	0x080239c4
 8007030:	080239d8 	.word	0x080239d8
 8007034:	08023d18 	.word	0x08023d18
 8007038:	080238d0 	.word	0x080238d0
 800703c:	080239e0 	.word	0x080239e0
 8007040:	0802369c 	.word	0x0802369c
 8007044:	08023c24 	.word	0x08023c24

08007048 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe f836 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007058:	4a03      	ldr	r2, [pc, #12]	; (8007068 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	08026be4 	.word	0x08026be4

0800706c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 800706c:	b590      	push	{r4, r7, lr}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	f240 2295 	movw	r2, #661	; 0x295
 8007078:	4906      	ldr	r1, [pc, #24]	; (8007094 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 800707a:	2004      	movs	r0, #4
 800707c:	f003 fa78 	bl	800a570 <_ZnwjPKci>
 8007080:	4604      	mov	r4, r0
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff ffe0 	bl	8007048 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 8007088:	4623      	mov	r3, r4
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	bd90      	pop	{r4, r7, pc}
 8007092:	bf00      	nop
 8007094:	0802369c 	.word	0x0802369c

08007098 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f00b fe52 	bl	8012d4c <_ZN10UtestShellC1Ev>
 80070a8:	4a03      	ldr	r2, [pc, #12]	; (80070b8 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	08026b38 	.word	0x08026b38

080070bc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 80070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070be:	b0a3      	sub	sp, #140	; 0x8c
 80070c0:	af04      	add	r7, sp, #16
 80070c2:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 80070c4:	4b44      	ldr	r3, [pc, #272]	; (80071d8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x11c>)
 80070c6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80070ca:	461d      	mov	r5, r3
 80070cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	605a      	str	r2, [r3, #4]
 80070de:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 80070e0:	2305      	movs	r3, #5
 80070e2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	char received_message[50];

	for(int i=0;i<(int)strlen(response);i++)
 80070e6:	2300      	movs	r3, #0
 80070e8:	677b      	str	r3, [r7, #116]	; 0x74
 80070ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7f9 f8a4 	bl	800023c <strlen>
 80070f4:	4603      	mov	r3, r0
 80070f6:	461a      	mov	r2, r3
 80070f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070fa:	4293      	cmp	r3, r2
 80070fc:	da35      	bge.n	800716a <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xae>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80070fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007102:	4936      	ldr	r1, [pc, #216]	; (80071dc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x120>)
 8007104:	4618      	mov	r0, r3
 8007106:	f005 fdf6 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800710a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800710e:	2100      	movs	r1, #0
 8007110:	4618      	mov	r0, r3
 8007112:	f003 fec9 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007116:	4604      	mov	r4, r0
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	330c      	adds	r3, #12
 800711c:	681d      	ldr	r5, [r3, #0]
 800711e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007122:	492f      	ldr	r1, [pc, #188]	; (80071e0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x124>)
 8007124:	4618      	mov	r0, r3
 8007126:	f005 fde6 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800712a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800712e:	4619      	mov	r1, r3
 8007130:	4620      	mov	r0, r4
 8007132:	47a8      	blx	r5
 8007134:	4603      	mov	r3, r0
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	3264      	adds	r2, #100	; 0x64
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007140:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007142:	4401      	add	r1, r0
 8007144:	7809      	ldrb	r1, [r1, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	4790      	blx	r2
 800714a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800714e:	4618      	mov	r0, r3
 8007150:	f006 f989 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8007154:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007158:	4618      	mov	r0, r3
 800715a:	f006 f984 	bl	800d466 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 800715e:	f7fc fc0d 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8007162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007164:	3301      	adds	r3, #1
 8007166:	677b      	str	r3, [r7, #116]	; 0x74
 8007168:	e7bf      	b.n	80070ea <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x2e>
	}

	response_state = Read_TCP_Message(received_message);
 800716a:	f107 030c 	add.w	r3, r7, #12
 800716e:	4618      	mov	r0, r3
 8007170:	f7fc fddc 	bl	8003d2c <Read_TCP_Message>
 8007174:	4603      	mov	r3, r0
 8007176:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 800717a:	f00d f99f 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 800717e:	4604      	mov	r4, r0
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	3338      	adds	r3, #56	; 0x38
 8007184:	681d      	ldr	r5, [r3, #0]
 8007186:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 800718a:	f00d f9a7 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800718e:	4603      	mov	r3, r0
 8007190:	9302      	str	r3, [sp, #8]
 8007192:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	4b12      	ldr	r3, [pc, #72]	; (80071e4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x128>)
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x12c>)
 800719e:	4632      	mov	r2, r6
 80071a0:	2103      	movs	r1, #3
 80071a2:	4620      	mov	r0, r4
 80071a4:	47a8      	blx	r5
	STRCMP_EQUAL("Hello World",received_message);
 80071a6:	f00d f989 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80071aa:	4604      	mov	r4, r0
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	3324      	adds	r3, #36	; 0x24
 80071b0:	681d      	ldr	r5, [r3, #0]
 80071b2:	f00d f993 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f107 020c 	add.w	r2, r7, #12
 80071bc:	9302      	str	r3, [sp, #8]
 80071be:	f240 23a5 	movw	r3, #677	; 0x2a5
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x128>)
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	2300      	movs	r3, #0
 80071ca:	4908      	ldr	r1, [pc, #32]	; (80071ec <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 80071cc:	4620      	mov	r0, r4
 80071ce:	47a8      	blx	r5

}
 80071d0:	bf00      	nop
 80071d2:	377c      	adds	r7, #124	; 0x7c
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d8:	08023dbc 	.word	0x08023dbc
 80071dc:	080239c0 	.word	0x080239c0
 80071e0:	080239e0 	.word	0x080239e0
 80071e4:	0802369c 	.word	0x0802369c
 80071e8:	08023d8c 	.word	0x08023d8c
 80071ec:	080238d0 	.word	0x080238d0

080071f0 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fd ff62 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007200:	4a03      	ldr	r2, [pc, #12]	; (8007210 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	08026b18 	.word	0x08026b18

08007214 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 8007214:	b590      	push	{r4, r7, lr}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007220:	4906      	ldr	r1, [pc, #24]	; (800723c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 8007222:	2004      	movs	r0, #4
 8007224:	f003 f9a4 	bl	800a570 <_ZnwjPKci>
 8007228:	4604      	mov	r4, r0
 800722a:	4620      	mov	r0, r4
 800722c:	f7ff ffe0 	bl	80071f0 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 8007230:	4623      	mov	r3, r4
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	bd90      	pop	{r4, r7, pc}
 800723a:	bf00      	nop
 800723c:	0802369c 	.word	0x0802369c

08007240 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4618      	mov	r0, r3
 800724c:	f00b fd7e 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8007250:	4a03      	ldr	r2, [pc, #12]	; (8007260 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	08026a6c 	.word	0x08026a6c

08007264 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 8007264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007266:	b095      	sub	sp, #84	; 0x54
 8007268:	af04      	add	r7, sp, #16
 800726a:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 800726c:	2305      	movs	r3, #5
 800726e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50];
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007272:	f107 030c 	add.w	r3, r7, #12
 8007276:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800727a:	4618      	mov	r0, r3
 800727c:	f7fc fdc4 	bl	8003e08 <Wait_TCP_Message>
 8007280:	4603      	mov	r3, r0
 8007282:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 8007286:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800728a:	2b05      	cmp	r3, #5
 800728c:	d100      	bne.n	8007290 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x2c>
		response_state = Wait_TCP_Message(received_message, 1000);
 800728e:	e7f0      	b.n	8007272 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0xe>
			break;
 8007290:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8007292:	f00d f913 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8007296:	4604      	mov	r4, r0
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	3338      	adds	r3, #56	; 0x38
 800729c:	681d      	ldr	r5, [r3, #0]
 800729e:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 80072a2:	f00d f91b 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80072a6:	4603      	mov	r3, r0
 80072a8:	9302      	str	r3, [sp, #8]
 80072aa:	f240 23b6 	movw	r3, #694	; 0x2b6
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x64>)
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x68>)
 80072b6:	4632      	mov	r2, r6
 80072b8:	2102      	movs	r1, #2
 80072ba:	4620      	mov	r0, r4
 80072bc:	47a8      	blx	r5

}
 80072be:	bf00      	nop
 80072c0:	3744      	adds	r7, #68	; 0x44
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072c6:	bf00      	nop
 80072c8:	0802369c 	.word	0x0802369c
 80072cc:	08023a2c 	.word	0x08023a2c

080072d0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fd fef2 	bl	80050c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80072e0:	4a03      	ldr	r2, [pc, #12]	; (80072f0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	08026a4c 	.word	0x08026a4c

080072f4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 80072f4:	b590      	push	{r4, r7, lr}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	f240 22ba 	movw	r2, #698	; 0x2ba
 8007300:	4906      	ldr	r1, [pc, #24]	; (800731c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8007302:	2004      	movs	r0, #4
 8007304:	f003 f934 	bl	800a570 <_ZnwjPKci>
 8007308:	4604      	mov	r4, r0
 800730a:	4620      	mov	r0, r4
 800730c:	f7ff ffe0 	bl	80072d0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 8007310:	4623      	mov	r3, r4
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	bd90      	pop	{r4, r7, pc}
 800731a:	bf00      	nop
 800731c:	0802369c 	.word	0x0802369c

08007320 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4618      	mov	r0, r3
 800732c:	f00b fd0e 	bl	8012d4c <_ZN10UtestShellC1Ev>
 8007330:	4a03      	ldr	r2, [pc, #12]	; (8007340 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	080269a0 	.word	0x080269a0

08007344 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 8007344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007346:	b0a3      	sub	sp, #140	; 0x8c
 8007348:	af04      	add	r7, sp, #16
 800734a:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example data that ESP received from server
 800734c:	4b49      	ldr	r3, [pc, #292]	; (8007474 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x130>)
 800734e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007352:	461d      	mov	r5, r3
 8007354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007358:	e895 0003 	ldmia.w	r5, {r0, r1}
 800735c:	6020      	str	r0, [r4, #0]
 800735e:	3404      	adds	r4, #4
 8007360:	8021      	strh	r1, [r4, #0]
 8007362:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 800736c:	2305      	movs	r3, #5
 800736e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50];

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007372:	f107 030c 	add.w	r3, r7, #12
 8007376:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800737a:	4618      	mov	r0, r3
 800737c:	f7fc fd44 	bl	8003e08 <Wait_TCP_Message>
 8007380:	4603      	mov	r3, r0
 8007382:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 8007386:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800738a:	2b05      	cmp	r3, #5
 800738c:	d141      	bne.n	8007412 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xce>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 800738e:	2300      	movs	r3, #0
 8007390:	677b      	str	r3, [r7, #116]	; 0x74
 8007392:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007396:	4618      	mov	r0, r3
 8007398:	f7f8 ff50 	bl	800023c <strlen>
 800739c:	4603      	mov	r3, r0
 800739e:	461a      	mov	r2, r3
 80073a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a2:	4293      	cmp	r3, r2
 80073a4:	dae5      	bge.n	8007372 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x2e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80073a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073aa:	4933      	ldr	r1, [pc, #204]	; (8007478 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x134>)
 80073ac:	4618      	mov	r0, r3
 80073ae:	f005 fca2 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80073b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073b6:	2100      	movs	r1, #0
 80073b8:	4618      	mov	r0, r3
 80073ba:	f003 fd75 	bl	800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80073be:	4604      	mov	r4, r0
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	330c      	adds	r3, #12
 80073c4:	681d      	ldr	r5, [r3, #0]
 80073c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80073ca:	492c      	ldr	r1, [pc, #176]	; (800747c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x138>)
 80073cc:	4618      	mov	r0, r3
 80073ce:	f005 fc92 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80073d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80073d6:	4619      	mov	r1, r3
 80073d8:	4620      	mov	r0, r4
 80073da:	47a8      	blx	r5
 80073dc:	4603      	mov	r3, r0
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	3264      	adds	r2, #100	; 0x64
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80073e8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80073ea:	4401      	add	r1, r0
 80073ec:	7809      	ldrb	r1, [r1, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	4790      	blx	r2
 80073f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80073f6:	4618      	mov	r0, r3
 80073f8:	f006 f835 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80073fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007400:	4618      	mov	r0, r3
 8007402:	f006 f830 	bl	800d466 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8007406:	f7fc fab9 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 800740a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800740c:	3301      	adds	r3, #1
 800740e:	677b      	str	r3, [r7, #116]	; 0x74
 8007410:	e7bf      	b.n	8007392 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x4e>
			break;
 8007412:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 8007414:	f00d f852 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8007418:	4604      	mov	r4, r0
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	3338      	adds	r3, #56	; 0x38
 800741e:	681d      	ldr	r5, [r3, #0]
 8007420:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8007424:	f00d f85a 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007428:	4603      	mov	r3, r0
 800742a:	9302      	str	r3, [sp, #8]
 800742c:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8007430:	9301      	str	r3, [sp, #4]
 8007432:	4b13      	ldr	r3, [pc, #76]	; (8007480 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	4b13      	ldr	r3, [pc, #76]	; (8007484 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007438:	4632      	mov	r2, r6
 800743a:	2103      	movs	r1, #3
 800743c:	4620      	mov	r0, r4
 800743e:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 8007440:	f00d f83c 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8007444:	4604      	mov	r4, r0
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	3324      	adds	r3, #36	; 0x24
 800744a:	681d      	ldr	r5, [r3, #0]
 800744c:	f00d f846 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007450:	4603      	mov	r3, r0
 8007452:	f107 020c 	add.w	r2, r7, #12
 8007456:	9302      	str	r3, [sp, #8]
 8007458:	f240 23d1 	movw	r3, #721	; 0x2d1
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	4b08      	ldr	r3, [pc, #32]	; (8007480 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	2300      	movs	r3, #0
 8007464:	4908      	ldr	r1, [pc, #32]	; (8007488 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 8007466:	4620      	mov	r0, r4
 8007468:	47a8      	blx	r5

}
 800746a:	bf00      	nop
 800746c:	377c      	adds	r7, #124	; 0x7c
 800746e:	46bd      	mov	sp, r7
 8007470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007472:	bf00      	nop
 8007474:	08023dec 	.word	0x08023dec
 8007478:	080239c0 	.word	0x080239c0
 800747c:	080239e0 	.word	0x080239e0
 8007480:	0802369c 	.word	0x0802369c
 8007484:	08023d8c 	.word	0x08023d8c
 8007488:	08023ddc 	.word	0x08023ddc

0800748c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	4a05      	ldr	r2, [pc, #20]	; (80074ac <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4618      	mov	r0, r3
 800749e:	f00b fca9 	bl	8012df4 <_ZN10UtestShellD1Ev>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	080269a0 	.word	0x080269a0

080074b0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff ffe7 	bl	800748c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 80074be:	211c      	movs	r1, #28
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f003 f869 	bl	800a598 <_ZdlPvj>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	4a05      	ldr	r2, [pc, #20]	; (80074f0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fd fe01 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	08026a4c 	.word	0x08026a4c

080074f4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff ffe7 	bl	80074d0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 8007502:	2104      	movs	r1, #4
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f003 f847 	bl	800a598 <_ZdlPvj>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	4a05      	ldr	r2, [pc, #20]	; (8007534 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4618      	mov	r0, r3
 8007526:	f00b fc65 	bl	8012df4 <_ZN10UtestShellD1Ev>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	08026a6c 	.word	0x08026a6c

08007538 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff ffe7 	bl	8007514 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 8007546:	211c      	movs	r1, #28
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f003 f825 	bl	800a598 <_ZdlPvj>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	4a05      	ldr	r2, [pc, #20]	; (8007578 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4618      	mov	r0, r3
 800756a:	f7fd fdbd 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	08026b18 	.word	0x08026b18

0800757c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff ffe7 	bl	8007558 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 800758a:	2104      	movs	r1, #4
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f003 f803 	bl	800a598 <_ZdlPvj>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	4a05      	ldr	r2, [pc, #20]	; (80075bc <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f00b fc21 	bl	8012df4 <_ZN10UtestShellD1Ev>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	08026b38 	.word	0x08026b38

080075c0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff ffe7 	bl	800759c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 80075ce:	211c      	movs	r1, #28
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f002 ffe1 	bl	800a598 <_ZdlPvj>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	4a05      	ldr	r2, [pc, #20]	; (8007600 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fd fd79 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	08026be4 	.word	0x08026be4

08007604 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff ffe7 	bl	80075e0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 8007612:	2104      	movs	r1, #4
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f002 ffbf 	bl	800a598 <_ZdlPvj>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	4a05      	ldr	r2, [pc, #20]	; (8007644 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4618      	mov	r0, r3
 8007636:	f00b fbdd 	bl	8012df4 <_ZN10UtestShellD1Ev>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	08026c04 	.word	0x08026c04

08007648 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff ffe7 	bl	8007624 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 8007656:	211c      	movs	r1, #28
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f002 ff9d 	bl	800a598 <_ZdlPvj>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	4a05      	ldr	r2, [pc, #20]	; (8007688 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4618      	mov	r0, r3
 800767a:	f7fd fd35 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	08026cb0 	.word	0x08026cb0

0800768c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff ffe7 	bl	8007668 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 800769a:	2104      	movs	r1, #4
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f002 ff7b 	bl	800a598 <_ZdlPvj>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	4a05      	ldr	r2, [pc, #20]	; (80076cc <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	f00b fb99 	bl	8012df4 <_ZN10UtestShellD1Ev>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	08026cd0 	.word	0x08026cd0

080076d0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff ffe7 	bl	80076ac <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 80076de:	211c      	movs	r1, #28
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f002 ff59 	bl	800a598 <_ZdlPvj>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	4a05      	ldr	r2, [pc, #20]	; (8007710 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4618      	mov	r0, r3
 8007702:	f7fd fcf1 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	08026d7c 	.word	0x08026d7c

08007714 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff ffe7 	bl	80076f0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 8007722:	2104      	movs	r1, #4
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f002 ff37 	bl	800a598 <_ZdlPvj>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	4a05      	ldr	r2, [pc, #20]	; (8007754 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	f00b fb55 	bl	8012df4 <_ZN10UtestShellD1Ev>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	08026d9c 	.word	0x08026d9c

08007758 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff ffe7 	bl	8007734 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 8007766:	211c      	movs	r1, #28
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f002 ff15 	bl	800a598 <_ZdlPvj>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	4a05      	ldr	r2, [pc, #20]	; (8007798 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4618      	mov	r0, r3
 800778a:	f7fd fcad 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	08026e48 	.word	0x08026e48

0800779c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff ffe7 	bl	8007778 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 80077aa:	2104      	movs	r1, #4
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f002 fef3 	bl	800a598 <_ZdlPvj>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4618      	mov	r0, r3
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	4a05      	ldr	r2, [pc, #20]	; (80077dc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f00b fb11 	bl	8012df4 <_ZN10UtestShellD1Ev>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	08026e68 	.word	0x08026e68

080077e0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff ffe7 	bl	80077bc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 80077ee:	211c      	movs	r1, #28
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f002 fed1 	bl	800a598 <_ZdlPvj>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4618      	mov	r0, r3
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	4a05      	ldr	r2, [pc, #20]	; (8007820 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4618      	mov	r0, r3
 8007812:	f7fd fc69 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4618      	mov	r0, r3
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	08026f14 	.word	0x08026f14

08007824 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff ffe7 	bl	8007800 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 8007832:	2104      	movs	r1, #4
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f002 feaf 	bl	800a598 <_ZdlPvj>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4618      	mov	r0, r3
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	4a05      	ldr	r2, [pc, #20]	; (8007864 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4618      	mov	r0, r3
 8007856:	f00b facd 	bl	8012df4 <_ZN10UtestShellD1Ev>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	08026f34 	.word	0x08026f34

08007868 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff ffe7 	bl	8007844 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 8007876:	211c      	movs	r1, #28
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f002 fe8d 	bl	800a598 <_ZdlPvj>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	4a05      	ldr	r2, [pc, #20]	; (80078a8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4618      	mov	r0, r3
 800789a:	f7fd fc25 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	08026fe0 	.word	0x08026fe0

080078ac <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff ffe7 	bl	8007888 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 80078ba:	2104      	movs	r1, #4
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f002 fe6b 	bl	800a598 <_ZdlPvj>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	4a05      	ldr	r2, [pc, #20]	; (80078ec <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4618      	mov	r0, r3
 80078de:	f00b fa89 	bl	8012df4 <_ZN10UtestShellD1Ev>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	08027000 	.word	0x08027000

080078f0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff ffe7 	bl	80078cc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 80078fe:	211c      	movs	r1, #28
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f002 fe49 	bl	800a598 <_ZdlPvj>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	4a05      	ldr	r2, [pc, #20]	; (8007930 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	f7fd fbe1 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	080270ac 	.word	0x080270ac

08007934 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7ff ffe7 	bl	8007910 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 8007942:	2104      	movs	r1, #4
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f002 fe27 	bl	800a598 <_ZdlPvj>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	4a05      	ldr	r2, [pc, #20]	; (8007974 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	f00b fa45 	bl	8012df4 <_ZN10UtestShellD1Ev>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	080270cc 	.word	0x080270cc

08007978 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff ffe7 	bl	8007954 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 8007986:	211c      	movs	r1, #28
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f002 fe05 	bl	800a598 <_ZdlPvj>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4618      	mov	r0, r3
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	4a05      	ldr	r2, [pc, #20]	; (80079b8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fd fb9d 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	08027178 	.word	0x08027178

080079bc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff ffe7 	bl	8007998 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 80079ca:	2104      	movs	r1, #4
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f002 fde3 	bl	800a598 <_ZdlPvj>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	4a05      	ldr	r2, [pc, #20]	; (80079fc <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f00b fa01 	bl	8012df4 <_ZN10UtestShellD1Ev>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	08027198 	.word	0x08027198

08007a00 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff ffe7 	bl	80079dc <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 8007a0e:	211c      	movs	r1, #28
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f002 fdc1 	bl	800a598 <_ZdlPvj>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	4a05      	ldr	r2, [pc, #20]	; (8007a40 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fd fb59 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	08027244 	.word	0x08027244

08007a44 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff ffe7 	bl	8007a20 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 8007a52:	2104      	movs	r1, #4
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f002 fd9f 	bl	800a598 <_ZdlPvj>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	4a05      	ldr	r2, [pc, #20]	; (8007a84 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f00b f9bd 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	08027264 	.word	0x08027264

08007a88 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff ffe7 	bl	8007a64 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8007a96:	211c      	movs	r1, #28
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f002 fd7d 	bl	800a598 <_ZdlPvj>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	4a05      	ldr	r2, [pc, #20]	; (8007ac8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fd fb15 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	08027310 	.word	0x08027310

08007acc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff ffe7 	bl	8007aa8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 8007ada:	2104      	movs	r1, #4
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f002 fd5b 	bl	800a598 <_ZdlPvj>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	4a05      	ldr	r2, [pc, #20]	; (8007b0c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f00b f979 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	08027330 	.word	0x08027330

08007b10 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff ffe7 	bl	8007aec <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 8007b1e:	211c      	movs	r1, #28
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f002 fd39 	bl	800a598 <_ZdlPvj>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	4a05      	ldr	r2, [pc, #20]	; (8007b50 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fd fad1 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	080273dc 	.word	0x080273dc

08007b54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7ff ffe7 	bl	8007b30 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8007b62:	2104      	movs	r1, #4
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f002 fd17 	bl	800a598 <_ZdlPvj>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	4a05      	ldr	r2, [pc, #20]	; (8007b94 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f00b f935 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	080273fc 	.word	0x080273fc

08007b98 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff ffe7 	bl	8007b74 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8007ba6:	211c      	movs	r1, #28
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f002 fcf5 	bl	800a598 <_ZdlPvj>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	4a05      	ldr	r2, [pc, #20]	; (8007bd8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fd fa8d 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	080274a8 	.word	0x080274a8

08007bdc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff ffe7 	bl	8007bb8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8007bea:	2104      	movs	r1, #4
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f002 fcd3 	bl	800a598 <_ZdlPvj>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	4a05      	ldr	r2, [pc, #20]	; (8007c1c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f00b f8f1 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	080274c8 	.word	0x080274c8

08007c20 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff ffe7 	bl	8007bfc <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8007c2e:	211c      	movs	r1, #28
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f002 fcb1 	bl	800a598 <_ZdlPvj>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	4a05      	ldr	r2, [pc, #20]	; (8007c60 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fd fa49 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	08027574 	.word	0x08027574

08007c64 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff ffe7 	bl	8007c40 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8007c72:	2104      	movs	r1, #4
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f002 fc8f 	bl	800a598 <_ZdlPvj>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	4a05      	ldr	r2, [pc, #20]	; (8007ca4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f00b f8ad 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	08027594 	.word	0x08027594

08007ca8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff ffe7 	bl	8007c84 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8007cb6:	211c      	movs	r1, #28
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f002 fc6d 	bl	800a598 <_ZdlPvj>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	4a05      	ldr	r2, [pc, #20]	; (8007ce8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fd fa05 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	08027640 	.word	0x08027640

08007cec <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff ffe7 	bl	8007cc8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 8007cfa:	2104      	movs	r1, #4
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f002 fc4b 	bl	800a598 <_ZdlPvj>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	4a05      	ldr	r2, [pc, #20]	; (8007d2c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f00b f869 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	08027660 	.word	0x08027660

08007d30 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff ffe7 	bl	8007d0c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8007d3e:	211c      	movs	r1, #28
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f002 fc29 	bl	800a598 <_ZdlPvj>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	4a05      	ldr	r2, [pc, #20]	; (8007d70 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fd f9c1 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	0802770c 	.word	0x0802770c

08007d74 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff ffe7 	bl	8007d50 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8007d82:	2104      	movs	r1, #4
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f002 fc07 	bl	800a598 <_ZdlPvj>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	4a05      	ldr	r2, [pc, #20]	; (8007db4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f00b f825 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	0802772c 	.word	0x0802772c

08007db8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff ffe7 	bl	8007d94 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8007dc6:	211c      	movs	r1, #28
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f002 fbe5 	bl	800a598 <_ZdlPvj>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	4a05      	ldr	r2, [pc, #20]	; (8007df8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fd f97d 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	080277d8 	.word	0x080277d8

08007dfc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff ffe7 	bl	8007dd8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8007e0a:	2104      	movs	r1, #4
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f002 fbc3 	bl	800a598 <_ZdlPvj>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4618      	mov	r0, r3
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	4a05      	ldr	r2, [pc, #20]	; (8007e3c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f00a ffe1 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	080277f8 	.word	0x080277f8

08007e40 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff ffe7 	bl	8007e1c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8007e4e:	211c      	movs	r1, #28
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f002 fba1 	bl	800a598 <_ZdlPvj>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	4a05      	ldr	r2, [pc, #20]	; (8007e80 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fd f939 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	080278a4 	.word	0x080278a4

08007e84 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7ff ffe7 	bl	8007e60 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8007e92:	2104      	movs	r1, #4
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f002 fb7f 	bl	800a598 <_ZdlPvj>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	4a05      	ldr	r2, [pc, #20]	; (8007ec4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f00a ff9d 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	080278c4 	.word	0x080278c4

08007ec8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7ff ffe7 	bl	8007ea4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8007ed6:	211c      	movs	r1, #28
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f002 fb5d 	bl	800a598 <_ZdlPvj>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	4a05      	ldr	r2, [pc, #20]	; (8007f08 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fd f8f5 	bl	80050e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	08027970 	.word	0x08027970

08007f0c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7ff ffe7 	bl	8007ee8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8007f1a:	2104      	movs	r1, #4
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f002 fb3b 	bl	800a598 <_ZdlPvj>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	4a05      	ldr	r2, [pc, #20]	; (8007f4c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f00a ff59 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4618      	mov	r0, r3
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	080279b0 	.word	0x080279b0

08007f50 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7ff ffe7 	bl	8007f2c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8007f5e:	211c      	movs	r1, #28
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f002 fb19 	bl	800a598 <_ZdlPvj>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	4a05      	ldr	r2, [pc, #20]	; (8007f90 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fc fa69 	bl	8004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	08027a5c 	.word	0x08027a5c

08007f94 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff ffe7 	bl	8007f70 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8007fa2:	2108      	movs	r1, #8
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f002 faf7 	bl	800a598 <_ZdlPvj>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	4a05      	ldr	r2, [pc, #20]	; (8007fd4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f00a ff15 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	08027a7c 	.word	0x08027a7c

08007fd8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7ff ffe7 	bl	8007fb4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8007fe6:	211c      	movs	r1, #28
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f002 fad5 	bl	800a598 <_ZdlPvj>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	4a05      	ldr	r2, [pc, #20]	; (8008018 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4618      	mov	r0, r3
 800800a:	f7fc fa25 	bl	8004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	08027b28 	.word	0x08027b28

0800801c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff ffe7 	bl	8007ff8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 800802a:	2108      	movs	r1, #8
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f002 fab3 	bl	800a598 <_ZdlPvj>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	4a05      	ldr	r2, [pc, #20]	; (800805c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4618      	mov	r0, r3
 800804e:	f00a fed1 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	08027b48 	.word	0x08027b48

08008060 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff ffe7 	bl	800803c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 800806e:	211c      	movs	r1, #28
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f002 fa91 	bl	800a598 <_ZdlPvj>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	4a05      	ldr	r2, [pc, #20]	; (80080a0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4618      	mov	r0, r3
 8008092:	f7fc f9e1 	bl	8004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4618      	mov	r0, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	08027bf4 	.word	0x08027bf4

080080a4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff ffe7 	bl	8008080 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 80080b2:	2108      	movs	r1, #8
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f002 fa6f 	bl	800a598 <_ZdlPvj>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	4a05      	ldr	r2, [pc, #20]	; (80080e4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f00a fe8d 	bl	8012df4 <_ZN10UtestShellD1Ev>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	08027c14 	.word	0x08027c14

080080e8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff ffe7 	bl	80080c4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 80080f6:	211c      	movs	r1, #28
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f002 fa4d 	bl	800a598 <_ZdlPvj>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	4a05      	ldr	r2, [pc, #20]	; (8008128 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4618      	mov	r0, r3
 800811a:	f7fc f99d 	bl	8004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	08027cc0 	.word	0x08027cc0

0800812c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7ff ffe7 	bl	8008108 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 800813a:	2108      	movs	r1, #8
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f002 fa2b 	bl	800a598 <_ZdlPvj>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4618      	mov	r0, r3
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	4a05      	ldr	r2, [pc, #20]	; (800816c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4618      	mov	r0, r3
 800815e:	f00a fe49 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4618      	mov	r0, r3
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	08027ce0 	.word	0x08027ce0

08008170 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff ffe7 	bl	800814c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 800817e:	211c      	movs	r1, #28
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f002 fa09 	bl	800a598 <_ZdlPvj>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	4a05      	ldr	r2, [pc, #20]	; (80081b0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fc f959 	bl	8004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	08027d8c 	.word	0x08027d8c

080081b4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff ffe7 	bl	8008190 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 80081c2:	2108      	movs	r1, #8
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f002 f9e7 	bl	800a598 <_ZdlPvj>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	4a05      	ldr	r2, [pc, #20]	; (80081f4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f00a fe05 	bl	8012df4 <_ZN10UtestShellD1Ev>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	08027dac 	.word	0x08027dac

080081f8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff ffe7 	bl	80081d4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8008206:	211c      	movs	r1, #28
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f002 f9c5 	bl	800a598 <_ZdlPvj>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	4a05      	ldr	r2, [pc, #20]	; (8008238 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4618      	mov	r0, r3
 800822a:	f7fc f915 	bl	8004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	08027e58 	.word	0x08027e58

0800823c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7ff ffe7 	bl	8008218 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 800824a:	2108      	movs	r1, #8
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f002 f9a3 	bl	800a598 <_ZdlPvj>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	4a05      	ldr	r2, [pc, #20]	; (800827c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4618      	mov	r0, r3
 800826e:	f00a fdc1 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4618      	mov	r0, r3
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	08027e78 	.word	0x08027e78

08008280 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff ffe7 	bl	800825c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 800828e:	211c      	movs	r1, #28
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f002 f981 	bl	800a598 <_ZdlPvj>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	4a05      	ldr	r2, [pc, #20]	; (80082c0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fc f8d1 	bl	8004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	08027f24 	.word	0x08027f24

080082c4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7ff ffe7 	bl	80082a0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 80082d2:	2108      	movs	r1, #8
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f002 f95f 	bl	800a598 <_ZdlPvj>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	4a05      	ldr	r2, [pc, #20]	; (8008304 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f00a fd7d 	bl	8012df4 <_ZN10UtestShellD1Ev>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	08027f44 	.word	0x08027f44

08008308 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7ff ffe7 	bl	80082e4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8008316:	211c      	movs	r1, #28
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f002 f93d 	bl	800a598 <_ZdlPvj>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	4a05      	ldr	r2, [pc, #20]	; (8008348 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4618      	mov	r0, r3
 800833a:	f7fc f88d 	bl	8004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	08027ff0 	.word	0x08027ff0

0800834c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff ffe7 	bl	8008328 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 800835a:	2108      	movs	r1, #8
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f002 f91b 	bl	800a598 <_ZdlPvj>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	4a05      	ldr	r2, [pc, #20]	; (800838c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4618      	mov	r0, r3
 800837e:	f00a fd39 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	08028010 	.word	0x08028010

08008390 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7ff ffe7 	bl	800836c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 800839e:	211c      	movs	r1, #28
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f002 f8f9 	bl	800a598 <_ZdlPvj>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	4a05      	ldr	r2, [pc, #20]	; (80083d0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fc f849 	bl	8004458 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	080280bc 	.word	0x080280bc

080083d4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff ffe7 	bl	80083b0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 80083e2:	2108      	movs	r1, #8
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f002 f8d7 	bl	800a598 <_ZdlPvj>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <_Z41__static_initialization_and_destruction_0ii>:
}
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b01      	cmp	r3, #1
 8008402:	f040 8224 	bne.w	800884e <_Z41__static_initialization_and_destruction_0ii+0x45a>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800840c:	4293      	cmp	r3, r2
 800840e:	f040 821e 	bne.w	800884e <_Z41__static_initialization_and_destruction_0ii+0x45a>
TEST(RingBuffer_Test_Group, InitTest)
 8008412:	489f      	ldr	r0, [pc, #636]	; (8008690 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008414:	f7fc f86e 	bl	80044f4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8008418:	2324      	movs	r3, #36	; 0x24
 800841a:	9301      	str	r3, [sp, #4]
 800841c:	4b9d      	ldr	r3, [pc, #628]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	4b9d      	ldr	r3, [pc, #628]	; (8008698 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8008422:	4a9e      	ldr	r2, [pc, #632]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008424:	499a      	ldr	r1, [pc, #616]	; (8008690 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008426:	489e      	ldr	r0, [pc, #632]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8008428:	f00c fae0 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 800842c:	489d      	ldr	r0, [pc, #628]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800842e:	f7fc f915 	bl	800465c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8008432:	232e      	movs	r3, #46	; 0x2e
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	4b97      	ldr	r3, [pc, #604]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	4b9b      	ldr	r3, [pc, #620]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800843c:	4a97      	ldr	r2, [pc, #604]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800843e:	4999      	ldr	r1, [pc, #612]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008440:	489a      	ldr	r0, [pc, #616]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8008442:	f00c fad3 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008446:	489a      	ldr	r0, [pc, #616]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008448:	f7fc f992 	bl	8004770 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 800844c:	2338      	movs	r3, #56	; 0x38
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	4b90      	ldr	r3, [pc, #576]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	4b97      	ldr	r3, [pc, #604]	; (80086b4 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8008456:	4a91      	ldr	r2, [pc, #580]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008458:	4995      	ldr	r1, [pc, #596]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800845a:	4897      	ldr	r0, [pc, #604]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800845c:	f00c fac6 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008460:	4896      	ldr	r0, [pc, #600]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008462:	f7fc fa0d 	bl	8004880 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8008466:	2343      	movs	r3, #67	; 0x43
 8008468:	9301      	str	r3, [sp, #4]
 800846a:	4b8a      	ldr	r3, [pc, #552]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4b94      	ldr	r3, [pc, #592]	; (80086c0 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008470:	4a8a      	ldr	r2, [pc, #552]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008472:	4992      	ldr	r1, [pc, #584]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008474:	4893      	ldr	r0, [pc, #588]	; (80086c4 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8008476:	f00c fab9 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800847a:	4893      	ldr	r0, [pc, #588]	; (80086c8 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800847c:	f7fc fa6c 	bl	8004958 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8008480:	234c      	movs	r3, #76	; 0x4c
 8008482:	9301      	str	r3, [sp, #4]
 8008484:	4b83      	ldr	r3, [pc, #524]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	4b90      	ldr	r3, [pc, #576]	; (80086cc <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800848a:	4a84      	ldr	r2, [pc, #528]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800848c:	498e      	ldr	r1, [pc, #568]	; (80086c8 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800848e:	4890      	ldr	r0, [pc, #576]	; (80086d0 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8008490:	f00c faac 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008494:	488f      	ldr	r0, [pc, #572]	; (80086d4 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8008496:	f7fc faeb 	bl	8004a70 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 800849a:	235c      	movs	r3, #92	; 0x5c
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	4b7d      	ldr	r3, [pc, #500]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	4b8d      	ldr	r3, [pc, #564]	; (80086d8 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80084a4:	4a7d      	ldr	r2, [pc, #500]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80084a6:	498b      	ldr	r1, [pc, #556]	; (80086d4 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80084a8:	488c      	ldr	r0, [pc, #560]	; (80086dc <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80084aa:	f00c fa9f 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80084ae:	488c      	ldr	r0, [pc, #560]	; (80086e0 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80084b0:	f7fc fb9c 	bl	8004bec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 80084b4:	2371      	movs	r3, #113	; 0x71
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	4b76      	ldr	r3, [pc, #472]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	4b89      	ldr	r3, [pc, #548]	; (80086e4 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80084be:	4a77      	ldr	r2, [pc, #476]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80084c0:	4987      	ldr	r1, [pc, #540]	; (80086e0 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80084c2:	4889      	ldr	r0, [pc, #548]	; (80086e8 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80084c4:	f00c fa92 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 80084c8:	4888      	ldr	r0, [pc, #544]	; (80086ec <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80084ca:	f7fc fbf5 	bl	8004cb8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 80084ce:	2378      	movs	r3, #120	; 0x78
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	4b70      	ldr	r3, [pc, #448]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	4b86      	ldr	r3, [pc, #536]	; (80086f0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80084d8:	4a70      	ldr	r2, [pc, #448]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80084da:	4984      	ldr	r1, [pc, #528]	; (80086ec <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80084dc:	4885      	ldr	r0, [pc, #532]	; (80086f4 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80084de:	f00c fa85 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 80084e2:	4885      	ldr	r0, [pc, #532]	; (80086f8 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80084e4:	f7fc fcd2 	bl	8004e8c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 80084e8:	2380      	movs	r3, #128	; 0x80
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	4b69      	ldr	r3, [pc, #420]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	4b82      	ldr	r3, [pc, #520]	; (80086fc <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80084f2:	4a6a      	ldr	r2, [pc, #424]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80084f4:	4980      	ldr	r1, [pc, #512]	; (80086f8 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80084f6:	4882      	ldr	r0, [pc, #520]	; (8008700 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80084f8:	f00c fa78 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80084fc:	4881      	ldr	r0, [pc, #516]	; (8008704 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80084fe:	f7fc fe3b 	bl	8005178 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8008502:	23b8      	movs	r3, #184	; 0xb8
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	4b63      	ldr	r3, [pc, #396]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	4b7f      	ldr	r3, [pc, #508]	; (8008708 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800850c:	4a7f      	ldr	r2, [pc, #508]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800850e:	497d      	ldr	r1, [pc, #500]	; (8008704 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8008510:	487f      	ldr	r0, [pc, #508]	; (8008710 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8008512:	f00c fa6b 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8008516:	487f      	ldr	r0, [pc, #508]	; (8008714 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008518:	f7fc fe98 	bl	800524c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 800851c:	23ca      	movs	r3, #202	; 0xca
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	4b5c      	ldr	r3, [pc, #368]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	4b7c      	ldr	r3, [pc, #496]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8008526:	4a79      	ldr	r2, [pc, #484]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008528:	497a      	ldr	r1, [pc, #488]	; (8008714 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800852a:	487c      	ldr	r0, [pc, #496]	; (800871c <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800852c:	f00c fa5e 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8008530:	487b      	ldr	r0, [pc, #492]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008532:	f7fc ff4f 	bl	80053d4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8008536:	23d6      	movs	r3, #214	; 0xd6
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	4b56      	ldr	r3, [pc, #344]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	4b79      	ldr	r3, [pc, #484]	; (8008724 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008540:	4a72      	ldr	r2, [pc, #456]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008542:	4977      	ldr	r1, [pc, #476]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008544:	4878      	ldr	r0, [pc, #480]	; (8008728 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8008546:	f00c fa51 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800854a:	4878      	ldr	r0, [pc, #480]	; (800872c <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800854c:	f7fd f85a 	bl	8005604 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8008550:	23e6      	movs	r3, #230	; 0xe6
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	4b4f      	ldr	r3, [pc, #316]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	4b75      	ldr	r3, [pc, #468]	; (8008730 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800855a:	4a6c      	ldr	r2, [pc, #432]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800855c:	4973      	ldr	r1, [pc, #460]	; (800872c <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800855e:	4875      	ldr	r0, [pc, #468]	; (8008734 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8008560:	f00c fa44 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008564:	4874      	ldr	r0, [pc, #464]	; (8008738 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8008566:	f7fd f901 	bl	800576c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 800856a:	23f7      	movs	r3, #247	; 0xf7
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	4b49      	ldr	r3, [pc, #292]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	4b72      	ldr	r3, [pc, #456]	; (800873c <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8008574:	4a65      	ldr	r2, [pc, #404]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008576:	4970      	ldr	r1, [pc, #448]	; (8008738 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8008578:	4871      	ldr	r0, [pc, #452]	; (8008740 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800857a:	f00c fa37 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 800857e:	4871      	ldr	r0, [pc, #452]	; (8008744 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008580:	f7fd f960 	bl	8005844 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8008584:	f240 1307 	movw	r3, #263	; 0x107
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	4b42      	ldr	r3, [pc, #264]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	4b6e      	ldr	r3, [pc, #440]	; (8008748 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8008590:	4a5e      	ldr	r2, [pc, #376]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008592:	496c      	ldr	r1, [pc, #432]	; (8008744 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008594:	486d      	ldr	r0, [pc, #436]	; (800874c <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8008596:	f00c fa29 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 800859a:	486d      	ldr	r0, [pc, #436]	; (8008750 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800859c:	f7fd fa16 	bl	80059cc <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 80085a0:	f240 131d 	movw	r3, #285	; 0x11d
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	4b3b      	ldr	r3, [pc, #236]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	4b6a      	ldr	r3, [pc, #424]	; (8008754 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80085ac:	4a57      	ldr	r2, [pc, #348]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80085ae:	4968      	ldr	r1, [pc, #416]	; (8008750 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80085b0:	4869      	ldr	r0, [pc, #420]	; (8008758 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80085b2:	f00c fa1b 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80085b6:	4869      	ldr	r0, [pc, #420]	; (800875c <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80085b8:	f7fd faba 	bl	8005b30 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 80085bc:	f44f 739a 	mov.w	r3, #308	; 0x134
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	4b34      	ldr	r3, [pc, #208]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	4b66      	ldr	r3, [pc, #408]	; (8008760 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80085c8:	4a50      	ldr	r2, [pc, #320]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80085ca:	4964      	ldr	r1, [pc, #400]	; (800875c <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80085cc:	4865      	ldr	r0, [pc, #404]	; (8008764 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 80085ce:	f00c fa0d 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80085d2:	4865      	ldr	r0, [pc, #404]	; (8008768 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80085d4:	f7fd fbf0 	bl	8005db8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 80085d8:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80085dc:	9301      	str	r3, [sp, #4]
 80085de:	4b2d      	ldr	r3, [pc, #180]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	4b62      	ldr	r3, [pc, #392]	; (800876c <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80085e4:	4a49      	ldr	r2, [pc, #292]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80085e6:	4960      	ldr	r1, [pc, #384]	; (8008768 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80085e8:	4861      	ldr	r0, [pc, #388]	; (8008770 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80085ea:	f00c f9ff 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80085ee:	4861      	ldr	r0, [pc, #388]	; (8008774 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80085f0:	f7fd fd24 	bl	800603c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 80085f4:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80085f8:	9301      	str	r3, [sp, #4]
 80085fa:	4b26      	ldr	r3, [pc, #152]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	4b5e      	ldr	r3, [pc, #376]	; (8008778 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8008600:	4a42      	ldr	r2, [pc, #264]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008602:	495c      	ldr	r1, [pc, #368]	; (8008774 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8008604:	485d      	ldr	r0, [pc, #372]	; (800877c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8008606:	f00c f9f1 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 800860a:	485d      	ldr	r0, [pc, #372]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800860c:	f7fd fdc0 	bl	8006190 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 8008610:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	4b1f      	ldr	r3, [pc, #124]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	4b5a      	ldr	r3, [pc, #360]	; (8008784 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800861c:	4a3b      	ldr	r2, [pc, #236]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800861e:	4958      	ldr	r1, [pc, #352]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8008620:	4859      	ldr	r0, [pc, #356]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8008622:	f00c f9e3 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008626:	4859      	ldr	r0, [pc, #356]	; (800878c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008628:	f7fd fe98 	bl	800635c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 800862c:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	4b18      	ldr	r3, [pc, #96]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	4b56      	ldr	r3, [pc, #344]	; (8008790 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8008638:	4a34      	ldr	r2, [pc, #208]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800863a:	4954      	ldr	r1, [pc, #336]	; (800878c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800863c:	4855      	ldr	r0, [pc, #340]	; (8008794 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800863e:	f00c f9d5 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8008642:	4855      	ldr	r0, [pc, #340]	; (8008798 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008644:	f7fd ffb4 	bl	80065b0 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 8008648:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	4b11      	ldr	r3, [pc, #68]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	4b52      	ldr	r3, [pc, #328]	; (800879c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8008654:	4a2d      	ldr	r2, [pc, #180]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008656:	4950      	ldr	r1, [pc, #320]	; (8008798 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008658:	4851      	ldr	r0, [pc, #324]	; (80087a0 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800865a:	f00c f9c7 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 800865e:	4851      	ldr	r0, [pc, #324]	; (80087a4 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008660:	f7fe f8e2 	bl	8006828 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8008664:	f240 230f 	movw	r3, #527	; 0x20f
 8008668:	9301      	str	r3, [sp, #4]
 800866a:	4b0a      	ldr	r3, [pc, #40]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	4b4e      	ldr	r3, [pc, #312]	; (80087a8 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008670:	4a26      	ldr	r2, [pc, #152]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008672:	494c      	ldr	r1, [pc, #304]	; (80087a4 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008674:	484d      	ldr	r0, [pc, #308]	; (80087ac <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8008676:	f00c f9b9 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800867a:	484d      	ldr	r0, [pc, #308]	; (80087b0 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800867c:	f7fe f990 	bl	80069a0 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 8008680:	f240 232a 	movw	r3, #554	; 0x22a
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	4b03      	ldr	r3, [pc, #12]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	4b4a      	ldr	r3, [pc, #296]	; (80087b4 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800868c:	e094      	b.n	80087b8 <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 800868e:	bf00      	nop
 8008690:	200004a0 	.word	0x200004a0
 8008694:	0802369c 	.word	0x0802369c
 8008698:	08023e0c 	.word	0x08023e0c
 800869c:	08023e18 	.word	0x08023e18
 80086a0:	200004bc 	.word	0x200004bc
 80086a4:	200004c0 	.word	0x200004c0
 80086a8:	08023e30 	.word	0x08023e30
 80086ac:	200004dc 	.word	0x200004dc
 80086b0:	200004e0 	.word	0x200004e0
 80086b4:	08023e40 	.word	0x08023e40
 80086b8:	200004fc 	.word	0x200004fc
 80086bc:	20000500 	.word	0x20000500
 80086c0:	08023e54 	.word	0x08023e54
 80086c4:	2000051c 	.word	0x2000051c
 80086c8:	20000520 	.word	0x20000520
 80086cc:	08023e64 	.word	0x08023e64
 80086d0:	2000053c 	.word	0x2000053c
 80086d4:	20000540 	.word	0x20000540
 80086d8:	08023e7c 	.word	0x08023e7c
 80086dc:	2000055c 	.word	0x2000055c
 80086e0:	20000560 	.word	0x20000560
 80086e4:	08023e8c 	.word	0x08023e8c
 80086e8:	2000057c 	.word	0x2000057c
 80086ec:	20000580 	.word	0x20000580
 80086f0:	08023e9c 	.word	0x08023e9c
 80086f4:	2000059c 	.word	0x2000059c
 80086f8:	200005a0 	.word	0x200005a0
 80086fc:	08023ea8 	.word	0x08023ea8
 8008700:	200005bc 	.word	0x200005bc
 8008704:	200005c8 	.word	0x200005c8
 8008708:	08023eb8 	.word	0x08023eb8
 800870c:	08023ec8 	.word	0x08023ec8
 8008710:	200005e4 	.word	0x200005e4
 8008714:	200005e8 	.word	0x200005e8
 8008718:	08023ee0 	.word	0x08023ee0
 800871c:	20000604 	.word	0x20000604
 8008720:	20000608 	.word	0x20000608
 8008724:	08023ef8 	.word	0x08023ef8
 8008728:	20000624 	.word	0x20000624
 800872c:	20000628 	.word	0x20000628
 8008730:	08023f14 	.word	0x08023f14
 8008734:	20000644 	.word	0x20000644
 8008738:	20000648 	.word	0x20000648
 800873c:	08023f28 	.word	0x08023f28
 8008740:	20000664 	.word	0x20000664
 8008744:	20000668 	.word	0x20000668
 8008748:	08023f44 	.word	0x08023f44
 800874c:	20000684 	.word	0x20000684
 8008750:	20000688 	.word	0x20000688
 8008754:	08023f58 	.word	0x08023f58
 8008758:	200006a4 	.word	0x200006a4
 800875c:	200006a8 	.word	0x200006a8
 8008760:	08023f74 	.word	0x08023f74
 8008764:	200006c4 	.word	0x200006c4
 8008768:	200006c8 	.word	0x200006c8
 800876c:	08023f8c 	.word	0x08023f8c
 8008770:	200006e4 	.word	0x200006e4
 8008774:	200006e8 	.word	0x200006e8
 8008778:	08023fa0 	.word	0x08023fa0
 800877c:	20000704 	.word	0x20000704
 8008780:	20000708 	.word	0x20000708
 8008784:	08023fc0 	.word	0x08023fc0
 8008788:	20000724 	.word	0x20000724
 800878c:	20000728 	.word	0x20000728
 8008790:	08023fd8 	.word	0x08023fd8
 8008794:	20000744 	.word	0x20000744
 8008798:	20000748 	.word	0x20000748
 800879c:	08023ff0 	.word	0x08023ff0
 80087a0:	20000764 	.word	0x20000764
 80087a4:	20000768 	.word	0x20000768
 80087a8:	08024004 	.word	0x08024004
 80087ac:	20000784 	.word	0x20000784
 80087b0:	20000788 	.word	0x20000788
 80087b4:	08024020 	.word	0x08024020
 80087b8:	4a83      	ldr	r2, [pc, #524]	; (80089c8 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80087ba:	4984      	ldr	r1, [pc, #528]	; (80089cc <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 80087bc:	4884      	ldr	r0, [pc, #528]	; (80089d0 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 80087be:	f00c f915 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80087c2:	4884      	ldr	r0, [pc, #528]	; (80089d4 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80087c4:	f7fe fa28 	bl	8006c18 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 80087c8:	f240 2357 	movw	r3, #599	; 0x257
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	4b82      	ldr	r3, [pc, #520]	; (80089d8 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	4b82      	ldr	r3, [pc, #520]	; (80089dc <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 80087d4:	4a7c      	ldr	r2, [pc, #496]	; (80089c8 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80087d6:	497f      	ldr	r1, [pc, #508]	; (80089d4 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80087d8:	4881      	ldr	r0, [pc, #516]	; (80089e0 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80087da:	f00c f907 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80087de:	4881      	ldr	r0, [pc, #516]	; (80089e4 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80087e0:	f7fe fb00 	bl	8006de4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 80087e4:	f44f 731c 	mov.w	r3, #624	; 0x270
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	4b7b      	ldr	r3, [pc, #492]	; (80089d8 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	4b7e      	ldr	r3, [pc, #504]	; (80089e8 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80087f0:	4a75      	ldr	r2, [pc, #468]	; (80089c8 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80087f2:	497c      	ldr	r1, [pc, #496]	; (80089e4 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80087f4:	487d      	ldr	r0, [pc, #500]	; (80089ec <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80087f6:	f00c f8f9 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80087fa:	487d      	ldr	r0, [pc, #500]	; (80089f0 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80087fc:	f7fe fc4c 	bl	8007098 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 8008800:	f240 2395 	movw	r3, #661	; 0x295
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	4b74      	ldr	r3, [pc, #464]	; (80089d8 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	4b7a      	ldr	r3, [pc, #488]	; (80089f4 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800880c:	4a6e      	ldr	r2, [pc, #440]	; (80089c8 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800880e:	4978      	ldr	r1, [pc, #480]	; (80089f0 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008810:	4879      	ldr	r0, [pc, #484]	; (80089f8 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8008812:	f00c f8eb 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8008816:	4879      	ldr	r0, [pc, #484]	; (80089fc <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008818:	f7fe fd12 	bl	8007240 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 800881c:	f240 23a9 	movw	r3, #681	; 0x2a9
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	4b6d      	ldr	r3, [pc, #436]	; (80089d8 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	4b76      	ldr	r3, [pc, #472]	; (8008a00 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8008828:	4a67      	ldr	r2, [pc, #412]	; (80089c8 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800882a:	4974      	ldr	r1, [pc, #464]	; (80089fc <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800882c:	4875      	ldr	r0, [pc, #468]	; (8008a04 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 800882e:	f00c f8dd 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8008832:	4875      	ldr	r0, [pc, #468]	; (8008a08 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008834:	f7fe fd74 	bl	8007320 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 8008838:	f240 23ba 	movw	r3, #698	; 0x2ba
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	4b66      	ldr	r3, [pc, #408]	; (80089d8 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	4b72      	ldr	r3, [pc, #456]	; (8008a0c <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8008844:	4a60      	ldr	r2, [pc, #384]	; (80089c8 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008846:	4970      	ldr	r1, [pc, #448]	; (8008a08 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008848:	4871      	ldr	r0, [pc, #452]	; (8008a10 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800884a:	f00c f8cf 	bl	80149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	f040 80b4 	bne.w	80089be <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800885c:	4293      	cmp	r3, r2
 800885e:	f040 80ae 	bne.w	80089be <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8008862:	486b      	ldr	r0, [pc, #428]	; (8008a10 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008864:	f00c f8ec 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008868:	4867      	ldr	r0, [pc, #412]	; (8008a08 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800886a:	f7fe fe0f 	bl	800748c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 800886e:	4865      	ldr	r0, [pc, #404]	; (8008a04 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8008870:	f00c f8e6 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008874:	4861      	ldr	r0, [pc, #388]	; (80089fc <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008876:	f7fe fe4d 	bl	8007514 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 800887a:	485f      	ldr	r0, [pc, #380]	; (80089f8 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800887c:	f00c f8e0 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008880:	485b      	ldr	r0, [pc, #364]	; (80089f0 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008882:	f7fe fe8b 	bl	800759c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8008886:	4859      	ldr	r0, [pc, #356]	; (80089ec <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8008888:	f00c f8da 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 800888c:	4855      	ldr	r0, [pc, #340]	; (80089e4 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800888e:	f7fe fec9 	bl	8007624 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8008892:	4853      	ldr	r0, [pc, #332]	; (80089e0 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8008894:	f00c f8d4 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008898:	484e      	ldr	r0, [pc, #312]	; (80089d4 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800889a:	f7fe ff07 	bl	80076ac <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800889e:	484c      	ldr	r0, [pc, #304]	; (80089d0 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 80088a0:	f00c f8ce 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 80088a4:	4849      	ldr	r0, [pc, #292]	; (80089cc <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 80088a6:	f7fe ff45 	bl	8007734 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80088aa:	485a      	ldr	r0, [pc, #360]	; (8008a14 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 80088ac:	f00c f8c8 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 80088b0:	4859      	ldr	r0, [pc, #356]	; (8008a18 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 80088b2:	f7fe ff83 	bl	80077bc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 80088b6:	4859      	ldr	r0, [pc, #356]	; (8008a1c <_Z41__static_initialization_and_destruction_0ii+0x628>)
 80088b8:	f00c f8c2 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 80088bc:	4858      	ldr	r0, [pc, #352]	; (8008a20 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 80088be:	f7fe ffc1 	bl	8007844 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80088c2:	4858      	ldr	r0, [pc, #352]	; (8008a24 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80088c4:	f00c f8bc 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 80088c8:	4857      	ldr	r0, [pc, #348]	; (8008a28 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 80088ca:	f7fe ffff 	bl	80078cc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80088ce:	4857      	ldr	r0, [pc, #348]	; (8008a2c <_Z41__static_initialization_and_destruction_0ii+0x638>)
 80088d0:	f00c f8b6 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 80088d4:	4856      	ldr	r0, [pc, #344]	; (8008a30 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80088d6:	f7ff f83d 	bl	8007954 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80088da:	4856      	ldr	r0, [pc, #344]	; (8008a34 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 80088dc:	f00c f8b0 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 80088e0:	4855      	ldr	r0, [pc, #340]	; (8008a38 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 80088e2:	f7ff f87b 	bl	80079dc <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80088e6:	4855      	ldr	r0, [pc, #340]	; (8008a3c <_Z41__static_initialization_and_destruction_0ii+0x648>)
 80088e8:	f00c f8aa 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 80088ec:	4854      	ldr	r0, [pc, #336]	; (8008a40 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 80088ee:	f7ff f8b9 	bl	8007a64 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80088f2:	4854      	ldr	r0, [pc, #336]	; (8008a44 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 80088f4:	f00c f8a4 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 80088f8:	4853      	ldr	r0, [pc, #332]	; (8008a48 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 80088fa:	f7ff f8f7 	bl	8007aec <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80088fe:	4853      	ldr	r0, [pc, #332]	; (8008a4c <_Z41__static_initialization_and_destruction_0ii+0x658>)
 8008900:	f00c f89e 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008904:	4852      	ldr	r0, [pc, #328]	; (8008a50 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 8008906:	f7ff f935 	bl	8007b74 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 800890a:	4852      	ldr	r0, [pc, #328]	; (8008a54 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 800890c:	f00c f898 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008910:	4851      	ldr	r0, [pc, #324]	; (8008a58 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 8008912:	f7ff f973 	bl	8007bfc <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008916:	4851      	ldr	r0, [pc, #324]	; (8008a5c <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8008918:	f00c f892 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 800891c:	4850      	ldr	r0, [pc, #320]	; (8008a60 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 800891e:	f7ff f9b1 	bl	8007c84 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8008922:	4850      	ldr	r0, [pc, #320]	; (8008a64 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 8008924:	f00c f88c 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008928:	484f      	ldr	r0, [pc, #316]	; (8008a68 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 800892a:	f7ff f9ef 	bl	8007d0c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 800892e:	484f      	ldr	r0, [pc, #316]	; (8008a6c <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8008930:	f00c f886 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008934:	484e      	ldr	r0, [pc, #312]	; (8008a70 <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 8008936:	f7ff fa2d 	bl	8007d94 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 800893a:	484e      	ldr	r0, [pc, #312]	; (8008a74 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 800893c:	f00c f880 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008940:	484d      	ldr	r0, [pc, #308]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 8008942:	f7ff fa6b 	bl	8007e1c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8008946:	484d      	ldr	r0, [pc, #308]	; (8008a7c <_Z41__static_initialization_and_destruction_0ii+0x688>)
 8008948:	f00c f87a 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 800894c:	484c      	ldr	r0, [pc, #304]	; (8008a80 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 800894e:	f7ff faa9 	bl	8007ea4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8008952:	484c      	ldr	r0, [pc, #304]	; (8008a84 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8008954:	f00c f874 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008958:	484b      	ldr	r0, [pc, #300]	; (8008a88 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 800895a:	f7ff fae7 	bl	8007f2c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 800895e:	484b      	ldr	r0, [pc, #300]	; (8008a8c <_Z41__static_initialization_and_destruction_0ii+0x698>)
 8008960:	f00c f86e 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008964:	484a      	ldr	r0, [pc, #296]	; (8008a90 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 8008966:	f7ff fb25 	bl	8007fb4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800896a:	484a      	ldr	r0, [pc, #296]	; (8008a94 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 800896c:	f00c f868 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008970:	4849      	ldr	r0, [pc, #292]	; (8008a98 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 8008972:	f7ff fb63 	bl	800803c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008976:	4849      	ldr	r0, [pc, #292]	; (8008a9c <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 8008978:	f00c f862 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 800897c:	4848      	ldr	r0, [pc, #288]	; (8008aa0 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 800897e:	f7ff fba1 	bl	80080c4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008982:	4848      	ldr	r0, [pc, #288]	; (8008aa4 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8008984:	f00c f85c 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008988:	4847      	ldr	r0, [pc, #284]	; (8008aa8 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800898a:	f7ff fbdf 	bl	800814c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 800898e:	4847      	ldr	r0, [pc, #284]	; (8008aac <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8008990:	f00c f856 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8008994:	4846      	ldr	r0, [pc, #280]	; (8008ab0 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 8008996:	f7ff fc1d 	bl	80081d4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800899a:	4846      	ldr	r0, [pc, #280]	; (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 800899c:	f00c f850 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 80089a0:	4845      	ldr	r0, [pc, #276]	; (8008ab8 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 80089a2:	f7ff fc5b 	bl	800825c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 80089a6:	4845      	ldr	r0, [pc, #276]	; (8008abc <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 80089a8:	f00c f84a 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 80089ac:	4844      	ldr	r0, [pc, #272]	; (8008ac0 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 80089ae:	f7ff fc99 	bl	80082e4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 80089b2:	4844      	ldr	r0, [pc, #272]	; (8008ac4 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 80089b4:	f00c f844 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 80089b8:	4843      	ldr	r0, [pc, #268]	; (8008ac8 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80089ba:	f7ff fcd7 	bl	800836c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	08023ec8 	.word	0x08023ec8
 80089cc:	20000788 	.word	0x20000788
 80089d0:	200007a4 	.word	0x200007a4
 80089d4:	200007a8 	.word	0x200007a8
 80089d8:	0802369c 	.word	0x0802369c
 80089dc:	08024038 	.word	0x08024038
 80089e0:	200007c4 	.word	0x200007c4
 80089e4:	200007c8 	.word	0x200007c8
 80089e8:	0802404c 	.word	0x0802404c
 80089ec:	200007e4 	.word	0x200007e4
 80089f0:	200007e8 	.word	0x200007e8
 80089f4:	08024064 	.word	0x08024064
 80089f8:	20000804 	.word	0x20000804
 80089fc:	20000808 	.word	0x20000808
 8008a00:	0802407c 	.word	0x0802407c
 8008a04:	20000824 	.word	0x20000824
 8008a08:	20000828 	.word	0x20000828
 8008a0c:	0802409c 	.word	0x0802409c
 8008a10:	20000844 	.word	0x20000844
 8008a14:	20000784 	.word	0x20000784
 8008a18:	20000768 	.word	0x20000768
 8008a1c:	20000764 	.word	0x20000764
 8008a20:	20000748 	.word	0x20000748
 8008a24:	20000744 	.word	0x20000744
 8008a28:	20000728 	.word	0x20000728
 8008a2c:	20000724 	.word	0x20000724
 8008a30:	20000708 	.word	0x20000708
 8008a34:	20000704 	.word	0x20000704
 8008a38:	200006e8 	.word	0x200006e8
 8008a3c:	200006e4 	.word	0x200006e4
 8008a40:	200006c8 	.word	0x200006c8
 8008a44:	200006c4 	.word	0x200006c4
 8008a48:	200006a8 	.word	0x200006a8
 8008a4c:	200006a4 	.word	0x200006a4
 8008a50:	20000688 	.word	0x20000688
 8008a54:	20000684 	.word	0x20000684
 8008a58:	20000668 	.word	0x20000668
 8008a5c:	20000664 	.word	0x20000664
 8008a60:	20000648 	.word	0x20000648
 8008a64:	20000644 	.word	0x20000644
 8008a68:	20000628 	.word	0x20000628
 8008a6c:	20000624 	.word	0x20000624
 8008a70:	20000608 	.word	0x20000608
 8008a74:	20000604 	.word	0x20000604
 8008a78:	200005e8 	.word	0x200005e8
 8008a7c:	200005e4 	.word	0x200005e4
 8008a80:	200005c8 	.word	0x200005c8
 8008a84:	200005bc 	.word	0x200005bc
 8008a88:	200005a0 	.word	0x200005a0
 8008a8c:	2000059c 	.word	0x2000059c
 8008a90:	20000580 	.word	0x20000580
 8008a94:	2000057c 	.word	0x2000057c
 8008a98:	20000560 	.word	0x20000560
 8008a9c:	2000055c 	.word	0x2000055c
 8008aa0:	20000540 	.word	0x20000540
 8008aa4:	2000053c 	.word	0x2000053c
 8008aa8:	20000520 	.word	0x20000520
 8008aac:	2000051c 	.word	0x2000051c
 8008ab0:	20000500 	.word	0x20000500
 8008ab4:	200004fc 	.word	0x200004fc
 8008ab8:	200004e0 	.word	0x200004e0
 8008abc:	200004dc 	.word	0x200004dc
 8008ac0:	200004c0 	.word	0x200004c0
 8008ac4:	200004bc 	.word	0x200004bc
 8008ac8:	200004a0 	.word	0x200004a0

08008acc <_GLOBAL__sub_I_rx_buffer>:
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ad4:	2001      	movs	r0, #1
 8008ad6:	f7ff fc8d 	bl	80083f4 <_Z41__static_initialization_and_destruction_0ii>
 8008ada:	bd80      	pop	{r7, pc}

08008adc <_GLOBAL__sub_D_rx_buffer>:
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f7ff fc85 	bl	80083f4 <_Z41__static_initialization_and_destruction_0ii>
 8008aea:	bd80      	pop	{r7, pc}

08008aec <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
    }
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	69db      	ldr	r3, [r3, #28]
    }
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	695b      	ldr	r3, [r3, #20]
    }
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff ffed 	bl	8008b1c <_ZNK10TestResult15getFailureCountEv>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <_ZNK10TestResult9isFailureEv+0x2a>
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ffcf 	bl	8008aec <_ZNK10TestResult11getRunCountEv>
 8008b4e:	4604      	mov	r4, r0
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff ffd7 	bl	8008b04 <_ZNK10TestResult15getIgnoredCountEv>
 8008b56:	4603      	mov	r3, r0
 8008b58:	4423      	add	r3, r4
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <_ZNK10TestResult9isFailureEv+0x2e>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e000      	b.n	8008b64 <_ZNK10TestResult9isFailureEv+0x30>
 8008b62:	2300      	movs	r3, #0
    }
 8008b64:	4618      	mov	r0, r3
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd90      	pop	{r4, r7, pc}

08008b6c <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
    {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f007 fde6 	bl	8010748 <_ZN10TestOutputC1Ev>
 8008b7c:	4a03      	ldr	r2, [pc, #12]	; (8008b8c <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
    }
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	08028770 	.word	0x08028770

08008b90 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
    {
 8008b98:	4a05      	ldr	r2, [pc, #20]	; (8008bb0 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f007 fdef 	bl	8010784 <_ZN10TestOutputD1Ev>
    }
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	08028770 	.word	0x08028770

08008bb4 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
    }
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff ffe7 	bl	8008b90 <_ZN17ConsoleTestOutputD1Ev>
 8008bc2:	2110      	movs	r1, #16
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 fce7 	bl	800a598 <_ZdlPvj>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8008bd4:	b5b0      	push	{r4, r5, r7, lr}
 8008bd6:	b098      	sub	sp, #96	; 0x60
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
    int result = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8008be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff ffc0 	bl	8008b6c <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008bec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008bf0:	4935      	ldr	r1, [pc, #212]	; (8008cc8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f004 f87f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8008bf8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008bfc:	f107 0318 	add.w	r3, r7, #24
 8008c00:	2200      	movs	r2, #0
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 ff6a 	bl	800aadc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8008c08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f004 fc2a 	bl	800d466 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8008c12:	f107 0318 	add.w	r3, r7, #24
 8008c16:	2101      	movs	r1, #1
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f001 ff2f 	bl	800aa7c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8008c1e:	f009 fb21 	bl	8012264 <_ZN12TestRegistry18getCurrentRegistryEv>
 8008c22:	4603      	mov	r3, r0
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	3234      	adds	r2, #52	; 0x34
 8008c28:	6812      	ldr	r2, [r2, #0]
 8008c2a:	f107 0118 	add.w	r1, r7, #24
 8008c2e:	4618      	mov	r0, r3
 8008c30:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8008c32:	f009 fb17 	bl	8012264 <_ZN12TestRegistry18getCurrentRegistryEv>
 8008c36:	4603      	mov	r3, r0
 8008c38:	f107 0008 	add.w	r0, r7, #8
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	f000 f844 	bl	8008ccc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8008c44:	f107 0308 	add.w	r3, r7, #8
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f000 f899 	bl	8008d80 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8008c4e:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8008c50:	f107 0308 	add.w	r3, r7, #8
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 f863 	bl	8008d20 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8008c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10c      	bne.n	8008c7a <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8008c60:	f107 0318 	add.w	r3, r7, #24
 8008c64:	2100      	movs	r1, #0
 8008c66:	4618      	mov	r0, r3
 8008c68:	f002 f83a 	bl	800ace0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f007 fe27 	bl	80108c8 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8008c7a:	f009 faf3 	bl	8012264 <_ZN12TestRegistry18getCurrentRegistryEv>
 8008c7e:	4604      	mov	r4, r0
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	3344      	adds	r3, #68	; 0x44
 8008c84:	681d      	ldr	r5, [r3, #0]
 8008c86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008c8a:	490f      	ldr	r1, [pc, #60]	; (8008cc8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f004 f832 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8008c92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008c96:	4619      	mov	r1, r3
 8008c98:	4620      	mov	r0, r4
 8008c9a:	47a8      	blx	r5
 8008c9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f004 fbe0 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return result;
 8008ca6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008ca8:	f107 0318 	add.w	r3, r7, #24
 8008cac:	4618      	mov	r0, r3
 8008cae:	f001 ff4d 	bl	800ab4c <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8008cb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff ff6a 	bl	8008b90 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8008cbc:	4623      	mov	r3, r4
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3760      	adds	r7, #96	; 0x60
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	080240b4 	.word	0x080240b4

08008ccc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8008ccc:	b590      	push	{r4, r7, lr}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8008cda:	4a0f      	ldr	r2, [pc, #60]	; (8008d18 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	605a      	str	r2, [r3, #4]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	609a      	str	r2, [r3, #8]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8008cf2:	2241      	movs	r2, #65	; 0x41
 8008cf4:	4909      	ldr	r1, [pc, #36]	; (8008d1c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8008cf6:	2038      	movs	r0, #56	; 0x38
 8008cf8:	f001 fc3a 	bl	800a570 <_ZnwjPKci>
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	68b9      	ldr	r1, [r7, #8]
 8008d02:	4620      	mov	r0, r4
 8008d04:	f00c f84a 	bl	8014d9c <_ZN20CommandLineArgumentsC1EiPKPKc>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	609c      	str	r4, [r3, #8]
}
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd90      	pop	{r4, r7, pc}
 8008d16:	bf00      	nop
 8008d18:	080280fc 	.word	0x080280fc
 8008d1c:	080240c8 	.word	0x080240c8

08008d20 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	4a0c      	ldr	r2, [pc, #48]	; (8008d5c <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	3204      	adds	r2, #4
 8008d3a:	6812      	ldr	r2, [r2, #0]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	4790      	blx	r2
    delete output_;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d004      	beq.n	8008d52 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	3204      	adds	r2, #4
 8008d4c:	6812      	ldr	r2, [r2, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	4790      	blx	r2
}
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	080280fc 	.word	0x080280fc

08008d60 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
}
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff ffd9 	bl	8008d20 <_ZN21CommandLineTestRunnerD1Ev>
 8008d6e:	2110      	movs	r1, #16
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 fc11 	bl	800a598 <_ZdlPvj>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8008d80:	b5b0      	push	{r4, r5, r7, lr}
 8008d82:	b08c      	sub	sp, #48	; 0x30
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8008d8c:	f107 031c 	add.w	r3, r7, #28
 8008d90:	4929      	ldr	r1, [pc, #164]	; (8008e38 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8008d92:	4618      	mov	r0, r3
 8008d94:	f003 ffaf 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8008d98:	f107 021c 	add.w	r2, r7, #28
 8008d9c:	f107 0308 	add.w	r3, r7, #8
 8008da0:	4611      	mov	r1, r2
 8008da2:	4618      	mov	r0, r3
 8008da4:	f008 fe1c 	bl	80119e0 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8008da8:	f107 031c 	add.w	r3, r7, #28
 8008dac:	4618      	mov	r0, r3
 8008dae:	f004 fb5a 	bl	800d466 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3334      	adds	r3, #52	; 0x34
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f107 0108 	add.w	r1, r7, #8
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68da      	ldr	r2, [r3, #12]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	333c      	adds	r3, #60	; 0x3c
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	4798      	blx	r3
 8008dda:	4603      	mov	r3, r0
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa3e 	bl	8009260 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f8ac 	bl	8008f48 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8008df0:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68dd      	ldr	r5, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3344      	adds	r3, #68	; 0x44
 8008dfe:	681c      	ldr	r4, [r3, #0]
 8008e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e04:	490c      	ldr	r1, [pc, #48]	; (8008e38 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8008e06:	4618      	mov	r0, r3
 8008e08:	f003 ff75 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8008e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e10:	4619      	mov	r1, r3
 8008e12:	4628      	mov	r0, r5
 8008e14:	47a0      	blx	r4
 8008e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f004 fb23 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return testResult;
 8008e20:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8008e22:	f107 0308 	add.w	r3, r7, #8
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 faaa 	bl	8009380 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8008e2c:	4623      	mov	r3, r4
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3730      	adds	r7, #48	; 0x30
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bdb0      	pop	{r4, r5, r7, pc}
 8008e36:	bf00      	nop
 8008e38:	080240ec 	.word	0x080240ec

08008e3c <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8008e3c:	b5b0      	push	{r4, r5, r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68dd      	ldr	r5, [r3, #12]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3330      	adds	r3, #48	; 0x30
 8008e50:	681c      	ldr	r4, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f00c fce0 	bl	801581c <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4628      	mov	r0, r5
 8008e62:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68dd      	ldr	r5, [r3, #12]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	332c      	adds	r3, #44	; 0x2c
 8008e70:	681c      	ldr	r4, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f00c fcdc 	bl	8015834 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4628      	mov	r0, r5
 8008e82:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f00c fc2b 	bl	80156e4 <_ZNK20CommandLineArguments9isVerboseEv>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d009      	beq.n	8008ea8 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	3320      	adds	r3, #32
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f00c fc25 	bl	80156fc <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d009      	beq.n	8008ecc <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3320      	adds	r3, #32
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2102      	movs	r1, #2
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f00c fc1f 	bl	8015714 <_ZNK20CommandLineArguments7isColorEv>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d008      	beq.n	8008eee <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3324      	adds	r3, #36	; 0x24
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4610      	mov	r0, r2
 8008eec:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f00c fc4a 	bl	801578c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d008      	beq.n	8008f10 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3360      	adds	r3, #96	; 0x60
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f00c fc2d 	bl	8015774 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f009 fa19 	bl	801235c <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f00c fc50 	bl	80157d4 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 8008f3a:	f00b fadb 	bl	80144f4 <_ZN10UtestShell14setCrashOnFailEv>
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008f48 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8008f48:	b5b0      	push	{r4, r5, r7, lr}
 8008f4a:	b094      	sub	sp, #80	; 0x50
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff ff73 	bl	8008e3c <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f00c fc1c 	bl	80157a4 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8008f6c:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f00c fbda 	bl	801572c <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d019      	beq.n	8008fb2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	f107 0308 	add.w	r3, r7, #8
 8008f86:	4611      	mov	r1, r2
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f009 fbaf 	bl	80126ec <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68da      	ldr	r2, [r3, #12]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	3320      	adds	r3, #32
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f107 0108 	add.w	r1, r7, #8
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
        return 0;
 8008fa4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008fa6:	f107 0308 	add.w	r3, r7, #8
 8008faa:	4618      	mov	r0, r3
 8008fac:	f009 fbd6 	bl	801275c <_ZN10TestResultD1Ev>
 8008fb0:	e0e1      	b.n	8009176 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f00c fbc4 	bl	8015744 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d019      	beq.n	8008ff6 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	f107 0308 	add.w	r3, r7, #8
 8008fca:	4611      	mov	r1, r2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f009 fb8d 	bl	80126ec <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3324      	adds	r3, #36	; 0x24
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f107 0108 	add.w	r1, r7, #8
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
        return 0;
 8008fe8:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008fea:	f107 0308 	add.w	r3, r7, #8
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f009 fbb4 	bl	801275c <_ZN10TestResultD1Ev>
 8008ff4:	e0bf      	b.n	8009176 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f00c fbae 	bl	801575c <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d019      	beq.n	800903a <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	f107 0308 	add.w	r3, r7, #8
 800900e:	4611      	mov	r1, r2
 8009010:	4618      	mov	r0, r3
 8009012:	f009 fb6b 	bl	80126ec <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3328      	adds	r3, #40	; 0x28
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f107 0108 	add.w	r1, r7, #8
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
        return 0;
 800902c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800902e:	f107 0308 	add.w	r3, r7, #8
 8009032:	4618      	mov	r0, r3
 8009034:	f009 fb92 	bl	801275c <_ZN10TestResultD1Ev>
 8009038:	e09d      	b.n	8009176 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	4618      	mov	r0, r3
 8009040:	f00c fbbc 	bl	80157bc <_ZNK20CommandLineArguments11isReversingEv>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d008      	beq.n	800905c <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	331c      	adds	r3, #28
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3

    if (arguments_->isShuffling())
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	4618      	mov	r0, r3
 8009062:	f00c fbc3 	bl	80157ec <_ZNK20CommandLineArguments11isShufflingEv>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d023      	beq.n	80090b4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	332c      	adds	r3, #44	; 0x2c
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4941      	ldr	r1, [pc, #260]	; (8009180 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 800907c:	4610      	mov	r0, r2
 800907e:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685d      	ldr	r5, [r3, #4]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3334      	adds	r3, #52	; 0x34
 800908c:	681c      	ldr	r4, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	4618      	mov	r0, r3
 8009094:	f00c fbb6 	bl	8015804 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8009098:	4603      	mov	r3, r0
 800909a:	4619      	mov	r1, r3
 800909c:	4628      	mov	r0, r5
 800909e:	47a0      	blx	r4
        output_->print("\n");
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	332c      	adds	r3, #44	; 0x2c
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4935      	ldr	r1, [pc, #212]	; (8009184 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 80090b0:	4610      	mov	r0, r2
 80090b2:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 80090b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80090ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090bc:	429a      	cmp	r2, r3
 80090be:	bf8c      	ite	hi
 80090c0:	2301      	movhi	r3, #1
 80090c2:	2300      	movls	r3, #0
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d04e      	beq.n	8009168 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f00c fb8c 	bl	80157ec <_ZNK20CommandLineArguments11isShufflingEv>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00f      	beq.n	80090fa <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68dd      	ldr	r5, [r3, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3318      	adds	r3, #24
 80090e6:	681c      	ldr	r4, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f00c fb89 	bl	8015804 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80090f2:	4603      	mov	r3, r0
 80090f4:	4619      	mov	r1, r3
 80090f6:	4628      	mov	r0, r5
 80090f8:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6858      	ldr	r0, [r3, #4]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3340      	adds	r3, #64	; 0x40
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800910a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800910c:	4798      	blx	r3
        TestResult tr(*output_);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	f107 0308 	add.w	r3, r7, #8
 8009116:	4611      	mov	r1, r2
 8009118:	4618      	mov	r0, r3
 800911a:	f009 fae7 	bl	80126ec <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68da      	ldr	r2, [r3, #12]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3314      	adds	r3, #20
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f107 0108 	add.w	r1, r7, #8
 8009130:	4610      	mov	r0, r2
 8009132:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8009134:	f107 0308 	add.w	r3, r7, #8
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff fcef 	bl	8008b1c <_ZNK10TestResult15getFailureCountEv>
 800913e:	4602      	mov	r2, r0
 8009140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009142:	4413      	add	r3, r2
 8009144:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 8009146:	f107 0308 	add.w	r3, r7, #8
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff fcf2 	bl	8008b34 <_ZNK10TestResult9isFailureEv>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 8009156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009158:	3301      	adds	r3, #1
 800915a:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 800915c:	f107 0308 	add.w	r3, r7, #8
 8009160:	4618      	mov	r0, r3
 8009162:	f009 fafb 	bl	801275c <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8009166:	e7a5      	b.n	80090b4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8009168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 800916e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8009170:	e000      	b.n	8009174 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8009172:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8009174:	bf00      	nop
 8009176:	4623      	mov	r3, r4
}
 8009178:	4618      	mov	r0, r3
 800917a:	3750      	adds	r7, #80	; 0x50
 800917c:	46bd      	mov	sp, r7
 800917e:	bdb0      	pop	{r4, r5, r7, pc}
 8009180:	08024100 	.word	0x08024100
 8009184:	0802412c 	.word	0x0802412c

08009188 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8009188:	b590      	push	{r4, r7, lr}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8009190:	229d      	movs	r2, #157	; 0x9d
 8009192:	4906      	ldr	r1, [pc, #24]	; (80091ac <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8009194:	201c      	movs	r0, #28
 8009196:	f001 f9eb 	bl	800a570 <_ZnwjPKci>
 800919a:	4604      	mov	r4, r0
 800919c:	4620      	mov	r0, r4
 800919e:	f005 f955 	bl	800e44c <_ZN18TeamCityTestOutputC1Ev>
 80091a2:	4623      	mov	r3, r4
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd90      	pop	{r4, r7, pc}
 80091ac:	080240c8 	.word	0x080240c8

080091b0 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 80091b0:	b590      	push	{r4, r7, lr}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 80091ba:	22a2      	movs	r2, #162	; 0xa2
 80091bc:	490a      	ldr	r1, [pc, #40]	; (80091e8 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 80091be:	2014      	movs	r0, #20
 80091c0:	f001 f9d6 	bl	800a570 <_ZnwjPKci>
 80091c4:	4604      	mov	r4, r0
 80091c6:	4620      	mov	r0, r4
 80091c8:	f000 f980 	bl	80094cc <_ZN15JUnitTestOutputC1Ev>
 80091cc:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 fbb2 	bl	8009940 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 80091dc:	68fb      	ldr	r3, [r7, #12]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd90      	pop	{r4, r7, pc}
 80091e6:	bf00      	nop
 80091e8:	080240c8 	.word	0x080240c8

080091ec <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 80091ec:	b590      	push	{r4, r7, lr}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 80091f4:	22ab      	movs	r2, #171	; 0xab
 80091f6:	4906      	ldr	r1, [pc, #24]	; (8009210 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 80091f8:	2010      	movs	r0, #16
 80091fa:	f001 f9b9 	bl	800a570 <_ZnwjPKci>
 80091fe:	4604      	mov	r4, r0
 8009200:	4620      	mov	r0, r4
 8009202:	f7ff fcb3 	bl	8008b6c <_ZN17ConsoleTestOutputC1Ev>
 8009206:	4623      	mov	r3, r4
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	bd90      	pop	{r4, r7, pc}
 8009210:	080240c8 	.word	0x080240c8

08009214 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8009214:	b590      	push	{r4, r7, lr}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8009220:	22b0      	movs	r2, #176	; 0xb0
 8009222:	490e      	ldr	r1, [pc, #56]	; (800925c <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8009224:	2018      	movs	r0, #24
 8009226:	f001 f9a3 	bl	800a570 <_ZnwjPKci>
 800922a:	4604      	mov	r4, r0
 800922c:	4620      	mov	r0, r4
 800922e:	f007 ff83 	bl	8011138 <_ZN19CompositeTestOutputC1Ev>
 8009232:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	335c      	adds	r3, #92	; 0x5c
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68b9      	ldr	r1, [r7, #8]
 800923e:	6978      	ldr	r0, [r7, #20]
 8009240:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3360      	adds	r3, #96	; 0x60
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	6978      	ldr	r0, [r7, #20]
 800924e:	4798      	blx	r3
  return composite;
 8009250:	697b      	ldr	r3, [r7, #20]
}
 8009252:	4618      	mov	r0, r3
 8009254:	371c      	adds	r7, #28
 8009256:	46bd      	mov	sp, r7
 8009258:	bd90      	pop	{r4, r7, pc}
 800925a:	bf00      	nop
 800925c:	080240c8 	.word	0x080240c8

08009260 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8009260:	b5b0      	push	{r4, r5, r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	4618      	mov	r0, r3
 8009272:	f00b fe4f 	bl	8014f14 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8009276:	4603      	mov	r3, r0
 8009278:	f083 0301 	eor.w	r3, r3, #1
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d029      	beq.n	80092d6 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3310      	adds	r3, #16
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
 800928e:	4602      	mov	r2, r0
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685d      	ldr	r5, [r3, #4]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	332c      	adds	r3, #44	; 0x2c
 80092a0:	681c      	ldr	r4, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f00c fa10 	bl	80156cc <_ZNK20CommandLineArguments8needHelpEv>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d006      	beq.n	80092c0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f00c f9fa 	bl	80156b0 <_ZNK20CommandLineArguments4helpEv>
 80092bc:	4603      	mov	r3, r0
 80092be:	e005      	b.n	80092cc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f00c f9e5 	bl	8015694 <_ZNK20CommandLineArguments5usageEv>
 80092ca:	4603      	mov	r3, r0
 80092cc:	4619      	mov	r1, r3
 80092ce:	4628      	mov	r0, r5
 80092d0:	47a0      	blx	r4
    return false;
 80092d2:	2300      	movs	r3, #0
 80092d4:	e050      	b.n	8009378 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	4618      	mov	r0, r3
 80092dc:	f00d f84c 	bl	8016378 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d02c      	beq.n	8009340 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	330c      	adds	r3, #12
 80092ec:	681c      	ldr	r4, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f00d f864 	bl	80163c0 <_ZNK20CommandLineArguments14getPackageNameEv>
 80092f8:	4603      	mov	r3, r0
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	47a0      	blx	r4
 8009300:	4602      	mov	r2, r0
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	4618      	mov	r0, r3
 800930c:	f00c f9ea 	bl	80156e4 <_ZNK20CommandLineArguments9isVerboseEv>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d02f      	beq.n	8009376 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3314      	adds	r3, #20
 800931c:	681c      	ldr	r4, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685d      	ldr	r5, [r3, #4]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3310      	adds	r3, #16
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
 800932e:	4603      	mov	r3, r0
 8009330:	461a      	mov	r2, r3
 8009332:	4629      	mov	r1, r5
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	47a0      	blx	r4
 8009338:	4602      	mov	r2, r0
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	605a      	str	r2, [r3, #4]
 800933e:	e01a      	b.n	8009376 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	4618      	mov	r0, r3
 8009346:	f00d f829 	bl	801639c <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d009      	beq.n	8009364 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3308      	adds	r3, #8
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	4798      	blx	r3
 800935c:	4602      	mov	r2, r0
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	605a      	str	r2, [r3, #4]
 8009362:	e008      	b.n	8009376 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3310      	adds	r3, #16
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	4798      	blx	r3
 8009370:	4602      	mov	r2, r0
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	605a      	str	r2, [r3, #4]
  return true;
 8009376:	2301      	movs	r3, #1
}
 8009378:	4618      	mov	r0, r3
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bdb0      	pop	{r4, r5, r7, pc}

08009380 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	4a05      	ldr	r2, [pc, #20]	; (80093a0 <_ZN16SetPointerPluginD1Ev+0x20>)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4618      	mov	r0, r3
 8009392:	f008 f9e7 	bl	8011764 <_ZN10TestPluginD1Ev>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	0802887c 	.word	0x0802887c

080093a4 <_ZN16SetPointerPluginD0Ev>:
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff ffe7 	bl	8009380 <_ZN16SetPointerPluginD1Ev>
 80093b2:	2114      	movs	r1, #20
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f001 f8ef 	bl	800a598 <_ZdlPvj>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
        return checkCount_;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	691b      	ldr	r3, [r3, #16]
    }
 80093d0:	4618      	mov	r0, r3
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4910      	ldr	r1, [pc, #64]	; (8009428 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80093e8:	4618      	mov	r0, r3
 80093ea:	f003 fc84 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	609a      	str	r2, [r3, #8]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	60da      	str	r2, [r3, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	741a      	strb	r2, [r3, #16]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	3314      	adds	r3, #20
 8009404:	4908      	ldr	r1, [pc, #32]	; (8009428 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8009406:	4618      	mov	r0, r3
 8009408:	f003 fc75 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	61da      	str	r2, [r3, #28]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	621a      	str	r2, [r3, #32]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	08024130 	.word	0x08024130

0800942c <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	605a      	str	r2, [r3, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	609a      	str	r2, [r3, #8]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	60da      	str	r2, [r3, #12]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	611a      	str	r2, [r3, #16]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3314      	adds	r3, #20
 8009456:	4907      	ldr	r1, [pc, #28]	; (8009474 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8009458:	4618      	mov	r0, r3
 800945a:	f003 fc4c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	61da      	str	r2, [r3, #28]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	621a      	str	r2, [r3, #32]
    {
    }
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4618      	mov	r0, r3
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	08024130 	.word	0x08024130

08009478 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3314      	adds	r3, #20
 8009484:	4618      	mov	r0, r3
 8009486:	f003 ffee 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4618      	mov	r0, r3
 80094a0:	f7ff ffc4 	bl	800942c <_ZN20JUnitTestGroupResultC1Ev>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3328      	adds	r3, #40	; 0x28
 80094a8:	4907      	ldr	r1, [pc, #28]	; (80094c8 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80094aa:	4618      	mov	r0, r3
 80094ac:	f003 fc23 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	3330      	adds	r3, #48	; 0x30
 80094b4:	4904      	ldr	r1, [pc, #16]	; (80094c8 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80094b6:	4618      	mov	r0, r3
 80094b8:	f003 fc1d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	08024130 	.word	0x08024130

080094cc <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 80094cc:	b590      	push	{r4, r7, lr}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f007 f936 	bl	8010748 <_ZN10TestOutputC1Ev>
 80094dc:	4a09      	ldr	r2, [pc, #36]	; (8009504 <_ZN15JUnitTestOutputC1Ev+0x38>)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	601a      	str	r2, [r3, #0]
 80094e2:	224d      	movs	r2, #77	; 0x4d
 80094e4:	4908      	ldr	r1, [pc, #32]	; (8009508 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 80094e6:	2038      	movs	r0, #56	; 0x38
 80094e8:	f001 f842 	bl	800a570 <_ZnwjPKci>
 80094ec:	4604      	mov	r4, r0
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7ff ffd0 	bl	8009494 <_ZN19JUnitTestOutputImplC1Ev>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	611c      	str	r4, [r3, #16]
{
}
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd90      	pop	{r4, r7, pc}
 8009502:	bf00      	nop
 8009504:	0802811c 	.word	0x0802811c
 8009508:	08024134 	.word	0x08024134

0800950c <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3330      	adds	r3, #48	; 0x30
 8009518:	4618      	mov	r0, r3
 800951a:	f003 ffa4 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	3328      	adds	r3, #40	; 0x28
 8009522:	4618      	mov	r0, r3
 8009524:	f003 ff9f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff ffa4 	bl	8009478 <_ZN20JUnitTestGroupResultD1Ev>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 800953c:	b590      	push	{r4, r7, lr}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	4a0c      	ldr	r2, [pc, #48]	; (8009578 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f838 	bl	80095c0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	691c      	ldr	r4, [r3, #16]
 8009554:	2c00      	cmp	r4, #0
 8009556:	d006      	beq.n	8009566 <_ZN15JUnitTestOutputD1Ev+0x2a>
 8009558:	4620      	mov	r0, r4
 800955a:	f7ff ffd7 	bl	800950c <_ZN19JUnitTestOutputImplD1Ev>
 800955e:	2138      	movs	r1, #56	; 0x38
 8009560:	4620      	mov	r0, r4
 8009562:	f001 f819 	bl	800a598 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4618      	mov	r0, r3
 800956a:	f007 f90b 	bl	8010784 <_ZN10TestOutputD1Ev>
}
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4618      	mov	r0, r3
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	bd90      	pop	{r4, r7, pc}
 8009578:	0802811c 	.word	0x0802811c

0800957c <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
}
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff ffd9 	bl	800953c <_ZN15JUnitTestOutputD1Ev>
 800958a:	2114      	movs	r1, #20
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 f803 	bl	800a598 <_ZdlPvj>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3314      	adds	r3, #20
 80095a8:	4618      	mov	r0, r3
 80095aa:	f003 ff5c 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f003 ff58 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4618      	mov	r0, r3
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 80095c0:	b590      	push	{r4, r7, lr}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	2200      	movs	r2, #0
 80095ce:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	2200      	movs	r2, #0
 80095d6:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	f103 0414 	add.w	r4, r3, #20
 80095e0:	f107 0308 	add.w	r3, r7, #8
 80095e4:	491d      	ldr	r1, [pc, #116]	; (800965c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 80095e6:	4618      	mov	r0, r3
 80095e8:	f003 fb85 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80095ec:	f107 0308 	add.w	r3, r7, #8
 80095f0:	4619      	mov	r1, r3
 80095f2:	4620      	mov	r0, r4
 80095f4:	f003 fbeb 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	4618      	mov	r0, r3
 80095fe:	f003 ff32 	bl	800d466 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	617b      	str	r3, [r7, #20]
    while (cur) {
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d018      	beq.n	8009642 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d004      	beq.n	8009628 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	3204      	adds	r2, #4
 8009622:	6812      	ldr	r2, [r2, #0]
 8009624:	4618      	mov	r0, r3
 8009626:	4790      	blx	r2
        delete cur;
 8009628:	697c      	ldr	r4, [r7, #20]
 800962a:	2c00      	cmp	r4, #0
 800962c:	d006      	beq.n	800963c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 800962e:	4620      	mov	r0, r4
 8009630:	f7ff ffb4 	bl	800959c <_ZN23JUnitTestCaseResultNodeD1Ev>
 8009634:	2128      	movs	r1, #40	; 0x28
 8009636:	4620      	mov	r0, r4
 8009638:	f000 ffae 	bl	800a598 <_ZdlPvj>
        cur = tmp;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	617b      	str	r3, [r7, #20]
    while (cur) {
 8009640:	e7e3      	b.n	800960a <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	2200      	movs	r2, #0
 8009648:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	2200      	movs	r2, #0
 8009650:	621a      	str	r2, [r3, #32]
}
 8009652:	bf00      	nop
 8009654:	371c      	adds	r7, #28
 8009656:	46bd      	mov	sp, r7
 8009658:	bd90      	pop	{r4, r7, pc}
 800965a:	bf00      	nop
 800965c:	08024130 	.word	0x08024130

08009660 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 800968a:	b590      	push	{r4, r7, lr}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	6a1c      	ldr	r4, [r3, #32]
 800969a:	6838      	ldr	r0, [r7, #0]
 800969c:	f009 f9c6 	bl	8012a2c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80096a0:	4603      	mov	r3, r0
 80096a2:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	6a1c      	ldr	r4, [r3, #32]
 80096aa:	6838      	ldr	r0, [r7, #0]
 80096ac:	f7ff fe8a 	bl	80093c4 <_ZNK10TestResult13getCheckCountEv>
 80096b0:	4603      	mov	r3, r0
 80096b2:	6223      	str	r3, [r4, #32]
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd90      	pop	{r4, r7, pc}

080096bc <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 80096d2:	b590      	push	{r4, r7, lr}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691c      	ldr	r4, [r3, #16]
 80096e0:	6838      	ldr	r0, [r7, #0]
 80096e2:	f009 f9af 	bl	8012a44 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 80096e6:	4603      	mov	r3, r0
 80096e8:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3364      	adds	r3, #100	; 0x64
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	4798      	blx	r3
    resetTestGroupResult();
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff ff62 	bl	80095c0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	bd90      	pop	{r4, r7, pc}

08009704 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8009704:	b590      	push	{r4, r7, lr}
 8009706:	b089      	sub	sp, #36	; 0x24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	3201      	adds	r2, #1
 8009716:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	f103 0414 	add.w	r4, r3, #20
 8009720:	f107 0308 	add.w	r3, r7, #8
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	4618      	mov	r0, r3
 8009728:	f009 fcef 	bl	801310a <_ZNK10UtestShell8getGroupEv>
 800972c:	f107 0308 	add.w	r3, r7, #8
 8009730:	4619      	mov	r1, r3
 8009732:	4620      	mov	r0, r4
 8009734:	f003 fb4b 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 8009738:	f107 0308 	add.w	r3, r7, #8
 800973c:	4618      	mov	r0, r3
 800973e:	f003 fe92 	bl	800d466 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8009742:	4b3c      	ldr	r3, [pc, #240]	; (8009834 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4798      	blx	r3
 8009748:	4602      	mov	r2, r0
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d110      	bne.n	800977c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800975a:	2288      	movs	r2, #136	; 0x88
 800975c:	4936      	ldr	r1, [pc, #216]	; (8009838 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800975e:	2028      	movs	r0, #40	; 0x28
 8009760:	f000 ff06 	bl	800a570 <_ZnwjPKci>
 8009764:	4604      	mov	r4, r0
 8009766:	4620      	mov	r0, r4
 8009768:	f7ff fe38 	bl	80093dc <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8009770:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	6912      	ldr	r2, [r2, #16]
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	61d3      	str	r3, [r2, #28]
 800977a:	e013      	b.n	80097a4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 800977c:	228b      	movs	r2, #139	; 0x8b
 800977e:	492e      	ldr	r1, [pc, #184]	; (8009838 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8009780:	2028      	movs	r0, #40	; 0x28
 8009782:	f000 fef5 	bl	800a570 <_ZnwjPKci>
 8009786:	4604      	mov	r4, r0
 8009788:	4620      	mov	r0, r4
 800978a:	f7ff fe27 	bl	80093dc <_ZN23JUnitTestCaseResultNodeC1Ev>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	6a1a      	ldr	r2, [r3, #32]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097a2:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	461c      	mov	r4, r3
 80097ac:	f107 0310 	add.w	r3, r7, #16
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f009 fc9a 	bl	80130ec <_ZNK10UtestShell7getNameEv>
 80097b8:	f107 0310 	add.w	r3, r7, #16
 80097bc:	4619      	mov	r1, r3
 80097be:	4620      	mov	r0, r4
 80097c0:	f003 fb05 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 80097c4:	f107 0310 	add.w	r3, r7, #16
 80097c8:	4618      	mov	r0, r3
 80097ca:	f003 fe4c 	bl	800d466 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	f103 0414 	add.w	r4, r3, #20
 80097d8:	f107 0318 	add.w	r3, r7, #24
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	4618      	mov	r0, r3
 80097e0:	f009 fd55 	bl	801328e <_ZNK10UtestShell7getFileEv>
 80097e4:	f107 0318 	add.w	r3, r7, #24
 80097e8:	4619      	mov	r1, r3
 80097ea:	4620      	mov	r0, r4
 80097ec:	f003 faef 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 80097f0:	f107 0318 	add.w	r3, r7, #24
 80097f4:	4618      	mov	r0, r3
 80097f6:	f003 fe36 	bl	800d466 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	6a1c      	ldr	r4, [r3, #32]
 8009800:	6838      	ldr	r0, [r7, #0]
 8009802:	f009 fd53 	bl	80132ac <_ZNK10UtestShell13getLineNumberEv>
 8009806:	4603      	mov	r3, r0
 8009808:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3318      	adds	r3, #24
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6838      	ldr	r0, [r7, #0]
 8009814:	4798      	blx	r3
 8009816:	4603      	mov	r3, r0
 8009818:	f083 0301 	eor.w	r3, r3, #1
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d004      	beq.n	800982c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	2201      	movs	r2, #1
 800982a:	741a      	strb	r2, [r3, #16]
    }
}
 800982c:	bf00      	nop
 800982e:	3724      	adds	r7, #36	; 0x24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd90      	pop	{r4, r7, pc}
 8009834:	200000a8 	.word	0x200000a8
 8009838:	08024134 	.word	0x08024134

0800983c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b08a      	sub	sp, #40	; 0x28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8009848:	f107 0310 	add.w	r3, r7, #16
 800984c:	4928      	ldr	r1, [pc, #160]	; (80098f0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800984e:	4618      	mov	r0, r3
 8009850:	f003 fa51 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	3328      	adds	r3, #40	; 0x28
 800985a:	4618      	mov	r0, r3
 800985c:	f003 fdf2 	bl	800d444 <_ZNK12SimpleString7isEmptyEv>
 8009860:	4603      	mov	r3, r0
 8009862:	f083 0301 	eor.w	r3, r3, #1
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00f      	beq.n	800988c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009874:	f107 0310 	add.w	r3, r7, #16
 8009878:	4611      	mov	r1, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f003 fe70 	bl	800d560 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8009880:	f107 0310 	add.w	r3, r7, #16
 8009884:	491b      	ldr	r1, [pc, #108]	; (80098f4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8009886:	4618      	mov	r0, r3
 8009888:	f003 fe7c 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 800988c:	f107 0310 	add.w	r3, r7, #16
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	4618      	mov	r0, r3
 8009894:	f003 fe64 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3384      	adds	r3, #132	; 0x84
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f107 0018 	add.w	r0, r7, #24
 80098a4:	f107 0210 	add.w	r2, r7, #16
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	4798      	blx	r3
 80098ac:	f107 0320 	add.w	r3, r7, #32
 80098b0:	4911      	ldr	r1, [pc, #68]	; (80098f8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 80098b2:	4618      	mov	r0, r3
 80098b4:	f003 fa1f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f107 0220 	add.w	r2, r7, #32
 80098be:	f107 0118 	add.w	r1, r7, #24
 80098c2:	4618      	mov	r0, r3
 80098c4:	f003 fe31 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 80098c8:	f107 0320 	add.w	r3, r7, #32
 80098cc:	4618      	mov	r0, r3
 80098ce:	f003 fdca 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80098d2:	f107 0318 	add.w	r3, r7, #24
 80098d6:	4618      	mov	r0, r3
 80098d8:	f003 fdc5 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 80098dc:	f107 0310 	add.w	r3, r7, #16
 80098e0:	4618      	mov	r0, r3
 80098e2:	f003 fdc0 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 80098e6:	bf00      	nop
}
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	3728      	adds	r7, #40	; 0x28
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	08024150 	.word	0x08024150
 80098f4:	0802415c 	.word	0x0802415c
 80098f8:	08024160 	.word	0x08024160

080098fc <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8009908:	6879      	ldr	r1, [r7, #4]
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f003 fa47 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8009910:	4b0a      	ldr	r3, [pc, #40]	; (800993c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8009912:	617b      	str	r3, [r7, #20]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00a      	beq.n	8009932 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	225f      	movs	r2, #95	; 0x5f
 8009922:	4619      	mov	r1, r3
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f003 fbcc 	bl	800d0c2 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	3301      	adds	r3, #1
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	e7f0      	b.n	8009914 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8009932:	bf00      	nop
}
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	08024168 	.word	0x08024168

08009940 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d006      	beq.n	8009960 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	3328      	adds	r3, #40	; 0x28
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	4618      	mov	r0, r3
 800995c:	f003 fa37 	bl	800cdce <_ZN12SimpleStringaSERKS_>
    }
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8009968:	b590      	push	{r4, r7, lr}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3368      	adds	r3, #104	; 0x68
 8009976:	681c      	ldr	r4, [r3, #0]
 8009978:	f107 0308 	add.w	r3, r7, #8
 800997c:	4908      	ldr	r1, [pc, #32]	; (80099a0 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800997e:	4618      	mov	r0, r3
 8009980:	f003 f9b9 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009984:	f107 0308 	add.w	r3, r7, #8
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	47a0      	blx	r4
 800998e:	f107 0308 	add.w	r3, r7, #8
 8009992:	4618      	mov	r0, r3
 8009994:	f003 fd67 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8009998:	bf00      	nop
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	bd90      	pop	{r4, r7, pc}
 80099a0:	08024174 	.word	0x08024174

080099a4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 80099a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a8:	b08a      	sub	sp, #40	; 0x28
 80099aa:	af04      	add	r7, sp, #16
 80099ac:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 80099b4:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 80099ba:	3314      	adds	r3, #20
 80099bc:	4618      	mov	r0, r3
 80099be:	f003 fd25 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 80099c2:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 80099ca:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	4a23      	ldr	r2, [pc, #140]	; (8009a60 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 80099d4:	fba2 2303 	umull	r2, r3, r2, r3
 80099d8:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 80099da:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	691a      	ldr	r2, [r3, #16]
 80099e2:	4b1f      	ldr	r3, [pc, #124]	; (8009a60 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 80099e4:	fba3 1302 	umull	r1, r3, r3, r2
 80099e8:	099b      	lsrs	r3, r3, #6
 80099ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80099ee:	fb01 f303 	mul.w	r3, r1, r3
 80099f2:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 80099f4:	603b      	str	r3, [r7, #0]
 80099f6:	4b1b      	ldr	r3, [pc, #108]	; (8009a64 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4798      	blx	r3
 80099fc:	4603      	mov	r3, r0
 80099fe:	f107 0008 	add.w	r0, r7, #8
 8009a02:	9303      	str	r3, [sp, #12]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	9302      	str	r3, [sp, #8]
 8009a08:	9601      	str	r6, [sp, #4]
 8009a0a:	9500      	str	r5, [sp, #0]
 8009a0c:	4623      	mov	r3, r4
 8009a0e:	4642      	mov	r2, r8
 8009a10:	4915      	ldr	r1, [pc, #84]	; (8009a68 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8009a12:	f004 fa2f 	bl	800de74 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3368      	adds	r3, #104	; 0x68
 8009a1c:	681c      	ldr	r4, [r3, #0]
 8009a1e:	f107 0308 	add.w	r3, r7, #8
 8009a22:	4618      	mov	r0, r3
 8009a24:	f003 fcf2 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	f107 0310 	add.w	r3, r7, #16
 8009a2e:	4611      	mov	r1, r2
 8009a30:	4618      	mov	r0, r3
 8009a32:	f003 f960 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009a36:	f107 0310 	add.w	r3, r7, #16
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	47a0      	blx	r4
 8009a40:	f107 0310 	add.w	r3, r7, #16
 8009a44:	4618      	mov	r0, r3
 8009a46:	f003 fd0e 	bl	800d466 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8009a4a:	f107 0308 	add.w	r3, r7, #8
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f003 fd09 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8009a54:	bf00      	nop
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a5e:	bf00      	nop
 8009a60:	10624dd3 	.word	0x10624dd3
 8009a64:	200000ac 	.word	0x200000ac
 8009a68:	080241a0 	.word	0x080241a0

08009a6c <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8009a6c:	b590      	push	{r4, r7, lr}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3368      	adds	r3, #104	; 0x68
 8009a7a:	681c      	ldr	r4, [r3, #0]
 8009a7c:	f107 0308 	add.w	r3, r7, #8
 8009a80:	4912      	ldr	r1, [pc, #72]	; (8009acc <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8009a82:	4618      	mov	r0, r3
 8009a84:	f003 f937 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009a88:	f107 0308 	add.w	r3, r7, #8
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	47a0      	blx	r4
 8009a92:	f107 0308 	add.w	r3, r7, #8
 8009a96:	4618      	mov	r0, r3
 8009a98:	f003 fce5 	bl	800d466 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3368      	adds	r3, #104	; 0x68
 8009aa2:	681c      	ldr	r4, [r3, #0]
 8009aa4:	f107 0310 	add.w	r3, r7, #16
 8009aa8:	4909      	ldr	r1, [pc, #36]	; (8009ad0 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f003 f923 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009ab0:	f107 0310 	add.w	r3, r7, #16
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	47a0      	blx	r4
 8009aba:	f107 0310 	add.w	r3, r7, #16
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f003 fcd1 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8009ac4:	bf00      	nop
 8009ac6:	371c      	adds	r7, #28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd90      	pop	{r4, r7, pc}
 8009acc:	08024210 	.word	0x08024210
 8009ad0:	08024220 	.word	0x08024220

08009ad4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f003 fc93 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	4619      	mov	r1, r3
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f003 f903 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8009af0:	4a0e      	ldr	r2, [pc, #56]	; (8009b2c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8009af2:	490f      	ldr	r1, [pc, #60]	; (8009b30 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f003 fb13 	bl	800d120 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8009afa:	4a0e      	ldr	r2, [pc, #56]	; (8009b34 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8009afc:	490e      	ldr	r1, [pc, #56]	; (8009b38 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f003 fb0e 	bl	800d120 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8009b04:	4a0d      	ldr	r2, [pc, #52]	; (8009b3c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8009b06:	490e      	ldr	r1, [pc, #56]	; (8009b40 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f003 fb09 	bl	800d120 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8009b0e:	4a0d      	ldr	r2, [pc, #52]	; (8009b44 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8009b10:	490d      	ldr	r1, [pc, #52]	; (8009b48 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f003 fb04 	bl	800d120 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8009b18:	4a0c      	ldr	r2, [pc, #48]	; (8009b4c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8009b1a:	490d      	ldr	r1, [pc, #52]	; (8009b50 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f003 faff 	bl	800d120 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8009b22:	bf00      	nop
}
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	08024230 	.word	0x08024230
 8009b30:	08024238 	.word	0x08024238
 8009b34:	0802423c 	.word	0x0802423c
 8009b38:	08024244 	.word	0x08024244
 8009b3c:	08024248 	.word	0x08024248
 8009b40:	08024250 	.word	0x08024250
 8009b44:	08024254 	.word	0x08024254
 8009b48:	0802425c 	.word	0x0802425c
 8009b4c:	08024260 	.word	0x08024260
 8009b50:	0802426c 	.word	0x0802426c

08009b54 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8009b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b58:	b096      	sub	sp, #88	; 0x58
 8009b5a:	af08      	add	r7, sp, #32
 8009b5c:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	69db      	ldr	r3, [r3, #28]
 8009b64:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8009b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 80b2 	beq.w	8009cd2 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8009b72:	3328      	adds	r3, #40	; 0x28
 8009b74:	4618      	mov	r0, r3
 8009b76:	f003 fc49 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8009b7a:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	3328      	adds	r3, #40	; 0x28
 8009b82:	4618      	mov	r0, r3
 8009b84:	f003 fc5e 	bl	800d444 <_ZNK12SimpleString7isEmptyEv>
 8009b88:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8009b8e:	4c53      	ldr	r4, [pc, #332]	; (8009cdc <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8009b90:	e000      	b.n	8009b94 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8009b92:	4c53      	ldr	r4, [pc, #332]	; (8009ce0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8009b98:	3314      	adds	r3, #20
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f003 fc36 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f003 fc31 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8009baa:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8009bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bae:	6a1a      	ldr	r2, [r3, #32]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8009bb8:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	4a49      	ldr	r2, [pc, #292]	; (8009ce4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8009bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc4:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8009bc6:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	4b45      	ldr	r3, [pc, #276]	; (8009ce4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8009bce:	fba3 1302 	umull	r1, r3, r3, r2
 8009bd2:	099b      	lsrs	r3, r3, #6
 8009bd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009bd8:	fb01 f303 	mul.w	r3, r1, r3
 8009bdc:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8009bde:	603b      	str	r3, [r7, #0]
 8009be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be2:	3314      	adds	r3, #20
 8009be4:	4618      	mov	r0, r3
 8009be6:	f003 fc11 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8009bea:	4602      	mov	r2, r0
 8009bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	f107 0014 	add.w	r0, r7, #20
 8009bf4:	9306      	str	r3, [sp, #24]
 8009bf6:	9205      	str	r2, [sp, #20]
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	9204      	str	r2, [sp, #16]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	9203      	str	r2, [sp, #12]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	9302      	str	r3, [sp, #8]
 8009c04:	9601      	str	r6, [sp, #4]
 8009c06:	9500      	str	r5, [sp, #0]
 8009c08:	4623      	mov	r3, r4
 8009c0a:	4642      	mov	r2, r8
 8009c0c:	4936      	ldr	r1, [pc, #216]	; (8009ce8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8009c0e:	f004 f931 	bl	800de74 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3368      	adds	r3, #104	; 0x68
 8009c18:	681c      	ldr	r4, [r3, #0]
 8009c1a:	f107 0314 	add.w	r3, r7, #20
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f003 fbf4 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8009c24:	4602      	mov	r2, r0
 8009c26:	f107 031c 	add.w	r3, r7, #28
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f003 f862 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009c32:	f107 031c 	add.w	r3, r7, #28
 8009c36:	4619      	mov	r1, r3
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	47a0      	blx	r4
 8009c3c:	f107 031c 	add.w	r3, r7, #28
 8009c40:	4618      	mov	r0, r3
 8009c42:	f003 fc10 	bl	800d466 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c4c:	6a12      	ldr	r2, [r2, #32]
 8009c4e:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8009c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d007      	beq.n	8009c68 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3388      	adds	r3, #136	; 0x88
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	4798      	blx	r3
 8009c66:	e017      	b.n	8009c98 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8009c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6a:	7c1b      	ldrb	r3, [r3, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d013      	beq.n	8009c98 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3368      	adds	r3, #104	; 0x68
 8009c76:	681c      	ldr	r4, [r3, #0]
 8009c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c7c:	491b      	ldr	r1, [pc, #108]	; (8009cec <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f003 f839 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c88:	4619      	mov	r1, r3
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	47a0      	blx	r4
 8009c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c92:	4618      	mov	r0, r3
 8009c94:	f003 fbe7 	bl	800d466 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3368      	adds	r3, #104	; 0x68
 8009c9e:	681c      	ldr	r4, [r3, #0]
 8009ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ca4:	4912      	ldr	r1, [pc, #72]	; (8009cf0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f003 f825 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	47a0      	blx	r4
 8009cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f003 fbd3 	bl	800d466 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8009cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8009cc6:	f107 0314 	add.w	r3, r7, #20
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f003 fbcb 	bl	800d466 <_ZN12SimpleStringD1Ev>
    while (cur) {
 8009cd0:	e749      	b.n	8009b66 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8009cd2:	bf00      	nop
 8009cd4:	3738      	adds	r7, #56	; 0x38
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cdc:	08024130 	.word	0x08024130
 8009ce0:	08024270 	.word	0x08024270
 8009ce4:	10624dd3 	.word	0x10624dd3
 8009ce8:	08024274 	.word	0x08024274
 8009cec:	080242d0 	.word	0x080242d0
 8009cf0:	080242e0 	.word	0x080242e0

08009cf4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8009cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cf6:	b091      	sub	sp, #68	; 0x44
 8009cf8:	af02      	add	r7, sp, #8
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68d9      	ldr	r1, [r3, #12]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3308      	adds	r3, #8
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f107 0210 	add.w	r2, r7, #16
 8009d10:	4610      	mov	r0, r2
 8009d12:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009d14:	f107 0310 	add.w	r3, r7, #16
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f003 fb77 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8009d1e:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	68da      	ldr	r2, [r3, #12]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3314      	adds	r3, #20
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4610      	mov	r0, r2
 8009d30:	4798      	blx	r3
 8009d32:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009d34:	461e      	mov	r6, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3380      	adds	r3, #128	; 0x80
 8009d3c:	681c      	ldr	r4, [r3, #0]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	68d9      	ldr	r1, [r3, #12]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3318      	adds	r3, #24
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f107 0220 	add.w	r2, r7, #32
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	f107 0318 	add.w	r3, r7, #24
 8009d58:	f107 0220 	add.w	r2, r7, #32
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	47a0      	blx	r4
 8009d62:	f107 0318 	add.w	r3, r7, #24
 8009d66:	4618      	mov	r0, r3
 8009d68:	f003 fb50 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f107 0008 	add.w	r0, r7, #8
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	4633      	mov	r3, r6
 8009d76:	462a      	mov	r2, r5
 8009d78:	4924      	ldr	r1, [pc, #144]	; (8009e0c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8009d7a:	f004 f87b 	bl	800de74 <_Z16StringFromFormatPKcz>
 8009d7e:	f107 0318 	add.w	r3, r7, #24
 8009d82:	4618      	mov	r0, r3
 8009d84:	f003 fb6f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8009d88:	f107 0320 	add.w	r3, r7, #32
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f003 fb6a 	bl	800d466 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8009d92:	f107 0310 	add.w	r3, r7, #16
 8009d96:	4618      	mov	r0, r3
 8009d98:	f003 fb65 	bl	800d466 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3368      	adds	r3, #104	; 0x68
 8009da2:	681c      	ldr	r4, [r3, #0]
 8009da4:	f107 0308 	add.w	r3, r7, #8
 8009da8:	4618      	mov	r0, r3
 8009daa:	f003 fb2f 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8009dae:	4602      	mov	r2, r0
 8009db0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009db4:	4611      	mov	r1, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	f002 ff9d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009dbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	47a0      	blx	r4
 8009dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f003 fb4b 	bl	800d466 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3368      	adds	r3, #104	; 0x68
 8009dd6:	681c      	ldr	r4, [r3, #0]
 8009dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ddc:	490c      	ldr	r1, [pc, #48]	; (8009e10 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8009dde:	4618      	mov	r0, r3
 8009de0:	f002 ff89 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009de4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	47a0      	blx	r4
 8009dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009df2:	4618      	mov	r0, r3
 8009df4:	f003 fb37 	bl	800d466 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009df8:	f107 0308 	add.w	r3, r7, #8
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f003 fb32 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8009e02:	bf00      	nop
 8009e04:	373c      	adds	r7, #60	; 0x3c
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	080242f0 	.word	0x080242f0
 8009e10:	0802432c 	.word	0x0802432c

08009e14 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8009e14:	b590      	push	{r4, r7, lr}
 8009e16:	b08d      	sub	sp, #52	; 0x34
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3368      	adds	r3, #104	; 0x68
 8009e22:	681c      	ldr	r4, [r3, #0]
 8009e24:	f107 0308 	add.w	r3, r7, #8
 8009e28:	4933      	ldr	r1, [pc, #204]	; (8009ef8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f002 ff63 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009e30:	f107 0308 	add.w	r3, r7, #8
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	47a0      	blx	r4
 8009e3a:	f107 0308 	add.w	r3, r7, #8
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f003 fb11 	bl	800d466 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3368      	adds	r3, #104	; 0x68
 8009e4a:	681c      	ldr	r4, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3380      	adds	r3, #128	; 0x80
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	6912      	ldr	r2, [r2, #16]
 8009e58:	3230      	adds	r2, #48	; 0x30
 8009e5a:	f107 0010 	add.w	r0, r7, #16
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	4798      	blx	r3
 8009e62:	f107 0310 	add.w	r3, r7, #16
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	47a0      	blx	r4
 8009e6c:	f107 0310 	add.w	r3, r7, #16
 8009e70:	4618      	mov	r0, r3
 8009e72:	f003 faf8 	bl	800d466 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3368      	adds	r3, #104	; 0x68
 8009e7c:	681c      	ldr	r4, [r3, #0]
 8009e7e:	f107 0318 	add.w	r3, r7, #24
 8009e82:	491e      	ldr	r1, [pc, #120]	; (8009efc <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8009e84:	4618      	mov	r0, r3
 8009e86:	f002 ff36 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009e8a:	f107 0318 	add.w	r3, r7, #24
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	47a0      	blx	r4
 8009e94:	f107 0318 	add.w	r3, r7, #24
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f003 fae4 	bl	800d466 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3368      	adds	r3, #104	; 0x68
 8009ea4:	681c      	ldr	r4, [r3, #0]
 8009ea6:	f107 0320 	add.w	r3, r7, #32
 8009eaa:	4915      	ldr	r1, [pc, #84]	; (8009f00 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8009eac:	4618      	mov	r0, r3
 8009eae:	f002 ff22 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009eb2:	f107 0320 	add.w	r3, r7, #32
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	47a0      	blx	r4
 8009ebc:	f107 0320 	add.w	r3, r7, #32
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f003 fad0 	bl	800d466 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3368      	adds	r3, #104	; 0x68
 8009ecc:	681c      	ldr	r4, [r3, #0]
 8009ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ed2:	490c      	ldr	r1, [pc, #48]	; (8009f04 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f002 ff0e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8009eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	47a0      	blx	r4
 8009ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f003 fabc 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8009eee:	bf00      	nop
 8009ef0:	3734      	adds	r7, #52	; 0x34
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd90      	pop	{r4, r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	08024338 	.word	0x08024338
 8009efc:	08024348 	.word	0x08024348
 8009f00:	08024358 	.word	0x08024358
 8009f04:	08024374 	.word	0x08024374

08009f08 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8009f08:	b590      	push	{r4, r7, lr}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3360      	adds	r3, #96	; 0x60
 8009f16:	681c      	ldr	r4, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	335c      	adds	r3, #92	; 0x5c
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	6912      	ldr	r2, [r2, #16]
 8009f24:	3214      	adds	r2, #20
 8009f26:	f107 0008 	add.w	r0, r7, #8
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	4798      	blx	r3
 8009f2e:	f107 0308 	add.w	r3, r7, #8
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	47a0      	blx	r4
 8009f38:	f107 0308 	add.w	r3, r7, #8
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f003 fa92 	bl	800d466 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3370      	adds	r3, #112	; 0x70
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	4798      	blx	r3
    writeTestSuiteSummary();
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3374      	adds	r3, #116	; 0x74
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	4798      	blx	r3
    writeProperties();
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3378      	adds	r3, #120	; 0x78
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	4798      	blx	r3
    writeTestCases();
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	337c      	adds	r3, #124	; 0x7c
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
    writeFileEnding();
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	338c      	adds	r3, #140	; 0x8c
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	4798      	blx	r3
    closeFile();
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	336c      	adds	r3, #108	; 0x6c
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	4798      	blx	r3
}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd90      	pop	{r4, r7, pc}

08009f92 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b083      	sub	sp, #12
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	3330      	adds	r3, #48	; 0x30
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f003 fae2 	bl	800d584 <_ZN12SimpleStringpLEPKc>
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
}
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800a008:	b590      	push	{r4, r7, lr}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d113      	bne.n	800a046 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	685a      	ldr	r2, [r3, #4]
 800a024:	3201      	adds	r2, #1
 800a026:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800a028:	f240 1233 	movw	r2, #307	; 0x133
 800a02c:	4908      	ldr	r1, [pc, #32]	; (800a050 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800a02e:	2034      	movs	r0, #52	; 0x34
 800a030:	f000 fa9e 	bl	800a570 <_ZnwjPKci>
 800a034:	4604      	mov	r4, r0
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	4620      	mov	r0, r4
 800a03a:	f004 fd37 	bl	800eaac <_ZN11TestFailureC1ERKS_>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	6a1b      	ldr	r3, [r3, #32]
 800a044:	60dc      	str	r4, [r3, #12]
    }
}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd90      	pop	{r4, r7, pc}
 800a04e:	bf00      	nop
 800a050:	08024134 	.word	0x08024134

0800a054 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 800a054:	b5b0      	push	{r4, r5, r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800a05e:	4b08      	ldr	r3, [pc, #32]	; (800a080 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 800a060:	681d      	ldr	r5, [r3, #0]
 800a062:	6838      	ldr	r0, [r7, #0]
 800a064:	f003 f9d2 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800a068:	4602      	mov	r2, r0
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	691c      	ldr	r4, [r3, #16]
 800a06e:	4905      	ldr	r1, [pc, #20]	; (800a084 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 800a070:	4610      	mov	r0, r2
 800a072:	47a8      	blx	r5
 800a074:	4603      	mov	r3, r0
 800a076:	6263      	str	r3, [r4, #36]	; 0x24
}
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bdb0      	pop	{r4, r5, r7, pc}
 800a080:	200000b4 	.word	0x200000b4
 800a084:	08024384 	.word	0x08024384

0800a088 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800a088:	b590      	push	{r4, r7, lr}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800a092:	4b08      	ldr	r3, [pc, #32]	; (800a0b4 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800a094:	681c      	ldr	r4, [r3, #0]
 800a096:	6838      	ldr	r0, [r7, #0]
 800a098:	f003 f9b8 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800a09c:	4602      	mov	r2, r0
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	47a0      	blx	r4
}
 800a0aa:	bf00      	nop
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd90      	pop	{r4, r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	200000b8 	.word	0x200000b8

0800a0b8 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 800a0c0:	4b05      	ldr	r3, [pc, #20]	; (800a0d8 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	6912      	ldr	r2, [r2, #16]
 800a0c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	4798      	blx	r3
}
 800a0ce:	bf00      	nop
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	200000bc 	.word	0x200000bc

0800a0dc <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	603b      	str	r3, [r7, #0]
        return false;
 800a0ea:	2300      	movs	r3, #0
    }
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
    {
 800a100:	4a04      	ldr	r2, [pc, #16]	; (800a114 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	601a      	str	r2, [r3, #0]
    }
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	080281c8 	.word	0x080281c8

0800a118 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
    }
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff ffe9 	bl	800a0f8 <_ZN17MemoryLeakFailureD1Ev>
 800a126:	2104      	movs	r1, #4
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fa35 	bl	800a598 <_ZdlPvj>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4618      	mov	r0, r3
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800a138:	b590      	push	{r4, r7, lr}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	687c      	ldr	r4, [r7, #4]
 800a142:	f000 fc71 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a146:	4603      	mov	r3, r0
 800a148:	4618      	mov	r0, r3
 800a14a:	f00c ff6c 	bl	8017026 <_ZN18MemoryLeakDetector8getMutexEv>
 800a14e:	4603      	mov	r3, r0
 800a150:	4619      	mov	r1, r3
 800a152:	4620      	mov	r0, r4
 800a154:	f002 fb24 	bl	800c7a0 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd90      	pop	{r4, r7, pc}

0800a162 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f002 fb29 	bl	800c7c4 <_ZN15ScopedMutexLockD1Ev>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4618      	mov	r0, r3
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800a17c:	b590      	push	{r4, r7, lr}
 800a17e:	b087      	sub	sp, #28
 800a180:	af02      	add	r7, sp, #8
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800a188:	f000 fc4e 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a18c:	4604      	mov	r4, r0
 800a18e:	f006 f8df 	bl	8010350 <_Z25getCurrentMallocAllocatorv>
 800a192:	4601      	mov	r1, r0
 800a194:	2301      	movs	r3, #1
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f00d f983 	bl	80174ac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a1a6:	4603      	mov	r3, r0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd90      	pop	{r4, r7, pc}

0800a1b0 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800a1b0:	b590      	push	{r4, r7, lr}
 800a1b2:	b087      	sub	sp, #28
 800a1b4:	af02      	add	r7, sp, #8
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800a1bc:	f000 fc34 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	68f9      	ldr	r1, [r7, #12]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f00c ffdd 	bl	8017184 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800a1ca:	f000 fc2d 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	f006 f8be 	bl	8010350 <_Z25getCurrentMallocAllocatorv>
 800a1d4:	4601      	mov	r1, r0
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f00d f996 	bl	8017514 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800a1e8:	bf00      	nop
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd90      	pop	{r4, r7, pc}

0800a1f0 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800a1f0:	b590      	push	{r4, r7, lr}
 800a1f2:	b089      	sub	sp, #36	; 0x24
 800a1f4:	af04      	add	r7, sp, #16
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800a1fe:	f000 fc13 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a202:	4604      	mov	r4, r0
 800a204:	f006 f8a4 	bl	8010350 <_Z25getCurrentMallocAllocatorv>
 800a208:	4601      	mov	r1, r0
 800a20a:	2301      	movs	r3, #1
 800a20c:	9302      	str	r3, [sp, #8]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	4620      	mov	r0, r4
 800a21c:	f00d f9de 	bl	80175dc <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800a220:	4603      	mov	r3, r0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	bd90      	pop	{r4, r7, pc}
	...

0800a22c <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a238:	4b04      	ldr	r3, [pc, #16]	; (800a24c <_ZL13normal_mallocjPKcj+0x20>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	4798      	blx	r3
 800a240:	4603      	mov	r3, r0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	200000c8 	.word	0x200000c8

0800a250 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800a25e:	4b05      	ldr	r3, [pc, #20]	; (800a274 <_ZL14normal_reallocPvjPKcj+0x24>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	4798      	blx	r3
 800a268:	4603      	mov	r3, r0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	200000cc 	.word	0x200000cc

0800a278 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800a284:	4b03      	ldr	r3, [pc, #12]	; (800a294 <_ZL11normal_freePvPKcj+0x1c>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	4798      	blx	r3
}
 800a28c:	bf00      	nop
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	200000d0 	.word	0x200000d0

0800a298 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a298:	b590      	push	{r4, r7, lr}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 800a2a0:	f107 0308 	add.w	r3, r7, #8
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7ff ff47 	bl	800a138 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a2aa:	f000 fbbd 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	f005 ff9e 	bl	80101f0 <_Z22getCurrentNewAllocatorv>
 800a2b4:	4601      	mov	r1, r0
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f00d f864 	bl	8017388 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a2c0:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a2c2:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800a2c4:	f107 0308 	add.w	r3, r7, #8
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7ff ff4a 	bl	800a162 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800a2ce:	4623      	mov	r3, r4
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd90      	pop	{r4, r7, pc}

0800a2d8 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a2d8:	b590      	push	{r4, r7, lr}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a2e0:	f000 fba2 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	f005 ff83 	bl	80101f0 <_Z22getCurrentNewAllocatorv>
 800a2ea:	4601      	mov	r1, r0
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f00d f849 	bl	8017388 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a2f6:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd90      	pop	{r4, r7, pc}

0800a302 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800a302:	b590      	push	{r4, r7, lr}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a30a:	f000 fb8d 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a30e:	4604      	mov	r4, r0
 800a310:	f005 ff6e 	bl	80101f0 <_Z22getCurrentNewAllocatorv>
 800a314:	4601      	mov	r1, r0
 800a316:	2300      	movs	r3, #0
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	4620      	mov	r0, r4
 800a31c:	f00d f834 	bl	8017388 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a320:	4603      	mov	r3, r0
}
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	bd90      	pop	{r4, r7, pc}

0800a32a <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800a32a:	b590      	push	{r4, r7, lr}
 800a32c:	b089      	sub	sp, #36	; 0x24
 800a32e:	af02      	add	r7, sp, #8
 800a330:	60f8      	str	r0, [r7, #12]
 800a332:	60b9      	str	r1, [r7, #8]
 800a334:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800a336:	f000 fb77 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a33a:	4604      	mov	r4, r0
 800a33c:	f005 ff58 	bl	80101f0 <_Z22getCurrentNewAllocatorv>
 800a340:	4601      	mov	r1, r0
 800a342:	2300      	movs	r3, #0
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	4620      	mov	r0, r4
 800a350:	f00d f8ac 	bl	80174ac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a354:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a356:	697b      	ldr	r3, [r7, #20]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	371c      	adds	r7, #28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd90      	pop	{r4, r7, pc}

0800a360 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800a360:	b590      	push	{r4, r7, lr}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800a368:	f000 fb5e 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a36c:	4604      	mov	r4, r0
 800a36e:	f005 ff97 	bl	80102a0 <_Z27getCurrentNewArrayAllocatorv>
 800a372:	4601      	mov	r1, r0
 800a374:	2300      	movs	r3, #0
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	4620      	mov	r0, r4
 800a37a:	f00d f805 	bl	8017388 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a37e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a380:	68fb      	ldr	r3, [r7, #12]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	bd90      	pop	{r4, r7, pc}

0800a38a <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800a38a:	b590      	push	{r4, r7, lr}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800a392:	f000 fb49 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a396:	4604      	mov	r4, r0
 800a398:	f005 ff82 	bl	80102a0 <_Z27getCurrentNewArrayAllocatorv>
 800a39c:	4601      	mov	r1, r0
 800a39e:	2300      	movs	r3, #0
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f00c fff0 	bl	8017388 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a3a8:	4603      	mov	r3, r0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd90      	pop	{r4, r7, pc}

0800a3b2 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800a3b2:	b590      	push	{r4, r7, lr}
 800a3b4:	b089      	sub	sp, #36	; 0x24
 800a3b6:	af02      	add	r7, sp, #8
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	60b9      	str	r1, [r7, #8]
 800a3bc:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 800a3be:	f000 fb33 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	f005 ff6c 	bl	80102a0 <_Z27getCurrentNewArrayAllocatorv>
 800a3c8:	4601      	mov	r1, r0
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f00d f868 	bl	80174ac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a3dc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a3de:	697b      	ldr	r3, [r7, #20]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	371c      	adds	r7, #28
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd90      	pop	{r4, r7, pc}

0800a3e8 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800a3e8:	b590      	push	{r4, r7, lr}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800a3f0:	f000 fb1a 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f00c fec3 	bl	8017184 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800a3fe:	f000 fb13 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a402:	4604      	mov	r4, r0
 800a404:	f005 fef4 	bl	80101f0 <_Z22getCurrentNewAllocatorv>
 800a408:	4601      	mov	r1, r0
 800a40a:	2300      	movs	r3, #0
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	4620      	mov	r0, r4
 800a410:	f00d f8ca 	bl	80175a8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd90      	pop	{r4, r7, pc}

0800a41c <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800a41c:	b590      	push	{r4, r7, lr}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800a424:	f000 fb00 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a428:	4603      	mov	r3, r0
 800a42a:	6879      	ldr	r1, [r7, #4]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f00c fea9 	bl	8017184 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800a432:	f000 faf9 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a436:	4604      	mov	r4, r0
 800a438:	f005 ff32 	bl	80102a0 <_Z27getCurrentNewArrayAllocatorv>
 800a43c:	4601      	mov	r1, r0
 800a43e:	2300      	movs	r3, #0
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	4620      	mov	r0, r4
 800a444:	f00d f8b0 	bl	80175a8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd90      	pop	{r4, r7, pc}

0800a450 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a458:	4b04      	ldr	r3, [pc, #16]	; (800a46c <_ZL19normal_operator_newj+0x1c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	4798      	blx	r3
 800a460:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a462:	68fb      	ldr	r3, [r7, #12]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	200000c8 	.word	0x200000c8

0800a470 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a478:	4b04      	ldr	r3, [pc, #16]	; (800a48c <_ZL27normal_operator_new_nothrowj+0x1c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	4798      	blx	r3
 800a480:	4603      	mov	r3, r0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	200000c8 	.word	0x200000c8

0800a490 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a49c:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	4798      	blx	r3
 800a4a4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a4a6:	697b      	ldr	r3, [r7, #20]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3718      	adds	r7, #24
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	200000c8 	.word	0x200000c8

0800a4b4 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a4bc:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <_ZL25normal_operator_new_arrayj+0x1c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	4798      	blx	r3
 800a4c4:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	200000c8 	.word	0x200000c8

0800a4d4 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a4dc:	4b04      	ldr	r3, [pc, #16]	; (800a4f0 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	4798      	blx	r3
 800a4e4:	4603      	mov	r3, r0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	200000c8 	.word	0x200000c8

0800a4f4 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a500:	4b04      	ldr	r3, [pc, #16]	; (800a514 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	4798      	blx	r3
 800a508:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a50a:	697b      	ldr	r3, [r7, #20]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3718      	adds	r7, #24
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	200000c8 	.word	0x200000c8

0800a518 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800a520:	4b03      	ldr	r3, [pc, #12]	; (800a530 <_ZL22normal_operator_deletePv+0x18>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	4798      	blx	r3
}
 800a528:	bf00      	nop
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	200000d0 	.word	0x200000d0

0800a534 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800a53c:	4b03      	ldr	r3, [pc, #12]	; (800a54c <_ZL28normal_operator_delete_arrayPv+0x18>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	4798      	blx	r3
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	200000d0 	.word	0x200000d0

0800a550 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800a558:	4b04      	ldr	r3, [pc, #16]	; (800a56c <_Znwj+0x1c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	4798      	blx	r3
 800a560:	4603      	mov	r3, r0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	2000002c 	.word	0x2000002c

0800a570 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800a57c:	4b05      	ldr	r3, [pc, #20]	; (800a594 <_ZnwjPKci+0x24>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	68b9      	ldr	r1, [r7, #8]
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	4798      	blx	r3
 800a588:	4603      	mov	r3, r0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20000034 	.word	0x20000034

0800a598 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800a5a2:	4b04      	ldr	r3, [pc, #16]	; (800a5b4 <_ZdlPvj+0x1c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	4798      	blx	r3
}
 800a5aa:	bf00      	nop
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20000044 	.word	0x20000044

0800a5b8 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800a5c4:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <_ZnajPKci+0x24>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	68b9      	ldr	r1, [r7, #8]
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	4798      	blx	r3
 800a5d0:	4603      	mov	r3, r0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000040 	.word	0x20000040

0800a5e0 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800a5e8:	4b03      	ldr	r3, [pc, #12]	; (800a5f8 <_ZdaPv+0x18>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	4798      	blx	r3
}
 800a5f0:	bf00      	nop
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	20000048 	.word	0x20000048

0800a5fc <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800a606:	4b04      	ldr	r3, [pc, #16]	; (800a618 <_ZdaPvj+0x1c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	4798      	blx	r3
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	20000048 	.word	0x20000048

0800a61c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800a61c:	b480      	push	{r7}
 800a61e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800a620:	4b12      	ldr	r3, [pc, #72]	; (800a66c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800a622:	4a13      	ldr	r2, [pc, #76]	; (800a670 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800a624:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800a626:	4b13      	ldr	r3, [pc, #76]	; (800a674 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800a628:	4a13      	ldr	r2, [pc, #76]	; (800a678 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800a62a:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800a62c:	4b13      	ldr	r3, [pc, #76]	; (800a67c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800a62e:	4a14      	ldr	r2, [pc, #80]	; (800a680 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800a630:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800a632:	4b14      	ldr	r3, [pc, #80]	; (800a684 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800a634:	4a14      	ldr	r2, [pc, #80]	; (800a688 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800a636:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800a638:	4b14      	ldr	r3, [pc, #80]	; (800a68c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800a63a:	4a15      	ldr	r2, [pc, #84]	; (800a690 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800a63c:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800a63e:	4b15      	ldr	r3, [pc, #84]	; (800a694 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800a640:	4a15      	ldr	r2, [pc, #84]	; (800a698 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800a642:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800a644:	4b15      	ldr	r3, [pc, #84]	; (800a69c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800a646:	4a16      	ldr	r2, [pc, #88]	; (800a6a0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800a648:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800a64a:	4b16      	ldr	r3, [pc, #88]	; (800a6a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800a64c:	4a16      	ldr	r2, [pc, #88]	; (800a6a8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800a64e:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800a650:	4b16      	ldr	r3, [pc, #88]	; (800a6ac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800a652:	4a17      	ldr	r2, [pc, #92]	; (800a6b0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800a654:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800a656:	4b17      	ldr	r3, [pc, #92]	; (800a6b4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800a658:	4a17      	ldr	r2, [pc, #92]	; (800a6b8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800a65a:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800a65c:	4b17      	ldr	r3, [pc, #92]	; (800a6bc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800a65e:	4a18      	ldr	r2, [pc, #96]	; (800a6c0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800a660:	601a      	str	r2, [r3, #0]

#endif
}
 800a662:	bf00      	nop
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	2000002c 	.word	0x2000002c
 800a670:	0800a451 	.word	0x0800a451
 800a674:	20000030 	.word	0x20000030
 800a678:	0800a471 	.word	0x0800a471
 800a67c:	20000034 	.word	0x20000034
 800a680:	0800a491 	.word	0x0800a491
 800a684:	20000038 	.word	0x20000038
 800a688:	0800a4b5 	.word	0x0800a4b5
 800a68c:	2000003c 	.word	0x2000003c
 800a690:	0800a4d5 	.word	0x0800a4d5
 800a694:	20000040 	.word	0x20000040
 800a698:	0800a4f5 	.word	0x0800a4f5
 800a69c:	20000044 	.word	0x20000044
 800a6a0:	0800a519 	.word	0x0800a519
 800a6a4:	20000048 	.word	0x20000048
 800a6a8:	0800a535 	.word	0x0800a535
 800a6ac:	20000014 	.word	0x20000014
 800a6b0:	0800a22d 	.word	0x0800a22d
 800a6b4:	2000001c 	.word	0x2000001c
 800a6b8:	0800a251 	.word	0x0800a251
 800a6bc:	20000018 	.word	0x20000018
 800a6c0:	0800a279 	.word	0x0800a279

0800a6c4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800a6c8:	4b08      	ldr	r3, [pc, #32]	; (800a6ec <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a08      	ldr	r2, [pc, #32]	; (800a6f0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d004      	beq.n	800a6dc <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800a6d2:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a07      	ldr	r2, [pc, #28]	; (800a6f4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d101      	bne.n	800a6e0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e000      	b.n	800a6e2 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800a6e0:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	2000002c 	.word	0x2000002c
 800a6f0:	0800a2d9 	.word	0x0800a2d9
 800a6f4:	0800a299 	.word	0x0800a299

0800a6f8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800a6fc:	4b1f      	ldr	r3, [pc, #124]	; (800a77c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	3301      	adds	r3, #1
 800a702:	4a1e      	ldr	r2, [pc, #120]	; (800a77c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a704:	6013      	str	r3, [r2, #0]
 800a706:	4b1d      	ldr	r3, [pc, #116]	; (800a77c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	bfcc      	ite	gt
 800a70e:	2301      	movgt	r3, #1
 800a710:	2300      	movle	r3, #0
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	d12e      	bne.n	800a776 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800a718:	4b19      	ldr	r3, [pc, #100]	; (800a780 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a19      	ldr	r2, [pc, #100]	; (800a784 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800a71e:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800a720:	4b19      	ldr	r3, [pc, #100]	; (800a788 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a19      	ldr	r2, [pc, #100]	; (800a78c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800a726:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800a728:	4b19      	ldr	r3, [pc, #100]	; (800a790 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a19      	ldr	r2, [pc, #100]	; (800a794 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800a72e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800a730:	4b19      	ldr	r3, [pc, #100]	; (800a798 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a19      	ldr	r2, [pc, #100]	; (800a79c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800a736:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800a738:	4b19      	ldr	r3, [pc, #100]	; (800a7a0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a19      	ldr	r2, [pc, #100]	; (800a7a4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800a73e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800a740:	4b19      	ldr	r3, [pc, #100]	; (800a7a8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a19      	ldr	r2, [pc, #100]	; (800a7ac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800a746:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800a748:	4b19      	ldr	r3, [pc, #100]	; (800a7b0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a19      	ldr	r2, [pc, #100]	; (800a7b4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800a74e:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800a750:	4b19      	ldr	r3, [pc, #100]	; (800a7b8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a19      	ldr	r2, [pc, #100]	; (800a7bc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800a756:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800a758:	4b19      	ldr	r3, [pc, #100]	; (800a7c0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a19      	ldr	r2, [pc, #100]	; (800a7c4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800a75e:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800a760:	4b19      	ldr	r3, [pc, #100]	; (800a7c8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a19      	ldr	r2, [pc, #100]	; (800a7cc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800a766:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800a768:	4b19      	ldr	r3, [pc, #100]	; (800a7d0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a19      	ldr	r2, [pc, #100]	; (800a7d4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800a76e:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800a770:	f7ff ff54 	bl	800a61c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800a774:	e000      	b.n	800a778 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800a776:	bf00      	nop
#endif
}
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000848 	.word	0x20000848
 800a780:	2000002c 	.word	0x2000002c
 800a784:	2000004c 	.word	0x2000004c
 800a788:	20000030 	.word	0x20000030
 800a78c:	20000050 	.word	0x20000050
 800a790:	20000034 	.word	0x20000034
 800a794:	20000054 	.word	0x20000054
 800a798:	20000038 	.word	0x20000038
 800a79c:	20000058 	.word	0x20000058
 800a7a0:	2000003c 	.word	0x2000003c
 800a7a4:	2000005c 	.word	0x2000005c
 800a7a8:	20000040 	.word	0x20000040
 800a7ac:	20000060 	.word	0x20000060
 800a7b0:	20000044 	.word	0x20000044
 800a7b4:	20000064 	.word	0x20000064
 800a7b8:	20000048 	.word	0x20000048
 800a7bc:	20000068 	.word	0x20000068
 800a7c0:	20000014 	.word	0x20000014
 800a7c4:	20000020 	.word	0x20000020
 800a7c8:	2000001c 	.word	0x2000001c
 800a7cc:	20000028 	.word	0x20000028
 800a7d0:	20000018 	.word	0x20000018
 800a7d4:	20000024 	.word	0x20000024

0800a7d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800a7d8:	b480      	push	{r7}
 800a7da:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800a7dc:	4b1f      	ldr	r3, [pc, #124]	; (800a85c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	4a1e      	ldr	r2, [pc, #120]	; (800a85c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	4b1d      	ldr	r3, [pc, #116]	; (800a85c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	bfcc      	ite	gt
 800a7ee:	2301      	movgt	r3, #1
 800a7f0:	2300      	movle	r3, #0
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d12c      	bne.n	800a852 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800a7f8:	4b19      	ldr	r3, [pc, #100]	; (800a860 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a19      	ldr	r2, [pc, #100]	; (800a864 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800a7fe:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800a800:	4b19      	ldr	r3, [pc, #100]	; (800a868 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a19      	ldr	r2, [pc, #100]	; (800a86c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800a806:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800a808:	4b19      	ldr	r3, [pc, #100]	; (800a870 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a19      	ldr	r2, [pc, #100]	; (800a874 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800a80e:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800a810:	4b19      	ldr	r3, [pc, #100]	; (800a878 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a19      	ldr	r2, [pc, #100]	; (800a87c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800a816:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800a818:	4b19      	ldr	r3, [pc, #100]	; (800a880 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a19      	ldr	r2, [pc, #100]	; (800a884 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800a81e:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800a820:	4b19      	ldr	r3, [pc, #100]	; (800a888 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a19      	ldr	r2, [pc, #100]	; (800a88c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800a826:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800a828:	4b19      	ldr	r3, [pc, #100]	; (800a890 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a19      	ldr	r2, [pc, #100]	; (800a894 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800a82e:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800a830:	4b19      	ldr	r3, [pc, #100]	; (800a898 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a19      	ldr	r2, [pc, #100]	; (800a89c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800a836:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800a838:	4b19      	ldr	r3, [pc, #100]	; (800a8a0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a19      	ldr	r2, [pc, #100]	; (800a8a4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800a83e:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800a840:	4b19      	ldr	r3, [pc, #100]	; (800a8a8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a19      	ldr	r2, [pc, #100]	; (800a8ac <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800a846:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800a848:	4b19      	ldr	r3, [pc, #100]	; (800a8b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a19      	ldr	r2, [pc, #100]	; (800a8b4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	e000      	b.n	800a854 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800a852:	bf00      	nop
#endif
}
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	20000848 	.word	0x20000848
 800a860:	2000004c 	.word	0x2000004c
 800a864:	2000002c 	.word	0x2000002c
 800a868:	20000050 	.word	0x20000050
 800a86c:	20000030 	.word	0x20000030
 800a870:	20000054 	.word	0x20000054
 800a874:	20000034 	.word	0x20000034
 800a878:	20000058 	.word	0x20000058
 800a87c:	20000038 	.word	0x20000038
 800a880:	2000005c 	.word	0x2000005c
 800a884:	2000003c 	.word	0x2000003c
 800a888:	20000060 	.word	0x20000060
 800a88c:	20000040 	.word	0x20000040
 800a890:	20000064 	.word	0x20000064
 800a894:	20000044 	.word	0x20000044
 800a898:	20000068 	.word	0x20000068
 800a89c:	20000048 	.word	0x20000048
 800a8a0:	20000020 	.word	0x20000020
 800a8a4:	20000014 	.word	0x20000014
 800a8a8:	20000028 	.word	0x20000028
 800a8ac:	2000001c 	.word	0x2000001c
 800a8b0:	20000024 	.word	0x20000024
 800a8b4:	20000018 	.word	0x20000018

0800a8b8 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
    {
 800a8c0:	4a05      	ldr	r2, [pc, #20]	; (800a8d8 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	601a      	str	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff fc15 	bl	800a0f8 <_ZN17MemoryLeakFailureD1Ev>
    }
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	080281b4 	.word	0x080281b4

0800a8dc <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
    }
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7ff ffe7 	bl	800a8b8 <_ZN25MemoryLeakWarningReporterD1Ev>
 800a8ea:	2104      	movs	r1, #4
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff fe53 	bl	800a598 <_ZdlPvj>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	4a04      	ldr	r2, [pc, #16]	; (800a918 <_ZN14TestTerminatorC1Ev+0x1c>)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	08028b60 	.word	0x08028b60

0800a91c <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4618      	mov	r0, r3
 800a928:	f7ff ffe8 	bl	800a8fc <_ZN14TestTerminatorC1Ev>
 800a92c:	4a03      	ldr	r2, [pc, #12]	; (800a93c <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	601a      	str	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4618      	mov	r0, r3
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	08028b38 	.word	0x08028b38

0800a940 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800a940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a942:	b099      	sub	sp, #100	; 0x64
 800a944:	af02      	add	r7, sp, #8
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800a94a:	f009 fdb7 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 800a94e:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800a950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	339c      	adds	r3, #156	; 0x9c
 800a956:	681c      	ldr	r4, [r3, #0]
 800a958:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a95c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a95e:	4618      	mov	r0, r3
 800a960:	f008 fbc4 	bl	80130ec <_ZNK10UtestShell7getNameEv>
 800a964:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a968:	4618      	mov	r0, r3
 800a96a:	f002 fd4f 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800a96e:	4605      	mov	r5, r0
 800a970:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a972:	f008 fc9b 	bl	80132ac <_ZNK10UtestShell13getLineNumberEv>
 800a976:	4606      	mov	r6, r0
 800a978:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a97c:	6839      	ldr	r1, [r7, #0]
 800a97e:	4618      	mov	r0, r3
 800a980:	f002 f9b9 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800a984:	f107 000c 	add.w	r0, r7, #12
 800a988:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	4633      	mov	r3, r6
 800a990:	462a      	mov	r2, r5
 800a992:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a994:	f004 fd14 	bl	800f3c0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800a998:	2300      	movs	r3, #0
 800a99a:	653b      	str	r3, [r7, #80]	; 0x50
 800a99c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7ff ffbb 	bl	800a91c <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800a9a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a9aa:	f107 030c 	add.w	r3, r7, #12
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a9b2:	47a0      	blx	r4
 800a9b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f009 fe79 	bl	80146b0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800a9be:	f107 030c 	add.w	r3, r7, #12
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 f9ac 	bl	800ad20 <_ZN11FailFailureD1Ev>
 800a9c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f002 fd4a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800a9d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f002 fd45 	bl	800d466 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800a9dc:	bf00      	nop
 800a9de:	375c      	adds	r7, #92	; 0x5c
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9e4 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	4a04      	ldr	r2, [pc, #16]	; (800aa00 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	601a      	str	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	080281c8 	.word	0x080281c8

0800aa04 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff ffe8 	bl	800a9e4 <_ZN17MemoryLeakFailureC1Ev>
 800aa14:	4a03      	ldr	r2, [pc, #12]	; (800aa24 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	080281b4 	.word	0x080281b4

0800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800aa28:	b598      	push	{r3, r4, r7, lr}
 800aa2a:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800aa2c:	4b11      	ldr	r3, [pc, #68]	; (800aa74 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d11b      	bne.n	800aa6c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800aa34:	f7ff fe60 	bl	800a6f8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800aa38:	2004      	movs	r0, #4
 800aa3a:	f7ff fd89 	bl	800a550 <_Znwj>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	461c      	mov	r4, r3
 800aa42:	4620      	mov	r0, r4
 800aa44:	f7ff ffde 	bl	800aa04 <_ZN25MemoryLeakWarningReporterC1Ev>
 800aa48:	4b0b      	ldr	r3, [pc, #44]	; (800aa78 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800aa4a:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800aa4c:	f241 1050 	movw	r0, #4432	; 0x1150
 800aa50:	f7ff fd7e 	bl	800a550 <_Znwj>
 800aa54:	4603      	mov	r3, r0
 800aa56:	461c      	mov	r4, r3
 800aa58:	4b07      	ldr	r3, [pc, #28]	; (800aa78 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f00c fa3e 	bl	8016ee0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800aa64:	4b03      	ldr	r3, [pc, #12]	; (800aa74 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800aa66:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800aa68:	f7ff feb6 	bl	800a7d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800aa6c:	4b01      	ldr	r3, [pc, #4]	; (800aa74 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	bd98      	pop	{r3, r4, r7, pc}
 800aa74:	20000850 	.word	0x20000850
 800aa78:	2000084c 	.word	0x2000084c

0800aa7c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	78fa      	ldrb	r2, [r7, #3]
 800aa8c:	765a      	strb	r2, [r3, #25]
}
 800aa8e:	bf00      	nop
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
	...

0800aa9c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800aaa0:	f7ff fdbc 	bl	800a61c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800aaa4:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d004      	beq.n	800aab6 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	3204      	adds	r2, #4
 800aab0:	6812      	ldr	r2, [r2, #0]
 800aab2:	4618      	mov	r0, r3
 800aab4:	4790      	blx	r2
    delete globalReporter;
 800aab6:	4b08      	ldr	r3, [pc, #32]	; (800aad8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d004      	beq.n	800aac8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	3204      	adds	r2, #4
 800aac2:	6812      	ldr	r2, [r2, #0]
 800aac4:	4618      	mov	r0, r3
 800aac6:	4790      	blx	r2
    globalDetector = NULLPTR;
 800aac8:	4b02      	ldr	r3, [pc, #8]	; (800aad4 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]
}
 800aace:	bf00      	nop
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	20000850 	.word	0x20000850
 800aad8:	2000084c 	.word	0x2000084c

0800aadc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	68b9      	ldr	r1, [r7, #8]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f006 fdfd 	bl	80116ec <_ZN10TestPluginC1ERK12SimpleString>
 800aaf2:	4a14      	ldr	r2, [pc, #80]	; (800ab44 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	761a      	strb	r2, [r3, #24]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	765a      	strb	r2, [r3, #25]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800ab0a:	4b0f      	ldr	r3, [pc, #60]	; (800ab48 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d102      	bne.n	800ab18 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800ab12:	4a0d      	ldr	r2, [pc, #52]	; (800ab48 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	615a      	str	r2, [r3, #20]
 800ab24:	e004      	b.n	800ab30 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800ab26:	f7ff ff7f 	bl	800aa28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f00c fa69 	bl	801700c <_ZN18MemoryLeakDetector6enableEv>
}
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	080281dc 	.word	0x080281dc
 800ab48:	20000854 	.word	0x20000854

0800ab4c <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	4a09      	ldr	r2, [pc, #36]	; (800ab7c <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	7e5b      	ldrb	r3, [r3, #25]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800ab62:	f7ff fd5b 	bl	800a61c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800ab66:	f7ff ff99 	bl	800aa9c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f006 fdf9 	bl	8011764 <_ZN10TestPluginD1Ev>
    }
}
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	080281dc 	.word	0x080281dc

0800ab80 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
}
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff ffdf 	bl	800ab4c <_ZN23MemoryLeakWarningPluginD1Ev>
 800ab8e:	2124      	movs	r1, #36	; 0x24
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7ff fd01 	bl	800a598 <_ZdlPvj>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f00c fa0e 	bl	8016fd2 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7fd ffb0 	bl	8008b1c <_ZNK10TestResult15getFailureCountEv>
 800abbc:	4602      	mov	r2, r0
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	621a      	str	r2, [r3, #32]
}
 800abc2:	bf00      	nop
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800abcc:	b590      	push	{r4, r7, lr}
 800abce:	b097      	sub	sp, #92	; 0x5c
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	4618      	mov	r0, r3
 800abde:	f00c fa08 	bl	8016ff2 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	2103      	movs	r1, #3
 800abe8:	4618      	mov	r0, r3
 800abea:	f00c fda5 	bl	8017738 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800abee:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	7e1b      	ldrb	r3, [r3, #24]
 800abf4:	f083 0301 	eor.w	r3, r3, #1
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00e      	beq.n	800ac1c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d009      	beq.n	800ac1c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6a1c      	ldr	r4, [r3, #32]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7fd ff85 	bl	8008b1c <_ZNK10TestResult15getFailureCountEv>
 800ac12:	4603      	mov	r3, r0
 800ac14:	429c      	cmp	r4, r3
 800ac16:	d101      	bne.n	800ac1c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e000      	b.n	800ac1e <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d04c      	beq.n	800acbc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800ac22:	f7ff fd4f 	bl	800a6c4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d028      	beq.n	800ac7e <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	2103      	movs	r1, #3
 800ac32:	4618      	mov	r0, r3
 800ac34:	f00c fd45 	bl	80176c2 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ac3e:	4611      	mov	r1, r2
 800ac40:	4618      	mov	r0, r3
 800ac42:	f002 f858 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800ac46:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ac4a:	f107 0310 	add.w	r3, r7, #16
 800ac4e:	68b9      	ldr	r1, [r7, #8]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f003 feaf 	bl	800e9b4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800ac56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f002 fc03 	bl	800d466 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3334      	adds	r3, #52	; 0x34
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f107 0210 	add.w	r2, r7, #16
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800ac72:	f107 0310 	add.w	r3, r7, #16
 800ac76:	4618      	mov	r0, r3
 800ac78:	f003 ff5c 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800ac7c:	e01e      	b.n	800acbc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	69db      	ldr	r3, [r3, #28]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d01a      	beq.n	800acbc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	3338      	adds	r3, #56	; 0x38
 800ac8c:	681c      	ldr	r4, [r3, #0]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	461a      	mov	r2, r3
 800ac94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ac98:	4910      	ldr	r1, [pc, #64]	; (800acdc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f003 f8ea 	bl	800de74 <_Z16StringFromFormatPKcz>
 800aca0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800aca4:	4618      	mov	r0, r3
 800aca6:	f002 fbb1 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800acaa:	4603      	mov	r3, r0
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	47a0      	blx	r4
 800acb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800acb6:	4618      	mov	r0, r3
 800acb8:	f002 fbd5 	bl	800d466 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	695b      	ldr	r3, [r3, #20]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f00c fd13 	bl	80176ec <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	61da      	str	r2, [r3, #28]
}
 800acd2:	bf00      	nop
 800acd4:	375c      	adds	r7, #92	; 0x5c
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd90      	pop	{r4, r7, pc}
 800acda:	bf00      	nop
 800acdc:	08024388 	.word	0x08024388

0800ace0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	2102      	movs	r1, #2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f00c fd21 	bl	8017738 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800acf6:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d007      	beq.n	800ad10 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	695b      	ldr	r3, [r3, #20]
 800ad04:	2102      	movs	r1, #2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f00c fcdb 	bl	80176c2 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	e000      	b.n	800ad12 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800ad10:	4b02      	ldr	r3, [pc, #8]	; (800ad1c <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	080243c8 	.word	0x080243c8

0800ad20 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	4a05      	ldr	r2, [pc, #20]	; (800ad40 <_ZN11FailFailureD1Ev+0x20>)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f003 feff 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	08028224 	.word	0x08028224

0800ad44 <_ZN11FailFailureD0Ev>:
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff ffe7 	bl	800ad20 <_ZN11FailFailureD1Ev>
 800ad52:	2134      	movs	r1, #52	; 0x34
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff fc1f 	bl	800a598 <_ZdlPvj>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4618      	mov	r0, r3
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	4a06      	ldr	r2, [pc, #24]	; (800adb8 <_ZN19MockFailureReporterC1Ev+0x24>)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	601a      	str	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	711a      	strb	r2, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4618      	mov	r0, r3
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	08029400 	.word	0x08029400

0800adbc <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	4a04      	ldr	r2, [pc, #16]	; (800add8 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4618      	mov	r0, r3
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	08029400 	.word	0x08029400

0800addc <_ZN19MockFailureReporterD0Ev>:
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff ffe9 	bl	800adbc <_ZN19MockFailureReporterD1Ev>
 800adea:	2108      	movs	r1, #8
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7ff fbd3 	bl	800a598 <_ZdlPvj>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4618      	mov	r0, r3
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	4a05      	ldr	r2, [pc, #20]	; (800ae1c <_ZN11MockFailureD1Ev+0x20>)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f003 fe91 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4618      	mov	r0, r3
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	08028378 	.word	0x08028378

0800ae20 <_ZN11MockFailureD0Ev>:
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff ffe7 	bl	800adfc <_ZN11MockFailureD1Ev>
 800ae2e:	2134      	movs	r1, #52	; 0x34
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7ff fbb1 	bl	800a598 <_ZdlPvj>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800ae40:	b590      	push	{r4, r7, lr}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
 800ae4a:	4a16      	ldr	r2, [pc, #88]	; (800aea4 <_ZN14MockNamedValueC1ERKS_+0x64>)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	601a      	str	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	1d1a      	adds	r2, r3, #4
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	3304      	adds	r3, #4
 800ae58:	4619      	mov	r1, r3
 800ae5a:	4610      	mov	r0, r2
 800ae5c:	f001 ff9f 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f103 020c 	add.w	r2, r3, #12
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	330c      	adds	r3, #12
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f001 ff96 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	f102 0418 	add.w	r4, r2, #24
 800ae7a:	3318      	adds	r3, #24
 800ae7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	629a      	str	r2, [r3, #40]	; 0x28
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	62da      	str	r2, [r3, #44]	; 0x2c
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	631a      	str	r2, [r3, #48]	; 0x30
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd90      	pop	{r4, r7, pc}
 800aea4:	08029440 	.word	0x08029440

0800aea8 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800aeb2:	f107 030c 	add.w	r3, r7, #12
 800aeb6:	4916      	ldr	r1, [pc, #88]	; (800af10 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f001 ff1c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800aebe:	f107 030c 	add.w	r3, r7, #12
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f002 fb1f 	bl	800d508 <_ZneRK12SimpleStringS1_>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d005      	beq.n	800aedc <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800aed0:	6879      	ldr	r1, [r7, #4]
 800aed2:	4810      	ldr	r0, [pc, #64]	; (800af14 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800aed4:	f000 ff70 	bl	800bdb8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800aed8:	4603      	mov	r3, r0
 800aeda:	e000      	b.n	800aede <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800aedc:	4b0d      	ldr	r3, [pc, #52]	; (800af14 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800aede:	617b      	str	r3, [r7, #20]
 800aee0:	f107 030c 	add.w	r3, r7, #12
 800aee4:	4618      	mov	r0, r3
 800aee6:	f002 fabe 	bl	800d466 <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	33a8      	adds	r3, #168	; 0xa8
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6978      	ldr	r0, [r7, #20]
 800aef6:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	33ac      	adds	r3, #172	; 0xac
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6978      	ldr	r0, [r7, #20]
 800af02:	4798      	blx	r3
    return mock_support;
 800af04:	697b      	ldr	r3, [r7, #20]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	080243cc 	.word	0x080243cc
 800af14:	20000858 	.word	0x20000858

0800af18 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800af22:	4a21      	ldr	r2, [pc, #132]	; (800afa8 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	601a      	str	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	605a      	str	r2, [r3, #4]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	609a      	str	r2, [r3, #8]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	731a      	strb	r2, [r3, #12]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f103 0218 	add.w	r2, r3, #24
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	615a      	str	r2, [r3, #20]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3318      	adds	r3, #24
 800af48:	4618      	mov	r0, r3
 800af4a:	f7ff ff23 	bl	800ad94 <_ZN19MockFailureReporterC1Ev>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	3320      	adds	r3, #32
 800af52:	4618      	mov	r0, r3
 800af54:	f010 fefc 	bl	801bd50 <_ZN21MockExpectedCallsListC1Ev>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	62da      	str	r2, [r3, #44]	; 0x2c
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	3330      	adds	r3, #48	; 0x30
 800af72:	4618      	mov	r0, r3
 800af74:	f014 fbea 	bl	801f74c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3338      	adds	r3, #56	; 0x38
 800af7c:	4618      	mov	r0, r3
 800af7e:	f014 faf4 	bl	801f56a <_ZN18MockNamedValueListC1Ev>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	333c      	adds	r3, #60	; 0x3c
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	4618      	mov	r0, r3
 800af8a:	f001 ff08 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800af96:	2100      	movs	r1, #0
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f894 	bl	800b0c6 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4618      	mov	r0, r3
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	08028250 	.word	0x08028250

0800afac <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	4a0d      	ldr	r2, [pc, #52]	; (800afec <_ZN11MockSupportD1Ev+0x40>)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	333c      	adds	r3, #60	; 0x3c
 800afbe:	4618      	mov	r0, r3
 800afc0:	f002 fa51 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3330      	adds	r3, #48	; 0x30
 800afc8:	4618      	mov	r0, r3
 800afca:	f014 fbd3 	bl	801f774 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	3320      	adds	r3, #32
 800afd2:	4618      	mov	r0, r3
 800afd4:	f010 fed0 	bl	801bd78 <_ZN21MockExpectedCallsListD1Ev>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3318      	adds	r3, #24
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff feed 	bl	800adbc <_ZN19MockFailureReporterD1Ev>
{
}
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	08028250 	.word	0x08028250

0800aff0 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
}
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7ff ffd7 	bl	800afac <_ZN11MockSupportD1Ev>
 800affe:	2148      	movs	r1, #72	; 0x48
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff fac9 	bl	800a598 <_ZdlPvj>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4618      	mov	r0, r3
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	691a      	ldr	r2, [r3, #16]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3310      	adds	r3, #16
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	78f9      	ldrb	r1, [r7, #3]
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
}
 800b030:	bf00      	nop
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d102      	bne.n	800b04e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	3318      	adds	r3, #24
 800b04c:	e000      	b.n	800b050 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00a      	beq.n	800b072 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	33c8      	adds	r3, #200	; 0xc8
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	6952      	ldr	r2, [r2, #20]
 800b06e:	4611      	mov	r1, r2
 800b070:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3338      	adds	r3, #56	; 0x38
 800b076:	4618      	mov	r0, r3
 800b078:	f014 fb0d 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b07c:	60f8      	str	r0, [r7, #12]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d01c      	beq.n	800b0be <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800b084:	68f9      	ldr	r1, [r7, #12]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 ff26 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	bf14      	ite	ne
 800b092:	2301      	movne	r3, #1
 800b094:	2300      	moveq	r3, #0
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00b      	beq.n	800b0b4 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800b09c:	68f9      	ldr	r1, [r7, #12]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 ff1a 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	32a4      	adds	r2, #164	; 0xa4
 800b0aa:	6812      	ldr	r2, [r2, #0]
 800b0ac:	6879      	ldr	r1, [r7, #4]
 800b0ae:	6949      	ldr	r1, [r1, #20]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f014 f9f7 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	e7df      	b.n	800b07e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800b0be:	bf00      	nop
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b083      	sub	sp, #12
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d102      	bne.n	800b0dc <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	e000      	b.n	800b0de <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	6113      	str	r3, [r2, #16]
}
 800b0e2:	bf00      	nop
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b082      	sub	sp, #8
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	3330      	adds	r3, #48	; 0x30
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f012 fb10 	bl	801d720 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800b108:	b590      	push	{r4, r7, lr}
 800b10a:	b087      	sub	sp, #28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3330      	adds	r3, #48	; 0x30
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	68b9      	ldr	r1, [r7, #8]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f014 fb77 	bl	801f810 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	3338      	adds	r3, #56	; 0x38
 800b126:	4618      	mov	r0, r3
 800b128:	f014 fab5 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b12c:	6178      	str	r0, [r7, #20]
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d01c      	beq.n	800b16e <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800b134:	6979      	ldr	r1, [r7, #20]
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f000 fece 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	bf14      	ite	ne
 800b142:	2301      	movne	r3, #1
 800b144:	2300      	moveq	r3, #0
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00b      	beq.n	800b164 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800b14c:	6979      	ldr	r1, [r7, #20]
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 fec2 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b154:	4603      	mov	r3, r0
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	32b0      	adds	r2, #176	; 0xb0
 800b15a:	6814      	ldr	r4, [r2, #0]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	68b9      	ldr	r1, [r7, #8]
 800b160:	4618      	mov	r0, r3
 800b162:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b164:	6978      	ldr	r0, [r7, #20]
 800b166:	f014 f99f 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b16a:	6178      	str	r0, [r7, #20]
 800b16c:	e7df      	b.n	800b12e <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800b16e:	bf00      	nop
 800b170:	371c      	adds	r7, #28
 800b172:	46bd      	mov	sp, r7
 800b174:	bd90      	pop	{r4, r7, pc}

0800b176 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800b176:	b590      	push	{r4, r7, lr}
 800b178:	b087      	sub	sp, #28
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	60f8      	str	r0, [r7, #12]
 800b17e:	60b9      	str	r1, [r7, #8]
 800b180:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3330      	adds	r3, #48	; 0x30
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	68b9      	ldr	r1, [r7, #8]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f014 fb5c 	bl	801f848 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3338      	adds	r3, #56	; 0x38
 800b194:	4618      	mov	r0, r3
 800b196:	f014 fa7e 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b19a:	6178      	str	r0, [r7, #20]
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d01c      	beq.n	800b1dc <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800b1a2:	6979      	ldr	r1, [r7, #20]
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f000 fe97 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	bf14      	ite	ne
 800b1b0:	2301      	movne	r3, #1
 800b1b2:	2300      	moveq	r3, #0
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00b      	beq.n	800b1d2 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800b1ba:	6979      	ldr	r1, [r7, #20]
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 fe8b 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	32b4      	adds	r2, #180	; 0xb4
 800b1c8:	6814      	ldr	r4, [r2, #0]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	68b9      	ldr	r1, [r7, #8]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b1d2:	6978      	ldr	r0, [r7, #20]
 800b1d4:	f014 f968 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b1d8:	6178      	str	r0, [r7, #20]
 800b1da:	e7df      	b.n	800b19c <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800b1dc:	bf00      	nop
 800b1de:	371c      	adds	r7, #28
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd90      	pop	{r4, r7, pc}

0800b1e4 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3330      	adds	r3, #48	; 0x30
 800b1f2:	6839      	ldr	r1, [r7, #0]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f014 fb93 	bl	801f920 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	3338      	adds	r3, #56	; 0x38
 800b1fe:	4618      	mov	r0, r3
 800b200:	f014 fa49 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b204:	60f8      	str	r0, [r7, #12]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d01b      	beq.n	800b244 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800b20c:	68f9      	ldr	r1, [r7, #12]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fe62 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	bf14      	ite	ne
 800b21a:	2301      	movne	r3, #1
 800b21c:	2300      	moveq	r3, #0
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00a      	beq.n	800b23a <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800b224:	68f9      	ldr	r1, [r7, #12]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fe56 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b22c:	4603      	mov	r3, r0
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	32b8      	adds	r2, #184	; 0xb8
 800b232:	6812      	ldr	r2, [r2, #0]
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	4618      	mov	r0, r3
 800b238:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f014 f934 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	e7e0      	b.n	800b206 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800b244:	bf00      	nop
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3330      	adds	r3, #48	; 0x30
 800b258:	4618      	mov	r0, r3
 800b25a:	f014 faba 	bl	801f7d2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3338      	adds	r3, #56	; 0x38
 800b262:	4618      	mov	r0, r3
 800b264:	f014 fa17 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d01a      	beq.n	800b2a6 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800b270:	68f9      	ldr	r1, [r7, #12]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fe30 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	bf14      	ite	ne
 800b27e:	2301      	movne	r3, #1
 800b280:	2300      	moveq	r3, #0
 800b282:	b2db      	uxtb	r3, r3
 800b284:	2b00      	cmp	r3, #0
 800b286:	d009      	beq.n	800b29c <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800b288:	68f9      	ldr	r1, [r7, #12]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fe24 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b290:	4603      	mov	r3, r0
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	32bc      	adds	r2, #188	; 0xbc
 800b296:	6812      	ldr	r2, [r2, #0]
 800b298:	4618      	mov	r0, r3
 800b29a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f014 f903 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	e7e1      	b.n	800b26a <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800b2a6:	bf00      	nop
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b084      	sub	sp, #16
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d004      	beq.n	800b2c8 <_ZN11MockSupport5clearEv+0x1a>
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	3204      	adds	r2, #4
 800b2c2:	6812      	ldr	r2, [r2, #0]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800b2d6:	f00e fe0d 	bl	8019ef4 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	3320      	adds	r3, #32
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f011 f937 	bl	801c552 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3338      	adds	r3, #56	; 0x38
 800b30a:	4618      	mov	r0, r3
 800b30c:	f014 f9c3 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b310:	60f8      	str	r0, [r7, #12]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d01a      	beq.n	800b34e <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800b318:	68f9      	ldr	r1, [r7, #12]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fddc 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b320:	60b8      	str	r0, [r7, #8]
        if (support) {
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00d      	beq.n	800b344 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	339c      	adds	r3, #156	; 0x9c
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68b8      	ldr	r0, [r7, #8]
 800b332:	4798      	blx	r3
            delete support;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d004      	beq.n	800b344 <_ZN11MockSupport5clearEv+0x96>
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	3204      	adds	r2, #4
 800b33e:	6812      	ldr	r2, [r2, #0]
 800b340:	4618      	mov	r0, r3
 800b342:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f014 f8af 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	e7e1      	b.n	800b312 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	3338      	adds	r3, #56	; 0x38
 800b352:	4618      	mov	r0, r3
 800b354:	f014 f917 	bl	801f586 <_ZN18MockNamedValueList5clearEv>
}
 800b358:	bf00      	nop
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	731a      	strb	r2, [r3, #12]
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
	...

0800b37c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800b37c:	b590      	push	{r4, r7, lr}
 800b37e:	b089      	sub	sp, #36	; 0x24
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	333c      	adds	r3, #60	; 0x3c
 800b38c:	4618      	mov	r0, r3
 800b38e:	f002 f859 	bl	800d444 <_ZNK12SimpleString7isEmptyEv>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d004      	beq.n	800b3a2 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800b398:	6879      	ldr	r1, [r7, #4]
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f001 fcff 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 800b3a0:	e021      	b.n	800b3e6 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800b3a8:	f107 0318 	add.w	r3, r7, #24
 800b3ac:	4910      	ldr	r1, [pc, #64]	; (800b3f0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f001 fca1 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800b3b4:	f107 0310 	add.w	r3, r7, #16
 800b3b8:	f107 0218 	add.w	r2, r7, #24
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f002 f8b3 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f107 0110 	add.w	r1, r7, #16
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f002 f8ac 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800b3d2:	f107 0310 	add.w	r3, r7, #16
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f002 f845 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800b3dc:	f107 0318 	add.w	r3, r7, #24
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f002 f840 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	3724      	adds	r7, #36	; 0x24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd90      	pop	{r4, r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	080243d0 	.word	0x080243d0

0800b3f4 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	3314      	adds	r3, #20
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	2101      	movs	r1, #1
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	4798      	blx	r3
 800b40e:	4603      	mov	r3, r0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	3314      	adds	r3, #20
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	2100      	movs	r1, #0
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	4798      	blx	r3
}
 800b432:	bf00      	nop
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
	...

0800b43c <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800b43c:	b590      	push	{r4, r7, lr}
 800b43e:	b089      	sub	sp, #36	; 0x24
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b44e:	f083 0301 	eor.w	r3, r3, #1
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b00      	cmp	r3, #0
 800b456:	d003      	beq.n	800b460 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800b458:	f010 fbf6 	bl	801bc48 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800b45c:	4603      	mov	r3, r0
 800b45e:	e041      	b.n	800b4e4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f000 fb1b 	bl	800ba9c <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800b466:	22a5      	movs	r2, #165	; 0xa5
 800b468:	4920      	ldr	r1, [pc, #128]	; (800b4ec <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800b46a:	2070      	movs	r0, #112	; 0x70
 800b46c:	f7ff f880 	bl	800a570 <_ZnwjPKci>
 800b470:	4604      	mov	r4, r0
 800b472:	68b9      	ldr	r1, [r7, #8]
 800b474:	4620      	mov	r0, r4
 800b476:	f00f f8f3 	bl	801a660 <_ZN23MockCheckedExpectedCallC1Ej>
 800b47a:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3308      	adds	r3, #8
 800b482:	681c      	ldr	r4, [r3, #0]
 800b484:	f107 0314 	add.w	r3, r7, #20
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	68f9      	ldr	r1, [r7, #12]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7ff ff75 	bl	800b37c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800b492:	f107 0314 	add.w	r3, r7, #20
 800b496:	4619      	mov	r1, r3
 800b498:	69f8      	ldr	r0, [r7, #28]
 800b49a:	47a0      	blx	r4
 800b49c:	f107 0314 	add.w	r3, r7, #20
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f001 ffe0 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	7b1b      	ldrb	r3, [r3, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d013      	beq.n	800b4d6 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3310      	adds	r3, #16
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	6892      	ldr	r2, [r2, #8]
 800b4ba:	1c50      	adds	r0, r2, #1
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	6891      	ldr	r1, [r2, #8]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	440a      	add	r2, r1
 800b4c4:	4601      	mov	r1, r0
 800b4c6:	69f8      	ldr	r0, [r7, #28]
 800b4c8:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	689a      	ldr	r2, [r3, #8]
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	441a      	add	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3320      	adds	r3, #32
 800b4da:	69f9      	ldr	r1, [r7, #28]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f010 fd89 	bl	801bff4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800b4e2:	69fb      	ldr	r3, [r7, #28]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3724      	adds	r7, #36	; 0x24
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd90      	pop	{r4, r7, pc}
 800b4ec:	080243d4 	.word	0x080243d4

0800b4f0 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800b4f0:	b5b0      	push	{r4, r5, r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	605a      	str	r2, [r3, #4]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685d      	ldr	r5, [r3, #4]
 800b506:	22b1      	movs	r2, #177	; 0xb1
 800b508:	490a      	ldr	r1, [pc, #40]	; (800b534 <_ZN11MockSupport16createActualCallEv+0x44>)
 800b50a:	202c      	movs	r0, #44	; 0x2c
 800b50c:	f7ff f830 	bl	800a570 <_ZnwjPKci>
 800b510:	4604      	mov	r4, r0
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	691a      	ldr	r2, [r3, #16]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	3320      	adds	r3, #32
 800b51a:	4629      	mov	r1, r5
 800b51c:	4620      	mov	r0, r4
 800b51e:	f00c fbdb 	bl	8017cd8 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bdb0      	pop	{r4, r5, r7, pc}
 800b532:	bf00      	nop
 800b534:	080243d4 	.word	0x080243d4

0800b538 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00d      	beq.n	800b568 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3320      	adds	r3, #32
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	4618      	mov	r0, r3
 800b554:	f010 fd2a 	bl	801bfac <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800b558:	4603      	mov	r3, r0
 800b55a:	f083 0301 	eor.w	r3, r3, #1
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800b564:	2301      	movs	r3, #1
 800b566:	e000      	b.n	800b56a <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800b572:	b590      	push	{r4, r7, lr}
 800b574:	b087      	sub	sp, #28
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800b57c:	f107 030c 	add.w	r3, r7, #12
 800b580:	683a      	ldr	r2, [r7, #0]
 800b582:	6879      	ldr	r1, [r7, #4]
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff fef9 	bl	800b37c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d014      	beq.n	800b5bc <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	33c4      	adds	r3, #196	; 0xc4
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d004      	beq.n	800b5b6 <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	3204      	adds	r2, #4
 800b5b0:	6812      	ldr	r2, [r2, #0]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b5c2:	f083 0301 	eor.w	r3, r3, #1
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d004      	beq.n	800b5d6 <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800b5cc:	f00e fcbe 	bl	8019f4c <_ZN21MockIgnoredActualCall8instanceEv>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	461c      	mov	r4, r3
 800b5d4:	e02f      	b.n	800b636 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00b      	beq.n	800b5f8 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800b5e0:	f00e fc6e 	bl	8019ec0 <_ZN19MockActualCallTrace8instanceEv>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	3208      	adds	r2, #8
 800b5ea:	6812      	ldr	r2, [r2, #0]
 800b5ec:	f107 010c 	add.w	r1, r7, #12
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	4790      	blx	r2
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	e01e      	b.n	800b636 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800b5f8:	f107 030c 	add.w	r3, r7, #12
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7ff ff9a 	bl	800b538 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d004      	beq.n	800b614 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800b60a:	f00e fc9f 	bl	8019f4c <_ZN21MockIgnoredActualCall8instanceEv>
 800b60e:	4603      	mov	r3, r0
 800b610:	461c      	mov	r4, r3
 800b612:	e010      	b.n	800b636 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	33c0      	adds	r3, #192	; 0xc0
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	4798      	blx	r3
 800b620:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	3308      	adds	r3, #8
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f107 020c 	add.w	r2, r7, #12
 800b62e:	4611      	mov	r1, r2
 800b630:	6978      	ldr	r0, [r7, #20]
 800b632:	4798      	blx	r3
    return *call;
 800b634:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800b636:	f107 030c 	add.w	r3, r7, #12
 800b63a:	4618      	mov	r0, r3
 800b63c:	f001 ff13 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800b640:	4623      	mov	r3, r4
}
 800b642:	4618      	mov	r0, r3
 800b644:	371c      	adds	r7, #28
 800b646:	46bd      	mov	sp, r7
 800b648:	bd90      	pop	{r4, r7, pc}

0800b64a <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	3338      	adds	r3, #56	; 0x38
 800b65e:	4618      	mov	r0, r3
 800b660:	f014 f819 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d01a      	beq.n	800b6a2 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800b66c:	68f9      	ldr	r1, [r7, #12]
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fc32 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	bf14      	ite	ne
 800b67a:	2301      	movne	r3, #1
 800b67c:	2300      	moveq	r3, #0
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	2b00      	cmp	r3, #0
 800b682:	d009      	beq.n	800b698 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800b684:	68f9      	ldr	r1, [r7, #12]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fc26 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b68c:	4603      	mov	r3, r0
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	3290      	adds	r2, #144	; 0x90
 800b692:	6812      	ldr	r2, [r2, #0]
 800b694:	4618      	mov	r0, r3
 800b696:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f013 ff05 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	e7e1      	b.n	800b666 <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800b6a2:	bf00      	nop
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b084      	sub	sp, #16
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3338      	adds	r3, #56	; 0x38
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f013 ffe9 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b6c4:	60f8      	str	r0, [r7, #12]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d01a      	beq.n	800b702 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800b6cc:	68f9      	ldr	r1, [r7, #12]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fc02 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	bf14      	ite	ne
 800b6da:	2301      	movne	r3, #1
 800b6dc:	2300      	moveq	r3, #0
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d009      	beq.n	800b6f8 <_ZN11MockSupport7disableEv+0x4e>
 800b6e4:	68f9      	ldr	r1, [r7, #12]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fbf6 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	3284      	adds	r2, #132	; 0x84
 800b6f2:	6812      	ldr	r2, [r2, #0]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f013 fed5 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	e7e1      	b.n	800b6c6 <_ZN11MockSupport7disableEv+0x1c>
}
 800b702:	bf00      	nop
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3338      	adds	r3, #56	; 0x38
 800b71e:	4618      	mov	r0, r3
 800b720:	f013 ffb9 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b724:	60f8      	str	r0, [r7, #12]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d01a      	beq.n	800b762 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800b72c:	68f9      	ldr	r1, [r7, #12]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fbd2 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	bf14      	ite	ne
 800b73a:	2301      	movne	r3, #1
 800b73c:	2300      	moveq	r3, #0
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2b00      	cmp	r3, #0
 800b742:	d009      	beq.n	800b758 <_ZN11MockSupport6enableEv+0x4e>
 800b744:	68f9      	ldr	r1, [r7, #12]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fbc6 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b74c:	4603      	mov	r3, r0
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	3288      	adds	r2, #136	; 0x88
 800b752:	6812      	ldr	r2, [r2, #0]
 800b754:	4618      	mov	r0, r3
 800b756:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f013 fea5 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	e7e1      	b.n	800b726 <_ZN11MockSupport6enableEv+0x1c>
}
 800b762:	bf00      	nop
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b084      	sub	sp, #16
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	460b      	mov	r3, r1
 800b774:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	78fa      	ldrb	r2, [r7, #3]
 800b77a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3338      	adds	r3, #56	; 0x38
 800b782:	4618      	mov	r0, r3
 800b784:	f013 ff87 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b788:	60f8      	str	r0, [r7, #12]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d01b      	beq.n	800b7c8 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800b790:	68f9      	ldr	r1, [r7, #12]
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 fba0 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	bf14      	ite	ne
 800b79e:	2301      	movne	r3, #1
 800b7a0:	2300      	moveq	r3, #0
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00a      	beq.n	800b7be <_ZN11MockSupport7tracingEb+0x54>
 800b7a8:	68f9      	ldr	r1, [r7, #12]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fb94 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	328c      	adds	r2, #140	; 0x8c
 800b7b6:	6812      	ldr	r2, [r2, #0]
 800b7b8:	78f9      	ldrb	r1, [r7, #3]
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f013 fe72 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b7c4:	60f8      	str	r0, [r7, #12]
 800b7c6:	e7e0      	b.n	800b78a <_ZN11MockSupport7tracingEb+0x20>
}
 800b7c8:	bf00      	nop
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	3320      	adds	r3, #32
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f010 fbc1 	bl	801bf64 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	3338      	adds	r3, #56	; 0x38
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f013 ff53 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b7f0:	60b8      	str	r0, [r7, #8]
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d01f      	beq.n	800b838 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800b7f8:	68b9      	ldr	r1, [r7, #8]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fb6c 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	bf14      	ite	ne
 800b806:	2301      	movne	r3, #1
 800b808:	2300      	moveq	r3, #0
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00e      	beq.n	800b82e <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800b810:	68b9      	ldr	r1, [r7, #8]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fb60 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b818:	4603      	mov	r3, r0
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	3298      	adds	r2, #152	; 0x98
 800b81e:	6812      	ldr	r2, [r2, #0]
 800b820:	4618      	mov	r0, r3
 800b822:	4790      	blx	r2
 800b824:	4603      	mov	r3, r0
 800b826:	461a      	mov	r2, r3
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	4413      	add	r3, r2
 800b82c:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b82e:	68b8      	ldr	r0, [r7, #8]
 800b830:	f013 fe3a 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b834:	60b8      	str	r0, [r7, #8]
 800b836:	e7dc      	b.n	800b7f2 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	bf14      	ite	ne
 800b83e:	2301      	movne	r3, #1
 800b840:	2300      	moveq	r3, #0
 800b842:	b2db      	uxtb	r3, r3
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d010      	beq.n	800b87e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	33bc      	adds	r3, #188	; 0xbc
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4610      	mov	r0, r2
 800b86c:	4798      	blx	r3
 800b86e:	4603      	mov	r3, r0
 800b870:	f083 0301 	eor.w	r3, r3, #1
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b87a:	2301      	movs	r3, #1
 800b87c:	e000      	b.n	800b880 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800b87e:	2300      	movs	r3, #0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800b884:	2300      	movs	r3, #0
 800b886:	e02a      	b.n	800b8de <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3338      	adds	r3, #56	; 0x38
 800b88c:	4618      	mov	r0, r3
 800b88e:	f013 ff02 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d020      	beq.n	800b8dc <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800b89a:	68f9      	ldr	r1, [r7, #12]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fb1b 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00f      	beq.n	800b8c8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b8a8:	68f9      	ldr	r1, [r7, #12]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fb14 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff ffca 	bl	800b84c <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	f083 0301 	eor.w	r3, r3, #1
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e000      	b.n	800b8ca <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e005      	b.n	800b8de <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f013 fde8 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b8d8:	60f8      	str	r0, [r7, #12]
 800b8da:	e7db      	b.n	800b894 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800b8dc:	2301      	movs	r3, #1
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b092      	sub	sp, #72	; 0x48
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b8ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f010 fa2c 	bl	801bd50 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f103 0220 	add.w	r2, r3, #32
 800b8fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b902:	4611      	mov	r1, r2
 800b904:	4618      	mov	r0, r3
 800b906:	f010 fbf3 	bl	801c0f0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	3338      	adds	r3, #56	; 0x38
 800b90e:	4618      	mov	r0, r3
 800b910:	f013 fec1 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b914:	6478      	str	r0, [r7, #68]	; 0x44
 800b916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d01d      	beq.n	800b958 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800b91c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fada 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	bf14      	ite	ne
 800b92a:	2301      	movne	r3, #1
 800b92c:	2300      	moveq	r3, #0
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00c      	beq.n	800b94e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b934:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 face 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f103 0220 	add.w	r2, r3, #32
 800b942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b946:	4611      	mov	r1, r2
 800b948:	4618      	mov	r0, r3
 800b94a:	f010 fbd1 	bl	801c0f0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b94e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b950:	f013 fdaa 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800b954:	6478      	str	r0, [r7, #68]	; 0x44
 800b956:	e7de      	b.n	800b916 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	691a      	ldr	r2, [r3, #16]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	330c      	adds	r3, #12
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4610      	mov	r0, r2
 800b968:	4798      	blx	r3
 800b96a:	4601      	mov	r1, r0
 800b96c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b970:	f107 0308 	add.w	r3, r7, #8
 800b974:	4618      	mov	r0, r3
 800b976:	f011 f9f5 	bl	801cd64 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	33c4      	adds	r3, #196	; 0xc4
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f107 0208 	add.w	r2, r7, #8
 800b986:	4611      	mov	r1, r2
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b98c:	f107 0308 	add.w	r3, r7, #8
 800b990:	4618      	mov	r0, r3
 800b992:	f000 fe6d 	bl	800c670 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b996:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b99a:	4618      	mov	r0, r3
 800b99c:	f010 f9ec 	bl	801bd78 <_ZN21MockExpectedCallsListD1Ev>
}
 800b9a0:	bf00      	nop
 800b9a2:	3748      	adds	r7, #72	; 0x48
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b092      	sub	sp, #72	; 0x48
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b9b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f010 f9cb 	bl	801bd50 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f103 0220 	add.w	r2, r3, #32
 800b9c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f010 fb92 	bl	801c0f0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	3338      	adds	r3, #56	; 0x38
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f013 fe60 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800b9d6:	6478      	str	r0, [r7, #68]	; 0x44
 800b9d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d01d      	beq.n	800ba1a <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800b9de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fa79 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	bf14      	ite	ne
 800b9ec:	2301      	movne	r3, #1
 800b9ee:	2300      	moveq	r3, #0
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00c      	beq.n	800ba10 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b9f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fa6d 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	f103 0220 	add.w	r2, r3, #32
 800ba04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f010 fb70 	bl	801c0f0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800ba10:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ba12:	f013 fd49 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800ba16:	6478      	str	r0, [r7, #68]	; 0x44
 800ba18:	e7de      	b.n	800b9d8 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	691a      	ldr	r2, [r3, #16]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	330c      	adds	r3, #12
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4610      	mov	r0, r2
 800ba2a:	4798      	blx	r3
 800ba2c:	4601      	mov	r1, r0
 800ba2e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ba32:	f107 0308 	add.w	r3, r7, #8
 800ba36:	4618      	mov	r0, r3
 800ba38:	f011 fa38 	bl	801ceac <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	33c4      	adds	r3, #196	; 0xc4
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f107 0208 	add.w	r2, r7, #8
 800ba48:	4611      	mov	r1, r2
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800ba4e:	f107 0308 	add.w	r3, r7, #8
 800ba52:	4618      	mov	r0, r3
 800ba54:	f000 fe2e 	bl	800c6b4 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800ba58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f010 f98b 	bl	801bd78 <_ZN21MockExpectedCallsListD1Ev>
}
 800ba62:	bf00      	nop
 800ba64:	3748      	adds	r7, #72	; 0x48
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
    clear();
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	339c      	adds	r3, #156	; 0x9c
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	691a      	ldr	r2, [r3, #16]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3308      	adds	r3, #8
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	4610      	mov	r0, r2
 800ba92:	4798      	blx	r3
}
 800ba94:	bf00      	nop
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800baa4:	f008 fd0a 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 800baa8:	4603      	mov	r3, r0
 800baaa:	4618      	mov	r0, r3
 800baac:	f007 fb78 	bl	80131a0 <_ZN10UtestShell10countCheckEv>
}
 800bab0:	bf00      	nop
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d008      	beq.n	800bada <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	33c4      	adds	r3, #196	; 0xc4
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4610      	mov	r0, r2
 800bad8:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	3338      	adds	r3, #56	; 0x38
 800bade:	4618      	mov	r0, r3
 800bae0:	f013 fdd9 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d023      	beq.n	800bb34 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800baec:	68f9      	ldr	r1, [r7, #12]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f9f2 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d009      	beq.n	800bb0e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800bafa:	68f9      	ldr	r1, [r7, #12]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f9eb 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb02:	4603      	mov	r3, r0
 800bb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e000      	b.n	800bb10 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00a      	beq.n	800bb2a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800bb14:	68f9      	ldr	r1, [r7, #12]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f9de 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	32c4      	adds	r2, #196	; 0xc4
 800bb24:	6812      	ldr	r2, [r2, #0]
 800bb26:	4618      	mov	r0, r3
 800bb28:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f013 fcbc 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800bb30:	60f8      	str	r0, [r7, #12]
 800bb32:	e7d8      	b.n	800bae6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800bb34:	bf00      	nop
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3320      	adds	r3, #32
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f010 f947 	bl	801bddc <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800bb54:	2301      	movs	r3, #1
 800bb56:	e027      	b.n	800bba8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3338      	adds	r3, #56	; 0x38
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f013 fd9a 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d01d      	beq.n	800bba6 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800bb6a:	68f9      	ldr	r1, [r7, #12]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 f9b3 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00c      	beq.n	800bb92 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800bb78:	68f9      	ldr	r1, [r7, #12]
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f9ac 	bl	800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb80:	4603      	mov	r3, r0
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff ffda 	bl	800bb3c <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e000      	b.n	800bb94 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800bb92:	2300      	movs	r3, #0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e005      	b.n	800bba8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f013 fc83 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	e7de      	b.n	800bb64 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f7ff ff7d 	bl	800bab8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f7ff fe44 	bl	800b84c <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00a      	beq.n	800bbe0 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3398      	adds	r3, #152	; 0x98
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	4798      	blx	r3
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e000      	b.n	800bbe2 <_ZN11MockSupport17checkExpectationsEv+0x32>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d002      	beq.n	800bbec <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7ff fe7d 	bl	800b8e6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7ff ffa5 	bl	800bb3c <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d002      	beq.n	800bbfe <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7ff fed5 	bl	800b9a8 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800bbfe:	bf00      	nop
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b082      	sub	sp, #8
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3338      	adds	r3, #56	; 0x38
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f013 fd0e 	bl	801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	bf14      	ite	ne
 800bc22:	2301      	movne	r3, #1
 800bc24:	2300      	moveq	r3, #0
 800bc26:	b2db      	uxtb	r3, r3
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800bc30:	b590      	push	{r4, r7, lr}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	3338      	adds	r3, #56	; 0x38
 800bc3e:	6839      	ldr	r1, [r7, #0]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f013 fcf9 	bl	801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bc46:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d111      	bne.n	800bc72 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800bc4e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bc52:	490a      	ldr	r1, [pc, #40]	; (800bc7c <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800bc54:	2038      	movs	r0, #56	; 0x38
 800bc56:	f7fe fc8b 	bl	800a570 <_ZnwjPKci>
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f011 fd6e 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
 800bc64:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	3338      	adds	r3, #56	; 0x38
 800bc6a:	68f9      	ldr	r1, [r7, #12]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f013 fcad 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800bc72:	68fb      	ldr	r3, [r7, #12]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd90      	pop	{r4, r7, pc}
 800bc7c:	080243d4 	.word	0x080243d4

0800bc80 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800bc8e:	68b9      	ldr	r1, [r7, #8]
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f7ff ffcd 	bl	800bc30 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800bc96:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3344      	adds	r3, #68	; 0x44
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	6879      	ldr	r1, [r7, #4]
 800bca4:	6978      	ldr	r0, [r7, #20]
 800bca6:	4798      	blx	r3
}
 800bca8:	bf00      	nop
 800bcaa:	3718      	adds	r7, #24
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b088      	sub	sp, #32
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	3338      	adds	r3, #56	; 0x38
 800bcc0:	6879      	ldr	r1, [r7, #4]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f013 fcb8 	bl	801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bcc8:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d111      	bne.n	800bcf4 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800bcd0:	f107 0314 	add.w	r3, r7, #20
 800bcd4:	490b      	ldr	r1, [pc, #44]	; (800bd04 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f001 f80d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800bcdc:	f107 0314 	add.w	r3, r7, #20
 800bce0:	4619      	mov	r1, r3
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f011 fd2c 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
 800bce8:	f107 0314 	add.w	r3, r7, #20
 800bcec:	4618      	mov	r0, r3
 800bcee:	f001 fbba 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800bcf2:	e003      	b.n	800bcfc <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800bcf4:	69f9      	ldr	r1, [r7, #28]
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f7ff f8a2 	bl	800ae40 <_ZN14MockNamedValueC1ERKS_>
}
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	3720      	adds	r7, #32
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	080243cc 	.word	0x080243cc

0800bd08 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800bd08:	b590      	push	{r4, r7, lr}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800bd12:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bd16:	4927      	ldr	r1, [pc, #156]	; (800bdb4 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800bd18:	2048      	movs	r0, #72	; 0x48
 800bd1a:	f7fe fc29 	bl	800a570 <_ZnwjPKci>
 800bd1e:	4604      	mov	r4, r0
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	4620      	mov	r0, r4
 800bd24:	f7ff f8f8 	bl	800af18 <_ZN11MockSupportC1ERK12SimpleString>
 800bd28:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	33a4      	adds	r3, #164	; 0xa4
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	6952      	ldr	r2, [r2, #20]
 800bd36:	4611      	mov	r1, r2
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d005      	beq.n	800bd52 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3390      	adds	r3, #144	; 0x90
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bd58:	f083 0301 	eor.w	r3, r3, #1
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d005      	beq.n	800bd6e <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	3384      	adds	r3, #132	; 0x84
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	7b1b      	ldrb	r3, [r3, #12]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d005      	beq.n	800bd82 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3308      	adds	r3, #8
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	4798      	blx	r3

    newMock->tracing(tracing_);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	338c      	adds	r3, #140	; 0x8c
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800bd90:	4611      	mov	r1, r2
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	33b8      	adds	r3, #184	; 0xb8
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	3230      	adds	r2, #48	; 0x30
 800bda2:	4611      	mov	r1, r2
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	4798      	blx	r3
    return newMock;
 800bda8:	68fb      	ldr	r3, [r7, #12]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd90      	pop	{r4, r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	080243d4 	.word	0x080243d4

0800bdb8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800bdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdba:	b0ab      	sub	sp, #172	; 0xac
 800bdbc:	af04      	add	r7, sp, #16
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800bdc2:	f107 0308 	add.w	r3, r7, #8
 800bdc6:	4941      	ldr	r1, [pc, #260]	; (800becc <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 ff94 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800bdce:	f107 0308 	add.w	r3, r7, #8
 800bdd2:	6839      	ldr	r1, [r7, #0]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f001 fbc3 	bl	800d560 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800bdda:	f107 0308 	add.w	r3, r7, #8
 800bdde:	4619      	mov	r1, r3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7ff ff10 	bl	800bc06 <_ZN11MockSupport7hasDataERK12SimpleString>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d048      	beq.n	800be7e <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800bdec:	f008 fb66 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	3324      	adds	r3, #36	; 0x24
 800bdf6:	681d      	ldr	r5, [r3, #0]
 800bdf8:	f107 0318 	add.w	r3, r7, #24
 800bdfc:	f107 0208 	add.w	r2, r7, #8
 800be00:	6879      	ldr	r1, [r7, #4]
 800be02:	4618      	mov	r0, r3
 800be04:	f7ff ff54 	bl	800bcb0 <_ZN11MockSupport7getDataERK12SimpleString>
 800be08:	f107 0310 	add.w	r3, r7, #16
 800be0c:	f107 0218 	add.w	r2, r7, #24
 800be10:	4611      	mov	r1, r2
 800be12:	4618      	mov	r0, r3
 800be14:	f011 ff63 	bl	801dcde <_ZNK14MockNamedValue7getTypeEv>
 800be18:	f107 0310 	add.w	r3, r7, #16
 800be1c:	4618      	mov	r0, r3
 800be1e:	f001 faf5 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800be22:	4606      	mov	r6, r0
 800be24:	f008 fb5a 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800be28:	4603      	mov	r3, r0
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	f240 13bd 	movw	r3, #445	; 0x1bd
 800be30:	9301      	str	r3, [sp, #4]
 800be32:	4b27      	ldr	r3, [pc, #156]	; (800bed0 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	2300      	movs	r3, #0
 800be38:	4632      	mov	r2, r6
 800be3a:	4926      	ldr	r1, [pc, #152]	; (800bed4 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800be3c:	4620      	mov	r0, r4
 800be3e:	47a8      	blx	r5
 800be40:	f107 0310 	add.w	r3, r7, #16
 800be44:	4618      	mov	r0, r3
 800be46:	f001 fb0e 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800be4a:	f107 0318 	add.w	r3, r7, #24
 800be4e:	4618      	mov	r0, r3
 800be50:	f011 fca0 	bl	801d794 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800be54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800be58:	f107 0208 	add.w	r2, r7, #8
 800be5c:	6879      	ldr	r1, [r7, #4]
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff ff26 	bl	800bcb0 <_ZN11MockSupport7getDataERK12SimpleString>
 800be64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800be68:	4618      	mov	r0, r3
 800be6a:	f012 fa51 	bl	801e310 <_ZNK14MockNamedValue16getObjectPointerEv>
 800be6e:	4604      	mov	r4, r0
 800be70:	bf00      	nop
 800be72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800be76:	4618      	mov	r0, r3
 800be78:	f011 fc8c 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 800be7c:	e01b      	b.n	800beb6 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7ff ff41 	bl	800bd08 <_ZN11MockSupport5cloneERK12SimpleString>
 800be86:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800be8a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800be8e:	4911      	ldr	r1, [pc, #68]	; (800bed4 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800be90:	4618      	mov	r0, r3
 800be92:	f000 ff30 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800be96:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800be9a:	f107 0108 	add.w	r1, r7, #8
 800be9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7ff feec 	bl	800bc80 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800bea8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800beac:	4618      	mov	r0, r3
 800beae:	f001 fada 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return newMock;
 800beb2:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800beb6:	f107 0308 	add.w	r3, r7, #8
 800beba:	4618      	mov	r0, r3
 800bebc:	f001 fad3 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800bec0:	4623      	mov	r3, r4
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	379c      	adds	r7, #156	; 0x9c
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beca:	bf00      	nop
 800becc:	080243ec 	.word	0x080243ec
 800bed0:	080243d4 	.word	0x080243d4
 800bed4:	0802440c 	.word	0x0802440c

0800bed8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800bed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bedc:	b08b      	sub	sp, #44	; 0x2c
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800bee4:	2500      	movs	r5, #0
 800bee6:	2600      	movs	r6, #0
 800bee8:	f107 0308 	add.w	r3, r7, #8
 800beec:	6839      	ldr	r1, [r7, #0]
 800beee:	4618      	mov	r0, r3
 800bef0:	f013 fb28 	bl	801f544 <_ZNK22MockNamedValueListNode7getTypeEv>
 800bef4:	f04f 0801 	mov.w	r8, #1
 800bef8:	f107 0310 	add.w	r3, r7, #16
 800befc:	492e      	ldr	r1, [pc, #184]	; (800bfb8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 fef9 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800bf04:	f04f 0901 	mov.w	r9, #1
 800bf08:	f107 0210 	add.w	r2, r7, #16
 800bf0c:	f107 0308 	add.w	r3, r7, #8
 800bf10:	4611      	mov	r1, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f001 fab3 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d01a      	beq.n	800bf54 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800bf1e:	f107 0318 	add.w	r3, r7, #24
 800bf22:	6839      	ldr	r1, [r7, #0]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f013 fafa 	bl	801f51e <_ZNK22MockNamedValueListNode7getNameEv>
 800bf2a:	2501      	movs	r5, #1
 800bf2c:	f107 0320 	add.w	r3, r7, #32
 800bf30:	4922      	ldr	r1, [pc, #136]	; (800bfbc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800bf32:	4618      	mov	r0, r3
 800bf34:	f000 fedf 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800bf38:	2601      	movs	r6, #1
 800bf3a:	f107 0220 	add.w	r2, r7, #32
 800bf3e:	f107 0318 	add.w	r3, r7, #24
 800bf42:	4611      	mov	r1, r2
 800bf44:	4618      	mov	r0, r3
 800bf46:	f000 ff54 	bl	800cdf2 <_ZNK12SimpleString8containsERKS_>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800bf50:	2401      	movs	r4, #1
 800bf52:	e000      	b.n	800bf56 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800bf54:	2400      	movs	r4, #0
 800bf56:	2e00      	cmp	r6, #0
 800bf58:	d004      	beq.n	800bf64 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800bf5a:	f107 0320 	add.w	r3, r7, #32
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f001 fa81 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800bf64:	2d00      	cmp	r5, #0
 800bf66:	d004      	beq.n	800bf72 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800bf68:	f107 0318 	add.w	r3, r7, #24
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f001 fa7a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800bf72:	f1b9 0f00 	cmp.w	r9, #0
 800bf76:	d004      	beq.n	800bf82 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800bf78:	f107 0310 	add.w	r3, r7, #16
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f001 fa72 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800bf82:	f1b8 0f00 	cmp.w	r8, #0
 800bf86:	d004      	beq.n	800bf92 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800bf88:	f107 0308 	add.w	r3, r7, #8
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f001 fa6a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800bf92:	2c00      	cmp	r4, #0
 800bf94:	d00a      	beq.n	800bfac <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800bf96:	6838      	ldr	r0, [r7, #0]
 800bf98:	f013 fa92 	bl	801f4c0 <_ZN22MockNamedValueListNode4itemEv>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	32a0      	adds	r2, #160	; 0xa0
 800bfa2:	6812      	ldr	r2, [r2, #0]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	4790      	blx	r2
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	e000      	b.n	800bfae <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	372c      	adds	r7, #44	; 0x2c
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfb8:	0802440c 	.word	0x0802440c
 800bfbc:	080243ec 	.word	0x080243ec

0800bfc0 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00a      	beq.n	800bfe8 <_ZN11MockSupport11returnValueEv+0x28>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	3354      	adds	r3, #84	; 0x54
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	4798      	blx	r3
 800bfe6:	e010      	b.n	800c00a <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800bfe8:	f107 0308 	add.w	r3, r7, #8
 800bfec:	4909      	ldr	r1, [pc, #36]	; (800c014 <_ZN11MockSupport11returnValueEv+0x54>)
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 fe81 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800bff4:	f107 0308 	add.w	r3, r7, #8
 800bff8:	4619      	mov	r1, r3
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f011 fba0 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
 800c000:	f107 0308 	add.w	r3, r7, #8
 800c004:	4618      	mov	r0, r3
 800c006:	f001 fa2e 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	080243cc 	.word	0x080243cc

0800c018 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800c018:	b590      	push	{r4, r7, lr}
 800c01a:	b091      	sub	sp, #68	; 0x44
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	3320      	adds	r3, #32
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f107 0208 	add.w	r2, r7, #8
 800c02c:	6879      	ldr	r1, [r7, #4]
 800c02e:	4610      	mov	r0, r2
 800c030:	4798      	blx	r3
 800c032:	f107 0308 	add.w	r3, r7, #8
 800c036:	4618      	mov	r0, r3
 800c038:	f011 fe60 	bl	801dcfc <_ZNK14MockNamedValue12getBoolValueEv>
 800c03c:	4603      	mov	r3, r0
 800c03e:	461c      	mov	r4, r3
 800c040:	bf00      	nop
 800c042:	f107 0308 	add.w	r3, r7, #8
 800c046:	4618      	mov	r0, r3
 800c048:	f011 fba4 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 800c04c:	4623      	mov	r3, r4
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3744      	adds	r7, #68	; 0x44
 800c052:	46bd      	mov	sp, r7
 800c054:	bd90      	pop	{r4, r7, pc}

0800c056 <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800c056:	b590      	push	{r4, r7, lr}
 800c058:	b091      	sub	sp, #68	; 0x44
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3320      	adds	r3, #32
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f107 0208 	add.w	r2, r7, #8
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	4610      	mov	r0, r2
 800c06e:	4798      	blx	r3
 800c070:	f107 0308 	add.w	r3, r7, #8
 800c074:	4618      	mov	r0, r3
 800c076:	f011 fe69 	bl	801dd4c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800c07a:	4604      	mov	r4, r0
 800c07c:	bf00      	nop
 800c07e:	f107 0308 	add.w	r3, r7, #8
 800c082:	4618      	mov	r0, r3
 800c084:	f011 fb86 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 800c088:	4623      	mov	r3, r4
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3744      	adds	r7, #68	; 0x44
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd90      	pop	{r4, r7, pc}

0800c092 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800c092:	b590      	push	{r4, r7, lr}
 800c094:	b091      	sub	sp, #68	; 0x44
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	3320      	adds	r3, #32
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f107 0208 	add.w	r2, r7, #8
 800c0a6:	6879      	ldr	r1, [r7, #4]
 800c0a8:	4610      	mov	r0, r2
 800c0aa:	4798      	blx	r3
 800c0ac:	f107 0308 	add.w	r3, r7, #8
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f011 fe9b 	bl	801ddec <_ZNK14MockNamedValue11getIntValueEv>
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	bf00      	nop
 800c0ba:	f107 0308 	add.w	r3, r7, #8
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f011 fb68 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 800c0c4:	4623      	mov	r3, r4
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3744      	adds	r7, #68	; 0x44
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd90      	pop	{r4, r7, pc}

0800c0ce <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	331c      	adds	r3, #28
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	4798      	blx	r3
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d007      	beq.n	800c0fa <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	335c      	adds	r3, #92	; 0x5c
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	4798      	blx	r3
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	e000      	b.n	800c0fc <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800c0fa:	683b      	ldr	r3, [r7, #0]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	331c      	adds	r3, #28
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	4798      	blx	r3
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00a      	beq.n	800c138 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3368      	adds	r3, #104	; 0x68
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	4798      	blx	r3
 800c12e:	eeb0 7a40 	vmov.f32	s14, s0
 800c132:	eef0 7a60 	vmov.f32	s15, s1
 800c136:	e001      	b.n	800c13c <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800c138:	ed97 7b00 	vldr	d7, [r7]
}
 800c13c:	eeb0 0a47 	vmov.f32	s0, s14
 800c140:	eef0 0a67 	vmov.f32	s1, s15
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b082      	sub	sp, #8
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	331c      	adds	r3, #28
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	4798      	blx	r3
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d007      	beq.n	800c176 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	3338      	adds	r3, #56	; 0x38
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	4798      	blx	r3
 800c172:	4603      	mov	r3, r0
 800c174:	e000      	b.n	800c178 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800c176:	683b      	ldr	r3, [r7, #0]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	460b      	mov	r3, r1
 800c18a:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	331c      	adds	r3, #28
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	4798      	blx	r3
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d007      	beq.n	800c1ae <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3324      	adds	r3, #36	; 0x24
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	4798      	blx	r3
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	e000      	b.n	800c1b0 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800c1ae:	78fb      	ldrb	r3, [r7, #3]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	331c      	adds	r3, #28
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	4798      	blx	r3
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d007      	beq.n	800c1e4 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	332c      	adds	r3, #44	; 0x2c
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	4798      	blx	r3
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	e000      	b.n	800c1e6 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800c1e4:	683b      	ldr	r3, [r7, #0]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	331c      	adds	r3, #28
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	4798      	blx	r3
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d007      	beq.n	800c21a <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	3334      	adds	r3, #52	; 0x34
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	4798      	blx	r3
 800c216:	4603      	mov	r3, r0
 800c218:	e000      	b.n	800c21c <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800c21a:	683b      	ldr	r3, [r7, #0]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	331c      	adds	r3, #28
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	4798      	blx	r3
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d007      	beq.n	800c250 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3340      	adds	r3, #64	; 0x40
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	4798      	blx	r3
 800c24c:	4603      	mov	r3, r0
 800c24e:	e000      	b.n	800c252 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800c250:	683b      	ldr	r3, [r7, #0]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800c25a:	b590      	push	{r4, r7, lr}
 800c25c:	b091      	sub	sp, #68	; 0x44
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3320      	adds	r3, #32
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f107 0208 	add.w	r2, r7, #8
 800c26e:	6879      	ldr	r1, [r7, #4]
 800c270:	4610      	mov	r0, r2
 800c272:	4798      	blx	r3
 800c274:	f107 0308 	add.w	r3, r7, #8
 800c278:	4618      	mov	r0, r3
 800c27a:	f011 fddf 	bl	801de3c <_ZNK14MockNamedValue15getLongIntValueEv>
 800c27e:	4604      	mov	r4, r0
 800c280:	bf00      	nop
 800c282:	f107 0308 	add.w	r3, r7, #8
 800c286:	4618      	mov	r0, r3
 800c288:	f011 fa84 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 800c28c:	4623      	mov	r3, r4
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3744      	adds	r7, #68	; 0x44
 800c292:	46bd      	mov	sp, r7
 800c294:	bd90      	pop	{r4, r7, pc}

0800c296 <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800c296:	b590      	push	{r4, r7, lr}
 800c298:	b091      	sub	sp, #68	; 0x44
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3320      	adds	r3, #32
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f107 0208 	add.w	r2, r7, #8
 800c2aa:	6879      	ldr	r1, [r7, #4]
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	4798      	blx	r3
 800c2b0:	f107 0308 	add.w	r3, r7, #8
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f011 fe23 	bl	801df00 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	bf00      	nop
 800c2be:	f107 0308 	add.w	r3, r7, #8
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f011 fa66 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 800c2c8:	4623      	mov	r3, r4
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3744      	adds	r7, #68	; 0x44
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd90      	pop	{r4, r7, pc}
	...

0800c2d4 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800c2d4:	b5b0      	push	{r4, r5, r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af02      	add	r7, sp, #8
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800c2de:	f008 f8ed 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	3368      	adds	r3, #104	; 0x68
 800c2e8:	681d      	ldr	r5, [r3, #0]
 800c2ea:	f008 f8f7 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	f240 2345 	movw	r3, #581	; 0x245
 800c2f6:	4a06      	ldr	r2, [pc, #24]	; (800c310 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800c2f8:	4906      	ldr	r1, [pc, #24]	; (800c314 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	47a8      	blx	r5
    return cpputest_longlong(0);
 800c2fe:	2100      	movs	r1, #0
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7fe fd2f 	bl	800ad64 <_ZN17cpputest_longlongC1Ei>
}
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bdb0      	pop	{r4, r5, r7, pc}
 800c30e:	bf00      	nop
 800c310:	080243d4 	.word	0x080243d4
 800c314:	08024418 	.word	0x08024418

0800c318 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800c318:	b5b0      	push	{r4, r5, r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af02      	add	r7, sp, #8
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800c322:	f008 f8cb 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 800c326:	4604      	mov	r4, r0
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	3368      	adds	r3, #104	; 0x68
 800c32c:	681d      	ldr	r5, [r3, #0]
 800c32e:	f008 f8d5 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c332:	4603      	mov	r3, r0
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	f240 234b 	movw	r3, #587	; 0x24b
 800c33a:	4a06      	ldr	r2, [pc, #24]	; (800c354 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800c33c:	4906      	ldr	r1, [pc, #24]	; (800c358 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800c33e:	4620      	mov	r0, r4
 800c340:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800c342:	2100      	movs	r1, #0
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7fe fd19 	bl	800ad7c <_ZN18cpputest_ulonglongC1Ei>
}
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bdb0      	pop	{r4, r5, r7, pc}
 800c352:	bf00      	nop
 800c354:	080243d4 	.word	0x080243d4
 800c358:	08024438 	.word	0x08024438

0800c35c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800c35c:	b5b0      	push	{r4, r5, r7, lr}
 800c35e:	b086      	sub	sp, #24
 800c360:	af02      	add	r7, sp, #8
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	4639      	mov	r1, r7
 800c368:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800c36c:	f008 f8a6 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 800c370:	4604      	mov	r4, r0
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	3368      	adds	r3, #104	; 0x68
 800c376:	681d      	ldr	r5, [r3, #0]
 800c378:	f008 f8b0 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c37c:	4603      	mov	r3, r0
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	f240 2351 	movw	r3, #593	; 0x251
 800c384:	4a06      	ldr	r2, [pc, #24]	; (800c3a0 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800c386:	4907      	ldr	r1, [pc, #28]	; (800c3a4 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800c388:	4620      	mov	r0, r4
 800c38a:	47a8      	blx	r5
    return defaultValue;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	461a      	mov	r2, r3
 800c390:	463b      	mov	r3, r7
 800c392:	cb03      	ldmia	r3!, {r0, r1}
 800c394:	6010      	str	r0, [r2, #0]
 800c396:	6051      	str	r1, [r2, #4]
}
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bdb0      	pop	{r4, r5, r7, pc}
 800c3a0:	080243d4 	.word	0x080243d4
 800c3a4:	08024418 	.word	0x08024418

0800c3a8 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800c3a8:	b5b0      	push	{r4, r5, r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af02      	add	r7, sp, #8
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	4639      	mov	r1, r7
 800c3b4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800c3b8:	f008 f880 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 800c3bc:	4604      	mov	r4, r0
 800c3be:	6823      	ldr	r3, [r4, #0]
 800c3c0:	3368      	adds	r3, #104	; 0x68
 800c3c2:	681d      	ldr	r5, [r3, #0]
 800c3c4:	f008 f88a 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	f240 2357 	movw	r3, #599	; 0x257
 800c3d0:	4a06      	ldr	r2, [pc, #24]	; (800c3ec <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800c3d2:	4907      	ldr	r1, [pc, #28]	; (800c3f0 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	47a8      	blx	r5
    return defaultValue;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	463b      	mov	r3, r7
 800c3de:	cb03      	ldmia	r3!, {r0, r1}
 800c3e0:	6010      	str	r0, [r2, #0]
 800c3e2:	6051      	str	r1, [r2, #4]
}
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bdb0      	pop	{r4, r5, r7, pc}
 800c3ec:	080243d4 	.word	0x080243d4
 800c3f0:	08024438 	.word	0x08024438

0800c3f4 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800c3f4:	b590      	push	{r4, r7, lr}
 800c3f6:	b091      	sub	sp, #68	; 0x44
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	3320      	adds	r3, #32
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f107 0208 	add.w	r2, r7, #8
 800c408:	6879      	ldr	r1, [r7, #4]
 800c40a:	4610      	mov	r0, r2
 800c40c:	4798      	blx	r3
 800c40e:	f107 0308 	add.w	r3, r7, #8
 800c412:	4618      	mov	r0, r3
 800c414:	f011 fea8 	bl	801e168 <_ZNK14MockNamedValue14getStringValueEv>
 800c418:	4604      	mov	r4, r0
 800c41a:	bf00      	nop
 800c41c:	f107 0308 	add.w	r3, r7, #8
 800c420:	4618      	mov	r0, r3
 800c422:	f011 f9b7 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 800c426:	4623      	mov	r3, r4
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3744      	adds	r7, #68	; 0x44
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd90      	pop	{r4, r7, pc}

0800c430 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800c430:	b580      	push	{r7, lr}
 800c432:	ed2d 8b02 	vpush	{d8}
 800c436:	b090      	sub	sp, #64	; 0x40
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3320      	adds	r3, #32
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f107 0208 	add.w	r2, r7, #8
 800c448:	6879      	ldr	r1, [r7, #4]
 800c44a:	4610      	mov	r0, r2
 800c44c:	4798      	blx	r3
 800c44e:	f107 0308 	add.w	r3, r7, #8
 800c452:	4618      	mov	r0, r3
 800c454:	f011 fe2c 	bl	801e0b0 <_ZNK14MockNamedValue14getDoubleValueEv>
 800c458:	eeb0 8a40 	vmov.f32	s16, s0
 800c45c:	eef0 8a60 	vmov.f32	s17, s1
 800c460:	bf00      	nop
 800c462:	f107 0308 	add.w	r3, r7, #8
 800c466:	4618      	mov	r0, r3
 800c468:	f011 f994 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 800c46c:	eeb0 7a48 	vmov.f32	s14, s16
 800c470:	eef0 7a68 	vmov.f32	s15, s17
}
 800c474:	eeb0 0a47 	vmov.f32	s0, s14
 800c478:	eef0 0a67 	vmov.f32	s1, s15
 800c47c:	3740      	adds	r7, #64	; 0x40
 800c47e:	46bd      	mov	sp, r7
 800c480:	ecbd 8b02 	vpop	{d8}
 800c484:	bd80      	pop	{r7, pc}

0800c486 <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b082      	sub	sp, #8
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	331c      	adds	r3, #28
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	4798      	blx	r3
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d007      	beq.n	800c4b2 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	336c      	adds	r3, #108	; 0x6c
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	4798      	blx	r3
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	e000      	b.n	800c4b4 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800c4b2:	683b      	ldr	r3, [r7, #0]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	331c      	adds	r3, #28
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	4798      	blx	r3
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d007      	beq.n	800c4e8 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3378      	adds	r3, #120	; 0x78
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	4798      	blx	r3
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	e000      	b.n	800c4ea <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800c4e8:	683b      	ldr	r3, [r7, #0]
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b082      	sub	sp, #8
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	331c      	adds	r3, #28
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	4798      	blx	r3
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d007      	beq.n	800c51e <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3380      	adds	r3, #128	; 0x80
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	4798      	blx	r3
 800c51a:	4603      	mov	r3, r0
 800c51c:	e000      	b.n	800c520 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800c51e:	683b      	ldr	r3, [r7, #0]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800c528:	b590      	push	{r4, r7, lr}
 800c52a:	b091      	sub	sp, #68	; 0x44
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3320      	adds	r3, #32
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f107 0208 	add.w	r2, r7, #8
 800c53c:	6879      	ldr	r1, [r7, #4]
 800c53e:	4610      	mov	r0, r2
 800c540:	4798      	blx	r3
 800c542:	f107 0308 	add.w	r3, r7, #8
 800c546:	4618      	mov	r0, r3
 800c548:	f011 fe36 	bl	801e1b8 <_ZNK14MockNamedValue15getPointerValueEv>
 800c54c:	4604      	mov	r4, r0
 800c54e:	bf00      	nop
 800c550:	f107 0308 	add.w	r3, r7, #8
 800c554:	4618      	mov	r0, r3
 800c556:	f011 f91d 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 800c55a:	4623      	mov	r3, r4
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3744      	adds	r7, #68	; 0x44
 800c560:	46bd      	mov	sp, r7
 800c562:	bd90      	pop	{r4, r7, pc}

0800c564 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800c564:	b590      	push	{r4, r7, lr}
 800c566:	b091      	sub	sp, #68	; 0x44
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	3320      	adds	r3, #32
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f107 0208 	add.w	r2, r7, #8
 800c578:	6879      	ldr	r1, [r7, #4]
 800c57a:	4610      	mov	r0, r2
 800c57c:	4798      	blx	r3
 800c57e:	f107 0308 	add.w	r3, r7, #8
 800c582:	4618      	mov	r0, r3
 800c584:	f011 fe40 	bl	801e208 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800c588:	4604      	mov	r4, r0
 800c58a:	bf00      	nop
 800c58c:	f107 0308 	add.w	r3, r7, #8
 800c590:	4618      	mov	r0, r3
 800c592:	f011 f8ff 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 800c596:	4623      	mov	r3, r4
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3744      	adds	r7, #68	; 0x44
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd90      	pop	{r4, r7, pc}

0800c5a0 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800c5a0:	b590      	push	{r4, r7, lr}
 800c5a2:	b091      	sub	sp, #68	; 0x44
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	3320      	adds	r3, #32
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f107 0208 	add.w	r2, r7, #8
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	4610      	mov	r0, r2
 800c5b8:	4798      	blx	r3
 800c5ba:	f107 0308 	add.w	r3, r7, #8
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f011 fe4a 	bl	801e258 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	bf00      	nop
 800c5c8:	f107 0308 	add.w	r3, r7, #8
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f011 f8e1 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 800c5d2:	4623      	mov	r3, r4
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3744      	adds	r7, #68	; 0x44
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd90      	pop	{r4, r7, pc}

0800c5dc <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00a      	beq.n	800c602 <_ZN11MockSupport14hasReturnValueEv+0x26>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	3350      	adds	r3, #80	; 0x50
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4610      	mov	r0, r2
 800c5fc:	4798      	blx	r3
 800c5fe:	4603      	mov	r3, r0
 800c600:	e000      	b.n	800c604 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <_Z41__static_initialization_and_destruction_0ii>:
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d115      	bne.n	800c648 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c622:	4293      	cmp	r3, r2
 800c624:	d110      	bne.n	800c648 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800c626:	f107 0308 	add.w	r3, r7, #8
 800c62a:	490f      	ldr	r1, [pc, #60]	; (800c668 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 fb62 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800c632:	f107 0308 	add.w	r3, r7, #8
 800c636:	4619      	mov	r1, r3
 800c638:	480c      	ldr	r0, [pc, #48]	; (800c66c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c63a:	f7fe fc6d 	bl	800af18 <_ZN11MockSupportC1ERK12SimpleString>
 800c63e:	f107 0308 	add.w	r3, r7, #8
 800c642:	4618      	mov	r0, r3
 800c644:	f000 ff0f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d107      	bne.n	800c65e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c654:	4293      	cmp	r3, r2
 800c656:	d102      	bne.n	800c65e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800c658:	4804      	ldr	r0, [pc, #16]	; (800c66c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c65a:	f7fe fca7 	bl	800afac <_ZN11MockSupportD1Ev>
}
 800c65e:	bf00      	nop
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	080243cc 	.word	0x080243cc
 800c66c:	20000858 	.word	0x20000858

0800c670 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	4a05      	ldr	r2, [pc, #20]	; (800c690 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4618      	mov	r0, r3
 800c682:	f7fe fbbb 	bl	800adfc <_ZN11MockFailureD1Ev>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4618      	mov	r0, r3
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	0802834c 	.word	0x0802834c

0800c694 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f7ff ffe7 	bl	800c670 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800c6a2:	2134      	movs	r1, #52	; 0x34
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7fd ff77 	bl	800a598 <_ZdlPvj>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	4a05      	ldr	r2, [pc, #20]	; (800c6d4 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	601a      	str	r2, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7fe fb99 	bl	800adfc <_ZN11MockFailureD1Ev>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	08028320 	.word	0x08028320

0800c6d8 <_ZN20MockCallOrderFailureD0Ev>:
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f7ff ffe7 	bl	800c6b4 <_ZN20MockCallOrderFailureD1Ev>
 800c6e6:	2134      	movs	r1, #52	; 0x34
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f7fd ff55 	bl	800a598 <_ZdlPvj>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c700:	2001      	movs	r0, #1
 800c702:	f7ff ff83 	bl	800c60c <_Z41__static_initialization_and_destruction_0ii>
 800c706:	bd80      	pop	{r7, pc}

0800c708 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800c708:	b580      	push	{r7, lr}
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c710:	2000      	movs	r0, #0
 800c712:	f7ff ff7b 	bl	800c60c <_Z41__static_initialization_and_destruction_0ii>
 800c716:	bd80      	pop	{r7, pc}

0800c718 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800c720:	4b05      	ldr	r3, [pc, #20]	; (800c738 <_ZN11SimpleMutexC1Ev+0x20>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4798      	blx	r3
 800c726:	4602      	mov	r2, r0
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	601a      	str	r2, [r3, #0]
}
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4618      	mov	r0, r3
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	200000f0 	.word	0x200000f0

0800c73c <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800c744:	4b05      	ldr	r3, [pc, #20]	; (800c75c <_ZN11SimpleMutexD1Ev+0x20>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	6812      	ldr	r2, [r2, #0]
 800c74c:	4610      	mov	r0, r2
 800c74e:	4798      	blx	r3
}
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4618      	mov	r0, r3
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	200000fc 	.word	0x200000fc

0800c760 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800c768:	4b04      	ldr	r3, [pc, #16]	; (800c77c <_ZN11SimpleMutex4LockEv+0x1c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	6812      	ldr	r2, [r2, #0]
 800c770:	4610      	mov	r0, r2
 800c772:	4798      	blx	r3
}
 800c774:	bf00      	nop
 800c776:	3708      	adds	r7, #8
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	200000f4 	.word	0x200000f4

0800c780 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800c788:	4b04      	ldr	r3, [pc, #16]	; (800c79c <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	6812      	ldr	r2, [r2, #0]
 800c790:	4610      	mov	r0, r2
 800c792:	4798      	blx	r3
}
 800c794:	bf00      	nop
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	200000f8 	.word	0x200000f8

0800c7a0 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff ffd3 	bl	800c760 <_ZN11SimpleMutex4LockEv>
}
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7ff ffd5 	bl	800c780 <_ZN11SimpleMutex6UnlockEv>
}
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800c7e4:	4b05      	ldr	r3, [pc, #20]	; (800c7fc <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d103      	bne.n	800c7f4 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800c7ec:	f003 fd7a 	bl	80102e4 <_Z24defaultNewArrayAllocatorv>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	e001      	b.n	800c7f8 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800c7f4:	4b01      	ldr	r3, [pc, #4]	; (800c7fc <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	200008a0 	.word	0x200008a0

0800c800 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800c800:	b590      	push	{r4, r7, lr}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800c80c:	f7ff ffe8 	bl	800c7e0 <_ZN12SimpleString18getStringAllocatorEv>
 800c810:	6803      	ldr	r3, [r0, #0]
 800c812:	3308      	adds	r3, #8
 800c814:	681c      	ldr	r4, [r3, #0]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	68f9      	ldr	r1, [r7, #12]
 800c81c:	47a0      	blx	r4
 800c81e:	4603      	mov	r3, r0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3714      	adds	r7, #20
 800c824:	46bd      	mov	sp, r7
 800c826:	bd90      	pop	{r4, r7, pc}

0800c828 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800c828:	b590      	push	{r4, r7, lr}
 800c82a:	b087      	sub	sp, #28
 800c82c:	af02      	add	r7, sp, #8
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800c836:	f7ff ffd3 	bl	800c7e0 <_ZN12SimpleString18getStringAllocatorEv>
 800c83a:	6803      	ldr	r3, [r0, #0]
 800c83c:	330c      	adds	r3, #12
 800c83e:	681c      	ldr	r4, [r3, #0]
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	68f9      	ldr	r1, [r7, #12]
 800c84a:	47a0      	blx	r4
}
 800c84c:	bf00      	nop
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	bd90      	pop	{r4, r7, pc}

0800c854 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800c85c:	2284      	movs	r2, #132	; 0x84
 800c85e:	4906      	ldr	r1, [pc, #24]	; (800c878 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800c860:	2001      	movs	r0, #1
 800c862:	f7ff ffcd 	bl	800c800 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c866:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	701a      	strb	r2, [r3, #0]
    return empty;
 800c86e:	68fb      	ldr	r3, [r7, #12]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	08024464 	.word	0x08024464

0800c87c <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	4618      	mov	r0, r3
 800c88a:	f001 f809 	bl	800d8a0 <_ZN12SimpleString7isSpaceEc>
 800c88e:	4603      	mov	r3, r0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d003      	beq.n	800c89c <_ZN12SimpleString4AtoUEPKc+0x20>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3301      	adds	r3, #1
 800c898:	607b      	str	r3, [r7, #4]
 800c89a:	e7f3      	b.n	800c884 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 ffe7 	bl	800d878 <_ZN12SimpleString7isDigitEc>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d005      	beq.n	800c8bc <_ZN12SimpleString4AtoUEPKc+0x40>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b2f      	cmp	r3, #47	; 0x2f
 800c8b6:	d901      	bls.n	800c8bc <_ZN12SimpleString4AtoUEPKc+0x40>
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e000      	b.n	800c8be <_ZN12SimpleString4AtoUEPKc+0x42>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d010      	beq.n	800c8e4 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	4413      	add	r3, r2
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	3b30      	subs	r3, #48	; 0x30
 800c8da:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	607b      	str	r3, [r7, #4]
 800c8e2:	e7dd      	b.n	800c8a0 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b084      	sub	sp, #16
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f000 ffd0 	bl	800d8a0 <_ZN12SimpleString7isSpaceEc>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d003      	beq.n	800c90e <_ZN12SimpleString4AtoIEPKc+0x20>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	3301      	adds	r3, #1
 800c90a:	607b      	str	r3, [r7, #4]
 800c90c:	e7f3      	b.n	800c8f6 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800c914:	7afb      	ldrb	r3, [r7, #11]
 800c916:	2b2d      	cmp	r3, #45	; 0x2d
 800c918:	d002      	beq.n	800c920 <_ZN12SimpleString4AtoIEPKc+0x32>
 800c91a:	7afb      	ldrb	r3, [r7, #11]
 800c91c:	2b2b      	cmp	r3, #43	; 0x2b
 800c91e:	d102      	bne.n	800c926 <_ZN12SimpleString4AtoIEPKc+0x38>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	3301      	adds	r3, #1
 800c924:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800c926:	2300      	movs	r3, #0
 800c928:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	4618      	mov	r0, r3
 800c930:	f000 ffa2 	bl	800d878 <_ZN12SimpleString7isDigitEc>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00f      	beq.n	800c95a <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	4613      	mov	r3, r2
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	4413      	add	r3, r2
 800c942:	005b      	lsls	r3, r3, #1
 800c944:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	3b30      	subs	r3, #48	; 0x30
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	4413      	add	r3, r2
 800c950:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	3301      	adds	r3, #1
 800c956:	607b      	str	r3, [r7, #4]
 800c958:	e7e7      	b.n	800c92a <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800c95a:	7afb      	ldrb	r3, [r7, #11]
 800c95c:	2b2d      	cmp	r3, #45	; 0x2d
 800c95e:	d102      	bne.n	800c966 <_ZN12SimpleString4AtoIEPKc+0x78>
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	425b      	negs	r3, r3
 800c964:	e000      	b.n	800c968 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800c966:	68fb      	ldr	r3, [r7, #12]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00c      	beq.n	800c99c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	781a      	ldrb	r2, [r3, #0]
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d106      	bne.n	800c99c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3301      	adds	r3, #1
 800c992:	607b      	str	r3, [r7, #4]
       ++s2;
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	3301      	adds	r3, #1
 800c998:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c99a:	e7ee      	b.n	800c97a <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	1ad3      	subs	r3, r2, r3
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800c9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c0:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	60fb      	str	r3, [r7, #12]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	1c5a      	adds	r2, r3, #1
 800c9cc:	607a      	str	r2, [r7, #4]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	bf14      	ite	ne
 800c9d4:	2301      	movne	r3, #1
 800c9d6:	2300      	moveq	r3, #0
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d000      	beq.n	800c9e0 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800c9de:	e7f0      	b.n	800c9c2 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3714      	adds	r7, #20
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b085      	sub	sp, #20
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	60f8      	str	r0, [r7, #12]
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d013      	beq.n	800ca28 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00f      	beq.n	800ca28 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	781a      	ldrb	r2, [r3, #0]
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d109      	bne.n	800ca28 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	3b01      	subs	r3, #1
 800ca18:	607b      	str	r3, [r7, #4]
        ++s1;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	60fb      	str	r3, [r7, #12]
        ++s2;
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	3301      	adds	r3, #1
 800ca24:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800ca26:	e7e8      	b.n	800c9fa <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d006      	beq.n	800ca3c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	461a      	mov	r2, r3
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	e000      	b.n	800ca3e <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3714      	adds	r7, #20
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b087      	sub	sp, #28
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	60f8      	str	r0, [r7, #12]
 800ca52:	60b9      	str	r1, [r7, #8]
 800ca54:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d101      	bne.n	800ca6a <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	e01e      	b.n	800caa8 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	781a      	ldrb	r2, [r3, #0]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	3b01      	subs	r3, #1
 800ca76:	607b      	str	r3, [r7, #4]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d005      	beq.n	800ca8a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800ca86:	2301      	movs	r3, #1
 800ca88:	e000      	b.n	800ca8c <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00a      	beq.n	800caa6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	3301      	adds	r3, #1
 800ca94:	60bb      	str	r3, [r7, #8]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	781a      	ldrb	r2, [r3, #0]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800caa4:	e7e5      	b.n	800ca72 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800caa6:	697b      	ldr	r3, [r7, #20]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	371c      	adds	r7, #28
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d101      	bne.n	800caca <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	e01b      	b.n	800cb02 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d016      	beq.n	800cb00 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800cad2:	6838      	ldr	r0, [r7, #0]
 800cad4:	f7ff ff6e 	bl	800c9b4 <_ZN12SimpleString6StrLenEPKc>
 800cad8:	4603      	mov	r3, r0
 800cada:	461a      	mov	r2, r3
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff ff85 	bl	800c9ee <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	bf0c      	ite	eq
 800caea:	2301      	moveq	r3, #1
 800caec:	2300      	movne	r3, #0
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	e004      	b.n	800cb02 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3301      	adds	r3, #1
 800cafc:	607b      	str	r3, [r7, #4]
 800cafe:	e7e4      	b.n	800caca <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b082      	sub	sp, #8
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	4603      	mov	r3, r0
 800cb12:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800cb14:	79fb      	ldrb	r3, [r7, #7]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 fed9 	bl	800d8ce <_ZN12SimpleString7isUpperEc>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <_ZN12SimpleString7ToLowerEc+0x20>
 800cb22:	79fb      	ldrb	r3, [r7, #7]
 800cb24:	3320      	adds	r3, #32
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	e000      	b.n	800cb2c <_ZN12SimpleString7ToLowerEc+0x22>
 800cb2a:	79fb      	ldrb	r3, [r7, #7]
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b087      	sub	sp, #28
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	613b      	str	r3, [r7, #16]

    while (n--)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	1e5a      	subs	r2, r3, #1
 800cb4c:	607a      	str	r2, [r7, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	bf14      	ite	ne
 800cb52:	2301      	movne	r3, #1
 800cb54:	2300      	moveq	r3, #0
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d013      	beq.n	800cb84 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	781a      	ldrb	r2, [r3, #0]
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d006      	beq.n	800cb76 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	e007      	b.n	800cb86 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	617b      	str	r3, [r7, #20]
            ++p2;
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	613b      	str	r3, [r7, #16]
    while (n--)
 800cb82:	e7e1      	b.n	800cb48 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	371c      	adds	r7, #28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
	...

0800cb94 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00d      	beq.n	800cbc0 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6818      	ldr	r0, [r3, #0]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6859      	ldr	r1, [r3, #4]
 800cbac:	23ee      	movs	r3, #238	; 0xee
 800cbae:	4a06      	ldr	r2, [pc, #24]	; (800cbc8 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800cbb0:	f7ff fe3a 	bl	800c828 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	605a      	str	r2, [r3, #4]
    }
}
 800cbc0:	bf00      	nop
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	08024464 	.word	0x08024464

0800cbcc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7ff ffdd 	bl	800cb94 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7ff fe37 	bl	800c854 <_ZNK12SimpleString14getEmptyStringEv>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	601a      	str	r2, [r3, #0]
}
 800cbec:	bf00      	nop
 800cbee:	3708      	adds	r7, #8
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f7ff ffc7 	bl	800cb94 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	4619      	mov	r1, r3
 800cc12:	68b8      	ldr	r0, [r7, #8]
 800cc14:	f000 fe12 	bl	800d83c <_ZN12SimpleString15copyToNewBufferEPKcj>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	601a      	str	r2, [r3, #0]
}
 800cc1e:	bf00      	nop
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
	...

0800cc28 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff ffae 	bl	800cb94 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	f240 1209 	movw	r2, #265	; 0x109
 800cc46:	4907      	ldr	r1, [pc, #28]	; (800cc64 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7ff fdd9 	bl	800c800 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	701a      	strb	r2, [r3, #0]
}
 800cc5c:	bf00      	nop
 800cc5e:	3708      	adds	r7, #8
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	08024464 	.word	0x08024464

0800cc68 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f7ff ff8d 	bl	800cb94 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	601a      	str	r2, [r3, #0]
}
 800cc86:	bf00      	nop
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800cc8e:	b590      	push	{r4, r7, lr}
 800cc90:	b083      	sub	sp, #12
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	681c      	ldr	r4, [r3, #0]
 800cc9c:	6838      	ldr	r0, [r7, #0]
 800cc9e:	f000 fbc1 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800cca2:	4603      	mov	r3, r0
 800cca4:	3301      	adds	r3, #1
 800cca6:	461a      	mov	r2, r3
 800cca8:	4621      	mov	r1, r4
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7ff ffa2 	bl	800cbf4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd90      	pop	{r4, r7, pc}

0800ccb8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800ccc2:	6838      	ldr	r0, [r7, #0]
 800ccc4:	f7ff fe76 	bl	800c9b4 <_ZN12SimpleString6StrLenEPKc>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	3301      	adds	r3, #1
 800cccc:	461a      	mov	r2, r3
 800ccce:	6839      	ldr	r1, [r7, #0]
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f7ff ff8f 	bl	800cbf4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800ccd6:	bf00      	nop
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800ccde:	b480      	push	{r7}
 800cce0:	b083      	sub	sp, #12
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
    return buffer_;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	370c      	adds	r7, #12
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b082      	sub	sp, #8
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d103      	bne.n	800cd1a <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7ff ff5a 	bl	800cbcc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800cd18:	e003      	b.n	800cd22 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f7ff ffcb 	bl	800ccb8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4618      	mov	r0, r3
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b088      	sub	sp, #32
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	601a      	str	r2, [r3, #0]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2200      	movs	r2, #0
 800cd42:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800cd44:	68b8      	ldr	r0, [r7, #8]
 800cd46:	f7ff fe35 	bl	800c9b4 <_ZN12SimpleString6StrLenEPKc>
 800cd4a:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	fb02 f303 	mul.w	r3, r2, r3
 800cd54:	3301      	adds	r3, #1
 800cd56:	4619      	mov	r1, r3
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f7ff ff65 	bl	800cc28 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800cd64:	2300      	movs	r3, #0
 800cd66:	61bb      	str	r3, [r7, #24]
 800cd68:	69ba      	ldr	r2, [r7, #24]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d20e      	bcs.n	800cd8e <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	3301      	adds	r3, #1
 800cd74:	461a      	mov	r2, r3
 800cd76:	68b9      	ldr	r1, [r7, #8]
 800cd78:	69f8      	ldr	r0, [r7, #28]
 800cd7a:	f7ff fe66 	bl	800ca4a <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800cd7e:	69fa      	ldr	r2, [r7, #28]
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	4413      	add	r3, r2
 800cd84:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	61bb      	str	r3, [r7, #24]
 800cd8c:	e7ec      	b.n	800cd68 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	2200      	movs	r2, #0
 800cd92:	701a      	strb	r2, [r3, #0]
}
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	4618      	mov	r0, r3
 800cd98:	3720      	adds	r7, #32
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b082      	sub	sp, #8
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	601a      	str	r2, [r3, #0]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800cdb4:	6838      	ldr	r0, [r7, #0]
 800cdb6:	f7ff ff92 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff ff7a 	bl	800ccb8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b082      	sub	sp, #8
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d003      	beq.n	800cde8 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800cde0:	6839      	ldr	r1, [r7, #0]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7ff ff53 	bl	800cc8e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800cde8:	687b      	ldr	r3, [r7, #4]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800cdf2:	b590      	push	{r4, r7, lr}
 800cdf4:	b083      	sub	sp, #12
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7ff ff6e 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800ce02:	4604      	mov	r4, r0
 800ce04:	6838      	ldr	r0, [r7, #0]
 800ce06:	f7ff ff6a 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f7ff fe50 	bl	800cab4 <_ZN12SimpleString6StrStrEPKcS1_>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	bf14      	ite	ne
 800ce1a:	2301      	movne	r3, #1
 800ce1c:	2300      	moveq	r3, #0
 800ce1e:	b2db      	uxtb	r3, r3
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd90      	pop	{r4, r7, pc}

0800ce28 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800ce28:	b590      	push	{r4, r7, lr}
 800ce2a:	b087      	sub	sp, #28
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800ce32:	f107 0308 	add.w	r3, r7, #8
 800ce36:	6879      	ldr	r1, [r7, #4]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f000 fabb 	bl	800d3b4 <_ZNK12SimpleString9lowerCaseEv>
 800ce3e:	f107 0310 	add.w	r3, r7, #16
 800ce42:	6839      	ldr	r1, [r7, #0]
 800ce44:	4618      	mov	r0, r3
 800ce46:	f000 fab5 	bl	800d3b4 <_ZNK12SimpleString9lowerCaseEv>
 800ce4a:	f107 0210 	add.w	r2, r7, #16
 800ce4e:	f107 0308 	add.w	r3, r7, #8
 800ce52:	4611      	mov	r1, r2
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7ff ffcc 	bl	800cdf2 <_ZNK12SimpleString8containsERKS_>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	461c      	mov	r4, r3
 800ce5e:	bf00      	nop
 800ce60:	f107 0310 	add.w	r3, r7, #16
 800ce64:	4618      	mov	r0, r3
 800ce66:	f000 fafe 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800ce6a:	f107 0308 	add.w	r3, r7, #8
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f000 faf9 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800ce74:	4623      	mov	r3, r4
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	371c      	adds	r7, #28
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd90      	pop	{r4, r7, pc}

0800ce7e <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800ce7e:	b590      	push	{r4, r7, lr}
 800ce80:	b083      	sub	sp, #12
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800ce88:	6838      	ldr	r0, [r7, #0]
 800ce8a:	f000 facb 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	bf0c      	ite	eq
 800ce94:	2301      	moveq	r3, #1
 800ce96:	2300      	movne	r3, #0
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e022      	b.n	800cee8 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fabe 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	bf0c      	ite	eq
 800ceae:	2301      	moveq	r3, #1
 800ceb0:	2300      	movne	r3, #0
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	e015      	b.n	800cee8 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7ff ff0e 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800cec2:	4604      	mov	r4, r0
 800cec4:	6838      	ldr	r0, [r7, #0]
 800cec6:	f7ff ff0a 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800ceca:	4603      	mov	r3, r0
 800cecc:	4619      	mov	r1, r3
 800cece:	4620      	mov	r0, r4
 800ced0:	f7ff fdf0 	bl	800cab4 <_ZN12SimpleString6StrStrEPKcS1_>
 800ced4:	4604      	mov	r4, r0
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7ff ff01 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800cedc:	4603      	mov	r3, r0
 800cede:	429c      	cmp	r4, r3
 800cee0:	bf0c      	ite	eq
 800cee2:	2301      	moveq	r3, #1
 800cee4:	2300      	movne	r3, #0
 800cee6:	b2db      	uxtb	r3, r3
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd90      	pop	{r4, r7, pc}

0800cef0 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800cef0:	b590      	push	{r4, r7, lr}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 fa92 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800cf00:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800cf02:	6838      	ldr	r0, [r7, #0]
 800cf04:	f000 fa8e 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800cf08:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d101      	bne.n	800cf14 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800cf10:	2301      	movs	r3, #1
 800cf12:	e020      	b.n	800cf56 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	e01b      	b.n	800cf56 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d201      	bcs.n	800cf2a <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800cf26:	2300      	movs	r3, #0
 800cf28:	e015      	b.n	800cf56 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f7ff fed7 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800cf30:	4601      	mov	r1, r0
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	1ad3      	subs	r3, r2, r3
 800cf38:	18cc      	adds	r4, r1, r3
 800cf3a:	6838      	ldr	r0, [r7, #0]
 800cf3c:	f7ff fecf 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800cf40:	4603      	mov	r3, r0
 800cf42:	4619      	mov	r1, r3
 800cf44:	4620      	mov	r0, r4
 800cf46:	f7ff fd13 	bl	800c970 <_ZN12SimpleString6StrCmpEPKcS1_>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	bf0c      	ite	eq
 800cf50:	2301      	moveq	r3, #1
 800cf52:	2300      	movne	r3, #0
 800cf54:	b2db      	uxtb	r3, r3
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3714      	adds	r7, #20
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd90      	pop	{r4, r7, pc}

0800cf5e <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b086      	sub	sp, #24
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7ff feb6 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800cf72:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800cf74:	2300      	movs	r3, #0
 800cf76:	60fb      	str	r3, [r7, #12]
    if (*str){
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d008      	beq.n	800cf92 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800cf80:	6838      	ldr	r0, [r7, #0]
 800cf82:	f7ff feac 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800cf86:	4603      	mov	r3, r0
 800cf88:	4619      	mov	r1, r3
 800cf8a:	6938      	ldr	r0, [r7, #16]
 800cf8c:	f7ff fd92 	bl	800cab4 <_ZN12SimpleString6StrStrEPKcS1_>
 800cf90:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d014      	beq.n	800cfc4 <_ZNK12SimpleString5countERKS_+0x66>
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d011      	beq.n	800cfc4 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	613b      	str	r3, [r7, #16]
        str++;
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	613b      	str	r3, [r7, #16]
        num++;
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	3301      	adds	r3, #1
 800cfae:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800cfb0:	6838      	ldr	r0, [r7, #0]
 800cfb2:	f7ff fe94 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	4619      	mov	r1, r3
 800cfba:	6938      	ldr	r0, [r7, #16]
 800cfbc:	f7ff fd7a 	bl	800cab4 <_ZN12SimpleString6StrStrEPKcS1_>
 800cfc0:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800cfc2:	e7e6      	b.n	800cf92 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800cfc4:	697b      	ldr	r3, [r7, #20]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800cfce:	b590      	push	{r4, r7, lr}
 800cfd0:	b091      	sub	sp, #68	; 0x44
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	60f8      	str	r0, [r7, #12]
 800cfd6:	60b9      	str	r1, [r7, #8]
 800cfd8:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800cfda:	68b9      	ldr	r1, [r7, #8]
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f7ff ffbe 	bl	800cf5e <_ZNK12SimpleString5countERKS_>
 800cfe2:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800cfe4:	68b9      	ldr	r1, [r7, #8]
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f7ff ff82 	bl	800cef0 <_ZNK12SimpleString8endsWithERKS_>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800cff2:	2300      	movs	r3, #0
 800cff4:	e000      	b.n	800cff8 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800cff6:	2301      	movs	r3, #1
 800cff8:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800cffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffe:	4413      	add	r3, r2
 800d000:	4619      	mov	r1, r3
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f001 f95c 	bl	800e2c0 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f7ff fe68 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d00e:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800d010:	2300      	movs	r3, #0
 800d012:	63bb      	str	r3, [r7, #56]	; 0x38
 800d014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d018:	429a      	cmp	r2, r3
 800d01a:	d235      	bcs.n	800d088 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800d01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01e:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800d020:	68b8      	ldr	r0, [r7, #8]
 800d022:	f7ff fe5c 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d026:	4603      	mov	r3, r0
 800d028:	4619      	mov	r1, r3
 800d02a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d02c:	f7ff fd42 	bl	800cab4 <_ZN12SimpleString6StrStrEPKcS1_>
 800d030:	4603      	mov	r3, r0
 800d032:	3301      	adds	r3, #1
 800d034:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800d036:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f001 f9db 	bl	800e3f4 <_ZN22SimpleStringCollectionixEj>
 800d03e:	4604      	mov	r4, r0
 800d040:	f107 031c 	add.w	r3, r7, #28
 800d044:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d046:	4618      	mov	r0, r3
 800d048:	f7ff fe55 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800d04c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	f107 0014 	add.w	r0, r7, #20
 800d056:	f107 011c 	add.w	r1, r7, #28
 800d05a:	2200      	movs	r2, #0
 800d05c:	f000 fb0c 	bl	800d678 <_ZNK12SimpleString9subStringEjj>
 800d060:	f107 0314 	add.w	r3, r7, #20
 800d064:	4619      	mov	r1, r3
 800d066:	4620      	mov	r0, r4
 800d068:	f7ff feb1 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800d06c:	f107 0314 	add.w	r3, r7, #20
 800d070:	4618      	mov	r0, r3
 800d072:	f000 f9f8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800d076:	f107 031c 	add.w	r3, r7, #28
 800d07a:	4618      	mov	r0, r3
 800d07c:	f000 f9f3 	bl	800d466 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800d080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d082:	3301      	adds	r3, #1
 800d084:	63bb      	str	r3, [r7, #56]	; 0x38
 800d086:	e7c5      	b.n	800d014 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d015      	beq.n	800d0ba <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800d08e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f001 f9af 	bl	800e3f4 <_ZN22SimpleStringCollectionixEj>
 800d096:	4604      	mov	r4, r0
 800d098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d09c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7ff fe29 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800d0a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f7ff fe8f 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800d0b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 f9d6 	bl	800d466 <_ZN12SimpleStringD1Ev>
    }
}
 800d0ba:	bf00      	nop
 800d0bc:	3744      	adds	r7, #68	; 0x44
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd90      	pop	{r4, r7, pc}

0800d0c2 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b084      	sub	sp, #16
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	70fb      	strb	r3, [r7, #3]
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 f9a6 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d0d8:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800d0da:	2300      	movs	r3, #0
 800d0dc:	60fb      	str	r3, [r7, #12]
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d218      	bcs.n	800d118 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f7ff fdf9 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	78fa      	ldrb	r2, [r7, #3]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	bf0c      	ite	eq
 800d0fa:	2301      	moveq	r3, #1
 800d0fc:	2300      	movne	r3, #0
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	2b00      	cmp	r3, #0
 800d102:	d005      	beq.n	800d110 <_ZN12SimpleString7replaceEcc+0x4e>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	4413      	add	r3, r2
 800d10c:	78ba      	ldrb	r2, [r7, #2]
 800d10e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3301      	adds	r3, #1
 800d114:	60fb      	str	r3, [r7, #12]
 800d116:	e7e2      	b.n	800d0de <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800d118:	bf00      	nop
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b08e      	sub	sp, #56	; 0x38
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800d12c:	f107 0310 	add.w	r3, r7, #16
 800d130:	68b9      	ldr	r1, [r7, #8]
 800d132:	4618      	mov	r0, r3
 800d134:	f7ff fddf 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800d138:	f107 0310 	add.w	r3, r7, #16
 800d13c:	4619      	mov	r1, r3
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f7ff ff0d 	bl	800cf5e <_ZNK12SimpleString5countERKS_>
 800d144:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d146:	f107 0310 	add.w	r3, r7, #16
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 f98b 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	2b00      	cmp	r3, #0
 800d154:	d071      	beq.n	800d23a <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f000 f964 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d15c:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800d15e:	68b8      	ldr	r0, [r7, #8]
 800d160:	f7ff fc28 	bl	800c9b4 <_ZN12SimpleString6StrLenEPKc>
 800d164:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7ff fc24 	bl	800c9b4 <_ZN12SimpleString6StrLenEPKc>
 800d16c:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800d16e:	6a3b      	ldr	r3, [r7, #32]
 800d170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d172:	fb02 f203 	mul.w	r2, r2, r3
 800d176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d178:	441a      	add	r2, r3
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d17e:	fb01 f303 	mul.w	r3, r1, r3
 800d182:	1ad3      	subs	r3, r2, r3
 800d184:	3301      	adds	r3, #1
 800d186:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d951      	bls.n	800d232 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800d18e:	f240 129d 	movw	r2, #413	; 0x19d
 800d192:	492c      	ldr	r1, [pc, #176]	; (800d244 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800d194:	69f8      	ldr	r0, [r7, #28]
 800d196:	f7ff fb33 	bl	800c800 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d19a:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800d19c:	2300      	movs	r3, #0
 800d19e:	637b      	str	r3, [r7, #52]	; 0x34
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	633b      	str	r3, [r7, #48]	; 0x30
 800d1a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d236      	bcs.n	800d21a <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f7ff fd96 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b6:	4413      	add	r3, r2
 800d1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ba:	68b9      	ldr	r1, [r7, #8]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7ff fc16 	bl	800c9ee <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	bf0c      	ite	eq
 800d1c8:	2301      	moveq	r3, #1
 800d1ca:	2300      	movne	r3, #0
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d011      	beq.n	800d1f6 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800d1d2:	69ba      	ldr	r2, [r7, #24]
 800d1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d6:	18d0      	adds	r0, r2, r3
 800d1d8:	6a3b      	ldr	r3, [r7, #32]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	461a      	mov	r2, r3
 800d1de:	6879      	ldr	r1, [r7, #4]
 800d1e0:	f7ff fc33 	bl	800ca4a <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800d1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1e6:	6a3b      	ldr	r3, [r7, #32]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800d1ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	4413      	add	r3, r2
 800d1f2:	637b      	str	r3, [r7, #52]	; 0x34
 800d1f4:	e7d6      	b.n	800d1a4 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f7ff fd71 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d200:	441a      	add	r2, r3
 800d202:	69b9      	ldr	r1, [r7, #24]
 800d204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d206:	440b      	add	r3, r1
 800d208:	7812      	ldrb	r2, [r2, #0]
 800d20a:	701a      	strb	r2, [r3, #0]
                j++;
 800d20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20e:	3301      	adds	r3, #1
 800d210:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800d212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d214:	3301      	adds	r3, #1
 800d216:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800d218:	e7c4      	b.n	800d1a4 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	69ba      	ldr	r2, [r7, #24]
 800d220:	4413      	add	r3, r2
 800d222:	2200      	movs	r2, #0
 800d224:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800d226:	69fa      	ldr	r2, [r7, #28]
 800d228:	69b9      	ldr	r1, [r7, #24]
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f7ff fd1c 	bl	800cc68 <_ZN12SimpleString19setInternalBufferToEPcj>
 800d230:	e004      	b.n	800d23c <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800d232:	68f8      	ldr	r0, [r7, #12]
 800d234:	f7ff fcca 	bl	800cbcc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800d238:	e000      	b.n	800d23c <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800d23a:	bf00      	nop
}
 800d23c:	3738      	adds	r7, #56	; 0x38
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	08024464 	.word	0x08024464

0800d248 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800d248:	b590      	push	{r4, r7, lr}
 800d24a:	b089      	sub	sp, #36	; 0x24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800d252:	493b      	ldr	r1, [pc, #236]	; (800d340 <_ZNK12SimpleString9printableEv+0xf8>)
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff fd4e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800d25a:	6838      	ldr	r0, [r7, #0]
 800d25c:	f000 f876 	bl	800d34c <_ZNK12SimpleString16getPrintableSizeEv>
 800d260:	4603      	mov	r3, r0
 800d262:	3301      	adds	r3, #1
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff fcde 	bl	800cc28 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800d26c:	6838      	ldr	r0, [r7, #0]
 800d26e:	f000 f8d9 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d272:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800d278:	2300      	movs	r3, #0
 800d27a:	61bb      	str	r3, [r7, #24]
 800d27c:	69ba      	ldr	r2, [r7, #24]
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	429a      	cmp	r2, r3
 800d282:	d252      	bcs.n	800d32a <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	4413      	add	r3, r2
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800d290:	7cfb      	ldrb	r3, [r7, #19]
 800d292:	4618      	mov	r0, r3
 800d294:	f000 fb43 	bl	800d91e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d012      	beq.n	800d2c4 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	18d0      	adds	r0, r2, r3
 800d2a6:	7cfb      	ldrb	r3, [r7, #19]
 800d2a8:	3b07      	subs	r3, #7
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	4b25      	ldr	r3, [pc, #148]	; (800d344 <_ZNK12SimpleString9printableEv+0xfc>)
 800d2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	f7ff fbc7 	bl	800ca4a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	3302      	adds	r3, #2
 800d2c0:	61fb      	str	r3, [r7, #28]
 800d2c2:	e02e      	b.n	800d322 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800d2c4:	7cfb      	ldrb	r3, [r7, #19]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f000 fb15 	bl	800d8f6 <_ZN12SimpleString9isControlEc>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d01e      	beq.n	800d310 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800d2d2:	7cfa      	ldrb	r2, [r7, #19]
 800d2d4:	f107 0308 	add.w	r3, r7, #8
 800d2d8:	491b      	ldr	r1, [pc, #108]	; (800d348 <_ZNK12SimpleString9printableEv+0x100>)
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f000 fdca 	bl	800de74 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	18d4      	adds	r4, r2, r3
 800d2e8:	f107 0308 	add.w	r3, r7, #8
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f000 f88d 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2204      	movs	r2, #4
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f7ff fba6 	bl	800ca4a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	3304      	adds	r3, #4
 800d302:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800d304:	f107 0308 	add.w	r3, r7, #8
 800d308:	4618      	mov	r0, r3
 800d30a:	f000 f8ac 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800d30e:	e008      	b.n	800d322 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	4413      	add	r3, r2
 800d318:	7cfa      	ldrb	r2, [r7, #19]
 800d31a:	701a      	strb	r2, [r3, #0]
            j++;
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	3301      	adds	r3, #1
 800d320:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	3301      	adds	r3, #1
 800d326:	61bb      	str	r3, [r7, #24]
 800d328:	e7a8      	b.n	800d27c <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	4413      	add	r3, r2
 800d332:	2200      	movs	r2, #0
 800d334:	701a      	strb	r2, [r3, #0]

    return result;
 800d336:	bf00      	nop
}
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	3724      	adds	r7, #36	; 0x24
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd90      	pop	{r4, r7, pc}
 800d340:	08024524 	.word	0x08024524
 800d344:	2000006c 	.word	0x2000006c
 800d348:	08024528 	.word	0x08024528

0800d34c <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 f865 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d35a:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800d360:	2300      	movs	r3, #0
 800d362:	613b      	str	r3, [r7, #16]
 800d364:	693a      	ldr	r2, [r7, #16]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d21e      	bcs.n	800d3aa <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	4413      	add	r3, r2
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800d378:	7afb      	ldrb	r3, [r7, #11]
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 facf 	bl	800d91e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d003      	beq.n	800d38e <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	3301      	adds	r3, #1
 800d38a:	617b      	str	r3, [r7, #20]
 800d38c:	e009      	b.n	800d3a2 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800d38e:	7afb      	ldrb	r3, [r7, #11]
 800d390:	4618      	mov	r0, r3
 800d392:	f000 fab0 	bl	800d8f6 <_ZN12SimpleString9isControlEc>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	3303      	adds	r3, #3
 800d3a0:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	613b      	str	r3, [r7, #16]
 800d3a8:	e7dc      	b.n	800d364 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800d3aa:	697b      	ldr	r3, [r7, #20]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3718      	adds	r7, #24
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800d3b4:	b590      	push	{r4, r7, lr}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800d3be:	6839      	ldr	r1, [r7, #0]
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f7ff fcec 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 f82c 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d3cc:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60fb      	str	r3, [r7, #12]
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d213      	bcs.n	800d402 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7ff fc7f 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	7819      	ldrb	r1, [r3, #0]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	18d4      	adds	r4, r2, r3
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	f7ff fb8a 	bl	800cb0a <_ZN12SimpleString7ToLowerEc>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	60fb      	str	r3, [r7, #12]
 800d400:	e7e7      	b.n	800d3d2 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800d402:	bf00      	nop
}
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	3714      	adds	r7, #20
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd90      	pop	{r4, r7, pc}

0800d40c <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f7ff fc62 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d41a:	4603      	mov	r3, r0
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f7ff fc56 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d432:	4603      	mov	r3, r0
 800d434:	4618      	mov	r0, r3
 800d436:	f7ff fabd 	bl	800c9b4 <_ZN12SimpleString6StrLenEPKc>
 800d43a:	4603      	mov	r3, r0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7ff ffe9 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	bf0c      	ite	eq
 800d458:	2301      	moveq	r3, #1
 800d45a:	2300      	movne	r3, #0
 800d45c:	b2db      	uxtb	r3, r3
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800d466:	b580      	push	{r7, lr}
 800d468:	b082      	sub	sp, #8
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f7ff fb90 	bl	800cb94 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4618      	mov	r0, r3
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800d47e:	b590      	push	{r4, r7, lr}
 800d480:	b083      	sub	sp, #12
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f7ff ffbf 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800d48e:	4604      	mov	r4, r0
 800d490:	6838      	ldr	r0, [r7, #0]
 800d492:	f7ff ffbb 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800d496:	4603      	mov	r3, r0
 800d498:	4619      	mov	r1, r3
 800d49a:	4620      	mov	r0, r4
 800d49c:	f7ff fa68 	bl	800c970 <_ZN12SimpleString6StrCmpEPKcS1_>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	bf0c      	ite	eq
 800d4a6:	2301      	moveq	r3, #1
 800d4a8:	2300      	movne	r3, #0
 800d4aa:	b2db      	uxtb	r3, r3
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd90      	pop	{r4, r7, pc}

0800d4b4 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800d4b4:	b590      	push	{r4, r7, lr}
 800d4b6:	b087      	sub	sp, #28
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800d4be:	f107 0308 	add.w	r3, r7, #8
 800d4c2:	6879      	ldr	r1, [r7, #4]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7ff ff75 	bl	800d3b4 <_ZNK12SimpleString9lowerCaseEv>
 800d4ca:	f107 0310 	add.w	r3, r7, #16
 800d4ce:	6839      	ldr	r1, [r7, #0]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7ff ff6f 	bl	800d3b4 <_ZNK12SimpleString9lowerCaseEv>
 800d4d6:	f107 0210 	add.w	r2, r7, #16
 800d4da:	f107 0308 	add.w	r3, r7, #8
 800d4de:	4611      	mov	r1, r2
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7ff ffcc 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	461c      	mov	r4, r3
 800d4ea:	f107 0310 	add.w	r3, r7, #16
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff ffb9 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800d4f4:	f107 0308 	add.w	r3, r7, #8
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7ff ffb4 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800d4fe:	4623      	mov	r3, r4
}
 800d500:	4618      	mov	r0, r3
 800d502:	371c      	adds	r7, #28
 800d504:	46bd      	mov	sp, r7
 800d506:	bd90      	pop	{r4, r7, pc}

0800d508 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800d512:	6839      	ldr	r1, [r7, #0]
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7ff ffb2 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 800d51a:	4603      	mov	r3, r0
 800d51c:	f083 0301 	eor.w	r3, r3, #1
 800d520:	b2db      	uxtb	r3, r3
}
 800d522:	4618      	mov	r0, r3
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b084      	sub	sp, #16
 800d52e:	af00      	add	r7, sp, #0
 800d530:	60f8      	str	r0, [r7, #12]
 800d532:	60b9      	str	r1, [r7, #8]
 800d534:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800d536:	68b8      	ldr	r0, [r7, #8]
 800d538:	f7ff fbd1 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d53c:	4603      	mov	r3, r0
 800d53e:	4619      	mov	r1, r3
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f7ff fbd8 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff fbc9 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d54c:	4603      	mov	r3, r0
 800d54e:	4619      	mov	r1, r3
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f000 f817 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    return t;
 800d556:	bf00      	nop
}
 800d558:	68f8      	ldr	r0, [r7, #12]
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800d56a:	6838      	ldr	r0, [r7, #0]
 800d56c:	f7ff fbb7 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d570:	4603      	mov	r3, r0
 800d572:	4619      	mov	r1, r3
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f805 	bl	800d584 <_ZN12SimpleStringpLEPKc>
 800d57a:	4603      	mov	r3, r0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff ff48 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d594:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800d596:	6838      	ldr	r0, [r7, #0]
 800d598:	f7ff fa0c 	bl	800c9b4 <_ZN12SimpleString6StrLenEPKc>
 800d59c:	4603      	mov	r3, r0
 800d59e:	3301      	adds	r3, #1
 800d5a0:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800d5a2:	697a      	ldr	r2, [r7, #20]
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7ff fb97 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	68f9      	ldr	r1, [r7, #12]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 f941 	bl	800d83c <_ZN12SimpleString15copyToNewBufferEPKcj>
 800d5ba:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800d5bc:	68ba      	ldr	r2, [r7, #8]
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	693a      	ldr	r2, [r7, #16]
 800d5c4:	6839      	ldr	r1, [r7, #0]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7ff fa3f 	bl	800ca4a <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800d5cc:	68fa      	ldr	r2, [r7, #12]
 800d5ce:	68b9      	ldr	r1, [r7, #8]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f7ff fb49 	bl	800cc68 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800d5d6:	687b      	ldr	r3, [r7, #4]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800d5e0:	b590      	push	{r4, r7, lr}
 800d5e2:	b08b      	sub	sp, #44	; 0x2c
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f7ff ff18 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	68b8      	ldr	r0, [r7, #8]
 800d5f8:	f7ff ff14 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	429c      	cmp	r4, r3
 800d600:	bf8c      	ite	hi
 800d602:	2301      	movhi	r3, #1
 800d604:	2300      	movls	r3, #0
 800d606:	b2db      	uxtb	r3, r3
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d006      	beq.n	800d61a <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800d60c:	79fb      	ldrb	r3, [r7, #7]
 800d60e:	461a      	mov	r2, r3
 800d610:	68f9      	ldr	r1, [r7, #12]
 800d612:	68b8      	ldr	r0, [r7, #8]
 800d614:	f7ff ffe4 	bl	800d5e0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800d618:	e02b      	b.n	800d672 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800d61a:	79fb      	ldrb	r3, [r7, #7]
 800d61c:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800d61e:	2300      	movs	r3, #0
 800d620:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800d622:	68b8      	ldr	r0, [r7, #8]
 800d624:	f7ff fefe 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d628:	4604      	mov	r4, r0
 800d62a:	68f8      	ldr	r0, [r7, #12]
 800d62c:	f7ff fefa 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d630:	4603      	mov	r3, r0
 800d632:	1ae2      	subs	r2, r4, r3
 800d634:	f107 0114 	add.w	r1, r7, #20
 800d638:	f107 0320 	add.w	r3, r7, #32
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff fb75 	bl	800cd2c <_ZN12SimpleStringC1EPKcj>
 800d642:	f107 0318 	add.w	r3, r7, #24
 800d646:	f107 0120 	add.w	r1, r7, #32
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7ff ff6c 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800d652:	f107 0318 	add.w	r3, r7, #24
 800d656:	4619      	mov	r1, r3
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f7ff fbb8 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800d65e:	f107 0318 	add.w	r3, r7, #24
 800d662:	4618      	mov	r0, r3
 800d664:	f7ff feff 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800d668:	f107 0320 	add.w	r3, r7, #32
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7ff fefa 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800d672:	372c      	adds	r7, #44	; 0x2c
 800d674:	46bd      	mov	sp, r7
 800d676:	bd90      	pop	{r4, r7, pc}

0800d678 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b086      	sub	sp, #24
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
 800d684:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800d686:	68b8      	ldr	r0, [r7, #8]
 800d688:	f7ff fecc 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d68c:	4603      	mov	r3, r0
 800d68e:	3b01      	subs	r3, #1
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	429a      	cmp	r2, r3
 800d694:	bf8c      	ite	hi
 800d696:	2301      	movhi	r3, #1
 800d698:	2300      	movls	r3, #0
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d004      	beq.n	800d6aa <_ZNK12SimpleString9subStringEjj+0x32>
 800d6a0:	4919      	ldr	r1, [pc, #100]	; (800d708 <_ZNK12SimpleString9subStringEjj+0x90>)
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	f7ff fb27 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800d6a8:	e029      	b.n	800d6fe <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800d6aa:	68b8      	ldr	r0, [r7, #8]
 800d6ac:	f7ff fb17 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	441a      	add	r2, r3
 800d6b6:	f107 0310 	add.w	r3, r7, #16
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff fb1a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800d6c2:	f107 0310 	add.w	r3, r7, #16
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7ff feac 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	bf34      	ite	cc
 800d6d4:	2301      	movcc	r3, #1
 800d6d6:	2300      	movcs	r3, #0
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d004      	beq.n	800d6e8 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800d6de:	693a      	ldr	r2, [r7, #16]
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	701a      	strb	r2, [r3, #0]

    return newString;
 800d6e8:	f107 0310 	add.w	r3, r7, #16
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f7ff fb55 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800d6f4:	f107 0310 	add.w	r3, r7, #16
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff feb4 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	08024524 	.word	0x08024524

0800d70c <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f04f 33ff 	mov.w	r3, #4294967295
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	68b9      	ldr	r1, [r7, #8]
 800d722:	f7ff ffa9 	bl	800d678 <_ZNK12SimpleString9subStringEjj>
}
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b082      	sub	sp, #8
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
 800d736:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7ff fad0 	bl	800ccde <_ZNK12SimpleString9getBufferEv>
 800d73e:	4602      	mov	r2, r0
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	4413      	add	r3, r2
 800d744:	781b      	ldrb	r3, [r3, #0]
}
 800d746:	4618      	mov	r0, r3
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b082      	sub	sp, #8
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
 800d756:	460b      	mov	r3, r1
 800d758:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800d75a:	78fb      	ldrb	r3, [r7, #3]
 800d75c:	461a      	mov	r2, r3
 800d75e:	2100      	movs	r1, #0
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f805 	bl	800d770 <_ZNK12SimpleString8findFromEjc>
 800d766:	4603      	mov	r3, r0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	4613      	mov	r3, r2
 800d77c:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f7ff fe50 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800d784:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	617b      	str	r3, [r7, #20]
 800d78a:	697a      	ldr	r2, [r7, #20]
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d213      	bcs.n	800d7ba <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800d792:	6979      	ldr	r1, [r7, #20]
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f7ff ffca 	bl	800d72e <_ZNK12SimpleString2atEj>
 800d79a:	4603      	mov	r3, r0
 800d79c:	461a      	mov	r2, r3
 800d79e:	79fb      	ldrb	r3, [r7, #7]
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	bf0c      	ite	eq
 800d7a4:	2301      	moveq	r3, #1
 800d7a6:	2300      	movne	r3, #0
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d001      	beq.n	800d7b2 <_ZNK12SimpleString8findFromEjc+0x42>
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	e005      	b.n	800d7be <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	617b      	str	r3, [r7, #20]
 800d7b8:	e7e7      	b.n	800d78a <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800d7ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3718      	adds	r7, #24
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
	...

0800d7c8 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	4611      	mov	r1, r2
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	71fb      	strb	r3, [r7, #7]
 800d7da:	4613      	mov	r3, r2
 800d7dc:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800d7de:	79fb      	ldrb	r3, [r7, #7]
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	68b8      	ldr	r0, [r7, #8]
 800d7e4:	f7ff ffb3 	bl	800d74e <_ZNK12SimpleString4findEc>
 800d7e8:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f0:	d104      	bne.n	800d7fc <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800d7f2:	4911      	ldr	r1, [pc, #68]	; (800d838 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f7ff fa7e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800d7fa:	e019      	b.n	800d830 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800d7fc:	79bb      	ldrb	r3, [r7, #6]
 800d7fe:	461a      	mov	r2, r3
 800d800:	6979      	ldr	r1, [r7, #20]
 800d802:	68b8      	ldr	r0, [r7, #8]
 800d804:	f7ff ffb4 	bl	800d770 <_ZNK12SimpleString8findFromEjc>
 800d808:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d810:	d106      	bne.n	800d820 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	697a      	ldr	r2, [r7, #20]
 800d816:	68b9      	ldr	r1, [r7, #8]
 800d818:	4618      	mov	r0, r3
 800d81a:	f7ff ff77 	bl	800d70c <_ZNK12SimpleString9subStringEj>
 800d81e:	e007      	b.n	800d830 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	1ad3      	subs	r3, r2, r3
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	697a      	ldr	r2, [r7, #20]
 800d82a:	68b9      	ldr	r1, [r7, #8]
 800d82c:	f7ff ff24 	bl	800d678 <_ZNK12SimpleString9subStringEjj>
}
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	08024524 	.word	0x08024524

0800d83c <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800d846:	f240 2275 	movw	r2, #629	; 0x275
 800d84a:	490a      	ldr	r1, [pc, #40]	; (800d874 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800d84c:	6838      	ldr	r0, [r7, #0]
 800d84e:	f7fe ffd7 	bl	800c800 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d852:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800d854:	683a      	ldr	r2, [r7, #0]
 800d856:	6879      	ldr	r1, [r7, #4]
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	f7ff f8f6 	bl	800ca4a <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	3b01      	subs	r3, #1
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	4413      	add	r3, r2
 800d866:	2200      	movs	r2, #0
 800d868:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800d86a:	68fb      	ldr	r3, [r7, #12]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3710      	adds	r7, #16
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	08024464 	.word	0x08024464

0800d878 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	4603      	mov	r3, r0
 800d880:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800d882:	79fb      	ldrb	r3, [r7, #7]
 800d884:	2b2f      	cmp	r3, #47	; 0x2f
 800d886:	d904      	bls.n	800d892 <_ZN12SimpleString7isDigitEc+0x1a>
 800d888:	79fb      	ldrb	r3, [r7, #7]
 800d88a:	2b39      	cmp	r3, #57	; 0x39
 800d88c:	d801      	bhi.n	800d892 <_ZN12SimpleString7isDigitEc+0x1a>
 800d88e:	2301      	movs	r3, #1
 800d890:	e000      	b.n	800d894 <_ZN12SimpleString7isDigitEc+0x1c>
 800d892:	2300      	movs	r3, #0
}
 800d894:	4618      	mov	r0, r3
 800d896:	370c      	adds	r7, #12
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800d8aa:	79fb      	ldrb	r3, [r7, #7]
 800d8ac:	2b20      	cmp	r3, #32
 800d8ae:	d005      	beq.n	800d8bc <_ZN12SimpleString7isSpaceEc+0x1c>
 800d8b0:	79fb      	ldrb	r3, [r7, #7]
 800d8b2:	2b08      	cmp	r3, #8
 800d8b4:	d904      	bls.n	800d8c0 <_ZN12SimpleString7isSpaceEc+0x20>
 800d8b6:	79fb      	ldrb	r3, [r7, #7]
 800d8b8:	2b0d      	cmp	r3, #13
 800d8ba:	d801      	bhi.n	800d8c0 <_ZN12SimpleString7isSpaceEc+0x20>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e000      	b.n	800d8c2 <_ZN12SimpleString7isSpaceEc+0x22>
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	370c      	adds	r7, #12
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr

0800d8ce <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800d8ce:	b480      	push	{r7}
 800d8d0:	b083      	sub	sp, #12
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800d8d8:	79fb      	ldrb	r3, [r7, #7]
 800d8da:	2b40      	cmp	r3, #64	; 0x40
 800d8dc:	d904      	bls.n	800d8e8 <_ZN12SimpleString7isUpperEc+0x1a>
 800d8de:	79fb      	ldrb	r3, [r7, #7]
 800d8e0:	2b5a      	cmp	r3, #90	; 0x5a
 800d8e2:	d801      	bhi.n	800d8e8 <_ZN12SimpleString7isUpperEc+0x1a>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e000      	b.n	800d8ea <_ZN12SimpleString7isUpperEc+0x1c>
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	370c      	adds	r7, #12
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr

0800d8f6 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800d8f6:	b480      	push	{r7}
 800d8f8:	b083      	sub	sp, #12
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800d900:	79fb      	ldrb	r3, [r7, #7]
 800d902:	2b1f      	cmp	r3, #31
 800d904:	d902      	bls.n	800d90c <_ZN12SimpleString9isControlEc+0x16>
 800d906:	79fb      	ldrb	r3, [r7, #7]
 800d908:	2b7f      	cmp	r3, #127	; 0x7f
 800d90a:	d101      	bne.n	800d910 <_ZN12SimpleString9isControlEc+0x1a>
 800d90c:	2301      	movs	r3, #1
 800d90e:	e000      	b.n	800d912 <_ZN12SimpleString9isControlEc+0x1c>
 800d910:	2300      	movs	r3, #0
}
 800d912:	4618      	mov	r0, r3
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800d91e:	b480      	push	{r7}
 800d920:	b083      	sub	sp, #12
 800d922:	af00      	add	r7, sp, #0
 800d924:	4603      	mov	r3, r0
 800d926:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800d928:	79fb      	ldrb	r3, [r7, #7]
 800d92a:	2b06      	cmp	r3, #6
 800d92c:	d904      	bls.n	800d938 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d92e:	79fb      	ldrb	r3, [r7, #7]
 800d930:	2b0d      	cmp	r3, #13
 800d932:	d801      	bhi.n	800d938 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d934:	2301      	movs	r3, #1
 800d936:	e000      	b.n	800d93a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	370c      	adds	r7, #12
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr
	...

0800d948 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800d954:	78fb      	ldrb	r3, [r7, #3]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <_Z10StringFromb+0x16>
 800d95a:	4a06      	ldr	r2, [pc, #24]	; (800d974 <_Z10StringFromb+0x2c>)
 800d95c:	e000      	b.n	800d960 <_Z10StringFromb+0x18>
 800d95e:	4a06      	ldr	r2, [pc, #24]	; (800d978 <_Z10StringFromb+0x30>)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4906      	ldr	r1, [pc, #24]	; (800d97c <_Z10StringFromb+0x34>)
 800d964:	4618      	mov	r0, r3
 800d966:	f000 fa85 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	3708      	adds	r7, #8
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	08024530 	.word	0x08024530
 800d978:	08024538 	.word	0x08024538
 800d97c:	08024540 	.word	0x08024540

0800d980 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7ff f9b2 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
}
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	3708      	adds	r7, #8
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
	...

0800d99c <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800d99c:	b590      	push	{r4, r7, lr}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800d9a6:	2400      	movs	r4, #0
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00e      	beq.n	800d9cc <_Z25PrintableStringFromOrNullPKc+0x30>
 800d9ae:	f107 0308 	add.w	r3, r7, #8
 800d9b2:	6839      	ldr	r1, [r7, #0]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7ff ffe3 	bl	800d980 <_Z10StringFromPKc>
 800d9ba:	2401      	movs	r4, #1
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f107 0208 	add.w	r2, r7, #8
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7ff fc3f 	bl	800d248 <_ZNK12SimpleString9printableEv>
 800d9ca:	e004      	b.n	800d9d6 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	4908      	ldr	r1, [pc, #32]	; (800d9f0 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff ffd5 	bl	800d980 <_Z10StringFromPKc>
 800d9d6:	2c00      	cmp	r4, #0
 800d9d8:	d004      	beq.n	800d9e4 <_Z25PrintableStringFromOrNullPKc+0x48>
 800d9da:	f107 0308 	add.w	r3, r7, #8
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7ff fd41 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800d9e4:	bf00      	nop
}
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd90      	pop	{r4, r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	08024544 	.word	0x08024544

0800d9f4 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	683a      	ldr	r2, [r7, #0]
 800da02:	4904      	ldr	r1, [pc, #16]	; (800da14 <_Z10StringFromi+0x20>)
 800da04:	4618      	mov	r0, r3
 800da06:	f000 fa35 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	0802454c 	.word	0x0802454c

0800da18 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	683a      	ldr	r2, [r7, #0]
 800da26:	4904      	ldr	r1, [pc, #16]	; (800da38 <_Z10StringFroml+0x20>)
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 fa23 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	08024550 	.word	0x08024550

0800da3c <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b086      	sub	sp, #24
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800da46:	f107 0308 	add.w	r3, r7, #8
 800da4a:	4910      	ldr	r1, [pc, #64]	; (800da8c <_Z10StringFromPKv+0x50>)
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7ff f952 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800da52:	f107 0310 	add.w	r3, r7, #16
 800da56:	6839      	ldr	r1, [r7, #0]
 800da58:	4618      	mov	r0, r3
 800da5a:	f000 f9a1 	bl	800dda0 <_Z13HexStringFromPKv>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f107 0210 	add.w	r2, r7, #16
 800da64:	f107 0108 	add.w	r1, r7, #8
 800da68:	4618      	mov	r0, r3
 800da6a:	f7ff fd5e 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800da6e:	f107 0310 	add.w	r3, r7, #16
 800da72:	4618      	mov	r0, r3
 800da74:	f7ff fcf7 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800da78:	f107 0308 	add.w	r3, r7, #8
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff fcf2 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800da82:	bf00      	nop
}
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	3718      	adds	r7, #24
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	08024554 	.word	0x08024554

0800da90 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800da9a:	f107 0308 	add.w	r3, r7, #8
 800da9e:	4910      	ldr	r1, [pc, #64]	; (800dae0 <_Z10StringFromPFvvE+0x50>)
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff f928 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800daa6:	f107 0310 	add.w	r3, r7, #16
 800daaa:	6839      	ldr	r1, [r7, #0]
 800daac:	4618      	mov	r0, r3
 800daae:	f000 f98b 	bl	800ddc8 <_Z13HexStringFromPFvvE>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f107 0210 	add.w	r2, r7, #16
 800dab8:	f107 0108 	add.w	r1, r7, #8
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7ff fd34 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800dac2:	f107 0310 	add.w	r3, r7, #16
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7ff fccd 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800dacc:	f107 0308 	add.w	r3, r7, #8
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7ff fcc8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800dad6:	bf00      	nop
}
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	3718      	adds	r7, #24
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	08024554 	.word	0x08024554

0800dae4 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	683a      	ldr	r2, [r7, #0]
 800daf2:	4904      	ldr	r1, [pc, #16]	; (800db04 <_Z13HexStringFroml+0x20>)
 800daf4:	4618      	mov	r0, r3
 800daf6:	f000 f9bd 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	08024558 	.word	0x08024558

0800db08 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	683a      	ldr	r2, [r7, #0]
 800db16:	4904      	ldr	r1, [pc, #16]	; (800db28 <_Z13HexStringFromi+0x20>)
 800db18:	4618      	mov	r0, r3
 800db1a:	f000 f9ab 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	0802455c 	.word	0x0802455c

0800db2c <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b086      	sub	sp, #24
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	460b      	mov	r3, r1
 800db36:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800db38:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4912      	ldr	r1, [pc, #72]	; (800db88 <_Z13HexStringFroma+0x5c>)
 800db40:	4618      	mov	r0, r3
 800db42:	f000 f997 	bl	800de74 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800db46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	da16      	bge.n	800db7c <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff fc68 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800db54:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	1e9a      	subs	r2, r3, #2
 800db5a:	f107 030c 	add.w	r3, r7, #12
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	4618      	mov	r0, r3
 800db62:	f7ff fdd3 	bl	800d70c <_ZNK12SimpleString9subStringEj>
 800db66:	f107 030c 	add.w	r3, r7, #12
 800db6a:	4619      	mov	r1, r3
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f7ff f92e 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800db72:	f107 030c 	add.w	r3, r7, #12
 800db76:	4618      	mov	r0, r3
 800db78:	f7ff fc75 	bl	800d466 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800db7c:	bf00      	nop
}
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	3718      	adds	r7, #24
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	0802455c 	.word	0x0802455c

0800db8c <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	683a      	ldr	r2, [r7, #0]
 800db9a:	4904      	ldr	r1, [pc, #16]	; (800dbac <_Z13HexStringFromm+0x20>)
 800db9c:	4618      	mov	r0, r3
 800db9e:	f000 f969 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	08024558 	.word	0x08024558

0800dbb0 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	683a      	ldr	r2, [r7, #0]
 800dbbe:	4904      	ldr	r1, [pc, #16]	; (800dbd0 <_Z13HexStringFromj+0x20>)
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f000 f957 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	3708      	adds	r7, #8
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop
 800dbd0:	0802455c 	.word	0x0802455c

0800dbd4 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b084      	sub	sp, #16
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dbde:	f107 0308 	add.w	r3, r7, #8
 800dbe2:	6839      	ldr	r1, [r7, #0]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7ff ff8f 	bl	800db08 <_Z13HexStringFromi>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f107 0208 	add.w	r2, r7, #8
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f000 f87e 	bl	800dcf4 <_Z26BracketsFormattedHexString12SimpleString>
 800dbf8:	f107 0308 	add.w	r3, r7, #8
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7ff fc32 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800dc02:	bf00      	nop
}
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dc16:	f107 0308 	add.w	r3, r7, #8
 800dc1a:	6839      	ldr	r1, [r7, #0]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7ff ffc7 	bl	800dbb0 <_Z13HexStringFromj>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f107 0208 	add.w	r2, r7, #8
 800dc28:	4611      	mov	r1, r2
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f000 f862 	bl	800dcf4 <_Z26BracketsFormattedHexString12SimpleString>
 800dc30:	f107 0308 	add.w	r3, r7, #8
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7ff fc16 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800dc3a:	bf00      	nop
}
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dc4e:	f107 0308 	add.w	r3, r7, #8
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7ff ff45 	bl	800dae4 <_Z13HexStringFroml>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f107 0208 	add.w	r2, r7, #8
 800dc60:	4611      	mov	r1, r2
 800dc62:	4618      	mov	r0, r3
 800dc64:	f000 f846 	bl	800dcf4 <_Z26BracketsFormattedHexString12SimpleString>
 800dc68:	f107 0308 	add.w	r3, r7, #8
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7ff fbfa 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800dc72:	bf00      	nop
}
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dc86:	f107 0308 	add.w	r3, r7, #8
 800dc8a:	6839      	ldr	r1, [r7, #0]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7ff ff7d 	bl	800db8c <_Z13HexStringFromm>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f107 0208 	add.w	r2, r7, #8
 800dc98:	4611      	mov	r1, r2
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 f82a 	bl	800dcf4 <_Z26BracketsFormattedHexString12SimpleString>
 800dca0:	f107 0308 	add.w	r3, r7, #8
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7ff fbde 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800dcaa:	bf00      	nop
}
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dcc0:	f107 0308 	add.w	r3, r7, #8
 800dcc4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800dcc8:	4611      	mov	r1, r2
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7ff ff2e 	bl	800db2c <_Z13HexStringFroma>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f107 0208 	add.w	r2, r7, #8
 800dcd6:	4611      	mov	r1, r2
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 f80b 	bl	800dcf4 <_Z26BracketsFormattedHexString12SimpleString>
 800dcde:	f107 0308 	add.w	r3, r7, #8
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7ff fbbf 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800dce8:	bf00      	nop
}
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
	...

0800dcf4 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b088      	sub	sp, #32
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800dcfe:	f107 0310 	add.w	r3, r7, #16
 800dd02:	4917      	ldr	r1, [pc, #92]	; (800dd60 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7fe fff6 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800dd0a:	f107 0308 	add.w	r3, r7, #8
 800dd0e:	f107 0110 	add.w	r1, r7, #16
 800dd12:	683a      	ldr	r2, [r7, #0]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7ff fc08 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800dd1a:	f107 0318 	add.w	r3, r7, #24
 800dd1e:	4911      	ldr	r1, [pc, #68]	; (800dd64 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7fe ffe8 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f107 0218 	add.w	r2, r7, #24
 800dd2c:	f107 0108 	add.w	r1, r7, #8
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff fbfa 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800dd36:	f107 0318 	add.w	r3, r7, #24
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7ff fb93 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800dd40:	f107 0308 	add.w	r3, r7, #8
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7ff fb8e 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800dd4a:	f107 0310 	add.w	r3, r7, #16
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff fb89 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800dd54:	bf00      	nop
}
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	3720      	adds	r7, #32
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	08024560 	.word	0x08024560
 800dd64:	08024564 	.word	0x08024564

0800dd68 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800dd70:	1d3b      	adds	r3, r7, #4
 800dd72:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3714      	adds	r7, #20
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800dd8c:	1d3b      	adds	r3, r7, #4
 800dd8e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3714      	adds	r7, #20
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr

0800dda0 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800ddaa:	6838      	ldr	r0, [r7, #0]
 800ddac:	f7ff ffdc 	bl	800dd68 <_ZL25convertPointerToLongValuePKv>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	4903      	ldr	r1, [pc, #12]	; (800ddc4 <_Z13HexStringFromPKv+0x24>)
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f000 f85c 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	08024558 	.word	0x08024558

0800ddc8 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800ddd2:	6838      	ldr	r0, [r7, #0]
 800ddd4:	f7ff ffd6 	bl	800dd84 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4903      	ldr	r1, [pc, #12]	; (800ddec <_Z13HexStringFromPFvvE+0x24>)
 800ddde:	4618      	mov	r0, r3
 800dde0:	f000 f848 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	08024558 	.word	0x08024558

0800ddf0 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af02      	add	r7, sp, #8
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	ed87 0b00 	vstr	d0, [r7]
 800ddfc:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800ddfe:	4b18      	ldr	r3, [pc, #96]	; (800de60 <_Z10StringFromdi+0x70>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	ed97 0b00 	vldr	d0, [r7]
 800de06:	4798      	blx	r3
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	bf14      	ite	ne
 800de0e:	2301      	movne	r3, #1
 800de10:	2300      	moveq	r3, #0
 800de12:	b2db      	uxtb	r3, r3
 800de14:	2b00      	cmp	r3, #0
 800de16:	d004      	beq.n	800de22 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800de18:	4912      	ldr	r1, [pc, #72]	; (800de64 <_Z10StringFromdi+0x74>)
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f7fe ff6b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800de20:	e01a      	b.n	800de58 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800de22:	4b11      	ldr	r3, [pc, #68]	; (800de68 <_Z10StringFromdi+0x78>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	ed97 0b00 	vldr	d0, [r7]
 800de2a:	4798      	blx	r3
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	bf14      	ite	ne
 800de32:	2301      	movne	r3, #1
 800de34:	2300      	moveq	r3, #0
 800de36:	b2db      	uxtb	r3, r3
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d004      	beq.n	800de46 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800de3c:	490b      	ldr	r1, [pc, #44]	; (800de6c <_Z10StringFromdi+0x7c>)
 800de3e:	68f8      	ldr	r0, [r7, #12]
 800de40:	f7fe ff59 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800de44:	e008      	b.n	800de58 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800de46:	68f8      	ldr	r0, [r7, #12]
 800de48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de4c:	e9cd 2300 	strd	r2, r3, [sp]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	4907      	ldr	r1, [pc, #28]	; (800de70 <_Z10StringFromdi+0x80>)
 800de54:	f000 f80e 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800de58:	68f8      	ldr	r0, [r7, #12]
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	200000e8 	.word	0x200000e8
 800de64:	08024598 	.word	0x08024598
 800de68:	200000ec 	.word	0x200000ec
 800de6c:	080245ac 	.word	0x080245ac
 800de70:	080245bc 	.word	0x080245bc

0800de74 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800de74:	b40e      	push	{r1, r2, r3}
 800de76:	b580      	push	{r7, lr}
 800de78:	b087      	sub	sp, #28
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800de7e:	4910      	ldr	r1, [pc, #64]	; (800dec0 <_Z16StringFromFormatPKcz+0x4c>)
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7fe ff38 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800de86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de8a:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800de8c:	f107 0310 	add.w	r3, r7, #16
 800de90:	68fa      	ldr	r2, [r7, #12]
 800de92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de94:	4618      	mov	r0, r3
 800de96:	f000 f839 	bl	800df0c <_Z17VStringFromFormatPKcSt9__va_list>
 800de9a:	f107 0310 	add.w	r3, r7, #16
 800de9e:	4619      	mov	r1, r3
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7fe ff94 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800dea6:	f107 0310 	add.w	r3, r7, #16
 800deaa:	4618      	mov	r0, r3
 800deac:	f7ff fadb 	bl	800d466 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800deb0:	bf00      	nop
}
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	371c      	adds	r7, #28
 800deb6:	46bd      	mov	sp, r7
 800deb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800debc:	b003      	add	sp, #12
 800debe:	4770      	bx	lr
 800dec0:	08024524 	.word	0x08024524

0800dec4 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	683a      	ldr	r2, [r7, #0]
 800ded2:	4904      	ldr	r1, [pc, #16]	; (800dee4 <_Z10StringFromj+0x20>)
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7ff ffcd 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	080245c8 	.word	0x080245c8

0800dee8 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	683a      	ldr	r2, [r7, #0]
 800def6:	4904      	ldr	r1, [pc, #16]	; (800df08 <_Z10StringFromm+0x20>)
 800def8:	4618      	mov	r0, r3
 800defa:	f7ff ffbb 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	080245cc 	.word	0x080245cc

0800df0c <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800df0c:	b590      	push	{r4, r7, lr}
 800df0e:	b0a7      	sub	sp, #156	; 0x9c
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800df1c:	492e      	ldr	r1, [pc, #184]	; (800dfd8 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f7fe fee9 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800df24:	4b2d      	ldr	r3, [pc, #180]	; (800dfdc <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800df26:	681c      	ldr	r4, [r3, #0]
 800df28:	f107 0014 	add.w	r0, r7, #20
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	2164      	movs	r1, #100	; 0x64
 800df32:	47a0      	blx	r4
 800df34:	4603      	mov	r3, r0
 800df36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800df3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df3e:	2b63      	cmp	r3, #99	; 0x63
 800df40:	d813      	bhi.n	800df6a <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800df42:	f107 0214 	add.w	r2, r7, #20
 800df46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800df4a:	4611      	mov	r1, r2
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe fed2 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800df52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800df56:	4619      	mov	r1, r3
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f7fe ff38 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800df5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff fa7f 	bl	800d466 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800df68:	e031      	b.n	800dfce <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800df6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df6e:	3301      	adds	r3, #1
 800df70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800df74:	f240 32c3 	movw	r2, #963	; 0x3c3
 800df78:	4919      	ldr	r1, [pc, #100]	; (800dfe0 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800df7a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800df7e:	f7fe fc3f 	bl	800c800 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800df82:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800df86:	4b15      	ldr	r3, [pc, #84]	; (800dfdc <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800df88:	681c      	ldr	r4, [r3, #0]
 800df8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800df92:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800df96:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800df98:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800df9c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fe fea8 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800dfa6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800dfaa:	4619      	mov	r1, r3
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f7fe ff0e 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800dfb2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7ff fa55 	bl	800d466 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800dfbc:	f240 33c7 	movw	r3, #967	; 0x3c7
 800dfc0:	4a07      	ldr	r2, [pc, #28]	; (800dfe0 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800dfc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dfc6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800dfca:	f7fe fc2d 	bl	800c828 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800dfce:	bf00      	nop
}
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	379c      	adds	r7, #156	; 0x9c
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd90      	pop	{r4, r7, pc}
 800dfd8:	08024524 	.word	0x08024524
 800dfdc:	200000b0 	.word	0x200000b0
 800dfe0:	08024464 	.word	0x08024464

0800dfe4 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b08a      	sub	sp, #40	; 0x28
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800dff0:	491f      	ldr	r1, [pc, #124]	; (800e070 <_Z16StringFromBinaryPKhj+0x8c>)
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f7fe fe7f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800dff8:	2300      	movs	r3, #0
 800dffa:	627b      	str	r3, [r7, #36]	; 0x24
 800dffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	429a      	cmp	r2, r3
 800e002:	d219      	bcs.n	800e038 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	4413      	add	r3, r2
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	461a      	mov	r2, r3
 800e00e:	f107 0314 	add.w	r3, r7, #20
 800e012:	4918      	ldr	r1, [pc, #96]	; (800e074 <_Z16StringFromBinaryPKhj+0x90>)
 800e014:	4618      	mov	r0, r3
 800e016:	f7ff ff2d 	bl	800de74 <_Z16StringFromFormatPKcz>
 800e01a:	f107 0314 	add.w	r3, r7, #20
 800e01e:	4619      	mov	r1, r3
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7ff fa9d 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800e026:	f107 0314 	add.w	r3, r7, #20
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7ff fa1b 	bl	800d466 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800e030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e032:	3301      	adds	r3, #1
 800e034:	627b      	str	r3, [r7, #36]	; 0x24
 800e036:	e7e1      	b.n	800dffc <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f7ff f9f3 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800e03e:	4603      	mov	r3, r0
 800e040:	3b01      	subs	r3, #1
 800e042:	f107 001c 	add.w	r0, r7, #28
 800e046:	2200      	movs	r2, #0
 800e048:	68f9      	ldr	r1, [r7, #12]
 800e04a:	f7ff fb15 	bl	800d678 <_ZNK12SimpleString9subStringEjj>
 800e04e:	f107 031c 	add.w	r3, r7, #28
 800e052:	4619      	mov	r1, r3
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f7fe feba 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800e05a:	f107 031c 	add.w	r3, r7, #28
 800e05e:	4618      	mov	r0, r3
 800e060:	f7ff fa01 	bl	800d466 <_ZN12SimpleStringD1Ev>

    return result;
 800e064:	bf00      	nop
}
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	3728      	adds	r7, #40	; 0x28
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	08024524 	.word	0x08024524
 800e074:	080245d0 	.word	0x080245d0

0800e078 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d006      	beq.n	800e098 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	68b9      	ldr	r1, [r7, #8]
 800e090:	4618      	mov	r0, r3
 800e092:	f7ff ffa7 	bl	800dfe4 <_Z16StringFromBinaryPKhj>
 800e096:	e004      	b.n	800e0a2 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	4904      	ldr	r1, [pc, #16]	; (800e0ac <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7ff fc6f 	bl	800d980 <_Z10StringFromPKc>
}
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	08024544 	.word	0x08024544

0800e0b0 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b088      	sub	sp, #32
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	4913      	ldr	r1, [pc, #76]	; (800e110 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7ff fed6 	bl	800de74 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b80      	cmp	r3, #128	; 0x80
 800e0cc:	bf28      	it	cs
 800e0ce:	2380      	movcs	r3, #128	; 0x80
 800e0d0:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800e0d2:	f107 0314 	add.w	r3, r7, #20
 800e0d6:	69fa      	ldr	r2, [r7, #28]
 800e0d8:	68b9      	ldr	r1, [r7, #8]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7ff ffcc 	bl	800e078 <_Z22StringFromBinaryOrNullPKhj>
 800e0e0:	f107 0314 	add.w	r3, r7, #20
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	68f8      	ldr	r0, [r7, #12]
 800e0e8:	f7ff fa3a 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800e0ec:	f107 0314 	add.w	r3, r7, #20
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7ff f9b8 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d903      	bls.n	800e106 <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800e0fe:	4905      	ldr	r1, [pc, #20]	; (800e114 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f7ff fa3f 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800e106:	bf00      	nop
}
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	3720      	adds	r7, #32
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	080245d8 	.word	0x080245d8
 800e114:	080245f4 	.word	0x080245f4

0800e118 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d006      	beq.n	800e138 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	68b9      	ldr	r1, [r7, #8]
 800e130:	4618      	mov	r0, r3
 800e132:	f7ff ffbd 	bl	800e0b0 <_Z24StringFromBinaryWithSizePKhj>
 800e136:	e004      	b.n	800e142 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	4904      	ldr	r1, [pc, #16]	; (800e14c <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7ff fc1f 	bl	800d980 <_Z10StringFromPKc>
}
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	08024544 	.word	0x08024544

0800e150 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
 800e15c:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800e15e:	4925      	ldr	r1, [pc, #148]	; (800e1f4 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f7fe fdc8 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	2b04      	cmp	r3, #4
 800e16a:	d802      	bhi.n	800e172 <_Z20StringFromMaskedBitsmmj+0x22>
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	00db      	lsls	r3, r3, #3
 800e170:	e000      	b.n	800e174 <_Z20StringFromMaskedBitsmmj+0x24>
 800e172:	2320      	movs	r3, #32
 800e174:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800e176:	69bb      	ldr	r3, [r7, #24]
 800e178:	3b01      	subs	r3, #1
 800e17a:	2201      	movs	r2, #1
 800e17c:	fa02 f303 	lsl.w	r3, r2, r3
 800e180:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800e182:	2300      	movs	r3, #0
 800e184:	61fb      	str	r3, [r7, #28]
 800e186:	69fa      	ldr	r2, [r7, #28]
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d22d      	bcs.n	800e1ea <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	4013      	ands	r3, r2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00c      	beq.n	800e1b2 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800e198:	68ba      	ldr	r2, [r7, #8]
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	4013      	ands	r3, r2
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <_Z20StringFromMaskedBitsmmj+0x56>
 800e1a2:	4b15      	ldr	r3, [pc, #84]	; (800e1f8 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800e1a4:	e000      	b.n	800e1a8 <_Z20StringFromMaskedBitsmmj+0x58>
 800e1a6:	4b15      	ldr	r3, [pc, #84]	; (800e1fc <_Z20StringFromMaskedBitsmmj+0xac>)
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	68f8      	ldr	r0, [r7, #12]
 800e1ac:	f7ff f9ea 	bl	800d584 <_ZN12SimpleStringpLEPKc>
 800e1b0:	e003      	b.n	800e1ba <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800e1b2:	4913      	ldr	r1, [pc, #76]	; (800e200 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f7ff f9e5 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	f003 0307 	and.w	r3, r3, #7
 800e1c0:	2b07      	cmp	r3, #7
 800e1c2:	d108      	bne.n	800e1d6 <_Z20StringFromMaskedBitsmmj+0x86>
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	3b01      	subs	r3, #1
 800e1c8:	69fa      	ldr	r2, [r7, #28]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d003      	beq.n	800e1d6 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800e1ce:	490d      	ldr	r1, [pc, #52]	; (800e204 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f7ff f9d7 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	005b      	lsls	r3, r3, #1
 800e1e0:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	61fb      	str	r3, [r7, #28]
 800e1e8:	e7cd      	b.n	800e186 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800e1ea:	bf00      	nop
}
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	3720      	adds	r7, #32
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	08024524 	.word	0x08024524
 800e1f8:	080245fc 	.word	0x080245fc
 800e1fc:	08024600 	.word	0x08024600
 800e200:	08024604 	.word	0x08024604
 800e204:	08024608 	.word	0x08024608

0800e208 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800e212:	683a      	ldr	r2, [r7, #0]
 800e214:	4b18      	ldr	r3, [pc, #96]	; (800e278 <_Z23StringFromOrdinalNumberj+0x70>)
 800e216:	fba3 1302 	umull	r1, r3, r3, r2
 800e21a:	08d9      	lsrs	r1, r3, #3
 800e21c:	460b      	mov	r3, r1
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	440b      	add	r3, r1
 800e222:	005b      	lsls	r3, r3, #1
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	2b0a      	cmp	r3, #10
 800e22c:	d905      	bls.n	800e23a <_Z23StringFromOrdinalNumberj+0x32>
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2b0d      	cmp	r3, #13
 800e232:	d802      	bhi.n	800e23a <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800e234:	4b11      	ldr	r3, [pc, #68]	; (800e27c <_Z23StringFromOrdinalNumberj+0x74>)
 800e236:	60fb      	str	r3, [r7, #12]
 800e238:	e013      	b.n	800e262 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	2b03      	cmp	r3, #3
 800e23e:	d102      	bne.n	800e246 <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800e240:	4b0f      	ldr	r3, [pc, #60]	; (800e280 <_Z23StringFromOrdinalNumberj+0x78>)
 800e242:	60fb      	str	r3, [r7, #12]
 800e244:	e00d      	b.n	800e262 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	2b02      	cmp	r3, #2
 800e24a:	d102      	bne.n	800e252 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800e24c:	4b0d      	ldr	r3, [pc, #52]	; (800e284 <_Z23StringFromOrdinalNumberj+0x7c>)
 800e24e:	60fb      	str	r3, [r7, #12]
 800e250:	e007      	b.n	800e262 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d102      	bne.n	800e25e <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800e258:	4b0b      	ldr	r3, [pc, #44]	; (800e288 <_Z23StringFromOrdinalNumberj+0x80>)
 800e25a:	60fb      	str	r3, [r7, #12]
 800e25c:	e001      	b.n	800e262 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800e25e:	4b07      	ldr	r3, [pc, #28]	; (800e27c <_Z23StringFromOrdinalNumberj+0x74>)
 800e260:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	4908      	ldr	r1, [pc, #32]	; (800e28c <_Z23StringFromOrdinalNumberj+0x84>)
 800e26a:	f7ff fe03 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	cccccccd 	.word	0xcccccccd
 800e27c:	0802460c 	.word	0x0802460c
 800e280:	08024610 	.word	0x08024610
 800e284:	08024614 	.word	0x08024614
 800e288:	08024618 	.word	0x08024618
 800e28c:	0802461c 	.word	0x0802461c

0800e290 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	3304      	adds	r3, #4
 800e29c:	4907      	ldr	r1, [pc, #28]	; (800e2bc <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fe fd29 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	60da      	str	r2, [r3, #12]
}
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3708      	adds	r7, #8
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	08024524 	.word	0x08024524

0800e2c0 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800e2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d01e      	beq.n	800e310 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	3b04      	subs	r3, #4
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	00db      	lsls	r3, r3, #3
 800e2e0:	18d4      	adds	r4, r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	429c      	cmp	r4, r3
 800e2e8:	d004      	beq.n	800e2f4 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800e2ea:	3c08      	subs	r4, #8
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f7ff f8ba 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800e2f2:	e7f6      	b.n	800e2e2 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f1a3 0208 	sub.w	r2, r3, #8
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	3b04      	subs	r3, #4
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	3301      	adds	r3, #1
 800e306:	00db      	lsls	r3, r3, #3
 800e308:	4619      	mov	r1, r3
 800e30a:	4610      	mov	r0, r2
 800e30c:	f7fc f976 	bl	800a5fc <_ZdaPvj>

    size_ = _size;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	68dc      	ldr	r4, [r3, #12]
 800e31a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800e31e:	d202      	bcs.n	800e326 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800e320:	1c63      	adds	r3, r4, #1
 800e322:	00db      	lsls	r3, r3, #3
 800e324:	e001      	b.n	800e32a <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800e326:	f04f 33ff 	mov.w	r3, #4294967295
 800e32a:	f240 4227 	movw	r2, #1063	; 0x427
 800e32e:	4910      	ldr	r1, [pc, #64]	; (800e370 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800e330:	4618      	mov	r0, r3
 800e332:	f7fc f941 	bl	800a5b8 <_ZnajPKci>
 800e336:	4605      	mov	r5, r0
 800e338:	1d2b      	adds	r3, r5, #4
 800e33a:	3b04      	subs	r3, #4
 800e33c:	2208      	movs	r2, #8
 800e33e:	601a      	str	r2, [r3, #0]
 800e340:	1d2b      	adds	r3, r5, #4
 800e342:	601c      	str	r4, [r3, #0]
 800e344:	f105 0308 	add.w	r3, r5, #8
 800e348:	1e62      	subs	r2, r4, #1
 800e34a:	4614      	mov	r4, r2
 800e34c:	461e      	mov	r6, r3
 800e34e:	2c00      	cmp	r4, #0
 800e350:	db06      	blt.n	800e360 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800e352:	4908      	ldr	r1, [pc, #32]	; (800e374 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800e354:	4630      	mov	r0, r6
 800e356:	f7fe fcce 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800e35a:	3608      	adds	r6, #8
 800e35c:	3c01      	subs	r4, #1
 800e35e:	e7f6      	b.n	800e34e <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800e360:	f105 0208 	add.w	r2, r5, #8
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	601a      	str	r2, [r3, #0]
}
 800e368:	bf00      	nop
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e370:	08024464 	.word	0x08024464
 800e374:	08024524 	.word	0x08024524

0800e378 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800e378:	b590      	push	{r4, r7, lr}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d01e      	beq.n	800e3c6 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	3b04      	subs	r3, #4
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	00db      	lsls	r3, r3, #3
 800e396:	18d4      	adds	r4, r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	429c      	cmp	r4, r3
 800e39e:	d004      	beq.n	800e3aa <_ZN22SimpleStringCollectionD1Ev+0x32>
 800e3a0:	3c08      	subs	r4, #8
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f7ff f85f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800e3a8:	e7f6      	b.n	800e398 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f1a3 0208 	sub.w	r2, r3, #8
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	3b04      	subs	r3, #4
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	00db      	lsls	r3, r3, #3
 800e3be:	4619      	mov	r1, r3
 800e3c0:	4610      	mov	r0, r2
 800e3c2:	f7fc f91b 	bl	800a5fc <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	3304      	adds	r3, #4
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7ff f84b 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	370c      	adds	r7, #12
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd90      	pop	{r4, r7, pc}

0800e3da <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800e3da:	b480      	push	{r7}
 800e3dc:	b083      	sub	sp, #12
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
    return size_;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	68db      	ldr	r3, [r3, #12]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
	...

0800e3f4 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800e3f4:	b590      	push	{r4, r7, lr}
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	683a      	ldr	r2, [r7, #0]
 800e404:	429a      	cmp	r2, r3
 800e406:	d315      	bcc.n	800e434 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	1d1c      	adds	r4, r3, #4
 800e40c:	f107 0308 	add.w	r3, r7, #8
 800e410:	490d      	ldr	r1, [pc, #52]	; (800e448 <_ZN22SimpleStringCollectionixEj+0x54>)
 800e412:	4618      	mov	r0, r3
 800e414:	f7fe fc6f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800e418:	f107 0308 	add.w	r3, r7, #8
 800e41c:	4619      	mov	r1, r3
 800e41e:	4620      	mov	r0, r4
 800e420:	f7fe fcd5 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800e424:	f107 0308 	add.w	r3, r7, #8
 800e428:	4618      	mov	r0, r3
 800e42a:	f7ff f81c 	bl	800d466 <_ZN12SimpleStringD1Ev>
        return empty_;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	3304      	adds	r3, #4
 800e432:	e004      	b.n	800e43e <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	00db      	lsls	r3, r3, #3
 800e43c:	4413      	add	r3, r2
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3714      	adds	r7, #20
 800e442:	46bd      	mov	sp, r7
 800e444:	bd90      	pop	{r4, r7, pc}
 800e446:	bf00      	nop
 800e448:	08024524 	.word	0x08024524

0800e44c <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	4618      	mov	r0, r3
 800e458:	f7fa fb88 	bl	8008b6c <_ZN17ConsoleTestOutputC1Ev>
 800e45c:	4a08      	ldr	r2, [pc, #32]	; (800e480 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	601a      	str	r2, [r3, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	611a      	str	r2, [r3, #16]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	3314      	adds	r3, #20
 800e46c:	4905      	ldr	r1, [pc, #20]	; (800e484 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fe fc41 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
{
}
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4618      	mov	r0, r3
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	080283a4 	.word	0x080283a4
 800e484:	08024624 	.word	0x08024624

0800e488 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	4a08      	ldr	r2, [pc, #32]	; (800e4b4 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	601a      	str	r2, [r3, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	3314      	adds	r3, #20
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7fe ffe3 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fa fb74 	bl	8008b90 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	080283a4 	.word	0x080283a4

0800e4b8 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
}
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f7ff ffe1 	bl	800e488 <_ZN18TeamCityTestOutputD1Ev>
 800e4c6:	211c      	movs	r1, #28
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7fc f865 	bl	800a598 <_ZdlPvj>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b086      	sub	sp, #24
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	332c      	adds	r3, #44	; 0x2c
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	492b      	ldr	r1, [pc, #172]	; (800e59c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800e4ee:	4610      	mov	r0, r2
 800e4f0:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800e4f2:	f107 0308 	add.w	r3, r7, #8
 800e4f6:	6839      	ldr	r1, [r7, #0]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f004 fdf7 	bl	80130ec <_ZNK10UtestShell7getNameEv>
 800e4fe:	f107 0308 	add.w	r3, r7, #8
 800e502:	4618      	mov	r0, r3
 800e504:	f7fe ff82 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800e508:	4603      	mov	r3, r0
 800e50a:	4619      	mov	r1, r3
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f919 	bl	800e744 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e512:	f107 0308 	add.w	r3, r7, #8
 800e516:	4618      	mov	r0, r3
 800e518:	f7fe ffa5 	bl	800d466 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	332c      	adds	r3, #44	; 0x2c
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	491e      	ldr	r1, [pc, #120]	; (800e5a0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800e528:	4610      	mov	r0, r2
 800e52a:	4798      	blx	r3
    if (!test.willRun()) {
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	3318      	adds	r3, #24
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	6838      	ldr	r0, [r7, #0]
 800e536:	4798      	blx	r3
 800e538:	4603      	mov	r3, r0
 800e53a:	f083 0301 	eor.w	r3, r3, #1
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	2b00      	cmp	r3, #0
 800e542:	d024      	beq.n	800e58e <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	332c      	adds	r3, #44	; 0x2c
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4915      	ldr	r1, [pc, #84]	; (800e5a4 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800e550:	4610      	mov	r0, r2
 800e552:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800e554:	f107 0310 	add.w	r3, r7, #16
 800e558:	6839      	ldr	r1, [r7, #0]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f004 fdc6 	bl	80130ec <_ZNK10UtestShell7getNameEv>
 800e560:	f107 0310 	add.w	r3, r7, #16
 800e564:	4618      	mov	r0, r3
 800e566:	f7fe ff51 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800e56a:	4603      	mov	r3, r0
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 f8e8 	bl	800e744 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e574:	f107 0310 	add.w	r3, r7, #16
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fe ff74 	bl	800d466 <_ZN12SimpleStringD1Ev>
        print("']\n");
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	332c      	adds	r3, #44	; 0x2c
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4905      	ldr	r1, [pc, #20]	; (800e5a0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800e58a:	4610      	mov	r0, r2
 800e58c:	4798      	blx	r3
    }
    currtest_ = &test;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	683a      	ldr	r2, [r7, #0]
 800e592:	611a      	str	r2, [r3, #16]
}
 800e594:	bf00      	nop
 800e596:	3718      	adds	r7, #24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	08024628 	.word	0x08024628
 800e5a0:	08024648 	.word	0x08024648
 800e5a4:	0802464c 	.word	0x0802464c

0800e5a8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800e5a8:	b5b0      	push	{r4, r5, r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	691b      	ldr	r3, [r3, #16]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d03b      	beq.n	800e632 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	332c      	adds	r3, #44	; 0x2c
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	491d      	ldr	r1, [pc, #116]	; (800e63c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800e5c6:	4610      	mov	r0, r2
 800e5c8:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	691a      	ldr	r2, [r3, #16]
 800e5ce:	f107 0308 	add.w	r3, r7, #8
 800e5d2:	4611      	mov	r1, r2
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f004 fd89 	bl	80130ec <_ZNK10UtestShell7getNameEv>
 800e5da:	f107 0308 	add.w	r3, r7, #8
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7fe ff14 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 f8ab 	bl	800e744 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e5ee:	f107 0308 	add.w	r3, r7, #8
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fe ff37 	bl	800d466 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800e5f8:	687a      	ldr	r2, [r7, #4]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	332c      	adds	r3, #44	; 0x2c
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	490f      	ldr	r1, [pc, #60]	; (800e640 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800e604:	4610      	mov	r0, r2
 800e606:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800e608:	687d      	ldr	r5, [r7, #4]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	3334      	adds	r3, #52	; 0x34
 800e610:	681c      	ldr	r4, [r3, #0]
 800e612:	6838      	ldr	r0, [r7, #0]
 800e614:	f004 fa0a 	bl	8012a2c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800e618:	4603      	mov	r3, r0
 800e61a:	4619      	mov	r1, r3
 800e61c:	4628      	mov	r0, r5
 800e61e:	47a0      	blx	r4
    print("']\n");
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	332c      	adds	r3, #44	; 0x2c
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4906      	ldr	r1, [pc, #24]	; (800e644 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800e62c:	4610      	mov	r0, r2
 800e62e:	4798      	blx	r3
 800e630:	e000      	b.n	800e634 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800e632:	bf00      	nop
}
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bdb0      	pop	{r4, r5, r7, pc}
 800e63a:	bf00      	nop
 800e63c:	0802466c 	.word	0x0802466c
 800e640:	0802468c 	.word	0x0802468c
 800e644:	08024648 	.word	0x08024648

0800e648 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800e648:	b590      	push	{r4, r7, lr}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f103 0414 	add.w	r4, r3, #20
 800e658:	f107 0308 	add.w	r3, r7, #8
 800e65c:	6839      	ldr	r1, [r7, #0]
 800e65e:	4618      	mov	r0, r3
 800e660:	f004 fd53 	bl	801310a <_ZNK10UtestShell8getGroupEv>
 800e664:	f107 0308 	add.w	r3, r7, #8
 800e668:	4619      	mov	r1, r3
 800e66a:	4620      	mov	r0, r4
 800e66c:	f7fe fbaf 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800e670:	f107 0308 	add.w	r3, r7, #8
 800e674:	4618      	mov	r0, r3
 800e676:	f7fe fef6 	bl	800d466 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	332c      	adds	r3, #44	; 0x2c
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	490c      	ldr	r1, [pc, #48]	; (800e6b8 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800e686:	4610      	mov	r0, r2
 800e688:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	3314      	adds	r3, #20
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fe febc 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800e694:	4603      	mov	r3, r0
 800e696:	4619      	mov	r1, r3
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 f853 	bl	800e744 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	332c      	adds	r3, #44	; 0x2c
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4904      	ldr	r1, [pc, #16]	; (800e6bc <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800e6aa:	4610      	mov	r0, r2
 800e6ac:	4798      	blx	r3
}
 800e6ae:	bf00      	nop
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd90      	pop	{r4, r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	0802469c 	.word	0x0802469c
 800e6bc:	08024648 	.word	0x08024648

0800e6c0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800e6c0:	b590      	push	{r4, r7, lr}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f103 0414 	add.w	r4, r3, #20
 800e6d0:	f107 0308 	add.w	r3, r7, #8
 800e6d4:	4918      	ldr	r1, [pc, #96]	; (800e738 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fe fb0d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800e6dc:	f107 0308 	add.w	r3, r7, #8
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	f7fe fecb 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	461c      	mov	r4, r3
 800e6ec:	f107 0308 	add.w	r3, r7, #8
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fe feb8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800e6f6:	2c00      	cmp	r4, #0
 800e6f8:	d11a      	bne.n	800e730 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	332c      	adds	r3, #44	; 0x2c
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	490d      	ldr	r1, [pc, #52]	; (800e73c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800e706:	4610      	mov	r0, r2
 800e708:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	3314      	adds	r3, #20
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fe fe7c 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800e714:	4603      	mov	r3, r0
 800e716:	4619      	mov	r1, r3
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f000 f813 	bl	800e744 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	332c      	adds	r3, #44	; 0x2c
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4905      	ldr	r1, [pc, #20]	; (800e740 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800e72a:	4610      	mov	r0, r2
 800e72c:	4798      	blx	r3
 800e72e:	e000      	b.n	800e732 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800e730:	bf00      	nop
}
 800e732:	3714      	adds	r7, #20
 800e734:	46bd      	mov	sp, r7
 800e736:	bd90      	pop	{r4, r7, pc}
 800e738:	08024624 	.word	0x08024624
 800e73c:	080246c0 	.word	0x080246c0
 800e740:	08024648 	.word	0x08024648

0800e744 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
    while (*s) {
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d03f      	beq.n	800e7d6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	2b27      	cmp	r3, #39	; 0x27
 800e75c:	d00b      	beq.n	800e776 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	2b7c      	cmp	r3, #124	; 0x7c
 800e764:	d007      	beq.n	800e776 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	2b5b      	cmp	r3, #91	; 0x5b
 800e76c:	d003      	beq.n	800e776 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	2b5d      	cmp	r3, #93	; 0x5d
 800e774:	d107      	bne.n	800e786 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800e776:	237c      	movs	r3, #124	; 0x7c
 800e778:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e780:	2300      	movs	r3, #0
 800e782:	73bb      	strb	r3, [r7, #14]
 800e784:	e01a      	b.n	800e7bc <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	2b0d      	cmp	r3, #13
 800e78c:	d106      	bne.n	800e79c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800e78e:	237c      	movs	r3, #124	; 0x7c
 800e790:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800e792:	2372      	movs	r3, #114	; 0x72
 800e794:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e796:	2300      	movs	r3, #0
 800e798:	73bb      	strb	r3, [r7, #14]
 800e79a:	e00f      	b.n	800e7bc <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	2b0a      	cmp	r3, #10
 800e7a2:	d106      	bne.n	800e7b2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800e7a4:	237c      	movs	r3, #124	; 0x7c
 800e7a6:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800e7a8:	236e      	movs	r3, #110	; 0x6e
 800e7aa:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	73bb      	strb	r3, [r7, #14]
 800e7b0:	e004      	b.n	800e7bc <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	3328      	adds	r3, #40	; 0x28
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f107 010c 	add.w	r1, r7, #12
 800e7ca:	4610      	mov	r0, r2
 800e7cc:	4798      	blx	r3
        s++;
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	603b      	str	r3, [r7, #0]
    while (*s) {
 800e7d4:	e7bb      	b.n	800e74e <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800e7d6:	bf00      	nop
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
	...

0800e7e0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800e7e0:	b5b0      	push	{r4, r5, r7, lr}
 800e7e2:	b08a      	sub	sp, #40	; 0x28
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	332c      	adds	r3, #44	; 0x2c
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4968      	ldr	r1, [pc, #416]	; (800e998 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800e7f6:	4610      	mov	r0, r2
 800e7f8:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	3310      	adds	r3, #16
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f107 0208 	add.w	r2, r7, #8
 800e806:	6839      	ldr	r1, [r7, #0]
 800e808:	4610      	mov	r0, r2
 800e80a:	4798      	blx	r3
 800e80c:	f107 0308 	add.w	r3, r7, #8
 800e810:	4618      	mov	r0, r3
 800e812:	f7fe fdfb 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800e816:	4603      	mov	r3, r0
 800e818:	4619      	mov	r1, r3
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7ff ff92 	bl	800e744 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e820:	f107 0308 	add.w	r3, r7, #8
 800e824:	4618      	mov	r0, r3
 800e826:	f7fe fe1e 	bl	800d466 <_ZN12SimpleStringD1Ev>
    print("' message='");
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	332c      	adds	r3, #44	; 0x2c
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4959      	ldr	r1, [pc, #356]	; (800e99c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800e836:	4610      	mov	r0, r2
 800e838:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800e83a:	6838      	ldr	r0, [r7, #0]
 800e83c:	f000 fa15 	bl	800ec6a <_ZNK11TestFailure17isOutsideTestFileEv>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d105      	bne.n	800e852 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800e846:	6838      	ldr	r0, [r7, #0]
 800e848:	f000 fa21 	bl	800ec8e <_ZNK11TestFailure18isInHelperFunctionEv>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d001      	beq.n	800e856 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800e852:	2301      	movs	r3, #1
 800e854:	e000      	b.n	800e858 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800e856:	2300      	movs	r3, #0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d042      	beq.n	800e8e2 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	332c      	adds	r3, #44	; 0x2c
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	494e      	ldr	r1, [pc, #312]	; (800e9a0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800e868:	4610      	mov	r0, r2
 800e86a:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800e86c:	687d      	ldr	r5, [r7, #4]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	332c      	adds	r3, #44	; 0x2c
 800e874:	681c      	ldr	r4, [r3, #0]
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	331c      	adds	r3, #28
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f107 0210 	add.w	r2, r7, #16
 800e882:	6839      	ldr	r1, [r7, #0]
 800e884:	4610      	mov	r0, r2
 800e886:	4798      	blx	r3
 800e888:	f107 0310 	add.w	r3, r7, #16
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fe fdbd 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800e892:	4603      	mov	r3, r0
 800e894:	4619      	mov	r1, r3
 800e896:	4628      	mov	r0, r5
 800e898:	47a0      	blx	r4
 800e89a:	f107 0310 	add.w	r3, r7, #16
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fe fde1 	bl	800d466 <_ZN12SimpleStringD1Ev>
        print(":");
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	332c      	adds	r3, #44	; 0x2c
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	493d      	ldr	r1, [pc, #244]	; (800e9a4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e8b0:	4610      	mov	r0, r2
 800e8b2:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800e8b4:	687d      	ldr	r5, [r7, #4]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	3334      	adds	r3, #52	; 0x34
 800e8bc:	681c      	ldr	r4, [r3, #0]
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	3320      	adds	r3, #32
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	6838      	ldr	r0, [r7, #0]
 800e8c8:	4798      	blx	r3
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	47a0      	blx	r4
        print("): ");
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	332c      	adds	r3, #44	; 0x2c
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4932      	ldr	r1, [pc, #200]	; (800e9a8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800e8de:	4610      	mov	r0, r2
 800e8e0:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	3308      	adds	r3, #8
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f107 0218 	add.w	r2, r7, #24
 800e8ee:	6839      	ldr	r1, [r7, #0]
 800e8f0:	4610      	mov	r0, r2
 800e8f2:	4798      	blx	r3
 800e8f4:	f107 0318 	add.w	r3, r7, #24
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fe fd87 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800e8fe:	4603      	mov	r3, r0
 800e900:	4619      	mov	r1, r3
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f7ff ff1e 	bl	800e744 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e908:	f107 0318 	add.w	r3, r7, #24
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fe fdaa 	bl	800d466 <_ZN12SimpleStringD1Ev>
    print(":");
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	332c      	adds	r3, #44	; 0x2c
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4921      	ldr	r1, [pc, #132]	; (800e9a4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e91e:	4610      	mov	r0, r2
 800e920:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800e922:	687d      	ldr	r5, [r7, #4]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	3334      	adds	r3, #52	; 0x34
 800e92a:	681c      	ldr	r4, [r3, #0]
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	3314      	adds	r3, #20
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	6838      	ldr	r0, [r7, #0]
 800e936:	4798      	blx	r3
 800e938:	4603      	mov	r3, r0
 800e93a:	4619      	mov	r1, r3
 800e93c:	4628      	mov	r0, r5
 800e93e:	47a0      	blx	r4

    print("' details='");
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	332c      	adds	r3, #44	; 0x2c
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4918      	ldr	r1, [pc, #96]	; (800e9ac <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800e94c:	4610      	mov	r0, r2
 800e94e:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3318      	adds	r3, #24
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f107 0220 	add.w	r2, r7, #32
 800e95c:	6839      	ldr	r1, [r7, #0]
 800e95e:	4610      	mov	r0, r2
 800e960:	4798      	blx	r3
 800e962:	f107 0320 	add.w	r3, r7, #32
 800e966:	4618      	mov	r0, r3
 800e968:	f7fe fd50 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800e96c:	4603      	mov	r3, r0
 800e96e:	4619      	mov	r1, r3
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7ff fee7 	bl	800e744 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e976:	f107 0320 	add.w	r3, r7, #32
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fe fd73 	bl	800d466 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e980:	687a      	ldr	r2, [r7, #4]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	332c      	adds	r3, #44	; 0x2c
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4909      	ldr	r1, [pc, #36]	; (800e9b0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800e98c:	4610      	mov	r0, r2
 800e98e:	4798      	blx	r3
}
 800e990:	bf00      	nop
 800e992:	3728      	adds	r7, #40	; 0x28
 800e994:	46bd      	mov	sp, r7
 800e996:	bdb0      	pop	{r4, r5, r7, pc}
 800e998:	080246e4 	.word	0x080246e4
 800e99c:	08024704 	.word	0x08024704
 800e9a0:	08024710 	.word	0x08024710
 800e9a4:	08024720 	.word	0x08024720
 800e9a8:	08024724 	.word	0x08024724
 800e9ac:	08024728 	.word	0x08024728
 800e9b0:	08024648 	.word	0x08024648

0800e9b4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800e9c0:	4a1a      	ldr	r2, [pc, #104]	; (800ea2c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	601a      	str	r2, [r3, #0]
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	3314      	adds	r3, #20
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	3204      	adds	r2, #4
 800e9d2:	68b9      	ldr	r1, [r7, #8]
 800e9d4:	4610      	mov	r0, r2
 800e9d6:	4798      	blx	r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	330c      	adds	r3, #12
 800e9dc:	68b9      	ldr	r1, [r7, #8]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f004 fb84 	bl	80130ec <_ZNK10UtestShell7getNameEv>
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	3314      	adds	r3, #20
 800e9e8:	68b9      	ldr	r1, [r7, #8]
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f004 fc4f 	bl	801328e <_ZNK10UtestShell7getFileEv>
 800e9f0:	68b8      	ldr	r0, [r7, #8]
 800e9f2:	f004 fc5b 	bl	80132ac <_ZNK10UtestShell13getLineNumberEv>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	61da      	str	r2, [r3, #28]
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	3320      	adds	r3, #32
 800ea00:	68b9      	ldr	r1, [r7, #8]
 800ea02:	4618      	mov	r0, r3
 800ea04:	f004 fc43 	bl	801328e <_ZNK10UtestShell7getFileEv>
 800ea08:	68b8      	ldr	r0, [r7, #8]
 800ea0a:	f004 fc4f 	bl	80132ac <_ZNK10UtestShell13getLineNumberEv>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	629a      	str	r2, [r3, #40]	; 0x28
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	332c      	adds	r3, #44	; 0x2c
 800ea18:	6879      	ldr	r1, [r7, #4]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fe f9bf 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
{
}
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	4618      	mov	r0, r3
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	08028670 	.word	0x08028670

0800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	607a      	str	r2, [r7, #4]
 800ea3c:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800ea3e:	4a19      	ldr	r2, [pc, #100]	; (800eaa4 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	601a      	str	r2, [r3, #0]
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	3314      	adds	r3, #20
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	3204      	adds	r2, #4
 800ea50:	68b9      	ldr	r1, [r7, #8]
 800ea52:	4610      	mov	r0, r2
 800ea54:	4798      	blx	r3
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	330c      	adds	r3, #12
 800ea5a:	68b9      	ldr	r1, [r7, #8]
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f004 fb45 	bl	80130ec <_ZNK10UtestShell7getNameEv>
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	3314      	adds	r3, #20
 800ea66:	6879      	ldr	r1, [r7, #4]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fe f944 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	683a      	ldr	r2, [r7, #0]
 800ea72:	61da      	str	r2, [r3, #28]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	3320      	adds	r3, #32
 800ea78:	68b9      	ldr	r1, [r7, #8]
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f004 fc07 	bl	801328e <_ZNK10UtestShell7getFileEv>
 800ea80:	68b8      	ldr	r0, [r7, #8]
 800ea82:	f004 fc13 	bl	80132ac <_ZNK10UtestShell13getLineNumberEv>
 800ea86:	4602      	mov	r2, r0
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	629a      	str	r2, [r3, #40]	; 0x28
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	332c      	adds	r3, #44	; 0x2c
 800ea90:	4905      	ldr	r1, [pc, #20]	; (800eaa8 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fe f92f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
{
}
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	08028670 	.word	0x08028670
 800eaa8:	08024734 	.word	0x08024734

0800eaac <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800eab6:	4a1e      	ldr	r2, [pc, #120]	; (800eb30 <_ZN11TestFailureC1ERKS_+0x84>)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	601a      	str	r2, [r3, #0]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	1d1a      	adds	r2, r3, #4
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	3304      	adds	r3, #4
 800eac4:	4619      	mov	r1, r3
 800eac6:	4610      	mov	r0, r2
 800eac8:	f7fe f969 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f103 020c 	add.w	r2, r3, #12
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	330c      	adds	r3, #12
 800ead6:	4619      	mov	r1, r3
 800ead8:	4610      	mov	r0, r2
 800eada:	f7fe f960 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f103 0214 	add.w	r2, r3, #20
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	3314      	adds	r3, #20
 800eae8:	4619      	mov	r1, r3
 800eaea:	4610      	mov	r0, r2
 800eaec:	f7fe f957 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	69da      	ldr	r2, [r3, #28]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	61da      	str	r2, [r3, #28]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f103 0220 	add.w	r2, r3, #32
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	3320      	adds	r3, #32
 800eb02:	4619      	mov	r1, r3
 800eb04:	4610      	mov	r0, r2
 800eb06:	f7fe f94a 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	629a      	str	r2, [r3, #40]	; 0x28
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	332c      	adds	r3, #44	; 0x2c
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	4610      	mov	r0, r2
 800eb20:	f7fe f93d 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
{
}
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4618      	mov	r0, r3
 800eb28:	3708      	adds	r7, #8
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	08028670 	.word	0x08028670

0800eb34 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	4a10      	ldr	r2, [pc, #64]	; (800eb80 <_ZN11TestFailureD1Ev+0x4c>)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	601a      	str	r2, [r3, #0]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	332c      	adds	r3, #44	; 0x2c
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7fe fc8d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	3320      	adds	r3, #32
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7fe fc88 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	3314      	adds	r3, #20
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fe fc83 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	330c      	adds	r3, #12
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7fe fc7e 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	3304      	adds	r3, #4
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7fe fc79 	bl	800d466 <_ZN12SimpleStringD1Ev>
{
}
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4618      	mov	r0, r3
 800eb78:	3708      	adds	r7, #8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	08028670 	.word	0x08028670

0800eb84 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
}
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f7ff ffd1 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800eb92:	2134      	movs	r1, #52	; 0x34
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f7fb fcff 	bl	800a598 <_ZdlPvj>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3708      	adds	r7, #8
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
    return fileName_;
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	3314      	adds	r3, #20
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7fe f8f2 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
}
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b082      	sub	sp, #8
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	3320      	adds	r3, #32
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7fe f8e3 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
}
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
    return testName_;
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	3304      	adds	r3, #4
 800ebee:	4619      	mov	r1, r3
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f7fe f8d4 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
}
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800ebfe:	b580      	push	{r7, lr}
 800ec00:	b082      	sub	sp, #8
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
 800ec06:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	330c      	adds	r3, #12
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f7fe f8c5 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
}
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	69db      	ldr	r3, [r3, #28]
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	370c      	adds	r7, #12
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
    return message_;
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	332c      	adds	r3, #44	; 0x2c
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7fe f89e 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
}
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b082      	sub	sp, #8
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f103 0220 	add.w	r2, r3, #32
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	3314      	adds	r3, #20
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	4610      	mov	r0, r2
 800ec80:	f7fe fc42 	bl	800d508 <_ZneRK12SimpleStringS1_>
 800ec84:	4603      	mov	r3, r0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800ec8e:	b480      	push	{r7}
 800ec90:	b083      	sub	sp, #12
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	69da      	ldr	r2, [r3, #28]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	bf34      	ite	cc
 800eca2:	2301      	movcc	r3, #1
 800eca4:	2300      	movcs	r3, #0
 800eca6:	b2db      	uxtb	r3, r3
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800ecb4:	b590      	push	{r4, r7, lr}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	607a      	str	r2, [r7, #4]
 800ecc0:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f7fe fba2 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800ecc8:	4604      	mov	r4, r0
 800ecca:	6838      	ldr	r0, [r7, #0]
 800eccc:	f7fe fb9e 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	4622      	mov	r2, r4
 800ecd6:	4903      	ldr	r1, [pc, #12]	; (800ece4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800ecd8:	f7ff f8cc 	bl	800de74 <_Z16StringFromFormatPKcz>
}
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd90      	pop	{r4, r7, pc}
 800ece4:	08024740 	.word	0x08024740

0800ece8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800ece8:	b590      	push	{r4, r7, lr}
 800ecea:	b097      	sub	sp, #92	; 0x5c
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	60b9      	str	r1, [r7, #8]
 800ecf2:	607a      	str	r2, [r7, #4]
 800ecf4:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800ecf6:	494c      	ldr	r1, [pc, #304]	; (800ee28 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f7fd fffc 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800ecfe:	2314      	movs	r3, #20
 800ed00:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800ed02:	230a      	movs	r3, #10
 800ed04:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800ed06:	f107 0320 	add.w	r3, r7, #32
 800ed0a:	220a      	movs	r2, #10
 800ed0c:	4947      	ldr	r1, [pc, #284]	; (800ee2c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fe f80c 	bl	800cd2c <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800ed14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed18:	f107 0120 	add.w	r1, r7, #32
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7fe fc03 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800ed24:	f107 0318 	add.w	r3, r7, #24
 800ed28:	f107 0220 	add.w	r2, r7, #32
 800ed2c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7fe fbfa 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800ed36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fe fb93 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800ed40:	f107 0310 	add.w	r3, r7, #16
 800ed44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed46:	493a      	ldr	r1, [pc, #232]	; (800ee30 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7ff f893 	bl	800de74 <_Z16StringFromFormatPKcz>

    result += "\n";
 800ed4e:	4939      	ldr	r1, [pc, #228]	; (800ee34 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f7fe fc17 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800ed56:	f107 0310 	add.w	r3, r7, #16
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fe fb56 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800ed60:	4604      	mov	r4, r0
 800ed62:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800ed66:	f107 0118 	add.w	r1, r7, #24
 800ed6a:	2314      	movs	r3, #20
 800ed6c:	683a      	ldr	r2, [r7, #0]
 800ed6e:	f7fe fc83 	bl	800d678 <_ZNK12SimpleString9subStringEjj>
 800ed72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7fe fb48 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ed82:	4622      	mov	r2, r4
 800ed84:	492c      	ldr	r1, [pc, #176]	; (800ee38 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800ed86:	f7ff f875 	bl	800de74 <_Z16StringFromFormatPKcz>
 800ed8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed8e:	4619      	mov	r1, r3
 800ed90:	68f8      	ldr	r0, [r7, #12]
 800ed92:	f7fe fbe5 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800ed96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fe fb63 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800eda0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7fe fb5e 	bl	800d466 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800edaa:	f107 0310 	add.w	r3, r7, #16
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fe fb38 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 800edb4:	4603      	mov	r3, r0
 800edb6:	f103 020a 	add.w	r2, r3, #10
 800edba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edbe:	491b      	ldr	r1, [pc, #108]	; (800ee2c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fd ffb3 	bl	800cd2c <_ZN12SimpleStringC1EPKcj>
 800edc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fe fb1e 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800edd0:	4602      	mov	r2, r0
 800edd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800edd6:	4919      	ldr	r1, [pc, #100]	; (800ee3c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff f84b 	bl	800de74 <_Z16StringFromFormatPKcz>
 800edde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ede2:	4619      	mov	r1, r3
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f7fe fbbb 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800edea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800edee:	4618      	mov	r0, r3
 800edf0:	f7fe fb39 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800edf4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fe fb34 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return result;
 800edfe:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800ee00:	f107 0310 	add.w	r3, r7, #16
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe fb2e 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800ee0a:	f107 0318 	add.w	r3, r7, #24
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7fe fb29 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800ee14:	f107 0320 	add.w	r3, r7, #32
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7fe fb24 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return result;
 800ee1e:	bf00      	nop
}
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	375c      	adds	r7, #92	; 0x5c
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd90      	pop	{r4, r7, pc}
 800ee28:	08024760 	.word	0x08024760
 800ee2c:	08024764 	.word	0x08024764
 800ee30:	08024768 	.word	0x08024768
 800ee34:	08024790 	.word	0x08024790
 800ee38:	08024794 	.word	0x08024794
 800ee3c:	0802479c 	.word	0x0802479c

0800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800ee40:	b590      	push	{r4, r7, lr}
 800ee42:	b087      	sub	sp, #28
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	60b9      	str	r1, [r7, #8]
 800ee4a:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800ee4c:	491a      	ldr	r1, [pc, #104]	; (800eeb8 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800ee4e:	68f8      	ldr	r0, [r7, #12]
 800ee50:	f7fd ff51 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f7fe faf5 	bl	800d444 <_ZNK12SimpleString7isEmptyEv>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	f083 0301 	eor.w	r3, r3, #1
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d022      	beq.n	800eeac <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800ee66:	f107 0310 	add.w	r3, r7, #16
 800ee6a:	4914      	ldr	r1, [pc, #80]	; (800eebc <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fd ff42 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800ee72:	f107 0310 	add.w	r3, r7, #16
 800ee76:	4619      	mov	r1, r3
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7fe f800 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	f083 0301 	eor.w	r3, r3, #1
 800ee84:	b2dc      	uxtb	r4, r3
 800ee86:	f107 0310 	add.w	r3, r7, #16
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fe faeb 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800ee90:	2c00      	cmp	r4, #0
 800ee92:	d003      	beq.n	800ee9c <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800ee94:	490a      	ldr	r1, [pc, #40]	; (800eec0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f7fe fb74 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800ee9c:	6879      	ldr	r1, [r7, #4]
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	f7fe fb5e 	bl	800d560 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800eea4:	4907      	ldr	r1, [pc, #28]	; (800eec4 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f7fe fb6c 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800eeac:	bf00      	nop
}
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	371c      	adds	r7, #28
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd90      	pop	{r4, r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	08024760 	.word	0x08024760
 800eebc:	080247a4 	.word	0x080247a4
 800eec0:	080247b0 	.word	0x080247b0
 800eec4:	080247bc 	.word	0x080247bc

0800eec8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800eec8:	b590      	push	{r4, r7, lr}
 800eeca:	b089      	sub	sp, #36	; 0x24
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
 800eed4:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	68b9      	ldr	r1, [r7, #8]
 800eede:	f7ff fda7 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eee2:	4a19      	ldr	r2, [pc, #100]	; (800ef48 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eeee:	68f9      	ldr	r1, [r7, #12]
 800eef0:	f107 0310 	add.w	r3, r7, #16
 800eef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7ff ffa2 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800eefc:	f107 0310 	add.w	r3, r7, #16
 800ef00:	4619      	mov	r1, r3
 800ef02:	4620      	mov	r0, r4
 800ef04:	f7fd ff63 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800ef08:	f107 0310 	add.w	r3, r7, #16
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fe faaa 	bl	800d466 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ef18:	68f9      	ldr	r1, [r7, #12]
 800ef1a:	f107 0018 	add.w	r0, r7, #24
 800ef1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef22:	f7ff fec7 	bl	800ecb4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ef26:	f107 0318 	add.w	r3, r7, #24
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	f7fe fb17 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800ef32:	f107 0318 	add.w	r3, r7, #24
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fe fa95 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3724      	adds	r7, #36	; 0x24
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd90      	pop	{r4, r7, pc}
 800ef46:	bf00      	nop
 800ef48:	08028644 	.word	0x08028644

0800ef4c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800ef4c:	b5b0      	push	{r4, r5, r7, lr}
 800ef4e:	b094      	sub	sp, #80	; 0x50
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6278      	str	r0, [r7, #36]	; 0x24
 800ef54:	6239      	str	r1, [r7, #32]
 800ef56:	61fa      	str	r2, [r7, #28]
 800ef58:	61bb      	str	r3, [r7, #24]
 800ef5a:	ed87 0b04 	vstr	d0, [r7, #16]
 800ef5e:	ed87 1b02 	vstr	d1, [r7, #8]
 800ef62:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800ef66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	69fa      	ldr	r2, [r7, #28]
 800ef6c:	6a39      	ldr	r1, [r7, #32]
 800ef6e:	f7ff fd5f 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ef72:	4a4a      	ldr	r2, [pc, #296]	; (800f09c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef76:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ef78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ef7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7ff ff5a 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ef8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef90:	4619      	mov	r1, r3
 800ef92:	4620      	mov	r0, r4
 800ef94:	f7fd ff1b 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800ef98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fe fa62 	bl	800d466 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800efa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800efa8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800efaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800efae:	2107      	movs	r1, #7
 800efb0:	ed97 0b04 	vldr	d0, [r7, #16]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7fe ff1b 	bl	800ddf0 <_Z10StringFromdi>
 800efba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800efbe:	2107      	movs	r1, #7
 800efc0:	ed97 0b02 	vldr	d0, [r7, #8]
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fe ff13 	bl	800ddf0 <_Z10StringFromdi>
 800efca:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800efce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800efd2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800efd6:	4629      	mov	r1, r5
 800efd8:	f7ff fe6c 	bl	800ecb4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800efdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800efe0:	4619      	mov	r1, r3
 800efe2:	4620      	mov	r0, r4
 800efe4:	f7fe fabc 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800efe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800efec:	4618      	mov	r0, r3
 800efee:	f7fe fa3a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800eff2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7fe fa35 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800effc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f000:	4618      	mov	r0, r3
 800f002:	f7fe fa30 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800f006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f008:	332c      	adds	r3, #44	; 0x2c
 800f00a:	4925      	ldr	r1, [pc, #148]	; (800f0a0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fe fab9 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800f012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f014:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f018:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f01c:	2107      	movs	r1, #7
 800f01e:	ed97 0b00 	vldr	d0, [r7]
 800f022:	4618      	mov	r0, r3
 800f024:	f7fe fee4 	bl	800ddf0 <_Z10StringFromdi>
 800f028:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f02c:	4619      	mov	r1, r3
 800f02e:	4620      	mov	r0, r4
 800f030:	f7fe fa96 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800f034:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fe fa14 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800f03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f040:	332c      	adds	r3, #44	; 0x2c
 800f042:	4918      	ldr	r1, [pc, #96]	; (800f0a4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800f044:	4618      	mov	r0, r3
 800f046:	f7fe fa9d 	bl	800d584 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800f04a:	4b17      	ldr	r3, [pc, #92]	; (800f0a8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	ed97 0b04 	vldr	d0, [r7, #16]
 800f052:	4798      	blx	r3
 800f054:	4603      	mov	r3, r0
 800f056:	2b00      	cmp	r3, #0
 800f058:	d10f      	bne.n	800f07a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800f05a:	4b13      	ldr	r3, [pc, #76]	; (800f0a8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	ed97 0b02 	vldr	d0, [r7, #8]
 800f062:	4798      	blx	r3
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d107      	bne.n	800f07a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800f06a:	4b0f      	ldr	r3, [pc, #60]	; (800f0a8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	ed97 0b00 	vldr	d0, [r7]
 800f072:	4798      	blx	r3
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800f07a:	2301      	movs	r3, #1
 800f07c:	e000      	b.n	800f080 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800f07e:	2300      	movs	r3, #0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d005      	beq.n	800f090 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f086:	332c      	adds	r3, #44	; 0x2c
 800f088:	4908      	ldr	r1, [pc, #32]	; (800f0ac <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fe fa7a 	bl	800d584 <_ZN12SimpleStringpLEPKc>
}
 800f090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f092:	4618      	mov	r0, r3
 800f094:	3750      	adds	r7, #80	; 0x50
 800f096:	46bd      	mov	sp, r7
 800f098:	bdb0      	pop	{r4, r5, r7, pc}
 800f09a:	bf00      	nop
 800f09c:	08028618 	.word	0x08028618
 800f0a0:	080247c0 	.word	0x080247c0
 800f0a4:	080247d8 	.word	0x080247d8
 800f0a8:	200000e8 	.word	0x200000e8
 800f0ac:	080247dc 	.word	0x080247dc

0800f0b0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f0b0:	b590      	push	{r4, r7, lr}
 800f0b2:	b093      	sub	sp, #76	; 0x4c
 800f0b4:	af02      	add	r7, sp, #8
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	607a      	str	r2, [r7, #4]
 800f0bc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	68b9      	ldr	r1, [r7, #8]
 800f0c6:	f7ff fcb3 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f0ca:	4a4f      	ldr	r2, [pc, #316]	; (800f208 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f0d6:	68f9      	ldr	r1, [r7, #12]
 800f0d8:	f107 0320 	add.w	r3, r7, #32
 800f0dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7ff feae 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f0e4:	f107 0320 	add.w	r3, r7, #32
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f7fd fe6f 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800f0f0:	f107 0320 	add.w	r3, r7, #32
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fe f9b6 	bl	800d466 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800f0fa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f0fc:	f7fe f986 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800f100:	4602      	mov	r2, r0
 800f102:	f107 0318 	add.w	r3, r7, #24
 800f106:	4611      	mov	r1, r2
 800f108:	4618      	mov	r0, r3
 800f10a:	f7fe fc47 	bl	800d99c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800f10e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f110:	f7fe f97c 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800f114:	4602      	mov	r2, r0
 800f116:	f107 0310 	add.w	r3, r7, #16
 800f11a:	4611      	mov	r1, r2
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7fe fc3d 	bl	800d99c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f128:	68f9      	ldr	r1, [r7, #12]
 800f12a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f12e:	f107 0310 	add.w	r3, r7, #16
 800f132:	f107 0218 	add.w	r2, r7, #24
 800f136:	f7ff fdbd 	bl	800ecb4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f13a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f13e:	4619      	mov	r1, r3
 800f140:	4620      	mov	r0, r4
 800f142:	f7fe fa0d 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800f146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fe f98b 	bl	800d466 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800f150:	2300      	movs	r3, #0
 800f152:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f154:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f156:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f158:	f7fe fae9 	bl	800d72e <_ZNK12SimpleString2atEj>
 800f15c:	4603      	mov	r3, r0
 800f15e:	461c      	mov	r4, r3
 800f160:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f162:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f164:	f7fe fae3 	bl	800d72e <_ZNK12SimpleString2atEj>
 800f168:	4603      	mov	r3, r0
 800f16a:	429c      	cmp	r4, r3
 800f16c:	bf0c      	ite	eq
 800f16e:	2301      	moveq	r3, #1
 800f170:	2300      	movne	r3, #0
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b00      	cmp	r3, #0
 800f176:	d003      	beq.n	800f180 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800f178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f17a:	3301      	adds	r3, #1
 800f17c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f17e:	e7e9      	b.n	800f154 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f180:	2300      	movs	r3, #0
 800f182:	63bb      	str	r3, [r7, #56]	; 0x38
 800f184:	f107 0310 	add.w	r3, r7, #16
 800f188:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fe facf 	bl	800d72e <_ZNK12SimpleString2atEj>
 800f190:	4603      	mov	r3, r0
 800f192:	461c      	mov	r4, r3
 800f194:	f107 0318 	add.w	r3, r7, #24
 800f198:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fe fac7 	bl	800d72e <_ZNK12SimpleString2atEj>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	429c      	cmp	r4, r3
 800f1a4:	bf0c      	ite	eq
 800f1a6:	2301      	moveq	r3, #1
 800f1a8:	2300      	movne	r3, #0
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d003      	beq.n	800f1b8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1b6:	e7e5      	b.n	800f184 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f1be:	68f9      	ldr	r1, [r7, #12]
 800f1c0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f1c4:	f107 0210 	add.w	r2, r7, #16
 800f1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ca:	9300      	str	r3, [sp, #0]
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ce:	f7ff fd8b 	bl	800ece8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f1d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f7fe f9c1 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800f1de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fe f93f 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800f1e8:	f107 0310 	add.w	r3, r7, #16
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fe f93a 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800f1f2:	f107 0318 	add.w	r3, r7, #24
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fe f935 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	4618      	mov	r0, r3
 800f200:	3744      	adds	r7, #68	; 0x44
 800f202:	46bd      	mov	sp, r7
 800f204:	bd90      	pop	{r4, r7, pc}
 800f206:	bf00      	nop
 800f208:	080285ec 	.word	0x080285ec

0800f20c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800f20c:	b590      	push	{r4, r7, lr}
 800f20e:	b087      	sub	sp, #28
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
 800f218:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	68b9      	ldr	r1, [r7, #8]
 800f222:	f7ff fc05 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f226:	4a1a      	ldr	r2, [pc, #104]	; (800f290 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f232:	68f9      	ldr	r1, [r7, #12]
 800f234:	f107 0310 	add.w	r3, r7, #16
 800f238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7ff fe00 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f240:	f107 0310 	add.w	r3, r7, #16
 800f244:	4619      	mov	r1, r3
 800f246:	4620      	mov	r0, r4
 800f248:	f7fd fdc1 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800f24c:	f107 0310 	add.w	r3, r7, #16
 800f250:	4618      	mov	r0, r3
 800f252:	f7fe f908 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	332c      	adds	r3, #44	; 0x2c
 800f25a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7fe f97f 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	332c      	adds	r3, #44	; 0x2c
 800f266:	490b      	ldr	r1, [pc, #44]	; (800f294 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800f268:	4618      	mov	r0, r3
 800f26a:	f7fe f98b 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	332c      	adds	r3, #44	; 0x2c
 800f272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f274:	4618      	mov	r0, r3
 800f276:	f7fe f973 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	332c      	adds	r3, #44	; 0x2c
 800f27e:	4906      	ldr	r1, [pc, #24]	; (800f298 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f280:	4618      	mov	r0, r3
 800f282:	f7fe f97f 	bl	800d584 <_ZN12SimpleStringpLEPKc>
}
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	4618      	mov	r0, r3
 800f28a:	371c      	adds	r7, #28
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd90      	pop	{r4, r7, pc}
 800f290:	080285c0 	.word	0x080285c0
 800f294:	08024800 	.word	0x08024800
 800f298:	08024804 	.word	0x08024804

0800f29c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f29c:	b5b0      	push	{r4, r5, r7, lr}
 800f29e:	b088      	sub	sp, #32
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	60f8      	str	r0, [r7, #12]
 800f2a4:	60b9      	str	r1, [r7, #8]
 800f2a6:	607a      	str	r2, [r7, #4]
 800f2a8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	68b9      	ldr	r1, [r7, #8]
 800f2b2:	f7ff fbbd 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f2b6:	4a1c      	ldr	r2, [pc, #112]	; (800f328 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f2c2:	68f9      	ldr	r1, [r7, #12]
 800f2c4:	f107 0310 	add.w	r3, r7, #16
 800f2c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7ff fdb8 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f2d0:	f107 0310 	add.w	r3, r7, #16
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f7fd fd79 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800f2dc:	f107 0310 	add.w	r3, r7, #16
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7fe f8c0 	bl	800d466 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f2ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2ee:	f7fe f88d 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2f6:	f7fe f889 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	f107 0018 	add.w	r0, r7, #24
 800f300:	462a      	mov	r2, r5
 800f302:	490a      	ldr	r1, [pc, #40]	; (800f32c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800f304:	f7fe fdb6 	bl	800de74 <_Z16StringFromFormatPKcz>
 800f308:	f107 0318 	add.w	r3, r7, #24
 800f30c:	4619      	mov	r1, r3
 800f30e:	4620      	mov	r0, r4
 800f310:	f7fe f926 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800f314:	f107 0318 	add.w	r3, r7, #24
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fe f8a4 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	4618      	mov	r0, r3
 800f322:	3720      	adds	r7, #32
 800f324:	46bd      	mov	sp, r7
 800f326:	bdb0      	pop	{r4, r5, r7, pc}
 800f328:	08028594 	.word	0x08028594
 800f32c:	08024810 	.word	0x08024810

0800f330 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800f330:	b590      	push	{r4, r7, lr}
 800f332:	b087      	sub	sp, #28
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
 800f33c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	68b9      	ldr	r1, [r7, #8]
 800f346:	f7ff fb73 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f34a:	4a1a      	ldr	r2, [pc, #104]	; (800f3b4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f356:	68f9      	ldr	r1, [r7, #12]
 800f358:	f107 0310 	add.w	r3, r7, #16
 800f35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f35e:	4618      	mov	r0, r3
 800f360:	f7ff fd6e 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f364:	f107 0310 	add.w	r3, r7, #16
 800f368:	4619      	mov	r1, r3
 800f36a:	4620      	mov	r0, r4
 800f36c:	f7fd fd2f 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800f370:	f107 0310 	add.w	r3, r7, #16
 800f374:	4618      	mov	r0, r3
 800f376:	f7fe f876 	bl	800d466 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	332c      	adds	r3, #44	; 0x2c
 800f37e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f380:	4618      	mov	r0, r3
 800f382:	f7fe f8ed 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	332c      	adds	r3, #44	; 0x2c
 800f38a:	490b      	ldr	r1, [pc, #44]	; (800f3b8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fe f8f9 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	332c      	adds	r3, #44	; 0x2c
 800f396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fe f8e1 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	332c      	adds	r3, #44	; 0x2c
 800f3a2:	4906      	ldr	r1, [pc, #24]	; (800f3bc <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7fe f8ed 	bl	800d584 <_ZN12SimpleStringpLEPKc>
}
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	371c      	adds	r7, #28
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd90      	pop	{r4, r7, pc}
 800f3b4:	08028568 	.word	0x08028568
 800f3b8:	08024800 	.word	0x08024800
 800f3bc:	08024804 	.word	0x08024804

0800f3c0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
 800f3cc:	603b      	str	r3, [r7, #0]
 800f3ce:	68f8      	ldr	r0, [r7, #12]
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	68b9      	ldr	r1, [r7, #8]
 800f3d6:	f7ff fb2b 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f3da:	4a07      	ldr	r2, [pc, #28]	; (800f3f8 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	332c      	adds	r3, #44	; 0x2c
 800f3e4:	69b9      	ldr	r1, [r7, #24]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fd fcf1 	bl	800cdce <_ZN12SimpleStringaSERKS_>
}
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3710      	adds	r7, #16
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	08028224 	.word	0x08028224

0800f3fc <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800f3fc:	b590      	push	{r4, r7, lr}
 800f3fe:	b09d      	sub	sp, #116	; 0x74
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
 800f408:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	68b9      	ldr	r1, [r7, #8]
 800f412:	f7ff fb0d 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f416:	4a5d      	ldr	r2, [pc, #372]	; (800f58c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f422:	68f9      	ldr	r1, [r7, #12]
 800f424:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f428:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7ff fd07 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f436:	4619      	mov	r1, r3
 800f438:	4620      	mov	r0, r4
 800f43a:	f7fd fcc8 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800f43e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f442:	4618      	mov	r0, r3
 800f444:	f7fe f80f 	bl	800d466 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800f448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f44c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f450:	4618      	mov	r0, r3
 800f452:	f7fe fae1 	bl	800da18 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800f456:	f107 0320 	add.w	r3, r7, #32
 800f45a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fe fada 	bl	800da18 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f464:	f107 0120 	add.w	r1, r7, #32
 800f468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f46c:	2220      	movs	r2, #32
 800f46e:	4618      	mov	r0, r3
 800f470:	f7fe f8b6 	bl	800d5e0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f474:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f478:	4945      	ldr	r1, [pc, #276]	; (800f590 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fd fc3b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800f480:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f484:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f488:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fe f84c 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f492:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f496:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7fe fbd2 	bl	800dc44 <_Z30BracketsFormattedHexStringFroml>
 800f4a0:	f107 0318 	add.w	r3, r7, #24
 800f4a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f4a8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fe f83c 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f4b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7fd ffd5 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f4bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7fd ffd0 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f4c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fd ffcb 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f4d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f4d4:	492e      	ldr	r1, [pc, #184]	; (800f590 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fd fc0d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800f4dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f4e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f4e4:	f107 0120 	add.w	r1, r7, #32
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fe f81e 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f4ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f4f2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fe fba4 	bl	800dc44 <_Z30BracketsFormattedHexStringFroml>
 800f4fc:	f107 0310 	add.w	r3, r7, #16
 800f500:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f504:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f508:	4618      	mov	r0, r3
 800f50a:	f7fe f80e 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f50e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f512:	4618      	mov	r0, r3
 800f514:	f7fd ffa7 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f518:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fd ffa2 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f522:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f526:	4618      	mov	r0, r3
 800f528:	f7fd ff9d 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f532:	68f9      	ldr	r1, [r7, #12]
 800f534:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f538:	f107 0318 	add.w	r3, r7, #24
 800f53c:	f107 0210 	add.w	r2, r7, #16
 800f540:	f7ff fbb8 	bl	800ecb4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f544:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f548:	4619      	mov	r1, r3
 800f54a:	4620      	mov	r0, r4
 800f54c:	f7fe f808 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800f550:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f554:	4618      	mov	r0, r3
 800f556:	f7fd ff86 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f55a:	f107 0310 	add.w	r3, r7, #16
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fd ff81 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f564:	f107 0318 	add.w	r3, r7, #24
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fd ff7c 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800f56e:	f107 0320 	add.w	r3, r7, #32
 800f572:	4618      	mov	r0, r3
 800f574:	f7fd ff77 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800f578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fd ff72 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	4618      	mov	r0, r3
 800f586:	3774      	adds	r7, #116	; 0x74
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd90      	pop	{r4, r7, pc}
 800f58c:	0802853c 	.word	0x0802853c
 800f590:	08024764 	.word	0x08024764

0800f594 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800f594:	b590      	push	{r4, r7, lr}
 800f596:	b09d      	sub	sp, #116	; 0x74
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	607a      	str	r2, [r7, #4]
 800f5a0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	68b9      	ldr	r1, [r7, #8]
 800f5aa:	f7ff fa41 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f5ae:	4a5d      	ldr	r2, [pc, #372]	; (800f724 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f5ba:	68f9      	ldr	r1, [r7, #12]
 800f5bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f5c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7ff fc3b 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f5ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	f7fd fbfc 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800f5d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7fd ff43 	bl	800d466 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800f5e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5e4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7fe fc7d 	bl	800dee8 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800f5ee:	f107 0320 	add.w	r3, r7, #32
 800f5f2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fe fc76 	bl	800dee8 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f5fc:	f107 0120 	add.w	r1, r7, #32
 800f600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f604:	2220      	movs	r2, #32
 800f606:	4618      	mov	r0, r3
 800f608:	f7fd ffea 	bl	800d5e0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f60c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f610:	4945      	ldr	r1, [pc, #276]	; (800f728 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800f612:	4618      	mov	r0, r3
 800f614:	f7fd fb6f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800f618:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f61c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f620:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f624:	4618      	mov	r0, r3
 800f626:	f7fd ff80 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f62a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f62e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f632:	4618      	mov	r0, r3
 800f634:	f7fe fb22 	bl	800dc7c <_Z30BracketsFormattedHexStringFromm>
 800f638:	f107 0318 	add.w	r3, r7, #24
 800f63c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f640:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f644:	4618      	mov	r0, r3
 800f646:	f7fd ff70 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f64a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fd ff09 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f654:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fd ff04 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f65e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f662:	4618      	mov	r0, r3
 800f664:	f7fd feff 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f668:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f66c:	492e      	ldr	r1, [pc, #184]	; (800f728 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fd fb41 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800f674:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f678:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f67c:	f107 0120 	add.w	r1, r7, #32
 800f680:	4618      	mov	r0, r3
 800f682:	f7fd ff52 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f686:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f68a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fe faf4 	bl	800dc7c <_Z30BracketsFormattedHexStringFromm>
 800f694:	f107 0310 	add.w	r3, r7, #16
 800f698:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f69c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7fd ff42 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f6a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fd fedb 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f6b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7fd fed6 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f6ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fd fed1 	bl	800d466 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f6ca:	68f9      	ldr	r1, [r7, #12]
 800f6cc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f6d0:	f107 0318 	add.w	r3, r7, #24
 800f6d4:	f107 0210 	add.w	r2, r7, #16
 800f6d8:	f7ff faec 	bl	800ecb4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f6dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f7fd ff3c 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800f6e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fd feba 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f6f2:	f107 0310 	add.w	r3, r7, #16
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fd feb5 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f6fc:	f107 0318 	add.w	r3, r7, #24
 800f700:	4618      	mov	r0, r3
 800f702:	f7fd feb0 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800f706:	f107 0320 	add.w	r3, r7, #32
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7fd feab 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800f710:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f714:	4618      	mov	r0, r3
 800f716:	f7fd fea6 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	4618      	mov	r0, r3
 800f71e:	3774      	adds	r7, #116	; 0x74
 800f720:	46bd      	mov	sp, r7
 800f722:	bd90      	pop	{r4, r7, pc}
 800f724:	08028510 	.word	0x08028510
 800f728:	08024764 	.word	0x08024764

0800f72c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800f72c:	b590      	push	{r4, r7, lr}
 800f72e:	b09d      	sub	sp, #116	; 0x74
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
 800f738:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	68b9      	ldr	r1, [r7, #8]
 800f742:	f7ff f975 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f746:	4a5f      	ldr	r2, [pc, #380]	; (800f8c4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f752:	68f9      	ldr	r1, [r7, #12]
 800f754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f758:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7ff fb6f 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f762:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f766:	4619      	mov	r1, r3
 800f768:	4620      	mov	r0, r4
 800f76a:	f7fd fb30 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800f76e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f772:	4618      	mov	r0, r3
 800f774:	f7fd fe77 	bl	800d466 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800f778:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800f77c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f780:	4611      	mov	r1, r2
 800f782:	4618      	mov	r0, r3
 800f784:	f7fe f936 	bl	800d9f4 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800f788:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800f78c:	f107 0320 	add.w	r3, r7, #32
 800f790:	4611      	mov	r1, r2
 800f792:	4618      	mov	r0, r3
 800f794:	f7fe f92e 	bl	800d9f4 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f798:	f107 0120 	add.w	r1, r7, #32
 800f79c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7a0:	2220      	movs	r2, #32
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7fd ff1c 	bl	800d5e0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f7a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f7ac:	4946      	ldr	r1, [pc, #280]	; (800f8c8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fd faa1 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800f7b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f7b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f7bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7fd feb2 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f7c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f7ca:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800f7ce:	4611      	mov	r1, r2
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7fe fa6f 	bl	800dcb4 <_Z30BracketsFormattedHexStringFroma>
 800f7d6:	f107 0318 	add.w	r3, r7, #24
 800f7da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f7de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fd fea1 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f7e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7fd fe3a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f7f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fd fe35 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f7fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f800:	4618      	mov	r0, r3
 800f802:	f7fd fe30 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f806:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f80a:	492f      	ldr	r1, [pc, #188]	; (800f8c8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fd fa72 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 800f812:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f816:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f81a:	f107 0120 	add.w	r1, r7, #32
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fd fe83 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f824:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f828:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800f82c:	4611      	mov	r1, r2
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fe fa40 	bl	800dcb4 <_Z30BracketsFormattedHexStringFroma>
 800f834:	f107 0310 	add.w	r3, r7, #16
 800f838:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f83c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f840:	4618      	mov	r0, r3
 800f842:	f7fd fe72 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 800f846:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fd fe0b 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f850:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f854:	4618      	mov	r0, r3
 800f856:	f7fd fe06 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800f85a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fd fe01 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f86a:	68f9      	ldr	r1, [r7, #12]
 800f86c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f870:	f107 0318 	add.w	r3, r7, #24
 800f874:	f107 0210 	add.w	r2, r7, #16
 800f878:	f7ff fa1c 	bl	800ecb4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f87c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f880:	4619      	mov	r1, r3
 800f882:	4620      	mov	r0, r4
 800f884:	f7fd fe6c 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800f888:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7fd fdea 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f892:	f107 0310 	add.w	r3, r7, #16
 800f896:	4618      	mov	r0, r3
 800f898:	f7fd fde5 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f89c:	f107 0318 	add.w	r3, r7, #24
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fd fde0 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800f8a6:	f107 0320 	add.w	r3, r7, #32
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fd fddb 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800f8b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fd fdd6 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3774      	adds	r7, #116	; 0x74
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd90      	pop	{r4, r7, pc}
 800f8c4:	080284e4 	.word	0x080284e4
 800f8c8:	08024764 	.word	0x08024764

0800f8cc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f8cc:	b590      	push	{r4, r7, lr}
 800f8ce:	b093      	sub	sp, #76	; 0x4c
 800f8d0:	af02      	add	r7, sp, #8
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
 800f8d8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f8da:	68f8      	ldr	r0, [r7, #12]
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	68b9      	ldr	r1, [r7, #8]
 800f8e2:	f7ff f8a5 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f8e6:	4a4a      	ldr	r2, [pc, #296]	; (800fa10 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f8f2:	68f9      	ldr	r1, [r7, #12]
 800f8f4:	f107 0320 	add.w	r3, r7, #32
 800f8f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7ff faa0 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f900:	f107 0320 	add.w	r3, r7, #32
 800f904:	4619      	mov	r1, r3
 800f906:	4620      	mov	r0, r4
 800f908:	f7fd fa61 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800f90c:	f107 0320 	add.w	r3, r7, #32
 800f910:	4618      	mov	r0, r3
 800f912:	f7fd fda8 	bl	800d466 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f916:	f107 0318 	add.w	r3, r7, #24
 800f91a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fe f83d 	bl	800d99c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f922:	f107 0310 	add.w	r3, r7, #16
 800f926:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fe f837 	bl	800d99c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f934:	68f9      	ldr	r1, [r7, #12]
 800f936:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f93a:	f107 0310 	add.w	r3, r7, #16
 800f93e:	f107 0218 	add.w	r2, r7, #24
 800f942:	f7ff f9b7 	bl	800ecb4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f94a:	4619      	mov	r1, r3
 800f94c:	4620      	mov	r0, r4
 800f94e:	f7fd fe07 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800f952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f956:	4618      	mov	r0, r3
 800f958:	f7fd fd85 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d046      	beq.n	800f9f0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800f962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f964:	2b00      	cmp	r3, #0
 800f966:	d043      	beq.n	800f9f0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800f968:	2300      	movs	r3, #0
 800f96a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f96c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f970:	4413      	add	r3, r2
 800f972:	781a      	ldrb	r2, [r3, #0]
 800f974:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f978:	440b      	add	r3, r1
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d103      	bne.n	800f988 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800f980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f982:	3301      	adds	r3, #1
 800f984:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f986:	e7f1      	b.n	800f96c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f988:	2300      	movs	r3, #0
 800f98a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f98c:	f107 0310 	add.w	r3, r7, #16
 800f990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f992:	4618      	mov	r0, r3
 800f994:	f7fd fecb 	bl	800d72e <_ZNK12SimpleString2atEj>
 800f998:	4603      	mov	r3, r0
 800f99a:	461c      	mov	r4, r3
 800f99c:	f107 0318 	add.w	r3, r7, #24
 800f9a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fd fec3 	bl	800d72e <_ZNK12SimpleString2atEj>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	429c      	cmp	r4, r3
 800f9ac:	bf0c      	ite	eq
 800f9ae:	2301      	moveq	r3, #1
 800f9b0:	2300      	movne	r3, #0
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d003      	beq.n	800f9c0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800f9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9be:	e7e5      	b.n	800f98c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f9c6:	68f9      	ldr	r1, [r7, #12]
 800f9c8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f9cc:	f107 0210 	add.w	r2, r7, #16
 800f9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d2:	9300      	str	r3, [sp, #0]
 800f9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d6:	f7ff f987 	bl	800ece8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f9da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f9de:	4619      	mov	r1, r3
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f7fd fdbd 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800f9e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fd fd3b 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f9f0:	f107 0310 	add.w	r3, r7, #16
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fd fd36 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f9fa:	f107 0318 	add.w	r3, r7, #24
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fd fd31 	bl	800d466 <_ZN12SimpleStringD1Ev>
    }
}
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	4618      	mov	r0, r3
 800fa08:	3744      	adds	r7, #68	; 0x44
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd90      	pop	{r4, r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	080284b8 	.word	0x080284b8

0800fa14 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800fa14:	b590      	push	{r4, r7, lr}
 800fa16:	b093      	sub	sp, #76	; 0x4c
 800fa18:	af02      	add	r7, sp, #8
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
 800fa20:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	68b9      	ldr	r1, [r7, #8]
 800fa2a:	f7ff f801 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fa2e:	4a55      	ldr	r2, [pc, #340]	; (800fb84 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fa3a:	68f9      	ldr	r1, [r7, #12]
 800fa3c:	f107 0320 	add.w	r3, r7, #32
 800fa40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7ff f9fc 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fa48:	f107 0320 	add.w	r3, r7, #32
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f7fd f9bd 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800fa54:	f107 0320 	add.w	r3, r7, #32
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7fd fd04 	bl	800d466 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800fa5e:	f107 0318 	add.w	r3, r7, #24
 800fa62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fd ff99 	bl	800d99c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800fa6a:	f107 0310 	add.w	r3, r7, #16
 800fa6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7fd ff93 	bl	800d99c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fa7c:	68f9      	ldr	r1, [r7, #12]
 800fa7e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800fa82:	f107 0310 	add.w	r3, r7, #16
 800fa86:	f107 0218 	add.w	r2, r7, #24
 800fa8a:	f7ff f913 	bl	800ecb4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fa8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa92:	4619      	mov	r1, r3
 800fa94:	4620      	mov	r0, r4
 800fa96:	f7fd fd63 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800fa9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fd fce1 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800faa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d05c      	beq.n	800fb64 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800faaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faac:	2b00      	cmp	r3, #0
 800faae:	d059      	beq.n	800fb64 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800fab0:	2300      	movs	r3, #0
 800fab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fab4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fab8:	4413      	add	r3, r2
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fd f824 	bl	800cb0a <_ZN12SimpleString7ToLowerEc>
 800fac2:	4603      	mov	r3, r0
 800fac4:	461c      	mov	r4, r3
 800fac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faca:	4413      	add	r3, r2
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	4618      	mov	r0, r3
 800fad0:	f7fd f81b 	bl	800cb0a <_ZN12SimpleString7ToLowerEc>
 800fad4:	4603      	mov	r3, r0
 800fad6:	429c      	cmp	r4, r3
 800fad8:	bf0c      	ite	eq
 800fada:	2301      	moveq	r3, #1
 800fadc:	2300      	movne	r3, #0
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d003      	beq.n	800faec <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800fae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fae6:	3301      	adds	r3, #1
 800fae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faea:	e7e3      	b.n	800fab4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800faec:	2300      	movs	r3, #0
 800faee:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800faf0:	f107 0310 	add.w	r3, r7, #16
 800faf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fd fe19 	bl	800d72e <_ZNK12SimpleString2atEj>
 800fafc:	4603      	mov	r3, r0
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fd f803 	bl	800cb0a <_ZN12SimpleString7ToLowerEc>
 800fb04:	4603      	mov	r3, r0
 800fb06:	461c      	mov	r4, r3
 800fb08:	f107 0318 	add.w	r3, r7, #24
 800fb0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fd fe0d 	bl	800d72e <_ZNK12SimpleString2atEj>
 800fb14:	4603      	mov	r3, r0
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fc fff7 	bl	800cb0a <_ZN12SimpleString7ToLowerEc>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	429c      	cmp	r4, r3
 800fb20:	bf0c      	ite	eq
 800fb22:	2301      	moveq	r3, #1
 800fb24:	2300      	movne	r3, #0
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d003      	beq.n	800fb34 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800fb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2e:	3301      	adds	r3, #1
 800fb30:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb32:	e7dd      	b.n	800faf0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fb3a:	68f9      	ldr	r1, [r7, #12]
 800fb3c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800fb40:	f107 0210 	add.w	r2, r7, #16
 800fb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb46:	9300      	str	r3, [sp, #0]
 800fb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4a:	f7ff f8cd 	bl	800ece8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800fb4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb52:	4619      	mov	r1, r3
 800fb54:	4620      	mov	r0, r4
 800fb56:	f7fd fd03 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800fb5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fd fc81 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800fb64:	f107 0310 	add.w	r3, r7, #16
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fd fc7c 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800fb6e:	f107 0318 	add.w	r3, r7, #24
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fd fc77 	bl	800d466 <_ZN12SimpleStringD1Ev>
    }
}
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3744      	adds	r7, #68	; 0x44
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd90      	pop	{r4, r7, pc}
 800fb82:	bf00      	nop
 800fb84:	0802848c 	.word	0x0802848c

0800fb88 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800fb88:	b5b0      	push	{r4, r5, r7, lr}
 800fb8a:	b092      	sub	sp, #72	; 0x48
 800fb8c:	af02      	add	r7, sp, #8
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
 800fb94:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	68b9      	ldr	r1, [r7, #8]
 800fb9e:	f7fe ff47 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fba2:	4a40      	ldr	r2, [pc, #256]	; (800fca4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fbae:	68f9      	ldr	r1, [r7, #12]
 800fbb0:	f107 031c 	add.w	r3, r7, #28
 800fbb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7ff f942 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fbbc:	f107 031c 	add.w	r3, r7, #28
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f7fd f903 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800fbc8:	f107 031c 	add.w	r3, r7, #28
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fd fc4a 	bl	800d466 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800fbd2:	f107 0314 	add.w	r3, r7, #20
 800fbd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f7fe fa4c 	bl	800e078 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fbe6:	68fd      	ldr	r5, [r7, #12]
 800fbe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fbec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fe fa41 	bl	800e078 <_Z22StringFromBinaryOrNullPKhj>
 800fbf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fbfa:	f107 0314 	add.w	r3, r7, #20
 800fbfe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fc02:	4629      	mov	r1, r5
 800fc04:	f7ff f856 	bl	800ecb4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fc08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f7fd fca6 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800fc14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fd fc24 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800fc1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fd fc1f 	bl	800d466 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800fc28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d02f      	beq.n	800fc8e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800fc2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d02c      	beq.n	800fc8e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800fc34:	2300      	movs	r3, #0
 800fc36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fc38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc3c:	4413      	add	r3, r2
 800fc3e:	781a      	ldrb	r2, [r3, #0]
 800fc40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc44:	440b      	add	r3, r1
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d103      	bne.n	800fc54 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800fc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc4e:	3301      	adds	r3, #1
 800fc50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fc52:	e7f1      	b.n	800fc38 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fc5a:	68f9      	ldr	r1, [r7, #12]
 800fc5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc5e:	4613      	mov	r3, r2
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	4413      	add	r3, r2
 800fc64:	1c5d      	adds	r5, r3, #1
 800fc66:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800fc6a:	f107 0214 	add.w	r2, r7, #20
 800fc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc70:	9300      	str	r3, [sp, #0]
 800fc72:	462b      	mov	r3, r5
 800fc74:	f7ff f838 	bl	800ece8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800fc78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f7fd fc6e 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800fc84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fd fbec 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800fc8e:	f107 0314 	add.w	r3, r7, #20
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fd fbe7 	bl	800d466 <_ZN12SimpleStringD1Ev>
	}
}
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3740      	adds	r7, #64	; 0x40
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bdb0      	pop	{r4, r5, r7, pc}
 800fca2:	bf00      	nop
 800fca4:	08028460 	.word	0x08028460

0800fca8 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800fca8:	b5b0      	push	{r4, r5, r7, lr}
 800fcaa:	b08c      	sub	sp, #48	; 0x30
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]
 800fcb4:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800fcb6:	68f8      	ldr	r0, [r7, #12]
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	687a      	ldr	r2, [r7, #4]
 800fcbc:	68b9      	ldr	r1, [r7, #8]
 800fcbe:	f7fe feb7 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fcc2:	4a26      	ldr	r2, [pc, #152]	; (800fd5c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fcce:	68f9      	ldr	r1, [r7, #12]
 800fcd0:	f107 0310 	add.w	r3, r7, #16
 800fcd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7ff f8b2 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fcdc:	f107 0310 	add.w	r3, r7, #16
 800fce0:	4619      	mov	r1, r3
 800fce2:	4620      	mov	r0, r4
 800fce4:	f7fd f873 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800fce8:	f107 0310 	add.w	r3, r7, #16
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7fd fbba 	bl	800d466 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fcf8:	68fd      	ldr	r5, [r7, #12]
 800fcfa:	f107 0020 	add.w	r0, r7, #32
 800fcfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd04:	f7fe fa24 	bl	800e150 <_Z20StringFromMaskedBitsmmj>
 800fd08:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800fd0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd12:	f7fe fa1d 	bl	800e150 <_Z20StringFromMaskedBitsmmj>
 800fd16:	f107 0018 	add.w	r0, r7, #24
 800fd1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd1e:	f107 0220 	add.w	r2, r7, #32
 800fd22:	4629      	mov	r1, r5
 800fd24:	f7fe ffc6 	bl	800ecb4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fd28:	f107 0318 	add.w	r3, r7, #24
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	4620      	mov	r0, r4
 800fd30:	f7fd fc16 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800fd34:	f107 0318 	add.w	r3, r7, #24
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fd fb94 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800fd3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fd fb8f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 800fd48:	f107 0320 	add.w	r3, r7, #32
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7fd fb8a 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	4618      	mov	r0, r3
 800fd56:	3730      	adds	r7, #48	; 0x30
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bdb0      	pop	{r4, r5, r7, pc}
 800fd5c:	08028434 	.word	0x08028434

0800fd60 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800fd60:	b590      	push	{r4, r7, lr}
 800fd62:	b089      	sub	sp, #36	; 0x24
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	60b9      	str	r1, [r7, #8]
 800fd6a:	607a      	str	r2, [r7, #4]
 800fd6c:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800fd6e:	68f8      	ldr	r0, [r7, #12]
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	68b9      	ldr	r1, [r7, #8]
 800fd76:	f7fe fe5b 	bl	800ea30 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fd7a:	4a1a      	ldr	r2, [pc, #104]	; (800fde4 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fd86:	68f9      	ldr	r1, [r7, #12]
 800fd88:	f107 0310 	add.w	r3, r7, #16
 800fd8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7ff f856 	bl	800ee40 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fd94:	f107 0310 	add.w	r3, r7, #16
 800fd98:	4619      	mov	r1, r3
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f7fd f817 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 800fda0:	f107 0310 	add.w	r3, r7, #16
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7fd fb5e 	bl	800d466 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fdb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdb2:	f7fd fb2b 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	f107 0318 	add.w	r3, r7, #24
 800fdbc:	490a      	ldr	r1, [pc, #40]	; (800fde8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fe f858 	bl	800de74 <_Z16StringFromFormatPKcz>
 800fdc4:	f107 0318 	add.w	r3, r7, #24
 800fdc8:	4619      	mov	r1, r3
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f7fd fbc8 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 800fdd0:	f107 0318 	add.w	r3, r7, #24
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7fd fb46 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	4618      	mov	r0, r3
 800fdde:	3724      	adds	r7, #36	; 0x24
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd90      	pop	{r4, r7, pc}
 800fde4:	08028408 	.word	0x08028408
 800fde8:	08024834 	.word	0x08024834

0800fdec <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	4a05      	ldr	r2, [pc, #20]	; (800fe0c <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	601a      	str	r2, [r3, #0]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7fe fe99 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4618      	mov	r0, r3
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	08028408 	.word	0x08028408

0800fe10 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7ff ffe7 	bl	800fdec <_ZN25FeatureUnsupportedFailureD1Ev>
 800fe1e:	2134      	movs	r1, #52	; 0x34
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f7fa fbb9 	bl	800a598 <_ZdlPvj>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	4a05      	ldr	r2, [pc, #20]	; (800fe50 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	601a      	str	r2, [r3, #0]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7fe fe77 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3708      	adds	r7, #8
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	08028434 	.word	0x08028434

0800fe54 <_ZN16BitsEqualFailureD0Ev>:
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7ff ffe7 	bl	800fe30 <_ZN16BitsEqualFailureD1Ev>
 800fe62:	2134      	movs	r1, #52	; 0x34
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7fa fb97 	bl	800a598 <_ZdlPvj>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	4a05      	ldr	r2, [pc, #20]	; (800fe94 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	601a      	str	r2, [r3, #0]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fe fe55 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3708      	adds	r7, #8
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	08028460 	.word	0x08028460

0800fe98 <_ZN18BinaryEqualFailureD0Ev>:
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f7ff ffe7 	bl	800fe74 <_ZN18BinaryEqualFailureD1Ev>
 800fea6:	2134      	movs	r1, #52	; 0x34
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7fa fb75 	bl	800a598 <_ZdlPvj>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4618      	mov	r0, r3
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	4a05      	ldr	r2, [pc, #20]	; (800fed8 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	601a      	str	r2, [r3, #0]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4618      	mov	r0, r3
 800feca:	f7fe fe33 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4618      	mov	r0, r3
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	0802848c 	.word	0x0802848c

0800fedc <_ZN24StringEqualNoCaseFailureD0Ev>:
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f7ff ffe7 	bl	800feb8 <_ZN24StringEqualNoCaseFailureD1Ev>
 800feea:	2134      	movs	r1, #52	; 0x34
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f7fa fb53 	bl	800a598 <_ZdlPvj>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4618      	mov	r0, r3
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	4a05      	ldr	r2, [pc, #20]	; (800ff1c <_ZN18StringEqualFailureD1Ev+0x20>)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	601a      	str	r2, [r3, #0]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7fe fe11 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	4618      	mov	r0, r3
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	080284b8 	.word	0x080284b8

0800ff20 <_ZN18StringEqualFailureD0Ev>:
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b082      	sub	sp, #8
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f7ff ffe7 	bl	800fefc <_ZN18StringEqualFailureD1Ev>
 800ff2e:	2134      	movs	r1, #52	; 0x34
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7fa fb31 	bl	800a598 <_ZdlPvj>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	4a05      	ldr	r2, [pc, #20]	; (800ff60 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	601a      	str	r2, [r3, #0]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7fe fdef 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	080284e4 	.word	0x080284e4

0800ff64 <_ZN23SignedBytesEqualFailureD0Ev>:
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f7ff ffe7 	bl	800ff40 <_ZN23SignedBytesEqualFailureD1Ev>
 800ff72:	2134      	movs	r1, #52	; 0x34
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f7fa fb0f 	bl	800a598 <_ZdlPvj>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3708      	adds	r7, #8
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	4a05      	ldr	r2, [pc, #20]	; (800ffa4 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	601a      	str	r2, [r3, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7fe fdcd 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3708      	adds	r7, #8
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	08028510 	.word	0x08028510

0800ffa8 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f7ff ffe7 	bl	800ff84 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800ffb6:	2134      	movs	r1, #52	; 0x34
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7fa faed 	bl	800a598 <_ZdlPvj>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	4a05      	ldr	r2, [pc, #20]	; (800ffe8 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	601a      	str	r2, [r3, #0]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7fe fdab 	bl	800eb34 <_ZN11TestFailureD1Ev>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	0802853c 	.word	0x0802853c

0800ffec <_ZN17LongsEqualFailureD0Ev>:
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f7ff ffe7 	bl	800ffc8 <_ZN17LongsEqualFailureD1Ev>
 800fffa:	2134      	movs	r1, #52	; 0x34
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f7fa facb 	bl	800a598 <_ZdlPvj>
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	4618      	mov	r0, r3
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	4a05      	ldr	r2, [pc, #20]	; (801002c <_ZN12CheckFailureD1Ev+0x20>)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	601a      	str	r2, [r3, #0]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	4618      	mov	r0, r3
 801001e:	f7fe fd89 	bl	800eb34 <_ZN11TestFailureD1Ev>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4618      	mov	r0, r3
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}
 801002c:	08028568 	.word	0x08028568

08010030 <_ZN12CheckFailureD0Ev>:
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f7ff ffe7 	bl	801000c <_ZN12CheckFailureD1Ev>
 801003e:	2134      	movs	r1, #52	; 0x34
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7fa faa9 	bl	800a598 <_ZdlPvj>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	4a05      	ldr	r2, [pc, #20]	; (8010070 <_ZN15ContainsFailureD1Ev+0x20>)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	601a      	str	r2, [r3, #0]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4618      	mov	r0, r3
 8010062:	f7fe fd67 	bl	800eb34 <_ZN11TestFailureD1Ev>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4618      	mov	r0, r3
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	08028594 	.word	0x08028594

08010074 <_ZN15ContainsFailureD0Ev>:
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7ff ffe7 	bl	8010050 <_ZN15ContainsFailureD1Ev>
 8010082:	2134      	movs	r1, #52	; 0x34
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7fa fa87 	bl	800a598 <_ZdlPvj>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4618      	mov	r0, r3
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	4a05      	ldr	r2, [pc, #20]	; (80100b4 <_ZN17ComparisonFailureD1Ev+0x20>)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	601a      	str	r2, [r3, #0]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fe fd45 	bl	800eb34 <_ZN11TestFailureD1Ev>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4618      	mov	r0, r3
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	080285c0 	.word	0x080285c0

080100b8 <_ZN17ComparisonFailureD0Ev>:
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7ff ffe7 	bl	8010094 <_ZN17ComparisonFailureD1Ev>
 80100c6:	2134      	movs	r1, #52	; 0x34
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f7fa fa65 	bl	800a598 <_ZdlPvj>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4618      	mov	r0, r3
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	4a05      	ldr	r2, [pc, #20]	; (80100f8 <_ZN17CheckEqualFailureD1Ev+0x20>)
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	601a      	str	r2, [r3, #0]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7fe fd23 	bl	800eb34 <_ZN11TestFailureD1Ev>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4618      	mov	r0, r3
 80100f2:	3708      	adds	r7, #8
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	080285ec 	.word	0x080285ec

080100fc <_ZN17CheckEqualFailureD0Ev>:
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f7ff ffe7 	bl	80100d8 <_ZN17CheckEqualFailureD1Ev>
 801010a:	2134      	movs	r1, #52	; 0x34
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f7fa fa43 	bl	800a598 <_ZdlPvj>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	4618      	mov	r0, r3
 8010116:	3708      	adds	r7, #8
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	4a05      	ldr	r2, [pc, #20]	; (801013c <_ZN19DoublesEqualFailureD1Ev+0x20>)
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	601a      	str	r2, [r3, #0]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	4618      	mov	r0, r3
 801012e:	f7fe fd01 	bl	800eb34 <_ZN11TestFailureD1Ev>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4618      	mov	r0, r3
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	08028618 	.word	0x08028618

08010140 <_ZN19DoublesEqualFailureD0Ev>:
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f7ff ffe7 	bl	801011c <_ZN19DoublesEqualFailureD1Ev>
 801014e:	2134      	movs	r1, #52	; 0x34
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7fa fa21 	bl	800a598 <_ZdlPvj>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4618      	mov	r0, r3
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	4a05      	ldr	r2, [pc, #20]	; (8010180 <_ZN13EqualsFailureD1Ev+0x20>)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	601a      	str	r2, [r3, #0]
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4618      	mov	r0, r3
 8010172:	f7fe fcdf 	bl	800eb34 <_ZN11TestFailureD1Ev>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	4618      	mov	r0, r3
 801017a:	3708      	adds	r7, #8
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	08028644 	.word	0x08028644

08010184 <_ZN13EqualsFailureD0Ev>:
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f7ff ffe7 	bl	8010160 <_ZN13EqualsFailureD1Ev>
 8010192:	2134      	movs	r1, #52	; 0x34
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f7fa f9ff 	bl	800a598 <_ZdlPvj>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4618      	mov	r0, r3
 801019e:	3708      	adds	r7, #8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 80101a4:	b5b0      	push	{r4, r5, r7, lr}
 80101a6:	b086      	sub	sp, #24
 80101a8:	af02      	add	r7, sp, #8
 80101aa:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 80101ac:	4b0d      	ldr	r3, [pc, #52]	; (80101e4 <_ZL13checkedMallocj+0x40>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	4798      	blx	r3
 80101b4:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d10e      	bne.n	80101da <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 80101bc:	f004 f97e 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80101c0:	4604      	mov	r4, r0
 80101c2:	6823      	ldr	r3, [r4, #0]
 80101c4:	3368      	adds	r3, #104	; 0x68
 80101c6:	681d      	ldr	r5, [r3, #0]
 80101c8:	f004 f988 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80101cc:	4603      	mov	r3, r0
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	2325      	movs	r3, #37	; 0x25
 80101d2:	4a05      	ldr	r2, [pc, #20]	; (80101e8 <_ZL13checkedMallocj+0x44>)
 80101d4:	4905      	ldr	r1, [pc, #20]	; (80101ec <_ZL13checkedMallocj+0x48>)
 80101d6:	4620      	mov	r0, r4
 80101d8:	47a8      	blx	r5
    return mem;
 80101da:	68fb      	ldr	r3, [r7, #12]
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3710      	adds	r7, #16
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bdb0      	pop	{r4, r5, r7, pc}
 80101e4:	200000c8 	.word	0x200000c8
 80101e8:	080248a8 	.word	0x080248a8
 80101ec:	080248c8 	.word	0x080248c8

080101f0 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 80101f4:	4b04      	ldr	r3, [pc, #16]	; (8010208 <_Z22getCurrentNewAllocatorv+0x18>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d101      	bne.n	8010200 <_Z22getCurrentNewAllocatorv+0x10>
 80101fc:	f000 f806 	bl	801020c <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 8010200:	4b01      	ldr	r3, [pc, #4]	; (8010208 <_Z22getCurrentNewAllocatorv+0x18>)
 8010202:	681b      	ldr	r3, [r3, #0]
}
 8010204:	4618      	mov	r0, r3
 8010206:	bd80      	pop	{r7, pc}
 8010208:	200008a4 	.word	0x200008a4

0801020c <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 801020c:	b580      	push	{r7, lr}
 801020e:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 8010210:	f000 f810 	bl	8010234 <_Z19defaultNewAllocatorv>
 8010214:	4603      	mov	r3, r0
 8010216:	4a02      	ldr	r2, [pc, #8]	; (8010220 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 8010218:	6013      	str	r3, [r2, #0]
}
 801021a:	bf00      	nop
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	200008a4 	.word	0x200008a4

08010224 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8010224:	b580      	push	{r7, lr}
 8010226:	af00      	add	r7, sp, #0
 8010228:	4801      	ldr	r0, [pc, #4]	; (8010230 <__tcf_0+0xc>)
 801022a:	f000 f909 	bl	8010440 <_ZN19TestMemoryAllocatorD1Ev>
 801022e:	bd80      	pop	{r7, pc}
 8010230:	200008b0 	.word	0x200008b0

08010234 <_Z19defaultNewAllocatorv>:
{
 8010234:	b580      	push	{r7, lr}
 8010236:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8010238:	4b13      	ldr	r3, [pc, #76]	; (8010288 <_Z19defaultNewAllocatorv+0x54>)
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	f3bf 8f5b 	dmb	ish
 8010240:	b2db      	uxtb	r3, r3
 8010242:	f003 0301 	and.w	r3, r3, #1
 8010246:	2b00      	cmp	r3, #0
 8010248:	bf0c      	ite	eq
 801024a:	2301      	moveq	r3, #1
 801024c:	2300      	movne	r3, #0
 801024e:	b2db      	uxtb	r3, r3
 8010250:	2b00      	cmp	r3, #0
 8010252:	d016      	beq.n	8010282 <_Z19defaultNewAllocatorv+0x4e>
 8010254:	480c      	ldr	r0, [pc, #48]	; (8010288 <_Z19defaultNewAllocatorv+0x54>)
 8010256:	f00f fc0f 	bl	801fa78 <__cxa_guard_acquire>
 801025a:	4603      	mov	r3, r0
 801025c:	2b00      	cmp	r3, #0
 801025e:	bf14      	ite	ne
 8010260:	2301      	movne	r3, #1
 8010262:	2300      	moveq	r3, #0
 8010264:	b2db      	uxtb	r3, r3
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00b      	beq.n	8010282 <_Z19defaultNewAllocatorv+0x4e>
 801026a:	4b08      	ldr	r3, [pc, #32]	; (801028c <_Z19defaultNewAllocatorv+0x58>)
 801026c:	4a08      	ldr	r2, [pc, #32]	; (8010290 <_Z19defaultNewAllocatorv+0x5c>)
 801026e:	4909      	ldr	r1, [pc, #36]	; (8010294 <_Z19defaultNewAllocatorv+0x60>)
 8010270:	4809      	ldr	r0, [pc, #36]	; (8010298 <_Z19defaultNewAllocatorv+0x64>)
 8010272:	f000 f8c5 	bl	8010400 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8010276:	4804      	ldr	r0, [pc, #16]	; (8010288 <_Z19defaultNewAllocatorv+0x54>)
 8010278:	f00f fc0a 	bl	801fa90 <__cxa_guard_release>
 801027c:	4807      	ldr	r0, [pc, #28]	; (801029c <_Z19defaultNewAllocatorv+0x68>)
 801027e:	f00f fc2e 	bl	801fade <atexit>
    return &allocator;
 8010282:	4b05      	ldr	r3, [pc, #20]	; (8010298 <_Z19defaultNewAllocatorv+0x64>)
}
 8010284:	4618      	mov	r0, r3
 8010286:	bd80      	pop	{r7, pc}
 8010288:	200008c4 	.word	0x200008c4
 801028c:	080248e8 	.word	0x080248e8
 8010290:	080248f0 	.word	0x080248f0
 8010294:	080248f4 	.word	0x080248f4
 8010298:	200008b0 	.word	0x200008b0
 801029c:	08010225 	.word	0x08010225

080102a0 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 80102a4:	4b04      	ldr	r3, [pc, #16]	; (80102b8 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d101      	bne.n	80102b0 <_Z27getCurrentNewArrayAllocatorv+0x10>
 80102ac:	f000 f806 	bl	80102bc <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 80102b0:	4b01      	ldr	r3, [pc, #4]	; (80102b8 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 80102b2:	681b      	ldr	r3, [r3, #0]
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	200008a8 	.word	0x200008a8

080102bc <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 80102c0:	f000 f810 	bl	80102e4 <_Z24defaultNewArrayAllocatorv>
 80102c4:	4603      	mov	r3, r0
 80102c6:	4a02      	ldr	r2, [pc, #8]	; (80102d0 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 80102c8:	6013      	str	r3, [r2, #0]
}
 80102ca:	bf00      	nop
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	200008a8 	.word	0x200008a8

080102d4 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 80102d4:	b580      	push	{r7, lr}
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	4801      	ldr	r0, [pc, #4]	; (80102e0 <__tcf_1+0xc>)
 80102da:	f000 f8b1 	bl	8010440 <_ZN19TestMemoryAllocatorD1Ev>
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	200008c8 	.word	0x200008c8

080102e4 <_Z24defaultNewArrayAllocatorv>:
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 80102e8:	4b13      	ldr	r3, [pc, #76]	; (8010338 <_Z24defaultNewArrayAllocatorv+0x54>)
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	f3bf 8f5b 	dmb	ish
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	bf0c      	ite	eq
 80102fa:	2301      	moveq	r3, #1
 80102fc:	2300      	movne	r3, #0
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	2b00      	cmp	r3, #0
 8010302:	d016      	beq.n	8010332 <_Z24defaultNewArrayAllocatorv+0x4e>
 8010304:	480c      	ldr	r0, [pc, #48]	; (8010338 <_Z24defaultNewArrayAllocatorv+0x54>)
 8010306:	f00f fbb7 	bl	801fa78 <__cxa_guard_acquire>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	bf14      	ite	ne
 8010310:	2301      	movne	r3, #1
 8010312:	2300      	moveq	r3, #0
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2b00      	cmp	r3, #0
 8010318:	d00b      	beq.n	8010332 <_Z24defaultNewArrayAllocatorv+0x4e>
 801031a:	4b08      	ldr	r3, [pc, #32]	; (801033c <_Z24defaultNewArrayAllocatorv+0x58>)
 801031c:	4a08      	ldr	r2, [pc, #32]	; (8010340 <_Z24defaultNewArrayAllocatorv+0x5c>)
 801031e:	4909      	ldr	r1, [pc, #36]	; (8010344 <_Z24defaultNewArrayAllocatorv+0x60>)
 8010320:	4809      	ldr	r0, [pc, #36]	; (8010348 <_Z24defaultNewArrayAllocatorv+0x64>)
 8010322:	f000 f86d 	bl	8010400 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8010326:	4804      	ldr	r0, [pc, #16]	; (8010338 <_Z24defaultNewArrayAllocatorv+0x54>)
 8010328:	f00f fbb2 	bl	801fa90 <__cxa_guard_release>
 801032c:	4807      	ldr	r0, [pc, #28]	; (801034c <_Z24defaultNewArrayAllocatorv+0x68>)
 801032e:	f00f fbd6 	bl	801fade <atexit>
    return &allocator;
 8010332:	4b05      	ldr	r3, [pc, #20]	; (8010348 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 8010334:	4618      	mov	r0, r3
 8010336:	bd80      	pop	{r7, pc}
 8010338:	200008dc 	.word	0x200008dc
 801033c:	0802490c 	.word	0x0802490c
 8010340:	08024918 	.word	0x08024918
 8010344:	08024920 	.word	0x08024920
 8010348:	200008c8 	.word	0x200008c8
 801034c:	080102d5 	.word	0x080102d5

08010350 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 8010350:	b580      	push	{r7, lr}
 8010352:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 8010354:	4b04      	ldr	r3, [pc, #16]	; (8010368 <_Z25getCurrentMallocAllocatorv+0x18>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d101      	bne.n	8010360 <_Z25getCurrentMallocAllocatorv+0x10>
 801035c:	f000 f806 	bl	801036c <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 8010360:	4b01      	ldr	r3, [pc, #4]	; (8010368 <_Z25getCurrentMallocAllocatorv+0x18>)
 8010362:	681b      	ldr	r3, [r3, #0]
}
 8010364:	4618      	mov	r0, r3
 8010366:	bd80      	pop	{r7, pc}
 8010368:	200008ac 	.word	0x200008ac

0801036c <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 801036c:	b580      	push	{r7, lr}
 801036e:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 8010370:	f000 f810 	bl	8010394 <_Z22defaultMallocAllocatorv>
 8010374:	4603      	mov	r3, r0
 8010376:	4a02      	ldr	r2, [pc, #8]	; (8010380 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 8010378:	6013      	str	r3, [r2, #0]
}
 801037a:	bf00      	nop
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	200008ac 	.word	0x200008ac

08010384 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8010384:	b580      	push	{r7, lr}
 8010386:	af00      	add	r7, sp, #0
 8010388:	4801      	ldr	r0, [pc, #4]	; (8010390 <__tcf_2+0xc>)
 801038a:	f000 f859 	bl	8010440 <_ZN19TestMemoryAllocatorD1Ev>
 801038e:	bd80      	pop	{r7, pc}
 8010390:	200008e0 	.word	0x200008e0

08010394 <_Z22defaultMallocAllocatorv>:
{
 8010394:	b580      	push	{r7, lr}
 8010396:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8010398:	4b13      	ldr	r3, [pc, #76]	; (80103e8 <_Z22defaultMallocAllocatorv+0x54>)
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	f3bf 8f5b 	dmb	ish
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	f003 0301 	and.w	r3, r3, #1
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	bf0c      	ite	eq
 80103aa:	2301      	moveq	r3, #1
 80103ac:	2300      	movne	r3, #0
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d016      	beq.n	80103e2 <_Z22defaultMallocAllocatorv+0x4e>
 80103b4:	480c      	ldr	r0, [pc, #48]	; (80103e8 <_Z22defaultMallocAllocatorv+0x54>)
 80103b6:	f00f fb5f 	bl	801fa78 <__cxa_guard_acquire>
 80103ba:	4603      	mov	r3, r0
 80103bc:	2b00      	cmp	r3, #0
 80103be:	bf14      	ite	ne
 80103c0:	2301      	movne	r3, #1
 80103c2:	2300      	moveq	r3, #0
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d00b      	beq.n	80103e2 <_Z22defaultMallocAllocatorv+0x4e>
 80103ca:	4b08      	ldr	r3, [pc, #32]	; (80103ec <_Z22defaultMallocAllocatorv+0x58>)
 80103cc:	4a08      	ldr	r2, [pc, #32]	; (80103f0 <_Z22defaultMallocAllocatorv+0x5c>)
 80103ce:	4909      	ldr	r1, [pc, #36]	; (80103f4 <_Z22defaultMallocAllocatorv+0x60>)
 80103d0:	4809      	ldr	r0, [pc, #36]	; (80103f8 <_Z22defaultMallocAllocatorv+0x64>)
 80103d2:	f000 f815 	bl	8010400 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80103d6:	4804      	ldr	r0, [pc, #16]	; (80103e8 <_Z22defaultMallocAllocatorv+0x54>)
 80103d8:	f00f fb5a 	bl	801fa90 <__cxa_guard_release>
 80103dc:	4807      	ldr	r0, [pc, #28]	; (80103fc <_Z22defaultMallocAllocatorv+0x68>)
 80103de:	f00f fb7e 	bl	801fade <atexit>
    return &allocator;
 80103e2:	4b05      	ldr	r3, [pc, #20]	; (80103f8 <_Z22defaultMallocAllocatorv+0x64>)
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	200008f4 	.word	0x200008f4
 80103ec:	0802493c 	.word	0x0802493c
 80103f0:	08024944 	.word	0x08024944
 80103f4:	0802494c 	.word	0x0802494c
 80103f8:	200008e0 	.word	0x200008e0
 80103fc:	08010385 	.word	0x08010385

08010400 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 8010400:	b480      	push	{r7}
 8010402:	b085      	sub	sp, #20
 8010404:	af00      	add	r7, sp, #0
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	60b9      	str	r1, [r7, #8]
 801040a:	607a      	str	r2, [r7, #4]
 801040c:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 801040e:	4a0b      	ldr	r2, [pc, #44]	; (801043c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	601a      	str	r2, [r3, #0]
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	68ba      	ldr	r2, [r7, #8]
 8010418:	605a      	str	r2, [r3, #4]
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	687a      	ldr	r2, [r7, #4]
 801041e:	609a      	str	r2, [r3, #8]
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	683a      	ldr	r2, [r7, #0]
 8010424:	60da      	str	r2, [r3, #12]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2200      	movs	r2, #0
 801042a:	741a      	strb	r2, [r3, #16]
{
}
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	4618      	mov	r0, r3
 8010430:	3714      	adds	r7, #20
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop
 801043c:	080286d0 	.word	0x080286d0

08010440 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 8010440:	b480      	push	{r7}
 8010442:	b083      	sub	sp, #12
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	4a06      	ldr	r2, [pc, #24]	; (8010464 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2201      	movs	r2, #1
 8010452:	741a      	strb	r2, [r3, #16]
}
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	4618      	mov	r0, r3
 8010458:	370c      	adds	r7, #12
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr
 8010462:	bf00      	nop
 8010464:	080286d0 	.word	0x080286d0

08010468 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
}
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7ff ffe5 	bl	8010440 <_ZN19TestMemoryAllocatorD1Ev>
 8010476:	2114      	movs	r1, #20
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7fa f88d 	bl	800a598 <_ZdlPvj>
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	4618      	mov	r0, r3
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	7c1b      	ldrb	r3, [r3, #16]
}
 8010494:	4618      	mov	r0, r3
 8010496:	370c      	adds	r7, #12
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 80104a0:	b590      	push	{r4, r7, lr}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	3310      	adds	r3, #16
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	4798      	blx	r3
 80104b6:	4604      	mov	r4, r0
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	3310      	adds	r3, #16
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	6838      	ldr	r0, [r7, #0]
 80104c2:	4798      	blx	r3
 80104c4:	4603      	mov	r3, r0
 80104c6:	4619      	mov	r1, r3
 80104c8:	4620      	mov	r0, r4
 80104ca:	f7fc fa51 	bl	800c970 <_ZN12SimpleString6StrCmpEPKcS1_>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	bf0c      	ite	eq
 80104d4:	2301      	moveq	r3, #1
 80104d6:	2300      	movne	r3, #0
 80104d8:	b2db      	uxtb	r3, r3
}
 80104da:	4618      	mov	r0, r3
 80104dc:	370c      	adds	r7, #12
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd90      	pop	{r4, r7, pc}
	...

080104e4 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 80104e4:	b590      	push	{r4, r7, lr}
 80104e6:	b083      	sub	sp, #12
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	3308      	adds	r3, #8
 80104f4:	681c      	ldr	r4, [r3, #0]
 80104f6:	2301      	movs	r3, #1
 80104f8:	4a04      	ldr	r2, [pc, #16]	; (801050c <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 80104fa:	6839      	ldr	r1, [r7, #0]
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	47a0      	blx	r4
 8010500:	4603      	mov	r3, r0
}
 8010502:	4618      	mov	r0, r3
 8010504:	370c      	adds	r7, #12
 8010506:	46bd      	mov	sp, r7
 8010508:	bd90      	pop	{r4, r7, pc}
 801050a:	bf00      	nop
 801050c:	08024968 	.word	0x08024968

08010510 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 8010510:	b590      	push	{r4, r7, lr}
 8010512:	b085      	sub	sp, #20
 8010514:	af02      	add	r7, sp, #8
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	330c      	adds	r3, #12
 8010520:	681c      	ldr	r4, [r3, #0]
 8010522:	2301      	movs	r3, #1
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	4b04      	ldr	r3, [pc, #16]	; (8010538 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 8010528:	2200      	movs	r2, #0
 801052a:	6839      	ldr	r1, [r7, #0]
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	47a0      	blx	r4
}
 8010530:	bf00      	nop
 8010532:	370c      	adds	r7, #12
 8010534:	46bd      	mov	sp, r7
 8010536:	bd90      	pop	{r4, r7, pc}
 8010538:	08024968 	.word	0x08024968

0801053c <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	607a      	str	r2, [r7, #4]
 8010548:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 801054a:	68b8      	ldr	r0, [r7, #8]
 801054c:	f7ff fe2a 	bl	80101a4 <_ZL13checkedMallocj>
 8010550:	4603      	mov	r3, r0
}
 8010552:	4618      	mov	r0, r3
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
	...

0801055c <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
 8010568:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 801056a:	4b04      	ldr	r3, [pc, #16]	; (801057c <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	68b8      	ldr	r0, [r7, #8]
 8010570:	4798      	blx	r3
}
 8010572:	bf00      	nop
 8010574:	3710      	adds	r7, #16
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	200000d0 	.word	0x200000d0

08010580 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
    return name_;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	685b      	ldr	r3, [r3, #4]
}
 801058c:	4618      	mov	r0, r3
 801058e:	370c      	adds	r7, #12
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr

08010598 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 8010598:	b480      	push	{r7}
 801059a:	b083      	sub	sp, #12
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	689b      	ldr	r3, [r3, #8]
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	370c      	adds	r7, #12
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
    return free_name_;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	68db      	ldr	r3, [r3, #12]
}
 80105bc:	4618      	mov	r0, r3
 80105be:	370c      	adds	r7, #12
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
    return this;
 80105d0:	687b      	ldr	r3, [r7, #4]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	370c      	adds	r7, #12
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr
	...

080105e0 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	4a05      	ldr	r2, [pc, #20]	; (8010600 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	601a      	str	r2, [r3, #0]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	4618      	mov	r0, r3
 80105f2:	f7ff ff25 	bl	8010440 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	4618      	mov	r0, r3
 80105fa:	3708      	adds	r7, #8
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	0802869c 	.word	0x0802869c

08010604 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
}
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7ff ffe7 	bl	80105e0 <_ZN20NullUnknownAllocatorD1Ev>
 8010612:	2114      	movs	r1, #20
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f7f9 ffbf 	bl	800a598 <_ZdlPvj>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	4618      	mov	r0, r3
 801061e:	3708      	adds	r7, #8
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 8010624:	b480      	push	{r7}
 8010626:	b085      	sub	sp, #20
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
 8010630:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 8010632:	2300      	movs	r3, #0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3714      	adds	r7, #20
 8010638:	46bd      	mov	sp, r7
 801063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063e:	4770      	bx	lr

08010640 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 8010640:	b480      	push	{r7}
 8010642:	b085      	sub	sp, #20
 8010644:	af00      	add	r7, sp, #0
 8010646:	60f8      	str	r0, [r7, #12]
 8010648:	60b9      	str	r1, [r7, #8]
 801064a:	607a      	str	r2, [r7, #4]
 801064c:	603b      	str	r3, [r7, #0]
}
 801064e:	bf00      	nop
 8010650:	3714      	adds	r7, #20
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
	...

0801065c <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	4b06      	ldr	r3, [pc, #24]	; (8010680 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8010668:	4a05      	ldr	r2, [pc, #20]	; (8010680 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 801066a:	4906      	ldr	r1, [pc, #24]	; (8010684 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 801066c:	f7ff fec8 	bl	8010400 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8010670:	4a05      	ldr	r2, [pc, #20]	; (8010688 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	601a      	str	r2, [r3, #0]
{
}
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4618      	mov	r0, r3
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	0802499c 	.word	0x0802499c
 8010684:	080249a4 	.word	0x080249a4
 8010688:	0802869c 	.word	0x0802869c

0801068c <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 801068c:	b580      	push	{r7, lr}
 801068e:	af00      	add	r7, sp, #0
 8010690:	4801      	ldr	r0, [pc, #4]	; (8010698 <__tcf_3+0xc>)
 8010692:	f7ff ffa5 	bl	80105e0 <_ZN20NullUnknownAllocatorD1Ev>
 8010696:	bd80      	pop	{r7, pc}
 8010698:	200008f8 	.word	0x200008f8

0801069c <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 801069c:	b580      	push	{r7, lr}
 801069e:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 80106a0:	4b12      	ldr	r3, [pc, #72]	; (80106ec <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	f3bf 8f5b 	dmb	ish
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	f003 0301 	and.w	r3, r3, #1
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	bf0c      	ite	eq
 80106b2:	2301      	moveq	r3, #1
 80106b4:	2300      	movne	r3, #0
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d013      	beq.n	80106e4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 80106bc:	480b      	ldr	r0, [pc, #44]	; (80106ec <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 80106be:	f00f f9db 	bl	801fa78 <__cxa_guard_acquire>
 80106c2:	4603      	mov	r3, r0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	bf14      	ite	ne
 80106c8:	2301      	movne	r3, #1
 80106ca:	2300      	moveq	r3, #0
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d008      	beq.n	80106e4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 80106d2:	4807      	ldr	r0, [pc, #28]	; (80106f0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 80106d4:	f7ff ffc2 	bl	801065c <_ZN20NullUnknownAllocatorC1Ev>
 80106d8:	4804      	ldr	r0, [pc, #16]	; (80106ec <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 80106da:	f00f f9d9 	bl	801fa90 <__cxa_guard_release>
 80106de:	4805      	ldr	r0, [pc, #20]	; (80106f4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 80106e0:	f00f f9fd 	bl	801fade <atexit>
    return &allocator;
 80106e4:	4b02      	ldr	r3, [pc, #8]	; (80106f0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	2000090c 	.word	0x2000090c
 80106f0:	200008f8 	.word	0x200008f8
 80106f4:	0801068d 	.word	0x0801068d

080106f8 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
        return testCount_;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	689b      	ldr	r3, [r3, #8]
    }
 8010704:	4618      	mov	r0, r3
 8010706:	370c      	adds	r7, #12
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	699b      	ldr	r3, [r3, #24]
    }
 801071c:	4618      	mov	r0, r3
 801071e:	370c      	adds	r7, #12
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 8010728:	b580      	push	{r7, lr}
 801072a:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 801072c:	4b05      	ldr	r3, [pc, #20]	; (8010744 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	2b02      	cmp	r3, #2
 8010732:	d103      	bne.n	801073c <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 8010734:	f004 fa4a 	bl	8014bcc <_Z37PlatformSpecificGetWorkingEnvironmentv>
 8010738:	4603      	mov	r3, r0
 801073a:	e001      	b.n	8010740 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 801073c:	4b01      	ldr	r3, [pc, #4]	; (8010744 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 801073e:	781b      	ldrb	r3, [r3, #0]
}
 8010740:	4618      	mov	r0, r3
 8010742:	bd80      	pop	{r7, pc}
 8010744:	20000088 	.word	0x20000088

08010748 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 8010748:	b480      	push	{r7}
 801074a:	b083      	sub	sp, #12
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 8010750:	4a0a      	ldr	r2, [pc, #40]	; (801077c <_ZN10TestOutputC1Ev+0x34>)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	601a      	str	r2, [r3, #0]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2200      	movs	r2, #0
 801075a:	605a      	str	r2, [r3, #4]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	721a      	strb	r2, [r3, #8]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	725a      	strb	r2, [r3, #9]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4a05      	ldr	r2, [pc, #20]	; (8010780 <_ZN10TestOutputC1Ev+0x38>)
 801076c:	60da      	str	r2, [r3, #12]
{
}
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4618      	mov	r0, r3
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	080287d4 	.word	0x080287d4
 8010780:	08024da4 	.word	0x08024da4

08010784 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 8010784:	b480      	push	{r7}
 8010786:	b083      	sub	sp, #12
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	4a04      	ldr	r2, [pc, #16]	; (80107a0 <_ZN10TestOutputD1Ev+0x1c>)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	601a      	str	r2, [r3, #0]
{
}
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	4618      	mov	r0, r3
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr
 80107a0:	080287d4 	.word	0x080287d4

080107a4 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	460b      	mov	r3, r1
 80107ae:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	78fa      	ldrb	r2, [r7, #3]
 80107b4:	721a      	strb	r2, [r3, #8]
}
 80107b6:	bf00      	nop
 80107b8:	370c      	adds	r7, #12
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr

080107c2 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 80107c2:	b480      	push	{r7}
 80107c4:	b083      	sub	sp, #12
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
    color_ = true;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2201      	movs	r2, #1
 80107ce:	725a      	strb	r2, [r3, #9]
}
 80107d0:	bf00      	nop
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	3328      	adds	r3, #40	; 0x28
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	6839      	ldr	r1, [r7, #0]
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	4798      	blx	r3
}
 80107f4:	bf00      	nop
 80107f6:	3708      	adds	r7, #8
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 80107fc:	b590      	push	{r4, r7, lr}
 80107fe:	b085      	sub	sp, #20
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	332c      	adds	r3, #44	; 0x2c
 801080c:	681c      	ldr	r4, [r3, #0]
 801080e:	f107 0308 	add.w	r3, r7, #8
 8010812:	6839      	ldr	r1, [r7, #0]
 8010814:	4618      	mov	r0, r3
 8010816:	f7fd f8ff 	bl	800da18 <_Z10StringFroml>
 801081a:	f107 0308 	add.w	r3, r7, #8
 801081e:	4618      	mov	r0, r3
 8010820:	f7fc fdf4 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8010824:	4603      	mov	r3, r0
 8010826:	4619      	mov	r1, r3
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	47a0      	blx	r4
 801082c:	f107 0308 	add.w	r3, r7, #8
 8010830:	4618      	mov	r0, r3
 8010832:	f7fc fe18 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8010836:	bf00      	nop
 8010838:	3714      	adds	r7, #20
 801083a:	46bd      	mov	sp, r7
 801083c:	bd90      	pop	{r4, r7, pc}

0801083e <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 801083e:	b590      	push	{r4, r7, lr}
 8010840:	b085      	sub	sp, #20
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
 8010846:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	332c      	adds	r3, #44	; 0x2c
 801084e:	681c      	ldr	r4, [r3, #0]
 8010850:	f107 0308 	add.w	r3, r7, #8
 8010854:	6839      	ldr	r1, [r7, #0]
 8010856:	4618      	mov	r0, r3
 8010858:	f7fd fb34 	bl	800dec4 <_Z10StringFromj>
 801085c:	f107 0308 	add.w	r3, r7, #8
 8010860:	4618      	mov	r0, r3
 8010862:	f7fc fdd3 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8010866:	4603      	mov	r3, r0
 8010868:	4619      	mov	r1, r3
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	47a0      	blx	r4
 801086e:	f107 0308 	add.w	r3, r7, #8
 8010872:	4618      	mov	r0, r3
 8010874:	f7fc fdf7 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8010878:	bf00      	nop
 801087a:	3714      	adds	r7, #20
 801087c:	46bd      	mov	sp, r7
 801087e:	bd90      	pop	{r4, r7, pc}

08010880 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 8010880:	b590      	push	{r4, r7, lr}
 8010882:	b087      	sub	sp, #28
 8010884:	af00      	add	r7, sp, #0
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	332c      	adds	r3, #44	; 0x2c
 8010892:	681c      	ldr	r4, [r3, #0]
 8010894:	f107 0310 	add.w	r3, r7, #16
 8010898:	2106      	movs	r1, #6
 801089a:	ed97 0b00 	vldr	d0, [r7]
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fd faa6 	bl	800ddf0 <_Z10StringFromdi>
 80108a4:	f107 0310 	add.w	r3, r7, #16
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7fc fdaf 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 80108ae:	4603      	mov	r3, r0
 80108b0:	4619      	mov	r1, r3
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	47a0      	blx	r4
 80108b6:	f107 0310 	add.w	r3, r7, #16
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7fc fdd3 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 80108c0:	bf00      	nop
 80108c2:	371c      	adds	r7, #28
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd90      	pop	{r4, r7, pc}

080108c8 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
    p.print(s);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	332c      	adds	r3, #44	; 0x2c
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	6839      	ldr	r1, [r7, #0]
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	4798      	blx	r3
    return p;
 80108e0:	687b      	ldr	r3, [r7, #4]
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3708      	adds	r7, #8
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
	...

080108ec <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80108ec:	b590      	push	{r4, r7, lr}
 80108ee:	b085      	sub	sp, #20
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	7a1b      	ldrb	r3, [r3, #8]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d01a      	beq.n	8010934 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	332c      	adds	r3, #44	; 0x2c
 8010904:	681c      	ldr	r4, [r3, #0]
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	3314      	adds	r3, #20
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f107 0208 	add.w	r2, r7, #8
 8010912:	6839      	ldr	r1, [r7, #0]
 8010914:	4610      	mov	r0, r2
 8010916:	4798      	blx	r3
 8010918:	f107 0308 	add.w	r3, r7, #8
 801091c:	4618      	mov	r0, r3
 801091e:	f7fc fd75 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8010922:	4603      	mov	r3, r0
 8010924:	4619      	mov	r1, r3
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	47a0      	blx	r4
 801092a:	f107 0308 	add.w	r3, r7, #8
 801092e:	4618      	mov	r0, r3
 8010930:	f7fc fd99 	bl	800d466 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	3318      	adds	r3, #24
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	6838      	ldr	r0, [r7, #0]
 801093e:	4798      	blx	r3
 8010940:	4603      	mov	r3, r0
 8010942:	2b00      	cmp	r3, #0
 8010944:	d007      	beq.n	8010956 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	3344      	adds	r3, #68	; 0x44
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4907      	ldr	r1, [pc, #28]	; (801096c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 8010954:	e006      	b.n	8010964 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	3344      	adds	r3, #68	; 0x44
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	4904      	ldr	r1, [pc, #16]	; (8010970 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	4798      	blx	r3
}
 8010964:	bf00      	nop
 8010966:	3714      	adds	r7, #20
 8010968:	46bd      	mov	sp, r7
 801096a:	bd90      	pop	{r4, r7, pc}
 801096c:	08024da4 	.word	0x08024da4
 8010970:	08024da8 	.word	0x08024da8

08010974 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010974:	b590      	push	{r4, r7, lr}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	7a1b      	ldrb	r3, [r3, #8]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d019      	beq.n	80109ba <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	332c      	adds	r3, #44	; 0x2c
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4910      	ldr	r1, [pc, #64]	; (80109d0 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	3334      	adds	r3, #52	; 0x34
 801099a:	681c      	ldr	r4, [r3, #0]
 801099c:	6838      	ldr	r0, [r7, #0]
 801099e:	f002 f845 	bl	8012a2c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80109a2:	4603      	mov	r3, r0
 80109a4:	4619      	mov	r1, r3
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	47a0      	blx	r4
        print(" ms\n");
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	332c      	adds	r3, #44	; 0x2c
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	4908      	ldr	r1, [pc, #32]	; (80109d4 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 80109b8:	e005      	b.n	80109c6 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	3358      	adds	r3, #88	; 0x58
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	4798      	blx	r3
}
 80109c6:	bf00      	nop
 80109c8:	370c      	adds	r7, #12
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd90      	pop	{r4, r7, pc}
 80109ce:	bf00      	nop
 80109d0:	08024dac 	.word	0x08024dac
 80109d4:	08024db0 	.word	0x08024db0

080109d8 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	332c      	adds	r3, #44	; 0x2c
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	687a      	ldr	r2, [r7, #4]
 80109ea:	68d2      	ldr	r2, [r2, #12]
 80109ec:	4611      	mov	r1, r2
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	1c5a      	adds	r2, r3, #1
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	605a      	str	r2, [r3, #4]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	685a      	ldr	r2, [r3, #4]
 8010a00:	4b0d      	ldr	r3, [pc, #52]	; (8010a38 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 8010a02:	fb83 1302 	smull	r1, r3, r3, r2
 8010a06:	1119      	asrs	r1, r3, #4
 8010a08:	17d3      	asrs	r3, r2, #31
 8010a0a:	1acb      	subs	r3, r1, r3
 8010a0c:	2132      	movs	r1, #50	; 0x32
 8010a0e:	fb01 f303 	mul.w	r3, r1, r3
 8010a12:	1ad3      	subs	r3, r2, r3
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	bf0c      	ite	eq
 8010a18:	2301      	moveq	r3, #1
 8010a1a:	2300      	movne	r3, #0
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d006      	beq.n	8010a30 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	332c      	adds	r3, #44	; 0x2c
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	4904      	ldr	r1, [pc, #16]	; (8010a3c <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	4798      	blx	r3
}
 8010a30:	bf00      	nop
 8010a32:	3708      	adds	r7, #8
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	51eb851f 	.word	0x51eb851f
 8010a3c:	08024db8 	.word	0x08024db8

08010a40 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b083      	sub	sp, #12
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	683a      	ldr	r2, [r7, #0]
 8010a4e:	60da      	str	r2, [r3, #12]
}
 8010a50:	bf00      	nop
 8010a52:	370c      	adds	r7, #12
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr

08010a5c <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
}
 8010a64:	bf00      	nop
 8010a66:	370c      	adds	r7, #12
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
}
 8010a7a:	bf00      	nop
 8010a7c:	370c      	adds	r7, #12
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr

08010a86 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8010a86:	b480      	push	{r7}
 8010a88:	b083      	sub	sp, #12
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
 8010a8e:	6039      	str	r1, [r7, #0]
}
 8010a90:	bf00      	nop
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8010a9c:	b590      	push	{r4, r7, lr}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
    print("\n");
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	332c      	adds	r3, #44	; 0x2c
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	496f      	ldr	r1, [pc, #444]	; (8010c6c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 8010ab4:	6838      	ldr	r0, [r7, #0]
 8010ab6:	f7f8 f83d 	bl	8008b34 <_ZNK10TestResult9isFailureEv>
 8010aba:	4603      	mov	r3, r0
 8010abc:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 8010abe:	6838      	ldr	r0, [r7, #0]
 8010ac0:	f7f8 f82c 	bl	8008b1c <_ZNK10TestResult15getFailureCountEv>
 8010ac4:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d02b      	beq.n	8010b24 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	7a5b      	ldrb	r3, [r3, #9]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d006      	beq.n	8010ae2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	332c      	adds	r3, #44	; 0x2c
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4964      	ldr	r1, [pc, #400]	; (8010c70 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	4798      	blx	r3
        }
        print("Errors (");
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	332c      	adds	r3, #44	; 0x2c
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4962      	ldr	r1, [pc, #392]	; (8010c74 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	4798      	blx	r3
        if (failureCount > 0) {
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d00e      	beq.n	8010b14 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	3334      	adds	r3, #52	; 0x34
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	68b9      	ldr	r1, [r7, #8]
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	4798      	blx	r3
            print(" failures, ");
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	332c      	adds	r3, #44	; 0x2c
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	495a      	ldr	r1, [pc, #360]	; (8010c78 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	4798      	blx	r3
 8010b12:	e019      	b.n	8010b48 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	332c      	adds	r3, #44	; 0x2c
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4957      	ldr	r1, [pc, #348]	; (8010c7c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	4798      	blx	r3
 8010b22:	e011      	b.n	8010b48 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	7a5b      	ldrb	r3, [r3, #9]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d006      	beq.n	8010b3a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	332c      	adds	r3, #44	; 0x2c
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4952      	ldr	r1, [pc, #328]	; (8010c80 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	4798      	blx	r3
        }
        print("OK (");
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	332c      	adds	r3, #44	; 0x2c
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	4950      	ldr	r1, [pc, #320]	; (8010c84 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	4798      	blx	r3
    }
    print(result.getTestCount());
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	3334      	adds	r3, #52	; 0x34
 8010b4e:	681c      	ldr	r4, [r3, #0]
 8010b50:	6838      	ldr	r0, [r7, #0]
 8010b52:	f7ff fdd1 	bl	80106f8 <_ZNK10TestResult12getTestCountEv>
 8010b56:	4603      	mov	r3, r0
 8010b58:	4619      	mov	r1, r3
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	47a0      	blx	r4
    print(" tests, ");
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	332c      	adds	r3, #44	; 0x2c
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	4948      	ldr	r1, [pc, #288]	; (8010c88 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	4798      	blx	r3
    print(result.getRunCount());
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	3334      	adds	r3, #52	; 0x34
 8010b72:	681c      	ldr	r4, [r3, #0]
 8010b74:	6838      	ldr	r0, [r7, #0]
 8010b76:	f7f7 ffb9 	bl	8008aec <_ZNK10TestResult11getRunCountEv>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	47a0      	blx	r4
    print(" ran, ");
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	332c      	adds	r3, #44	; 0x2c
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4940      	ldr	r1, [pc, #256]	; (8010c8c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	4798      	blx	r3
    print(result.getCheckCount());
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	3334      	adds	r3, #52	; 0x34
 8010b96:	681c      	ldr	r4, [r3, #0]
 8010b98:	6838      	ldr	r0, [r7, #0]
 8010b9a:	f7f8 fc13 	bl	80093c4 <_ZNK10TestResult13getCheckCountEv>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	47a0      	blx	r4
    print(" checks, ");
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	332c      	adds	r3, #44	; 0x2c
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	4938      	ldr	r1, [pc, #224]	; (8010c90 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	4798      	blx	r3
    print(result.getIgnoredCount());
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	3334      	adds	r3, #52	; 0x34
 8010bba:	681c      	ldr	r4, [r3, #0]
 8010bbc:	6838      	ldr	r0, [r7, #0]
 8010bbe:	f7f7 ffa1 	bl	8008b04 <_ZNK10TestResult15getIgnoredCountEv>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	47a0      	blx	r4
    print(" ignored, ");
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	332c      	adds	r3, #44	; 0x2c
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	4930      	ldr	r1, [pc, #192]	; (8010c94 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	3334      	adds	r3, #52	; 0x34
 8010bde:	681c      	ldr	r4, [r3, #0]
 8010be0:	6838      	ldr	r0, [r7, #0]
 8010be2:	f7ff fd95 	bl	8010710 <_ZNK10TestResult19getFilteredOutCountEv>
 8010be6:	4603      	mov	r3, r0
 8010be8:	4619      	mov	r1, r3
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	47a0      	blx	r4
    print(" filtered out, ");
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	332c      	adds	r3, #44	; 0x2c
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	4928      	ldr	r1, [pc, #160]	; (8010c98 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	3334      	adds	r3, #52	; 0x34
 8010c02:	681c      	ldr	r4, [r3, #0]
 8010c04:	6838      	ldr	r0, [r7, #0]
 8010c06:	f001 ff05 	bl	8012a14 <_ZNK10TestResult21getTotalExecutionTimeEv>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	47a0      	blx	r4
    print(" ms)");
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	332c      	adds	r3, #44	; 0x2c
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	4920      	ldr	r1, [pc, #128]	; (8010c9c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	4798      	blx	r3
    if (color_) {
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	7a5b      	ldrb	r3, [r3, #9]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d006      	beq.n	8010c36 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	332c      	adds	r3, #44	; 0x2c
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	491b      	ldr	r1, [pc, #108]	; (8010ca0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 8010c36:	7bfb      	ldrb	r3, [r7, #15]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d009      	beq.n	8010c50 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d106      	bne.n	8010c50 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	332c      	adds	r3, #44	; 0x2c
 8010c48:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 8010c4a:	4916      	ldr	r1, [pc, #88]	; (8010ca4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	4798      	blx	r3
    }
    print("\n\n");
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	332c      	adds	r3, #44	; 0x2c
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4913      	ldr	r1, [pc, #76]	; (8010ca8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	4798      	blx	r3

    dotCount_ = 0;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2200      	movs	r2, #0
 8010c62:	605a      	str	r2, [r3, #4]
}
 8010c64:	bf00      	nop
 8010c66:	3714      	adds	r7, #20
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd90      	pop	{r4, r7, pc}
 8010c6c:	08024db8 	.word	0x08024db8
 8010c70:	08024dbc 	.word	0x08024dbc
 8010c74:	08024dc4 	.word	0x08024dc4
 8010c78:	08024dd0 	.word	0x08024dd0
 8010c7c:	08024ddc 	.word	0x08024ddc
 8010c80:	08024dec 	.word	0x08024dec
 8010c84:	08024df4 	.word	0x08024df4
 8010c88:	08024dfc 	.word	0x08024dfc
 8010c8c:	08024e08 	.word	0x08024e08
 8010c90:	08024e10 	.word	0x08024e10
 8010c94:	08024e1c 	.word	0x08024e1c
 8010c98:	08024e28 	.word	0x08024e28
 8010c9c:	08024e38 	.word	0x08024e38
 8010ca0:	08024e40 	.word	0x08024e40
 8010ca4:	08024e44 	.word	0x08024e44
 8010ca8:	08024ee8 	.word	0x08024ee8

08010cac <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b01      	cmp	r3, #1
 8010cbc:	d922      	bls.n	8010d04 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	332c      	adds	r3, #44	; 0x2c
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	4911      	ldr	r1, [pc, #68]	; (8010d0c <_ZN10TestOutput12printTestRunEjj+0x60>)
 8010cc8:	68f8      	ldr	r0, [r7, #12]
 8010cca:	4798      	blx	r3
        print(number);
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	3334      	adds	r3, #52	; 0x34
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	68b9      	ldr	r1, [r7, #8]
 8010cd6:	68f8      	ldr	r0, [r7, #12]
 8010cd8:	4798      	blx	r3
        print(" of ");
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	332c      	adds	r3, #44	; 0x2c
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	490b      	ldr	r1, [pc, #44]	; (8010d10 <_ZN10TestOutput12printTestRunEjj+0x64>)
 8010ce4:	68f8      	ldr	r0, [r7, #12]
 8010ce6:	4798      	blx	r3
        print(total);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	3334      	adds	r3, #52	; 0x34
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	6879      	ldr	r1, [r7, #4]
 8010cf2:	68f8      	ldr	r0, [r7, #12]
 8010cf4:	4798      	blx	r3
        print("\n");
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	332c      	adds	r3, #44	; 0x2c
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	4905      	ldr	r1, [pc, #20]	; (8010d14 <_ZN10TestOutput12printTestRunEjj+0x68>)
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	4798      	blx	r3
    }
}
 8010d04:	bf00      	nop
 8010d06:	3710      	adds	r7, #16
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	08024eec 	.word	0x08024eec
 8010d10:	08024ef8 	.word	0x08024ef8
 8010d14:	08024db8 	.word	0x08024db8

08010d18 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 8010d22:	6838      	ldr	r0, [r7, #0]
 8010d24:	f7fd ffa1 	bl	800ec6a <_ZNK11TestFailure17isOutsideTestFileEv>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d105      	bne.n	8010d3a <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 8010d2e:	6838      	ldr	r0, [r7, #0]
 8010d30:	f7fd ffad 	bl	800ec8e <_ZNK11TestFailure18isInHelperFunctionEv>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d001      	beq.n	8010d3e <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	e000      	b.n	8010d40 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 8010d3e:	2300      	movs	r3, #0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d004      	beq.n	8010d4e <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 8010d44:	6839      	ldr	r1, [r7, #0]
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f000 f81d 	bl	8010d86 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 8010d4c:	e003      	b.n	8010d56 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 8010d4e:	6839      	ldr	r1, [r7, #0]
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 f86b 	bl	8010e2c <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	3318      	adds	r3, #24
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f107 0208 	add.w	r2, r7, #8
 8010d62:	6839      	ldr	r1, [r7, #0]
 8010d64:	4610      	mov	r0, r2
 8010d66:	4798      	blx	r3
 8010d68:	f107 0308 	add.w	r3, r7, #8
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f000 f8b2 	bl	8010ed8 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 8010d74:	f107 0308 	add.w	r3, r7, #8
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fc fb74 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8010d7e:	bf00      	nop
 8010d80:	3710      	adds	r7, #16
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}

08010d86 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 8010d86:	b580      	push	{r7, lr}
 8010d88:	b088      	sub	sp, #32
 8010d8a:	af00      	add	r7, sp, #0
 8010d8c:	6078      	str	r0, [r7, #4]
 8010d8e:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	331c      	adds	r3, #28
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f107 0208 	add.w	r2, r7, #8
 8010d9c:	6839      	ldr	r1, [r7, #0]
 8010d9e:	4610      	mov	r0, r2
 8010da0:	4798      	blx	r3
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	3320      	adds	r3, #32
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	6838      	ldr	r0, [r7, #0]
 8010dac:	4798      	blx	r3
 8010dae:	4602      	mov	r2, r0
 8010db0:	f107 0308 	add.w	r3, r7, #8
 8010db4:	4619      	mov	r1, r3
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f000 f8be 	bl	8010f38 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010dbc:	f107 0308 	add.w	r3, r7, #8
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7fc fb50 	bl	800d466 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	330c      	adds	r3, #12
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	f107 0210 	add.w	r2, r7, #16
 8010dd2:	6839      	ldr	r1, [r7, #0]
 8010dd4:	4610      	mov	r0, r2
 8010dd6:	4798      	blx	r3
 8010dd8:	f107 0310 	add.w	r3, r7, #16
 8010ddc:	4619      	mov	r1, r3
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f000 f85c 	bl	8010e9c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8010de4:	f107 0310 	add.w	r3, r7, #16
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7fc fb3c 	bl	800d466 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	3308      	adds	r3, #8
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	f107 0218 	add.w	r2, r7, #24
 8010dfa:	6839      	ldr	r1, [r7, #0]
 8010dfc:	4610      	mov	r0, r2
 8010dfe:	4798      	blx	r3
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	3314      	adds	r3, #20
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	6838      	ldr	r0, [r7, #0]
 8010e0a:	4798      	blx	r3
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	f107 0318 	add.w	r3, r7, #24
 8010e12:	4619      	mov	r1, r3
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 f88f 	bl	8010f38 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010e1a:	f107 0318 	add.w	r3, r7, #24
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7fc fb21 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8010e24:	bf00      	nop
 8010e26:	3720      	adds	r7, #32
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b086      	sub	sp, #24
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	3308      	adds	r3, #8
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f107 0208 	add.w	r2, r7, #8
 8010e42:	6839      	ldr	r1, [r7, #0]
 8010e44:	4610      	mov	r0, r2
 8010e46:	4798      	blx	r3
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	3314      	adds	r3, #20
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	6838      	ldr	r0, [r7, #0]
 8010e52:	4798      	blx	r3
 8010e54:	4602      	mov	r2, r0
 8010e56:	f107 0308 	add.w	r3, r7, #8
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 f86b 	bl	8010f38 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010e62:	f107 0308 	add.w	r3, r7, #8
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fc fafd 	bl	800d466 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	330c      	adds	r3, #12
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f107 0210 	add.w	r2, r7, #16
 8010e78:	6839      	ldr	r1, [r7, #0]
 8010e7a:	4610      	mov	r0, r2
 8010e7c:	4798      	blx	r3
 8010e7e:	f107 0310 	add.w	r3, r7, #16
 8010e82:	4619      	mov	r1, r3
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 f809 	bl	8010e9c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8010e8a:	f107 0310 	add.w	r3, r7, #16
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fc fae9 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8010e94:	bf00      	nop
 8010e96:	3718      	adds	r7, #24
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}

08010e9c <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 8010e9c:	b590      	push	{r4, r7, lr}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	332c      	adds	r3, #44	; 0x2c
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	4909      	ldr	r1, [pc, #36]	; (8010ed4 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	4798      	blx	r3
    print(testName.asCharString());
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	332c      	adds	r3, #44	; 0x2c
 8010eba:	681c      	ldr	r4, [r3, #0]
 8010ebc:	6838      	ldr	r0, [r7, #0]
 8010ebe:	f7fc faa5 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	47a0      	blx	r4
}
 8010eca:	bf00      	nop
 8010ecc:	370c      	adds	r7, #12
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd90      	pop	{r4, r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	08024f00 	.word	0x08024f00

08010ed8 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8010ed8:	b590      	push	{r4, r7, lr}
 8010eda:	b083      	sub	sp, #12
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	6039      	str	r1, [r7, #0]
    print("\n");
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	332c      	adds	r3, #44	; 0x2c
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4910      	ldr	r1, [pc, #64]	; (8010f2c <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	4798      	blx	r3
    print("\t");
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	332c      	adds	r3, #44	; 0x2c
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	490d      	ldr	r1, [pc, #52]	; (8010f30 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	4798      	blx	r3
    print(reason.asCharString());
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	332c      	adds	r3, #44	; 0x2c
 8010f04:	681c      	ldr	r4, [r3, #0]
 8010f06:	6838      	ldr	r0, [r7, #0]
 8010f08:	f7fc fa80 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	4619      	mov	r1, r3
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	47a0      	blx	r4
    print("\n\n");
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	332c      	adds	r3, #44	; 0x2c
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	4905      	ldr	r1, [pc, #20]	; (8010f34 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	4798      	blx	r3
}
 8010f22:	bf00      	nop
 8010f24:	370c      	adds	r7, #12
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd90      	pop	{r4, r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	08024db8 	.word	0x08024db8
 8010f30:	08024f10 	.word	0x08024f10
 8010f34:	08024ee8 	.word	0x08024ee8

08010f38 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 8010f38:	b590      	push	{r4, r7, lr}
 8010f3a:	b089      	sub	sp, #36	; 0x24
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	60b9      	str	r1, [r7, #8]
 8010f42:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 8010f44:	f7ff fbf0 	bl	8010728 <_ZN10TestOutput21getWorkingEnvironmentEv>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	bf0c      	ite	eq
 8010f4e:	2301      	moveq	r3, #1
 8010f50:	2300      	movne	r3, #0
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d015      	beq.n	8010f84 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	3354      	adds	r3, #84	; 0x54
 8010f5e:	681c      	ldr	r4, [r3, #0]
 8010f60:	f107 0310 	add.w	r3, r7, #16
 8010f64:	68b9      	ldr	r1, [r7, #8]
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fb ff19 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 8010f6c:	f107 0310 	add.w	r3, r7, #16
 8010f70:	687a      	ldr	r2, [r7, #4]
 8010f72:	4619      	mov	r1, r3
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	47a0      	blx	r4
 8010f78:	f107 0310 	add.w	r3, r7, #16
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fc fa72 	bl	800d466 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 8010f82:	e014      	b.n	8010fae <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	3350      	adds	r3, #80	; 0x50
 8010f8a:	681c      	ldr	r4, [r3, #0]
 8010f8c:	f107 0318 	add.w	r3, r7, #24
 8010f90:	68b9      	ldr	r1, [r7, #8]
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fb ff03 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 8010f98:	f107 0318 	add.w	r3, r7, #24
 8010f9c:	687a      	ldr	r2, [r7, #4]
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	68f8      	ldr	r0, [r7, #12]
 8010fa2:	47a0      	blx	r4
 8010fa4:	f107 0318 	add.w	r3, r7, #24
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7fc fa5c 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8010fae:	bf00      	nop
 8010fb0:	3724      	adds	r7, #36	; 0x24
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd90      	pop	{r4, r7, pc}
	...

08010fb8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8010fb8:	b590      	push	{r4, r7, lr}
 8010fba:	b085      	sub	sp, #20
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	607a      	str	r2, [r7, #4]
    print("\n");
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	332c      	adds	r3, #44	; 0x2c
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4916      	ldr	r1, [pc, #88]	; (8011028 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 8010fce:	68f8      	ldr	r0, [r7, #12]
 8010fd0:	4798      	blx	r3
    print(file.asCharString());
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	332c      	adds	r3, #44	; 0x2c
 8010fd8:	681c      	ldr	r4, [r3, #0]
 8010fda:	68b8      	ldr	r0, [r7, #8]
 8010fdc:	f7fc fa16 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	68f8      	ldr	r0, [r7, #12]
 8010fe6:	47a0      	blx	r4
    print(":");
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	332c      	adds	r3, #44	; 0x2c
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	490e      	ldr	r1, [pc, #56]	; (801102c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8010ff2:	68f8      	ldr	r0, [r7, #12]
 8010ff4:	4798      	blx	r3
    print(lineNumber);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	3334      	adds	r3, #52	; 0x34
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	6879      	ldr	r1, [r7, #4]
 8011000:	68f8      	ldr	r0, [r7, #12]
 8011002:	4798      	blx	r3
    print(":");
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	332c      	adds	r3, #44	; 0x2c
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4907      	ldr	r1, [pc, #28]	; (801102c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 801100e:	68f8      	ldr	r0, [r7, #12]
 8011010:	4798      	blx	r3
    print(" error:");
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	332c      	adds	r3, #44	; 0x2c
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4905      	ldr	r1, [pc, #20]	; (8011030 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 801101c:	68f8      	ldr	r0, [r7, #12]
 801101e:	4798      	blx	r3
}
 8011020:	bf00      	nop
 8011022:	3714      	adds	r7, #20
 8011024:	46bd      	mov	sp, r7
 8011026:	bd90      	pop	{r4, r7, pc}
 8011028:	08024db8 	.word	0x08024db8
 801102c:	08024f14 	.word	0x08024f14
 8011030:	08024f18 	.word	0x08024f18

08011034 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8011034:	b590      	push	{r4, r7, lr}
 8011036:	b085      	sub	sp, #20
 8011038:	af00      	add	r7, sp, #0
 801103a:	60f8      	str	r0, [r7, #12]
 801103c:	60b9      	str	r1, [r7, #8]
 801103e:	607a      	str	r2, [r7, #4]
    print("\n");
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	332c      	adds	r3, #44	; 0x2c
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	4916      	ldr	r1, [pc, #88]	; (80110a4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 801104a:	68f8      	ldr	r0, [r7, #12]
 801104c:	4798      	blx	r3
    print(file.asCharString());
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	332c      	adds	r3, #44	; 0x2c
 8011054:	681c      	ldr	r4, [r3, #0]
 8011056:	68b8      	ldr	r0, [r7, #8]
 8011058:	f7fc f9d8 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801105c:	4603      	mov	r3, r0
 801105e:	4619      	mov	r1, r3
 8011060:	68f8      	ldr	r0, [r7, #12]
 8011062:	47a0      	blx	r4
    print("(");
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	332c      	adds	r3, #44	; 0x2c
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	490e      	ldr	r1, [pc, #56]	; (80110a8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 801106e:	68f8      	ldr	r0, [r7, #12]
 8011070:	4798      	blx	r3
    print(lineNumber);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	3334      	adds	r3, #52	; 0x34
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	6879      	ldr	r1, [r7, #4]
 801107c:	68f8      	ldr	r0, [r7, #12]
 801107e:	4798      	blx	r3
    print("):");
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	332c      	adds	r3, #44	; 0x2c
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4908      	ldr	r1, [pc, #32]	; (80110ac <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 801108a:	68f8      	ldr	r0, [r7, #12]
 801108c:	4798      	blx	r3
    print(" error:");
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	332c      	adds	r3, #44	; 0x2c
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	4906      	ldr	r1, [pc, #24]	; (80110b0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 8011098:	68f8      	ldr	r0, [r7, #12]
 801109a:	4798      	blx	r3
}
 801109c:	bf00      	nop
 801109e:	3714      	adds	r7, #20
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd90      	pop	{r4, r7, pc}
 80110a4:	08024db8 	.word	0x08024db8
 80110a8:	08024f20 	.word	0x08024f20
 80110ac:	08024f24 	.word	0x08024f24
 80110b0:	08024f18 	.word	0x08024f18

080110b4 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
 80110bc:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	7a1b      	ldrb	r3, [r3, #8]
 80110c2:	2b02      	cmp	r3, #2
 80110c4:	d106      	bne.n	80110d4 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	3328      	adds	r3, #40	; 0x28
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	6839      	ldr	r1, [r7, #0]
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	4798      	blx	r3
}
 80110d4:	bf00      	nop
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
    while (*s) {
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d009      	beq.n	8011102 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 80110ee:	4b0a      	ldr	r3, [pc, #40]	; (8011118 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	683a      	ldr	r2, [r7, #0]
 80110f4:	7812      	ldrb	r2, [r2, #0]
 80110f6:	4610      	mov	r0, r2
 80110f8:	4798      	blx	r3
        s++;
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	3301      	adds	r3, #1
 80110fe:	603b      	str	r3, [r7, #0]
    while (*s) {
 8011100:	e7f1      	b.n	80110e6 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	334c      	adds	r3, #76	; 0x4c
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	4798      	blx	r3
}
 801110e:	bf00      	nop
 8011110:	3708      	adds	r7, #8
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	200000c0 	.word	0x200000c0

0801111c <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 8011124:	4b03      	ldr	r3, [pc, #12]	; (8011134 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4798      	blx	r3
}
 801112a:	bf00      	nop
 801112c:	3708      	adds	r7, #8
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	200000c4 	.word	0x200000c4

08011138 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4618      	mov	r0, r3
 8011144:	f7ff fb00 	bl	8010748 <_ZN10TestOutputC1Ev>
 8011148:	4a06      	ldr	r2, [pc, #24]	; (8011164 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	601a      	str	r2, [r3, #0]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2200      	movs	r2, #0
 8011152:	611a      	str	r2, [r3, #16]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	615a      	str	r2, [r3, #20]
{
}
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	4618      	mov	r0, r3
 801115e:	3708      	adds	r7, #8
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}
 8011164:	08028704 	.word	0x08028704

08011168 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	4a0e      	ldr	r2, [pc, #56]	; (80111ac <_ZN19CompositeTestOutputD1Ev+0x44>)
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	691b      	ldr	r3, [r3, #16]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d004      	beq.n	8011188 <_ZN19CompositeTestOutputD1Ev+0x20>
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	3204      	adds	r2, #4
 8011182:	6812      	ldr	r2, [r2, #0]
 8011184:	4618      	mov	r0, r3
 8011186:	4790      	blx	r2
  delete outputTwo_;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	695b      	ldr	r3, [r3, #20]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d004      	beq.n	801119a <_ZN19CompositeTestOutputD1Ev+0x32>
 8011190:	681a      	ldr	r2, [r3, #0]
 8011192:	3204      	adds	r2, #4
 8011194:	6812      	ldr	r2, [r2, #0]
 8011196:	4618      	mov	r0, r3
 8011198:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4618      	mov	r0, r3
 801119e:	f7ff faf1 	bl	8010784 <_ZN10TestOutputD1Ev>
}
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	4618      	mov	r0, r3
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	08028704 	.word	0x08028704

080111b0 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
}
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f7ff ffd5 	bl	8011168 <_ZN19CompositeTestOutputD1Ev>
 80111be:	2118      	movs	r1, #24
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f7f9 f9e9 	bl	800a598 <_ZdlPvj>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	4618      	mov	r0, r3
 80111ca:	3708      	adds	r7, #8
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	691b      	ldr	r3, [r3, #16]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d004      	beq.n	80111ec <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	3204      	adds	r2, #4
 80111e6:	6812      	ldr	r2, [r2, #0]
 80111e8:	4618      	mov	r0, r3
 80111ea:	4790      	blx	r2
  outputOne_ = output;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	683a      	ldr	r2, [r7, #0]
 80111f0:	611a      	str	r2, [r3, #16]
}
 80111f2:	bf00      	nop
 80111f4:	3708      	adds	r7, #8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}

080111fa <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 80111fa:	b580      	push	{r7, lr}
 80111fc:	b082      	sub	sp, #8
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
 8011202:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	695b      	ldr	r3, [r3, #20]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d004      	beq.n	8011216 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 801120c:	681a      	ldr	r2, [r3, #0]
 801120e:	3204      	adds	r2, #4
 8011210:	6812      	ldr	r2, [r2, #0]
 8011212:	4618      	mov	r0, r3
 8011214:	4790      	blx	r2
  outputTwo_ = output;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	683a      	ldr	r2, [r7, #0]
 801121a:	615a      	str	r2, [r3, #20]
}
 801121c:	bf00      	nop
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	691b      	ldr	r3, [r3, #16]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d008      	beq.n	8011246 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	691a      	ldr	r2, [r3, #16]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	691b      	ldr	r3, [r3, #16]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	3308      	adds	r3, #8
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	4610      	mov	r0, r2
 8011244:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	695b      	ldr	r3, [r3, #20]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d008      	beq.n	8011260 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	695a      	ldr	r2, [r3, #20]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	695b      	ldr	r3, [r3, #20]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	3308      	adds	r3, #8
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4610      	mov	r0, r2
 801125e:	4798      	blx	r3
}
 8011260:	bf00      	nop
 8011262:	3708      	adds	r7, #8
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	691b      	ldr	r3, [r3, #16]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d009      	beq.n	801128e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	691a      	ldr	r2, [r3, #16]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	691b      	ldr	r3, [r3, #16]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	330c      	adds	r3, #12
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	6839      	ldr	r1, [r7, #0]
 801128a:	4610      	mov	r0, r2
 801128c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	695b      	ldr	r3, [r3, #20]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d009      	beq.n	80112aa <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	695a      	ldr	r2, [r3, #20]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	695b      	ldr	r3, [r3, #20]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	330c      	adds	r3, #12
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	6839      	ldr	r1, [r7, #0]
 80112a6:	4610      	mov	r0, r2
 80112a8:	4798      	blx	r3
}
 80112aa:	bf00      	nop
 80112ac:	3708      	adds	r7, #8
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}

080112b2 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80112b2:	b580      	push	{r7, lr}
 80112b4:	b082      	sub	sp, #8
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	6078      	str	r0, [r7, #4]
 80112ba:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	691b      	ldr	r3, [r3, #16]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d009      	beq.n	80112d8 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	691a      	ldr	r2, [r3, #16]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	691b      	ldr	r3, [r3, #16]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	3310      	adds	r3, #16
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	6839      	ldr	r1, [r7, #0]
 80112d4:	4610      	mov	r0, r2
 80112d6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	695b      	ldr	r3, [r3, #20]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d009      	beq.n	80112f4 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	695a      	ldr	r2, [r3, #20]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	695b      	ldr	r3, [r3, #20]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	3310      	adds	r3, #16
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	6839      	ldr	r1, [r7, #0]
 80112f0:	4610      	mov	r0, r2
 80112f2:	4798      	blx	r3
}
 80112f4:	bf00      	nop
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b082      	sub	sp, #8
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	691b      	ldr	r3, [r3, #16]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d009      	beq.n	8011322 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	691a      	ldr	r2, [r3, #16]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	691b      	ldr	r3, [r3, #16]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	3314      	adds	r3, #20
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	6839      	ldr	r1, [r7, #0]
 801131e:	4610      	mov	r0, r2
 8011320:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	695b      	ldr	r3, [r3, #20]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d009      	beq.n	801133e <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	695a      	ldr	r2, [r3, #20]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	695b      	ldr	r3, [r3, #20]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	3314      	adds	r3, #20
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	6839      	ldr	r1, [r7, #0]
 801133a:	4610      	mov	r0, r2
 801133c:	4798      	blx	r3
}
 801133e:	bf00      	nop
 8011340:	3708      	adds	r7, #8
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}

08011346 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8011346:	b580      	push	{r7, lr}
 8011348:	b082      	sub	sp, #8
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
 801134e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	691b      	ldr	r3, [r3, #16]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d009      	beq.n	801136c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	691a      	ldr	r2, [r3, #16]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	691b      	ldr	r3, [r3, #16]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	3318      	adds	r3, #24
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	6839      	ldr	r1, [r7, #0]
 8011368:	4610      	mov	r0, r2
 801136a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	695b      	ldr	r3, [r3, #20]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d009      	beq.n	8011388 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	695a      	ldr	r2, [r3, #20]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	695b      	ldr	r3, [r3, #20]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	3318      	adds	r3, #24
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	6839      	ldr	r1, [r7, #0]
 8011384:	4610      	mov	r0, r2
 8011386:	4798      	blx	r3
}
 8011388:	bf00      	nop
 801138a:	3708      	adds	r7, #8
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	691b      	ldr	r3, [r3, #16]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d009      	beq.n	80113b6 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	691a      	ldr	r2, [r3, #16]
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	691b      	ldr	r3, [r3, #16]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	331c      	adds	r3, #28
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	6839      	ldr	r1, [r7, #0]
 80113b2:	4610      	mov	r0, r2
 80113b4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	695b      	ldr	r3, [r3, #20]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d009      	beq.n	80113d2 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	695a      	ldr	r2, [r3, #20]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	695b      	ldr	r3, [r3, #20]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	331c      	adds	r3, #28
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	6839      	ldr	r1, [r7, #0]
 80113ce:	4610      	mov	r0, r2
 80113d0:	4798      	blx	r3
}
 80113d2:	bf00      	nop
 80113d4:	3708      	adds	r7, #8
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}

080113da <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 80113da:	b580      	push	{r7, lr}
 80113dc:	b082      	sub	sp, #8
 80113de:	af00      	add	r7, sp, #0
 80113e0:	6078      	str	r0, [r7, #4]
 80113e2:	460b      	mov	r3, r1
 80113e4:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	691b      	ldr	r3, [r3, #16]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d009      	beq.n	8011402 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	691a      	ldr	r2, [r3, #16]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	691b      	ldr	r3, [r3, #16]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	3320      	adds	r3, #32
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	78f9      	ldrb	r1, [r7, #3]
 80113fe:	4610      	mov	r0, r2
 8011400:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	695b      	ldr	r3, [r3, #20]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d009      	beq.n	801141e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	695a      	ldr	r2, [r3, #20]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	695b      	ldr	r3, [r3, #20]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	3320      	adds	r3, #32
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	78f9      	ldrb	r1, [r7, #3]
 801141a:	4610      	mov	r0, r2
 801141c:	4798      	blx	r3
}
 801141e:	bf00      	nop
 8011420:	3708      	adds	r7, #8
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}

08011426 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 8011426:	b580      	push	{r7, lr}
 8011428:	b082      	sub	sp, #8
 801142a:	af00      	add	r7, sp, #0
 801142c:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	691b      	ldr	r3, [r3, #16]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d008      	beq.n	8011448 <_ZN19CompositeTestOutput5colorEv+0x22>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	691a      	ldr	r2, [r3, #16]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	691b      	ldr	r3, [r3, #16]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	3324      	adds	r3, #36	; 0x24
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4610      	mov	r0, r2
 8011446:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	695b      	ldr	r3, [r3, #20]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d008      	beq.n	8011462 <_ZN19CompositeTestOutput5colorEv+0x3c>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	695a      	ldr	r2, [r3, #20]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	695b      	ldr	r3, [r3, #20]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	3324      	adds	r3, #36	; 0x24
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	4610      	mov	r0, r2
 8011460:	4798      	blx	r3
}
 8011462:	bf00      	nop
 8011464:	3708      	adds	r7, #8
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 801146a:	b580      	push	{r7, lr}
 801146c:	b082      	sub	sp, #8
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
 8011472:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	691b      	ldr	r3, [r3, #16]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d009      	beq.n	8011490 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	691a      	ldr	r2, [r3, #16]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	691b      	ldr	r3, [r3, #16]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	3328      	adds	r3, #40	; 0x28
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	6839      	ldr	r1, [r7, #0]
 801148c:	4610      	mov	r0, r2
 801148e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	695b      	ldr	r3, [r3, #20]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d009      	beq.n	80114ac <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	695a      	ldr	r2, [r3, #20]
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	695b      	ldr	r3, [r3, #20]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	3328      	adds	r3, #40	; 0x28
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	6839      	ldr	r1, [r7, #0]
 80114a8:	4610      	mov	r0, r2
 80114aa:	4798      	blx	r3
}
 80114ac:	bf00      	nop
 80114ae:	3708      	adds	r7, #8
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b082      	sub	sp, #8
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	691b      	ldr	r3, [r3, #16]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d009      	beq.n	80114da <_ZN19CompositeTestOutput5printEPKc+0x26>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	691a      	ldr	r2, [r3, #16]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	691b      	ldr	r3, [r3, #16]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	332c      	adds	r3, #44	; 0x2c
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	6839      	ldr	r1, [r7, #0]
 80114d6:	4610      	mov	r0, r2
 80114d8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	695b      	ldr	r3, [r3, #20]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d009      	beq.n	80114f6 <_ZN19CompositeTestOutput5printEPKc+0x42>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	695a      	ldr	r2, [r3, #20]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	695b      	ldr	r3, [r3, #20]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	332c      	adds	r3, #44	; 0x2c
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	6839      	ldr	r1, [r7, #0]
 80114f2:	4610      	mov	r0, r2
 80114f4:	4798      	blx	r3
}
 80114f6:	bf00      	nop
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}

080114fe <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 80114fe:	b580      	push	{r7, lr}
 8011500:	b082      	sub	sp, #8
 8011502:	af00      	add	r7, sp, #0
 8011504:	6078      	str	r0, [r7, #4]
 8011506:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	691b      	ldr	r3, [r3, #16]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d009      	beq.n	8011524 <_ZN19CompositeTestOutput5printEl+0x26>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	691a      	ldr	r2, [r3, #16]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	691b      	ldr	r3, [r3, #16]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	3330      	adds	r3, #48	; 0x30
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	6839      	ldr	r1, [r7, #0]
 8011520:	4610      	mov	r0, r2
 8011522:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	695b      	ldr	r3, [r3, #20]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d009      	beq.n	8011540 <_ZN19CompositeTestOutput5printEl+0x42>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	695a      	ldr	r2, [r3, #20]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	695b      	ldr	r3, [r3, #20]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	3330      	adds	r3, #48	; 0x30
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	6839      	ldr	r1, [r7, #0]
 801153c:	4610      	mov	r0, r2
 801153e:	4798      	blx	r3
}
 8011540:	bf00      	nop
 8011542:	3708      	adds	r7, #8
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}

08011548 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b082      	sub	sp, #8
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	691b      	ldr	r3, [r3, #16]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d009      	beq.n	801156e <_ZN19CompositeTestOutput5printEj+0x26>
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	691a      	ldr	r2, [r3, #16]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	691b      	ldr	r3, [r3, #16]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	3334      	adds	r3, #52	; 0x34
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	6839      	ldr	r1, [r7, #0]
 801156a:	4610      	mov	r0, r2
 801156c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	695b      	ldr	r3, [r3, #20]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d009      	beq.n	801158a <_ZN19CompositeTestOutput5printEj+0x42>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	695a      	ldr	r2, [r3, #20]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	695b      	ldr	r3, [r3, #20]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	3334      	adds	r3, #52	; 0x34
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	6839      	ldr	r1, [r7, #0]
 8011586:	4610      	mov	r0, r2
 8011588:	4798      	blx	r3
}
 801158a:	bf00      	nop
 801158c:	3708      	adds	r7, #8
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}

08011592 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 8011592:	b580      	push	{r7, lr}
 8011594:	b084      	sub	sp, #16
 8011596:	af00      	add	r7, sp, #0
 8011598:	60f8      	str	r0, [r7, #12]
 801159a:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	691b      	ldr	r3, [r3, #16]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d00a      	beq.n	80115bc <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	691a      	ldr	r2, [r3, #16]
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	3338      	adds	r3, #56	; 0x38
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	ed97 0b00 	vldr	d0, [r7]
 80115b8:	4610      	mov	r0, r2
 80115ba:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	695b      	ldr	r3, [r3, #20]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d00a      	beq.n	80115da <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	695a      	ldr	r2, [r3, #20]
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	695b      	ldr	r3, [r3, #20]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	3338      	adds	r3, #56	; 0x38
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	ed97 0b00 	vldr	d0, [r7]
 80115d6:	4610      	mov	r0, r2
 80115d8:	4798      	blx	r3
}
 80115da:	bf00      	nop
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}

080115e2 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 80115e2:	b580      	push	{r7, lr}
 80115e4:	b082      	sub	sp, #8
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
 80115ea:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	691b      	ldr	r3, [r3, #16]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d009      	beq.n	8011608 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	691a      	ldr	r2, [r3, #16]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	691b      	ldr	r3, [r3, #16]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	333c      	adds	r3, #60	; 0x3c
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	6839      	ldr	r1, [r7, #0]
 8011604:	4610      	mov	r0, r2
 8011606:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	695b      	ldr	r3, [r3, #20]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d009      	beq.n	8011624 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	695a      	ldr	r2, [r3, #20]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	695b      	ldr	r3, [r3, #20]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	333c      	adds	r3, #60	; 0x3c
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	6839      	ldr	r1, [r7, #0]
 8011620:	4610      	mov	r0, r2
 8011622:	4798      	blx	r3
}
 8011624:	bf00      	nop
 8011626:	3708      	adds	r7, #8
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	691b      	ldr	r3, [r3, #16]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d009      	beq.n	8011652 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	691a      	ldr	r2, [r3, #16]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	691b      	ldr	r3, [r3, #16]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	3344      	adds	r3, #68	; 0x44
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	6839      	ldr	r1, [r7, #0]
 801164e:	4610      	mov	r0, r2
 8011650:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	695b      	ldr	r3, [r3, #20]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d009      	beq.n	801166e <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	695a      	ldr	r2, [r3, #20]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	695b      	ldr	r3, [r3, #20]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	3344      	adds	r3, #68	; 0x44
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	6839      	ldr	r1, [r7, #0]
 801166a:	4610      	mov	r0, r2
 801166c:	4798      	blx	r3
}
 801166e:	bf00      	nop
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 8011676:	b580      	push	{r7, lr}
 8011678:	b082      	sub	sp, #8
 801167a:	af00      	add	r7, sp, #0
 801167c:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	691b      	ldr	r3, [r3, #16]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d008      	beq.n	8011698 <_ZN19CompositeTestOutput5flushEv+0x22>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	691a      	ldr	r2, [r3, #16]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	691b      	ldr	r3, [r3, #16]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	334c      	adds	r3, #76	; 0x4c
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4610      	mov	r0, r2
 8011696:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	695b      	ldr	r3, [r3, #20]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d008      	beq.n	80116b2 <_ZN19CompositeTestOutput5flushEv+0x3c>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	695a      	ldr	r2, [r3, #20]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	695b      	ldr	r3, [r3, #20]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	334c      	adds	r3, #76	; 0x4c
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	4610      	mov	r0, r2
 80116b0:	4798      	blx	r3
}
 80116b2:	bf00      	nop
 80116b4:	3708      	adds	r7, #8
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}

080116ba <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 80116ba:	b480      	push	{r7}
 80116bc:	b085      	sub	sp, #20
 80116be:	af00      	add	r7, sp, #0
 80116c0:	60f8      	str	r0, [r7, #12]
 80116c2:	60b9      	str	r1, [r7, #8]
 80116c4:	607a      	str	r2, [r7, #4]
    }
 80116c6:	bf00      	nop
 80116c8:	3714      	adds	r7, #20
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr

080116d2 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 80116d2:	b480      	push	{r7}
 80116d4:	b085      	sub	sp, #20
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	60f8      	str	r0, [r7, #12]
 80116da:	60b9      	str	r1, [r7, #8]
 80116dc:	607a      	str	r2, [r7, #4]
    }
 80116de:	bf00      	nop
 80116e0:	3714      	adds	r7, #20
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr
	...

080116ec <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 80116f6:	4a0b      	ldr	r2, [pc, #44]	; (8011724 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	601a      	str	r2, [r3, #0]
 80116fc:	f000 f9ce 	bl	8011a9c <_ZN14NullTestPlugin8instanceEv>
 8011700:	4602      	mov	r2, r0
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	605a      	str	r2, [r3, #4]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	3308      	adds	r3, #8
 801170a:	6839      	ldr	r1, [r7, #0]
 801170c:	4618      	mov	r0, r3
 801170e:	f7fb fb46 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2201      	movs	r2, #1
 8011716:	741a      	strb	r2, [r3, #16]
{
}
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	4618      	mov	r0, r3
 801171c:	3708      	adds	r7, #8
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
 8011722:	bf00      	nop
 8011724:	080288c0 	.word	0x080288c0

08011728 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 8011732:	4a0a      	ldr	r2, [pc, #40]	; (801175c <_ZN10TestPluginC1EPS_+0x34>)
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	601a      	str	r2, [r3, #0]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	683a      	ldr	r2, [r7, #0]
 801173c:	605a      	str	r2, [r3, #4]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	3308      	adds	r3, #8
 8011742:	4907      	ldr	r1, [pc, #28]	; (8011760 <_ZN10TestPluginC1EPS_+0x38>)
 8011744:	4618      	mov	r0, r3
 8011746:	f7fb fad6 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2201      	movs	r2, #1
 801174e:	741a      	strb	r2, [r3, #16]
{
}
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	4618      	mov	r0, r3
 8011754:	3708      	adds	r7, #8
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
 801175a:	bf00      	nop
 801175c:	080288c0 	.word	0x080288c0
 8011760:	08024f28 	.word	0x08024f28

08011764 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	4a06      	ldr	r2, [pc, #24]	; (8011788 <_ZN10TestPluginD1Ev+0x24>)
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	601a      	str	r2, [r3, #0]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	3308      	adds	r3, #8
 8011776:	4618      	mov	r0, r3
 8011778:	f7fb fe75 	bl	800d466 <_ZN12SimpleStringD1Ev>
{
}
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	4618      	mov	r0, r3
 8011780:	3708      	adds	r7, #8
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	080288c0 	.word	0x080288c0

0801178c <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 801178c:	b580      	push	{r7, lr}
 801178e:	b082      	sub	sp, #8
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
}
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f7ff ffe5 	bl	8011764 <_ZN10TestPluginD1Ev>
 801179a:	2114      	movs	r1, #20
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f7f8 fefb 	bl	800a598 <_ZdlPvj>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4618      	mov	r0, r3
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b083      	sub	sp, #12
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	683a      	ldr	r2, [r7, #0]
 80117ba:	605a      	str	r2, [r3, #4]
    return this;
 80117bc:	687b      	ldr	r3, [r7, #4]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	370c      	adds	r7, #12
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr

080117ca <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 80117ca:	b580      	push	{r7, lr}
 80117cc:	b084      	sub	sp, #16
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	60f8      	str	r0, [r7, #12]
 80117d2:	60b9      	str	r1, [r7, #8]
 80117d4:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	7c1b      	ldrb	r3, [r3, #16]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d007      	beq.n	80117ee <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	3308      	adds	r3, #8
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	687a      	ldr	r2, [r7, #4]
 80117e8:	68b9      	ldr	r1, [r7, #8]
 80117ea:	68f8      	ldr	r0, [r7, #12]
 80117ec:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	6858      	ldr	r0, [r3, #4]
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	3314      	adds	r3, #20
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	687a      	ldr	r2, [r7, #4]
 80117fe:	68b9      	ldr	r1, [r7, #8]
 8011800:	4798      	blx	r3
}
 8011802:	bf00      	nop
 8011804:	3710      	adds	r7, #16
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}

0801180a <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 801180a:	b580      	push	{r7, lr}
 801180c:	b084      	sub	sp, #16
 801180e:	af00      	add	r7, sp, #0
 8011810:	60f8      	str	r0, [r7, #12]
 8011812:	60b9      	str	r1, [r7, #8]
 8011814:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	6858      	ldr	r0, [r3, #4]
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	685b      	ldr	r3, [r3, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	3318      	adds	r3, #24
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	68b9      	ldr	r1, [r7, #8]
 8011828:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	7c1b      	ldrb	r3, [r3, #16]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d007      	beq.n	8011842 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	330c      	adds	r3, #12
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	687a      	ldr	r2, [r7, #4]
 801183c:	68b9      	ldr	r1, [r7, #8]
 801183e:	68f8      	ldr	r0, [r7, #12]
 8011840:	4798      	blx	r3
}
 8011842:	bf00      	nop
 8011844:	3710      	adds	r7, #16
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}

0801184a <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 801184a:	b590      	push	{r4, r7, lr}
 801184c:	b085      	sub	sp, #20
 801184e:	af00      	add	r7, sp, #0
 8011850:	60f8      	str	r0, [r7, #12]
 8011852:	60b9      	str	r1, [r7, #8]
 8011854:	607a      	str	r2, [r7, #4]
 8011856:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	331c      	adds	r3, #28
 801185e:	681c      	ldr	r4, [r3, #0]
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	68b9      	ldr	r1, [r7, #8]
 8011866:	68f8      	ldr	r0, [r7, #12]
 8011868:	47a0      	blx	r4
 801186a:	4603      	mov	r3, r0
}
 801186c:	4618      	mov	r0, r3
 801186e:	3714      	adds	r7, #20
 8011870:	46bd      	mov	sp, r7
 8011872:	bd90      	pop	{r4, r7, pc}

08011874 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8011874:	b590      	push	{r4, r7, lr}
 8011876:	b085      	sub	sp, #20
 8011878:	af00      	add	r7, sp, #0
 801187a:	60f8      	str	r0, [r7, #12]
 801187c:	60b9      	str	r1, [r7, #8]
 801187e:	607a      	str	r2, [r7, #4]
 8011880:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	3310      	adds	r3, #16
 8011888:	681c      	ldr	r4, [r3, #0]
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	68b9      	ldr	r1, [r7, #8]
 8011890:	68f8      	ldr	r0, [r7, #12]
 8011892:	47a0      	blx	r4
 8011894:	4603      	mov	r3, r0
 8011896:	2b00      	cmp	r3, #0
 8011898:	d001      	beq.n	801189e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 801189a:	2301      	movs	r3, #1
 801189c:	e011      	b.n	80118c2 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d00c      	beq.n	80118c0 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	6858      	ldr	r0, [r3, #4]
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	331c      	adds	r3, #28
 80118b2:	681c      	ldr	r4, [r3, #0]
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	68b9      	ldr	r1, [r7, #8]
 80118ba:	47a0      	blx	r4
 80118bc:	4603      	mov	r3, r0
 80118be:	e000      	b.n	80118c2 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 80118c0:	2300      	movs	r3, #0
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3714      	adds	r7, #20
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd90      	pop	{r4, r7, pc}

080118ca <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 80118ca:	b480      	push	{r7}
 80118cc:	b083      	sub	sp, #12
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
    return name_;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	3308      	adds	r3, #8
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	370c      	adds	r7, #12
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr

080118e2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 80118e2:	b580      	push	{r7, lr}
 80118e4:	b082      	sub	sp, #8
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	6078      	str	r0, [r7, #4]
 80118ea:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	3308      	adds	r3, #8
 80118f0:	4619      	mov	r1, r3
 80118f2:	6838      	ldr	r0, [r7, #0]
 80118f4:	f7fb fdc3 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d001      	beq.n	8011902 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	e00d      	b.n	801191e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d007      	beq.n	801191a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	6839      	ldr	r1, [r7, #0]
 8011910:	4618      	mov	r0, r3
 8011912:	f7ff ffe6 	bl	80118e2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8011916:	4603      	mov	r3, r0
 8011918:	e001      	b.n	801191e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	685b      	ldr	r3, [r3, #4]
}
 801191e:	4618      	mov	r0, r3
 8011920:	3708      	adds	r7, #8
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 8011926:	b480      	push	{r7}
 8011928:	b083      	sub	sp, #12
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
    return next_;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	685b      	ldr	r3, [r3, #4]
}
 8011932:	4618      	mov	r0, r3
 8011934:	370c      	adds	r7, #12
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr

0801193e <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 801193e:	b580      	push	{r7, lr}
 8011940:	b084      	sub	sp, #16
 8011942:	af00      	add	r7, sp, #0
 8011944:	6078      	str	r0, [r7, #4]
 8011946:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8011948:	2300      	movs	r3, #0
 801194a:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d00e      	beq.n	8011972 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	4618      	mov	r0, r3
 801195a:	f7ff ffb6 	bl	80118ca <_ZN10TestPlugin7getNameEv>
 801195e:	4603      	mov	r3, r0
 8011960:	6839      	ldr	r1, [r7, #0]
 8011962:	4618      	mov	r0, r3
 8011964:	f7fb fd8b 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 8011968:	4603      	mov	r3, r0
 801196a:	2b00      	cmp	r3, #0
 801196c:	d001      	beq.n	8011972 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 801196e:	2301      	movs	r3, #1
 8011970:	e000      	b.n	8011974 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 8011972:	2300      	movs	r3, #0
 8011974:	2b00      	cmp	r3, #0
 8011976:	d007      	beq.n	8011988 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	685a      	ldr	r2, [r3, #4]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8011988:	68fb      	ldr	r3, [r7, #12]
}
 801198a:	4618      	mov	r0, r3
 801198c:	3710      	adds	r7, #16
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}

08011992 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 8011992:	b480      	push	{r7}
 8011994:	b083      	sub	sp, #12
 8011996:	af00      	add	r7, sp, #0
 8011998:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2200      	movs	r2, #0
 801199e:	741a      	strb	r2, [r3, #16]
}
 80119a0:	bf00      	nop
 80119a2:	370c      	adds	r7, #12
 80119a4:	46bd      	mov	sp, r7
 80119a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119aa:	4770      	bx	lr

080119ac <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 80119ac:	b480      	push	{r7}
 80119ae:	b083      	sub	sp, #12
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2201      	movs	r2, #1
 80119b8:	741a      	strb	r2, [r3, #16]
}
 80119ba:	bf00      	nop
 80119bc:	370c      	adds	r7, #12
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr

080119c6 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 80119c6:	b480      	push	{r7}
 80119c8:	b083      	sub	sp, #12
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]
    return enabled_;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	7c1b      	ldrb	r3, [r3, #16]
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	370c      	adds	r7, #12
 80119d6:	46bd      	mov	sp, r7
 80119d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119dc:	4770      	bx	lr
	...

080119e0 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6839      	ldr	r1, [r7, #0]
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7ff fe7c 	bl	80116ec <_ZN10TestPluginC1ERK12SimpleString>
 80119f4:	4a05      	ldr	r2, [pc, #20]	; (8011a0c <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 80119fa:	4b05      	ldr	r3, [pc, #20]	; (8011a10 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 80119fc:	2200      	movs	r2, #0
 80119fe:	601a      	str	r2, [r3, #0]
}
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	4618      	mov	r0, r3
 8011a04:	3708      	adds	r7, #8
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	0802887c 	.word	0x0802887c
 8011a10:	20000910 	.word	0x20000910

08011a14 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8011a14:	b480      	push	{r7}
 8011a16:	b087      	sub	sp, #28
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8011a20:	4b0e      	ldr	r3, [pc, #56]	; (8011a5c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	3b01      	subs	r3, #1
 8011a26:	617b      	str	r3, [r7, #20]
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	db0d      	blt.n	8011a4a <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 8011a2e:	4a0c      	ldr	r2, [pc, #48]	; (8011a60 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011a36:	490a      	ldr	r1, [pc, #40]	; (8011a60 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	00db      	lsls	r3, r3, #3
 8011a3c:	440b      	add	r3, r1
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	3b01      	subs	r3, #1
 8011a46:	617b      	str	r3, [r7, #20]
 8011a48:	e7ee      	b.n	8011a28 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 8011a4a:	4b04      	ldr	r3, [pc, #16]	; (8011a5c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	601a      	str	r2, [r3, #0]
}
 8011a50:	bf00      	nop
 8011a52:	371c      	adds	r7, #28
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr
 8011a5c:	20000910 	.word	0x20000910
 8011a60:	20000914 	.word	0x20000914

08011a64 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2100      	movs	r1, #0
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7ff fe59 	bl	8011728 <_ZN10TestPluginC1EPS_>
 8011a76:	4a04      	ldr	r2, [pc, #16]	; (8011a88 <_ZN14NullTestPluginC1Ev+0x24>)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	601a      	str	r2, [r3, #0]
{
}
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3708      	adds	r7, #8
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	08028838 	.word	0x08028838

08011a8c <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	af00      	add	r7, sp, #0
 8011a90:	4801      	ldr	r0, [pc, #4]	; (8011a98 <__tcf_0+0xc>)
 8011a92:	f000 f849 	bl	8011b28 <_ZN14NullTestPluginD1Ev>
 8011a96:	bd80      	pop	{r7, pc}
 8011a98:	20000a14 	.word	0x20000a14

08011a9c <_ZN14NullTestPlugin8instanceEv>:
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8011aa0:	4b12      	ldr	r3, [pc, #72]	; (8011aec <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	f3bf 8f5b 	dmb	ish
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	f003 0301 	and.w	r3, r3, #1
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	bf0c      	ite	eq
 8011ab2:	2301      	moveq	r3, #1
 8011ab4:	2300      	movne	r3, #0
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d013      	beq.n	8011ae4 <_ZN14NullTestPlugin8instanceEv+0x48>
 8011abc:	480b      	ldr	r0, [pc, #44]	; (8011aec <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011abe:	f00d ffdb 	bl	801fa78 <__cxa_guard_acquire>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	bf14      	ite	ne
 8011ac8:	2301      	movne	r3, #1
 8011aca:	2300      	moveq	r3, #0
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d008      	beq.n	8011ae4 <_ZN14NullTestPlugin8instanceEv+0x48>
 8011ad2:	4807      	ldr	r0, [pc, #28]	; (8011af0 <_ZN14NullTestPlugin8instanceEv+0x54>)
 8011ad4:	f7ff ffc6 	bl	8011a64 <_ZN14NullTestPluginC1Ev>
 8011ad8:	4804      	ldr	r0, [pc, #16]	; (8011aec <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011ada:	f00d ffd9 	bl	801fa90 <__cxa_guard_release>
 8011ade:	4805      	ldr	r0, [pc, #20]	; (8011af4 <_ZN14NullTestPlugin8instanceEv+0x58>)
 8011ae0:	f00d fffd 	bl	801fade <atexit>
    return &_instance;
 8011ae4:	4b02      	ldr	r3, [pc, #8]	; (8011af0 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	bd80      	pop	{r7, pc}
 8011aea:	bf00      	nop
 8011aec:	20000a28 	.word	0x20000a28
 8011af0:	20000a14 	.word	0x20000a14
 8011af4:	08011a8d 	.word	0x08011a8d

08011af8 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	60f8      	str	r0, [r7, #12]
 8011b00:	60b9      	str	r1, [r7, #8]
 8011b02:	607a      	str	r2, [r7, #4]
}
 8011b04:	bf00      	nop
 8011b06:	3714      	adds	r7, #20
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr

08011b10 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b085      	sub	sp, #20
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	607a      	str	r2, [r7, #4]
}
 8011b1c:	bf00      	nop
 8011b1e:	3714      	adds	r7, #20
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	4a05      	ldr	r2, [pc, #20]	; (8011b48 <_ZN14NullTestPluginD1Ev+0x20>)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	601a      	str	r2, [r3, #0]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7ff fe13 	bl	8011764 <_ZN10TestPluginD1Ev>
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	4618      	mov	r0, r3
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	08028838 	.word	0x08028838

08011b4c <_ZN14NullTestPluginD0Ev>:
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7ff ffe7 	bl	8011b28 <_ZN14NullTestPluginD1Ev>
 8011b5a:	2114      	movs	r1, #20
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f7f8 fd1b 	bl	800a598 <_ZdlPvj>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	4618      	mov	r0, r3
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8011b74:	4a0f      	ldr	r2, [pc, #60]	; (8011bb4 <_ZN12TestRegistryC1Ev+0x48>)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	601a      	str	r2, [r3, #0]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	605a      	str	r2, [r3, #4]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	609a      	str	r2, [r3, #8]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	60da      	str	r2, [r3, #12]
 8011b8c:	f7ff ff86 	bl	8011a9c <_ZN14NullTestPlugin8instanceEv>
 8011b90:	4602      	mov	r2, r0
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	611a      	str	r2, [r3, #16]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	751a      	strb	r2, [r3, #20]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	619a      	str	r2, [r3, #24]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	771a      	strb	r2, [r3, #28]
{
}
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	4618      	mov	r0, r3
 8011bac:	3708      	adds	r7, #8
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	08028904 	.word	0x08028904

08011bb8 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8011bb8:	b480      	push	{r7}
 8011bba:	b083      	sub	sp, #12
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	4a04      	ldr	r2, [pc, #16]	; (8011bd4 <_ZN12TestRegistryD1Ev+0x1c>)
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	601a      	str	r2, [r3, #0]
{
}
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	370c      	adds	r7, #12
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr
 8011bd4:	08028904 	.word	0x08028904

08011bd8 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
}
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f7ff ffe9 	bl	8011bb8 <_ZN12TestRegistryD1Ev>
 8011be6:	2120      	movs	r1, #32
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f7f8 fcd5 	bl	800a598 <_ZdlPvj>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3708      	adds	r7, #8
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3308      	adds	r3, #8
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	687a      	ldr	r2, [r7, #4]
 8011c0c:	6852      	ldr	r2, [r2, #4]
 8011c0e:	4611      	mov	r1, r2
 8011c10:	6838      	ldr	r0, [r7, #0]
 8011c12:	4798      	blx	r3
 8011c14:	4602      	mov	r2, r0
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	605a      	str	r2, [r3, #4]
}
 8011c1a:	bf00      	nop
 8011c1c:	3708      	adds	r7, #8
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b084      	sub	sp, #16
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
 8011c2a:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	3308      	adds	r3, #8
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	6838      	ldr	r0, [r7, #0]
 8011c3a:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	685b      	ldr	r3, [r3, #4]
 8011c40:	60bb      	str	r3, [r7, #8]
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d05c      	beq.n	8011d02 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	7d1b      	ldrb	r3, [r3, #20]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d005      	beq.n	8011c5c <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	3380      	adds	r3, #128	; 0x80
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	68b8      	ldr	r0, [r7, #8]
 8011c5a:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	7f1b      	ldrb	r3, [r3, #28]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d005      	beq.n	8011c70 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	3384      	adds	r3, #132	; 0x84
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	68b8      	ldr	r0, [r7, #8]
 8011c6e:	4798      	blx	r3

        if (groupStart) {
 8011c70:	7bfb      	ldrb	r3, [r7, #15]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d008      	beq.n	8011c88 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	3310      	adds	r3, #16
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	68b9      	ldr	r1, [r7, #8]
 8011c80:	6838      	ldr	r0, [r7, #0]
 8011c82:	4798      	blx	r3
            groupStart = false;
 8011c84:	2300      	movs	r3, #0
 8011c86:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	3320      	adds	r3, #32
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	6838      	ldr	r0, [r7, #0]
 8011c92:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8011c94:	683a      	ldr	r2, [r7, #0]
 8011c96:	68b9      	ldr	r1, [r7, #8]
 8011c98:	6878      	ldr	r0, [r7, #4]
 8011c9a:	f000 fb79 	bl	8012390 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d016      	beq.n	8011cd2 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	3318      	adds	r3, #24
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	68b9      	ldr	r1, [r7, #8]
 8011cae:	6838      	ldr	r0, [r7, #0]
 8011cb0:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	3390      	adds	r3, #144	; 0x90
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	6911      	ldr	r1, [r2, #16]
 8011cbe:	683a      	ldr	r2, [r7, #0]
 8011cc0:	68b8      	ldr	r0, [r7, #8]
 8011cc2:	4798      	blx	r3
            result.currentTestEnded(test);
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	331c      	adds	r3, #28
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	68b9      	ldr	r1, [r7, #8]
 8011cce:	6838      	ldr	r0, [r7, #0]
 8011cd0:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 8011cd2:	68b9      	ldr	r1, [r7, #8]
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f000 fa5b 	bl	8012190 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d008      	beq.n	8011cf2 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	3314      	adds	r3, #20
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	68b9      	ldr	r1, [r7, #8]
 8011cee:	6838      	ldr	r0, [r7, #0]
 8011cf0:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	330c      	adds	r3, #12
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	68b8      	ldr	r0, [r7, #8]
 8011cfc:	4798      	blx	r3
 8011cfe:	60b8      	str	r0, [r7, #8]
 8011d00:	e79f      	b.n	8011c42 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	330c      	adds	r3, #12
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	6838      	ldr	r0, [r7, #0]
 8011d0c:	4798      	blx	r3
    currentRepetition_++;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	699b      	ldr	r3, [r3, #24]
 8011d12:	1c5a      	adds	r2, r3, #1
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	619a      	str	r2, [r3, #24]
}
 8011d18:	bf00      	nop
 8011d1a:	3710      	adds	r7, #16
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 8011d20:	b590      	push	{r4, r7, lr}
 8011d22:	b08f      	sub	sp, #60	; 0x3c
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 8011d2a:	f107 0314 	add.w	r3, r7, #20
 8011d2e:	4953      	ldr	r1, [pc, #332]	; (8011e7c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7fa ffe0 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8011d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d04d      	beq.n	8011dde <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 8011d42:	f107 030c 	add.w	r3, r7, #12
 8011d46:	494d      	ldr	r1, [pc, #308]	; (8011e7c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7fa ffd4 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 8011d4e:	f107 030c 	add.w	r3, r7, #12
 8011d52:	494b      	ldr	r1, [pc, #300]	; (8011e80 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fb fc15 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 8011d5a:	f107 031c 	add.w	r3, r7, #28
 8011d5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011d60:	4618      	mov	r0, r3
 8011d62:	f001 f9d2 	bl	801310a <_ZNK10UtestShell8getGroupEv>
 8011d66:	f107 021c 	add.w	r2, r7, #28
 8011d6a:	f107 030c 	add.w	r3, r7, #12
 8011d6e:	4611      	mov	r1, r2
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7fb fbf5 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8011d76:	f107 031c 	add.w	r3, r7, #28
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7fb fb73 	bl	800d466 <_ZN12SimpleStringD1Ev>
        gname += "#";
 8011d80:	f107 030c 	add.w	r3, r7, #12
 8011d84:	493e      	ldr	r1, [pc, #248]	; (8011e80 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7fb fbfc 	bl	800d584 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8011d8c:	f107 020c 	add.w	r2, r7, #12
 8011d90:	f107 0314 	add.w	r3, r7, #20
 8011d94:	4611      	mov	r1, r2
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7fb f82b 	bl	800cdf2 <_ZNK12SimpleString8containsERKS_>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	f083 0301 	eor.w	r3, r3, #1
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d00d      	beq.n	8011dc4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8011da8:	f107 020c 	add.w	r2, r7, #12
 8011dac:	f107 0314 	add.w	r3, r7, #20
 8011db0:	4611      	mov	r1, r2
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7fb fbd4 	bl	800d560 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8011db8:	f107 0314 	add.w	r3, r7, #20
 8011dbc:	4931      	ldr	r1, [pc, #196]	; (8011e84 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fb fbe0 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8011dc4:	f107 030c 	add.w	r3, r7, #12
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7fb fb4c 	bl	800d466 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	330c      	adds	r3, #12
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011dd8:	4798      	blx	r3
 8011dda:	6378      	str	r0, [r7, #52]	; 0x34
 8011ddc:	e7ae      	b.n	8011d3c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 8011dde:	f107 0314 	add.w	r3, r7, #20
 8011de2:	4a26      	ldr	r2, [pc, #152]	; (8011e7c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011de4:	4926      	ldr	r1, [pc, #152]	; (8011e80 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7fb f99a 	bl	800d120 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8011dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011df0:	4924      	ldr	r1, [pc, #144]	; (8011e84 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fa ff7f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8011df8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011dfc:	f107 0314 	add.w	r3, r7, #20
 8011e00:	4611      	mov	r1, r2
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fb f874 	bl	800cef0 <_ZNK12SimpleString8endsWithERKS_>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	461c      	mov	r4, r3
 8011e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7fb fb28 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8011e16:	2c00      	cmp	r4, #0
 8011e18:	d01a      	beq.n	8011e50 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 8011e1a:	f107 0314 	add.w	r3, r7, #20
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7fb fb00 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 8011e24:	4603      	mov	r3, r0
 8011e26:	3b01      	subs	r3, #1
 8011e28:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8011e2c:	f107 0114 	add.w	r1, r7, #20
 8011e30:	2200      	movs	r2, #0
 8011e32:	f7fb fc21 	bl	800d678 <_ZNK12SimpleString9subStringEjj>
 8011e36:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011e3a:	f107 0314 	add.w	r3, r7, #20
 8011e3e:	4611      	mov	r1, r2
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7fa ffc4 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 8011e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fb fb0b 	bl	800d466 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	3338      	adds	r3, #56	; 0x38
 8011e56:	681c      	ldr	r4, [r3, #0]
 8011e58:	f107 0314 	add.w	r3, r7, #20
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f7fb fad5 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8011e62:	4603      	mov	r3, r0
 8011e64:	4619      	mov	r1, r3
 8011e66:	6838      	ldr	r0, [r7, #0]
 8011e68:	47a0      	blx	r4
    SimpleString groupList;
 8011e6a:	f107 0314 	add.w	r3, r7, #20
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f7fb faf9 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8011e74:	bf00      	nop
 8011e76:	373c      	adds	r7, #60	; 0x3c
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd90      	pop	{r4, r7, pc}
 8011e7c:	08024f78 	.word	0x08024f78
 8011e80:	08024f7c 	.word	0x08024f7c
 8011e84:	08024f80 	.word	0x08024f80

08011e88 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8011e88:	b590      	push	{r4, r7, lr}
 8011e8a:	b091      	sub	sp, #68	; 0x44
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 8011e92:	f107 0314 	add.w	r3, r7, #20
 8011e96:	4964      	ldr	r1, [pc, #400]	; (8012028 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fa ff2c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d06e      	beq.n	8011f88 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 8011eaa:	683a      	ldr	r2, [r7, #0]
 8011eac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f000 fa6e 	bl	8012390 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d05e      	beq.n	8011f78 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 8011eba:	f107 030c 	add.w	r3, r7, #12
 8011ebe:	495a      	ldr	r1, [pc, #360]	; (8012028 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7fa ff18 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 8011ec6:	f107 030c 	add.w	r3, r7, #12
 8011eca:	4958      	ldr	r1, [pc, #352]	; (801202c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7fb fb59 	bl	800d584 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 8011ed2:	f107 031c 	add.w	r3, r7, #28
 8011ed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f001 f916 	bl	801310a <_ZNK10UtestShell8getGroupEv>
 8011ede:	f107 021c 	add.w	r2, r7, #28
 8011ee2:	f107 030c 	add.w	r3, r7, #12
 8011ee6:	4611      	mov	r1, r2
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7fb fb39 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8011eee:	f107 031c 	add.w	r3, r7, #28
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7fb fab7 	bl	800d466 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8011ef8:	f107 030c 	add.w	r3, r7, #12
 8011efc:	494c      	ldr	r1, [pc, #304]	; (8012030 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fb fb40 	bl	800d584 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 8011f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f001 f8ee 	bl	80130ec <_ZNK10UtestShell7getNameEv>
 8011f10:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011f14:	f107 030c 	add.w	r3, r7, #12
 8011f18:	4611      	mov	r1, r2
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7fb fb20 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8011f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7fb fa9e 	bl	800d466 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 8011f2a:	f107 030c 	add.w	r3, r7, #12
 8011f2e:	493f      	ldr	r1, [pc, #252]	; (801202c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7fb fb27 	bl	800d584 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 8011f36:	f107 020c 	add.w	r2, r7, #12
 8011f3a:	f107 0314 	add.w	r3, r7, #20
 8011f3e:	4611      	mov	r1, r2
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7fa ff56 	bl	800cdf2 <_ZNK12SimpleString8containsERKS_>
 8011f46:	4603      	mov	r3, r0
 8011f48:	f083 0301 	eor.w	r3, r3, #1
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d00d      	beq.n	8011f6e <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 8011f52:	f107 020c 	add.w	r2, r7, #12
 8011f56:	f107 0314 	add.w	r3, r7, #20
 8011f5a:	4611      	mov	r1, r2
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7fb faff 	bl	800d560 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8011f62:	f107 0314 	add.w	r3, r7, #20
 8011f66:	4933      	ldr	r1, [pc, #204]	; (8012034 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fb fb0b 	bl	800d584 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 8011f6e:	f107 030c 	add.w	r3, r7, #12
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7fb fa77 	bl	800d466 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	330c      	adds	r3, #12
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011f82:	4798      	blx	r3
 8011f84:	63f8      	str	r0, [r7, #60]	; 0x3c
 8011f86:	e78d      	b.n	8011ea4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8011f88:	f107 0314 	add.w	r3, r7, #20
 8011f8c:	4a26      	ldr	r2, [pc, #152]	; (8012028 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011f8e:	4927      	ldr	r1, [pc, #156]	; (801202c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7fb f8c5 	bl	800d120 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 8011f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011f9a:	4926      	ldr	r1, [pc, #152]	; (8012034 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fa feaa 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8011fa2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011fa6:	f107 0314 	add.w	r3, r7, #20
 8011faa:	4611      	mov	r1, r2
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7fa ff9f 	bl	800cef0 <_ZNK12SimpleString8endsWithERKS_>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	461c      	mov	r4, r3
 8011fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fb fa53 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8011fc0:	2c00      	cmp	r4, #0
 8011fc2:	d01a      	beq.n	8011ffa <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8011fc4:	f107 0314 	add.w	r3, r7, #20
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7fb fa2b 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	3b01      	subs	r3, #1
 8011fd2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8011fd6:	f107 0114 	add.w	r1, r7, #20
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f7fb fb4c 	bl	800d678 <_ZNK12SimpleString9subStringEjj>
 8011fe0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011fe4:	f107 0314 	add.w	r3, r7, #20
 8011fe8:	4611      	mov	r1, r2
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7fa feef 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 8011ff0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7fb fa36 	bl	800d466 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	3338      	adds	r3, #56	; 0x38
 8012000:	681c      	ldr	r4, [r3, #0]
 8012002:	f107 0314 	add.w	r3, r7, #20
 8012006:	4618      	mov	r0, r3
 8012008:	f7fb fa00 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801200c:	4603      	mov	r3, r0
 801200e:	4619      	mov	r1, r3
 8012010:	6838      	ldr	r0, [r7, #0]
 8012012:	47a0      	blx	r4
    SimpleString groupAndNameList;
 8012014:	f107 0314 	add.w	r3, r7, #20
 8012018:	4618      	mov	r0, r3
 801201a:	f7fb fa24 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 801201e:	bf00      	nop
 8012020:	3744      	adds	r7, #68	; 0x44
 8012022:	46bd      	mov	sp, r7
 8012024:	bd90      	pop	{r4, r7, pc}
 8012026:	bf00      	nop
 8012028:	08024f78 	.word	0x08024f78
 801202c:	08024f7c 	.word	0x08024f7c
 8012030:	08024f84 	.word	0x08024f84
 8012034:	08024f80 	.word	0x08024f80

08012038 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 8012038:	b590      	push	{r4, r7, lr}
 801203a:	b091      	sub	sp, #68	; 0x44
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 8012042:	f107 0314 	add.w	r3, r7, #20
 8012046:	494f      	ldr	r1, [pc, #316]	; (8012184 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8012048:	4618      	mov	r0, r3
 801204a:	f7fa fe54 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012056:	2b00      	cmp	r3, #0
 8012058:	d07d      	beq.n	8012156 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 801205a:	f107 030c 	add.w	r3, r7, #12
 801205e:	4949      	ldr	r1, [pc, #292]	; (8012184 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8012060:	4618      	mov	r0, r3
 8012062:	f7fa fe48 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 8012066:	f107 031c 	add.w	r3, r7, #28
 801206a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801206c:	4618      	mov	r0, r3
 801206e:	f001 f84c 	bl	801310a <_ZNK10UtestShell8getGroupEv>
 8012072:	f107 021c 	add.w	r2, r7, #28
 8012076:	f107 030c 	add.w	r3, r7, #12
 801207a:	4611      	mov	r1, r2
 801207c:	4618      	mov	r0, r3
 801207e:	f7fb fa6f 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8012082:	f107 031c 	add.w	r3, r7, #28
 8012086:	4618      	mov	r0, r3
 8012088:	f7fb f9ed 	bl	800d466 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 801208c:	f107 030c 	add.w	r3, r7, #12
 8012090:	493d      	ldr	r1, [pc, #244]	; (8012188 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8012092:	4618      	mov	r0, r3
 8012094:	f7fb fa76 	bl	800d584 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8012098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801209c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801209e:	4618      	mov	r0, r3
 80120a0:	f001 f824 	bl	80130ec <_ZNK10UtestShell7getNameEv>
 80120a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80120a8:	f107 030c 	add.w	r3, r7, #12
 80120ac:	4611      	mov	r1, r2
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fb fa56 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 80120b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7fb f9d4 	bl	800d466 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80120be:	f107 030c 	add.w	r3, r7, #12
 80120c2:	4931      	ldr	r1, [pc, #196]	; (8012188 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7fb fa5d 	bl	800d584 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 80120ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80120ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120d0:	4618      	mov	r0, r3
 80120d2:	f001 f8dc 	bl	801328e <_ZNK10UtestShell7getFileEv>
 80120d6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80120da:	f107 030c 	add.w	r3, r7, #12
 80120de:	4611      	mov	r1, r2
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7fb fa3d 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 80120e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7fb f9bb 	bl	800d466 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80120f0:	f107 030c 	add.w	r3, r7, #12
 80120f4:	4924      	ldr	r1, [pc, #144]	; (8012188 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fb fa44 	bl	800d584 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 80120fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80120fe:	f001 f8d5 	bl	80132ac <_ZNK10UtestShell13getLineNumberEv>
 8012102:	4603      	mov	r3, r0
 8012104:	461a      	mov	r2, r3
 8012106:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801210a:	4920      	ldr	r1, [pc, #128]	; (801218c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 801210c:	4618      	mov	r0, r3
 801210e:	f7fb feb1 	bl	800de74 <_Z16StringFromFormatPKcz>
 8012112:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012116:	f107 030c 	add.w	r3, r7, #12
 801211a:	4611      	mov	r1, r2
 801211c:	4618      	mov	r0, r3
 801211e:	f7fb fa1f 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8012122:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012126:	4618      	mov	r0, r3
 8012128:	f7fb f99d 	bl	800d466 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 801212c:	f107 020c 	add.w	r2, r7, #12
 8012130:	f107 0314 	add.w	r3, r7, #20
 8012134:	4611      	mov	r1, r2
 8012136:	4618      	mov	r0, r3
 8012138:	f7fb fa12 	bl	800d560 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 801213c:	f107 030c 	add.w	r3, r7, #12
 8012140:	4618      	mov	r0, r3
 8012142:	f7fb f990 	bl	800d466 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	330c      	adds	r3, #12
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012150:	4798      	blx	r3
 8012152:	63f8      	str	r0, [r7, #60]	; 0x3c
 8012154:	e77e      	b.n	8012054 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	3338      	adds	r3, #56	; 0x38
 801215c:	681c      	ldr	r4, [r3, #0]
 801215e:	f107 0314 	add.w	r3, r7, #20
 8012162:	4618      	mov	r0, r3
 8012164:	f7fb f952 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8012168:	4603      	mov	r3, r0
 801216a:	4619      	mov	r1, r3
 801216c:	6838      	ldr	r0, [r7, #0]
 801216e:	47a0      	blx	r4
    SimpleString testLocations;
 8012170:	f107 0314 	add.w	r3, r7, #20
 8012174:	4618      	mov	r0, r3
 8012176:	f7fb f976 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 801217a:	bf00      	nop
 801217c:	3744      	adds	r7, #68	; 0x44
 801217e:	46bd      	mov	sp, r7
 8012180:	bd90      	pop	{r4, r7, pc}
 8012182:	bf00      	nop
 8012184:	08024f78 	.word	0x08024f78
 8012188:	08024f84 	.word	0x08024f84
 801218c:	08024f88 	.word	0x08024f88

08012190 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8012190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012192:	b087      	sub	sp, #28
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 801219a:	2400      	movs	r4, #0
 801219c:	2500      	movs	r5, #0
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d028      	beq.n	80121f6 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	330c      	adds	r3, #12
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	6838      	ldr	r0, [r7, #0]
 80121ae:	4798      	blx	r3
 80121b0:	4603      	mov	r3, r0
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d01f      	beq.n	80121f6 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 80121b6:	f107 0308 	add.w	r3, r7, #8
 80121ba:	6839      	ldr	r1, [r7, #0]
 80121bc:	4618      	mov	r0, r3
 80121be:	f000 ffa4 	bl	801310a <_ZNK10UtestShell8getGroupEv>
 80121c2:	2401      	movs	r4, #1
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	330c      	adds	r3, #12
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	6838      	ldr	r0, [r7, #0]
 80121ce:	4798      	blx	r3
 80121d0:	4602      	mov	r2, r0
 80121d2:	f107 0310 	add.w	r3, r7, #16
 80121d6:	4611      	mov	r1, r2
 80121d8:	4618      	mov	r0, r3
 80121da:	f000 ff96 	bl	801310a <_ZNK10UtestShell8getGroupEv>
 80121de:	2501      	movs	r5, #1
 80121e0:	f107 0210 	add.w	r2, r7, #16
 80121e4:	f107 0308 	add.w	r3, r7, #8
 80121e8:	4611      	mov	r1, r2
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7fb f98c 	bl	800d508 <_ZneRK12SimpleStringS1_>
 80121f0:	4603      	mov	r3, r0
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d001      	beq.n	80121fa <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 80121f6:	2601      	movs	r6, #1
 80121f8:	e000      	b.n	80121fc <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 80121fa:	2600      	movs	r6, #0
 80121fc:	2d00      	cmp	r5, #0
 80121fe:	d004      	beq.n	801220a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8012200:	f107 0310 	add.w	r3, r7, #16
 8012204:	4618      	mov	r0, r3
 8012206:	f7fb f92e 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801220a:	2c00      	cmp	r4, #0
 801220c:	d004      	beq.n	8012218 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 801220e:	f107 0308 	add.w	r3, r7, #8
 8012212:	4618      	mov	r0, r3
 8012214:	f7fb f927 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8012218:	4633      	mov	r3, r6
}
 801221a:	4618      	mov	r0, r3
 801221c:	371c      	adds	r7, #28
 801221e:	46bd      	mov	sp, r7
 8012220:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012222 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 8012222:	b580      	push	{r7, lr}
 8012224:	b082      	sub	sp, #8
 8012226:	af00      	add	r7, sp, #0
 8012228:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d00a      	beq.n	8012248 <_ZN12TestRegistry10countTestsEv+0x26>
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	685a      	ldr	r2, [r3, #4]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	3310      	adds	r3, #16
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	4610      	mov	r0, r2
 8012242:	4798      	blx	r3
 8012244:	4603      	mov	r3, r0
 8012246:	e000      	b.n	801224a <_ZN12TestRegistry10countTestsEv+0x28>
 8012248:	2300      	movs	r3, #0
}
 801224a:	4618      	mov	r0, r3
 801224c:	3708      	adds	r7, #8
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
	...

08012254 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 8012254:	b580      	push	{r7, lr}
 8012256:	af00      	add	r7, sp, #0
 8012258:	4801      	ldr	r0, [pc, #4]	; (8012260 <__tcf_0+0xc>)
 801225a:	f7ff fcad 	bl	8011bb8 <_ZN12TestRegistryD1Ev>
 801225e:	bd80      	pop	{r7, pc}
 8012260:	20000a30 	.word	0x20000a30

08012264 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8012264:	b580      	push	{r7, lr}
 8012266:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8012268:	4b15      	ldr	r3, [pc, #84]	; (80122c0 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	f3bf 8f5b 	dmb	ish
 8012270:	b2db      	uxtb	r3, r3
 8012272:	f003 0301 	and.w	r3, r3, #1
 8012276:	2b00      	cmp	r3, #0
 8012278:	bf0c      	ite	eq
 801227a:	2301      	moveq	r3, #1
 801227c:	2300      	movne	r3, #0
 801227e:	b2db      	uxtb	r3, r3
 8012280:	2b00      	cmp	r3, #0
 8012282:	d013      	beq.n	80122ac <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8012284:	480e      	ldr	r0, [pc, #56]	; (80122c0 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8012286:	f00d fbf7 	bl	801fa78 <__cxa_guard_acquire>
 801228a:	4603      	mov	r3, r0
 801228c:	2b00      	cmp	r3, #0
 801228e:	bf14      	ite	ne
 8012290:	2301      	movne	r3, #1
 8012292:	2300      	moveq	r3, #0
 8012294:	b2db      	uxtb	r3, r3
 8012296:	2b00      	cmp	r3, #0
 8012298:	d008      	beq.n	80122ac <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 801229a:	480a      	ldr	r0, [pc, #40]	; (80122c4 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 801229c:	f7ff fc66 	bl	8011b6c <_ZN12TestRegistryC1Ev>
 80122a0:	4807      	ldr	r0, [pc, #28]	; (80122c0 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 80122a2:	f00d fbf5 	bl	801fa90 <__cxa_guard_release>
 80122a6:	4808      	ldr	r0, [pc, #32]	; (80122c8 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 80122a8:	f00d fc19 	bl	801fade <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 80122ac:	4b07      	ldr	r3, [pc, #28]	; (80122cc <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d002      	beq.n	80122ba <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 80122b4:	4b05      	ldr	r3, [pc, #20]	; (80122cc <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	e000      	b.n	80122bc <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 80122ba:	4b02      	ldr	r3, [pc, #8]	; (80122c4 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 80122bc:	4618      	mov	r0, r3
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	20000a50 	.word	0x20000a50
 80122c4:	20000a30 	.word	0x20000a30
 80122c8:	08012255 	.word	0x08012255
 80122cc:	20000a2c 	.word	0x20000a2c

080122d0 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b083      	sub	sp, #12
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 80122da:	4a04      	ldr	r2, [pc, #16]	; (80122ec <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	6013      	str	r3, [r2, #0]
}
 80122e0:	bf00      	nop
 80122e2:	370c      	adds	r7, #12
 80122e4:	46bd      	mov	sp, r7
 80122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ea:	4770      	bx	lr
 80122ec:	20000a2c 	.word	0x20000a2c

080122f0 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d00a      	beq.n	8012316 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	685a      	ldr	r2, [r3, #4]
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	330c      	adds	r3, #12
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	4610      	mov	r0, r2
 8012310:	4798      	blx	r3
 8012312:	4603      	mov	r3, r0
 8012314:	e000      	b.n	8012318 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 8012316:	2300      	movs	r3, #0
 8012318:	687a      	ldr	r2, [r7, #4]
 801231a:	6053      	str	r3, [r2, #4]

}
 801231c:	bf00      	nop
 801231e:	3708      	adds	r7, #8
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8012324:	b480      	push	{r7}
 8012326:	b083      	sub	sp, #12
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	683a      	ldr	r2, [r7, #0]
 8012332:	609a      	str	r2, [r3, #8]
}
 8012334:	bf00      	nop
 8012336:	370c      	adds	r7, #12
 8012338:	46bd      	mov	sp, r7
 801233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233e:	4770      	bx	lr

08012340 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8012340:	b480      	push	{r7}
 8012342:	b083      	sub	sp, #12
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	683a      	ldr	r2, [r7, #0]
 801234e:	60da      	str	r2, [r3, #12]
}
 8012350:	bf00      	nop
 8012352:	370c      	adds	r7, #12
 8012354:	46bd      	mov	sp, r7
 8012356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235a:	4770      	bx	lr

0801235c <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 801235c:	b480      	push	{r7}
 801235e:	b083      	sub	sp, #12
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2201      	movs	r2, #1
 8012368:	771a      	strb	r2, [r3, #28]
}
 801236a:	bf00      	nop
 801236c:	370c      	adds	r7, #12
 801236e:	46bd      	mov	sp, r7
 8012370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012374:	4770      	bx	lr

08012376 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8012376:	b480      	push	{r7}
 8012378:	b083      	sub	sp, #12
 801237a:	af00      	add	r7, sp, #0
 801237c:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2201      	movs	r2, #1
 8012382:	751a      	strb	r2, [r3, #20]
}
 8012384:	bf00      	nop
 8012386:	370c      	adds	r7, #12
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr

08012390 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	68d9      	ldr	r1, [r3, #12]
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	689b      	ldr	r3, [r3, #8]
 80123a4:	461a      	mov	r2, r3
 80123a6:	68b8      	ldr	r0, [r7, #8]
 80123a8:	f000 ffbb 	bl	8013322 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 80123ac:	4603      	mov	r3, r0
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d001      	beq.n	80123b6 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 80123b2:	2301      	movs	r3, #1
 80123b4:	e006      	b.n	80123c4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	332c      	adds	r3, #44	; 0x2c
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	4798      	blx	r3
        return false;
 80123c2:	2300      	movs	r3, #0
    }
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3710      	adds	r7, #16
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}

080123cc <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 80123d4:	f7ff fb62 	bl	8011a9c <_ZN14NullTestPlugin8instanceEv>
 80123d8:	4602      	mov	r2, r0
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	611a      	str	r2, [r3, #16]
}
 80123de:	bf00      	nop
 80123e0:	3708      	adds	r7, #8
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b082      	sub	sp, #8
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	6078      	str	r0, [r7, #4]
 80123ee:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	3324      	adds	r3, #36	; 0x24
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	6912      	ldr	r2, [r2, #16]
 80123fc:	4611      	mov	r1, r2
 80123fe:	6838      	ldr	r0, [r7, #0]
 8012400:	4798      	blx	r3
 8012402:	4602      	mov	r2, r0
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	611a      	str	r2, [r3, #16]
}
 8012408:	bf00      	nop
 801240a:	3708      	adds	r7, #8
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	691b      	ldr	r3, [r3, #16]
}
 801241c:	4618      	mov	r0, r3
 801241e:	370c      	adds	r7, #12
 8012420:	46bd      	mov	sp, r7
 8012422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012426:	4770      	bx	lr

08012428 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	691b      	ldr	r3, [r3, #16]
 8012436:	6839      	ldr	r1, [r7, #0]
 8012438:	4618      	mov	r0, r3
 801243a:	f7ff fa52 	bl	80118e2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 801243e:	4603      	mov	r3, r0
}
 8012440:	4618      	mov	r0, r3
 8012442:	3708      	adds	r7, #8
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	691a      	ldr	r2, [r3, #16]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	691b      	ldr	r3, [r3, #16]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	3328      	adds	r3, #40	; 0x28
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	6839      	ldr	r1, [r7, #0]
 8012462:	4610      	mov	r0, r2
 8012464:	4798      	blx	r3
 8012466:	4602      	mov	r2, r0
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	691b      	ldr	r3, [r3, #16]
 801246c:	429a      	cmp	r2, r3
 801246e:	bf0c      	ite	eq
 8012470:	2301      	moveq	r3, #1
 8012472:	2300      	movne	r3, #0
 8012474:	b2db      	uxtb	r3, r3
 8012476:	2b00      	cmp	r3, #0
 8012478:	d00b      	beq.n	8012492 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	691a      	ldr	r2, [r3, #16]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	691b      	ldr	r3, [r3, #16]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	332c      	adds	r3, #44	; 0x2c
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4610      	mov	r0, r2
 801248a:	4798      	blx	r3
 801248c:	4602      	mov	r2, r0
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	691b      	ldr	r3, [r3, #16]
 8012496:	4618      	mov	r0, r3
 8012498:	f7ff fa17 	bl	80118ca <_ZN10TestPlugin7getNameEv>
 801249c:	4603      	mov	r3, r0
 801249e:	6839      	ldr	r1, [r7, #0]
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fa ffec 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d00b      	beq.n	80124c4 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	691a      	ldr	r2, [r3, #16]
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	691b      	ldr	r3, [r3, #16]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	332c      	adds	r3, #44	; 0x2c
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	4610      	mov	r0, r2
 80124bc:	4798      	blx	r3
 80124be:	4602      	mov	r2, r0
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	691a      	ldr	r2, [r3, #16]
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	691b      	ldr	r3, [r3, #16]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	3328      	adds	r3, #40	; 0x28
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	6839      	ldr	r1, [r7, #0]
 80124d4:	4610      	mov	r0, r2
 80124d6:	4798      	blx	r3
}
 80124d8:	bf00      	nop
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
    int count = 0;
 80124e8:	2300      	movs	r3, #0
 80124ea:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	691b      	ldr	r3, [r3, #16]
 80124f0:	60bb      	str	r3, [r7, #8]
 80124f2:	f7ff fad3 	bl	8011a9c <_ZN14NullTestPlugin8instanceEv>
 80124f6:	4602      	mov	r2, r0
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	4293      	cmp	r3, r2
 80124fc:	bf14      	ite	ne
 80124fe:	2301      	movne	r3, #1
 8012500:	2300      	moveq	r3, #0
 8012502:	b2db      	uxtb	r3, r3
 8012504:	2b00      	cmp	r3, #0
 8012506:	d00a      	beq.n	801251e <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	3301      	adds	r3, #1
 801250c:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	332c      	adds	r3, #44	; 0x2c
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	68b8      	ldr	r0, [r7, #8]
 8012518:	4798      	blx	r3
 801251a:	60b8      	str	r0, [r7, #8]
 801251c:	e7e9      	b.n	80124f2 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 801251e:	68fb      	ldr	r3, [r7, #12]
}
 8012520:	4618      	mov	r0, r3
 8012522:	3710      	adds	r7, #16
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}

08012528 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8012528:	b480      	push	{r7}
 801252a:	b083      	sub	sp, #12
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
    return tests_;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	685b      	ldr	r3, [r3, #4]
}
 8012534:	4618      	mov	r0, r3
 8012536:	370c      	adds	r7, #12
 8012538:	46bd      	mov	sp, r7
 801253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253e:	4770      	bx	lr

08012540 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b084      	sub	sp, #16
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
 8012548:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	334c      	adds	r3, #76	; 0x4c
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	4798      	blx	r3
 8012556:	4602      	mov	r2, r0
 8012558:	f107 0308 	add.w	r3, r7, #8
 801255c:	4611      	mov	r1, r2
 801255e:	4618      	mov	r0, r3
 8012560:	f002 f8f8 	bl	8014754 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8012564:	f107 0308 	add.w	r3, r7, #8
 8012568:	6839      	ldr	r1, [r7, #0]
 801256a:	4618      	mov	r0, r3
 801256c:	f002 f980 	bl	8014870 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8012570:	f107 0308 	add.w	r3, r7, #8
 8012574:	4618      	mov	r0, r3
 8012576:	f002 fa13 	bl	80149a0 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 801257a:	4602      	mov	r2, r0
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8012580:	f107 0308 	add.w	r3, r7, #8
 8012584:	4618      	mov	r0, r3
 8012586:	f002 f939 	bl	80147fc <_ZN22UtestShellPointerArrayD1Ev>
}
 801258a:	bf00      	nop
 801258c:	3710      	adds	r7, #16
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}

08012592 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8012592:	b580      	push	{r7, lr}
 8012594:	b084      	sub	sp, #16
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	334c      	adds	r3, #76	; 0x4c
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	4798      	blx	r3
 80125a6:	4602      	mov	r2, r0
 80125a8:	f107 0308 	add.w	r3, r7, #8
 80125ac:	4611      	mov	r1, r2
 80125ae:	4618      	mov	r0, r3
 80125b0:	f002 f8d0 	bl	8014754 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 80125b4:	f107 0308 	add.w	r3, r7, #8
 80125b8:	4618      	mov	r0, r3
 80125ba:	f002 f995 	bl	80148e8 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 80125be:	f107 0308 	add.w	r3, r7, #8
 80125c2:	4618      	mov	r0, r3
 80125c4:	f002 f9ec 	bl	80149a0 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 80125c8:	4602      	mov	r2, r0
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 80125ce:	f107 0308 	add.w	r3, r7, #8
 80125d2:	4618      	mov	r0, r3
 80125d4:	f002 f912 	bl	80147fc <_ZN22UtestShellPointerArrayD1Ev>
}
 80125d8:	bf00      	nop
 80125da:	3710      	adds	r7, #16
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d00b      	beq.n	801260e <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	330c      	adds	r3, #12
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	68f8      	ldr	r0, [r7, #12]
 8012600:	4798      	blx	r3
 8012602:	4602      	mov	r2, r0
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	4293      	cmp	r3, r2
 8012608:	d001      	beq.n	801260e <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 801260a:	2301      	movs	r3, #1
 801260c:	e000      	b.n	8012610 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 801260e:	2300      	movs	r3, #0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d007      	beq.n	8012624 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	330c      	adds	r3, #12
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	68f8      	ldr	r0, [r7, #12]
 801261e:	4798      	blx	r3
 8012620:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 8012622:	e7e5      	b.n	80125f0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8012624:	68fb      	ldr	r3, [r7, #12]
}
 8012626:	4618      	mov	r0, r3
 8012628:	3710      	adds	r7, #16
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}

0801262e <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 801262e:	b590      	push	{r4, r7, lr}
 8012630:	b087      	sub	sp, #28
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
 8012636:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	685b      	ldr	r3, [r3, #4]
 801263c:	617b      	str	r3, [r7, #20]
    while (current) {
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d01e      	beq.n	8012682 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8012644:	f107 030c 	add.w	r3, r7, #12
 8012648:	6979      	ldr	r1, [r7, #20]
 801264a:	4618      	mov	r0, r3
 801264c:	f000 fd4e 	bl	80130ec <_ZNK10UtestShell7getNameEv>
 8012650:	f107 030c 	add.w	r3, r7, #12
 8012654:	6839      	ldr	r1, [r7, #0]
 8012656:	4618      	mov	r0, r3
 8012658:	f7fa ff11 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801265c:	4603      	mov	r3, r0
 801265e:	461c      	mov	r4, r3
 8012660:	f107 030c 	add.w	r3, r7, #12
 8012664:	4618      	mov	r0, r3
 8012666:	f7fa fefe 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801266a:	2c00      	cmp	r4, #0
 801266c:	d001      	beq.n	8012672 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	e008      	b.n	8012684 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	330c      	adds	r3, #12
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	6978      	ldr	r0, [r7, #20]
 801267c:	4798      	blx	r3
 801267e:	6178      	str	r0, [r7, #20]
    while (current) {
 8012680:	e7dd      	b.n	801263e <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8012682:	2300      	movs	r3, #0
}
 8012684:	4618      	mov	r0, r3
 8012686:	371c      	adds	r7, #28
 8012688:	46bd      	mov	sp, r7
 801268a:	bd90      	pop	{r4, r7, pc}

0801268c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 801268c:	b590      	push	{r4, r7, lr}
 801268e:	b087      	sub	sp, #28
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	617b      	str	r3, [r7, #20]
    while (current) {
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d01e      	beq.n	80126e0 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 80126a2:	f107 030c 	add.w	r3, r7, #12
 80126a6:	6979      	ldr	r1, [r7, #20]
 80126a8:	4618      	mov	r0, r3
 80126aa:	f000 fd2e 	bl	801310a <_ZNK10UtestShell8getGroupEv>
 80126ae:	f107 030c 	add.w	r3, r7, #12
 80126b2:	6839      	ldr	r1, [r7, #0]
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7fa fee2 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 80126ba:	4603      	mov	r3, r0
 80126bc:	461c      	mov	r4, r3
 80126be:	f107 030c 	add.w	r3, r7, #12
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7fa fecf 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80126c8:	2c00      	cmp	r4, #0
 80126ca:	d001      	beq.n	80126d0 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	e008      	b.n	80126e2 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	330c      	adds	r3, #12
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	6978      	ldr	r0, [r7, #20]
 80126da:	4798      	blx	r3
 80126dc:	6178      	str	r0, [r7, #20]
    while (current) {
 80126de:	e7dd      	b.n	801269c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 80126e0:	2300      	movs	r3, #0
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	371c      	adds	r7, #28
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd90      	pop	{r4, r7, pc}
	...

080126ec <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 80126ec:	b480      	push	{r7}
 80126ee:	b083      	sub	sp, #12
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 80126f6:	4a18      	ldr	r2, [pc, #96]	; (8012758 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	601a      	str	r2, [r3, #0]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	683a      	ldr	r2, [r7, #0]
 8012700:	605a      	str	r2, [r3, #4]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2200      	movs	r2, #0
 8012706:	609a      	str	r2, [r3, #8]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2200      	movs	r2, #0
 801270c:	60da      	str	r2, [r3, #12]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2200      	movs	r2, #0
 8012712:	611a      	str	r2, [r3, #16]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2200      	movs	r2, #0
 8012718:	615a      	str	r2, [r3, #20]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2200      	movs	r2, #0
 801271e:	619a      	str	r2, [r3, #24]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2200      	movs	r2, #0
 8012724:	61da      	str	r2, [r3, #28]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2200      	movs	r2, #0
 801272a:	621a      	str	r2, [r3, #32]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2200      	movs	r2, #0
 8012730:	625a      	str	r2, [r3, #36]	; 0x24
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2200      	movs	r2, #0
 8012736:	629a      	str	r2, [r3, #40]	; 0x28
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	62da      	str	r2, [r3, #44]	; 0x2c
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2200      	movs	r2, #0
 8012742:	631a      	str	r2, [r3, #48]	; 0x30
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2200      	movs	r2, #0
 8012748:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	4618      	mov	r0, r3
 801274e:	370c      	adds	r7, #12
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr
 8012758:	08028970 	.word	0x08028970

0801275c <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 801275c:	b480      	push	{r7}
 801275e:	b083      	sub	sp, #12
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	4a04      	ldr	r2, [pc, #16]	; (8012778 <_ZN10TestResultD1Ev+0x1c>)
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	601a      	str	r2, [r3, #0]
{
}
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	4618      	mov	r0, r3
 801276e:	370c      	adds	r7, #12
 8012770:	46bd      	mov	sp, r7
 8012772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012776:	4770      	bx	lr
 8012778:	08028970 	.word	0x08028970

0801277c <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
}
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f7ff ffe9 	bl	801275c <_ZN10TestResultD1Ev>
 801278a:	2138      	movs	r1, #56	; 0x38
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f7f7 ff03 	bl	800a598 <_ZdlPvj>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4618      	mov	r0, r3
 8012796:	3708      	adds	r7, #8
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}

0801279c <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b082      	sub	sp, #8
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	685a      	ldr	r2, [r3, #4]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	685b      	ldr	r3, [r3, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	3318      	adds	r3, #24
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	6839      	ldr	r1, [r7, #0]
 80127b6:	4610      	mov	r0, r2
 80127b8:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80127ba:	4b05      	ldr	r3, [pc, #20]	; (80127d0 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	4798      	blx	r3
 80127c0:	4603      	mov	r3, r0
 80127c2:	461a      	mov	r2, r3
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80127c8:	bf00      	nop
 80127ca:	3708      	adds	r7, #8
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	200000a8 	.word	0x200000a8

080127d4 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 80127de:	4b0c      	ldr	r3, [pc, #48]	; (8012810 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	4798      	blx	r3
 80127e4:	4603      	mov	r3, r0
 80127e6:	461a      	mov	r2, r3
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127ec:	1ad2      	subs	r2, r2, r3
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	685a      	ldr	r2, [r3, #4]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	685b      	ldr	r3, [r3, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	331c      	adds	r3, #28
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	6879      	ldr	r1, [r7, #4]
 8012802:	4610      	mov	r0, r2
 8012804:	4798      	blx	r3
}
 8012806:	bf00      	nop
 8012808:	3708      	adds	r7, #8
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	200000a8 	.word	0x200000a8

08012814 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b082      	sub	sp, #8
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	685a      	ldr	r2, [r3, #4]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	685b      	ldr	r3, [r3, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	3310      	adds	r3, #16
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	6839      	ldr	r1, [r7, #0]
 801282e:	4610      	mov	r0, r2
 8012830:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012832:	4b05      	ldr	r3, [pc, #20]	; (8012848 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4798      	blx	r3
 8012838:	4603      	mov	r3, r0
 801283a:	461a      	mov	r2, r3
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012840:	bf00      	nop
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}
 8012848:	200000a8 	.word	0x200000a8

0801284c <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	685a      	ldr	r2, [r3, #4]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	332c      	adds	r3, #44	; 0x2c
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	6839      	ldr	r1, [r7, #0]
 8012866:	4610      	mov	r0, r2
 8012868:	4798      	blx	r3
}
 801286a:	bf00      	nop
 801286c:	3708      	adds	r7, #8
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8012872:	b580      	push	{r7, lr}
 8012874:	b082      	sub	sp, #8
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
 801287a:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	685a      	ldr	r2, [r3, #4]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	3348      	adds	r3, #72	; 0x48
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	6839      	ldr	r1, [r7, #0]
 801288c:	4610      	mov	r0, r2
 801288e:	4798      	blx	r3
}
 8012890:	bf00      	nop
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 80128a2:	4b0c      	ldr	r3, [pc, #48]	; (80128d4 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	4798      	blx	r3
 80128a8:	4603      	mov	r3, r0
 80128aa:	461a      	mov	r2, r3
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128b0:	1ad2      	subs	r2, r2, r3
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	685a      	ldr	r2, [r3, #4]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	3314      	adds	r3, #20
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	6879      	ldr	r1, [r7, #4]
 80128c6:	4610      	mov	r0, r2
 80128c8:	4798      	blx	r3

}
 80128ca:	bf00      	nop
 80128cc:	3708      	adds	r7, #8
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}
 80128d2:	bf00      	nop
 80128d4:	200000a8 	.word	0x200000a8

080128d8 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	685a      	ldr	r2, [r3, #4]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	333c      	adds	r3, #60	; 0x3c
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	6839      	ldr	r1, [r7, #0]
 80128f2:	4610      	mov	r0, r2
 80128f4:	4798      	blx	r3
    failureCount_++;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	695b      	ldr	r3, [r3, #20]
 80128fa:	1c5a      	adds	r2, r3, #1
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	615a      	str	r2, [r3, #20]
}
 8012900:	bf00      	nop
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8012908:	b480      	push	{r7}
 801290a:	b083      	sub	sp, #12
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
    testCount_++;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	689b      	ldr	r3, [r3, #8]
 8012914:	1c5a      	adds	r2, r3, #1
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	609a      	str	r2, [r3, #8]
}
 801291a:	bf00      	nop
 801291c:	370c      	adds	r7, #12
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr

08012926 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8012926:	b480      	push	{r7}
 8012928:	b083      	sub	sp, #12
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
    runCount_++;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	68db      	ldr	r3, [r3, #12]
 8012932:	1c5a      	adds	r2, r3, #1
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	60da      	str	r2, [r3, #12]
}
 8012938:	bf00      	nop
 801293a:	370c      	adds	r7, #12
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr

08012944 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8012944:	b480      	push	{r7}
 8012946:	b083      	sub	sp, #12
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
    checkCount_++;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	691b      	ldr	r3, [r3, #16]
 8012950:	1c5a      	adds	r2, r3, #1
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	611a      	str	r2, [r3, #16]
}
 8012956:	bf00      	nop
 8012958:	370c      	adds	r7, #12
 801295a:	46bd      	mov	sp, r7
 801295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012960:	4770      	bx	lr

08012962 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8012962:	b480      	push	{r7}
 8012964:	b083      	sub	sp, #12
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	699b      	ldr	r3, [r3, #24]
 801296e:	1c5a      	adds	r2, r3, #1
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	619a      	str	r2, [r3, #24]
}
 8012974:	bf00      	nop
 8012976:	370c      	adds	r7, #12
 8012978:	46bd      	mov	sp, r7
 801297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297e:	4770      	bx	lr

08012980 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8012980:	b480      	push	{r7}
 8012982:	b083      	sub	sp, #12
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	69db      	ldr	r3, [r3, #28]
 801298c:	1c5a      	adds	r2, r3, #1
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	61da      	str	r2, [r3, #28]
}
 8012992:	bf00      	nop
 8012994:	370c      	adds	r7, #12
 8012996:	46bd      	mov	sp, r7
 8012998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299c:	4770      	bx	lr
	...

080129a0 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b082      	sub	sp, #8
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80129a8:	4b09      	ldr	r3, [pc, #36]	; (80129d0 <_ZN10TestResult12testsStartedEv+0x30>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4798      	blx	r3
 80129ae:	4603      	mov	r3, r0
 80129b0:	461a      	mov	r2, r3
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	685a      	ldr	r2, [r3, #4]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	685b      	ldr	r3, [r3, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	3308      	adds	r3, #8
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	4610      	mov	r0, r2
 80129c6:	4798      	blx	r3
}
 80129c8:	bf00      	nop
 80129ca:	3708      	adds	r7, #8
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	200000a8 	.word	0x200000a8

080129d4 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b084      	sub	sp, #16
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 80129dc:	4b0c      	ldr	r3, [pc, #48]	; (8012a10 <_ZN10TestResult10testsEndedEv+0x3c>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	4798      	blx	r3
 80129e2:	4603      	mov	r3, r0
 80129e4:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ea:	68fa      	ldr	r2, [r7, #12]
 80129ec:	1ad2      	subs	r2, r2, r3
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	685a      	ldr	r2, [r3, #4]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	330c      	adds	r3, #12
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	6879      	ldr	r1, [r7, #4]
 8012a02:	4610      	mov	r0, r2
 8012a04:	4798      	blx	r3
}
 8012a06:	bf00      	nop
 8012a08:	3710      	adds	r7, #16
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	200000a8 	.word	0x200000a8

08012a14 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6a1b      	ldr	r3, [r3, #32]
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	370c      	adds	r7, #12
 8012a24:	46bd      	mov	sp, r7
 8012a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2a:	4770      	bx	lr

08012a2c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	b083      	sub	sp, #12
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	370c      	adds	r7, #12
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr

08012a44 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8012a44:	b480      	push	{r7}
 8012a46:	b083      	sub	sp, #12
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	370c      	adds	r7, #12
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr

08012a5c <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8012a5c:	b590      	push	{r4, r7, lr}
 8012a5e:	b087      	sub	sp, #28
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	ed87 0b04 	vstr	d0, [r7, #16]
 8012a66:	ed87 1b02 	vstr	d1, [r7, #8]
 8012a6a:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8012a6e:	4b2c      	ldr	r3, [pc, #176]	; (8012b20 <_Z13doubles_equalddd+0xc4>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	ed97 0b04 	vldr	d0, [r7, #16]
 8012a76:	4798      	blx	r3
 8012a78:	4603      	mov	r3, r0
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d10f      	bne.n	8012a9e <_Z13doubles_equalddd+0x42>
 8012a7e:	4b28      	ldr	r3, [pc, #160]	; (8012b20 <_Z13doubles_equalddd+0xc4>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	ed97 0b02 	vldr	d0, [r7, #8]
 8012a86:	4798      	blx	r3
 8012a88:	4603      	mov	r3, r0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d107      	bne.n	8012a9e <_Z13doubles_equalddd+0x42>
 8012a8e:	4b24      	ldr	r3, [pc, #144]	; (8012b20 <_Z13doubles_equalddd+0xc4>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	ed97 0b00 	vldr	d0, [r7]
 8012a96:	4798      	blx	r3
 8012a98:	4603      	mov	r3, r0
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d001      	beq.n	8012aa2 <_Z13doubles_equalddd+0x46>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	e000      	b.n	8012aa4 <_Z13doubles_equalddd+0x48>
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d001      	beq.n	8012aac <_Z13doubles_equalddd+0x50>
        return false;
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	e035      	b.n	8012b18 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8012aac:	4b1d      	ldr	r3, [pc, #116]	; (8012b24 <_Z13doubles_equalddd+0xc8>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	ed97 0b04 	vldr	d0, [r7, #16]
 8012ab4:	4798      	blx	r3
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d009      	beq.n	8012ad0 <_Z13doubles_equalddd+0x74>
 8012abc:	4b19      	ldr	r3, [pc, #100]	; (8012b24 <_Z13doubles_equalddd+0xc8>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	ed97 0b02 	vldr	d0, [r7, #8]
 8012ac4:	4798      	blx	r3
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d001      	beq.n	8012ad0 <_Z13doubles_equalddd+0x74>
 8012acc:	2301      	movs	r3, #1
 8012ace:	e000      	b.n	8012ad2 <_Z13doubles_equalddd+0x76>
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d001      	beq.n	8012ada <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	e01e      	b.n	8012b18 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8012ada:	4b13      	ldr	r3, [pc, #76]	; (8012b28 <_Z13doubles_equalddd+0xcc>)
 8012adc:	681c      	ldr	r4, [r3, #0]
 8012ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012ae2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012ae6:	f7ed fc0f 	bl	8000308 <__aeabi_dsub>
 8012aea:	4602      	mov	r2, r0
 8012aec:	460b      	mov	r3, r1
 8012aee:	ec43 2b17 	vmov	d7, r2, r3
 8012af2:	eeb0 0a47 	vmov.f32	s0, s14
 8012af6:	eef0 0a67 	vmov.f32	s1, s15
 8012afa:	47a0      	blx	r4
 8012afc:	ec53 2b10 	vmov	r2, r3, d0
 8012b00:	2101      	movs	r1, #1
 8012b02:	460c      	mov	r4, r1
 8012b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012b08:	f7ed fe2a 	bl	8000760 <__aeabi_dcmpge>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d101      	bne.n	8012b16 <_Z13doubles_equalddd+0xba>
 8012b12:	2300      	movs	r3, #0
 8012b14:	461c      	mov	r4, r3
 8012b16:	b2e3      	uxtb	r3, r4
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	371c      	adds	r7, #28
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd90      	pop	{r4, r7, pc}
 8012b20:	200000e8 	.word	0x200000e8
 8012b24:	200000ec 	.word	0x200000ec
 8012b28:	200000dc 	.word	0x200000dc

08012b2c <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	332c      	adds	r3, #44	; 0x2c
    }
 8012b38:	4618      	mov	r0, r3
 8012b3a:	370c      	adds	r7, #12
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr

08012b44 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
    {
 8012b4c:	4a0a      	ldr	r2, [pc, #40]	; (8012b78 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	601a      	str	r2, [r3, #0]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	332c      	adds	r3, #44	; 0x2c
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7ff fe00 	bl	801275c <_ZN10TestResultD1Ev>
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	331c      	adds	r3, #28
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7f6 f815 	bl	8008b90 <_ZN17ConsoleTestOutputD1Ev>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f000 f943 	bl	8012df4 <_ZN10UtestShellD1Ev>
    }
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	4618      	mov	r0, r3
 8012b72:	3708      	adds	r7, #8
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	080289b8 	.word	0x080289b8

08012b7c <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b082      	sub	sp, #8
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
    }
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7ff ffdd 	bl	8012b44 <_ZN22OutsideTestRunnerUTestD1Ev>
 8012b8a:	2164      	movs	r1, #100	; 0x64
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7f7 fd03 	bl	800a598 <_ZdlPvj>
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	4618      	mov	r0, r3
 8012b96:	3708      	adds	r7, #8
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b084      	sub	sp, #16
 8012ba0:	af02      	add	r7, sp, #8
 8012ba2:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	9300      	str	r3, [sp, #0]
 8012baa:	4b0d      	ldr	r3, [pc, #52]	; (8012be0 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8012bac:	4a0d      	ldr	r2, [pc, #52]	; (8012be4 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8012bae:	490e      	ldr	r1, [pc, #56]	; (8012be8 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8012bb0:	f000 f8f8 	bl	8012da4 <_ZN10UtestShellC1EPKcS1_S1_j>
 8012bb4:	4a0d      	ldr	r2, [pc, #52]	; (8012bec <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	601a      	str	r2, [r3, #0]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	331c      	adds	r3, #28
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7f5 ffd4 	bl	8008b6c <_ZN17ConsoleTestOutputC1Ev>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	331c      	adds	r3, #28
 8012bce:	4619      	mov	r1, r3
 8012bd0:	4610      	mov	r0, r2
 8012bd2:	f7ff fd8b 	bl	80126ec <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	08024f8c 	.word	0x08024f8c
 8012be4:	08024f9c 	.word	0x08024f9c
 8012be8:	08024fdc 	.word	0x08024fdc
 8012bec:	080289b8 	.word	0x080289b8

08012bf0 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	4801      	ldr	r0, [pc, #4]	; (8012bfc <__tcf_0+0xc>)
 8012bf6:	f7ff ffa5 	bl	8012b44 <_ZN22OutsideTestRunnerUTestD1Ev>
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	20000a54 	.word	0x20000a54

08012c00 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8012c04:	4b12      	ldr	r3, [pc, #72]	; (8012c50 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	f3bf 8f5b 	dmb	ish
 8012c0c:	b2db      	uxtb	r3, r3
 8012c0e:	f003 0301 	and.w	r3, r3, #1
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	bf0c      	ite	eq
 8012c16:	2301      	moveq	r3, #1
 8012c18:	2300      	movne	r3, #0
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d013      	beq.n	8012c48 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8012c20:	480b      	ldr	r0, [pc, #44]	; (8012c50 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012c22:	f00c ff29 	bl	801fa78 <__cxa_guard_acquire>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	bf14      	ite	ne
 8012c2c:	2301      	movne	r3, #1
 8012c2e:	2300      	moveq	r3, #0
 8012c30:	b2db      	uxtb	r3, r3
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d008      	beq.n	8012c48 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8012c36:	4807      	ldr	r0, [pc, #28]	; (8012c54 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8012c38:	f7ff ffb0 	bl	8012b9c <_ZN22OutsideTestRunnerUTestC1Ev>
 8012c3c:	4804      	ldr	r0, [pc, #16]	; (8012c50 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012c3e:	f00c ff27 	bl	801fa90 <__cxa_guard_release>
 8012c42:	4805      	ldr	r0, [pc, #20]	; (8012c58 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8012c44:	f00c ff4b 	bl	801fade <atexit>
    return instance_;
 8012c48:	4b02      	ldr	r3, [pc, #8]	; (8012c54 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	bd80      	pop	{r7, pc}
 8012c4e:	bf00      	nop
 8012c50:	20000ab8 	.word	0x20000ab8
 8012c54:	20000a54 	.word	0x20000a54
 8012c58:	08012bf1 	.word	0x08012bf1

08012c5c <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	330c      	adds	r3, #12
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	4798      	blx	r3
    }
 8012c70:	bf00      	nop
 8012c72:	3708      	adds	r7, #8
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}

08012c78 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	3314      	adds	r3, #20
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	4798      	blx	r3
    }
 8012c8c:	bf00      	nop
 8012c8e:	3708      	adds	r7, #8
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}

08012c94 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	3310      	adds	r3, #16
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	4798      	blx	r3
    }
 8012ca8:	bf00      	nop
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8012cb0:	b480      	push	{r7}
 8012cb2:	b085      	sub	sp, #20
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	60f8      	str	r0, [r7, #12]
 8012cb8:	60b9      	str	r1, [r7, #8]
 8012cba:	607a      	str	r2, [r7, #4]
 8012cbc:	603b      	str	r3, [r7, #0]
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	68ba      	ldr	r2, [r7, #8]
 8012cc2:	601a      	str	r2, [r3, #0]
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	687a      	ldr	r2, [r7, #4]
 8012cc8:	605a      	str	r2, [r3, #4]
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	683a      	ldr	r2, [r7, #0]
 8012cce:	609a      	str	r2, [r3, #8]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3714      	adds	r7, #20
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cdc:	4770      	bx	lr

08012cde <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8012cde:	b580      	push	{r7, lr}
 8012ce0:	b086      	sub	sp, #24
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	685b      	ldr	r3, [r3, #4]
 8012cf4:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	689b      	ldr	r3, [r3, #8]
 8012cfa:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	3394      	adds	r3, #148	; 0x94
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	68ba      	ldr	r2, [r7, #8]
 8012d06:	68f9      	ldr	r1, [r7, #12]
 8012d08:	6938      	ldr	r0, [r7, #16]
 8012d0a:	4798      	blx	r3
    }
 8012d0c:	bf00      	nop
 8012d0e:	3718      	adds	r7, #24
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b086      	sub	sp, #24
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012d26:	697b      	ldr	r3, [r7, #20]
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	689b      	ldr	r3, [r3, #8]
 8012d30:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8012d32:	4b05      	ldr	r3, [pc, #20]	; (8012d48 <helperDoRunOneTestSeperateProcess+0x34>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	68ba      	ldr	r2, [r7, #8]
 8012d38:	68f9      	ldr	r1, [r7, #12]
 8012d3a:	6938      	ldr	r0, [r7, #16]
 8012d3c:	4798      	blx	r3
    }
 8012d3e:	bf00      	nop
 8012d40:	3718      	adds	r7, #24
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	2000009c 	.word	0x2000009c

08012d4c <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8012d4c:	b480      	push	{r7}
 8012d4e:	b083      	sub	sp, #12
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8012d54:	4a0f      	ldr	r2, [pc, #60]	; (8012d94 <_ZN10UtestShellC1Ev+0x48>)
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	601a      	str	r2, [r3, #0]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	4a0e      	ldr	r2, [pc, #56]	; (8012d98 <_ZN10UtestShellC1Ev+0x4c>)
 8012d5e:	605a      	str	r2, [r3, #4]
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	4a0e      	ldr	r2, [pc, #56]	; (8012d9c <_ZN10UtestShellC1Ev+0x50>)
 8012d64:	609a      	str	r2, [r3, #8]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	4a0d      	ldr	r2, [pc, #52]	; (8012da0 <_ZN10UtestShellC1Ev+0x54>)
 8012d6a:	60da      	str	r2, [r3, #12]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	611a      	str	r2, [r3, #16]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2200      	movs	r2, #0
 8012d76:	615a      	str	r2, [r3, #20]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	761a      	strb	r2, [r3, #24]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2200      	movs	r2, #0
 8012d82:	765a      	strb	r2, [r3, #25]
{
}
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	4618      	mov	r0, r3
 8012d88:	370c      	adds	r7, #12
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d90:	4770      	bx	lr
 8012d92:	bf00      	nop
 8012d94:	08028a78 	.word	0x08028a78
 8012d98:	08025028 	.word	0x08025028
 8012d9c:	0802503c 	.word	0x0802503c
 8012da0:	0802504c 	.word	0x0802504c

08012da4 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	607a      	str	r2, [r7, #4]
 8012db0:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8012db2:	4a0f      	ldr	r2, [pc, #60]	; (8012df0 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	601a      	str	r2, [r3, #0]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	68ba      	ldr	r2, [r7, #8]
 8012dbc:	605a      	str	r2, [r3, #4]
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	687a      	ldr	r2, [r7, #4]
 8012dc2:	609a      	str	r2, [r3, #8]
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	683a      	ldr	r2, [r7, #0]
 8012dc8:	60da      	str	r2, [r3, #12]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	69ba      	ldr	r2, [r7, #24]
 8012dce:	611a      	str	r2, [r3, #16]
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	615a      	str	r2, [r3, #20]
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	2200      	movs	r2, #0
 8012dda:	761a      	strb	r2, [r3, #24]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	2200      	movs	r2, #0
 8012de0:	765a      	strb	r2, [r3, #25]
{
}
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	4618      	mov	r0, r3
 8012de6:	3714      	adds	r7, #20
 8012de8:	46bd      	mov	sp, r7
 8012dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dee:	4770      	bx	lr
 8012df0:	08028a78 	.word	0x08028a78

08012df4 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8012df4:	b480      	push	{r7}
 8012df6:	b083      	sub	sp, #12
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	4a04      	ldr	r2, [pc, #16]	; (8012e10 <_ZN10UtestShellD1Ev+0x1c>)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	601a      	str	r2, [r3, #0]
{
}
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	4618      	mov	r0, r3
 8012e06:	370c      	adds	r7, #12
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0e:	4770      	bx	lr
 8012e10:	08028a78 	.word	0x08028a78

08012e14 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
}
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f7ff ffe9 	bl	8012df4 <_ZN10UtestShellD1Ev>
 8012e22:	211c      	movs	r1, #28
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f7f7 fbb7 	bl	800a598 <_ZdlPvj>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3708      	adds	r7, #8
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b082      	sub	sp, #8
 8012e38:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	3310      	adds	r3, #16
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	4798      	blx	r3
}
 8012e4a:	bf00      	nop
 8012e4c:	3708      	adds	r7, #8
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
	...

08012e54 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 8012e58:	4b02      	ldr	r3, [pc, #8]	; (8012e64 <_ZN10UtestShell5crashEv+0x10>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	4798      	blx	r3
}
 8012e5e:	bf00      	nop
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	20000098 	.word	0x20000098

08012e68 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b088      	sub	sp, #32
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2200      	movs	r2, #0
 8012e78:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	3324      	adds	r3, #36	; 0x24
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8012e86:	f107 0014 	add.w	r0, r7, #20
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	68ba      	ldr	r2, [r7, #8]
 8012e8e:	68f9      	ldr	r1, [r7, #12]
 8012e90:	f7ff ff0e 	bl	8012cb0 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	337c      	adds	r3, #124	; 0x7c
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	68f8      	ldr	r0, [r7, #12]
 8012e9e:	4798      	blx	r3
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d007      	beq.n	8012eb6 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8012ea6:	4b09      	ldr	r3, [pc, #36]	; (8012ecc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	f107 0214 	add.w	r2, r7, #20
 8012eae:	4611      	mov	r1, r2
 8012eb0:	4807      	ldr	r0, [pc, #28]	; (8012ed0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8012eb2:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8012eb4:	e006      	b.n	8012ec4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8012eb6:	4b05      	ldr	r3, [pc, #20]	; (8012ecc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	f107 0214 	add.w	r2, r7, #20
 8012ebe:	4611      	mov	r1, r2
 8012ec0:	4804      	ldr	r0, [pc, #16]	; (8012ed4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8012ec2:	4798      	blx	r3
}
 8012ec4:	bf00      	nop
 8012ec6:	3720      	adds	r7, #32
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	200000a4 	.word	0x200000a4
 8012ed0:	08012d15 	.word	0x08012d15
 8012ed4:	08012cdf 	.word	0x08012cdf

08012ed8 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8012ed8:	b590      	push	{r4, r7, lr}
 8012eda:	b083      	sub	sp, #12
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
    return new Utest();
 8012ee0:	22d3      	movs	r2, #211	; 0xd3
 8012ee2:	4906      	ldr	r1, [pc, #24]	; (8012efc <_ZN10UtestShell10createTestEv+0x24>)
 8012ee4:	2004      	movs	r0, #4
 8012ee6:	f7f7 fb43 	bl	800a570 <_ZnwjPKci>
 8012eea:	4604      	mov	r4, r0
 8012eec:	4620      	mov	r0, r4
 8012eee:	f001 fb0f 	bl	8014510 <_ZN5UtestC1Ev>
 8012ef2:	4623      	mov	r3, r4
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	370c      	adds	r7, #12
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd90      	pop	{r4, r7, pc}
 8012efc:	0802505c 	.word	0x0802505c

08012f00 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	6039      	str	r1, [r7, #0]
    delete test;
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d004      	beq.n	8012f1a <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8012f10:	681a      	ldr	r2, [r3, #0]
 8012f12:	3204      	adds	r2, #4
 8012f14:	6812      	ldr	r2, [r2, #0]
 8012f16:	4618      	mov	r0, r3
 8012f18:	4790      	blx	r2
}
 8012f1a:	bf00      	nop
 8012f1c:	3708      	adds	r7, #8
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
	...

08012f24 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b088      	sub	sp, #32
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	60f8      	str	r0, [r7, #12]
 8012f2c:	60b9      	str	r1, [r7, #8]
 8012f2e:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	333c      	adds	r3, #60	; 0x3c
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	4940      	ldr	r1, [pc, #256]	; (801303c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	3314      	adds	r3, #20
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	687a      	ldr	r2, [r7, #4]
 8012f48:	68f9      	ldr	r1, [r7, #12]
 8012f4a:	68b8      	ldr	r0, [r7, #8]
 8012f4c:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	333c      	adds	r3, #60	; 0x3c
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	493a      	ldr	r1, [pc, #232]	; (8013040 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8012f5c:	f001 faae 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8012f60:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8012f62:	68f8      	ldr	r0, [r7, #12]
 8012f64:	f001 fa90 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8012f68:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 8012f6a:	6879      	ldr	r1, [r7, #4]
 8012f6c:	68f8      	ldr	r0, [r7, #12]
 8012f6e:	f001 fa6b 	bl	8014448 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8012f72:	68f9      	ldr	r1, [r7, #12]
 8012f74:	68f8      	ldr	r0, [r7, #12]
 8012f76:	f001 fa77 	bl	8014468 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	333c      	adds	r3, #60	; 0x3c
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	4930      	ldr	r1, [pc, #192]	; (8013044 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	4798      	blx	r3
    Utest* testToRun = createTest();
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	3388      	adds	r3, #136	; 0x88
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	68f8      	ldr	r0, [r7, #12]
 8012f92:	4798      	blx	r3
 8012f94:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	333c      	adds	r3, #60	; 0x3c
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	492a      	ldr	r1, [pc, #168]	; (8013048 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	333c      	adds	r3, #60	; 0x3c
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	4927      	ldr	r1, [pc, #156]	; (801304c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	4798      	blx	r3
    testToRun->run();
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	3308      	adds	r3, #8
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	6978      	ldr	r0, [r7, #20]
 8012fbc:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	333c      	adds	r3, #60	; 0x3c
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	4922      	ldr	r1, [pc, #136]	; (8013050 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8012fcc:	69f9      	ldr	r1, [r7, #28]
 8012fce:	68f8      	ldr	r0, [r7, #12]
 8012fd0:	f001 fa4a 	bl	8014468 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8012fd4:	69b9      	ldr	r1, [r7, #24]
 8012fd6:	68f8      	ldr	r0, [r7, #12]
 8012fd8:	f001 fa36 	bl	8014448 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	333c      	adds	r3, #60	; 0x3c
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	491b      	ldr	r1, [pc, #108]	; (8013054 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	4798      	blx	r3
    destroyTest(testToRun);
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	338c      	adds	r3, #140	; 0x8c
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	6979      	ldr	r1, [r7, #20]
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	333c      	adds	r3, #60	; 0x3c
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	4915      	ldr	r1, [pc, #84]	; (8013058 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 8013002:	6878      	ldr	r0, [r7, #4]
 8013004:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	333c      	adds	r3, #60	; 0x3c
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	4913      	ldr	r1, [pc, #76]	; (801305c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	3318      	adds	r3, #24
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	687a      	ldr	r2, [r7, #4]
 801301e:	68f9      	ldr	r1, [r7, #12]
 8013020:	68b8      	ldr	r0, [r7, #8]
 8013022:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	333c      	adds	r3, #60	; 0x3c
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	490c      	ldr	r1, [pc, #48]	; (8013060 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	4798      	blx	r3
}
 8013032:	bf00      	nop
 8013034:	3720      	adds	r7, #32
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	08025070 	.word	0x08025070
 8013040:	08025094 	.word	0x08025094
 8013044:	080250b4 	.word	0x080250b4
 8013048:	080250d0 	.word	0x080250d0
 801304c:	080250ec 	.word	0x080250ec
 8013050:	08025108 	.word	0x08025108
 8013054:	08025120 	.word	0x08025120
 8013058:	0802513c 	.word	0x0802513c
 801305c:	08025158 	.word	0x08025158
 8013060:	0802517c 	.word	0x0802517c

08013064 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8013064:	b480      	push	{r7}
 8013066:	b083      	sub	sp, #12
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
    return next_;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	695b      	ldr	r3, [r3, #20]
}
 8013070:	4618      	mov	r0, r3
 8013072:	370c      	adds	r7, #12
 8013074:	46bd      	mov	sp, r7
 8013076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307a:	4770      	bx	lr

0801307c <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 801307c:	b480      	push	{r7}
 801307e:	b083      	sub	sp, #12
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
    next_ = test;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	683a      	ldr	r2, [r7, #0]
 801308a:	615a      	str	r2, [r3, #20]
    return this;
 801308c:	687b      	ldr	r3, [r7, #4]
}
 801308e:	4618      	mov	r0, r3
 8013090:	370c      	adds	r7, #12
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr

0801309a <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 801309a:	b580      	push	{r7, lr}
 801309c:	b082      	sub	sp, #8
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	695b      	ldr	r3, [r3, #20]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d00b      	beq.n	80130c2 <_ZN10UtestShell10countTestsEv+0x28>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	695a      	ldr	r2, [r3, #20]
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	695b      	ldr	r3, [r3, #20]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	3310      	adds	r3, #16
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	4610      	mov	r0, r2
 80130ba:	4798      	blx	r3
 80130bc:	4603      	mov	r3, r0
 80130be:	3301      	adds	r3, #1
 80130c0:	e000      	b.n	80130c4 <_ZN10UtestShell10countTestsEv+0x2a>
 80130c2:	2301      	movs	r3, #1
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3708      	adds	r7, #8
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
    return "TEST";
 80130d6:	4904      	ldr	r1, [pc, #16]	; (80130e8 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7f9 fe0c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
}
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	3708      	adds	r7, #8
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}
 80130e6:	bf00      	nop
 80130e8:	080251a0 	.word	0x080251a0

080130ec <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b082      	sub	sp, #8
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	689b      	ldr	r3, [r3, #8]
 80130fa:	4619      	mov	r1, r3
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f7f9 fdfa 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
}
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	3708      	adds	r7, #8
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}

0801310a <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 801310a:	b580      	push	{r7, lr}
 801310c:	b082      	sub	sp, #8
 801310e:	af00      	add	r7, sp, #0
 8013110:	6078      	str	r0, [r7, #4]
 8013112:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	4619      	mov	r1, r3
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f7f9 fdeb 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
}
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	33a0      	adds	r3, #160	; 0xa0
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	687a      	ldr	r2, [r7, #4]
 801313c:	6839      	ldr	r1, [r7, #0]
 801313e:	4610      	mov	r0, r2
 8013140:	4798      	blx	r3
    formattedName += "(";
 8013142:	490e      	ldr	r1, [pc, #56]	; (801317c <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f7fa fa1d 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	685b      	ldr	r3, [r3, #4]
 801314e:	4619      	mov	r1, r3
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	f7fa fa17 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 8013156:	490a      	ldr	r1, [pc, #40]	; (8013180 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7fa fa13 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	689b      	ldr	r3, [r3, #8]
 8013162:	4619      	mov	r1, r3
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f7fa fa0d 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 801316a:	4906      	ldr	r1, [pc, #24]	; (8013184 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f7fa fa09 	bl	800d584 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8013172:	bf00      	nop
}
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	3708      	adds	r7, #8
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}
 801317c:	080251a8 	.word	0x080251a8
 8013180:	080251ac 	.word	0x080251ac
 8013184:	080251b0 	.word	0x080251b0

08013188 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8013188:	b480      	push	{r7}
 801318a:	b083      	sub	sp, #12
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	7e5b      	ldrb	r3, [r3, #25]
}
 8013194:	4618      	mov	r0, r3
 8013196:	370c      	adds	r7, #12
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr

080131a0 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f001 f96d 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 80131ae:	4603      	mov	r3, r0
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	3228      	adds	r2, #40	; 0x28
 80131b4:	6812      	ldr	r2, [r2, #0]
 80131b6:	4618      	mov	r0, r3
 80131b8:	4790      	blx	r2
}
 80131ba:	bf00      	nop
 80131bc:	3708      	adds	r7, #8
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}

080131c2 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 80131c2:	b480      	push	{r7}
 80131c4:	b083      	sub	sp, #12
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	6078      	str	r0, [r7, #4]
    return true;
 80131ca:	2301      	movs	r3, #1
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	370c      	adds	r7, #12
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr

080131d8 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 80131d8:	b480      	push	{r7}
 80131da:	b083      	sub	sp, #12
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	7e1b      	ldrb	r3, [r3, #24]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	370c      	adds	r7, #12
 80131e8:	46bd      	mov	sp, r7
 80131ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ee:	4770      	bx	lr

080131f0 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 80131f0:	b480      	push	{r7}
 80131f2:	b083      	sub	sp, #12
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2201      	movs	r2, #1
 80131fc:	761a      	strb	r2, [r3, #24]
}
 80131fe:	bf00      	nop
 8013200:	370c      	adds	r7, #12
 8013202:	46bd      	mov	sp, r7
 8013204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013208:	4770      	bx	lr

0801320a <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 801320a:	b480      	push	{r7}
 801320c:	b083      	sub	sp, #12
 801320e:	af00      	add	r7, sp, #0
 8013210:	6078      	str	r0, [r7, #4]

}
 8013212:	bf00      	nop
 8013214:	370c      	adds	r7, #12
 8013216:	46bd      	mov	sp, r7
 8013218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321c:	4770      	bx	lr

0801321e <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 801321e:	b480      	push	{r7}
 8013220:	b083      	sub	sp, #12
 8013222:	af00      	add	r7, sp, #0
 8013224:	6078      	str	r0, [r7, #4]
 8013226:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	683a      	ldr	r2, [r7, #0]
 801322c:	60da      	str	r2, [r3, #12]
}
 801322e:	bf00      	nop
 8013230:	370c      	adds	r7, #12
 8013232:	46bd      	mov	sp, r7
 8013234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013238:	4770      	bx	lr

0801323a <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 801323a:	b480      	push	{r7}
 801323c:	b083      	sub	sp, #12
 801323e:	af00      	add	r7, sp, #0
 8013240:	6078      	str	r0, [r7, #4]
 8013242:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	683a      	ldr	r2, [r7, #0]
 8013248:	611a      	str	r2, [r3, #16]
}
 801324a:	bf00      	nop
 801324c:	370c      	adds	r7, #12
 801324e:	46bd      	mov	sp, r7
 8013250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013254:	4770      	bx	lr

08013256 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 8013256:	b480      	push	{r7}
 8013258:	b083      	sub	sp, #12
 801325a:	af00      	add	r7, sp, #0
 801325c:	6078      	str	r0, [r7, #4]
 801325e:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	683a      	ldr	r2, [r7, #0]
 8013264:	605a      	str	r2, [r3, #4]
}
 8013266:	bf00      	nop
 8013268:	370c      	adds	r7, #12
 801326a:	46bd      	mov	sp, r7
 801326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013270:	4770      	bx	lr

08013272 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8013272:	b480      	push	{r7}
 8013274:	b083      	sub	sp, #12
 8013276:	af00      	add	r7, sp, #0
 8013278:	6078      	str	r0, [r7, #4]
 801327a:	6039      	str	r1, [r7, #0]
    name_ = testName;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	683a      	ldr	r2, [r7, #0]
 8013280:	609a      	str	r2, [r3, #8]
}
 8013282:	bf00      	nop
 8013284:	370c      	adds	r7, #12
 8013286:	46bd      	mov	sp, r7
 8013288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328c:	4770      	bx	lr

0801328e <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 801328e:	b580      	push	{r7, lr}
 8013290:	b082      	sub	sp, #8
 8013292:	af00      	add	r7, sp, #0
 8013294:	6078      	str	r0, [r7, #4]
 8013296:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	68db      	ldr	r3, [r3, #12]
 801329c:	4619      	mov	r1, r3
 801329e:	6878      	ldr	r0, [r7, #4]
 80132a0:	f7f9 fd29 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
}
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	3708      	adds	r7, #8
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}

080132ac <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 80132ac:	b480      	push	{r7}
 80132ae:	b083      	sub	sp, #12
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	691b      	ldr	r3, [r3, #16]
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	370c      	adds	r7, #12
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr

080132c4 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 80132c4:	b590      	push	{r4, r7, lr}
 80132c6:	b087      	sub	sp, #28
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d101      	bne.n	80132da <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 80132d6:	2301      	movs	r3, #1
 80132d8:	e01f      	b.n	801331a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d01b      	beq.n	8013318 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 80132e0:	f107 0310 	add.w	r3, r7, #16
 80132e4:	68b9      	ldr	r1, [r7, #8]
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7f9 fd05 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80132ec:	f107 0310 	add.w	r3, r7, #16
 80132f0:	4619      	mov	r1, r3
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f00c fb93 	bl	801fa1e <_ZNK10TestFilter5matchERK12SimpleString>
 80132f8:	4603      	mov	r3, r0
 80132fa:	461c      	mov	r4, r3
 80132fc:	f107 0310 	add.w	r3, r7, #16
 8013300:	4618      	mov	r0, r3
 8013302:	f7fa f8b0 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013306:	2c00      	cmp	r4, #0
 8013308:	d001      	beq.n	801330e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 801330a:	2301      	movs	r3, #1
 801330c:	e005      	b.n	801331a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 801330e:	6878      	ldr	r0, [r7, #4]
 8013310:	f00c fb5f 	bl	801f9d2 <_ZNK10TestFilter7getNextEv>
 8013314:	6078      	str	r0, [r7, #4]
 8013316:	e7e0      	b.n	80132da <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8013318:	2300      	movs	r3, #0
}
 801331a:	4618      	mov	r0, r3
 801331c:	371c      	adds	r7, #28
 801331e:	46bd      	mov	sp, r7
 8013320:	bd90      	pop	{r4, r7, pc}

08013322 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8013322:	b580      	push	{r7, lr}
 8013324:	b084      	sub	sp, #16
 8013326:	af00      	add	r7, sp, #0
 8013328:	60f8      	str	r0, [r7, #12]
 801332a:	60b9      	str	r1, [r7, #8]
 801332c:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	685b      	ldr	r3, [r3, #4]
 8013332:	68ba      	ldr	r2, [r7, #8]
 8013334:	4619      	mov	r1, r3
 8013336:	68f8      	ldr	r0, [r7, #12]
 8013338:	f7ff ffc4 	bl	80132c4 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 801333c:	4603      	mov	r3, r0
 801333e:	2b00      	cmp	r3, #0
 8013340:	d00b      	beq.n	801335a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	689b      	ldr	r3, [r3, #8]
 8013346:	687a      	ldr	r2, [r7, #4]
 8013348:	4619      	mov	r1, r3
 801334a:	68f8      	ldr	r0, [r7, #12]
 801334c:	f7ff ffba 	bl	80132c4 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8013350:	4603      	mov	r3, r0
 8013352:	2b00      	cmp	r3, #0
 8013354:	d001      	beq.n	801335a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8013356:	2301      	movs	r3, #1
 8013358:	e000      	b.n	801335c <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 801335a:	2300      	movs	r3, #0
}
 801335c:	4618      	mov	r0, r3
 801335e:	3710      	adds	r7, #16
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}

08013364 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8013364:	b590      	push	{r4, r7, lr}
 8013366:	b083      	sub	sp, #12
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
 801336c:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	339c      	adds	r3, #156	; 0x9c
 8013374:	681c      	ldr	r4, [r3, #0]
 8013376:	f001 f8b1 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801337a:	4603      	mov	r3, r0
 801337c:	461a      	mov	r2, r3
 801337e:	6839      	ldr	r1, [r7, #0]
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8013384:	bf00      	nop
 8013386:	370c      	adds	r7, #12
 8013388:	46bd      	mov	sp, r7
 801338a:	bd90      	pop	{r4, r7, pc}

0801338c <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	60f8      	str	r0, [r7, #12]
 8013394:	60b9      	str	r1, [r7, #8]
 8013396:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2201      	movs	r2, #1
 801339c:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 801339e:	68f8      	ldr	r0, [r7, #12]
 80133a0:	f001 f872 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 80133a4:	4603      	mov	r3, r0
 80133a6:	681a      	ldr	r2, [r3, #0]
 80133a8:	3234      	adds	r2, #52	; 0x34
 80133aa:	6812      	ldr	r2, [r2, #0]
 80133ac:	68b9      	ldr	r1, [r7, #8]
 80133ae:	4618      	mov	r0, r3
 80133b0:	4790      	blx	r2
    terminator.exitCurrentTest();
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80133bc:	bf00      	nop
 80133be:	3710      	adds	r7, #16
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b082      	sub	sp, #8
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	6838      	ldr	r0, [r7, #0]
 80133d6:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80133d8:	bf00      	nop
 80133da:	3708      	adds	r7, #8
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}

080133e0 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80133e0:	b590      	push	{r4, r7, lr}
 80133e2:	b09d      	sub	sp, #116	; 0x74
 80133e4:	af04      	add	r7, sp, #16
 80133e6:	60f8      	str	r0, [r7, #12]
 80133e8:	607a      	str	r2, [r7, #4]
 80133ea:	603b      	str	r3, [r7, #0]
 80133ec:	460b      	mov	r3, r1
 80133ee:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80133f0:	68f8      	ldr	r0, [r7, #12]
 80133f2:	f001 f849 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 80133f6:	4603      	mov	r3, r0
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	3228      	adds	r2, #40	; 0x28
 80133fc:	6812      	ldr	r2, [r2, #0]
 80133fe:	4618      	mov	r0, r3
 8013400:	4790      	blx	r2
    if (!condition)
 8013402:	7afb      	ldrb	r3, [r7, #11]
 8013404:	f083 0301 	eor.w	r3, r3, #1
 8013408:	b2db      	uxtb	r3, r3
 801340a:	2b00      	cmp	r3, #0
 801340c:	d03f      	beq.n	801348e <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	339c      	adds	r3, #156	; 0x9c
 8013414:	681c      	ldr	r4, [r3, #0]
 8013416:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801341a:	6879      	ldr	r1, [r7, #4]
 801341c:	4618      	mov	r0, r3
 801341e:	f7f9 fc6a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013422:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013426:	6839      	ldr	r1, [r7, #0]
 8013428:	4618      	mov	r0, r3
 801342a:	f7f9 fc64 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801342e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013432:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013434:	4618      	mov	r0, r3
 8013436:	f7f9 fc5e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801343a:	f107 0014 	add.w	r0, r7, #20
 801343e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013442:	9302      	str	r3, [sp, #8]
 8013444:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013448:	9301      	str	r3, [sp, #4]
 801344a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801344e:	9300      	str	r3, [sp, #0]
 8013450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013452:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013454:	68f9      	ldr	r1, [r7, #12]
 8013456:	f7fb ff6b 	bl	800f330 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801345a:	f107 0314 	add.w	r3, r7, #20
 801345e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013460:	4619      	mov	r1, r3
 8013462:	68f8      	ldr	r0, [r7, #12]
 8013464:	47a0      	blx	r4
 8013466:	f107 0314 	add.w	r3, r7, #20
 801346a:	4618      	mov	r0, r3
 801346c:	f7fc fdce 	bl	801000c <_ZN12CheckFailureD1Ev>
 8013470:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013474:	4618      	mov	r0, r3
 8013476:	f7f9 fff6 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801347a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801347e:	4618      	mov	r0, r3
 8013480:	f7f9 fff1 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013484:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013488:	4618      	mov	r0, r3
 801348a:	f7f9 ffec 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 801348e:	bf00      	nop
 8013490:	3764      	adds	r7, #100	; 0x64
 8013492:	46bd      	mov	sp, r7
 8013494:	bd90      	pop	{r4, r7, pc}

08013496 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013496:	b590      	push	{r4, r7, lr}
 8013498:	b097      	sub	sp, #92	; 0x5c
 801349a:	af02      	add	r7, sp, #8
 801349c:	60f8      	str	r0, [r7, #12]
 801349e:	60b9      	str	r1, [r7, #8]
 80134a0:	607a      	str	r2, [r7, #4]
 80134a2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80134a4:	68f8      	ldr	r0, [r7, #12]
 80134a6:	f000 ffef 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 80134aa:	4603      	mov	r3, r0
 80134ac:	681a      	ldr	r2, [r3, #0]
 80134ae:	3228      	adds	r2, #40	; 0x28
 80134b0:	6812      	ldr	r2, [r2, #0]
 80134b2:	4618      	mov	r0, r3
 80134b4:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	339c      	adds	r3, #156	; 0x9c
 80134bc:	681c      	ldr	r4, [r3, #0]
 80134be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134c2:	68b9      	ldr	r1, [r7, #8]
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7f9 fc16 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80134ca:	f107 0014 	add.w	r0, r7, #20
 80134ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134d2:	9300      	str	r3, [sp, #0]
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	687a      	ldr	r2, [r7, #4]
 80134d8:	68f9      	ldr	r1, [r7, #12]
 80134da:	f7fb ff71 	bl	800f3c0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 80134de:	f107 0314 	add.w	r3, r7, #20
 80134e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80134e4:	4619      	mov	r1, r3
 80134e6:	68f8      	ldr	r0, [r7, #12]
 80134e8:	47a0      	blx	r4
 80134ea:	f107 0314 	add.w	r3, r7, #20
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7f7 fc16 	bl	800ad20 <_ZN11FailFailureD1Ev>
 80134f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7f9 ffb4 	bl	800d466 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 80134fe:	bf00      	nop
 8013500:	3754      	adds	r7, #84	; 0x54
 8013502:	46bd      	mov	sp, r7
 8013504:	bd90      	pop	{r4, r7, pc}

08013506 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013506:	b590      	push	{r4, r7, lr}
 8013508:	b0a7      	sub	sp, #156	; 0x9c
 801350a:	af04      	add	r7, sp, #16
 801350c:	60f8      	str	r0, [r7, #12]
 801350e:	60b9      	str	r1, [r7, #8]
 8013510:	607a      	str	r2, [r7, #4]
 8013512:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013514:	68f8      	ldr	r0, [r7, #12]
 8013516:	f000 ffb7 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 801351a:	4603      	mov	r3, r0
 801351c:	681a      	ldr	r2, [r3, #0]
 801351e:	3228      	adds	r2, #40	; 0x28
 8013520:	6812      	ldr	r2, [r2, #0]
 8013522:	4618      	mov	r0, r3
 8013524:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d102      	bne.n	8013532 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d068      	beq.n	8013604 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d002      	beq.n	801353e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8013538:	68bb      	ldr	r3, [r7, #8]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d12a      	bne.n	8013594 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	339c      	adds	r3, #156	; 0x9c
 8013544:	681c      	ldr	r4, [r3, #0]
 8013546:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801354a:	6839      	ldr	r1, [r7, #0]
 801354c:	4618      	mov	r0, r3
 801354e:	f7f9 fbd2 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013552:	f107 0010 	add.w	r0, r7, #16
 8013556:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801355a:	9302      	str	r3, [sp, #8]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	9301      	str	r3, [sp, #4]
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	9300      	str	r3, [sp, #0]
 8013564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013568:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801356c:	68f9      	ldr	r1, [r7, #12]
 801356e:	f7fc f9ad 	bl	800f8cc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013572:	f107 0310 	add.w	r3, r7, #16
 8013576:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801357a:	4619      	mov	r1, r3
 801357c:	68f8      	ldr	r0, [r7, #12]
 801357e:	47a0      	blx	r4
 8013580:	f107 0310 	add.w	r3, r7, #16
 8013584:	4618      	mov	r0, r3
 8013586:	f7fc fcb9 	bl	800fefc <_ZN18StringEqualFailureD1Ev>
 801358a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801358e:	4618      	mov	r0, r3
 8013590:	f7f9 ff69 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8013594:	6879      	ldr	r1, [r7, #4]
 8013596:	68b8      	ldr	r0, [r7, #8]
 8013598:	f7f9 f9ea 	bl	800c970 <_ZN12SimpleString6StrCmpEPKcS1_>
 801359c:	4603      	mov	r3, r0
 801359e:	2b00      	cmp	r3, #0
 80135a0:	bf14      	ite	ne
 80135a2:	2301      	movne	r3, #1
 80135a4:	2300      	moveq	r3, #0
 80135a6:	b2db      	uxtb	r3, r3
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d02c      	beq.n	8013606 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	339c      	adds	r3, #156	; 0x9c
 80135b2:	681c      	ldr	r4, [r3, #0]
 80135b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80135b8:	6839      	ldr	r1, [r7, #0]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f7f9 fb9b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80135c0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80135c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80135c8:	9302      	str	r3, [sp, #8]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	9301      	str	r3, [sp, #4]
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	9300      	str	r3, [sp, #0]
 80135d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80135d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80135da:	68f9      	ldr	r1, [r7, #12]
 80135dc:	f7fc f976 	bl	800f8cc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80135e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80135e4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80135e8:	4619      	mov	r1, r3
 80135ea:	68f8      	ldr	r0, [r7, #12]
 80135ec:	47a0      	blx	r4
 80135ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80135f2:	4618      	mov	r0, r3
 80135f4:	f7fc fc82 	bl	800fefc <_ZN18StringEqualFailureD1Ev>
 80135f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7f9 ff32 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013602:	e000      	b.n	8013606 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013604:	bf00      	nop
}
 8013606:	378c      	adds	r7, #140	; 0x8c
 8013608:	46bd      	mov	sp, r7
 801360a:	bd90      	pop	{r4, r7, pc}

0801360c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801360c:	b590      	push	{r4, r7, lr}
 801360e:	b0a7      	sub	sp, #156	; 0x9c
 8013610:	af04      	add	r7, sp, #16
 8013612:	60f8      	str	r0, [r7, #12]
 8013614:	60b9      	str	r1, [r7, #8]
 8013616:	607a      	str	r2, [r7, #4]
 8013618:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801361a:	68f8      	ldr	r0, [r7, #12]
 801361c:	f000 ff34 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8013620:	4603      	mov	r3, r0
 8013622:	681a      	ldr	r2, [r3, #0]
 8013624:	3228      	adds	r2, #40	; 0x28
 8013626:	6812      	ldr	r2, [r2, #0]
 8013628:	4618      	mov	r0, r3
 801362a:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d102      	bne.n	8013638 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d06b      	beq.n	8013710 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d002      	beq.n	8013644 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d12b      	bne.n	801369c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	339c      	adds	r3, #156	; 0x9c
 801364a:	681c      	ldr	r4, [r3, #0]
 801364c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013650:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013654:	4618      	mov	r0, r3
 8013656:	f7f9 fb4e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801365a:	f107 0010 	add.w	r0, r7, #16
 801365e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013662:	9302      	str	r3, [sp, #8]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	9301      	str	r3, [sp, #4]
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	9300      	str	r3, [sp, #0]
 801366c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013670:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013674:	68f9      	ldr	r1, [r7, #12]
 8013676:	f7fc f929 	bl	800f8cc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801367a:	f107 0310 	add.w	r3, r7, #16
 801367e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013682:	4619      	mov	r1, r3
 8013684:	68f8      	ldr	r0, [r7, #12]
 8013686:	47a0      	blx	r4
 8013688:	f107 0310 	add.w	r3, r7, #16
 801368c:	4618      	mov	r0, r3
 801368e:	f7fc fc35 	bl	800fefc <_ZN18StringEqualFailureD1Ev>
 8013692:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013696:	4618      	mov	r0, r3
 8013698:	f7f9 fee5 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 801369c:	683a      	ldr	r2, [r7, #0]
 801369e:	6879      	ldr	r1, [r7, #4]
 80136a0:	68b8      	ldr	r0, [r7, #8]
 80136a2:	f7f9 f9a4 	bl	800c9ee <_ZN12SimpleString7StrNCmpEPKcS1_j>
 80136a6:	4603      	mov	r3, r0
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	bf14      	ite	ne
 80136ac:	2301      	movne	r3, #1
 80136ae:	2300      	moveq	r3, #0
 80136b0:	b2db      	uxtb	r3, r3
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d02d      	beq.n	8013712 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	339c      	adds	r3, #156	; 0x9c
 80136bc:	681c      	ldr	r4, [r3, #0]
 80136be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80136c2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7f9 fb15 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80136cc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80136d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80136d4:	9302      	str	r3, [sp, #8]
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	9301      	str	r3, [sp, #4]
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	9300      	str	r3, [sp, #0]
 80136de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80136e2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80136e6:	68f9      	ldr	r1, [r7, #12]
 80136e8:	f7fc f8f0 	bl	800f8cc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80136ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80136f0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80136f4:	4619      	mov	r1, r3
 80136f6:	68f8      	ldr	r0, [r7, #12]
 80136f8:	47a0      	blx	r4
 80136fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fc fbfc 	bl	800fefc <_ZN18StringEqualFailureD1Ev>
 8013704:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013708:	4618      	mov	r0, r3
 801370a:	f7f9 feac 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801370e:	e000      	b.n	8013712 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013710:	bf00      	nop
}
 8013712:	378c      	adds	r7, #140	; 0x8c
 8013714:	46bd      	mov	sp, r7
 8013716:	bd90      	pop	{r4, r7, pc}

08013718 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013718:	b590      	push	{r4, r7, lr}
 801371a:	b0ab      	sub	sp, #172	; 0xac
 801371c:	af04      	add	r7, sp, #16
 801371e:	60f8      	str	r0, [r7, #12]
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	607a      	str	r2, [r7, #4]
 8013724:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013726:	68f8      	ldr	r0, [r7, #12]
 8013728:	f000 feae 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 801372c:	4603      	mov	r3, r0
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	3228      	adds	r2, #40	; 0x28
 8013732:	6812      	ldr	r2, [r2, #0]
 8013734:	4618      	mov	r0, r3
 8013736:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d102      	bne.n	8013744 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d07c      	beq.n	801383e <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d002      	beq.n	8013750 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d128      	bne.n	80137a2 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	3398      	adds	r3, #152	; 0x98
 8013756:	681c      	ldr	r4, [r3, #0]
 8013758:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801375c:	6839      	ldr	r1, [r7, #0]
 801375e:	4618      	mov	r0, r3
 8013760:	f7f9 fac9 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013764:	f107 0010 	add.w	r0, r7, #16
 8013768:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801376c:	9302      	str	r3, [sp, #8]
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	9301      	str	r3, [sp, #4]
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	9300      	str	r3, [sp, #0]
 8013776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801377a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801377e:	68f9      	ldr	r1, [r7, #12]
 8013780:	f7fc f948 	bl	800fa14 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013784:	f107 0310 	add.w	r3, r7, #16
 8013788:	4619      	mov	r1, r3
 801378a:	68f8      	ldr	r0, [r7, #12]
 801378c:	47a0      	blx	r4
 801378e:	f107 0310 	add.w	r3, r7, #16
 8013792:	4618      	mov	r0, r3
 8013794:	f7fc fb90 	bl	800feb8 <_ZN24StringEqualNoCaseFailureD1Ev>
 8013798:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801379c:	4618      	mov	r0, r3
 801379e:	f7f9 fe62 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 80137a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80137a6:	68b9      	ldr	r1, [r7, #8]
 80137a8:	4618      	mov	r0, r3
 80137aa:	f7f9 faa4 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80137ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80137b2:	6879      	ldr	r1, [r7, #4]
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7f9 fa9e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80137ba:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80137be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80137c2:	4611      	mov	r1, r2
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7f9 fe75 	bl	800d4b4 <_ZNK12SimpleString12equalsNoCaseERKS_>
 80137ca:	4603      	mov	r3, r0
 80137cc:	f083 0301 	eor.w	r3, r3, #1
 80137d0:	b2dc      	uxtb	r4, r3
 80137d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7f9 fe45 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80137dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7f9 fe40 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80137e6:	2c00      	cmp	r4, #0
 80137e8:	d02a      	beq.n	8013840 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	3398      	adds	r3, #152	; 0x98
 80137f0:	681c      	ldr	r4, [r3, #0]
 80137f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80137f6:	6839      	ldr	r1, [r7, #0]
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7f9 fa7c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80137fe:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8013802:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013806:	9302      	str	r3, [sp, #8]
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	9301      	str	r3, [sp, #4]
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	9300      	str	r3, [sp, #0]
 8013810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013814:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013818:	68f9      	ldr	r1, [r7, #12]
 801381a:	f7fc f8fb 	bl	800fa14 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801381e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013822:	4619      	mov	r1, r3
 8013824:	68f8      	ldr	r0, [r7, #12]
 8013826:	47a0      	blx	r4
 8013828:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801382c:	4618      	mov	r0, r3
 801382e:	f7fc fb43 	bl	800feb8 <_ZN24StringEqualNoCaseFailureD1Ev>
 8013832:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013836:	4618      	mov	r0, r3
 8013838:	f7f9 fe15 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801383c:	e000      	b.n	8013840 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801383e:	bf00      	nop
}
 8013840:	379c      	adds	r7, #156	; 0x9c
 8013842:	46bd      	mov	sp, r7
 8013844:	bd90      	pop	{r4, r7, pc}

08013846 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013846:	b590      	push	{r4, r7, lr}
 8013848:	b0b3      	sub	sp, #204	; 0xcc
 801384a:	af04      	add	r7, sp, #16
 801384c:	60f8      	str	r0, [r7, #12]
 801384e:	60b9      	str	r1, [r7, #8]
 8013850:	607a      	str	r2, [r7, #4]
 8013852:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013854:	68f8      	ldr	r0, [r7, #12]
 8013856:	f000 fe17 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 801385a:	4603      	mov	r3, r0
 801385c:	681a      	ldr	r2, [r3, #0]
 801385e:	3228      	adds	r2, #40	; 0x28
 8013860:	6812      	ldr	r2, [r2, #0]
 8013862:	4618      	mov	r0, r3
 8013864:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d103      	bne.n	8013874 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	2b00      	cmp	r3, #0
 8013870:	f000 80ad 	beq.w	80139ce <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d002      	beq.n	8013880 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 801387a:	68bb      	ldr	r3, [r7, #8]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d140      	bne.n	8013902 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	3398      	adds	r3, #152	; 0x98
 8013886:	681c      	ldr	r4, [r3, #0]
 8013888:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801388c:	68b9      	ldr	r1, [r7, #8]
 801388e:	4618      	mov	r0, r3
 8013890:	f7f9 fa31 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013894:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013898:	6879      	ldr	r1, [r7, #4]
 801389a:	4618      	mov	r0, r3
 801389c:	f7f9 fa2b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80138a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80138a4:	6839      	ldr	r1, [r7, #0]
 80138a6:	4618      	mov	r0, r3
 80138a8:	f7f9 fa25 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80138ac:	f107 0010 	add.w	r0, r7, #16
 80138b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80138b4:	9302      	str	r3, [sp, #8]
 80138b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80138ba:	9301      	str	r3, [sp, #4]
 80138bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80138c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80138ca:	68f9      	ldr	r1, [r7, #12]
 80138cc:	f7fb fce6 	bl	800f29c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80138d0:	f107 0310 	add.w	r3, r7, #16
 80138d4:	4619      	mov	r1, r3
 80138d6:	68f8      	ldr	r0, [r7, #12]
 80138d8:	47a0      	blx	r4
 80138da:	f107 0310 	add.w	r3, r7, #16
 80138de:	4618      	mov	r0, r3
 80138e0:	f7fc fbb6 	bl	8010050 <_ZN15ContainsFailureD1Ev>
 80138e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7f9 fdbc 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80138ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7f9 fdb7 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80138f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7f9 fdb2 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8013902:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013906:	6879      	ldr	r1, [r7, #4]
 8013908:	4618      	mov	r0, r3
 801390a:	f7f9 f9f4 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801390e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013912:	68b9      	ldr	r1, [r7, #8]
 8013914:	4618      	mov	r0, r3
 8013916:	f7f9 f9ee 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801391a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801391e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013922:	4611      	mov	r1, r2
 8013924:	4618      	mov	r0, r3
 8013926:	f7f9 fa64 	bl	800cdf2 <_ZNK12SimpleString8containsERKS_>
 801392a:	4603      	mov	r3, r0
 801392c:	f083 0301 	eor.w	r3, r3, #1
 8013930:	b2dc      	uxtb	r4, r3
 8013932:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013936:	4618      	mov	r0, r3
 8013938:	f7f9 fd95 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801393c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013940:	4618      	mov	r0, r3
 8013942:	f7f9 fd90 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013946:	2c00      	cmp	r4, #0
 8013948:	d042      	beq.n	80139d0 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	3398      	adds	r3, #152	; 0x98
 8013950:	681c      	ldr	r4, [r3, #0]
 8013952:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013956:	68b9      	ldr	r1, [r7, #8]
 8013958:	4618      	mov	r0, r3
 801395a:	f7f9 f9cc 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801395e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013962:	6879      	ldr	r1, [r7, #4]
 8013964:	4618      	mov	r0, r3
 8013966:	f7f9 f9c6 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801396a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801396e:	6839      	ldr	r1, [r7, #0]
 8013970:	4618      	mov	r0, r3
 8013972:	f7f9 f9c0 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013976:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801397a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801397e:	9302      	str	r3, [sp, #8]
 8013980:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013984:	9301      	str	r3, [sp, #4]
 8013986:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801398a:	9300      	str	r3, [sp, #0]
 801398c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013990:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013994:	68f9      	ldr	r1, [r7, #12]
 8013996:	f7fb fc81 	bl	800f29c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801399a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801399e:	4619      	mov	r1, r3
 80139a0:	68f8      	ldr	r0, [r7, #12]
 80139a2:	47a0      	blx	r4
 80139a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7fc fb51 	bl	8010050 <_ZN15ContainsFailureD1Ev>
 80139ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7f9 fd57 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80139b8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80139bc:	4618      	mov	r0, r3
 80139be:	f7f9 fd52 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80139c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7f9 fd4d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80139cc:	e000      	b.n	80139d0 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80139ce:	bf00      	nop
}
 80139d0:	37bc      	adds	r7, #188	; 0xbc
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd90      	pop	{r4, r7, pc}

080139d6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80139d6:	b590      	push	{r4, r7, lr}
 80139d8:	b0b3      	sub	sp, #204	; 0xcc
 80139da:	af04      	add	r7, sp, #16
 80139dc:	60f8      	str	r0, [r7, #12]
 80139de:	60b9      	str	r1, [r7, #8]
 80139e0:	607a      	str	r2, [r7, #4]
 80139e2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80139e4:	68f8      	ldr	r0, [r7, #12]
 80139e6:	f000 fd4f 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 80139ea:	4603      	mov	r3, r0
 80139ec:	681a      	ldr	r2, [r3, #0]
 80139ee:	3228      	adds	r2, #40	; 0x28
 80139f0:	6812      	ldr	r2, [r2, #0]
 80139f2:	4618      	mov	r0, r3
 80139f4:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d103      	bne.n	8013a04 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	f000 80ad 	beq.w	8013b5e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d002      	beq.n	8013a10 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8013a0a:	68bb      	ldr	r3, [r7, #8]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d140      	bne.n	8013a92 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	3398      	adds	r3, #152	; 0x98
 8013a16:	681c      	ldr	r4, [r3, #0]
 8013a18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013a1c:	68b9      	ldr	r1, [r7, #8]
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7f9 f969 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013a24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013a28:	6879      	ldr	r1, [r7, #4]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7f9 f963 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013a30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013a34:	6839      	ldr	r1, [r7, #0]
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7f9 f95d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013a3c:	f107 0010 	add.w	r0, r7, #16
 8013a40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013a44:	9302      	str	r3, [sp, #8]
 8013a46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013a4a:	9301      	str	r3, [sp, #4]
 8013a4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013a50:	9300      	str	r3, [sp, #0]
 8013a52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013a56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013a5a:	68f9      	ldr	r1, [r7, #12]
 8013a5c:	f7fb fc1e 	bl	800f29c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013a60:	f107 0310 	add.w	r3, r7, #16
 8013a64:	4619      	mov	r1, r3
 8013a66:	68f8      	ldr	r0, [r7, #12]
 8013a68:	47a0      	blx	r4
 8013a6a:	f107 0310 	add.w	r3, r7, #16
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7fc faee 	bl	8010050 <_ZN15ContainsFailureD1Ev>
 8013a74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7f9 fcf4 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013a7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7f9 fcef 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013a88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7f9 fcea 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8013a92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013a96:	6879      	ldr	r1, [r7, #4]
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7f9 f92c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013a9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013aa2:	68b9      	ldr	r1, [r7, #8]
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f7f9 f926 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013aaa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013aae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013ab2:	4611      	mov	r1, r2
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7f9 f9b7 	bl	800ce28 <_ZNK12SimpleString14containsNoCaseERKS_>
 8013aba:	4603      	mov	r3, r0
 8013abc:	f083 0301 	eor.w	r3, r3, #1
 8013ac0:	b2dc      	uxtb	r4, r3
 8013ac2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7f9 fccd 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013acc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7f9 fcc8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013ad6:	2c00      	cmp	r4, #0
 8013ad8:	d042      	beq.n	8013b60 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	3398      	adds	r3, #152	; 0x98
 8013ae0:	681c      	ldr	r4, [r3, #0]
 8013ae2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013ae6:	68b9      	ldr	r1, [r7, #8]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7f9 f904 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013aee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013af2:	6879      	ldr	r1, [r7, #4]
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7f9 f8fe 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013afa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013afe:	6839      	ldr	r1, [r7, #0]
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7f9 f8f8 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013b06:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013b0a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013b0e:	9302      	str	r3, [sp, #8]
 8013b10:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013b14:	9301      	str	r3, [sp, #4]
 8013b16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013b1a:	9300      	str	r3, [sp, #0]
 8013b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013b20:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013b24:	68f9      	ldr	r1, [r7, #12]
 8013b26:	f7fb fbb9 	bl	800f29c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013b2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013b2e:	4619      	mov	r1, r3
 8013b30:	68f8      	ldr	r0, [r7, #12]
 8013b32:	47a0      	blx	r4
 8013b34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7fc fa89 	bl	8010050 <_ZN15ContainsFailureD1Ev>
 8013b3e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7f9 fc8f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013b48:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7f9 fc8a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013b52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7f9 fc85 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013b5c:	e000      	b.n	8013b60 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013b5e:	bf00      	nop
}
 8013b60:	37bc      	adds	r7, #188	; 0xbc
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd90      	pop	{r4, r7, pc}

08013b66 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013b66:	b590      	push	{r4, r7, lr}
 8013b68:	b099      	sub	sp, #100	; 0x64
 8013b6a:	af04      	add	r7, sp, #16
 8013b6c:	60f8      	str	r0, [r7, #12]
 8013b6e:	60b9      	str	r1, [r7, #8]
 8013b70:	607a      	str	r2, [r7, #4]
 8013b72:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f000 fc87 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	3228      	adds	r2, #40	; 0x28
 8013b80:	6812      	ldr	r2, [r2, #0]
 8013b82:	4618      	mov	r0, r3
 8013b84:	4790      	blx	r2
    if (expected != actual)
 8013b86:	68ba      	ldr	r2, [r7, #8]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d027      	beq.n	8013bde <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	339c      	adds	r3, #156	; 0x9c
 8013b94:	681c      	ldr	r4, [r3, #0]
 8013b96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b9a:	6839      	ldr	r1, [r7, #0]
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7f9 f8aa 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013ba2:	f107 0014 	add.w	r0, r7, #20
 8013ba6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013baa:	9302      	str	r3, [sp, #8]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	9301      	str	r3, [sp, #4]
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	9300      	str	r3, [sp, #0]
 8013bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013bb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013bb8:	68f9      	ldr	r1, [r7, #12]
 8013bba:	f7fb fc1f 	bl	800f3fc <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8013bbe:	f107 0314 	add.w	r3, r7, #20
 8013bc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013bc4:	4619      	mov	r1, r3
 8013bc6:	68f8      	ldr	r0, [r7, #12]
 8013bc8:	47a0      	blx	r4
 8013bca:	f107 0314 	add.w	r3, r7, #20
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7fc f9fa 	bl	800ffc8 <_ZN17LongsEqualFailureD1Ev>
 8013bd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7f9 fc44 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8013bde:	bf00      	nop
 8013be0:	3754      	adds	r7, #84	; 0x54
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd90      	pop	{r4, r7, pc}

08013be6 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013be6:	b590      	push	{r4, r7, lr}
 8013be8:	b099      	sub	sp, #100	; 0x64
 8013bea:	af04      	add	r7, sp, #16
 8013bec:	60f8      	str	r0, [r7, #12]
 8013bee:	60b9      	str	r1, [r7, #8]
 8013bf0:	607a      	str	r2, [r7, #4]
 8013bf2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013bf4:	68f8      	ldr	r0, [r7, #12]
 8013bf6:	f000 fc47 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	681a      	ldr	r2, [r3, #0]
 8013bfe:	3228      	adds	r2, #40	; 0x28
 8013c00:	6812      	ldr	r2, [r2, #0]
 8013c02:	4618      	mov	r0, r3
 8013c04:	4790      	blx	r2
    if (expected != actual)
 8013c06:	68ba      	ldr	r2, [r7, #8]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d027      	beq.n	8013c5e <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	339c      	adds	r3, #156	; 0x9c
 8013c14:	681c      	ldr	r4, [r3, #0]
 8013c16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013c1a:	6839      	ldr	r1, [r7, #0]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7f9 f86a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013c22:	f107 0014 	add.w	r0, r7, #20
 8013c26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013c2a:	9302      	str	r3, [sp, #8]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	9301      	str	r3, [sp, #4]
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	9300      	str	r3, [sp, #0]
 8013c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013c38:	68f9      	ldr	r1, [r7, #12]
 8013c3a:	f7fb fcab 	bl	800f594 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8013c3e:	f107 0314 	add.w	r3, r7, #20
 8013c42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013c44:	4619      	mov	r1, r3
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	47a0      	blx	r4
 8013c4a:	f107 0314 	add.w	r3, r7, #20
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7fc f998 	bl	800ff84 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8013c54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7f9 fc04 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8013c5e:	bf00      	nop
 8013c60:	3754      	adds	r7, #84	; 0x54
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd90      	pop	{r4, r7, pc}
	...

08013c68 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013c68:	b082      	sub	sp, #8
 8013c6a:	b590      	push	{r4, r7, lr}
 8013c6c:	b099      	sub	sp, #100	; 0x64
 8013c6e:	af02      	add	r7, sp, #8
 8013c70:	60f8      	str	r0, [r7, #12]
 8013c72:	1d38      	adds	r0, r7, #4
 8013c74:	e880 0006 	stmia.w	r0, {r1, r2}
 8013c78:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8013c7a:	68f8      	ldr	r0, [r7, #12]
 8013c7c:	f000 fc04 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8013c80:	4603      	mov	r3, r0
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	3228      	adds	r2, #40	; 0x28
 8013c86:	6812      	ldr	r2, [r2, #0]
 8013c88:	4618      	mov	r0, r3
 8013c8a:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	339c      	adds	r3, #156	; 0x9c
 8013c92:	681c      	ldr	r4, [r3, #0]
 8013c94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013c98:	4919      	ldr	r1, [pc, #100]	; (8013d00 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f7f9 f82b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013ca0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013ca4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7f9 f825 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013cac:	f107 0014 	add.w	r0, r7, #20
 8013cb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013cb4:	9301      	str	r3, [sp, #4]
 8013cb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013cba:	9300      	str	r3, [sp, #0]
 8013cbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013cbe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013cc0:	68f9      	ldr	r1, [r7, #12]
 8013cc2:	f7fc f84d 	bl	800fd60 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013cc6:	f107 0314 	add.w	r3, r7, #20
 8013cca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013cce:	4619      	mov	r1, r3
 8013cd0:	68f8      	ldr	r0, [r7, #12]
 8013cd2:	47a0      	blx	r4
 8013cd4:	f107 0314 	add.w	r3, r7, #20
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7fc f887 	bl	800fdec <_ZN25FeatureUnsupportedFailureD1Ev>
 8013cde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f7f9 fbbf 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013ce8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7f9 fbba 	bl	800d466 <_ZN12SimpleStringD1Ev>
#endif
}
 8013cf2:	bf00      	nop
 8013cf4:	375c      	adds	r7, #92	; 0x5c
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013cfc:	b002      	add	sp, #8
 8013cfe:	4770      	bx	lr
 8013d00:	080251b4 	.word	0x080251b4

08013d04 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013d04:	b082      	sub	sp, #8
 8013d06:	b590      	push	{r4, r7, lr}
 8013d08:	b099      	sub	sp, #100	; 0x64
 8013d0a:	af02      	add	r7, sp, #8
 8013d0c:	60f8      	str	r0, [r7, #12]
 8013d0e:	1d38      	adds	r0, r7, #4
 8013d10:	e880 0006 	stmia.w	r0, {r1, r2}
 8013d14:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8013d16:	68f8      	ldr	r0, [r7, #12]
 8013d18:	f000 fbb6 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	3228      	adds	r2, #40	; 0x28
 8013d22:	6812      	ldr	r2, [r2, #0]
 8013d24:	4618      	mov	r0, r3
 8013d26:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	339c      	adds	r3, #156	; 0x9c
 8013d2e:	681c      	ldr	r4, [r3, #0]
 8013d30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d34:	4919      	ldr	r1, [pc, #100]	; (8013d9c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8013d36:	4618      	mov	r0, r3
 8013d38:	f7f8 ffdd 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013d3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013d40:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7f8 ffd7 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013d48:	f107 0014 	add.w	r0, r7, #20
 8013d4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013d50:	9301      	str	r3, [sp, #4]
 8013d52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d56:	9300      	str	r3, [sp, #0]
 8013d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013d5a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013d5c:	68f9      	ldr	r1, [r7, #12]
 8013d5e:	f7fb ffff 	bl	800fd60 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013d62:	f107 0314 	add.w	r3, r7, #20
 8013d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013d6a:	4619      	mov	r1, r3
 8013d6c:	68f8      	ldr	r0, [r7, #12]
 8013d6e:	47a0      	blx	r4
 8013d70:	f107 0314 	add.w	r3, r7, #20
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7fc f839 	bl	800fdec <_ZN25FeatureUnsupportedFailureD1Ev>
 8013d7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7f9 fb71 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013d84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7f9 fb6c 	bl	800d466 <_ZN12SimpleStringD1Ev>
#endif
}
 8013d8e:	bf00      	nop
 8013d90:	375c      	adds	r7, #92	; 0x5c
 8013d92:	46bd      	mov	sp, r7
 8013d94:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013d98:	b002      	add	sp, #8
 8013d9a:	4770      	bx	lr
 8013d9c:	080251b4 	.word	0x080251b4

08013da0 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013da0:	b590      	push	{r4, r7, lr}
 8013da2:	b099      	sub	sp, #100	; 0x64
 8013da4:	af04      	add	r7, sp, #16
 8013da6:	60f8      	str	r0, [r7, #12]
 8013da8:	607b      	str	r3, [r7, #4]
 8013daa:	460b      	mov	r3, r1
 8013dac:	72fb      	strb	r3, [r7, #11]
 8013dae:	4613      	mov	r3, r2
 8013db0:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8013db2:	68f8      	ldr	r0, [r7, #12]
 8013db4:	f000 fb68 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8013db8:	4603      	mov	r3, r0
 8013dba:	681a      	ldr	r2, [r3, #0]
 8013dbc:	3228      	adds	r2, #40	; 0x28
 8013dbe:	6812      	ldr	r2, [r2, #0]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	4790      	blx	r2
    if (expected != actual)
 8013dc4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8013dc8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d029      	beq.n	8013e24 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	339c      	adds	r3, #156	; 0x9c
 8013dd6:	681c      	ldr	r4, [r3, #0]
 8013dd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ddc:	6879      	ldr	r1, [r7, #4]
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7f8 ff89 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013de4:	f107 0014 	add.w	r0, r7, #20
 8013de8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013dec:	9302      	str	r3, [sp, #8]
 8013dee:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8013df2:	9301      	str	r3, [sp, #4]
 8013df4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013df8:	9300      	str	r3, [sp, #0]
 8013dfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013dfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013dfe:	68f9      	ldr	r1, [r7, #12]
 8013e00:	f7fb fc94 	bl	800f72c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8013e04:	f107 0314 	add.w	r3, r7, #20
 8013e08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	68f8      	ldr	r0, [r7, #12]
 8013e0e:	47a0      	blx	r4
 8013e10:	f107 0314 	add.w	r3, r7, #20
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7fc f893 	bl	800ff40 <_ZN23SignedBytesEqualFailureD1Ev>
 8013e1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7f9 fb21 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8013e24:	bf00      	nop
 8013e26:	3754      	adds	r7, #84	; 0x54
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd90      	pop	{r4, r7, pc}

08013e2c <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013e2c:	b590      	push	{r4, r7, lr}
 8013e2e:	b09d      	sub	sp, #116	; 0x74
 8013e30:	af04      	add	r7, sp, #16
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
 8013e38:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f000 fb24 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8013e40:	4603      	mov	r3, r0
 8013e42:	681a      	ldr	r2, [r3, #0]
 8013e44:	3228      	adds	r2, #40	; 0x28
 8013e46:	6812      	ldr	r2, [r2, #0]
 8013e48:	4618      	mov	r0, r3
 8013e4a:	4790      	blx	r2
    if (expected != actual)
 8013e4c:	68ba      	ldr	r2, [r7, #8]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	429a      	cmp	r2, r3
 8013e52:	d03f      	beq.n	8013ed4 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	339c      	adds	r3, #156	; 0x9c
 8013e5a:	681c      	ldr	r4, [r3, #0]
 8013e5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e60:	68b9      	ldr	r1, [r7, #8]
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7f9 fdea 	bl	800da3c <_Z10StringFromPKv>
 8013e68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013e6c:	6879      	ldr	r1, [r7, #4]
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7f9 fde4 	bl	800da3c <_Z10StringFromPKv>
 8013e74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e78:	6839      	ldr	r1, [r7, #0]
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7f8 ff3b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013e80:	f107 0014 	add.w	r0, r7, #20
 8013e84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e88:	9302      	str	r3, [sp, #8]
 8013e8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013e8e:	9301      	str	r3, [sp, #4]
 8013e90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e94:	9300      	str	r3, [sp, #0]
 8013e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013e9a:	68f9      	ldr	r1, [r7, #12]
 8013e9c:	f7fb f814 	bl	800eec8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013ea0:	f107 0314 	add.w	r3, r7, #20
 8013ea4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	68f8      	ldr	r0, [r7, #12]
 8013eaa:	47a0      	blx	r4
 8013eac:	f107 0314 	add.w	r3, r7, #20
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7fc f955 	bl	8010160 <_ZN13EqualsFailureD1Ev>
 8013eb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f7f9 fad3 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013ec0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7f9 face 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013eca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7f9 fac9 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8013ed4:	bf00      	nop
 8013ed6:	3764      	adds	r7, #100	; 0x64
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd90      	pop	{r4, r7, pc}

08013edc <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013edc:	b590      	push	{r4, r7, lr}
 8013ede:	b09d      	sub	sp, #116	; 0x74
 8013ee0:	af04      	add	r7, sp, #16
 8013ee2:	60f8      	str	r0, [r7, #12]
 8013ee4:	60b9      	str	r1, [r7, #8]
 8013ee6:	607a      	str	r2, [r7, #4]
 8013ee8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013eea:	68f8      	ldr	r0, [r7, #12]
 8013eec:	f000 facc 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	681a      	ldr	r2, [r3, #0]
 8013ef4:	3228      	adds	r2, #40	; 0x28
 8013ef6:	6812      	ldr	r2, [r2, #0]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	4790      	blx	r2
    if (expected != actual)
 8013efc:	68ba      	ldr	r2, [r7, #8]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d03f      	beq.n	8013f84 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	339c      	adds	r3, #156	; 0x9c
 8013f0a:	681c      	ldr	r4, [r3, #0]
 8013f0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f10:	68b9      	ldr	r1, [r7, #8]
 8013f12:	4618      	mov	r0, r3
 8013f14:	f7f9 fdbc 	bl	800da90 <_Z10StringFromPFvvE>
 8013f18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f1c:	6879      	ldr	r1, [r7, #4]
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7f9 fdb6 	bl	800da90 <_Z10StringFromPFvvE>
 8013f24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013f28:	6839      	ldr	r1, [r7, #0]
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7f8 fee3 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013f30:	f107 0014 	add.w	r0, r7, #20
 8013f34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013f38:	9302      	str	r3, [sp, #8]
 8013f3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f3e:	9301      	str	r3, [sp, #4]
 8013f40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f44:	9300      	str	r3, [sp, #0]
 8013f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013f48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013f4a:	68f9      	ldr	r1, [r7, #12]
 8013f4c:	f7fa ffbc 	bl	800eec8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013f50:	f107 0314 	add.w	r3, r7, #20
 8013f54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013f56:	4619      	mov	r1, r3
 8013f58:	68f8      	ldr	r0, [r7, #12]
 8013f5a:	47a0      	blx	r4
 8013f5c:	f107 0314 	add.w	r3, r7, #20
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7fc f8fd 	bl	8010160 <_ZN13EqualsFailureD1Ev>
 8013f66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7f9 fa7b 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013f70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7f9 fa76 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8013f7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7f9 fa71 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8013f84:	bf00      	nop
 8013f86:	3764      	adds	r7, #100	; 0x64
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd90      	pop	{r4, r7, pc}

08013f8c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013f8c:	b590      	push	{r4, r7, lr}
 8013f8e:	b09d      	sub	sp, #116	; 0x74
 8013f90:	af02      	add	r7, sp, #8
 8013f92:	6278      	str	r0, [r7, #36]	; 0x24
 8013f94:	ed87 0b06 	vstr	d0, [r7, #24]
 8013f98:	ed87 1b04 	vstr	d1, [r7, #16]
 8013f9c:	ed87 2b02 	vstr	d2, [r7, #8]
 8013fa0:	6239      	str	r1, [r7, #32]
 8013fa2:	607a      	str	r2, [r7, #4]
 8013fa4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fa8:	f000 fa6e 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8013fac:	4603      	mov	r3, r0
 8013fae:	681a      	ldr	r2, [r3, #0]
 8013fb0:	3228      	adds	r2, #40	; 0x28
 8013fb2:	6812      	ldr	r2, [r2, #0]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8013fb8:	ed97 2b02 	vldr	d2, [r7, #8]
 8013fbc:	ed97 1b04 	vldr	d1, [r7, #16]
 8013fc0:	ed97 0b06 	vldr	d0, [r7, #24]
 8013fc4:	f7fe fd4a 	bl	8012a5c <_Z13doubles_equalddd>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	f083 0301 	eor.w	r3, r3, #1
 8013fce:	b2db      	uxtb	r3, r3
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d029      	beq.n	8014028 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8013fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	339c      	adds	r3, #156	; 0x9c
 8013fda:	681c      	ldr	r4, [r3, #0]
 8013fdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013fe0:	6a39      	ldr	r1, [r7, #32]
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7f8 fe87 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8013fe8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8013fec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013ff0:	9300      	str	r3, [sp, #0]
 8013ff2:	ed97 2b02 	vldr	d2, [r7, #8]
 8013ff6:	ed97 1b04 	vldr	d1, [r7, #16]
 8013ffa:	ed97 0b06 	vldr	d0, [r7, #24]
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	687a      	ldr	r2, [r7, #4]
 8014002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014004:	f7fa ffa2 	bl	800ef4c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8014008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801400c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801400e:	4619      	mov	r1, r3
 8014010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014012:	47a0      	blx	r4
 8014014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014018:	4618      	mov	r0, r3
 801401a:	f7fc f87f 	bl	801011c <_ZN19DoublesEqualFailureD1Ev>
 801401e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014022:	4618      	mov	r0, r3
 8014024:	f7f9 fa1f 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8014028:	bf00      	nop
 801402a:	376c      	adds	r7, #108	; 0x6c
 801402c:	46bd      	mov	sp, r7
 801402e:	bd90      	pop	{r4, r7, pc}

08014030 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014030:	b590      	push	{r4, r7, lr}
 8014032:	b0a7      	sub	sp, #156	; 0x9c
 8014034:	af04      	add	r7, sp, #16
 8014036:	60f8      	str	r0, [r7, #12]
 8014038:	60b9      	str	r1, [r7, #8]
 801403a:	607a      	str	r2, [r7, #4]
 801403c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801403e:	68f8      	ldr	r0, [r7, #12]
 8014040:	f000 fa22 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8014044:	4603      	mov	r3, r0
 8014046:	681a      	ldr	r2, [r3, #0]
 8014048:	3228      	adds	r2, #40	; 0x28
 801404a:	6812      	ldr	r2, [r2, #0]
 801404c:	4618      	mov	r0, r3
 801404e:	4790      	blx	r2
	if (length == 0) return;
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d075      	beq.n	8014142 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d102      	bne.n	8014062 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d071      	beq.n	8014146 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d002      	beq.n	801406e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d12d      	bne.n	80140ca <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	339c      	adds	r3, #156	; 0x9c
 8014074:	681c      	ldr	r4, [r3, #0]
 8014076:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801407a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801407e:	4618      	mov	r0, r3
 8014080:	f7f8 fe39 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8014084:	f107 0010 	add.w	r0, r7, #16
 8014088:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801408c:	9303      	str	r3, [sp, #12]
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	9302      	str	r3, [sp, #8]
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	9301      	str	r3, [sp, #4]
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	9300      	str	r3, [sp, #0]
 801409a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801409e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80140a2:	68f9      	ldr	r1, [r7, #12]
 80140a4:	f7fb fd70 	bl	800fb88 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80140a8:	f107 0310 	add.w	r3, r7, #16
 80140ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80140b0:	4619      	mov	r1, r3
 80140b2:	68f8      	ldr	r0, [r7, #12]
 80140b4:	47a0      	blx	r4
 80140b6:	f107 0310 	add.w	r3, r7, #16
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7fb feda 	bl	800fe74 <_ZN18BinaryEqualFailureD1Ev>
 80140c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7f9 f9ce 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 80140ca:	683a      	ldr	r2, [r7, #0]
 80140cc:	6879      	ldr	r1, [r7, #4]
 80140ce:	68b8      	ldr	r0, [r7, #8]
 80140d0:	f7f8 fd30 	bl	800cb34 <_ZN12SimpleString6MemCmpEPKvS1_j>
 80140d4:	4603      	mov	r3, r0
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	bf14      	ite	ne
 80140da:	2301      	movne	r3, #1
 80140dc:	2300      	moveq	r3, #0
 80140de:	b2db      	uxtb	r3, r3
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d031      	beq.n	8014148 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	339c      	adds	r3, #156	; 0x9c
 80140ea:	681c      	ldr	r4, [r3, #0]
 80140ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80140f0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80140f4:	4618      	mov	r0, r3
 80140f6:	f7f8 fdfe 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80140fa:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80140fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014102:	9303      	str	r3, [sp, #12]
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	9302      	str	r3, [sp, #8]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	9301      	str	r3, [sp, #4]
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	9300      	str	r3, [sp, #0]
 8014110:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014114:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014118:	68f9      	ldr	r1, [r7, #12]
 801411a:	f7fb fd35 	bl	800fb88 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 801411e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014122:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014126:	4619      	mov	r1, r3
 8014128:	68f8      	ldr	r0, [r7, #12]
 801412a:	47a0      	blx	r4
 801412c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014130:	4618      	mov	r0, r3
 8014132:	f7fb fe9f 	bl	800fe74 <_ZN18BinaryEqualFailureD1Ev>
 8014136:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801413a:	4618      	mov	r0, r3
 801413c:	f7f9 f993 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8014140:	e002      	b.n	8014148 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8014142:	bf00      	nop
 8014144:	e000      	b.n	8014148 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014146:	bf00      	nop
}
 8014148:	378c      	adds	r7, #140	; 0x8c
 801414a:	46bd      	mov	sp, r7
 801414c:	bd90      	pop	{r4, r7, pc}

0801414e <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801414e:	b590      	push	{r4, r7, lr}
 8014150:	b09b      	sub	sp, #108	; 0x6c
 8014152:	af06      	add	r7, sp, #24
 8014154:	60f8      	str	r0, [r7, #12]
 8014156:	60b9      	str	r1, [r7, #8]
 8014158:	607a      	str	r2, [r7, #4]
 801415a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801415c:	68f8      	ldr	r0, [r7, #12]
 801415e:	f000 f993 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8014162:	4603      	mov	r3, r0
 8014164:	681a      	ldr	r2, [r3, #0]
 8014166:	3228      	adds	r2, #40	; 0x28
 8014168:	6812      	ldr	r2, [r2, #0]
 801416a:	4618      	mov	r0, r3
 801416c:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 801416e:	68ba      	ldr	r2, [r7, #8]
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	405a      	eors	r2, r3
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	4013      	ands	r3, r2
 8014178:	2b00      	cmp	r3, #0
 801417a:	d02b      	beq.n	80141d4 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	339c      	adds	r3, #156	; 0x9c
 8014182:	681c      	ldr	r4, [r3, #0]
 8014184:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014188:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801418a:	4618      	mov	r0, r3
 801418c:	f7f8 fdb3 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8014190:	f107 0014 	add.w	r0, r7, #20
 8014194:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014198:	9304      	str	r3, [sp, #16]
 801419a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801419c:	9303      	str	r3, [sp, #12]
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	9302      	str	r3, [sp, #8]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	9301      	str	r3, [sp, #4]
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	9300      	str	r3, [sp, #0]
 80141aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80141ae:	68f9      	ldr	r1, [r7, #12]
 80141b0:	f7fb fd7a 	bl	800fca8 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 80141b4:	f107 0314 	add.w	r3, r7, #20
 80141b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80141ba:	4619      	mov	r1, r3
 80141bc:	68f8      	ldr	r0, [r7, #12]
 80141be:	47a0      	blx	r4
 80141c0:	f107 0314 	add.w	r3, r7, #20
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7fb fe33 	bl	800fe30 <_ZN16BitsEqualFailureD1Ev>
 80141ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7f9 f949 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 80141d4:	bf00      	nop
 80141d6:	3754      	adds	r7, #84	; 0x54
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd90      	pop	{r4, r7, pc}

080141dc <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 80141dc:	b590      	push	{r4, r7, lr}
 80141de:	b09d      	sub	sp, #116	; 0x74
 80141e0:	af04      	add	r7, sp, #16
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	607a      	str	r2, [r7, #4]
 80141e6:	603b      	str	r3, [r7, #0]
 80141e8:	460b      	mov	r3, r1
 80141ea:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80141ec:	68f8      	ldr	r0, [r7, #12]
 80141ee:	f000 f94b 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 80141f2:	4603      	mov	r3, r0
 80141f4:	681a      	ldr	r2, [r3, #0]
 80141f6:	3228      	adds	r2, #40	; 0x28
 80141f8:	6812      	ldr	r2, [r2, #0]
 80141fa:	4618      	mov	r0, r3
 80141fc:	4790      	blx	r2
    if (failed)
 80141fe:	7afb      	ldrb	r3, [r7, #11]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d03f      	beq.n	8014284 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	339c      	adds	r3, #156	; 0x9c
 801420a:	681c      	ldr	r4, [r3, #0]
 801420c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014210:	6879      	ldr	r1, [r7, #4]
 8014212:	4618      	mov	r0, r3
 8014214:	f7f8 fd6f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8014218:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	4618      	mov	r0, r3
 8014220:	f7f8 fd69 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8014224:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014228:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801422a:	4618      	mov	r0, r3
 801422c:	f7f8 fd63 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8014230:	f107 0014 	add.w	r0, r7, #20
 8014234:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014238:	9302      	str	r3, [sp, #8]
 801423a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801423e:	9301      	str	r3, [sp, #4]
 8014240:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014248:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801424a:	68f9      	ldr	r1, [r7, #12]
 801424c:	f7fa ff30 	bl	800f0b0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014250:	f107 0314 	add.w	r3, r7, #20
 8014254:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014256:	4619      	mov	r1, r3
 8014258:	68f8      	ldr	r0, [r7, #12]
 801425a:	47a0      	blx	r4
 801425c:	f107 0314 	add.w	r3, r7, #20
 8014260:	4618      	mov	r0, r3
 8014262:	f7fb ff39 	bl	80100d8 <_ZN17CheckEqualFailureD1Ev>
 8014266:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801426a:	4618      	mov	r0, r3
 801426c:	f7f9 f8fb 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8014270:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014274:	4618      	mov	r0, r3
 8014276:	f7f9 f8f6 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801427a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801427e:	4618      	mov	r0, r3
 8014280:	f7f9 f8f1 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8014284:	bf00      	nop
 8014286:	3764      	adds	r7, #100	; 0x64
 8014288:	46bd      	mov	sp, r7
 801428a:	bd90      	pop	{r4, r7, pc}

0801428c <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 801428c:	b590      	push	{r4, r7, lr}
 801428e:	b09d      	sub	sp, #116	; 0x74
 8014290:	af04      	add	r7, sp, #16
 8014292:	60f8      	str	r0, [r7, #12]
 8014294:	607a      	str	r2, [r7, #4]
 8014296:	603b      	str	r3, [r7, #0]
 8014298:	460b      	mov	r3, r1
 801429a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 801429c:	68f8      	ldr	r0, [r7, #12]
 801429e:	f000 f8f3 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 80142a2:	4603      	mov	r3, r0
 80142a4:	681a      	ldr	r2, [r3, #0]
 80142a6:	3228      	adds	r2, #40	; 0x28
 80142a8:	6812      	ldr	r2, [r2, #0]
 80142aa:	4618      	mov	r0, r3
 80142ac:	4790      	blx	r2
    if (!comparison)
 80142ae:	7afb      	ldrb	r3, [r7, #11]
 80142b0:	f083 0301 	eor.w	r3, r3, #1
 80142b4:	b2db      	uxtb	r3, r3
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d03f      	beq.n	801433a <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	339c      	adds	r3, #156	; 0x9c
 80142c0:	681c      	ldr	r4, [r3, #0]
 80142c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80142c6:	6879      	ldr	r1, [r7, #4]
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7f8 fd14 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80142ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80142d2:	6839      	ldr	r1, [r7, #0]
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7f8 fd0e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80142da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80142de:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7f8 fd08 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80142e6:	f107 0014 	add.w	r0, r7, #20
 80142ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80142ee:	9302      	str	r3, [sp, #8]
 80142f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80142f4:	9301      	str	r3, [sp, #4]
 80142f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80142fa:	9300      	str	r3, [sp, #0]
 80142fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014300:	68f9      	ldr	r1, [r7, #12]
 8014302:	f7fa ff83 	bl	800f20c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014306:	f107 0314 	add.w	r3, r7, #20
 801430a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801430c:	4619      	mov	r1, r3
 801430e:	68f8      	ldr	r0, [r7, #12]
 8014310:	47a0      	blx	r4
 8014312:	f107 0314 	add.w	r3, r7, #20
 8014316:	4618      	mov	r0, r3
 8014318:	f7fb febc 	bl	8010094 <_ZN17ComparisonFailureD1Ev>
 801431c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014320:	4618      	mov	r0, r3
 8014322:	f7f9 f8a0 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8014326:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801432a:	4618      	mov	r0, r3
 801432c:	f7f9 f89b 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8014330:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014334:	4618      	mov	r0, r3
 8014336:	f7f9 f896 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 801433a:	bf00      	nop
 801433c:	3764      	adds	r7, #100	; 0x64
 801433e:	46bd      	mov	sp, r7
 8014340:	bd90      	pop	{r4, r7, pc}
	...

08014344 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8014344:	b5b0      	push	{r4, r5, r7, lr}
 8014346:	b088      	sub	sp, #32
 8014348:	af00      	add	r7, sp, #0
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	607a      	str	r2, [r7, #4]
 8014350:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8014352:	f107 0310 	add.w	r3, r7, #16
 8014356:	4924      	ldr	r1, [pc, #144]	; (80143e8 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8014358:	4618      	mov	r0, r3
 801435a:	f7f8 fccc 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 801435e:	f107 0310 	add.w	r3, r7, #16
 8014362:	6879      	ldr	r1, [r7, #4]
 8014364:	4618      	mov	r0, r3
 8014366:	f7f9 f90d 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 801436a:	f107 0310 	add.w	r3, r7, #16
 801436e:	491f      	ldr	r1, [pc, #124]	; (80143ec <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8014370:	4618      	mov	r0, r3
 8014372:	f7f9 f907 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8014376:	f107 0318 	add.w	r3, r7, #24
 801437a:	6839      	ldr	r1, [r7, #0]
 801437c:	4618      	mov	r0, r3
 801437e:	f7f9 fda1 	bl	800dec4 <_Z10StringFromj>
 8014382:	f107 0218 	add.w	r2, r7, #24
 8014386:	f107 0310 	add.w	r3, r7, #16
 801438a:	4611      	mov	r1, r2
 801438c:	4618      	mov	r0, r3
 801438e:	f7f9 f8e7 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8014392:	f107 0318 	add.w	r3, r7, #24
 8014396:	4618      	mov	r0, r3
 8014398:	f7f9 f865 	bl	800d466 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 801439c:	f107 0310 	add.w	r3, r7, #16
 80143a0:	4913      	ldr	r1, [pc, #76]	; (80143f0 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7f9 f8ee 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 80143a8:	f107 0310 	add.w	r3, r7, #16
 80143ac:	68b9      	ldr	r1, [r7, #8]
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f9 f8e8 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 80143b4:	68f8      	ldr	r0, [r7, #12]
 80143b6:	f000 f867 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 80143ba:	4604      	mov	r4, r0
 80143bc:	6823      	ldr	r3, [r4, #0]
 80143be:	3338      	adds	r3, #56	; 0x38
 80143c0:	681d      	ldr	r5, [r3, #0]
 80143c2:	f107 0310 	add.w	r3, r7, #16
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7f9 f820 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 80143cc:	4603      	mov	r3, r0
 80143ce:	4619      	mov	r1, r3
 80143d0:	4620      	mov	r0, r4
 80143d2:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 80143d4:	f107 0310 	add.w	r3, r7, #16
 80143d8:	4618      	mov	r0, r3
 80143da:	f7f9 f844 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 80143de:	bf00      	nop
 80143e0:	3720      	adds	r7, #32
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bdb0      	pop	{r4, r5, r7, pc}
 80143e6:	bf00      	nop
 80143e8:	080251cc 	.word	0x080251cc
 80143ec:	080251d0 	.word	0x080251d0
 80143f0:	080251d4 	.word	0x080251d4

080143f4 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 80143f4:	b590      	push	{r4, r7, lr}
 80143f6:	b085      	sub	sp, #20
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	60f8      	str	r0, [r7, #12]
 80143fc:	60b9      	str	r1, [r7, #8]
 80143fe:	607a      	str	r2, [r7, #4]
 8014400:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	3370      	adds	r3, #112	; 0x70
 8014408:	681c      	ldr	r4, [r3, #0]
 801440a:	68b8      	ldr	r0, [r7, #8]
 801440c:	f7f8 fffe 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 8014410:	4601      	mov	r1, r0
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	687a      	ldr	r2, [r7, #4]
 8014416:	68f8      	ldr	r0, [r7, #12]
 8014418:	47a0      	blx	r4
}
 801441a:	bf00      	nop
 801441c:	3714      	adds	r7, #20
 801441e:	46bd      	mov	sp, r7
 8014420:	bd90      	pop	{r4, r7, pc}

08014422 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8014422:	b580      	push	{r7, lr}
 8014424:	b082      	sub	sp, #8
 8014426:	af00      	add	r7, sp, #0
 8014428:	6078      	str	r0, [r7, #4]
 801442a:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f000 f82b 	bl	8014488 <_ZN10UtestShell13getTestResultEv>
 8014432:	4603      	mov	r3, r0
 8014434:	681a      	ldr	r2, [r3, #0]
 8014436:	323c      	adds	r2, #60	; 0x3c
 8014438:	6812      	ldr	r2, [r2, #0]
 801443a:	6839      	ldr	r1, [r7, #0]
 801443c:	4618      	mov	r0, r3
 801443e:	4790      	blx	r2
}
 8014440:	bf00      	nop
 8014442:	3708      	adds	r7, #8
 8014444:	46bd      	mov	sp, r7
 8014446:	bd80      	pop	{r7, pc}

08014448 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8014448:	b480      	push	{r7}
 801444a:	b083      	sub	sp, #12
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
 8014450:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8014452:	4a04      	ldr	r2, [pc, #16]	; (8014464 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	6013      	str	r3, [r2, #0]
}
 8014458:	bf00      	nop
 801445a:	370c      	adds	r7, #12
 801445c:	46bd      	mov	sp, r7
 801445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014462:	4770      	bx	lr
 8014464:	20000abc 	.word	0x20000abc

08014468 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8014468:	b480      	push	{r7}
 801446a:	b083      	sub	sp, #12
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
 8014470:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8014472:	4a04      	ldr	r2, [pc, #16]	; (8014484 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	6013      	str	r3, [r2, #0]
}
 8014478:	bf00      	nop
 801447a:	370c      	adds	r7, #12
 801447c:	46bd      	mov	sp, r7
 801447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014482:	4770      	bx	lr
 8014484:	20000ac0 	.word	0x20000ac0

08014488 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8014490:	4b09      	ldr	r3, [pc, #36]	; (80144b8 <_ZN10UtestShell13getTestResultEv+0x30>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d109      	bne.n	80144ac <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8014498:	f7fe fbb2 	bl	8012c00 <_ZN22OutsideTestRunnerUTest8instanceEv>
 801449c:	4603      	mov	r3, r0
 801449e:	681a      	ldr	r2, [r3, #0]
 80144a0:	32a4      	adds	r2, #164	; 0xa4
 80144a2:	6812      	ldr	r2, [r2, #0]
 80144a4:	4618      	mov	r0, r3
 80144a6:	4790      	blx	r2
 80144a8:	4603      	mov	r3, r0
 80144aa:	e001      	b.n	80144b0 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 80144ac:	4b02      	ldr	r3, [pc, #8]	; (80144b8 <_ZN10UtestShell13getTestResultEv+0x30>)
 80144ae:	681b      	ldr	r3, [r3, #0]
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3708      	adds	r7, #8
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}
 80144b8:	20000abc 	.word	0x20000abc

080144bc <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 80144c0:	4b05      	ldr	r3, [pc, #20]	; (80144d8 <_ZN10UtestShell10getCurrentEv+0x1c>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d103      	bne.n	80144d0 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 80144c8:	f7fe fb9a 	bl	8012c00 <_ZN22OutsideTestRunnerUTest8instanceEv>
 80144cc:	4603      	mov	r3, r0
 80144ce:	e001      	b.n	80144d4 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 80144d0:	4b01      	ldr	r3, [pc, #4]	; (80144d8 <_ZN10UtestShell10getCurrentEv+0x1c>)
 80144d2:	681b      	ldr	r3, [r3, #0]
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	bd80      	pop	{r7, pc}
 80144d8:	20000ac0 	.word	0x20000ac0

080144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 80144dc:	b480      	push	{r7}
 80144de:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 80144e0:	4b03      	ldr	r3, [pc, #12]	; (80144f0 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 80144e2:	681b      	ldr	r3, [r3, #0]
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	46bd      	mov	sp, r7
 80144e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ec:	4770      	bx	lr
 80144ee:	bf00      	nop
 80144f0:	20000094 	.word	0x20000094

080144f4 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 80144f4:	b480      	push	{r7}
 80144f6:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 80144f8:	4b03      	ldr	r3, [pc, #12]	; (8014508 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 80144fa:	4a04      	ldr	r2, [pc, #16]	; (801450c <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 80144fc:	601a      	str	r2, [r3, #0]
}
 80144fe:	bf00      	nop
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr
 8014508:	20000094 	.word	0x20000094
 801450c:	20000090 	.word	0x20000090

08014510 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8014510:	b480      	push	{r7}
 8014512:	b083      	sub	sp, #12
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	4a04      	ldr	r2, [pc, #16]	; (801452c <_ZN5UtestC1Ev+0x1c>)
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	601a      	str	r2, [r3, #0]
{
}
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	4618      	mov	r0, r3
 8014522:	370c      	adds	r7, #12
 8014524:	46bd      	mov	sp, r7
 8014526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452a:	4770      	bx	lr
 801452c:	08028b74 	.word	0x08028b74

08014530 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8014530:	b480      	push	{r7}
 8014532:	b083      	sub	sp, #12
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	4a04      	ldr	r2, [pc, #16]	; (801454c <_ZN5UtestD1Ev+0x1c>)
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	601a      	str	r2, [r3, #0]
{
}
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	4618      	mov	r0, r3
 8014542:	370c      	adds	r7, #12
 8014544:	46bd      	mov	sp, r7
 8014546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454a:	4770      	bx	lr
 801454c:	08028b74 	.word	0x08028b74

08014550 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8014550:	b580      	push	{r7, lr}
 8014552:	b082      	sub	sp, #8
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
}
 8014558:	6878      	ldr	r0, [r7, #4]
 801455a:	f7ff ffe9 	bl	8014530 <_ZN5UtestD1Ev>
 801455e:	2104      	movs	r1, #4
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f7f6 f819 	bl	800a598 <_ZdlPvj>
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	4618      	mov	r0, r3
 801456a:	3708      	adds	r7, #8
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}

08014570 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b082      	sub	sp, #8
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8014578:	4b0d      	ldr	r3, [pc, #52]	; (80145b0 <_ZN5Utest3runEv+0x40>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	6879      	ldr	r1, [r7, #4]
 801457e:	480d      	ldr	r0, [pc, #52]	; (80145b4 <_ZN5Utest3runEv+0x44>)
 8014580:	4798      	blx	r3
 8014582:	4603      	mov	r3, r0
 8014584:	2b00      	cmp	r3, #0
 8014586:	bf14      	ite	ne
 8014588:	2301      	movne	r3, #1
 801458a:	2300      	moveq	r3, #0
 801458c:	b2db      	uxtb	r3, r3
 801458e:	2b00      	cmp	r3, #0
 8014590:	d004      	beq.n	801459c <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8014592:	4b07      	ldr	r3, [pc, #28]	; (80145b0 <_ZN5Utest3runEv+0x40>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	6879      	ldr	r1, [r7, #4]
 8014598:	4807      	ldr	r0, [pc, #28]	; (80145b8 <_ZN5Utest3runEv+0x48>)
 801459a:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 801459c:	4b04      	ldr	r3, [pc, #16]	; (80145b0 <_ZN5Utest3runEv+0x40>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	6879      	ldr	r1, [r7, #4]
 80145a2:	4806      	ldr	r0, [pc, #24]	; (80145bc <_ZN5Utest3runEv+0x4c>)
 80145a4:	4798      	blx	r3
}
 80145a6:	bf00      	nop
 80145a8:	3708      	adds	r7, #8
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	200000a4 	.word	0x200000a4
 80145b4:	08012c5d 	.word	0x08012c5d
 80145b8:	08012c79 	.word	0x08012c79
 80145bc:	08012c95 	.word	0x08012c95

080145c0 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 80145c0:	b480      	push	{r7}
 80145c2:	b083      	sub	sp, #12
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
}
 80145c8:	bf00      	nop
 80145ca:	370c      	adds	r7, #12
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr

080145d4 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 80145d4:	b480      	push	{r7}
 80145d6:	b083      	sub	sp, #12
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
}
 80145dc:	bf00      	nop
 80145de:	370c      	adds	r7, #12
 80145e0:	46bd      	mov	sp, r7
 80145e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e6:	4770      	bx	lr

080145e8 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 80145e8:	b480      	push	{r7}
 80145ea:	b083      	sub	sp, #12
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
}
 80145f0:	bf00      	nop
 80145f2:	370c      	adds	r7, #12
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr

080145fc <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 80145fc:	b480      	push	{r7}
 80145fe:	b083      	sub	sp, #12
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	4a04      	ldr	r2, [pc, #16]	; (8014618 <_ZN14TestTerminatorD1Ev+0x1c>)
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	601a      	str	r2, [r3, #0]
{
}
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	4618      	mov	r0, r3
 801460e:	370c      	adds	r7, #12
 8014610:	46bd      	mov	sp, r7
 8014612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014616:	4770      	bx	lr
 8014618:	08028b60 	.word	0x08028b60

0801461c <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b084      	sub	sp, #16
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8014624:	2300      	movs	r3, #0
 8014626:	60fb      	str	r3, [r7, #12]
 8014628:	f107 030c 	add.w	r3, r7, #12
 801462c:	4618      	mov	r0, r3
 801462e:	f7f6 f975 	bl	800a91c <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8014632:	f107 030c 	add.w	r3, r7, #12
 8014636:	4618      	mov	r0, r3
 8014638:	f000 f82c 	bl	8014694 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 801463c:	f107 030c 	add.w	r3, r7, #12
 8014640:	4618      	mov	r0, r3
 8014642:	f000 f835 	bl	80146b0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8014646:	bf00      	nop
 8014648:	3710      	adds	r7, #16
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
	...

08014650 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	4a05      	ldr	r2, [pc, #20]	; (8014670 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	601a      	str	r2, [r3, #0]
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	4618      	mov	r0, r3
 8014662:	f7ff ffcb 	bl	80145fc <_ZN14TestTerminatorD1Ev>
{
}
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	4618      	mov	r0, r3
 801466a:	3708      	adds	r7, #8
 801466c:	46bd      	mov	sp, r7
 801466e:	bd80      	pop	{r7, pc}
 8014670:	08028b4c 	.word	0x08028b4c

08014674 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
}
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f7ff ffe7 	bl	8014650 <_ZN20NormalTestTerminatorD1Ev>
 8014682:	2104      	movs	r1, #4
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f7f5 ff87 	bl	800a598 <_ZdlPvj>
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	4618      	mov	r0, r3
 801468e:	3708      	adds	r7, #8
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}

08014694 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b082      	sub	sp, #8
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 801469c:	4b03      	ldr	r3, [pc, #12]	; (80146ac <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80146a2:	bf00      	nop
 80146a4:	3708      	adds	r7, #8
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	200000a0 	.word	0x200000a0

080146b0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b082      	sub	sp, #8
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	4a05      	ldr	r2, [pc, #20]	; (80146d0 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	601a      	str	r2, [r3, #0]
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7ff ff9b 	bl	80145fc <_ZN14TestTerminatorD1Ev>
{
}
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	4618      	mov	r0, r3
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	08028b38 	.word	0x08028b38

080146d4 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
}
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f7ff ffe7 	bl	80146b0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 80146e2:	2104      	movs	r1, #4
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f7f5 ff57 	bl	800a598 <_ZdlPvj>
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	4618      	mov	r0, r3
 80146ee:	3708      	adds	r7, #8
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}

080146f4 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 80146fc:	f7fe fbaa 	bl	8012e54 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	4618      	mov	r0, r3
 8014704:	f7ff ff8a 	bl	801461c <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8014708:	bf00      	nop
 801470a:	3708      	adds	r7, #8
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}

08014710 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8014710:	b580      	push	{r7, lr}
 8014712:	b082      	sub	sp, #8
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	4a05      	ldr	r2, [pc, #20]	; (8014730 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	601a      	str	r2, [r3, #0]
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	4618      	mov	r0, r3
 8014722:	f7ff ff95 	bl	8014650 <_ZN20NormalTestTerminatorD1Ev>
{
}
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	4618      	mov	r0, r3
 801472a:	3708      	adds	r7, #8
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	08028b24 	.word	0x08028b24

08014734 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
}
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f7ff ffe7 	bl	8014710 <_ZN22CrashingTestTerminatorD1Ev>
 8014742:	2104      	movs	r1, #4
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f7f5 ff27 	bl	800a598 <_ZdlPvj>
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	4618      	mov	r0, r3
 801474e:	3708      	adds	r7, #8
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}

08014754 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8014754:	b580      	push	{r7, lr}
 8014756:	b084      	sub	sp, #16
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2200      	movs	r2, #0
 8014762:	601a      	str	r2, [r3, #0]
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2200      	movs	r2, #0
 8014768:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d007      	beq.n	8014780 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	3310      	adds	r3, #16
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	6838      	ldr	r0, [r7, #0]
 801477a:	4798      	blx	r3
 801477c:	4603      	mov	r3, r0
 801477e:	e000      	b.n	8014782 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8014780:	2300      	movs	r3, #0
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d02d      	beq.n	80147ea <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	685b      	ldr	r3, [r3, #4]
 8014792:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8014796:	4293      	cmp	r3, r2
 8014798:	d201      	bcs.n	801479e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 801479a:	009b      	lsls	r3, r3, #2
 801479c:	e001      	b.n	80147a2 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 801479e:	f04f 33ff 	mov.w	r3, #4294967295
 80147a2:	f240 3237 	movw	r2, #823	; 0x337
 80147a6:	4914      	ldr	r1, [pc, #80]	; (80147f8 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7f5 ff05 	bl	800a5b8 <_ZnajPKci>
 80147ae:	4602      	mov	r2, r0
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80147b8:	2300      	movs	r3, #0
 80147ba:	60bb      	str	r3, [r7, #8]
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	68ba      	ldr	r2, [r7, #8]
 80147c2:	429a      	cmp	r2, r3
 80147c4:	d212      	bcs.n	80147ec <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	681a      	ldr	r2, [r3, #0]
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	009b      	lsls	r3, r3, #2
 80147ce:	4413      	add	r3, r2
 80147d0:	68fa      	ldr	r2, [r7, #12]
 80147d2:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	330c      	adds	r3, #12
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	68f8      	ldr	r0, [r7, #12]
 80147de:	4798      	blx	r3
 80147e0:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	3301      	adds	r3, #1
 80147e6:	60bb      	str	r3, [r7, #8]
 80147e8:	e7e8      	b.n	80147bc <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 80147ea:	bf00      	nop
    }
}
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	4618      	mov	r0, r3
 80147f0:	3710      	adds	r7, #16
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}
 80147f6:	bf00      	nop
 80147f8:	0802505c 	.word	0x0802505c

080147fc <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b082      	sub	sp, #8
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d004      	beq.n	8014816 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	4618      	mov	r0, r3
 8014812:	f7f5 fee5 	bl	800a5e0 <_ZdaPv>
}
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	4618      	mov	r0, r3
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}

08014820 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8014820:	b480      	push	{r7}
 8014822:	b087      	sub	sp, #28
 8014824:	af00      	add	r7, sp, #0
 8014826:	60f8      	str	r0, [r7, #12]
 8014828:	60b9      	str	r1, [r7, #8]
 801482a:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	681a      	ldr	r2, [r3, #0]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	4413      	add	r3, r2
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	681a      	ldr	r2, [r3, #0]
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	4413      	add	r3, r2
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	681a      	ldr	r2, [r3, #0]
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	009b      	lsls	r3, r3, #2
 8014850:	4413      	add	r3, r2
 8014852:	697a      	ldr	r2, [r7, #20]
 8014854:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681a      	ldr	r2, [r3, #0]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	009b      	lsls	r3, r3, #2
 801485e:	4413      	add	r3, r2
 8014860:	693a      	ldr	r2, [r7, #16]
 8014862:	601a      	str	r2, [r3, #0]
}
 8014864:	bf00      	nop
 8014866:	371c      	adds	r7, #28
 8014868:	46bd      	mov	sp, r7
 801486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486e:	4770      	bx	lr

08014870 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b084      	sub	sp, #16
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	685b      	ldr	r3, [r3, #4]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d028      	beq.n	80148d4 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8014882:	4b17      	ldr	r3, [pc, #92]	; (80148e0 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	6838      	ldr	r0, [r7, #0]
 8014888:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	3b01      	subs	r3, #1
 8014890:	60fb      	str	r3, [r7, #12]
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d019      	beq.n	80148cc <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	685b      	ldr	r3, [r3, #4]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d01b      	beq.n	80148d8 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 80148a0:	4b10      	ldr	r3, [pc, #64]	; (80148e4 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	4798      	blx	r3
 80148a6:	4603      	mov	r3, r0
 80148a8:	461a      	mov	r2, r3
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	3301      	adds	r3, #1
 80148ae:	fbb2 f1f3 	udiv	r1, r2, r3
 80148b2:	fb03 f301 	mul.w	r3, r3, r1
 80148b6:	1ad3      	subs	r3, r2, r3
 80148b8:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 80148ba:	68ba      	ldr	r2, [r7, #8]
 80148bc:	68f9      	ldr	r1, [r7, #12]
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f7ff ffae 	bl	8014820 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	3b01      	subs	r3, #1
 80148c8:	60fb      	str	r3, [r7, #12]
 80148ca:	e7e2      	b.n	8014892 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 80148cc:	6878      	ldr	r0, [r7, #4]
 80148ce:	f000 f834 	bl	801493a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80148d2:	e002      	b.n	80148da <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 80148d4:	bf00      	nop
 80148d6:	e000      	b.n	80148da <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 80148d8:	bf00      	nop
}
 80148da:	3710      	adds	r7, #16
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}
 80148e0:	200000e0 	.word	0x200000e0
 80148e4:	200000e4 	.word	0x200000e4

080148e8 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b086      	sub	sp, #24
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d01c      	beq.n	8014932 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	685b      	ldr	r3, [r3, #4]
 80148fc:	085b      	lsrs	r3, r3, #1
 80148fe:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8014900:	2300      	movs	r3, #0
 8014902:	617b      	str	r3, [r7, #20]
 8014904:	697a      	ldr	r2, [r7, #20]
 8014906:	693b      	ldr	r3, [r7, #16]
 8014908:	429a      	cmp	r2, r3
 801490a:	d20e      	bcs.n	801492a <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	685a      	ldr	r2, [r3, #4]
 8014910:	697b      	ldr	r3, [r7, #20]
 8014912:	1ad3      	subs	r3, r2, r3
 8014914:	3b01      	subs	r3, #1
 8014916:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8014918:	68fa      	ldr	r2, [r7, #12]
 801491a:	6979      	ldr	r1, [r7, #20]
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f7ff ff7f 	bl	8014820 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8014922:	697b      	ldr	r3, [r7, #20]
 8014924:	3301      	adds	r3, #1
 8014926:	617b      	str	r3, [r7, #20]
 8014928:	e7ec      	b.n	8014904 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 801492a:	6878      	ldr	r0, [r7, #4]
 801492c:	f000 f805 	bl	801493a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8014930:	e000      	b.n	8014934 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8014932:	bf00      	nop
}
 8014934:	3718      	adds	r7, #24
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}

0801493a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 801493a:	b580      	push	{r7, lr}
 801493c:	b084      	sub	sp, #16
 801493e:	af00      	add	r7, sp, #0
 8014940:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8014942:	2300      	movs	r3, #0
 8014944:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014946:	2300      	movs	r3, #0
 8014948:	60bb      	str	r3, [r7, #8]
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	685b      	ldr	r3, [r3, #4]
 801494e:	68ba      	ldr	r2, [r7, #8]
 8014950:	429a      	cmp	r2, r3
 8014952:	d221      	bcs.n	8014998 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681a      	ldr	r2, [r3, #0]
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6859      	ldr	r1, [r3, #4]
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	1acb      	subs	r3, r1, r3
 8014960:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014964:	3b01      	subs	r3, #1
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	4413      	add	r3, r2
 801496a:	6818      	ldr	r0, [r3, #0]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681a      	ldr	r2, [r3, #0]
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	6859      	ldr	r1, [r3, #4]
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	1acb      	subs	r3, r1, r3
 8014978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801497c:	3b01      	subs	r3, #1
 801497e:	009b      	lsls	r3, r3, #2
 8014980:	4413      	add	r3, r2
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	3308      	adds	r3, #8
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	68f9      	ldr	r1, [r7, #12]
 801498c:	4798      	blx	r3
 801498e:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	3301      	adds	r3, #1
 8014994:	60bb      	str	r3, [r7, #8]
 8014996:	e7d8      	b.n	801494a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8014998:	bf00      	nop
 801499a:	3710      	adds	r7, #16
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}

080149a0 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b082      	sub	sp, #8
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
    return get(0);
 80149a8:	2100      	movs	r1, #0
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f000 f805 	bl	80149ba <_ZNK22UtestShellPointerArray3getEj>
 80149b0:	4603      	mov	r3, r0
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3708      	adds	r7, #8
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}

080149ba <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 80149ba:	b480      	push	{r7}
 80149bc:	b083      	sub	sp, #12
 80149be:	af00      	add	r7, sp, #0
 80149c0:	6078      	str	r0, [r7, #4]
 80149c2:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	683a      	ldr	r2, [r7, #0]
 80149ca:	429a      	cmp	r2, r3
 80149cc:	d301      	bcc.n	80149d2 <_ZNK22UtestShellPointerArray3getEj+0x18>
 80149ce:	2300      	movs	r3, #0
 80149d0:	e005      	b.n	80149de <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681a      	ldr	r2, [r3, #0]
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	009b      	lsls	r3, r3, #2
 80149da:	4413      	add	r3, r2
 80149dc:	681b      	ldr	r3, [r3, #0]
}
 80149de:	4618      	mov	r0, r3
 80149e0:	370c      	adds	r7, #12
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr
	...

080149ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b084      	sub	sp, #16
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	60b9      	str	r1, [r7, #8]
 80149f6:	607a      	str	r2, [r7, #4]
 80149f8:	603b      	str	r3, [r7, #0]
 80149fa:	4a10      	ldr	r2, [pc, #64]	; (8014a3c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8014a00:	6879      	ldr	r1, [r7, #4]
 8014a02:	68b8      	ldr	r0, [r7, #8]
 8014a04:	f7fe fc27 	bl	8013256 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8014a08:	6839      	ldr	r1, [r7, #0]
 8014a0a:	68b8      	ldr	r0, [r7, #8]
 8014a0c:	f7fe fc31 	bl	8013272 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8014a10:	69b9      	ldr	r1, [r7, #24]
 8014a12:	68b8      	ldr	r0, [r7, #8]
 8014a14:	f7fe fc03 	bl	801321e <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8014a18:	69f9      	ldr	r1, [r7, #28]
 8014a1a:	68b8      	ldr	r0, [r7, #8]
 8014a1c:	f7fe fc0d 	bl	801323a <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8014a20:	f7fd fc20 	bl	8012264 <_ZN12TestRegistry18getCurrentRegistryEv>
 8014a24:	4603      	mov	r3, r0
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	3208      	adds	r2, #8
 8014a2a:	6812      	ldr	r2, [r2, #0]
 8014a2c:	68b9      	ldr	r1, [r7, #8]
 8014a2e:	4618      	mov	r0, r3
 8014a30:	4790      	blx	r2
}
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	4618      	mov	r0, r3
 8014a36:	3710      	adds	r7, #16
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	08028a68 	.word	0x08028a68

08014a40 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8014a40:	b480      	push	{r7}
 8014a42:	b083      	sub	sp, #12
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
 8014a48:	4a04      	ldr	r2, [pc, #16]	; (8014a5c <_ZN13TestInstallerD1Ev+0x1c>)
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	601a      	str	r2, [r3, #0]
{
}
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	4618      	mov	r0, r3
 8014a52:	370c      	adds	r7, #12
 8014a54:	46bd      	mov	sp, r7
 8014a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5a:	4770      	bx	lr
 8014a5c:	08028a68 	.word	0x08028a68

08014a60 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b082      	sub	sp, #8
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
}
 8014a68:	6878      	ldr	r0, [r7, #4]
 8014a6a:	f7ff ffe9 	bl	8014a40 <_ZN13TestInstallerD1Ev>
 8014a6e:	2104      	movs	r1, #4
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f7f5 fd91 	bl	800a598 <_ZdlPvj>
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	3708      	adds	r7, #8
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}

08014a80 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
 8014a88:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d10a      	bne.n	8014aa6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a96:	4293      	cmp	r3, r2
 8014a98:	d105      	bne.n	8014aa6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014a9a:	4805      	ldr	r0, [pc, #20]	; (8014ab0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8014a9c:	f7ff fe38 	bl	8014710 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8014aa0:	4804      	ldr	r0, [pc, #16]	; (8014ab4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8014aa2:	f7ff fdd5 	bl	8014650 <_ZN20NormalTestTerminatorD1Ev>
}
 8014aa6:	bf00      	nop
 8014aa8:	3708      	adds	r7, #8
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	20000090 	.word	0x20000090
 8014ab4:	2000008c 	.word	0x2000008c

08014ab8 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	af00      	add	r7, sp, #0
 8014abc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014ac0:	2001      	movs	r0, #1
 8014ac2:	f7ff ffdd 	bl	8014a80 <_Z41__static_initialization_and_destruction_0ii>
 8014ac6:	bd80      	pop	{r7, pc}

08014ac8 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014ad0:	2000      	movs	r0, #0
 8014ad2:	f7ff ffd5 	bl	8014a80 <_Z41__static_initialization_and_destruction_0ii>
 8014ad6:	bd80      	pop	{r7, pc}

08014ad8 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8014ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ada:	b083      	sub	sp, #12
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	ed87 0b00 	vstr	d0, [r7]
 8014ae2:	683c      	ldr	r4, [r7, #0]
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8014aea:	2301      	movs	r3, #1
 8014aec:	461e      	mov	r6, r3
 8014aee:	f04f 32ff 	mov.w	r2, #4294967295
 8014af2:	4b10      	ldr	r3, [pc, #64]	; (8014b34 <_ZSt5isinfd+0x5c>)
 8014af4:	4620      	mov	r0, r4
 8014af6:	4629      	mov	r1, r5
 8014af8:	f7eb fe46 	bl	8000788 <__aeabi_dcmpun>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d10b      	bne.n	8014b1a <_ZSt5isinfd+0x42>
 8014b02:	f04f 32ff 	mov.w	r2, #4294967295
 8014b06:	4b0b      	ldr	r3, [pc, #44]	; (8014b34 <_ZSt5isinfd+0x5c>)
 8014b08:	4620      	mov	r0, r4
 8014b0a:	4629      	mov	r1, r5
 8014b0c:	f7eb fe1e 	bl	800074c <__aeabi_dcmple>
 8014b10:	4603      	mov	r3, r0
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d101      	bne.n	8014b1a <_ZSt5isinfd+0x42>
 8014b16:	2300      	movs	r3, #0
 8014b18:	461e      	mov	r6, r3
 8014b1a:	b2f3      	uxtb	r3, r6
 8014b1c:	f083 0301 	eor.w	r3, r3, #1
 8014b20:	b2db      	uxtb	r3, r3
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	bf14      	ite	ne
 8014b26:	2301      	movne	r3, #1
 8014b28:	2300      	moveq	r3, #0
 8014b2a:	b2db      	uxtb	r3, r3
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	370c      	adds	r7, #12
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b34:	7fefffff 	.word	0x7fefffff

08014b38 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8014b38:	b590      	push	{r4, r7, lr}
 8014b3a:	b083      	sub	sp, #12
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	ed87 0b00 	vstr	d0, [r7]
 8014b42:	2301      	movs	r3, #1
 8014b44:	461c      	mov	r4, r3
 8014b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014b4e:	f7eb fe1b 	bl	8000788 <__aeabi_dcmpun>
 8014b52:	4603      	mov	r3, r0
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d101      	bne.n	8014b5c <_ZSt5isnand+0x24>
 8014b58:	2300      	movs	r3, #0
 8014b5a:	461c      	mov	r4, r3
 8014b5c:	b2e3      	uxtb	r3, r4
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	bf14      	ite	ne
 8014b62:	2301      	movne	r3, #1
 8014b64:	2300      	moveq	r3, #0
 8014b66:	b2db      	uxtb	r3, r3
 8014b68:	4618      	mov	r0, r3
 8014b6a:	370c      	adds	r7, #12
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	bd90      	pop	{r4, r7, pc}

08014b70 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8014b70:	b590      	push	{r4, r7, lr}
 8014b72:	b095      	sub	sp, #84	; 0x54
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	60f8      	str	r0, [r7, #12]
 8014b78:	60b9      	str	r1, [r7, #8]
 8014b7a:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	3334      	adds	r3, #52	; 0x34
 8014b82:	681c      	ldr	r4, [r3, #0]
 8014b84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014b88:	490f      	ldr	r1, [pc, #60]	; (8014bc8 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f7f8 f8b3 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8014b90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014b94:	f107 0314 	add.w	r3, r7, #20
 8014b98:	68f9      	ldr	r1, [r7, #12]
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f7f9 ff0a 	bl	800e9b4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8014ba0:	f107 0314 	add.w	r3, r7, #20
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	47a0      	blx	r4
 8014baa:	f107 0314 	add.w	r3, r7, #20
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7f9 ffc0 	bl	800eb34 <_ZN11TestFailureD1Ev>
 8014bb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7f8 fc54 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8014bbe:	bf00      	nop
 8014bc0:	3754      	adds	r7, #84	; 0x54
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd90      	pop	{r4, r7, pc}
 8014bc6:	bf00      	nop
 8014bc8:	080251e4 	.word	0x080251e4

08014bcc <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8014bcc:	b480      	push	{r7}
 8014bce:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8014bd0:	2301      	movs	r3, #1
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr

08014bdc <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8014be6:	4b13      	ldr	r3, [pc, #76]	; (8014c34 <PlatformSpecificSetJmpImplementation+0x58>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	225c      	movs	r2, #92	; 0x5c
 8014bec:	fb02 f303 	mul.w	r3, r2, r3
 8014bf0:	4a11      	ldr	r2, [pc, #68]	; (8014c38 <PlatformSpecificSetJmpImplementation+0x5c>)
 8014bf2:	4413      	add	r3, r2
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7eb fb13 	bl	8000220 <setjmp>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	bf0c      	ite	eq
 8014c00:	2301      	moveq	r3, #1
 8014c02:	2300      	movne	r3, #0
 8014c04:	b2db      	uxtb	r3, r3
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d00e      	beq.n	8014c28 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8014c0a:	4b0a      	ldr	r3, [pc, #40]	; (8014c34 <PlatformSpecificSetJmpImplementation+0x58>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	3301      	adds	r3, #1
 8014c10:	4a08      	ldr	r2, [pc, #32]	; (8014c34 <PlatformSpecificSetJmpImplementation+0x58>)
 8014c12:	6013      	str	r3, [r2, #0]
        function(data);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6838      	ldr	r0, [r7, #0]
 8014c18:	4798      	blx	r3
        jmp_buf_index--;
 8014c1a:	4b06      	ldr	r3, [pc, #24]	; (8014c34 <PlatformSpecificSetJmpImplementation+0x58>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	3b01      	subs	r3, #1
 8014c20:	4a04      	ldr	r2, [pc, #16]	; (8014c34 <PlatformSpecificSetJmpImplementation+0x58>)
 8014c22:	6013      	str	r3, [r2, #0]
        return 1;
 8014c24:	2301      	movs	r3, #1
 8014c26:	e000      	b.n	8014c2a <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8014c28:	2300      	movs	r3, #0
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3708      	adds	r7, #8
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}
 8014c32:	bf00      	nop
 8014c34:	20000e5c 	.word	0x20000e5c
 8014c38:	20000ac4 	.word	0x20000ac4

08014c3c <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8014c40:	4b07      	ldr	r3, [pc, #28]	; (8014c60 <PlatformSpecificLongJmpImplementation+0x24>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	3b01      	subs	r3, #1
 8014c46:	4a06      	ldr	r2, [pc, #24]	; (8014c60 <PlatformSpecificLongJmpImplementation+0x24>)
 8014c48:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8014c4a:	4b05      	ldr	r3, [pc, #20]	; (8014c60 <PlatformSpecificLongJmpImplementation+0x24>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	225c      	movs	r2, #92	; 0x5c
 8014c50:	fb02 f303 	mul.w	r3, r2, r3
 8014c54:	4a03      	ldr	r2, [pc, #12]	; (8014c64 <PlatformSpecificLongJmpImplementation+0x28>)
 8014c56:	4413      	add	r3, r2
 8014c58:	2101      	movs	r1, #1
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7eb fae6 	bl	800022c <longjmp>
 8014c60:	20000e5c 	.word	0x20000e5c
 8014c64:	20000ac4 	.word	0x20000ac4

08014c68 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8014c68:	b480      	push	{r7}
 8014c6a:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8014c6c:	2300      	movs	r3, #0
#endif
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	46bd      	mov	sp, r7
 8014c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c76:	4770      	bx	lr

08014c78 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8014c7e:	2000      	movs	r0, #0
 8014c80:	f00e ec4e 	blx	8023520 <__time_veneer>
 8014c84:	4602      	mov	r2, r0
 8014c86:	460b      	mov	r3, r1
 8014c88:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8014c8c:	463b      	mov	r3, r7
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f00b fb7a 	bl	8020388 <localtime>
 8014c94:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	4a04      	ldr	r2, [pc, #16]	; (8014cac <TimeStringImplementation+0x34>)
 8014c9a:	2150      	movs	r1, #80	; 0x50
 8014c9c:	4804      	ldr	r0, [pc, #16]	; (8014cb0 <TimeStringImplementation+0x38>)
 8014c9e:	f00c fc7b 	bl	8021598 <strftime>
    return dateTime;
 8014ca2:	4b03      	ldr	r3, [pc, #12]	; (8014cb0 <TimeStringImplementation+0x38>)
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3710      	adds	r7, #16
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	08025220 	.word	0x08025220
 8014cb0:	20000e60 	.word	0x20000e60

08014cb4 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b082      	sub	sp, #8
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8014cbe:	6839      	ldr	r1, [r7, #0]
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f00b f997 	bl	801fff4 <fopen>
 8014cc6:	4603      	mov	r3, r0
#endif
}
 8014cc8:	4618      	mov	r0, r3
 8014cca:	3708      	adds	r7, #8
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
 8014cd8:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8014cda:	6839      	ldr	r1, [r7, #0]
 8014cdc:	6878      	ldr	r0, [r7, #4]
 8014cde:	f00b f9f7 	bl	80200d0 <fputs>
}
 8014ce2:	bf00      	nop
 8014ce4:	3708      	adds	r7, #8
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}

08014cea <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8014cea:	b580      	push	{r7, lr}
 8014cec:	b082      	sub	sp, #8
 8014cee:	af00      	add	r7, sp, #0
 8014cf0:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f00a ff78 	bl	801fbe8 <fclose>
}
 8014cf8:	bf00      	nop
 8014cfa:	3708      	adds	r7, #8
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}

08014d00 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	af00      	add	r7, sp, #0
  fflush(stdout);
 8014d04:	4b03      	ldr	r3, [pc, #12]	; (8014d14 <PlatformSpecificFlushImplementation+0x14>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	689b      	ldr	r3, [r3, #8]
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f00b f836 	bl	801fd7c <fflush>
}
 8014d10:	bf00      	nop
 8014d12:	bd80      	pop	{r7, pc}
 8014d14:	20000108 	.word	0x20000108

08014d18 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b082      	sub	sp, #8
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8014d22:	ed97 0b00 	vldr	d0, [r7]
 8014d26:	f7ff ff07 	bl	8014b38 <_ZSt5isnand>
 8014d2a:	4603      	mov	r3, r0
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3708      	adds	r7, #8
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8014d3e:	ed97 0b00 	vldr	d0, [r7]
 8014d42:	f7ff fec9 	bl	8014ad8 <_ZSt5isinfd>
 8014d46:	4603      	mov	r3, r0
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3708      	adds	r7, #8
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8014d50:	b480      	push	{r7}
 8014d52:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8014d54:	2300      	movs	r3, #0
#endif

}
 8014d56:	4618      	mov	r0, r3
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr

08014d60 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8014d60:	b480      	push	{r7}
 8014d62:	b083      	sub	sp, #12
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
}
 8014d68:	bf00      	nop
 8014d6a:	370c      	adds	r7, #12
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d72:	4770      	bx	lr

08014d74 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8014d74:	b480      	push	{r7}
 8014d76:	b083      	sub	sp, #12
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
}
 8014d7c:	bf00      	nop
 8014d7e:	370c      	adds	r7, #12
 8014d80:	46bd      	mov	sp, r7
 8014d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d86:	4770      	bx	lr

08014d88 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8014d88:	b480      	push	{r7}
 8014d8a:	b083      	sub	sp, #12
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
}
 8014d90:	bf00      	nop
 8014d92:	370c      	adds	r7, #12
 8014d94:	46bd      	mov	sp, r7
 8014d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9a:	4770      	bx	lr

08014d9c <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b084      	sub	sp, #16
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	60f8      	str	r0, [r7, #12]
 8014da4:	60b9      	str	r1, [r7, #8]
 8014da6:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8014da8:	4a25      	ldr	r2, [pc, #148]	; (8014e40 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	601a      	str	r2, [r3, #0]
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	68ba      	ldr	r2, [r7, #8]
 8014db2:	605a      	str	r2, [r3, #4]
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	687a      	ldr	r2, [r7, #4]
 8014db8:	609a      	str	r2, [r3, #8]
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	731a      	strb	r2, [r3, #12]
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	735a      	strb	r2, [r3, #13]
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	739a      	strb	r2, [r3, #14]
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	73da      	strb	r2, [r3, #15]
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	741a      	strb	r2, [r3, #16]
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	745a      	strb	r2, [r3, #17]
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	2200      	movs	r2, #0
 8014de2:	749a      	strb	r2, [r3, #18]
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	2200      	movs	r2, #0
 8014de8:	74da      	strb	r2, [r3, #19]
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	2200      	movs	r2, #0
 8014dee:	751a      	strb	r2, [r3, #20]
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2200      	movs	r2, #0
 8014df4:	755a      	strb	r2, [r3, #21]
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	759a      	strb	r2, [r3, #22]
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	75da      	strb	r2, [r3, #23]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	2200      	movs	r2, #0
 8014e06:	761a      	strb	r2, [r3, #24]
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	2201      	movs	r2, #1
 8014e0c:	61da      	str	r2, [r3, #28]
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	2200      	movs	r2, #0
 8014e12:	621a      	str	r2, [r3, #32]
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2200      	movs	r2, #0
 8014e18:	625a      	str	r2, [r3, #36]	; 0x24
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	2200      	movs	r2, #0
 8014e24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	3330      	adds	r3, #48	; 0x30
 8014e2c:	4905      	ldr	r1, [pc, #20]	; (8014e44 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f7f7 ff61 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
{
}
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	4618      	mov	r0, r3
 8014e38:	3710      	adds	r7, #16
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	08028b94 	.word	0x08028b94
 8014e44:	08025234 	.word	0x08025234

08014e48 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	4618      	mov	r0, r3
 8014e54:	f7f8 fb07 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3708      	adds	r7, #8
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
	...

08014e64 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8014e64:	b590      	push	{r4, r7, lr}
 8014e66:	b085      	sub	sp, #20
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	4a20      	ldr	r2, [pc, #128]	; (8014ef0 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d015      	beq.n	8014ea6 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e7e:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e84:	4618      	mov	r0, r3
 8014e86:	f00a fda4 	bl	801f9d2 <_ZNK10TestFilter7getNextEv>
 8014e8a:	4602      	mov	r2, r0
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8014e90:	68fc      	ldr	r4, [r7, #12]
 8014e92:	2c00      	cmp	r4, #0
 8014e94:	d0ed      	beq.n	8014e72 <_ZN20CommandLineArgumentsD1Ev+0xe>
 8014e96:	4620      	mov	r0, r4
 8014e98:	f7ff ffd6 	bl	8014e48 <_ZN10TestFilterD1Ev>
 8014e9c:	2110      	movs	r1, #16
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	f7f5 fb7a 	bl	800a598 <_ZdlPvj>
    while(groupFilters_) {
 8014ea4:	e7e5      	b.n	8014e72 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d015      	beq.n	8014eda <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eb2:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f00a fd8a 	bl	801f9d2 <_ZNK10TestFilter7getNextEv>
 8014ebe:	4602      	mov	r2, r0
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8014ec4:	68bc      	ldr	r4, [r7, #8]
 8014ec6:	2c00      	cmp	r4, #0
 8014ec8:	d0ed      	beq.n	8014ea6 <_ZN20CommandLineArgumentsD1Ev+0x42>
 8014eca:	4620      	mov	r0, r4
 8014ecc:	f7ff ffbc 	bl	8014e48 <_ZN10TestFilterD1Ev>
 8014ed0:	2110      	movs	r1, #16
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f7f5 fb60 	bl	800a598 <_ZdlPvj>
    while(nameFilters_) {
 8014ed8:	e7e5      	b.n	8014ea6 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	3330      	adds	r3, #48	; 0x30
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f7f8 fac1 	bl	800d466 <_ZN12SimpleStringD1Ev>
    }
}
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3714      	adds	r7, #20
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd90      	pop	{r4, r7, pc}
 8014eee:	bf00      	nop
 8014ef0:	08028b94 	.word	0x08028b94

08014ef4 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
}
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f7ff ffb1 	bl	8014e64 <_ZN20CommandLineArgumentsD1Ev>
 8014f02:	2138      	movs	r1, #56	; 0x38
 8014f04:	6878      	ldr	r0, [r7, #4]
 8014f06:	f7f5 fb47 	bl	800a598 <_ZdlPvj>
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3708      	adds	r7, #8
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}

08014f14 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8014f14:	b5b0      	push	{r4, r5, r7, lr}
 8014f16:	b0be      	sub	sp, #248	; 0xf8
 8014f18:	af02      	add	r7, sp, #8
 8014f1a:	6078      	str	r0, [r7, #4]
 8014f1c:	6039      	str	r1, [r7, #0]
 8014f1e:	2400      	movs	r4, #0
    bool correctParameters = true;
 8014f20:	2301      	movs	r3, #1
 8014f22:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 8014f26:	2301      	movs	r3, #1
 8014f28:	613b      	str	r3, [r7, #16]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	685a      	ldr	r2, [r3, #4]
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	429a      	cmp	r2, r3
 8014f32:	f340 83a4 	ble.w	801567e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	689a      	ldr	r2, [r3, #8]
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	009b      	lsls	r3, r3, #2
 8014f3e:	4413      	add	r3, r2
 8014f40:	681a      	ldr	r2, [r3, #0]
 8014f42:	f107 0308 	add.w	r3, r7, #8
 8014f46:	4611      	mov	r1, r2
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7f7 fed4 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8014f4e:	f107 0314 	add.w	r3, r7, #20
 8014f52:	49c8      	ldr	r1, [pc, #800]	; (8015274 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7f7 fece 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8014f5a:	f107 0214 	add.w	r2, r7, #20
 8014f5e:	f107 0308 	add.w	r3, r7, #8
 8014f62:	4611      	mov	r1, r2
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7f8 fa8a 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	461d      	mov	r5, r3
 8014f6e:	f107 0314 	add.w	r3, r7, #20
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7f8 fa77 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8014f78:	2d00      	cmp	r5, #0
 8014f7a:	d006      	beq.n	8014f8a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	2201      	movs	r2, #1
 8014f80:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8014f82:	2300      	movs	r3, #0
 8014f84:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014f88:	e366      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8014f8a:	f107 031c 	add.w	r3, r7, #28
 8014f8e:	49ba      	ldr	r1, [pc, #744]	; (8015278 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7f7 feb0 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8014f96:	f107 021c 	add.w	r2, r7, #28
 8014f9a:	f107 0308 	add.w	r3, r7, #8
 8014f9e:	4611      	mov	r1, r2
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f7f8 fa6c 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	461d      	mov	r5, r3
 8014faa:	f107 031c 	add.w	r3, r7, #28
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f7f8 fa59 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8014fb4:	2d00      	cmp	r5, #0
 8014fb6:	d003      	beq.n	8014fc0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	2201      	movs	r2, #1
 8014fbc:	735a      	strb	r2, [r3, #13]
 8014fbe:	e34b      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8014fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014fc4:	49ad      	ldr	r1, [pc, #692]	; (801527c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7f7 fe95 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8014fcc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014fd0:	f107 0308 	add.w	r3, r7, #8
 8014fd4:	4611      	mov	r1, r2
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7f8 fa51 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	461d      	mov	r5, r3
 8014fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f7f8 fa3e 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8014fea:	2d00      	cmp	r5, #0
 8014fec:	d003      	beq.n	8014ff6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	2201      	movs	r2, #1
 8014ff2:	739a      	strb	r2, [r3, #14]
 8014ff4:	e330      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8014ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014ffa:	49a1      	ldr	r1, [pc, #644]	; (8015280 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f7f7 fe7a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015002:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015006:	f107 0308 	add.w	r3, r7, #8
 801500a:	4611      	mov	r1, r2
 801500c:	4618      	mov	r0, r3
 801500e:	f7f8 fa36 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 8015012:	4603      	mov	r3, r0
 8015014:	461d      	mov	r5, r3
 8015016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801501a:	4618      	mov	r0, r3
 801501c:	f7f8 fa23 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015020:	2d00      	cmp	r5, #0
 8015022:	d003      	beq.n	801502c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	2201      	movs	r2, #1
 8015028:	73da      	strb	r2, [r3, #15]
 801502a:	e315      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 801502c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015030:	4994      	ldr	r1, [pc, #592]	; (8015284 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 8015032:	4618      	mov	r0, r3
 8015034:	f7f7 fe5f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015038:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801503c:	f107 0308 	add.w	r3, r7, #8
 8015040:	4611      	mov	r1, r2
 8015042:	4618      	mov	r0, r3
 8015044:	f7f8 fa1b 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 8015048:	4603      	mov	r3, r0
 801504a:	461d      	mov	r5, r3
 801504c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015050:	4618      	mov	r0, r3
 8015052:	f7f8 fa08 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015056:	2d00      	cmp	r5, #0
 8015058:	d003      	beq.n	8015062 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2201      	movs	r2, #1
 801505e:	741a      	strb	r2, [r3, #16]
 8015060:	e2fa      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8015062:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015066:	4988      	ldr	r1, [pc, #544]	; (8015288 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8015068:	4618      	mov	r0, r3
 801506a:	f7f7 fe44 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801506e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015072:	f107 0308 	add.w	r3, r7, #8
 8015076:	4611      	mov	r1, r2
 8015078:	4618      	mov	r0, r3
 801507a:	f7f8 fa00 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801507e:	4603      	mov	r3, r0
 8015080:	461d      	mov	r5, r3
 8015082:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015086:	4618      	mov	r0, r3
 8015088:	f7f8 f9ed 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801508c:	2d00      	cmp	r5, #0
 801508e:	d003      	beq.n	8015098 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2201      	movs	r2, #1
 8015094:	755a      	strb	r2, [r3, #21]
 8015096:	e2df      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8015098:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801509c:	497b      	ldr	r1, [pc, #492]	; (801528c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 801509e:	4618      	mov	r0, r3
 80150a0:	f7f7 fe29 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80150a4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80150a8:	f107 0308 	add.w	r3, r7, #8
 80150ac:	4611      	mov	r1, r2
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7f8 f9e5 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 80150b4:	4603      	mov	r3, r0
 80150b6:	461d      	mov	r5, r3
 80150b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80150bc:	4618      	mov	r0, r3
 80150be:	f7f8 f9d2 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80150c2:	2d00      	cmp	r5, #0
 80150c4:	d003      	beq.n	80150ce <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	2201      	movs	r2, #1
 80150ca:	745a      	strb	r2, [r3, #17]
 80150cc:	e2c4      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 80150ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80150d2:	496f      	ldr	r1, [pc, #444]	; (8015290 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 80150d4:	4618      	mov	r0, r3
 80150d6:	f7f7 fe0e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80150da:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80150de:	f107 0308 	add.w	r3, r7, #8
 80150e2:	4611      	mov	r1, r2
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7f8 f9ca 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 80150ea:	4603      	mov	r3, r0
 80150ec:	461d      	mov	r5, r3
 80150ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7f8 f9b7 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80150f8:	2d00      	cmp	r5, #0
 80150fa:	d003      	beq.n	8015104 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2201      	movs	r2, #1
 8015100:	749a      	strb	r2, [r3, #18]
 8015102:	e2a9      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8015104:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015108:	4962      	ldr	r1, [pc, #392]	; (8015294 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 801510a:	4618      	mov	r0, r3
 801510c:	f7f7 fdf3 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015110:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8015114:	f107 0308 	add.w	r3, r7, #8
 8015118:	4611      	mov	r1, r2
 801511a:	4618      	mov	r0, r3
 801511c:	f7f8 f9af 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 8015120:	4603      	mov	r3, r0
 8015122:	461d      	mov	r5, r3
 8015124:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015128:	4618      	mov	r0, r3
 801512a:	f7f8 f99c 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801512e:	2d00      	cmp	r5, #0
 8015130:	d003      	beq.n	801513a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	2201      	movs	r2, #1
 8015136:	74da      	strb	r2, [r3, #19]
 8015138:	e28e      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 801513a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801513e:	4956      	ldr	r1, [pc, #344]	; (8015298 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8015140:	4618      	mov	r0, r3
 8015142:	f7f7 fdd8 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015146:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801514a:	f107 0308 	add.w	r3, r7, #8
 801514e:	4611      	mov	r1, r2
 8015150:	4618      	mov	r0, r3
 8015152:	f7f8 f994 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 8015156:	4603      	mov	r3, r0
 8015158:	461d      	mov	r5, r3
 801515a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801515e:	4618      	mov	r0, r3
 8015160:	f7f8 f981 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015164:	2d00      	cmp	r5, #0
 8015166:	d003      	beq.n	8015170 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2201      	movs	r2, #1
 801516c:	751a      	strb	r2, [r3, #20]
 801516e:	e273      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8015170:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015174:	4949      	ldr	r1, [pc, #292]	; (801529c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8015176:	4618      	mov	r0, r3
 8015178:	f7f7 fdbd 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801517c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015180:	f107 0308 	add.w	r3, r7, #8
 8015184:	4611      	mov	r1, r2
 8015186:	4618      	mov	r0, r3
 8015188:	f7f8 f979 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801518c:	4603      	mov	r3, r0
 801518e:	461d      	mov	r5, r3
 8015190:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015194:	4618      	mov	r0, r3
 8015196:	f7f8 f966 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801519a:	2d00      	cmp	r5, #0
 801519c:	d003      	beq.n	80151a6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	2201      	movs	r2, #1
 80151a2:	759a      	strb	r2, [r3, #22]
 80151a4:	e258      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 80151a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80151aa:	493d      	ldr	r1, [pc, #244]	; (80152a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 80151ac:	4618      	mov	r0, r3
 80151ae:	f7f7 fda2 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80151b2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80151b6:	f107 0308 	add.w	r3, r7, #8
 80151ba:	4611      	mov	r1, r2
 80151bc:	4618      	mov	r0, r3
 80151be:	f7f7 fe5e 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 80151c2:	4603      	mov	r3, r0
 80151c4:	461d      	mov	r5, r3
 80151c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7f8 f94b 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80151d0:	2d00      	cmp	r5, #0
 80151d2:	d009      	beq.n	80151e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	6859      	ldr	r1, [r3, #4]
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	689a      	ldr	r2, [r3, #8]
 80151dc:	f107 0310 	add.w	r3, r7, #16
 80151e0:	6878      	ldr	r0, [r7, #4]
 80151e2:	f000 fb33 	bl	801584c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 80151e6:	e237      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 80151e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80151ec:	492d      	ldr	r1, [pc, #180]	; (80152a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7f7 fd81 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80151f4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80151f8:	f107 0308 	add.w	r3, r7, #8
 80151fc:	4611      	mov	r1, r2
 80151fe:	4618      	mov	r0, r3
 8015200:	f7f7 fe3d 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 8015204:	4603      	mov	r3, r0
 8015206:	461d      	mov	r5, r3
 8015208:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801520c:	4618      	mov	r0, r3
 801520e:	f7f8 f92a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015212:	2d00      	cmp	r5, #0
 8015214:	d009      	beq.n	801522a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	6859      	ldr	r1, [r3, #4]
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	689a      	ldr	r2, [r3, #8]
 801521e:	f107 0310 	add.w	r3, r7, #16
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f000 fc40 	bl	8015aa8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8015228:	e216      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 801522a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801522e:	491e      	ldr	r1, [pc, #120]	; (80152a8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8015230:	4618      	mov	r0, r3
 8015232:	f7f7 fd60 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015236:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801523a:	f107 0308 	add.w	r3, r7, #8
 801523e:	4611      	mov	r1, r2
 8015240:	4618      	mov	r0, r3
 8015242:	f7f7 fe1c 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 8015246:	4603      	mov	r3, r0
 8015248:	461d      	mov	r5, r3
 801524a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801524e:	4618      	mov	r0, r3
 8015250:	f7f8 f909 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015254:	2d00      	cmp	r5, #0
 8015256:	d029      	beq.n	80152ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6859      	ldr	r1, [r3, #4]
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	689a      	ldr	r2, [r3, #8]
 8015260:	f107 0310 	add.w	r3, r7, #16
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f000 fc61 	bl	8015b2c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 801526a:	4603      	mov	r3, r0
 801526c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015270:	e1f2      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8015272:	bf00      	nop
 8015274:	08025238 	.word	0x08025238
 8015278:	0802523c 	.word	0x0802523c
 801527c:	08025240 	.word	0x08025240
 8015280:	08025244 	.word	0x08025244
 8015284:	08025248 	.word	0x08025248
 8015288:	0802524c 	.word	0x0802524c
 801528c:	08025250 	.word	0x08025250
 8015290:	08025254 	.word	0x08025254
 8015294:	08025258 	.word	0x08025258
 8015298:	0802525c 	.word	0x0802525c
 801529c:	08025260 	.word	0x08025260
 80152a0:	08025264 	.word	0x08025264
 80152a4:	08025268 	.word	0x08025268
 80152a8:	0802526c 	.word	0x0802526c
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 80152ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80152b0:	49b9      	ldr	r1, [pc, #740]	; (8015598 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7f7 fd1f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80152b8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80152bc:	f107 0308 	add.w	r3, r7, #8
 80152c0:	4611      	mov	r1, r2
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7f7 fddb 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 80152c8:	4603      	mov	r3, r0
 80152ca:	461d      	mov	r5, r3
 80152cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80152d0:	4618      	mov	r0, r3
 80152d2:	f7f8 f8c8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80152d6:	2d00      	cmp	r5, #0
 80152d8:	d009      	beq.n	80152ee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	6859      	ldr	r1, [r3, #4]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	689a      	ldr	r2, [r3, #8]
 80152e2:	f107 0310 	add.w	r3, r7, #16
 80152e6:	6878      	ldr	r0, [r7, #4]
 80152e8:	f000 fccc 	bl	8015c84 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 80152ec:	e1b4      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 80152ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80152f2:	49aa      	ldr	r1, [pc, #680]	; (801559c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7f7 fcfe 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80152fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80152fe:	f107 0308 	add.w	r3, r7, #8
 8015302:	4611      	mov	r1, r2
 8015304:	4618      	mov	r0, r3
 8015306:	f7f7 fdba 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 801530a:	4603      	mov	r3, r0
 801530c:	461d      	mov	r5, r3
 801530e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015312:	4618      	mov	r0, r3
 8015314:	f7f8 f8a7 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015318:	2d00      	cmp	r5, #0
 801531a:	d009      	beq.n	8015330 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	6859      	ldr	r1, [r3, #4]
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	689a      	ldr	r2, [r3, #8]
 8015324:	f107 0310 	add.w	r3, r7, #16
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	f000 fcf1 	bl	8015d10 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 801532e:	e193      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8015330:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015334:	499a      	ldr	r1, [pc, #616]	; (80155a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8015336:	4618      	mov	r0, r3
 8015338:	f7f7 fcdd 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801533c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8015340:	f107 0308 	add.w	r3, r7, #8
 8015344:	4611      	mov	r1, r2
 8015346:	4618      	mov	r0, r3
 8015348:	f7f7 fd99 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 801534c:	4603      	mov	r3, r0
 801534e:	461d      	mov	r5, r3
 8015350:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015354:	4618      	mov	r0, r3
 8015356:	f7f8 f886 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801535a:	2d00      	cmp	r5, #0
 801535c:	d009      	beq.n	8015372 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	6859      	ldr	r1, [r3, #4]
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	689a      	ldr	r2, [r3, #8]
 8015366:	f107 0310 	add.w	r3, r7, #16
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f000 fd16 	bl	8015d9c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8015370:	e172      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8015372:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015376:	498b      	ldr	r1, [pc, #556]	; (80155a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8015378:	4618      	mov	r0, r3
 801537a:	f7f7 fcbc 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801537e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8015382:	f107 0308 	add.w	r3, r7, #8
 8015386:	4611      	mov	r1, r2
 8015388:	4618      	mov	r0, r3
 801538a:	f7f7 fd78 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 801538e:	4603      	mov	r3, r0
 8015390:	461d      	mov	r5, r3
 8015392:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015396:	4618      	mov	r0, r3
 8015398:	f7f8 f865 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801539c:	2d00      	cmp	r5, #0
 801539e:	d009      	beq.n	80153b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	6859      	ldr	r1, [r3, #4]
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	689a      	ldr	r2, [r3, #8]
 80153a8:	f107 0310 	add.w	r3, r7, #16
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f000 fd3d 	bl	8015e2c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 80153b2:	e151      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 80153b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80153b8:	497b      	ldr	r1, [pc, #492]	; (80155a8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7f7 fc9b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80153c0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80153c4:	f107 0308 	add.w	r3, r7, #8
 80153c8:	4611      	mov	r1, r2
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7f7 fd57 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 80153d0:	4603      	mov	r3, r0
 80153d2:	461d      	mov	r5, r3
 80153d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80153d8:	4618      	mov	r0, r3
 80153da:	f7f8 f844 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80153de:	2d00      	cmp	r5, #0
 80153e0:	d009      	beq.n	80153f6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	6859      	ldr	r1, [r3, #4]
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	689a      	ldr	r2, [r3, #8]
 80153ea:	f107 0310 	add.w	r3, r7, #16
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f000 fd5e 	bl	8015eb0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 80153f4:	e130      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 80153f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80153fa:	496c      	ldr	r1, [pc, #432]	; (80155ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7f7 fc7a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015402:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8015406:	f107 0308 	add.w	r3, r7, #8
 801540a:	4611      	mov	r1, r2
 801540c:	4618      	mov	r0, r3
 801540e:	f7f7 fd36 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 8015412:	4603      	mov	r3, r0
 8015414:	461d      	mov	r5, r3
 8015416:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801541a:	4618      	mov	r0, r3
 801541c:	f7f8 f823 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015420:	2d00      	cmp	r5, #0
 8015422:	d009      	beq.n	8015438 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6859      	ldr	r1, [r3, #4]
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	689a      	ldr	r2, [r3, #8]
 801542c:	f107 0310 	add.w	r3, r7, #16
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f000 fd83 	bl	8015f3c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8015436:	e10f      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8015438:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801543c:	495c      	ldr	r1, [pc, #368]	; (80155b0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 801543e:	4618      	mov	r0, r3
 8015440:	f7f7 fc59 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015444:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8015448:	f107 0308 	add.w	r3, r7, #8
 801544c:	4611      	mov	r1, r2
 801544e:	4618      	mov	r0, r3
 8015450:	f7f7 fd15 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 8015454:	4603      	mov	r3, r0
 8015456:	461d      	mov	r5, r3
 8015458:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801545c:	4618      	mov	r0, r3
 801545e:	f7f8 f802 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015462:	2d00      	cmp	r5, #0
 8015464:	d009      	beq.n	801547a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	6859      	ldr	r1, [r3, #4]
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	689a      	ldr	r2, [r3, #8]
 801546e:	f107 0310 	add.w	r3, r7, #16
 8015472:	6878      	ldr	r0, [r7, #4]
 8015474:	f000 fda8 	bl	8015fc8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8015478:	e0ee      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 801547a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801547e:	494d      	ldr	r1, [pc, #308]	; (80155b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8015480:	4618      	mov	r0, r3
 8015482:	f7f7 fc38 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015486:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 801548a:	f107 0308 	add.w	r3, r7, #8
 801548e:	4611      	mov	r1, r2
 8015490:	4618      	mov	r0, r3
 8015492:	f7f7 fcf4 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 8015496:	4603      	mov	r3, r0
 8015498:	461d      	mov	r5, r3
 801549a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801549e:	4618      	mov	r0, r3
 80154a0:	f7f7 ffe1 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80154a4:	2d00      	cmp	r5, #0
 80154a6:	d00c      	beq.n	80154c2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	6859      	ldr	r1, [r3, #4]
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	689a      	ldr	r2, [r3, #8]
 80154b0:	f107 0310 	add.w	r3, r7, #16
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f000 fa29 	bl	801590c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 80154ba:	4603      	mov	r3, r0
 80154bc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80154c0:	e0ca      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 80154c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80154c6:	493c      	ldr	r1, [pc, #240]	; (80155b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7f7 fc14 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80154ce:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80154d2:	f107 0308 	add.w	r3, r7, #8
 80154d6:	4611      	mov	r1, r2
 80154d8:	4618      	mov	r0, r3
 80154da:	f7f7 fcd0 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 80154de:	4603      	mov	r3, r0
 80154e0:	461d      	mov	r5, r3
 80154e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7f7 ffbd 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80154ec:	2d00      	cmp	r5, #0
 80154ee:	d00b      	beq.n	8015508 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	6859      	ldr	r1, [r3, #4]
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	689a      	ldr	r2, [r3, #8]
 80154f8:	f107 0310 	add.w	r3, r7, #16
 80154fc:	482e      	ldr	r0, [pc, #184]	; (80155b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80154fe:	9000      	str	r0, [sp, #0]
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	f000 fda9 	bl	8016058 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8015506:	e0a7      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8015508:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801550c:	492b      	ldr	r1, [pc, #172]	; (80155bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 801550e:	4618      	mov	r0, r3
 8015510:	f7f7 fbf1 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015514:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8015518:	f107 0308 	add.w	r3, r7, #8
 801551c:	4611      	mov	r1, r2
 801551e:	4618      	mov	r0, r3
 8015520:	f7f7 fcad 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 8015524:	4603      	mov	r3, r0
 8015526:	461d      	mov	r5, r3
 8015528:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801552c:	4618      	mov	r0, r3
 801552e:	f7f7 ff9a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015532:	2d00      	cmp	r5, #0
 8015534:	d00b      	beq.n	801554e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	6859      	ldr	r1, [r3, #4]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	689a      	ldr	r2, [r3, #8]
 801553e:	f107 0310 	add.w	r3, r7, #16
 8015542:	481e      	ldr	r0, [pc, #120]	; (80155bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8015544:	9000      	str	r0, [sp, #0]
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f000 fd86 	bl	8016058 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 801554c:	e084      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 801554e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015552:	491b      	ldr	r1, [pc, #108]	; (80155c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8015554:	4618      	mov	r0, r3
 8015556:	f7f7 fbce 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801555a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801555e:	f107 0308 	add.w	r3, r7, #8
 8015562:	4611      	mov	r1, r2
 8015564:	4618      	mov	r0, r3
 8015566:	f7f7 fc8a 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 801556a:	4603      	mov	r3, r0
 801556c:	461d      	mov	r5, r3
 801556e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015572:	4618      	mov	r0, r3
 8015574:	f7f7 ff77 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015578:	2d00      	cmp	r5, #0
 801557a:	d023      	beq.n	80155c4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	6859      	ldr	r1, [r3, #4]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	689a      	ldr	r2, [r3, #8]
 8015584:	f107 0310 	add.w	r3, r7, #16
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f000 fe3b 	bl	8016204 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 801558e:	4603      	mov	r3, r0
 8015590:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015594:	e060      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8015596:	bf00      	nop
 8015598:	08025270 	.word	0x08025270
 801559c:	08025274 	.word	0x08025274
 80155a0:	08025278 	.word	0x08025278
 80155a4:	08025280 	.word	0x08025280
 80155a8:	08025284 	.word	0x08025284
 80155ac:	08025288 	.word	0x08025288
 80155b0:	0802528c 	.word	0x0802528c
 80155b4:	08025294 	.word	0x08025294
 80155b8:	08025298 	.word	0x08025298
 80155bc:	080252a0 	.word	0x080252a0
 80155c0:	080252b0 	.word	0x080252b0
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 80155c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80155c8:	4930      	ldr	r1, [pc, #192]	; (801568c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7f7 fb93 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80155d0:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80155d4:	f107 0308 	add.w	r3, r7, #8
 80155d8:	4611      	mov	r1, r2
 80155da:	4618      	mov	r0, r3
 80155dc:	f7f7 fc4f 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 80155e0:	4603      	mov	r3, r0
 80155e2:	461d      	mov	r5, r3
 80155e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7f7 ff3c 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80155ee:	2d00      	cmp	r5, #0
 80155f0:	d00e      	beq.n	8015610 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	331c      	adds	r3, #28
 80155f8:	681d      	ldr	r5, [r3, #0]
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	6859      	ldr	r1, [r3, #4]
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	689a      	ldr	r2, [r3, #8]
 8015602:	693b      	ldr	r3, [r7, #16]
 8015604:	6838      	ldr	r0, [r7, #0]
 8015606:	47a8      	blx	r5
 8015608:	4603      	mov	r3, r0
 801560a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801560e:	e023      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8015610:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015614:	491e      	ldr	r1, [pc, #120]	; (8015690 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8015616:	4618      	mov	r0, r3
 8015618:	f7f7 fb6d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801561c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8015620:	f107 0308 	add.w	r3, r7, #8
 8015624:	4611      	mov	r1, r2
 8015626:	4618      	mov	r0, r3
 8015628:	f7f7 fc29 	bl	800ce7e <_ZNK12SimpleString10startsWithERKS_>
 801562c:	4603      	mov	r3, r0
 801562e:	461d      	mov	r5, r3
 8015630:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015634:	4618      	mov	r0, r3
 8015636:	f7f7 ff16 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801563a:	2d00      	cmp	r5, #0
 801563c:	d009      	beq.n	8015652 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	6859      	ldr	r1, [r3, #4]
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	689a      	ldr	r2, [r3, #8]
 8015646:	f107 0310 	add.w	r3, r7, #16
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f000 fd98 	bl	8016180 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8015650:	e002      	b.n	8015658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8015652:	2300      	movs	r3, #0
 8015654:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8015658:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 801565c:	2b00      	cmp	r3, #0
 801565e:	d102      	bne.n	8015666 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8015660:	2400      	movs	r4, #0
 8015662:	2500      	movs	r5, #0
 8015664:	e000      	b.n	8015668 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8015666:	2501      	movs	r5, #1
 8015668:	f107 0308 	add.w	r3, r7, #8
 801566c:	4618      	mov	r0, r3
 801566e:	f7f7 fefa 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015672:	2d01      	cmp	r5, #1
 8015674:	d104      	bne.n	8015680 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	3301      	adds	r3, #1
 801567a:	613b      	str	r3, [r7, #16]
 801567c:	e455      	b.n	8014f2a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 801567e:	2401      	movs	r4, #1
 8015680:	4623      	mov	r3, r4
}
 8015682:	4618      	mov	r0, r3
 8015684:	37f0      	adds	r7, #240	; 0xf0
 8015686:	46bd      	mov	sp, r7
 8015688:	bdb0      	pop	{r4, r5, r7, pc}
 801568a:	bf00      	nop
 801568c:	08025248 	.word	0x08025248
 8015690:	080252b4 	.word	0x080252b4

08015694 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8015694:	b480      	push	{r7}
 8015696:	b083      	sub	sp, #12
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 801569c:	4b03      	ldr	r3, [pc, #12]	; (80156ac <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 801569e:	4618      	mov	r0, r3
 80156a0:	370c      	adds	r7, #12
 80156a2:	46bd      	mov	sp, r7
 80156a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a8:	4770      	bx	lr
 80156aa:	bf00      	nop
 80156ac:	080252b8 	.word	0x080252b8

080156b0 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 80156b0:	b480      	push	{r7}
 80156b2:	b083      	sub	sp, #12
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 80156b8:	4b03      	ldr	r3, [pc, #12]	; (80156c8 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	370c      	adds	r7, #12
 80156be:	46bd      	mov	sp, r7
 80156c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c4:	4770      	bx	lr
 80156c6:	bf00      	nop
 80156c8:	080253e8 	.word	0x080253e8

080156cc <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 80156cc:	b480      	push	{r7}
 80156ce:	b083      	sub	sp, #12
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
    return needHelp_;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	7b1b      	ldrb	r3, [r3, #12]
}
 80156d8:	4618      	mov	r0, r3
 80156da:	370c      	adds	r7, #12
 80156dc:	46bd      	mov	sp, r7
 80156de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e2:	4770      	bx	lr

080156e4 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 80156e4:	b480      	push	{r7}
 80156e6:	b083      	sub	sp, #12
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
    return verbose_;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	7b5b      	ldrb	r3, [r3, #13]
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	370c      	adds	r7, #12
 80156f4:	46bd      	mov	sp, r7
 80156f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fa:	4770      	bx	lr

080156fc <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 80156fc:	b480      	push	{r7}
 80156fe:	b083      	sub	sp, #12
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	7b9b      	ldrb	r3, [r3, #14]
}
 8015708:	4618      	mov	r0, r3
 801570a:	370c      	adds	r7, #12
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	4770      	bx	lr

08015714 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8015714:	b480      	push	{r7}
 8015716:	b083      	sub	sp, #12
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
    return color_;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	7bdb      	ldrb	r3, [r3, #15]
}
 8015720:	4618      	mov	r0, r3
 8015722:	370c      	adds	r7, #12
 8015724:	46bd      	mov	sp, r7
 8015726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572a:	4770      	bx	lr

0801572c <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 801572c:	b480      	push	{r7}
 801572e:	b083      	sub	sp, #12
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	7c5b      	ldrb	r3, [r3, #17]
}
 8015738:	4618      	mov	r0, r3
 801573a:	370c      	adds	r7, #12
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr

08015744 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8015744:	b480      	push	{r7}
 8015746:	b083      	sub	sp, #12
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	7c9b      	ldrb	r3, [r3, #18]
}
 8015750:	4618      	mov	r0, r3
 8015752:	370c      	adds	r7, #12
 8015754:	46bd      	mov	sp, r7
 8015756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575a:	4770      	bx	lr

0801575c <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 801575c:	b480      	push	{r7}
 801575e:	b083      	sub	sp, #12
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	7cdb      	ldrb	r3, [r3, #19]
}
 8015768:	4618      	mov	r0, r3
 801576a:	370c      	adds	r7, #12
 801576c:	46bd      	mov	sp, r7
 801576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015772:	4770      	bx	lr

08015774 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8015774:	b480      	push	{r7}
 8015776:	b083      	sub	sp, #12
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	7d1b      	ldrb	r3, [r3, #20]
}
 8015780:	4618      	mov	r0, r3
 8015782:	370c      	adds	r7, #12
 8015784:	46bd      	mov	sp, r7
 8015786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578a:	4770      	bx	lr

0801578c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 801578c:	b480      	push	{r7}
 801578e:	b083      	sub	sp, #12
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	7c1b      	ldrb	r3, [r3, #16]
}
 8015798:	4618      	mov	r0, r3
 801579a:	370c      	adds	r7, #12
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr

080157a4 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 80157a4:	b480      	push	{r7}
 80157a6:	b083      	sub	sp, #12
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
    return repeat_;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	69db      	ldr	r3, [r3, #28]
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	370c      	adds	r7, #12
 80157b4:	46bd      	mov	sp, r7
 80157b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ba:	4770      	bx	lr

080157bc <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 80157bc:	b480      	push	{r7}
 80157be:	b083      	sub	sp, #12
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
    return reversing_;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	7d5b      	ldrb	r3, [r3, #21]
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	370c      	adds	r7, #12
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr

080157d4 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 80157d4:	b480      	push	{r7}
 80157d6:	b083      	sub	sp, #12
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	7d9b      	ldrb	r3, [r3, #22]
}
 80157e0:	4618      	mov	r0, r3
 80157e2:	370c      	adds	r7, #12
 80157e4:	46bd      	mov	sp, r7
 80157e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ea:	4770      	bx	lr

080157ec <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 80157ec:	b480      	push	{r7}
 80157ee:	b083      	sub	sp, #12
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
    return shuffling_;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	7ddb      	ldrb	r3, [r3, #23]
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	370c      	adds	r7, #12
 80157fc:	46bd      	mov	sp, r7
 80157fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015802:	4770      	bx	lr

08015804 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8015804:	b480      	push	{r7}
 8015806:	b083      	sub	sp, #12
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	6a1b      	ldr	r3, [r3, #32]
}
 8015810:	4618      	mov	r0, r3
 8015812:	370c      	adds	r7, #12
 8015814:	46bd      	mov	sp, r7
 8015816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581a:	4770      	bx	lr

0801581c <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 801581c:	b480      	push	{r7}
 801581e:	b083      	sub	sp, #12
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8015828:	4618      	mov	r0, r3
 801582a:	370c      	adds	r7, #12
 801582c:	46bd      	mov	sp, r7
 801582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015832:	4770      	bx	lr

08015834 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8015834:	b480      	push	{r7}
 8015836:	b083      	sub	sp, #12
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015840:	4618      	mov	r0, r3
 8015842:	370c      	adds	r7, #12
 8015844:	46bd      	mov	sp, r7
 8015846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584a:	4770      	bx	lr

0801584c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b086      	sub	sp, #24
 8015850:	af00      	add	r7, sp, #0
 8015852:	60f8      	str	r0, [r7, #12]
 8015854:	60b9      	str	r1, [r7, #8]
 8015856:	607a      	str	r2, [r7, #4]
 8015858:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	2200      	movs	r2, #0
 801585e:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8015860:	683b      	ldr	r3, [r7, #0]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	009b      	lsls	r3, r3, #2
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	4413      	add	r3, r2
 801586a:	681a      	ldr	r2, [r3, #0]
 801586c:	f107 0310 	add.w	r3, r7, #16
 8015870:	4611      	mov	r1, r2
 8015872:	4618      	mov	r0, r3
 8015874:	f7f7 fa3f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8015878:	f107 0310 	add.w	r3, r7, #16
 801587c:	4618      	mov	r0, r3
 801587e:	f7f7 fdd1 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 8015882:	4603      	mov	r3, r0
 8015884:	2b02      	cmp	r3, #2
 8015886:	bf8c      	ite	hi
 8015888:	2301      	movhi	r3, #1
 801588a:	2300      	movls	r3, #0
 801588c:	b2db      	uxtb	r3, r3
 801588e:	2b00      	cmp	r3, #0
 8015890:	d00e      	beq.n	80158b0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	009b      	lsls	r3, r3, #2
 8015898:	687a      	ldr	r2, [r7, #4]
 801589a:	4413      	add	r3, r2
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	3302      	adds	r3, #2
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7f7 f824 	bl	800c8ee <_ZN12SimpleString4AtoIEPKc>
 80158a6:	4603      	mov	r3, r0
 80158a8:	461a      	mov	r2, r3
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	61da      	str	r2, [r3, #28]
 80158ae:	e01c      	b.n	80158ea <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 80158b0:	683b      	ldr	r3, [r7, #0]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	3301      	adds	r3, #1
 80158b6:	68ba      	ldr	r2, [r7, #8]
 80158b8:	429a      	cmp	r2, r3
 80158ba:	dd16      	ble.n	80158ea <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	3301      	adds	r3, #1
 80158c2:	009b      	lsls	r3, r3, #2
 80158c4:	687a      	ldr	r2, [r7, #4]
 80158c6:	4413      	add	r3, r2
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	4618      	mov	r0, r3
 80158cc:	f7f7 f80f 	bl	800c8ee <_ZN12SimpleString4AtoIEPKc>
 80158d0:	4603      	mov	r3, r0
 80158d2:	461a      	mov	r2, r3
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	69db      	ldr	r3, [r3, #28]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d004      	beq.n	80158ea <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	1c5a      	adds	r2, r3, #1
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	69db      	ldr	r3, [r3, #28]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d102      	bne.n	80158f8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	2202      	movs	r2, #2
 80158f6:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 80158f8:	f107 0310 	add.w	r3, r7, #16
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7f7 fdb2 	bl	800d466 <_ZN12SimpleStringD1Ev>

}
 8015902:	bf00      	nop
 8015904:	3718      	adds	r7, #24
 8015906:	46bd      	mov	sp, r7
 8015908:	bd80      	pop	{r7, pc}
	...

0801590c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 801590c:	b590      	push	{r4, r7, lr}
 801590e:	b089      	sub	sp, #36	; 0x24
 8015910:	af00      	add	r7, sp, #0
 8015912:	60f8      	str	r0, [r7, #12]
 8015914:	60b9      	str	r1, [r7, #8]
 8015916:	607a      	str	r2, [r7, #4]
 8015918:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	2201      	movs	r2, #1
 801591e:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8015920:	4b34      	ldr	r3, [pc, #208]	; (80159f4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	4798      	blx	r3
 8015926:	4603      	mov	r3, r0
 8015928:	461a      	mov	r2, r3
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	6a1b      	ldr	r3, [r3, #32]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d104      	bne.n	8015940 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	6a1b      	ldr	r3, [r3, #32]
 801593a:	1c5a      	adds	r2, r3, #1
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	009b      	lsls	r3, r3, #2
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	4413      	add	r3, r2
 801594a:	681a      	ldr	r2, [r3, #0]
 801594c:	f107 0314 	add.w	r3, r7, #20
 8015950:	4611      	mov	r1, r2
 8015952:	4618      	mov	r0, r3
 8015954:	f7f7 f9cf 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8015958:	f107 0314 	add.w	r3, r7, #20
 801595c:	4618      	mov	r0, r3
 801595e:	f7f7 fd61 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 8015962:	4603      	mov	r3, r0
 8015964:	2b02      	cmp	r3, #2
 8015966:	bf8c      	ite	hi
 8015968:	2301      	movhi	r3, #1
 801596a:	2300      	movls	r3, #0
 801596c:	b2db      	uxtb	r3, r3
 801596e:	2b00      	cmp	r3, #0
 8015970:	d010      	beq.n	8015994 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	2201      	movs	r2, #1
 8015976:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	009b      	lsls	r3, r3, #2
 801597e:	687a      	ldr	r2, [r7, #4]
 8015980:	4413      	add	r3, r2
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	3302      	adds	r3, #2
 8015986:	4618      	mov	r0, r3
 8015988:	f7f6 ff78 	bl	800c87c <_ZN12SimpleString4AtoUEPKc>
 801598c:	4602      	mov	r2, r0
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	621a      	str	r2, [r3, #32]
 8015992:	e01e      	b.n	80159d2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	3301      	adds	r3, #1
 801599a:	68ba      	ldr	r2, [r7, #8]
 801599c:	429a      	cmp	r2, r3
 801599e:	dd18      	ble.n	80159d2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	3301      	adds	r3, #1
 80159a6:	009b      	lsls	r3, r3, #2
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	4413      	add	r3, r2
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	4618      	mov	r0, r3
 80159b0:	f7f6 ff64 	bl	800c87c <_ZN12SimpleString4AtoUEPKc>
 80159b4:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 80159b6:	69fb      	ldr	r3, [r7, #28]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d00a      	beq.n	80159d2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	2201      	movs	r2, #1
 80159c0:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	69fa      	ldr	r2, [r7, #28]
 80159c6:	621a      	str	r2, [r3, #32]
            i++;
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	1c5a      	adds	r2, r3, #1
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	6a1b      	ldr	r3, [r3, #32]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	bf14      	ite	ne
 80159da:	2301      	movne	r3, #1
 80159dc:	2300      	moveq	r3, #0
 80159de:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 80159e0:	f107 0314 	add.w	r3, r7, #20
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7f7 fd3e 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 80159ea:	4623      	mov	r3, r4
}
 80159ec:	4618      	mov	r0, r3
 80159ee:	3724      	adds	r7, #36	; 0x24
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd90      	pop	{r4, r7, pc}
 80159f4:	200000a8 	.word	0x200000a8

080159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b088      	sub	sp, #32
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	60f8      	str	r0, [r7, #12]
 8015a00:	60b9      	str	r1, [r7, #8]
 8015a02:	607a      	str	r2, [r7, #4]
 8015a04:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8015a06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a08:	f7f7 fd0c 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 8015a0c:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8015a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	009b      	lsls	r3, r3, #2
 8015a14:	683a      	ldr	r2, [r7, #0]
 8015a16:	4413      	add	r3, r2
 8015a18:	681a      	ldr	r2, [r3, #0]
 8015a1a:	f107 0314 	add.w	r3, r7, #20
 8015a1e:	4611      	mov	r1, r2
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7f7 f968 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8015a26:	f107 0314 	add.w	r3, r7, #20
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7f7 fcfa 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 8015a30:	4602      	mov	r2, r0
 8015a32:	69fb      	ldr	r3, [r7, #28]
 8015a34:	4293      	cmp	r3, r2
 8015a36:	bf34      	ite	cc
 8015a38:	2301      	movcc	r3, #1
 8015a3a:	2300      	movcs	r3, #0
 8015a3c:	b2db      	uxtb	r3, r3
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d00c      	beq.n	8015a5c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8015a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	009b      	lsls	r3, r3, #2
 8015a48:	683a      	ldr	r2, [r7, #0]
 8015a4a:	4413      	add	r3, r2
 8015a4c:	681a      	ldr	r2, [r3, #0]
 8015a4e:	69fb      	ldr	r3, [r7, #28]
 8015a50:	4413      	add	r3, r2
 8015a52:	4619      	mov	r1, r3
 8015a54:	68f8      	ldr	r0, [r7, #12]
 8015a56:	f7f7 f94e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015a5a:	e019      	b.n	8015a90 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8015a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	3301      	adds	r3, #1
 8015a62:	687a      	ldr	r2, [r7, #4]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	dd0f      	ble.n	8015a88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8015a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	1c5a      	adds	r2, r3, #1
 8015a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a70:	601a      	str	r2, [r3, #0]
 8015a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	009b      	lsls	r3, r3, #2
 8015a78:	683a      	ldr	r2, [r7, #0]
 8015a7a:	4413      	add	r3, r2
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	4619      	mov	r1, r3
 8015a80:	68f8      	ldr	r0, [r7, #12]
 8015a82:	f7f7 f938 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015a86:	e003      	b.n	8015a90 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8015a88:	4906      	ldr	r1, [pc, #24]	; (8015aa4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8015a8a:	68f8      	ldr	r0, [r7, #12]
 8015a8c:	f7f7 f933 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8015a90:	f107 0314 	add.w	r3, r7, #20
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7f7 fce6 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8015a9a:	68f8      	ldr	r0, [r7, #12]
 8015a9c:	3720      	adds	r7, #32
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}
 8015aa2:	bf00      	nop
 8015aa4:	08025234 	.word	0x08025234

08015aa8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8015aa8:	b5b0      	push	{r4, r5, r7, lr}
 8015aaa:	b08c      	sub	sp, #48	; 0x30
 8015aac:	af02      	add	r7, sp, #8
 8015aae:	60f8      	str	r0, [r7, #12]
 8015ab0:	60b9      	str	r1, [r7, #8]
 8015ab2:	607a      	str	r2, [r7, #4]
 8015ab4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8015ab6:	f107 031c 	add.w	r3, r7, #28
 8015aba:	491a      	ldr	r1, [pc, #104]	; (8015b24 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8015abc:	4618      	mov	r0, r3
 8015abe:	f7f7 f91a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015ac2:	f107 0014 	add.w	r0, r7, #20
 8015ac6:	f107 031c 	add.w	r3, r7, #28
 8015aca:	9301      	str	r3, [sp, #4]
 8015acc:	683b      	ldr	r3, [r7, #0]
 8015ace:	9300      	str	r3, [sp, #0]
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	68ba      	ldr	r2, [r7, #8]
 8015ad4:	68f9      	ldr	r1, [r7, #12]
 8015ad6:	f7ff ff8f 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015ada:	f107 0514 	add.w	r5, r7, #20
 8015ade:	f44f 7289 	mov.w	r2, #274	; 0x112
 8015ae2:	4911      	ldr	r1, [pc, #68]	; (8015b28 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8015ae4:	2010      	movs	r0, #16
 8015ae6:	f7f4 fd43 	bl	800a570 <_ZnwjPKci>
 8015aea:	4604      	mov	r4, r0
 8015aec:	4629      	mov	r1, r5
 8015aee:	4620      	mov	r0, r4
 8015af0:	f009 ff40 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 8015af4:	627c      	str	r4, [r7, #36]	; 0x24
 8015af6:	f107 0314 	add.w	r3, r7, #20
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7f7 fcb3 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015b00:	f107 031c 	add.w	r3, r7, #28
 8015b04:	4618      	mov	r0, r3
 8015b06:	f7f7 fcae 	bl	800d466 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b0e:	4619      	mov	r1, r3
 8015b10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b12:	f009 ff4f 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8015b16:	4602      	mov	r2, r0
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015b1c:	bf00      	nop
 8015b1e:	3728      	adds	r7, #40	; 0x28
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bdb0      	pop	{r4, r5, r7, pc}
 8015b24:	08025268 	.word	0x08025268
 8015b28:	08025bfc 	.word	0x08025bfc

08015b2c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8015b2c:	b5b0      	push	{r4, r5, r7, lr}
 8015b2e:	b092      	sub	sp, #72	; 0x48
 8015b30:	af02      	add	r7, sp, #8
 8015b32:	60f8      	str	r0, [r7, #12]
 8015b34:	60b9      	str	r1, [r7, #8]
 8015b36:	607a      	str	r2, [r7, #4]
 8015b38:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8015b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015b3e:	494e      	ldr	r1, [pc, #312]	; (8015c78 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8015b40:	4618      	mov	r0, r3
 8015b42:	f7f7 f8d8 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015b46:	f107 0020 	add.w	r0, r7, #32
 8015b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015b4e:	9301      	str	r3, [sp, #4]
 8015b50:	683b      	ldr	r3, [r7, #0]
 8015b52:	9300      	str	r3, [sp, #0]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	68ba      	ldr	r2, [r7, #8]
 8015b58:	68f9      	ldr	r1, [r7, #12]
 8015b5a:	f7ff ff4d 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7f7 fc7f 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8015b68:	f107 0310 	add.w	r3, r7, #16
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	f7f8 fb8f 	bl	800e290 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8015b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015b76:	4941      	ldr	r1, [pc, #260]	; (8015c7c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f7f7 f8bc 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015b7e:	f107 0210 	add.w	r2, r7, #16
 8015b82:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015b86:	f107 0320 	add.w	r3, r7, #32
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	f7f7 fa1f 	bl	800cfce <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8015b90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015b94:	4618      	mov	r0, r3
 8015b96:	f7f7 fc66 	bl	800d466 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8015b9a:	f107 0310 	add.w	r3, r7, #16
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f7f8 fc1b 	bl	800e3da <_ZNK22SimpleStringCollection4sizeEv>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	2b02      	cmp	r3, #2
 8015ba8:	bf14      	ite	ne
 8015baa:	2301      	movne	r3, #1
 8015bac:	2300      	moveq	r3, #0
 8015bae:	b2db      	uxtb	r3, r3
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d001      	beq.n	8015bb8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8015bb4:	2400      	movs	r4, #0
 8015bb6:	e04f      	b.n	8015c58 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8015bb8:	f107 0310 	add.w	r3, r7, #16
 8015bbc:	2100      	movs	r1, #0
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7f8 fc18 	bl	800e3f4 <_ZN22SimpleStringCollectionixEj>
 8015bc4:	4604      	mov	r4, r0
 8015bc6:	f107 0310 	add.w	r3, r7, #16
 8015bca:	2100      	movs	r1, #0
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7f8 fc11 	bl	800e3f4 <_ZN22SimpleStringCollectionixEj>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f7f7 fc25 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	3b01      	subs	r3, #1
 8015bde:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8015be2:	2200      	movs	r2, #0
 8015be4:	4621      	mov	r1, r4
 8015be6:	f7f7 fd47 	bl	800d678 <_ZNK12SimpleString9subStringEjj>
 8015bea:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8015bee:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8015bf2:	4923      	ldr	r1, [pc, #140]	; (8015c80 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015bf4:	2010      	movs	r0, #16
 8015bf6:	f7f4 fcbb 	bl	800a570 <_ZnwjPKci>
 8015bfa:	4604      	mov	r4, r0
 8015bfc:	4629      	mov	r1, r5
 8015bfe:	4620      	mov	r0, r4
 8015c00:	f009 feb8 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c08:	4619      	mov	r1, r3
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	f009 fed2 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8015c10:	4602      	mov	r2, r0
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	625a      	str	r2, [r3, #36]	; 0x24
 8015c16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f7f7 fc23 	bl	800d466 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8015c20:	f107 0310 	add.w	r3, r7, #16
 8015c24:	2101      	movs	r1, #1
 8015c26:	4618      	mov	r0, r3
 8015c28:	f7f8 fbe4 	bl	800e3f4 <_ZN22SimpleStringCollectionixEj>
 8015c2c:	4605      	mov	r5, r0
 8015c2e:	f240 121f 	movw	r2, #287	; 0x11f
 8015c32:	4913      	ldr	r1, [pc, #76]	; (8015c80 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015c34:	2010      	movs	r0, #16
 8015c36:	f7f4 fc9b 	bl	800a570 <_ZnwjPKci>
 8015c3a:	4604      	mov	r4, r0
 8015c3c:	4629      	mov	r1, r5
 8015c3e:	4620      	mov	r0, r4
 8015c40:	f009 fe98 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c48:	4619      	mov	r1, r3
 8015c4a:	4620      	mov	r0, r4
 8015c4c:	f009 feb2 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8015c50:	4602      	mov	r2, r0
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8015c56:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8015c58:	f107 0310 	add.w	r3, r7, #16
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f7f8 fb8b 	bl	800e378 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8015c62:	f107 0320 	add.w	r3, r7, #32
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7f7 fbfd 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015c6c:	4623      	mov	r3, r4
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3740      	adds	r7, #64	; 0x40
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bdb0      	pop	{r4, r5, r7, pc}
 8015c76:	bf00      	nop
 8015c78:	0802526c 	.word	0x0802526c
 8015c7c:	08025c1c 	.word	0x08025c1c
 8015c80:	08025bfc 	.word	0x08025bfc

08015c84 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8015c84:	b5b0      	push	{r4, r5, r7, lr}
 8015c86:	b08c      	sub	sp, #48	; 0x30
 8015c88:	af02      	add	r7, sp, #8
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	60b9      	str	r1, [r7, #8]
 8015c8e:	607a      	str	r2, [r7, #4]
 8015c90:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8015c92:	f107 031c 	add.w	r3, r7, #28
 8015c96:	491c      	ldr	r1, [pc, #112]	; (8015d08 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7f7 f82c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015c9e:	f107 0014 	add.w	r0, r7, #20
 8015ca2:	f107 031c 	add.w	r3, r7, #28
 8015ca6:	9301      	str	r3, [sp, #4]
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	9300      	str	r3, [sp, #0]
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	68ba      	ldr	r2, [r7, #8]
 8015cb0:	68f9      	ldr	r1, [r7, #12]
 8015cb2:	f7ff fea1 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015cb6:	f107 0514 	add.w	r5, r7, #20
 8015cba:	f240 1225 	movw	r2, #293	; 0x125
 8015cbe:	4913      	ldr	r1, [pc, #76]	; (8015d0c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8015cc0:	2010      	movs	r0, #16
 8015cc2:	f7f4 fc55 	bl	800a570 <_ZnwjPKci>
 8015cc6:	4604      	mov	r4, r0
 8015cc8:	4629      	mov	r1, r5
 8015cca:	4620      	mov	r0, r4
 8015ccc:	f009 fe52 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 8015cd0:	627c      	str	r4, [r7, #36]	; 0x24
 8015cd2:	f107 0314 	add.w	r3, r7, #20
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7f7 fbc5 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015cdc:	f107 031c 	add.w	r3, r7, #28
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f7f7 fbc0 	bl	800d466 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8015ce6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ce8:	f009 fe7f 	bl	801f9ea <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cf4:	f009 fe5e 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8015cf8:	4602      	mov	r2, r0
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015cfe:	bf00      	nop
 8015d00:	3728      	adds	r7, #40	; 0x28
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bdb0      	pop	{r4, r5, r7, pc}
 8015d06:	bf00      	nop
 8015d08:	08025270 	.word	0x08025270
 8015d0c:	08025bfc 	.word	0x08025bfc

08015d10 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8015d10:	b5b0      	push	{r4, r5, r7, lr}
 8015d12:	b08c      	sub	sp, #48	; 0x30
 8015d14:	af02      	add	r7, sp, #8
 8015d16:	60f8      	str	r0, [r7, #12]
 8015d18:	60b9      	str	r1, [r7, #8]
 8015d1a:	607a      	str	r2, [r7, #4]
 8015d1c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8015d1e:	f107 031c 	add.w	r3, r7, #28
 8015d22:	491c      	ldr	r1, [pc, #112]	; (8015d94 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7f6 ffe6 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015d2a:	f107 0014 	add.w	r0, r7, #20
 8015d2e:	f107 031c 	add.w	r3, r7, #28
 8015d32:	9301      	str	r3, [sp, #4]
 8015d34:	683b      	ldr	r3, [r7, #0]
 8015d36:	9300      	str	r3, [sp, #0]
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	68ba      	ldr	r2, [r7, #8]
 8015d3c:	68f9      	ldr	r1, [r7, #12]
 8015d3e:	f7ff fe5b 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015d42:	f107 0514 	add.w	r5, r7, #20
 8015d46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015d4a:	4913      	ldr	r1, [pc, #76]	; (8015d98 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8015d4c:	2010      	movs	r0, #16
 8015d4e:	f7f4 fc0f 	bl	800a570 <_ZnwjPKci>
 8015d52:	4604      	mov	r4, r0
 8015d54:	4629      	mov	r1, r5
 8015d56:	4620      	mov	r0, r4
 8015d58:	f009 fe0c 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 8015d5c:	627c      	str	r4, [r7, #36]	; 0x24
 8015d5e:	f107 0314 	add.w	r3, r7, #20
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7f7 fb7f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015d68:	f107 031c 	add.w	r3, r7, #28
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f7f7 fb7a 	bl	800d466 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8015d72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d74:	f009 fe46 	bl	801fa04 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d7c:	4619      	mov	r1, r3
 8015d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d80:	f009 fe18 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8015d84:	4602      	mov	r2, r0
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015d8a:	bf00      	nop
 8015d8c:	3728      	adds	r7, #40	; 0x28
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bdb0      	pop	{r4, r5, r7, pc}
 8015d92:	bf00      	nop
 8015d94:	08025274 	.word	0x08025274
 8015d98:	08025bfc 	.word	0x08025bfc

08015d9c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8015d9c:	b5b0      	push	{r4, r5, r7, lr}
 8015d9e:	b08c      	sub	sp, #48	; 0x30
 8015da0:	af02      	add	r7, sp, #8
 8015da2:	60f8      	str	r0, [r7, #12]
 8015da4:	60b9      	str	r1, [r7, #8]
 8015da6:	607a      	str	r2, [r7, #4]
 8015da8:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8015daa:	f107 031c 	add.w	r3, r7, #28
 8015dae:	491d      	ldr	r1, [pc, #116]	; (8015e24 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7f6 ffa0 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015db6:	f107 0014 	add.w	r0, r7, #20
 8015dba:	f107 031c 	add.w	r3, r7, #28
 8015dbe:	9301      	str	r3, [sp, #4]
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	9300      	str	r3, [sp, #0]
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	68ba      	ldr	r2, [r7, #8]
 8015dc8:	68f9      	ldr	r1, [r7, #12]
 8015dca:	f7ff fe15 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015dce:	f107 0514 	add.w	r5, r7, #20
 8015dd2:	f240 1233 	movw	r2, #307	; 0x133
 8015dd6:	4914      	ldr	r1, [pc, #80]	; (8015e28 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8015dd8:	2010      	movs	r0, #16
 8015dda:	f7f4 fbc9 	bl	800a570 <_ZnwjPKci>
 8015dde:	4604      	mov	r4, r0
 8015de0:	4629      	mov	r1, r5
 8015de2:	4620      	mov	r0, r4
 8015de4:	f009 fdc6 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 8015de8:	627c      	str	r4, [r7, #36]	; 0x24
 8015dea:	f107 0314 	add.w	r3, r7, #20
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7f7 fb39 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015df4:	f107 031c 	add.w	r3, r7, #28
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f7f7 fb34 	bl	800d466 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8015dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e00:	f009 fdf3 	bl	801f9ea <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8015e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e06:	f009 fdfd 	bl	801fa04 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e0e:	4619      	mov	r1, r3
 8015e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e12:	f009 fdcf 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8015e16:	4602      	mov	r2, r0
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015e1c:	bf00      	nop
 8015e1e:	3728      	adds	r7, #40	; 0x28
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bdb0      	pop	{r4, r5, r7, pc}
 8015e24:	08025278 	.word	0x08025278
 8015e28:	08025bfc 	.word	0x08025bfc

08015e2c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8015e2c:	b5b0      	push	{r4, r5, r7, lr}
 8015e2e:	b08c      	sub	sp, #48	; 0x30
 8015e30:	af02      	add	r7, sp, #8
 8015e32:	60f8      	str	r0, [r7, #12]
 8015e34:	60b9      	str	r1, [r7, #8]
 8015e36:	607a      	str	r2, [r7, #4]
 8015e38:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8015e3a:	f107 031c 	add.w	r3, r7, #28
 8015e3e:	491a      	ldr	r1, [pc, #104]	; (8015ea8 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8015e40:	4618      	mov	r0, r3
 8015e42:	f7f6 ff58 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015e46:	f107 0014 	add.w	r0, r7, #20
 8015e4a:	f107 031c 	add.w	r3, r7, #28
 8015e4e:	9301      	str	r3, [sp, #4]
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	9300      	str	r3, [sp, #0]
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	68ba      	ldr	r2, [r7, #8]
 8015e58:	68f9      	ldr	r1, [r7, #12]
 8015e5a:	f7ff fdcd 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015e5e:	f107 0514 	add.w	r5, r7, #20
 8015e62:	f240 123b 	movw	r2, #315	; 0x13b
 8015e66:	4911      	ldr	r1, [pc, #68]	; (8015eac <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8015e68:	2010      	movs	r0, #16
 8015e6a:	f7f4 fb81 	bl	800a570 <_ZnwjPKci>
 8015e6e:	4604      	mov	r4, r0
 8015e70:	4629      	mov	r1, r5
 8015e72:	4620      	mov	r0, r4
 8015e74:	f009 fd7e 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 8015e78:	627c      	str	r4, [r7, #36]	; 0x24
 8015e7a:	f107 0314 	add.w	r3, r7, #20
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f7f7 faf1 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015e84:	f107 031c 	add.w	r3, r7, #28
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f7f7 faec 	bl	800d466 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e92:	4619      	mov	r1, r3
 8015e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e96:	f009 fd8d 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8015e9a:	4602      	mov	r2, r0
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015ea0:	bf00      	nop
 8015ea2:	3728      	adds	r7, #40	; 0x28
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8015ea8:	08025280 	.word	0x08025280
 8015eac:	08025bfc 	.word	0x08025bfc

08015eb0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8015eb0:	b5b0      	push	{r4, r5, r7, lr}
 8015eb2:	b08c      	sub	sp, #48	; 0x30
 8015eb4:	af02      	add	r7, sp, #8
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	60b9      	str	r1, [r7, #8]
 8015eba:	607a      	str	r2, [r7, #4]
 8015ebc:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8015ebe:	f107 031c 	add.w	r3, r7, #28
 8015ec2:	491c      	ldr	r1, [pc, #112]	; (8015f34 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f7f6 ff16 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015eca:	f107 0014 	add.w	r0, r7, #20
 8015ece:	f107 031c 	add.w	r3, r7, #28
 8015ed2:	9301      	str	r3, [sp, #4]
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	9300      	str	r3, [sp, #0]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	68ba      	ldr	r2, [r7, #8]
 8015edc:	68f9      	ldr	r1, [r7, #12]
 8015ede:	f7ff fd8b 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015ee2:	f107 0514 	add.w	r5, r7, #20
 8015ee6:	f240 1241 	movw	r2, #321	; 0x141
 8015eea:	4913      	ldr	r1, [pc, #76]	; (8015f38 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8015eec:	2010      	movs	r0, #16
 8015eee:	f7f4 fb3f 	bl	800a570 <_ZnwjPKci>
 8015ef2:	4604      	mov	r4, r0
 8015ef4:	4629      	mov	r1, r5
 8015ef6:	4620      	mov	r0, r4
 8015ef8:	f009 fd3c 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 8015efc:	627c      	str	r4, [r7, #36]	; 0x24
 8015efe:	f107 0314 	add.w	r3, r7, #20
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7f7 faaf 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015f08:	f107 031c 	add.w	r3, r7, #28
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7f7 faaa 	bl	800d466 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8015f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f14:	f009 fd69 	bl	801f9ea <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f20:	f009 fd48 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8015f24:	4602      	mov	r2, r0
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015f2a:	bf00      	nop
 8015f2c:	3728      	adds	r7, #40	; 0x28
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bdb0      	pop	{r4, r5, r7, pc}
 8015f32:	bf00      	nop
 8015f34:	08025284 	.word	0x08025284
 8015f38:	08025bfc 	.word	0x08025bfc

08015f3c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8015f3c:	b5b0      	push	{r4, r5, r7, lr}
 8015f3e:	b08c      	sub	sp, #48	; 0x30
 8015f40:	af02      	add	r7, sp, #8
 8015f42:	60f8      	str	r0, [r7, #12]
 8015f44:	60b9      	str	r1, [r7, #8]
 8015f46:	607a      	str	r2, [r7, #4]
 8015f48:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8015f4a:	f107 031c 	add.w	r3, r7, #28
 8015f4e:	491c      	ldr	r1, [pc, #112]	; (8015fc0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8015f50:	4618      	mov	r0, r3
 8015f52:	f7f6 fed0 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015f56:	f107 0014 	add.w	r0, r7, #20
 8015f5a:	f107 031c 	add.w	r3, r7, #28
 8015f5e:	9301      	str	r3, [sp, #4]
 8015f60:	683b      	ldr	r3, [r7, #0]
 8015f62:	9300      	str	r3, [sp, #0]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	68ba      	ldr	r2, [r7, #8]
 8015f68:	68f9      	ldr	r1, [r7, #12]
 8015f6a:	f7ff fd45 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015f6e:	f107 0514 	add.w	r5, r7, #20
 8015f72:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015f76:	4913      	ldr	r1, [pc, #76]	; (8015fc4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8015f78:	2010      	movs	r0, #16
 8015f7a:	f7f4 faf9 	bl	800a570 <_ZnwjPKci>
 8015f7e:	4604      	mov	r4, r0
 8015f80:	4629      	mov	r1, r5
 8015f82:	4620      	mov	r0, r4
 8015f84:	f009 fcf6 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 8015f88:	627c      	str	r4, [r7, #36]	; 0x24
 8015f8a:	f107 0314 	add.w	r3, r7, #20
 8015f8e:	4618      	mov	r0, r3
 8015f90:	f7f7 fa69 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8015f94:	f107 031c 	add.w	r3, r7, #28
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7f7 fa64 	bl	800d466 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8015f9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fa0:	f009 fd30 	bl	801fa04 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fa8:	4619      	mov	r1, r3
 8015faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fac:	f009 fd02 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8015fb0:	4602      	mov	r2, r0
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015fb6:	bf00      	nop
 8015fb8:	3728      	adds	r7, #40	; 0x28
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8015fbe:	bf00      	nop
 8015fc0:	08025288 	.word	0x08025288
 8015fc4:	08025bfc 	.word	0x08025bfc

08015fc8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8015fc8:	b5b0      	push	{r4, r5, r7, lr}
 8015fca:	b08c      	sub	sp, #48	; 0x30
 8015fcc:	af02      	add	r7, sp, #8
 8015fce:	60f8      	str	r0, [r7, #12]
 8015fd0:	60b9      	str	r1, [r7, #8]
 8015fd2:	607a      	str	r2, [r7, #4]
 8015fd4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8015fd6:	f107 031c 	add.w	r3, r7, #28
 8015fda:	491d      	ldr	r1, [pc, #116]	; (8016050 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f7f6 fe8a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8015fe2:	f107 0014 	add.w	r0, r7, #20
 8015fe6:	f107 031c 	add.w	r3, r7, #28
 8015fea:	9301      	str	r3, [sp, #4]
 8015fec:	683b      	ldr	r3, [r7, #0]
 8015fee:	9300      	str	r3, [sp, #0]
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	68ba      	ldr	r2, [r7, #8]
 8015ff4:	68f9      	ldr	r1, [r7, #12]
 8015ff6:	f7ff fcff 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015ffa:	f107 0514 	add.w	r5, r7, #20
 8015ffe:	f240 124f 	movw	r2, #335	; 0x14f
 8016002:	4914      	ldr	r1, [pc, #80]	; (8016054 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8016004:	2010      	movs	r0, #16
 8016006:	f7f4 fab3 	bl	800a570 <_ZnwjPKci>
 801600a:	4604      	mov	r4, r0
 801600c:	4629      	mov	r1, r5
 801600e:	4620      	mov	r0, r4
 8016010:	f009 fcb0 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 8016014:	627c      	str	r4, [r7, #36]	; 0x24
 8016016:	f107 0314 	add.w	r3, r7, #20
 801601a:	4618      	mov	r0, r3
 801601c:	f7f7 fa23 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8016020:	f107 031c 	add.w	r3, r7, #28
 8016024:	4618      	mov	r0, r3
 8016026:	f7f7 fa1e 	bl	800d466 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 801602a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801602c:	f009 fcea 	bl	801fa04 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8016030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016032:	f009 fcda 	bl	801f9ea <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801603a:	4619      	mov	r1, r3
 801603c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801603e:	f009 fcb9 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8016042:	4602      	mov	r2, r0
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016048:	bf00      	nop
 801604a:	3728      	adds	r7, #40	; 0x28
 801604c:	46bd      	mov	sp, r7
 801604e:	bdb0      	pop	{r4, r5, r7, pc}
 8016050:	0802528c 	.word	0x0802528c
 8016054:	08025bfc 	.word	0x08025bfc

08016058 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8016058:	b5b0      	push	{r4, r5, r7, lr}
 801605a:	b092      	sub	sp, #72	; 0x48
 801605c:	af02      	add	r7, sp, #8
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]
 8016064:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8016066:	f107 0320 	add.w	r3, r7, #32
 801606a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801606c:	4618      	mov	r0, r3
 801606e:	f7f6 fe42 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8016072:	f107 0018 	add.w	r0, r7, #24
 8016076:	f107 0320 	add.w	r3, r7, #32
 801607a:	9301      	str	r3, [sp, #4]
 801607c:	683b      	ldr	r3, [r7, #0]
 801607e:	9300      	str	r3, [sp, #0]
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	68ba      	ldr	r2, [r7, #8]
 8016084:	68f9      	ldr	r1, [r7, #12]
 8016086:	f7ff fcb7 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801608a:	f107 0320 	add.w	r3, r7, #32
 801608e:	4618      	mov	r0, r3
 8016090:	f7f7 f9e9 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8016094:	f107 0010 	add.w	r0, r7, #16
 8016098:	f107 0118 	add.w	r1, r7, #24
 801609c:	2329      	movs	r3, #41	; 0x29
 801609e:	222c      	movs	r2, #44	; 0x2c
 80160a0:	f7f7 fb92 	bl	800d7c8 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 80160a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80160a8:	f107 0110 	add.w	r1, r7, #16
 80160ac:	2202      	movs	r2, #2
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7f7 fb2c 	bl	800d70c <_ZNK12SimpleString9subStringEj>
 80160b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80160b8:	f107 0310 	add.w	r3, r7, #16
 80160bc:	4611      	mov	r1, r2
 80160be:	4618      	mov	r0, r3
 80160c0:	f7f6 fe85 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 80160c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7f7 f9cc 	bl	800d466 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 80160ce:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80160d2:	492a      	ldr	r1, [pc, #168]	; (801617c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80160d4:	2010      	movs	r0, #16
 80160d6:	f7f4 fa4b 	bl	800a570 <_ZnwjPKci>
 80160da:	4604      	mov	r4, r0
 80160dc:	f107 0310 	add.w	r3, r7, #16
 80160e0:	4619      	mov	r1, r3
 80160e2:	4620      	mov	r0, r4
 80160e4:	f009 fc46 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 80160e8:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 80160ea:	f107 0318 	add.w	r3, r7, #24
 80160ee:	2100      	movs	r1, #0
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7f7 fb1c 	bl	800d72e <_ZNK12SimpleString2atEj>
 80160f6:	4603      	mov	r3, r0
 80160f8:	461a      	mov	r2, r3
 80160fa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80160fe:	f107 0118 	add.w	r1, r7, #24
 8016102:	232c      	movs	r3, #44	; 0x2c
 8016104:	f7f7 fb60 	bl	800d7c8 <_ZNK12SimpleString17subStringFromTillEcc>
 8016108:	f107 0530 	add.w	r5, r7, #48	; 0x30
 801610c:	f240 125b 	movw	r2, #347	; 0x15b
 8016110:	491a      	ldr	r1, [pc, #104]	; (801617c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8016112:	2010      	movs	r0, #16
 8016114:	f7f4 fa2c 	bl	800a570 <_ZnwjPKci>
 8016118:	4604      	mov	r4, r0
 801611a:	4629      	mov	r1, r5
 801611c:	4620      	mov	r0, r4
 801611e:	f009 fc29 	bl	801f974 <_ZN10TestFilterC1ERK12SimpleString>
 8016122:	63bc      	str	r4, [r7, #56]	; 0x38
 8016124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016128:	4618      	mov	r0, r3
 801612a:	f7f7 f99c 	bl	800d466 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 801612e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016130:	f009 fc5b 	bl	801f9ea <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8016134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016136:	f009 fc58 	bl	801f9ea <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801613e:	4619      	mov	r1, r3
 8016140:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016142:	f009 fc37 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8016146:	4602      	mov	r2, r0
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016150:	4619      	mov	r1, r3
 8016152:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016154:	f009 fc2e 	bl	801f9b4 <_ZN10TestFilter3addEPS_>
 8016158:	4602      	mov	r2, r0
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 801615e:	f107 0310 	add.w	r3, r7, #16
 8016162:	4618      	mov	r0, r3
 8016164:	f7f7 f97f 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8016168:	f107 0318 	add.w	r3, r7, #24
 801616c:	4618      	mov	r0, r3
 801616e:	f7f7 f97a 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8016172:	bf00      	nop
 8016174:	3740      	adds	r7, #64	; 0x40
 8016176:	46bd      	mov	sp, r7
 8016178:	bdb0      	pop	{r4, r5, r7, pc}
 801617a:	bf00      	nop
 801617c:	08025bfc 	.word	0x08025bfc

08016180 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8016180:	b590      	push	{r4, r7, lr}
 8016182:	b08b      	sub	sp, #44	; 0x2c
 8016184:	af02      	add	r7, sp, #8
 8016186:	60f8      	str	r0, [r7, #12]
 8016188:	60b9      	str	r1, [r7, #8]
 801618a:	607a      	str	r2, [r7, #4]
 801618c:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801618e:	f107 0318 	add.w	r3, r7, #24
 8016192:	491b      	ldr	r1, [pc, #108]	; (8016200 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8016194:	4618      	mov	r0, r3
 8016196:	f7f6 fdae 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801619a:	f107 0010 	add.w	r0, r7, #16
 801619e:	f107 0318 	add.w	r3, r7, #24
 80161a2:	9301      	str	r3, [sp, #4]
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	9300      	str	r3, [sp, #0]
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	68ba      	ldr	r2, [r7, #8]
 80161ac:	68f9      	ldr	r1, [r7, #12]
 80161ae:	f7ff fc23 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80161b2:	f107 0318 	add.w	r3, r7, #24
 80161b6:	4618      	mov	r0, r3
 80161b8:	f7f7 f955 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 80161bc:	f107 0310 	add.w	r3, r7, #16
 80161c0:	4618      	mov	r0, r3
 80161c2:	f7f7 f92f 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 80161c6:	4603      	mov	r3, r0
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	bf0c      	ite	eq
 80161cc:	2301      	moveq	r3, #1
 80161ce:	2300      	movne	r3, #0
 80161d0:	b2db      	uxtb	r3, r3
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d001      	beq.n	80161da <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 80161d6:	2400      	movs	r4, #0
 80161d8:	e008      	b.n	80161ec <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	3330      	adds	r3, #48	; 0x30
 80161de:	f107 0210 	add.w	r2, r7, #16
 80161e2:	4611      	mov	r1, r2
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7f6 fdf2 	bl	800cdce <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 80161ea:	2401      	movs	r4, #1
 80161ec:	f107 0310 	add.w	r3, r7, #16
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7f7 f938 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80161f6:	2c01      	cmp	r4, #1
}
 80161f8:	3724      	adds	r7, #36	; 0x24
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd90      	pop	{r4, r7, pc}
 80161fe:	bf00      	nop
 8016200:	080252b4 	.word	0x080252b4

08016204 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8016204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016206:	b093      	sub	sp, #76	; 0x4c
 8016208:	af02      	add	r7, sp, #8
 801620a:	60f8      	str	r0, [r7, #12]
 801620c:	60b9      	str	r1, [r7, #8]
 801620e:	607a      	str	r2, [r7, #4]
 8016210:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8016212:	f107 0318 	add.w	r3, r7, #24
 8016216:	4953      	ldr	r1, [pc, #332]	; (8016364 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8016218:	4618      	mov	r0, r3
 801621a:	f7f6 fd6c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801621e:	f107 0010 	add.w	r0, r7, #16
 8016222:	f107 0318 	add.w	r3, r7, #24
 8016226:	9301      	str	r3, [sp, #4]
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	9300      	str	r3, [sp, #0]
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	68ba      	ldr	r2, [r7, #8]
 8016230:	68f9      	ldr	r1, [r7, #12]
 8016232:	f7ff fbe1 	bl	80159f8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016236:	f107 0318 	add.w	r3, r7, #24
 801623a:	4618      	mov	r0, r3
 801623c:	f7f7 f913 	bl	800d466 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8016240:	f107 0310 	add.w	r3, r7, #16
 8016244:	4618      	mov	r0, r3
 8016246:	f7f7 f8ed 	bl	800d424 <_ZNK12SimpleString4sizeEv>
 801624a:	4603      	mov	r3, r0
 801624c:	2b00      	cmp	r3, #0
 801624e:	bf0c      	ite	eq
 8016250:	2301      	moveq	r3, #1
 8016252:	2300      	movne	r3, #0
 8016254:	b2db      	uxtb	r3, r3
 8016256:	2b00      	cmp	r3, #0
 8016258:	d001      	beq.n	801625e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 801625a:	2400      	movs	r4, #0
 801625c:	e078      	b.n	8016350 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 801625e:	2500      	movs	r5, #0
 8016260:	f107 0320 	add.w	r3, r7, #32
 8016264:	4940      	ldr	r1, [pc, #256]	; (8016368 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8016266:	4618      	mov	r0, r3
 8016268:	f7f6 fd45 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801626c:	2601      	movs	r6, #1
 801626e:	f107 0220 	add.w	r2, r7, #32
 8016272:	f107 0310 	add.w	r3, r7, #16
 8016276:	4611      	mov	r1, r2
 8016278:	4618      	mov	r0, r3
 801627a:	f7f7 f900 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801627e:	4603      	mov	r3, r0
 8016280:	2b00      	cmp	r3, #0
 8016282:	d111      	bne.n	80162a8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8016284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016288:	4938      	ldr	r1, [pc, #224]	; (801636c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 801628a:	4618      	mov	r0, r3
 801628c:	f7f6 fd33 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8016290:	2501      	movs	r5, #1
 8016292:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016296:	f107 0310 	add.w	r3, r7, #16
 801629a:	4611      	mov	r1, r2
 801629c:	4618      	mov	r0, r3
 801629e:	f7f7 f8ee 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 80162a2:	4603      	mov	r3, r0
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d001      	beq.n	80162ac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 80162a8:	2401      	movs	r4, #1
 80162aa:	e000      	b.n	80162ae <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 80162ac:	2400      	movs	r4, #0
 80162ae:	2d00      	cmp	r5, #0
 80162b0:	d004      	beq.n	80162bc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 80162b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80162b6:	4618      	mov	r0, r3
 80162b8:	f7f7 f8d5 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80162bc:	2e00      	cmp	r6, #0
 80162be:	d004      	beq.n	80162ca <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 80162c0:	f107 0320 	add.w	r3, r7, #32
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7f7 f8ce 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80162ca:	2c00      	cmp	r4, #0
 80162cc:	d005      	beq.n	80162da <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	2200      	movs	r2, #0
 80162d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80162d6:	2401      	movs	r4, #1
 80162d8:	e03a      	b.n	8016350 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 80162da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80162de:	4924      	ldr	r1, [pc, #144]	; (8016370 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 80162e0:	4618      	mov	r0, r3
 80162e2:	f7f6 fd08 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80162e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80162ea:	f107 0310 	add.w	r3, r7, #16
 80162ee:	4611      	mov	r1, r2
 80162f0:	4618      	mov	r0, r3
 80162f2:	f7f7 f8c4 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 80162f6:	4603      	mov	r3, r0
 80162f8:	461c      	mov	r4, r3
 80162fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80162fe:	4618      	mov	r0, r3
 8016300:	f7f7 f8b1 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8016304:	2c00      	cmp	r4, #0
 8016306:	d005      	beq.n	8016314 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	2201      	movs	r2, #1
 801630c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8016310:	2401      	movs	r4, #1
 8016312:	e01d      	b.n	8016350 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8016314:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016318:	4916      	ldr	r1, [pc, #88]	; (8016374 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 801631a:	4618      	mov	r0, r3
 801631c:	f7f6 fceb 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8016320:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8016324:	f107 0310 	add.w	r3, r7, #16
 8016328:	4611      	mov	r1, r2
 801632a:	4618      	mov	r0, r3
 801632c:	f7f7 f8a7 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 8016330:	4603      	mov	r3, r0
 8016332:	461c      	mov	r4, r3
 8016334:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016338:	4618      	mov	r0, r3
 801633a:	f7f7 f894 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801633e:	2c00      	cmp	r4, #0
 8016340:	d005      	beq.n	801634e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	2202      	movs	r2, #2
 8016346:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801634a:	2401      	movs	r4, #1
 801634c:	e000      	b.n	8016350 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 801634e:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8016350:	f107 0310 	add.w	r3, r7, #16
 8016354:	4618      	mov	r0, r3
 8016356:	f7f7 f886 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801635a:	4623      	mov	r3, r4
}
 801635c:	4618      	mov	r0, r3
 801635e:	3744      	adds	r7, #68	; 0x44
 8016360:	46bd      	mov	sp, r7
 8016362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016364:	080252b0 	.word	0x080252b0
 8016368:	08025c20 	.word	0x08025c20
 801636c:	08025c28 	.word	0x08025c28
 8016370:	08025c30 	.word	0x08025c30
 8016374:	08025c38 	.word	0x08025c38

08016378 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8016378:	b480      	push	{r7}
 801637a:	b083      	sub	sp, #12
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016386:	2b01      	cmp	r3, #1
 8016388:	bf0c      	ite	eq
 801638a:	2301      	moveq	r3, #1
 801638c:	2300      	movne	r3, #0
 801638e:	b2db      	uxtb	r3, r3
}
 8016390:	4618      	mov	r0, r3
 8016392:	370c      	adds	r7, #12
 8016394:	46bd      	mov	sp, r7
 8016396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639a:	4770      	bx	lr

0801639c <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 801639c:	b480      	push	{r7}
 801639e:	b083      	sub	sp, #12
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80163aa:	2b02      	cmp	r3, #2
 80163ac:	bf0c      	ite	eq
 80163ae:	2301      	moveq	r3, #1
 80163b0:	2300      	movne	r3, #0
 80163b2:	b2db      	uxtb	r3, r3
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	370c      	adds	r7, #12
 80163b8:	46bd      	mov	sp, r7
 80163ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163be:	4770      	bx	lr

080163c0 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 80163c0:	b480      	push	{r7}
 80163c2:	b083      	sub	sp, #12
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
    return packageName_;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	3330      	adds	r3, #48	; 0x30
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	370c      	adds	r7, #12
 80163d0:	46bd      	mov	sp, r7
 80163d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d6:	4770      	bx	lr

080163d8 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 80163d8:	b480      	push	{r7}
 80163da:	b083      	sub	sp, #12
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2200      	movs	r2, #0
 80163e4:	601a      	str	r2, [r3, #0]
    {}
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	4618      	mov	r0, r3
 80163ea:	370c      	adds	r7, #12
 80163ec:	46bd      	mov	sp, r7
 80163ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f2:	4770      	bx	lr

080163f4 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 80163f4:	b480      	push	{r7}
 80163f6:	b083      	sub	sp, #12
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016402:	2200      	movs	r2, #0
 8016404:	601a      	str	r2, [r3, #0]
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801640c:	3304      	adds	r3, #4
 801640e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016412:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	2200      	movs	r2, #0
 8016418:	701a      	strb	r2, [r3, #0]
}
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	4618      	mov	r0, r3
 801641e:	370c      	adds	r7, #12
 8016420:	46bd      	mov	sp, r7
 8016422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016426:	4770      	bx	lr

08016428 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8016428:	b480      	push	{r7}
 801642a:	b083      	sub	sp, #12
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016436:	2200      	movs	r2, #0
 8016438:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	2200      	movs	r2, #0
 801643e:	701a      	strb	r2, [r3, #0]
}
 8016440:	bf00      	nop
 8016442:	370c      	adds	r7, #12
 8016444:	46bd      	mov	sp, r7
 8016446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644a:	4770      	bx	lr

0801644c <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 801644c:	b40e      	push	{r1, r2, r3}
 801644e:	b590      	push	{r4, r7, lr}
 8016450:	b086      	sub	sp, #24
 8016452:	af00      	add	r7, sp, #0
 8016454:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801645c:	3304      	adds	r3, #4
 801645e:	681a      	ldr	r2, [r3, #0]
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	1ad3      	subs	r3, r2, r3
 801646a:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 801646c:	697b      	ldr	r3, [r7, #20]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d032      	beq.n	80164d8 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8016472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016476:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8016478:	4b1b      	ldr	r3, [pc, #108]	; (80164e8 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 801647a:	681c      	ldr	r4, [r3, #0]
 801647c:	687a      	ldr	r2, [r7, #4]
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	18d0      	adds	r0, r2, r3
 8016488:	697b      	ldr	r3, [r7, #20]
 801648a:	1c59      	adds	r1, r3, #1
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016490:	47a0      	blx	r4
 8016492:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8016494:	693b      	ldr	r3, [r7, #16]
 8016496:	2b00      	cmp	r3, #0
 8016498:	dd09      	ble.n	80164ae <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164a0:	681a      	ldr	r2, [r3, #0]
 80164a2:	693b      	ldr	r3, [r7, #16]
 80164a4:	441a      	add	r2, r3
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164ac:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164b4:	681a      	ldr	r2, [r3, #0]
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164bc:	3304      	adds	r3, #4
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d90a      	bls.n	80164da <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164ca:	3304      	adds	r3, #4
 80164cc:	681a      	ldr	r2, [r3, #0]
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164d4:	601a      	str	r2, [r3, #0]
 80164d6:	e000      	b.n	80164da <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 80164d8:	bf00      	nop
    va_end(arguments);
}
 80164da:	3718      	adds	r7, #24
 80164dc:	46bd      	mov	sp, r7
 80164de:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80164e2:	b003      	add	sp, #12
 80164e4:	4770      	bx	lr
 80164e6:	bf00      	nop
 80164e8:	200000b0 	.word	0x200000b0

080164ec <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b08c      	sub	sp, #48	; 0x30
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	60f8      	str	r0, [r7, #12]
 80164f4:	60b9      	str	r1, [r7, #8]
 80164f6:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 80164fc:	2310      	movs	r3, #16
 80164fe:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8016500:	2300      	movs	r3, #0
 8016502:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8016504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	429a      	cmp	r2, r3
 801650a:	d273      	bcs.n	80165f4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 801650c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801650e:	493b      	ldr	r1, [pc, #236]	; (80165fc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8016510:	68f8      	ldr	r0, [r7, #12]
 8016512:	f7ff ff9b 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8016516:	687a      	ldr	r2, [r7, #4]
 8016518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801651a:	1ad3      	subs	r3, r2, r3
 801651c:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 801651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016520:	2b10      	cmp	r3, #16
 8016522:	d901      	bls.n	8016528 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8016524:	2310      	movs	r3, #16
 8016526:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8016528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652a:	f1c3 0310 	rsb	r3, r3, #16
 801652e:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8016530:	2300      	movs	r3, #0
 8016532:	62bb      	str	r3, [r7, #40]	; 0x28
 8016534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016538:	429a      	cmp	r2, r3
 801653a:	d215      	bcs.n	8016568 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 801653c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016540:	4413      	add	r3, r2
 8016542:	69fa      	ldr	r2, [r7, #28]
 8016544:	4413      	add	r3, r2
 8016546:	781b      	ldrb	r3, [r3, #0]
 8016548:	461a      	mov	r2, r3
 801654a:	492d      	ldr	r1, [pc, #180]	; (8016600 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 801654c:	68f8      	ldr	r0, [r7, #12]
 801654e:	f7ff ff7d 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8016552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016554:	2b07      	cmp	r3, #7
 8016556:	d103      	bne.n	8016560 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8016558:	492a      	ldr	r1, [pc, #168]	; (8016604 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801655a:	68f8      	ldr	r0, [r7, #12]
 801655c:	f7ff ff76 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016562:	3301      	adds	r3, #1
 8016564:	62bb      	str	r3, [r7, #40]	; 0x28
 8016566:	e7e5      	b.n	8016534 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8016568:	2300      	movs	r3, #0
 801656a:	62bb      	str	r3, [r7, #40]	; 0x28
 801656c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801656e:	697b      	ldr	r3, [r7, #20]
 8016570:	429a      	cmp	r2, r3
 8016572:	d207      	bcs.n	8016584 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8016574:	4924      	ldr	r1, [pc, #144]	; (8016608 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8016576:	68f8      	ldr	r0, [r7, #12]
 8016578:	f7ff ff68 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 801657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801657e:	3301      	adds	r3, #1
 8016580:	62bb      	str	r3, [r7, #40]	; 0x28
 8016582:	e7f3      	b.n	801656c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8016584:	697b      	ldr	r3, [r7, #20]
 8016586:	2b08      	cmp	r3, #8
 8016588:	d903      	bls.n	8016592 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 801658a:	491e      	ldr	r1, [pc, #120]	; (8016604 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801658c:	68f8      	ldr	r0, [r7, #12]
 801658e:	f7ff ff5d 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8016592:	491e      	ldr	r1, [pc, #120]	; (801660c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8016594:	68f8      	ldr	r0, [r7, #12]
 8016596:	f7ff ff59 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801659a:	2300      	movs	r3, #0
 801659c:	62bb      	str	r3, [r7, #40]	; 0x28
 801659e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a2:	429a      	cmp	r2, r3
 80165a4:	d21d      	bcs.n	80165e2 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 80165a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165aa:	4413      	add	r3, r2
 80165ac:	69fa      	ldr	r2, [r7, #28]
 80165ae:	4413      	add	r3, r2
 80165b0:	781b      	ldrb	r3, [r3, #0]
 80165b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 80165b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165ba:	2b1f      	cmp	r3, #31
 80165bc:	d903      	bls.n	80165c6 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 80165be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165c2:	2b7e      	cmp	r3, #126	; 0x7e
 80165c4:	d902      	bls.n	80165cc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 80165c6:	232e      	movs	r3, #46	; 0x2e
 80165c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 80165cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165d0:	461a      	mov	r2, r3
 80165d2:	490f      	ldr	r1, [pc, #60]	; (8016610 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 80165d4:	68f8      	ldr	r0, [r7, #12]
 80165d6:	f7ff ff39 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80165da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165dc:	3301      	adds	r3, #1
 80165de:	62bb      	str	r3, [r7, #40]	; 0x28
 80165e0:	e7dd      	b.n	801659e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 80165e2:	490c      	ldr	r1, [pc, #48]	; (8016614 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 80165e4:	68f8      	ldr	r0, [r7, #12]
 80165e6:	f7ff ff31 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 80165ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ee:	4413      	add	r3, r2
 80165f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 80165f2:	e787      	b.n	8016504 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 80165f4:	bf00      	nop
 80165f6:	3730      	adds	r7, #48	; 0x30
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}
 80165fc:	08025c50 	.word	0x08025c50
 8016600:	08025c5c 	.word	0x08025c5c
 8016604:	08025c64 	.word	0x08025c64
 8016608:	08025c68 	.word	0x08025c68
 801660c:	08025c6c 	.word	0x08025c6c
 8016610:	08025c70 	.word	0x08025c70
 8016614:	08025c74 	.word	0x08025c74

08016618 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8016618:	b480      	push	{r7}
 801661a:	b083      	sub	sp, #12
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
    return buffer_;
 8016620:	687b      	ldr	r3, [r7, #4]
}
 8016622:	4618      	mov	r0, r3
 8016624:	370c      	adds	r7, #12
 8016626:	46bd      	mov	sp, r7
 8016628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662c:	4770      	bx	lr

0801662e <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 801662e:	b480      	push	{r7}
 8016630:	b083      	sub	sp, #12
 8016632:	af00      	add	r7, sp, #0
 8016634:	6078      	str	r0, [r7, #4]
 8016636:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801663e:	3304      	adds	r3, #4
 8016640:	683a      	ldr	r2, [r7, #0]
 8016642:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801664a:	3304      	adds	r3, #4
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016652:	d306      	bcc.n	8016662 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801665a:	3304      	adds	r3, #4
 801665c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016660:	601a      	str	r2, [r3, #0]
}
 8016662:	bf00      	nop
 8016664:	370c      	adds	r7, #12
 8016666:	46bd      	mov	sp, r7
 8016668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666c:	4770      	bx	lr

0801666e <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 801666e:	b480      	push	{r7}
 8016670:	b083      	sub	sp, #12
 8016672:	af00      	add	r7, sp, #0
 8016674:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801667c:	3304      	adds	r3, #4
 801667e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016682:	601a      	str	r2, [r3, #0]
}
 8016684:	bf00      	nop
 8016686:	370c      	adds	r7, #12
 8016688:	46bd      	mov	sp, r7
 801668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668e:	4770      	bx	lr

08016690 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8016690:	b480      	push	{r7}
 8016692:	b083      	sub	sp, #12
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801669e:	681a      	ldr	r2, [r3, #0]
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166a6:	3304      	adds	r3, #4
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	429a      	cmp	r2, r3
 80166ac:	bf2c      	ite	cs
 80166ae:	2301      	movcs	r3, #1
 80166b0:	2300      	movcc	r3, #0
 80166b2:	b2db      	uxtb	r3, r3
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	370c      	adds	r7, #12
 80166b8:	46bd      	mov	sp, r7
 80166ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166be:	4770      	bx	lr

080166c0 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2200      	movs	r2, #0
 80166cc:	601a      	str	r2, [r3, #0]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	2200      	movs	r2, #0
 80166d2:	711a      	strb	r2, [r3, #4]
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	3308      	adds	r3, #8
 80166d8:	4618      	mov	r0, r3
 80166da:	f7ff fe8b 	bl	80163f4 <_ZN18SimpleStringBufferC1Ev>
{
}
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	4618      	mov	r0, r3
 80166e2:	3708      	adds	r7, #8
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd80      	pop	{r7, pc}

080166e8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 80166e8:	b5b0      	push	{r4, r5, r7, lr}
 80166ea:	b086      	sub	sp, #24
 80166ec:	af02      	add	r7, sp, #8
 80166ee:	60f8      	str	r0, [r7, #12]
 80166f0:	60b9      	str	r1, [r7, #8]
 80166f2:	607a      	str	r2, [r7, #4]
 80166f4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	f103 0408 	add.w	r4, r3, #8
 80166fc:	687d      	ldr	r5, [r7, #4]
 80166fe:	6a3b      	ldr	r3, [r7, #32]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	3314      	adds	r3, #20
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	6a38      	ldr	r0, [r7, #32]
 8016708:	4798      	blx	r3
 801670a:	4603      	mov	r3, r0
 801670c:	9301      	str	r3, [sp, #4]
 801670e:	683b      	ldr	r3, [r7, #0]
 8016710:	9300      	str	r3, [sp, #0]
 8016712:	462b      	mov	r3, r5
 8016714:	68ba      	ldr	r2, [r7, #8]
 8016716:	4904      	ldr	r1, [pc, #16]	; (8016728 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8016718:	4620      	mov	r0, r4
 801671a:	f7ff fe97 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
}
 801671e:	bf00      	nop
 8016720:	3710      	adds	r7, #16
 8016722:	46bd      	mov	sp, r7
 8016724:	bdb0      	pop	{r4, r5, r7, pc}
 8016726:	bf00      	nop
 8016728:	08025c78 	.word	0x08025c78

0801672c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 801672c:	b5b0      	push	{r4, r5, r7, lr}
 801672e:	b086      	sub	sp, #24
 8016730:	af02      	add	r7, sp, #8
 8016732:	60f8      	str	r0, [r7, #12]
 8016734:	60b9      	str	r1, [r7, #8]
 8016736:	607a      	str	r2, [r7, #4]
 8016738:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	f103 0408 	add.w	r4, r3, #8
 8016740:	687d      	ldr	r5, [r7, #4]
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	3318      	adds	r3, #24
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	6838      	ldr	r0, [r7, #0]
 801674c:	4798      	blx	r3
 801674e:	4603      	mov	r3, r0
 8016750:	9300      	str	r3, [sp, #0]
 8016752:	462b      	mov	r3, r5
 8016754:	68ba      	ldr	r2, [r7, #8]
 8016756:	4904      	ldr	r1, [pc, #16]	; (8016768 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8016758:	4620      	mov	r0, r4
 801675a:	f7ff fe77 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
}
 801675e:	bf00      	nop
 8016760:	3710      	adds	r7, #16
 8016762:	46bd      	mov	sp, r7
 8016764:	bdb0      	pop	{r4, r5, r7, pc}
 8016766:	bf00      	nop
 8016768:	08025cb0 	.word	0x08025cb0

0801676c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b082      	sub	sp, #8
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	3308      	adds	r3, #8
 8016778:	4903      	ldr	r1, [pc, #12]	; (8016788 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 801677a:	4618      	mov	r0, r3
 801677c:	f7ff fe66 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016780:	bf00      	nop
 8016782:	3708      	adds	r7, #8
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}
 8016788:	08025ce0 	.word	0x08025ce0

0801678c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b084      	sub	sp, #16
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2200      	movs	r2, #0
 8016798:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	2200      	movs	r2, #0
 801679e:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 80167a0:	2367      	movs	r3, #103	; 0x67
 80167a2:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	f203 1311 	addw	r3, r3, #273	; 0x111
 80167aa:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f103 0208 	add.w	r2, r3, #8
 80167b2:	68bb      	ldr	r3, [r7, #8]
 80167b4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80167b8:	4619      	mov	r1, r3
 80167ba:	4610      	mov	r0, r2
 80167bc:	f7ff ff37 	bl	801662e <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 80167c0:	bf00      	nop
 80167c2:	3710      	adds	r7, #16
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}

080167c8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 80167c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167ca:	b089      	sub	sp, #36	; 0x24
 80167cc:	af04      	add	r7, sp, #16
 80167ce:	60f8      	str	r0, [r7, #12]
 80167d0:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d102      	bne.n	80167e0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 80167da:	68f8      	ldr	r0, [r7, #12]
 80167dc:	f000 f882 	bl	80168e4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	1c5a      	adds	r2, r3, #1
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	f103 0508 	add.w	r5, r3, #8
 80167f0:	68bb      	ldr	r3, [r7, #8]
 80167f2:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80167fa:	68bb      	ldr	r3, [r7, #8]
 80167fc:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80167fe:	68bb      	ldr	r3, [r7, #8]
 8016800:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016802:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	695a      	ldr	r2, [r3, #20]
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	695b      	ldr	r3, [r3, #20]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	3314      	adds	r3, #20
 8016810:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016812:	4610      	mov	r0, r2
 8016814:	4798      	blx	r3
 8016816:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801681c:	9303      	str	r3, [sp, #12]
 801681e:	9202      	str	r2, [sp, #8]
 8016820:	683a      	ldr	r2, [r7, #0]
 8016822:	9201      	str	r2, [sp, #4]
 8016824:	9400      	str	r4, [sp, #0]
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	4632      	mov	r2, r6
 801682a:	4915      	ldr	r1, [pc, #84]	; (8016880 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 801682c:	4628      	mov	r0, r5
 801682e:	f7ff fe0d 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	f103 0008 	add.w	r0, r3, #8
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	6899      	ldr	r1, [r3, #8]
 801683c:	68bb      	ldr	r3, [r7, #8]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	461a      	mov	r2, r3
 8016842:	f7ff fe53 	bl	80164ec <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8016846:	68bb      	ldr	r3, [r7, #8]
 8016848:	695a      	ldr	r2, [r3, #20]
 801684a:	68bb      	ldr	r3, [r7, #8]
 801684c:	695b      	ldr	r3, [r3, #20]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	3314      	adds	r3, #20
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	4610      	mov	r0, r2
 8016856:	4798      	blx	r3
 8016858:	4603      	mov	r3, r0
 801685a:	490a      	ldr	r1, [pc, #40]	; (8016884 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 801685c:	4618      	mov	r0, r3
 801685e:	f7f6 f887 	bl	800c970 <_ZN12SimpleString6StrCmpEPKcS1_>
 8016862:	4603      	mov	r3, r0
 8016864:	2b00      	cmp	r3, #0
 8016866:	bf0c      	ite	eq
 8016868:	2301      	moveq	r3, #1
 801686a:	2300      	movne	r3, #0
 801686c:	b2db      	uxtb	r3, r3
 801686e:	2b00      	cmp	r3, #0
 8016870:	d002      	beq.n	8016878 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	2201      	movs	r2, #1
 8016876:	711a      	strb	r2, [r3, #4]
}
 8016878:	bf00      	nop
 801687a:	3714      	adds	r7, #20
 801687c:	46bd      	mov	sp, r7
 801687e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016880:	08025d00 	.word	0x08025d00
 8016884:	08025d60 	.word	0x08025d60

08016888 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b084      	sub	sp, #16
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d103      	bne.n	80168a0 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8016898:	6878      	ldr	r0, [r7, #4]
 801689a:	f7ff ff67 	bl	801676c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 801689e:	e01e      	b.n	80168de <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	3308      	adds	r3, #8
 80168a4:	4618      	mov	r0, r3
 80168a6:	f7ff fef3 	bl	8016690 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 80168aa:	4603      	mov	r3, r0
 80168ac:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	3308      	adds	r3, #8
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7ff fedb 	bl	801666e <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 80168b8:	7bfb      	ldrb	r3, [r7, #15]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d002      	beq.n	80168c4 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 80168be:	6878      	ldr	r0, [r7, #4]
 80168c0:	f000 f820 	bl	8016904 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	4619      	mov	r1, r3
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f000 f82a 	bl	8016924 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	791b      	ldrb	r3, [r3, #4]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d002      	beq.n	80168de <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 80168d8:	6878      	ldr	r0, [r7, #4]
 80168da:	f000 f839 	bl	8016950 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 80168de:	3710      	adds	r7, #16
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}

080168e4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b082      	sub	sp, #8
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	3308      	adds	r3, #8
 80168f0:	4903      	ldr	r1, [pc, #12]	; (8016900 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7ff fdaa 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
}
 80168f8:	bf00      	nop
 80168fa:	3708      	adds	r7, #8
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}
 8016900:	08025d68 	.word	0x08025d68

08016904 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b082      	sub	sp, #8
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	3308      	adds	r3, #8
 8016910:	4903      	ldr	r1, [pc, #12]	; (8016920 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8016912:	4618      	mov	r0, r3
 8016914:	f7ff fd9a 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016918:	bf00      	nop
 801691a:	3708      	adds	r7, #8
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}
 8016920:	08025d80 	.word	0x08025d80

08016924 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
 801692c:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	f103 0008 	add.w	r0, r3, #8
 8016934:	683b      	ldr	r3, [r7, #0]
 8016936:	4a04      	ldr	r2, [pc, #16]	; (8016948 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8016938:	4904      	ldr	r1, [pc, #16]	; (801694c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 801693a:	f7ff fd87 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
}
 801693e:	bf00      	nop
 8016940:	3708      	adds	r7, #8
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}
 8016946:	bf00      	nop
 8016948:	08025dc8 	.word	0x08025dc8
 801694c:	08025de0 	.word	0x08025de0

08016950 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	3308      	adds	r3, #8
 801695c:	4903      	ldr	r1, [pc, #12]	; (801696c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 801695e:	4618      	mov	r0, r3
 8016960:	f7ff fd74 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016964:	bf00      	nop
 8016966:	3708      	adds	r7, #8
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}
 801696c:	08025de8 	.word	0x08025de8

08016970 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b08a      	sub	sp, #40	; 0x28
 8016974:	af06      	add	r7, sp, #24
 8016976:	60f8      	str	r0, [r7, #12]
 8016978:	60b9      	str	r1, [r7, #8]
 801697a:	607a      	str	r2, [r7, #4]
 801697c:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 801697e:	f7f9 fe8d 	bl	801069c <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8016982:	4602      	mov	r2, r0
 8016984:	69bb      	ldr	r3, [r7, #24]
 8016986:	9305      	str	r3, [sp, #20]
 8016988:	683b      	ldr	r3, [r7, #0]
 801698a:	9304      	str	r3, [sp, #16]
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	9303      	str	r3, [sp, #12]
 8016990:	68bb      	ldr	r3, [r7, #8]
 8016992:	9302      	str	r3, [sp, #8]
 8016994:	9201      	str	r2, [sp, #4]
 8016996:	2300      	movs	r3, #0
 8016998:	9300      	str	r3, [sp, #0]
 801699a:	2300      	movs	r3, #0
 801699c:	4a04      	ldr	r2, [pc, #16]	; (80169b0 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 801699e:	4905      	ldr	r1, [pc, #20]	; (80169b4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 80169a0:	68f8      	ldr	r0, [r7, #12]
 80169a2:	f000 f855 	bl	8016a50 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80169a6:	bf00      	nop
 80169a8:	3710      	adds	r7, #16
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}
 80169ae:	bf00      	nop
 80169b0:	08025c44 	.word	0x08025c44
 80169b4:	08025efc 	.word	0x08025efc

080169b8 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80169b8:	b590      	push	{r4, r7, lr}
 80169ba:	b08b      	sub	sp, #44	; 0x2c
 80169bc:	af06      	add	r7, sp, #24
 80169be:	60f8      	str	r0, [r7, #12]
 80169c0:	60b9      	str	r1, [r7, #8]
 80169c2:	607a      	str	r2, [r7, #4]
 80169c4:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80169c6:	68bb      	ldr	r3, [r7, #8]
 80169c8:	68d8      	ldr	r0, [r3, #12]
 80169ca:	68bb      	ldr	r3, [r7, #8]
 80169cc:	691c      	ldr	r4, [r3, #16]
 80169ce:	68bb      	ldr	r3, [r7, #8]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	68ba      	ldr	r2, [r7, #8]
 80169d4:	6952      	ldr	r2, [r2, #20]
 80169d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169d8:	9105      	str	r1, [sp, #20]
 80169da:	6a39      	ldr	r1, [r7, #32]
 80169dc:	9104      	str	r1, [sp, #16]
 80169de:	6839      	ldr	r1, [r7, #0]
 80169e0:	9103      	str	r1, [sp, #12]
 80169e2:	6879      	ldr	r1, [r7, #4]
 80169e4:	9102      	str	r1, [sp, #8]
 80169e6:	9201      	str	r2, [sp, #4]
 80169e8:	9300      	str	r3, [sp, #0]
 80169ea:	4623      	mov	r3, r4
 80169ec:	4602      	mov	r2, r0
 80169ee:	4904      	ldr	r1, [pc, #16]	; (8016a00 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80169f0:	68f8      	ldr	r0, [r7, #12]
 80169f2:	f000 f82d 	bl	8016a50 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80169f6:	bf00      	nop
 80169f8:	3714      	adds	r7, #20
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd90      	pop	{r4, r7, pc}
 80169fe:	bf00      	nop
 8016a00:	08025f20 	.word	0x08025f20

08016a04 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016a04:	b590      	push	{r4, r7, lr}
 8016a06:	b08b      	sub	sp, #44	; 0x2c
 8016a08:	af06      	add	r7, sp, #24
 8016a0a:	60f8      	str	r0, [r7, #12]
 8016a0c:	60b9      	str	r1, [r7, #8]
 8016a0e:	607a      	str	r2, [r7, #4]
 8016a10:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	68d8      	ldr	r0, [r3, #12]
 8016a16:	68bb      	ldr	r3, [r7, #8]
 8016a18:	691c      	ldr	r4, [r3, #16]
 8016a1a:	68bb      	ldr	r3, [r7, #8]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	68ba      	ldr	r2, [r7, #8]
 8016a20:	6952      	ldr	r2, [r2, #20]
 8016a22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a24:	9105      	str	r1, [sp, #20]
 8016a26:	6a39      	ldr	r1, [r7, #32]
 8016a28:	9104      	str	r1, [sp, #16]
 8016a2a:	6839      	ldr	r1, [r7, #0]
 8016a2c:	9103      	str	r1, [sp, #12]
 8016a2e:	6879      	ldr	r1, [r7, #4]
 8016a30:	9102      	str	r1, [sp, #8]
 8016a32:	9201      	str	r2, [sp, #4]
 8016a34:	9300      	str	r3, [sp, #0]
 8016a36:	4623      	mov	r3, r4
 8016a38:	4602      	mov	r2, r0
 8016a3a:	4904      	ldr	r1, [pc, #16]	; (8016a4c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8016a3c:	68f8      	ldr	r0, [r7, #12]
 8016a3e:	f000 f807 	bl	8016a50 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016a42:	bf00      	nop
 8016a44:	3714      	adds	r7, #20
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd90      	pop	{r4, r7, pc}
 8016a4a:	bf00      	nop
 8016a4c:	08025f48 	.word	0x08025f48

08016a50 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016a50:	b590      	push	{r4, r7, lr}
 8016a52:	b087      	sub	sp, #28
 8016a54:	af02      	add	r7, sp, #8
 8016a56:	60f8      	str	r0, [r7, #12]
 8016a58:	60b9      	str	r1, [r7, #8]
 8016a5a:	607a      	str	r2, [r7, #4]
 8016a5c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	3308      	adds	r3, #8
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	4910      	ldr	r1, [pc, #64]	; (8016aa8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8016a66:	4618      	mov	r0, r3
 8016a68:	f7ff fcf0 	bl	801644c <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8016a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a6e:	9300      	str	r3, [sp, #0]
 8016a70:	6a3b      	ldr	r3, [r7, #32]
 8016a72:	683a      	ldr	r2, [r7, #0]
 8016a74:	6879      	ldr	r1, [r7, #4]
 8016a76:	68f8      	ldr	r0, [r7, #12]
 8016a78:	f7ff fe36 	bl	80166e8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8016a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016a82:	68f8      	ldr	r0, [r7, #12]
 8016a84:	f7ff fe52 	bl	801672c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8016a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	3308      	adds	r3, #8
 8016a8e:	681c      	ldr	r4, [r3, #0]
 8016a90:	68f8      	ldr	r0, [r7, #12]
 8016a92:	f000 f80b 	bl	8016aac <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8016a96:	4603      	mov	r3, r0
 8016a98:	4619      	mov	r1, r3
 8016a9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016a9c:	47a0      	blx	r4
}
 8016a9e:	bf00      	nop
 8016aa0:	3714      	adds	r7, #20
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd90      	pop	{r4, r7, pc}
 8016aa6:	bf00      	nop
 8016aa8:	08025f74 	.word	0x08025f74

08016aac <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	3308      	adds	r3, #8
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f7ff fdad 	bl	8016618 <_ZN18SimpleStringBuffer8toStringEv>
 8016abe:	4603      	mov	r3, r0
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	3708      	adds	r7, #8
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}

08016ac8 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	3308      	adds	r3, #8
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f7ff fca7 	bl	8016428 <_ZN18SimpleStringBuffer5clearEv>
}
 8016ada:	bf00      	nop
 8016adc:	3708      	adds	r7, #8
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}

08016ae2 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8016ae2:	b480      	push	{r7}
 8016ae4:	b085      	sub	sp, #20
 8016ae6:	af00      	add	r7, sp, #0
 8016ae8:	60f8      	str	r0, [r7, #12]
 8016aea:	60b9      	str	r1, [r7, #8]
 8016aec:	607a      	str	r2, [r7, #4]
 8016aee:	603b      	str	r3, [r7, #0]
    number_ = number;
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	687a      	ldr	r2, [r7, #4]
 8016af4:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	68ba      	ldr	r2, [r7, #8]
 8016afa:	609a      	str	r2, [r3, #8]
    size_ = size;
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	683a      	ldr	r2, [r7, #0]
 8016b00:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	69ba      	ldr	r2, [r7, #24]
 8016b06:	615a      	str	r2, [r3, #20]
    period_ = period;
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	7f3a      	ldrb	r2, [r7, #28]
 8016b0c:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016b14:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b1a:	60da      	str	r2, [r3, #12]
    line_ = line;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b20:	611a      	str	r2, [r3, #16]
}
 8016b22:	bf00      	nop
 8016b24:	3714      	adds	r7, #20
 8016b26:	46bd      	mov	sp, r7
 8016b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2c:	4770      	bx	lr

08016b2e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016b2e:	b480      	push	{r7}
 8016b30:	b085      	sub	sp, #20
 8016b32:	af00      	add	r7, sp, #0
 8016b34:	60f8      	str	r0, [r7, #12]
 8016b36:	60b9      	str	r1, [r7, #8]
 8016b38:	4613      	mov	r3, r2
 8016b3a:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8016b3c:	79fb      	ldrb	r3, [r7, #7]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d00b      	beq.n	8016b5a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	7e1b      	ldrb	r3, [r3, #24]
 8016b46:	79fa      	ldrb	r2, [r7, #7]
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d006      	beq.n	8016b5a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8016b4c:	68bb      	ldr	r3, [r7, #8]
 8016b4e:	7e1b      	ldrb	r3, [r3, #24]
 8016b50:	2b01      	cmp	r3, #1
 8016b52:	d004      	beq.n	8016b5e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8016b54:	79fb      	ldrb	r3, [r7, #7]
 8016b56:	2b02      	cmp	r3, #2
 8016b58:	d101      	bne.n	8016b5e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8016b5a:	2301      	movs	r3, #1
 8016b5c:	e000      	b.n	8016b60 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8016b5e:	2300      	movs	r3, #0
}
 8016b60:	4618      	mov	r0, r3
 8016b62:	3714      	adds	r7, #20
 8016b64:	46bd      	mov	sp, r7
 8016b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6a:	4770      	bx	lr

08016b6c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8016b6c:	b480      	push	{r7}
 8016b6e:	b083      	sub	sp, #12
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
 8016b74:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	681a      	ldr	r2, [r3, #0]
 8016b7a:	683b      	ldr	r3, [r7, #0]
 8016b7c:	61da      	str	r2, [r3, #28]
    head_ = node;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	683a      	ldr	r2, [r7, #0]
 8016b82:	601a      	str	r2, [r3, #0]
}
 8016b84:	bf00      	nop
 8016b86:	370c      	adds	r7, #12
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8e:	4770      	bx	lr

08016b90 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8016b90:	b480      	push	{r7}
 8016b92:	b085      	sub	sp, #20
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
 8016b98:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d019      	beq.n	8016bde <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	689b      	ldr	r3, [r3, #8]
 8016bae:	683a      	ldr	r2, [r7, #0]
 8016bb0:	429a      	cmp	r2, r3
 8016bb2:	d10e      	bne.n	8016bd2 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8016bb4:	68bb      	ldr	r3, [r7, #8]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d005      	beq.n	8016bc6 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	69da      	ldr	r2, [r3, #28]
 8016bbe:	68bb      	ldr	r3, [r7, #8]
 8016bc0:	61da      	str	r2, [r3, #28]
                return cur;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	e00c      	b.n	8016be0 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	69da      	ldr	r2, [r3, #28]
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	601a      	str	r2, [r3, #0]
                return cur;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	e006      	b.n	8016be0 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	69db      	ldr	r3, [r3, #28]
 8016bda:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8016bdc:	e7e2      	b.n	8016ba4 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8016bde:	2300      	movs	r3, #0
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	3714      	adds	r7, #20
 8016be4:	46bd      	mov	sp, r7
 8016be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bea:	4770      	bx	lr

08016bec <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8016bec:	b480      	push	{r7}
 8016bee:	b085      	sub	sp, #20
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
 8016bf4:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d00a      	beq.n	8016c18 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	689b      	ldr	r3, [r3, #8]
 8016c06:	683a      	ldr	r2, [r7, #0]
 8016c08:	429a      	cmp	r2, r3
 8016c0a:	d101      	bne.n	8016c10 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	e004      	b.n	8016c1a <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	69db      	ldr	r3, [r3, #28]
 8016c14:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016c16:	e7f1      	b.n	8016bfc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8016c18:	2300      	movs	r3, #0
}
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	3714      	adds	r7, #20
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c24:	4770      	bx	lr

08016c26 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016c26:	b580      	push	{r7, lr}
 8016c28:	b086      	sub	sp, #24
 8016c2a:	af00      	add	r7, sp, #0
 8016c2c:	60f8      	str	r0, [r7, #12]
 8016c2e:	60b9      	str	r1, [r7, #8]
 8016c30:	4613      	mov	r3, r2
 8016c32:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8016c34:	68bb      	ldr	r3, [r7, #8]
 8016c36:	617b      	str	r3, [r7, #20]
 8016c38:	697b      	ldr	r3, [r7, #20]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d00e      	beq.n	8016c5c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8016c3e:	79fb      	ldrb	r3, [r7, #7]
 8016c40:	461a      	mov	r2, r3
 8016c42:	6979      	ldr	r1, [r7, #20]
 8016c44:	68f8      	ldr	r0, [r7, #12]
 8016c46:	f7ff ff72 	bl	8016b2e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d001      	beq.n	8016c54 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	e004      	b.n	8016c5e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8016c54:	697b      	ldr	r3, [r7, #20]
 8016c56:	69db      	ldr	r3, [r3, #28]
 8016c58:	617b      	str	r3, [r7, #20]
 8016c5a:	e7ed      	b.n	8016c38 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8016c5c:	2300      	movs	r3, #0
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3718      	adds	r7, #24
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd80      	pop	{r7, pc}

08016c66 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8016c66:	b580      	push	{r7, lr}
 8016c68:	b082      	sub	sp, #8
 8016c6a:	af00      	add	r7, sp, #0
 8016c6c:	6078      	str	r0, [r7, #4]
 8016c6e:	460b      	mov	r3, r1
 8016c70:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	78fa      	ldrb	r2, [r7, #3]
 8016c78:	4619      	mov	r1, r3
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f7ff ffd3 	bl	8016c26 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016c80:	4603      	mov	r3, r0
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	3708      	adds	r7, #8
 8016c86:	46bd      	mov	sp, r7
 8016c88:	bd80      	pop	{r7, pc}

08016c8a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016c8a:	b580      	push	{r7, lr}
 8016c8c:	b084      	sub	sp, #16
 8016c8e:	af00      	add	r7, sp, #0
 8016c90:	60f8      	str	r0, [r7, #12]
 8016c92:	60b9      	str	r1, [r7, #8]
 8016c94:	4613      	mov	r3, r2
 8016c96:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8016c98:	68bb      	ldr	r3, [r7, #8]
 8016c9a:	69db      	ldr	r3, [r3, #28]
 8016c9c:	79fa      	ldrb	r2, [r7, #7]
 8016c9e:	4619      	mov	r1, r3
 8016ca0:	68f8      	ldr	r0, [r7, #12]
 8016ca2:	f7ff ffc0 	bl	8016c26 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016ca6:	4603      	mov	r3, r0
}
 8016ca8:	4618      	mov	r0, r3
 8016caa:	3710      	adds	r7, #16
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}

08016cb0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b084      	sub	sp, #16
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
 8016cb8:	460b      	mov	r3, r1
 8016cba:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	60bb      	str	r3, [r7, #8]
 8016cc6:	68bb      	ldr	r3, [r7, #8]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d00f      	beq.n	8016cec <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8016ccc:	78fb      	ldrb	r3, [r7, #3]
 8016cce:	461a      	mov	r2, r3
 8016cd0:	68b9      	ldr	r1, [r7, #8]
 8016cd2:	6878      	ldr	r0, [r7, #4]
 8016cd4:	f7ff ff2b 	bl	8016b2e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d002      	beq.n	8016ce4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	3301      	adds	r3, #1
 8016ce2:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	69db      	ldr	r3, [r3, #28]
 8016ce8:	60bb      	str	r3, [r7, #8]
 8016cea:	e7ec      	b.n	8016cc6 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8016cec:	68fb      	ldr	r3, [r7, #12]
}
 8016cee:	4618      	mov	r0, r3
 8016cf0:	3710      	adds	r7, #16
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	bd80      	pop	{r7, pc}
	...

08016cf8 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8016cf8:	b480      	push	{r7}
 8016cfa:	b083      	sub	sp, #12
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
 8016d00:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8016d02:	6839      	ldr	r1, [r7, #0]
 8016d04:	4b09      	ldr	r3, [pc, #36]	; (8016d2c <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8016d06:	fba3 2301 	umull	r2, r3, r3, r1
 8016d0a:	1aca      	subs	r2, r1, r3
 8016d0c:	0852      	lsrs	r2, r2, #1
 8016d0e:	4413      	add	r3, r2
 8016d10:	099a      	lsrs	r2, r3, #6
 8016d12:	4613      	mov	r3, r2
 8016d14:	00db      	lsls	r3, r3, #3
 8016d16:	4413      	add	r3, r2
 8016d18:	00db      	lsls	r3, r3, #3
 8016d1a:	4413      	add	r3, r2
 8016d1c:	1aca      	subs	r2, r1, r3
 8016d1e:	4613      	mov	r3, r2
}
 8016d20:	4618      	mov	r0, r3
 8016d22:	370c      	adds	r7, #12
 8016d24:	46bd      	mov	sp, r7
 8016d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d2a:	4770      	bx	lr
 8016d2c:	c0e07039 	.word	0xc0e07039

08016d30 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b082      	sub	sp, #8
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	6078      	str	r0, [r7, #4]
 8016d38:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	689b      	ldr	r3, [r3, #8]
 8016d3e:	4619      	mov	r1, r3
 8016d40:	6878      	ldr	r0, [r7, #4]
 8016d42:	f7ff ffd9 	bl	8016cf8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016d46:	4603      	mov	r3, r0
 8016d48:	009b      	lsls	r3, r3, #2
 8016d4a:	687a      	ldr	r2, [r7, #4]
 8016d4c:	4413      	add	r3, r2
 8016d4e:	6839      	ldr	r1, [r7, #0]
 8016d50:	4618      	mov	r0, r3
 8016d52:	f7ff ff0b 	bl	8016b6c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8016d56:	bf00      	nop
 8016d58:	3708      	adds	r7, #8
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}

08016d5e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8016d5e:	b580      	push	{r7, lr}
 8016d60:	b082      	sub	sp, #8
 8016d62:	af00      	add	r7, sp, #0
 8016d64:	6078      	str	r0, [r7, #4]
 8016d66:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8016d68:	6839      	ldr	r1, [r7, #0]
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	f7ff ffc4 	bl	8016cf8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016d70:	4603      	mov	r3, r0
 8016d72:	009b      	lsls	r3, r3, #2
 8016d74:	687a      	ldr	r2, [r7, #4]
 8016d76:	4413      	add	r3, r2
 8016d78:	6839      	ldr	r1, [r7, #0]
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	f7ff ff08 	bl	8016b90 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8016d80:	4603      	mov	r3, r0
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	3708      	adds	r7, #8
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bd80      	pop	{r7, pc}

08016d8a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8016d8a:	b580      	push	{r7, lr}
 8016d8c:	b082      	sub	sp, #8
 8016d8e:	af00      	add	r7, sp, #0
 8016d90:	6078      	str	r0, [r7, #4]
 8016d92:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8016d94:	6839      	ldr	r1, [r7, #0]
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f7ff ffae 	bl	8016cf8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	009b      	lsls	r3, r3, #2
 8016da0:	687a      	ldr	r2, [r7, #4]
 8016da2:	4413      	add	r3, r2
 8016da4:	6839      	ldr	r1, [r7, #0]
 8016da6:	4618      	mov	r0, r3
 8016da8:	f7ff ff20 	bl	8016bec <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8016dac:	4603      	mov	r3, r0
}
 8016dae:	4618      	mov	r0, r3
 8016db0:	3708      	adds	r7, #8
 8016db2:	46bd      	mov	sp, r7
 8016db4:	bd80      	pop	{r7, pc}

08016db6 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8016db6:	b580      	push	{r7, lr}
 8016db8:	b084      	sub	sp, #16
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	6078      	str	r0, [r7, #4]
 8016dbe:	460b      	mov	r3, r1
 8016dc0:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	60bb      	str	r3, [r7, #8]
 8016dca:	68bb      	ldr	r3, [r7, #8]
 8016dcc:	2b48      	cmp	r3, #72	; 0x48
 8016dce:	dc10      	bgt.n	8016df2 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8016dd0:	68bb      	ldr	r3, [r7, #8]
 8016dd2:	009b      	lsls	r3, r3, #2
 8016dd4:	687a      	ldr	r2, [r7, #4]
 8016dd6:	4413      	add	r3, r2
 8016dd8:	78fa      	ldrb	r2, [r7, #3]
 8016dda:	4611      	mov	r1, r2
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7ff ff67 	bl	8016cb0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8016de2:	4602      	mov	r2, r0
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	4413      	add	r3, r2
 8016de8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8016dea:	68bb      	ldr	r3, [r7, #8]
 8016dec:	3301      	adds	r3, #1
 8016dee:	60bb      	str	r3, [r7, #8]
 8016df0:	e7eb      	b.n	8016dca <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8016df2:	68fb      	ldr	r3, [r7, #12]
}
 8016df4:	4618      	mov	r0, r3
 8016df6:	3710      	adds	r7, #16
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bd80      	pop	{r7, pc}

08016dfc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b084      	sub	sp, #16
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]
 8016e04:	460b      	mov	r3, r1
 8016e06:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8016e08:	2300      	movs	r3, #0
 8016e0a:	60fb      	str	r3, [r7, #12]
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	2b48      	cmp	r3, #72	; 0x48
 8016e10:	dc12      	bgt.n	8016e38 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	009b      	lsls	r3, r3, #2
 8016e16:	687a      	ldr	r2, [r7, #4]
 8016e18:	4413      	add	r3, r2
 8016e1a:	78fa      	ldrb	r2, [r7, #3]
 8016e1c:	4611      	mov	r1, r2
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7ff ff21 	bl	8016c66 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8016e24:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8016e26:	68bb      	ldr	r3, [r7, #8]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d001      	beq.n	8016e30 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8016e2c:	68bb      	ldr	r3, [r7, #8]
 8016e2e:	e004      	b.n	8016e3a <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	3301      	adds	r3, #1
 8016e34:	60fb      	str	r3, [r7, #12]
 8016e36:	e7e9      	b.n	8016e0c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8016e38:	2300      	movs	r3, #0
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	3710      	adds	r7, #16
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	bd80      	pop	{r7, pc}

08016e42 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8016e42:	b580      	push	{r7, lr}
 8016e44:	b086      	sub	sp, #24
 8016e46:	af00      	add	r7, sp, #0
 8016e48:	60f8      	str	r0, [r7, #12]
 8016e4a:	60b9      	str	r1, [r7, #8]
 8016e4c:	4613      	mov	r3, r2
 8016e4e:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8016e50:	68bb      	ldr	r3, [r7, #8]
 8016e52:	689b      	ldr	r3, [r3, #8]
 8016e54:	4619      	mov	r1, r3
 8016e56:	68f8      	ldr	r0, [r7, #12]
 8016e58:	f7ff ff4e 	bl	8016cf8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016e5c:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8016e5e:	697b      	ldr	r3, [r7, #20]
 8016e60:	009b      	lsls	r3, r3, #2
 8016e62:	68fa      	ldr	r2, [r7, #12]
 8016e64:	4413      	add	r3, r2
 8016e66:	79fa      	ldrb	r2, [r7, #7]
 8016e68:	68b9      	ldr	r1, [r7, #8]
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	f7ff ff0d 	bl	8016c8a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016e70:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8016e72:	693b      	ldr	r3, [r7, #16]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d001      	beq.n	8016e7c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8016e78:	693b      	ldr	r3, [r7, #16]
 8016e7a:	e019      	b.n	8016eb0 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8016e7c:	697b      	ldr	r3, [r7, #20]
 8016e7e:	3301      	adds	r3, #1
 8016e80:	617b      	str	r3, [r7, #20]
 8016e82:	697b      	ldr	r3, [r7, #20]
 8016e84:	2b48      	cmp	r3, #72	; 0x48
 8016e86:	d812      	bhi.n	8016eae <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8016e88:	697b      	ldr	r3, [r7, #20]
 8016e8a:	009b      	lsls	r3, r3, #2
 8016e8c:	68fa      	ldr	r2, [r7, #12]
 8016e8e:	4413      	add	r3, r2
 8016e90:	79fa      	ldrb	r2, [r7, #7]
 8016e92:	4611      	mov	r1, r2
 8016e94:	4618      	mov	r0, r3
 8016e96:	f7ff fee6 	bl	8016c66 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8016e9a:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8016e9c:	693b      	ldr	r3, [r7, #16]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d001      	beq.n	8016ea6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8016ea2:	693b      	ldr	r3, [r7, #16]
 8016ea4:	e004      	b.n	8016eb0 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8016ea6:	697b      	ldr	r3, [r7, #20]
 8016ea8:	3301      	adds	r3, #1
 8016eaa:	617b      	str	r3, [r7, #20]
 8016eac:	e7e9      	b.n	8016e82 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8016eae:	2300      	movs	r3, #0
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3718      	adds	r7, #24
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}

08016eb8 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8016eb8:	b5b0      	push	{r4, r5, r7, lr}
 8016eba:	b082      	sub	sp, #8
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	2448      	movs	r4, #72	; 0x48
 8016ec4:	461d      	mov	r5, r3
 8016ec6:	2c00      	cmp	r4, #0
 8016ec8:	db05      	blt.n	8016ed6 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8016eca:	4628      	mov	r0, r5
 8016ecc:	f7ff fa84 	bl	80163d8 <_ZN22MemoryLeakDetectorListC1Ev>
 8016ed0:	3504      	adds	r5, #4
 8016ed2:	3c01      	subs	r4, #1
 8016ed4:	e7f7      	b.n	8016ec6 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	4618      	mov	r0, r3
 8016eda:	3708      	adds	r7, #8
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bdb0      	pop	{r4, r5, r7, pc}

08016ee0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8016ee0:	b590      	push	{r4, r7, lr}
 8016ee2:	b083      	sub	sp, #12
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
 8016ee8:	6039      	str	r1, [r7, #0]
 8016eea:	4a1d      	ldr	r2, [pc, #116]	; (8016f60 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	601a      	str	r2, [r3, #0]
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	330c      	adds	r3, #12
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	f7ff fbe3 	bl	80166c0 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016f00:	331c      	adds	r3, #28
 8016f02:	4618      	mov	r0, r3
 8016f04:	f7ff ffd8 	bl	8016eb8 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f0e:	2201      	movs	r2, #1
 8016f10:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f18:	3304      	adds	r3, #4
 8016f1a:	2201      	movs	r2, #1
 8016f1c:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2201      	movs	r2, #1
 8016f22:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f2a:	3308      	adds	r3, #8
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	683a      	ldr	r2, [r7, #0]
 8016f34:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8016f36:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8016f3a:	490a      	ldr	r1, [pc, #40]	; (8016f64 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8016f3c:	2004      	movs	r0, #4
 8016f3e:	f7f3 fb17 	bl	800a570 <_ZnwjPKci>
 8016f42:	4604      	mov	r4, r0
 8016f44:	4620      	mov	r0, r4
 8016f46:	f7f5 fbe7 	bl	800c718 <_ZN11SimpleMutexC1Ev>
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f50:	330c      	adds	r3, #12
 8016f52:	601c      	str	r4, [r3, #0]
}
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	4618      	mov	r0, r3
 8016f58:	370c      	adds	r7, #12
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	bd90      	pop	{r4, r7, pc}
 8016f5e:	bf00      	nop
 8016f60:	08028ba8 	.word	0x08028ba8
 8016f64:	08025f78 	.word	0x08025f78

08016f68 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8016f68:	b590      	push	{r4, r7, lr}
 8016f6a:	b083      	sub	sp, #12
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
 8016f70:	4a0e      	ldr	r2, [pc, #56]	; (8016fac <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f7c:	330c      	adds	r3, #12
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d00d      	beq.n	8016fa0 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f8a:	330c      	adds	r3, #12
 8016f8c:	681c      	ldr	r4, [r3, #0]
 8016f8e:	2c00      	cmp	r4, #0
 8016f90:	d006      	beq.n	8016fa0 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8016f92:	4620      	mov	r0, r4
 8016f94:	f7f5 fbd2 	bl	800c73c <_ZN11SimpleMutexD1Ev>
 8016f98:	2104      	movs	r1, #4
 8016f9a:	4620      	mov	r0, r4
 8016f9c:	f7f3 fafc 	bl	800a598 <_ZdlPvj>
    }
}
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	370c      	adds	r7, #12
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd90      	pop	{r4, r7, pc}
 8016faa:	bf00      	nop
 8016fac:	08028ba8 	.word	0x08028ba8

08016fb0 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b082      	sub	sp, #8
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
}
 8016fb8:	6878      	ldr	r0, [r7, #4]
 8016fba:	f7ff ffd5 	bl	8016f68 <_ZN18MemoryLeakDetectorD1Ev>
 8016fbe:	f241 1150 	movw	r1, #4432	; 0x1150
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f7f3 fae8 	bl	800a598 <_ZdlPvj>
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	4618      	mov	r0, r3
 8016fcc:	3708      	adds	r7, #8
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd80      	pop	{r7, pc}

08016fd2 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8016fd2:	b580      	push	{r7, lr}
 8016fd4:	b082      	sub	sp, #8
 8016fd6:	af00      	add	r7, sp, #0
 8016fd8:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	330c      	adds	r3, #12
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7ff fd72 	bl	8016ac8 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	2203      	movs	r2, #3
 8016fe8:	721a      	strb	r2, [r3, #8]
}
 8016fea:	bf00      	nop
 8016fec:	3708      	adds	r7, #8
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}

08016ff2 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8016ff2:	b480      	push	{r7}
 8016ff4:	b083      	sub	sp, #12
 8016ff6:	af00      	add	r7, sp, #0
 8016ff8:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	2202      	movs	r2, #2
 8016ffe:	721a      	strb	r2, [r3, #8]
}
 8017000:	bf00      	nop
 8017002:	370c      	adds	r7, #12
 8017004:	46bd      	mov	sp, r7
 8017006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700a:	4770      	bx	lr

0801700c <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 801700c:	b480      	push	{r7}
 801700e:	b083      	sub	sp, #12
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	2202      	movs	r2, #2
 8017018:	721a      	strb	r2, [r3, #8]
}
 801701a:	bf00      	nop
 801701c:	370c      	adds	r7, #12
 801701e:	46bd      	mov	sp, r7
 8017020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017024:	4770      	bx	lr

08017026 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8017026:	b480      	push	{r7}
 8017028:	b083      	sub	sp, #12
 801702a:	af00      	add	r7, sp, #0
 801702c:	6078      	str	r0, [r7, #4]
    return mutex_;
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017034:	330c      	adds	r3, #12
 8017036:	681b      	ldr	r3, [r3, #0]
}
 8017038:	4618      	mov	r0, r3
 801703a:	370c      	adds	r7, #12
 801703c:	46bd      	mov	sp, r7
 801703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017042:	4770      	bx	lr

08017044 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8017044:	b480      	push	{r7}
 8017046:	b083      	sub	sp, #12
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	f023 0303 	bic.w	r3, r3, #3
 8017052:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8017054:	4618      	mov	r0, r3
 8017056:	370c      	adds	r7, #12
 8017058:	46bd      	mov	sp, r7
 801705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705e:	4770      	bx	lr

08017060 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b082      	sub	sp, #8
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
 8017068:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	3303      	adds	r3, #3
 801706e:	4618      	mov	r0, r3
 8017070:	f7ff ffe8 	bl	8017044 <_ZL31calculateVoidPointerAlignedSizej>
 8017074:	4603      	mov	r3, r0
}
 8017076:	4618      	mov	r0, r3
 8017078:	3708      	adds	r7, #8
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}

0801707e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 801707e:	b580      	push	{r7, lr}
 8017080:	b084      	sub	sp, #16
 8017082:	af00      	add	r7, sp, #0
 8017084:	60f8      	str	r0, [r7, #12]
 8017086:	60b9      	str	r1, [r7, #8]
 8017088:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 801708a:	6879      	ldr	r1, [r7, #4]
 801708c:	68f8      	ldr	r0, [r7, #12]
 801708e:	f7ff ffe7 	bl	8017060 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017092:	4602      	mov	r2, r0
 8017094:	68bb      	ldr	r3, [r7, #8]
 8017096:	4413      	add	r3, r2
}
 8017098:	4618      	mov	r0, r3
 801709a:	3710      	adds	r7, #16
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}

080170a0 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 80170a0:	b580      	push	{r7, lr}
 80170a2:	b08a      	sub	sp, #40	; 0x28
 80170a4:	af06      	add	r7, sp, #24
 80170a6:	60f8      	str	r0, [r7, #12]
 80170a8:	60b9      	str	r1, [r7, #8]
 80170aa:	607a      	str	r2, [r7, #4]
 80170ac:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80170b4:	3304      	adds	r3, #4
 80170b6:	681a      	ldr	r2, [r3, #0]
 80170b8:	1c51      	adds	r1, r2, #1
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80170c0:	3304      	adds	r3, #4
 80170c2:	6019      	str	r1, [r3, #0]
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	7a19      	ldrb	r1, [r3, #8]
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80170ce:	3308      	adds	r3, #8
 80170d0:	781b      	ldrb	r3, [r3, #0]
 80170d2:	6a38      	ldr	r0, [r7, #32]
 80170d4:	9004      	str	r0, [sp, #16]
 80170d6:	69f8      	ldr	r0, [r7, #28]
 80170d8:	9003      	str	r0, [sp, #12]
 80170da:	9302      	str	r3, [sp, #8]
 80170dc:	9101      	str	r1, [sp, #4]
 80170de:	69bb      	ldr	r3, [r7, #24]
 80170e0:	9300      	str	r3, [sp, #0]
 80170e2:	683b      	ldr	r3, [r7, #0]
 80170e4:	6879      	ldr	r1, [r7, #4]
 80170e6:	68b8      	ldr	r0, [r7, #8]
 80170e8:	f7ff fcfb 	bl	8016ae2 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 80170ec:	68bb      	ldr	r3, [r7, #8]
 80170ee:	689a      	ldr	r2, [r3, #8]
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	4413      	add	r3, r2
 80170f6:	4619      	mov	r1, r3
 80170f8:	68f8      	ldr	r0, [r7, #12]
 80170fa:	f000 f861 	bl	80171c0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017104:	331c      	adds	r3, #28
 8017106:	68b9      	ldr	r1, [r7, #8]
 8017108:	4618      	mov	r0, r3
 801710a:	f7ff fe11 	bl	8016d30 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 801710e:	bf00      	nop
 8017110:	3710      	adds	r7, #16
 8017112:	46bd      	mov	sp, r7
 8017114:	bd80      	pop	{r7, pc}

08017116 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017116:	b580      	push	{r7, lr}
 8017118:	b08a      	sub	sp, #40	; 0x28
 801711a:	af04      	add	r7, sp, #16
 801711c:	60f8      	str	r0, [r7, #12]
 801711e:	60b9      	str	r1, [r7, #8]
 8017120:	607a      	str	r2, [r7, #4]
 8017122:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8017124:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017128:	9302      	str	r3, [sp, #8]
 801712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801712c:	9301      	str	r3, [sp, #4]
 801712e:	6a3b      	ldr	r3, [r7, #32]
 8017130:	9300      	str	r3, [sp, #0]
 8017132:	683b      	ldr	r3, [r7, #0]
 8017134:	687a      	ldr	r2, [r7, #4]
 8017136:	68b9      	ldr	r1, [r7, #8]
 8017138:	68f8      	ldr	r0, [r7, #12]
 801713a:	f000 f96f 	bl	801741c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 801713e:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8017140:	697b      	ldr	r3, [r7, #20]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d101      	bne.n	801714a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8017146:	2300      	movs	r3, #0
 8017148:	e017      	b.n	801717a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 801714a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801714e:	9300      	str	r3, [sp, #0]
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	683a      	ldr	r2, [r7, #0]
 8017154:	68b9      	ldr	r1, [r7, #8]
 8017156:	68f8      	ldr	r0, [r7, #12]
 8017158:	f000 f98a 	bl	8017470 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 801715c:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 801715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017160:	9302      	str	r3, [sp, #8]
 8017162:	6a3b      	ldr	r3, [r7, #32]
 8017164:	9301      	str	r3, [sp, #4]
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	9300      	str	r3, [sp, #0]
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	697a      	ldr	r2, [r7, #20]
 801716e:	6939      	ldr	r1, [r7, #16]
 8017170:	68f8      	ldr	r0, [r7, #12]
 8017172:	f7ff ff95 	bl	80170a0 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8017176:	693b      	ldr	r3, [r7, #16]
 8017178:	689b      	ldr	r3, [r3, #8]
}
 801717a:	4618      	mov	r0, r3
 801717c:	3718      	adds	r7, #24
 801717e:	46bd      	mov	sp, r7
 8017180:	bd80      	pop	{r7, pc}
	...

08017184 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b084      	sub	sp, #16
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
 801718c:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017194:	331c      	adds	r3, #28
 8017196:	6839      	ldr	r1, [r7, #0]
 8017198:	4618      	mov	r0, r3
 801719a:	f7ff fdf6 	bl	8016d8a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 801719e:	60f8      	str	r0, [r7, #12]
  if (node)
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d006      	beq.n	80171b4 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 80171a6:	4b05      	ldr	r3, [pc, #20]	; (80171bc <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	68fa      	ldr	r2, [r7, #12]
 80171ac:	6812      	ldr	r2, [r2, #0]
 80171ae:	21cd      	movs	r1, #205	; 0xcd
 80171b0:	6838      	ldr	r0, [r7, #0]
 80171b2:	4798      	blx	r3
#endif
}
 80171b4:	bf00      	nop
 80171b6:	3710      	adds	r7, #16
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bd80      	pop	{r7, pc}
 80171bc:	200000d8 	.word	0x200000d8

080171c0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 80171c0:	b480      	push	{r7}
 80171c2:	b085      	sub	sp, #20
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80171ca:	2300      	movs	r3, #0
 80171cc:	60fb      	str	r3, [r7, #12]
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	2b02      	cmp	r3, #2
 80171d2:	d812      	bhi.n	80171fa <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 80171d4:	68f9      	ldr	r1, [r7, #12]
 80171d6:	4b0c      	ldr	r3, [pc, #48]	; (8017208 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 80171d8:	fba3 2301 	umull	r2, r3, r3, r1
 80171dc:	085a      	lsrs	r2, r3, #1
 80171de:	4613      	mov	r3, r2
 80171e0:	005b      	lsls	r3, r3, #1
 80171e2:	4413      	add	r3, r2
 80171e4:	1aca      	subs	r2, r1, r3
 80171e6:	6839      	ldr	r1, [r7, #0]
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	440b      	add	r3, r1
 80171ec:	4907      	ldr	r1, [pc, #28]	; (801720c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 80171ee:	5c8a      	ldrb	r2, [r1, r2]
 80171f0:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	3301      	adds	r3, #1
 80171f6:	60fb      	str	r3, [r7, #12]
 80171f8:	e7e9      	b.n	80171ce <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 80171fa:	bf00      	nop
 80171fc:	3714      	adds	r7, #20
 80171fe:	46bd      	mov	sp, r7
 8017200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017204:	4770      	bx	lr
 8017206:	bf00      	nop
 8017208:	aaaaaaab 	.word	0xaaaaaaab
 801720c:	08028b9c 	.word	0x08028b9c

08017210 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8017210:	b480      	push	{r7}
 8017212:	b085      	sub	sp, #20
 8017214:	af00      	add	r7, sp, #0
 8017216:	6078      	str	r0, [r7, #4]
 8017218:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801721a:	2300      	movs	r3, #0
 801721c:	60fb      	str	r3, [r7, #12]
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	2b02      	cmp	r3, #2
 8017222:	d816      	bhi.n	8017252 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8017224:	683a      	ldr	r2, [r7, #0]
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	4413      	add	r3, r2
 801722a:	7818      	ldrb	r0, [r3, #0]
 801722c:	68f9      	ldr	r1, [r7, #12]
 801722e:	4b0c      	ldr	r3, [pc, #48]	; (8017260 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8017230:	fba3 2301 	umull	r2, r3, r3, r1
 8017234:	085a      	lsrs	r2, r3, #1
 8017236:	4613      	mov	r3, r2
 8017238:	005b      	lsls	r3, r3, #1
 801723a:	4413      	add	r3, r2
 801723c:	1aca      	subs	r2, r1, r3
 801723e:	4b09      	ldr	r3, [pc, #36]	; (8017264 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8017240:	5c9b      	ldrb	r3, [r3, r2]
 8017242:	4298      	cmp	r0, r3
 8017244:	d001      	beq.n	801724a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8017246:	2300      	movs	r3, #0
 8017248:	e004      	b.n	8017254 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	3301      	adds	r3, #1
 801724e:	60fb      	str	r3, [r7, #12]
 8017250:	e7e5      	b.n	801721e <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8017252:	2301      	movs	r3, #1
}
 8017254:	4618      	mov	r0, r3
 8017256:	3714      	adds	r7, #20
 8017258:	46bd      	mov	sp, r7
 801725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725e:	4770      	bx	lr
 8017260:	aaaaaaab 	.word	0xaaaaaaab
 8017264:	08028b9c 	.word	0x08028b9c

08017268 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b084      	sub	sp, #16
 801726c:	af00      	add	r7, sp, #0
 801726e:	60f8      	str	r0, [r7, #12]
 8017270:	60b9      	str	r1, [r7, #8]
 8017272:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8017274:	68ba      	ldr	r2, [r7, #8]
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	429a      	cmp	r2, r3
 801727a:	d101      	bne.n	8017280 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 801727c:	2301      	movs	r3, #1
 801727e:	e013      	b.n	80172a8 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017286:	781b      	ldrb	r3, [r3, #0]
 8017288:	f083 0301 	eor.w	r3, r3, #1
 801728c:	b2db      	uxtb	r3, r3
 801728e:	2b00      	cmp	r3, #0
 8017290:	d001      	beq.n	8017296 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8017292:	2301      	movs	r3, #1
 8017294:	e008      	b.n	80172a8 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	331c      	adds	r3, #28
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	68b9      	ldr	r1, [r7, #8]
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	4798      	blx	r3
 80172a4:	4603      	mov	r3, r0
 80172a6:	bf00      	nop
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	3710      	adds	r7, #16
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}

080172b0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 80172b0:	b590      	push	{r4, r7, lr}
 80172b2:	b087      	sub	sp, #28
 80172b4:	af02      	add	r7, sp, #8
 80172b6:	60f8      	str	r0, [r7, #12]
 80172b8:	60b9      	str	r1, [r7, #8]
 80172ba:	607a      	str	r2, [r7, #4]
 80172bc:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 80172be:	68bb      	ldr	r3, [r7, #8]
 80172c0:	695a      	ldr	r2, [r3, #20]
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	695b      	ldr	r3, [r3, #20]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	3328      	adds	r3, #40	; 0x28
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	4610      	mov	r0, r2
 80172ce:	4798      	blx	r3
 80172d0:	4604      	mov	r4, r0
 80172d2:	6a3b      	ldr	r3, [r7, #32]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	3328      	adds	r3, #40	; 0x28
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	6a38      	ldr	r0, [r7, #32]
 80172dc:	4798      	blx	r3
 80172de:	4603      	mov	r3, r0
 80172e0:	461a      	mov	r2, r3
 80172e2:	4621      	mov	r1, r4
 80172e4:	68f8      	ldr	r0, [r7, #12]
 80172e6:	f7ff ffbf 	bl	8017268 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 80172ea:	4603      	mov	r3, r0
 80172ec:	f083 0301 	eor.w	r3, r3, #1
 80172f0:	b2db      	uxtb	r3, r3
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d014      	beq.n	8017320 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	f103 040c 	add.w	r4, r3, #12
 80172fc:	6a3b      	ldr	r3, [r7, #32]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	3328      	adds	r3, #40	; 0x28
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	6a38      	ldr	r0, [r7, #32]
 8017306:	4798      	blx	r3
 8017308:	4602      	mov	r2, r0
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	685b      	ldr	r3, [r3, #4]
 801730e:	9301      	str	r3, [sp, #4]
 8017310:	9200      	str	r2, [sp, #0]
 8017312:	683b      	ldr	r3, [r7, #0]
 8017314:	687a      	ldr	r2, [r7, #4]
 8017316:	68b9      	ldr	r1, [r7, #8]
 8017318:	4620      	mov	r0, r4
 801731a:	f7ff fb4d 	bl	80169b8 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 801731e:	e02e      	b.n	801737e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	689a      	ldr	r2, [r3, #8]
 8017324:	68bb      	ldr	r3, [r7, #8]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	4413      	add	r3, r2
 801732a:	4619      	mov	r1, r3
 801732c:	68f8      	ldr	r0, [r7, #12]
 801732e:	f7ff ff6f 	bl	8017210 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8017332:	4603      	mov	r3, r0
 8017334:	f083 0301 	eor.w	r3, r3, #1
 8017338:	b2db      	uxtb	r3, r3
 801733a:	2b00      	cmp	r3, #0
 801733c:	d014      	beq.n	8017368 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	f103 040c 	add.w	r4, r3, #12
 8017344:	6a3b      	ldr	r3, [r7, #32]
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	3328      	adds	r3, #40	; 0x28
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	6a38      	ldr	r0, [r7, #32]
 801734e:	4798      	blx	r3
 8017350:	4602      	mov	r2, r0
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	685b      	ldr	r3, [r3, #4]
 8017356:	9301      	str	r3, [sp, #4]
 8017358:	9200      	str	r2, [sp, #0]
 801735a:	683b      	ldr	r3, [r7, #0]
 801735c:	687a      	ldr	r2, [r7, #4]
 801735e:	68b9      	ldr	r1, [r7, #8]
 8017360:	4620      	mov	r0, r4
 8017362:	f7ff fb4f 	bl	8016a04 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8017366:	e00a      	b.n	801737e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8017368:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801736c:	2b00      	cmp	r3, #0
 801736e:	d006      	beq.n	801737e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8017370:	6a3b      	ldr	r3, [r7, #32]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	3324      	adds	r3, #36	; 0x24
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	68b9      	ldr	r1, [r7, #8]
 801737a:	6a38      	ldr	r0, [r7, #32]
 801737c:	4798      	blx	r3
}
 801737e:	bf00      	nop
 8017380:	3714      	adds	r7, #20
 8017382:	46bd      	mov	sp, r7
 8017384:	bd90      	pop	{r4, r7, pc}
	...

08017388 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b086      	sub	sp, #24
 801738c:	af02      	add	r7, sp, #8
 801738e:	60f8      	str	r0, [r7, #12]
 8017390:	60b9      	str	r1, [r7, #8]
 8017392:	607a      	str	r2, [r7, #4]
 8017394:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8017396:	4b08      	ldr	r3, [pc, #32]	; (80173b8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8017398:	681a      	ldr	r2, [r3, #0]
 801739a:	78fb      	ldrb	r3, [r7, #3]
 801739c:	9301      	str	r3, [sp, #4]
 801739e:	2300      	movs	r3, #0
 80173a0:	9300      	str	r3, [sp, #0]
 80173a2:	4613      	mov	r3, r2
 80173a4:	687a      	ldr	r2, [r7, #4]
 80173a6:	68b9      	ldr	r1, [r7, #8]
 80173a8:	68f8      	ldr	r0, [r7, #12]
 80173aa:	f000 f87f 	bl	80174ac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80173ae:	4603      	mov	r3, r0
}
 80173b0:	4618      	mov	r0, r3
 80173b2:	3710      	adds	r7, #16
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}
 80173b8:	20000100 	.word	0x20000100

080173bc <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80173bc:	b590      	push	{r4, r7, lr}
 80173be:	b085      	sub	sp, #20
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	60f8      	str	r0, [r7, #12]
 80173c4:	60b9      	str	r1, [r7, #8]
 80173c6:	607a      	str	r2, [r7, #4]
 80173c8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 80173ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d00e      	beq.n	80173f0 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	3308      	adds	r3, #8
 80173d8:	681c      	ldr	r4, [r3, #0]
 80173da:	6879      	ldr	r1, [r7, #4]
 80173dc:	68f8      	ldr	r0, [r7, #12]
 80173de:	f7ff fe3f 	bl	8017060 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80173e2:	4601      	mov	r1, r0
 80173e4:	6a3b      	ldr	r3, [r7, #32]
 80173e6:	683a      	ldr	r2, [r7, #0]
 80173e8:	68b8      	ldr	r0, [r7, #8]
 80173ea:	47a0      	blx	r4
 80173ec:	4603      	mov	r3, r0
 80173ee:	e010      	b.n	8017412 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	3308      	adds	r3, #8
 80173f6:	681c      	ldr	r4, [r3, #0]
 80173f8:	6879      	ldr	r1, [r7, #4]
 80173fa:	68f8      	ldr	r0, [r7, #12]
 80173fc:	f7ff fe30 	bl	8017060 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017400:	4603      	mov	r3, r0
 8017402:	f103 0120 	add.w	r1, r3, #32
 8017406:	6a3b      	ldr	r3, [r7, #32]
 8017408:	683a      	ldr	r2, [r7, #0]
 801740a:	68b8      	ldr	r0, [r7, #8]
 801740c:	47a0      	blx	r4
 801740e:	4603      	mov	r3, r0
 8017410:	bf00      	nop
}
 8017412:	4618      	mov	r0, r3
 8017414:	3714      	adds	r7, #20
 8017416:	46bd      	mov	sp, r7
 8017418:	bd90      	pop	{r4, r7, pc}
	...

0801741c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 801741c:	b590      	push	{r4, r7, lr}
 801741e:	b085      	sub	sp, #20
 8017420:	af00      	add	r7, sp, #0
 8017422:	60f8      	str	r0, [r7, #12]
 8017424:	60b9      	str	r1, [r7, #8]
 8017426:	607a      	str	r2, [r7, #4]
 8017428:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 801742a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801742e:	2b00      	cmp	r3, #0
 8017430:	d00b      	beq.n	801744a <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8017432:	4b0e      	ldr	r3, [pc, #56]	; (801746c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8017434:	681c      	ldr	r4, [r3, #0]
 8017436:	6839      	ldr	r1, [r7, #0]
 8017438:	68f8      	ldr	r0, [r7, #12]
 801743a:	f7ff fe11 	bl	8017060 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801743e:	4603      	mov	r3, r0
 8017440:	4619      	mov	r1, r3
 8017442:	6878      	ldr	r0, [r7, #4]
 8017444:	47a0      	blx	r4
 8017446:	4603      	mov	r3, r0
 8017448:	e00c      	b.n	8017464 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 801744a:	4b08      	ldr	r3, [pc, #32]	; (801746c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 801744c:	681c      	ldr	r4, [r3, #0]
 801744e:	6839      	ldr	r1, [r7, #0]
 8017450:	68f8      	ldr	r0, [r7, #12]
 8017452:	f7ff fe05 	bl	8017060 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017456:	4603      	mov	r3, r0
 8017458:	3320      	adds	r3, #32
 801745a:	4619      	mov	r1, r3
 801745c:	6878      	ldr	r0, [r7, #4]
 801745e:	47a0      	blx	r4
 8017460:	4603      	mov	r3, r0
 8017462:	bf00      	nop
}
 8017464:	4618      	mov	r0, r3
 8017466:	3714      	adds	r7, #20
 8017468:	46bd      	mov	sp, r7
 801746a:	bd90      	pop	{r4, r7, pc}
 801746c:	200000cc 	.word	0x200000cc

08017470 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b084      	sub	sp, #16
 8017474:	af00      	add	r7, sp, #0
 8017476:	60f8      	str	r0, [r7, #12]
 8017478:	60b9      	str	r1, [r7, #8]
 801747a:	607a      	str	r2, [r7, #4]
 801747c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 801747e:	7e3b      	ldrb	r3, [r7, #24]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d008      	beq.n	8017496 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	3320      	adds	r3, #32
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	2120      	movs	r1, #32
 801748e:	68b8      	ldr	r0, [r7, #8]
 8017490:	4798      	blx	r3
 8017492:	4603      	mov	r3, r0
 8017494:	e006      	b.n	80174a4 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8017496:	687a      	ldr	r2, [r7, #4]
 8017498:	6839      	ldr	r1, [r7, #0]
 801749a:	68f8      	ldr	r0, [r7, #12]
 801749c:	f7ff fdef 	bl	801707e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 80174a0:	4603      	mov	r3, r0
 80174a2:	bf00      	nop
}
 80174a4:	4618      	mov	r0, r3
 80174a6:	3710      	adds	r7, #16
 80174a8:	46bd      	mov	sp, r7
 80174aa:	bd80      	pop	{r7, pc}

080174ac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b08a      	sub	sp, #40	; 0x28
 80174b0:	af04      	add	r7, sp, #16
 80174b2:	60f8      	str	r0, [r7, #12]
 80174b4:	60b9      	str	r1, [r7, #8]
 80174b6:	607a      	str	r2, [r7, #4]
 80174b8:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 80174ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80174be:	9301      	str	r3, [sp, #4]
 80174c0:	6a3b      	ldr	r3, [r7, #32]
 80174c2:	9300      	str	r3, [sp, #0]
 80174c4:	683b      	ldr	r3, [r7, #0]
 80174c6:	687a      	ldr	r2, [r7, #4]
 80174c8:	68b9      	ldr	r1, [r7, #8]
 80174ca:	68f8      	ldr	r0, [r7, #12]
 80174cc:	f7ff ff76 	bl	80173bc <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 80174d0:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 80174d2:	697b      	ldr	r3, [r7, #20]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d101      	bne.n	80174dc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 80174d8:	2300      	movs	r3, #0
 80174da:	e017      	b.n	801750c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 80174dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80174e0:	9300      	str	r3, [sp, #0]
 80174e2:	697b      	ldr	r3, [r7, #20]
 80174e4:	687a      	ldr	r2, [r7, #4]
 80174e6:	68b9      	ldr	r1, [r7, #8]
 80174e8:	68f8      	ldr	r0, [r7, #12]
 80174ea:	f7ff ffc1 	bl	8017470 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80174ee:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 80174f0:	6a3b      	ldr	r3, [r7, #32]
 80174f2:	9302      	str	r3, [sp, #8]
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	9301      	str	r3, [sp, #4]
 80174f8:	68bb      	ldr	r3, [r7, #8]
 80174fa:	9300      	str	r3, [sp, #0]
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	697a      	ldr	r2, [r7, #20]
 8017500:	6939      	ldr	r1, [r7, #16]
 8017502:	68f8      	ldr	r0, [r7, #12]
 8017504:	f7ff fdcc 	bl	80170a0 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8017508:	693b      	ldr	r3, [r7, #16]
 801750a:	689b      	ldr	r3, [r3, #8]
}
 801750c:	4618      	mov	r0, r3
 801750e:	3718      	adds	r7, #24
 8017510:	46bd      	mov	sp, r7
 8017512:	bd80      	pop	{r7, pc}

08017514 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017514:	b590      	push	{r4, r7, lr}
 8017516:	b089      	sub	sp, #36	; 0x24
 8017518:	af02      	add	r7, sp, #8
 801751a:	60f8      	str	r0, [r7, #12]
 801751c:	60b9      	str	r1, [r7, #8]
 801751e:	607a      	str	r2, [r7, #4]
 8017520:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d03a      	beq.n	801759e <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801752e:	331c      	adds	r3, #28
 8017530:	6879      	ldr	r1, [r7, #4]
 8017532:	4618      	mov	r0, r3
 8017534:	f7ff fc13 	bl	8016d5e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8017538:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 801753a:	697b      	ldr	r3, [r7, #20]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d10b      	bne.n	8017558 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	f103 000c 	add.w	r0, r3, #12
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	685b      	ldr	r3, [r3, #4]
 801754a:	9300      	str	r3, [sp, #0]
 801754c:	68bb      	ldr	r3, [r7, #8]
 801754e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017550:	6839      	ldr	r1, [r7, #0]
 8017552:	f7ff fa0d 	bl	8016970 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8017556:	e023      	b.n	80175a0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8017558:	68b8      	ldr	r0, [r7, #8]
 801755a:	f7f8 ff95 	bl	8010488 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 801755e:	4603      	mov	r3, r0
 8017560:	f083 0301 	eor.w	r3, r3, #1
 8017564:	b2db      	uxtb	r3, r3
 8017566:	2b00      	cmp	r3, #0
 8017568:	d01a      	beq.n	80175a0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 801756a:	697b      	ldr	r3, [r7, #20]
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8017570:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017574:	9301      	str	r3, [sp, #4]
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	9300      	str	r3, [sp, #0]
 801757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801757c:	683a      	ldr	r2, [r7, #0]
 801757e:	6979      	ldr	r1, [r7, #20]
 8017580:	68f8      	ldr	r0, [r7, #12]
 8017582:	f7ff fe95 	bl	80172b0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8017586:	68bb      	ldr	r3, [r7, #8]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	330c      	adds	r3, #12
 801758c:	681c      	ldr	r4, [r3, #0]
 801758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017590:	9300      	str	r3, [sp, #0]
 8017592:	683b      	ldr	r3, [r7, #0]
 8017594:	693a      	ldr	r2, [r7, #16]
 8017596:	6879      	ldr	r1, [r7, #4]
 8017598:	68b8      	ldr	r0, [r7, #8]
 801759a:	47a0      	blx	r4
 801759c:	e000      	b.n	80175a0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 801759e:	bf00      	nop
    }
}
 80175a0:	371c      	adds	r7, #28
 80175a2:	46bd      	mov	sp, r7
 80175a4:	bd90      	pop	{r4, r7, pc}
	...

080175a8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b086      	sub	sp, #24
 80175ac:	af02      	add	r7, sp, #8
 80175ae:	60f8      	str	r0, [r7, #12]
 80175b0:	60b9      	str	r1, [r7, #8]
 80175b2:	607a      	str	r2, [r7, #4]
 80175b4:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 80175b6:	4b08      	ldr	r3, [pc, #32]	; (80175d8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 80175b8:	681a      	ldr	r2, [r3, #0]
 80175ba:	78fb      	ldrb	r3, [r7, #3]
 80175bc:	9301      	str	r3, [sp, #4]
 80175be:	2300      	movs	r3, #0
 80175c0:	9300      	str	r3, [sp, #0]
 80175c2:	4613      	mov	r3, r2
 80175c4:	687a      	ldr	r2, [r7, #4]
 80175c6:	68b9      	ldr	r1, [r7, #8]
 80175c8:	68f8      	ldr	r0, [r7, #12]
 80175ca:	f7ff ffa3 	bl	8017514 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 80175ce:	bf00      	nop
 80175d0:	3710      	adds	r7, #16
 80175d2:	46bd      	mov	sp, r7
 80175d4:	bd80      	pop	{r7, pc}
 80175d6:	bf00      	nop
 80175d8:	20000100 	.word	0x20000100

080175dc <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b08a      	sub	sp, #40	; 0x28
 80175e0:	af04      	add	r7, sp, #16
 80175e2:	60f8      	str	r0, [r7, #12]
 80175e4:	60b9      	str	r1, [r7, #8]
 80175e6:	607a      	str	r2, [r7, #4]
 80175e8:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d023      	beq.n	8017638 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175f6:	331c      	adds	r3, #28
 80175f8:	6879      	ldr	r1, [r7, #4]
 80175fa:	4618      	mov	r0, r3
 80175fc:	f7ff fbaf 	bl	8016d5e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8017600:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8017602:	697b      	ldr	r3, [r7, #20]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d10c      	bne.n	8017622 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	f103 000c 	add.w	r0, r3, #12
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	685b      	ldr	r3, [r3, #4]
 8017612:	9300      	str	r3, [sp, #0]
 8017614:	68bb      	ldr	r3, [r7, #8]
 8017616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017618:	6a39      	ldr	r1, [r7, #32]
 801761a:	f7ff f9a9 	bl	8016970 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 801761e:	2300      	movs	r3, #0
 8017620:	e019      	b.n	8017656 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8017622:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017626:	9301      	str	r3, [sp, #4]
 8017628:	68bb      	ldr	r3, [r7, #8]
 801762a:	9300      	str	r3, [sp, #0]
 801762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801762e:	6a3a      	ldr	r2, [r7, #32]
 8017630:	6979      	ldr	r1, [r7, #20]
 8017632:	68f8      	ldr	r0, [r7, #12]
 8017634:	f7ff fe3c 	bl	80172b0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8017638:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801763c:	9302      	str	r3, [sp, #8]
 801763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017640:	9301      	str	r3, [sp, #4]
 8017642:	6a3b      	ldr	r3, [r7, #32]
 8017644:	9300      	str	r3, [sp, #0]
 8017646:	683b      	ldr	r3, [r7, #0]
 8017648:	687a      	ldr	r2, [r7, #4]
 801764a:	68b9      	ldr	r1, [r7, #8]
 801764c:	68f8      	ldr	r0, [r7, #12]
 801764e:	f7ff fd62 	bl	8017116 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8017652:	4603      	mov	r3, r0
 8017654:	bf00      	nop
}
 8017656:	4618      	mov	r0, r3
 8017658:	3718      	adds	r7, #24
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}

0801765e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 801765e:	b580      	push	{r7, lr}
 8017660:	b084      	sub	sp, #16
 8017662:	af00      	add	r7, sp, #0
 8017664:	6078      	str	r0, [r7, #4]
 8017666:	460b      	mov	r3, r1
 8017668:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017670:	331c      	adds	r3, #28
 8017672:	78fa      	ldrb	r2, [r7, #3]
 8017674:	4611      	mov	r1, r2
 8017676:	4618      	mov	r0, r3
 8017678:	f7ff fbc0 	bl	8016dfc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 801767c:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	330c      	adds	r3, #12
 8017682:	4618      	mov	r0, r3
 8017684:	f7ff f882 	bl	801678c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d010      	beq.n	80176b0 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	330c      	adds	r3, #12
 8017692:	68f9      	ldr	r1, [r7, #12]
 8017694:	4618      	mov	r0, r3
 8017696:	f7ff f897 	bl	80167c8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80176a0:	331c      	adds	r3, #28
 80176a2:	78fa      	ldrb	r2, [r7, #3]
 80176a4:	68f9      	ldr	r1, [r7, #12]
 80176a6:	4618      	mov	r0, r3
 80176a8:	f7ff fbcb 	bl	8016e42 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80176ac:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80176ae:	e7eb      	b.n	8017688 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	330c      	adds	r3, #12
 80176b4:	4618      	mov	r0, r3
 80176b6:	f7ff f8e7 	bl	8016888 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 80176ba:	bf00      	nop
 80176bc:	3710      	adds	r7, #16
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}

080176c2 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 80176c2:	b580      	push	{r7, lr}
 80176c4:	b082      	sub	sp, #8
 80176c6:	af00      	add	r7, sp, #0
 80176c8:	6078      	str	r0, [r7, #4]
 80176ca:	460b      	mov	r3, r1
 80176cc:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 80176ce:	78fb      	ldrb	r3, [r7, #3]
 80176d0:	4619      	mov	r1, r3
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f7ff ffc3 	bl	801765e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	330c      	adds	r3, #12
 80176dc:	4618      	mov	r0, r3
 80176de:	f7ff f9e5 	bl	8016aac <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80176e2:	4603      	mov	r3, r0
}
 80176e4:	4618      	mov	r0, r3
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}

080176ec <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b084      	sub	sp, #16
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80176fa:	331c      	adds	r3, #28
 80176fc:	2103      	movs	r1, #3
 80176fe:	4618      	mov	r0, r3
 8017700:	f7ff fb7c 	bl	8016dfc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8017704:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d011      	beq.n	8017730 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	7e1b      	ldrb	r3, [r3, #24]
 8017710:	2b03      	cmp	r3, #3
 8017712:	d102      	bne.n	801771a <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	2202      	movs	r2, #2
 8017718:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017720:	331c      	adds	r3, #28
 8017722:	2203      	movs	r2, #3
 8017724:	68f9      	ldr	r1, [r7, #12]
 8017726:	4618      	mov	r0, r3
 8017728:	f7ff fb8b 	bl	8016e42 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801772c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801772e:	e7ea      	b.n	8017706 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8017730:	bf00      	nop
 8017732:	3710      	adds	r7, #16
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}

08017738 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b082      	sub	sp, #8
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
 8017740:	460b      	mov	r3, r1
 8017742:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801774a:	331c      	adds	r3, #28
 801774c:	78fa      	ldrb	r2, [r7, #3]
 801774e:	4611      	mov	r1, r2
 8017750:	4618      	mov	r0, r3
 8017752:	f7ff fb30 	bl	8016db6 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8017756:	4603      	mov	r3, r0
}
 8017758:	4618      	mov	r0, r3
 801775a:	3708      	adds	r7, #8
 801775c:	46bd      	mov	sp, r7
 801775e:	bd80      	pop	{r7, pc}

08017760 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8017760:	b580      	push	{r7, lr}
 8017762:	b084      	sub	sp, #16
 8017764:	af00      	add	r7, sp, #0
 8017766:	60f8      	str	r0, [r7, #12]
 8017768:	60b9      	str	r1, [r7, #8]
 801776a:	607a      	str	r2, [r7, #4]
 801776c:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	68b9      	ldr	r1, [r7, #8]
 8017772:	4618      	mov	r0, r3
 8017774:	f7f5 fb13 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	3308      	adds	r3, #8
 801777c:	6879      	ldr	r1, [r7, #4]
 801777e:	4618      	mov	r0, r3
 8017780:	f7f5 fb0d 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	683a      	ldr	r2, [r7, #0]
 8017788:	611a      	str	r2, [r3, #16]
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	2200      	movs	r2, #0
 801778e:	615a      	str	r2, [r3, #20]
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	4618      	mov	r0, r3
 8017794:	3710      	adds	r7, #16
 8017796:	46bd      	mov	sp, r7
 8017798:	bd80      	pop	{r7, pc}

0801779a <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 801779a:	b480      	push	{r7}
 801779c:	b083      	sub	sp, #12
 801779e:	af00      	add	r7, sp, #0
 80177a0:	6078      	str	r0, [r7, #4]
 80177a2:	6039      	str	r1, [r7, #0]
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	4618      	mov	r0, r3
 80177a8:	370c      	adds	r7, #12
 80177aa:	46bd      	mov	sp, r7
 80177ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b0:	4770      	bx	lr

080177b2 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 80177b2:	b480      	push	{r7}
 80177b4:	b083      	sub	sp, #12
 80177b6:	af00      	add	r7, sp, #0
 80177b8:	6078      	str	r0, [r7, #4]
 80177ba:	6039      	str	r1, [r7, #0]
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	4618      	mov	r0, r3
 80177c0:	370c      	adds	r7, #12
 80177c2:	46bd      	mov	sp, r7
 80177c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c8:	4770      	bx	lr

080177ca <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 80177ca:	b480      	push	{r7}
 80177cc:	b085      	sub	sp, #20
 80177ce:	af00      	add	r7, sp, #0
 80177d0:	60f8      	str	r0, [r7, #12]
 80177d2:	60b9      	str	r1, [r7, #8]
 80177d4:	4613      	mov	r3, r2
 80177d6:	71fb      	strb	r3, [r7, #7]
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	4618      	mov	r0, r3
 80177dc:	3714      	adds	r7, #20
 80177de:	46bd      	mov	sp, r7
 80177e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e4:	4770      	bx	lr

080177e6 <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 80177e6:	b480      	push	{r7}
 80177e8:	b085      	sub	sp, #20
 80177ea:	af00      	add	r7, sp, #0
 80177ec:	60f8      	str	r0, [r7, #12]
 80177ee:	60b9      	str	r1, [r7, #8]
 80177f0:	607a      	str	r2, [r7, #4]
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	4618      	mov	r0, r3
 80177f6:	3714      	adds	r7, #20
 80177f8:	46bd      	mov	sp, r7
 80177fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177fe:	4770      	bx	lr

08017800 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8017800:	b480      	push	{r7}
 8017802:	b085      	sub	sp, #20
 8017804:	af00      	add	r7, sp, #0
 8017806:	60f8      	str	r0, [r7, #12]
 8017808:	60b9      	str	r1, [r7, #8]
 801780a:	607a      	str	r2, [r7, #4]
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	4618      	mov	r0, r3
 8017810:	3714      	adds	r7, #20
 8017812:	46bd      	mov	sp, r7
 8017814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017818:	4770      	bx	lr

0801781a <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801781a:	b480      	push	{r7}
 801781c:	b085      	sub	sp, #20
 801781e:	af00      	add	r7, sp, #0
 8017820:	60f8      	str	r0, [r7, #12]
 8017822:	60b9      	str	r1, [r7, #8]
 8017824:	607a      	str	r2, [r7, #4]
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	4618      	mov	r0, r3
 801782a:	3714      	adds	r7, #20
 801782c:	46bd      	mov	sp, r7
 801782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017832:	4770      	bx	lr

08017834 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8017834:	b480      	push	{r7}
 8017836:	b085      	sub	sp, #20
 8017838:	af00      	add	r7, sp, #0
 801783a:	60f8      	str	r0, [r7, #12]
 801783c:	60b9      	str	r1, [r7, #8]
 801783e:	607a      	str	r2, [r7, #4]
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	4618      	mov	r0, r3
 8017844:	3714      	adds	r7, #20
 8017846:	46bd      	mov	sp, r7
 8017848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784c:	4770      	bx	lr

0801784e <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801784e:	b480      	push	{r7}
 8017850:	b085      	sub	sp, #20
 8017852:	af00      	add	r7, sp, #0
 8017854:	60f8      	str	r0, [r7, #12]
 8017856:	60b9      	str	r1, [r7, #8]
 8017858:	4639      	mov	r1, r7
 801785a:	e881 000c 	stmia.w	r1, {r2, r3}
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	4618      	mov	r0, r3
 8017862:	3714      	adds	r7, #20
 8017864:	46bd      	mov	sp, r7
 8017866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786a:	4770      	bx	lr

0801786c <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801786c:	b480      	push	{r7}
 801786e:	b085      	sub	sp, #20
 8017870:	af00      	add	r7, sp, #0
 8017872:	60f8      	str	r0, [r7, #12]
 8017874:	60b9      	str	r1, [r7, #8]
 8017876:	4639      	mov	r1, r7
 8017878:	e881 000c 	stmia.w	r1, {r2, r3}
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	4618      	mov	r0, r3
 8017880:	3714      	adds	r7, #20
 8017882:	46bd      	mov	sp, r7
 8017884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017888:	4770      	bx	lr

0801788a <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801788a:	b480      	push	{r7}
 801788c:	b085      	sub	sp, #20
 801788e:	af00      	add	r7, sp, #0
 8017890:	60f8      	str	r0, [r7, #12]
 8017892:	60b9      	str	r1, [r7, #8]
 8017894:	ed87 0b00 	vstr	d0, [r7]
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	4618      	mov	r0, r3
 801789c:	3714      	adds	r7, #20
 801789e:	46bd      	mov	sp, r7
 80178a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a4:	4770      	bx	lr

080178a6 <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 80178a6:	b480      	push	{r7}
 80178a8:	b085      	sub	sp, #20
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	60f8      	str	r0, [r7, #12]
 80178ae:	60b9      	str	r1, [r7, #8]
 80178b0:	607a      	str	r2, [r7, #4]
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	4618      	mov	r0, r3
 80178b6:	3714      	adds	r7, #20
 80178b8:	46bd      	mov	sp, r7
 80178ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178be:	4770      	bx	lr

080178c0 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 80178c0:	b480      	push	{r7}
 80178c2:	b085      	sub	sp, #20
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	60f8      	str	r0, [r7, #12]
 80178c8:	60b9      	str	r1, [r7, #8]
 80178ca:	607a      	str	r2, [r7, #4]
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	4618      	mov	r0, r3
 80178d0:	3714      	adds	r7, #20
 80178d2:	46bd      	mov	sp, r7
 80178d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d8:	4770      	bx	lr

080178da <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 80178da:	b480      	push	{r7}
 80178dc:	b085      	sub	sp, #20
 80178de:	af00      	add	r7, sp, #0
 80178e0:	60f8      	str	r0, [r7, #12]
 80178e2:	60b9      	str	r1, [r7, #8]
 80178e4:	607a      	str	r2, [r7, #4]
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	4618      	mov	r0, r3
 80178ea:	3714      	adds	r7, #20
 80178ec:	46bd      	mov	sp, r7
 80178ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f2:	4770      	bx	lr

080178f4 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 80178f4:	b480      	push	{r7}
 80178f6:	b085      	sub	sp, #20
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	60f8      	str	r0, [r7, #12]
 80178fc:	60b9      	str	r1, [r7, #8]
 80178fe:	607a      	str	r2, [r7, #4]
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	4618      	mov	r0, r3
 8017904:	3714      	adds	r7, #20
 8017906:	46bd      	mov	sp, r7
 8017908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790c:	4770      	bx	lr

0801790e <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 801790e:	b480      	push	{r7}
 8017910:	b085      	sub	sp, #20
 8017912:	af00      	add	r7, sp, #0
 8017914:	60f8      	str	r0, [r7, #12]
 8017916:	60b9      	str	r1, [r7, #8]
 8017918:	607a      	str	r2, [r7, #4]
 801791a:	603b      	str	r3, [r7, #0]
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	4618      	mov	r0, r3
 8017920:	3714      	adds	r7, #20
 8017922:	46bd      	mov	sp, r7
 8017924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017928:	4770      	bx	lr

0801792a <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801792a:	b480      	push	{r7}
 801792c:	b085      	sub	sp, #20
 801792e:	af00      	add	r7, sp, #0
 8017930:	60f8      	str	r0, [r7, #12]
 8017932:	60b9      	str	r1, [r7, #8]
 8017934:	607a      	str	r2, [r7, #4]
 8017936:	603b      	str	r3, [r7, #0]
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	4618      	mov	r0, r3
 801793c:	3714      	adds	r7, #20
 801793e:	46bd      	mov	sp, r7
 8017940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017944:	4770      	bx	lr

08017946 <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8017946:	b480      	push	{r7}
 8017948:	b085      	sub	sp, #20
 801794a:	af00      	add	r7, sp, #0
 801794c:	60f8      	str	r0, [r7, #12]
 801794e:	60b9      	str	r1, [r7, #8]
 8017950:	607a      	str	r2, [r7, #4]
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	4618      	mov	r0, r3
 8017956:	3714      	adds	r7, #20
 8017958:	46bd      	mov	sp, r7
 801795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795e:	4770      	bx	lr

08017960 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8017960:	b480      	push	{r7}
 8017962:	b085      	sub	sp, #20
 8017964:	af00      	add	r7, sp, #0
 8017966:	60f8      	str	r0, [r7, #12]
 8017968:	60b9      	str	r1, [r7, #8]
 801796a:	607a      	str	r2, [r7, #4]
 801796c:	603b      	str	r3, [r7, #0]
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	4618      	mov	r0, r3
 8017972:	3714      	adds	r7, #20
 8017974:	46bd      	mov	sp, r7
 8017976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801797a:	4770      	bx	lr

0801797c <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 801797c:	b480      	push	{r7}
 801797e:	b083      	sub	sp, #12
 8017980:	af00      	add	r7, sp, #0
 8017982:	6078      	str	r0, [r7, #4]
 8017984:	2300      	movs	r3, #0
 8017986:	4618      	mov	r0, r3
 8017988:	370c      	adds	r7, #12
 801798a:	46bd      	mov	sp, r7
 801798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017990:	4770      	bx	lr
	...

08017994 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8017994:	b580      	push	{r7, lr}
 8017996:	b084      	sub	sp, #16
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
 801799c:	6039      	str	r1, [r7, #0]
 801799e:	f107 0308 	add.w	r3, r7, #8
 80179a2:	4909      	ldr	r1, [pc, #36]	; (80179c8 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 80179a4:	4618      	mov	r0, r3
 80179a6:	f7f5 f9a6 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80179aa:	f107 0308 	add.w	r3, r7, #8
 80179ae:	4619      	mov	r1, r3
 80179b0:	6878      	ldr	r0, [r7, #4]
 80179b2:	f005 fec5 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
 80179b6:	f107 0308 	add.w	r3, r7, #8
 80179ba:	4618      	mov	r0, r3
 80179bc:	f7f5 fd53 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	3710      	adds	r7, #16
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bd80      	pop	{r7, pc}
 80179c8:	08025f98 	.word	0x08025f98

080179cc <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 80179cc:	b480      	push	{r7}
 80179ce:	b083      	sub	sp, #12
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
 80179d4:	460b      	mov	r3, r1
 80179d6:	70fb      	strb	r3, [r7, #3]
 80179d8:	78fb      	ldrb	r3, [r7, #3]
 80179da:	4618      	mov	r0, r3
 80179dc:	370c      	adds	r7, #12
 80179de:	46bd      	mov	sp, r7
 80179e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e4:	4770      	bx	lr

080179e6 <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 80179e6:	b480      	push	{r7}
 80179e8:	b083      	sub	sp, #12
 80179ea:	af00      	add	r7, sp, #0
 80179ec:	6078      	str	r0, [r7, #4]
 80179ee:	2300      	movs	r3, #0
 80179f0:	4618      	mov	r0, r3
 80179f2:	370c      	adds	r7, #12
 80179f4:	46bd      	mov	sp, r7
 80179f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fa:	4770      	bx	lr

080179fc <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 80179fc:	b480      	push	{r7}
 80179fe:	b083      	sub	sp, #12
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
 8017a04:	2300      	movs	r3, #0
 8017a06:	4618      	mov	r0, r3
 8017a08:	370c      	adds	r7, #12
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a10:	4770      	bx	lr

08017a12 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8017a12:	b480      	push	{r7}
 8017a14:	b083      	sub	sp, #12
 8017a16:	af00      	add	r7, sp, #0
 8017a18:	6078      	str	r0, [r7, #4]
 8017a1a:	6039      	str	r1, [r7, #0]
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	4618      	mov	r0, r3
 8017a20:	370c      	adds	r7, #12
 8017a22:	46bd      	mov	sp, r7
 8017a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a28:	4770      	bx	lr

08017a2a <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8017a2a:	b480      	push	{r7}
 8017a2c:	b083      	sub	sp, #12
 8017a2e:	af00      	add	r7, sp, #0
 8017a30:	6078      	str	r0, [r7, #4]
 8017a32:	2300      	movs	r3, #0
 8017a34:	4618      	mov	r0, r3
 8017a36:	370c      	adds	r7, #12
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a3e:	4770      	bx	lr

08017a40 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8017a40:	b480      	push	{r7}
 8017a42:	b083      	sub	sp, #12
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
 8017a48:	6039      	str	r1, [r7, #0]
 8017a4a:	683b      	ldr	r3, [r7, #0]
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	370c      	adds	r7, #12
 8017a50:	46bd      	mov	sp, r7
 8017a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a56:	4770      	bx	lr

08017a58 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8017a58:	b480      	push	{r7}
 8017a5a:	b083      	sub	sp, #12
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
 8017a60:	2300      	movs	r3, #0
 8017a62:	4618      	mov	r0, r3
 8017a64:	370c      	adds	r7, #12
 8017a66:	46bd      	mov	sp, r7
 8017a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6c:	4770      	bx	lr

08017a6e <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8017a6e:	b480      	push	{r7}
 8017a70:	b083      	sub	sp, #12
 8017a72:	af00      	add	r7, sp, #0
 8017a74:	6078      	str	r0, [r7, #4]
 8017a76:	6039      	str	r1, [r7, #0]
 8017a78:	683b      	ldr	r3, [r7, #0]
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	370c      	adds	r7, #12
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a84:	4770      	bx	lr

08017a86 <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8017a86:	b580      	push	{r7, lr}
 8017a88:	b082      	sub	sp, #8
 8017a8a:	af00      	add	r7, sp, #0
 8017a8c:	6078      	str	r0, [r7, #4]
 8017a8e:	6039      	str	r1, [r7, #0]
 8017a90:	2100      	movs	r1, #0
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f7f3 f972 	bl	800ad7c <_ZN18cpputest_ulonglongC1Ei>
 8017a98:	6878      	ldr	r0, [r7, #4]
 8017a9a:	3708      	adds	r7, #8
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}

08017aa0 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8017aa0:	b480      	push	{r7}
 8017aa2:	b085      	sub	sp, #20
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	60f8      	str	r0, [r7, #12]
 8017aa8:	60b9      	str	r1, [r7, #8]
 8017aaa:	4639      	mov	r1, r7
 8017aac:	e881 000c 	stmia.w	r1, {r2, r3}
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	461a      	mov	r2, r3
 8017ab4:	463b      	mov	r3, r7
 8017ab6:	cb03      	ldmia	r3!, {r0, r1}
 8017ab8:	6010      	str	r0, [r2, #0]
 8017aba:	6051      	str	r1, [r2, #4]
 8017abc:	68f8      	ldr	r0, [r7, #12]
 8017abe:	3714      	adds	r7, #20
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac6:	4770      	bx	lr

08017ac8 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b082      	sub	sp, #8
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
 8017ad0:	6039      	str	r1, [r7, #0]
 8017ad2:	2100      	movs	r1, #0
 8017ad4:	6878      	ldr	r0, [r7, #4]
 8017ad6:	f7f3 f945 	bl	800ad64 <_ZN17cpputest_longlongC1Ei>
 8017ada:	6878      	ldr	r0, [r7, #4]
 8017adc:	3708      	adds	r7, #8
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}

08017ae2 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8017ae2:	b480      	push	{r7}
 8017ae4:	b085      	sub	sp, #20
 8017ae6:	af00      	add	r7, sp, #0
 8017ae8:	60f8      	str	r0, [r7, #12]
 8017aea:	60b9      	str	r1, [r7, #8]
 8017aec:	4639      	mov	r1, r7
 8017aee:	e881 000c 	stmia.w	r1, {r2, r3}
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	461a      	mov	r2, r3
 8017af6:	463b      	mov	r3, r7
 8017af8:	cb03      	ldmia	r3!, {r0, r1}
 8017afa:	6010      	str	r0, [r2, #0]
 8017afc:	6051      	str	r1, [r2, #4]
 8017afe:	68f8      	ldr	r0, [r7, #12]
 8017b00:	3714      	adds	r7, #20
 8017b02:	46bd      	mov	sp, r7
 8017b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b08:	4770      	bx	lr

08017b0a <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8017b0a:	b480      	push	{r7}
 8017b0c:	b083      	sub	sp, #12
 8017b0e:	af00      	add	r7, sp, #0
 8017b10:	6078      	str	r0, [r7, #4]
 8017b12:	2300      	movs	r3, #0
 8017b14:	4618      	mov	r0, r3
 8017b16:	370c      	adds	r7, #12
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1e:	4770      	bx	lr

08017b20 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8017b20:	b480      	push	{r7}
 8017b22:	b083      	sub	sp, #12
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
 8017b28:	6039      	str	r1, [r7, #0]
 8017b2a:	683b      	ldr	r3, [r7, #0]
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	370c      	adds	r7, #12
 8017b30:	46bd      	mov	sp, r7
 8017b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b36:	4770      	bx	lr

08017b38 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8017b38:	b480      	push	{r7}
 8017b3a:	b083      	sub	sp, #12
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
 8017b40:	f04f 0200 	mov.w	r2, #0
 8017b44:	f04f 0300 	mov.w	r3, #0
 8017b48:	ec43 2b17 	vmov	d7, r2, r3
 8017b4c:	eeb0 0a47 	vmov.f32	s0, s14
 8017b50:	eef0 0a67 	vmov.f32	s1, s15
 8017b54:	370c      	adds	r7, #12
 8017b56:	46bd      	mov	sp, r7
 8017b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5c:	4770      	bx	lr

08017b5e <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8017b5e:	b480      	push	{r7}
 8017b60:	b085      	sub	sp, #20
 8017b62:	af00      	add	r7, sp, #0
 8017b64:	60f8      	str	r0, [r7, #12]
 8017b66:	ed87 0b00 	vstr	d0, [r7]
 8017b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b6e:	ec43 2b17 	vmov	d7, r2, r3
 8017b72:	eeb0 0a47 	vmov.f32	s0, s14
 8017b76:	eef0 0a67 	vmov.f32	s1, s15
 8017b7a:	3714      	adds	r7, #20
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b82:	4770      	bx	lr

08017b84 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8017b84:	b480      	push	{r7}
 8017b86:	b083      	sub	sp, #12
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
 8017b8c:	4b03      	ldr	r3, [pc, #12]	; (8017b9c <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8017b8e:	4618      	mov	r0, r3
 8017b90:	370c      	adds	r7, #12
 8017b92:	46bd      	mov	sp, r7
 8017b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b98:	4770      	bx	lr
 8017b9a:	bf00      	nop
 8017b9c:	08025f98 	.word	0x08025f98

08017ba0 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8017ba0:	b480      	push	{r7}
 8017ba2:	b083      	sub	sp, #12
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
 8017ba8:	6039      	str	r1, [r7, #0]
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	4618      	mov	r0, r3
 8017bae:	370c      	adds	r7, #12
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb6:	4770      	bx	lr

08017bb8 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8017bb8:	b480      	push	{r7}
 8017bba:	b083      	sub	sp, #12
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	370c      	adds	r7, #12
 8017bc6:	46bd      	mov	sp, r7
 8017bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bcc:	4770      	bx	lr

08017bce <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8017bce:	b480      	push	{r7}
 8017bd0:	b083      	sub	sp, #12
 8017bd2:	af00      	add	r7, sp, #0
 8017bd4:	6078      	str	r0, [r7, #4]
 8017bd6:	6039      	str	r1, [r7, #0]
 8017bd8:	683b      	ldr	r3, [r7, #0]
 8017bda:	4618      	mov	r0, r3
 8017bdc:	370c      	adds	r7, #12
 8017bde:	46bd      	mov	sp, r7
 8017be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be4:	4770      	bx	lr

08017be6 <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8017be6:	b480      	push	{r7}
 8017be8:	b083      	sub	sp, #12
 8017bea:	af00      	add	r7, sp, #0
 8017bec:	6078      	str	r0, [r7, #4]
 8017bee:	2300      	movs	r3, #0
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	370c      	adds	r7, #12
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bfa:	4770      	bx	lr

08017bfc <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8017bfc:	b480      	push	{r7}
 8017bfe:	b083      	sub	sp, #12
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	6078      	str	r0, [r7, #4]
 8017c04:	6039      	str	r1, [r7, #0]
 8017c06:	683b      	ldr	r3, [r7, #0]
 8017c08:	4618      	mov	r0, r3
 8017c0a:	370c      	adds	r7, #12
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c12:	4770      	bx	lr

08017c14 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8017c14:	b480      	push	{r7}
 8017c16:	b083      	sub	sp, #12
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	4618      	mov	r0, r3
 8017c20:	370c      	adds	r7, #12
 8017c22:	46bd      	mov	sp, r7
 8017c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c28:	4770      	bx	lr

08017c2a <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8017c2a:	b480      	push	{r7}
 8017c2c:	b083      	sub	sp, #12
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	6078      	str	r0, [r7, #4]
 8017c32:	6039      	str	r1, [r7, #0]
 8017c34:	683b      	ldr	r3, [r7, #0]
 8017c36:	4618      	mov	r0, r3
 8017c38:	370c      	adds	r7, #12
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c40:	4770      	bx	lr

08017c42 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8017c42:	b480      	push	{r7}
 8017c44:	b083      	sub	sp, #12
 8017c46:	af00      	add	r7, sp, #0
 8017c48:	6078      	str	r0, [r7, #4]
 8017c4a:	6039      	str	r1, [r7, #0]
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	4618      	mov	r0, r3
 8017c50:	370c      	adds	r7, #12
 8017c52:	46bd      	mov	sp, r7
 8017c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c58:	4770      	bx	lr
	...

08017c5c <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8017c5c:	b480      	push	{r7}
 8017c5e:	b083      	sub	sp, #12
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
 8017c64:	4a04      	ldr	r2, [pc, #16]	; (8017c78 <_ZN14MockActualCallC1Ev+0x1c>)
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	601a      	str	r2, [r3, #0]
{
}
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	370c      	adds	r7, #12
 8017c70:	46bd      	mov	sp, r7
 8017c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c76:	4770      	bx	lr
 8017c78:	08028fa0 	.word	0x08028fa0

08017c7c <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8017c7c:	b480      	push	{r7}
 8017c7e:	b083      	sub	sp, #12
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
 8017c84:	4a04      	ldr	r2, [pc, #16]	; (8017c98 <_ZN14MockActualCallD1Ev+0x1c>)
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	601a      	str	r2, [r3, #0]
{
}
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	370c      	adds	r7, #12
 8017c90:	46bd      	mov	sp, r7
 8017c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c96:	4770      	bx	lr
 8017c98:	08028fa0 	.word	0x08028fa0

08017c9c <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b082      	sub	sp, #8
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	6078      	str	r0, [r7, #4]
 8017ca4:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	3304      	adds	r3, #4
 8017caa:	6839      	ldr	r1, [r7, #0]
 8017cac:	4618      	mov	r0, r3
 8017cae:	f7f5 f88e 	bl	800cdce <_ZN12SimpleStringaSERKS_>
}
 8017cb2:	bf00      	nop
 8017cb4:	3708      	adds	r7, #8
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	bd80      	pop	{r7, pc}

08017cba <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8017cba:	b580      	push	{r7, lr}
 8017cbc:	b082      	sub	sp, #8
 8017cbe:	af00      	add	r7, sp, #0
 8017cc0:	6078      	str	r0, [r7, #4]
 8017cc2:	6039      	str	r1, [r7, #0]
    return functionName_;
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	3304      	adds	r3, #4
 8017cc8:	4619      	mov	r1, r3
 8017cca:	6878      	ldr	r0, [r7, #4]
 8017ccc:	f7f5 f867 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
}
 8017cd0:	6878      	ldr	r0, [r7, #4]
 8017cd2:	3708      	adds	r7, #8
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bd80      	pop	{r7, pc}

08017cd8 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b084      	sub	sp, #16
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	60f8      	str	r0, [r7, #12]
 8017ce0:	60b9      	str	r1, [r7, #8]
 8017ce2:	607a      	str	r2, [r7, #4]
 8017ce4:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f7ff ffb7 	bl	8017c5c <_ZN14MockActualCallC1Ev>
 8017cee:	4a17      	ldr	r2, [pc, #92]	; (8017d4c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	601a      	str	r2, [r3, #0]
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	3304      	adds	r3, #4
 8017cf8:	4915      	ldr	r1, [pc, #84]	; (8017d50 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7f4 fffb 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	68ba      	ldr	r2, [r7, #8]
 8017d04:	60da      	str	r2, [r3, #12]
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	687a      	ldr	r2, [r7, #4]
 8017d0a:	611a      	str	r2, [r3, #16]
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	2202      	movs	r2, #2
 8017d10:	751a      	strb	r2, [r3, #20]
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	2200      	movs	r2, #0
 8017d16:	755a      	strb	r2, [r3, #21]
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	619a      	str	r2, [r3, #24]
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	331c      	adds	r3, #28
 8017d22:	4618      	mov	r0, r3
 8017d24:	f004 f814 	bl	801bd50 <_ZN21MockExpectedCallsListC1Ev>
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	683a      	ldr	r2, [r7, #0]
 8017d2c:	625a      	str	r2, [r3, #36]	; 0x24
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	2200      	movs	r2, #0
 8017d32:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	331c      	adds	r3, #28
 8017d38:	6839      	ldr	r1, [r7, #0]
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f004 f986 	bl	801c04c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	4618      	mov	r0, r3
 8017d44:	3710      	adds	r7, #16
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd80      	pop	{r7, pc}
 8017d4a:	bf00      	nop
 8017d4c:	08028ea0 	.word	0x08028ea0
 8017d50:	08025f98 	.word	0x08025f98

08017d54 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b082      	sub	sp, #8
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
 8017d5c:	4a0c      	ldr	r2, [pc, #48]	; (8017d90 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f001 fae4 	bl	8019330 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	331c      	adds	r3, #28
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	f004 f803 	bl	801bd78 <_ZN21MockExpectedCallsListD1Ev>
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	3304      	adds	r3, #4
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7f5 fb75 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7ff ff7c 	bl	8017c7c <_ZN14MockActualCallD1Ev>
}
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	4618      	mov	r0, r3
 8017d88:	3708      	adds	r7, #8
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	bd80      	pop	{r7, pc}
 8017d8e:	bf00      	nop
 8017d90:	08028ea0 	.word	0x08028ea0

08017d94 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b082      	sub	sp, #8
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
}
 8017d9c:	6878      	ldr	r0, [r7, #4]
 8017d9e:	f7ff ffd9 	bl	8017d54 <_ZN21MockCheckedActualCallD1Ev>
 8017da2:	212c      	movs	r1, #44	; 0x2c
 8017da4:	6878      	ldr	r0, [r7, #4]
 8017da6:	f7f2 fbf7 	bl	800a598 <_ZdlPvj>
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	4618      	mov	r0, r3
 8017dae:	3708      	adds	r7, #8
 8017db0:	46bd      	mov	sp, r7
 8017db2:	bd80      	pop	{r7, pc}

08017db4 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8017db4:	b480      	push	{r7}
 8017db6:	b083      	sub	sp, #12
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
 8017dbc:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	683a      	ldr	r2, [r7, #0]
 8017dc2:	611a      	str	r2, [r3, #16]
}
 8017dc4:	bf00      	nop
 8017dc6:	370c      	adds	r7, #12
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dce:	4770      	bx	lr

08017dd0 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b082      	sub	sp, #8
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	691a      	ldr	r2, [r3, #16]
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	691b      	ldr	r3, [r3, #16]
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	330c      	adds	r3, #12
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	4610      	mov	r0, r2
 8017de8:	4798      	blx	r3
 8017dea:	4603      	mov	r3, r0
}
 8017dec:	4618      	mov	r0, r3
 8017dee:	3708      	adds	r7, #8
 8017df0:	46bd      	mov	sp, r7
 8017df2:	bd80      	pop	{r7, pc}

08017df4 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b082      	sub	sp, #8
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
 8017dfc:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	33c0      	adds	r3, #192	; 0xc0
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	6878      	ldr	r0, [r7, #4]
 8017e08:	4798      	blx	r3
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	f083 0301 	eor.w	r3, r3, #1
 8017e10:	b2db      	uxtb	r3, r3
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d010      	beq.n	8017e38 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	33ec      	adds	r3, #236	; 0xec
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	2101      	movs	r1, #1
 8017e20:	6878      	ldr	r0, [r7, #4]
 8017e22:	4798      	blx	r3
        reporter_->failTest(failure);
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	691a      	ldr	r2, [r3, #16]
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	691b      	ldr	r3, [r3, #16]
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	3308      	adds	r3, #8
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	6839      	ldr	r1, [r7, #0]
 8017e34:	4610      	mov	r0, r2
 8017e36:	4798      	blx	r3
    }
}
 8017e38:	bf00      	nop
 8017e3a:	3708      	adds	r7, #8
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}

08017e40 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8017e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e44:	b0bc      	sub	sp, #240	; 0xf0
 8017e46:	af00      	add	r7, sp, #0
 8017e48:	6078      	str	r0, [r7, #4]
 8017e4a:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8017e54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	f000 80f5 	beq.w	8018048 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8017e5e:	683b      	ldr	r3, [r7, #0]
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	339c      	adds	r3, #156	; 0x9c
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017e6a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8017e6e:	6839      	ldr	r1, [r7, #0]
 8017e70:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8017e72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017e76:	4618      	mov	r0, r3
 8017e78:	f006 fa6e 	bl	801e358 <_ZNK14MockNamedValue9getCopierEv>
 8017e7c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8017e80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d013      	beq.n	8017eb0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8017e88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	3308      	adds	r3, #8
 8017e90:	681c      	ldr	r4, [r3, #0]
 8017e92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017e96:	691d      	ldr	r5, [r3, #16]
 8017e98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f006 fa2b 	bl	801e2f8 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	461a      	mov	r2, r3
 8017ea6:	4629      	mov	r1, r5
 8017ea8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8017eac:	47a0      	blx	r4
 8017eae:	e0c0      	b.n	8018032 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8017eb0:	2500      	movs	r5, #0
 8017eb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017eb6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017eba:	4611      	mov	r1, r2
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f005 ff0e 	bl	801dcde <_ZNK14MockNamedValue7getTypeEv>
 8017ec2:	2601      	movs	r6, #1
 8017ec4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017ec8:	4962      	ldr	r1, [pc, #392]	; (8018054 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f7f4 ff13 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8017ed0:	f04f 0801 	mov.w	r8, #1
 8017ed4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8017ed8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017edc:	4611      	mov	r1, r2
 8017ede:	4618      	mov	r0, r3
 8017ee0:	f7f5 facd 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d015      	beq.n	8017f16 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8017eea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017eee:	f103 0408 	add.w	r4, r3, #8
 8017ef2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017ef6:	4958      	ldr	r1, [pc, #352]	; (8018058 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f7f4 fefc 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8017efe:	2501      	movs	r5, #1
 8017f00:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017f04:	4619      	mov	r1, r3
 8017f06:	4620      	mov	r0, r4
 8017f08:	f7f5 fab9 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 8017f0c:	4603      	mov	r3, r0
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d001      	beq.n	8017f16 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8017f12:	2401      	movs	r4, #1
 8017f14:	e000      	b.n	8017f18 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 8017f16:	2400      	movs	r4, #0
 8017f18:	2d00      	cmp	r5, #0
 8017f1a:	d004      	beq.n	8017f26 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8017f1c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017f20:	4618      	mov	r0, r3
 8017f22:	f7f5 faa0 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8017f26:	f1b8 0f00 	cmp.w	r8, #0
 8017f2a:	d004      	beq.n	8017f36 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8017f2c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017f30:	4618      	mov	r0, r3
 8017f32:	f7f5 fa98 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8017f36:	2e00      	cmp	r6, #0
 8017f38:	d004      	beq.n	8017f44 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 8017f3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7f5 fa91 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8017f44:	2c00      	cmp	r4, #0
 8017f46:	d018      	beq.n	8017f7a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8017f48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	f006 f95b 	bl	801e208 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8017f52:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 8017f56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f006 f9e4 	bl	801e328 <_ZNK14MockNamedValue7getSizeEv>
 8017f60:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8017f64:	4b3d      	ldr	r3, [pc, #244]	; (801805c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017f6c:	6910      	ldr	r0, [r2, #16]
 8017f6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8017f72:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8017f76:	4798      	blx	r3
 8017f78:	e05b      	b.n	8018032 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8017f7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017f7e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017f82:	4611      	mov	r1, r2
 8017f84:	4618      	mov	r0, r3
 8017f86:	f005 fe9b 	bl	801dcc0 <_ZNK14MockNamedValue7getNameEv>
 8017f8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017f8e:	4934      	ldr	r1, [pc, #208]	; (8018060 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8017f90:	4618      	mov	r0, r3
 8017f92:	f7f4 feb0 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8017f96:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8017f9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017f9e:	4611      	mov	r1, r2
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7f5 fab1 	bl	800d508 <_ZneRK12SimpleStringS1_>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	461c      	mov	r4, r3
 8017faa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f7f5 fa59 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8017fb4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f7f5 fa54 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8017fbe:	2c00      	cmp	r4, #0
 8017fc0:	d037      	beq.n	8018032 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	339c      	adds	r3, #156	; 0x9c
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017fce:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8017fd2:	6839      	ldr	r1, [r7, #0]
 8017fd4:	4798      	blx	r3
 8017fd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8017fda:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8017fde:	4611      	mov	r1, r2
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f005 fe7c 	bl	801dcde <_ZNK14MockNamedValue7getTypeEv>
 8017fe6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8017fea:	4618      	mov	r0, r3
 8017fec:	f005 fbd2 	bl	801d794 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	33cc      	adds	r3, #204	; 0xcc
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	6878      	ldr	r0, [r7, #4]
 8017ffa:	4798      	blx	r3
 8017ffc:	4601      	mov	r1, r0
 8017ffe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8018002:	f107 030c 	add.w	r3, r7, #12
 8018006:	4618      	mov	r0, r3
 8018008:	f005 faee 	bl	801d5e8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	33dc      	adds	r3, #220	; 0xdc
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	f107 020c 	add.w	r2, r7, #12
 8018018:	4611      	mov	r1, r2
 801801a:	6878      	ldr	r0, [r7, #4]
 801801c:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 801801e:	f107 030c 	add.w	r3, r7, #12
 8018022:	4618      	mov	r0, r3
 8018024:	f001 ffe2 	bl	8019fec <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8018028:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801802c:	4618      	mov	r0, r3
 801802e:	f7f5 fa1a 	bl	800d466 <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8018032:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018036:	4618      	mov	r0, r3
 8018038:	f005 fbac 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 801803c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8018040:	695b      	ldr	r3, [r3, #20]
 8018042:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8018046:	e705      	b.n	8017e54 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 8018048:	bf00      	nop
 801804a:	37f0      	adds	r7, #240	; 0xf0
 801804c:	46bd      	mov	sp, r7
 801804e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018052:	bf00      	nop
 8018054:	08025f9c 	.word	0x08025f9c
 8018058:	08025fa8 	.word	0x08025fa8
 801805c:	200000d4 	.word	0x200000d4
 8018060:	08025f98 	.word	0x08025f98

08018064 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b084      	sub	sp, #16
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	331c      	adds	r3, #28
 8018070:	4618      	mov	r0, r3
 8018072:	f004 f9bb 	bl	801c3ec <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8018076:	4602      	mov	r2, r0
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	699b      	ldr	r3, [r3, #24]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d00f      	beq.n	80180a4 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	33d4      	adds	r3, #212	; 0xd4
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	687a      	ldr	r2, [r7, #4]
 801808e:	6992      	ldr	r2, [r2, #24]
 8018090:	4611      	mov	r1, r2
 8018092:	6878      	ldr	r0, [r7, #4]
 8018094:	4798      	blx	r3
        callHasSucceeded();
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	33d0      	adds	r3, #208	; 0xd0
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	6878      	ldr	r0, [r7, #4]
 80180a0:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 80180a2:	e00f      	b.n	80180c4 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	331c      	adds	r3, #28
 80180a8:	4618      	mov	r0, r3
 80180aa:	f004 f9cc 	bl	801c446 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 80180ae:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d006      	beq.n	80180c4 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	33d4      	adds	r3, #212	; 0xd4
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	68f9      	ldr	r1, [r7, #12]
 80180c0:	6878      	ldr	r0, [r7, #4]
 80180c2:	4798      	blx	r3
}
 80180c4:	bf00      	nop
 80180c6:	3710      	adds	r7, #16
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bd80      	pop	{r7, pc}

080180cc <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b082      	sub	sp, #8
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	33ec      	adds	r3, #236	; 0xec
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	2102      	movs	r1, #2
 80180de:	6878      	ldr	r0, [r7, #4]
 80180e0:	4798      	blx	r3
}
 80180e2:	bf00      	nop
 80180e4:	3708      	adds	r7, #8
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bd80      	pop	{r7, pc}

080180ea <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 80180ea:	b580      	push	{r7, lr}
 80180ec:	b082      	sub	sp, #8
 80180ee:	af00      	add	r7, sp, #0
 80180f0:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	699b      	ldr	r3, [r3, #24]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d00b      	beq.n	8018112 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	699a      	ldr	r2, [r3, #24]
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	699b      	ldr	r3, [r3, #24]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	33ec      	adds	r3, #236	; 0xec
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	4610      	mov	r0, r2
 801810a:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	2200      	movs	r2, #0
 8018110:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	331c      	adds	r3, #28
 8018116:	4618      	mov	r0, r3
 8018118:	f004 f85c 	bl	801c1d4 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 801811c:	bf00      	nop
 801811e:	3708      	adds	r7, #8
 8018120:	46bd      	mov	sp, r7
 8018122:	bd80      	pop	{r7, pc}

08018124 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8018124:	b590      	push	{r4, r7, lr}
 8018126:	b091      	sub	sp, #68	; 0x44
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
 801812c:	6039      	str	r1, [r7, #0]
    setName(name);
 801812e:	6839      	ldr	r1, [r7, #0]
 8018130:	6878      	ldr	r0, [r7, #4]
 8018132:	f7ff fdb3 	bl	8017c9c <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	33ec      	adds	r3, #236	; 0xec
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	2100      	movs	r1, #0
 8018140:	6878      	ldr	r0, [r7, #4]
 8018142:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	331c      	adds	r3, #28
 8018148:	6839      	ldr	r1, [r7, #0]
 801814a:	4618      	mov	r0, r3
 801814c:	f003 ffec 	bl	801c128 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	331c      	adds	r3, #28
 8018154:	4618      	mov	r0, r3
 8018156:	f003 fe7c 	bl	801be52 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801815a:	4603      	mov	r3, r0
 801815c:	2b00      	cmp	r3, #0
 801815e:	d01d      	beq.n	801819c <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	33cc      	adds	r3, #204	; 0xcc
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	6878      	ldr	r0, [r7, #4]
 801816a:	4798      	blx	r3
 801816c:	4601      	mov	r1, r0
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018172:	f107 000c 	add.w	r0, r7, #12
 8018176:	683a      	ldr	r2, [r7, #0]
 8018178:	f004 fe24 	bl	801cdc4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	33dc      	adds	r3, #220	; 0xdc
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	f107 020c 	add.w	r2, r7, #12
 8018188:	4611      	mov	r1, r2
 801818a:	6878      	ldr	r0, [r7, #4]
 801818c:	4798      	blx	r3
        return *this;
 801818e:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8018190:	f107 030c 	add.w	r3, r7, #12
 8018194:	4618      	mov	r0, r3
 8018196:	f001 ff4b 	bl	801a030 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801819a:	e006      	b.n	80181aa <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	33d8      	adds	r3, #216	; 0xd8
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	6878      	ldr	r0, [r7, #4]
 80181a6:	4798      	blx	r3

    return *this;
 80181a8:	687c      	ldr	r4, [r7, #4]
 80181aa:	4623      	mov	r3, r4
}
 80181ac:	4618      	mov	r0, r3
 80181ae:	3744      	adds	r7, #68	; 0x44
 80181b0:	46bd      	mov	sp, r7
 80181b2:	bd90      	pop	{r4, r7, pc}

080181b4 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 80181b4:	b480      	push	{r7}
 80181b6:	b083      	sub	sp, #12
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
 80181bc:	6039      	str	r1, [r7, #0]
    return *this;
 80181be:	687b      	ldr	r3, [r7, #4]
}
 80181c0:	4618      	mov	r0, r3
 80181c2:	370c      	adds	r7, #12
 80181c4:	46bd      	mov	sp, r7
 80181c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ca:	4770      	bx	lr

080181cc <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 80181cc:	b590      	push	{r4, r7, lr}
 80181ce:	b097      	sub	sp, #92	; 0x5c
 80181d0:	af02      	add	r7, sp, #8
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	33c0      	adds	r3, #192	; 0xc0
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	6878      	ldr	r0, [r7, #4]
 80181e0:	4798      	blx	r3
 80181e2:	4603      	mov	r3, r0
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d164      	bne.n	80182b2 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	33ec      	adds	r3, #236	; 0xec
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	2100      	movs	r1, #0
 80181f2:	6878      	ldr	r0, [r7, #4]
 80181f4:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	33e8      	adds	r3, #232	; 0xe8
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	6878      	ldr	r0, [r7, #4]
 8018200:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	331c      	adds	r3, #28
 8018206:	6839      	ldr	r1, [r7, #0]
 8018208:	4618      	mov	r0, r3
 801820a:	f004 f86b 	bl	801c2e4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	331c      	adds	r3, #28
 8018212:	4618      	mov	r0, r3
 8018214:	f003 fe1d 	bl	801be52 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018218:	4603      	mov	r3, r0
 801821a:	2b00      	cmp	r3, #0
 801821c:	d02b      	beq.n	8018276 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	33cc      	adds	r3, #204	; 0xcc
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	6878      	ldr	r0, [r7, #4]
 8018228:	4798      	blx	r3
 801822a:	4604      	mov	r4, r0
 801822c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018230:	6879      	ldr	r1, [r7, #4]
 8018232:	4618      	mov	r0, r3
 8018234:	f7ff fd41 	bl	8017cba <_ZNK21MockCheckedActualCall7getNameEv>
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801823c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018240:	f107 000c 	add.w	r0, r7, #12
 8018244:	9300      	str	r3, [sp, #0]
 8018246:	683b      	ldr	r3, [r7, #0]
 8018248:	4621      	mov	r1, r4
 801824a:	f004 fe7f 	bl	801cf4c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 801824e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018252:	4618      	mov	r0, r3
 8018254:	f7f5 f907 	bl	800d466 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	33dc      	adds	r3, #220	; 0xdc
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	f107 020c 	add.w	r2, r7, #12
 8018264:	4611      	mov	r1, r2
 8018266:	6878      	ldr	r0, [r7, #4]
 8018268:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 801826a:	f107 030c 	add.w	r3, r7, #12
 801826e:	4618      	mov	r0, r3
 8018270:	f001 ff00 	bl	801a074 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8018274:	e01e      	b.n	80182b4 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	f103 041c 	add.w	r4, r3, #28
 801827c:	683b      	ldr	r3, [r7, #0]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	335c      	adds	r3, #92	; 0x5c
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018288:	6839      	ldr	r1, [r7, #0]
 801828a:	4610      	mov	r0, r2
 801828c:	4798      	blx	r3
 801828e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018292:	4619      	mov	r1, r3
 8018294:	4620      	mov	r0, r4
 8018296:	f004 f9b8 	bl	801c60a <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 801829a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801829e:	4618      	mov	r0, r3
 80182a0:	f7f5 f8e1 	bl	800d466 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	33d8      	adds	r3, #216	; 0xd8
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	6878      	ldr	r0, [r7, #4]
 80182ae:	4798      	blx	r3
 80182b0:	e000      	b.n	80182b4 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 80182b2:	bf00      	nop
}
 80182b4:	3754      	adds	r7, #84	; 0x54
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd90      	pop	{r4, r7, pc}

080182ba <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 80182ba:	b590      	push	{r4, r7, lr}
 80182bc:	b097      	sub	sp, #92	; 0x5c
 80182be:	af02      	add	r7, sp, #8
 80182c0:	6078      	str	r0, [r7, #4]
 80182c2:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	33c0      	adds	r3, #192	; 0xc0
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	6878      	ldr	r0, [r7, #4]
 80182ce:	4798      	blx	r3
 80182d0:	4603      	mov	r3, r0
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d164      	bne.n	80183a0 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	33ec      	adds	r3, #236	; 0xec
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	2100      	movs	r1, #0
 80182e0:	6878      	ldr	r0, [r7, #4]
 80182e2:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	33e8      	adds	r3, #232	; 0xe8
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	6878      	ldr	r0, [r7, #4]
 80182ee:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	331c      	adds	r3, #28
 80182f4:	6839      	ldr	r1, [r7, #0]
 80182f6:	4618      	mov	r0, r3
 80182f8:	f004 f820 	bl	801c33c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	331c      	adds	r3, #28
 8018300:	4618      	mov	r0, r3
 8018302:	f003 fda6 	bl	801be52 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018306:	4603      	mov	r3, r0
 8018308:	2b00      	cmp	r3, #0
 801830a:	d02b      	beq.n	8018364 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	33cc      	adds	r3, #204	; 0xcc
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	6878      	ldr	r0, [r7, #4]
 8018316:	4798      	blx	r3
 8018318:	4604      	mov	r4, r0
 801831a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801831e:	6879      	ldr	r1, [r7, #4]
 8018320:	4618      	mov	r0, r3
 8018322:	f7ff fcca 	bl	8017cba <_ZNK21MockCheckedActualCall7getNameEv>
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801832a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801832e:	f107 000c 	add.w	r0, r7, #12
 8018332:	9300      	str	r3, [sp, #0]
 8018334:	683b      	ldr	r3, [r7, #0]
 8018336:	4621      	mov	r1, r4
 8018338:	f004 ff6a 	bl	801d210 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 801833c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018340:	4618      	mov	r0, r3
 8018342:	f7f5 f890 	bl	800d466 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	33dc      	adds	r3, #220	; 0xdc
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	f107 020c 	add.w	r2, r7, #12
 8018352:	4611      	mov	r1, r2
 8018354:	6878      	ldr	r0, [r7, #4]
 8018356:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8018358:	f107 030c 	add.w	r3, r7, #12
 801835c:	4618      	mov	r0, r3
 801835e:	f001 feab 	bl	801a0b8 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8018362:	e01e      	b.n	80183a2 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f103 041c 	add.w	r4, r3, #28
 801836a:	683b      	ldr	r3, [r7, #0]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	335c      	adds	r3, #92	; 0x5c
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018376:	6839      	ldr	r1, [r7, #0]
 8018378:	4610      	mov	r0, r2
 801837a:	4798      	blx	r3
 801837c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018380:	4619      	mov	r1, r3
 8018382:	4620      	mov	r0, r4
 8018384:	f004 f95e 	bl	801c644 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8018388:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801838c:	4618      	mov	r0, r3
 801838e:	f7f5 f86a 	bl	800d466 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	33d8      	adds	r3, #216	; 0xd8
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	6878      	ldr	r0, [r7, #4]
 801839c:	4798      	blx	r3
 801839e:	e000      	b.n	80183a2 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 80183a0:	bf00      	nop
}
 80183a2:	3754      	adds	r7, #84	; 0x54
 80183a4:	46bd      	mov	sp, r7
 80183a6:	bd90      	pop	{r4, r7, pc}

080183a8 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 80183a8:	b590      	push	{r4, r7, lr}
 80183aa:	b093      	sub	sp, #76	; 0x4c
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	60f8      	str	r0, [r7, #12]
 80183b0:	60b9      	str	r1, [r7, #8]
 80183b2:	4613      	mov	r3, r2
 80183b4:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 80183b6:	f107 0310 	add.w	r3, r7, #16
 80183ba:	68b9      	ldr	r1, [r7, #8]
 80183bc:	4618      	mov	r0, r3
 80183be:	f005 f9bf 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80183c2:	79fa      	ldrb	r2, [r7, #7]
 80183c4:	f107 0310 	add.w	r3, r7, #16
 80183c8:	4611      	mov	r1, r2
 80183ca:	4618      	mov	r0, r3
 80183cc:	f005 fa0a 	bl	801d7e4 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	33e0      	adds	r3, #224	; 0xe0
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	f107 0210 	add.w	r2, r7, #16
 80183dc:	4611      	mov	r1, r2
 80183de:	68f8      	ldr	r0, [r7, #12]
 80183e0:	4798      	blx	r3
    return *this;
 80183e2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80183e4:	f107 0310 	add.w	r3, r7, #16
 80183e8:	4618      	mov	r0, r3
 80183ea:	f005 f9d3 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 80183ee:	4623      	mov	r3, r4
}
 80183f0:	4618      	mov	r0, r3
 80183f2:	374c      	adds	r7, #76	; 0x4c
 80183f4:	46bd      	mov	sp, r7
 80183f6:	bd90      	pop	{r4, r7, pc}

080183f8 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80183f8:	b590      	push	{r4, r7, lr}
 80183fa:	b093      	sub	sp, #76	; 0x4c
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	60f8      	str	r0, [r7, #12]
 8018400:	60b9      	str	r1, [r7, #8]
 8018402:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018404:	f107 0310 	add.w	r3, r7, #16
 8018408:	68b9      	ldr	r1, [r7, #8]
 801840a:	4618      	mov	r0, r3
 801840c:	f005 f998 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018410:	f107 0310 	add.w	r3, r7, #16
 8018414:	6879      	ldr	r1, [r7, #4]
 8018416:	4618      	mov	r0, r3
 8018418:	f005 fa08 	bl	801d82c <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	33e0      	adds	r3, #224	; 0xe0
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	f107 0210 	add.w	r2, r7, #16
 8018428:	4611      	mov	r1, r2
 801842a:	68f8      	ldr	r0, [r7, #12]
 801842c:	4798      	blx	r3
    return *this;
 801842e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018430:	f107 0310 	add.w	r3, r7, #16
 8018434:	4618      	mov	r0, r3
 8018436:	f005 f9ad 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 801843a:	4623      	mov	r3, r4
}
 801843c:	4618      	mov	r0, r3
 801843e:	374c      	adds	r7, #76	; 0x4c
 8018440:	46bd      	mov	sp, r7
 8018442:	bd90      	pop	{r4, r7, pc}

08018444 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8018444:	b590      	push	{r4, r7, lr}
 8018446:	b093      	sub	sp, #76	; 0x4c
 8018448:	af00      	add	r7, sp, #0
 801844a:	60f8      	str	r0, [r7, #12]
 801844c:	60b9      	str	r1, [r7, #8]
 801844e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018450:	f107 0310 	add.w	r3, r7, #16
 8018454:	68b9      	ldr	r1, [r7, #8]
 8018456:	4618      	mov	r0, r3
 8018458:	f005 f972 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801845c:	f107 0310 	add.w	r3, r7, #16
 8018460:	6879      	ldr	r1, [r7, #4]
 8018462:	4618      	mov	r0, r3
 8018464:	f005 fa04 	bl	801d870 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	33e0      	adds	r3, #224	; 0xe0
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	f107 0210 	add.w	r2, r7, #16
 8018474:	4611      	mov	r1, r2
 8018476:	68f8      	ldr	r0, [r7, #12]
 8018478:	4798      	blx	r3
    return *this;
 801847a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801847c:	f107 0310 	add.w	r3, r7, #16
 8018480:	4618      	mov	r0, r3
 8018482:	f005 f987 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018486:	4623      	mov	r3, r4
}
 8018488:	4618      	mov	r0, r3
 801848a:	374c      	adds	r7, #76	; 0x4c
 801848c:	46bd      	mov	sp, r7
 801848e:	bd90      	pop	{r4, r7, pc}

08018490 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018490:	b590      	push	{r4, r7, lr}
 8018492:	b093      	sub	sp, #76	; 0x4c
 8018494:	af00      	add	r7, sp, #0
 8018496:	60f8      	str	r0, [r7, #12]
 8018498:	60b9      	str	r1, [r7, #8]
 801849a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801849c:	f107 0310 	add.w	r3, r7, #16
 80184a0:	68b9      	ldr	r1, [r7, #8]
 80184a2:	4618      	mov	r0, r3
 80184a4:	f005 f94c 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80184a8:	f107 0310 	add.w	r3, r7, #16
 80184ac:	6879      	ldr	r1, [r7, #4]
 80184ae:	4618      	mov	r0, r3
 80184b0:	f005 fa22 	bl	801d8f8 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	33e0      	adds	r3, #224	; 0xe0
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	f107 0210 	add.w	r2, r7, #16
 80184c0:	4611      	mov	r1, r2
 80184c2:	68f8      	ldr	r0, [r7, #12]
 80184c4:	4798      	blx	r3
    return *this;
 80184c6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80184c8:	f107 0310 	add.w	r3, r7, #16
 80184cc:	4618      	mov	r0, r3
 80184ce:	f005 f961 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 80184d2:	4623      	mov	r3, r4
}
 80184d4:	4618      	mov	r0, r3
 80184d6:	374c      	adds	r7, #76	; 0x4c
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd90      	pop	{r4, r7, pc}

080184dc <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 80184dc:	b590      	push	{r4, r7, lr}
 80184de:	b093      	sub	sp, #76	; 0x4c
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	60f8      	str	r0, [r7, #12]
 80184e4:	60b9      	str	r1, [r7, #8]
 80184e6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80184e8:	f107 0310 	add.w	r3, r7, #16
 80184ec:	68b9      	ldr	r1, [r7, #8]
 80184ee:	4618      	mov	r0, r3
 80184f0:	f005 f926 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80184f4:	f107 0310 	add.w	r3, r7, #16
 80184f8:	6879      	ldr	r1, [r7, #4]
 80184fa:	4618      	mov	r0, r3
 80184fc:	f005 f9da 	bl	801d8b4 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	33e0      	adds	r3, #224	; 0xe0
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	f107 0210 	add.w	r2, r7, #16
 801850c:	4611      	mov	r1, r2
 801850e:	68f8      	ldr	r0, [r7, #12]
 8018510:	4798      	blx	r3
    return *this;
 8018512:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018514:	f107 0310 	add.w	r3, r7, #16
 8018518:	4618      	mov	r0, r3
 801851a:	f005 f93b 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 801851e:	4623      	mov	r3, r4
}
 8018520:	4618      	mov	r0, r3
 8018522:	374c      	adds	r7, #76	; 0x4c
 8018524:	46bd      	mov	sp, r7
 8018526:	bd90      	pop	{r4, r7, pc}

08018528 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018528:	b5b0      	push	{r4, r5, r7, lr}
 801852a:	b086      	sub	sp, #24
 801852c:	af02      	add	r7, sp, #8
 801852e:	60f8      	str	r0, [r7, #12]
 8018530:	60b9      	str	r1, [r7, #8]
 8018532:	4639      	mov	r1, r7
 8018534:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018538:	f7fb ffc0 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801853c:	4604      	mov	r4, r0
 801853e:	6823      	ldr	r3, [r4, #0]
 8018540:	3368      	adds	r3, #104	; 0x68
 8018542:	681d      	ldr	r5, [r3, #0]
 8018544:	f7fb ffca 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018548:	4603      	mov	r3, r0
 801854a:	9300      	str	r3, [sp, #0]
 801854c:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8018550:	4a04      	ldr	r2, [pc, #16]	; (8018564 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8018552:	4905      	ldr	r1, [pc, #20]	; (8018568 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8018554:	4620      	mov	r0, r4
 8018556:	47a8      	blx	r5
    return *this;
 8018558:	68fb      	ldr	r3, [r7, #12]
}
 801855a:	4618      	mov	r0, r3
 801855c:	3710      	adds	r7, #16
 801855e:	46bd      	mov	sp, r7
 8018560:	bdb0      	pop	{r4, r5, r7, pc}
 8018562:	bf00      	nop
 8018564:	08025fb0 	.word	0x08025fb0
 8018568:	08025fcc 	.word	0x08025fcc

0801856c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801856c:	b5b0      	push	{r4, r5, r7, lr}
 801856e:	b086      	sub	sp, #24
 8018570:	af02      	add	r7, sp, #8
 8018572:	60f8      	str	r0, [r7, #12]
 8018574:	60b9      	str	r1, [r7, #8]
 8018576:	4639      	mov	r1, r7
 8018578:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801857c:	f7fb ff9e 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8018580:	4604      	mov	r4, r0
 8018582:	6823      	ldr	r3, [r4, #0]
 8018584:	3368      	adds	r3, #104	; 0x68
 8018586:	681d      	ldr	r5, [r3, #0]
 8018588:	f7fb ffa8 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801858c:	4603      	mov	r3, r0
 801858e:	9300      	str	r3, [sp, #0]
 8018590:	f44f 7388 	mov.w	r3, #272	; 0x110
 8018594:	4a04      	ldr	r2, [pc, #16]	; (80185a8 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8018596:	4905      	ldr	r1, [pc, #20]	; (80185ac <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8018598:	4620      	mov	r0, r4
 801859a:	47a8      	blx	r5
    return *this;
 801859c:	68fb      	ldr	r3, [r7, #12]
}
 801859e:	4618      	mov	r0, r3
 80185a0:	3710      	adds	r7, #16
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bdb0      	pop	{r4, r5, r7, pc}
 80185a6:	bf00      	nop
 80185a8:	08025fb0 	.word	0x08025fb0
 80185ac:	08025ff8 	.word	0x08025ff8

080185b0 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 80185b0:	b590      	push	{r4, r7, lr}
 80185b2:	b093      	sub	sp, #76	; 0x4c
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	60f8      	str	r0, [r7, #12]
 80185b8:	60b9      	str	r1, [r7, #8]
 80185ba:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 80185be:	f107 0310 	add.w	r3, r7, #16
 80185c2:	68b9      	ldr	r1, [r7, #8]
 80185c4:	4618      	mov	r0, r3
 80185c6:	f005 f8bb 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80185ca:	f107 0310 	add.w	r3, r7, #16
 80185ce:	ed97 0b00 	vldr	d0, [r7]
 80185d2:	4618      	mov	r0, r3
 80185d4:	f005 f9f0 	bl	801d9b8 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	33e0      	adds	r3, #224	; 0xe0
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	f107 0210 	add.w	r2, r7, #16
 80185e4:	4611      	mov	r1, r2
 80185e6:	68f8      	ldr	r0, [r7, #12]
 80185e8:	4798      	blx	r3
    return *this;
 80185ea:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80185ec:	f107 0310 	add.w	r3, r7, #16
 80185f0:	4618      	mov	r0, r3
 80185f2:	f005 f8cf 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 80185f6:	4623      	mov	r3, r4
}
 80185f8:	4618      	mov	r0, r3
 80185fa:	374c      	adds	r7, #76	; 0x4c
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bd90      	pop	{r4, r7, pc}

08018600 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8018600:	b590      	push	{r4, r7, lr}
 8018602:	b093      	sub	sp, #76	; 0x4c
 8018604:	af00      	add	r7, sp, #0
 8018606:	60f8      	str	r0, [r7, #12]
 8018608:	60b9      	str	r1, [r7, #8]
 801860a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801860c:	f107 0310 	add.w	r3, r7, #16
 8018610:	68b9      	ldr	r1, [r7, #8]
 8018612:	4618      	mov	r0, r3
 8018614:	f005 f894 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018618:	f107 0310 	add.w	r3, r7, #16
 801861c:	6879      	ldr	r1, [r7, #4]
 801861e:	4618      	mov	r0, r3
 8018620:	f005 fa74 	bl	801db0c <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	33e0      	adds	r3, #224	; 0xe0
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	f107 0210 	add.w	r2, r7, #16
 8018630:	4611      	mov	r1, r2
 8018632:	68f8      	ldr	r0, [r7, #12]
 8018634:	4798      	blx	r3
    return *this;
 8018636:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018638:	f107 0310 	add.w	r3, r7, #16
 801863c:	4618      	mov	r0, r3
 801863e:	f005 f8a9 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018642:	4623      	mov	r3, r4
}
 8018644:	4618      	mov	r0, r3
 8018646:	374c      	adds	r7, #76	; 0x4c
 8018648:	46bd      	mov	sp, r7
 801864a:	bd90      	pop	{r4, r7, pc}

0801864c <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 801864c:	b590      	push	{r4, r7, lr}
 801864e:	b093      	sub	sp, #76	; 0x4c
 8018650:	af00      	add	r7, sp, #0
 8018652:	60f8      	str	r0, [r7, #12]
 8018654:	60b9      	str	r1, [r7, #8]
 8018656:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018658:	f107 0310 	add.w	r3, r7, #16
 801865c:	68b9      	ldr	r1, [r7, #8]
 801865e:	4618      	mov	r0, r3
 8018660:	f005 f86e 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018664:	f107 0310 	add.w	r3, r7, #16
 8018668:	6879      	ldr	r1, [r7, #4]
 801866a:	4618      	mov	r0, r3
 801866c:	f005 f9e8 	bl	801da40 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	33e0      	adds	r3, #224	; 0xe0
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	f107 0210 	add.w	r2, r7, #16
 801867c:	4611      	mov	r1, r2
 801867e:	68f8      	ldr	r0, [r7, #12]
 8018680:	4798      	blx	r3
    return *this;
 8018682:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018684:	f107 0310 	add.w	r3, r7, #16
 8018688:	4618      	mov	r0, r3
 801868a:	f005 f883 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 801868e:	4623      	mov	r3, r4
}
 8018690:	4618      	mov	r0, r3
 8018692:	374c      	adds	r7, #76	; 0x4c
 8018694:	46bd      	mov	sp, r7
 8018696:	bd90      	pop	{r4, r7, pc}

08018698 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8018698:	b590      	push	{r4, r7, lr}
 801869a:	b093      	sub	sp, #76	; 0x4c
 801869c:	af00      	add	r7, sp, #0
 801869e:	60f8      	str	r0, [r7, #12]
 80186a0:	60b9      	str	r1, [r7, #8]
 80186a2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80186a4:	f107 0310 	add.w	r3, r7, #16
 80186a8:	68b9      	ldr	r1, [r7, #8]
 80186aa:	4618      	mov	r0, r3
 80186ac:	f005 f848 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80186b0:	f107 0310 	add.w	r3, r7, #16
 80186b4:	6879      	ldr	r1, [r7, #4]
 80186b6:	4618      	mov	r0, r3
 80186b8:	f005 f9e4 	bl	801da84 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	33e0      	adds	r3, #224	; 0xe0
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	f107 0210 	add.w	r2, r7, #16
 80186c8:	4611      	mov	r1, r2
 80186ca:	68f8      	ldr	r0, [r7, #12]
 80186cc:	4798      	blx	r3
    return *this;
 80186ce:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80186d0:	f107 0310 	add.w	r3, r7, #16
 80186d4:	4618      	mov	r0, r3
 80186d6:	f005 f85d 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 80186da:	4623      	mov	r3, r4
}
 80186dc:	4618      	mov	r0, r3
 80186de:	374c      	adds	r7, #76	; 0x4c
 80186e0:	46bd      	mov	sp, r7
 80186e2:	bd90      	pop	{r4, r7, pc}

080186e4 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80186e4:	b590      	push	{r4, r7, lr}
 80186e6:	b093      	sub	sp, #76	; 0x4c
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	60f8      	str	r0, [r7, #12]
 80186ec:	60b9      	str	r1, [r7, #8]
 80186ee:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80186f0:	f107 0310 	add.w	r3, r7, #16
 80186f4:	68b9      	ldr	r1, [r7, #8]
 80186f6:	4618      	mov	r0, r3
 80186f8:	f005 f822 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80186fc:	f107 0310 	add.w	r3, r7, #16
 8018700:	6879      	ldr	r1, [r7, #4]
 8018702:	4618      	mov	r0, r3
 8018704:	f005 f9e0 	bl	801dac8 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	33e0      	adds	r3, #224	; 0xe0
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	f107 0210 	add.w	r2, r7, #16
 8018714:	4611      	mov	r1, r2
 8018716:	68f8      	ldr	r0, [r7, #12]
 8018718:	4798      	blx	r3
    return *this;
 801871a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801871c:	f107 0310 	add.w	r3, r7, #16
 8018720:	4618      	mov	r0, r3
 8018722:	f005 f837 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018726:	4623      	mov	r3, r4
}
 8018728:	4618      	mov	r0, r3
 801872a:	374c      	adds	r7, #76	; 0x4c
 801872c:	46bd      	mov	sp, r7
 801872e:	bd90      	pop	{r4, r7, pc}

08018730 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8018730:	b590      	push	{r4, r7, lr}
 8018732:	b093      	sub	sp, #76	; 0x4c
 8018734:	af00      	add	r7, sp, #0
 8018736:	60f8      	str	r0, [r7, #12]
 8018738:	60b9      	str	r1, [r7, #8]
 801873a:	607a      	str	r2, [r7, #4]
 801873c:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801873e:	f107 0310 	add.w	r3, r7, #16
 8018742:	68b9      	ldr	r1, [r7, #8]
 8018744:	4618      	mov	r0, r3
 8018746:	f004 fffb 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 801874a:	f107 0310 	add.w	r3, r7, #16
 801874e:	683a      	ldr	r2, [r7, #0]
 8018750:	6879      	ldr	r1, [r7, #4]
 8018752:	4618      	mov	r0, r3
 8018754:	f005 f9fc 	bl	801db50 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	33e0      	adds	r3, #224	; 0xe0
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	f107 0210 	add.w	r2, r7, #16
 8018764:	4611      	mov	r1, r2
 8018766:	68f8      	ldr	r0, [r7, #12]
 8018768:	4798      	blx	r3
    return *this;
 801876a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801876c:	f107 0310 	add.w	r3, r7, #16
 8018770:	4618      	mov	r0, r3
 8018772:	f005 f80f 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018776:	4623      	mov	r3, r4
}
 8018778:	4618      	mov	r0, r3
 801877a:	374c      	adds	r7, #76	; 0x4c
 801877c:	46bd      	mov	sp, r7
 801877e:	bd90      	pop	{r4, r7, pc}

08018780 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8018780:	b590      	push	{r4, r7, lr}
 8018782:	b0a1      	sub	sp, #132	; 0x84
 8018784:	af00      	add	r7, sp, #0
 8018786:	60f8      	str	r0, [r7, #12]
 8018788:	60b9      	str	r1, [r7, #8]
 801878a:	607a      	str	r2, [r7, #4]
 801878c:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801878e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018792:	6879      	ldr	r1, [r7, #4]
 8018794:	4618      	mov	r0, r3
 8018796:	f004 ffd3 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 801879a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801879e:	683a      	ldr	r2, [r7, #0]
 80187a0:	68b9      	ldr	r1, [r7, #8]
 80187a2:	4618      	mov	r0, r3
 80187a4:	f005 f9fa 	bl	801db9c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 80187a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80187ac:	4618      	mov	r0, r3
 80187ae:	f005 fdc7 	bl	801e340 <_ZNK14MockNamedValue13getComparatorEv>
 80187b2:	4603      	mov	r3, r0
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	bf0c      	ite	eq
 80187b8:	2301      	moveq	r3, #1
 80187ba:	2300      	movne	r3, #0
 80187bc:	b2db      	uxtb	r3, r3
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d01c      	beq.n	80187fc <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	33cc      	adds	r3, #204	; 0xcc
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	68f8      	ldr	r0, [r7, #12]
 80187cc:	4798      	blx	r3
 80187ce:	4601      	mov	r1, r0
 80187d0:	f107 0314 	add.w	r3, r7, #20
 80187d4:	68ba      	ldr	r2, [r7, #8]
 80187d6:	4618      	mov	r0, r3
 80187d8:	f004 fed6 	bl	801d588 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	33dc      	adds	r3, #220	; 0xdc
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	f107 0214 	add.w	r2, r7, #20
 80187e8:	4611      	mov	r1, r2
 80187ea:	68f8      	ldr	r0, [r7, #12]
 80187ec:	4798      	blx	r3
        return *this;
 80187ee:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80187f0:	f107 0314 	add.w	r3, r7, #20
 80187f4:	4618      	mov	r0, r3
 80187f6:	f001 fc81 	bl	801a0fc <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80187fa:	e009      	b.n	8018810 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	33e0      	adds	r3, #224	; 0xe0
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018808:	4611      	mov	r1, r2
 801880a:	68f8      	ldr	r0, [r7, #12]
 801880c:	4798      	blx	r3
    return *this;
 801880e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018814:	4618      	mov	r0, r3
 8018816:	f004 ffbd 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 801881a:	4623      	mov	r3, r4
}
 801881c:	4618      	mov	r0, r3
 801881e:	3784      	adds	r7, #132	; 0x84
 8018820:	46bd      	mov	sp, r7
 8018822:	bd90      	pop	{r4, r7, pc}

08018824 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8018824:	b590      	push	{r4, r7, lr}
 8018826:	b095      	sub	sp, #84	; 0x54
 8018828:	af00      	add	r7, sp, #0
 801882a:	60f8      	str	r0, [r7, #12]
 801882c:	60b9      	str	r1, [r7, #8]
 801882e:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	33f0      	adds	r3, #240	; 0xf0
 8018836:	681c      	ldr	r4, [r3, #0]
 8018838:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801883c:	4917      	ldr	r1, [pc, #92]	; (801889c <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 801883e:	4618      	mov	r0, r3
 8018840:	f7f4 fa59 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8018844:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	68b9      	ldr	r1, [r7, #8]
 801884c:	68f8      	ldr	r0, [r7, #12]
 801884e:	47a0      	blx	r4
 8018850:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018854:	4618      	mov	r0, r3
 8018856:	f7f4 fe06 	bl	800d466 <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 801885a:	f107 0310 	add.w	r3, r7, #16
 801885e:	68b9      	ldr	r1, [r7, #8]
 8018860:	4618      	mov	r0, r3
 8018862:	f004 ff6d 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8018866:	f107 0310 	add.w	r3, r7, #16
 801886a:	6879      	ldr	r1, [r7, #4]
 801886c:	4618      	mov	r0, r3
 801886e:	f005 f8e7 	bl	801da40 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	33e4      	adds	r3, #228	; 0xe4
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	f107 0210 	add.w	r2, r7, #16
 801887e:	4611      	mov	r1, r2
 8018880:	68f8      	ldr	r0, [r7, #12]
 8018882:	4798      	blx	r3

    return *this;
 8018884:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8018886:	f107 0310 	add.w	r3, r7, #16
 801888a:	4618      	mov	r0, r3
 801888c:	f004 ff82 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018890:	4623      	mov	r3, r4
}
 8018892:	4618      	mov	r0, r3
 8018894:	3754      	adds	r7, #84	; 0x54
 8018896:	46bd      	mov	sp, r7
 8018898:	bd90      	pop	{r4, r7, pc}
 801889a:	bf00      	nop
 801889c:	08025fa8 	.word	0x08025fa8

080188a0 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 80188a0:	b590      	push	{r4, r7, lr}
 80188a2:	b093      	sub	sp, #76	; 0x4c
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	60f8      	str	r0, [r7, #12]
 80188a8:	60b9      	str	r1, [r7, #8]
 80188aa:	607a      	str	r2, [r7, #4]
 80188ac:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	33f0      	adds	r3, #240	; 0xf0
 80188b4:	681c      	ldr	r4, [r3, #0]
 80188b6:	683b      	ldr	r3, [r7, #0]
 80188b8:	68ba      	ldr	r2, [r7, #8]
 80188ba:	6879      	ldr	r1, [r7, #4]
 80188bc:	68f8      	ldr	r0, [r7, #12]
 80188be:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 80188c0:	f107 0310 	add.w	r3, r7, #16
 80188c4:	6879      	ldr	r1, [r7, #4]
 80188c6:	4618      	mov	r0, r3
 80188c8:	f004 ff3a 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 80188cc:	f107 0310 	add.w	r3, r7, #16
 80188d0:	683a      	ldr	r2, [r7, #0]
 80188d2:	68b9      	ldr	r1, [r7, #8]
 80188d4:	4618      	mov	r0, r3
 80188d6:	f005 f961 	bl	801db9c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	33e4      	adds	r3, #228	; 0xe4
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	f107 0210 	add.w	r2, r7, #16
 80188e6:	4611      	mov	r1, r2
 80188e8:	68f8      	ldr	r0, [r7, #12]
 80188ea:	4798      	blx	r3

    return *this;
 80188ec:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80188ee:	f107 0310 	add.w	r3, r7, #16
 80188f2:	4618      	mov	r0, r3
 80188f4:	f004 ff4e 	bl	801d794 <_ZN14MockNamedValueD1Ev>
    return *this;
 80188f8:	4623      	mov	r3, r4
}
 80188fa:	4618      	mov	r0, r3
 80188fc:	374c      	adds	r7, #76	; 0x4c
 80188fe:	46bd      	mov	sp, r7
 8018900:	bd90      	pop	{r4, r7, pc}

08018902 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8018902:	b480      	push	{r7}
 8018904:	b083      	sub	sp, #12
 8018906:	af00      	add	r7, sp, #0
 8018908:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	7d1b      	ldrb	r3, [r3, #20]
 801890e:	2b02      	cmp	r3, #2
 8018910:	bf0c      	ite	eq
 8018912:	2301      	moveq	r3, #1
 8018914:	2300      	movne	r3, #0
 8018916:	b2db      	uxtb	r3, r3
}
 8018918:	4618      	mov	r0, r3
 801891a:	370c      	adds	r7, #12
 801891c:	46bd      	mov	sp, r7
 801891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018922:	4770      	bx	lr

08018924 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8018924:	b480      	push	{r7}
 8018926:	b083      	sub	sp, #12
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	7d1b      	ldrb	r3, [r3, #20]
 8018930:	2b01      	cmp	r3, #1
 8018932:	bf0c      	ite	eq
 8018934:	2301      	moveq	r3, #1
 8018936:	2300      	movne	r3, #0
 8018938:	b2db      	uxtb	r3, r3
}
 801893a:	4618      	mov	r0, r3
 801893c:	370c      	adds	r7, #12
 801893e:	46bd      	mov	sp, r7
 8018940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018944:	4770      	bx	lr
	...

08018948 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8018948:	b5b0      	push	{r4, r5, r7, lr}
 801894a:	b096      	sub	sp, #88	; 0x58
 801894c:	af02      	add	r7, sp, #8
 801894e:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	7d5b      	ldrb	r3, [r3, #21]
 8018954:	2b00      	cmp	r3, #0
 8018956:	f040 80bc 	bne.w	8018ad2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	2201      	movs	r2, #1
 801895e:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	7d1b      	ldrb	r3, [r3, #20]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d014      	beq.n	8018992 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	7d1b      	ldrb	r3, [r3, #20]
 801896c:	2b02      	cmp	r3, #2
 801896e:	d10a      	bne.n	8018986 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	6998      	ldr	r0, [r3, #24]
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	699b      	ldr	r3, [r3, #24]
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	33d8      	adds	r3, #216	; 0xd8
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	687a      	ldr	r2, [r7, #4]
 8018980:	68d2      	ldr	r2, [r2, #12]
 8018982:	4611      	mov	r1, r2
 8018984:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	331c      	adds	r3, #28
 801898a:	4618      	mov	r0, r3
 801898c:	f003 fe07 	bl	801c59e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018990:	e0a0      	b.n	8018ad4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	331c      	adds	r3, #28
 8018996:	4618      	mov	r0, r3
 8018998:	f003 fac3 	bl	801bf22 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 801899c:	4603      	mov	r3, r0
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d00f      	beq.n	80189c2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 80189a2:	f7fb fd8b 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80189a6:	4604      	mov	r4, r0
 80189a8:	6823      	ldr	r3, [r4, #0]
 80189aa:	3368      	adds	r3, #104	; 0x68
 80189ac:	681d      	ldr	r5, [r3, #0]
 80189ae:	f7fb fd95 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80189b2:	4603      	mov	r3, r0
 80189b4:	9300      	str	r3, [sp, #0]
 80189b6:	f240 1385 	movw	r3, #389	; 0x185
 80189ba:	4a48      	ldr	r2, [pc, #288]	; (8018adc <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 80189bc:	4948      	ldr	r1, [pc, #288]	; (8018ae0 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 80189be:	4620      	mov	r0, r4
 80189c0:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	331c      	adds	r3, #28
 80189c6:	4618      	mov	r0, r3
 80189c8:	f003 fd5f 	bl	801c48a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 80189cc:	4602      	mov	r2, r0
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	699b      	ldr	r3, [r3, #24]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d01f      	beq.n	8018a1a <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	699a      	ldr	r2, [r3, #24]
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	699b      	ldr	r3, [r3, #24]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	33e4      	adds	r3, #228	; 0xe4
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	4610      	mov	r0, r2
 80189ea:	4798      	blx	r3
        callHasSucceeded();
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	33d0      	adds	r3, #208	; 0xd0
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	6878      	ldr	r0, [r7, #4]
 80189f6:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	6998      	ldr	r0, [r3, #24]
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	699b      	ldr	r3, [r3, #24]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	33d8      	adds	r3, #216	; 0xd8
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	687a      	ldr	r2, [r7, #4]
 8018a08:	68d2      	ldr	r2, [r2, #12]
 8018a0a:	4611      	mov	r1, r2
 8018a0c:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	331c      	adds	r3, #28
 8018a12:	4618      	mov	r0, r3
 8018a14:	f003 fdc3 	bl	801c59e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018a18:	e05c      	b.n	8018ad4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	331c      	adds	r3, #28
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f003 ffc4 	bl	801c9ac <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8018a24:	4603      	mov	r3, r0
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d029      	beq.n	8018a7e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	33cc      	adds	r3, #204	; 0xcc
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	6878      	ldr	r0, [r7, #4]
 8018a34:	4798      	blx	r3
 8018a36:	4604      	mov	r4, r0
 8018a38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a3c:	6879      	ldr	r1, [r7, #4]
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f7ff f93b 	bl	8017cba <_ZNK21MockCheckedActualCall7getNameEv>
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a48:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018a4c:	f107 000c 	add.w	r0, r7, #12
 8018a50:	4621      	mov	r1, r4
 8018a52:	f004 fd21 	bl	801d498 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8018a56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	f7f4 fd03 	bl	800d466 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	33dc      	adds	r3, #220	; 0xdc
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	f107 020c 	add.w	r2, r7, #12
 8018a6c:	4611      	mov	r1, r2
 8018a6e:	6878      	ldr	r0, [r7, #4]
 8018a70:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018a72:	f107 030c 	add.w	r3, r7, #12
 8018a76:	4618      	mov	r0, r3
 8018a78:	f001 fb62 	bl	801a140 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8018a7c:	e02a      	b.n	8018ad4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	33cc      	adds	r3, #204	; 0xcc
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	6878      	ldr	r0, [r7, #4]
 8018a88:	4798      	blx	r3
 8018a8a:	4604      	mov	r4, r0
 8018a8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018a90:	6879      	ldr	r1, [r7, #4]
 8018a92:	4618      	mov	r0, r3
 8018a94:	f7ff f911 	bl	8017cba <_ZNK21MockCheckedActualCall7getNameEv>
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018aa0:	f107 000c 	add.w	r0, r7, #12
 8018aa4:	4621      	mov	r1, r4
 8018aa6:	f004 fe05 	bl	801d6b4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8018aaa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018aae:	4618      	mov	r0, r3
 8018ab0:	f7f4 fcd9 	bl	800d466 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	33dc      	adds	r3, #220	; 0xdc
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	f107 020c 	add.w	r2, r7, #12
 8018ac0:	4611      	mov	r1, r2
 8018ac2:	6878      	ldr	r0, [r7, #4]
 8018ac4:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018ac6:	f107 030c 	add.w	r3, r7, #12
 8018aca:	4618      	mov	r0, r3
 8018acc:	f001 fb5a 	bl	801a184 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8018ad0:	e000      	b.n	8018ad4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8018ad2:	bf00      	nop
    }
}
 8018ad4:	3750      	adds	r7, #80	; 0x50
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8018ada:	bf00      	nop
 8018adc:	08025fb0 	.word	0x08025fb0
 8018ae0:	08026018 	.word	0x08026018

08018ae4 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8018ae4:	b480      	push	{r7}
 8018ae6:	b083      	sub	sp, #12
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
 8018aec:	460b      	mov	r3, r1
 8018aee:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	78fa      	ldrb	r2, [r7, #3]
 8018af4:	751a      	strb	r2, [r3, #20]
}
 8018af6:	bf00      	nop
 8018af8:	370c      	adds	r7, #12
 8018afa:	46bd      	mov	sp, r7
 8018afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b00:	4770      	bx	lr
	...

08018b04 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b084      	sub	sp, #16
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
 8018b0c:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8018b0e:	683b      	ldr	r3, [r7, #0]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	33c4      	adds	r3, #196	; 0xc4
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	6838      	ldr	r0, [r7, #0]
 8018b18:	4798      	blx	r3
    if (matchingExpectation_)
 8018b1a:	683b      	ldr	r3, [r7, #0]
 8018b1c:	699b      	ldr	r3, [r3, #24]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d00a      	beq.n	8018b38 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	6999      	ldr	r1, [r3, #24]
 8018b26:	683b      	ldr	r3, [r7, #0]
 8018b28:	699b      	ldr	r3, [r3, #24]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	3394      	adds	r3, #148	; 0x94
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	687a      	ldr	r2, [r7, #4]
 8018b32:	4610      	mov	r0, r2
 8018b34:	4798      	blx	r3
 8018b36:	e010      	b.n	8018b5a <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8018b38:	f107 0308 	add.w	r3, r7, #8
 8018b3c:	4909      	ldr	r1, [pc, #36]	; (8018b64 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f7f4 f8d9 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8018b44:	f107 0308 	add.w	r3, r7, #8
 8018b48:	4619      	mov	r1, r3
 8018b4a:	6878      	ldr	r0, [r7, #4]
 8018b4c:	f004 fdf8 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018b50:	f107 0308 	add.w	r3, r7, #8
 8018b54:	4618      	mov	r0, r3
 8018b56:	f7f4 fc86 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8018b5a:	6878      	ldr	r0, [r7, #4]
 8018b5c:	3710      	adds	r7, #16
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	bd80      	pop	{r7, pc}
 8018b62:	bf00      	nop
 8018b64:	08026094 	.word	0x08026094

08018b68 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b082      	sub	sp, #8
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
 8018b70:	460b      	mov	r3, r1
 8018b72:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	3350      	adds	r3, #80	; 0x50
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	6878      	ldr	r0, [r7, #4]
 8018b7e:	4798      	blx	r3
 8018b80:	4603      	mov	r3, r0
 8018b82:	f083 0301 	eor.w	r3, r3, #1
 8018b86:	b2db      	uxtb	r3, r3
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d001      	beq.n	8018b90 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8018b8c:	78fb      	ldrb	r3, [r7, #3]
 8018b8e:	e007      	b.n	8018ba0 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	335c      	adds	r3, #92	; 0x5c
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	6878      	ldr	r0, [r7, #4]
 8018b9a:	4798      	blx	r3
 8018b9c:	4603      	mov	r3, r0
 8018b9e:	bf00      	nop
}
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	3708      	adds	r7, #8
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	bd80      	pop	{r7, pc}

08018ba8 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8018ba8:	b590      	push	{r4, r7, lr}
 8018baa:	b091      	sub	sp, #68	; 0x44
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	3354      	adds	r3, #84	; 0x54
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	f107 0208 	add.w	r2, r7, #8
 8018bbc:	6879      	ldr	r1, [r7, #4]
 8018bbe:	4610      	mov	r0, r2
 8018bc0:	4798      	blx	r3
 8018bc2:	f107 0308 	add.w	r3, r7, #8
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f005 f898 	bl	801dcfc <_ZNK14MockNamedValue12getBoolValueEv>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	461c      	mov	r4, r3
 8018bd0:	bf00      	nop
 8018bd2:	f107 0308 	add.w	r3, r7, #8
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	f004 fddc 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 8018bdc:	4623      	mov	r3, r4
}
 8018bde:	4618      	mov	r0, r3
 8018be0:	3744      	adds	r7, #68	; 0x44
 8018be2:	46bd      	mov	sp, r7
 8018be4:	bd90      	pop	{r4, r7, pc}

08018be6 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8018be6:	b580      	push	{r7, lr}
 8018be8:	b082      	sub	sp, #8
 8018bea:	af00      	add	r7, sp, #0
 8018bec:	6078      	str	r0, [r7, #4]
 8018bee:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	3350      	adds	r3, #80	; 0x50
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	6878      	ldr	r0, [r7, #4]
 8018bfa:	4798      	blx	r3
 8018bfc:	4603      	mov	r3, r0
 8018bfe:	f083 0301 	eor.w	r3, r3, #1
 8018c02:	b2db      	uxtb	r3, r3
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d001      	beq.n	8018c0c <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8018c08:	683b      	ldr	r3, [r7, #0]
 8018c0a:	e007      	b.n	8018c1c <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	3364      	adds	r3, #100	; 0x64
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	6878      	ldr	r0, [r7, #4]
 8018c16:	4798      	blx	r3
 8018c18:	4603      	mov	r3, r0
 8018c1a:	bf00      	nop
}
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	3708      	adds	r7, #8
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd80      	pop	{r7, pc}

08018c24 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8018c24:	b590      	push	{r4, r7, lr}
 8018c26:	b091      	sub	sp, #68	; 0x44
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	3354      	adds	r3, #84	; 0x54
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	f107 0208 	add.w	r2, r7, #8
 8018c38:	6879      	ldr	r1, [r7, #4]
 8018c3a:	4610      	mov	r0, r2
 8018c3c:	4798      	blx	r3
 8018c3e:	f107 0308 	add.w	r3, r7, #8
 8018c42:	4618      	mov	r0, r3
 8018c44:	f005 f8d2 	bl	801ddec <_ZNK14MockNamedValue11getIntValueEv>
 8018c48:	4604      	mov	r4, r0
 8018c4a:	bf00      	nop
 8018c4c:	f107 0308 	add.w	r3, r7, #8
 8018c50:	4618      	mov	r0, r3
 8018c52:	f004 fd9f 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 8018c56:	4623      	mov	r3, r4
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3744      	adds	r7, #68	; 0x44
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd90      	pop	{r4, r7, pc}

08018c60 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8018c60:	b590      	push	{r4, r7, lr}
 8018c62:	b091      	sub	sp, #68	; 0x44
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	3354      	adds	r3, #84	; 0x54
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	f107 0208 	add.w	r2, r7, #8
 8018c74:	6879      	ldr	r1, [r7, #4]
 8018c76:	4610      	mov	r0, r2
 8018c78:	4798      	blx	r3
 8018c7a:	f107 0308 	add.w	r3, r7, #8
 8018c7e:	4618      	mov	r0, r3
 8018c80:	f005 f93e 	bl	801df00 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8018c84:	4604      	mov	r4, r0
 8018c86:	bf00      	nop
 8018c88:	f107 0308 	add.w	r3, r7, #8
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	f004 fd81 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 8018c92:	4623      	mov	r3, r4
}
 8018c94:	4618      	mov	r0, r3
 8018c96:	3744      	adds	r7, #68	; 0x44
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	bd90      	pop	{r4, r7, pc}

08018c9c <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b082      	sub	sp, #8
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
 8018ca4:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	3350      	adds	r3, #80	; 0x50
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	6878      	ldr	r0, [r7, #4]
 8018cb0:	4798      	blx	r3
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	f083 0301 	eor.w	r3, r3, #1
 8018cb8:	b2db      	uxtb	r3, r3
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d001      	beq.n	8018cc2 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8018cbe:	683b      	ldr	r3, [r7, #0]
 8018cc0:	e007      	b.n	8018cd2 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	3368      	adds	r3, #104	; 0x68
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	6878      	ldr	r0, [r7, #4]
 8018ccc:	4798      	blx	r3
 8018cce:	4603      	mov	r3, r0
 8018cd0:	bf00      	nop
}
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	3708      	adds	r7, #8
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}

08018cda <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8018cda:	b590      	push	{r4, r7, lr}
 8018cdc:	b091      	sub	sp, #68	; 0x44
 8018cde:	af00      	add	r7, sp, #0
 8018ce0:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	3354      	adds	r3, #84	; 0x54
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	f107 0208 	add.w	r2, r7, #8
 8018cee:	6879      	ldr	r1, [r7, #4]
 8018cf0:	4610      	mov	r0, r2
 8018cf2:	4798      	blx	r3
 8018cf4:	f107 0308 	add.w	r3, r7, #8
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f005 f89f 	bl	801de3c <_ZNK14MockNamedValue15getLongIntValueEv>
 8018cfe:	4604      	mov	r4, r0
 8018d00:	bf00      	nop
 8018d02:	f107 0308 	add.w	r3, r7, #8
 8018d06:	4618      	mov	r0, r3
 8018d08:	f004 fd44 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 8018d0c:	4623      	mov	r3, r4
}
 8018d0e:	4618      	mov	r0, r3
 8018d10:	3744      	adds	r7, #68	; 0x44
 8018d12:	46bd      	mov	sp, r7
 8018d14:	bd90      	pop	{r4, r7, pc}

08018d16 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8018d16:	b580      	push	{r7, lr}
 8018d18:	b082      	sub	sp, #8
 8018d1a:	af00      	add	r7, sp, #0
 8018d1c:	6078      	str	r0, [r7, #4]
 8018d1e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	3350      	adds	r3, #80	; 0x50
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	6878      	ldr	r0, [r7, #4]
 8018d2a:	4798      	blx	r3
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	f083 0301 	eor.w	r3, r3, #1
 8018d32:	b2db      	uxtb	r3, r3
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d001      	beq.n	8018d3c <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8018d38:	683b      	ldr	r3, [r7, #0]
 8018d3a:	e007      	b.n	8018d4c <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	3370      	adds	r3, #112	; 0x70
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	6878      	ldr	r0, [r7, #4]
 8018d46:	4798      	blx	r3
 8018d48:	4603      	mov	r3, r0
 8018d4a:	bf00      	nop
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	3708      	adds	r7, #8
 8018d50:	46bd      	mov	sp, r7
 8018d52:	bd80      	pop	{r7, pc}

08018d54 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8018d54:	b5b0      	push	{r4, r5, r7, lr}
 8018d56:	b084      	sub	sp, #16
 8018d58:	af02      	add	r7, sp, #8
 8018d5a:	6078      	str	r0, [r7, #4]
 8018d5c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8018d5e:	f7fb fbad 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8018d62:	4604      	mov	r4, r0
 8018d64:	6823      	ldr	r3, [r4, #0]
 8018d66:	3368      	adds	r3, #104	; 0x68
 8018d68:	681d      	ldr	r5, [r3, #0]
 8018d6a:	f7fb fbb7 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018d6e:	4603      	mov	r3, r0
 8018d70:	9300      	str	r3, [sp, #0]
 8018d72:	f240 13fb 	movw	r3, #507	; 0x1fb
 8018d76:	4a06      	ldr	r2, [pc, #24]	; (8018d90 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8018d78:	4906      	ldr	r1, [pc, #24]	; (8018d94 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8018d7a:	4620      	mov	r0, r4
 8018d7c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8018d7e:	2100      	movs	r1, #0
 8018d80:	6878      	ldr	r0, [r7, #4]
 8018d82:	f7f1 fffb 	bl	800ad7c <_ZN18cpputest_ulonglongC1Ei>
}
 8018d86:	6878      	ldr	r0, [r7, #4]
 8018d88:	3708      	adds	r7, #8
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	08025fb0 	.word	0x08025fb0
 8018d94:	08025fcc 	.word	0x08025fcc

08018d98 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8018d98:	b5b0      	push	{r4, r5, r7, lr}
 8018d9a:	b086      	sub	sp, #24
 8018d9c:	af02      	add	r7, sp, #8
 8018d9e:	60f8      	str	r0, [r7, #12]
 8018da0:	60b9      	str	r1, [r7, #8]
 8018da2:	4639      	mov	r1, r7
 8018da4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018da8:	f7fb fb88 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8018dac:	4604      	mov	r4, r0
 8018dae:	6823      	ldr	r3, [r4, #0]
 8018db0:	3368      	adds	r3, #104	; 0x68
 8018db2:	681d      	ldr	r5, [r3, #0]
 8018db4:	f7fb fb92 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018db8:	4603      	mov	r3, r0
 8018dba:	9300      	str	r3, [sp, #0]
 8018dbc:	f240 2301 	movw	r3, #513	; 0x201
 8018dc0:	4a06      	ldr	r2, [pc, #24]	; (8018ddc <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8018dc2:	4907      	ldr	r1, [pc, #28]	; (8018de0 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8018dc4:	4620      	mov	r0, r4
 8018dc6:	47a8      	blx	r5
    return default_value;
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	461a      	mov	r2, r3
 8018dcc:	463b      	mov	r3, r7
 8018dce:	cb03      	ldmia	r3!, {r0, r1}
 8018dd0:	6010      	str	r0, [r2, #0]
 8018dd2:	6051      	str	r1, [r2, #4]
}
 8018dd4:	68f8      	ldr	r0, [r7, #12]
 8018dd6:	3710      	adds	r7, #16
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	bdb0      	pop	{r4, r5, r7, pc}
 8018ddc:	08025fb0 	.word	0x08025fb0
 8018de0:	08025fcc 	.word	0x08025fcc

08018de4 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8018de4:	b5b0      	push	{r4, r5, r7, lr}
 8018de6:	b084      	sub	sp, #16
 8018de8:	af02      	add	r7, sp, #8
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8018dee:	f7fb fb65 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8018df2:	4604      	mov	r4, r0
 8018df4:	6823      	ldr	r3, [r4, #0]
 8018df6:	3368      	adds	r3, #104	; 0x68
 8018df8:	681d      	ldr	r5, [r3, #0]
 8018dfa:	f7fb fb6f 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018dfe:	4603      	mov	r3, r0
 8018e00:	9300      	str	r3, [sp, #0]
 8018e02:	f240 2307 	movw	r3, #519	; 0x207
 8018e06:	4a06      	ldr	r2, [pc, #24]	; (8018e20 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8018e08:	4906      	ldr	r1, [pc, #24]	; (8018e24 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8018e0a:	4620      	mov	r0, r4
 8018e0c:	47a8      	blx	r5
    return cpputest_longlong(0);
 8018e0e:	2100      	movs	r1, #0
 8018e10:	6878      	ldr	r0, [r7, #4]
 8018e12:	f7f1 ffa7 	bl	800ad64 <_ZN17cpputest_longlongC1Ei>
}
 8018e16:	6878      	ldr	r0, [r7, #4]
 8018e18:	3708      	adds	r7, #8
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8018e1e:	bf00      	nop
 8018e20:	08025fb0 	.word	0x08025fb0
 8018e24:	08025ff8 	.word	0x08025ff8

08018e28 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8018e28:	b5b0      	push	{r4, r5, r7, lr}
 8018e2a:	b086      	sub	sp, #24
 8018e2c:	af02      	add	r7, sp, #8
 8018e2e:	60f8      	str	r0, [r7, #12]
 8018e30:	60b9      	str	r1, [r7, #8]
 8018e32:	4639      	mov	r1, r7
 8018e34:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018e38:	f7fb fb40 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8018e3c:	4604      	mov	r4, r0
 8018e3e:	6823      	ldr	r3, [r4, #0]
 8018e40:	3368      	adds	r3, #104	; 0x68
 8018e42:	681d      	ldr	r5, [r3, #0]
 8018e44:	f7fb fb4a 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018e48:	4603      	mov	r3, r0
 8018e4a:	9300      	str	r3, [sp, #0]
 8018e4c:	f240 230d 	movw	r3, #525	; 0x20d
 8018e50:	4a06      	ldr	r2, [pc, #24]	; (8018e6c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8018e52:	4907      	ldr	r1, [pc, #28]	; (8018e70 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8018e54:	4620      	mov	r0, r4
 8018e56:	47a8      	blx	r5
    return default_value;
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	461a      	mov	r2, r3
 8018e5c:	463b      	mov	r3, r7
 8018e5e:	cb03      	ldmia	r3!, {r0, r1}
 8018e60:	6010      	str	r0, [r2, #0]
 8018e62:	6051      	str	r1, [r2, #4]
}
 8018e64:	68f8      	ldr	r0, [r7, #12]
 8018e66:	3710      	adds	r7, #16
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8018e6c:	08025fb0 	.word	0x08025fb0
 8018e70:	08025ff8 	.word	0x08025ff8

08018e74 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	ed2d 8b02 	vpush	{d8}
 8018e7a:	b090      	sub	sp, #64	; 0x40
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	3354      	adds	r3, #84	; 0x54
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	f107 0208 	add.w	r2, r7, #8
 8018e8c:	6879      	ldr	r1, [r7, #4]
 8018e8e:	4610      	mov	r0, r2
 8018e90:	4798      	blx	r3
 8018e92:	f107 0308 	add.w	r3, r7, #8
 8018e96:	4618      	mov	r0, r3
 8018e98:	f005 f90a 	bl	801e0b0 <_ZNK14MockNamedValue14getDoubleValueEv>
 8018e9c:	eeb0 8a40 	vmov.f32	s16, s0
 8018ea0:	eef0 8a60 	vmov.f32	s17, s1
 8018ea4:	bf00      	nop
 8018ea6:	f107 0308 	add.w	r3, r7, #8
 8018eaa:	4618      	mov	r0, r3
 8018eac:	f004 fc72 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 8018eb0:	eeb0 7a48 	vmov.f32	s14, s16
 8018eb4:	eef0 7a68 	vmov.f32	s15, s17
}
 8018eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8018ebc:	eef0 0a67 	vmov.f32	s1, s15
 8018ec0:	3740      	adds	r7, #64	; 0x40
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	ecbd 8b02 	vpop	{d8}
 8018ec8:	bd80      	pop	{r7, pc}

08018eca <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8018eca:	b580      	push	{r7, lr}
 8018ecc:	b084      	sub	sp, #16
 8018ece:	af00      	add	r7, sp, #0
 8018ed0:	60f8      	str	r0, [r7, #12]
 8018ed2:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	3350      	adds	r3, #80	; 0x50
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	68f8      	ldr	r0, [r7, #12]
 8018ee0:	4798      	blx	r3
 8018ee2:	4603      	mov	r3, r0
 8018ee4:	f083 0301 	eor.w	r3, r3, #1
 8018ee8:	b2db      	uxtb	r3, r3
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d002      	beq.n	8018ef4 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8018eee:	ed97 7b00 	vldr	d7, [r7]
 8018ef2:	e00a      	b.n	8018f0a <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	3398      	adds	r3, #152	; 0x98
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	68f8      	ldr	r0, [r7, #12]
 8018efe:	4798      	blx	r3
 8018f00:	eeb0 7a40 	vmov.f32	s14, s0
 8018f04:	eef0 7a60 	vmov.f32	s15, s1
 8018f08:	bf00      	nop
}
 8018f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8018f0e:	eef0 0a67 	vmov.f32	s1, s15
 8018f12:	3710      	adds	r7, #16
 8018f14:	46bd      	mov	sp, r7
 8018f16:	bd80      	pop	{r7, pc}

08018f18 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 8018f18:	b590      	push	{r4, r7, lr}
 8018f1a:	b091      	sub	sp, #68	; 0x44
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	3354      	adds	r3, #84	; 0x54
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	f107 0208 	add.w	r2, r7, #8
 8018f2c:	6879      	ldr	r1, [r7, #4]
 8018f2e:	4610      	mov	r0, r2
 8018f30:	4798      	blx	r3
 8018f32:	f107 0308 	add.w	r3, r7, #8
 8018f36:	4618      	mov	r0, r3
 8018f38:	f004 ff08 	bl	801dd4c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8018f3c:	4604      	mov	r4, r0
 8018f3e:	bf00      	nop
 8018f40:	f107 0308 	add.w	r3, r7, #8
 8018f44:	4618      	mov	r0, r3
 8018f46:	f004 fc25 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 8018f4a:	4623      	mov	r3, r4
}
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	3744      	adds	r7, #68	; 0x44
 8018f50:	46bd      	mov	sp, r7
 8018f52:	bd90      	pop	{r4, r7, pc}

08018f54 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b082      	sub	sp, #8
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	6078      	str	r0, [r7, #4]
 8018f5c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	3350      	adds	r3, #80	; 0x50
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	6878      	ldr	r0, [r7, #4]
 8018f68:	4798      	blx	r3
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	f083 0301 	eor.w	r3, r3, #1
 8018f70:	b2db      	uxtb	r3, r3
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d001      	beq.n	8018f7a <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 8018f76:	683b      	ldr	r3, [r7, #0]
 8018f78:	e007      	b.n	8018f8a <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	3388      	adds	r3, #136	; 0x88
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	6878      	ldr	r0, [r7, #4]
 8018f84:	4798      	blx	r3
 8018f86:	4603      	mov	r3, r0
 8018f88:	bf00      	nop
}
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	3708      	adds	r7, #8
 8018f8e:	46bd      	mov	sp, r7
 8018f90:	bd80      	pop	{r7, pc}

08018f92 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8018f92:	b580      	push	{r7, lr}
 8018f94:	b082      	sub	sp, #8
 8018f96:	af00      	add	r7, sp, #0
 8018f98:	6078      	str	r0, [r7, #4]
 8018f9a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	3350      	adds	r3, #80	; 0x50
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	6878      	ldr	r0, [r7, #4]
 8018fa6:	4798      	blx	r3
 8018fa8:	4603      	mov	r3, r0
 8018faa:	f083 0301 	eor.w	r3, r3, #1
 8018fae:	b2db      	uxtb	r3, r3
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d001      	beq.n	8018fb8 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	e007      	b.n	8018fc8 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	33a0      	adds	r3, #160	; 0xa0
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	6878      	ldr	r0, [r7, #4]
 8018fc2:	4798      	blx	r3
 8018fc4:	4603      	mov	r3, r0
 8018fc6:	bf00      	nop
}
 8018fc8:	4618      	mov	r0, r3
 8018fca:	3708      	adds	r7, #8
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}

08018fd0 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8018fd0:	b590      	push	{r4, r7, lr}
 8018fd2:	b091      	sub	sp, #68	; 0x44
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	3354      	adds	r3, #84	; 0x54
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	f107 0208 	add.w	r2, r7, #8
 8018fe4:	6879      	ldr	r1, [r7, #4]
 8018fe6:	4610      	mov	r0, r2
 8018fe8:	4798      	blx	r3
 8018fea:	f107 0308 	add.w	r3, r7, #8
 8018fee:	4618      	mov	r0, r3
 8018ff0:	f005 f8e2 	bl	801e1b8 <_ZNK14MockNamedValue15getPointerValueEv>
 8018ff4:	4604      	mov	r4, r0
 8018ff6:	bf00      	nop
 8018ff8:	f107 0308 	add.w	r3, r7, #8
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	f004 fbc9 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 8019002:	4623      	mov	r3, r4
}
 8019004:	4618      	mov	r0, r3
 8019006:	3744      	adds	r7, #68	; 0x44
 8019008:	46bd      	mov	sp, r7
 801900a:	bd90      	pop	{r4, r7, pc}

0801900c <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 801900c:	b590      	push	{r4, r7, lr}
 801900e:	b091      	sub	sp, #68	; 0x44
 8019010:	af00      	add	r7, sp, #0
 8019012:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	3354      	adds	r3, #84	; 0x54
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	f107 0208 	add.w	r2, r7, #8
 8019020:	6879      	ldr	r1, [r7, #4]
 8019022:	4610      	mov	r0, r2
 8019024:	4798      	blx	r3
 8019026:	f107 0308 	add.w	r3, r7, #8
 801902a:	4618      	mov	r0, r3
 801902c:	f005 f8ec 	bl	801e208 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8019030:	4604      	mov	r4, r0
 8019032:	bf00      	nop
 8019034:	f107 0308 	add.w	r3, r7, #8
 8019038:	4618      	mov	r0, r3
 801903a:	f004 fbab 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 801903e:	4623      	mov	r3, r4
}
 8019040:	4618      	mov	r0, r3
 8019042:	3744      	adds	r7, #68	; 0x44
 8019044:	46bd      	mov	sp, r7
 8019046:	bd90      	pop	{r4, r7, pc}

08019048 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b082      	sub	sp, #8
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
 8019050:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	3350      	adds	r3, #80	; 0x50
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	6878      	ldr	r0, [r7, #4]
 801905c:	4798      	blx	r3
 801905e:	4603      	mov	r3, r0
 8019060:	f083 0301 	eor.w	r3, r3, #1
 8019064:	b2db      	uxtb	r3, r3
 8019066:	2b00      	cmp	r3, #0
 8019068:	d001      	beq.n	801906e <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801906a:	683b      	ldr	r3, [r7, #0]
 801906c:	e007      	b.n	801907e <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	33a8      	adds	r3, #168	; 0xa8
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	6878      	ldr	r0, [r7, #4]
 8019078:	4798      	blx	r3
 801907a:	4603      	mov	r3, r0
 801907c:	bf00      	nop
}
 801907e:	4618      	mov	r0, r3
 8019080:	3708      	adds	r7, #8
 8019082:	46bd      	mov	sp, r7
 8019084:	bd80      	pop	{r7, pc}

08019086 <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 8019086:	b590      	push	{r4, r7, lr}
 8019088:	b091      	sub	sp, #68	; 0x44
 801908a:	af00      	add	r7, sp, #0
 801908c:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	3354      	adds	r3, #84	; 0x54
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	f107 0208 	add.w	r2, r7, #8
 801909a:	6879      	ldr	r1, [r7, #4]
 801909c:	4610      	mov	r0, r2
 801909e:	4798      	blx	r3
 80190a0:	f107 0308 	add.w	r3, r7, #8
 80190a4:	4618      	mov	r0, r3
 80190a6:	f005 f8d7 	bl	801e258 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 80190aa:	4604      	mov	r4, r0
 80190ac:	bf00      	nop
 80190ae:	f107 0308 	add.w	r3, r7, #8
 80190b2:	4618      	mov	r0, r3
 80190b4:	f004 fb6e 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 80190b8:	4623      	mov	r3, r4
}
 80190ba:	4618      	mov	r0, r3
 80190bc:	3744      	adds	r7, #68	; 0x44
 80190be:	46bd      	mov	sp, r7
 80190c0:	bd90      	pop	{r4, r7, pc}

080190c2 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 80190c2:	b580      	push	{r7, lr}
 80190c4:	b082      	sub	sp, #8
 80190c6:	af00      	add	r7, sp, #0
 80190c8:	6078      	str	r0, [r7, #4]
 80190ca:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	3350      	adds	r3, #80	; 0x50
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	6878      	ldr	r0, [r7, #4]
 80190d6:	4798      	blx	r3
 80190d8:	4603      	mov	r3, r0
 80190da:	f083 0301 	eor.w	r3, r3, #1
 80190de:	b2db      	uxtb	r3, r3
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d001      	beq.n	80190e8 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 80190e4:	683b      	ldr	r3, [r7, #0]
 80190e6:	e007      	b.n	80190f8 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	33b0      	adds	r3, #176	; 0xb0
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	6878      	ldr	r0, [r7, #4]
 80190f2:	4798      	blx	r3
 80190f4:	4603      	mov	r3, r0
 80190f6:	bf00      	nop
}
 80190f8:	4618      	mov	r0, r3
 80190fa:	3708      	adds	r7, #8
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bd80      	pop	{r7, pc}

08019100 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b082      	sub	sp, #8
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
 8019108:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	3350      	adds	r3, #80	; 0x50
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	6878      	ldr	r0, [r7, #4]
 8019114:	4798      	blx	r3
 8019116:	4603      	mov	r3, r0
 8019118:	f083 0301 	eor.w	r3, r3, #1
 801911c:	b2db      	uxtb	r3, r3
 801911e:	2b00      	cmp	r3, #0
 8019120:	d001      	beq.n	8019126 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	e007      	b.n	8019136 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	3394      	adds	r3, #148	; 0x94
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	6878      	ldr	r0, [r7, #4]
 8019130:	4798      	blx	r3
 8019132:	4603      	mov	r3, r0
 8019134:	bf00      	nop
}
 8019136:	4618      	mov	r0, r3
 8019138:	3708      	adds	r7, #8
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}

0801913e <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 801913e:	b590      	push	{r4, r7, lr}
 8019140:	b091      	sub	sp, #68	; 0x44
 8019142:	af00      	add	r7, sp, #0
 8019144:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	3354      	adds	r3, #84	; 0x54
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	f107 0208 	add.w	r2, r7, #8
 8019152:	6879      	ldr	r1, [r7, #4]
 8019154:	4610      	mov	r0, r2
 8019156:	4798      	blx	r3
 8019158:	f107 0308 	add.w	r3, r7, #8
 801915c:	4618      	mov	r0, r3
 801915e:	f005 f803 	bl	801e168 <_ZNK14MockNamedValue14getStringValueEv>
 8019162:	4604      	mov	r4, r0
 8019164:	bf00      	nop
 8019166:	f107 0308 	add.w	r3, r7, #8
 801916a:	4618      	mov	r0, r3
 801916c:	f004 fb12 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 8019170:	4623      	mov	r3, r4
}
 8019172:	4618      	mov	r0, r3
 8019174:	3744      	adds	r7, #68	; 0x44
 8019176:	46bd      	mov	sp, r7
 8019178:	bd90      	pop	{r4, r7, pc}

0801917a <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 801917a:	b590      	push	{r4, r7, lr}
 801917c:	b093      	sub	sp, #76	; 0x4c
 801917e:	af00      	add	r7, sp, #0
 8019180:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	3354      	adds	r3, #84	; 0x54
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	f107 0210 	add.w	r2, r7, #16
 801918e:	6879      	ldr	r1, [r7, #4]
 8019190:	4610      	mov	r0, r2
 8019192:	4798      	blx	r3
 8019194:	f107 0308 	add.w	r3, r7, #8
 8019198:	f107 0210 	add.w	r2, r7, #16
 801919c:	4611      	mov	r1, r2
 801919e:	4618      	mov	r0, r3
 80191a0:	f004 fd8e 	bl	801dcc0 <_ZNK14MockNamedValue7getNameEv>
 80191a4:	f107 0308 	add.w	r3, r7, #8
 80191a8:	4618      	mov	r0, r3
 80191aa:	f7f4 f94b 	bl	800d444 <_ZNK12SimpleString7isEmptyEv>
 80191ae:	4603      	mov	r3, r0
 80191b0:	f083 0301 	eor.w	r3, r3, #1
 80191b4:	b2dc      	uxtb	r4, r3
 80191b6:	f107 0308 	add.w	r3, r7, #8
 80191ba:	4618      	mov	r0, r3
 80191bc:	f7f4 f953 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80191c0:	f107 0310 	add.w	r3, r7, #16
 80191c4:	4618      	mov	r0, r3
 80191c6:	f004 fae5 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 80191ca:	4623      	mov	r3, r4
}
 80191cc:	4618      	mov	r0, r3
 80191ce:	374c      	adds	r7, #76	; 0x4c
 80191d0:	46bd      	mov	sp, r7
 80191d2:	bd90      	pop	{r4, r7, pc}

080191d4 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 80191d4:	b590      	push	{r4, r7, lr}
 80191d6:	b095      	sub	sp, #84	; 0x54
 80191d8:	af02      	add	r7, sp, #8
 80191da:	6078      	str	r0, [r7, #4]
 80191dc:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	33c0      	adds	r3, #192	; 0xc0
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	6878      	ldr	r0, [r7, #4]
 80191e8:	4798      	blx	r3
 80191ea:	4603      	mov	r3, r0
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d001      	beq.n	80191f4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 80191f0:	687c      	ldr	r4, [r7, #4]
 80191f2:	e053      	b.n	801929c <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	331c      	adds	r3, #28
 80191f8:	6839      	ldr	r1, [r7, #0]
 80191fa:	4618      	mov	r0, r3
 80191fc:	f003 f8ca 	bl	801c394 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	699b      	ldr	r3, [r3, #24]
 8019204:	2b00      	cmp	r3, #0
 8019206:	d109      	bne.n	801921c <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	331c      	adds	r3, #28
 801920c:	4618      	mov	r0, r3
 801920e:	f002 fe20 	bl	801be52 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8019212:	4603      	mov	r3, r0
 8019214:	2b00      	cmp	r3, #0
 8019216:	d001      	beq.n	801921c <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8019218:	2301      	movs	r3, #1
 801921a:	e000      	b.n	801921e <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 801921c:	2300      	movs	r3, #0
 801921e:	2b00      	cmp	r3, #0
 8019220:	d02c      	beq.n	801927c <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	33cc      	adds	r3, #204	; 0xcc
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	6878      	ldr	r0, [r7, #4]
 801922c:	4798      	blx	r3
 801922e:	4604      	mov	r4, r0
 8019230:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019234:	6879      	ldr	r1, [r7, #4]
 8019236:	4618      	mov	r0, r3
 8019238:	f7fe fd3f 	bl	8017cba <_ZNK21MockCheckedActualCall7getNameEv>
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019240:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019244:	f107 000c 	add.w	r0, r7, #12
 8019248:	9300      	str	r3, [sp, #0]
 801924a:	683b      	ldr	r3, [r7, #0]
 801924c:	4621      	mov	r1, r4
 801924e:	f004 f9fb 	bl	801d648 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 8019252:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019256:	4618      	mov	r0, r3
 8019258:	f7f4 f905 	bl	800d466 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	33dc      	adds	r3, #220	; 0xdc
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	f107 020c 	add.w	r2, r7, #12
 8019268:	4611      	mov	r1, r2
 801926a:	6878      	ldr	r0, [r7, #4]
 801926c:	4798      	blx	r3
        return *this;
 801926e:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8019270:	f107 030c 	add.w	r3, r7, #12
 8019274:	4618      	mov	r0, r3
 8019276:	f000 ffa7 	bl	801a1c8 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801927a:	e00f      	b.n	801929c <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	331c      	adds	r3, #28
 8019280:	4618      	mov	r0, r3
 8019282:	f003 f9a7 	bl	801c5d4 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	699b      	ldr	r3, [r3, #24]
 801928a:	2b00      	cmp	r3, #0
 801928c:	d105      	bne.n	801929a <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	33d8      	adds	r3, #216	; 0xd8
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	6878      	ldr	r0, [r7, #4]
 8019298:	4798      	blx	r3
    }

    return *this;
 801929a:	687c      	ldr	r4, [r7, #4]
 801929c:	4623      	mov	r3, r4
}
 801929e:	4618      	mov	r0, r3
 80192a0:	374c      	adds	r7, #76	; 0x4c
 80192a2:	46bd      	mov	sp, r7
 80192a4:	bd90      	pop	{r4, r7, pc}
	...

080192a8 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 80192a8:	b590      	push	{r4, r7, lr}
 80192aa:	b087      	sub	sp, #28
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	60f8      	str	r0, [r7, #12]
 80192b0:	60b9      	str	r1, [r7, #8]
 80192b2:	607a      	str	r2, [r7, #4]
 80192b4:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 80192b6:	f240 2282 	movw	r2, #642	; 0x282
 80192ba:	4913      	ldr	r1, [pc, #76]	; (8019308 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 80192bc:	2018      	movs	r0, #24
 80192be:	f7f1 f957 	bl	800a570 <_ZnwjPKci>
 80192c2:	4604      	mov	r4, r0
 80192c4:	683b      	ldr	r3, [r7, #0]
 80192c6:	687a      	ldr	r2, [r7, #4]
 80192c8:	68b9      	ldr	r1, [r7, #8]
 80192ca:	4620      	mov	r0, r4
 80192cc:	f7fe fa48 	bl	8017760 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 80192d0:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d103      	bne.n	80192e2 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	693a      	ldr	r2, [r7, #16]
 80192de:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 80192e0:	e00d      	b.n	80192fe <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192e6:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 80192e8:	697b      	ldr	r3, [r7, #20]
 80192ea:	695b      	ldr	r3, [r3, #20]
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d003      	beq.n	80192f8 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 80192f0:	697b      	ldr	r3, [r7, #20]
 80192f2:	695b      	ldr	r3, [r3, #20]
 80192f4:	617b      	str	r3, [r7, #20]
 80192f6:	e7f7      	b.n	80192e8 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 80192f8:	697b      	ldr	r3, [r7, #20]
 80192fa:	693a      	ldr	r2, [r7, #16]
 80192fc:	615a      	str	r2, [r3, #20]
}
 80192fe:	bf00      	nop
 8019300:	371c      	adds	r7, #28
 8019302:	46bd      	mov	sp, r7
 8019304:	bd90      	pop	{r4, r7, pc}
 8019306:	bf00      	nop
 8019308:	08025fb0 	.word	0x08025fb0

0801930c <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 801930c:	b580      	push	{r7, lr}
 801930e:	b082      	sub	sp, #8
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	3308      	adds	r3, #8
 8019318:	4618      	mov	r0, r3
 801931a:	f7f4 f8a4 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	4618      	mov	r0, r3
 8019322:	f7f4 f8a0 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	4618      	mov	r0, r3
 801932a:	3708      	adds	r7, #8
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}

08019330 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8019330:	b590      	push	{r4, r7, lr}
 8019332:	b085      	sub	sp, #20
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801933c:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 801933e:	2300      	movs	r3, #0
 8019340:	60bb      	str	r3, [r7, #8]

    while (current) {
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	2b00      	cmp	r3, #0
 8019346:	d012      	beq.n	801936e <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	695b      	ldr	r3, [r3, #20]
 8019350:	60fb      	str	r3, [r7, #12]
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	68fa      	ldr	r2, [r7, #12]
 8019356:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8019358:	68bc      	ldr	r4, [r7, #8]
 801935a:	2c00      	cmp	r4, #0
 801935c:	d0f1      	beq.n	8019342 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 801935e:	4620      	mov	r0, r4
 8019360:	f7ff ffd4 	bl	801930c <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8019364:	2118      	movs	r1, #24
 8019366:	4620      	mov	r0, r4
 8019368:	f7f1 f916 	bl	800a598 <_ZdlPvj>
    while (current) {
 801936c:	e7e9      	b.n	8019342 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 801936e:	bf00      	nop
 8019370:	3714      	adds	r7, #20
 8019372:	46bd      	mov	sp, r7
 8019374:	bd90      	pop	{r4, r7, pc}
	...

08019378 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8019378:	b580      	push	{r7, lr}
 801937a:	b082      	sub	sp, #8
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	4618      	mov	r0, r3
 8019384:	f7fe fc6a 	bl	8017c5c <_ZN14MockActualCallC1Ev>
 8019388:	4a06      	ldr	r2, [pc, #24]	; (80193a4 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	601a      	str	r2, [r3, #0]
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	3304      	adds	r3, #4
 8019392:	4905      	ldr	r1, [pc, #20]	; (80193a8 <_ZN19MockActualCallTraceC1Ev+0x30>)
 8019394:	4618      	mov	r0, r3
 8019396:	f7f3 fcae 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
{
}
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	4618      	mov	r0, r3
 801939e:	3708      	adds	r7, #8
 80193a0:	46bd      	mov	sp, r7
 80193a2:	bd80      	pop	{r7, pc}
 80193a4:	08028ddc 	.word	0x08028ddc
 80193a8:	08025f98 	.word	0x08025f98

080193ac <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b082      	sub	sp, #8
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	6078      	str	r0, [r7, #4]
 80193b4:	4a08      	ldr	r2, [pc, #32]	; (80193d8 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	601a      	str	r2, [r3, #0]
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	3304      	adds	r3, #4
 80193be:	4618      	mov	r0, r3
 80193c0:	f7f4 f851 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	4618      	mov	r0, r3
 80193c8:	f7fe fc58 	bl	8017c7c <_ZN14MockActualCallD1Ev>
{
}
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	4618      	mov	r0, r3
 80193d0:	3708      	adds	r7, #8
 80193d2:	46bd      	mov	sp, r7
 80193d4:	bd80      	pop	{r7, pc}
 80193d6:	bf00      	nop
 80193d8:	08028ddc 	.word	0x08028ddc

080193dc <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 80193dc:	b580      	push	{r7, lr}
 80193de:	b082      	sub	sp, #8
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
}
 80193e4:	6878      	ldr	r0, [r7, #4]
 80193e6:	f7ff ffe1 	bl	80193ac <_ZN19MockActualCallTraceD1Ev>
 80193ea:	210c      	movs	r1, #12
 80193ec:	6878      	ldr	r0, [r7, #4]
 80193ee:	f7f1 f8d3 	bl	800a598 <_ZdlPvj>
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	4618      	mov	r0, r3
 80193f6:	3708      	adds	r7, #8
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}

080193fc <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b082      	sub	sp, #8
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
 8019404:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	3304      	adds	r3, #4
 801940a:	4907      	ldr	r1, [pc, #28]	; (8019428 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 801940c:	4618      	mov	r0, r3
 801940e:	f7f4 f8b9 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	3304      	adds	r3, #4
 8019416:	6839      	ldr	r1, [r7, #0]
 8019418:	4618      	mov	r0, r3
 801941a:	f7f4 f8a1 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    return *this;
 801941e:	687b      	ldr	r3, [r7, #4]
}
 8019420:	4618      	mov	r0, r3
 8019422:	3708      	adds	r7, #8
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}
 8019428:	080260a4 	.word	0x080260a4

0801942c <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 801942c:	b590      	push	{r4, r7, lr}
 801942e:	b085      	sub	sp, #20
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
 8019434:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	3304      	adds	r3, #4
 801943a:	490e      	ldr	r1, [pc, #56]	; (8019474 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 801943c:	4618      	mov	r0, r3
 801943e:	f7f4 f8a1 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	1d1c      	adds	r4, r3, #4
 8019446:	f107 0308 	add.w	r3, r7, #8
 801944a:	6839      	ldr	r1, [r7, #0]
 801944c:	4618      	mov	r0, r3
 801944e:	f7f4 fd39 	bl	800dec4 <_Z10StringFromj>
 8019452:	f107 0308 	add.w	r3, r7, #8
 8019456:	4619      	mov	r1, r3
 8019458:	4620      	mov	r0, r4
 801945a:	f7f4 f881 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801945e:	f107 0308 	add.w	r3, r7, #8
 8019462:	4618      	mov	r0, r3
 8019464:	f7f3 ffff 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 8019468:	687b      	ldr	r3, [r7, #4]
}
 801946a:	4618      	mov	r0, r3
 801946c:	3714      	adds	r7, #20
 801946e:	46bd      	mov	sp, r7
 8019470:	bd90      	pop	{r4, r7, pc}
 8019472:	bf00      	nop
 8019474:	080260b4 	.word	0x080260b4

08019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8019478:	b580      	push	{r7, lr}
 801947a:	b082      	sub	sp, #8
 801947c:	af00      	add	r7, sp, #0
 801947e:	6078      	str	r0, [r7, #4]
 8019480:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	3304      	adds	r3, #4
 8019486:	490a      	ldr	r1, [pc, #40]	; (80194b0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8019488:	4618      	mov	r0, r3
 801948a:	f7f4 f87b 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	3304      	adds	r3, #4
 8019492:	6839      	ldr	r1, [r7, #0]
 8019494:	4618      	mov	r0, r3
 8019496:	f7f4 f863 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	3304      	adds	r3, #4
 801949e:	4905      	ldr	r1, [pc, #20]	; (80194b4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 80194a0:	4618      	mov	r0, r3
 80194a2:	f7f4 f86f 	bl	800d584 <_ZN12SimpleStringpLEPKc>
}
 80194a6:	bf00      	nop
 80194a8:	3708      	adds	r7, #8
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd80      	pop	{r7, pc}
 80194ae:	bf00      	nop
 80194b0:	080260c4 	.word	0x080260c4
 80194b4:	080260c8 	.word	0x080260c8

080194b8 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 80194b8:	b590      	push	{r4, r7, lr}
 80194ba:	b087      	sub	sp, #28
 80194bc:	af00      	add	r7, sp, #0
 80194be:	60f8      	str	r0, [r7, #12]
 80194c0:	60b9      	str	r1, [r7, #8]
 80194c2:	4613      	mov	r3, r2
 80194c4:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 80194c6:	68b9      	ldr	r1, [r7, #8]
 80194c8:	68f8      	ldr	r0, [r7, #12]
 80194ca:	f7ff ffd5 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	1d1c      	adds	r4, r3, #4
 80194d2:	f107 0310 	add.w	r3, r7, #16
 80194d6:	79fa      	ldrb	r2, [r7, #7]
 80194d8:	4611      	mov	r1, r2
 80194da:	4618      	mov	r0, r3
 80194dc:	f7f4 fa34 	bl	800d948 <_Z10StringFromb>
 80194e0:	f107 0310 	add.w	r3, r7, #16
 80194e4:	4619      	mov	r1, r3
 80194e6:	4620      	mov	r0, r4
 80194e8:	f7f4 f83a 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 80194ec:	f107 0310 	add.w	r3, r7, #16
 80194f0:	4618      	mov	r0, r3
 80194f2:	f7f3 ffb8 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 80194f6:	68fb      	ldr	r3, [r7, #12]
}
 80194f8:	4618      	mov	r0, r3
 80194fa:	371c      	adds	r7, #28
 80194fc:	46bd      	mov	sp, r7
 80194fe:	bd90      	pop	{r4, r7, pc}

08019500 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8019500:	b590      	push	{r4, r7, lr}
 8019502:	b08f      	sub	sp, #60	; 0x3c
 8019504:	af00      	add	r7, sp, #0
 8019506:	60f8      	str	r0, [r7, #12]
 8019508:	60b9      	str	r1, [r7, #8]
 801950a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801950c:	68b9      	ldr	r1, [r7, #8]
 801950e:	68f8      	ldr	r0, [r7, #12]
 8019510:	f7ff ffb2 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	1d1c      	adds	r4, r3, #4
 8019518:	f107 0320 	add.w	r3, r7, #32
 801951c:	6879      	ldr	r1, [r7, #4]
 801951e:	4618      	mov	r0, r3
 8019520:	f7f4 fcd0 	bl	800dec4 <_Z10StringFromj>
 8019524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019528:	491f      	ldr	r1, [pc, #124]	; (80195a8 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 801952a:	4618      	mov	r0, r3
 801952c:	f7f3 fbe3 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8019530:	f107 0318 	add.w	r3, r7, #24
 8019534:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019538:	f107 0120 	add.w	r1, r7, #32
 801953c:	4618      	mov	r0, r3
 801953e:	f7f3 fff4 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 8019542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019546:	6879      	ldr	r1, [r7, #4]
 8019548:	4618      	mov	r0, r3
 801954a:	f7f4 fb5f 	bl	800dc0c <_Z30BracketsFormattedHexStringFromj>
 801954e:	f107 0310 	add.w	r3, r7, #16
 8019552:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019556:	f107 0118 	add.w	r1, r7, #24
 801955a:	4618      	mov	r0, r3
 801955c:	f7f3 ffe5 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 8019560:	f107 0310 	add.w	r3, r7, #16
 8019564:	4619      	mov	r1, r3
 8019566:	4620      	mov	r0, r4
 8019568:	f7f3 fffa 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801956c:	f107 0310 	add.w	r3, r7, #16
 8019570:	4618      	mov	r0, r3
 8019572:	f7f3 ff78 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8019576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801957a:	4618      	mov	r0, r3
 801957c:	f7f3 ff73 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8019580:	f107 0318 	add.w	r3, r7, #24
 8019584:	4618      	mov	r0, r3
 8019586:	f7f3 ff6e 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801958a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801958e:	4618      	mov	r0, r3
 8019590:	f7f3 ff69 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8019594:	f107 0320 	add.w	r3, r7, #32
 8019598:	4618      	mov	r0, r3
 801959a:	f7f3 ff64 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 801959e:	68fb      	ldr	r3, [r7, #12]
}
 80195a0:	4618      	mov	r0, r3
 80195a2:	373c      	adds	r7, #60	; 0x3c
 80195a4:	46bd      	mov	sp, r7
 80195a6:	bd90      	pop	{r4, r7, pc}
 80195a8:	080260c4 	.word	0x080260c4

080195ac <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 80195ac:	b590      	push	{r4, r7, lr}
 80195ae:	b08f      	sub	sp, #60	; 0x3c
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	60f8      	str	r0, [r7, #12]
 80195b4:	60b9      	str	r1, [r7, #8]
 80195b6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80195b8:	68b9      	ldr	r1, [r7, #8]
 80195ba:	68f8      	ldr	r0, [r7, #12]
 80195bc:	f7ff ff5c 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	1d1c      	adds	r4, r3, #4
 80195c4:	f107 0320 	add.w	r3, r7, #32
 80195c8:	6879      	ldr	r1, [r7, #4]
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7f4 fa12 	bl	800d9f4 <_Z10StringFromi>
 80195d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80195d4:	491f      	ldr	r1, [pc, #124]	; (8019654 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 80195d6:	4618      	mov	r0, r3
 80195d8:	f7f3 fb8d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 80195dc:	f107 0318 	add.w	r3, r7, #24
 80195e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80195e4:	f107 0120 	add.w	r1, r7, #32
 80195e8:	4618      	mov	r0, r3
 80195ea:	f7f3 ff9e 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 80195ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80195f2:	6879      	ldr	r1, [r7, #4]
 80195f4:	4618      	mov	r0, r3
 80195f6:	f7f4 faed 	bl	800dbd4 <_Z30BracketsFormattedHexStringFromi>
 80195fa:	f107 0310 	add.w	r3, r7, #16
 80195fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019602:	f107 0118 	add.w	r1, r7, #24
 8019606:	4618      	mov	r0, r3
 8019608:	f7f3 ff8f 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 801960c:	f107 0310 	add.w	r3, r7, #16
 8019610:	4619      	mov	r1, r3
 8019612:	4620      	mov	r0, r4
 8019614:	f7f3 ffa4 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8019618:	f107 0310 	add.w	r3, r7, #16
 801961c:	4618      	mov	r0, r3
 801961e:	f7f3 ff22 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8019622:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019626:	4618      	mov	r0, r3
 8019628:	f7f3 ff1d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801962c:	f107 0318 	add.w	r3, r7, #24
 8019630:	4618      	mov	r0, r3
 8019632:	f7f3 ff18 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8019636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801963a:	4618      	mov	r0, r3
 801963c:	f7f3 ff13 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8019640:	f107 0320 	add.w	r3, r7, #32
 8019644:	4618      	mov	r0, r3
 8019646:	f7f3 ff0e 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 801964a:	68fb      	ldr	r3, [r7, #12]
}
 801964c:	4618      	mov	r0, r3
 801964e:	373c      	adds	r7, #60	; 0x3c
 8019650:	46bd      	mov	sp, r7
 8019652:	bd90      	pop	{r4, r7, pc}
 8019654:	080260c4 	.word	0x080260c4

08019658 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8019658:	b590      	push	{r4, r7, lr}
 801965a:	b08f      	sub	sp, #60	; 0x3c
 801965c:	af00      	add	r7, sp, #0
 801965e:	60f8      	str	r0, [r7, #12]
 8019660:	60b9      	str	r1, [r7, #8]
 8019662:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019664:	68b9      	ldr	r1, [r7, #8]
 8019666:	68f8      	ldr	r0, [r7, #12]
 8019668:	f7ff ff06 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	1d1c      	adds	r4, r3, #4
 8019670:	f107 0320 	add.w	r3, r7, #32
 8019674:	6879      	ldr	r1, [r7, #4]
 8019676:	4618      	mov	r0, r3
 8019678:	f7f4 fc36 	bl	800dee8 <_Z10StringFromm>
 801967c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019680:	491f      	ldr	r1, [pc, #124]	; (8019700 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8019682:	4618      	mov	r0, r3
 8019684:	f7f3 fb37 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8019688:	f107 0318 	add.w	r3, r7, #24
 801968c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019690:	f107 0120 	add.w	r1, r7, #32
 8019694:	4618      	mov	r0, r3
 8019696:	f7f3 ff48 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 801969a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801969e:	6879      	ldr	r1, [r7, #4]
 80196a0:	4618      	mov	r0, r3
 80196a2:	f7f4 faeb 	bl	800dc7c <_Z30BracketsFormattedHexStringFromm>
 80196a6:	f107 0310 	add.w	r3, r7, #16
 80196aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80196ae:	f107 0118 	add.w	r1, r7, #24
 80196b2:	4618      	mov	r0, r3
 80196b4:	f7f3 ff39 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 80196b8:	f107 0310 	add.w	r3, r7, #16
 80196bc:	4619      	mov	r1, r3
 80196be:	4620      	mov	r0, r4
 80196c0:	f7f3 ff4e 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 80196c4:	f107 0310 	add.w	r3, r7, #16
 80196c8:	4618      	mov	r0, r3
 80196ca:	f7f3 fecc 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80196ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80196d2:	4618      	mov	r0, r3
 80196d4:	f7f3 fec7 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80196d8:	f107 0318 	add.w	r3, r7, #24
 80196dc:	4618      	mov	r0, r3
 80196de:	f7f3 fec2 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80196e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80196e6:	4618      	mov	r0, r3
 80196e8:	f7f3 febd 	bl	800d466 <_ZN12SimpleStringD1Ev>
 80196ec:	f107 0320 	add.w	r3, r7, #32
 80196f0:	4618      	mov	r0, r3
 80196f2:	f7f3 feb8 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 80196f6:	68fb      	ldr	r3, [r7, #12]
}
 80196f8:	4618      	mov	r0, r3
 80196fa:	373c      	adds	r7, #60	; 0x3c
 80196fc:	46bd      	mov	sp, r7
 80196fe:	bd90      	pop	{r4, r7, pc}
 8019700:	080260c4 	.word	0x080260c4

08019704 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8019704:	b590      	push	{r4, r7, lr}
 8019706:	b08f      	sub	sp, #60	; 0x3c
 8019708:	af00      	add	r7, sp, #0
 801970a:	60f8      	str	r0, [r7, #12]
 801970c:	60b9      	str	r1, [r7, #8]
 801970e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019710:	68b9      	ldr	r1, [r7, #8]
 8019712:	68f8      	ldr	r0, [r7, #12]
 8019714:	f7ff feb0 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	1d1c      	adds	r4, r3, #4
 801971c:	f107 0320 	add.w	r3, r7, #32
 8019720:	6879      	ldr	r1, [r7, #4]
 8019722:	4618      	mov	r0, r3
 8019724:	f7f4 f978 	bl	800da18 <_Z10StringFroml>
 8019728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801972c:	491f      	ldr	r1, [pc, #124]	; (80197ac <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 801972e:	4618      	mov	r0, r3
 8019730:	f7f3 fae1 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8019734:	f107 0318 	add.w	r3, r7, #24
 8019738:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801973c:	f107 0120 	add.w	r1, r7, #32
 8019740:	4618      	mov	r0, r3
 8019742:	f7f3 fef2 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 8019746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801974a:	6879      	ldr	r1, [r7, #4]
 801974c:	4618      	mov	r0, r3
 801974e:	f7f4 fa79 	bl	800dc44 <_Z30BracketsFormattedHexStringFroml>
 8019752:	f107 0310 	add.w	r3, r7, #16
 8019756:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801975a:	f107 0118 	add.w	r1, r7, #24
 801975e:	4618      	mov	r0, r3
 8019760:	f7f3 fee3 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 8019764:	f107 0310 	add.w	r3, r7, #16
 8019768:	4619      	mov	r1, r3
 801976a:	4620      	mov	r0, r4
 801976c:	f7f3 fef8 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8019770:	f107 0310 	add.w	r3, r7, #16
 8019774:	4618      	mov	r0, r3
 8019776:	f7f3 fe76 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801977a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801977e:	4618      	mov	r0, r3
 8019780:	f7f3 fe71 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8019784:	f107 0318 	add.w	r3, r7, #24
 8019788:	4618      	mov	r0, r3
 801978a:	f7f3 fe6c 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801978e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019792:	4618      	mov	r0, r3
 8019794:	f7f3 fe67 	bl	800d466 <_ZN12SimpleStringD1Ev>
 8019798:	f107 0320 	add.w	r3, r7, #32
 801979c:	4618      	mov	r0, r3
 801979e:	f7f3 fe62 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 80197a2:	68fb      	ldr	r3, [r7, #12]
}
 80197a4:	4618      	mov	r0, r3
 80197a6:	373c      	adds	r7, #60	; 0x3c
 80197a8:	46bd      	mov	sp, r7
 80197aa:	bd90      	pop	{r4, r7, pc}
 80197ac:	080260c4 	.word	0x080260c4

080197b0 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80197b0:	b5b0      	push	{r4, r5, r7, lr}
 80197b2:	b086      	sub	sp, #24
 80197b4:	af02      	add	r7, sp, #8
 80197b6:	60f8      	str	r0, [r7, #12]
 80197b8:	60b9      	str	r1, [r7, #8]
 80197ba:	4639      	mov	r1, r7
 80197bc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80197c0:	f7fa fe7c 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 80197c4:	4604      	mov	r4, r0
 80197c6:	6823      	ldr	r3, [r4, #0]
 80197c8:	3368      	adds	r3, #104	; 0x68
 80197ca:	681d      	ldr	r5, [r3, #0]
 80197cc:	f7fa fe86 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80197d0:	4603      	mov	r3, r0
 80197d2:	9300      	str	r3, [sp, #0]
 80197d4:	f240 23ee 	movw	r3, #750	; 0x2ee
 80197d8:	4a04      	ldr	r2, [pc, #16]	; (80197ec <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 80197da:	4905      	ldr	r1, [pc, #20]	; (80197f0 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 80197dc:	4620      	mov	r0, r4
 80197de:	47a8      	blx	r5
    return *this;
 80197e0:	68fb      	ldr	r3, [r7, #12]
}
 80197e2:	4618      	mov	r0, r3
 80197e4:	3710      	adds	r7, #16
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bdb0      	pop	{r4, r5, r7, pc}
 80197ea:	bf00      	nop
 80197ec:	08025fb0 	.word	0x08025fb0
 80197f0:	08025fcc 	.word	0x08025fcc

080197f4 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80197f4:	b5b0      	push	{r4, r5, r7, lr}
 80197f6:	b086      	sub	sp, #24
 80197f8:	af02      	add	r7, sp, #8
 80197fa:	60f8      	str	r0, [r7, #12]
 80197fc:	60b9      	str	r1, [r7, #8]
 80197fe:	4639      	mov	r1, r7
 8019800:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019804:	f7fa fe5a 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8019808:	4604      	mov	r4, r0
 801980a:	6823      	ldr	r3, [r4, #0]
 801980c:	3368      	adds	r3, #104	; 0x68
 801980e:	681d      	ldr	r5, [r3, #0]
 8019810:	f7fa fe64 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019814:	4603      	mov	r3, r0
 8019816:	9300      	str	r3, [sp, #0]
 8019818:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 801981c:	4a04      	ldr	r2, [pc, #16]	; (8019830 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801981e:	4905      	ldr	r1, [pc, #20]	; (8019834 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8019820:	4620      	mov	r0, r4
 8019822:	47a8      	blx	r5
    return *this;
 8019824:	68fb      	ldr	r3, [r7, #12]
}
 8019826:	4618      	mov	r0, r3
 8019828:	3710      	adds	r7, #16
 801982a:	46bd      	mov	sp, r7
 801982c:	bdb0      	pop	{r4, r5, r7, pc}
 801982e:	bf00      	nop
 8019830:	08025fb0 	.word	0x08025fb0
 8019834:	08025ff8 	.word	0x08025ff8

08019838 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8019838:	b590      	push	{r4, r7, lr}
 801983a:	b087      	sub	sp, #28
 801983c:	af00      	add	r7, sp, #0
 801983e:	60f8      	str	r0, [r7, #12]
 8019840:	60b9      	str	r1, [r7, #8]
 8019842:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8019846:	68b9      	ldr	r1, [r7, #8]
 8019848:	68f8      	ldr	r0, [r7, #12]
 801984a:	f7ff fe15 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	1d1c      	adds	r4, r3, #4
 8019852:	f107 0310 	add.w	r3, r7, #16
 8019856:	2106      	movs	r1, #6
 8019858:	ed97 0b00 	vldr	d0, [r7]
 801985c:	4618      	mov	r0, r3
 801985e:	f7f4 fac7 	bl	800ddf0 <_Z10StringFromdi>
 8019862:	f107 0310 	add.w	r3, r7, #16
 8019866:	4619      	mov	r1, r3
 8019868:	4620      	mov	r0, r4
 801986a:	f7f3 fe79 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801986e:	f107 0310 	add.w	r3, r7, #16
 8019872:	4618      	mov	r0, r3
 8019874:	f7f3 fdf7 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 8019878:	68fb      	ldr	r3, [r7, #12]
}
 801987a:	4618      	mov	r0, r3
 801987c:	371c      	adds	r7, #28
 801987e:	46bd      	mov	sp, r7
 8019880:	bd90      	pop	{r4, r7, pc}

08019882 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 8019882:	b590      	push	{r4, r7, lr}
 8019884:	b087      	sub	sp, #28
 8019886:	af00      	add	r7, sp, #0
 8019888:	60f8      	str	r0, [r7, #12]
 801988a:	60b9      	str	r1, [r7, #8]
 801988c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801988e:	68b9      	ldr	r1, [r7, #8]
 8019890:	68f8      	ldr	r0, [r7, #12]
 8019892:	f7ff fdf1 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	1d1c      	adds	r4, r3, #4
 801989a:	f107 0310 	add.w	r3, r7, #16
 801989e:	6879      	ldr	r1, [r7, #4]
 80198a0:	4618      	mov	r0, r3
 80198a2:	f7f4 f86d 	bl	800d980 <_Z10StringFromPKc>
 80198a6:	f107 0310 	add.w	r3, r7, #16
 80198aa:	4619      	mov	r1, r3
 80198ac:	4620      	mov	r0, r4
 80198ae:	f7f3 fe57 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 80198b2:	f107 0310 	add.w	r3, r7, #16
 80198b6:	4618      	mov	r0, r3
 80198b8:	f7f3 fdd5 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 80198bc:	68fb      	ldr	r3, [r7, #12]
}
 80198be:	4618      	mov	r0, r3
 80198c0:	371c      	adds	r7, #28
 80198c2:	46bd      	mov	sp, r7
 80198c4:	bd90      	pop	{r4, r7, pc}

080198c6 <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 80198c6:	b590      	push	{r4, r7, lr}
 80198c8:	b087      	sub	sp, #28
 80198ca:	af00      	add	r7, sp, #0
 80198cc:	60f8      	str	r0, [r7, #12]
 80198ce:	60b9      	str	r1, [r7, #8]
 80198d0:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80198d2:	68b9      	ldr	r1, [r7, #8]
 80198d4:	68f8      	ldr	r0, [r7, #12]
 80198d6:	f7ff fdcf 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	1d1c      	adds	r4, r3, #4
 80198de:	f107 0310 	add.w	r3, r7, #16
 80198e2:	6879      	ldr	r1, [r7, #4]
 80198e4:	4618      	mov	r0, r3
 80198e6:	f7f4 f8a9 	bl	800da3c <_Z10StringFromPKv>
 80198ea:	f107 0310 	add.w	r3, r7, #16
 80198ee:	4619      	mov	r1, r3
 80198f0:	4620      	mov	r0, r4
 80198f2:	f7f3 fe35 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 80198f6:	f107 0310 	add.w	r3, r7, #16
 80198fa:	4618      	mov	r0, r3
 80198fc:	f7f3 fdb3 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 8019900:	68fb      	ldr	r3, [r7, #12]
}
 8019902:	4618      	mov	r0, r3
 8019904:	371c      	adds	r7, #28
 8019906:	46bd      	mov	sp, r7
 8019908:	bd90      	pop	{r4, r7, pc}

0801990a <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801990a:	b590      	push	{r4, r7, lr}
 801990c:	b087      	sub	sp, #28
 801990e:	af00      	add	r7, sp, #0
 8019910:	60f8      	str	r0, [r7, #12]
 8019912:	60b9      	str	r1, [r7, #8]
 8019914:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019916:	68b9      	ldr	r1, [r7, #8]
 8019918:	68f8      	ldr	r0, [r7, #12]
 801991a:	f7ff fdad 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	1d1c      	adds	r4, r3, #4
 8019922:	f107 0310 	add.w	r3, r7, #16
 8019926:	6879      	ldr	r1, [r7, #4]
 8019928:	4618      	mov	r0, r3
 801992a:	f7f4 f887 	bl	800da3c <_Z10StringFromPKv>
 801992e:	f107 0310 	add.w	r3, r7, #16
 8019932:	4619      	mov	r1, r3
 8019934:	4620      	mov	r0, r4
 8019936:	f7f3 fe13 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801993a:	f107 0310 	add.w	r3, r7, #16
 801993e:	4618      	mov	r0, r3
 8019940:	f7f3 fd91 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 8019944:	68fb      	ldr	r3, [r7, #12]
}
 8019946:	4618      	mov	r0, r3
 8019948:	371c      	adds	r7, #28
 801994a:	46bd      	mov	sp, r7
 801994c:	bd90      	pop	{r4, r7, pc}

0801994e <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801994e:	b590      	push	{r4, r7, lr}
 8019950:	b087      	sub	sp, #28
 8019952:	af00      	add	r7, sp, #0
 8019954:	60f8      	str	r0, [r7, #12]
 8019956:	60b9      	str	r1, [r7, #8]
 8019958:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801995a:	68b9      	ldr	r1, [r7, #8]
 801995c:	68f8      	ldr	r0, [r7, #12]
 801995e:	f7ff fd8b 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	1d1c      	adds	r4, r3, #4
 8019966:	f107 0310 	add.w	r3, r7, #16
 801996a:	6879      	ldr	r1, [r7, #4]
 801996c:	4618      	mov	r0, r3
 801996e:	f7f4 f88f 	bl	800da90 <_Z10StringFromPFvvE>
 8019972:	f107 0310 	add.w	r3, r7, #16
 8019976:	4619      	mov	r1, r3
 8019978:	4620      	mov	r0, r4
 801997a:	f7f3 fdf1 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801997e:	f107 0310 	add.w	r3, r7, #16
 8019982:	4618      	mov	r0, r3
 8019984:	f7f3 fd6f 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 8019988:	68fb      	ldr	r3, [r7, #12]
}
 801998a:	4618      	mov	r0, r3
 801998c:	371c      	adds	r7, #28
 801998e:	46bd      	mov	sp, r7
 8019990:	bd90      	pop	{r4, r7, pc}

08019992 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8019992:	b590      	push	{r4, r7, lr}
 8019994:	b087      	sub	sp, #28
 8019996:	af00      	add	r7, sp, #0
 8019998:	60f8      	str	r0, [r7, #12]
 801999a:	60b9      	str	r1, [r7, #8]
 801999c:	607a      	str	r2, [r7, #4]
 801999e:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 80199a0:	68b9      	ldr	r1, [r7, #8]
 80199a2:	68f8      	ldr	r0, [r7, #12]
 80199a4:	f7ff fd68 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	1d1c      	adds	r4, r3, #4
 80199ac:	f107 0310 	add.w	r3, r7, #16
 80199b0:	683a      	ldr	r2, [r7, #0]
 80199b2:	6879      	ldr	r1, [r7, #4]
 80199b4:	4618      	mov	r0, r3
 80199b6:	f7f4 fbaf 	bl	800e118 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 80199ba:	f107 0310 	add.w	r3, r7, #16
 80199be:	4619      	mov	r1, r3
 80199c0:	4620      	mov	r0, r4
 80199c2:	f7f3 fdcd 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 80199c6:	f107 0310 	add.w	r3, r7, #16
 80199ca:	4618      	mov	r0, r3
 80199cc:	f7f3 fd4b 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 80199d0:	68fb      	ldr	r3, [r7, #12]
}
 80199d2:	4618      	mov	r0, r3
 80199d4:	371c      	adds	r7, #28
 80199d6:	46bd      	mov	sp, r7
 80199d8:	bd90      	pop	{r4, r7, pc}
	...

080199dc <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 80199dc:	b590      	push	{r4, r7, lr}
 80199de:	b087      	sub	sp, #28
 80199e0:	af00      	add	r7, sp, #0
 80199e2:	60f8      	str	r0, [r7, #12]
 80199e4:	60b9      	str	r1, [r7, #8]
 80199e6:	607a      	str	r2, [r7, #4]
 80199e8:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	3304      	adds	r3, #4
 80199ee:	4913      	ldr	r1, [pc, #76]	; (8019a3c <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 80199f0:	4618      	mov	r0, r3
 80199f2:	f7f3 fdc7 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	3304      	adds	r3, #4
 80199fa:	68b9      	ldr	r1, [r7, #8]
 80199fc:	4618      	mov	r0, r3
 80199fe:	f7f3 fdaf 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8019a02:	6879      	ldr	r1, [r7, #4]
 8019a04:	68f8      	ldr	r0, [r7, #12]
 8019a06:	f7ff fd37 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	1d1c      	adds	r4, r3, #4
 8019a0e:	f107 0310 	add.w	r3, r7, #16
 8019a12:	6839      	ldr	r1, [r7, #0]
 8019a14:	4618      	mov	r0, r3
 8019a16:	f7f4 f811 	bl	800da3c <_Z10StringFromPKv>
 8019a1a:	f107 0310 	add.w	r3, r7, #16
 8019a1e:	4619      	mov	r1, r3
 8019a20:	4620      	mov	r0, r4
 8019a22:	f7f3 fd9d 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8019a26:	f107 0310 	add.w	r3, r7, #16
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	f7f3 fd1b 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 8019a30:	68fb      	ldr	r3, [r7, #12]
}
 8019a32:	4618      	mov	r0, r3
 8019a34:	371c      	adds	r7, #28
 8019a36:	46bd      	mov	sp, r7
 8019a38:	bd90      	pop	{r4, r7, pc}
 8019a3a:	bf00      	nop
 8019a3c:	080260c4 	.word	0x080260c4

08019a40 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8019a40:	b590      	push	{r4, r7, lr}
 8019a42:	b087      	sub	sp, #28
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	60f8      	str	r0, [r7, #12]
 8019a48:	60b9      	str	r1, [r7, #8]
 8019a4a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019a4c:	68b9      	ldr	r1, [r7, #8]
 8019a4e:	68f8      	ldr	r0, [r7, #12]
 8019a50:	f7ff fd12 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	1d1c      	adds	r4, r3, #4
 8019a58:	f107 0310 	add.w	r3, r7, #16
 8019a5c:	6879      	ldr	r1, [r7, #4]
 8019a5e:	4618      	mov	r0, r3
 8019a60:	f7f3 ffec 	bl	800da3c <_Z10StringFromPKv>
 8019a64:	f107 0310 	add.w	r3, r7, #16
 8019a68:	4619      	mov	r1, r3
 8019a6a:	4620      	mov	r0, r4
 8019a6c:	f7f3 fd78 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8019a70:	f107 0310 	add.w	r3, r7, #16
 8019a74:	4618      	mov	r0, r3
 8019a76:	f7f3 fcf6 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 8019a7a:	68fb      	ldr	r3, [r7, #12]
}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	371c      	adds	r7, #28
 8019a80:	46bd      	mov	sp, r7
 8019a82:	bd90      	pop	{r4, r7, pc}

08019a84 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8019a84:	b590      	push	{r4, r7, lr}
 8019a86:	b087      	sub	sp, #28
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	60f8      	str	r0, [r7, #12]
 8019a8c:	60b9      	str	r1, [r7, #8]
 8019a8e:	607a      	str	r2, [r7, #4]
 8019a90:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	3304      	adds	r3, #4
 8019a96:	4913      	ldr	r1, [pc, #76]	; (8019ae4 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8019a98:	4618      	mov	r0, r3
 8019a9a:	f7f3 fd73 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	3304      	adds	r3, #4
 8019aa2:	68b9      	ldr	r1, [r7, #8]
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	f7f3 fd5b 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8019aaa:	6879      	ldr	r1, [r7, #4]
 8019aac:	68f8      	ldr	r0, [r7, #12]
 8019aae:	f7ff fce3 	bl	8019478 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	1d1c      	adds	r4, r3, #4
 8019ab6:	f107 0310 	add.w	r3, r7, #16
 8019aba:	6839      	ldr	r1, [r7, #0]
 8019abc:	4618      	mov	r0, r3
 8019abe:	f7f3 ffbd 	bl	800da3c <_Z10StringFromPKv>
 8019ac2:	f107 0310 	add.w	r3, r7, #16
 8019ac6:	4619      	mov	r1, r3
 8019ac8:	4620      	mov	r0, r4
 8019aca:	f7f3 fd49 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8019ace:	f107 0310 	add.w	r3, r7, #16
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	f7f3 fcc7 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 8019ad8:	68fb      	ldr	r3, [r7, #12]
}
 8019ada:	4618      	mov	r0, r3
 8019adc:	371c      	adds	r7, #28
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd90      	pop	{r4, r7, pc}
 8019ae2:	bf00      	nop
 8019ae4:	080260c4 	.word	0x080260c4

08019ae8 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8019ae8:	b480      	push	{r7}
 8019aea:	b083      	sub	sp, #12
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	6078      	str	r0, [r7, #4]
    return false;
 8019af0:	2300      	movs	r3, #0
}
 8019af2:	4618      	mov	r0, r3
 8019af4:	370c      	adds	r7, #12
 8019af6:	46bd      	mov	sp, r7
 8019af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019afc:	4770      	bx	lr
	...

08019b00 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 8019b00:	b580      	push	{r7, lr}
 8019b02:	b084      	sub	sp, #16
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	6078      	str	r0, [r7, #4]
 8019b08:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 8019b0a:	f107 0308 	add.w	r3, r7, #8
 8019b0e:	4909      	ldr	r1, [pc, #36]	; (8019b34 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8019b10:	4618      	mov	r0, r3
 8019b12:	f7f3 f8f0 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 8019b16:	f107 0308 	add.w	r3, r7, #8
 8019b1a:	4619      	mov	r1, r3
 8019b1c:	6878      	ldr	r0, [r7, #4]
 8019b1e:	f003 fe0f 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019b22:	f107 0308 	add.w	r3, r7, #8
 8019b26:	4618      	mov	r0, r3
 8019b28:	f7f3 fc9d 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 8019b2c:	6878      	ldr	r0, [r7, #4]
 8019b2e:	3710      	adds	r7, #16
 8019b30:	46bd      	mov	sp, r7
 8019b32:	bd80      	pop	{r7, pc}
 8019b34:	08025f98 	.word	0x08025f98

08019b38 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8019b38:	b480      	push	{r7}
 8019b3a:	b083      	sub	sp, #12
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
    return 0;
 8019b40:	2300      	movs	r3, #0
}
 8019b42:	4618      	mov	r0, r3
 8019b44:	370c      	adds	r7, #12
 8019b46:	46bd      	mov	sp, r7
 8019b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b4c:	4770      	bx	lr

08019b4e <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8019b4e:	b480      	push	{r7}
 8019b50:	b083      	sub	sp, #12
 8019b52:	af00      	add	r7, sp, #0
 8019b54:	6078      	str	r0, [r7, #4]
    return 0;
 8019b56:	2300      	movs	r3, #0
}
 8019b58:	4618      	mov	r0, r3
 8019b5a:	370c      	adds	r7, #12
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b62:	4770      	bx	lr

08019b64 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8019b64:	b480      	push	{r7}
 8019b66:	b083      	sub	sp, #12
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
 8019b6c:	6039      	str	r1, [r7, #0]
    return 0;
 8019b6e:	2300      	movs	r3, #0
}
 8019b70:	4618      	mov	r0, r3
 8019b72:	370c      	adds	r7, #12
 8019b74:	46bd      	mov	sp, r7
 8019b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7a:	4770      	bx	lr

08019b7c <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8019b7c:	b480      	push	{r7}
 8019b7e:	b083      	sub	sp, #12
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	6078      	str	r0, [r7, #4]
 8019b84:	6039      	str	r1, [r7, #0]
    return 0;
 8019b86:	2300      	movs	r3, #0
}
 8019b88:	4618      	mov	r0, r3
 8019b8a:	370c      	adds	r7, #12
 8019b8c:	46bd      	mov	sp, r7
 8019b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b92:	4770      	bx	lr

08019b94 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8019b94:	b5b0      	push	{r4, r5, r7, lr}
 8019b96:	b084      	sub	sp, #16
 8019b98:	af02      	add	r7, sp, #8
 8019b9a:	6078      	str	r0, [r7, #4]
 8019b9c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8019b9e:	f7fa fc8d 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8019ba2:	4604      	mov	r4, r0
 8019ba4:	6823      	ldr	r3, [r4, #0]
 8019ba6:	3368      	adds	r3, #104	; 0x68
 8019ba8:	681d      	ldr	r5, [r3, #0]
 8019baa:	f7fa fc97 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019bae:	4603      	mov	r3, r0
 8019bb0:	9300      	str	r3, [sp, #0]
 8019bb2:	f240 3375 	movw	r3, #885	; 0x375
 8019bb6:	4a06      	ldr	r2, [pc, #24]	; (8019bd0 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8019bb8:	4906      	ldr	r1, [pc, #24]	; (8019bd4 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8019bba:	4620      	mov	r0, r4
 8019bbc:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019bbe:	2100      	movs	r1, #0
 8019bc0:	6878      	ldr	r0, [r7, #4]
 8019bc2:	f7f1 f8cf 	bl	800ad64 <_ZN17cpputest_longlongC1Ei>
}
 8019bc6:	6878      	ldr	r0, [r7, #4]
 8019bc8:	3708      	adds	r7, #8
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8019bce:	bf00      	nop
 8019bd0:	08025fb0 	.word	0x08025fb0
 8019bd4:	08025ff8 	.word	0x08025ff8

08019bd8 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8019bd8:	b5b0      	push	{r4, r5, r7, lr}
 8019bda:	b084      	sub	sp, #16
 8019bdc:	af02      	add	r7, sp, #8
 8019bde:	6078      	str	r0, [r7, #4]
 8019be0:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8019be2:	f7fa fc6b 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8019be6:	4604      	mov	r4, r0
 8019be8:	6823      	ldr	r3, [r4, #0]
 8019bea:	3368      	adds	r3, #104	; 0x68
 8019bec:	681d      	ldr	r5, [r3, #0]
 8019bee:	f7fa fc75 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	9300      	str	r3, [sp, #0]
 8019bf6:	f240 337b 	movw	r3, #891	; 0x37b
 8019bfa:	4a06      	ldr	r2, [pc, #24]	; (8019c14 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8019bfc:	4906      	ldr	r1, [pc, #24]	; (8019c18 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 8019bfe:	4620      	mov	r0, r4
 8019c00:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019c02:	2100      	movs	r1, #0
 8019c04:	6878      	ldr	r0, [r7, #4]
 8019c06:	f7f1 f8b9 	bl	800ad7c <_ZN18cpputest_ulonglongC1Ei>
}
 8019c0a:	6878      	ldr	r0, [r7, #4]
 8019c0c:	3708      	adds	r7, #8
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	bdb0      	pop	{r4, r5, r7, pc}
 8019c12:	bf00      	nop
 8019c14:	08025fb0 	.word	0x08025fb0
 8019c18:	08025fcc 	.word	0x08025fcc

08019c1c <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 8019c1c:	b5b0      	push	{r4, r5, r7, lr}
 8019c1e:	b086      	sub	sp, #24
 8019c20:	af02      	add	r7, sp, #8
 8019c22:	60f8      	str	r0, [r7, #12]
 8019c24:	60b9      	str	r1, [r7, #8]
 8019c26:	4639      	mov	r1, r7
 8019c28:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019c2c:	f7fa fc46 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8019c30:	4604      	mov	r4, r0
 8019c32:	6823      	ldr	r3, [r4, #0]
 8019c34:	3368      	adds	r3, #104	; 0x68
 8019c36:	681d      	ldr	r5, [r3, #0]
 8019c38:	f7fa fc50 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	9300      	str	r3, [sp, #0]
 8019c40:	f240 3381 	movw	r3, #897	; 0x381
 8019c44:	4a05      	ldr	r2, [pc, #20]	; (8019c5c <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 8019c46:	4906      	ldr	r1, [pc, #24]	; (8019c60 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8019c48:	4620      	mov	r0, r4
 8019c4a:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019c4c:	2100      	movs	r1, #0
 8019c4e:	68f8      	ldr	r0, [r7, #12]
 8019c50:	f7f1 f894 	bl	800ad7c <_ZN18cpputest_ulonglongC1Ei>
}
 8019c54:	68f8      	ldr	r0, [r7, #12]
 8019c56:	3710      	adds	r7, #16
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8019c5c:	08025fb0 	.word	0x08025fb0
 8019c60:	08025fcc 	.word	0x08025fcc

08019c64 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8019c64:	b5b0      	push	{r4, r5, r7, lr}
 8019c66:	b086      	sub	sp, #24
 8019c68:	af02      	add	r7, sp, #8
 8019c6a:	60f8      	str	r0, [r7, #12]
 8019c6c:	60b9      	str	r1, [r7, #8]
 8019c6e:	4639      	mov	r1, r7
 8019c70:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019c74:	f7fa fc22 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 8019c78:	4604      	mov	r4, r0
 8019c7a:	6823      	ldr	r3, [r4, #0]
 8019c7c:	3368      	adds	r3, #104	; 0x68
 8019c7e:	681d      	ldr	r5, [r3, #0]
 8019c80:	f7fa fc2c 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019c84:	4603      	mov	r3, r0
 8019c86:	9300      	str	r3, [sp, #0]
 8019c88:	f240 3387 	movw	r3, #903	; 0x387
 8019c8c:	4a05      	ldr	r2, [pc, #20]	; (8019ca4 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8019c8e:	4906      	ldr	r1, [pc, #24]	; (8019ca8 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8019c90:	4620      	mov	r0, r4
 8019c92:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019c94:	2100      	movs	r1, #0
 8019c96:	68f8      	ldr	r0, [r7, #12]
 8019c98:	f7f1 f864 	bl	800ad64 <_ZN17cpputest_longlongC1Ei>
}
 8019c9c:	68f8      	ldr	r0, [r7, #12]
 8019c9e:	3710      	adds	r7, #16
 8019ca0:	46bd      	mov	sp, r7
 8019ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8019ca4:	08025fb0 	.word	0x08025fb0
 8019ca8:	08025ff8 	.word	0x08025ff8

08019cac <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8019cac:	b480      	push	{r7}
 8019cae:	b083      	sub	sp, #12
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
    return false;
 8019cb4:	2300      	movs	r3, #0
}
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	370c      	adds	r7, #12
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc0:	4770      	bx	lr

08019cc2 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8019cc2:	b480      	push	{r7}
 8019cc4:	b083      	sub	sp, #12
 8019cc6:	af00      	add	r7, sp, #0
 8019cc8:	6078      	str	r0, [r7, #4]
 8019cca:	460b      	mov	r3, r1
 8019ccc:	70fb      	strb	r3, [r7, #3]
    return false;
 8019cce:	2300      	movs	r3, #0
}
 8019cd0:	4618      	mov	r0, r3
 8019cd2:	370c      	adds	r7, #12
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cda:	4770      	bx	lr

08019cdc <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8019cdc:	b480      	push	{r7}
 8019cde:	b083      	sub	sp, #12
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	6078      	str	r0, [r7, #4]
    return 0;
 8019ce4:	2300      	movs	r3, #0
}
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	370c      	adds	r7, #12
 8019cea:	46bd      	mov	sp, r7
 8019cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf0:	4770      	bx	lr

08019cf2 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8019cf2:	b480      	push	{r7}
 8019cf4:	b083      	sub	sp, #12
 8019cf6:	af00      	add	r7, sp, #0
 8019cf8:	6078      	str	r0, [r7, #4]
    return 0.0;
 8019cfa:	f04f 0200 	mov.w	r2, #0
 8019cfe:	f04f 0300 	mov.w	r3, #0
 8019d02:	ec43 2b17 	vmov	d7, r2, r3
}
 8019d06:	eeb0 0a47 	vmov.f32	s0, s14
 8019d0a:	eef0 0a67 	vmov.f32	s1, s15
 8019d0e:	370c      	adds	r7, #12
 8019d10:	46bd      	mov	sp, r7
 8019d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d16:	4770      	bx	lr

08019d18 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b084      	sub	sp, #16
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	60f8      	str	r0, [r7, #12]
 8019d20:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	3398      	adds	r3, #152	; 0x98
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	68f8      	ldr	r0, [r7, #12]
 8019d2e:	4798      	blx	r3
 8019d30:	eeb0 7a40 	vmov.f32	s14, s0
 8019d34:	eef0 7a60 	vmov.f32	s15, s1
}
 8019d38:	eeb0 0a47 	vmov.f32	s0, s14
 8019d3c:	eef0 0a67 	vmov.f32	s1, s15
 8019d40:	3710      	adds	r7, #16
 8019d42:	46bd      	mov	sp, r7
 8019d44:	bd80      	pop	{r7, pc}

08019d46 <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8019d46:	b480      	push	{r7}
 8019d48:	b083      	sub	sp, #12
 8019d4a:	af00      	add	r7, sp, #0
 8019d4c:	6078      	str	r0, [r7, #4]
    return 0;
 8019d4e:	2300      	movs	r3, #0
}
 8019d50:	4618      	mov	r0, r3
 8019d52:	370c      	adds	r7, #12
 8019d54:	46bd      	mov	sp, r7
 8019d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5a:	4770      	bx	lr

08019d5c <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8019d5c:	b480      	push	{r7}
 8019d5e:	b083      	sub	sp, #12
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019d64:	2300      	movs	r3, #0
}
 8019d66:	4618      	mov	r0, r3
 8019d68:	370c      	adds	r7, #12
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d70:	4770      	bx	lr

08019d72 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8019d72:	b480      	push	{r7}
 8019d74:	b083      	sub	sp, #12
 8019d76:	af00      	add	r7, sp, #0
 8019d78:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019d7a:	2300      	movs	r3, #0
}
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	370c      	adds	r7, #12
 8019d80:	46bd      	mov	sp, r7
 8019d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d86:	4770      	bx	lr

08019d88 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8019d88:	b480      	push	{r7}
 8019d8a:	b083      	sub	sp, #12
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019d90:	2300      	movs	r3, #0
}
 8019d92:	4618      	mov	r0, r3
 8019d94:	370c      	adds	r7, #12
 8019d96:	46bd      	mov	sp, r7
 8019d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d9c:	4770      	bx	lr

08019d9e <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 8019d9e:	b580      	push	{r7, lr}
 8019da0:	b082      	sub	sp, #8
 8019da2:	af00      	add	r7, sp, #0
 8019da4:	6078      	str	r0, [r7, #4]
 8019da6:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	33a8      	adds	r3, #168	; 0xa8
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	6878      	ldr	r0, [r7, #4]
 8019db2:	4798      	blx	r3
 8019db4:	4603      	mov	r3, r0
}
 8019db6:	4618      	mov	r0, r3
 8019db8:	3708      	adds	r7, #8
 8019dba:	46bd      	mov	sp, r7
 8019dbc:	bd80      	pop	{r7, pc}

08019dbe <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 8019dbe:	b580      	push	{r7, lr}
 8019dc0:	b082      	sub	sp, #8
 8019dc2:	af00      	add	r7, sp, #0
 8019dc4:	6078      	str	r0, [r7, #4]
 8019dc6:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	33a0      	adds	r3, #160	; 0xa0
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	6878      	ldr	r0, [r7, #4]
 8019dd2:	4798      	blx	r3
 8019dd4:	4603      	mov	r3, r0
}
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	3708      	adds	r7, #8
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	bd80      	pop	{r7, pc}

08019dde <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 8019dde:	b580      	push	{r7, lr}
 8019de0:	b082      	sub	sp, #8
 8019de2:	af00      	add	r7, sp, #0
 8019de4:	6078      	str	r0, [r7, #4]
 8019de6:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	33b0      	adds	r3, #176	; 0xb0
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	6878      	ldr	r0, [r7, #4]
 8019df2:	4798      	blx	r3
 8019df4:	4603      	mov	r3, r0
}
 8019df6:	4618      	mov	r0, r3
 8019df8:	3708      	adds	r7, #8
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bd80      	pop	{r7, pc}
	...

08019e00 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 8019e00:	b480      	push	{r7}
 8019e02:	b083      	sub	sp, #12
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]
    return "";
 8019e08:	4b03      	ldr	r3, [pc, #12]	; (8019e18 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	370c      	adds	r7, #12
 8019e0e:	46bd      	mov	sp, r7
 8019e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e14:	4770      	bx	lr
 8019e16:	bf00      	nop
 8019e18:	08025f98 	.word	0x08025f98

08019e1c <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 8019e1c:	b580      	push	{r7, lr}
 8019e1e:	b082      	sub	sp, #8
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	6078      	str	r0, [r7, #4]
 8019e24:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	3394      	adds	r3, #148	; 0x94
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	6878      	ldr	r0, [r7, #4]
 8019e30:	4798      	blx	r3
 8019e32:	4603      	mov	r3, r0
}
 8019e34:	4618      	mov	r0, r3
 8019e36:	3708      	adds	r7, #8
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	bd80      	pop	{r7, pc}

08019e3c <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 8019e3c:	b480      	push	{r7}
 8019e3e:	b083      	sub	sp, #12
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	6078      	str	r0, [r7, #4]
 8019e44:	6039      	str	r1, [r7, #0]
    return 0;
 8019e46:	2300      	movs	r3, #0
}
 8019e48:	4618      	mov	r0, r3
 8019e4a:	370c      	adds	r7, #12
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e52:	4770      	bx	lr

08019e54 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b082      	sub	sp, #8
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
 8019e5c:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	3388      	adds	r3, #136	; 0x88
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	6878      	ldr	r0, [r7, #4]
 8019e68:	4798      	blx	r3
 8019e6a:	4603      	mov	r3, r0
}
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	3708      	adds	r7, #8
 8019e70:	46bd      	mov	sp, r7
 8019e72:	bd80      	pop	{r7, pc}

08019e74 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8019e74:	b590      	push	{r4, r7, lr}
 8019e76:	b085      	sub	sp, #20
 8019e78:	af00      	add	r7, sp, #0
 8019e7a:	6078      	str	r0, [r7, #4]
 8019e7c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	3304      	adds	r3, #4
 8019e82:	490e      	ldr	r1, [pc, #56]	; (8019ebc <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8019e84:	4618      	mov	r0, r3
 8019e86:	f7f3 fb7d 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	1d1c      	adds	r4, r3, #4
 8019e8e:	f107 0308 	add.w	r3, r7, #8
 8019e92:	6839      	ldr	r1, [r7, #0]
 8019e94:	4618      	mov	r0, r3
 8019e96:	f7f3 fdd1 	bl	800da3c <_Z10StringFromPKv>
 8019e9a:	f107 0308 	add.w	r3, r7, #8
 8019e9e:	4619      	mov	r1, r3
 8019ea0:	4620      	mov	r0, r4
 8019ea2:	f7f3 fb5d 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 8019ea6:	f107 0308 	add.w	r3, r7, #8
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f7f3 fadb 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return *this;
 8019eb0:	687b      	ldr	r3, [r7, #4]
}
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	3714      	adds	r7, #20
 8019eb6:	46bd      	mov	sp, r7
 8019eb8:	bd90      	pop	{r4, r7, pc}
 8019eba:	bf00      	nop
 8019ebc:	080260cc 	.word	0x080260cc

08019ec0 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8019ec0:	b598      	push	{r3, r4, r7, lr}
 8019ec2:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8019ec4:	4b09      	ldr	r3, [pc, #36]	; (8019eec <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d10b      	bne.n	8019ee4 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8019ecc:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8019ed0:	4907      	ldr	r1, [pc, #28]	; (8019ef0 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8019ed2:	200c      	movs	r0, #12
 8019ed4:	f7f0 fb4c 	bl	800a570 <_ZnwjPKci>
 8019ed8:	4604      	mov	r4, r0
 8019eda:	4620      	mov	r0, r4
 8019edc:	f7ff fa4c 	bl	8019378 <_ZN19MockActualCallTraceC1Ev>
 8019ee0:	4b02      	ldr	r3, [pc, #8]	; (8019eec <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019ee2:	601c      	str	r4, [r3, #0]
    return *instance_;
 8019ee4:	4b01      	ldr	r3, [pc, #4]	; (8019eec <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
}
 8019ee8:	4618      	mov	r0, r3
 8019eea:	bd98      	pop	{r3, r4, r7, pc}
 8019eec:	20000eb0 	.word	0x20000eb0
 8019ef0:	08025fb0 	.word	0x08025fb0

08019ef4 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	af00      	add	r7, sp, #0
    delete instance_;
 8019ef8:	4b06      	ldr	r3, [pc, #24]	; (8019f14 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d004      	beq.n	8019f0a <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8019f00:	681a      	ldr	r2, [r3, #0]
 8019f02:	3204      	adds	r2, #4
 8019f04:	6812      	ldr	r2, [r2, #0]
 8019f06:	4618      	mov	r0, r3
 8019f08:	4790      	blx	r2
    instance_ = NULLPTR;
 8019f0a:	4b02      	ldr	r3, [pc, #8]	; (8019f14 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	601a      	str	r2, [r3, #0]
}
 8019f10:	bf00      	nop
 8019f12:	bd80      	pop	{r7, pc}
 8019f14:	20000eb0 	.word	0x20000eb0

08019f18 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b082      	sub	sp, #8
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	4618      	mov	r0, r3
 8019f24:	f7fd fe9a 	bl	8017c5c <_ZN14MockActualCallC1Ev>
 8019f28:	4a03      	ldr	r2, [pc, #12]	; (8019f38 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	601a      	str	r2, [r3, #0]
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	4618      	mov	r0, r3
 8019f32:	3708      	adds	r7, #8
 8019f34:	46bd      	mov	sp, r7
 8019f36:	bd80      	pop	{r7, pc}
 8019f38:	08028d18 	.word	0x08028d18

08019f3c <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	af00      	add	r7, sp, #0
 8019f40:	4801      	ldr	r0, [pc, #4]	; (8019f48 <__tcf_0+0xc>)
 8019f42:	f000 f831 	bl	8019fa8 <_ZN21MockIgnoredActualCallD1Ev>
 8019f46:	bd80      	pop	{r7, pc}
 8019f48:	20000eb4 	.word	0x20000eb4

08019f4c <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8019f4c:	b580      	push	{r7, lr}
 8019f4e:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8019f50:	4b12      	ldr	r3, [pc, #72]	; (8019f9c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019f52:	781b      	ldrb	r3, [r3, #0]
 8019f54:	f3bf 8f5b 	dmb	ish
 8019f58:	b2db      	uxtb	r3, r3
 8019f5a:	f003 0301 	and.w	r3, r3, #1
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	bf0c      	ite	eq
 8019f62:	2301      	moveq	r3, #1
 8019f64:	2300      	movne	r3, #0
 8019f66:	b2db      	uxtb	r3, r3
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d013      	beq.n	8019f94 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8019f6c:	480b      	ldr	r0, [pc, #44]	; (8019f9c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019f6e:	f005 fd83 	bl	801fa78 <__cxa_guard_acquire>
 8019f72:	4603      	mov	r3, r0
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	bf14      	ite	ne
 8019f78:	2301      	movne	r3, #1
 8019f7a:	2300      	moveq	r3, #0
 8019f7c:	b2db      	uxtb	r3, r3
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d008      	beq.n	8019f94 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8019f82:	4807      	ldr	r0, [pc, #28]	; (8019fa0 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8019f84:	f7ff ffc8 	bl	8019f18 <_ZN21MockIgnoredActualCallC1Ev>
 8019f88:	4804      	ldr	r0, [pc, #16]	; (8019f9c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019f8a:	f005 fd81 	bl	801fa90 <__cxa_guard_release>
 8019f8e:	4805      	ldr	r0, [pc, #20]	; (8019fa4 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8019f90:	f005 fda5 	bl	801fade <atexit>
    return call;
 8019f94:	4b02      	ldr	r3, [pc, #8]	; (8019fa0 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 8019f96:	4618      	mov	r0, r3
 8019f98:	bd80      	pop	{r7, pc}
 8019f9a:	bf00      	nop
 8019f9c:	20000eb8 	.word	0x20000eb8
 8019fa0:	20000eb4 	.word	0x20000eb4
 8019fa4:	08019f3d 	.word	0x08019f3d

08019fa8 <_ZN21MockIgnoredActualCallD1Ev>:
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b082      	sub	sp, #8
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	6078      	str	r0, [r7, #4]
 8019fb0:	4a05      	ldr	r2, [pc, #20]	; (8019fc8 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	601a      	str	r2, [r3, #0]
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f7fd fe5f 	bl	8017c7c <_ZN14MockActualCallD1Ev>
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	3708      	adds	r7, #8
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	bd80      	pop	{r7, pc}
 8019fc8:	08028d18 	.word	0x08028d18

08019fcc <_ZN21MockIgnoredActualCallD0Ev>:
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b082      	sub	sp, #8
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
 8019fd4:	6878      	ldr	r0, [r7, #4]
 8019fd6:	f7ff ffe7 	bl	8019fa8 <_ZN21MockIgnoredActualCallD1Ev>
 8019fda:	2104      	movs	r1, #4
 8019fdc:	6878      	ldr	r0, [r7, #4]
 8019fde:	f7f0 fadb 	bl	800a598 <_ZdlPvj>
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	3708      	adds	r7, #8
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}

08019fec <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b082      	sub	sp, #8
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
 8019ff4:	4a05      	ldr	r2, [pc, #20]	; (801a00c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	601a      	str	r2, [r3, #0]
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	f7f0 fefd 	bl	800adfc <_ZN11MockFailureD1Ev>
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	4618      	mov	r0, r3
 801a006:	3708      	adds	r7, #8
 801a008:	46bd      	mov	sp, r7
 801a00a:	bd80      	pop	{r7, pc}
 801a00c:	08028c10 	.word	0x08028c10

0801a010 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 801a010:	b580      	push	{r7, lr}
 801a012:	b082      	sub	sp, #8
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
 801a018:	6878      	ldr	r0, [r7, #4]
 801a01a:	f7ff ffe7 	bl	8019fec <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 801a01e:	2134      	movs	r1, #52	; 0x34
 801a020:	6878      	ldr	r0, [r7, #4]
 801a022:	f7f0 fab9 	bl	800a598 <_ZdlPvj>
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	4618      	mov	r0, r3
 801a02a:	3708      	adds	r7, #8
 801a02c:	46bd      	mov	sp, r7
 801a02e:	bd80      	pop	{r7, pc}

0801a030 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 801a030:	b580      	push	{r7, lr}
 801a032:	b082      	sub	sp, #8
 801a034:	af00      	add	r7, sp, #0
 801a036:	6078      	str	r0, [r7, #4]
 801a038:	4a05      	ldr	r2, [pc, #20]	; (801a050 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	601a      	str	r2, [r3, #0]
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	4618      	mov	r0, r3
 801a042:	f7f0 fedb 	bl	800adfc <_ZN11MockFailureD1Ev>
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	4618      	mov	r0, r3
 801a04a:	3708      	adds	r7, #8
 801a04c:	46bd      	mov	sp, r7
 801a04e:	bd80      	pop	{r7, pc}
 801a050:	08028cec 	.word	0x08028cec

0801a054 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 801a054:	b580      	push	{r7, lr}
 801a056:	b082      	sub	sp, #8
 801a058:	af00      	add	r7, sp, #0
 801a05a:	6078      	str	r0, [r7, #4]
 801a05c:	6878      	ldr	r0, [r7, #4]
 801a05e:	f7ff ffe7 	bl	801a030 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801a062:	2134      	movs	r1, #52	; 0x34
 801a064:	6878      	ldr	r0, [r7, #4]
 801a066:	f7f0 fa97 	bl	800a598 <_ZdlPvj>
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	4618      	mov	r0, r3
 801a06e:	3708      	adds	r7, #8
 801a070:	46bd      	mov	sp, r7
 801a072:	bd80      	pop	{r7, pc}

0801a074 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 801a074:	b580      	push	{r7, lr}
 801a076:	b082      	sub	sp, #8
 801a078:	af00      	add	r7, sp, #0
 801a07a:	6078      	str	r0, [r7, #4]
 801a07c:	4a05      	ldr	r2, [pc, #20]	; (801a094 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	601a      	str	r2, [r3, #0]
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	4618      	mov	r0, r3
 801a086:	f7f0 feb9 	bl	800adfc <_ZN11MockFailureD1Ev>
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	4618      	mov	r0, r3
 801a08e:	3708      	adds	r7, #8
 801a090:	46bd      	mov	sp, r7
 801a092:	bd80      	pop	{r7, pc}
 801a094:	08028cc0 	.word	0x08028cc0

0801a098 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801a098:	b580      	push	{r7, lr}
 801a09a:	b082      	sub	sp, #8
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	6078      	str	r0, [r7, #4]
 801a0a0:	6878      	ldr	r0, [r7, #4]
 801a0a2:	f7ff ffe7 	bl	801a074 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801a0a6:	2134      	movs	r1, #52	; 0x34
 801a0a8:	6878      	ldr	r0, [r7, #4]
 801a0aa:	f7f0 fa75 	bl	800a598 <_ZdlPvj>
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	3708      	adds	r7, #8
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	bd80      	pop	{r7, pc}

0801a0b8 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b082      	sub	sp, #8
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
 801a0c0:	4a05      	ldr	r2, [pc, #20]	; (801a0d8 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	601a      	str	r2, [r3, #0]
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f7f0 fe97 	bl	800adfc <_ZN11MockFailureD1Ev>
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	3708      	adds	r7, #8
 801a0d4:	46bd      	mov	sp, r7
 801a0d6:	bd80      	pop	{r7, pc}
 801a0d8:	08028c94 	.word	0x08028c94

0801a0dc <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b082      	sub	sp, #8
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
 801a0e4:	6878      	ldr	r0, [r7, #4]
 801a0e6:	f7ff ffe7 	bl	801a0b8 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801a0ea:	2134      	movs	r1, #52	; 0x34
 801a0ec:	6878      	ldr	r0, [r7, #4]
 801a0ee:	f7f0 fa53 	bl	800a598 <_ZdlPvj>
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	3708      	adds	r7, #8
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	bd80      	pop	{r7, pc}

0801a0fc <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b082      	sub	sp, #8
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
 801a104:	4a05      	ldr	r2, [pc, #20]	; (801a11c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	601a      	str	r2, [r3, #0]
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	4618      	mov	r0, r3
 801a10e:	f7f0 fe75 	bl	800adfc <_ZN11MockFailureD1Ev>
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	4618      	mov	r0, r3
 801a116:	3708      	adds	r7, #8
 801a118:	46bd      	mov	sp, r7
 801a11a:	bd80      	pop	{r7, pc}
 801a11c:	08028c3c 	.word	0x08028c3c

0801a120 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 801a120:	b580      	push	{r7, lr}
 801a122:	b082      	sub	sp, #8
 801a124:	af00      	add	r7, sp, #0
 801a126:	6078      	str	r0, [r7, #4]
 801a128:	6878      	ldr	r0, [r7, #4]
 801a12a:	f7ff ffe7 	bl	801a0fc <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801a12e:	2134      	movs	r1, #52	; 0x34
 801a130:	6878      	ldr	r0, [r7, #4]
 801a132:	f7f0 fa31 	bl	800a598 <_ZdlPvj>
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	4618      	mov	r0, r3
 801a13a:	3708      	adds	r7, #8
 801a13c:	46bd      	mov	sp, r7
 801a13e:	bd80      	pop	{r7, pc}

0801a140 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 801a140:	b580      	push	{r7, lr}
 801a142:	b082      	sub	sp, #8
 801a144:	af00      	add	r7, sp, #0
 801a146:	6078      	str	r0, [r7, #4]
 801a148:	4a05      	ldr	r2, [pc, #20]	; (801a160 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	601a      	str	r2, [r3, #0]
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	4618      	mov	r0, r3
 801a152:	f7f0 fe53 	bl	800adfc <_ZN11MockFailureD1Ev>
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	4618      	mov	r0, r3
 801a15a:	3708      	adds	r7, #8
 801a15c:	46bd      	mov	sp, r7
 801a15e:	bd80      	pop	{r7, pc}
 801a160:	08028c68 	.word	0x08028c68

0801a164 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801a164:	b580      	push	{r7, lr}
 801a166:	b082      	sub	sp, #8
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
 801a16c:	6878      	ldr	r0, [r7, #4]
 801a16e:	f7ff ffe7 	bl	801a140 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801a172:	2134      	movs	r1, #52	; 0x34
 801a174:	6878      	ldr	r0, [r7, #4]
 801a176:	f7f0 fa0f 	bl	800a598 <_ZdlPvj>
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	4618      	mov	r0, r3
 801a17e:	3708      	adds	r7, #8
 801a180:	46bd      	mov	sp, r7
 801a182:	bd80      	pop	{r7, pc}

0801a184 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801a184:	b580      	push	{r7, lr}
 801a186:	b082      	sub	sp, #8
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]
 801a18c:	4a05      	ldr	r2, [pc, #20]	; (801a1a4 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	601a      	str	r2, [r3, #0]
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	4618      	mov	r0, r3
 801a196:	f7f0 fe31 	bl	800adfc <_ZN11MockFailureD1Ev>
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	4618      	mov	r0, r3
 801a19e:	3708      	adds	r7, #8
 801a1a0:	46bd      	mov	sp, r7
 801a1a2:	bd80      	pop	{r7, pc}
 801a1a4:	08028bb8 	.word	0x08028bb8

0801a1a8 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b082      	sub	sp, #8
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
 801a1b0:	6878      	ldr	r0, [r7, #4]
 801a1b2:	f7ff ffe7 	bl	801a184 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801a1b6:	2134      	movs	r1, #52	; 0x34
 801a1b8:	6878      	ldr	r0, [r7, #4]
 801a1ba:	f7f0 f9ed 	bl	800a598 <_ZdlPvj>
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	3708      	adds	r7, #8
 801a1c4:	46bd      	mov	sp, r7
 801a1c6:	bd80      	pop	{r7, pc}

0801a1c8 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801a1c8:	b580      	push	{r7, lr}
 801a1ca:	b082      	sub	sp, #8
 801a1cc:	af00      	add	r7, sp, #0
 801a1ce:	6078      	str	r0, [r7, #4]
 801a1d0:	4a05      	ldr	r2, [pc, #20]	; (801a1e8 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	601a      	str	r2, [r3, #0]
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	4618      	mov	r0, r3
 801a1da:	f7f0 fe0f 	bl	800adfc <_ZN11MockFailureD1Ev>
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	3708      	adds	r7, #8
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}
 801a1e8:	08028be4 	.word	0x08028be4

0801a1ec <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801a1ec:	b580      	push	{r7, lr}
 801a1ee:	b082      	sub	sp, #8
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	6078      	str	r0, [r7, #4]
 801a1f4:	6878      	ldr	r0, [r7, #4]
 801a1f6:	f7ff ffe7 	bl	801a1c8 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801a1fa:	2134      	movs	r1, #52	; 0x34
 801a1fc:	6878      	ldr	r0, [r7, #4]
 801a1fe:	f7f0 f9cb 	bl	800a598 <_ZdlPvj>
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	4618      	mov	r0, r3
 801a206:	3708      	adds	r7, #8
 801a208:	46bd      	mov	sp, r7
 801a20a:	bd80      	pop	{r7, pc}

0801a20c <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 801a20c:	b580      	push	{r7, lr}
 801a20e:	b082      	sub	sp, #8
 801a210:	af00      	add	r7, sp, #0
 801a212:	6078      	str	r0, [r7, #4]
 801a214:	6039      	str	r1, [r7, #0]
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	3310      	adds	r3, #16
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	683a      	ldr	r2, [r7, #0]
 801a220:	6839      	ldr	r1, [r7, #0]
 801a222:	6878      	ldr	r0, [r7, #4]
 801a224:	4798      	blx	r3
 801a226:	4603      	mov	r3, r0
 801a228:	4618      	mov	r0, r3
 801a22a:	3708      	adds	r7, #8
 801a22c:	46bd      	mov	sp, r7
 801a22e:	bd80      	pop	{r7, pc}

0801a230 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 801a230:	b480      	push	{r7}
 801a232:	b083      	sub	sp, #12
 801a234:	af00      	add	r7, sp, #0
 801a236:	6078      	str	r0, [r7, #4]
 801a238:	6039      	str	r1, [r7, #0]
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	4618      	mov	r0, r3
 801a23e:	370c      	adds	r7, #12
 801a240:	46bd      	mov	sp, r7
 801a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a246:	4770      	bx	lr

0801a248 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801a248:	b480      	push	{r7}
 801a24a:	b083      	sub	sp, #12
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	6078      	str	r0, [r7, #4]
 801a250:	6039      	str	r1, [r7, #0]
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	4618      	mov	r0, r3
 801a256:	370c      	adds	r7, #12
 801a258:	46bd      	mov	sp, r7
 801a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a25e:	4770      	bx	lr

0801a260 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 801a260:	b480      	push	{r7}
 801a262:	b085      	sub	sp, #20
 801a264:	af00      	add	r7, sp, #0
 801a266:	60f8      	str	r0, [r7, #12]
 801a268:	60b9      	str	r1, [r7, #8]
 801a26a:	607a      	str	r2, [r7, #4]
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	4618      	mov	r0, r3
 801a270:	3714      	adds	r7, #20
 801a272:	46bd      	mov	sp, r7
 801a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a278:	4770      	bx	lr

0801a27a <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801a27a:	b480      	push	{r7}
 801a27c:	b085      	sub	sp, #20
 801a27e:	af00      	add	r7, sp, #0
 801a280:	60f8      	str	r0, [r7, #12]
 801a282:	60b9      	str	r1, [r7, #8]
 801a284:	4613      	mov	r3, r2
 801a286:	71fb      	strb	r3, [r7, #7]
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	4618      	mov	r0, r3
 801a28c:	3714      	adds	r7, #20
 801a28e:	46bd      	mov	sp, r7
 801a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a294:	4770      	bx	lr

0801a296 <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801a296:	b480      	push	{r7}
 801a298:	b085      	sub	sp, #20
 801a29a:	af00      	add	r7, sp, #0
 801a29c:	60f8      	str	r0, [r7, #12]
 801a29e:	60b9      	str	r1, [r7, #8]
 801a2a0:	607a      	str	r2, [r7, #4]
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	3714      	adds	r7, #20
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ae:	4770      	bx	lr

0801a2b0 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 801a2b0:	b480      	push	{r7}
 801a2b2:	b085      	sub	sp, #20
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	60f8      	str	r0, [r7, #12]
 801a2b8:	60b9      	str	r1, [r7, #8]
 801a2ba:	607a      	str	r2, [r7, #4]
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	4618      	mov	r0, r3
 801a2c0:	3714      	adds	r7, #20
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c8:	4770      	bx	lr

0801a2ca <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801a2ca:	b480      	push	{r7}
 801a2cc:	b085      	sub	sp, #20
 801a2ce:	af00      	add	r7, sp, #0
 801a2d0:	60f8      	str	r0, [r7, #12]
 801a2d2:	60b9      	str	r1, [r7, #8]
 801a2d4:	607a      	str	r2, [r7, #4]
 801a2d6:	68fb      	ldr	r3, [r7, #12]
 801a2d8:	4618      	mov	r0, r3
 801a2da:	3714      	adds	r7, #20
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e2:	4770      	bx	lr

0801a2e4 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801a2e4:	b480      	push	{r7}
 801a2e6:	b085      	sub	sp, #20
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	60f8      	str	r0, [r7, #12]
 801a2ec:	60b9      	str	r1, [r7, #8]
 801a2ee:	607a      	str	r2, [r7, #4]
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	3714      	adds	r7, #20
 801a2f6:	46bd      	mov	sp, r7
 801a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2fc:	4770      	bx	lr

0801a2fe <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801a2fe:	b480      	push	{r7}
 801a300:	b085      	sub	sp, #20
 801a302:	af00      	add	r7, sp, #0
 801a304:	60f8      	str	r0, [r7, #12]
 801a306:	60b9      	str	r1, [r7, #8]
 801a308:	4639      	mov	r1, r7
 801a30a:	e881 000c 	stmia.w	r1, {r2, r3}
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	4618      	mov	r0, r3
 801a312:	3714      	adds	r7, #20
 801a314:	46bd      	mov	sp, r7
 801a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a31a:	4770      	bx	lr

0801a31c <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801a31c:	b480      	push	{r7}
 801a31e:	b085      	sub	sp, #20
 801a320:	af00      	add	r7, sp, #0
 801a322:	60f8      	str	r0, [r7, #12]
 801a324:	60b9      	str	r1, [r7, #8]
 801a326:	4639      	mov	r1, r7
 801a328:	e881 000c 	stmia.w	r1, {r2, r3}
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	4618      	mov	r0, r3
 801a330:	3714      	adds	r7, #20
 801a332:	46bd      	mov	sp, r7
 801a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a338:	4770      	bx	lr

0801a33a <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801a33a:	b480      	push	{r7}
 801a33c:	b085      	sub	sp, #20
 801a33e:	af00      	add	r7, sp, #0
 801a340:	60f8      	str	r0, [r7, #12]
 801a342:	60b9      	str	r1, [r7, #8]
 801a344:	ed87 0b00 	vstr	d0, [r7]
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	4618      	mov	r0, r3
 801a34c:	3714      	adds	r7, #20
 801a34e:	46bd      	mov	sp, r7
 801a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a354:	4770      	bx	lr

0801a356 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801a356:	b480      	push	{r7}
 801a358:	b087      	sub	sp, #28
 801a35a:	af00      	add	r7, sp, #0
 801a35c:	6178      	str	r0, [r7, #20]
 801a35e:	6139      	str	r1, [r7, #16]
 801a360:	ed87 0b02 	vstr	d0, [r7, #8]
 801a364:	ed87 1b00 	vstr	d1, [r7]
 801a368:	697b      	ldr	r3, [r7, #20]
 801a36a:	4618      	mov	r0, r3
 801a36c:	371c      	adds	r7, #28
 801a36e:	46bd      	mov	sp, r7
 801a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a374:	4770      	bx	lr

0801a376 <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801a376:	b480      	push	{r7}
 801a378:	b085      	sub	sp, #20
 801a37a:	af00      	add	r7, sp, #0
 801a37c:	60f8      	str	r0, [r7, #12]
 801a37e:	60b9      	str	r1, [r7, #8]
 801a380:	607a      	str	r2, [r7, #4]
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	4618      	mov	r0, r3
 801a386:	3714      	adds	r7, #20
 801a388:	46bd      	mov	sp, r7
 801a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a38e:	4770      	bx	lr

0801a390 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801a390:	b480      	push	{r7}
 801a392:	b085      	sub	sp, #20
 801a394:	af00      	add	r7, sp, #0
 801a396:	60f8      	str	r0, [r7, #12]
 801a398:	60b9      	str	r1, [r7, #8]
 801a39a:	607a      	str	r2, [r7, #4]
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	4618      	mov	r0, r3
 801a3a0:	3714      	adds	r7, #20
 801a3a2:	46bd      	mov	sp, r7
 801a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a8:	4770      	bx	lr

0801a3aa <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801a3aa:	b480      	push	{r7}
 801a3ac:	b085      	sub	sp, #20
 801a3ae:	af00      	add	r7, sp, #0
 801a3b0:	60f8      	str	r0, [r7, #12]
 801a3b2:	60b9      	str	r1, [r7, #8]
 801a3b4:	607a      	str	r2, [r7, #4]
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	4618      	mov	r0, r3
 801a3ba:	3714      	adds	r7, #20
 801a3bc:	46bd      	mov	sp, r7
 801a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c2:	4770      	bx	lr

0801a3c4 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801a3c4:	b480      	push	{r7}
 801a3c6:	b085      	sub	sp, #20
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	60f8      	str	r0, [r7, #12]
 801a3cc:	60b9      	str	r1, [r7, #8]
 801a3ce:	607a      	str	r2, [r7, #4]
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	3714      	adds	r7, #20
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3dc:	4770      	bx	lr

0801a3de <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 801a3de:	b480      	push	{r7}
 801a3e0:	b085      	sub	sp, #20
 801a3e2:	af00      	add	r7, sp, #0
 801a3e4:	60f8      	str	r0, [r7, #12]
 801a3e6:	60b9      	str	r1, [r7, #8]
 801a3e8:	607a      	str	r2, [r7, #4]
 801a3ea:	603b      	str	r3, [r7, #0]
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	3714      	adds	r7, #20
 801a3f2:	46bd      	mov	sp, r7
 801a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3f8:	4770      	bx	lr

0801a3fa <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801a3fa:	b480      	push	{r7}
 801a3fc:	b085      	sub	sp, #20
 801a3fe:	af00      	add	r7, sp, #0
 801a400:	60f8      	str	r0, [r7, #12]
 801a402:	60b9      	str	r1, [r7, #8]
 801a404:	607a      	str	r2, [r7, #4]
 801a406:	603b      	str	r3, [r7, #0]
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	4618      	mov	r0, r3
 801a40c:	3714      	adds	r7, #20
 801a40e:	46bd      	mov	sp, r7
 801a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a414:	4770      	bx	lr

0801a416 <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801a416:	b480      	push	{r7}
 801a418:	b085      	sub	sp, #20
 801a41a:	af00      	add	r7, sp, #0
 801a41c:	60f8      	str	r0, [r7, #12]
 801a41e:	60b9      	str	r1, [r7, #8]
 801a420:	607a      	str	r2, [r7, #4]
 801a422:	603b      	str	r3, [r7, #0]
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	4618      	mov	r0, r3
 801a428:	3714      	adds	r7, #20
 801a42a:	46bd      	mov	sp, r7
 801a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a430:	4770      	bx	lr

0801a432 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801a432:	b480      	push	{r7}
 801a434:	b085      	sub	sp, #20
 801a436:	af00      	add	r7, sp, #0
 801a438:	60f8      	str	r0, [r7, #12]
 801a43a:	60b9      	str	r1, [r7, #8]
 801a43c:	607a      	str	r2, [r7, #4]
 801a43e:	603b      	str	r3, [r7, #0]
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	4618      	mov	r0, r3
 801a444:	3714      	adds	r7, #20
 801a446:	46bd      	mov	sp, r7
 801a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a44c:	4770      	bx	lr

0801a44e <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801a44e:	b480      	push	{r7}
 801a450:	b083      	sub	sp, #12
 801a452:	af00      	add	r7, sp, #0
 801a454:	6078      	str	r0, [r7, #4]
 801a456:	6039      	str	r1, [r7, #0]
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	4618      	mov	r0, r3
 801a45c:	370c      	adds	r7, #12
 801a45e:	46bd      	mov	sp, r7
 801a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a464:	4770      	bx	lr

0801a466 <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801a466:	b480      	push	{r7}
 801a468:	b083      	sub	sp, #12
 801a46a:	af00      	add	r7, sp, #0
 801a46c:	6078      	str	r0, [r7, #4]
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	4618      	mov	r0, r3
 801a472:	370c      	adds	r7, #12
 801a474:	46bd      	mov	sp, r7
 801a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a47a:	4770      	bx	lr

0801a47c <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801a47c:	b480      	push	{r7}
 801a47e:	b083      	sub	sp, #12
 801a480:	af00      	add	r7, sp, #0
 801a482:	6078      	str	r0, [r7, #4]
 801a484:	460b      	mov	r3, r1
 801a486:	70fb      	strb	r3, [r7, #3]
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	4618      	mov	r0, r3
 801a48c:	370c      	adds	r7, #12
 801a48e:	46bd      	mov	sp, r7
 801a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a494:	4770      	bx	lr

0801a496 <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801a496:	b480      	push	{r7}
 801a498:	b083      	sub	sp, #12
 801a49a:	af00      	add	r7, sp, #0
 801a49c:	6078      	str	r0, [r7, #4]
 801a49e:	6039      	str	r1, [r7, #0]
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	370c      	adds	r7, #12
 801a4a6:	46bd      	mov	sp, r7
 801a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ac:	4770      	bx	lr

0801a4ae <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801a4ae:	b480      	push	{r7}
 801a4b0:	b083      	sub	sp, #12
 801a4b2:	af00      	add	r7, sp, #0
 801a4b4:	6078      	str	r0, [r7, #4]
 801a4b6:	6039      	str	r1, [r7, #0]
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	4618      	mov	r0, r3
 801a4bc:	370c      	adds	r7, #12
 801a4be:	46bd      	mov	sp, r7
 801a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c4:	4770      	bx	lr

0801a4c6 <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801a4c6:	b480      	push	{r7}
 801a4c8:	b083      	sub	sp, #12
 801a4ca:	af00      	add	r7, sp, #0
 801a4cc:	6078      	str	r0, [r7, #4]
 801a4ce:	6039      	str	r1, [r7, #0]
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	4618      	mov	r0, r3
 801a4d4:	370c      	adds	r7, #12
 801a4d6:	46bd      	mov	sp, r7
 801a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4dc:	4770      	bx	lr

0801a4de <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801a4de:	b480      	push	{r7}
 801a4e0:	b083      	sub	sp, #12
 801a4e2:	af00      	add	r7, sp, #0
 801a4e4:	6078      	str	r0, [r7, #4]
 801a4e6:	6039      	str	r1, [r7, #0]
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	370c      	adds	r7, #12
 801a4ee:	46bd      	mov	sp, r7
 801a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f4:	4770      	bx	lr

0801a4f6 <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801a4f6:	b480      	push	{r7}
 801a4f8:	b085      	sub	sp, #20
 801a4fa:	af00      	add	r7, sp, #0
 801a4fc:	60f8      	str	r0, [r7, #12]
 801a4fe:	1d3b      	adds	r3, r7, #4
 801a500:	e883 0006 	stmia.w	r3, {r1, r2}
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	4618      	mov	r0, r3
 801a508:	3714      	adds	r7, #20
 801a50a:	46bd      	mov	sp, r7
 801a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a510:	4770      	bx	lr

0801a512 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801a512:	b480      	push	{r7}
 801a514:	b085      	sub	sp, #20
 801a516:	af00      	add	r7, sp, #0
 801a518:	60f8      	str	r0, [r7, #12]
 801a51a:	1d3b      	adds	r3, r7, #4
 801a51c:	e883 0006 	stmia.w	r3, {r1, r2}
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	4618      	mov	r0, r3
 801a524:	3714      	adds	r7, #20
 801a526:	46bd      	mov	sp, r7
 801a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a52c:	4770      	bx	lr

0801a52e <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801a52e:	b480      	push	{r7}
 801a530:	b085      	sub	sp, #20
 801a532:	af00      	add	r7, sp, #0
 801a534:	60f8      	str	r0, [r7, #12]
 801a536:	ed87 0b00 	vstr	d0, [r7]
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	4618      	mov	r0, r3
 801a53e:	3714      	adds	r7, #20
 801a540:	46bd      	mov	sp, r7
 801a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a546:	4770      	bx	lr

0801a548 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801a548:	b480      	push	{r7}
 801a54a:	b083      	sub	sp, #12
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	6078      	str	r0, [r7, #4]
 801a550:	6039      	str	r1, [r7, #0]
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	4618      	mov	r0, r3
 801a556:	370c      	adds	r7, #12
 801a558:	46bd      	mov	sp, r7
 801a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a55e:	4770      	bx	lr

0801a560 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801a560:	b480      	push	{r7}
 801a562:	b083      	sub	sp, #12
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
 801a568:	6039      	str	r1, [r7, #0]
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	4618      	mov	r0, r3
 801a56e:	370c      	adds	r7, #12
 801a570:	46bd      	mov	sp, r7
 801a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a576:	4770      	bx	lr

0801a578 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801a578:	b480      	push	{r7}
 801a57a:	b083      	sub	sp, #12
 801a57c:	af00      	add	r7, sp, #0
 801a57e:	6078      	str	r0, [r7, #4]
 801a580:	6039      	str	r1, [r7, #0]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	4618      	mov	r0, r3
 801a586:	370c      	adds	r7, #12
 801a588:	46bd      	mov	sp, r7
 801a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a58e:	4770      	bx	lr

0801a590 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801a590:	b480      	push	{r7}
 801a592:	b083      	sub	sp, #12
 801a594:	af00      	add	r7, sp, #0
 801a596:	6078      	str	r0, [r7, #4]
 801a598:	6039      	str	r1, [r7, #0]
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	4618      	mov	r0, r3
 801a59e:	370c      	adds	r7, #12
 801a5a0:	46bd      	mov	sp, r7
 801a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a6:	4770      	bx	lr

0801a5a8 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801a5a8:	b480      	push	{r7}
 801a5aa:	b083      	sub	sp, #12
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	6078      	str	r0, [r7, #4]
 801a5b0:	6039      	str	r1, [r7, #0]
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	370c      	adds	r7, #12
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5be:	4770      	bx	lr

0801a5c0 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801a5c0:	b480      	push	{r7}
 801a5c2:	b083      	sub	sp, #12
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	6078      	str	r0, [r7, #4]
 801a5c8:	4a04      	ldr	r2, [pc, #16]	; (801a5dc <_ZN16MockExpectedCallC1Ev+0x1c>)
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	601a      	str	r2, [r3, #0]
{
}
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	370c      	adds	r7, #12
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5da:	4770      	bx	lr
 801a5dc:	080292bc 	.word	0x080292bc

0801a5e0 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801a5e0:	b480      	push	{r7}
 801a5e2:	b083      	sub	sp, #12
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	6078      	str	r0, [r7, #4]
 801a5e8:	4a04      	ldr	r2, [pc, #16]	; (801a5fc <_ZN16MockExpectedCallD1Ev+0x1c>)
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	601a      	str	r2, [r3, #0]
{
}
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	370c      	adds	r7, #12
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5fa:	4770      	bx	lr
 801a5fc:	080292bc 	.word	0x080292bc

0801a600 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801a600:	b580      	push	{r7, lr}
 801a602:	b082      	sub	sp, #8
 801a604:	af00      	add	r7, sp, #0
 801a606:	6078      	str	r0, [r7, #4]
 801a608:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	3358      	adds	r3, #88	; 0x58
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	687a      	ldr	r2, [r7, #4]
 801a614:	6839      	ldr	r1, [r7, #0]
 801a616:	4610      	mov	r0, r2
 801a618:	4798      	blx	r3
}
 801a61a:	6878      	ldr	r0, [r7, #4]
 801a61c:	3708      	adds	r7, #8
 801a61e:	46bd      	mov	sp, r7
 801a620:	bd80      	pop	{r7, pc}

0801a622 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801a622:	b580      	push	{r7, lr}
 801a624:	b082      	sub	sp, #8
 801a626:	af00      	add	r7, sp, #0
 801a628:	6078      	str	r0, [r7, #4]
 801a62a:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	3304      	adds	r3, #4
 801a630:	6839      	ldr	r1, [r7, #0]
 801a632:	4618      	mov	r0, r3
 801a634:	f7f2 fbcb 	bl	800cdce <_ZN12SimpleStringaSERKS_>
}
 801a638:	bf00      	nop
 801a63a:	3708      	adds	r7, #8
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd80      	pop	{r7, pc}

0801a640 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801a640:	b580      	push	{r7, lr}
 801a642:	b082      	sub	sp, #8
 801a644:	af00      	add	r7, sp, #0
 801a646:	6078      	str	r0, [r7, #4]
 801a648:	6039      	str	r1, [r7, #0]
    return functionName_;
 801a64a:	683b      	ldr	r3, [r7, #0]
 801a64c:	3304      	adds	r3, #4
 801a64e:	4619      	mov	r1, r3
 801a650:	6878      	ldr	r0, [r7, #4]
 801a652:	f7f2 fba4 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
}
 801a656:	6878      	ldr	r0, [r7, #4]
 801a658:	3708      	adds	r7, #8
 801a65a:	46bd      	mov	sp, r7
 801a65c:	bd80      	pop	{r7, pc}
	...

0801a660 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801a660:	b590      	push	{r4, r7, lr}
 801a662:	b085      	sub	sp, #20
 801a664:	af00      	add	r7, sp, #0
 801a666:	6078      	str	r0, [r7, #4]
 801a668:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	4618      	mov	r0, r3
 801a66e:	f7ff ffa7 	bl	801a5c0 <_ZN16MockExpectedCallC1Ev>
 801a672:	4a2c      	ldr	r2, [pc, #176]	; (801a724 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	601a      	str	r2, [r3, #0]
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	3304      	adds	r3, #4
 801a67c:	492a      	ldr	r1, [pc, #168]	; (801a728 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801a67e:	4618      	mov	r0, r3
 801a680:	f7f2 fb39 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	2200      	movs	r2, #0
 801a688:	731a      	strb	r2, [r3, #12]
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	2200      	movs	r2, #0
 801a68e:	735a      	strb	r2, [r3, #13]
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	2200      	movs	r2, #0
 801a694:	611a      	str	r2, [r3, #16]
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	2200      	movs	r2, #0
 801a69a:	615a      	str	r2, [r3, #20]
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	2200      	movs	r2, #0
 801a6a0:	761a      	strb	r2, [r3, #24]
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801a6a8:	f107 0308 	add.w	r3, r7, #8
 801a6ac:	491e      	ldr	r1, [pc, #120]	; (801a728 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	f7f2 fb21 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801a6b4:	f107 0308 	add.w	r3, r7, #8
 801a6b8:	4619      	mov	r1, r3
 801a6ba:	4620      	mov	r0, r4
 801a6bc:	f003 f840 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
 801a6c0:	f107 0308 	add.w	r3, r7, #8
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	f7f2 fece 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	2200      	movs	r2, #0
 801a6ce:	661a      	str	r2, [r3, #96]	; 0x60
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	2200      	movs	r2, #0
 801a6d4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	2201      	movs	r2, #1
 801a6dc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	2200      	movs	r2, #0
 801a6e4:	669a      	str	r2, [r3, #104]	; 0x68
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	683a      	ldr	r2, [r7, #0]
 801a6ea:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801a6ec:	2246      	movs	r2, #70	; 0x46
 801a6ee:	490f      	ldr	r1, [pc, #60]	; (801a72c <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801a6f0:	2004      	movs	r0, #4
 801a6f2:	f7ef ff3d 	bl	800a570 <_ZnwjPKci>
 801a6f6:	4604      	mov	r4, r0
 801a6f8:	4620      	mov	r0, r4
 801a6fa:	f004 ff36 	bl	801f56a <_ZN18MockNamedValueListC1Ev>
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801a702:	2247      	movs	r2, #71	; 0x47
 801a704:	4909      	ldr	r1, [pc, #36]	; (801a72c <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801a706:	2004      	movs	r0, #4
 801a708:	f7ef ff32 	bl	800a570 <_ZnwjPKci>
 801a70c:	4604      	mov	r4, r0
 801a70e:	4620      	mov	r0, r4
 801a710:	f004 ff2b 	bl	801f56a <_ZN18MockNamedValueListC1Ev>
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	621c      	str	r4, [r3, #32]
}
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	4618      	mov	r0, r3
 801a71c:	3714      	adds	r7, #20
 801a71e:	46bd      	mov	sp, r7
 801a720:	bd90      	pop	{r4, r7, pc}
 801a722:	bf00      	nop
 801a724:	08029100 	.word	0x08029100
 801a728:	080260d8 	.word	0x080260d8
 801a72c:	080260dc 	.word	0x080260dc

0801a730 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a730:	b580      	push	{r7, lr}
 801a732:	b082      	sub	sp, #8
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
 801a738:	4a17      	ldr	r2, [pc, #92]	; (801a798 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	69db      	ldr	r3, [r3, #28]
 801a742:	4618      	mov	r0, r3
 801a744:	f004 ff1f 	bl	801f586 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	69db      	ldr	r3, [r3, #28]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d003      	beq.n	801a758 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801a750:	2104      	movs	r1, #4
 801a752:	4618      	mov	r0, r3
 801a754:	f7ef ff20 	bl	800a598 <_ZdlPvj>
    outputParameters_->clear();
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	6a1b      	ldr	r3, [r3, #32]
 801a75c:	4618      	mov	r0, r3
 801a75e:	f004 ff12 	bl	801f586 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	6a1b      	ldr	r3, [r3, #32]
 801a766:	2b00      	cmp	r3, #0
 801a768:	d003      	beq.n	801a772 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801a76a:	2104      	movs	r1, #4
 801a76c:	4618      	mov	r0, r3
 801a76e:	f7ef ff13 	bl	800a598 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	3328      	adds	r3, #40	; 0x28
 801a776:	4618      	mov	r0, r3
 801a778:	f003 f80c 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	3304      	adds	r3, #4
 801a780:	4618      	mov	r0, r3
 801a782:	f7f2 fe70 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	4618      	mov	r0, r3
 801a78a:	f7ff ff29 	bl	801a5e0 <_ZN16MockExpectedCallD1Ev>
}
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	4618      	mov	r0, r3
 801a792:	3708      	adds	r7, #8
 801a794:	46bd      	mov	sp, r7
 801a796:	bd80      	pop	{r7, pc}
 801a798:	08029100 	.word	0x08029100

0801a79c <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a79c:	b580      	push	{r7, lr}
 801a79e:	b082      	sub	sp, #8
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
}
 801a7a4:	6878      	ldr	r0, [r7, #4]
 801a7a6:	f7ff ffc3 	bl	801a730 <_ZN23MockCheckedExpectedCallD1Ev>
 801a7aa:	2170      	movs	r1, #112	; 0x70
 801a7ac:	6878      	ldr	r0, [r7, #4]
 801a7ae:	f7ef fef3 	bl	800a598 <_ZdlPvj>
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	4618      	mov	r0, r3
 801a7b6:	3708      	adds	r7, #8
 801a7b8:	46bd      	mov	sp, r7
 801a7ba:	bd80      	pop	{r7, pc}

0801a7bc <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801a7bc:	b580      	push	{r7, lr}
 801a7be:	b082      	sub	sp, #8
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	6078      	str	r0, [r7, #4]
 801a7c4:	6039      	str	r1, [r7, #0]
    setName(name);
 801a7c6:	6839      	ldr	r1, [r7, #0]
 801a7c8:	6878      	ldr	r0, [r7, #4]
 801a7ca:	f7ff ff2a 	bl	801a622 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801a7ce:	687b      	ldr	r3, [r7, #4]
}
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	3708      	adds	r7, #8
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	bd80      	pop	{r7, pc}

0801a7d8 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801a7d8:	b590      	push	{r4, r7, lr}
 801a7da:	b087      	sub	sp, #28
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	60f8      	str	r0, [r7, #12]
 801a7e0:	60b9      	str	r1, [r7, #8]
 801a7e2:	4613      	mov	r3, r2
 801a7e4:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a7e6:	225a      	movs	r2, #90	; 0x5a
 801a7e8:	490e      	ldr	r1, [pc, #56]	; (801a824 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801a7ea:	2038      	movs	r0, #56	; 0x38
 801a7ec:	f7ef fec0 	bl	800a570 <_ZnwjPKci>
 801a7f0:	4604      	mov	r4, r0
 801a7f2:	68b9      	ldr	r1, [r7, #8]
 801a7f4:	4620      	mov	r0, r4
 801a7f6:	f001 f851 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a7fa:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	69db      	ldr	r3, [r3, #28]
 801a800:	6979      	ldr	r1, [r7, #20]
 801a802:	4618      	mov	r0, r3
 801a804:	f004 fee2 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a808:	697b      	ldr	r3, [r7, #20]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	3308      	adds	r3, #8
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	79fa      	ldrb	r2, [r7, #7]
 801a812:	4611      	mov	r1, r2
 801a814:	6978      	ldr	r0, [r7, #20]
 801a816:	4798      	blx	r3
    return *this;
 801a818:	68fb      	ldr	r3, [r7, #12]
}
 801a81a:	4618      	mov	r0, r3
 801a81c:	371c      	adds	r7, #28
 801a81e:	46bd      	mov	sp, r7
 801a820:	bd90      	pop	{r4, r7, pc}
 801a822:	bf00      	nop
 801a824:	080260dc 	.word	0x080260dc

0801a828 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801a828:	b590      	push	{r4, r7, lr}
 801a82a:	b087      	sub	sp, #28
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	60f8      	str	r0, [r7, #12]
 801a830:	60b9      	str	r1, [r7, #8]
 801a832:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a834:	2262      	movs	r2, #98	; 0x62
 801a836:	490e      	ldr	r1, [pc, #56]	; (801a870 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801a838:	2038      	movs	r0, #56	; 0x38
 801a83a:	f7ef fe99 	bl	800a570 <_ZnwjPKci>
 801a83e:	4604      	mov	r4, r0
 801a840:	68b9      	ldr	r1, [r7, #8]
 801a842:	4620      	mov	r0, r4
 801a844:	f001 f82a 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a848:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	69db      	ldr	r3, [r3, #28]
 801a84e:	6979      	ldr	r1, [r7, #20]
 801a850:	4618      	mov	r0, r3
 801a852:	f004 febb 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a856:	697b      	ldr	r3, [r7, #20]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	3310      	adds	r3, #16
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	6879      	ldr	r1, [r7, #4]
 801a860:	6978      	ldr	r0, [r7, #20]
 801a862:	4798      	blx	r3
    return *this;
 801a864:	68fb      	ldr	r3, [r7, #12]
}
 801a866:	4618      	mov	r0, r3
 801a868:	371c      	adds	r7, #28
 801a86a:	46bd      	mov	sp, r7
 801a86c:	bd90      	pop	{r4, r7, pc}
 801a86e:	bf00      	nop
 801a870:	080260dc 	.word	0x080260dc

0801a874 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801a874:	b590      	push	{r4, r7, lr}
 801a876:	b087      	sub	sp, #28
 801a878:	af00      	add	r7, sp, #0
 801a87a:	60f8      	str	r0, [r7, #12]
 801a87c:	60b9      	str	r1, [r7, #8]
 801a87e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a880:	226a      	movs	r2, #106	; 0x6a
 801a882:	490e      	ldr	r1, [pc, #56]	; (801a8bc <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801a884:	2038      	movs	r0, #56	; 0x38
 801a886:	f7ef fe73 	bl	800a570 <_ZnwjPKci>
 801a88a:	4604      	mov	r4, r0
 801a88c:	68b9      	ldr	r1, [r7, #8]
 801a88e:	4620      	mov	r0, r4
 801a890:	f001 f804 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a894:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	69db      	ldr	r3, [r3, #28]
 801a89a:	6979      	ldr	r1, [r7, #20]
 801a89c:	4618      	mov	r0, r3
 801a89e:	f004 fe95 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a8a2:	697b      	ldr	r3, [r7, #20]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	330c      	adds	r3, #12
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	6879      	ldr	r1, [r7, #4]
 801a8ac:	6978      	ldr	r0, [r7, #20]
 801a8ae:	4798      	blx	r3
    return *this;
 801a8b0:	68fb      	ldr	r3, [r7, #12]
}
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	371c      	adds	r7, #28
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	bd90      	pop	{r4, r7, pc}
 801a8ba:	bf00      	nop
 801a8bc:	080260dc 	.word	0x080260dc

0801a8c0 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801a8c0:	b590      	push	{r4, r7, lr}
 801a8c2:	b087      	sub	sp, #28
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	60f8      	str	r0, [r7, #12]
 801a8c8:	60b9      	str	r1, [r7, #8]
 801a8ca:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a8cc:	2272      	movs	r2, #114	; 0x72
 801a8ce:	490e      	ldr	r1, [pc, #56]	; (801a908 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801a8d0:	2038      	movs	r0, #56	; 0x38
 801a8d2:	f7ef fe4d 	bl	800a570 <_ZnwjPKci>
 801a8d6:	4604      	mov	r4, r0
 801a8d8:	68b9      	ldr	r1, [r7, #8]
 801a8da:	4620      	mov	r0, r4
 801a8dc:	f000 ffde 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a8e0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	69db      	ldr	r3, [r3, #28]
 801a8e6:	6979      	ldr	r1, [r7, #20]
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	f004 fe6f 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a8ee:	697b      	ldr	r3, [r7, #20]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	3314      	adds	r3, #20
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	6879      	ldr	r1, [r7, #4]
 801a8f8:	6978      	ldr	r0, [r7, #20]
 801a8fa:	4798      	blx	r3
    return *this;
 801a8fc:	68fb      	ldr	r3, [r7, #12]
}
 801a8fe:	4618      	mov	r0, r3
 801a900:	371c      	adds	r7, #28
 801a902:	46bd      	mov	sp, r7
 801a904:	bd90      	pop	{r4, r7, pc}
 801a906:	bf00      	nop
 801a908:	080260dc 	.word	0x080260dc

0801a90c <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801a90c:	b590      	push	{r4, r7, lr}
 801a90e:	b087      	sub	sp, #28
 801a910:	af00      	add	r7, sp, #0
 801a912:	60f8      	str	r0, [r7, #12]
 801a914:	60b9      	str	r1, [r7, #8]
 801a916:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a918:	227a      	movs	r2, #122	; 0x7a
 801a91a:	490e      	ldr	r1, [pc, #56]	; (801a954 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801a91c:	2038      	movs	r0, #56	; 0x38
 801a91e:	f7ef fe27 	bl	800a570 <_ZnwjPKci>
 801a922:	4604      	mov	r4, r0
 801a924:	68b9      	ldr	r1, [r7, #8]
 801a926:	4620      	mov	r0, r4
 801a928:	f000 ffb8 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a92c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	69db      	ldr	r3, [r3, #28]
 801a932:	6979      	ldr	r1, [r7, #20]
 801a934:	4618      	mov	r0, r3
 801a936:	f004 fe49 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a93a:	697b      	ldr	r3, [r7, #20]
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	3318      	adds	r3, #24
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	6879      	ldr	r1, [r7, #4]
 801a944:	6978      	ldr	r0, [r7, #20]
 801a946:	4798      	blx	r3
    return *this;
 801a948:	68fb      	ldr	r3, [r7, #12]
}
 801a94a:	4618      	mov	r0, r3
 801a94c:	371c      	adds	r7, #28
 801a94e:	46bd      	mov	sp, r7
 801a950:	bd90      	pop	{r4, r7, pc}
 801a952:	bf00      	nop
 801a954:	080260dc 	.word	0x080260dc

0801a958 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801a958:	b5b0      	push	{r4, r5, r7, lr}
 801a95a:	b086      	sub	sp, #24
 801a95c:	af02      	add	r7, sp, #8
 801a95e:	60f8      	str	r0, [r7, #12]
 801a960:	60b9      	str	r1, [r7, #8]
 801a962:	4639      	mov	r1, r7
 801a964:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a968:	f7f9 fda8 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801a96c:	4604      	mov	r4, r0
 801a96e:	6823      	ldr	r3, [r4, #0]
 801a970:	3368      	adds	r3, #104	; 0x68
 801a972:	681d      	ldr	r5, [r3, #0]
 801a974:	f7f9 fdb2 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a978:	4603      	mov	r3, r0
 801a97a:	9300      	str	r3, [sp, #0]
 801a97c:	2396      	movs	r3, #150	; 0x96
 801a97e:	4a04      	ldr	r2, [pc, #16]	; (801a990 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801a980:	4904      	ldr	r1, [pc, #16]	; (801a994 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801a982:	4620      	mov	r0, r4
 801a984:	47a8      	blx	r5
    return *this;
 801a986:	68fb      	ldr	r3, [r7, #12]
}
 801a988:	4618      	mov	r0, r3
 801a98a:	3710      	adds	r7, #16
 801a98c:	46bd      	mov	sp, r7
 801a98e:	bdb0      	pop	{r4, r5, r7, pc}
 801a990:	080260dc 	.word	0x080260dc
 801a994:	080260f8 	.word	0x080260f8

0801a998 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801a998:	b5b0      	push	{r4, r5, r7, lr}
 801a99a:	b086      	sub	sp, #24
 801a99c:	af02      	add	r7, sp, #8
 801a99e:	60f8      	str	r0, [r7, #12]
 801a9a0:	60b9      	str	r1, [r7, #8]
 801a9a2:	4639      	mov	r1, r7
 801a9a4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a9a8:	f7f9 fd88 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801a9ac:	4604      	mov	r4, r0
 801a9ae:	6823      	ldr	r3, [r4, #0]
 801a9b0:	3368      	adds	r3, #104	; 0x68
 801a9b2:	681d      	ldr	r5, [r3, #0]
 801a9b4:	f7f9 fd92 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	9300      	str	r3, [sp, #0]
 801a9bc:	239c      	movs	r3, #156	; 0x9c
 801a9be:	4a04      	ldr	r2, [pc, #16]	; (801a9d0 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801a9c0:	4904      	ldr	r1, [pc, #16]	; (801a9d4 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	47a8      	blx	r5
    return *this;
 801a9c6:	68fb      	ldr	r3, [r7, #12]
}
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	3710      	adds	r7, #16
 801a9cc:	46bd      	mov	sp, r7
 801a9ce:	bdb0      	pop	{r4, r5, r7, pc}
 801a9d0:	080260dc 	.word	0x080260dc
 801a9d4:	08026118 	.word	0x08026118

0801a9d8 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801a9d8:	b590      	push	{r4, r7, lr}
 801a9da:	b087      	sub	sp, #28
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	60f8      	str	r0, [r7, #12]
 801a9e0:	60b9      	str	r1, [r7, #8]
 801a9e2:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a9e6:	22a4      	movs	r2, #164	; 0xa4
 801a9e8:	490e      	ldr	r1, [pc, #56]	; (801aa24 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801a9ea:	2038      	movs	r0, #56	; 0x38
 801a9ec:	f7ef fdc0 	bl	800a570 <_ZnwjPKci>
 801a9f0:	4604      	mov	r4, r0
 801a9f2:	68b9      	ldr	r1, [r7, #8]
 801a9f4:	4620      	mov	r0, r4
 801a9f6:	f000 ff51 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a9fa:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	69db      	ldr	r3, [r3, #28]
 801aa00:	6979      	ldr	r1, [r7, #20]
 801aa02:	4618      	mov	r0, r3
 801aa04:	f004 fde2 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801aa08:	697b      	ldr	r3, [r7, #20]
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	3324      	adds	r3, #36	; 0x24
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	ed97 0b00 	vldr	d0, [r7]
 801aa14:	6978      	ldr	r0, [r7, #20]
 801aa16:	4798      	blx	r3
    return *this;
 801aa18:	68fb      	ldr	r3, [r7, #12]
}
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	371c      	adds	r7, #28
 801aa1e:	46bd      	mov	sp, r7
 801aa20:	bd90      	pop	{r4, r7, pc}
 801aa22:	bf00      	nop
 801aa24:	080260dc 	.word	0x080260dc

0801aa28 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801aa28:	b590      	push	{r4, r7, lr}
 801aa2a:	b089      	sub	sp, #36	; 0x24
 801aa2c:	af00      	add	r7, sp, #0
 801aa2e:	6178      	str	r0, [r7, #20]
 801aa30:	6139      	str	r1, [r7, #16]
 801aa32:	ed87 0b02 	vstr	d0, [r7, #8]
 801aa36:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aa3a:	22ac      	movs	r2, #172	; 0xac
 801aa3c:	490f      	ldr	r1, [pc, #60]	; (801aa7c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801aa3e:	2038      	movs	r0, #56	; 0x38
 801aa40:	f7ef fd96 	bl	800a570 <_ZnwjPKci>
 801aa44:	4604      	mov	r4, r0
 801aa46:	6939      	ldr	r1, [r7, #16]
 801aa48:	4620      	mov	r0, r4
 801aa4a:	f000 ff27 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aa4e:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801aa50:	697b      	ldr	r3, [r7, #20]
 801aa52:	69db      	ldr	r3, [r3, #28]
 801aa54:	69f9      	ldr	r1, [r7, #28]
 801aa56:	4618      	mov	r0, r3
 801aa58:	f004 fdb8 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801aa5c:	69fb      	ldr	r3, [r7, #28]
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	3328      	adds	r3, #40	; 0x28
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	ed97 1b00 	vldr	d1, [r7]
 801aa68:	ed97 0b02 	vldr	d0, [r7, #8]
 801aa6c:	69f8      	ldr	r0, [r7, #28]
 801aa6e:	4798      	blx	r3
    return *this;
 801aa70:	697b      	ldr	r3, [r7, #20]
}
 801aa72:	4618      	mov	r0, r3
 801aa74:	3724      	adds	r7, #36	; 0x24
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd90      	pop	{r4, r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	080260dc 	.word	0x080260dc

0801aa80 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801aa80:	b590      	push	{r4, r7, lr}
 801aa82:	b087      	sub	sp, #28
 801aa84:	af00      	add	r7, sp, #0
 801aa86:	60f8      	str	r0, [r7, #12]
 801aa88:	60b9      	str	r1, [r7, #8]
 801aa8a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aa8c:	22b4      	movs	r2, #180	; 0xb4
 801aa8e:	490e      	ldr	r1, [pc, #56]	; (801aac8 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801aa90:	2038      	movs	r0, #56	; 0x38
 801aa92:	f7ef fd6d 	bl	800a570 <_ZnwjPKci>
 801aa96:	4604      	mov	r4, r0
 801aa98:	68b9      	ldr	r1, [r7, #8]
 801aa9a:	4620      	mov	r0, r4
 801aa9c:	f000 fefe 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aaa0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	69db      	ldr	r3, [r3, #28]
 801aaa6:	6979      	ldr	r1, [r7, #20]
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	f004 fd8f 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801aaae:	697b      	ldr	r3, [r7, #20]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	3338      	adds	r3, #56	; 0x38
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	6879      	ldr	r1, [r7, #4]
 801aab8:	6978      	ldr	r0, [r7, #20]
 801aaba:	4798      	blx	r3
    return *this;
 801aabc:	68fb      	ldr	r3, [r7, #12]
}
 801aabe:	4618      	mov	r0, r3
 801aac0:	371c      	adds	r7, #28
 801aac2:	46bd      	mov	sp, r7
 801aac4:	bd90      	pop	{r4, r7, pc}
 801aac6:	bf00      	nop
 801aac8:	080260dc 	.word	0x080260dc

0801aacc <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801aacc:	b590      	push	{r4, r7, lr}
 801aace:	b087      	sub	sp, #28
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	60f8      	str	r0, [r7, #12]
 801aad4:	60b9      	str	r1, [r7, #8]
 801aad6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aad8:	22bc      	movs	r2, #188	; 0xbc
 801aada:	490e      	ldr	r1, [pc, #56]	; (801ab14 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801aadc:	2038      	movs	r0, #56	; 0x38
 801aade:	f7ef fd47 	bl	800a570 <_ZnwjPKci>
 801aae2:	4604      	mov	r4, r0
 801aae4:	68b9      	ldr	r1, [r7, #8]
 801aae6:	4620      	mov	r0, r4
 801aae8:	f000 fed8 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aaec:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	69db      	ldr	r3, [r3, #28]
 801aaf2:	6979      	ldr	r1, [r7, #20]
 801aaf4:	4618      	mov	r0, r3
 801aaf6:	f004 fd69 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801aafa:	697b      	ldr	r3, [r7, #20]
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	332c      	adds	r3, #44	; 0x2c
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	6879      	ldr	r1, [r7, #4]
 801ab04:	6978      	ldr	r0, [r7, #20]
 801ab06:	4798      	blx	r3
    return *this;
 801ab08:	68fb      	ldr	r3, [r7, #12]
}
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	371c      	adds	r7, #28
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd90      	pop	{r4, r7, pc}
 801ab12:	bf00      	nop
 801ab14:	080260dc 	.word	0x080260dc

0801ab18 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801ab18:	b590      	push	{r4, r7, lr}
 801ab1a:	b087      	sub	sp, #28
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	60f8      	str	r0, [r7, #12]
 801ab20:	60b9      	str	r1, [r7, #8]
 801ab22:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ab24:	22c4      	movs	r2, #196	; 0xc4
 801ab26:	490e      	ldr	r1, [pc, #56]	; (801ab60 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801ab28:	2038      	movs	r0, #56	; 0x38
 801ab2a:	f7ef fd21 	bl	800a570 <_ZnwjPKci>
 801ab2e:	4604      	mov	r4, r0
 801ab30:	68b9      	ldr	r1, [r7, #8]
 801ab32:	4620      	mov	r0, r4
 801ab34:	f000 feb2 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ab38:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ab3a:	68fb      	ldr	r3, [r7, #12]
 801ab3c:	69db      	ldr	r3, [r3, #28]
 801ab3e:	6979      	ldr	r1, [r7, #20]
 801ab40:	4618      	mov	r0, r3
 801ab42:	f004 fd43 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ab46:	697b      	ldr	r3, [r7, #20]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	3330      	adds	r3, #48	; 0x30
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	6879      	ldr	r1, [r7, #4]
 801ab50:	6978      	ldr	r0, [r7, #20]
 801ab52:	4798      	blx	r3
    return *this;
 801ab54:	68fb      	ldr	r3, [r7, #12]
}
 801ab56:	4618      	mov	r0, r3
 801ab58:	371c      	adds	r7, #28
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	bd90      	pop	{r4, r7, pc}
 801ab5e:	bf00      	nop
 801ab60:	080260dc 	.word	0x080260dc

0801ab64 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801ab64:	b590      	push	{r4, r7, lr}
 801ab66:	b087      	sub	sp, #28
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	60f8      	str	r0, [r7, #12]
 801ab6c:	60b9      	str	r1, [r7, #8]
 801ab6e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ab70:	22cc      	movs	r2, #204	; 0xcc
 801ab72:	490e      	ldr	r1, [pc, #56]	; (801abac <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801ab74:	2038      	movs	r0, #56	; 0x38
 801ab76:	f7ef fcfb 	bl	800a570 <_ZnwjPKci>
 801ab7a:	4604      	mov	r4, r0
 801ab7c:	68b9      	ldr	r1, [r7, #8]
 801ab7e:	4620      	mov	r0, r4
 801ab80:	f000 fe8c 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ab84:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	69db      	ldr	r3, [r3, #28]
 801ab8a:	6979      	ldr	r1, [r7, #20]
 801ab8c:	4618      	mov	r0, r3
 801ab8e:	f004 fd1d 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ab92:	697b      	ldr	r3, [r7, #20]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	3334      	adds	r3, #52	; 0x34
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	6879      	ldr	r1, [r7, #4]
 801ab9c:	6978      	ldr	r0, [r7, #20]
 801ab9e:	4798      	blx	r3
    return *this;
 801aba0:	68fb      	ldr	r3, [r7, #12]
}
 801aba2:	4618      	mov	r0, r3
 801aba4:	371c      	adds	r7, #28
 801aba6:	46bd      	mov	sp, r7
 801aba8:	bd90      	pop	{r4, r7, pc}
 801abaa:	bf00      	nop
 801abac:	080260dc 	.word	0x080260dc

0801abb0 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801abb0:	b590      	push	{r4, r7, lr}
 801abb2:	b087      	sub	sp, #28
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	60f8      	str	r0, [r7, #12]
 801abb8:	60b9      	str	r1, [r7, #8]
 801abba:	607a      	str	r2, [r7, #4]
 801abbc:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801abbe:	22d4      	movs	r2, #212	; 0xd4
 801abc0:	490e      	ldr	r1, [pc, #56]	; (801abfc <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801abc2:	2038      	movs	r0, #56	; 0x38
 801abc4:	f7ef fcd4 	bl	800a570 <_ZnwjPKci>
 801abc8:	4604      	mov	r4, r0
 801abca:	68b9      	ldr	r1, [r7, #8]
 801abcc:	4620      	mov	r0, r4
 801abce:	f000 fe65 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801abd2:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	69db      	ldr	r3, [r3, #28]
 801abd8:	6979      	ldr	r1, [r7, #20]
 801abda:	4618      	mov	r0, r3
 801abdc:	f004 fcf6 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801abe0:	697b      	ldr	r3, [r7, #20]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	333c      	adds	r3, #60	; 0x3c
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	683a      	ldr	r2, [r7, #0]
 801abea:	6879      	ldr	r1, [r7, #4]
 801abec:	6978      	ldr	r0, [r7, #20]
 801abee:	4798      	blx	r3
    return *this;
 801abf0:	68fb      	ldr	r3, [r7, #12]
}
 801abf2:	4618      	mov	r0, r3
 801abf4:	371c      	adds	r7, #28
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bd90      	pop	{r4, r7, pc}
 801abfa:	bf00      	nop
 801abfc:	080260dc 	.word	0x080260dc

0801ac00 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801ac00:	b590      	push	{r4, r7, lr}
 801ac02:	b087      	sub	sp, #28
 801ac04:	af00      	add	r7, sp, #0
 801ac06:	60f8      	str	r0, [r7, #12]
 801ac08:	60b9      	str	r1, [r7, #8]
 801ac0a:	607a      	str	r2, [r7, #4]
 801ac0c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ac0e:	22dc      	movs	r2, #220	; 0xdc
 801ac10:	490e      	ldr	r1, [pc, #56]	; (801ac4c <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801ac12:	2038      	movs	r0, #56	; 0x38
 801ac14:	f7ef fcac 	bl	800a570 <_ZnwjPKci>
 801ac18:	4604      	mov	r4, r0
 801ac1a:	6879      	ldr	r1, [r7, #4]
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	f000 fe3d 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ac22:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	69db      	ldr	r3, [r3, #28]
 801ac28:	6979      	ldr	r1, [r7, #20]
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	f004 fcce 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801ac30:	697b      	ldr	r3, [r7, #20]
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	3340      	adds	r3, #64	; 0x40
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	683a      	ldr	r2, [r7, #0]
 801ac3a:	68b9      	ldr	r1, [r7, #8]
 801ac3c:	6978      	ldr	r0, [r7, #20]
 801ac3e:	4798      	blx	r3
    return *this;
 801ac40:	68fb      	ldr	r3, [r7, #12]
}
 801ac42:	4618      	mov	r0, r3
 801ac44:	371c      	adds	r7, #28
 801ac46:	46bd      	mov	sp, r7
 801ac48:	bd90      	pop	{r4, r7, pc}
 801ac4a:	bf00      	nop
 801ac4c:	080260dc 	.word	0x080260dc

0801ac50 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801ac50:	b590      	push	{r4, r7, lr}
 801ac52:	b087      	sub	sp, #28
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	60f8      	str	r0, [r7, #12]
 801ac58:	60b9      	str	r1, [r7, #8]
 801ac5a:	607a      	str	r2, [r7, #4]
 801ac5c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ac5e:	22e4      	movs	r2, #228	; 0xe4
 801ac60:	4911      	ldr	r1, [pc, #68]	; (801aca8 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801ac62:	2038      	movs	r0, #56	; 0x38
 801ac64:	f7ef fc84 	bl	800a570 <_ZnwjPKci>
 801ac68:	4604      	mov	r4, r0
 801ac6a:	68b9      	ldr	r1, [r7, #8]
 801ac6c:	4620      	mov	r0, r4
 801ac6e:	f000 fe15 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ac72:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	6a1b      	ldr	r3, [r3, #32]
 801ac78:	6979      	ldr	r1, [r7, #20]
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f004 fca6 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ac80:	697b      	ldr	r3, [r7, #20]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	3330      	adds	r3, #48	; 0x30
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	6879      	ldr	r1, [r7, #4]
 801ac8a:	6978      	ldr	r0, [r7, #20]
 801ac8c:	4798      	blx	r3
    newParameter->setSize(size);
 801ac8e:	697b      	ldr	r3, [r7, #20]
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	3348      	adds	r3, #72	; 0x48
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	6839      	ldr	r1, [r7, #0]
 801ac98:	6978      	ldr	r0, [r7, #20]
 801ac9a:	4798      	blx	r3
    return *this;
 801ac9c:	68fb      	ldr	r3, [r7, #12]
}
 801ac9e:	4618      	mov	r0, r3
 801aca0:	371c      	adds	r7, #28
 801aca2:	46bd      	mov	sp, r7
 801aca4:	bd90      	pop	{r4, r7, pc}
 801aca6:	bf00      	nop
 801aca8:	080260dc 	.word	0x080260dc

0801acac <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801acac:	b590      	push	{r4, r7, lr}
 801acae:	b087      	sub	sp, #28
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	60f8      	str	r0, [r7, #12]
 801acb4:	60b9      	str	r1, [r7, #8]
 801acb6:	607a      	str	r2, [r7, #4]
 801acb8:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801acba:	22ed      	movs	r2, #237	; 0xed
 801acbc:	490e      	ldr	r1, [pc, #56]	; (801acf8 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801acbe:	2038      	movs	r0, #56	; 0x38
 801acc0:	f7ef fc56 	bl	800a570 <_ZnwjPKci>
 801acc4:	4604      	mov	r4, r0
 801acc6:	6879      	ldr	r1, [r7, #4]
 801acc8:	4620      	mov	r0, r4
 801acca:	f000 fde7 	bl	801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801acce:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	6a1b      	ldr	r3, [r3, #32]
 801acd4:	6979      	ldr	r1, [r7, #20]
 801acd6:	4618      	mov	r0, r3
 801acd8:	f004 fc78 	bl	801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801acdc:	697b      	ldr	r3, [r7, #20]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	3340      	adds	r3, #64	; 0x40
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	683a      	ldr	r2, [r7, #0]
 801ace6:	68b9      	ldr	r1, [r7, #8]
 801ace8:	6978      	ldr	r0, [r7, #20]
 801acea:	4798      	blx	r3
    return *this;
 801acec:	68fb      	ldr	r3, [r7, #12]
}
 801acee:	4618      	mov	r0, r3
 801acf0:	371c      	adds	r7, #28
 801acf2:	46bd      	mov	sp, r7
 801acf4:	bd90      	pop	{r4, r7, pc}
 801acf6:	bf00      	nop
 801acf8:	080260dc 	.word	0x080260dc

0801acfc <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801acfc:	b590      	push	{r4, r7, lr}
 801acfe:	b083      	sub	sp, #12
 801ad00:	af00      	add	r7, sp, #0
 801ad02:	6078      	str	r0, [r7, #4]
 801ad04:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	3318      	adds	r3, #24
 801ad0c:	681c      	ldr	r4, [r3, #0]
 801ad0e:	2300      	movs	r3, #0
 801ad10:	2200      	movs	r2, #0
 801ad12:	6839      	ldr	r1, [r7, #0]
 801ad14:	6878      	ldr	r0, [r7, #4]
 801ad16:	47a0      	blx	r4
 801ad18:	4603      	mov	r3, r0
}
 801ad1a:	4618      	mov	r0, r3
 801ad1c:	370c      	adds	r7, #12
 801ad1e:	46bd      	mov	sp, r7
 801ad20:	bd90      	pop	{r4, r7, pc}
	...

0801ad24 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801ad24:	b580      	push	{r7, lr}
 801ad26:	b086      	sub	sp, #24
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	60f8      	str	r0, [r7, #12]
 801ad2c:	60b9      	str	r1, [r7, #8]
 801ad2e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801ad30:	68bb      	ldr	r3, [r7, #8]
 801ad32:	69db      	ldr	r3, [r3, #28]
 801ad34:	6879      	ldr	r1, [r7, #4]
 801ad36:	4618      	mov	r0, r3
 801ad38:	f004 fc7e 	bl	801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ad3c:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801ad3e:	697b      	ldr	r3, [r7, #20]
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d008      	beq.n	801ad56 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801ad44:	697b      	ldr	r3, [r7, #20]
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	3360      	adds	r3, #96	; 0x60
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	68fa      	ldr	r2, [r7, #12]
 801ad4e:	6979      	ldr	r1, [r7, #20]
 801ad50:	4610      	mov	r0, r2
 801ad52:	4798      	blx	r3
 801ad54:	e004      	b.n	801ad60 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	4903      	ldr	r1, [pc, #12]	; (801ad68 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	f7f2 fe10 	bl	800d980 <_Z10StringFromPKc>
}
 801ad60:	68f8      	ldr	r0, [r7, #12]
 801ad62:	3718      	adds	r7, #24
 801ad64:	46bd      	mov	sp, r7
 801ad66:	bd80      	pop	{r7, pc}
 801ad68:	080260d8 	.word	0x080260d8

0801ad6c <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801ad6c:	b580      	push	{r7, lr}
 801ad6e:	b084      	sub	sp, #16
 801ad70:	af00      	add	r7, sp, #0
 801ad72:	6078      	str	r0, [r7, #4]
 801ad74:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	69db      	ldr	r3, [r3, #28]
 801ad7a:	6839      	ldr	r1, [r7, #0]
 801ad7c:	4618      	mov	r0, r3
 801ad7e:	f004 fc5b 	bl	801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ad82:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	bf14      	ite	ne
 801ad8a:	2301      	movne	r3, #1
 801ad8c:	2300      	moveq	r3, #0
 801ad8e:	b2db      	uxtb	r3, r3
}
 801ad90:	4618      	mov	r0, r3
 801ad92:	3710      	adds	r7, #16
 801ad94:	46bd      	mov	sp, r7
 801ad96:	bd80      	pop	{r7, pc}

0801ad98 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	b084      	sub	sp, #16
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	6078      	str	r0, [r7, #4]
 801ada0:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	6a1b      	ldr	r3, [r3, #32]
 801ada6:	6839      	ldr	r1, [r7, #0]
 801ada8:	4618      	mov	r0, r3
 801adaa:	f004 fc45 	bl	801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801adae:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	bf14      	ite	ne
 801adb6:	2301      	movne	r3, #1
 801adb8:	2300      	moveq	r3, #0
 801adba:	b2db      	uxtb	r3, r3
}
 801adbc:	4618      	mov	r0, r3
 801adbe:	3710      	adds	r7, #16
 801adc0:	46bd      	mov	sp, r7
 801adc2:	bd80      	pop	{r7, pc}

0801adc4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801adc4:	b590      	push	{r4, r7, lr}
 801adc6:	b089      	sub	sp, #36	; 0x24
 801adc8:	af00      	add	r7, sp, #0
 801adca:	60f8      	str	r0, [r7, #12]
 801adcc:	60b9      	str	r1, [r7, #8]
 801adce:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801add0:	68bb      	ldr	r3, [r7, #8]
 801add2:	69db      	ldr	r3, [r3, #28]
 801add4:	6879      	ldr	r1, [r7, #4]
 801add6:	4618      	mov	r0, r3
 801add8:	f004 fc2e 	bl	801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801addc:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801adde:	2400      	movs	r4, #0
 801ade0:	69fb      	ldr	r3, [r7, #28]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d004      	beq.n	801adf0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801ade6:	69f9      	ldr	r1, [r7, #28]
 801ade8:	68f8      	ldr	r0, [r7, #12]
 801adea:	f7f0 f829 	bl	800ae40 <_ZN14MockNamedValueC1ERKS_>
 801adee:	e00c      	b.n	801ae0a <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801adf0:	f107 0314 	add.w	r3, r7, #20
 801adf4:	490a      	ldr	r1, [pc, #40]	; (801ae20 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801adf6:	4618      	mov	r0, r3
 801adf8:	f7f1 ff7d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801adfc:	2401      	movs	r4, #1
 801adfe:	f107 0314 	add.w	r3, r7, #20
 801ae02:	4619      	mov	r1, r3
 801ae04:	68f8      	ldr	r0, [r7, #12]
 801ae06:	f002 fc9b 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
 801ae0a:	2c00      	cmp	r4, #0
 801ae0c:	d004      	beq.n	801ae18 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801ae0e:	f107 0314 	add.w	r3, r7, #20
 801ae12:	4618      	mov	r0, r3
 801ae14:	f7f2 fb27 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 801ae18:	68f8      	ldr	r0, [r7, #12]
 801ae1a:	3724      	adds	r7, #36	; 0x24
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	bd90      	pop	{r4, r7, pc}
 801ae20:	080260d8 	.word	0x080260d8

0801ae24 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801ae24:	b590      	push	{r4, r7, lr}
 801ae26:	b089      	sub	sp, #36	; 0x24
 801ae28:	af00      	add	r7, sp, #0
 801ae2a:	60f8      	str	r0, [r7, #12]
 801ae2c:	60b9      	str	r1, [r7, #8]
 801ae2e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801ae30:	68bb      	ldr	r3, [r7, #8]
 801ae32:	6a1b      	ldr	r3, [r3, #32]
 801ae34:	6879      	ldr	r1, [r7, #4]
 801ae36:	4618      	mov	r0, r3
 801ae38:	f004 fbfe 	bl	801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ae3c:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801ae3e:	2400      	movs	r4, #0
 801ae40:	69fb      	ldr	r3, [r7, #28]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d004      	beq.n	801ae50 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801ae46:	69f9      	ldr	r1, [r7, #28]
 801ae48:	68f8      	ldr	r0, [r7, #12]
 801ae4a:	f7ef fff9 	bl	800ae40 <_ZN14MockNamedValueC1ERKS_>
 801ae4e:	e00c      	b.n	801ae6a <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801ae50:	f107 0314 	add.w	r3, r7, #20
 801ae54:	490a      	ldr	r1, [pc, #40]	; (801ae80 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801ae56:	4618      	mov	r0, r3
 801ae58:	f7f1 ff4d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ae5c:	2401      	movs	r4, #1
 801ae5e:	f107 0314 	add.w	r3, r7, #20
 801ae62:	4619      	mov	r1, r3
 801ae64:	68f8      	ldr	r0, [r7, #12]
 801ae66:	f002 fc6b 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
 801ae6a:	2c00      	cmp	r4, #0
 801ae6c:	d004      	beq.n	801ae78 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801ae6e:	f107 0314 	add.w	r3, r7, #20
 801ae72:	4618      	mov	r0, r3
 801ae74:	f7f2 faf7 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 801ae78:	68f8      	ldr	r0, [r7, #12]
 801ae7a:	3724      	adds	r7, #36	; 0x24
 801ae7c:	46bd      	mov	sp, r7
 801ae7e:	bd90      	pop	{r4, r7, pc}
 801ae80:	080260d8 	.word	0x080260d8

0801ae84 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801ae84:	b580      	push	{r7, lr}
 801ae86:	b084      	sub	sp, #16
 801ae88:	af00      	add	r7, sp, #0
 801ae8a:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	69db      	ldr	r3, [r3, #28]
 801ae90:	4618      	mov	r0, r3
 801ae92:	f004 fc00 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801ae96:	60f8      	str	r0, [r7, #12]
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d014      	beq.n	801aec8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801ae9e:	68f9      	ldr	r1, [r7, #12]
 801aea0:	6878      	ldr	r0, [r7, #4]
 801aea2:	f000 fced 	bl	801b880 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801aea6:	4603      	mov	r3, r0
 801aea8:	4618      	mov	r0, r3
 801aeaa:	f000 fd1f 	bl	801b8ec <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801aeae:	4603      	mov	r3, r0
 801aeb0:	f083 0301 	eor.w	r3, r3, #1
 801aeb4:	b2db      	uxtb	r3, r3
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d001      	beq.n	801aebe <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801aeba:	2300      	movs	r3, #0
 801aebc:	e023      	b.n	801af06 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801aebe:	68f8      	ldr	r0, [r7, #12]
 801aec0:	f004 faf2 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801aec4:	60f8      	str	r0, [r7, #12]
 801aec6:	e7e7      	b.n	801ae98 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	6a1b      	ldr	r3, [r3, #32]
 801aecc:	4618      	mov	r0, r3
 801aece:	f004 fbe2 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801aed2:	60f8      	str	r0, [r7, #12]
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d014      	beq.n	801af04 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801aeda:	68f9      	ldr	r1, [r7, #12]
 801aedc:	6878      	ldr	r0, [r7, #4]
 801aede:	f000 fccf 	bl	801b880 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801aee2:	4603      	mov	r3, r0
 801aee4:	4618      	mov	r0, r3
 801aee6:	f000 fd01 	bl	801b8ec <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801aeea:	4603      	mov	r3, r0
 801aeec:	f083 0301 	eor.w	r3, r3, #1
 801aef0:	b2db      	uxtb	r3, r3
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d001      	beq.n	801aefa <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801aef6:	2300      	movs	r3, #0
 801aef8:	e005      	b.n	801af06 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801aefa:	68f8      	ldr	r0, [r7, #12]
 801aefc:	f004 fad4 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801af00:	60f8      	str	r0, [r7, #12]
 801af02:	e7e7      	b.n	801aed4 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801af04:	2301      	movs	r3, #1
}
 801af06:	4618      	mov	r0, r3
 801af08:	3710      	adds	r7, #16
 801af0a:	46bd      	mov	sp, r7
 801af0c:	bd80      	pop	{r7, pc}

0801af0e <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801af0e:	b480      	push	{r7}
 801af10:	b083      	sub	sp, #12
 801af12:	af00      	add	r7, sp, #0
 801af14:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	2201      	movs	r2, #1
 801af1a:	731a      	strb	r2, [r3, #12]
    return *this;
 801af1c:	687b      	ldr	r3, [r7, #4]
}
 801af1e:	4618      	mov	r0, r3
 801af20:	370c      	adds	r7, #12
 801af22:	46bd      	mov	sp, r7
 801af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af28:	4770      	bx	lr

0801af2a <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801af2a:	b480      	push	{r7}
 801af2c:	b083      	sub	sp, #12
 801af2e:	af00      	add	r7, sp, #0
 801af30:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af3a:	429a      	cmp	r2, r3
 801af3c:	bf0c      	ite	eq
 801af3e:	2301      	moveq	r3, #1
 801af40:	2300      	movne	r3, #0
 801af42:	b2db      	uxtb	r3, r3
}
 801af44:	4618      	mov	r0, r3
 801af46:	370c      	adds	r7, #12
 801af48:	46bd      	mov	sp, r7
 801af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af4e:	4770      	bx	lr

0801af50 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801af50:	b480      	push	{r7}
 801af52:	b083      	sub	sp, #12
 801af54:	af00      	add	r7, sp, #0
 801af56:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af60:	429a      	cmp	r2, r3
 801af62:	bf34      	ite	cc
 801af64:	2301      	movcc	r3, #1
 801af66:	2300      	movcs	r3, #0
 801af68:	b2db      	uxtb	r3, r3
}
 801af6a:	4618      	mov	r0, r3
 801af6c:	370c      	adds	r7, #12
 801af6e:	46bd      	mov	sp, r7
 801af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af74:	4770      	bx	lr

0801af76 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801af76:	b580      	push	{r7, lr}
 801af78:	b082      	sub	sp, #8
 801af7a:	af00      	add	r7, sp, #0
 801af7c:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	33cc      	adds	r3, #204	; 0xcc
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	6878      	ldr	r0, [r7, #4]
 801af88:	4798      	blx	r3
 801af8a:	4603      	mov	r3, r0
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d00c      	beq.n	801afaa <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	7b1b      	ldrb	r3, [r3, #12]
 801af94:	f083 0301 	eor.w	r3, r3, #1
 801af98:	b2db      	uxtb	r3, r3
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d103      	bne.n	801afa6 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	7b5b      	ldrb	r3, [r3, #13]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d001      	beq.n	801afaa <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801afa6:	2301      	movs	r3, #1
 801afa8:	e000      	b.n	801afac <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801afaa:	2300      	movs	r3, #0
}
 801afac:	4618      	mov	r0, r3
 801afae:	3708      	adds	r7, #8
 801afb0:	46bd      	mov	sp, r7
 801afb2:	bd80      	pop	{r7, pc}

0801afb4 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b082      	sub	sp, #8
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	33d0      	adds	r3, #208	; 0xd0
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	6878      	ldr	r0, [r7, #4]
 801afc6:	4798      	blx	r3
 801afc8:	4603      	mov	r3, r0
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d006      	beq.n	801afdc <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d001      	beq.n	801afdc <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801afd8:	2301      	movs	r3, #1
 801afda:	e000      	b.n	801afde <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801afdc:	2300      	movs	r3, #0
}
 801afde:	4618      	mov	r0, r3
 801afe0:	3708      	adds	r7, #8
 801afe2:	46bd      	mov	sp, r7
 801afe4:	bd80      	pop	{r7, pc}

0801afe6 <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801afe6:	b580      	push	{r7, lr}
 801afe8:	b082      	sub	sp, #8
 801afea:	af00      	add	r7, sp, #0
 801afec:	6078      	str	r0, [r7, #4]
 801afee:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801aff4:	1c5a      	adds	r2, r3, #1
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	691b      	ldr	r3, [r3, #16]
 801affe:	2b00      	cmp	r3, #0
 801b000:	d00c      	beq.n	801b01c <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801b006:	683a      	ldr	r2, [r7, #0]
 801b008:	429a      	cmp	r2, r3
 801b00a:	d304      	bcc.n	801b016 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	695b      	ldr	r3, [r3, #20]
 801b010:	683a      	ldr	r2, [r7, #0]
 801b012:	429a      	cmp	r2, r3
 801b014:	d902      	bls.n	801b01c <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	2201      	movs	r2, #1
 801b01a:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	33ec      	adds	r3, #236	; 0xec
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	6878      	ldr	r0, [r7, #4]
 801b026:	4798      	blx	r3
}
 801b028:	bf00      	nop
 801b02a:	3708      	adds	r7, #8
 801b02c:	46bd      	mov	sp, r7
 801b02e:	bd80      	pop	{r7, pc}

0801b030 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801b030:	b480      	push	{r7}
 801b032:	b083      	sub	sp, #12
 801b034:	af00      	add	r7, sp, #0
 801b036:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	2201      	movs	r2, #1
 801b03c:	735a      	strb	r2, [r3, #13]
}
 801b03e:	bf00      	nop
 801b040:	370c      	adds	r7, #12
 801b042:	46bd      	mov	sp, r7
 801b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b048:	4770      	bx	lr

0801b04a <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801b04a:	b480      	push	{r7}
 801b04c:	b083      	sub	sp, #12
 801b04e:	af00      	add	r7, sp, #0
 801b050:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	2201      	movs	r2, #1
 801b056:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801b05a:	bf00      	nop
 801b05c:	370c      	adds	r7, #12
 801b05e:	46bd      	mov	sp, r7
 801b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b064:	4770      	bx	lr

0801b066 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801b066:	b580      	push	{r7, lr}
 801b068:	b084      	sub	sp, #16
 801b06a:	af00      	add	r7, sp, #0
 801b06c:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b074:	f083 0301 	eor.w	r3, r3, #1
 801b078:	b2da      	uxtb	r2, r3
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	2200      	movs	r2, #0
 801b084:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	69db      	ldr	r3, [r3, #28]
 801b08a:	4618      	mov	r0, r3
 801b08c:	f004 fb03 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b090:	60f8      	str	r0, [r7, #12]
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d00d      	beq.n	801b0b4 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801b098:	68f9      	ldr	r1, [r7, #12]
 801b09a:	6878      	ldr	r0, [r7, #4]
 801b09c:	f000 fbf0 	bl	801b880 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b0a0:	4603      	mov	r3, r0
 801b0a2:	2100      	movs	r1, #0
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	f000 fc11 	bl	801b8cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801b0aa:	68f8      	ldr	r0, [r7, #12]
 801b0ac:	f004 f9fc 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801b0b0:	60f8      	str	r0, [r7, #12]
 801b0b2:	e7ee      	b.n	801b092 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	6a1b      	ldr	r3, [r3, #32]
 801b0b8:	4618      	mov	r0, r3
 801b0ba:	f004 faec 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b0be:	60f8      	str	r0, [r7, #12]
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d00d      	beq.n	801b0e2 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801b0c6:	68f9      	ldr	r1, [r7, #12]
 801b0c8:	6878      	ldr	r0, [r7, #4]
 801b0ca:	f000 fbd9 	bl	801b880 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b0ce:	4603      	mov	r3, r0
 801b0d0:	2100      	movs	r1, #0
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	f000 fbfa 	bl	801b8cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b0d8:	68f8      	ldr	r0, [r7, #12]
 801b0da:	f004 f9e5 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801b0de:	60f8      	str	r0, [r7, #12]
 801b0e0:	e7ee      	b.n	801b0c0 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801b0e2:	bf00      	nop
 801b0e4:	3710      	adds	r7, #16
 801b0e6:	46bd      	mov	sp, r7
 801b0e8:	bd80      	pop	{r7, pc}

0801b0ea <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801b0ea:	b590      	push	{r4, r7, lr}
 801b0ec:	b087      	sub	sp, #28
 801b0ee:	af00      	add	r7, sp, #0
 801b0f0:	6078      	str	r0, [r7, #4]
 801b0f2:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	69db      	ldr	r3, [r3, #28]
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	f004 facc 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b0fe:	6178      	str	r0, [r7, #20]
 801b100:	697b      	ldr	r3, [r7, #20]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d022      	beq.n	801b14c <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801b106:	f107 030c 	add.w	r3, r7, #12
 801b10a:	6979      	ldr	r1, [r7, #20]
 801b10c:	4618      	mov	r0, r3
 801b10e:	f004 fa06 	bl	801f51e <_ZNK22MockNamedValueListNode7getNameEv>
 801b112:	f107 030c 	add.w	r3, r7, #12
 801b116:	6839      	ldr	r1, [r7, #0]
 801b118:	4618      	mov	r0, r3
 801b11a:	f7f2 f9b0 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801b11e:	4603      	mov	r3, r0
 801b120:	461c      	mov	r4, r3
 801b122:	f107 030c 	add.w	r3, r7, #12
 801b126:	4618      	mov	r0, r3
 801b128:	f7f2 f99d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b12c:	2c00      	cmp	r4, #0
 801b12e:	d008      	beq.n	801b142 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801b130:	6979      	ldr	r1, [r7, #20]
 801b132:	6878      	ldr	r0, [r7, #4]
 801b134:	f000 fba4 	bl	801b880 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b138:	4603      	mov	r3, r0
 801b13a:	2101      	movs	r1, #1
 801b13c:	4618      	mov	r0, r3
 801b13e:	f000 fbc5 	bl	801b8cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801b142:	6978      	ldr	r0, [r7, #20]
 801b144:	f004 f9b0 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801b148:	6178      	str	r0, [r7, #20]
 801b14a:	e7d9      	b.n	801b100 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801b14c:	bf00      	nop
 801b14e:	371c      	adds	r7, #28
 801b150:	46bd      	mov	sp, r7
 801b152:	bd90      	pop	{r4, r7, pc}

0801b154 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801b154:	b590      	push	{r4, r7, lr}
 801b156:	b087      	sub	sp, #28
 801b158:	af00      	add	r7, sp, #0
 801b15a:	6078      	str	r0, [r7, #4]
 801b15c:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	6a1b      	ldr	r3, [r3, #32]
 801b162:	4618      	mov	r0, r3
 801b164:	f004 fa97 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b168:	6178      	str	r0, [r7, #20]
 801b16a:	697b      	ldr	r3, [r7, #20]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d022      	beq.n	801b1b6 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801b170:	f107 030c 	add.w	r3, r7, #12
 801b174:	6979      	ldr	r1, [r7, #20]
 801b176:	4618      	mov	r0, r3
 801b178:	f004 f9d1 	bl	801f51e <_ZNK22MockNamedValueListNode7getNameEv>
 801b17c:	f107 030c 	add.w	r3, r7, #12
 801b180:	6839      	ldr	r1, [r7, #0]
 801b182:	4618      	mov	r0, r3
 801b184:	f7f2 f97b 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801b188:	4603      	mov	r3, r0
 801b18a:	461c      	mov	r4, r3
 801b18c:	f107 030c 	add.w	r3, r7, #12
 801b190:	4618      	mov	r0, r3
 801b192:	f7f2 f968 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b196:	2c00      	cmp	r4, #0
 801b198:	d008      	beq.n	801b1ac <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801b19a:	6979      	ldr	r1, [r7, #20]
 801b19c:	6878      	ldr	r0, [r7, #4]
 801b19e:	f000 fb6f 	bl	801b880 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b1a2:	4603      	mov	r3, r0
 801b1a4:	2101      	movs	r1, #1
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	f000 fb90 	bl	801b8cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801b1ac:	6978      	ldr	r0, [r7, #20]
 801b1ae:	f004 f97b 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801b1b2:	6178      	str	r0, [r7, #20]
 801b1b4:	e7d9      	b.n	801b16a <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801b1b6:	bf00      	nop
 801b1b8:	371c      	adds	r7, #28
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd90      	pop	{r4, r7, pc}
	...

0801b1c0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	b086      	sub	sp, #24
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	60f8      	str	r0, [r7, #12]
 801b1c8:	60b9      	str	r1, [r7, #8]
 801b1ca:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b1cc:	68bb      	ldr	r3, [r7, #8]
 801b1ce:	69db      	ldr	r3, [r3, #28]
 801b1d0:	6879      	ldr	r1, [r7, #4]
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	f004 fa30 	bl	801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b1d8:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801b1da:	697b      	ldr	r3, [r7, #20]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d005      	beq.n	801b1ec <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	6979      	ldr	r1, [r7, #20]
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	f7ff fa0b 	bl	801a600 <_Z10StringFromRK14MockNamedValue>
 801b1ea:	e003      	b.n	801b1f4 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801b1ec:	4903      	ldr	r1, [pc, #12]	; (801b1fc <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801b1ee:	68f8      	ldr	r0, [r7, #12]
 801b1f0:	f7f1 fd81 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
}
 801b1f4:	68f8      	ldr	r0, [r7, #12]
 801b1f6:	3718      	adds	r7, #24
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	bd80      	pop	{r7, pc}
 801b1fc:	08026144 	.word	0x08026144

0801b200 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801b200:	b590      	push	{r4, r7, lr}
 801b202:	b087      	sub	sp, #28
 801b204:	af00      	add	r7, sp, #0
 801b206:	6078      	str	r0, [r7, #4]
 801b208:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	69dc      	ldr	r4, [r3, #28]
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	335c      	adds	r3, #92	; 0x5c
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	f107 020c 	add.w	r2, r7, #12
 801b21a:	6839      	ldr	r1, [r7, #0]
 801b21c:	4610      	mov	r0, r2
 801b21e:	4798      	blx	r3
 801b220:	f107 030c 	add.w	r3, r7, #12
 801b224:	4619      	mov	r1, r3
 801b226:	4620      	mov	r0, r4
 801b228:	f004 fa06 	bl	801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b22c:	6178      	str	r0, [r7, #20]
 801b22e:	f107 030c 	add.w	r3, r7, #12
 801b232:	4618      	mov	r0, r3
 801b234:	f7f2 f917 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801b238:	697b      	ldr	r3, [r7, #20]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d00d      	beq.n	801b25a <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801b23e:	697b      	ldr	r3, [r7, #20]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	3350      	adds	r3, #80	; 0x50
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	6839      	ldr	r1, [r7, #0]
 801b248:	6978      	ldr	r0, [r7, #20]
 801b24a:	4798      	blx	r3
 801b24c:	4603      	mov	r3, r0
 801b24e:	2b00      	cmp	r3, #0
 801b250:	bf14      	ite	ne
 801b252:	2301      	movne	r3, #1
 801b254:	2300      	moveq	r3, #0
 801b256:	b2db      	uxtb	r3, r3
 801b258:	e006      	b.n	801b268 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	7b1b      	ldrb	r3, [r3, #12]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	bf14      	ite	ne
 801b262:	2301      	movne	r3, #1
 801b264:	2300      	moveq	r3, #0
 801b266:	b2db      	uxtb	r3, r3
}
 801b268:	4618      	mov	r0, r3
 801b26a:	371c      	adds	r7, #28
 801b26c:	46bd      	mov	sp, r7
 801b26e:	bd90      	pop	{r4, r7, pc}

0801b270 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801b270:	b590      	push	{r4, r7, lr}
 801b272:	b087      	sub	sp, #28
 801b274:	af00      	add	r7, sp, #0
 801b276:	6078      	str	r0, [r7, #4]
 801b278:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	6a1c      	ldr	r4, [r3, #32]
 801b27e:	683b      	ldr	r3, [r7, #0]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	335c      	adds	r3, #92	; 0x5c
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	f107 020c 	add.w	r2, r7, #12
 801b28a:	6839      	ldr	r1, [r7, #0]
 801b28c:	4610      	mov	r0, r2
 801b28e:	4798      	blx	r3
 801b290:	f107 030c 	add.w	r3, r7, #12
 801b294:	4619      	mov	r1, r3
 801b296:	4620      	mov	r0, r4
 801b298:	f004 f9ce 	bl	801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b29c:	6178      	str	r0, [r7, #20]
 801b29e:	f107 030c 	add.w	r3, r7, #12
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	f7f2 f8df 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801b2a8:	697b      	ldr	r3, [r7, #20]
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d00d      	beq.n	801b2ca <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801b2ae:	697b      	ldr	r3, [r7, #20]
 801b2b0:	681b      	ldr	r3, [r3, #0]
 801b2b2:	3354      	adds	r3, #84	; 0x54
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	6839      	ldr	r1, [r7, #0]
 801b2b8:	6978      	ldr	r0, [r7, #20]
 801b2ba:	4798      	blx	r3
 801b2bc:	4603      	mov	r3, r0
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	bf14      	ite	ne
 801b2c2:	2301      	movne	r3, #1
 801b2c4:	2300      	moveq	r3, #0
 801b2c6:	b2db      	uxtb	r3, r3
 801b2c8:	e006      	b.n	801b2d8 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	7b1b      	ldrb	r3, [r3, #12]
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	bf14      	ite	ne
 801b2d2:	2301      	movne	r3, #1
 801b2d4:	2300      	moveq	r3, #0
 801b2d6:	b2db      	uxtb	r3, r3
}
 801b2d8:	4618      	mov	r0, r3
 801b2da:	371c      	adds	r7, #28
 801b2dc:	46bd      	mov	sp, r7
 801b2de:	bd90      	pop	{r4, r7, pc}

0801b2e0 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2e2:	b0a1      	sub	sp, #132	; 0x84
 801b2e4:	af02      	add	r7, sp, #8
 801b2e6:	6078      	str	r0, [r7, #4]
 801b2e8:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b2ea:	49bc      	ldr	r1, [pc, #752]	; (801b5dc <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b2ec:	6878      	ldr	r0, [r7, #4]
 801b2ee:	f7f1 fd02 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801b2f2:	683b      	ldr	r3, [r7, #0]
 801b2f4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d012      	beq.n	801b322 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801b2fc:	683b      	ldr	r3, [r7, #0]
 801b2fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801b300:	f107 030c 	add.w	r3, r7, #12
 801b304:	49b6      	ldr	r1, [pc, #728]	; (801b5e0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801b306:	4618      	mov	r0, r3
 801b308:	f7f2 fdb4 	bl	800de74 <_Z16StringFromFormatPKcz>
 801b30c:	f107 030c 	add.w	r3, r7, #12
 801b310:	4619      	mov	r1, r3
 801b312:	6878      	ldr	r0, [r7, #4]
 801b314:	f7f1 fd5b 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801b318:	f107 030c 	add.w	r3, r7, #12
 801b31c:	4618      	mov	r0, r3
 801b31e:	f7f2 f8a2 	bl	800d466 <_ZN12SimpleStringD1Ev>

    str += getName();
 801b322:	f107 0314 	add.w	r3, r7, #20
 801b326:	6839      	ldr	r1, [r7, #0]
 801b328:	4618      	mov	r0, r3
 801b32a:	f7ff f989 	bl	801a640 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801b32e:	f107 0314 	add.w	r3, r7, #20
 801b332:	4619      	mov	r1, r3
 801b334:	6878      	ldr	r0, [r7, #4]
 801b336:	f7f2 f913 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801b33a:	f107 0314 	add.w	r3, r7, #20
 801b33e:	4618      	mov	r0, r3
 801b340:	f7f2 f891 	bl	800d466 <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801b344:	49a7      	ldr	r1, [pc, #668]	; (801b5e4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801b346:	6878      	ldr	r0, [r7, #4]
 801b348:	f7f2 f91c 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801b34c:	683b      	ldr	r3, [r7, #0]
 801b34e:	691b      	ldr	r3, [r3, #16]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d02d      	beq.n	801b3b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801b354:	683b      	ldr	r3, [r7, #0]
 801b356:	691a      	ldr	r2, [r3, #16]
 801b358:	683b      	ldr	r3, [r7, #0]
 801b35a:	695b      	ldr	r3, [r3, #20]
 801b35c:	429a      	cmp	r2, r3
 801b35e:	d113      	bne.n	801b388 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801b360:	683b      	ldr	r3, [r7, #0]
 801b362:	691a      	ldr	r2, [r3, #16]
 801b364:	f107 031c 	add.w	r3, r7, #28
 801b368:	499f      	ldr	r1, [pc, #636]	; (801b5e8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801b36a:	4618      	mov	r0, r3
 801b36c:	f7f2 fd82 	bl	800de74 <_Z16StringFromFormatPKcz>
 801b370:	f107 031c 	add.w	r3, r7, #28
 801b374:	4619      	mov	r1, r3
 801b376:	6878      	ldr	r0, [r7, #4]
 801b378:	f7f2 f8f2 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801b37c:	f107 031c 	add.w	r3, r7, #28
 801b380:	4618      	mov	r0, r3
 801b382:	f7f2 f870 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b386:	e013      	b.n	801b3b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801b388:	683b      	ldr	r3, [r7, #0]
 801b38a:	691a      	ldr	r2, [r3, #16]
 801b38c:	683b      	ldr	r3, [r7, #0]
 801b38e:	695b      	ldr	r3, [r3, #20]
 801b390:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801b394:	4995      	ldr	r1, [pc, #596]	; (801b5ec <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801b396:	f7f2 fd6d 	bl	800de74 <_Z16StringFromFormatPKcz>
 801b39a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b39e:	4619      	mov	r1, r3
 801b3a0:	6878      	ldr	r0, [r7, #4]
 801b3a2:	f7f2 f8dd 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801b3a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b3aa:	4618      	mov	r0, r3
 801b3ac:	f7f2 f85b 	bl	800d466 <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801b3b0:	683b      	ldr	r3, [r7, #0]
 801b3b2:	69db      	ldr	r3, [r3, #28]
 801b3b4:	4618      	mov	r0, r3
 801b3b6:	f004 f96e 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b3ba:	4603      	mov	r3, r0
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d109      	bne.n	801b3d4 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801b3c0:	683b      	ldr	r3, [r7, #0]
 801b3c2:	6a1b      	ldr	r3, [r3, #32]
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	f004 f966 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b3ca:	4603      	mov	r3, r0
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d101      	bne.n	801b3d4 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801b3d0:	2301      	movs	r3, #1
 801b3d2:	e000      	b.n	801b3d6 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d00b      	beq.n	801b3f2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801b3da:	683b      	ldr	r3, [r7, #0]
 801b3dc:	7b1b      	ldrb	r3, [r3, #12]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d001      	beq.n	801b3e6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801b3e2:	4b83      	ldr	r3, [pc, #524]	; (801b5f0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801b3e4:	e000      	b.n	801b3e8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801b3e6:	4b83      	ldr	r3, [pc, #524]	; (801b5f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801b3e8:	4619      	mov	r1, r3
 801b3ea:	6878      	ldr	r0, [r7, #4]
 801b3ec:	f7f2 f8ca 	bl	800d584 <_ZN12SimpleStringpLEPKc>
 801b3f0:	e0e3      	b.n	801b5ba <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801b3f2:	683b      	ldr	r3, [r7, #0]
 801b3f4:	69db      	ldr	r3, [r3, #28]
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f004 f94d 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b3fc:	6778      	str	r0, [r7, #116]	; 0x74
 801b3fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b400:	2b00      	cmp	r3, #0
 801b402:	d069      	beq.n	801b4d8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801b404:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b408:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b40a:	4618      	mov	r0, r3
 801b40c:	f004 f89a 	bl	801f544 <_ZNK22MockNamedValueListNode7getTypeEv>
 801b410:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b414:	4618      	mov	r0, r3
 801b416:	f7f1 fff9 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801b41a:	4605      	mov	r5, r0
 801b41c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b420:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b422:	4618      	mov	r0, r3
 801b424:	f004 f87b 	bl	801f51e <_ZNK22MockNamedValueListNode7getNameEv>
 801b428:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b42c:	4618      	mov	r0, r3
 801b42e:	f7f1 ffed 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801b432:	4606      	mov	r6, r0
 801b434:	683b      	ldr	r3, [r7, #0]
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	33a4      	adds	r3, #164	; 0xa4
 801b43a:	681c      	ldr	r4, [r3, #0]
 801b43c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b440:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b442:	4618      	mov	r0, r3
 801b444:	f004 f86b 	bl	801f51e <_ZNK22MockNamedValueListNode7getNameEv>
 801b448:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b44c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b450:	6839      	ldr	r1, [r7, #0]
 801b452:	4618      	mov	r0, r3
 801b454:	47a0      	blx	r4
 801b456:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b45a:	4618      	mov	r0, r3
 801b45c:	f7f1 ffd6 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801b460:	4603      	mov	r3, r0
 801b462:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b466:	9300      	str	r3, [sp, #0]
 801b468:	4633      	mov	r3, r6
 801b46a:	462a      	mov	r2, r5
 801b46c:	4962      	ldr	r1, [pc, #392]	; (801b5f8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801b46e:	f7f2 fd01 	bl	800de74 <_Z16StringFromFormatPKcz>
 801b472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b476:	4619      	mov	r1, r3
 801b478:	6878      	ldr	r0, [r7, #4]
 801b47a:	f7f2 f871 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801b47e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b482:	4618      	mov	r0, r3
 801b484:	f7f1 ffef 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b488:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b48c:	4618      	mov	r0, r3
 801b48e:	f7f1 ffea 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b492:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b496:	4618      	mov	r0, r3
 801b498:	f7f1 ffe5 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b49c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b4a0:	4618      	mov	r0, r3
 801b4a2:	f7f1 ffe0 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b4a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b4aa:	4618      	mov	r0, r3
 801b4ac:	f7f1 ffdb 	bl	800d466 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801b4b0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b4b2:	f003 fff9 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801b4b6:	4603      	mov	r3, r0
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	bf14      	ite	ne
 801b4bc:	2301      	movne	r3, #1
 801b4be:	2300      	moveq	r3, #0
 801b4c0:	b2db      	uxtb	r3, r3
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d003      	beq.n	801b4ce <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801b4c6:	494d      	ldr	r1, [pc, #308]	; (801b5fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b4c8:	6878      	ldr	r0, [r7, #4]
 801b4ca:	f7f2 f85b 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801b4ce:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b4d0:	f003 ffea 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801b4d4:	6778      	str	r0, [r7, #116]	; 0x74
 801b4d6:	e792      	b.n	801b3fe <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801b4d8:	683b      	ldr	r3, [r7, #0]
 801b4da:	69db      	ldr	r3, [r3, #28]
 801b4dc:	4618      	mov	r0, r3
 801b4de:	f004 f8da 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b4e2:	4603      	mov	r3, r0
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d009      	beq.n	801b4fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801b4e8:	683b      	ldr	r3, [r7, #0]
 801b4ea:	6a1b      	ldr	r3, [r3, #32]
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f004 f8d2 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b4f2:	4603      	mov	r3, r0
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d001      	beq.n	801b4fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801b4f8:	2301      	movs	r3, #1
 801b4fa:	e000      	b.n	801b4fe <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801b4fc:	2300      	movs	r3, #0
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d003      	beq.n	801b50a <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801b502:	493e      	ldr	r1, [pc, #248]	; (801b5fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b504:	6878      	ldr	r0, [r7, #4]
 801b506:	f7f2 f83d 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801b50a:	683b      	ldr	r3, [r7, #0]
 801b50c:	6a1b      	ldr	r3, [r3, #32]
 801b50e:	4618      	mov	r0, r3
 801b510:	f004 f8c1 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b514:	6778      	str	r0, [r7, #116]	; 0x74
 801b516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d046      	beq.n	801b5aa <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801b51c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b520:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b522:	4618      	mov	r0, r3
 801b524:	f004 f80e 	bl	801f544 <_ZNK22MockNamedValueListNode7getTypeEv>
 801b528:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b52c:	4618      	mov	r0, r3
 801b52e:	f7f1 ff6d 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801b532:	4604      	mov	r4, r0
 801b534:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b538:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b53a:	4618      	mov	r0, r3
 801b53c:	f003 ffef 	bl	801f51e <_ZNK22MockNamedValueListNode7getNameEv>
 801b540:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b544:	4618      	mov	r0, r3
 801b546:	f7f1 ff61 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801b54a:	4603      	mov	r3, r0
 801b54c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801b550:	4622      	mov	r2, r4
 801b552:	492b      	ldr	r1, [pc, #172]	; (801b600 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801b554:	f7f2 fc8e 	bl	800de74 <_Z16StringFromFormatPKcz>
 801b558:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b55c:	4619      	mov	r1, r3
 801b55e:	6878      	ldr	r0, [r7, #4]
 801b560:	f7f1 fffe 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801b564:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b568:	4618      	mov	r0, r3
 801b56a:	f7f1 ff7c 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b56e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b572:	4618      	mov	r0, r3
 801b574:	f7f1 ff77 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b578:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b57c:	4618      	mov	r0, r3
 801b57e:	f7f1 ff72 	bl	800d466 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801b582:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b584:	f003 ff90 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801b588:	4603      	mov	r3, r0
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	bf14      	ite	ne
 801b58e:	2301      	movne	r3, #1
 801b590:	2300      	moveq	r3, #0
 801b592:	b2db      	uxtb	r3, r3
 801b594:	2b00      	cmp	r3, #0
 801b596:	d003      	beq.n	801b5a0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801b598:	4918      	ldr	r1, [pc, #96]	; (801b5fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b59a:	6878      	ldr	r0, [r7, #4]
 801b59c:	f7f1 fff2 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801b5a0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b5a2:	f003 ff81 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801b5a6:	6778      	str	r0, [r7, #116]	; 0x74
 801b5a8:	e7b5      	b.n	801b516 <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801b5aa:	683b      	ldr	r3, [r7, #0]
 801b5ac:	7b1b      	ldrb	r3, [r3, #12]
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d003      	beq.n	801b5ba <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801b5b2:	4914      	ldr	r1, [pc, #80]	; (801b604 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801b5b4:	6878      	ldr	r0, [r7, #4]
 801b5b6:	f7f1 ffe5 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b5ba:	683b      	ldr	r3, [r7, #0]
 801b5bc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b5be:	683b      	ldr	r3, [r7, #0]
 801b5c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b5c2:	2b01      	cmp	r3, #1
 801b5c4:	d101      	bne.n	801b5ca <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801b5c6:	4c05      	ldr	r4, [pc, #20]	; (801b5dc <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b5c8:	e000      	b.n	801b5cc <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801b5ca:	4c0f      	ldr	r4, [pc, #60]	; (801b608 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801b5cc:	683b      	ldr	r3, [r7, #0]
 801b5ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b5d0:	683a      	ldr	r2, [r7, #0]
 801b5d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b5d4:	2a01      	cmp	r2, #1
 801b5d6:	d119      	bne.n	801b60c <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801b5d8:	4a00      	ldr	r2, [pc, #0]	; (801b5dc <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b5da:	e018      	b.n	801b60e <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801b5dc:	080260d8 	.word	0x080260d8
 801b5e0:	0802614c 	.word	0x0802614c
 801b5e4:	08026164 	.word	0x08026164
 801b5e8:	0802616c 	.word	0x0802616c
 801b5ec:	0802618c 	.word	0x0802618c
 801b5f0:	080261b0 	.word	0x080261b0
 801b5f4:	080261c8 	.word	0x080261c8
 801b5f8:	080261d8 	.word	0x080261d8
 801b5fc:	080261e4 	.word	0x080261e4
 801b600:	080261e8 	.word	0x080261e8
 801b604:	080261f8 	.word	0x080261f8
 801b608:	08026218 	.word	0x08026218
 801b60c:	4a0c      	ldr	r2, [pc, #48]	; (801b640 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801b60e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801b612:	9201      	str	r2, [sp, #4]
 801b614:	9300      	str	r3, [sp, #0]
 801b616:	4623      	mov	r3, r4
 801b618:	460a      	mov	r2, r1
 801b61a:	490a      	ldr	r1, [pc, #40]	; (801b644 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801b61c:	f7f2 fc2a 	bl	800de74 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b620:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b624:	4619      	mov	r1, r3
 801b626:	6878      	ldr	r0, [r7, #4]
 801b628:	f7f1 ff9a 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801b62c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b630:	4618      	mov	r0, r3
 801b632:	f7f1 ff18 	bl	800d466 <_ZN12SimpleStringD1Ev>

    return str;
 801b636:	bf00      	nop
}
 801b638:	6878      	ldr	r0, [r7, #4]
 801b63a:	377c      	adds	r7, #124	; 0x7c
 801b63c:	46bd      	mov	sp, r7
 801b63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b640:	08026218 	.word	0x08026218
 801b644:	0802621c 	.word	0x0802621c

0801b648 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801b648:	b590      	push	{r4, r7, lr}
 801b64a:	b095      	sub	sp, #84	; 0x54
 801b64c:	af00      	add	r7, sp, #0
 801b64e:	6078      	str	r0, [r7, #4]
 801b650:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b652:	496c      	ldr	r1, [pc, #432]	; (801b804 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b654:	6878      	ldr	r0, [r7, #4]
 801b656:	f7f1 fb4e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801b65a:	683b      	ldr	r3, [r7, #0]
 801b65c:	69db      	ldr	r3, [r3, #28]
 801b65e:	4618      	mov	r0, r3
 801b660:	f004 f819 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b664:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d05e      	beq.n	801b72a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801b66c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b66e:	6838      	ldr	r0, [r7, #0]
 801b670:	f000 f906 	bl	801b880 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b674:	4603      	mov	r3, r0
 801b676:	4618      	mov	r0, r3
 801b678:	f000 f938 	bl	801b8ec <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b67c:	4603      	mov	r3, r0
 801b67e:	f083 0301 	eor.w	r3, r3, #1
 801b682:	b2db      	uxtb	r3, r3
 801b684:	2b00      	cmp	r3, #0
 801b686:	d04b      	beq.n	801b720 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801b688:	f107 030c 	add.w	r3, r7, #12
 801b68c:	495d      	ldr	r1, [pc, #372]	; (801b804 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b68e:	4618      	mov	r0, r3
 801b690:	f7f1 fb31 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801b694:	f107 030c 	add.w	r3, r7, #12
 801b698:	4619      	mov	r1, r3
 801b69a:	6878      	ldr	r0, [r7, #4]
 801b69c:	f7f1 ff34 	bl	800d508 <_ZneRK12SimpleStringS1_>
 801b6a0:	4603      	mov	r3, r0
 801b6a2:	461c      	mov	r4, r3
 801b6a4:	f107 030c 	add.w	r3, r7, #12
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	f7f1 fedc 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b6ae:	2c00      	cmp	r4, #0
 801b6b0:	d003      	beq.n	801b6ba <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801b6b2:	4955      	ldr	r1, [pc, #340]	; (801b808 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801b6b4:	6878      	ldr	r0, [r7, #4]
 801b6b6:	f7f1 ff65 	bl	800d584 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801b6ba:	f107 031c 	add.w	r3, r7, #28
 801b6be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	f003 ff3f 	bl	801f544 <_ZNK22MockNamedValueListNode7getTypeEv>
 801b6c6:	f107 031c 	add.w	r3, r7, #28
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	f7f1 fe9e 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801b6d0:	4604      	mov	r4, r0
 801b6d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b6d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b6d8:	4618      	mov	r0, r3
 801b6da:	f003 ff20 	bl	801f51e <_ZNK22MockNamedValueListNode7getNameEv>
 801b6de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	f7f1 fe92 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801b6e8:	4603      	mov	r3, r0
 801b6ea:	f107 0014 	add.w	r0, r7, #20
 801b6ee:	4622      	mov	r2, r4
 801b6f0:	4946      	ldr	r1, [pc, #280]	; (801b80c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801b6f2:	f7f2 fbbf 	bl	800de74 <_Z16StringFromFormatPKcz>
 801b6f6:	f107 0314 	add.w	r3, r7, #20
 801b6fa:	4619      	mov	r1, r3
 801b6fc:	6878      	ldr	r0, [r7, #4]
 801b6fe:	f7f1 ff2f 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801b702:	f107 0314 	add.w	r3, r7, #20
 801b706:	4618      	mov	r0, r3
 801b708:	f7f1 fead 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b70c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b710:	4618      	mov	r0, r3
 801b712:	f7f1 fea8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b716:	f107 031c 	add.w	r3, r7, #28
 801b71a:	4618      	mov	r0, r3
 801b71c:	f7f1 fea3 	bl	800d466 <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801b720:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b722:	f003 fec1 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801b726:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b728:	e79d      	b.n	801b666 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801b72a:	683b      	ldr	r3, [r7, #0]
 801b72c:	6a1b      	ldr	r3, [r3, #32]
 801b72e:	4618      	mov	r0, r3
 801b730:	f003 ffb1 	bl	801f696 <_ZN18MockNamedValueList5beginEv>
 801b734:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d05e      	beq.n	801b7fa <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801b73c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b73e:	6838      	ldr	r0, [r7, #0]
 801b740:	f000 f89e 	bl	801b880 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b744:	4603      	mov	r3, r0
 801b746:	4618      	mov	r0, r3
 801b748:	f000 f8d0 	bl	801b8ec <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b74c:	4603      	mov	r3, r0
 801b74e:	f083 0301 	eor.w	r3, r3, #1
 801b752:	b2db      	uxtb	r3, r3
 801b754:	2b00      	cmp	r3, #0
 801b756:	d04b      	beq.n	801b7f0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801b758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b75c:	4929      	ldr	r1, [pc, #164]	; (801b804 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b75e:	4618      	mov	r0, r3
 801b760:	f7f1 fac9 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801b764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b768:	4619      	mov	r1, r3
 801b76a:	6878      	ldr	r0, [r7, #4]
 801b76c:	f7f1 fecc 	bl	800d508 <_ZneRK12SimpleStringS1_>
 801b770:	4603      	mov	r3, r0
 801b772:	461c      	mov	r4, r3
 801b774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b778:	4618      	mov	r0, r3
 801b77a:	f7f1 fe74 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b77e:	2c00      	cmp	r4, #0
 801b780:	d003      	beq.n	801b78a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801b782:	4921      	ldr	r1, [pc, #132]	; (801b808 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801b784:	6878      	ldr	r0, [r7, #4]
 801b786:	f7f1 fefd 	bl	800d584 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801b78a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b78e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b790:	4618      	mov	r0, r3
 801b792:	f003 fed7 	bl	801f544 <_ZNK22MockNamedValueListNode7getTypeEv>
 801b796:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b79a:	4618      	mov	r0, r3
 801b79c:	f7f1 fe36 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801b7a0:	4604      	mov	r4, r0
 801b7a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b7a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	f003 feb8 	bl	801f51e <_ZNK22MockNamedValueListNode7getNameEv>
 801b7ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	f7f1 fe2a 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801b7b8:	4603      	mov	r3, r0
 801b7ba:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b7be:	4622      	mov	r2, r4
 801b7c0:	4912      	ldr	r1, [pc, #72]	; (801b80c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801b7c2:	f7f2 fb57 	bl	800de74 <_Z16StringFromFormatPKcz>
 801b7c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b7ca:	4619      	mov	r1, r3
 801b7cc:	6878      	ldr	r0, [r7, #4]
 801b7ce:	f7f1 fec7 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801b7d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	f7f1 fe45 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b7dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b7e0:	4618      	mov	r0, r3
 801b7e2:	f7f1 fe40 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b7e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b7ea:	4618      	mov	r0, r3
 801b7ec:	f7f1 fe3b 	bl	800d466 <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801b7f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b7f2:	f003 fe59 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801b7f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b7f8:	e79d      	b.n	801b736 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801b7fa:	bf00      	nop
}
 801b7fc:	6878      	ldr	r0, [r7, #4]
 801b7fe:	3754      	adds	r7, #84	; 0x54
 801b800:	46bd      	mov	sp, r7
 801b802:	bd90      	pop	{r4, r7, pc}
 801b804:	080260d8 	.word	0x080260d8
 801b808:	080261e4 	.word	0x080261e4
 801b80c:	08026244 	.word	0x08026244

0801b810 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801b810:	b590      	push	{r4, r7, lr}
 801b812:	b085      	sub	sp, #20
 801b814:	af00      	add	r7, sp, #0
 801b816:	6078      	str	r0, [r7, #4]
 801b818:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801b81a:	f107 0308 	add.w	r3, r7, #8
 801b81e:	6879      	ldr	r1, [r7, #4]
 801b820:	4618      	mov	r0, r3
 801b822:	f7fe ff0d 	bl	801a640 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801b826:	f107 0308 	add.w	r3, r7, #8
 801b82a:	4619      	mov	r1, r3
 801b82c:	6838      	ldr	r0, [r7, #0]
 801b82e:	f7f1 fe26 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801b832:	4603      	mov	r3, r0
 801b834:	461c      	mov	r4, r3
 801b836:	f107 0308 	add.w	r3, r7, #8
 801b83a:	4618      	mov	r0, r3
 801b83c:	f7f1 fe13 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801b840:	4623      	mov	r3, r4
}
 801b842:	4618      	mov	r0, r3
 801b844:	3714      	adds	r7, #20
 801b846:	46bd      	mov	sp, r7
 801b848:	bd90      	pop	{r4, r7, pc}

0801b84a <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801b84a:	b480      	push	{r7}
 801b84c:	b083      	sub	sp, #12
 801b84e:	af00      	add	r7, sp, #0
 801b850:	6078      	str	r0, [r7, #4]
 801b852:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b85a:	f083 0301 	eor.w	r3, r3, #1
 801b85e:	b2db      	uxtb	r3, r3
 801b860:	2b00      	cmp	r3, #0
 801b862:	d104      	bne.n	801b86e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b868:	683a      	ldr	r2, [r7, #0]
 801b86a:	429a      	cmp	r2, r3
 801b86c:	d101      	bne.n	801b872 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801b86e:	2301      	movs	r3, #1
 801b870:	e000      	b.n	801b874 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801b872:	2300      	movs	r3, #0
}
 801b874:	4618      	mov	r0, r3
 801b876:	370c      	adds	r7, #12
 801b878:	46bd      	mov	sp, r7
 801b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b87e:	4770      	bx	lr

0801b880 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801b880:	b580      	push	{r7, lr}
 801b882:	b082      	sub	sp, #8
 801b884:	af00      	add	r7, sp, #0
 801b886:	6078      	str	r0, [r7, #4]
 801b888:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801b88a:	6838      	ldr	r0, [r7, #0]
 801b88c:	f003 fe18 	bl	801f4c0 <_ZN22MockNamedValueListNode4itemEv>
 801b890:	4603      	mov	r3, r0
}
 801b892:	4618      	mov	r0, r3
 801b894:	3708      	adds	r7, #8
 801b896:	46bd      	mov	sp, r7
 801b898:	bd80      	pop	{r7, pc}
	...

0801b89c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801b89c:	b580      	push	{r7, lr}
 801b89e:	b082      	sub	sp, #8
 801b8a0:	af00      	add	r7, sp, #0
 801b8a2:	6078      	str	r0, [r7, #4]
 801b8a4:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	6839      	ldr	r1, [r7, #0]
 801b8aa:	4618      	mov	r0, r3
 801b8ac:	f001 ff48 	bl	801d740 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b8b0:	4a05      	ldr	r2, [pc, #20]	; (801b8c8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	601a      	str	r2, [r3, #0]
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	2200      	movs	r2, #0
 801b8ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	4618      	mov	r0, r3
 801b8c2:	3708      	adds	r7, #8
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	bd80      	pop	{r7, pc}
 801b8c8:	08029204 	.word	0x08029204

0801b8cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801b8cc:	b480      	push	{r7}
 801b8ce:	b083      	sub	sp, #12
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	6078      	str	r0, [r7, #4]
 801b8d4:	460b      	mov	r3, r1
 801b8d6:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	78fa      	ldrb	r2, [r7, #3]
 801b8dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801b8e0:	bf00      	nop
 801b8e2:	370c      	adds	r7, #12
 801b8e4:	46bd      	mov	sp, r7
 801b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ea:	4770      	bx	lr

0801b8ec <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801b8ec:	b480      	push	{r7}
 801b8ee:	b083      	sub	sp, #12
 801b8f0:	af00      	add	r7, sp, #0
 801b8f2:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	370c      	adds	r7, #12
 801b8fe:	46bd      	mov	sp, r7
 801b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b904:	4770      	bx	lr
	...

0801b908 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801b908:	b580      	push	{r7, lr}
 801b90a:	b082      	sub	sp, #8
 801b90c:	af00      	add	r7, sp, #0
 801b90e:	6078      	str	r0, [r7, #4]
 801b910:	460b      	mov	r3, r1
 801b912:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	3328      	adds	r3, #40	; 0x28
 801b918:	4907      	ldr	r1, [pc, #28]	; (801b938 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801b91a:	4618      	mov	r0, r3
 801b91c:	f002 f9b4 	bl	801dc88 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	3328      	adds	r3, #40	; 0x28
 801b924:	78fa      	ldrb	r2, [r7, #3]
 801b926:	4611      	mov	r1, r2
 801b928:	4618      	mov	r0, r3
 801b92a:	f001 ff5b 	bl	801d7e4 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801b92e:	687b      	ldr	r3, [r7, #4]
}
 801b930:	4618      	mov	r0, r3
 801b932:	3708      	adds	r7, #8
 801b934:	46bd      	mov	sp, r7
 801b936:	bd80      	pop	{r7, pc}
 801b938:	0802624c 	.word	0x0802624c

0801b93c <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801b93c:	b580      	push	{r7, lr}
 801b93e:	b082      	sub	sp, #8
 801b940:	af00      	add	r7, sp, #0
 801b942:	6078      	str	r0, [r7, #4]
 801b944:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	3328      	adds	r3, #40	; 0x28
 801b94a:	4907      	ldr	r1, [pc, #28]	; (801b968 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801b94c:	4618      	mov	r0, r3
 801b94e:	f002 f99b 	bl	801dc88 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	3328      	adds	r3, #40	; 0x28
 801b956:	6839      	ldr	r1, [r7, #0]
 801b958:	4618      	mov	r0, r3
 801b95a:	f001 ff67 	bl	801d82c <_ZN14MockNamedValue8setValueEj>
    return *this;
 801b95e:	687b      	ldr	r3, [r7, #4]
}
 801b960:	4618      	mov	r0, r3
 801b962:	3708      	adds	r7, #8
 801b964:	46bd      	mov	sp, r7
 801b966:	bd80      	pop	{r7, pc}
 801b968:	0802624c 	.word	0x0802624c

0801b96c <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801b96c:	b580      	push	{r7, lr}
 801b96e:	b082      	sub	sp, #8
 801b970:	af00      	add	r7, sp, #0
 801b972:	6078      	str	r0, [r7, #4]
 801b974:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	3328      	adds	r3, #40	; 0x28
 801b97a:	4907      	ldr	r1, [pc, #28]	; (801b998 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801b97c:	4618      	mov	r0, r3
 801b97e:	f002 f983 	bl	801dc88 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	3328      	adds	r3, #40	; 0x28
 801b986:	6839      	ldr	r1, [r7, #0]
 801b988:	4618      	mov	r0, r3
 801b98a:	f001 ff71 	bl	801d870 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801b98e:	687b      	ldr	r3, [r7, #4]
}
 801b990:	4618      	mov	r0, r3
 801b992:	3708      	adds	r7, #8
 801b994:	46bd      	mov	sp, r7
 801b996:	bd80      	pop	{r7, pc}
 801b998:	0802624c 	.word	0x0802624c

0801b99c <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801b99c:	b580      	push	{r7, lr}
 801b99e:	b082      	sub	sp, #8
 801b9a0:	af00      	add	r7, sp, #0
 801b9a2:	6078      	str	r0, [r7, #4]
 801b9a4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	3328      	adds	r3, #40	; 0x28
 801b9aa:	4907      	ldr	r1, [pc, #28]	; (801b9c8 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	f002 f96b 	bl	801dc88 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	3328      	adds	r3, #40	; 0x28
 801b9b6:	6839      	ldr	r1, [r7, #0]
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	f001 ff7b 	bl	801d8b4 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801b9be:	687b      	ldr	r3, [r7, #4]
}
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	3708      	adds	r7, #8
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	bd80      	pop	{r7, pc}
 801b9c8:	0802624c 	.word	0x0802624c

0801b9cc <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801b9cc:	b580      	push	{r7, lr}
 801b9ce:	b082      	sub	sp, #8
 801b9d0:	af00      	add	r7, sp, #0
 801b9d2:	6078      	str	r0, [r7, #4]
 801b9d4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	3328      	adds	r3, #40	; 0x28
 801b9da:	4907      	ldr	r1, [pc, #28]	; (801b9f8 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801b9dc:	4618      	mov	r0, r3
 801b9de:	f002 f953 	bl	801dc88 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	3328      	adds	r3, #40	; 0x28
 801b9e6:	6839      	ldr	r1, [r7, #0]
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	f001 ff85 	bl	801d8f8 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801b9ee:	687b      	ldr	r3, [r7, #4]
}
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	3708      	adds	r7, #8
 801b9f4:	46bd      	mov	sp, r7
 801b9f6:	bd80      	pop	{r7, pc}
 801b9f8:	0802624c 	.word	0x0802624c

0801b9fc <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801b9fc:	b5b0      	push	{r4, r5, r7, lr}
 801b9fe:	b086      	sub	sp, #24
 801ba00:	af02      	add	r7, sp, #8
 801ba02:	60f8      	str	r0, [r7, #12]
 801ba04:	1d3b      	adds	r3, r7, #4
 801ba06:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801ba0a:	f7f8 fd57 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801ba0e:	4604      	mov	r4, r0
 801ba10:	6823      	ldr	r3, [r4, #0]
 801ba12:	3368      	adds	r3, #104	; 0x68
 801ba14:	681d      	ldr	r5, [r3, #0]
 801ba16:	f7f8 fd61 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ba1a:	4603      	mov	r3, r0
 801ba1c:	9300      	str	r3, [sp, #0]
 801ba1e:	f240 2319 	movw	r3, #537	; 0x219
 801ba22:	4a04      	ldr	r2, [pc, #16]	; (801ba34 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801ba24:	4904      	ldr	r1, [pc, #16]	; (801ba38 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801ba26:	4620      	mov	r0, r4
 801ba28:	47a8      	blx	r5
    return *this;
 801ba2a:	68fb      	ldr	r3, [r7, #12]
}
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	3710      	adds	r7, #16
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bdb0      	pop	{r4, r5, r7, pc}
 801ba34:	080260dc 	.word	0x080260dc
 801ba38:	080260f8 	.word	0x080260f8

0801ba3c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801ba3c:	b5b0      	push	{r4, r5, r7, lr}
 801ba3e:	b086      	sub	sp, #24
 801ba40:	af02      	add	r7, sp, #8
 801ba42:	60f8      	str	r0, [r7, #12]
 801ba44:	1d3b      	adds	r3, r7, #4
 801ba46:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801ba4a:	f7f8 fd37 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801ba4e:	4604      	mov	r4, r0
 801ba50:	6823      	ldr	r3, [r4, #0]
 801ba52:	3368      	adds	r3, #104	; 0x68
 801ba54:	681d      	ldr	r5, [r3, #0]
 801ba56:	f7f8 fd41 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ba5a:	4603      	mov	r3, r0
 801ba5c:	9300      	str	r3, [sp, #0]
 801ba5e:	f240 231f 	movw	r3, #543	; 0x21f
 801ba62:	4a04      	ldr	r2, [pc, #16]	; (801ba74 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801ba64:	4904      	ldr	r1, [pc, #16]	; (801ba78 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801ba66:	4620      	mov	r0, r4
 801ba68:	47a8      	blx	r5
    return *this;
 801ba6a:	68fb      	ldr	r3, [r7, #12]
}
 801ba6c:	4618      	mov	r0, r3
 801ba6e:	3710      	adds	r7, #16
 801ba70:	46bd      	mov	sp, r7
 801ba72:	bdb0      	pop	{r4, r5, r7, pc}
 801ba74:	080260dc 	.word	0x080260dc
 801ba78:	08026118 	.word	0x08026118

0801ba7c <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b082      	sub	sp, #8
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	6078      	str	r0, [r7, #4]
 801ba84:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	3328      	adds	r3, #40	; 0x28
 801ba8a:	4907      	ldr	r1, [pc, #28]	; (801baa8 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	f002 f8fb 	bl	801dc88 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	3328      	adds	r3, #40	; 0x28
 801ba96:	6839      	ldr	r1, [r7, #0]
 801ba98:	4618      	mov	r0, r3
 801ba9a:	f002 f837 	bl	801db0c <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801ba9e:	687b      	ldr	r3, [r7, #4]
}
 801baa0:	4618      	mov	r0, r3
 801baa2:	3708      	adds	r7, #8
 801baa4:	46bd      	mov	sp, r7
 801baa6:	bd80      	pop	{r7, pc}
 801baa8:	0802624c 	.word	0x0802624c

0801baac <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801baac:	b580      	push	{r7, lr}
 801baae:	b084      	sub	sp, #16
 801bab0:	af00      	add	r7, sp, #0
 801bab2:	60f8      	str	r0, [r7, #12]
 801bab4:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	3328      	adds	r3, #40	; 0x28
 801babc:	4907      	ldr	r1, [pc, #28]	; (801badc <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801babe:	4618      	mov	r0, r3
 801bac0:	f002 f8e2 	bl	801dc88 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	3328      	adds	r3, #40	; 0x28
 801bac8:	ed97 0b00 	vldr	d0, [r7]
 801bacc:	4618      	mov	r0, r3
 801bace:	f001 ff73 	bl	801d9b8 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801bad2:	68fb      	ldr	r3, [r7, #12]
}
 801bad4:	4618      	mov	r0, r3
 801bad6:	3710      	adds	r7, #16
 801bad8:	46bd      	mov	sp, r7
 801bada:	bd80      	pop	{r7, pc}
 801badc:	0802624c 	.word	0x0802624c

0801bae0 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801bae0:	b580      	push	{r7, lr}
 801bae2:	b082      	sub	sp, #8
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
 801bae8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	3328      	adds	r3, #40	; 0x28
 801baee:	4907      	ldr	r1, [pc, #28]	; (801bb0c <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801baf0:	4618      	mov	r0, r3
 801baf2:	f002 f8c9 	bl	801dc88 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	3328      	adds	r3, #40	; 0x28
 801bafa:	6839      	ldr	r1, [r7, #0]
 801bafc:	4618      	mov	r0, r3
 801bafe:	f001 ff9f 	bl	801da40 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801bb02:	687b      	ldr	r3, [r7, #4]
}
 801bb04:	4618      	mov	r0, r3
 801bb06:	3708      	adds	r7, #8
 801bb08:	46bd      	mov	sp, r7
 801bb0a:	bd80      	pop	{r7, pc}
 801bb0c:	0802624c 	.word	0x0802624c

0801bb10 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801bb10:	b580      	push	{r7, lr}
 801bb12:	b082      	sub	sp, #8
 801bb14:	af00      	add	r7, sp, #0
 801bb16:	6078      	str	r0, [r7, #4]
 801bb18:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	3328      	adds	r3, #40	; 0x28
 801bb1e:	4907      	ldr	r1, [pc, #28]	; (801bb3c <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801bb20:	4618      	mov	r0, r3
 801bb22:	f002 f8b1 	bl	801dc88 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	3328      	adds	r3, #40	; 0x28
 801bb2a:	6839      	ldr	r1, [r7, #0]
 801bb2c:	4618      	mov	r0, r3
 801bb2e:	f001 ffa9 	bl	801da84 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801bb32:	687b      	ldr	r3, [r7, #4]
}
 801bb34:	4618      	mov	r0, r3
 801bb36:	3708      	adds	r7, #8
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	bd80      	pop	{r7, pc}
 801bb3c:	0802624c 	.word	0x0802624c

0801bb40 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801bb40:	b580      	push	{r7, lr}
 801bb42:	b082      	sub	sp, #8
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	6078      	str	r0, [r7, #4]
 801bb48:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	3328      	adds	r3, #40	; 0x28
 801bb4e:	4907      	ldr	r1, [pc, #28]	; (801bb6c <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801bb50:	4618      	mov	r0, r3
 801bb52:	f002 f899 	bl	801dc88 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	3328      	adds	r3, #40	; 0x28
 801bb5a:	6839      	ldr	r1, [r7, #0]
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	f001 ffb3 	bl	801dac8 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801bb62:	687b      	ldr	r3, [r7, #4]
}
 801bb64:	4618      	mov	r0, r3
 801bb66:	3708      	adds	r7, #8
 801bb68:	46bd      	mov	sp, r7
 801bb6a:	bd80      	pop	{r7, pc}
 801bb6c:	0802624c 	.word	0x0802624c

0801bb70 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801bb70:	b480      	push	{r7}
 801bb72:	b083      	sub	sp, #12
 801bb74:	af00      	add	r7, sp, #0
 801bb76:	6078      	str	r0, [r7, #4]
 801bb78:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	2201      	movs	r2, #1
 801bb7e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	2200      	movs	r2, #0
 801bb86:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	683a      	ldr	r2, [r7, #0]
 801bb8e:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801bb90:	687b      	ldr	r3, [r7, #4]
}
 801bb92:	4618      	mov	r0, r3
 801bb94:	370c      	adds	r7, #12
 801bb96:	46bd      	mov	sp, r7
 801bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb9c:	4770      	bx	lr

0801bb9e <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801bb9e:	b580      	push	{r7, lr}
 801bba0:	b082      	sub	sp, #8
 801bba2:	af00      	add	r7, sp, #0
 801bba4:	6078      	str	r0, [r7, #4]
 801bba6:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801bba8:	683b      	ldr	r3, [r7, #0]
 801bbaa:	3328      	adds	r3, #40	; 0x28
 801bbac:	4619      	mov	r1, r3
 801bbae:	6878      	ldr	r0, [r7, #4]
 801bbb0:	f7ef f946 	bl	800ae40 <_ZN14MockNamedValueC1ERKS_>
}
 801bbb4:	6878      	ldr	r0, [r7, #4]
 801bbb6:	3708      	adds	r7, #8
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	bd80      	pop	{r7, pc}

0801bbbc <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801bbbc:	b480      	push	{r7}
 801bbbe:	b085      	sub	sp, #20
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	60f8      	str	r0, [r7, #12]
 801bbc4:	60b9      	str	r1, [r7, #8]
 801bbc6:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	68ba      	ldr	r2, [r7, #8]
 801bbcc:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	687a      	ldr	r2, [r7, #4]
 801bbd2:	615a      	str	r2, [r3, #20]
    return *this;
 801bbd4:	68fb      	ldr	r3, [r7, #12]
}
 801bbd6:	4618      	mov	r0, r3
 801bbd8:	3714      	adds	r7, #20
 801bbda:	46bd      	mov	sp, r7
 801bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbe0:	4770      	bx	lr

0801bbe2 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801bbe2:	b480      	push	{r7}
 801bbe4:	b083      	sub	sp, #12
 801bbe6:	af00      	add	r7, sp, #0
 801bbe8:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	7e1b      	ldrb	r3, [r3, #24]
}
 801bbee:	4618      	mov	r0, r3
 801bbf0:	370c      	adds	r7, #12
 801bbf2:	46bd      	mov	sp, r7
 801bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbf8:	4770      	bx	lr

0801bbfa <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801bbfa:	b480      	push	{r7}
 801bbfc:	b083      	sub	sp, #12
 801bbfe:	af00      	add	r7, sp, #0
 801bc00:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801bc06:	4618      	mov	r0, r3
 801bc08:	370c      	adds	r7, #12
 801bc0a:	46bd      	mov	sp, r7
 801bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc10:	4770      	bx	lr
	...

0801bc14 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b082      	sub	sp, #8
 801bc18:	af00      	add	r7, sp, #0
 801bc1a:	6078      	str	r0, [r7, #4]
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	4618      	mov	r0, r3
 801bc20:	f7fe fcce 	bl	801a5c0 <_ZN16MockExpectedCallC1Ev>
 801bc24:	4a03      	ldr	r2, [pc, #12]	; (801bc34 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	601a      	str	r2, [r3, #0]
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	4618      	mov	r0, r3
 801bc2e:	3708      	adds	r7, #8
 801bc30:	46bd      	mov	sp, r7
 801bc32:	bd80      	pop	{r7, pc}
 801bc34:	08029064 	.word	0x08029064

0801bc38 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801bc38:	b580      	push	{r7, lr}
 801bc3a:	af00      	add	r7, sp, #0
 801bc3c:	4801      	ldr	r0, [pc, #4]	; (801bc44 <__tcf_0+0xc>)
 801bc3e:	f000 f831 	bl	801bca4 <_ZN23MockIgnoredExpectedCallD1Ev>
 801bc42:	bd80      	pop	{r7, pc}
 801bc44:	20000ebc 	.word	0x20000ebc

0801bc48 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801bc48:	b580      	push	{r7, lr}
 801bc4a:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801bc4c:	4b12      	ldr	r3, [pc, #72]	; (801bc98 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bc4e:	781b      	ldrb	r3, [r3, #0]
 801bc50:	f3bf 8f5b 	dmb	ish
 801bc54:	b2db      	uxtb	r3, r3
 801bc56:	f003 0301 	and.w	r3, r3, #1
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	bf0c      	ite	eq
 801bc5e:	2301      	moveq	r3, #1
 801bc60:	2300      	movne	r3, #0
 801bc62:	b2db      	uxtb	r3, r3
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	d013      	beq.n	801bc90 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801bc68:	480b      	ldr	r0, [pc, #44]	; (801bc98 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bc6a:	f003 ff05 	bl	801fa78 <__cxa_guard_acquire>
 801bc6e:	4603      	mov	r3, r0
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	bf14      	ite	ne
 801bc74:	2301      	movne	r3, #1
 801bc76:	2300      	moveq	r3, #0
 801bc78:	b2db      	uxtb	r3, r3
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d008      	beq.n	801bc90 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801bc7e:	4807      	ldr	r0, [pc, #28]	; (801bc9c <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801bc80:	f7ff ffc8 	bl	801bc14 <_ZN23MockIgnoredExpectedCallC1Ev>
 801bc84:	4804      	ldr	r0, [pc, #16]	; (801bc98 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bc86:	f003 ff03 	bl	801fa90 <__cxa_guard_release>
 801bc8a:	4805      	ldr	r0, [pc, #20]	; (801bca0 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801bc8c:	f003 ff27 	bl	801fade <atexit>
    return call;
 801bc90:	4b02      	ldr	r3, [pc, #8]	; (801bc9c <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801bc92:	4618      	mov	r0, r3
 801bc94:	bd80      	pop	{r7, pc}
 801bc96:	bf00      	nop
 801bc98:	20000ec0 	.word	0x20000ec0
 801bc9c:	20000ebc 	.word	0x20000ebc
 801bca0:	0801bc39 	.word	0x0801bc39

0801bca4 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b082      	sub	sp, #8
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
 801bcac:	4a05      	ldr	r2, [pc, #20]	; (801bcc4 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	601a      	str	r2, [r3, #0]
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	f7fe fc93 	bl	801a5e0 <_ZN16MockExpectedCallD1Ev>
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	4618      	mov	r0, r3
 801bcbe:	3708      	adds	r7, #8
 801bcc0:	46bd      	mov	sp, r7
 801bcc2:	bd80      	pop	{r7, pc}
 801bcc4:	08029064 	.word	0x08029064

0801bcc8 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b082      	sub	sp, #8
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
 801bcd0:	6878      	ldr	r0, [r7, #4]
 801bcd2:	f7ff ffe7 	bl	801bca4 <_ZN23MockIgnoredExpectedCallD1Ev>
 801bcd6:	2104      	movs	r1, #4
 801bcd8:	6878      	ldr	r0, [r7, #4]
 801bcda:	f7ee fc5d 	bl	800a598 <_ZdlPvj>
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	4618      	mov	r0, r3
 801bce2:	3708      	adds	r7, #8
 801bce4:	46bd      	mov	sp, r7
 801bce6:	bd80      	pop	{r7, pc}

0801bce8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801bce8:	b580      	push	{r7, lr}
 801bcea:	b082      	sub	sp, #8
 801bcec:	af00      	add	r7, sp, #0
 801bcee:	6078      	str	r0, [r7, #4]
 801bcf0:	4a05      	ldr	r2, [pc, #20]	; (801bd08 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	601a      	str	r2, [r3, #0]
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f001 fd4b 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	4618      	mov	r0, r3
 801bd02:	3708      	adds	r7, #8
 801bd04:	46bd      	mov	sp, r7
 801bd06:	bd80      	pop	{r7, pc}
 801bd08:	08029204 	.word	0x08029204

0801bd0c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801bd0c:	b580      	push	{r7, lr}
 801bd0e:	b082      	sub	sp, #8
 801bd10:	af00      	add	r7, sp, #0
 801bd12:	6078      	str	r0, [r7, #4]
 801bd14:	6878      	ldr	r0, [r7, #4]
 801bd16:	f7ff ffe7 	bl	801bce8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801bd1a:	2138      	movs	r1, #56	; 0x38
 801bd1c:	6878      	ldr	r0, [r7, #4]
 801bd1e:	f7ee fc3b 	bl	800a598 <_ZdlPvj>
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	4618      	mov	r0, r3
 801bd26:	3708      	adds	r7, #8
 801bd28:	46bd      	mov	sp, r7
 801bd2a:	bd80      	pop	{r7, pc}

0801bd2c <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801bd2c:	b480      	push	{r7}
 801bd2e:	b083      	sub	sp, #12
 801bd30:	af00      	add	r7, sp, #0
 801bd32:	6078      	str	r0, [r7, #4]
 801bd34:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	683a      	ldr	r2, [r7, #0]
 801bd3a:	601a      	str	r2, [r3, #0]
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	2200      	movs	r2, #0
 801bd40:	605a      	str	r2, [r3, #4]
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	4618      	mov	r0, r3
 801bd46:	370c      	adds	r7, #12
 801bd48:	46bd      	mov	sp, r7
 801bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd4e:	4770      	bx	lr

0801bd50 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801bd50:	b480      	push	{r7}
 801bd52:	b083      	sub	sp, #12
 801bd54:	af00      	add	r7, sp, #0
 801bd56:	6078      	str	r0, [r7, #4]
 801bd58:	4a06      	ldr	r2, [pc, #24]	; (801bd74 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	601a      	str	r2, [r3, #0]
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	2200      	movs	r2, #0
 801bd62:	605a      	str	r2, [r3, #4]
{
}
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	4618      	mov	r0, r3
 801bd68:	370c      	adds	r7, #12
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd70:	4770      	bx	lr
 801bd72:	bf00      	nop
 801bd74:	08029358 	.word	0x08029358

0801bd78 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801bd78:	b580      	push	{r7, lr}
 801bd7a:	b084      	sub	sp, #16
 801bd7c:	af00      	add	r7, sp, #0
 801bd7e:	6078      	str	r0, [r7, #4]
 801bd80:	4a0d      	ldr	r2, [pc, #52]	; (801bdb8 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	685b      	ldr	r3, [r3, #4]
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d00f      	beq.n	801bdae <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	685b      	ldr	r3, [r3, #4]
 801bd92:	685b      	ldr	r3, [r3, #4]
 801bd94:	60fb      	str	r3, [r7, #12]
        delete head_;
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	685b      	ldr	r3, [r3, #4]
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d003      	beq.n	801bda6 <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801bd9e:	2108      	movs	r1, #8
 801bda0:	4618      	mov	r0, r3
 801bda2:	f7ee fbf9 	bl	800a598 <_ZdlPvj>
        head_ = next;
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	68fa      	ldr	r2, [r7, #12]
 801bdaa:	605a      	str	r2, [r3, #4]
    while (head_) {
 801bdac:	e7eb      	b.n	801bd86 <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	4618      	mov	r0, r3
 801bdb2:	3710      	adds	r7, #16
 801bdb4:	46bd      	mov	sp, r7
 801bdb6:	bd80      	pop	{r7, pc}
 801bdb8:	08029358 	.word	0x08029358

0801bdbc <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801bdbc:	b580      	push	{r7, lr}
 801bdbe:	b082      	sub	sp, #8
 801bdc0:	af00      	add	r7, sp, #0
 801bdc2:	6078      	str	r0, [r7, #4]
}
 801bdc4:	6878      	ldr	r0, [r7, #4]
 801bdc6:	f7ff ffd7 	bl	801bd78 <_ZN21MockExpectedCallsListD1Ev>
 801bdca:	2108      	movs	r1, #8
 801bdcc:	6878      	ldr	r0, [r7, #4]
 801bdce:	f7ee fbe3 	bl	800a598 <_ZdlPvj>
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	4618      	mov	r0, r3
 801bdd6:	3708      	adds	r7, #8
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	bd80      	pop	{r7, pc}

0801bddc <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801bddc:	b580      	push	{r7, lr}
 801bdde:	b084      	sub	sp, #16
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	685b      	ldr	r3, [r3, #4]
 801bde8:	60fb      	str	r3, [r7, #12]
 801bdea:	68fb      	ldr	r3, [r7, #12]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d011      	beq.n	801be14 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801bdf0:	68fb      	ldr	r3, [r7, #12]
 801bdf2:	681a      	ldr	r2, [r3, #0]
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	33d4      	adds	r3, #212	; 0xd4
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	4610      	mov	r0, r2
 801be00:	4798      	blx	r3
 801be02:	4603      	mov	r3, r0
 801be04:	2b00      	cmp	r3, #0
 801be06:	d001      	beq.n	801be0c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801be08:	2301      	movs	r3, #1
 801be0a:	e004      	b.n	801be16 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be0c:	68fb      	ldr	r3, [r7, #12]
 801be0e:	685b      	ldr	r3, [r3, #4]
 801be10:	60fb      	str	r3, [r7, #12]
 801be12:	e7ea      	b.n	801bdea <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801be14:	2300      	movs	r3, #0
}
 801be16:	4618      	mov	r0, r3
 801be18:	3710      	adds	r7, #16
 801be1a:	46bd      	mov	sp, r7
 801be1c:	bd80      	pop	{r7, pc}

0801be1e <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801be1e:	b480      	push	{r7}
 801be20:	b085      	sub	sp, #20
 801be22:	af00      	add	r7, sp, #0
 801be24:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801be26:	2300      	movs	r3, #0
 801be28:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	685b      	ldr	r3, [r3, #4]
 801be2e:	60bb      	str	r3, [r7, #8]
 801be30:	68bb      	ldr	r3, [r7, #8]
 801be32:	2b00      	cmp	r3, #0
 801be34:	d006      	beq.n	801be44 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801be36:	68fb      	ldr	r3, [r7, #12]
 801be38:	3301      	adds	r3, #1
 801be3a:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be3c:	68bb      	ldr	r3, [r7, #8]
 801be3e:	685b      	ldr	r3, [r3, #4]
 801be40:	60bb      	str	r3, [r7, #8]
 801be42:	e7f5      	b.n	801be30 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801be44:	68fb      	ldr	r3, [r7, #12]
}
 801be46:	4618      	mov	r0, r3
 801be48:	3714      	adds	r7, #20
 801be4a:	46bd      	mov	sp, r7
 801be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be50:	4770      	bx	lr

0801be52 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801be52:	b480      	push	{r7}
 801be54:	b083      	sub	sp, #12
 801be56:	af00      	add	r7, sp, #0
 801be58:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	685b      	ldr	r3, [r3, #4]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	bf0c      	ite	eq
 801be62:	2301      	moveq	r3, #1
 801be64:	2300      	movne	r3, #0
 801be66:	b2db      	uxtb	r3, r3
}
 801be68:	4618      	mov	r0, r3
 801be6a:	370c      	adds	r7, #12
 801be6c:	46bd      	mov	sp, r7
 801be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be72:	4770      	bx	lr

0801be74 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801be74:	b580      	push	{r7, lr}
 801be76:	b084      	sub	sp, #16
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
 801be7c:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801be7e:	2300      	movs	r3, #0
 801be80:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	685b      	ldr	r3, [r3, #4]
 801be86:	60bb      	str	r3, [r7, #8]
 801be88:	68bb      	ldr	r3, [r7, #8]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d01d      	beq.n	801beca <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801be8e:	68bb      	ldr	r3, [r7, #8]
 801be90:	681a      	ldr	r2, [r3, #0]
 801be92:	68bb      	ldr	r3, [r7, #8]
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	33b8      	adds	r3, #184	; 0xb8
 801be9a:	681b      	ldr	r3, [r3, #0]
 801be9c:	6839      	ldr	r1, [r7, #0]
 801be9e:	4610      	mov	r0, r2
 801bea0:	4798      	blx	r3
 801bea2:	4603      	mov	r3, r0
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d00c      	beq.n	801bec2 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801bea8:	68bb      	ldr	r3, [r7, #8]
 801beaa:	681a      	ldr	r2, [r3, #0]
 801beac:	68bb      	ldr	r3, [r7, #8]
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	33f8      	adds	r3, #248	; 0xf8
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	4610      	mov	r0, r2
 801beb8:	4798      	blx	r3
 801beba:	4602      	mov	r2, r0
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	4413      	add	r3, r2
 801bec0:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bec2:	68bb      	ldr	r3, [r7, #8]
 801bec4:	685b      	ldr	r3, [r3, #4]
 801bec6:	60bb      	str	r3, [r7, #8]
 801bec8:	e7de      	b.n	801be88 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801beca:	68fb      	ldr	r3, [r7, #12]
}
 801becc:	4618      	mov	r0, r3
 801bece:	3710      	adds	r7, #16
 801bed0:	46bd      	mov	sp, r7
 801bed2:	bd80      	pop	{r7, pc}

0801bed4 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	b084      	sub	sp, #16
 801bed8:	af00      	add	r7, sp, #0
 801beda:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801bedc:	2300      	movs	r3, #0
 801bede:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	685b      	ldr	r3, [r3, #4]
 801bee4:	60bb      	str	r3, [r7, #8]
 801bee6:	68bb      	ldr	r3, [r7, #8]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d015      	beq.n	801bf18 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801beec:	68bb      	ldr	r3, [r7, #8]
 801beee:	681a      	ldr	r2, [r3, #0]
 801bef0:	68bb      	ldr	r3, [r7, #8]
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	681b      	ldr	r3, [r3, #0]
 801bef6:	33c0      	adds	r3, #192	; 0xc0
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	4610      	mov	r0, r2
 801befc:	4798      	blx	r3
 801befe:	4603      	mov	r3, r0
 801bf00:	f083 0301 	eor.w	r3, r3, #1
 801bf04:	b2db      	uxtb	r3, r3
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d002      	beq.n	801bf10 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	3301      	adds	r3, #1
 801bf0e:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bf10:	68bb      	ldr	r3, [r7, #8]
 801bf12:	685b      	ldr	r3, [r3, #4]
 801bf14:	60bb      	str	r3, [r7, #8]
 801bf16:	e7e6      	b.n	801bee6 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801bf18:	68fb      	ldr	r3, [r7, #12]
}
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	3710      	adds	r7, #16
 801bf1e:	46bd      	mov	sp, r7
 801bf20:	bd80      	pop	{r7, pc}

0801bf22 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801bf22:	b580      	push	{r7, lr}
 801bf24:	b084      	sub	sp, #16
 801bf26:	af00      	add	r7, sp, #0
 801bf28:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	685b      	ldr	r3, [r3, #4]
 801bf2e:	60fb      	str	r3, [r7, #12]
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d011      	beq.n	801bf5a <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	681a      	ldr	r2, [r3, #0]
 801bf3a:	68fb      	ldr	r3, [r7, #12]
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	33c8      	adds	r3, #200	; 0xc8
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	4610      	mov	r0, r2
 801bf46:	4798      	blx	r3
 801bf48:	4603      	mov	r3, r0
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d001      	beq.n	801bf52 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801bf4e:	2301      	movs	r3, #1
 801bf50:	e004      	b.n	801bf5c <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bf52:	68fb      	ldr	r3, [r7, #12]
 801bf54:	685b      	ldr	r3, [r3, #4]
 801bf56:	60fb      	str	r3, [r7, #12]
 801bf58:	e7ea      	b.n	801bf30 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801bf5a:	2300      	movs	r3, #0
}
 801bf5c:	4618      	mov	r0, r3
 801bf5e:	3710      	adds	r7, #16
 801bf60:	46bd      	mov	sp, r7
 801bf62:	bd80      	pop	{r7, pc}

0801bf64 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801bf64:	b580      	push	{r7, lr}
 801bf66:	b084      	sub	sp, #16
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	685b      	ldr	r3, [r3, #4]
 801bf70:	60fb      	str	r3, [r7, #12]
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d014      	beq.n	801bfa2 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801bf78:	68fb      	ldr	r3, [r7, #12]
 801bf7a:	681a      	ldr	r2, [r3, #0]
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	33c0      	adds	r3, #192	; 0xc0
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	4610      	mov	r0, r2
 801bf88:	4798      	blx	r3
 801bf8a:	4603      	mov	r3, r0
 801bf8c:	f083 0301 	eor.w	r3, r3, #1
 801bf90:	b2db      	uxtb	r3, r3
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d001      	beq.n	801bf9a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801bf96:	2301      	movs	r3, #1
 801bf98:	e004      	b.n	801bfa4 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	685b      	ldr	r3, [r3, #4]
 801bf9e:	60fb      	str	r3, [r7, #12]
 801bfa0:	e7e7      	b.n	801bf72 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801bfa2:	2300      	movs	r3, #0
}
 801bfa4:	4618      	mov	r0, r3
 801bfa6:	3710      	adds	r7, #16
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	bd80      	pop	{r7, pc}

0801bfac <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801bfac:	b580      	push	{r7, lr}
 801bfae:	b084      	sub	sp, #16
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	6078      	str	r0, [r7, #4]
 801bfb4:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	685b      	ldr	r3, [r3, #4]
 801bfba:	60fb      	str	r3, [r7, #12]
 801bfbc:	68fb      	ldr	r3, [r7, #12]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d012      	beq.n	801bfe8 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801bfc2:	68fb      	ldr	r3, [r7, #12]
 801bfc4:	681a      	ldr	r2, [r3, #0]
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	33b8      	adds	r3, #184	; 0xb8
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	6839      	ldr	r1, [r7, #0]
 801bfd2:	4610      	mov	r0, r2
 801bfd4:	4798      	blx	r3
 801bfd6:	4603      	mov	r3, r0
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d001      	beq.n	801bfe0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801bfdc:	2301      	movs	r3, #1
 801bfde:	e004      	b.n	801bfea <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bfe0:	68fb      	ldr	r3, [r7, #12]
 801bfe2:	685b      	ldr	r3, [r3, #4]
 801bfe4:	60fb      	str	r3, [r7, #12]
 801bfe6:	e7e9      	b.n	801bfbc <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801bfe8:	2300      	movs	r3, #0
}
 801bfea:	4618      	mov	r0, r3
 801bfec:	3710      	adds	r7, #16
 801bfee:	46bd      	mov	sp, r7
 801bff0:	bd80      	pop	{r7, pc}
	...

0801bff4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801bff4:	b590      	push	{r4, r7, lr}
 801bff6:	b085      	sub	sp, #20
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	6078      	str	r0, [r7, #4]
 801bffc:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801bffe:	2273      	movs	r2, #115	; 0x73
 801c000:	4911      	ldr	r1, [pc, #68]	; (801c048 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801c002:	2008      	movs	r0, #8
 801c004:	f7ee fab4 	bl	800a570 <_ZnwjPKci>
 801c008:	4604      	mov	r4, r0
 801c00a:	6839      	ldr	r1, [r7, #0]
 801c00c:	4620      	mov	r0, r4
 801c00e:	f7ff fe8d 	bl	801bd2c <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801c012:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	685b      	ldr	r3, [r3, #4]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d103      	bne.n	801c024 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	68ba      	ldr	r2, [r7, #8]
 801c020:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801c022:	e00d      	b.n	801c040 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	685b      	ldr	r3, [r3, #4]
 801c028:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	685b      	ldr	r3, [r3, #4]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d003      	beq.n	801c03a <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801c032:	68fb      	ldr	r3, [r7, #12]
 801c034:	685b      	ldr	r3, [r3, #4]
 801c036:	60fb      	str	r3, [r7, #12]
 801c038:	e7f7      	b.n	801c02a <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801c03a:	68fb      	ldr	r3, [r7, #12]
 801c03c:	68ba      	ldr	r2, [r7, #8]
 801c03e:	605a      	str	r2, [r3, #4]
}
 801c040:	bf00      	nop
 801c042:	3714      	adds	r7, #20
 801c044:	46bd      	mov	sp, r7
 801c046:	bd90      	pop	{r4, r7, pc}
 801c048:	08026258 	.word	0x08026258

0801c04c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b084      	sub	sp, #16
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
 801c054:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c056:	683b      	ldr	r3, [r7, #0]
 801c058:	685b      	ldr	r3, [r3, #4]
 801c05a:	60fb      	str	r3, [r7, #12]
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d018      	beq.n	801c094 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801c062:	68fb      	ldr	r3, [r7, #12]
 801c064:	681a      	ldr	r2, [r3, #0]
 801c066:	68fb      	ldr	r3, [r7, #12]
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	33c4      	adds	r3, #196	; 0xc4
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	4610      	mov	r0, r2
 801c072:	4798      	blx	r3
 801c074:	4603      	mov	r3, r0
 801c076:	2b00      	cmp	r3, #0
 801c078:	d008      	beq.n	801c08c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	3330      	adds	r3, #48	; 0x30
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	68fa      	ldr	r2, [r7, #12]
 801c084:	6812      	ldr	r2, [r2, #0]
 801c086:	4611      	mov	r1, r2
 801c088:	6878      	ldr	r0, [r7, #4]
 801c08a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c08c:	68fb      	ldr	r3, [r7, #12]
 801c08e:	685b      	ldr	r3, [r3, #4]
 801c090:	60fb      	str	r3, [r7, #12]
 801c092:	e7e3      	b.n	801c05c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801c094:	bf00      	nop
 801c096:	3710      	adds	r7, #16
 801c098:	46bd      	mov	sp, r7
 801c09a:	bd80      	pop	{r7, pc}

0801c09c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801c09c:	b580      	push	{r7, lr}
 801c09e:	b086      	sub	sp, #24
 801c0a0:	af00      	add	r7, sp, #0
 801c0a2:	60f8      	str	r0, [r7, #12]
 801c0a4:	60b9      	str	r1, [r7, #8]
 801c0a6:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	685b      	ldr	r3, [r3, #4]
 801c0ac:	617b      	str	r3, [r7, #20]
 801c0ae:	697b      	ldr	r3, [r7, #20]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d019      	beq.n	801c0e8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801c0b4:	697b      	ldr	r3, [r7, #20]
 801c0b6:	681a      	ldr	r2, [r3, #0]
 801c0b8:	697b      	ldr	r3, [r7, #20]
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	33b8      	adds	r3, #184	; 0xb8
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	68b9      	ldr	r1, [r7, #8]
 801c0c4:	4610      	mov	r0, r2
 801c0c6:	4798      	blx	r3
 801c0c8:	4603      	mov	r3, r0
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d008      	beq.n	801c0e0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	3330      	adds	r3, #48	; 0x30
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	697a      	ldr	r2, [r7, #20]
 801c0d8:	6812      	ldr	r2, [r2, #0]
 801c0da:	4611      	mov	r1, r2
 801c0dc:	68f8      	ldr	r0, [r7, #12]
 801c0de:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c0e0:	697b      	ldr	r3, [r7, #20]
 801c0e2:	685b      	ldr	r3, [r3, #4]
 801c0e4:	617b      	str	r3, [r7, #20]
 801c0e6:	e7e2      	b.n	801c0ae <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801c0e8:	bf00      	nop
 801c0ea:	3718      	adds	r7, #24
 801c0ec:	46bd      	mov	sp, r7
 801c0ee:	bd80      	pop	{r7, pc}

0801c0f0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	b084      	sub	sp, #16
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	6078      	str	r0, [r7, #4]
 801c0f8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c0fa:	683b      	ldr	r3, [r7, #0]
 801c0fc:	685b      	ldr	r3, [r3, #4]
 801c0fe:	60fb      	str	r3, [r7, #12]
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	2b00      	cmp	r3, #0
 801c104:	d00c      	beq.n	801c120 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	3330      	adds	r3, #48	; 0x30
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	68fa      	ldr	r2, [r7, #12]
 801c110:	6812      	ldr	r2, [r2, #0]
 801c112:	4611      	mov	r1, r2
 801c114:	6878      	ldr	r0, [r7, #4]
 801c116:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	685b      	ldr	r3, [r3, #4]
 801c11c:	60fb      	str	r3, [r7, #12]
 801c11e:	e7ef      	b.n	801c100 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801c120:	bf00      	nop
 801c122:	3710      	adds	r7, #16
 801c124:	46bd      	mov	sp, r7
 801c126:	bd80      	pop	{r7, pc}

0801c128 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801c128:	b580      	push	{r7, lr}
 801c12a:	b084      	sub	sp, #16
 801c12c:	af00      	add	r7, sp, #0
 801c12e:	6078      	str	r0, [r7, #4]
 801c130:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	685b      	ldr	r3, [r3, #4]
 801c136:	60fb      	str	r3, [r7, #12]
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d016      	beq.n	801c16c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	681a      	ldr	r2, [r3, #0]
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	33b8      	adds	r3, #184	; 0xb8
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	6839      	ldr	r1, [r7, #0]
 801c14e:	4610      	mov	r0, r2
 801c150:	4798      	blx	r3
 801c152:	4603      	mov	r3, r0
 801c154:	f083 0301 	eor.w	r3, r3, #1
 801c158:	b2db      	uxtb	r3, r3
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	d002      	beq.n	801c164 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c15e:	68fb      	ldr	r3, [r7, #12]
 801c160:	2200      	movs	r2, #0
 801c162:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	685b      	ldr	r3, [r3, #4]
 801c168:	60fb      	str	r3, [r7, #12]
 801c16a:	e7e5      	b.n	801c138 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	3388      	adds	r3, #136	; 0x88
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	6878      	ldr	r0, [r7, #4]
 801c176:	4798      	blx	r3
}
 801c178:	bf00      	nop
 801c17a:	3710      	adds	r7, #16
 801c17c:	46bd      	mov	sp, r7
 801c17e:	bd80      	pop	{r7, pc}

0801c180 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801c180:	b580      	push	{r7, lr}
 801c182:	b084      	sub	sp, #16
 801c184:	af00      	add	r7, sp, #0
 801c186:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	685b      	ldr	r3, [r3, #4]
 801c18c:	60fb      	str	r3, [r7, #12]
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d015      	beq.n	801c1c0 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801c194:	68fb      	ldr	r3, [r7, #12]
 801c196:	681a      	ldr	r2, [r3, #0]
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	33d4      	adds	r3, #212	; 0xd4
 801c1a0:	681b      	ldr	r3, [r3, #0]
 801c1a2:	4610      	mov	r0, r2
 801c1a4:	4798      	blx	r3
 801c1a6:	4603      	mov	r3, r0
 801c1a8:	f083 0301 	eor.w	r3, r3, #1
 801c1ac:	b2db      	uxtb	r3, r3
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d002      	beq.n	801c1b8 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801c1b2:	68fb      	ldr	r3, [r7, #12]
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	685b      	ldr	r3, [r3, #4]
 801c1bc:	60fb      	str	r3, [r7, #12]
 801c1be:	e7e6      	b.n	801c18e <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	3388      	adds	r3, #136	; 0x88
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	6878      	ldr	r0, [r7, #4]
 801c1ca:	4798      	blx	r3
}
 801c1cc:	bf00      	nop
 801c1ce:	3710      	adds	r7, #16
 801c1d0:	46bd      	mov	sp, r7
 801c1d2:	bd80      	pop	{r7, pc}

0801c1d4 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801c1d4:	b580      	push	{r7, lr}
 801c1d6:	b084      	sub	sp, #16
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	685b      	ldr	r3, [r3, #4]
 801c1e0:	60fb      	str	r3, [r7, #12]
 801c1e2:	68fb      	ldr	r3, [r7, #12]
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d01b      	beq.n	801c220 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	681a      	ldr	r2, [r3, #0]
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	681b      	ldr	r3, [r3, #0]
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	33c8      	adds	r3, #200	; 0xc8
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	4610      	mov	r0, r2
 801c1f8:	4798      	blx	r3
 801c1fa:	4603      	mov	r3, r0
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d00b      	beq.n	801c218 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	681a      	ldr	r2, [r3, #0]
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	33ec      	adds	r3, #236	; 0xec
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	4610      	mov	r0, r2
 801c210:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	2200      	movs	r2, #0
 801c216:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	685b      	ldr	r3, [r3, #4]
 801c21c:	60fb      	str	r3, [r7, #12]
 801c21e:	e7e0      	b.n	801c1e2 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	3388      	adds	r3, #136	; 0x88
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	6878      	ldr	r0, [r7, #4]
 801c22a:	4798      	blx	r3
}
 801c22c:	bf00      	nop
 801c22e:	3710      	adds	r7, #16
 801c230:	46bd      	mov	sp, r7
 801c232:	bd80      	pop	{r7, pc}

0801c234 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801c234:	b580      	push	{r7, lr}
 801c236:	b084      	sub	sp, #16
 801c238:	af00      	add	r7, sp, #0
 801c23a:	6078      	str	r0, [r7, #4]
 801c23c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	685b      	ldr	r3, [r3, #4]
 801c242:	60fb      	str	r3, [r7, #12]
 801c244:	68fb      	ldr	r3, [r7, #12]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d016      	beq.n	801c278 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	681a      	ldr	r2, [r3, #0]
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	33a8      	adds	r3, #168	; 0xa8
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	6839      	ldr	r1, [r7, #0]
 801c25a:	4610      	mov	r0, r2
 801c25c:	4798      	blx	r3
 801c25e:	4603      	mov	r3, r0
 801c260:	f083 0301 	eor.w	r3, r3, #1
 801c264:	b2db      	uxtb	r3, r3
 801c266:	2b00      	cmp	r3, #0
 801c268:	d002      	beq.n	801c270 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	2200      	movs	r2, #0
 801c26e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c270:	68fb      	ldr	r3, [r7, #12]
 801c272:	685b      	ldr	r3, [r3, #4]
 801c274:	60fb      	str	r3, [r7, #12]
 801c276:	e7e5      	b.n	801c244 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	3388      	adds	r3, #136	; 0x88
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	6878      	ldr	r0, [r7, #4]
 801c282:	4798      	blx	r3
}
 801c284:	bf00      	nop
 801c286:	3710      	adds	r7, #16
 801c288:	46bd      	mov	sp, r7
 801c28a:	bd80      	pop	{r7, pc}

0801c28c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801c28c:	b580      	push	{r7, lr}
 801c28e:	b084      	sub	sp, #16
 801c290:	af00      	add	r7, sp, #0
 801c292:	6078      	str	r0, [r7, #4]
 801c294:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	685b      	ldr	r3, [r3, #4]
 801c29a:	60fb      	str	r3, [r7, #12]
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d016      	beq.n	801c2d0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	681a      	ldr	r2, [r3, #0]
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	33b0      	adds	r3, #176	; 0xb0
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	6839      	ldr	r1, [r7, #0]
 801c2b2:	4610      	mov	r0, r2
 801c2b4:	4798      	blx	r3
 801c2b6:	4603      	mov	r3, r0
 801c2b8:	f083 0301 	eor.w	r3, r3, #1
 801c2bc:	b2db      	uxtb	r3, r3
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d002      	beq.n	801c2c8 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	2200      	movs	r2, #0
 801c2c6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	685b      	ldr	r3, [r3, #4]
 801c2cc:	60fb      	str	r3, [r7, #12]
 801c2ce:	e7e5      	b.n	801c29c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	3388      	adds	r3, #136	; 0x88
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	6878      	ldr	r0, [r7, #4]
 801c2da:	4798      	blx	r3
}
 801c2dc:	bf00      	nop
 801c2de:	3710      	adds	r7, #16
 801c2e0:	46bd      	mov	sp, r7
 801c2e2:	bd80      	pop	{r7, pc}

0801c2e4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	b084      	sub	sp, #16
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	6078      	str	r0, [r7, #4]
 801c2ec:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	685b      	ldr	r3, [r3, #4]
 801c2f2:	60fb      	str	r3, [r7, #12]
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d016      	beq.n	801c328 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	681a      	ldr	r2, [r3, #0]
 801c2fe:	68fb      	ldr	r3, [r7, #12]
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	33ac      	adds	r3, #172	; 0xac
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	6839      	ldr	r1, [r7, #0]
 801c30a:	4610      	mov	r0, r2
 801c30c:	4798      	blx	r3
 801c30e:	4603      	mov	r3, r0
 801c310:	f083 0301 	eor.w	r3, r3, #1
 801c314:	b2db      	uxtb	r3, r3
 801c316:	2b00      	cmp	r3, #0
 801c318:	d002      	beq.n	801c320 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	2200      	movs	r2, #0
 801c31e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c320:	68fb      	ldr	r3, [r7, #12]
 801c322:	685b      	ldr	r3, [r3, #4]
 801c324:	60fb      	str	r3, [r7, #12]
 801c326:	e7e5      	b.n	801c2f4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	3388      	adds	r3, #136	; 0x88
 801c32e:	681b      	ldr	r3, [r3, #0]
 801c330:	6878      	ldr	r0, [r7, #4]
 801c332:	4798      	blx	r3
}
 801c334:	bf00      	nop
 801c336:	3710      	adds	r7, #16
 801c338:	46bd      	mov	sp, r7
 801c33a:	bd80      	pop	{r7, pc}

0801c33c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801c33c:	b580      	push	{r7, lr}
 801c33e:	b084      	sub	sp, #16
 801c340:	af00      	add	r7, sp, #0
 801c342:	6078      	str	r0, [r7, #4]
 801c344:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	685b      	ldr	r3, [r3, #4]
 801c34a:	60fb      	str	r3, [r7, #12]
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d016      	beq.n	801c380 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	681a      	ldr	r2, [r3, #0]
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	33b4      	adds	r3, #180	; 0xb4
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	6839      	ldr	r1, [r7, #0]
 801c362:	4610      	mov	r0, r2
 801c364:	4798      	blx	r3
 801c366:	4603      	mov	r3, r0
 801c368:	f083 0301 	eor.w	r3, r3, #1
 801c36c:	b2db      	uxtb	r3, r3
 801c36e:	2b00      	cmp	r3, #0
 801c370:	d002      	beq.n	801c378 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	2200      	movs	r2, #0
 801c376:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	685b      	ldr	r3, [r3, #4]
 801c37c:	60fb      	str	r3, [r7, #12]
 801c37e:	e7e5      	b.n	801c34c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	3388      	adds	r3, #136	; 0x88
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	6878      	ldr	r0, [r7, #4]
 801c38a:	4798      	blx	r3
}
 801c38c:	bf00      	nop
 801c38e:	3710      	adds	r7, #16
 801c390:	46bd      	mov	sp, r7
 801c392:	bd80      	pop	{r7, pc}

0801c394 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801c394:	b580      	push	{r7, lr}
 801c396:	b084      	sub	sp, #16
 801c398:	af00      	add	r7, sp, #0
 801c39a:	6078      	str	r0, [r7, #4]
 801c39c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	685b      	ldr	r3, [r3, #4]
 801c3a2:	60fb      	str	r3, [r7, #12]
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d016      	beq.n	801c3d8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	681a      	ldr	r2, [r3, #0]
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	33bc      	adds	r3, #188	; 0xbc
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	6839      	ldr	r1, [r7, #0]
 801c3ba:	4610      	mov	r0, r2
 801c3bc:	4798      	blx	r3
 801c3be:	4603      	mov	r3, r0
 801c3c0:	f083 0301 	eor.w	r3, r3, #1
 801c3c4:	b2db      	uxtb	r3, r3
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d002      	beq.n	801c3d0 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	2200      	movs	r2, #0
 801c3ce:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	685b      	ldr	r3, [r3, #4]
 801c3d4:	60fb      	str	r3, [r7, #12]
 801c3d6:	e7e5      	b.n	801c3a4 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	3388      	adds	r3, #136	; 0x88
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	6878      	ldr	r0, [r7, #4]
 801c3e2:	4798      	blx	r3
}
 801c3e4:	bf00      	nop
 801c3e6:	3710      	adds	r7, #16
 801c3e8:	46bd      	mov	sp, r7
 801c3ea:	bd80      	pop	{r7, pc}

0801c3ec <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801c3ec:	b580      	push	{r7, lr}
 801c3ee:	b084      	sub	sp, #16
 801c3f0:	af00      	add	r7, sp, #0
 801c3f2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	685b      	ldr	r3, [r3, #4]
 801c3f8:	60fb      	str	r3, [r7, #12]
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d01d      	beq.n	801c43c <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801c400:	68fb      	ldr	r3, [r7, #12]
 801c402:	681a      	ldr	r2, [r3, #0]
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	33c8      	adds	r3, #200	; 0xc8
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	4610      	mov	r0, r2
 801c410:	4798      	blx	r3
 801c412:	4603      	mov	r3, r0
 801c414:	2b00      	cmp	r3, #0
 801c416:	d00d      	beq.n	801c434 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801c41e:	68fb      	ldr	r3, [r7, #12]
 801c420:	2200      	movs	r2, #0
 801c422:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	3388      	adds	r3, #136	; 0x88
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	6878      	ldr	r0, [r7, #4]
 801c42e:	4798      	blx	r3
            return matchingCall;
 801c430:	68bb      	ldr	r3, [r7, #8]
 801c432:	e004      	b.n	801c43e <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c434:	68fb      	ldr	r3, [r7, #12]
 801c436:	685b      	ldr	r3, [r3, #4]
 801c438:	60fb      	str	r3, [r7, #12]
 801c43a:	e7de      	b.n	801c3fa <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c43c:	2300      	movs	r3, #0
}
 801c43e:	4618      	mov	r0, r3
 801c440:	3710      	adds	r7, #16
 801c442:	46bd      	mov	sp, r7
 801c444:	bd80      	pop	{r7, pc}

0801c446 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801c446:	b580      	push	{r7, lr}
 801c448:	b084      	sub	sp, #16
 801c44a:	af00      	add	r7, sp, #0
 801c44c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	685b      	ldr	r3, [r3, #4]
 801c452:	60fb      	str	r3, [r7, #12]
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	2b00      	cmp	r3, #0
 801c458:	d012      	beq.n	801c480 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801c45a:	68fb      	ldr	r3, [r7, #12]
 801c45c:	681a      	ldr	r2, [r3, #0]
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	681b      	ldr	r3, [r3, #0]
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	33cc      	adds	r3, #204	; 0xcc
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	4610      	mov	r0, r2
 801c46a:	4798      	blx	r3
 801c46c:	4603      	mov	r3, r0
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d002      	beq.n	801c478 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	e004      	b.n	801c482 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	685b      	ldr	r3, [r3, #4]
 801c47c:	60fb      	str	r3, [r7, #12]
 801c47e:	e7e9      	b.n	801c454 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c480:	2300      	movs	r3, #0
}
 801c482:	4618      	mov	r0, r3
 801c484:	3710      	adds	r7, #16
 801c486:	46bd      	mov	sp, r7
 801c488:	bd80      	pop	{r7, pc}

0801c48a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801c48a:	b580      	push	{r7, lr}
 801c48c:	b084      	sub	sp, #16
 801c48e:	af00      	add	r7, sp, #0
 801c490:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	685b      	ldr	r3, [r3, #4]
 801c496:	60fb      	str	r3, [r7, #12]
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d01d      	beq.n	801c4da <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	681a      	ldr	r2, [r3, #0]
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	33cc      	adds	r3, #204	; 0xcc
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	4610      	mov	r0, r2
 801c4ae:	4798      	blx	r3
 801c4b0:	4603      	mov	r3, r0
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d00d      	beq.n	801c4d2 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	2200      	movs	r2, #0
 801c4c0:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	3388      	adds	r3, #136	; 0x88
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	6878      	ldr	r0, [r7, #4]
 801c4cc:	4798      	blx	r3
            return matchingCall;
 801c4ce:	68bb      	ldr	r3, [r7, #8]
 801c4d0:	e004      	b.n	801c4dc <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	685b      	ldr	r3, [r3, #4]
 801c4d6:	60fb      	str	r3, [r7, #12]
 801c4d8:	e7de      	b.n	801c498 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c4da:	2300      	movs	r3, #0
}
 801c4dc:	4618      	mov	r0, r3
 801c4de:	3710      	adds	r7, #16
 801c4e0:	46bd      	mov	sp, r7
 801c4e2:	bd80      	pop	{r7, pc}

0801c4e4 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801c4e4:	b580      	push	{r7, lr}
 801c4e6:	b086      	sub	sp, #24
 801c4e8:	af00      	add	r7, sp, #0
 801c4ea:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	685b      	ldr	r3, [r3, #4]
 801c4f0:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801c4f2:	2300      	movs	r3, #0
 801c4f4:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801c4f6:	2300      	movs	r3, #0
 801c4f8:	60fb      	str	r3, [r7, #12]

    while (current) {
 801c4fa:	697b      	ldr	r3, [r7, #20]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d024      	beq.n	801c54a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801c500:	697b      	ldr	r3, [r7, #20]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	2b00      	cmp	r3, #0
 801c506:	d11a      	bne.n	801c53e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801c508:	697b      	ldr	r3, [r7, #20]
 801c50a:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801c50c:	693b      	ldr	r3, [r7, #16]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d106      	bne.n	801c520 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801c512:	697b      	ldr	r3, [r7, #20]
 801c514:	685b      	ldr	r3, [r3, #4]
 801c516:	617b      	str	r3, [r7, #20]
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	697a      	ldr	r2, [r7, #20]
 801c51c:	605a      	str	r2, [r3, #4]
 801c51e:	e006      	b.n	801c52e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801c520:	697b      	ldr	r3, [r7, #20]
 801c522:	685a      	ldr	r2, [r3, #4]
 801c524:	693b      	ldr	r3, [r7, #16]
 801c526:	605a      	str	r2, [r3, #4]
 801c528:	693b      	ldr	r3, [r7, #16]
 801c52a:	685b      	ldr	r3, [r3, #4]
 801c52c:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	2b00      	cmp	r3, #0
 801c532:	d0e2      	beq.n	801c4fa <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801c534:	2108      	movs	r1, #8
 801c536:	4618      	mov	r0, r3
 801c538:	f7ee f82e 	bl	800a598 <_ZdlPvj>
 801c53c:	e7dd      	b.n	801c4fa <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801c53e:	697b      	ldr	r3, [r7, #20]
 801c540:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801c542:	697b      	ldr	r3, [r7, #20]
 801c544:	685b      	ldr	r3, [r3, #4]
 801c546:	617b      	str	r3, [r7, #20]
    while (current) {
 801c548:	e7d7      	b.n	801c4fa <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801c54a:	bf00      	nop
 801c54c:	3718      	adds	r7, #24
 801c54e:	46bd      	mov	sp, r7
 801c550:	bd80      	pop	{r7, pc}

0801c552 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801c552:	b580      	push	{r7, lr}
 801c554:	b084      	sub	sp, #16
 801c556:	af00      	add	r7, sp, #0
 801c558:	6078      	str	r0, [r7, #4]
    while (head_) {
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	685b      	ldr	r3, [r3, #4]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d019      	beq.n	801c596 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	685b      	ldr	r3, [r3, #4]
 801c566:	685b      	ldr	r3, [r3, #4]
 801c568:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	685b      	ldr	r3, [r3, #4]
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	2b00      	cmp	r3, #0
 801c572:	d004      	beq.n	801c57e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801c574:	681a      	ldr	r2, [r3, #0]
 801c576:	3204      	adds	r2, #4
 801c578:	6812      	ldr	r2, [r2, #0]
 801c57a:	4618      	mov	r0, r3
 801c57c:	4790      	blx	r2
        delete head_;
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	685b      	ldr	r3, [r3, #4]
 801c582:	2b00      	cmp	r3, #0
 801c584:	d003      	beq.n	801c58e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801c586:	2108      	movs	r1, #8
 801c588:	4618      	mov	r0, r3
 801c58a:	f7ee f805 	bl	800a598 <_ZdlPvj>
        head_ = next;
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	68fa      	ldr	r2, [r7, #12]
 801c592:	605a      	str	r2, [r3, #4]
    while (head_) {
 801c594:	e7e1      	b.n	801c55a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801c596:	bf00      	nop
 801c598:	3710      	adds	r7, #16
 801c59a:	46bd      	mov	sp, r7
 801c59c:	bd80      	pop	{r7, pc}

0801c59e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801c59e:	b580      	push	{r7, lr}
 801c5a0:	b084      	sub	sp, #16
 801c5a2:	af00      	add	r7, sp, #0
 801c5a4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	685b      	ldr	r3, [r3, #4]
 801c5aa:	60fb      	str	r3, [r7, #12]
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d00c      	beq.n	801c5cc <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	681a      	ldr	r2, [r3, #0]
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	33ec      	adds	r3, #236	; 0xec
 801c5be:	681b      	ldr	r3, [r3, #0]
 801c5c0:	4610      	mov	r0, r2
 801c5c2:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	685b      	ldr	r3, [r3, #4]
 801c5c8:	60fb      	str	r3, [r7, #12]
 801c5ca:	e7ef      	b.n	801c5ac <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801c5cc:	bf00      	nop
 801c5ce:	3710      	adds	r7, #16
 801c5d0:	46bd      	mov	sp, r7
 801c5d2:	bd80      	pop	{r7, pc}

0801c5d4 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b084      	sub	sp, #16
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	685b      	ldr	r3, [r3, #4]
 801c5e0:	60fb      	str	r3, [r7, #12]
 801c5e2:	68fb      	ldr	r3, [r7, #12]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d00c      	beq.n	801c602 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	681a      	ldr	r2, [r3, #0]
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	33e8      	adds	r3, #232	; 0xe8
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	4610      	mov	r0, r2
 801c5f8:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	685b      	ldr	r3, [r3, #4]
 801c5fe:	60fb      	str	r3, [r7, #12]
 801c600:	e7ef      	b.n	801c5e2 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801c602:	bf00      	nop
 801c604:	3710      	adds	r7, #16
 801c606:	46bd      	mov	sp, r7
 801c608:	bd80      	pop	{r7, pc}

0801c60a <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801c60a:	b580      	push	{r7, lr}
 801c60c:	b084      	sub	sp, #16
 801c60e:	af00      	add	r7, sp, #0
 801c610:	6078      	str	r0, [r7, #4]
 801c612:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	685b      	ldr	r3, [r3, #4]
 801c618:	60fb      	str	r3, [r7, #12]
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d00d      	beq.n	801c63c <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	681a      	ldr	r2, [r3, #0]
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	33dc      	adds	r3, #220	; 0xdc
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	6839      	ldr	r1, [r7, #0]
 801c630:	4610      	mov	r0, r2
 801c632:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	685b      	ldr	r3, [r3, #4]
 801c638:	60fb      	str	r3, [r7, #12]
 801c63a:	e7ee      	b.n	801c61a <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801c63c:	bf00      	nop
 801c63e:	3710      	adds	r7, #16
 801c640:	46bd      	mov	sp, r7
 801c642:	bd80      	pop	{r7, pc}

0801c644 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801c644:	b580      	push	{r7, lr}
 801c646:	b084      	sub	sp, #16
 801c648:	af00      	add	r7, sp, #0
 801c64a:	6078      	str	r0, [r7, #4]
 801c64c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	685b      	ldr	r3, [r3, #4]
 801c652:	60fb      	str	r3, [r7, #12]
 801c654:	68fb      	ldr	r3, [r7, #12]
 801c656:	2b00      	cmp	r3, #0
 801c658:	d00d      	beq.n	801c676 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	681a      	ldr	r2, [r3, #0]
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	33e0      	adds	r3, #224	; 0xe0
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	6839      	ldr	r1, [r7, #0]
 801c66a:	4610      	mov	r0, r2
 801c66c:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	685b      	ldr	r3, [r3, #4]
 801c672:	60fb      	str	r3, [r7, #12]
 801c674:	e7ee      	b.n	801c654 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801c676:	bf00      	nop
 801c678:	3710      	adds	r7, #16
 801c67a:	46bd      	mov	sp, r7
 801c67c:	bd80      	pop	{r7, pc}
	...

0801c680 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801c680:	b590      	push	{r4, r7, lr}
 801c682:	b087      	sub	sp, #28
 801c684:	af00      	add	r7, sp, #0
 801c686:	60f8      	str	r0, [r7, #12]
 801c688:	60b9      	str	r1, [r7, #8]
 801c68a:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801c68c:	68b9      	ldr	r1, [r7, #8]
 801c68e:	68f8      	ldr	r0, [r7, #12]
 801c690:	f7f0 fb85 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801c694:	f107 0310 	add.w	r3, r7, #16
 801c698:	490f      	ldr	r1, [pc, #60]	; (801c6d8 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801c69a:	4618      	mov	r0, r3
 801c69c:	f7f0 fb2b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801c6a0:	f107 0310 	add.w	r3, r7, #16
 801c6a4:	4619      	mov	r1, r3
 801c6a6:	68f8      	ldr	r0, [r7, #12]
 801c6a8:	f7f0 fee9 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801c6ac:	4603      	mov	r3, r0
 801c6ae:	461c      	mov	r4, r3
 801c6b0:	f107 0310 	add.w	r3, r7, #16
 801c6b4:	4618      	mov	r0, r3
 801c6b6:	f7f0 fed6 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801c6ba:	2c00      	cmp	r4, #0
 801c6bc:	d007      	beq.n	801c6ce <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801c6be:	6879      	ldr	r1, [r7, #4]
 801c6c0:	68f8      	ldr	r0, [r7, #12]
 801c6c2:	f7f0 ff4d 	bl	800d560 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801c6c6:	4905      	ldr	r1, [pc, #20]	; (801c6dc <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801c6c8:	68f8      	ldr	r0, [r7, #12]
 801c6ca:	f7f0 ff5b 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801c6ce:	bf00      	nop
}
 801c6d0:	68f8      	ldr	r0, [r7, #12]
 801c6d2:	371c      	adds	r7, #28
 801c6d4:	46bd      	mov	sp, r7
 801c6d6:	bd90      	pop	{r4, r7, pc}
 801c6d8:	0802627c 	.word	0x0802627c
 801c6dc:	08026280 	.word	0x08026280

0801c6e0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801c6e0:	b590      	push	{r4, r7, lr}
 801c6e2:	b087      	sub	sp, #28
 801c6e4:	af00      	add	r7, sp, #0
 801c6e6:	60f8      	str	r0, [r7, #12]
 801c6e8:	60b9      	str	r1, [r7, #8]
 801c6ea:	607a      	str	r2, [r7, #4]
 801c6ec:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801c6ee:	68b9      	ldr	r1, [r7, #8]
 801c6f0:	68f8      	ldr	r0, [r7, #12]
 801c6f2:	f7f0 fb54 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801c6f6:	f107 0310 	add.w	r3, r7, #16
 801c6fa:	4912      	ldr	r1, [pc, #72]	; (801c744 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	f7f0 fafa 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801c702:	f107 0310 	add.w	r3, r7, #16
 801c706:	4619      	mov	r1, r3
 801c708:	68f8      	ldr	r0, [r7, #12]
 801c70a:	f7f0 fefd 	bl	800d508 <_ZneRK12SimpleStringS1_>
 801c70e:	4603      	mov	r3, r0
 801c710:	461c      	mov	r4, r3
 801c712:	f107 0310 	add.w	r3, r7, #16
 801c716:	4618      	mov	r0, r3
 801c718:	f7f0 fea5 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801c71c:	2c00      	cmp	r4, #0
 801c71e:	d003      	beq.n	801c728 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801c720:	4909      	ldr	r1, [pc, #36]	; (801c748 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801c722:	68f8      	ldr	r0, [r7, #12]
 801c724:	f7f0 ff2e 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801c728:	6879      	ldr	r1, [r7, #4]
 801c72a:	68f8      	ldr	r0, [r7, #12]
 801c72c:	f7f0 ff18 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801c730:	6839      	ldr	r1, [r7, #0]
 801c732:	68f8      	ldr	r0, [r7, #12]
 801c734:	f7f0 ff14 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    return str;
 801c738:	bf00      	nop
}
 801c73a:	68f8      	ldr	r0, [r7, #12]
 801c73c:	371c      	adds	r7, #28
 801c73e:	46bd      	mov	sp, r7
 801c740:	bd90      	pop	{r4, r7, pc}
 801c742:	bf00      	nop
 801c744:	0802627c 	.word	0x0802627c
 801c748:	08026288 	.word	0x08026288

0801c74c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801c74c:	b580      	push	{r7, lr}
 801c74e:	b08c      	sub	sp, #48	; 0x30
 801c750:	af00      	add	r7, sp, #0
 801c752:	60f8      	str	r0, [r7, #12]
 801c754:	60b9      	str	r1, [r7, #8]
 801c756:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801c758:	f107 0314 	add.w	r3, r7, #20
 801c75c:	4929      	ldr	r1, [pc, #164]	; (801c804 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801c75e:	4618      	mov	r0, r3
 801c760:	f7f0 fac9 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c764:	68bb      	ldr	r3, [r7, #8]
 801c766:	685b      	ldr	r3, [r3, #4]
 801c768:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d038      	beq.n	801c7e2 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c772:	681a      	ldr	r2, [r3, #0]
 801c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	33c0      	adds	r3, #192	; 0xc0
 801c77c:	681b      	ldr	r3, [r3, #0]
 801c77e:	4610      	mov	r0, r2
 801c780:	4798      	blx	r3
 801c782:	4603      	mov	r3, r0
 801c784:	f083 0301 	eor.w	r3, r3, #1
 801c788:	b2db      	uxtb	r3, r3
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d025      	beq.n	801c7da <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801c78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c790:	6819      	ldr	r1, [r3, #0]
 801c792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	681b      	ldr	r3, [r3, #0]
 801c798:	33f0      	adds	r3, #240	; 0xf0
 801c79a:	681b      	ldr	r3, [r3, #0]
 801c79c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c7a0:	4610      	mov	r0, r2
 801c7a2:	4798      	blx	r3
 801c7a4:	f107 001c 	add.w	r0, r7, #28
 801c7a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c7ac:	f107 0114 	add.w	r1, r7, #20
 801c7b0:	687a      	ldr	r2, [r7, #4]
 801c7b2:	f7ff ff95 	bl	801c6e0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c7b6:	f107 021c 	add.w	r2, r7, #28
 801c7ba:	f107 0314 	add.w	r3, r7, #20
 801c7be:	4611      	mov	r1, r2
 801c7c0:	4618      	mov	r0, r3
 801c7c2:	f7f0 fb04 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801c7c6:	f107 031c 	add.w	r3, r7, #28
 801c7ca:	4618      	mov	r0, r3
 801c7cc:	f7f0 fe4b 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801c7d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c7d4:	4618      	mov	r0, r3
 801c7d6:	f7f0 fe46 	bl	800d466 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7dc:	685b      	ldr	r3, [r3, #4]
 801c7de:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c7e0:	e7c3      	b.n	801c76a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c7e2:	68fb      	ldr	r3, [r7, #12]
 801c7e4:	f107 0114 	add.w	r1, r7, #20
 801c7e8:	687a      	ldr	r2, [r7, #4]
 801c7ea:	4618      	mov	r0, r3
 801c7ec:	f7ff ff48 	bl	801c680 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c7f0:	f107 0314 	add.w	r3, r7, #20
 801c7f4:	4618      	mov	r0, r3
 801c7f6:	f7f0 fe36 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c7fa:	bf00      	nop
}
 801c7fc:	68f8      	ldr	r0, [r7, #12]
 801c7fe:	3730      	adds	r7, #48	; 0x30
 801c800:	46bd      	mov	sp, r7
 801c802:	bd80      	pop	{r7, pc}
 801c804:	0802627c 	.word	0x0802627c

0801c808 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801c808:	b580      	push	{r7, lr}
 801c80a:	b08c      	sub	sp, #48	; 0x30
 801c80c:	af00      	add	r7, sp, #0
 801c80e:	60f8      	str	r0, [r7, #12]
 801c810:	60b9      	str	r1, [r7, #8]
 801c812:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801c814:	f107 0314 	add.w	r3, r7, #20
 801c818:	4928      	ldr	r1, [pc, #160]	; (801c8bc <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801c81a:	4618      	mov	r0, r3
 801c81c:	f7f0 fa6b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c820:	68bb      	ldr	r3, [r7, #8]
 801c822:	685b      	ldr	r3, [r3, #4]
 801c824:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d035      	beq.n	801c898 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c82e:	681a      	ldr	r2, [r3, #0]
 801c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	33c0      	adds	r3, #192	; 0xc0
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	4610      	mov	r0, r2
 801c83c:	4798      	blx	r3
 801c83e:	4603      	mov	r3, r0
 801c840:	2b00      	cmp	r3, #0
 801c842:	d025      	beq.n	801c890 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c846:	6819      	ldr	r1, [r3, #0]
 801c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	33f0      	adds	r3, #240	; 0xf0
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c856:	4610      	mov	r0, r2
 801c858:	4798      	blx	r3
 801c85a:	f107 001c 	add.w	r0, r7, #28
 801c85e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c862:	f107 0114 	add.w	r1, r7, #20
 801c866:	687a      	ldr	r2, [r7, #4]
 801c868:	f7ff ff3a 	bl	801c6e0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c86c:	f107 021c 	add.w	r2, r7, #28
 801c870:	f107 0314 	add.w	r3, r7, #20
 801c874:	4611      	mov	r1, r2
 801c876:	4618      	mov	r0, r3
 801c878:	f7f0 faa9 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801c87c:	f107 031c 	add.w	r3, r7, #28
 801c880:	4618      	mov	r0, r3
 801c882:	f7f0 fdf0 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801c886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c88a:	4618      	mov	r0, r3
 801c88c:	f7f0 fdeb 	bl	800d466 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c892:	685b      	ldr	r3, [r3, #4]
 801c894:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c896:	e7c6      	b.n	801c826 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c898:	68fb      	ldr	r3, [r7, #12]
 801c89a:	f107 0114 	add.w	r1, r7, #20
 801c89e:	687a      	ldr	r2, [r7, #4]
 801c8a0:	4618      	mov	r0, r3
 801c8a2:	f7ff feed 	bl	801c680 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c8a6:	f107 0314 	add.w	r3, r7, #20
 801c8aa:	4618      	mov	r0, r3
 801c8ac:	f7f0 fddb 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c8b0:	bf00      	nop
}
 801c8b2:	68f8      	ldr	r0, [r7, #12]
 801c8b4:	3730      	adds	r7, #48	; 0x30
 801c8b6:	46bd      	mov	sp, r7
 801c8b8:	bd80      	pop	{r7, pc}
 801c8ba:	bf00      	nop
 801c8bc:	0802627c 	.word	0x0802627c

0801c8c0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801c8c0:	b580      	push	{r7, lr}
 801c8c2:	b08e      	sub	sp, #56	; 0x38
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	6078      	str	r0, [r7, #4]
 801c8c8:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801c8ca:	f107 030c 	add.w	r3, r7, #12
 801c8ce:	4936      	ldr	r1, [pc, #216]	; (801c9a8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c8d0:	4618      	mov	r0, r3
 801c8d2:	f7f0 fa10 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c8d6:	683b      	ldr	r3, [r7, #0]
 801c8d8:	685b      	ldr	r3, [r3, #4]
 801c8da:	637b      	str	r3, [r7, #52]	; 0x34
 801c8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d044      	beq.n	801c96c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801c8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c8e4:	681a      	ldr	r2, [r3, #0]
 801c8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	33cc      	adds	r3, #204	; 0xcc
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	4610      	mov	r0, r2
 801c8f2:	4798      	blx	r3
 801c8f4:	4603      	mov	r3, r0
 801c8f6:	f083 0301 	eor.w	r3, r3, #1
 801c8fa:	b2db      	uxtb	r3, r3
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d031      	beq.n	801c964 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801c900:	f107 031c 	add.w	r3, r7, #28
 801c904:	4928      	ldr	r1, [pc, #160]	; (801c9a8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c906:	4618      	mov	r0, r3
 801c908:	f7f0 f9f5 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801c90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c90e:	6819      	ldr	r1, [r3, #0]
 801c910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	33f4      	adds	r3, #244	; 0xf4
 801c918:	681b      	ldr	r3, [r3, #0]
 801c91a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c91e:	4610      	mov	r0, r2
 801c920:	4798      	blx	r3
 801c922:	f107 0014 	add.w	r0, r7, #20
 801c926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c92a:	f107 021c 	add.w	r2, r7, #28
 801c92e:	f107 010c 	add.w	r1, r7, #12
 801c932:	f7ff fed5 	bl	801c6e0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c936:	f107 0214 	add.w	r2, r7, #20
 801c93a:	f107 030c 	add.w	r3, r7, #12
 801c93e:	4611      	mov	r1, r2
 801c940:	4618      	mov	r0, r3
 801c942:	f7f0 fa44 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801c946:	f107 0314 	add.w	r3, r7, #20
 801c94a:	4618      	mov	r0, r3
 801c94c:	f7f0 fd8b 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801c950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c954:	4618      	mov	r0, r3
 801c956:	f7f0 fd86 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801c95a:	f107 031c 	add.w	r3, r7, #28
 801c95e:	4618      	mov	r0, r3
 801c960:	f7f0 fd81 	bl	800d466 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c966:	685b      	ldr	r3, [r3, #4]
 801c968:	637b      	str	r3, [r7, #52]	; 0x34
 801c96a:	e7b7      	b.n	801c8dc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801c96c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c970:	490d      	ldr	r1, [pc, #52]	; (801c9a8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c972:	4618      	mov	r0, r3
 801c974:	f7f0 f9bf 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801c97e:	f107 010c 	add.w	r1, r7, #12
 801c982:	4618      	mov	r0, r3
 801c984:	f7ff fe7c 	bl	801c680 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801c988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c98c:	4618      	mov	r0, r3
 801c98e:	f7f0 fd6a 	bl	800d466 <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801c992:	f107 030c 	add.w	r3, r7, #12
 801c996:	4618      	mov	r0, r3
 801c998:	f7f0 fd65 	bl	800d466 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801c99c:	bf00      	nop
}
 801c99e:	6878      	ldr	r0, [r7, #4]
 801c9a0:	3738      	adds	r7, #56	; 0x38
 801c9a2:	46bd      	mov	sp, r7
 801c9a4:	bd80      	pop	{r7, pc}
 801c9a6:	bf00      	nop
 801c9a8:	0802627c 	.word	0x0802627c

0801c9ac <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b084      	sub	sp, #16
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	685b      	ldr	r3, [r3, #4]
 801c9b8:	60fb      	str	r3, [r7, #12]
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d014      	beq.n	801c9ea <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801c9c0:	68fb      	ldr	r3, [r7, #12]
 801c9c2:	681a      	ldr	r2, [r3, #0]
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	33d0      	adds	r3, #208	; 0xd0
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	4610      	mov	r0, r2
 801c9d0:	4798      	blx	r3
 801c9d2:	4603      	mov	r3, r0
 801c9d4:	f083 0301 	eor.w	r3, r3, #1
 801c9d8:	b2db      	uxtb	r3, r3
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d001      	beq.n	801c9e2 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801c9de:	2301      	movs	r3, #1
 801c9e0:	e004      	b.n	801c9ec <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	685b      	ldr	r3, [r3, #4]
 801c9e6:	60fb      	str	r3, [r7, #12]
 801c9e8:	e7e7      	b.n	801c9ba <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801c9ea:	2300      	movs	r3, #0
}
 801c9ec:	4618      	mov	r0, r3
 801c9ee:	3710      	adds	r7, #16
 801c9f0:	46bd      	mov	sp, r7
 801c9f2:	bd80      	pop	{r7, pc}

0801c9f4 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801c9f4:	b480      	push	{r7}
 801c9f6:	b083      	sub	sp, #12
 801c9f8:	af00      	add	r7, sp, #0
 801c9fa:	6078      	str	r0, [r7, #4]
 801c9fc:	460b      	mov	r3, r1
 801c9fe:	70fb      	strb	r3, [r7, #3]
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	78fa      	ldrb	r2, [r7, #3]
 801ca04:	711a      	strb	r2, [r3, #4]
 801ca06:	bf00      	nop
 801ca08:	370c      	adds	r7, #12
 801ca0a:	46bd      	mov	sp, r7
 801ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca10:	4770      	bx	lr
	...

0801ca14 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801ca14:	b580      	push	{r7, lr}
 801ca16:	b082      	sub	sp, #8
 801ca18:	af00      	add	r7, sp, #0
 801ca1a:	6078      	str	r0, [r7, #4]
 801ca1c:	460b      	mov	r3, r1
 801ca1e:	70fb      	strb	r3, [r7, #3]
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	4618      	mov	r0, r3
 801ca24:	f7ed ff6a 	bl	800a8fc <_ZN14TestTerminatorC1Ev>
 801ca28:	4a05      	ldr	r2, [pc, #20]	; (801ca40 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	601a      	str	r2, [r3, #0]
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	78fa      	ldrb	r2, [r7, #3]
 801ca32:	711a      	strb	r2, [r3, #4]
    {
    }
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	4618      	mov	r0, r3
 801ca38:	3708      	adds	r7, #8
 801ca3a:	46bd      	mov	sp, r7
 801ca3c:	bd80      	pop	{r7, pc}
 801ca3e:	bf00      	nop
 801ca40:	080293ec 	.word	0x080293ec

0801ca44 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801ca44:	b580      	push	{r7, lr}
 801ca46:	b082      	sub	sp, #8
 801ca48:	af00      	add	r7, sp, #0
 801ca4a:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	791b      	ldrb	r3, [r3, #4]
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d001      	beq.n	801ca58 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801ca54:	f7f6 f9fe 	bl	8012e54 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801ca58:	f7f7 fd40 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ca5c:	4603      	mov	r3, r0
 801ca5e:	681a      	ldr	r2, [r3, #0]
 801ca60:	6812      	ldr	r2, [r2, #0]
 801ca62:	4618      	mov	r0, r3
 801ca64:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801ca66:	bf00      	nop
 801ca68:	3708      	adds	r7, #8
 801ca6a:	46bd      	mov	sp, r7
 801ca6c:	bd80      	pop	{r7, pc}
	...

0801ca70 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801ca70:	b580      	push	{r7, lr}
 801ca72:	b082      	sub	sp, #8
 801ca74:	af00      	add	r7, sp, #0
 801ca76:	6078      	str	r0, [r7, #4]
    {
 801ca78:	4a05      	ldr	r2, [pc, #20]	; (801ca90 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	601a      	str	r2, [r3, #0]
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	4618      	mov	r0, r3
 801ca82:	f7f7 fdbb 	bl	80145fc <_ZN14TestTerminatorD1Ev>
    }
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	4618      	mov	r0, r3
 801ca8a:	3708      	adds	r7, #8
 801ca8c:	46bd      	mov	sp, r7
 801ca8e:	bd80      	pop	{r7, pc}
 801ca90:	080293ec 	.word	0x080293ec

0801ca94 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801ca94:	b580      	push	{r7, lr}
 801ca96:	b082      	sub	sp, #8
 801ca98:	af00      	add	r7, sp, #0
 801ca9a:	6078      	str	r0, [r7, #4]
    }
 801ca9c:	6878      	ldr	r0, [r7, #4]
 801ca9e:	f7ff ffe7 	bl	801ca70 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801caa2:	2108      	movs	r1, #8
 801caa4:	6878      	ldr	r0, [r7, #4]
 801caa6:	f7ed fd77 	bl	800a598 <_ZdlPvj>
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	4618      	mov	r0, r3
 801caae:	3708      	adds	r7, #8
 801cab0:	46bd      	mov	sp, r7
 801cab2:	bd80      	pop	{r7, pc}

0801cab4 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801cab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cab6:	b085      	sub	sp, #20
 801cab8:	af00      	add	r7, sp, #0
 801caba:	6078      	str	r0, [r7, #4]
 801cabc:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	330c      	adds	r3, #12
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	6878      	ldr	r0, [r7, #4]
 801cac8:	4798      	blx	r3
 801caca:	4603      	mov	r3, r0
 801cacc:	681a      	ldr	r2, [r3, #0]
 801cace:	321c      	adds	r2, #28
 801cad0:	6812      	ldr	r2, [r2, #0]
 801cad2:	4618      	mov	r0, r3
 801cad4:	4790      	blx	r2
 801cad6:	4603      	mov	r3, r0
 801cad8:	f083 0301 	eor.w	r3, r3, #1
 801cadc:	b2db      	uxtb	r3, r3
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d01d      	beq.n	801cb1e <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	330c      	adds	r3, #12
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	6878      	ldr	r0, [r7, #4]
 801caec:	4798      	blx	r3
 801caee:	4604      	mov	r4, r0
 801caf0:	6823      	ldr	r3, [r4, #0]
 801caf2:	339c      	adds	r3, #156	; 0x9c
 801caf4:	681d      	ldr	r5, [r3, #0]
 801caf6:	683e      	ldr	r6, [r7, #0]
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	791a      	ldrb	r2, [r3, #4]
 801cafc:	f107 0308 	add.w	r3, r7, #8
 801cb00:	4611      	mov	r1, r2
 801cb02:	4618      	mov	r0, r3
 801cb04:	f7ff ff86 	bl	801ca14 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801cb08:	f107 0308 	add.w	r3, r7, #8
 801cb0c:	461a      	mov	r2, r3
 801cb0e:	4631      	mov	r1, r6
 801cb10:	4620      	mov	r0, r4
 801cb12:	47a8      	blx	r5
 801cb14:	f107 0308 	add.w	r3, r7, #8
 801cb18:	4618      	mov	r0, r3
 801cb1a:	f7ff ffa9 	bl	801ca70 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801cb1e:	bf00      	nop
 801cb20:	3714      	adds	r7, #20
 801cb22:	46bd      	mov	sp, r7
 801cb24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb26 <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801cb26:	b580      	push	{r7, lr}
 801cb28:	b082      	sub	sp, #8
 801cb2a:	af00      	add	r7, sp, #0
 801cb2c:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801cb2e:	f7f7 fcc5 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801cb32:	4603      	mov	r3, r0
}
 801cb34:	4618      	mov	r0, r3
 801cb36:	3708      	adds	r7, #8
 801cb38:	46bd      	mov	sp, r7
 801cb3a:	bd80      	pop	{r7, pc}

0801cb3c <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801cb3c:	b590      	push	{r4, r7, lr}
 801cb3e:	b085      	sub	sp, #20
 801cb40:	af00      	add	r7, sp, #0
 801cb42:	6078      	str	r0, [r7, #4]
 801cb44:	6039      	str	r1, [r7, #0]
 801cb46:	687c      	ldr	r4, [r7, #4]
 801cb48:	f107 0308 	add.w	r3, r7, #8
 801cb4c:	490b      	ldr	r1, [pc, #44]	; (801cb7c <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801cb4e:	4618      	mov	r0, r3
 801cb50:	f7f0 f8d1 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801cb54:	f107 0308 	add.w	r3, r7, #8
 801cb58:	461a      	mov	r2, r3
 801cb5a:	6839      	ldr	r1, [r7, #0]
 801cb5c:	4620      	mov	r0, r4
 801cb5e:	f7f1 ff29 	bl	800e9b4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801cb62:	f107 0308 	add.w	r3, r7, #8
 801cb66:	4618      	mov	r0, r3
 801cb68:	f7f0 fc7d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801cb6c:	4a04      	ldr	r2, [pc, #16]	; (801cb80 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	601a      	str	r2, [r3, #0]
{
}
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	4618      	mov	r0, r3
 801cb76:	3714      	adds	r7, #20
 801cb78:	46bd      	mov	sp, r7
 801cb7a:	bd90      	pop	{r4, r7, pc}
 801cb7c:	0802628c 	.word	0x0802628c
 801cb80:	08028378 	.word	0x08028378

0801cb84 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801cb84:	b5b0      	push	{r4, r5, r7, lr}
 801cb86:	b08a      	sub	sp, #40	; 0x28
 801cb88:	af00      	add	r7, sp, #0
 801cb8a:	6078      	str	r0, [r7, #4]
 801cb8c:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	332c      	adds	r3, #44	; 0x2c
 801cb92:	492b      	ldr	r1, [pc, #172]	; (801cc40 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801cb94:	4618      	mov	r0, r3
 801cb96:	f7f0 fcf5 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801cba0:	683b      	ldr	r3, [r7, #0]
 801cba2:	681b      	ldr	r3, [r3, #0]
 801cba4:	337c      	adds	r3, #124	; 0x7c
 801cba6:	681c      	ldr	r4, [r3, #0]
 801cba8:	f107 0310 	add.w	r3, r7, #16
 801cbac:	4925      	ldr	r1, [pc, #148]	; (801cc44 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801cbae:	4618      	mov	r0, r3
 801cbb0:	f7f0 f8a1 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801cbb4:	f107 0308 	add.w	r3, r7, #8
 801cbb8:	f107 0210 	add.w	r2, r7, #16
 801cbbc:	6839      	ldr	r1, [r7, #0]
 801cbbe:	4618      	mov	r0, r3
 801cbc0:	47a0      	blx	r4
 801cbc2:	f107 0308 	add.w	r3, r7, #8
 801cbc6:	4619      	mov	r1, r3
 801cbc8:	4628      	mov	r0, r5
 801cbca:	f7f0 fcc9 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801cbce:	f107 0308 	add.w	r3, r7, #8
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	f7f0 fc47 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801cbd8:	f107 0310 	add.w	r3, r7, #16
 801cbdc:	4618      	mov	r0, r3
 801cbde:	f7f0 fc42 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	332c      	adds	r3, #44	; 0x2c
 801cbe6:	4918      	ldr	r1, [pc, #96]	; (801cc48 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f7f0 fccb 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801cbf4:	683b      	ldr	r3, [r7, #0]
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	3380      	adds	r3, #128	; 0x80
 801cbfa:	681c      	ldr	r4, [r3, #0]
 801cbfc:	f107 0320 	add.w	r3, r7, #32
 801cc00:	4910      	ldr	r1, [pc, #64]	; (801cc44 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801cc02:	4618      	mov	r0, r3
 801cc04:	f7f0 f877 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801cc08:	f107 0318 	add.w	r3, r7, #24
 801cc0c:	f107 0220 	add.w	r2, r7, #32
 801cc10:	6839      	ldr	r1, [r7, #0]
 801cc12:	4618      	mov	r0, r3
 801cc14:	47a0      	blx	r4
 801cc16:	f107 0318 	add.w	r3, r7, #24
 801cc1a:	4619      	mov	r1, r3
 801cc1c:	4628      	mov	r0, r5
 801cc1e:	f7f0 fc9f 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801cc22:	f107 0318 	add.w	r3, r7, #24
 801cc26:	4618      	mov	r0, r3
 801cc28:	f7f0 fc1d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801cc2c:	f107 0320 	add.w	r3, r7, #32
 801cc30:	4618      	mov	r0, r3
 801cc32:	f7f0 fc18 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 801cc36:	bf00      	nop
 801cc38:	3728      	adds	r7, #40	; 0x28
 801cc3a:	46bd      	mov	sp, r7
 801cc3c:	bdb0      	pop	{r4, r5, r7, pc}
 801cc3e:	bf00      	nop
 801cc40:	080262dc 	.word	0x080262dc
 801cc44:	08026308 	.word	0x08026308
 801cc48:	0802630c 	.word	0x0802630c

0801cc4c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801cc4c:	b590      	push	{r4, r7, lr}
 801cc4e:	b08f      	sub	sp, #60	; 0x3c
 801cc50:	af00      	add	r7, sp, #0
 801cc52:	60f8      	str	r0, [r7, #12]
 801cc54:	60b9      	str	r1, [r7, #8]
 801cc56:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801cc58:	f107 0310 	add.w	r3, r7, #16
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	f7ff f877 	bl	801bd50 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801cc62:	f107 0310 	add.w	r3, r7, #16
 801cc66:	687a      	ldr	r2, [r7, #4]
 801cc68:	68b9      	ldr	r1, [r7, #8]
 801cc6a:	4618      	mov	r0, r3
 801cc6c:	f7ff fa16 	bl	801c09c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	332c      	adds	r3, #44	; 0x2c
 801cc74:	4937      	ldr	r1, [pc, #220]	; (801cd54 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801cc76:	4618      	mov	r0, r3
 801cc78:	f7f0 fc84 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801cc7c:	68fb      	ldr	r3, [r7, #12]
 801cc7e:	332c      	adds	r3, #44	; 0x2c
 801cc80:	68b9      	ldr	r1, [r7, #8]
 801cc82:	4618      	mov	r0, r3
 801cc84:	f7f0 fc6c 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cc88:	68fb      	ldr	r3, [r7, #12]
 801cc8a:	332c      	adds	r3, #44	; 0x2c
 801cc8c:	4932      	ldr	r1, [pc, #200]	; (801cd58 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801cc8e:	4618      	mov	r0, r3
 801cc90:	f7f0 fc78 	bl	800d584 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801cc94:	68fb      	ldr	r3, [r7, #12]
 801cc96:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cc9a:	f107 0320 	add.w	r3, r7, #32
 801cc9e:	492f      	ldr	r1, [pc, #188]	; (801cd5c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801cca0:	4618      	mov	r0, r3
 801cca2:	f7f0 f828 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801cca6:	f107 0318 	add.w	r3, r7, #24
 801ccaa:	f107 0220 	add.w	r2, r7, #32
 801ccae:	f107 0110 	add.w	r1, r7, #16
 801ccb2:	4618      	mov	r0, r3
 801ccb4:	f7ff fd4a 	bl	801c74c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801ccb8:	f107 0318 	add.w	r3, r7, #24
 801ccbc:	4619      	mov	r1, r3
 801ccbe:	4620      	mov	r0, r4
 801ccc0:	f7f0 fc4e 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801ccc4:	f107 0318 	add.w	r3, r7, #24
 801ccc8:	4618      	mov	r0, r3
 801ccca:	f7f0 fbcc 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ccce:	f107 0320 	add.w	r3, r7, #32
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	f7f0 fbc7 	bl	800d466 <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801ccd8:	68fb      	ldr	r3, [r7, #12]
 801ccda:	332c      	adds	r3, #44	; 0x2c
 801ccdc:	4920      	ldr	r1, [pc, #128]	; (801cd60 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801ccde:	4618      	mov	r0, r3
 801cce0:	f7f0 fc50 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801cce4:	68fb      	ldr	r3, [r7, #12]
 801cce6:	332c      	adds	r3, #44	; 0x2c
 801cce8:	68b9      	ldr	r1, [r7, #8]
 801ccea:	4618      	mov	r0, r3
 801ccec:	f7f0 fc38 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	332c      	adds	r3, #44	; 0x2c
 801ccf4:	4918      	ldr	r1, [pc, #96]	; (801cd58 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801ccf6:	4618      	mov	r0, r3
 801ccf8:	f7f0 fc44 	bl	800d584 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801ccfc:	68fb      	ldr	r3, [r7, #12]
 801ccfe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cd02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cd06:	4915      	ldr	r1, [pc, #84]	; (801cd5c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801cd08:	4618      	mov	r0, r3
 801cd0a:	f7ef fff4 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801cd0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cd12:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801cd16:	f107 0110 	add.w	r1, r7, #16
 801cd1a:	4618      	mov	r0, r3
 801cd1c:	f7ff fd74 	bl	801c808 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801cd20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cd24:	4619      	mov	r1, r3
 801cd26:	4620      	mov	r0, r4
 801cd28:	f7f0 fc1a 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801cd2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cd30:	4618      	mov	r0, r3
 801cd32:	f7f0 fb98 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801cd36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cd3a:	4618      	mov	r0, r3
 801cd3c:	f7f0 fb93 	bl	800d466 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801cd40:	f107 0310 	add.w	r3, r7, #16
 801cd44:	4618      	mov	r0, r3
 801cd46:	f7ff f817 	bl	801bd78 <_ZN21MockExpectedCallsListD1Ev>
}
 801cd4a:	bf00      	nop
 801cd4c:	373c      	adds	r7, #60	; 0x3c
 801cd4e:	46bd      	mov	sp, r7
 801cd50:	bd90      	pop	{r4, r7, pc}
 801cd52:	bf00      	nop
 801cd54:	08026334 	.word	0x08026334
 801cd58:	08026374 	.word	0x08026374
 801cd5c:	08026308 	.word	0x08026308
 801cd60:	08026378 	.word	0x08026378

0801cd64 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cd64:	b590      	push	{r4, r7, lr}
 801cd66:	b087      	sub	sp, #28
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	60f8      	str	r0, [r7, #12]
 801cd6c:	60b9      	str	r1, [r7, #8]
 801cd6e:	607a      	str	r2, [r7, #4]
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	68b9      	ldr	r1, [r7, #8]
 801cd74:	4618      	mov	r0, r3
 801cd76:	f7ff fee1 	bl	801cb3c <_ZN11MockFailureC1EP10UtestShell>
 801cd7a:	4a10      	ldr	r2, [pc, #64]	; (801cdbc <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cd86:	f107 0310 	add.w	r3, r7, #16
 801cd8a:	490d      	ldr	r1, [pc, #52]	; (801cdc0 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	f7ef ffb2 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801cd92:	f107 0310 	add.w	r3, r7, #16
 801cd96:	4619      	mov	r1, r3
 801cd98:	4620      	mov	r0, r4
 801cd9a:	f7f0 f818 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801cd9e:	f107 0310 	add.w	r3, r7, #16
 801cda2:	4618      	mov	r0, r3
 801cda4:	f7f0 fb5f 	bl	800d466 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	6879      	ldr	r1, [r7, #4]
 801cdac:	4618      	mov	r0, r3
 801cdae:	f7ff fee9 	bl	801cb84 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801cdb2:	68fb      	ldr	r3, [r7, #12]
 801cdb4:	4618      	mov	r0, r3
 801cdb6:	371c      	adds	r7, #28
 801cdb8:	46bd      	mov	sp, r7
 801cdba:	bd90      	pop	{r4, r7, pc}
 801cdbc:	0802834c 	.word	0x0802834c
 801cdc0:	080263b4 	.word	0x080263b4

0801cdc4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cdc4:	b590      	push	{r4, r7, lr}
 801cdc6:	b08d      	sub	sp, #52	; 0x34
 801cdc8:	af00      	add	r7, sp, #0
 801cdca:	60f8      	str	r0, [r7, #12]
 801cdcc:	60b9      	str	r1, [r7, #8]
 801cdce:	607a      	str	r2, [r7, #4]
 801cdd0:	603b      	str	r3, [r7, #0]
 801cdd2:	68fb      	ldr	r3, [r7, #12]
 801cdd4:	68b9      	ldr	r1, [r7, #8]
 801cdd6:	4618      	mov	r0, r3
 801cdd8:	f7ff feb0 	bl	801cb3c <_ZN11MockFailureC1EP10UtestShell>
 801cddc:	4a2f      	ldr	r2, [pc, #188]	; (801ce9c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801cde2:	683b      	ldr	r3, [r7, #0]
 801cde4:	681b      	ldr	r3, [r3, #0]
 801cde6:	3310      	adds	r3, #16
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	6879      	ldr	r1, [r7, #4]
 801cdec:	6838      	ldr	r0, [r7, #0]
 801cdee:	4798      	blx	r3
 801cdf0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801cdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d027      	beq.n	801ce48 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdfa:	1c5a      	adds	r2, r3, #1
 801cdfc:	f107 0314 	add.w	r3, r7, #20
 801ce00:	4611      	mov	r1, r2
 801ce02:	4618      	mov	r0, r3
 801ce04:	f7f1 fa00 	bl	800e208 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ce0e:	f107 0314 	add.w	r3, r7, #20
 801ce12:	4618      	mov	r0, r3
 801ce14:	f7f0 fafa 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801ce18:	4602      	mov	r2, r0
 801ce1a:	f107 031c 	add.w	r3, r7, #28
 801ce1e:	4920      	ldr	r1, [pc, #128]	; (801cea0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801ce20:	4618      	mov	r0, r3
 801ce22:	f7f1 f827 	bl	800de74 <_Z16StringFromFormatPKcz>
 801ce26:	f107 031c 	add.w	r3, r7, #28
 801ce2a:	4619      	mov	r1, r3
 801ce2c:	4620      	mov	r0, r4
 801ce2e:	f7ef ffce 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801ce32:	f107 031c 	add.w	r3, r7, #28
 801ce36:	4618      	mov	r0, r3
 801ce38:	f7f0 fb15 	bl	800d466 <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801ce3c:	f107 0314 	add.w	r3, r7, #20
 801ce40:	4618      	mov	r0, r3
 801ce42:	f7f0 fb10 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ce46:	e013      	b.n	801ce70 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ce4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce52:	4914      	ldr	r1, [pc, #80]	; (801cea4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801ce54:	4618      	mov	r0, r3
 801ce56:	f7ef ff4e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ce5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce5e:	4619      	mov	r1, r3
 801ce60:	4620      	mov	r0, r4
 801ce62:	f7ef ffb4 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801ce66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	f7f0 fafb 	bl	800d466 <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	332c      	adds	r3, #44	; 0x2c
 801ce74:	6879      	ldr	r1, [r7, #4]
 801ce76:	4618      	mov	r0, r3
 801ce78:	f7f0 fb72 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ce7c:	68fb      	ldr	r3, [r7, #12]
 801ce7e:	332c      	adds	r3, #44	; 0x2c
 801ce80:	4909      	ldr	r1, [pc, #36]	; (801cea8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801ce82:	4618      	mov	r0, r3
 801ce84:	f7f0 fb7e 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	6839      	ldr	r1, [r7, #0]
 801ce8c:	4618      	mov	r0, r3
 801ce8e:	f7ff fe79 	bl	801cb84 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	4618      	mov	r0, r3
 801ce96:	3734      	adds	r7, #52	; 0x34
 801ce98:	46bd      	mov	sp, r7
 801ce9a:	bd90      	pop	{r4, r7, pc}
 801ce9c:	08028cec 	.word	0x08028cec
 801cea0:	080263e4 	.word	0x080263e4
 801cea4:	08026420 	.word	0x08026420
 801cea8:	08026374 	.word	0x08026374

0801ceac <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ceac:	b590      	push	{r4, r7, lr}
 801ceae:	b089      	sub	sp, #36	; 0x24
 801ceb0:	af00      	add	r7, sp, #0
 801ceb2:	60f8      	str	r0, [r7, #12]
 801ceb4:	60b9      	str	r1, [r7, #8]
 801ceb6:	607a      	str	r2, [r7, #4]
 801ceb8:	68fb      	ldr	r3, [r7, #12]
 801ceba:	68b9      	ldr	r1, [r7, #8]
 801cebc:	4618      	mov	r0, r3
 801cebe:	f7ff fe3d 	bl	801cb3c <_ZN11MockFailureC1EP10UtestShell>
 801cec2:	4a1f      	ldr	r2, [pc, #124]	; (801cf40 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801cec4:	68fb      	ldr	r3, [r7, #12]
 801cec6:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801cec8:	f107 0310 	add.w	r3, r7, #16
 801cecc:	4618      	mov	r0, r3
 801cece:	f7fe ff3f 	bl	801bd50 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801ced2:	f107 0310 	add.w	r3, r7, #16
 801ced6:	6879      	ldr	r1, [r7, #4]
 801ced8:	4618      	mov	r0, r3
 801ceda:	f7ff f909 	bl	801c0f0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801cede:	f107 0310 	add.w	r3, r7, #16
 801cee2:	4618      	mov	r0, r3
 801cee4:	f7ff f94c 	bl	801c180 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ceee:	f107 0318 	add.w	r3, r7, #24
 801cef2:	4914      	ldr	r1, [pc, #80]	; (801cf44 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801cef4:	4618      	mov	r0, r3
 801cef6:	f7ef fefe 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801cefa:	f107 0318 	add.w	r3, r7, #24
 801cefe:	4619      	mov	r1, r3
 801cf00:	4620      	mov	r0, r4
 801cf02:	f7ef ff64 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801cf06:	f107 0318 	add.w	r3, r7, #24
 801cf0a:	4618      	mov	r0, r3
 801cf0c:	f7f0 faab 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801cf10:	68fb      	ldr	r3, [r7, #12]
 801cf12:	332c      	adds	r3, #44	; 0x2c
 801cf14:	490c      	ldr	r1, [pc, #48]	; (801cf48 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801cf16:	4618      	mov	r0, r3
 801cf18:	f7f0 fb34 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	f107 0210 	add.w	r2, r7, #16
 801cf22:	4611      	mov	r1, r2
 801cf24:	4618      	mov	r0, r3
 801cf26:	f7ff fe2d 	bl	801cb84 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801cf2a:	f107 0310 	add.w	r3, r7, #16
 801cf2e:	4618      	mov	r0, r3
 801cf30:	f7fe ff22 	bl	801bd78 <_ZN21MockExpectedCallsListD1Ev>
}
 801cf34:	68fb      	ldr	r3, [r7, #12]
 801cf36:	4618      	mov	r0, r3
 801cf38:	3724      	adds	r7, #36	; 0x24
 801cf3a:	46bd      	mov	sp, r7
 801cf3c:	bd90      	pop	{r4, r7, pc}
 801cf3e:	bf00      	nop
 801cf40:	08028320 	.word	0x08028320
 801cf44:	0802644c 	.word	0x0802644c
 801cf48:	08026374 	.word	0x08026374

0801cf4c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801cf4c:	b590      	push	{r4, r7, lr}
 801cf4e:	b099      	sub	sp, #100	; 0x64
 801cf50:	af00      	add	r7, sp, #0
 801cf52:	60f8      	str	r0, [r7, #12]
 801cf54:	60b9      	str	r1, [r7, #8]
 801cf56:	607a      	str	r2, [r7, #4]
 801cf58:	603b      	str	r3, [r7, #0]
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	68b9      	ldr	r1, [r7, #8]
 801cf5e:	4618      	mov	r0, r3
 801cf60:	f7ff fdec 	bl	801cb3c <_ZN11MockFailureC1EP10UtestShell>
 801cf64:	4a9e      	ldr	r2, [pc, #632]	; (801d1e0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801cf6a:	f107 0310 	add.w	r3, r7, #16
 801cf6e:	4618      	mov	r0, r3
 801cf70:	f7fe feee 	bl	801bd50 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801cf74:	f107 0310 	add.w	r3, r7, #16
 801cf78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801cf7a:	6879      	ldr	r1, [r7, #4]
 801cf7c:	4618      	mov	r0, r3
 801cf7e:	f7ff f88d 	bl	801c09c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801cf82:	683b      	ldr	r3, [r7, #0]
 801cf84:	681b      	ldr	r3, [r3, #0]
 801cf86:	335c      	adds	r3, #92	; 0x5c
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	f107 0218 	add.w	r2, r7, #24
 801cf8e:	6839      	ldr	r1, [r7, #0]
 801cf90:	4610      	mov	r0, r2
 801cf92:	4798      	blx	r3
 801cf94:	f107 0218 	add.w	r2, r7, #24
 801cf98:	f107 0310 	add.w	r3, r7, #16
 801cf9c:	4611      	mov	r1, r2
 801cf9e:	4618      	mov	r0, r3
 801cfa0:	f7ff f948 	bl	801c234 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801cfa4:	f107 0318 	add.w	r3, r7, #24
 801cfa8:	4618      	mov	r0, r3
 801cfaa:	f7f0 fa5c 	bl	800d466 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801cfae:	f107 0310 	add.w	r3, r7, #16
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	f7fe ff4d 	bl	801be52 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801cfb8:	4603      	mov	r3, r0
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d037      	beq.n	801d02e <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801cfbe:	68fb      	ldr	r3, [r7, #12]
 801cfc0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cfc4:	f107 0320 	add.w	r3, r7, #32
 801cfc8:	4986      	ldr	r1, [pc, #536]	; (801d1e4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801cfca:	4618      	mov	r0, r3
 801cfcc:	f7ef fe93 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801cfd0:	f107 0320 	add.w	r3, r7, #32
 801cfd4:	4619      	mov	r1, r3
 801cfd6:	4620      	mov	r0, r4
 801cfd8:	f7ef fef9 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801cfdc:	f107 0320 	add.w	r3, r7, #32
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	f7f0 fa40 	bl	800d466 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801cfe6:	68fb      	ldr	r3, [r7, #12]
 801cfe8:	332c      	adds	r3, #44	; 0x2c
 801cfea:	6879      	ldr	r1, [r7, #4]
 801cfec:	4618      	mov	r0, r3
 801cfee:	f7f0 fab7 	bl	800d560 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	332c      	adds	r3, #44	; 0x2c
 801cff6:	497c      	ldr	r1, [pc, #496]	; (801d1e8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801cff8:	4618      	mov	r0, r3
 801cffa:	f7f0 fac3 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d004:	683b      	ldr	r3, [r7, #0]
 801d006:	681b      	ldr	r3, [r3, #0]
 801d008:	335c      	adds	r3, #92	; 0x5c
 801d00a:	681b      	ldr	r3, [r3, #0]
 801d00c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d010:	6839      	ldr	r1, [r7, #0]
 801d012:	4610      	mov	r0, r2
 801d014:	4798      	blx	r3
 801d016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d01a:	4619      	mov	r1, r3
 801d01c:	4620      	mov	r0, r4
 801d01e:	f7f0 fa9f 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d026:	4618      	mov	r0, r3
 801d028:	f7f0 fa1d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801d02c:	e056      	b.n	801d0dc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801d02e:	68fb      	ldr	r3, [r7, #12]
 801d030:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d038:	496c      	ldr	r1, [pc, #432]	; (801d1ec <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801d03a:	4618      	mov	r0, r3
 801d03c:	f7ef fe5b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801d040:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d044:	4619      	mov	r1, r3
 801d046:	4620      	mov	r0, r4
 801d048:	f7ef fec1 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d04c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d050:	4618      	mov	r0, r3
 801d052:	f7f0 fa08 	bl	800d466 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801d056:	68fb      	ldr	r3, [r7, #12]
 801d058:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d05c:	683b      	ldr	r3, [r7, #0]
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	335c      	adds	r3, #92	; 0x5c
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801d068:	6839      	ldr	r1, [r7, #0]
 801d06a:	4610      	mov	r0, r2
 801d06c:	4798      	blx	r3
 801d06e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d072:	4619      	mov	r1, r3
 801d074:	4620      	mov	r0, r4
 801d076:	f7f0 fa73 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d07a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d07e:	4618      	mov	r0, r3
 801d080:	f7f0 f9f1 	bl	800d466 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801d084:	68fb      	ldr	r3, [r7, #12]
 801d086:	332c      	adds	r3, #44	; 0x2c
 801d088:	4959      	ldr	r1, [pc, #356]	; (801d1f0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7f0 fa7a 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	332c      	adds	r3, #44	; 0x2c
 801d094:	6879      	ldr	r1, [r7, #4]
 801d096:	4618      	mov	r0, r3
 801d098:	f7f0 fa62 	bl	800d560 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801d09c:	68fb      	ldr	r3, [r7, #12]
 801d09e:	332c      	adds	r3, #44	; 0x2c
 801d0a0:	4954      	ldr	r1, [pc, #336]	; (801d1f4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	f7f0 fa6e 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d0ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d0b2:	6839      	ldr	r1, [r7, #0]
 801d0b4:	4618      	mov	r0, r3
 801d0b6:	f7fd faa3 	bl	801a600 <_Z10StringFromRK14MockNamedValue>
 801d0ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d0be:	4619      	mov	r1, r3
 801d0c0:	4620      	mov	r0, r4
 801d0c2:	f7f0 fa4d 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d0c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	f7f0 f9cb 	bl	800d466 <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801d0d0:	68fb      	ldr	r3, [r7, #12]
 801d0d2:	332c      	adds	r3, #44	; 0x2c
 801d0d4:	4948      	ldr	r1, [pc, #288]	; (801d1f8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801d0d6:	4618      	mov	r0, r3
 801d0d8:	f7f0 fa54 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801d0dc:	68fb      	ldr	r3, [r7, #12]
 801d0de:	332c      	adds	r3, #44	; 0x2c
 801d0e0:	4946      	ldr	r1, [pc, #280]	; (801d1fc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	f7f0 fa4e 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d0e8:	68fb      	ldr	r3, [r7, #12]
 801d0ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d0ec:	6879      	ldr	r1, [r7, #4]
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	f7ff fdac 	bl	801cc4c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801d0f4:	68fb      	ldr	r3, [r7, #12]
 801d0f6:	332c      	adds	r3, #44	; 0x2c
 801d0f8:	4941      	ldr	r1, [pc, #260]	; (801d200 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	f7f0 fa42 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801d100:	68fb      	ldr	r3, [r7, #12]
 801d102:	332c      	adds	r3, #44	; 0x2c
 801d104:	6879      	ldr	r1, [r7, #4]
 801d106:	4618      	mov	r0, r3
 801d108:	f7f0 fa2a 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d10c:	68fb      	ldr	r3, [r7, #12]
 801d10e:	332c      	adds	r3, #44	; 0x2c
 801d110:	493a      	ldr	r1, [pc, #232]	; (801d1fc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801d112:	4618      	mov	r0, r3
 801d114:	f7f0 fa36 	bl	800d584 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	332c      	adds	r3, #44	; 0x2c
 801d11c:	4939      	ldr	r1, [pc, #228]	; (801d204 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801d11e:	4618      	mov	r0, r3
 801d120:	f7f0 fa30 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801d124:	68fb      	ldr	r3, [r7, #12]
 801d126:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d12a:	683b      	ldr	r3, [r7, #0]
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	3360      	adds	r3, #96	; 0x60
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d136:	6839      	ldr	r1, [r7, #0]
 801d138:	4610      	mov	r0, r2
 801d13a:	4798      	blx	r3
 801d13c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d140:	4619      	mov	r1, r3
 801d142:	4620      	mov	r0, r4
 801d144:	f7f0 fa0c 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d148:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d14c:	4618      	mov	r0, r3
 801d14e:	f7f0 f98a 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801d152:	68fb      	ldr	r3, [r7, #12]
 801d154:	332c      	adds	r3, #44	; 0x2c
 801d156:	492c      	ldr	r1, [pc, #176]	; (801d208 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801d158:	4618      	mov	r0, r3
 801d15a:	f7f0 fa13 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d164:	683b      	ldr	r3, [r7, #0]
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	335c      	adds	r3, #92	; 0x5c
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d170:	6839      	ldr	r1, [r7, #0]
 801d172:	4610      	mov	r0, r2
 801d174:	4798      	blx	r3
 801d176:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d17a:	4619      	mov	r1, r3
 801d17c:	4620      	mov	r0, r4
 801d17e:	f7f0 f9ef 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d182:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d186:	4618      	mov	r0, r3
 801d188:	f7f0 f96d 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801d18c:	68fb      	ldr	r3, [r7, #12]
 801d18e:	332c      	adds	r3, #44	; 0x2c
 801d190:	491e      	ldr	r1, [pc, #120]	; (801d20c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801d192:	4618      	mov	r0, r3
 801d194:	f7f0 f9f6 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d19e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d1a2:	6839      	ldr	r1, [r7, #0]
 801d1a4:	4618      	mov	r0, r3
 801d1a6:	f7fd fa2b 	bl	801a600 <_Z10StringFromRK14MockNamedValue>
 801d1aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d1ae:	4619      	mov	r1, r3
 801d1b0:	4620      	mov	r0, r4
 801d1b2:	f7f0 f9d5 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d1b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	f7f0 f953 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	332c      	adds	r3, #44	; 0x2c
 801d1c4:	490c      	ldr	r1, [pc, #48]	; (801d1f8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801d1c6:	4618      	mov	r0, r3
 801d1c8:	f7f0 f9dc 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d1cc:	f107 0310 	add.w	r3, r7, #16
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	f7fe fdd1 	bl	801bd78 <_ZN21MockExpectedCallsListD1Ev>
}
 801d1d6:	68fb      	ldr	r3, [r7, #12]
 801d1d8:	4618      	mov	r0, r3
 801d1da:	3764      	adds	r7, #100	; 0x64
 801d1dc:	46bd      	mov	sp, r7
 801d1de:	bd90      	pop	{r4, r7, pc}
 801d1e0:	08028cc0 	.word	0x08028cc0
 801d1e4:	08026470 	.word	0x08026470
 801d1e8:	080264a8 	.word	0x080264a8
 801d1ec:	080264ac 	.word	0x080264ac
 801d1f0:	080264e4 	.word	0x080264e4
 801d1f4:	080264f4 	.word	0x080264f4
 801d1f8:	080264fc 	.word	0x080264fc
 801d1fc:	08026374 	.word	0x08026374
 801d200:	08026500 	.word	0x08026500
 801d204:	08026308 	.word	0x08026308
 801d208:	08026534 	.word	0x08026534
 801d20c:	08026538 	.word	0x08026538

0801d210 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801d210:	b590      	push	{r4, r7, lr}
 801d212:	b097      	sub	sp, #92	; 0x5c
 801d214:	af00      	add	r7, sp, #0
 801d216:	60f8      	str	r0, [r7, #12]
 801d218:	60b9      	str	r1, [r7, #8]
 801d21a:	607a      	str	r2, [r7, #4]
 801d21c:	603b      	str	r3, [r7, #0]
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	68b9      	ldr	r1, [r7, #8]
 801d222:	4618      	mov	r0, r3
 801d224:	f7ff fc8a 	bl	801cb3c <_ZN11MockFailureC1EP10UtestShell>
 801d228:	4a90      	ldr	r2, [pc, #576]	; (801d46c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d22e:	f107 0310 	add.w	r3, r7, #16
 801d232:	4618      	mov	r0, r3
 801d234:	f7fe fd8c 	bl	801bd50 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801d238:	f107 0310 	add.w	r3, r7, #16
 801d23c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d23e:	6879      	ldr	r1, [r7, #4]
 801d240:	4618      	mov	r0, r3
 801d242:	f7fe ff2b 	bl	801c09c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801d246:	683b      	ldr	r3, [r7, #0]
 801d248:	681b      	ldr	r3, [r3, #0]
 801d24a:	335c      	adds	r3, #92	; 0x5c
 801d24c:	681b      	ldr	r3, [r3, #0]
 801d24e:	f107 0218 	add.w	r2, r7, #24
 801d252:	6839      	ldr	r1, [r7, #0]
 801d254:	4610      	mov	r0, r2
 801d256:	4798      	blx	r3
 801d258:	f107 0218 	add.w	r2, r7, #24
 801d25c:	f107 0310 	add.w	r3, r7, #16
 801d260:	4611      	mov	r1, r2
 801d262:	4618      	mov	r0, r3
 801d264:	f7ff f812 	bl	801c28c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801d268:	f107 0318 	add.w	r3, r7, #24
 801d26c:	4618      	mov	r0, r3
 801d26e:	f7f0 f8fa 	bl	800d466 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801d272:	f107 0310 	add.w	r3, r7, #16
 801d276:	4618      	mov	r0, r3
 801d278:	f7fe fdeb 	bl	801be52 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801d27c:	4603      	mov	r3, r0
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d037      	beq.n	801d2f2 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d288:	f107 0320 	add.w	r3, r7, #32
 801d28c:	4978      	ldr	r1, [pc, #480]	; (801d470 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801d28e:	4618      	mov	r0, r3
 801d290:	f7ef fd31 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801d294:	f107 0320 	add.w	r3, r7, #32
 801d298:	4619      	mov	r1, r3
 801d29a:	4620      	mov	r0, r4
 801d29c:	f7ef fd97 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d2a0:	f107 0320 	add.w	r3, r7, #32
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	f7f0 f8de 	bl	800d466 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	332c      	adds	r3, #44	; 0x2c
 801d2ae:	6879      	ldr	r1, [r7, #4]
 801d2b0:	4618      	mov	r0, r3
 801d2b2:	f7f0 f955 	bl	800d560 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801d2b6:	68fb      	ldr	r3, [r7, #12]
 801d2b8:	332c      	adds	r3, #44	; 0x2c
 801d2ba:	496e      	ldr	r1, [pc, #440]	; (801d474 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801d2bc:	4618      	mov	r0, r3
 801d2be:	f7f0 f961 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d2c8:	683b      	ldr	r3, [r7, #0]
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	335c      	adds	r3, #92	; 0x5c
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d2d4:	6839      	ldr	r1, [r7, #0]
 801d2d6:	4610      	mov	r0, r2
 801d2d8:	4798      	blx	r3
 801d2da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2de:	4619      	mov	r1, r3
 801d2e0:	4620      	mov	r0, r4
 801d2e2:	f7f0 f93d 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d2e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2ea:	4618      	mov	r0, r3
 801d2ec:	f7f0 f8bb 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801d2f0:	e059      	b.n	801d3a6 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d2f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d2fc:	495e      	ldr	r1, [pc, #376]	; (801d478 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801d2fe:	4618      	mov	r0, r3
 801d300:	f7ef fcf9 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801d304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d308:	4619      	mov	r1, r3
 801d30a:	4620      	mov	r0, r4
 801d30c:	f7ef fd5f 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d310:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d314:	4618      	mov	r0, r3
 801d316:	f7f0 f8a6 	bl	800d466 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801d31a:	68fb      	ldr	r3, [r7, #12]
 801d31c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d320:	683b      	ldr	r3, [r7, #0]
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	3360      	adds	r3, #96	; 0x60
 801d326:	681b      	ldr	r3, [r3, #0]
 801d328:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801d32c:	6839      	ldr	r1, [r7, #0]
 801d32e:	4610      	mov	r0, r2
 801d330:	4798      	blx	r3
 801d332:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d336:	4619      	mov	r1, r3
 801d338:	4620      	mov	r0, r4
 801d33a:	f7f0 f911 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d33e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d342:	4618      	mov	r0, r3
 801d344:	f7f0 f88f 	bl	800d466 <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	332c      	adds	r3, #44	; 0x2c
 801d34c:	494b      	ldr	r1, [pc, #300]	; (801d47c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801d34e:	4618      	mov	r0, r3
 801d350:	f7f0 f918 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d35a:	683b      	ldr	r3, [r7, #0]
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	335c      	adds	r3, #92	; 0x5c
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801d366:	6839      	ldr	r1, [r7, #0]
 801d368:	4610      	mov	r0, r2
 801d36a:	4798      	blx	r3
 801d36c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d370:	4619      	mov	r1, r3
 801d372:	4620      	mov	r0, r4
 801d374:	f7f0 f8f4 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d378:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d37c:	4618      	mov	r0, r3
 801d37e:	f7f0 f872 	bl	800d466 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801d382:	68fb      	ldr	r3, [r7, #12]
 801d384:	332c      	adds	r3, #44	; 0x2c
 801d386:	493e      	ldr	r1, [pc, #248]	; (801d480 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801d388:	4618      	mov	r0, r3
 801d38a:	f7f0 f8fb 	bl	800d584 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801d38e:	68fb      	ldr	r3, [r7, #12]
 801d390:	332c      	adds	r3, #44	; 0x2c
 801d392:	6879      	ldr	r1, [r7, #4]
 801d394:	4618      	mov	r0, r3
 801d396:	f7f0 f8e3 	bl	800d560 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	332c      	adds	r3, #44	; 0x2c
 801d39e:	4939      	ldr	r1, [pc, #228]	; (801d484 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801d3a0:	4618      	mov	r0, r3
 801d3a2:	f7f0 f8ef 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	332c      	adds	r3, #44	; 0x2c
 801d3aa:	4937      	ldr	r1, [pc, #220]	; (801d488 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801d3ac:	4618      	mov	r0, r3
 801d3ae:	f7f0 f8e9 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d3b6:	6879      	ldr	r1, [r7, #4]
 801d3b8:	4618      	mov	r0, r3
 801d3ba:	f7ff fc47 	bl	801cc4c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801d3be:	68fb      	ldr	r3, [r7, #12]
 801d3c0:	332c      	adds	r3, #44	; 0x2c
 801d3c2:	4932      	ldr	r1, [pc, #200]	; (801d48c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801d3c4:	4618      	mov	r0, r3
 801d3c6:	f7f0 f8dd 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	332c      	adds	r3, #44	; 0x2c
 801d3ce:	6879      	ldr	r1, [r7, #4]
 801d3d0:	4618      	mov	r0, r3
 801d3d2:	f7f0 f8c5 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	332c      	adds	r3, #44	; 0x2c
 801d3da:	492b      	ldr	r1, [pc, #172]	; (801d488 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f7f0 f8d1 	bl	800d584 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	332c      	adds	r3, #44	; 0x2c
 801d3e6:	492a      	ldr	r1, [pc, #168]	; (801d490 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	f7f0 f8cb 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d3f4:	683b      	ldr	r3, [r7, #0]
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	3360      	adds	r3, #96	; 0x60
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d400:	6839      	ldr	r1, [r7, #0]
 801d402:	4610      	mov	r0, r2
 801d404:	4798      	blx	r3
 801d406:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d40a:	4619      	mov	r1, r3
 801d40c:	4620      	mov	r0, r4
 801d40e:	f7f0 f8a7 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d412:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d416:	4618      	mov	r0, r3
 801d418:	f7f0 f825 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	332c      	adds	r3, #44	; 0x2c
 801d420:	491c      	ldr	r1, [pc, #112]	; (801d494 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801d422:	4618      	mov	r0, r3
 801d424:	f7f0 f8ae 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d42e:	683b      	ldr	r3, [r7, #0]
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	335c      	adds	r3, #92	; 0x5c
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d43a:	6839      	ldr	r1, [r7, #0]
 801d43c:	4610      	mov	r0, r2
 801d43e:	4798      	blx	r3
 801d440:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d444:	4619      	mov	r1, r3
 801d446:	4620      	mov	r0, r4
 801d448:	f7f0 f88a 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d44c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d450:	4618      	mov	r0, r3
 801d452:	f7f0 f808 	bl	800d466 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d456:	f107 0310 	add.w	r3, r7, #16
 801d45a:	4618      	mov	r0, r3
 801d45c:	f7fe fc8c 	bl	801bd78 <_ZN21MockExpectedCallsListD1Ev>
}
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	4618      	mov	r0, r3
 801d464:	375c      	adds	r7, #92	; 0x5c
 801d466:	46bd      	mov	sp, r7
 801d468:	bd90      	pop	{r4, r7, pc}
 801d46a:	bf00      	nop
 801d46c:	08028c94 	.word	0x08028c94
 801d470:	0802653c 	.word	0x0802653c
 801d474:	080264a8 	.word	0x080264a8
 801d478:	0802657c 	.word	0x0802657c
 801d47c:	080265a8 	.word	0x080265a8
 801d480:	080264e4 	.word	0x080264e4
 801d484:	080265c0 	.word	0x080265c0
 801d488:	08026374 	.word	0x08026374
 801d48c:	080265c4 	.word	0x080265c4
 801d490:	08026308 	.word	0x08026308
 801d494:	08026534 	.word	0x08026534

0801d498 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d498:	b590      	push	{r4, r7, lr}
 801d49a:	b08b      	sub	sp, #44	; 0x2c
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	60f8      	str	r0, [r7, #12]
 801d4a0:	60b9      	str	r1, [r7, #8]
 801d4a2:	607a      	str	r2, [r7, #4]
 801d4a4:	603b      	str	r3, [r7, #0]
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	68b9      	ldr	r1, [r7, #8]
 801d4aa:	4618      	mov	r0, r3
 801d4ac:	f7ff fb46 	bl	801cb3c <_ZN11MockFailureC1EP10UtestShell>
 801d4b0:	4a30      	ldr	r2, [pc, #192]	; (801d574 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801d4b6:	f107 0310 	add.w	r3, r7, #16
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f7fe fc48 	bl	801bd50 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801d4c0:	f107 0310 	add.w	r3, r7, #16
 801d4c4:	683a      	ldr	r2, [r7, #0]
 801d4c6:	6879      	ldr	r1, [r7, #4]
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f7fe fde7 	bl	801c09c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d4d4:	f107 0318 	add.w	r3, r7, #24
 801d4d8:	4927      	ldr	r1, [pc, #156]	; (801d578 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801d4da:	4618      	mov	r0, r3
 801d4dc:	f7ef fc0b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801d4e0:	f107 0318 	add.w	r3, r7, #24
 801d4e4:	4619      	mov	r1, r3
 801d4e6:	4620      	mov	r0, r4
 801d4e8:	f7ef fc71 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d4ec:	f107 0318 	add.w	r3, r7, #24
 801d4f0:	4618      	mov	r0, r3
 801d4f2:	f7ef ffb8 	bl	800d466 <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801d4f6:	68fb      	ldr	r3, [r7, #12]
 801d4f8:	332c      	adds	r3, #44	; 0x2c
 801d4fa:	6879      	ldr	r1, [r7, #4]
 801d4fc:	4618      	mov	r0, r3
 801d4fe:	f7f0 f82f 	bl	800d560 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	332c      	adds	r3, #44	; 0x2c
 801d506:	491d      	ldr	r1, [pc, #116]	; (801d57c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801d508:	4618      	mov	r0, r3
 801d50a:	f7f0 f83b 	bl	800d584 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	683a      	ldr	r2, [r7, #0]
 801d512:	6879      	ldr	r1, [r7, #4]
 801d514:	4618      	mov	r0, r3
 801d516:	f7ff fb99 	bl	801cc4c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801d51a:	68fb      	ldr	r3, [r7, #12]
 801d51c:	332c      	adds	r3, #44	; 0x2c
 801d51e:	4918      	ldr	r1, [pc, #96]	; (801d580 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801d520:	4618      	mov	r0, r3
 801d522:	f7f0 f82f 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	332c      	adds	r3, #44	; 0x2c
 801d52a:	4916      	ldr	r1, [pc, #88]	; (801d584 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801d52c:	4618      	mov	r0, r3
 801d52e:	f7f0 f829 	bl	800d584 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d538:	f107 0320 	add.w	r3, r7, #32
 801d53c:	f107 0210 	add.w	r2, r7, #16
 801d540:	4611      	mov	r1, r2
 801d542:	4618      	mov	r0, r3
 801d544:	f7ff f9bc 	bl	801c8c0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801d548:	f107 0320 	add.w	r3, r7, #32
 801d54c:	4619      	mov	r1, r3
 801d54e:	4620      	mov	r0, r4
 801d550:	f7f0 f806 	bl	800d560 <_ZN12SimpleStringpLERKS_>
 801d554:	f107 0320 	add.w	r3, r7, #32
 801d558:	4618      	mov	r0, r3
 801d55a:	f7ef ff84 	bl	800d466 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801d55e:	f107 0310 	add.w	r3, r7, #16
 801d562:	4618      	mov	r0, r3
 801d564:	f7fe fc08 	bl	801bd78 <_ZN21MockExpectedCallsListD1Ev>
}
 801d568:	68fb      	ldr	r3, [r7, #12]
 801d56a:	4618      	mov	r0, r3
 801d56c:	372c      	adds	r7, #44	; 0x2c
 801d56e:	46bd      	mov	sp, r7
 801d570:	bd90      	pop	{r4, r7, pc}
 801d572:	bf00      	nop
 801d574:	08028c68 	.word	0x08028c68
 801d578:	08026600 	.word	0x08026600
 801d57c:	08026630 	.word	0x08026630
 801d580:	08026644 	.word	0x08026644
 801d584:	08026308 	.word	0x08026308

0801d588 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801d588:	b590      	push	{r4, r7, lr}
 801d58a:	b087      	sub	sp, #28
 801d58c:	af00      	add	r7, sp, #0
 801d58e:	60f8      	str	r0, [r7, #12]
 801d590:	60b9      	str	r1, [r7, #8]
 801d592:	607a      	str	r2, [r7, #4]
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	68b9      	ldr	r1, [r7, #8]
 801d598:	4618      	mov	r0, r3
 801d59a:	f7ff facf 	bl	801cb3c <_ZN11MockFailureC1EP10UtestShell>
 801d59e:	4a10      	ldr	r2, [pc, #64]	; (801d5e0 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801d5a0:	68fb      	ldr	r3, [r7, #12]
 801d5a2:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801d5a4:	68fb      	ldr	r3, [r7, #12]
 801d5a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d5aa:	6878      	ldr	r0, [r7, #4]
 801d5ac:	f7ef ff2e 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801d5b0:	4602      	mov	r2, r0
 801d5b2:	f107 0310 	add.w	r3, r7, #16
 801d5b6:	490b      	ldr	r1, [pc, #44]	; (801d5e4 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801d5b8:	4618      	mov	r0, r3
 801d5ba:	f7f0 fc5b 	bl	800de74 <_Z16StringFromFormatPKcz>
 801d5be:	f107 0310 	add.w	r3, r7, #16
 801d5c2:	4619      	mov	r1, r3
 801d5c4:	4620      	mov	r0, r4
 801d5c6:	f7ef fc02 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d5ca:	f107 0310 	add.w	r3, r7, #16
 801d5ce:	4618      	mov	r0, r3
 801d5d0:	f7ef ff49 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 801d5d4:	68fb      	ldr	r3, [r7, #12]
 801d5d6:	4618      	mov	r0, r3
 801d5d8:	371c      	adds	r7, #28
 801d5da:	46bd      	mov	sp, r7
 801d5dc:	bd90      	pop	{r4, r7, pc}
 801d5de:	bf00      	nop
 801d5e0:	08028c3c 	.word	0x08028c3c
 801d5e4:	08026670 	.word	0x08026670

0801d5e8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801d5e8:	b590      	push	{r4, r7, lr}
 801d5ea:	b087      	sub	sp, #28
 801d5ec:	af00      	add	r7, sp, #0
 801d5ee:	60f8      	str	r0, [r7, #12]
 801d5f0:	60b9      	str	r1, [r7, #8]
 801d5f2:	607a      	str	r2, [r7, #4]
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	68b9      	ldr	r1, [r7, #8]
 801d5f8:	4618      	mov	r0, r3
 801d5fa:	f7ff fa9f 	bl	801cb3c <_ZN11MockFailureC1EP10UtestShell>
 801d5fe:	4a10      	ldr	r2, [pc, #64]	; (801d640 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d60a:	6878      	ldr	r0, [r7, #4]
 801d60c:	f7ef fefe 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801d610:	4602      	mov	r2, r0
 801d612:	f107 0310 	add.w	r3, r7, #16
 801d616:	490b      	ldr	r1, [pc, #44]	; (801d644 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801d618:	4618      	mov	r0, r3
 801d61a:	f7f0 fc2b 	bl	800de74 <_Z16StringFromFormatPKcz>
 801d61e:	f107 0310 	add.w	r3, r7, #16
 801d622:	4619      	mov	r1, r3
 801d624:	4620      	mov	r0, r4
 801d626:	f7ef fbd2 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d62a:	f107 0310 	add.w	r3, r7, #16
 801d62e:	4618      	mov	r0, r3
 801d630:	f7ef ff19 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	4618      	mov	r0, r3
 801d638:	371c      	adds	r7, #28
 801d63a:	46bd      	mov	sp, r7
 801d63c:	bd90      	pop	{r4, r7, pc}
 801d63e:	bf00      	nop
 801d640:	08028c10 	.word	0x08028c10
 801d644:	080266c8 	.word	0x080266c8

0801d648 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d648:	b590      	push	{r4, r7, lr}
 801d64a:	b087      	sub	sp, #28
 801d64c:	af00      	add	r7, sp, #0
 801d64e:	60f8      	str	r0, [r7, #12]
 801d650:	60b9      	str	r1, [r7, #8]
 801d652:	607a      	str	r2, [r7, #4]
 801d654:	603b      	str	r3, [r7, #0]
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	68b9      	ldr	r1, [r7, #8]
 801d65a:	4618      	mov	r0, r3
 801d65c:	f7ff fa6e 	bl	801cb3c <_ZN11MockFailureC1EP10UtestShell>
 801d660:	4a12      	ldr	r2, [pc, #72]	; (801d6ac <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801d662:	68fb      	ldr	r3, [r7, #12]
 801d664:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801d66c:	6878      	ldr	r0, [r7, #4]
 801d66e:	f7ef fecd 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801d672:	4602      	mov	r2, r0
 801d674:	f107 0010 	add.w	r0, r7, #16
 801d678:	683b      	ldr	r3, [r7, #0]
 801d67a:	490d      	ldr	r1, [pc, #52]	; (801d6b0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801d67c:	f7f0 fbfa 	bl	800de74 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801d680:	f107 0310 	add.w	r3, r7, #16
 801d684:	4619      	mov	r1, r3
 801d686:	4620      	mov	r0, r4
 801d688:	f7ef fba1 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d68c:	f107 0310 	add.w	r3, r7, #16
 801d690:	4618      	mov	r0, r3
 801d692:	f7ef fee8 	bl	800d466 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d69a:	6879      	ldr	r1, [r7, #4]
 801d69c:	4618      	mov	r0, r3
 801d69e:	f7ff fad5 	bl	801cc4c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	4618      	mov	r0, r3
 801d6a6:	371c      	adds	r7, #28
 801d6a8:	46bd      	mov	sp, r7
 801d6aa:	bd90      	pop	{r4, r7, pc}
 801d6ac:	08028be4 	.word	0x08028be4
 801d6b0:	08026718 	.word	0x08026718

0801d6b4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d6b4:	b590      	push	{r4, r7, lr}
 801d6b6:	b087      	sub	sp, #28
 801d6b8:	af00      	add	r7, sp, #0
 801d6ba:	60f8      	str	r0, [r7, #12]
 801d6bc:	60b9      	str	r1, [r7, #8]
 801d6be:	607a      	str	r2, [r7, #4]
 801d6c0:	603b      	str	r3, [r7, #0]
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	68b9      	ldr	r1, [r7, #8]
 801d6c6:	4618      	mov	r0, r3
 801d6c8:	f7ff fa38 	bl	801cb3c <_ZN11MockFailureC1EP10UtestShell>
 801d6cc:	4a12      	ldr	r2, [pc, #72]	; (801d718 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d6d8:	6878      	ldr	r0, [r7, #4]
 801d6da:	f7ef fe97 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801d6de:	4602      	mov	r2, r0
 801d6e0:	f107 0310 	add.w	r3, r7, #16
 801d6e4:	490d      	ldr	r1, [pc, #52]	; (801d71c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801d6e6:	4618      	mov	r0, r3
 801d6e8:	f7f0 fbc4 	bl	800de74 <_Z16StringFromFormatPKcz>
 801d6ec:	f107 0310 	add.w	r3, r7, #16
 801d6f0:	4619      	mov	r1, r3
 801d6f2:	4620      	mov	r0, r4
 801d6f4:	f7ef fb6b 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d6f8:	f107 0310 	add.w	r3, r7, #16
 801d6fc:	4618      	mov	r0, r3
 801d6fe:	f7ef feb2 	bl	800d466 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	683a      	ldr	r2, [r7, #0]
 801d706:	6879      	ldr	r1, [r7, #4]
 801d708:	4618      	mov	r0, r3
 801d70a:	f7ff fa9f 	bl	801cc4c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	4618      	mov	r0, r3
 801d712:	371c      	adds	r7, #28
 801d714:	46bd      	mov	sp, r7
 801d716:	bd90      	pop	{r4, r7, pc}
 801d718:	08028bb8 	.word	0x08028bb8
 801d71c:	0802677c 	.word	0x0802677c

0801d720 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801d720:	b480      	push	{r7}
 801d722:	b083      	sub	sp, #12
 801d724:	af00      	add	r7, sp, #0
 801d726:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801d728:	4a04      	ldr	r2, [pc, #16]	; (801d73c <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	6013      	str	r3, [r2, #0]
}
 801d72e:	bf00      	nop
 801d730:	370c      	adds	r7, #12
 801d732:	46bd      	mov	sp, r7
 801d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d738:	4770      	bx	lr
 801d73a:	bf00      	nop
 801d73c:	20000ec4 	.word	0x20000ec4

0801d740 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801d740:	b580      	push	{r7, lr}
 801d742:	b082      	sub	sp, #8
 801d744:	af00      	add	r7, sp, #0
 801d746:	6078      	str	r0, [r7, #4]
 801d748:	6039      	str	r1, [r7, #0]
 801d74a:	4a10      	ldr	r2, [pc, #64]	; (801d78c <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	601a      	str	r2, [r3, #0]
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	3304      	adds	r3, #4
 801d754:	6839      	ldr	r1, [r7, #0]
 801d756:	4618      	mov	r0, r3
 801d758:	f7ef fb21 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 801d75c:	687b      	ldr	r3, [r7, #4]
 801d75e:	330c      	adds	r3, #12
 801d760:	490b      	ldr	r1, [pc, #44]	; (801d790 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801d762:	4618      	mov	r0, r3
 801d764:	f7ef fac7 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	2200      	movs	r2, #0
 801d76c:	629a      	str	r2, [r3, #40]	; 0x28
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	2200      	movs	r2, #0
 801d772:	62da      	str	r2, [r3, #44]	; 0x2c
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	2200      	movs	r2, #0
 801d778:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	2200      	movs	r2, #0
 801d77e:	619a      	str	r2, [r3, #24]
}
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	4618      	mov	r0, r3
 801d784:	3708      	adds	r7, #8
 801d786:	46bd      	mov	sp, r7
 801d788:	bd80      	pop	{r7, pc}
 801d78a:	bf00      	nop
 801d78c:	08029440 	.word	0x08029440
 801d790:	080267cc 	.word	0x080267cc

0801d794 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801d794:	b580      	push	{r7, lr}
 801d796:	b082      	sub	sp, #8
 801d798:	af00      	add	r7, sp, #0
 801d79a:	6078      	str	r0, [r7, #4]
 801d79c:	4a08      	ldr	r2, [pc, #32]	; (801d7c0 <_ZN14MockNamedValueD1Ev+0x2c>)
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	601a      	str	r2, [r3, #0]
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	330c      	adds	r3, #12
 801d7a6:	4618      	mov	r0, r3
 801d7a8:	f7ef fe5d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	3304      	adds	r3, #4
 801d7b0:	4618      	mov	r0, r3
 801d7b2:	f7ef fe58 	bl	800d466 <_ZN12SimpleStringD1Ev>
{
}
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	4618      	mov	r0, r3
 801d7ba:	3708      	adds	r7, #8
 801d7bc:	46bd      	mov	sp, r7
 801d7be:	bd80      	pop	{r7, pc}
 801d7c0:	08029440 	.word	0x08029440

0801d7c4 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801d7c4:	b580      	push	{r7, lr}
 801d7c6:	b082      	sub	sp, #8
 801d7c8:	af00      	add	r7, sp, #0
 801d7ca:	6078      	str	r0, [r7, #4]
}
 801d7cc:	6878      	ldr	r0, [r7, #4]
 801d7ce:	f7ff ffe1 	bl	801d794 <_ZN14MockNamedValueD1Ev>
 801d7d2:	2138      	movs	r1, #56	; 0x38
 801d7d4:	6878      	ldr	r0, [r7, #4]
 801d7d6:	f7ec fedf 	bl	800a598 <_ZdlPvj>
 801d7da:	687b      	ldr	r3, [r7, #4]
 801d7dc:	4618      	mov	r0, r3
 801d7de:	3708      	adds	r7, #8
 801d7e0:	46bd      	mov	sp, r7
 801d7e2:	bd80      	pop	{r7, pc}

0801d7e4 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801d7e4:	b590      	push	{r4, r7, lr}
 801d7e6:	b085      	sub	sp, #20
 801d7e8:	af00      	add	r7, sp, #0
 801d7ea:	6078      	str	r0, [r7, #4]
 801d7ec:	460b      	mov	r3, r1
 801d7ee:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	f103 040c 	add.w	r4, r3, #12
 801d7f6:	f107 0308 	add.w	r3, r7, #8
 801d7fa:	490b      	ldr	r1, [pc, #44]	; (801d828 <_ZN14MockNamedValue8setValueEb+0x44>)
 801d7fc:	4618      	mov	r0, r3
 801d7fe:	f7ef fa7a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801d802:	f107 0308 	add.w	r3, r7, #8
 801d806:	4619      	mov	r1, r3
 801d808:	4620      	mov	r0, r4
 801d80a:	f7ef fae0 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d80e:	f107 0308 	add.w	r3, r7, #8
 801d812:	4618      	mov	r0, r3
 801d814:	f7ef fe27 	bl	800d466 <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	78fa      	ldrb	r2, [r7, #3]
 801d81c:	761a      	strb	r2, [r3, #24]
}
 801d81e:	bf00      	nop
 801d820:	3714      	adds	r7, #20
 801d822:	46bd      	mov	sp, r7
 801d824:	bd90      	pop	{r4, r7, pc}
 801d826:	bf00      	nop
 801d828:	080267d0 	.word	0x080267d0

0801d82c <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801d82c:	b590      	push	{r4, r7, lr}
 801d82e:	b085      	sub	sp, #20
 801d830:	af00      	add	r7, sp, #0
 801d832:	6078      	str	r0, [r7, #4]
 801d834:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	f103 040c 	add.w	r4, r3, #12
 801d83c:	f107 0308 	add.w	r3, r7, #8
 801d840:	490a      	ldr	r1, [pc, #40]	; (801d86c <_ZN14MockNamedValue8setValueEj+0x40>)
 801d842:	4618      	mov	r0, r3
 801d844:	f7ef fa57 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801d848:	f107 0308 	add.w	r3, r7, #8
 801d84c:	4619      	mov	r1, r3
 801d84e:	4620      	mov	r0, r4
 801d850:	f7ef fabd 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d854:	f107 0308 	add.w	r3, r7, #8
 801d858:	4618      	mov	r0, r3
 801d85a:	f7ef fe04 	bl	800d466 <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801d85e:	687b      	ldr	r3, [r7, #4]
 801d860:	683a      	ldr	r2, [r7, #0]
 801d862:	619a      	str	r2, [r3, #24]
}
 801d864:	bf00      	nop
 801d866:	3714      	adds	r7, #20
 801d868:	46bd      	mov	sp, r7
 801d86a:	bd90      	pop	{r4, r7, pc}
 801d86c:	080267d8 	.word	0x080267d8

0801d870 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801d870:	b590      	push	{r4, r7, lr}
 801d872:	b085      	sub	sp, #20
 801d874:	af00      	add	r7, sp, #0
 801d876:	6078      	str	r0, [r7, #4]
 801d878:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	f103 040c 	add.w	r4, r3, #12
 801d880:	f107 0308 	add.w	r3, r7, #8
 801d884:	490a      	ldr	r1, [pc, #40]	; (801d8b0 <_ZN14MockNamedValue8setValueEi+0x40>)
 801d886:	4618      	mov	r0, r3
 801d888:	f7ef fa35 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801d88c:	f107 0308 	add.w	r3, r7, #8
 801d890:	4619      	mov	r1, r3
 801d892:	4620      	mov	r0, r4
 801d894:	f7ef fa9b 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d898:	f107 0308 	add.w	r3, r7, #8
 801d89c:	4618      	mov	r0, r3
 801d89e:	f7ef fde2 	bl	800d466 <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	683a      	ldr	r2, [r7, #0]
 801d8a6:	619a      	str	r2, [r3, #24]
}
 801d8a8:	bf00      	nop
 801d8aa:	3714      	adds	r7, #20
 801d8ac:	46bd      	mov	sp, r7
 801d8ae:	bd90      	pop	{r4, r7, pc}
 801d8b0:	080267cc 	.word	0x080267cc

0801d8b4 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801d8b4:	b590      	push	{r4, r7, lr}
 801d8b6:	b085      	sub	sp, #20
 801d8b8:	af00      	add	r7, sp, #0
 801d8ba:	6078      	str	r0, [r7, #4]
 801d8bc:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	f103 040c 	add.w	r4, r3, #12
 801d8c4:	f107 0308 	add.w	r3, r7, #8
 801d8c8:	490a      	ldr	r1, [pc, #40]	; (801d8f4 <_ZN14MockNamedValue8setValueEl+0x40>)
 801d8ca:	4618      	mov	r0, r3
 801d8cc:	f7ef fa13 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801d8d0:	f107 0308 	add.w	r3, r7, #8
 801d8d4:	4619      	mov	r1, r3
 801d8d6:	4620      	mov	r0, r4
 801d8d8:	f7ef fa79 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d8dc:	f107 0308 	add.w	r3, r7, #8
 801d8e0:	4618      	mov	r0, r3
 801d8e2:	f7ef fdc0 	bl	800d466 <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	683a      	ldr	r2, [r7, #0]
 801d8ea:	619a      	str	r2, [r3, #24]
}
 801d8ec:	bf00      	nop
 801d8ee:	3714      	adds	r7, #20
 801d8f0:	46bd      	mov	sp, r7
 801d8f2:	bd90      	pop	{r4, r7, pc}
 801d8f4:	080267e8 	.word	0x080267e8

0801d8f8 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801d8f8:	b590      	push	{r4, r7, lr}
 801d8fa:	b085      	sub	sp, #20
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	6078      	str	r0, [r7, #4]
 801d900:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	f103 040c 	add.w	r4, r3, #12
 801d908:	f107 0308 	add.w	r3, r7, #8
 801d90c:	490a      	ldr	r1, [pc, #40]	; (801d938 <_ZN14MockNamedValue8setValueEm+0x40>)
 801d90e:	4618      	mov	r0, r3
 801d910:	f7ef f9f1 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801d914:	f107 0308 	add.w	r3, r7, #8
 801d918:	4619      	mov	r1, r3
 801d91a:	4620      	mov	r0, r4
 801d91c:	f7ef fa57 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801d920:	f107 0308 	add.w	r3, r7, #8
 801d924:	4618      	mov	r0, r3
 801d926:	f7ef fd9e 	bl	800d466 <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	683a      	ldr	r2, [r7, #0]
 801d92e:	619a      	str	r2, [r3, #24]
}
 801d930:	bf00      	nop
 801d932:	3714      	adds	r7, #20
 801d934:	46bd      	mov	sp, r7
 801d936:	bd90      	pop	{r4, r7, pc}
 801d938:	080267f4 	.word	0x080267f4

0801d93c <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801d93c:	b5b0      	push	{r4, r5, r7, lr}
 801d93e:	b086      	sub	sp, #24
 801d940:	af02      	add	r7, sp, #8
 801d942:	60f8      	str	r0, [r7, #12]
 801d944:	1d3b      	adds	r3, r7, #4
 801d946:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801d94a:	f7f6 fdb7 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801d94e:	4604      	mov	r4, r0
 801d950:	6823      	ldr	r3, [r4, #0]
 801d952:	3368      	adds	r3, #104	; 0x68
 801d954:	681d      	ldr	r5, [r3, #0]
 801d956:	f7f6 fdc1 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d95a:	4603      	mov	r3, r0
 801d95c:	9300      	str	r3, [sp, #0]
 801d95e:	2367      	movs	r3, #103	; 0x67
 801d960:	4a03      	ldr	r2, [pc, #12]	; (801d970 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801d962:	4904      	ldr	r1, [pc, #16]	; (801d974 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801d964:	4620      	mov	r0, r4
 801d966:	47a8      	blx	r5
}
 801d968:	bf00      	nop
 801d96a:	3710      	adds	r7, #16
 801d96c:	46bd      	mov	sp, r7
 801d96e:	bdb0      	pop	{r4, r5, r7, pc}
 801d970:	08026808 	.word	0x08026808
 801d974:	08026824 	.word	0x08026824

0801d978 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801d978:	b5b0      	push	{r4, r5, r7, lr}
 801d97a:	b086      	sub	sp, #24
 801d97c:	af02      	add	r7, sp, #8
 801d97e:	60f8      	str	r0, [r7, #12]
 801d980:	1d3b      	adds	r3, r7, #4
 801d982:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801d986:	f7f6 fd99 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801d98a:	4604      	mov	r4, r0
 801d98c:	6823      	ldr	r3, [r4, #0]
 801d98e:	3368      	adds	r3, #104	; 0x68
 801d990:	681d      	ldr	r5, [r3, #0]
 801d992:	f7f6 fda3 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d996:	4603      	mov	r3, r0
 801d998:	9300      	str	r3, [sp, #0]
 801d99a:	236c      	movs	r3, #108	; 0x6c
 801d99c:	4a03      	ldr	r2, [pc, #12]	; (801d9ac <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801d99e:	4904      	ldr	r1, [pc, #16]	; (801d9b0 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801d9a0:	4620      	mov	r0, r4
 801d9a2:	47a8      	blx	r5
}
 801d9a4:	bf00      	nop
 801d9a6:	3710      	adds	r7, #16
 801d9a8:	46bd      	mov	sp, r7
 801d9aa:	bdb0      	pop	{r4, r5, r7, pc}
 801d9ac:	08026808 	.word	0x08026808
 801d9b0:	08026844 	.word	0x08026844
 801d9b4:	00000000 	.word	0x00000000

0801d9b8 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801d9b8:	b580      	push	{r7, lr}
 801d9ba:	b084      	sub	sp, #16
 801d9bc:	af00      	add	r7, sp, #0
 801d9be:	60f8      	str	r0, [r7, #12]
 801d9c0:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801d9c4:	68fb      	ldr	r3, [r7, #12]
 801d9c6:	681b      	ldr	r3, [r3, #0]
 801d9c8:	3328      	adds	r3, #40	; 0x28
 801d9ca:	681b      	ldr	r3, [r3, #0]
 801d9cc:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801d9e0 <_ZN14MockNamedValue8setValueEd+0x28>
 801d9d0:	ed97 0b00 	vldr	d0, [r7]
 801d9d4:	68f8      	ldr	r0, [r7, #12]
 801d9d6:	4798      	blx	r3
}
 801d9d8:	bf00      	nop
 801d9da:	3710      	adds	r7, #16
 801d9dc:	46bd      	mov	sp, r7
 801d9de:	bd80      	pop	{r7, pc}
 801d9e0:	47ae147b 	.word	0x47ae147b
 801d9e4:	3f747ae1 	.word	0x3f747ae1

0801d9e8 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801d9e8:	b590      	push	{r4, r7, lr}
 801d9ea:	b089      	sub	sp, #36	; 0x24
 801d9ec:	af00      	add	r7, sp, #0
 801d9ee:	6178      	str	r0, [r7, #20]
 801d9f0:	ed87 0b02 	vstr	d0, [r7, #8]
 801d9f4:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801d9f8:	697b      	ldr	r3, [r7, #20]
 801d9fa:	f103 040c 	add.w	r4, r3, #12
 801d9fe:	f107 0318 	add.w	r3, r7, #24
 801da02:	490e      	ldr	r1, [pc, #56]	; (801da3c <_ZN14MockNamedValue8setValueEdd+0x54>)
 801da04:	4618      	mov	r0, r3
 801da06:	f7ef f976 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801da0a:	f107 0318 	add.w	r3, r7, #24
 801da0e:	4619      	mov	r1, r3
 801da10:	4620      	mov	r0, r4
 801da12:	f7ef f9dc 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801da16:	f107 0318 	add.w	r3, r7, #24
 801da1a:	4618      	mov	r0, r3
 801da1c:	f7ef fd23 	bl	800d466 <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801da20:	6979      	ldr	r1, [r7, #20]
 801da22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801da26:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801da2a:	6979      	ldr	r1, [r7, #20]
 801da2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801da30:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801da34:	bf00      	nop
 801da36:	3724      	adds	r7, #36	; 0x24
 801da38:	46bd      	mov	sp, r7
 801da3a:	bd90      	pop	{r4, r7, pc}
 801da3c:	08026870 	.word	0x08026870

0801da40 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801da40:	b590      	push	{r4, r7, lr}
 801da42:	b085      	sub	sp, #20
 801da44:	af00      	add	r7, sp, #0
 801da46:	6078      	str	r0, [r7, #4]
 801da48:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	f103 040c 	add.w	r4, r3, #12
 801da50:	f107 0308 	add.w	r3, r7, #8
 801da54:	490a      	ldr	r1, [pc, #40]	; (801da80 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801da56:	4618      	mov	r0, r3
 801da58:	f7ef f94d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801da5c:	f107 0308 	add.w	r3, r7, #8
 801da60:	4619      	mov	r1, r3
 801da62:	4620      	mov	r0, r4
 801da64:	f7ef f9b3 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801da68:	f107 0308 	add.w	r3, r7, #8
 801da6c:	4618      	mov	r0, r3
 801da6e:	f7ef fcfa 	bl	800d466 <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	683a      	ldr	r2, [r7, #0]
 801da76:	619a      	str	r2, [r3, #24]
}
 801da78:	bf00      	nop
 801da7a:	3714      	adds	r7, #20
 801da7c:	46bd      	mov	sp, r7
 801da7e:	bd90      	pop	{r4, r7, pc}
 801da80:	08026878 	.word	0x08026878

0801da84 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801da84:	b590      	push	{r4, r7, lr}
 801da86:	b085      	sub	sp, #20
 801da88:	af00      	add	r7, sp, #0
 801da8a:	6078      	str	r0, [r7, #4]
 801da8c:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	f103 040c 	add.w	r4, r3, #12
 801da94:	f107 0308 	add.w	r3, r7, #8
 801da98:	490a      	ldr	r1, [pc, #40]	; (801dac4 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801da9a:	4618      	mov	r0, r3
 801da9c:	f7ef f92b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801daa0:	f107 0308 	add.w	r3, r7, #8
 801daa4:	4619      	mov	r1, r3
 801daa6:	4620      	mov	r0, r4
 801daa8:	f7ef f991 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801daac:	f107 0308 	add.w	r3, r7, #8
 801dab0:	4618      	mov	r0, r3
 801dab2:	f7ef fcd8 	bl	800d466 <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	683a      	ldr	r2, [r7, #0]
 801daba:	619a      	str	r2, [r3, #24]
}
 801dabc:	bf00      	nop
 801dabe:	3714      	adds	r7, #20
 801dac0:	46bd      	mov	sp, r7
 801dac2:	bd90      	pop	{r4, r7, pc}
 801dac4:	08026880 	.word	0x08026880

0801dac8 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801dac8:	b590      	push	{r4, r7, lr}
 801daca:	b085      	sub	sp, #20
 801dacc:	af00      	add	r7, sp, #0
 801dace:	6078      	str	r0, [r7, #4]
 801dad0:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	f103 040c 	add.w	r4, r3, #12
 801dad8:	f107 0308 	add.w	r3, r7, #8
 801dadc:	490a      	ldr	r1, [pc, #40]	; (801db08 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801dade:	4618      	mov	r0, r3
 801dae0:	f7ef f909 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801dae4:	f107 0308 	add.w	r3, r7, #8
 801dae8:	4619      	mov	r1, r3
 801daea:	4620      	mov	r0, r4
 801daec:	f7ef f96f 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801daf0:	f107 0308 	add.w	r3, r7, #8
 801daf4:	4618      	mov	r0, r3
 801daf6:	f7ef fcb6 	bl	800d466 <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	683a      	ldr	r2, [r7, #0]
 801dafe:	619a      	str	r2, [r3, #24]
}
 801db00:	bf00      	nop
 801db02:	3714      	adds	r7, #20
 801db04:	46bd      	mov	sp, r7
 801db06:	bd90      	pop	{r4, r7, pc}
 801db08:	0802688c 	.word	0x0802688c

0801db0c <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801db0c:	b590      	push	{r4, r7, lr}
 801db0e:	b085      	sub	sp, #20
 801db10:	af00      	add	r7, sp, #0
 801db12:	6078      	str	r0, [r7, #4]
 801db14:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	f103 040c 	add.w	r4, r3, #12
 801db1c:	f107 0308 	add.w	r3, r7, #8
 801db20:	490a      	ldr	r1, [pc, #40]	; (801db4c <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801db22:	4618      	mov	r0, r3
 801db24:	f7ef f8e7 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801db28:	f107 0308 	add.w	r3, r7, #8
 801db2c:	4619      	mov	r1, r3
 801db2e:	4620      	mov	r0, r4
 801db30:	f7ef f94d 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801db34:	f107 0308 	add.w	r3, r7, #8
 801db38:	4618      	mov	r0, r3
 801db3a:	f7ef fc94 	bl	800d466 <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	683a      	ldr	r2, [r7, #0]
 801db42:	619a      	str	r2, [r3, #24]
}
 801db44:	bf00      	nop
 801db46:	3714      	adds	r7, #20
 801db48:	46bd      	mov	sp, r7
 801db4a:	bd90      	pop	{r4, r7, pc}
 801db4c:	08026898 	.word	0x08026898

0801db50 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801db50:	b590      	push	{r4, r7, lr}
 801db52:	b087      	sub	sp, #28
 801db54:	af00      	add	r7, sp, #0
 801db56:	60f8      	str	r0, [r7, #12]
 801db58:	60b9      	str	r1, [r7, #8]
 801db5a:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801db5c:	68fb      	ldr	r3, [r7, #12]
 801db5e:	f103 040c 	add.w	r4, r3, #12
 801db62:	f107 0310 	add.w	r3, r7, #16
 801db66:	490c      	ldr	r1, [pc, #48]	; (801db98 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801db68:	4618      	mov	r0, r3
 801db6a:	f7ef f8c4 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801db6e:	f107 0310 	add.w	r3, r7, #16
 801db72:	4619      	mov	r1, r3
 801db74:	4620      	mov	r0, r4
 801db76:	f7ef f92a 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801db7a:	f107 0310 	add.w	r3, r7, #16
 801db7e:	4618      	mov	r0, r3
 801db80:	f7ef fc71 	bl	800d466 <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	68ba      	ldr	r2, [r7, #8]
 801db88:	619a      	str	r2, [r3, #24]
    size_ = size;
 801db8a:	68fb      	ldr	r3, [r7, #12]
 801db8c:	687a      	ldr	r2, [r7, #4]
 801db8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801db90:	bf00      	nop
 801db92:	371c      	adds	r7, #28
 801db94:	46bd      	mov	sp, r7
 801db96:	bd90      	pop	{r4, r7, pc}
 801db98:	080268a4 	.word	0x080268a4

0801db9c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801db9c:	b580      	push	{r7, lr}
 801db9e:	b084      	sub	sp, #16
 801dba0:	af00      	add	r7, sp, #0
 801dba2:	60f8      	str	r0, [r7, #12]
 801dba4:	60b9      	str	r1, [r7, #8]
 801dba6:	607a      	str	r2, [r7, #4]
    type_ = type;
 801dba8:	68fb      	ldr	r3, [r7, #12]
 801dbaa:	330c      	adds	r3, #12
 801dbac:	68b9      	ldr	r1, [r7, #8]
 801dbae:	4618      	mov	r0, r3
 801dbb0:	f7ef f90d 	bl	800cdce <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801dbb4:	68fb      	ldr	r3, [r7, #12]
 801dbb6:	687a      	ldr	r2, [r7, #4]
 801dbb8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801dbba:	4b11      	ldr	r3, [pc, #68]	; (801dc00 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dbbc:	681b      	ldr	r3, [r3, #0]
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	d019      	beq.n	801dbf6 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801dbc2:	4b0f      	ldr	r3, [pc, #60]	; (801dc00 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dbc4:	681a      	ldr	r2, [r3, #0]
 801dbc6:	4b0e      	ldr	r3, [pc, #56]	; (801dc00 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	681b      	ldr	r3, [r3, #0]
 801dbcc:	3314      	adds	r3, #20
 801dbce:	681b      	ldr	r3, [r3, #0]
 801dbd0:	68b9      	ldr	r1, [r7, #8]
 801dbd2:	4610      	mov	r0, r2
 801dbd4:	4798      	blx	r3
 801dbd6:	4602      	mov	r2, r0
 801dbd8:	68fb      	ldr	r3, [r7, #12]
 801dbda:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801dbdc:	4b08      	ldr	r3, [pc, #32]	; (801dc00 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dbde:	681a      	ldr	r2, [r3, #0]
 801dbe0:	4b07      	ldr	r3, [pc, #28]	; (801dc00 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dbe2:	681b      	ldr	r3, [r3, #0]
 801dbe4:	681b      	ldr	r3, [r3, #0]
 801dbe6:	3318      	adds	r3, #24
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	68b9      	ldr	r1, [r7, #8]
 801dbec:	4610      	mov	r0, r2
 801dbee:	4798      	blx	r3
 801dbf0:	4602      	mov	r2, r0
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801dbf6:	bf00      	nop
 801dbf8:	3710      	adds	r7, #16
 801dbfa:	46bd      	mov	sp, r7
 801dbfc:	bd80      	pop	{r7, pc}
 801dbfe:	bf00      	nop
 801dc00:	20000ec4 	.word	0x20000ec4

0801dc04 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b084      	sub	sp, #16
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	60f8      	str	r0, [r7, #12]
 801dc0c:	60b9      	str	r1, [r7, #8]
 801dc0e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801dc10:	68fb      	ldr	r3, [r7, #12]
 801dc12:	330c      	adds	r3, #12
 801dc14:	68b9      	ldr	r1, [r7, #8]
 801dc16:	4618      	mov	r0, r3
 801dc18:	f7ef f8d9 	bl	800cdce <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801dc1c:	68fb      	ldr	r3, [r7, #12]
 801dc1e:	687a      	ldr	r2, [r7, #4]
 801dc20:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801dc22:	4b11      	ldr	r3, [pc, #68]	; (801dc68 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d019      	beq.n	801dc5e <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801dc2a:	4b0f      	ldr	r3, [pc, #60]	; (801dc68 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801dc2c:	681a      	ldr	r2, [r3, #0]
 801dc2e:	4b0e      	ldr	r3, [pc, #56]	; (801dc68 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801dc30:	681b      	ldr	r3, [r3, #0]
 801dc32:	681b      	ldr	r3, [r3, #0]
 801dc34:	3314      	adds	r3, #20
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	68b9      	ldr	r1, [r7, #8]
 801dc3a:	4610      	mov	r0, r2
 801dc3c:	4798      	blx	r3
 801dc3e:	4602      	mov	r2, r0
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801dc44:	4b08      	ldr	r3, [pc, #32]	; (801dc68 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801dc46:	681a      	ldr	r2, [r3, #0]
 801dc48:	4b07      	ldr	r3, [pc, #28]	; (801dc68 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	681b      	ldr	r3, [r3, #0]
 801dc4e:	3318      	adds	r3, #24
 801dc50:	681b      	ldr	r3, [r3, #0]
 801dc52:	68b9      	ldr	r1, [r7, #8]
 801dc54:	4610      	mov	r0, r2
 801dc56:	4798      	blx	r3
 801dc58:	4602      	mov	r2, r0
 801dc5a:	68fb      	ldr	r3, [r7, #12]
 801dc5c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801dc5e:	bf00      	nop
 801dc60:	3710      	adds	r7, #16
 801dc62:	46bd      	mov	sp, r7
 801dc64:	bd80      	pop	{r7, pc}
 801dc66:	bf00      	nop
 801dc68:	20000ec4 	.word	0x20000ec4

0801dc6c <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801dc6c:	b480      	push	{r7}
 801dc6e:	b083      	sub	sp, #12
 801dc70:	af00      	add	r7, sp, #0
 801dc72:	6078      	str	r0, [r7, #4]
 801dc74:	6039      	str	r1, [r7, #0]
    size_ = size;
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	683a      	ldr	r2, [r7, #0]
 801dc7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801dc7c:	bf00      	nop
 801dc7e:	370c      	adds	r7, #12
 801dc80:	46bd      	mov	sp, r7
 801dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc86:	4770      	bx	lr

0801dc88 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801dc88:	b590      	push	{r4, r7, lr}
 801dc8a:	b085      	sub	sp, #20
 801dc8c:	af00      	add	r7, sp, #0
 801dc8e:	6078      	str	r0, [r7, #4]
 801dc90:	6039      	str	r1, [r7, #0]
    name_ = name;
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	1d1c      	adds	r4, r3, #4
 801dc96:	f107 0308 	add.w	r3, r7, #8
 801dc9a:	6839      	ldr	r1, [r7, #0]
 801dc9c:	4618      	mov	r0, r3
 801dc9e:	f7ef f82a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801dca2:	f107 0308 	add.w	r3, r7, #8
 801dca6:	4619      	mov	r1, r3
 801dca8:	4620      	mov	r0, r4
 801dcaa:	f7ef f890 	bl	800cdce <_ZN12SimpleStringaSERKS_>
 801dcae:	f107 0308 	add.w	r3, r7, #8
 801dcb2:	4618      	mov	r0, r3
 801dcb4:	f7ef fbd7 	bl	800d466 <_ZN12SimpleStringD1Ev>
}
 801dcb8:	bf00      	nop
 801dcba:	3714      	adds	r7, #20
 801dcbc:	46bd      	mov	sp, r7
 801dcbe:	bd90      	pop	{r4, r7, pc}

0801dcc0 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801dcc0:	b580      	push	{r7, lr}
 801dcc2:	b082      	sub	sp, #8
 801dcc4:	af00      	add	r7, sp, #0
 801dcc6:	6078      	str	r0, [r7, #4]
 801dcc8:	6039      	str	r1, [r7, #0]
    return name_;
 801dcca:	683b      	ldr	r3, [r7, #0]
 801dccc:	3304      	adds	r3, #4
 801dcce:	4619      	mov	r1, r3
 801dcd0:	6878      	ldr	r0, [r7, #4]
 801dcd2:	f7ef f864 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
}
 801dcd6:	6878      	ldr	r0, [r7, #4]
 801dcd8:	3708      	adds	r7, #8
 801dcda:	46bd      	mov	sp, r7
 801dcdc:	bd80      	pop	{r7, pc}

0801dcde <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801dcde:	b580      	push	{r7, lr}
 801dce0:	b082      	sub	sp, #8
 801dce2:	af00      	add	r7, sp, #0
 801dce4:	6078      	str	r0, [r7, #4]
 801dce6:	6039      	str	r1, [r7, #0]
    return type_;
 801dce8:	683b      	ldr	r3, [r7, #0]
 801dcea:	330c      	adds	r3, #12
 801dcec:	4619      	mov	r1, r3
 801dcee:	6878      	ldr	r0, [r7, #4]
 801dcf0:	f7ef f855 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
}
 801dcf4:	6878      	ldr	r0, [r7, #4]
 801dcf6:	3708      	adds	r7, #8
 801dcf8:	46bd      	mov	sp, r7
 801dcfa:	bd80      	pop	{r7, pc}

0801dcfc <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801dcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcfe:	b087      	sub	sp, #28
 801dd00:	af04      	add	r7, sp, #16
 801dd02:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801dd04:	f7f6 fbda 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801dd08:	4604      	mov	r4, r0
 801dd0a:	6823      	ldr	r3, [r4, #0]
 801dd0c:	3324      	adds	r3, #36	; 0x24
 801dd0e:	681d      	ldr	r5, [r3, #0]
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	330c      	adds	r3, #12
 801dd14:	4618      	mov	r0, r3
 801dd16:	f7ef fb79 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801dd1a:	4606      	mov	r6, r0
 801dd1c:	f7f6 fbde 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dd20:	4603      	mov	r3, r0
 801dd22:	9302      	str	r3, [sp, #8]
 801dd24:	23c8      	movs	r3, #200	; 0xc8
 801dd26:	9301      	str	r3, [sp, #4]
 801dd28:	4b06      	ldr	r3, [pc, #24]	; (801dd44 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801dd2a:	9300      	str	r3, [sp, #0]
 801dd2c:	2300      	movs	r3, #0
 801dd2e:	4632      	mov	r2, r6
 801dd30:	4905      	ldr	r1, [pc, #20]	; (801dd48 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801dd32:	4620      	mov	r0, r4
 801dd34:	47a8      	blx	r5
    return value_.boolValue_;
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	7e1b      	ldrb	r3, [r3, #24]
}
 801dd3a:	4618      	mov	r0, r3
 801dd3c:	370c      	adds	r7, #12
 801dd3e:	46bd      	mov	sp, r7
 801dd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd42:	bf00      	nop
 801dd44:	08026808 	.word	0x08026808
 801dd48:	080267d0 	.word	0x080267d0

0801dd4c <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801dd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd4e:	b089      	sub	sp, #36	; 0x24
 801dd50:	af04      	add	r7, sp, #16
 801dd52:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	f103 040c 	add.w	r4, r3, #12
 801dd5a:	f107 0308 	add.w	r3, r7, #8
 801dd5e:	4920      	ldr	r1, [pc, #128]	; (801dde0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801dd60:	4618      	mov	r0, r3
 801dd62:	f7ee ffc8 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801dd66:	2501      	movs	r5, #1
 801dd68:	f107 0308 	add.w	r3, r7, #8
 801dd6c:	4619      	mov	r1, r3
 801dd6e:	4620      	mov	r0, r4
 801dd70:	f7ef fb85 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801dd74:	4603      	mov	r3, r0
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d005      	beq.n	801dd86 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	699b      	ldr	r3, [r3, #24]
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	db01      	blt.n	801dd86 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801dd82:	2401      	movs	r4, #1
 801dd84:	e000      	b.n	801dd88 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801dd86:	2400      	movs	r4, #0
 801dd88:	2d00      	cmp	r5, #0
 801dd8a:	d004      	beq.n	801dd96 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801dd8c:	f107 0308 	add.w	r3, r7, #8
 801dd90:	4618      	mov	r0, r3
 801dd92:	f7ef fb68 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801dd96:	2c00      	cmp	r4, #0
 801dd98:	d002      	beq.n	801dda0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	699b      	ldr	r3, [r3, #24]
 801dd9e:	e01a      	b.n	801ddd6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801dda0:	f7f6 fb8c 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801dda4:	4604      	mov	r4, r0
 801dda6:	6823      	ldr	r3, [r4, #0]
 801dda8:	3324      	adds	r3, #36	; 0x24
 801ddaa:	681d      	ldr	r5, [r3, #0]
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	330c      	adds	r3, #12
 801ddb0:	4618      	mov	r0, r3
 801ddb2:	f7ef fb2b 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801ddb6:	4606      	mov	r6, r0
 801ddb8:	f7f6 fb90 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ddbc:	4603      	mov	r3, r0
 801ddbe:	9302      	str	r3, [sp, #8]
 801ddc0:	23d2      	movs	r3, #210	; 0xd2
 801ddc2:	9301      	str	r3, [sp, #4]
 801ddc4:	4b07      	ldr	r3, [pc, #28]	; (801dde4 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801ddc6:	9300      	str	r3, [sp, #0]
 801ddc8:	2300      	movs	r3, #0
 801ddca:	4632      	mov	r2, r6
 801ddcc:	4906      	ldr	r1, [pc, #24]	; (801dde8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801ddce:	4620      	mov	r0, r4
 801ddd0:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	699b      	ldr	r3, [r3, #24]
    }
}
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	3714      	adds	r7, #20
 801ddda:	46bd      	mov	sp, r7
 801dddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddde:	bf00      	nop
 801dde0:	080267cc 	.word	0x080267cc
 801dde4:	08026808 	.word	0x08026808
 801dde8:	080267d8 	.word	0x080267d8

0801ddec <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801ddec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddee:	b087      	sub	sp, #28
 801ddf0:	af04      	add	r7, sp, #16
 801ddf2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801ddf4:	f7f6 fb62 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801ddf8:	4604      	mov	r4, r0
 801ddfa:	6823      	ldr	r3, [r4, #0]
 801ddfc:	3324      	adds	r3, #36	; 0x24
 801ddfe:	681d      	ldr	r5, [r3, #0]
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	330c      	adds	r3, #12
 801de04:	4618      	mov	r0, r3
 801de06:	f7ef fb01 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801de0a:	4606      	mov	r6, r0
 801de0c:	f7f6 fb66 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801de10:	4603      	mov	r3, r0
 801de12:	9302      	str	r3, [sp, #8]
 801de14:	23d9      	movs	r3, #217	; 0xd9
 801de16:	9301      	str	r3, [sp, #4]
 801de18:	4b06      	ldr	r3, [pc, #24]	; (801de34 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801de1a:	9300      	str	r3, [sp, #0]
 801de1c:	2300      	movs	r3, #0
 801de1e:	4632      	mov	r2, r6
 801de20:	4905      	ldr	r1, [pc, #20]	; (801de38 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801de22:	4620      	mov	r0, r4
 801de24:	47a8      	blx	r5
    return value_.intValue_;
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	699b      	ldr	r3, [r3, #24]
}
 801de2a:	4618      	mov	r0, r3
 801de2c:	370c      	adds	r7, #12
 801de2e:	46bd      	mov	sp, r7
 801de30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de32:	bf00      	nop
 801de34:	08026808 	.word	0x08026808
 801de38:	080267cc 	.word	0x080267cc

0801de3c <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801de3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de3e:	b08b      	sub	sp, #44	; 0x2c
 801de40:	af04      	add	r7, sp, #16
 801de42:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	f103 040c 	add.w	r4, r3, #12
 801de4a:	f107 0308 	add.w	r3, r7, #8
 801de4e:	4928      	ldr	r1, [pc, #160]	; (801def0 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801de50:	4618      	mov	r0, r3
 801de52:	f7ee ff50 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801de56:	f107 0308 	add.w	r3, r7, #8
 801de5a:	4619      	mov	r1, r3
 801de5c:	4620      	mov	r0, r4
 801de5e:	f7ef fb0e 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801de62:	4603      	mov	r3, r0
 801de64:	461c      	mov	r4, r3
 801de66:	f107 0308 	add.w	r3, r7, #8
 801de6a:	4618      	mov	r0, r3
 801de6c:	f7ef fafb 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801de70:	2c00      	cmp	r4, #0
 801de72:	d002      	beq.n	801de7a <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	699b      	ldr	r3, [r3, #24]
 801de78:	e035      	b.n	801dee6 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801de7a:	687b      	ldr	r3, [r7, #4]
 801de7c:	f103 040c 	add.w	r4, r3, #12
 801de80:	f107 0310 	add.w	r3, r7, #16
 801de84:	491b      	ldr	r1, [pc, #108]	; (801def4 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801de86:	4618      	mov	r0, r3
 801de88:	f7ee ff35 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801de8c:	f107 0310 	add.w	r3, r7, #16
 801de90:	4619      	mov	r1, r3
 801de92:	4620      	mov	r0, r4
 801de94:	f7ef faf3 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801de98:	4603      	mov	r3, r0
 801de9a:	461c      	mov	r4, r3
 801de9c:	f107 0310 	add.w	r3, r7, #16
 801dea0:	4618      	mov	r0, r3
 801dea2:	f7ef fae0 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801dea6:	2c00      	cmp	r4, #0
 801dea8:	d002      	beq.n	801deb0 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	699b      	ldr	r3, [r3, #24]
 801deae:	e01a      	b.n	801dee6 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801deb0:	f7f6 fb04 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801deb4:	4604      	mov	r4, r0
 801deb6:	6823      	ldr	r3, [r4, #0]
 801deb8:	3324      	adds	r3, #36	; 0x24
 801deba:	681d      	ldr	r5, [r3, #0]
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	330c      	adds	r3, #12
 801dec0:	4618      	mov	r0, r3
 801dec2:	f7ef faa3 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801dec6:	4606      	mov	r6, r0
 801dec8:	f7f6 fb08 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801decc:	4603      	mov	r3, r0
 801dece:	9302      	str	r3, [sp, #8]
 801ded0:	23e5      	movs	r3, #229	; 0xe5
 801ded2:	9301      	str	r3, [sp, #4]
 801ded4:	4b08      	ldr	r3, [pc, #32]	; (801def8 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801ded6:	9300      	str	r3, [sp, #0]
 801ded8:	2300      	movs	r3, #0
 801deda:	4632      	mov	r2, r6
 801dedc:	4907      	ldr	r1, [pc, #28]	; (801defc <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801dede:	4620      	mov	r0, r4
 801dee0:	47a8      	blx	r5
        return value_.longIntValue_;
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	699b      	ldr	r3, [r3, #24]
    }
}
 801dee6:	4618      	mov	r0, r3
 801dee8:	371c      	adds	r7, #28
 801deea:	46bd      	mov	sp, r7
 801deec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801deee:	bf00      	nop
 801def0:	080267cc 	.word	0x080267cc
 801def4:	080267d8 	.word	0x080267d8
 801def8:	08026808 	.word	0x08026808
 801defc:	080267e8 	.word	0x080267e8

0801df00 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801df00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df02:	b08d      	sub	sp, #52	; 0x34
 801df04:	af04      	add	r7, sp, #16
 801df06:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	f103 040c 	add.w	r4, r3, #12
 801df0e:	f107 0308 	add.w	r3, r7, #8
 801df12:	4940      	ldr	r1, [pc, #256]	; (801e014 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801df14:	4618      	mov	r0, r3
 801df16:	f7ee feee 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801df1a:	f107 0308 	add.w	r3, r7, #8
 801df1e:	4619      	mov	r1, r3
 801df20:	4620      	mov	r0, r4
 801df22:	f7ef faac 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801df26:	4603      	mov	r3, r0
 801df28:	461c      	mov	r4, r3
 801df2a:	f107 0308 	add.w	r3, r7, #8
 801df2e:	4618      	mov	r0, r3
 801df30:	f7ef fa99 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801df34:	2c00      	cmp	r4, #0
 801df36:	d002      	beq.n	801df3e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	699b      	ldr	r3, [r3, #24]
 801df3c:	e066      	b.n	801e00c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	f103 040c 	add.w	r4, r3, #12
 801df44:	f107 0310 	add.w	r3, r7, #16
 801df48:	4933      	ldr	r1, [pc, #204]	; (801e018 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801df4a:	4618      	mov	r0, r3
 801df4c:	f7ee fed3 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801df50:	2501      	movs	r5, #1
 801df52:	f107 0310 	add.w	r3, r7, #16
 801df56:	4619      	mov	r1, r3
 801df58:	4620      	mov	r0, r4
 801df5a:	f7ef fa90 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801df5e:	4603      	mov	r3, r0
 801df60:	2b00      	cmp	r3, #0
 801df62:	d005      	beq.n	801df70 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801df64:	687b      	ldr	r3, [r7, #4]
 801df66:	699b      	ldr	r3, [r3, #24]
 801df68:	2b00      	cmp	r3, #0
 801df6a:	db01      	blt.n	801df70 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801df6c:	2401      	movs	r4, #1
 801df6e:	e000      	b.n	801df72 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801df70:	2400      	movs	r4, #0
 801df72:	2d00      	cmp	r5, #0
 801df74:	d004      	beq.n	801df80 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801df76:	f107 0310 	add.w	r3, r7, #16
 801df7a:	4618      	mov	r0, r3
 801df7c:	f7ef fa73 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801df80:	2c00      	cmp	r4, #0
 801df82:	d002      	beq.n	801df8a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801df84:	687b      	ldr	r3, [r7, #4]
 801df86:	699b      	ldr	r3, [r3, #24]
 801df88:	e040      	b.n	801e00c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801df8a:	687b      	ldr	r3, [r7, #4]
 801df8c:	f103 040c 	add.w	r4, r3, #12
 801df90:	f107 0318 	add.w	r3, r7, #24
 801df94:	4921      	ldr	r1, [pc, #132]	; (801e01c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801df96:	4618      	mov	r0, r3
 801df98:	f7ee fead 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801df9c:	2501      	movs	r5, #1
 801df9e:	f107 0318 	add.w	r3, r7, #24
 801dfa2:	4619      	mov	r1, r3
 801dfa4:	4620      	mov	r0, r4
 801dfa6:	f7ef fa6a 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801dfaa:	4603      	mov	r3, r0
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	d005      	beq.n	801dfbc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	699b      	ldr	r3, [r3, #24]
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	db01      	blt.n	801dfbc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801dfb8:	2401      	movs	r4, #1
 801dfba:	e000      	b.n	801dfbe <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801dfbc:	2400      	movs	r4, #0
 801dfbe:	2d00      	cmp	r5, #0
 801dfc0:	d004      	beq.n	801dfcc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801dfc2:	f107 0318 	add.w	r3, r7, #24
 801dfc6:	4618      	mov	r0, r3
 801dfc8:	f7ef fa4d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801dfcc:	2c00      	cmp	r4, #0
 801dfce:	d002      	beq.n	801dfd6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	699b      	ldr	r3, [r3, #24]
 801dfd4:	e01a      	b.n	801e00c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801dfd6:	f7f6 fa71 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801dfda:	4604      	mov	r4, r0
 801dfdc:	6823      	ldr	r3, [r4, #0]
 801dfde:	3324      	adds	r3, #36	; 0x24
 801dfe0:	681d      	ldr	r5, [r3, #0]
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	330c      	adds	r3, #12
 801dfe6:	4618      	mov	r0, r3
 801dfe8:	f7ef fa10 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801dfec:	4606      	mov	r6, r0
 801dfee:	f7f6 fa75 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dff2:	4603      	mov	r3, r0
 801dff4:	9302      	str	r3, [sp, #8]
 801dff6:	23f4      	movs	r3, #244	; 0xf4
 801dff8:	9301      	str	r3, [sp, #4]
 801dffa:	4b09      	ldr	r3, [pc, #36]	; (801e020 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801dffc:	9300      	str	r3, [sp, #0]
 801dffe:	2300      	movs	r3, #0
 801e000:	4632      	mov	r2, r6
 801e002:	4908      	ldr	r1, [pc, #32]	; (801e024 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801e004:	4620      	mov	r0, r4
 801e006:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	699b      	ldr	r3, [r3, #24]
    }
}
 801e00c:	4618      	mov	r0, r3
 801e00e:	3724      	adds	r7, #36	; 0x24
 801e010:	46bd      	mov	sp, r7
 801e012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e014:	080267d8 	.word	0x080267d8
 801e018:	080267cc 	.word	0x080267cc
 801e01c:	080267e8 	.word	0x080267e8
 801e020:	08026808 	.word	0x08026808
 801e024:	080267f4 	.word	0x080267f4

0801e028 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801e028:	b5b0      	push	{r4, r5, r7, lr}
 801e02a:	b084      	sub	sp, #16
 801e02c:	af02      	add	r7, sp, #8
 801e02e:	6078      	str	r0, [r7, #4]
 801e030:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801e032:	f7f6 fa43 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801e036:	4604      	mov	r4, r0
 801e038:	6823      	ldr	r3, [r4, #0]
 801e03a:	3368      	adds	r3, #104	; 0x68
 801e03c:	681d      	ldr	r5, [r3, #0]
 801e03e:	f7f6 fa4d 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e042:	4603      	mov	r3, r0
 801e044:	9300      	str	r3, [sp, #0]
 801e046:	f240 1323 	movw	r3, #291	; 0x123
 801e04a:	4a06      	ldr	r2, [pc, #24]	; (801e064 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801e04c:	4906      	ldr	r1, [pc, #24]	; (801e068 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801e04e:	4620      	mov	r0, r4
 801e050:	47a8      	blx	r5
    return cpputest_longlong(0);
 801e052:	2100      	movs	r1, #0
 801e054:	6878      	ldr	r0, [r7, #4]
 801e056:	f7ec fe85 	bl	800ad64 <_ZN17cpputest_longlongC1Ei>
}
 801e05a:	6878      	ldr	r0, [r7, #4]
 801e05c:	3708      	adds	r7, #8
 801e05e:	46bd      	mov	sp, r7
 801e060:	bdb0      	pop	{r4, r5, r7, pc}
 801e062:	bf00      	nop
 801e064:	08026808 	.word	0x08026808
 801e068:	08026824 	.word	0x08026824

0801e06c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801e06c:	b5b0      	push	{r4, r5, r7, lr}
 801e06e:	b084      	sub	sp, #16
 801e070:	af02      	add	r7, sp, #8
 801e072:	6078      	str	r0, [r7, #4]
 801e074:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801e076:	f7f6 fa21 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801e07a:	4604      	mov	r4, r0
 801e07c:	6823      	ldr	r3, [r4, #0]
 801e07e:	3368      	adds	r3, #104	; 0x68
 801e080:	681d      	ldr	r5, [r3, #0]
 801e082:	f7f6 fa2b 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e086:	4603      	mov	r3, r0
 801e088:	9300      	str	r3, [sp, #0]
 801e08a:	f240 1329 	movw	r3, #297	; 0x129
 801e08e:	4a06      	ldr	r2, [pc, #24]	; (801e0a8 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801e090:	4906      	ldr	r1, [pc, #24]	; (801e0ac <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801e092:	4620      	mov	r0, r4
 801e094:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801e096:	2100      	movs	r1, #0
 801e098:	6878      	ldr	r0, [r7, #4]
 801e09a:	f7ec fe6f 	bl	800ad7c <_ZN18cpputest_ulonglongC1Ei>
}
 801e09e:	6878      	ldr	r0, [r7, #4]
 801e0a0:	3708      	adds	r7, #8
 801e0a2:	46bd      	mov	sp, r7
 801e0a4:	bdb0      	pop	{r4, r5, r7, pc}
 801e0a6:	bf00      	nop
 801e0a8:	08026808 	.word	0x08026808
 801e0ac:	08026844 	.word	0x08026844

0801e0b0 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801e0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0b2:	b087      	sub	sp, #28
 801e0b4:	af04      	add	r7, sp, #16
 801e0b6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801e0b8:	f7f6 fa00 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801e0bc:	4604      	mov	r4, r0
 801e0be:	6823      	ldr	r3, [r4, #0]
 801e0c0:	3324      	adds	r3, #36	; 0x24
 801e0c2:	681d      	ldr	r5, [r3, #0]
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	330c      	adds	r3, #12
 801e0c8:	4618      	mov	r0, r3
 801e0ca:	f7ef f99f 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801e0ce:	4606      	mov	r6, r0
 801e0d0:	f7f6 fa04 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e0d4:	4603      	mov	r3, r0
 801e0d6:	9302      	str	r3, [sp, #8]
 801e0d8:	f240 1331 	movw	r3, #305	; 0x131
 801e0dc:	9301      	str	r3, [sp, #4]
 801e0de:	4b09      	ldr	r3, [pc, #36]	; (801e104 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801e0e0:	9300      	str	r3, [sp, #0]
 801e0e2:	2300      	movs	r3, #0
 801e0e4:	4632      	mov	r2, r6
 801e0e6:	4908      	ldr	r1, [pc, #32]	; (801e108 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801e0e8:	4620      	mov	r0, r4
 801e0ea:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801e0f2:	ec43 2b17 	vmov	d7, r2, r3
}
 801e0f6:	eeb0 0a47 	vmov.f32	s0, s14
 801e0fa:	eef0 0a67 	vmov.f32	s1, s15
 801e0fe:	370c      	adds	r7, #12
 801e100:	46bd      	mov	sp, r7
 801e102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e104:	08026808 	.word	0x08026808
 801e108:	08026870 	.word	0x08026870

0801e10c <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801e10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e10e:	b087      	sub	sp, #28
 801e110:	af04      	add	r7, sp, #16
 801e112:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801e114:	f7f6 f9d2 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801e118:	4604      	mov	r4, r0
 801e11a:	6823      	ldr	r3, [r4, #0]
 801e11c:	3324      	adds	r3, #36	; 0x24
 801e11e:	681d      	ldr	r5, [r3, #0]
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	330c      	adds	r3, #12
 801e124:	4618      	mov	r0, r3
 801e126:	f7ef f971 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801e12a:	4606      	mov	r6, r0
 801e12c:	f7f6 f9d6 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e130:	4603      	mov	r3, r0
 801e132:	9302      	str	r3, [sp, #8]
 801e134:	f240 1337 	movw	r3, #311	; 0x137
 801e138:	9301      	str	r3, [sp, #4]
 801e13a:	4b09      	ldr	r3, [pc, #36]	; (801e160 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801e13c:	9300      	str	r3, [sp, #0]
 801e13e:	2300      	movs	r3, #0
 801e140:	4632      	mov	r2, r6
 801e142:	4908      	ldr	r1, [pc, #32]	; (801e164 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801e144:	4620      	mov	r0, r4
 801e146:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e14e:	ec43 2b17 	vmov	d7, r2, r3
}
 801e152:	eeb0 0a47 	vmov.f32	s0, s14
 801e156:	eef0 0a67 	vmov.f32	s1, s15
 801e15a:	370c      	adds	r7, #12
 801e15c:	46bd      	mov	sp, r7
 801e15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e160:	08026808 	.word	0x08026808
 801e164:	08026870 	.word	0x08026870

0801e168 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801e168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e16a:	b087      	sub	sp, #28
 801e16c:	af04      	add	r7, sp, #16
 801e16e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801e170:	f7f6 f9a4 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801e174:	4604      	mov	r4, r0
 801e176:	6823      	ldr	r3, [r4, #0]
 801e178:	3324      	adds	r3, #36	; 0x24
 801e17a:	681d      	ldr	r5, [r3, #0]
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	330c      	adds	r3, #12
 801e180:	4618      	mov	r0, r3
 801e182:	f7ef f943 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801e186:	4606      	mov	r6, r0
 801e188:	f7f6 f9a8 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e18c:	4603      	mov	r3, r0
 801e18e:	9302      	str	r3, [sp, #8]
 801e190:	f240 133d 	movw	r3, #317	; 0x13d
 801e194:	9301      	str	r3, [sp, #4]
 801e196:	4b06      	ldr	r3, [pc, #24]	; (801e1b0 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801e198:	9300      	str	r3, [sp, #0]
 801e19a:	2300      	movs	r3, #0
 801e19c:	4632      	mov	r2, r6
 801e19e:	4905      	ldr	r1, [pc, #20]	; (801e1b4 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801e1a0:	4620      	mov	r0, r4
 801e1a2:	47a8      	blx	r5
    return value_.stringValue_;
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	699b      	ldr	r3, [r3, #24]
}
 801e1a8:	4618      	mov	r0, r3
 801e1aa:	370c      	adds	r7, #12
 801e1ac:	46bd      	mov	sp, r7
 801e1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1b0:	08026808 	.word	0x08026808
 801e1b4:	08026898 	.word	0x08026898

0801e1b8 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801e1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1ba:	b087      	sub	sp, #28
 801e1bc:	af04      	add	r7, sp, #16
 801e1be:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801e1c0:	f7f6 f97c 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801e1c4:	4604      	mov	r4, r0
 801e1c6:	6823      	ldr	r3, [r4, #0]
 801e1c8:	3324      	adds	r3, #36	; 0x24
 801e1ca:	681d      	ldr	r5, [r3, #0]
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	330c      	adds	r3, #12
 801e1d0:	4618      	mov	r0, r3
 801e1d2:	f7ef f91b 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801e1d6:	4606      	mov	r6, r0
 801e1d8:	f7f6 f980 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e1dc:	4603      	mov	r3, r0
 801e1de:	9302      	str	r3, [sp, #8]
 801e1e0:	f240 1343 	movw	r3, #323	; 0x143
 801e1e4:	9301      	str	r3, [sp, #4]
 801e1e6:	4b06      	ldr	r3, [pc, #24]	; (801e200 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801e1e8:	9300      	str	r3, [sp, #0]
 801e1ea:	2300      	movs	r3, #0
 801e1ec:	4632      	mov	r2, r6
 801e1ee:	4905      	ldr	r1, [pc, #20]	; (801e204 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801e1f0:	4620      	mov	r0, r4
 801e1f2:	47a8      	blx	r5
    return value_.pointerValue_;
 801e1f4:	687b      	ldr	r3, [r7, #4]
 801e1f6:	699b      	ldr	r3, [r3, #24]
}
 801e1f8:	4618      	mov	r0, r3
 801e1fa:	370c      	adds	r7, #12
 801e1fc:	46bd      	mov	sp, r7
 801e1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e200:	08026808 	.word	0x08026808
 801e204:	08026878 	.word	0x08026878

0801e208 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801e208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e20a:	b087      	sub	sp, #28
 801e20c:	af04      	add	r7, sp, #16
 801e20e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801e210:	f7f6 f954 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801e214:	4604      	mov	r4, r0
 801e216:	6823      	ldr	r3, [r4, #0]
 801e218:	3324      	adds	r3, #36	; 0x24
 801e21a:	681d      	ldr	r5, [r3, #0]
 801e21c:	687b      	ldr	r3, [r7, #4]
 801e21e:	330c      	adds	r3, #12
 801e220:	4618      	mov	r0, r3
 801e222:	f7ef f8f3 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801e226:	4606      	mov	r6, r0
 801e228:	f7f6 f958 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e22c:	4603      	mov	r3, r0
 801e22e:	9302      	str	r3, [sp, #8]
 801e230:	f240 1349 	movw	r3, #329	; 0x149
 801e234:	9301      	str	r3, [sp, #4]
 801e236:	4b06      	ldr	r3, [pc, #24]	; (801e250 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801e238:	9300      	str	r3, [sp, #0]
 801e23a:	2300      	movs	r3, #0
 801e23c:	4632      	mov	r2, r6
 801e23e:	4905      	ldr	r1, [pc, #20]	; (801e254 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801e240:	4620      	mov	r0, r4
 801e242:	47a8      	blx	r5
    return value_.pointerValue_;
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	699b      	ldr	r3, [r3, #24]
}
 801e248:	4618      	mov	r0, r3
 801e24a:	370c      	adds	r7, #12
 801e24c:	46bd      	mov	sp, r7
 801e24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e250:	08026808 	.word	0x08026808
 801e254:	08026880 	.word	0x08026880

0801e258 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801e258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e25a:	b087      	sub	sp, #28
 801e25c:	af04      	add	r7, sp, #16
 801e25e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801e260:	f7f6 f92c 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801e264:	4604      	mov	r4, r0
 801e266:	6823      	ldr	r3, [r4, #0]
 801e268:	3324      	adds	r3, #36	; 0x24
 801e26a:	681d      	ldr	r5, [r3, #0]
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	330c      	adds	r3, #12
 801e270:	4618      	mov	r0, r3
 801e272:	f7ef f8cb 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801e276:	4606      	mov	r6, r0
 801e278:	f7f6 f930 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e27c:	4603      	mov	r3, r0
 801e27e:	9302      	str	r3, [sp, #8]
 801e280:	f240 134f 	movw	r3, #335	; 0x14f
 801e284:	9301      	str	r3, [sp, #4]
 801e286:	4b06      	ldr	r3, [pc, #24]	; (801e2a0 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801e288:	9300      	str	r3, [sp, #0]
 801e28a:	2300      	movs	r3, #0
 801e28c:	4632      	mov	r2, r6
 801e28e:	4905      	ldr	r1, [pc, #20]	; (801e2a4 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801e290:	4620      	mov	r0, r4
 801e292:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	699b      	ldr	r3, [r3, #24]
}
 801e298:	4618      	mov	r0, r3
 801e29a:	370c      	adds	r7, #12
 801e29c:	46bd      	mov	sp, r7
 801e29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2a0:	08026808 	.word	0x08026808
 801e2a4:	0802688c 	.word	0x0802688c

0801e2a8 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801e2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2aa:	b087      	sub	sp, #28
 801e2ac:	af04      	add	r7, sp, #16
 801e2ae:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801e2b0:	f7f6 f904 	bl	80144bc <_ZN10UtestShell10getCurrentEv>
 801e2b4:	4604      	mov	r4, r0
 801e2b6:	6823      	ldr	r3, [r4, #0]
 801e2b8:	3324      	adds	r3, #36	; 0x24
 801e2ba:	681d      	ldr	r5, [r3, #0]
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	330c      	adds	r3, #12
 801e2c0:	4618      	mov	r0, r3
 801e2c2:	f7ef f8a3 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801e2c6:	4606      	mov	r6, r0
 801e2c8:	f7f6 f908 	bl	80144dc <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e2cc:	4603      	mov	r3, r0
 801e2ce:	9302      	str	r3, [sp, #8]
 801e2d0:	f240 1355 	movw	r3, #341	; 0x155
 801e2d4:	9301      	str	r3, [sp, #4]
 801e2d6:	4b06      	ldr	r3, [pc, #24]	; (801e2f0 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801e2d8:	9300      	str	r3, [sp, #0]
 801e2da:	2300      	movs	r3, #0
 801e2dc:	4632      	mov	r2, r6
 801e2de:	4905      	ldr	r1, [pc, #20]	; (801e2f4 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801e2e0:	4620      	mov	r0, r4
 801e2e2:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	699b      	ldr	r3, [r3, #24]
}
 801e2e8:	4618      	mov	r0, r3
 801e2ea:	370c      	adds	r7, #12
 801e2ec:	46bd      	mov	sp, r7
 801e2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2f0:	08026808 	.word	0x08026808
 801e2f4:	080268a4 	.word	0x080268a4

0801e2f8 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801e2f8:	b480      	push	{r7}
 801e2fa:	b083      	sub	sp, #12
 801e2fc:	af00      	add	r7, sp, #0
 801e2fe:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	699b      	ldr	r3, [r3, #24]
}
 801e304:	4618      	mov	r0, r3
 801e306:	370c      	adds	r7, #12
 801e308:	46bd      	mov	sp, r7
 801e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e30e:	4770      	bx	lr

0801e310 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801e310:	b480      	push	{r7}
 801e312:	b083      	sub	sp, #12
 801e314:	af00      	add	r7, sp, #0
 801e316:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	699b      	ldr	r3, [r3, #24]
}
 801e31c:	4618      	mov	r0, r3
 801e31e:	370c      	adds	r7, #12
 801e320:	46bd      	mov	sp, r7
 801e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e326:	4770      	bx	lr

0801e328 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801e328:	b480      	push	{r7}
 801e32a:	b083      	sub	sp, #12
 801e32c:	af00      	add	r7, sp, #0
 801e32e:	6078      	str	r0, [r7, #4]
    return size_;
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801e334:	4618      	mov	r0, r3
 801e336:	370c      	adds	r7, #12
 801e338:	46bd      	mov	sp, r7
 801e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e33e:	4770      	bx	lr

0801e340 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801e340:	b480      	push	{r7}
 801e342:	b083      	sub	sp, #12
 801e344:	af00      	add	r7, sp, #0
 801e346:	6078      	str	r0, [r7, #4]
    return comparator_;
 801e348:	687b      	ldr	r3, [r7, #4]
 801e34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801e34c:	4618      	mov	r0, r3
 801e34e:	370c      	adds	r7, #12
 801e350:	46bd      	mov	sp, r7
 801e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e356:	4770      	bx	lr

0801e358 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801e358:	b480      	push	{r7}
 801e35a:	b083      	sub	sp, #12
 801e35c:	af00      	add	r7, sp, #0
 801e35e:	6078      	str	r0, [r7, #4]
    return copier_;
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801e364:	4618      	mov	r0, r3
 801e366:	370c      	adds	r7, #12
 801e368:	46bd      	mov	sp, r7
 801e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e36e:	4770      	bx	lr

0801e370 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801e370:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e372:	b0cd      	sub	sp, #308	; 0x134
 801e374:	af00      	add	r7, sp, #0
 801e376:	1d3b      	adds	r3, r7, #4
 801e378:	6018      	str	r0, [r3, #0]
 801e37a:	463b      	mov	r3, r7
 801e37c:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801e37e:	2500      	movs	r5, #0
 801e380:	1d3b      	adds	r3, r7, #4
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	f103 040c 	add.w	r4, r3, #12
 801e388:	f107 0308 	add.w	r3, r7, #8
 801e38c:	49bb      	ldr	r1, [pc, #748]	; (801e67c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801e38e:	4618      	mov	r0, r3
 801e390:	f7ee fcb1 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e394:	2601      	movs	r6, #1
 801e396:	f107 0308 	add.w	r3, r7, #8
 801e39a:	4619      	mov	r1, r3
 801e39c:	4620      	mov	r0, r4
 801e39e:	f7ef f86e 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e3a2:	4603      	mov	r3, r0
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	d015      	beq.n	801e3d4 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801e3a8:	463b      	mov	r3, r7
 801e3aa:	681b      	ldr	r3, [r3, #0]
 801e3ac:	f103 040c 	add.w	r4, r3, #12
 801e3b0:	f107 0310 	add.w	r3, r7, #16
 801e3b4:	49b2      	ldr	r1, [pc, #712]	; (801e680 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e3b6:	4618      	mov	r0, r3
 801e3b8:	f7ee fc9d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e3bc:	2501      	movs	r5, #1
 801e3be:	f107 0310 	add.w	r3, r7, #16
 801e3c2:	4619      	mov	r1, r3
 801e3c4:	4620      	mov	r0, r4
 801e3c6:	f7ef f85a 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e3ca:	4603      	mov	r3, r0
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d001      	beq.n	801e3d4 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801e3d0:	2401      	movs	r4, #1
 801e3d2:	e000      	b.n	801e3d6 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801e3d4:	2400      	movs	r4, #0
 801e3d6:	2d00      	cmp	r5, #0
 801e3d8:	d004      	beq.n	801e3e4 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801e3da:	f107 0310 	add.w	r3, r7, #16
 801e3de:	4618      	mov	r0, r3
 801e3e0:	f7ef f841 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e3e4:	2e00      	cmp	r6, #0
 801e3e6:	d004      	beq.n	801e3f2 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801e3e8:	f107 0308 	add.w	r3, r7, #8
 801e3ec:	4618      	mov	r0, r3
 801e3ee:	f7ef f83a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e3f2:	2c00      	cmp	r4, #0
 801e3f4:	d00c      	beq.n	801e410 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801e3f6:	1d3b      	adds	r3, r7, #4
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	699a      	ldr	r2, [r3, #24]
 801e3fc:	463b      	mov	r3, r7
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	699b      	ldr	r3, [r3, #24]
 801e402:	429a      	cmp	r2, r3
 801e404:	bf0c      	ite	eq
 801e406:	2301      	moveq	r3, #1
 801e408:	2300      	movne	r3, #0
 801e40a:	b2dc      	uxtb	r4, r3
 801e40c:	f000 bd60 	b.w	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801e410:	2500      	movs	r5, #0
 801e412:	1d3b      	adds	r3, r7, #4
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	f103 040c 	add.w	r4, r3, #12
 801e41a:	f107 0318 	add.w	r3, r7, #24
 801e41e:	4998      	ldr	r1, [pc, #608]	; (801e680 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e420:	4618      	mov	r0, r3
 801e422:	f7ee fc68 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e426:	2601      	movs	r6, #1
 801e428:	f107 0318 	add.w	r3, r7, #24
 801e42c:	4619      	mov	r1, r3
 801e42e:	4620      	mov	r0, r4
 801e430:	f7ef f825 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e434:	4603      	mov	r3, r0
 801e436:	2b00      	cmp	r3, #0
 801e438:	d015      	beq.n	801e466 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801e43a:	463b      	mov	r3, r7
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	f103 040c 	add.w	r4, r3, #12
 801e442:	f107 0320 	add.w	r3, r7, #32
 801e446:	498d      	ldr	r1, [pc, #564]	; (801e67c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801e448:	4618      	mov	r0, r3
 801e44a:	f7ee fc54 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e44e:	2501      	movs	r5, #1
 801e450:	f107 0320 	add.w	r3, r7, #32
 801e454:	4619      	mov	r1, r3
 801e456:	4620      	mov	r0, r4
 801e458:	f7ef f811 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e45c:	4603      	mov	r3, r0
 801e45e:	2b00      	cmp	r3, #0
 801e460:	d001      	beq.n	801e466 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801e462:	2401      	movs	r4, #1
 801e464:	e000      	b.n	801e468 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801e466:	2400      	movs	r4, #0
 801e468:	2d00      	cmp	r5, #0
 801e46a:	d004      	beq.n	801e476 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801e46c:	f107 0320 	add.w	r3, r7, #32
 801e470:	4618      	mov	r0, r3
 801e472:	f7ee fff8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e476:	2e00      	cmp	r6, #0
 801e478:	d004      	beq.n	801e484 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801e47a:	f107 0318 	add.w	r3, r7, #24
 801e47e:	4618      	mov	r0, r3
 801e480:	f7ee fff1 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e484:	2c00      	cmp	r4, #0
 801e486:	d00c      	beq.n	801e4a2 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801e488:	1d3b      	adds	r3, r7, #4
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	699a      	ldr	r2, [r3, #24]
 801e48e:	463b      	mov	r3, r7
 801e490:	681b      	ldr	r3, [r3, #0]
 801e492:	699b      	ldr	r3, [r3, #24]
 801e494:	429a      	cmp	r2, r3
 801e496:	bf0c      	ite	eq
 801e498:	2301      	moveq	r3, #1
 801e49a:	2300      	movne	r3, #0
 801e49c:	b2dc      	uxtb	r4, r3
 801e49e:	f000 bd17 	b.w	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801e4a2:	2500      	movs	r5, #0
 801e4a4:	1d3b      	adds	r3, r7, #4
 801e4a6:	681b      	ldr	r3, [r3, #0]
 801e4a8:	f103 040c 	add.w	r4, r3, #12
 801e4ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e4b0:	4974      	ldr	r1, [pc, #464]	; (801e684 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801e4b2:	4618      	mov	r0, r3
 801e4b4:	f7ee fc1f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e4b8:	2601      	movs	r6, #1
 801e4ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e4be:	4619      	mov	r1, r3
 801e4c0:	4620      	mov	r0, r4
 801e4c2:	f7ee ffdc 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e4c6:	4603      	mov	r3, r0
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	d015      	beq.n	801e4f8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801e4cc:	463b      	mov	r3, r7
 801e4ce:	681b      	ldr	r3, [r3, #0]
 801e4d0:	f103 040c 	add.w	r4, r3, #12
 801e4d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e4d8:	4969      	ldr	r1, [pc, #420]	; (801e680 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e4da:	4618      	mov	r0, r3
 801e4dc:	f7ee fc0b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e4e0:	2501      	movs	r5, #1
 801e4e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e4e6:	4619      	mov	r1, r3
 801e4e8:	4620      	mov	r0, r4
 801e4ea:	f7ee ffc8 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e4ee:	4603      	mov	r3, r0
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	d001      	beq.n	801e4f8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801e4f4:	2401      	movs	r4, #1
 801e4f6:	e000      	b.n	801e4fa <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801e4f8:	2400      	movs	r4, #0
 801e4fa:	2d00      	cmp	r5, #0
 801e4fc:	d004      	beq.n	801e508 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801e4fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e502:	4618      	mov	r0, r3
 801e504:	f7ee ffaf 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e508:	2e00      	cmp	r6, #0
 801e50a:	d004      	beq.n	801e516 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801e50c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e510:	4618      	mov	r0, r3
 801e512:	f7ee ffa8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e516:	2c00      	cmp	r4, #0
 801e518:	d012      	beq.n	801e540 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801e51a:	463b      	mov	r3, r7
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	699b      	ldr	r3, [r3, #24]
 801e520:	2b00      	cmp	r3, #0
 801e522:	db0a      	blt.n	801e53a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801e524:	1d3b      	adds	r3, r7, #4
 801e526:	681b      	ldr	r3, [r3, #0]
 801e528:	699b      	ldr	r3, [r3, #24]
 801e52a:	463a      	mov	r2, r7
 801e52c:	6812      	ldr	r2, [r2, #0]
 801e52e:	6992      	ldr	r2, [r2, #24]
 801e530:	4293      	cmp	r3, r2
 801e532:	d102      	bne.n	801e53a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801e534:	2401      	movs	r4, #1
 801e536:	f000 bccb 	b.w	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e53a:	2400      	movs	r4, #0
 801e53c:	f000 bcc8 	b.w	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801e540:	2500      	movs	r5, #0
 801e542:	1d3b      	adds	r3, r7, #4
 801e544:	681b      	ldr	r3, [r3, #0]
 801e546:	f103 040c 	add.w	r4, r3, #12
 801e54a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e54e:	494c      	ldr	r1, [pc, #304]	; (801e680 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e550:	4618      	mov	r0, r3
 801e552:	f7ee fbd0 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e556:	2601      	movs	r6, #1
 801e558:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e55c:	4619      	mov	r1, r3
 801e55e:	4620      	mov	r0, r4
 801e560:	f7ee ff8d 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e564:	4603      	mov	r3, r0
 801e566:	2b00      	cmp	r3, #0
 801e568:	d015      	beq.n	801e596 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801e56a:	463b      	mov	r3, r7
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	f103 040c 	add.w	r4, r3, #12
 801e572:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e576:	4943      	ldr	r1, [pc, #268]	; (801e684 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801e578:	4618      	mov	r0, r3
 801e57a:	f7ee fbbc 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e57e:	2501      	movs	r5, #1
 801e580:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e584:	4619      	mov	r1, r3
 801e586:	4620      	mov	r0, r4
 801e588:	f7ee ff79 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e58c:	4603      	mov	r3, r0
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d001      	beq.n	801e596 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801e592:	2401      	movs	r4, #1
 801e594:	e000      	b.n	801e598 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801e596:	2400      	movs	r4, #0
 801e598:	2d00      	cmp	r5, #0
 801e59a:	d004      	beq.n	801e5a6 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801e59c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e5a0:	4618      	mov	r0, r3
 801e5a2:	f7ee ff60 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e5a6:	2e00      	cmp	r6, #0
 801e5a8:	d004      	beq.n	801e5b4 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801e5aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e5ae:	4618      	mov	r0, r3
 801e5b0:	f7ee ff59 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e5b4:	2c00      	cmp	r4, #0
 801e5b6:	d012      	beq.n	801e5de <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801e5b8:	1d3b      	adds	r3, r7, #4
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	699b      	ldr	r3, [r3, #24]
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	db0a      	blt.n	801e5d8 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801e5c2:	1d3b      	adds	r3, r7, #4
 801e5c4:	681b      	ldr	r3, [r3, #0]
 801e5c6:	699b      	ldr	r3, [r3, #24]
 801e5c8:	463a      	mov	r2, r7
 801e5ca:	6812      	ldr	r2, [r2, #0]
 801e5cc:	6992      	ldr	r2, [r2, #24]
 801e5ce:	4293      	cmp	r3, r2
 801e5d0:	d102      	bne.n	801e5d8 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801e5d2:	2401      	movs	r4, #1
 801e5d4:	f000 bc7c 	b.w	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e5d8:	2400      	movs	r4, #0
 801e5da:	f000 bc79 	b.w	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801e5de:	2500      	movs	r5, #0
 801e5e0:	1d3b      	adds	r3, r7, #4
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	f103 040c 	add.w	r4, r3, #12
 801e5e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e5ec:	4926      	ldr	r1, [pc, #152]	; (801e688 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801e5ee:	4618      	mov	r0, r3
 801e5f0:	f7ee fb81 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e5f4:	2601      	movs	r6, #1
 801e5f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e5fa:	4619      	mov	r1, r3
 801e5fc:	4620      	mov	r0, r4
 801e5fe:	f7ee ff3e 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e602:	4603      	mov	r3, r0
 801e604:	2b00      	cmp	r3, #0
 801e606:	d015      	beq.n	801e634 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801e608:	463b      	mov	r3, r7
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	f103 040c 	add.w	r4, r3, #12
 801e610:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e614:	491a      	ldr	r1, [pc, #104]	; (801e680 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e616:	4618      	mov	r0, r3
 801e618:	f7ee fb6d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e61c:	2501      	movs	r5, #1
 801e61e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e622:	4619      	mov	r1, r3
 801e624:	4620      	mov	r0, r4
 801e626:	f7ee ff2a 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e62a:	4603      	mov	r3, r0
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d001      	beq.n	801e634 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801e630:	2401      	movs	r4, #1
 801e632:	e000      	b.n	801e636 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801e634:	2400      	movs	r4, #0
 801e636:	2d00      	cmp	r5, #0
 801e638:	d004      	beq.n	801e644 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801e63a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e63e:	4618      	mov	r0, r3
 801e640:	f7ee ff11 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e644:	2e00      	cmp	r6, #0
 801e646:	d004      	beq.n	801e652 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801e648:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e64c:	4618      	mov	r0, r3
 801e64e:	f7ee ff0a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e652:	2c00      	cmp	r4, #0
 801e654:	d01a      	beq.n	801e68c <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801e656:	463b      	mov	r3, r7
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	699b      	ldr	r3, [r3, #24]
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	db0a      	blt.n	801e676 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801e660:	1d3b      	adds	r3, r7, #4
 801e662:	681b      	ldr	r3, [r3, #0]
 801e664:	699b      	ldr	r3, [r3, #24]
 801e666:	463a      	mov	r2, r7
 801e668:	6812      	ldr	r2, [r2, #0]
 801e66a:	6992      	ldr	r2, [r2, #24]
 801e66c:	4293      	cmp	r3, r2
 801e66e:	d102      	bne.n	801e676 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801e670:	2401      	movs	r4, #1
 801e672:	f000 bc2d 	b.w	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e676:	2400      	movs	r4, #0
 801e678:	f000 bc2a 	b.w	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e67c:	080267e8 	.word	0x080267e8
 801e680:	080267cc 	.word	0x080267cc
 801e684:	080267d8 	.word	0x080267d8
 801e688:	080267f4 	.word	0x080267f4
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801e68c:	2500      	movs	r5, #0
 801e68e:	1d3b      	adds	r3, r7, #4
 801e690:	681b      	ldr	r3, [r3, #0]
 801e692:	f103 040c 	add.w	r4, r3, #12
 801e696:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e69a:	49b8      	ldr	r1, [pc, #736]	; (801e97c <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801e69c:	4618      	mov	r0, r3
 801e69e:	f7ee fb2a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e6a2:	2601      	movs	r6, #1
 801e6a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e6a8:	4619      	mov	r1, r3
 801e6aa:	4620      	mov	r0, r4
 801e6ac:	f7ee fee7 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e6b0:	4603      	mov	r3, r0
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d015      	beq.n	801e6e2 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801e6b6:	463b      	mov	r3, r7
 801e6b8:	681b      	ldr	r3, [r3, #0]
 801e6ba:	f103 040c 	add.w	r4, r3, #12
 801e6be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e6c2:	49af      	ldr	r1, [pc, #700]	; (801e980 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e6c4:	4618      	mov	r0, r3
 801e6c6:	f7ee fb16 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e6ca:	2501      	movs	r5, #1
 801e6cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e6d0:	4619      	mov	r1, r3
 801e6d2:	4620      	mov	r0, r4
 801e6d4:	f7ee fed3 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e6d8:	4603      	mov	r3, r0
 801e6da:	2b00      	cmp	r3, #0
 801e6dc:	d001      	beq.n	801e6e2 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801e6de:	2401      	movs	r4, #1
 801e6e0:	e000      	b.n	801e6e4 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801e6e2:	2400      	movs	r4, #0
 801e6e4:	2d00      	cmp	r5, #0
 801e6e6:	d004      	beq.n	801e6f2 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801e6e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e6ec:	4618      	mov	r0, r3
 801e6ee:	f7ee feba 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e6f2:	2e00      	cmp	r6, #0
 801e6f4:	d004      	beq.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801e6f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e6fa:	4618      	mov	r0, r3
 801e6fc:	f7ee feb3 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e700:	2c00      	cmp	r4, #0
 801e702:	d010      	beq.n	801e726 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801e704:	1d3b      	adds	r3, r7, #4
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	699b      	ldr	r3, [r3, #24]
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	db09      	blt.n	801e722 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801e70e:	1d3b      	adds	r3, r7, #4
 801e710:	681b      	ldr	r3, [r3, #0]
 801e712:	699b      	ldr	r3, [r3, #24]
 801e714:	463a      	mov	r2, r7
 801e716:	6812      	ldr	r2, [r2, #0]
 801e718:	6992      	ldr	r2, [r2, #24]
 801e71a:	4293      	cmp	r3, r2
 801e71c:	d101      	bne.n	801e722 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801e71e:	2401      	movs	r4, #1
 801e720:	e3d6      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e722:	2400      	movs	r4, #0
 801e724:	e3d4      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801e726:	2500      	movs	r5, #0
 801e728:	1d3b      	adds	r3, r7, #4
 801e72a:	681b      	ldr	r3, [r3, #0]
 801e72c:	f103 040c 	add.w	r4, r3, #12
 801e730:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e734:	4993      	ldr	r1, [pc, #588]	; (801e984 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e736:	4618      	mov	r0, r3
 801e738:	f7ee fadd 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e73c:	2601      	movs	r6, #1
 801e73e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e742:	4619      	mov	r1, r3
 801e744:	4620      	mov	r0, r4
 801e746:	f7ee fe9a 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e74a:	4603      	mov	r3, r0
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	d015      	beq.n	801e77c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801e750:	463b      	mov	r3, r7
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	f103 040c 	add.w	r4, r3, #12
 801e758:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e75c:	498a      	ldr	r1, [pc, #552]	; (801e988 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801e75e:	4618      	mov	r0, r3
 801e760:	f7ee fac9 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e764:	2501      	movs	r5, #1
 801e766:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e76a:	4619      	mov	r1, r3
 801e76c:	4620      	mov	r0, r4
 801e76e:	f7ee fe86 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e772:	4603      	mov	r3, r0
 801e774:	2b00      	cmp	r3, #0
 801e776:	d001      	beq.n	801e77c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801e778:	2401      	movs	r4, #1
 801e77a:	e000      	b.n	801e77e <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801e77c:	2400      	movs	r4, #0
 801e77e:	2d00      	cmp	r5, #0
 801e780:	d004      	beq.n	801e78c <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801e782:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e786:	4618      	mov	r0, r3
 801e788:	f7ee fe6d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e78c:	2e00      	cmp	r6, #0
 801e78e:	d004      	beq.n	801e79a <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801e790:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e794:	4618      	mov	r0, r3
 801e796:	f7ee fe66 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e79a:	2c00      	cmp	r4, #0
 801e79c:	d010      	beq.n	801e7c0 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801e79e:	463b      	mov	r3, r7
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	699b      	ldr	r3, [r3, #24]
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	db09      	blt.n	801e7bc <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801e7a8:	1d3b      	adds	r3, r7, #4
 801e7aa:	681b      	ldr	r3, [r3, #0]
 801e7ac:	699b      	ldr	r3, [r3, #24]
 801e7ae:	463a      	mov	r2, r7
 801e7b0:	6812      	ldr	r2, [r2, #0]
 801e7b2:	6992      	ldr	r2, [r2, #24]
 801e7b4:	4293      	cmp	r3, r2
 801e7b6:	d101      	bne.n	801e7bc <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801e7b8:	2401      	movs	r4, #1
 801e7ba:	e389      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e7bc:	2400      	movs	r4, #0
 801e7be:	e387      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801e7c0:	2500      	movs	r5, #0
 801e7c2:	1d3b      	adds	r3, r7, #4
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	f103 040c 	add.w	r4, r3, #12
 801e7ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e7ce:	496e      	ldr	r1, [pc, #440]	; (801e988 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801e7d0:	4618      	mov	r0, r3
 801e7d2:	f7ee fa90 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e7d6:	2601      	movs	r6, #1
 801e7d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e7dc:	4619      	mov	r1, r3
 801e7de:	4620      	mov	r0, r4
 801e7e0:	f7ee fe4d 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e7e4:	4603      	mov	r3, r0
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d015      	beq.n	801e816 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801e7ea:	463b      	mov	r3, r7
 801e7ec:	681b      	ldr	r3, [r3, #0]
 801e7ee:	f103 040c 	add.w	r4, r3, #12
 801e7f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e7f6:	4963      	ldr	r1, [pc, #396]	; (801e984 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e7f8:	4618      	mov	r0, r3
 801e7fa:	f7ee fa7c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e7fe:	2501      	movs	r5, #1
 801e800:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e804:	4619      	mov	r1, r3
 801e806:	4620      	mov	r0, r4
 801e808:	f7ee fe39 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e80c:	4603      	mov	r3, r0
 801e80e:	2b00      	cmp	r3, #0
 801e810:	d001      	beq.n	801e816 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801e812:	2401      	movs	r4, #1
 801e814:	e000      	b.n	801e818 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801e816:	2400      	movs	r4, #0
 801e818:	2d00      	cmp	r5, #0
 801e81a:	d004      	beq.n	801e826 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801e81c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e820:	4618      	mov	r0, r3
 801e822:	f7ee fe20 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e826:	2e00      	cmp	r6, #0
 801e828:	d004      	beq.n	801e834 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801e82a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e82e:	4618      	mov	r0, r3
 801e830:	f7ee fe19 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e834:	2c00      	cmp	r4, #0
 801e836:	d010      	beq.n	801e85a <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801e838:	1d3b      	adds	r3, r7, #4
 801e83a:	681b      	ldr	r3, [r3, #0]
 801e83c:	699b      	ldr	r3, [r3, #24]
 801e83e:	2b00      	cmp	r3, #0
 801e840:	db09      	blt.n	801e856 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801e842:	1d3b      	adds	r3, r7, #4
 801e844:	681b      	ldr	r3, [r3, #0]
 801e846:	699b      	ldr	r3, [r3, #24]
 801e848:	463a      	mov	r2, r7
 801e84a:	6812      	ldr	r2, [r2, #0]
 801e84c:	6992      	ldr	r2, [r2, #24]
 801e84e:	4293      	cmp	r3, r2
 801e850:	d101      	bne.n	801e856 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801e852:	2401      	movs	r4, #1
 801e854:	e33c      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e856:	2400      	movs	r4, #0
 801e858:	e33a      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801e85a:	2500      	movs	r5, #0
 801e85c:	1d3b      	adds	r3, r7, #4
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	f103 040c 	add.w	r4, r3, #12
 801e864:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e868:	4946      	ldr	r1, [pc, #280]	; (801e984 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e86a:	4618      	mov	r0, r3
 801e86c:	f7ee fa43 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e870:	2601      	movs	r6, #1
 801e872:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e876:	4619      	mov	r1, r3
 801e878:	4620      	mov	r0, r4
 801e87a:	f7ee fe00 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e87e:	4603      	mov	r3, r0
 801e880:	2b00      	cmp	r3, #0
 801e882:	d015      	beq.n	801e8b0 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e884:	463b      	mov	r3, r7
 801e886:	681b      	ldr	r3, [r3, #0]
 801e888:	f103 040c 	add.w	r4, r3, #12
 801e88c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e890:	493b      	ldr	r1, [pc, #236]	; (801e980 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e892:	4618      	mov	r0, r3
 801e894:	f7ee fa2f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e898:	2501      	movs	r5, #1
 801e89a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e89e:	4619      	mov	r1, r3
 801e8a0:	4620      	mov	r0, r4
 801e8a2:	f7ee fdec 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e8a6:	4603      	mov	r3, r0
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d001      	beq.n	801e8b0 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e8ac:	2401      	movs	r4, #1
 801e8ae:	e000      	b.n	801e8b2 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801e8b0:	2400      	movs	r4, #0
 801e8b2:	2d00      	cmp	r5, #0
 801e8b4:	d004      	beq.n	801e8c0 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801e8b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e8ba:	4618      	mov	r0, r3
 801e8bc:	f7ee fdd3 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e8c0:	2e00      	cmp	r6, #0
 801e8c2:	d004      	beq.n	801e8ce <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801e8c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e8c8:	4618      	mov	r0, r3
 801e8ca:	f7ee fdcc 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e8ce:	2c00      	cmp	r4, #0
 801e8d0:	d00b      	beq.n	801e8ea <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801e8d2:	1d3b      	adds	r3, r7, #4
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	699a      	ldr	r2, [r3, #24]
 801e8d8:	463b      	mov	r3, r7
 801e8da:	681b      	ldr	r3, [r3, #0]
 801e8dc:	699b      	ldr	r3, [r3, #24]
 801e8de:	429a      	cmp	r2, r3
 801e8e0:	bf0c      	ite	eq
 801e8e2:	2301      	moveq	r3, #1
 801e8e4:	2300      	movne	r3, #0
 801e8e6:	b2dc      	uxtb	r4, r3
 801e8e8:	e2f2      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801e8ea:	2500      	movs	r5, #0
 801e8ec:	1d3b      	adds	r3, r7, #4
 801e8ee:	681b      	ldr	r3, [r3, #0]
 801e8f0:	f103 040c 	add.w	r4, r3, #12
 801e8f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e8f8:	4921      	ldr	r1, [pc, #132]	; (801e980 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e8fa:	4618      	mov	r0, r3
 801e8fc:	f7ee f9fb 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e900:	2601      	movs	r6, #1
 801e902:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e906:	4619      	mov	r1, r3
 801e908:	4620      	mov	r0, r4
 801e90a:	f7ee fdb8 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e90e:	4603      	mov	r3, r0
 801e910:	2b00      	cmp	r3, #0
 801e912:	d015      	beq.n	801e940 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e914:	463b      	mov	r3, r7
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	f103 040c 	add.w	r4, r3, #12
 801e91c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e920:	4918      	ldr	r1, [pc, #96]	; (801e984 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e922:	4618      	mov	r0, r3
 801e924:	f7ee f9e7 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e928:	2501      	movs	r5, #1
 801e92a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e92e:	4619      	mov	r1, r3
 801e930:	4620      	mov	r0, r4
 801e932:	f7ee fda4 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e936:	4603      	mov	r3, r0
 801e938:	2b00      	cmp	r3, #0
 801e93a:	d001      	beq.n	801e940 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e93c:	2401      	movs	r4, #1
 801e93e:	e000      	b.n	801e942 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801e940:	2400      	movs	r4, #0
 801e942:	2d00      	cmp	r5, #0
 801e944:	d004      	beq.n	801e950 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801e946:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e94a:	4618      	mov	r0, r3
 801e94c:	f7ee fd8b 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e950:	2e00      	cmp	r6, #0
 801e952:	d004      	beq.n	801e95e <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801e954:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e958:	4618      	mov	r0, r3
 801e95a:	f7ee fd84 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e95e:	2c00      	cmp	r4, #0
 801e960:	d014      	beq.n	801e98c <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801e962:	1d3b      	adds	r3, r7, #4
 801e964:	681b      	ldr	r3, [r3, #0]
 801e966:	699a      	ldr	r2, [r3, #24]
 801e968:	463b      	mov	r3, r7
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	699b      	ldr	r3, [r3, #24]
 801e96e:	429a      	cmp	r2, r3
 801e970:	bf0c      	ite	eq
 801e972:	2301      	moveq	r3, #1
 801e974:	2300      	movne	r3, #0
 801e976:	b2dc      	uxtb	r4, r3
 801e978:	e2aa      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e97a:	bf00      	nop
 801e97c:	080267cc 	.word	0x080267cc
 801e980:	080267f4 	.word	0x080267f4
 801e984:	080267d8 	.word	0x080267d8
 801e988:	080267e8 	.word	0x080267e8
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801e98c:	2500      	movs	r5, #0
 801e98e:	1d3b      	adds	r3, r7, #4
 801e990:	681b      	ldr	r3, [r3, #0]
 801e992:	f103 040c 	add.w	r4, r3, #12
 801e996:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e99a:	49ae      	ldr	r1, [pc, #696]	; (801ec54 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e99c:	4618      	mov	r0, r3
 801e99e:	f7ee f9aa 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e9a2:	2601      	movs	r6, #1
 801e9a4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e9a8:	4619      	mov	r1, r3
 801e9aa:	4620      	mov	r0, r4
 801e9ac:	f7ee fd67 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e9b0:	4603      	mov	r3, r0
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	d015      	beq.n	801e9e2 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e9b6:	463b      	mov	r3, r7
 801e9b8:	681b      	ldr	r3, [r3, #0]
 801e9ba:	f103 040c 	add.w	r4, r3, #12
 801e9be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e9c2:	49a5      	ldr	r1, [pc, #660]	; (801ec58 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e9c4:	4618      	mov	r0, r3
 801e9c6:	f7ee f996 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801e9ca:	2501      	movs	r5, #1
 801e9cc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e9d0:	4619      	mov	r1, r3
 801e9d2:	4620      	mov	r0, r4
 801e9d4:	f7ee fd53 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801e9d8:	4603      	mov	r3, r0
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	d001      	beq.n	801e9e2 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e9de:	2401      	movs	r4, #1
 801e9e0:	e000      	b.n	801e9e4 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801e9e2:	2400      	movs	r4, #0
 801e9e4:	2d00      	cmp	r5, #0
 801e9e6:	d004      	beq.n	801e9f2 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801e9e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e9ec:	4618      	mov	r0, r3
 801e9ee:	f7ee fd3a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801e9f2:	2e00      	cmp	r6, #0
 801e9f4:	d004      	beq.n	801ea00 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801e9f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e9fa:	4618      	mov	r0, r3
 801e9fc:	f7ee fd33 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ea00:	2c00      	cmp	r4, #0
 801ea02:	d010      	beq.n	801ea26 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801ea04:	1d3b      	adds	r3, r7, #4
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	699b      	ldr	r3, [r3, #24]
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	db09      	blt.n	801ea22 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801ea0e:	1d3b      	adds	r3, r7, #4
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	699b      	ldr	r3, [r3, #24]
 801ea14:	463a      	mov	r2, r7
 801ea16:	6812      	ldr	r2, [r2, #0]
 801ea18:	6992      	ldr	r2, [r2, #24]
 801ea1a:	4293      	cmp	r3, r2
 801ea1c:	d101      	bne.n	801ea22 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801ea1e:	2401      	movs	r4, #1
 801ea20:	e256      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ea22:	2400      	movs	r4, #0
 801ea24:	e254      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801ea26:	2500      	movs	r5, #0
 801ea28:	1d3b      	adds	r3, r7, #4
 801ea2a:	681b      	ldr	r3, [r3, #0]
 801ea2c:	f103 040c 	add.w	r4, r3, #12
 801ea30:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea34:	4988      	ldr	r1, [pc, #544]	; (801ec58 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801ea36:	4618      	mov	r0, r3
 801ea38:	f7ee f95d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ea3c:	2601      	movs	r6, #1
 801ea3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea42:	4619      	mov	r1, r3
 801ea44:	4620      	mov	r0, r4
 801ea46:	f7ee fd1a 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ea4a:	4603      	mov	r3, r0
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	d015      	beq.n	801ea7c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801ea50:	463b      	mov	r3, r7
 801ea52:	681b      	ldr	r3, [r3, #0]
 801ea54:	f103 040c 	add.w	r4, r3, #12
 801ea58:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ea5c:	497d      	ldr	r1, [pc, #500]	; (801ec54 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801ea5e:	4618      	mov	r0, r3
 801ea60:	f7ee f949 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ea64:	2501      	movs	r5, #1
 801ea66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ea6a:	4619      	mov	r1, r3
 801ea6c:	4620      	mov	r0, r4
 801ea6e:	f7ee fd06 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ea72:	4603      	mov	r3, r0
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	d001      	beq.n	801ea7c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801ea78:	2401      	movs	r4, #1
 801ea7a:	e000      	b.n	801ea7e <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801ea7c:	2400      	movs	r4, #0
 801ea7e:	2d00      	cmp	r5, #0
 801ea80:	d004      	beq.n	801ea8c <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801ea82:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ea86:	4618      	mov	r0, r3
 801ea88:	f7ee fced 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ea8c:	2e00      	cmp	r6, #0
 801ea8e:	d004      	beq.n	801ea9a <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801ea90:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea94:	4618      	mov	r0, r3
 801ea96:	f7ee fce6 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ea9a:	2c00      	cmp	r4, #0
 801ea9c:	d010      	beq.n	801eac0 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801ea9e:	463b      	mov	r3, r7
 801eaa0:	681b      	ldr	r3, [r3, #0]
 801eaa2:	699b      	ldr	r3, [r3, #24]
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	db09      	blt.n	801eabc <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801eaa8:	1d3b      	adds	r3, r7, #4
 801eaaa:	681b      	ldr	r3, [r3, #0]
 801eaac:	699b      	ldr	r3, [r3, #24]
 801eaae:	463a      	mov	r2, r7
 801eab0:	6812      	ldr	r2, [r2, #0]
 801eab2:	6992      	ldr	r2, [r2, #24]
 801eab4:	4293      	cmp	r3, r2
 801eab6:	d101      	bne.n	801eabc <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801eab8:	2401      	movs	r4, #1
 801eaba:	e209      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801eabc:	2400      	movs	r4, #0
 801eabe:	e207      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801eac0:	1d3b      	adds	r3, r7, #4
 801eac2:	681b      	ldr	r3, [r3, #0]
 801eac4:	f103 020c 	add.w	r2, r3, #12
 801eac8:	463b      	mov	r3, r7
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	330c      	adds	r3, #12
 801eace:	4619      	mov	r1, r3
 801ead0:	4610      	mov	r0, r2
 801ead2:	f7ee fd19 	bl	800d508 <_ZneRK12SimpleStringS1_>
 801ead6:	4603      	mov	r3, r0
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d001      	beq.n	801eae0 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801eadc:	2400      	movs	r4, #0
 801eade:	e1f7      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801eae0:	1d3b      	adds	r3, r7, #4
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	f103 040c 	add.w	r4, r3, #12
 801eae8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eaec:	495b      	ldr	r1, [pc, #364]	; (801ec5c <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801eaee:	4618      	mov	r0, r3
 801eaf0:	f7ee f901 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801eaf4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eaf8:	4619      	mov	r1, r3
 801eafa:	4620      	mov	r0, r4
 801eafc:	f7ee fcbf 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801eb00:	4603      	mov	r3, r0
 801eb02:	461c      	mov	r4, r3
 801eb04:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eb08:	4618      	mov	r0, r3
 801eb0a:	f7ee fcac 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801eb0e:	2c00      	cmp	r4, #0
 801eb10:	d00b      	beq.n	801eb2a <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801eb12:	1d3b      	adds	r3, r7, #4
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	7e1a      	ldrb	r2, [r3, #24]
 801eb18:	463b      	mov	r3, r7
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	7e1b      	ldrb	r3, [r3, #24]
 801eb1e:	429a      	cmp	r2, r3
 801eb20:	bf0c      	ite	eq
 801eb22:	2301      	moveq	r3, #1
 801eb24:	2300      	movne	r3, #0
 801eb26:	b2dc      	uxtb	r4, r3
 801eb28:	e1d2      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801eb2a:	1d3b      	adds	r3, r7, #4
 801eb2c:	681b      	ldr	r3, [r3, #0]
 801eb2e:	f103 040c 	add.w	r4, r3, #12
 801eb32:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb36:	494a      	ldr	r1, [pc, #296]	; (801ec60 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801eb38:	4618      	mov	r0, r3
 801eb3a:	f7ee f8dc 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801eb3e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb42:	4619      	mov	r1, r3
 801eb44:	4620      	mov	r0, r4
 801eb46:	f7ee fc9a 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801eb4a:	4603      	mov	r3, r0
 801eb4c:	461c      	mov	r4, r3
 801eb4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb52:	4618      	mov	r0, r3
 801eb54:	f7ee fc87 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801eb58:	2c00      	cmp	r4, #0
 801eb5a:	d00b      	beq.n	801eb74 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801eb5c:	1d3b      	adds	r3, r7, #4
 801eb5e:	681b      	ldr	r3, [r3, #0]
 801eb60:	699a      	ldr	r2, [r3, #24]
 801eb62:	463b      	mov	r3, r7
 801eb64:	681b      	ldr	r3, [r3, #0]
 801eb66:	699b      	ldr	r3, [r3, #24]
 801eb68:	429a      	cmp	r2, r3
 801eb6a:	bf0c      	ite	eq
 801eb6c:	2301      	moveq	r3, #1
 801eb6e:	2300      	movne	r3, #0
 801eb70:	b2dc      	uxtb	r4, r3
 801eb72:	e1ad      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801eb74:	1d3b      	adds	r3, r7, #4
 801eb76:	681b      	ldr	r3, [r3, #0]
 801eb78:	f103 040c 	add.w	r4, r3, #12
 801eb7c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801eb80:	4938      	ldr	r1, [pc, #224]	; (801ec64 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801eb82:	4618      	mov	r0, r3
 801eb84:	f7ee f8b7 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801eb88:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801eb8c:	4619      	mov	r1, r3
 801eb8e:	4620      	mov	r0, r4
 801eb90:	f7ee fc75 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801eb94:	4603      	mov	r3, r0
 801eb96:	461c      	mov	r4, r3
 801eb98:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801eb9c:	4618      	mov	r0, r3
 801eb9e:	f7ee fc62 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801eba2:	2c00      	cmp	r4, #0
 801eba4:	d00b      	beq.n	801ebbe <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801eba6:	1d3b      	adds	r3, r7, #4
 801eba8:	681b      	ldr	r3, [r3, #0]
 801ebaa:	699a      	ldr	r2, [r3, #24]
 801ebac:	463b      	mov	r3, r7
 801ebae:	681b      	ldr	r3, [r3, #0]
 801ebb0:	699b      	ldr	r3, [r3, #24]
 801ebb2:	429a      	cmp	r2, r3
 801ebb4:	bf0c      	ite	eq
 801ebb6:	2301      	moveq	r3, #1
 801ebb8:	2300      	movne	r3, #0
 801ebba:	b2dc      	uxtb	r4, r3
 801ebbc:	e188      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801ebbe:	1d3b      	adds	r3, r7, #4
 801ebc0:	681b      	ldr	r3, [r3, #0]
 801ebc2:	f103 040c 	add.w	r4, r3, #12
 801ebc6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ebca:	4922      	ldr	r1, [pc, #136]	; (801ec54 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801ebcc:	4618      	mov	r0, r3
 801ebce:	f7ee f892 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ebd2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ebd6:	4619      	mov	r1, r3
 801ebd8:	4620      	mov	r0, r4
 801ebda:	f7ee fc50 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ebde:	4603      	mov	r3, r0
 801ebe0:	461c      	mov	r4, r3
 801ebe2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ebe6:	4618      	mov	r0, r3
 801ebe8:	f7ee fc3d 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ebec:	2c00      	cmp	r4, #0
 801ebee:	d00b      	beq.n	801ec08 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801ebf0:	1d3b      	adds	r3, r7, #4
 801ebf2:	681b      	ldr	r3, [r3, #0]
 801ebf4:	699a      	ldr	r2, [r3, #24]
 801ebf6:	463b      	mov	r3, r7
 801ebf8:	681b      	ldr	r3, [r3, #0]
 801ebfa:	699b      	ldr	r3, [r3, #24]
 801ebfc:	429a      	cmp	r2, r3
 801ebfe:	bf0c      	ite	eq
 801ec00:	2301      	moveq	r3, #1
 801ec02:	2300      	movne	r3, #0
 801ec04:	b2dc      	uxtb	r4, r3
 801ec06:	e163      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801ec08:	1d3b      	adds	r3, r7, #4
 801ec0a:	681b      	ldr	r3, [r3, #0]
 801ec0c:	f103 040c 	add.w	r4, r3, #12
 801ec10:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801ec14:	4910      	ldr	r1, [pc, #64]	; (801ec58 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801ec16:	4618      	mov	r0, r3
 801ec18:	f7ee f86d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ec1c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801ec20:	4619      	mov	r1, r3
 801ec22:	4620      	mov	r0, r4
 801ec24:	f7ee fc2b 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ec28:	4603      	mov	r3, r0
 801ec2a:	461c      	mov	r4, r3
 801ec2c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801ec30:	4618      	mov	r0, r3
 801ec32:	f7ee fc18 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ec36:	2c00      	cmp	r4, #0
 801ec38:	d016      	beq.n	801ec68 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801ec3a:	1d3b      	adds	r3, r7, #4
 801ec3c:	681b      	ldr	r3, [r3, #0]
 801ec3e:	699a      	ldr	r2, [r3, #24]
 801ec40:	463b      	mov	r3, r7
 801ec42:	681b      	ldr	r3, [r3, #0]
 801ec44:	699b      	ldr	r3, [r3, #24]
 801ec46:	429a      	cmp	r2, r3
 801ec48:	bf0c      	ite	eq
 801ec4a:	2301      	moveq	r3, #1
 801ec4c:	2300      	movne	r3, #0
 801ec4e:	b2dc      	uxtb	r4, r3
 801ec50:	e13e      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ec52:	bf00      	nop
 801ec54:	080267e8 	.word	0x080267e8
 801ec58:	080267f4 	.word	0x080267f4
 801ec5c:	080267d0 	.word	0x080267d0
 801ec60:	080267cc 	.word	0x080267cc
 801ec64:	080267d8 	.word	0x080267d8
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801ec68:	1d3b      	adds	r3, r7, #4
 801ec6a:	681b      	ldr	r3, [r3, #0]
 801ec6c:	f103 040c 	add.w	r4, r3, #12
 801ec70:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ec74:	4999      	ldr	r1, [pc, #612]	; (801eedc <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801ec76:	4618      	mov	r0, r3
 801ec78:	f7ee f83d 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ec7c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ec80:	4619      	mov	r1, r3
 801ec82:	4620      	mov	r0, r4
 801ec84:	f7ee fbfb 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ec88:	4603      	mov	r3, r0
 801ec8a:	461c      	mov	r4, r3
 801ec8c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ec90:	4618      	mov	r0, r3
 801ec92:	f7ee fbe8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ec96:	2c00      	cmp	r4, #0
 801ec98:	d026      	beq.n	801ece8 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801ec9a:	1d3b      	adds	r3, r7, #4
 801ec9c:	681b      	ldr	r3, [r3, #0]
 801ec9e:	699a      	ldr	r2, [r3, #24]
 801eca0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801eca4:	4611      	mov	r1, r2
 801eca6:	4618      	mov	r0, r3
 801eca8:	f7ee f825 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ecac:	463b      	mov	r3, r7
 801ecae:	681b      	ldr	r3, [r3, #0]
 801ecb0:	699a      	ldr	r2, [r3, #24]
 801ecb2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ecb6:	4611      	mov	r1, r2
 801ecb8:	4618      	mov	r0, r3
 801ecba:	f7ee f81c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ecbe:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801ecc2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ecc6:	4611      	mov	r1, r2
 801ecc8:	4618      	mov	r0, r3
 801ecca:	f7ee fbd8 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ecce:	4603      	mov	r3, r0
 801ecd0:	461c      	mov	r4, r3
 801ecd2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ecd6:	4618      	mov	r0, r3
 801ecd8:	f7ee fbc5 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ecdc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ece0:	4618      	mov	r0, r3
 801ece2:	f7ee fbc0 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ece6:	e0f3      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801ece8:	1d3b      	adds	r3, r7, #4
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	f103 040c 	add.w	r4, r3, #12
 801ecf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ecf4:	497a      	ldr	r1, [pc, #488]	; (801eee0 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801ecf6:	4618      	mov	r0, r3
 801ecf8:	f7ed fffd 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ecfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ed00:	4619      	mov	r1, r3
 801ed02:	4620      	mov	r0, r4
 801ed04:	f7ee fbbb 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ed08:	4603      	mov	r3, r0
 801ed0a:	461c      	mov	r4, r3
 801ed0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ed10:	4618      	mov	r0, r3
 801ed12:	f7ee fba8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ed16:	2c00      	cmp	r4, #0
 801ed18:	d00b      	beq.n	801ed32 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801ed1a:	1d3b      	adds	r3, r7, #4
 801ed1c:	681b      	ldr	r3, [r3, #0]
 801ed1e:	699a      	ldr	r2, [r3, #24]
 801ed20:	463b      	mov	r3, r7
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	699b      	ldr	r3, [r3, #24]
 801ed26:	429a      	cmp	r2, r3
 801ed28:	bf0c      	ite	eq
 801ed2a:	2301      	moveq	r3, #1
 801ed2c:	2300      	movne	r3, #0
 801ed2e:	b2dc      	uxtb	r4, r3
 801ed30:	e0ce      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801ed32:	1d3b      	adds	r3, r7, #4
 801ed34:	681b      	ldr	r3, [r3, #0]
 801ed36:	f103 040c 	add.w	r4, r3, #12
 801ed3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ed3e:	4969      	ldr	r1, [pc, #420]	; (801eee4 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801ed40:	4618      	mov	r0, r3
 801ed42:	f7ed ffd8 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ed46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ed4a:	4619      	mov	r1, r3
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	f7ee fb96 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ed52:	4603      	mov	r3, r0
 801ed54:	461c      	mov	r4, r3
 801ed56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ed5a:	4618      	mov	r0, r3
 801ed5c:	f7ee fb83 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ed60:	2c00      	cmp	r4, #0
 801ed62:	d00b      	beq.n	801ed7c <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801ed64:	1d3b      	adds	r3, r7, #4
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	699a      	ldr	r2, [r3, #24]
 801ed6a:	463b      	mov	r3, r7
 801ed6c:	681b      	ldr	r3, [r3, #0]
 801ed6e:	699b      	ldr	r3, [r3, #24]
 801ed70:	429a      	cmp	r2, r3
 801ed72:	bf0c      	ite	eq
 801ed74:	2301      	moveq	r3, #1
 801ed76:	2300      	movne	r3, #0
 801ed78:	b2dc      	uxtb	r4, r3
 801ed7a:	e0a9      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801ed7c:	1d3b      	adds	r3, r7, #4
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	f103 040c 	add.w	r4, r3, #12
 801ed84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ed88:	4957      	ldr	r1, [pc, #348]	; (801eee8 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801ed8a:	4618      	mov	r0, r3
 801ed8c:	f7ed ffb3 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ed90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ed94:	4619      	mov	r1, r3
 801ed96:	4620      	mov	r0, r4
 801ed98:	f7ee fb71 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ed9c:	4603      	mov	r3, r0
 801ed9e:	461c      	mov	r4, r3
 801eda0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801eda4:	4618      	mov	r0, r3
 801eda6:	f7ee fb5e 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801edaa:	2c00      	cmp	r4, #0
 801edac:	d00b      	beq.n	801edc6 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801edae:	1d3b      	adds	r3, r7, #4
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	699a      	ldr	r2, [r3, #24]
 801edb4:	463b      	mov	r3, r7
 801edb6:	681b      	ldr	r3, [r3, #0]
 801edb8:	699b      	ldr	r3, [r3, #24]
 801edba:	429a      	cmp	r2, r3
 801edbc:	bf0c      	ite	eq
 801edbe:	2301      	moveq	r3, #1
 801edc0:	2300      	movne	r3, #0
 801edc2:	b2dc      	uxtb	r4, r3
 801edc4:	e084      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801edc6:	1d3b      	adds	r3, r7, #4
 801edc8:	681b      	ldr	r3, [r3, #0]
 801edca:	f103 040c 	add.w	r4, r3, #12
 801edce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801edd2:	4946      	ldr	r1, [pc, #280]	; (801eeec <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801edd4:	4618      	mov	r0, r3
 801edd6:	f7ed ff8e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801edda:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801edde:	4619      	mov	r1, r3
 801ede0:	4620      	mov	r0, r4
 801ede2:	f7ee fb4c 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ede6:	4603      	mov	r3, r0
 801ede8:	461c      	mov	r4, r3
 801edea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801edee:	4618      	mov	r0, r3
 801edf0:	f7ee fb39 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801edf4:	2c00      	cmp	r4, #0
 801edf6:	d01c      	beq.n	801ee32 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801edf8:	1d3b      	adds	r3, r7, #4
 801edfa:	681b      	ldr	r3, [r3, #0]
 801edfc:	ed93 7b06 	vldr	d7, [r3, #24]
 801ee00:	463b      	mov	r3, r7
 801ee02:	681b      	ldr	r3, [r3, #0]
 801ee04:	ed93 6b06 	vldr	d6, [r3, #24]
 801ee08:	1d3b      	adds	r3, r7, #4
 801ee0a:	681b      	ldr	r3, [r3, #0]
 801ee0c:	ed93 5b08 	vldr	d5, [r3, #32]
 801ee10:	eeb0 2a45 	vmov.f32	s4, s10
 801ee14:	eef0 2a65 	vmov.f32	s5, s11
 801ee18:	eeb0 1a46 	vmov.f32	s2, s12
 801ee1c:	eef0 1a66 	vmov.f32	s3, s13
 801ee20:	eeb0 0a47 	vmov.f32	s0, s14
 801ee24:	eef0 0a67 	vmov.f32	s1, s15
 801ee28:	f7f3 fe18 	bl	8012a5c <_Z13doubles_equalddd>
 801ee2c:	4603      	mov	r3, r0
 801ee2e:	461c      	mov	r4, r3
 801ee30:	e04e      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801ee32:	1d3b      	adds	r3, r7, #4
 801ee34:	681b      	ldr	r3, [r3, #0]
 801ee36:	f103 040c 	add.w	r4, r3, #12
 801ee3a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ee3e:	492c      	ldr	r1, [pc, #176]	; (801eef0 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801ee40:	4618      	mov	r0, r3
 801ee42:	f7ed ff58 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ee46:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ee4a:	4619      	mov	r1, r3
 801ee4c:	4620      	mov	r0, r4
 801ee4e:	f7ee fb16 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ee52:	4603      	mov	r3, r0
 801ee54:	461c      	mov	r4, r3
 801ee56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ee5a:	4618      	mov	r0, r3
 801ee5c:	f7ee fb03 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ee60:	2c00      	cmp	r4, #0
 801ee62:	d01c      	beq.n	801ee9e <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801ee64:	1d3b      	adds	r3, r7, #4
 801ee66:	681b      	ldr	r3, [r3, #0]
 801ee68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ee6a:	463b      	mov	r3, r7
 801ee6c:	681b      	ldr	r3, [r3, #0]
 801ee6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ee70:	429a      	cmp	r2, r3
 801ee72:	d001      	beq.n	801ee78 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801ee74:	2400      	movs	r4, #0
 801ee76:	e02b      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801ee78:	1d3b      	adds	r3, r7, #4
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	6998      	ldr	r0, [r3, #24]
 801ee7e:	463b      	mov	r3, r7
 801ee80:	681b      	ldr	r3, [r3, #0]
 801ee82:	6999      	ldr	r1, [r3, #24]
 801ee84:	1d3b      	adds	r3, r7, #4
 801ee86:	681b      	ldr	r3, [r3, #0]
 801ee88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ee8a:	461a      	mov	r2, r3
 801ee8c:	f7ed fe52 	bl	800cb34 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801ee90:	4603      	mov	r3, r0
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	bf0c      	ite	eq
 801ee96:	2301      	moveq	r3, #1
 801ee98:	2300      	movne	r3, #0
 801ee9a:	b2dc      	uxtb	r4, r3
 801ee9c:	e018      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801ee9e:	1d3b      	adds	r3, r7, #4
 801eea0:	681b      	ldr	r3, [r3, #0]
 801eea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eea4:	2b00      	cmp	r3, #0
 801eea6:	d012      	beq.n	801eece <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801eea8:	1d3b      	adds	r3, r7, #4
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801eeae:	1d3b      	adds	r3, r7, #4
 801eeb0:	681b      	ldr	r3, [r3, #0]
 801eeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	3308      	adds	r3, #8
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	1d3a      	adds	r2, r7, #4
 801eebc:	6812      	ldr	r2, [r2, #0]
 801eebe:	6991      	ldr	r1, [r2, #24]
 801eec0:	463a      	mov	r2, r7
 801eec2:	6812      	ldr	r2, [r2, #0]
 801eec4:	6992      	ldr	r2, [r2, #24]
 801eec6:	4798      	blx	r3
 801eec8:	4603      	mov	r3, r0
 801eeca:	461c      	mov	r4, r3
 801eecc:	e000      	b.n	801eed0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801eece:	2400      	movs	r4, #0
 801eed0:	4623      	mov	r3, r4
}
 801eed2:	4618      	mov	r0, r3
 801eed4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801eed8:	46bd      	mov	sp, r7
 801eeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eedc:	08026898 	.word	0x08026898
 801eee0:	08026878 	.word	0x08026878
 801eee4:	08026880 	.word	0x08026880
 801eee8:	0802688c 	.word	0x0802688c
 801eeec:	08026870 	.word	0x08026870
 801eef0:	080268a4 	.word	0x080268a4

0801eef4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801eef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eef6:	b087      	sub	sp, #28
 801eef8:	af00      	add	r7, sp, #0
 801eefa:	6078      	str	r0, [r7, #4]
 801eefc:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801eefe:	687b      	ldr	r3, [r7, #4]
 801ef00:	f103 020c 	add.w	r2, r3, #12
 801ef04:	683b      	ldr	r3, [r7, #0]
 801ef06:	330c      	adds	r3, #12
 801ef08:	4619      	mov	r1, r3
 801ef0a:	4610      	mov	r0, r2
 801ef0c:	f7ee fab7 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ef10:	4603      	mov	r3, r0
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	d001      	beq.n	801ef1a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801ef16:	2301      	movs	r3, #1
 801ef18:	e03c      	b.n	801ef94 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801ef1a:	2500      	movs	r5, #0
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	f103 040c 	add.w	r4, r3, #12
 801ef22:	f107 0308 	add.w	r3, r7, #8
 801ef26:	491d      	ldr	r1, [pc, #116]	; (801ef9c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801ef28:	4618      	mov	r0, r3
 801ef2a:	f7ed fee4 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ef2e:	2601      	movs	r6, #1
 801ef30:	f107 0308 	add.w	r3, r7, #8
 801ef34:	4619      	mov	r1, r3
 801ef36:	4620      	mov	r0, r4
 801ef38:	f7ee faa1 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ef3c:	4603      	mov	r3, r0
 801ef3e:	2b00      	cmp	r3, #0
 801ef40:	d014      	beq.n	801ef6c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801ef42:	683b      	ldr	r3, [r7, #0]
 801ef44:	f103 040c 	add.w	r4, r3, #12
 801ef48:	f107 0310 	add.w	r3, r7, #16
 801ef4c:	4914      	ldr	r1, [pc, #80]	; (801efa0 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801ef4e:	4618      	mov	r0, r3
 801ef50:	f7ed fed1 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801ef54:	2501      	movs	r5, #1
 801ef56:	f107 0310 	add.w	r3, r7, #16
 801ef5a:	4619      	mov	r1, r3
 801ef5c:	4620      	mov	r0, r4
 801ef5e:	f7ee fa8e 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801ef62:	4603      	mov	r3, r0
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d001      	beq.n	801ef6c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801ef68:	2401      	movs	r4, #1
 801ef6a:	e000      	b.n	801ef6e <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801ef6c:	2400      	movs	r4, #0
 801ef6e:	2d00      	cmp	r5, #0
 801ef70:	d004      	beq.n	801ef7c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801ef72:	f107 0310 	add.w	r3, r7, #16
 801ef76:	4618      	mov	r0, r3
 801ef78:	f7ee fa75 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ef7c:	2e00      	cmp	r6, #0
 801ef7e:	d004      	beq.n	801ef8a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801ef80:	f107 0308 	add.w	r3, r7, #8
 801ef84:	4618      	mov	r0, r3
 801ef86:	f7ee fa6e 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801ef8a:	2c00      	cmp	r4, #0
 801ef8c:	d001      	beq.n	801ef92 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801ef8e:	2301      	movs	r3, #1
 801ef90:	e000      	b.n	801ef94 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801ef92:	2300      	movs	r3, #0
}
 801ef94:	4618      	mov	r0, r3
 801ef96:	371c      	adds	r7, #28
 801ef98:	46bd      	mov	sp, r7
 801ef9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef9c:	08026880 	.word	0x08026880
 801efa0:	08026878 	.word	0x08026878

0801efa4 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801efa4:	b590      	push	{r4, r7, lr}
 801efa6:	b0b9      	sub	sp, #228	; 0xe4
 801efa8:	af00      	add	r7, sp, #0
 801efaa:	6078      	str	r0, [r7, #4]
 801efac:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801efae:	683b      	ldr	r3, [r7, #0]
 801efb0:	f103 040c 	add.w	r4, r3, #12
 801efb4:	f107 0308 	add.w	r3, r7, #8
 801efb8:	49d4      	ldr	r1, [pc, #848]	; (801f30c <_ZNK14MockNamedValue8toStringEv+0x368>)
 801efba:	4618      	mov	r0, r3
 801efbc:	f7ed fe9b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801efc0:	f107 0308 	add.w	r3, r7, #8
 801efc4:	4619      	mov	r1, r3
 801efc6:	4620      	mov	r0, r4
 801efc8:	f7ee fa59 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801efcc:	4603      	mov	r3, r0
 801efce:	461c      	mov	r4, r3
 801efd0:	f107 0308 	add.w	r3, r7, #8
 801efd4:	4618      	mov	r0, r3
 801efd6:	f7ee fa46 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801efda:	2c00      	cmp	r4, #0
 801efdc:	d007      	beq.n	801efee <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801efde:	683b      	ldr	r3, [r7, #0]
 801efe0:	7e1a      	ldrb	r2, [r3, #24]
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	4611      	mov	r1, r2
 801efe6:	4618      	mov	r0, r3
 801efe8:	f7ee fcae 	bl	800d948 <_Z10StringFromb>
 801efec:	e23f      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801efee:	683b      	ldr	r3, [r7, #0]
 801eff0:	f103 040c 	add.w	r4, r3, #12
 801eff4:	f107 0310 	add.w	r3, r7, #16
 801eff8:	49c5      	ldr	r1, [pc, #788]	; (801f310 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801effa:	4618      	mov	r0, r3
 801effc:	f7ed fe7b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f000:	f107 0310 	add.w	r3, r7, #16
 801f004:	4619      	mov	r1, r3
 801f006:	4620      	mov	r0, r4
 801f008:	f7ee fa39 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f00c:	4603      	mov	r3, r0
 801f00e:	461c      	mov	r4, r3
 801f010:	f107 0310 	add.w	r3, r7, #16
 801f014:	4618      	mov	r0, r3
 801f016:	f7ee fa26 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f01a:	2c00      	cmp	r4, #0
 801f01c:	d03b      	beq.n	801f096 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801f01e:	683b      	ldr	r3, [r7, #0]
 801f020:	699a      	ldr	r2, [r3, #24]
 801f022:	f107 0320 	add.w	r3, r7, #32
 801f026:	4611      	mov	r1, r2
 801f028:	4618      	mov	r0, r3
 801f02a:	f7ee fce3 	bl	800d9f4 <_Z10StringFromi>
 801f02e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f032:	49b8      	ldr	r1, [pc, #736]	; (801f314 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f034:	4618      	mov	r0, r3
 801f036:	f7ed fe5e 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f03a:	f107 0318 	add.w	r3, r7, #24
 801f03e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f042:	f107 0120 	add.w	r1, r7, #32
 801f046:	4618      	mov	r0, r3
 801f048:	f7ee fa6f 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 801f04c:	683b      	ldr	r3, [r7, #0]
 801f04e:	699a      	ldr	r2, [r3, #24]
 801f050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f054:	4611      	mov	r1, r2
 801f056:	4618      	mov	r0, r3
 801f058:	f7ee fdbc 	bl	800dbd4 <_Z30BracketsFormattedHexStringFromi>
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801f062:	f107 0118 	add.w	r1, r7, #24
 801f066:	4618      	mov	r0, r3
 801f068:	f7ee fa5f 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 801f06c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f070:	4618      	mov	r0, r3
 801f072:	f7ee f9f8 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f076:	f107 0318 	add.w	r3, r7, #24
 801f07a:	4618      	mov	r0, r3
 801f07c:	f7ee f9f3 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f084:	4618      	mov	r0, r3
 801f086:	f7ee f9ee 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f08a:	f107 0320 	add.w	r3, r7, #32
 801f08e:	4618      	mov	r0, r3
 801f090:	f7ee f9e9 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f094:	e1eb      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801f096:	683b      	ldr	r3, [r7, #0]
 801f098:	f103 040c 	add.w	r4, r3, #12
 801f09c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f0a0:	499d      	ldr	r1, [pc, #628]	; (801f318 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801f0a2:	4618      	mov	r0, r3
 801f0a4:	f7ed fe27 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f0a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f0ac:	4619      	mov	r1, r3
 801f0ae:	4620      	mov	r0, r4
 801f0b0:	f7ee f9e5 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f0b4:	4603      	mov	r3, r0
 801f0b6:	461c      	mov	r4, r3
 801f0b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f0bc:	4618      	mov	r0, r3
 801f0be:	f7ee f9d2 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f0c2:	2c00      	cmp	r4, #0
 801f0c4:	d03b      	beq.n	801f13e <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801f0c6:	683b      	ldr	r3, [r7, #0]
 801f0c8:	699a      	ldr	r2, [r3, #24]
 801f0ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f0ce:	4611      	mov	r1, r2
 801f0d0:	4618      	mov	r0, r3
 801f0d2:	f7ee fef7 	bl	800dec4 <_Z10StringFromj>
 801f0d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f0da:	498e      	ldr	r1, [pc, #568]	; (801f314 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f0dc:	4618      	mov	r0, r3
 801f0de:	f7ed fe0a 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f0e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f0e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801f0ea:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801f0ee:	4618      	mov	r0, r3
 801f0f0:	f7ee fa1b 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 801f0f4:	683b      	ldr	r3, [r7, #0]
 801f0f6:	699a      	ldr	r2, [r3, #24]
 801f0f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f0fc:	4611      	mov	r1, r2
 801f0fe:	4618      	mov	r0, r3
 801f100:	f7ee fd84 	bl	800dc0c <_Z30BracketsFormattedHexStringFromj>
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801f10a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801f10e:	4618      	mov	r0, r3
 801f110:	f7ee fa0b 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 801f114:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f118:	4618      	mov	r0, r3
 801f11a:	f7ee f9a4 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f11e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f122:	4618      	mov	r0, r3
 801f124:	f7ee f99f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f128:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f12c:	4618      	mov	r0, r3
 801f12e:	f7ee f99a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f132:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f136:	4618      	mov	r0, r3
 801f138:	f7ee f995 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f13c:	e197      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801f13e:	683b      	ldr	r3, [r7, #0]
 801f140:	f103 040c 	add.w	r4, r3, #12
 801f144:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f148:	4974      	ldr	r1, [pc, #464]	; (801f31c <_ZNK14MockNamedValue8toStringEv+0x378>)
 801f14a:	4618      	mov	r0, r3
 801f14c:	f7ed fdd3 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f150:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f154:	4619      	mov	r1, r3
 801f156:	4620      	mov	r0, r4
 801f158:	f7ee f991 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f15c:	4603      	mov	r3, r0
 801f15e:	461c      	mov	r4, r3
 801f160:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f164:	4618      	mov	r0, r3
 801f166:	f7ee f97e 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f16a:	2c00      	cmp	r4, #0
 801f16c:	d03b      	beq.n	801f1e6 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801f16e:	683b      	ldr	r3, [r7, #0]
 801f170:	699a      	ldr	r2, [r3, #24]
 801f172:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f176:	4611      	mov	r1, r2
 801f178:	4618      	mov	r0, r3
 801f17a:	f7ee fc4d 	bl	800da18 <_Z10StringFroml>
 801f17e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f182:	4964      	ldr	r1, [pc, #400]	; (801f314 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f184:	4618      	mov	r0, r3
 801f186:	f7ed fdb6 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f18a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f18e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801f192:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801f196:	4618      	mov	r0, r3
 801f198:	f7ee f9c7 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 801f19c:	683b      	ldr	r3, [r7, #0]
 801f19e:	699a      	ldr	r2, [r3, #24]
 801f1a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f1a4:	4611      	mov	r1, r2
 801f1a6:	4618      	mov	r0, r3
 801f1a8:	f7ee fd4c 	bl	800dc44 <_Z30BracketsFormattedHexStringFroml>
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801f1b2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801f1b6:	4618      	mov	r0, r3
 801f1b8:	f7ee f9b7 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 801f1bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f1c0:	4618      	mov	r0, r3
 801f1c2:	f7ee f950 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f1c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f1ca:	4618      	mov	r0, r3
 801f1cc:	f7ee f94b 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f1d0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f1d4:	4618      	mov	r0, r3
 801f1d6:	f7ee f946 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f1da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f1de:	4618      	mov	r0, r3
 801f1e0:	f7ee f941 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f1e4:	e143      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801f1e6:	683b      	ldr	r3, [r7, #0]
 801f1e8:	f103 040c 	add.w	r4, r3, #12
 801f1ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f1f0:	494b      	ldr	r1, [pc, #300]	; (801f320 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801f1f2:	4618      	mov	r0, r3
 801f1f4:	f7ed fd7f 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f1f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f1fc:	4619      	mov	r1, r3
 801f1fe:	4620      	mov	r0, r4
 801f200:	f7ee f93d 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f204:	4603      	mov	r3, r0
 801f206:	461c      	mov	r4, r3
 801f208:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f20c:	4618      	mov	r0, r3
 801f20e:	f7ee f92a 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f212:	2c00      	cmp	r4, #0
 801f214:	d03b      	beq.n	801f28e <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801f216:	683b      	ldr	r3, [r7, #0]
 801f218:	699a      	ldr	r2, [r3, #24]
 801f21a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f21e:	4611      	mov	r1, r2
 801f220:	4618      	mov	r0, r3
 801f222:	f7ee fe61 	bl	800dee8 <_Z10StringFromm>
 801f226:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f22a:	493a      	ldr	r1, [pc, #232]	; (801f314 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f22c:	4618      	mov	r0, r3
 801f22e:	f7ed fd62 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f232:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f236:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801f23a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801f23e:	4618      	mov	r0, r3
 801f240:	f7ee f973 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 801f244:	683b      	ldr	r3, [r7, #0]
 801f246:	699a      	ldr	r2, [r3, #24]
 801f248:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f24c:	4611      	mov	r1, r2
 801f24e:	4618      	mov	r0, r3
 801f250:	f7ee fd14 	bl	800dc7c <_Z30BracketsFormattedHexStringFromm>
 801f254:	687b      	ldr	r3, [r7, #4]
 801f256:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801f25a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801f25e:	4618      	mov	r0, r3
 801f260:	f7ee f963 	bl	800d52a <_ZNK12SimpleStringplERKS_>
 801f264:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f268:	4618      	mov	r0, r3
 801f26a:	f7ee f8fc 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f26e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f272:	4618      	mov	r0, r3
 801f274:	f7ee f8f7 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f278:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f27c:	4618      	mov	r0, r3
 801f27e:	f7ee f8f2 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f282:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f286:	4618      	mov	r0, r3
 801f288:	f7ee f8ed 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f28c:	e0ef      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801f28e:	683b      	ldr	r3, [r7, #0]
 801f290:	f103 040c 	add.w	r4, r3, #12
 801f294:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f298:	4922      	ldr	r1, [pc, #136]	; (801f324 <_ZNK14MockNamedValue8toStringEv+0x380>)
 801f29a:	4618      	mov	r0, r3
 801f29c:	f7ed fd2b 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f2a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f2a4:	4619      	mov	r1, r3
 801f2a6:	4620      	mov	r0, r4
 801f2a8:	f7ee f8e9 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f2ac:	4603      	mov	r3, r0
 801f2ae:	461c      	mov	r4, r3
 801f2b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f2b4:	4618      	mov	r0, r3
 801f2b6:	f7ee f8d6 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f2ba:	2c00      	cmp	r4, #0
 801f2bc:	d006      	beq.n	801f2cc <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801f2be:	683b      	ldr	r3, [r7, #0]
 801f2c0:	699b      	ldr	r3, [r3, #24]
 801f2c2:	4619      	mov	r1, r3
 801f2c4:	6878      	ldr	r0, [r7, #4]
 801f2c6:	f7ed fd16 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f2ca:	e0d0      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801f2cc:	683b      	ldr	r3, [r7, #0]
 801f2ce:	f103 040c 	add.w	r4, r3, #12
 801f2d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f2d6:	4914      	ldr	r1, [pc, #80]	; (801f328 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801f2d8:	4618      	mov	r0, r3
 801f2da:	f7ed fd0c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f2de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f2e2:	4619      	mov	r1, r3
 801f2e4:	4620      	mov	r0, r4
 801f2e6:	f7ee f8ca 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f2ea:	4603      	mov	r3, r0
 801f2ec:	461c      	mov	r4, r3
 801f2ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f2f2:	4618      	mov	r0, r3
 801f2f4:	f7ee f8b7 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f2f8:	2c00      	cmp	r4, #0
 801f2fa:	d017      	beq.n	801f32c <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801f2fc:	683b      	ldr	r3, [r7, #0]
 801f2fe:	699a      	ldr	r2, [r3, #24]
 801f300:	687b      	ldr	r3, [r7, #4]
 801f302:	4611      	mov	r1, r2
 801f304:	4618      	mov	r0, r3
 801f306:	f7ee fb99 	bl	800da3c <_Z10StringFromPKv>
 801f30a:	e0b0      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801f30c:	080267d0 	.word	0x080267d0
 801f310:	080267cc 	.word	0x080267cc
 801f314:	080268bc 	.word	0x080268bc
 801f318:	080267d8 	.word	0x080267d8
 801f31c:	080267e8 	.word	0x080267e8
 801f320:	080267f4 	.word	0x080267f4
 801f324:	08026898 	.word	0x08026898
 801f328:	08026878 	.word	0x08026878
    else if (type_ == "void (*)()")
 801f32c:	683b      	ldr	r3, [r7, #0]
 801f32e:	f103 040c 	add.w	r4, r3, #12
 801f332:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f336:	4950      	ldr	r1, [pc, #320]	; (801f478 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801f338:	4618      	mov	r0, r3
 801f33a:	f7ed fcdc 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f33e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f342:	4619      	mov	r1, r3
 801f344:	4620      	mov	r0, r4
 801f346:	f7ee f89a 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f34a:	4603      	mov	r3, r0
 801f34c:	461c      	mov	r4, r3
 801f34e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f352:	4618      	mov	r0, r3
 801f354:	f7ee f887 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f358:	2c00      	cmp	r4, #0
 801f35a:	d007      	beq.n	801f36c <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801f35c:	683b      	ldr	r3, [r7, #0]
 801f35e:	699a      	ldr	r2, [r3, #24]
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	4611      	mov	r1, r2
 801f364:	4618      	mov	r0, r3
 801f366:	f7ee fb93 	bl	800da90 <_Z10StringFromPFvvE>
 801f36a:	e080      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801f36c:	683b      	ldr	r3, [r7, #0]
 801f36e:	f103 040c 	add.w	r4, r3, #12
 801f372:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f376:	4941      	ldr	r1, [pc, #260]	; (801f47c <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801f378:	4618      	mov	r0, r3
 801f37a:	f7ed fcbc 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f37e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f382:	4619      	mov	r1, r3
 801f384:	4620      	mov	r0, r4
 801f386:	f7ee f87a 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f38a:	4603      	mov	r3, r0
 801f38c:	461c      	mov	r4, r3
 801f38e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f392:	4618      	mov	r0, r3
 801f394:	f7ee f867 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f398:	2c00      	cmp	r4, #0
 801f39a:	d007      	beq.n	801f3ac <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801f39c:	683b      	ldr	r3, [r7, #0]
 801f39e:	699a      	ldr	r2, [r3, #24]
 801f3a0:	687b      	ldr	r3, [r7, #4]
 801f3a2:	4611      	mov	r1, r2
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	f7ee fb49 	bl	800da3c <_Z10StringFromPKv>
 801f3aa:	e060      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801f3ac:	683b      	ldr	r3, [r7, #0]
 801f3ae:	f103 040c 	add.w	r4, r3, #12
 801f3b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f3b6:	4932      	ldr	r1, [pc, #200]	; (801f480 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801f3b8:	4618      	mov	r0, r3
 801f3ba:	f7ed fc9c 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f3be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f3c2:	4619      	mov	r1, r3
 801f3c4:	4620      	mov	r0, r4
 801f3c6:	f7ee f85a 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f3ca:	4603      	mov	r3, r0
 801f3cc:	461c      	mov	r4, r3
 801f3ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f3d2:	4618      	mov	r0, r3
 801f3d4:	f7ee f847 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f3d8:	2c00      	cmp	r4, #0
 801f3da:	d00c      	beq.n	801f3f6 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801f3dc:	683b      	ldr	r3, [r7, #0]
 801f3de:	ed93 7b06 	vldr	d7, [r3, #24]
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	2106      	movs	r1, #6
 801f3e6:	eeb0 0a47 	vmov.f32	s0, s14
 801f3ea:	eef0 0a67 	vmov.f32	s1, s15
 801f3ee:	4618      	mov	r0, r3
 801f3f0:	f7ee fcfe 	bl	800ddf0 <_Z10StringFromdi>
 801f3f4:	e03b      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801f3f6:	683b      	ldr	r3, [r7, #0]
 801f3f8:	f103 040c 	add.w	r4, r3, #12
 801f3fc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f400:	4920      	ldr	r1, [pc, #128]	; (801f484 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801f402:	4618      	mov	r0, r3
 801f404:	f7ed fc77 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f408:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f40c:	4619      	mov	r1, r3
 801f40e:	4620      	mov	r0, r4
 801f410:	f7ee f835 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f414:	4603      	mov	r3, r0
 801f416:	461c      	mov	r4, r3
 801f418:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f41c:	4618      	mov	r0, r3
 801f41e:	f7ee f822 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f422:	2c00      	cmp	r4, #0
 801f424:	d008      	beq.n	801f438 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801f426:	683b      	ldr	r3, [r7, #0]
 801f428:	6999      	ldr	r1, [r3, #24]
 801f42a:	683b      	ldr	r3, [r7, #0]
 801f42c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f42e:	687b      	ldr	r3, [r7, #4]
 801f430:	4618      	mov	r0, r3
 801f432:	f7ee fe71 	bl	800e118 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801f436:	e01a      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801f438:	683b      	ldr	r3, [r7, #0]
 801f43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f43c:	2b00      	cmp	r3, #0
 801f43e:	d00b      	beq.n	801f458 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801f440:	683b      	ldr	r3, [r7, #0]
 801f442:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801f444:	683b      	ldr	r3, [r7, #0]
 801f446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	330c      	adds	r3, #12
 801f44c:	681b      	ldr	r3, [r3, #0]
 801f44e:	683a      	ldr	r2, [r7, #0]
 801f450:	6992      	ldr	r2, [r2, #24]
 801f452:	6878      	ldr	r0, [r7, #4]
 801f454:	4798      	blx	r3
 801f456:	e00a      	b.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801f458:	683b      	ldr	r3, [r7, #0]
 801f45a:	330c      	adds	r3, #12
 801f45c:	4618      	mov	r0, r3
 801f45e:	f7ed ffd5 	bl	800d40c <_ZNK12SimpleString12asCharStringEv>
 801f462:	4602      	mov	r2, r0
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	4908      	ldr	r1, [pc, #32]	; (801f488 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801f468:	4618      	mov	r0, r3
 801f46a:	f7ee fd03 	bl	800de74 <_Z16StringFromFormatPKcz>

}
 801f46e:	6878      	ldr	r0, [r7, #4]
 801f470:	37e4      	adds	r7, #228	; 0xe4
 801f472:	46bd      	mov	sp, r7
 801f474:	bd90      	pop	{r4, r7, pc}
 801f476:	bf00      	nop
 801f478:	0802688c 	.word	0x0802688c
 801f47c:	08026880 	.word	0x08026880
 801f480:	08026870 	.word	0x08026870
 801f484:	080268a4 	.word	0x080268a4
 801f488:	080268c0 	.word	0x080268c0

0801f48c <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801f48c:	b480      	push	{r7}
 801f48e:	b083      	sub	sp, #12
 801f490:	af00      	add	r7, sp, #0
 801f492:	6078      	str	r0, [r7, #4]
 801f494:	6039      	str	r1, [r7, #0]
    next_ = node;
 801f496:	687b      	ldr	r3, [r7, #4]
 801f498:	683a      	ldr	r2, [r7, #0]
 801f49a:	605a      	str	r2, [r3, #4]
}
 801f49c:	bf00      	nop
 801f49e:	370c      	adds	r7, #12
 801f4a0:	46bd      	mov	sp, r7
 801f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4a6:	4770      	bx	lr

0801f4a8 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801f4a8:	b480      	push	{r7}
 801f4aa:	b083      	sub	sp, #12
 801f4ac:	af00      	add	r7, sp, #0
 801f4ae:	6078      	str	r0, [r7, #4]
    return next_;
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	685b      	ldr	r3, [r3, #4]
}
 801f4b4:	4618      	mov	r0, r3
 801f4b6:	370c      	adds	r7, #12
 801f4b8:	46bd      	mov	sp, r7
 801f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4be:	4770      	bx	lr

0801f4c0 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801f4c0:	b480      	push	{r7}
 801f4c2:	b083      	sub	sp, #12
 801f4c4:	af00      	add	r7, sp, #0
 801f4c6:	6078      	str	r0, [r7, #4]
    return data_;
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	681b      	ldr	r3, [r3, #0]
}
 801f4cc:	4618      	mov	r0, r3
 801f4ce:	370c      	adds	r7, #12
 801f4d0:	46bd      	mov	sp, r7
 801f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4d6:	4770      	bx	lr

0801f4d8 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801f4d8:	b580      	push	{r7, lr}
 801f4da:	b082      	sub	sp, #8
 801f4dc:	af00      	add	r7, sp, #0
 801f4de:	6078      	str	r0, [r7, #4]
    delete data_;
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	681b      	ldr	r3, [r3, #0]
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	d004      	beq.n	801f4f2 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801f4e8:	681a      	ldr	r2, [r3, #0]
 801f4ea:	3204      	adds	r2, #4
 801f4ec:	6812      	ldr	r2, [r2, #0]
 801f4ee:	4618      	mov	r0, r3
 801f4f0:	4790      	blx	r2
}
 801f4f2:	bf00      	nop
 801f4f4:	3708      	adds	r7, #8
 801f4f6:	46bd      	mov	sp, r7
 801f4f8:	bd80      	pop	{r7, pc}

0801f4fa <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801f4fa:	b480      	push	{r7}
 801f4fc:	b083      	sub	sp, #12
 801f4fe:	af00      	add	r7, sp, #0
 801f500:	6078      	str	r0, [r7, #4]
 801f502:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	683a      	ldr	r2, [r7, #0]
 801f508:	601a      	str	r2, [r3, #0]
 801f50a:	687b      	ldr	r3, [r7, #4]
 801f50c:	2200      	movs	r2, #0
 801f50e:	605a      	str	r2, [r3, #4]
{
}
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	4618      	mov	r0, r3
 801f514:	370c      	adds	r7, #12
 801f516:	46bd      	mov	sp, r7
 801f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f51c:	4770      	bx	lr

0801f51e <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801f51e:	b580      	push	{r7, lr}
 801f520:	b082      	sub	sp, #8
 801f522:	af00      	add	r7, sp, #0
 801f524:	6078      	str	r0, [r7, #4]
 801f526:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801f528:	683b      	ldr	r3, [r7, #0]
 801f52a:	6819      	ldr	r1, [r3, #0]
 801f52c:	683b      	ldr	r3, [r7, #0]
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	335c      	adds	r3, #92	; 0x5c
 801f534:	681b      	ldr	r3, [r3, #0]
 801f536:	687a      	ldr	r2, [r7, #4]
 801f538:	4610      	mov	r0, r2
 801f53a:	4798      	blx	r3
}
 801f53c:	6878      	ldr	r0, [r7, #4]
 801f53e:	3708      	adds	r7, #8
 801f540:	46bd      	mov	sp, r7
 801f542:	bd80      	pop	{r7, pc}

0801f544 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801f544:	b580      	push	{r7, lr}
 801f546:	b082      	sub	sp, #8
 801f548:	af00      	add	r7, sp, #0
 801f54a:	6078      	str	r0, [r7, #4]
 801f54c:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801f54e:	683b      	ldr	r3, [r7, #0]
 801f550:	6819      	ldr	r1, [r3, #0]
 801f552:	683b      	ldr	r3, [r7, #0]
 801f554:	681b      	ldr	r3, [r3, #0]
 801f556:	681b      	ldr	r3, [r3, #0]
 801f558:	3360      	adds	r3, #96	; 0x60
 801f55a:	681b      	ldr	r3, [r3, #0]
 801f55c:	687a      	ldr	r2, [r7, #4]
 801f55e:	4610      	mov	r0, r2
 801f560:	4798      	blx	r3
}
 801f562:	6878      	ldr	r0, [r7, #4]
 801f564:	3708      	adds	r7, #8
 801f566:	46bd      	mov	sp, r7
 801f568:	bd80      	pop	{r7, pc}

0801f56a <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801f56a:	b480      	push	{r7}
 801f56c:	b083      	sub	sp, #12
 801f56e:	af00      	add	r7, sp, #0
 801f570:	6078      	str	r0, [r7, #4]
 801f572:	687b      	ldr	r3, [r7, #4]
 801f574:	2200      	movs	r2, #0
 801f576:	601a      	str	r2, [r3, #0]
{
}
 801f578:	687b      	ldr	r3, [r7, #4]
 801f57a:	4618      	mov	r0, r3
 801f57c:	370c      	adds	r7, #12
 801f57e:	46bd      	mov	sp, r7
 801f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f584:	4770      	bx	lr

0801f586 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801f586:	b580      	push	{r7, lr}
 801f588:	b084      	sub	sp, #16
 801f58a:	af00      	add	r7, sp, #0
 801f58c:	6078      	str	r0, [r7, #4]
    while (head_) {
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	681b      	ldr	r3, [r3, #0]
 801f592:	2b00      	cmp	r3, #0
 801f594:	d016      	beq.n	801f5c4 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	681b      	ldr	r3, [r3, #0]
 801f59a:	4618      	mov	r0, r3
 801f59c:	f7ff ff84 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801f5a0:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	4618      	mov	r0, r3
 801f5a8:	f7ff ff96 	bl	801f4d8 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801f5ac:	687b      	ldr	r3, [r7, #4]
 801f5ae:	681b      	ldr	r3, [r3, #0]
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d003      	beq.n	801f5bc <_ZN18MockNamedValueList5clearEv+0x36>
 801f5b4:	2108      	movs	r1, #8
 801f5b6:	4618      	mov	r0, r3
 801f5b8:	f7ea ffee 	bl	800a598 <_ZdlPvj>
        head_ = n;
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	68fa      	ldr	r2, [r7, #12]
 801f5c0:	601a      	str	r2, [r3, #0]
    while (head_) {
 801f5c2:	e7e4      	b.n	801f58e <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801f5c4:	bf00      	nop
 801f5c6:	3710      	adds	r7, #16
 801f5c8:	46bd      	mov	sp, r7
 801f5ca:	bd80      	pop	{r7, pc}

0801f5cc <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801f5cc:	b590      	push	{r4, r7, lr}
 801f5ce:	b085      	sub	sp, #20
 801f5d0:	af00      	add	r7, sp, #0
 801f5d2:	6078      	str	r0, [r7, #4]
 801f5d4:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801f5d6:	f44f 7210 	mov.w	r2, #576	; 0x240
 801f5da:	4916      	ldr	r1, [pc, #88]	; (801f634 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801f5dc:	2008      	movs	r0, #8
 801f5de:	f7ea ffc7 	bl	800a570 <_ZnwjPKci>
 801f5e2:	4604      	mov	r4, r0
 801f5e4:	6839      	ldr	r1, [r7, #0]
 801f5e6:	4620      	mov	r0, r4
 801f5e8:	f7ff ff87 	bl	801f4fa <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801f5ec:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	681b      	ldr	r3, [r3, #0]
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	d103      	bne.n	801f5fe <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	68ba      	ldr	r2, [r7, #8]
 801f5fa:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801f5fc:	e016      	b.n	801f62c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	681b      	ldr	r3, [r3, #0]
 801f602:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801f604:	68f8      	ldr	r0, [r7, #12]
 801f606:	f7ff ff4f 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801f60a:	4603      	mov	r3, r0
 801f60c:	2b00      	cmp	r3, #0
 801f60e:	bf14      	ite	ne
 801f610:	2301      	movne	r3, #1
 801f612:	2300      	moveq	r3, #0
 801f614:	b2db      	uxtb	r3, r3
 801f616:	2b00      	cmp	r3, #0
 801f618:	d004      	beq.n	801f624 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801f61a:	68f8      	ldr	r0, [r7, #12]
 801f61c:	f7ff ff44 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801f620:	60f8      	str	r0, [r7, #12]
 801f622:	e7ef      	b.n	801f604 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801f624:	68b9      	ldr	r1, [r7, #8]
 801f626:	68f8      	ldr	r0, [r7, #12]
 801f628:	f7ff ff30 	bl	801f48c <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801f62c:	bf00      	nop
 801f62e:	3714      	adds	r7, #20
 801f630:	46bd      	mov	sp, r7
 801f632:	bd90      	pop	{r4, r7, pc}
 801f634:	08026808 	.word	0x08026808

0801f638 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801f638:	b590      	push	{r4, r7, lr}
 801f63a:	b087      	sub	sp, #28
 801f63c:	af00      	add	r7, sp, #0
 801f63e:	6078      	str	r0, [r7, #4]
 801f640:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	681b      	ldr	r3, [r3, #0]
 801f646:	617b      	str	r3, [r7, #20]
 801f648:	697b      	ldr	r3, [r7, #20]
 801f64a:	2b00      	cmp	r3, #0
 801f64c:	d01e      	beq.n	801f68c <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801f64e:	f107 030c 	add.w	r3, r7, #12
 801f652:	6979      	ldr	r1, [r7, #20]
 801f654:	4618      	mov	r0, r3
 801f656:	f7ff ff62 	bl	801f51e <_ZNK22MockNamedValueListNode7getNameEv>
 801f65a:	f107 030c 	add.w	r3, r7, #12
 801f65e:	6839      	ldr	r1, [r7, #0]
 801f660:	4618      	mov	r0, r3
 801f662:	f7ed ff0c 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f666:	4603      	mov	r3, r0
 801f668:	461c      	mov	r4, r3
 801f66a:	f107 030c 	add.w	r3, r7, #12
 801f66e:	4618      	mov	r0, r3
 801f670:	f7ed fef9 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f674:	2c00      	cmp	r4, #0
 801f676:	d004      	beq.n	801f682 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801f678:	6978      	ldr	r0, [r7, #20]
 801f67a:	f7ff ff21 	bl	801f4c0 <_ZN22MockNamedValueListNode4itemEv>
 801f67e:	4603      	mov	r3, r0
 801f680:	e005      	b.n	801f68e <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801f682:	6978      	ldr	r0, [r7, #20]
 801f684:	f7ff ff10 	bl	801f4a8 <_ZN22MockNamedValueListNode4nextEv>
 801f688:	6178      	str	r0, [r7, #20]
 801f68a:	e7dd      	b.n	801f648 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801f68c:	2300      	movs	r3, #0
}
 801f68e:	4618      	mov	r0, r3
 801f690:	371c      	adds	r7, #28
 801f692:	46bd      	mov	sp, r7
 801f694:	bd90      	pop	{r4, r7, pc}

0801f696 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801f696:	b480      	push	{r7}
 801f698:	b083      	sub	sp, #12
 801f69a:	af00      	add	r7, sp, #0
 801f69c:	6078      	str	r0, [r7, #4]
    return head_;
 801f69e:	687b      	ldr	r3, [r7, #4]
 801f6a0:	681b      	ldr	r3, [r3, #0]
}
 801f6a2:	4618      	mov	r0, r3
 801f6a4:	370c      	adds	r7, #12
 801f6a6:	46bd      	mov	sp, r7
 801f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6ac:	4770      	bx	lr

0801f6ae <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f6ae:	b580      	push	{r7, lr}
 801f6b0:	b084      	sub	sp, #16
 801f6b2:	af00      	add	r7, sp, #0
 801f6b4:	60f8      	str	r0, [r7, #12]
 801f6b6:	60b9      	str	r1, [r7, #8]
 801f6b8:	607a      	str	r2, [r7, #4]
 801f6ba:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801f6bc:	68fb      	ldr	r3, [r7, #12]
 801f6be:	68b9      	ldr	r1, [r7, #8]
 801f6c0:	4618      	mov	r0, r3
 801f6c2:	f7ed fb6c 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 801f6c6:	68fb      	ldr	r3, [r7, #12]
 801f6c8:	687a      	ldr	r2, [r7, #4]
 801f6ca:	609a      	str	r2, [r3, #8]
 801f6cc:	68fb      	ldr	r3, [r7, #12]
 801f6ce:	2200      	movs	r2, #0
 801f6d0:	60da      	str	r2, [r3, #12]
 801f6d2:	68fb      	ldr	r3, [r7, #12]
 801f6d4:	683a      	ldr	r2, [r7, #0]
 801f6d6:	611a      	str	r2, [r3, #16]
 801f6d8:	68fb      	ldr	r3, [r7, #12]
 801f6da:	4618      	mov	r0, r3
 801f6dc:	3710      	adds	r7, #16
 801f6de:	46bd      	mov	sp, r7
 801f6e0:	bd80      	pop	{r7, pc}

0801f6e2 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f6e2:	b580      	push	{r7, lr}
 801f6e4:	b084      	sub	sp, #16
 801f6e6:	af00      	add	r7, sp, #0
 801f6e8:	60f8      	str	r0, [r7, #12]
 801f6ea:	60b9      	str	r1, [r7, #8]
 801f6ec:	607a      	str	r2, [r7, #4]
 801f6ee:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801f6f0:	68fb      	ldr	r3, [r7, #12]
 801f6f2:	68b9      	ldr	r1, [r7, #8]
 801f6f4:	4618      	mov	r0, r3
 801f6f6:	f7ed fb52 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 801f6fa:	68fb      	ldr	r3, [r7, #12]
 801f6fc:	2200      	movs	r2, #0
 801f6fe:	609a      	str	r2, [r3, #8]
 801f700:	68fb      	ldr	r3, [r7, #12]
 801f702:	687a      	ldr	r2, [r7, #4]
 801f704:	60da      	str	r2, [r3, #12]
 801f706:	68fb      	ldr	r3, [r7, #12]
 801f708:	683a      	ldr	r2, [r7, #0]
 801f70a:	611a      	str	r2, [r3, #16]
 801f70c:	68fb      	ldr	r3, [r7, #12]
 801f70e:	4618      	mov	r0, r3
 801f710:	3710      	adds	r7, #16
 801f712:	46bd      	mov	sp, r7
 801f714:	bd80      	pop	{r7, pc}

0801f716 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f716:	b580      	push	{r7, lr}
 801f718:	b084      	sub	sp, #16
 801f71a:	af00      	add	r7, sp, #0
 801f71c:	60f8      	str	r0, [r7, #12]
 801f71e:	60b9      	str	r1, [r7, #8]
 801f720:	607a      	str	r2, [r7, #4]
 801f722:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801f724:	68fb      	ldr	r3, [r7, #12]
 801f726:	68b9      	ldr	r1, [r7, #8]
 801f728:	4618      	mov	r0, r3
 801f72a:	f7ed fb38 	bl	800cd9e <_ZN12SimpleStringC1ERKS_>
 801f72e:	68fb      	ldr	r3, [r7, #12]
 801f730:	687a      	ldr	r2, [r7, #4]
 801f732:	609a      	str	r2, [r3, #8]
 801f734:	68fb      	ldr	r3, [r7, #12]
 801f736:	683a      	ldr	r2, [r7, #0]
 801f738:	60da      	str	r2, [r3, #12]
 801f73a:	68fb      	ldr	r3, [r7, #12]
 801f73c:	69ba      	ldr	r2, [r7, #24]
 801f73e:	611a      	str	r2, [r3, #16]
 801f740:	68fb      	ldr	r3, [r7, #12]
 801f742:	4618      	mov	r0, r3
 801f744:	3710      	adds	r7, #16
 801f746:	46bd      	mov	sp, r7
 801f748:	bd80      	pop	{r7, pc}
	...

0801f74c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801f74c:	b480      	push	{r7}
 801f74e:	b083      	sub	sp, #12
 801f750:	af00      	add	r7, sp, #0
 801f752:	6078      	str	r0, [r7, #4]
 801f754:	4a06      	ldr	r2, [pc, #24]	; (801f770 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801f756:	687b      	ldr	r3, [r7, #4]
 801f758:	601a      	str	r2, [r3, #0]
 801f75a:	687b      	ldr	r3, [r7, #4]
 801f75c:	2200      	movs	r2, #0
 801f75e:	605a      	str	r2, [r3, #4]
{

}
 801f760:	687b      	ldr	r3, [r7, #4]
 801f762:	4618      	mov	r0, r3
 801f764:	370c      	adds	r7, #12
 801f766:	46bd      	mov	sp, r7
 801f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f76c:	4770      	bx	lr
 801f76e:	bf00      	nop
 801f770:	0802941c 	.word	0x0802941c

0801f774 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801f774:	b580      	push	{r7, lr}
 801f776:	b082      	sub	sp, #8
 801f778:	af00      	add	r7, sp, #0
 801f77a:	6078      	str	r0, [r7, #4]
 801f77c:	4a05      	ldr	r2, [pc, #20]	; (801f794 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801f77e:	687b      	ldr	r3, [r7, #4]
 801f780:	601a      	str	r2, [r3, #0]
{
    clear();
 801f782:	6878      	ldr	r0, [r7, #4]
 801f784:	f000 f825 	bl	801f7d2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801f788:	687b      	ldr	r3, [r7, #4]
 801f78a:	4618      	mov	r0, r3
 801f78c:	3708      	adds	r7, #8
 801f78e:	46bd      	mov	sp, r7
 801f790:	bd80      	pop	{r7, pc}
 801f792:	bf00      	nop
 801f794:	0802941c 	.word	0x0802941c

0801f798 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801f798:	b580      	push	{r7, lr}
 801f79a:	b082      	sub	sp, #8
 801f79c:	af00      	add	r7, sp, #0
 801f79e:	6078      	str	r0, [r7, #4]
}
 801f7a0:	6878      	ldr	r0, [r7, #4]
 801f7a2:	f7ff ffe7 	bl	801f774 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801f7a6:	2108      	movs	r1, #8
 801f7a8:	6878      	ldr	r0, [r7, #4]
 801f7aa:	f7ea fef5 	bl	800a598 <_ZdlPvj>
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	4618      	mov	r0, r3
 801f7b2:	3708      	adds	r7, #8
 801f7b4:	46bd      	mov	sp, r7
 801f7b6:	bd80      	pop	{r7, pc}

0801f7b8 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801f7b8:	b580      	push	{r7, lr}
 801f7ba:	b082      	sub	sp, #8
 801f7bc:	af00      	add	r7, sp, #0
 801f7be:	6078      	str	r0, [r7, #4]
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	4618      	mov	r0, r3
 801f7c4:	f7ed fe4f 	bl	800d466 <_ZN12SimpleStringD1Ev>
 801f7c8:	687b      	ldr	r3, [r7, #4]
 801f7ca:	4618      	mov	r0, r3
 801f7cc:	3708      	adds	r7, #8
 801f7ce:	46bd      	mov	sp, r7
 801f7d0:	bd80      	pop	{r7, pc}

0801f7d2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801f7d2:	b590      	push	{r4, r7, lr}
 801f7d4:	b085      	sub	sp, #20
 801f7d6:	af00      	add	r7, sp, #0
 801f7d8:	6078      	str	r0, [r7, #4]
    while (head_) {
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	685b      	ldr	r3, [r3, #4]
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d012      	beq.n	801f808 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	685b      	ldr	r3, [r3, #4]
 801f7e6:	691b      	ldr	r3, [r3, #16]
 801f7e8:	60fb      	str	r3, [r7, #12]
        delete head_;
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	685c      	ldr	r4, [r3, #4]
 801f7ee:	2c00      	cmp	r4, #0
 801f7f0:	d006      	beq.n	801f800 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801f7f2:	4620      	mov	r0, r4
 801f7f4:	f7ff ffe0 	bl	801f7b8 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801f7f8:	2114      	movs	r1, #20
 801f7fa:	4620      	mov	r0, r4
 801f7fc:	f7ea fecc 	bl	800a598 <_ZdlPvj>
        head_ = next;
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	68fa      	ldr	r2, [r7, #12]
 801f804:	605a      	str	r2, [r3, #4]
    while (head_) {
 801f806:	e7e8      	b.n	801f7da <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801f808:	bf00      	nop
 801f80a:	3714      	adds	r7, #20
 801f80c:	46bd      	mov	sp, r7
 801f80e:	bd90      	pop	{r4, r7, pc}

0801f810 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801f810:	b590      	push	{r4, r7, lr}
 801f812:	b085      	sub	sp, #20
 801f814:	af00      	add	r7, sp, #0
 801f816:	60f8      	str	r0, [r7, #12]
 801f818:	60b9      	str	r1, [r7, #8]
 801f81a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801f81c:	f240 227a 	movw	r2, #634	; 0x27a
 801f820:	4908      	ldr	r1, [pc, #32]	; (801f844 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801f822:	2014      	movs	r0, #20
 801f824:	f7ea fea4 	bl	800a570 <_ZnwjPKci>
 801f828:	4604      	mov	r4, r0
 801f82a:	68fb      	ldr	r3, [r7, #12]
 801f82c:	685b      	ldr	r3, [r3, #4]
 801f82e:	687a      	ldr	r2, [r7, #4]
 801f830:	68b9      	ldr	r1, [r7, #8]
 801f832:	4620      	mov	r0, r4
 801f834:	f7ff ff3b 	bl	801f6ae <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801f838:	68fb      	ldr	r3, [r7, #12]
 801f83a:	605c      	str	r4, [r3, #4]
}
 801f83c:	bf00      	nop
 801f83e:	3714      	adds	r7, #20
 801f840:	46bd      	mov	sp, r7
 801f842:	bd90      	pop	{r4, r7, pc}
 801f844:	08026808 	.word	0x08026808

0801f848 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801f848:	b590      	push	{r4, r7, lr}
 801f84a:	b085      	sub	sp, #20
 801f84c:	af00      	add	r7, sp, #0
 801f84e:	60f8      	str	r0, [r7, #12]
 801f850:	60b9      	str	r1, [r7, #8]
 801f852:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801f854:	f240 227f 	movw	r2, #639	; 0x27f
 801f858:	4908      	ldr	r1, [pc, #32]	; (801f87c <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801f85a:	2014      	movs	r0, #20
 801f85c:	f7ea fe88 	bl	800a570 <_ZnwjPKci>
 801f860:	4604      	mov	r4, r0
 801f862:	68fb      	ldr	r3, [r7, #12]
 801f864:	685b      	ldr	r3, [r3, #4]
 801f866:	687a      	ldr	r2, [r7, #4]
 801f868:	68b9      	ldr	r1, [r7, #8]
 801f86a:	4620      	mov	r0, r4
 801f86c:	f7ff ff39 	bl	801f6e2 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801f870:	68fb      	ldr	r3, [r7, #12]
 801f872:	605c      	str	r4, [r3, #4]
}
 801f874:	bf00      	nop
 801f876:	3714      	adds	r7, #20
 801f878:	46bd      	mov	sp, r7
 801f87a:	bd90      	pop	{r4, r7, pc}
 801f87c:	08026808 	.word	0x08026808

0801f880 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801f880:	b580      	push	{r7, lr}
 801f882:	b084      	sub	sp, #16
 801f884:	af00      	add	r7, sp, #0
 801f886:	6078      	str	r0, [r7, #4]
 801f888:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	685b      	ldr	r3, [r3, #4]
 801f88e:	60fb      	str	r3, [r7, #12]
 801f890:	68fb      	ldr	r3, [r7, #12]
 801f892:	2b00      	cmp	r3, #0
 801f894:	d017      	beq.n	801f8c6 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801f896:	68fb      	ldr	r3, [r7, #12]
 801f898:	6839      	ldr	r1, [r7, #0]
 801f89a:	4618      	mov	r0, r3
 801f89c:	f7ed fdef 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f8a0:	4603      	mov	r3, r0
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	d005      	beq.n	801f8b2 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f8a6:	68fb      	ldr	r3, [r7, #12]
 801f8a8:	689b      	ldr	r3, [r3, #8]
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	d001      	beq.n	801f8b2 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f8ae:	2301      	movs	r3, #1
 801f8b0:	e000      	b.n	801f8b4 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801f8b2:	2300      	movs	r3, #0
 801f8b4:	2b00      	cmp	r3, #0
 801f8b6:	d002      	beq.n	801f8be <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801f8b8:	68fb      	ldr	r3, [r7, #12]
 801f8ba:	689b      	ldr	r3, [r3, #8]
 801f8bc:	e004      	b.n	801f8c8 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f8be:	68fb      	ldr	r3, [r7, #12]
 801f8c0:	691b      	ldr	r3, [r3, #16]
 801f8c2:	60fb      	str	r3, [r7, #12]
 801f8c4:	e7e4      	b.n	801f890 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f8c6:	2300      	movs	r3, #0
}
 801f8c8:	4618      	mov	r0, r3
 801f8ca:	3710      	adds	r7, #16
 801f8cc:	46bd      	mov	sp, r7
 801f8ce:	bd80      	pop	{r7, pc}

0801f8d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801f8d0:	b580      	push	{r7, lr}
 801f8d2:	b084      	sub	sp, #16
 801f8d4:	af00      	add	r7, sp, #0
 801f8d6:	6078      	str	r0, [r7, #4]
 801f8d8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	685b      	ldr	r3, [r3, #4]
 801f8de:	60fb      	str	r3, [r7, #12]
 801f8e0:	68fb      	ldr	r3, [r7, #12]
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d017      	beq.n	801f916 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801f8e6:	68fb      	ldr	r3, [r7, #12]
 801f8e8:	6839      	ldr	r1, [r7, #0]
 801f8ea:	4618      	mov	r0, r3
 801f8ec:	f7ed fdc7 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801f8f0:	4603      	mov	r3, r0
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d005      	beq.n	801f902 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f8f6:	68fb      	ldr	r3, [r7, #12]
 801f8f8:	68db      	ldr	r3, [r3, #12]
 801f8fa:	2b00      	cmp	r3, #0
 801f8fc:	d001      	beq.n	801f902 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f8fe:	2301      	movs	r3, #1
 801f900:	e000      	b.n	801f904 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801f902:	2300      	movs	r3, #0
 801f904:	2b00      	cmp	r3, #0
 801f906:	d002      	beq.n	801f90e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801f908:	68fb      	ldr	r3, [r7, #12]
 801f90a:	68db      	ldr	r3, [r3, #12]
 801f90c:	e004      	b.n	801f918 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f90e:	68fb      	ldr	r3, [r7, #12]
 801f910:	691b      	ldr	r3, [r3, #16]
 801f912:	60fb      	str	r3, [r7, #12]
 801f914:	e7e4      	b.n	801f8e0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f916:	2300      	movs	r3, #0
}
 801f918:	4618      	mov	r0, r3
 801f91a:	3710      	adds	r7, #16
 801f91c:	46bd      	mov	sp, r7
 801f91e:	bd80      	pop	{r7, pc}

0801f920 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801f920:	b590      	push	{r4, r7, lr}
 801f922:	b087      	sub	sp, #28
 801f924:	af02      	add	r7, sp, #8
 801f926:	6078      	str	r0, [r7, #4]
 801f928:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f92a:	683b      	ldr	r3, [r7, #0]
 801f92c:	685b      	ldr	r3, [r3, #4]
 801f92e:	60fb      	str	r3, [r7, #12]
 801f930:	68fb      	ldr	r3, [r7, #12]
 801f932:	2b00      	cmp	r3, #0
 801f934:	d018      	beq.n	801f968 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801f936:	f240 2293 	movw	r2, #659	; 0x293
 801f93a:	490d      	ldr	r1, [pc, #52]	; (801f970 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801f93c:	2014      	movs	r0, #20
 801f93e:	f7ea fe17 	bl	800a570 <_ZnwjPKci>
 801f942:	4604      	mov	r4, r0
 801f944:	68f9      	ldr	r1, [r7, #12]
 801f946:	68fb      	ldr	r3, [r7, #12]
 801f948:	689a      	ldr	r2, [r3, #8]
 801f94a:	68fb      	ldr	r3, [r7, #12]
 801f94c:	68d8      	ldr	r0, [r3, #12]
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	685b      	ldr	r3, [r3, #4]
 801f952:	9300      	str	r3, [sp, #0]
 801f954:	4603      	mov	r3, r0
 801f956:	4620      	mov	r0, r4
 801f958:	f7ff fedd 	bl	801f716 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f960:	68fb      	ldr	r3, [r7, #12]
 801f962:	691b      	ldr	r3, [r3, #16]
 801f964:	60fb      	str	r3, [r7, #12]
 801f966:	e7e3      	b.n	801f930 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801f968:	bf00      	nop
 801f96a:	3714      	adds	r7, #20
 801f96c:	46bd      	mov	sp, r7
 801f96e:	bd90      	pop	{r4, r7, pc}
 801f970:	08026808 	.word	0x08026808

0801f974 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801f974:	b580      	push	{r7, lr}
 801f976:	b082      	sub	sp, #8
 801f978:	af00      	add	r7, sp, #0
 801f97a:	6078      	str	r0, [r7, #4]
 801f97c:	6039      	str	r1, [r7, #0]
 801f97e:	687b      	ldr	r3, [r7, #4]
 801f980:	490b      	ldr	r1, [pc, #44]	; (801f9b0 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801f982:	4618      	mov	r0, r3
 801f984:	f7ed f9b7 	bl	800ccf6 <_ZN12SimpleStringC1EPKc>
 801f988:	687b      	ldr	r3, [r7, #4]
 801f98a:	2200      	movs	r2, #0
 801f98c:	721a      	strb	r2, [r3, #8]
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	2200      	movs	r2, #0
 801f992:	725a      	strb	r2, [r3, #9]
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	2200      	movs	r2, #0
 801f998:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801f99a:	687b      	ldr	r3, [r7, #4]
 801f99c:	6839      	ldr	r1, [r7, #0]
 801f99e:	4618      	mov	r0, r3
 801f9a0:	f7ed fa15 	bl	800cdce <_ZN12SimpleStringaSERKS_>
}
 801f9a4:	687b      	ldr	r3, [r7, #4]
 801f9a6:	4618      	mov	r0, r3
 801f9a8:	3708      	adds	r7, #8
 801f9aa:	46bd      	mov	sp, r7
 801f9ac:	bd80      	pop	{r7, pc}
 801f9ae:	bf00      	nop
 801f9b0:	080268e4 	.word	0x080268e4

0801f9b4 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801f9b4:	b480      	push	{r7}
 801f9b6:	b083      	sub	sp, #12
 801f9b8:	af00      	add	r7, sp, #0
 801f9ba:	6078      	str	r0, [r7, #4]
 801f9bc:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	683a      	ldr	r2, [r7, #0]
 801f9c2:	60da      	str	r2, [r3, #12]
    return this;
 801f9c4:	687b      	ldr	r3, [r7, #4]
}
 801f9c6:	4618      	mov	r0, r3
 801f9c8:	370c      	adds	r7, #12
 801f9ca:	46bd      	mov	sp, r7
 801f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9d0:	4770      	bx	lr

0801f9d2 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801f9d2:	b480      	push	{r7}
 801f9d4:	b083      	sub	sp, #12
 801f9d6:	af00      	add	r7, sp, #0
 801f9d8:	6078      	str	r0, [r7, #4]
    return next_;
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	68db      	ldr	r3, [r3, #12]
}
 801f9de:	4618      	mov	r0, r3
 801f9e0:	370c      	adds	r7, #12
 801f9e2:	46bd      	mov	sp, r7
 801f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9e8:	4770      	bx	lr

0801f9ea <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801f9ea:	b480      	push	{r7}
 801f9ec:	b083      	sub	sp, #12
 801f9ee:	af00      	add	r7, sp, #0
 801f9f0:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801f9f2:	687b      	ldr	r3, [r7, #4]
 801f9f4:	2201      	movs	r2, #1
 801f9f6:	721a      	strb	r2, [r3, #8]
}
 801f9f8:	bf00      	nop
 801f9fa:	370c      	adds	r7, #12
 801f9fc:	46bd      	mov	sp, r7
 801f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa02:	4770      	bx	lr

0801fa04 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801fa04:	b480      	push	{r7}
 801fa06:	b083      	sub	sp, #12
 801fa08:	af00      	add	r7, sp, #0
 801fa0a:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	2201      	movs	r2, #1
 801fa10:	725a      	strb	r2, [r3, #9]
}
 801fa12:	bf00      	nop
 801fa14:	370c      	adds	r7, #12
 801fa16:	46bd      	mov	sp, r7
 801fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa1c:	4770      	bx	lr

0801fa1e <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801fa1e:	b580      	push	{r7, lr}
 801fa20:	b084      	sub	sp, #16
 801fa22:	af00      	add	r7, sp, #0
 801fa24:	6078      	str	r0, [r7, #4]
 801fa26:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801fa28:	2300      	movs	r3, #0
 801fa2a:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801fa2c:	687b      	ldr	r3, [r7, #4]
 801fa2e:	7a1b      	ldrb	r3, [r3, #8]
 801fa30:	2b00      	cmp	r3, #0
 801fa32:	d007      	beq.n	801fa44 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801fa34:	687b      	ldr	r3, [r7, #4]
 801fa36:	4619      	mov	r1, r3
 801fa38:	6838      	ldr	r0, [r7, #0]
 801fa3a:	f7ed fd20 	bl	800d47e <_ZeqRK12SimpleStringS1_>
 801fa3e:	4603      	mov	r3, r0
 801fa40:	73fb      	strb	r3, [r7, #15]
 801fa42:	e006      	b.n	801fa52 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801fa44:	687b      	ldr	r3, [r7, #4]
 801fa46:	4619      	mov	r1, r3
 801fa48:	6838      	ldr	r0, [r7, #0]
 801fa4a:	f7ed f9d2 	bl	800cdf2 <_ZNK12SimpleString8containsERKS_>
 801fa4e:	4603      	mov	r3, r0
 801fa50:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801fa52:	687b      	ldr	r3, [r7, #4]
 801fa54:	7a5b      	ldrb	r3, [r3, #9]
 801fa56:	2b00      	cmp	r3, #0
 801fa58:	d004      	beq.n	801fa64 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801fa5a:	7bfb      	ldrb	r3, [r7, #15]
 801fa5c:	f083 0301 	eor.w	r3, r3, #1
 801fa60:	b2db      	uxtb	r3, r3
 801fa62:	e005      	b.n	801fa70 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801fa64:	7bfb      	ldrb	r3, [r7, #15]
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	bf14      	ite	ne
 801fa6a:	2301      	movne	r3, #1
 801fa6c:	2300      	moveq	r3, #0
 801fa6e:	b2db      	uxtb	r3, r3
}
 801fa70:	4618      	mov	r0, r3
 801fa72:	3710      	adds	r7, #16
 801fa74:	46bd      	mov	sp, r7
 801fa76:	bd80      	pop	{r7, pc}

0801fa78 <__cxa_guard_acquire>:
 801fa78:	6803      	ldr	r3, [r0, #0]
 801fa7a:	07db      	lsls	r3, r3, #31
 801fa7c:	d406      	bmi.n	801fa8c <__cxa_guard_acquire+0x14>
 801fa7e:	7843      	ldrb	r3, [r0, #1]
 801fa80:	b103      	cbz	r3, 801fa84 <__cxa_guard_acquire+0xc>
 801fa82:	deff      	udf	#255	; 0xff
 801fa84:	2301      	movs	r3, #1
 801fa86:	7043      	strb	r3, [r0, #1]
 801fa88:	4618      	mov	r0, r3
 801fa8a:	4770      	bx	lr
 801fa8c:	2000      	movs	r0, #0
 801fa8e:	4770      	bx	lr

0801fa90 <__cxa_guard_release>:
 801fa90:	2301      	movs	r3, #1
 801fa92:	6003      	str	r3, [r0, #0]
 801fa94:	4770      	bx	lr

0801fa96 <__cxa_pure_virtual>:
 801fa96:	b508      	push	{r3, lr}
 801fa98:	f000 f80c 	bl	801fab4 <_ZSt9terminatev>

0801fa9c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801fa9c:	b508      	push	{r3, lr}
 801fa9e:	4780      	blx	r0
 801faa0:	f000 f816 	bl	801fad0 <abort>

0801faa4 <_ZSt13get_terminatev>:
 801faa4:	4b02      	ldr	r3, [pc, #8]	; (801fab0 <_ZSt13get_terminatev+0xc>)
 801faa6:	6818      	ldr	r0, [r3, #0]
 801faa8:	f3bf 8f5b 	dmb	ish
 801faac:	4770      	bx	lr
 801faae:	bf00      	nop
 801fab0:	20000104 	.word	0x20000104

0801fab4 <_ZSt9terminatev>:
 801fab4:	b508      	push	{r3, lr}
 801fab6:	f7ff fff5 	bl	801faa4 <_ZSt13get_terminatev>
 801faba:	f7ff ffef 	bl	801fa9c <_ZN10__cxxabiv111__terminateEPFvvE>

0801fabe <fabs>:
 801fabe:	ec51 0b10 	vmov	r0, r1, d0
 801fac2:	ee10 2a10 	vmov	r2, s0
 801fac6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801faca:	ec43 2b10 	vmov	d0, r2, r3
 801face:	4770      	bx	lr

0801fad0 <abort>:
 801fad0:	b508      	push	{r3, lr}
 801fad2:	2006      	movs	r0, #6
 801fad4:	f000 ff8c 	bl	80209f0 <raise>
 801fad8:	2001      	movs	r0, #1
 801fada:	f7e1 f952 	bl	8000d82 <_exit>

0801fade <atexit>:
 801fade:	2300      	movs	r3, #0
 801fae0:	4601      	mov	r1, r0
 801fae2:	461a      	mov	r2, r3
 801fae4:	4618      	mov	r0, r3
 801fae6:	f002 b9d3 	b.w	8021e90 <__register_exitproc>

0801faea <atoi>:
 801faea:	220a      	movs	r2, #10
 801faec:	2100      	movs	r1, #0
 801faee:	f001 bdfb 	b.w	80216e8 <strtol>
	...

0801faf4 <calloc>:
 801faf4:	4b02      	ldr	r3, [pc, #8]	; (801fb00 <calloc+0xc>)
 801faf6:	460a      	mov	r2, r1
 801faf8:	4601      	mov	r1, r0
 801fafa:	6818      	ldr	r0, [r3, #0]
 801fafc:	f000 bde8 	b.w	80206d0 <_calloc_r>
 801fb00:	20000108 	.word	0x20000108

0801fb04 <__errno>:
 801fb04:	4b01      	ldr	r3, [pc, #4]	; (801fb0c <__errno+0x8>)
 801fb06:	6818      	ldr	r0, [r3, #0]
 801fb08:	4770      	bx	lr
 801fb0a:	bf00      	nop
 801fb0c:	20000108 	.word	0x20000108

0801fb10 <_fclose_r>:
 801fb10:	b570      	push	{r4, r5, r6, lr}
 801fb12:	4605      	mov	r5, r0
 801fb14:	460c      	mov	r4, r1
 801fb16:	b911      	cbnz	r1, 801fb1e <_fclose_r+0xe>
 801fb18:	2600      	movs	r6, #0
 801fb1a:	4630      	mov	r0, r6
 801fb1c:	bd70      	pop	{r4, r5, r6, pc}
 801fb1e:	b118      	cbz	r0, 801fb28 <_fclose_r+0x18>
 801fb20:	6983      	ldr	r3, [r0, #24]
 801fb22:	b90b      	cbnz	r3, 801fb28 <_fclose_r+0x18>
 801fb24:	f000 f994 	bl	801fe50 <__sinit>
 801fb28:	4b2c      	ldr	r3, [pc, #176]	; (801fbdc <_fclose_r+0xcc>)
 801fb2a:	429c      	cmp	r4, r3
 801fb2c:	d114      	bne.n	801fb58 <_fclose_r+0x48>
 801fb2e:	686c      	ldr	r4, [r5, #4]
 801fb30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb32:	07d8      	lsls	r0, r3, #31
 801fb34:	d405      	bmi.n	801fb42 <_fclose_r+0x32>
 801fb36:	89a3      	ldrh	r3, [r4, #12]
 801fb38:	0599      	lsls	r1, r3, #22
 801fb3a:	d402      	bmi.n	801fb42 <_fclose_r+0x32>
 801fb3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb3e:	f000 fd3a 	bl	80205b6 <__retarget_lock_acquire_recursive>
 801fb42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb46:	b98b      	cbnz	r3, 801fb6c <_fclose_r+0x5c>
 801fb48:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801fb4a:	f016 0601 	ands.w	r6, r6, #1
 801fb4e:	d1e3      	bne.n	801fb18 <_fclose_r+0x8>
 801fb50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb52:	f000 fd32 	bl	80205ba <__retarget_lock_release_recursive>
 801fb56:	e7e0      	b.n	801fb1a <_fclose_r+0xa>
 801fb58:	4b21      	ldr	r3, [pc, #132]	; (801fbe0 <_fclose_r+0xd0>)
 801fb5a:	429c      	cmp	r4, r3
 801fb5c:	d101      	bne.n	801fb62 <_fclose_r+0x52>
 801fb5e:	68ac      	ldr	r4, [r5, #8]
 801fb60:	e7e6      	b.n	801fb30 <_fclose_r+0x20>
 801fb62:	4b20      	ldr	r3, [pc, #128]	; (801fbe4 <_fclose_r+0xd4>)
 801fb64:	429c      	cmp	r4, r3
 801fb66:	bf08      	it	eq
 801fb68:	68ec      	ldreq	r4, [r5, #12]
 801fb6a:	e7e1      	b.n	801fb30 <_fclose_r+0x20>
 801fb6c:	4621      	mov	r1, r4
 801fb6e:	4628      	mov	r0, r5
 801fb70:	f000 f842 	bl	801fbf8 <__sflush_r>
 801fb74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801fb76:	4606      	mov	r6, r0
 801fb78:	b133      	cbz	r3, 801fb88 <_fclose_r+0x78>
 801fb7a:	6a21      	ldr	r1, [r4, #32]
 801fb7c:	4628      	mov	r0, r5
 801fb7e:	4798      	blx	r3
 801fb80:	2800      	cmp	r0, #0
 801fb82:	bfb8      	it	lt
 801fb84:	f04f 36ff 	movlt.w	r6, #4294967295
 801fb88:	89a3      	ldrh	r3, [r4, #12]
 801fb8a:	061a      	lsls	r2, r3, #24
 801fb8c:	d503      	bpl.n	801fb96 <_fclose_r+0x86>
 801fb8e:	6921      	ldr	r1, [r4, #16]
 801fb90:	4628      	mov	r0, r5
 801fb92:	f000 fdad 	bl	80206f0 <_free_r>
 801fb96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fb98:	b141      	cbz	r1, 801fbac <_fclose_r+0x9c>
 801fb9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fb9e:	4299      	cmp	r1, r3
 801fba0:	d002      	beq.n	801fba8 <_fclose_r+0x98>
 801fba2:	4628      	mov	r0, r5
 801fba4:	f000 fda4 	bl	80206f0 <_free_r>
 801fba8:	2300      	movs	r3, #0
 801fbaa:	6363      	str	r3, [r4, #52]	; 0x34
 801fbac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801fbae:	b121      	cbz	r1, 801fbba <_fclose_r+0xaa>
 801fbb0:	4628      	mov	r0, r5
 801fbb2:	f000 fd9d 	bl	80206f0 <_free_r>
 801fbb6:	2300      	movs	r3, #0
 801fbb8:	64a3      	str	r3, [r4, #72]	; 0x48
 801fbba:	f000 f931 	bl	801fe20 <__sfp_lock_acquire>
 801fbbe:	2300      	movs	r3, #0
 801fbc0:	81a3      	strh	r3, [r4, #12]
 801fbc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fbc4:	07db      	lsls	r3, r3, #31
 801fbc6:	d402      	bmi.n	801fbce <_fclose_r+0xbe>
 801fbc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbca:	f000 fcf6 	bl	80205ba <__retarget_lock_release_recursive>
 801fbce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbd0:	f000 fcef 	bl	80205b2 <__retarget_lock_close_recursive>
 801fbd4:	f000 f92a 	bl	801fe2c <__sfp_lock_release>
 801fbd8:	e79f      	b.n	801fb1a <_fclose_r+0xa>
 801fbda:	bf00      	nop
 801fbdc:	08029510 	.word	0x08029510
 801fbe0:	08029530 	.word	0x08029530
 801fbe4:	080294f0 	.word	0x080294f0

0801fbe8 <fclose>:
 801fbe8:	4b02      	ldr	r3, [pc, #8]	; (801fbf4 <fclose+0xc>)
 801fbea:	4601      	mov	r1, r0
 801fbec:	6818      	ldr	r0, [r3, #0]
 801fbee:	f7ff bf8f 	b.w	801fb10 <_fclose_r>
 801fbf2:	bf00      	nop
 801fbf4:	20000108 	.word	0x20000108

0801fbf8 <__sflush_r>:
 801fbf8:	898a      	ldrh	r2, [r1, #12]
 801fbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fbfe:	4605      	mov	r5, r0
 801fc00:	0710      	lsls	r0, r2, #28
 801fc02:	460c      	mov	r4, r1
 801fc04:	d458      	bmi.n	801fcb8 <__sflush_r+0xc0>
 801fc06:	684b      	ldr	r3, [r1, #4]
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	dc05      	bgt.n	801fc18 <__sflush_r+0x20>
 801fc0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	dc02      	bgt.n	801fc18 <__sflush_r+0x20>
 801fc12:	2000      	movs	r0, #0
 801fc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fc1a:	2e00      	cmp	r6, #0
 801fc1c:	d0f9      	beq.n	801fc12 <__sflush_r+0x1a>
 801fc1e:	2300      	movs	r3, #0
 801fc20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fc24:	682f      	ldr	r7, [r5, #0]
 801fc26:	602b      	str	r3, [r5, #0]
 801fc28:	d032      	beq.n	801fc90 <__sflush_r+0x98>
 801fc2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fc2c:	89a3      	ldrh	r3, [r4, #12]
 801fc2e:	075a      	lsls	r2, r3, #29
 801fc30:	d505      	bpl.n	801fc3e <__sflush_r+0x46>
 801fc32:	6863      	ldr	r3, [r4, #4]
 801fc34:	1ac0      	subs	r0, r0, r3
 801fc36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fc38:	b10b      	cbz	r3, 801fc3e <__sflush_r+0x46>
 801fc3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fc3c:	1ac0      	subs	r0, r0, r3
 801fc3e:	2300      	movs	r3, #0
 801fc40:	4602      	mov	r2, r0
 801fc42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fc44:	6a21      	ldr	r1, [r4, #32]
 801fc46:	4628      	mov	r0, r5
 801fc48:	47b0      	blx	r6
 801fc4a:	1c43      	adds	r3, r0, #1
 801fc4c:	89a3      	ldrh	r3, [r4, #12]
 801fc4e:	d106      	bne.n	801fc5e <__sflush_r+0x66>
 801fc50:	6829      	ldr	r1, [r5, #0]
 801fc52:	291d      	cmp	r1, #29
 801fc54:	d82c      	bhi.n	801fcb0 <__sflush_r+0xb8>
 801fc56:	4a2a      	ldr	r2, [pc, #168]	; (801fd00 <__sflush_r+0x108>)
 801fc58:	40ca      	lsrs	r2, r1
 801fc5a:	07d6      	lsls	r6, r2, #31
 801fc5c:	d528      	bpl.n	801fcb0 <__sflush_r+0xb8>
 801fc5e:	2200      	movs	r2, #0
 801fc60:	6062      	str	r2, [r4, #4]
 801fc62:	04d9      	lsls	r1, r3, #19
 801fc64:	6922      	ldr	r2, [r4, #16]
 801fc66:	6022      	str	r2, [r4, #0]
 801fc68:	d504      	bpl.n	801fc74 <__sflush_r+0x7c>
 801fc6a:	1c42      	adds	r2, r0, #1
 801fc6c:	d101      	bne.n	801fc72 <__sflush_r+0x7a>
 801fc6e:	682b      	ldr	r3, [r5, #0]
 801fc70:	b903      	cbnz	r3, 801fc74 <__sflush_r+0x7c>
 801fc72:	6560      	str	r0, [r4, #84]	; 0x54
 801fc74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc76:	602f      	str	r7, [r5, #0]
 801fc78:	2900      	cmp	r1, #0
 801fc7a:	d0ca      	beq.n	801fc12 <__sflush_r+0x1a>
 801fc7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fc80:	4299      	cmp	r1, r3
 801fc82:	d002      	beq.n	801fc8a <__sflush_r+0x92>
 801fc84:	4628      	mov	r0, r5
 801fc86:	f000 fd33 	bl	80206f0 <_free_r>
 801fc8a:	2000      	movs	r0, #0
 801fc8c:	6360      	str	r0, [r4, #52]	; 0x34
 801fc8e:	e7c1      	b.n	801fc14 <__sflush_r+0x1c>
 801fc90:	6a21      	ldr	r1, [r4, #32]
 801fc92:	2301      	movs	r3, #1
 801fc94:	4628      	mov	r0, r5
 801fc96:	47b0      	blx	r6
 801fc98:	1c41      	adds	r1, r0, #1
 801fc9a:	d1c7      	bne.n	801fc2c <__sflush_r+0x34>
 801fc9c:	682b      	ldr	r3, [r5, #0]
 801fc9e:	2b00      	cmp	r3, #0
 801fca0:	d0c4      	beq.n	801fc2c <__sflush_r+0x34>
 801fca2:	2b1d      	cmp	r3, #29
 801fca4:	d001      	beq.n	801fcaa <__sflush_r+0xb2>
 801fca6:	2b16      	cmp	r3, #22
 801fca8:	d101      	bne.n	801fcae <__sflush_r+0xb6>
 801fcaa:	602f      	str	r7, [r5, #0]
 801fcac:	e7b1      	b.n	801fc12 <__sflush_r+0x1a>
 801fcae:	89a3      	ldrh	r3, [r4, #12]
 801fcb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fcb4:	81a3      	strh	r3, [r4, #12]
 801fcb6:	e7ad      	b.n	801fc14 <__sflush_r+0x1c>
 801fcb8:	690f      	ldr	r7, [r1, #16]
 801fcba:	2f00      	cmp	r7, #0
 801fcbc:	d0a9      	beq.n	801fc12 <__sflush_r+0x1a>
 801fcbe:	0793      	lsls	r3, r2, #30
 801fcc0:	680e      	ldr	r6, [r1, #0]
 801fcc2:	bf08      	it	eq
 801fcc4:	694b      	ldreq	r3, [r1, #20]
 801fcc6:	600f      	str	r7, [r1, #0]
 801fcc8:	bf18      	it	ne
 801fcca:	2300      	movne	r3, #0
 801fccc:	eba6 0807 	sub.w	r8, r6, r7
 801fcd0:	608b      	str	r3, [r1, #8]
 801fcd2:	f1b8 0f00 	cmp.w	r8, #0
 801fcd6:	dd9c      	ble.n	801fc12 <__sflush_r+0x1a>
 801fcd8:	6a21      	ldr	r1, [r4, #32]
 801fcda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fcdc:	4643      	mov	r3, r8
 801fcde:	463a      	mov	r2, r7
 801fce0:	4628      	mov	r0, r5
 801fce2:	47b0      	blx	r6
 801fce4:	2800      	cmp	r0, #0
 801fce6:	dc06      	bgt.n	801fcf6 <__sflush_r+0xfe>
 801fce8:	89a3      	ldrh	r3, [r4, #12]
 801fcea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fcee:	81a3      	strh	r3, [r4, #12]
 801fcf0:	f04f 30ff 	mov.w	r0, #4294967295
 801fcf4:	e78e      	b.n	801fc14 <__sflush_r+0x1c>
 801fcf6:	4407      	add	r7, r0
 801fcf8:	eba8 0800 	sub.w	r8, r8, r0
 801fcfc:	e7e9      	b.n	801fcd2 <__sflush_r+0xda>
 801fcfe:	bf00      	nop
 801fd00:	20400001 	.word	0x20400001

0801fd04 <_fflush_r>:
 801fd04:	b538      	push	{r3, r4, r5, lr}
 801fd06:	690b      	ldr	r3, [r1, #16]
 801fd08:	4605      	mov	r5, r0
 801fd0a:	460c      	mov	r4, r1
 801fd0c:	b913      	cbnz	r3, 801fd14 <_fflush_r+0x10>
 801fd0e:	2500      	movs	r5, #0
 801fd10:	4628      	mov	r0, r5
 801fd12:	bd38      	pop	{r3, r4, r5, pc}
 801fd14:	b118      	cbz	r0, 801fd1e <_fflush_r+0x1a>
 801fd16:	6983      	ldr	r3, [r0, #24]
 801fd18:	b90b      	cbnz	r3, 801fd1e <_fflush_r+0x1a>
 801fd1a:	f000 f899 	bl	801fe50 <__sinit>
 801fd1e:	4b14      	ldr	r3, [pc, #80]	; (801fd70 <_fflush_r+0x6c>)
 801fd20:	429c      	cmp	r4, r3
 801fd22:	d11b      	bne.n	801fd5c <_fflush_r+0x58>
 801fd24:	686c      	ldr	r4, [r5, #4]
 801fd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d0ef      	beq.n	801fd0e <_fflush_r+0xa>
 801fd2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fd30:	07d0      	lsls	r0, r2, #31
 801fd32:	d404      	bmi.n	801fd3e <_fflush_r+0x3a>
 801fd34:	0599      	lsls	r1, r3, #22
 801fd36:	d402      	bmi.n	801fd3e <_fflush_r+0x3a>
 801fd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fd3a:	f000 fc3c 	bl	80205b6 <__retarget_lock_acquire_recursive>
 801fd3e:	4628      	mov	r0, r5
 801fd40:	4621      	mov	r1, r4
 801fd42:	f7ff ff59 	bl	801fbf8 <__sflush_r>
 801fd46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fd48:	07da      	lsls	r2, r3, #31
 801fd4a:	4605      	mov	r5, r0
 801fd4c:	d4e0      	bmi.n	801fd10 <_fflush_r+0xc>
 801fd4e:	89a3      	ldrh	r3, [r4, #12]
 801fd50:	059b      	lsls	r3, r3, #22
 801fd52:	d4dd      	bmi.n	801fd10 <_fflush_r+0xc>
 801fd54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fd56:	f000 fc30 	bl	80205ba <__retarget_lock_release_recursive>
 801fd5a:	e7d9      	b.n	801fd10 <_fflush_r+0xc>
 801fd5c:	4b05      	ldr	r3, [pc, #20]	; (801fd74 <_fflush_r+0x70>)
 801fd5e:	429c      	cmp	r4, r3
 801fd60:	d101      	bne.n	801fd66 <_fflush_r+0x62>
 801fd62:	68ac      	ldr	r4, [r5, #8]
 801fd64:	e7df      	b.n	801fd26 <_fflush_r+0x22>
 801fd66:	4b04      	ldr	r3, [pc, #16]	; (801fd78 <_fflush_r+0x74>)
 801fd68:	429c      	cmp	r4, r3
 801fd6a:	bf08      	it	eq
 801fd6c:	68ec      	ldreq	r4, [r5, #12]
 801fd6e:	e7da      	b.n	801fd26 <_fflush_r+0x22>
 801fd70:	08029510 	.word	0x08029510
 801fd74:	08029530 	.word	0x08029530
 801fd78:	080294f0 	.word	0x080294f0

0801fd7c <fflush>:
 801fd7c:	4601      	mov	r1, r0
 801fd7e:	b920      	cbnz	r0, 801fd8a <fflush+0xe>
 801fd80:	4b04      	ldr	r3, [pc, #16]	; (801fd94 <fflush+0x18>)
 801fd82:	4905      	ldr	r1, [pc, #20]	; (801fd98 <fflush+0x1c>)
 801fd84:	6818      	ldr	r0, [r3, #0]
 801fd86:	f000 babb 	b.w	8020300 <_fwalk_reent>
 801fd8a:	4b04      	ldr	r3, [pc, #16]	; (801fd9c <fflush+0x20>)
 801fd8c:	6818      	ldr	r0, [r3, #0]
 801fd8e:	f7ff bfb9 	b.w	801fd04 <_fflush_r>
 801fd92:	bf00      	nop
 801fd94:	08029550 	.word	0x08029550
 801fd98:	0801fd05 	.word	0x0801fd05
 801fd9c:	20000108 	.word	0x20000108

0801fda0 <std>:
 801fda0:	2300      	movs	r3, #0
 801fda2:	b510      	push	{r4, lr}
 801fda4:	4604      	mov	r4, r0
 801fda6:	e9c0 3300 	strd	r3, r3, [r0]
 801fdaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fdae:	6083      	str	r3, [r0, #8]
 801fdb0:	8181      	strh	r1, [r0, #12]
 801fdb2:	6643      	str	r3, [r0, #100]	; 0x64
 801fdb4:	81c2      	strh	r2, [r0, #14]
 801fdb6:	6183      	str	r3, [r0, #24]
 801fdb8:	4619      	mov	r1, r3
 801fdba:	2208      	movs	r2, #8
 801fdbc:	305c      	adds	r0, #92	; 0x5c
 801fdbe:	f000 fc7f 	bl	80206c0 <memset>
 801fdc2:	4b05      	ldr	r3, [pc, #20]	; (801fdd8 <std+0x38>)
 801fdc4:	6263      	str	r3, [r4, #36]	; 0x24
 801fdc6:	4b05      	ldr	r3, [pc, #20]	; (801fddc <std+0x3c>)
 801fdc8:	62a3      	str	r3, [r4, #40]	; 0x28
 801fdca:	4b05      	ldr	r3, [pc, #20]	; (801fde0 <std+0x40>)
 801fdcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fdce:	4b05      	ldr	r3, [pc, #20]	; (801fde4 <std+0x44>)
 801fdd0:	6224      	str	r4, [r4, #32]
 801fdd2:	6323      	str	r3, [r4, #48]	; 0x30
 801fdd4:	bd10      	pop	{r4, pc}
 801fdd6:	bf00      	nop
 801fdd8:	08020a69 	.word	0x08020a69
 801fddc:	08020a8f 	.word	0x08020a8f
 801fde0:	08020ac7 	.word	0x08020ac7
 801fde4:	08020aeb 	.word	0x08020aeb

0801fde8 <_cleanup_r>:
 801fde8:	4901      	ldr	r1, [pc, #4]	; (801fdf0 <_cleanup_r+0x8>)
 801fdea:	f000 ba89 	b.w	8020300 <_fwalk_reent>
 801fdee:	bf00      	nop
 801fdf0:	0801fd05 	.word	0x0801fd05

0801fdf4 <__sfmoreglue>:
 801fdf4:	b570      	push	{r4, r5, r6, lr}
 801fdf6:	1e4a      	subs	r2, r1, #1
 801fdf8:	2568      	movs	r5, #104	; 0x68
 801fdfa:	4355      	muls	r5, r2
 801fdfc:	460e      	mov	r6, r1
 801fdfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801fe02:	f000 fcc5 	bl	8020790 <_malloc_r>
 801fe06:	4604      	mov	r4, r0
 801fe08:	b140      	cbz	r0, 801fe1c <__sfmoreglue+0x28>
 801fe0a:	2100      	movs	r1, #0
 801fe0c:	e9c0 1600 	strd	r1, r6, [r0]
 801fe10:	300c      	adds	r0, #12
 801fe12:	60a0      	str	r0, [r4, #8]
 801fe14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fe18:	f000 fc52 	bl	80206c0 <memset>
 801fe1c:	4620      	mov	r0, r4
 801fe1e:	bd70      	pop	{r4, r5, r6, pc}

0801fe20 <__sfp_lock_acquire>:
 801fe20:	4801      	ldr	r0, [pc, #4]	; (801fe28 <__sfp_lock_acquire+0x8>)
 801fe22:	f000 bbc8 	b.w	80205b6 <__retarget_lock_acquire_recursive>
 801fe26:	bf00      	nop
 801fe28:	20000f90 	.word	0x20000f90

0801fe2c <__sfp_lock_release>:
 801fe2c:	4801      	ldr	r0, [pc, #4]	; (801fe34 <__sfp_lock_release+0x8>)
 801fe2e:	f000 bbc4 	b.w	80205ba <__retarget_lock_release_recursive>
 801fe32:	bf00      	nop
 801fe34:	20000f90 	.word	0x20000f90

0801fe38 <__sinit_lock_acquire>:
 801fe38:	4801      	ldr	r0, [pc, #4]	; (801fe40 <__sinit_lock_acquire+0x8>)
 801fe3a:	f000 bbbc 	b.w	80205b6 <__retarget_lock_acquire_recursive>
 801fe3e:	bf00      	nop
 801fe40:	20000f8b 	.word	0x20000f8b

0801fe44 <__sinit_lock_release>:
 801fe44:	4801      	ldr	r0, [pc, #4]	; (801fe4c <__sinit_lock_release+0x8>)
 801fe46:	f000 bbb8 	b.w	80205ba <__retarget_lock_release_recursive>
 801fe4a:	bf00      	nop
 801fe4c:	20000f8b 	.word	0x20000f8b

0801fe50 <__sinit>:
 801fe50:	b510      	push	{r4, lr}
 801fe52:	4604      	mov	r4, r0
 801fe54:	f7ff fff0 	bl	801fe38 <__sinit_lock_acquire>
 801fe58:	69a3      	ldr	r3, [r4, #24]
 801fe5a:	b11b      	cbz	r3, 801fe64 <__sinit+0x14>
 801fe5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fe60:	f7ff bff0 	b.w	801fe44 <__sinit_lock_release>
 801fe64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801fe68:	6523      	str	r3, [r4, #80]	; 0x50
 801fe6a:	4b13      	ldr	r3, [pc, #76]	; (801feb8 <__sinit+0x68>)
 801fe6c:	4a13      	ldr	r2, [pc, #76]	; (801febc <__sinit+0x6c>)
 801fe6e:	681b      	ldr	r3, [r3, #0]
 801fe70:	62a2      	str	r2, [r4, #40]	; 0x28
 801fe72:	42a3      	cmp	r3, r4
 801fe74:	bf04      	itt	eq
 801fe76:	2301      	moveq	r3, #1
 801fe78:	61a3      	streq	r3, [r4, #24]
 801fe7a:	4620      	mov	r0, r4
 801fe7c:	f000 f820 	bl	801fec0 <__sfp>
 801fe80:	6060      	str	r0, [r4, #4]
 801fe82:	4620      	mov	r0, r4
 801fe84:	f000 f81c 	bl	801fec0 <__sfp>
 801fe88:	60a0      	str	r0, [r4, #8]
 801fe8a:	4620      	mov	r0, r4
 801fe8c:	f000 f818 	bl	801fec0 <__sfp>
 801fe90:	2200      	movs	r2, #0
 801fe92:	60e0      	str	r0, [r4, #12]
 801fe94:	2104      	movs	r1, #4
 801fe96:	6860      	ldr	r0, [r4, #4]
 801fe98:	f7ff ff82 	bl	801fda0 <std>
 801fe9c:	68a0      	ldr	r0, [r4, #8]
 801fe9e:	2201      	movs	r2, #1
 801fea0:	2109      	movs	r1, #9
 801fea2:	f7ff ff7d 	bl	801fda0 <std>
 801fea6:	68e0      	ldr	r0, [r4, #12]
 801fea8:	2202      	movs	r2, #2
 801feaa:	2112      	movs	r1, #18
 801feac:	f7ff ff78 	bl	801fda0 <std>
 801feb0:	2301      	movs	r3, #1
 801feb2:	61a3      	str	r3, [r4, #24]
 801feb4:	e7d2      	b.n	801fe5c <__sinit+0xc>
 801feb6:	bf00      	nop
 801feb8:	08029550 	.word	0x08029550
 801febc:	0801fde9 	.word	0x0801fde9

0801fec0 <__sfp>:
 801fec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fec2:	4607      	mov	r7, r0
 801fec4:	f7ff ffac 	bl	801fe20 <__sfp_lock_acquire>
 801fec8:	4b1e      	ldr	r3, [pc, #120]	; (801ff44 <__sfp+0x84>)
 801feca:	681e      	ldr	r6, [r3, #0]
 801fecc:	69b3      	ldr	r3, [r6, #24]
 801fece:	b913      	cbnz	r3, 801fed6 <__sfp+0x16>
 801fed0:	4630      	mov	r0, r6
 801fed2:	f7ff ffbd 	bl	801fe50 <__sinit>
 801fed6:	3648      	adds	r6, #72	; 0x48
 801fed8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fedc:	3b01      	subs	r3, #1
 801fede:	d503      	bpl.n	801fee8 <__sfp+0x28>
 801fee0:	6833      	ldr	r3, [r6, #0]
 801fee2:	b30b      	cbz	r3, 801ff28 <__sfp+0x68>
 801fee4:	6836      	ldr	r6, [r6, #0]
 801fee6:	e7f7      	b.n	801fed8 <__sfp+0x18>
 801fee8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801feec:	b9d5      	cbnz	r5, 801ff24 <__sfp+0x64>
 801feee:	4b16      	ldr	r3, [pc, #88]	; (801ff48 <__sfp+0x88>)
 801fef0:	60e3      	str	r3, [r4, #12]
 801fef2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fef6:	6665      	str	r5, [r4, #100]	; 0x64
 801fef8:	f000 fb5a 	bl	80205b0 <__retarget_lock_init_recursive>
 801fefc:	f7ff ff96 	bl	801fe2c <__sfp_lock_release>
 801ff00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ff04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ff08:	6025      	str	r5, [r4, #0]
 801ff0a:	61a5      	str	r5, [r4, #24]
 801ff0c:	2208      	movs	r2, #8
 801ff0e:	4629      	mov	r1, r5
 801ff10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ff14:	f000 fbd4 	bl	80206c0 <memset>
 801ff18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ff1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ff20:	4620      	mov	r0, r4
 801ff22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff24:	3468      	adds	r4, #104	; 0x68
 801ff26:	e7d9      	b.n	801fedc <__sfp+0x1c>
 801ff28:	2104      	movs	r1, #4
 801ff2a:	4638      	mov	r0, r7
 801ff2c:	f7ff ff62 	bl	801fdf4 <__sfmoreglue>
 801ff30:	4604      	mov	r4, r0
 801ff32:	6030      	str	r0, [r6, #0]
 801ff34:	2800      	cmp	r0, #0
 801ff36:	d1d5      	bne.n	801fee4 <__sfp+0x24>
 801ff38:	f7ff ff78 	bl	801fe2c <__sfp_lock_release>
 801ff3c:	230c      	movs	r3, #12
 801ff3e:	603b      	str	r3, [r7, #0]
 801ff40:	e7ee      	b.n	801ff20 <__sfp+0x60>
 801ff42:	bf00      	nop
 801ff44:	08029550 	.word	0x08029550
 801ff48:	ffff0001 	.word	0xffff0001

0801ff4c <_fopen_r>:
 801ff4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ff4e:	460f      	mov	r7, r1
 801ff50:	4611      	mov	r1, r2
 801ff52:	aa01      	add	r2, sp, #4
 801ff54:	4605      	mov	r5, r0
 801ff56:	f002 f82f 	bl	8021fb8 <__sflags>
 801ff5a:	4606      	mov	r6, r0
 801ff5c:	b918      	cbnz	r0, 801ff66 <_fopen_r+0x1a>
 801ff5e:	2400      	movs	r4, #0
 801ff60:	4620      	mov	r0, r4
 801ff62:	b003      	add	sp, #12
 801ff64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff66:	4628      	mov	r0, r5
 801ff68:	f7ff ffaa 	bl	801fec0 <__sfp>
 801ff6c:	4604      	mov	r4, r0
 801ff6e:	2800      	cmp	r0, #0
 801ff70:	d0f5      	beq.n	801ff5e <_fopen_r+0x12>
 801ff72:	4639      	mov	r1, r7
 801ff74:	9a01      	ldr	r2, [sp, #4]
 801ff76:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801ff7a:	4628      	mov	r0, r5
 801ff7c:	f000 fc62 	bl	8020844 <_open_r>
 801ff80:	1e07      	subs	r7, r0, #0
 801ff82:	da09      	bge.n	801ff98 <_fopen_r+0x4c>
 801ff84:	2500      	movs	r5, #0
 801ff86:	f7ff ff4b 	bl	801fe20 <__sfp_lock_acquire>
 801ff8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ff8c:	81a5      	strh	r5, [r4, #12]
 801ff8e:	f000 fb10 	bl	80205b2 <__retarget_lock_close_recursive>
 801ff92:	f7ff ff4b 	bl	801fe2c <__sfp_lock_release>
 801ff96:	e7e2      	b.n	801ff5e <_fopen_r+0x12>
 801ff98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ff9a:	07db      	lsls	r3, r3, #31
 801ff9c:	d405      	bmi.n	801ffaa <_fopen_r+0x5e>
 801ff9e:	89a3      	ldrh	r3, [r4, #12]
 801ffa0:	0598      	lsls	r0, r3, #22
 801ffa2:	d402      	bmi.n	801ffaa <_fopen_r+0x5e>
 801ffa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ffa6:	f000 fb06 	bl	80205b6 <__retarget_lock_acquire_recursive>
 801ffaa:	4b0e      	ldr	r3, [pc, #56]	; (801ffe4 <_fopen_r+0x98>)
 801ffac:	6263      	str	r3, [r4, #36]	; 0x24
 801ffae:	4b0e      	ldr	r3, [pc, #56]	; (801ffe8 <_fopen_r+0x9c>)
 801ffb0:	62a3      	str	r3, [r4, #40]	; 0x28
 801ffb2:	4b0e      	ldr	r3, [pc, #56]	; (801ffec <_fopen_r+0xa0>)
 801ffb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ffb6:	05f1      	lsls	r1, r6, #23
 801ffb8:	4b0d      	ldr	r3, [pc, #52]	; (801fff0 <_fopen_r+0xa4>)
 801ffba:	81e7      	strh	r7, [r4, #14]
 801ffbc:	81a6      	strh	r6, [r4, #12]
 801ffbe:	6224      	str	r4, [r4, #32]
 801ffc0:	6323      	str	r3, [r4, #48]	; 0x30
 801ffc2:	d505      	bpl.n	801ffd0 <_fopen_r+0x84>
 801ffc4:	2302      	movs	r3, #2
 801ffc6:	2200      	movs	r2, #0
 801ffc8:	4621      	mov	r1, r4
 801ffca:	4628      	mov	r0, r5
 801ffcc:	f000 f888 	bl	80200e0 <_fseek_r>
 801ffd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ffd2:	07da      	lsls	r2, r3, #31
 801ffd4:	d4c4      	bmi.n	801ff60 <_fopen_r+0x14>
 801ffd6:	89a3      	ldrh	r3, [r4, #12]
 801ffd8:	059b      	lsls	r3, r3, #22
 801ffda:	d4c1      	bmi.n	801ff60 <_fopen_r+0x14>
 801ffdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ffde:	f000 faec 	bl	80205ba <__retarget_lock_release_recursive>
 801ffe2:	e7bd      	b.n	801ff60 <_fopen_r+0x14>
 801ffe4:	08020a69 	.word	0x08020a69
 801ffe8:	08020a8f 	.word	0x08020a8f
 801ffec:	08020ac7 	.word	0x08020ac7
 801fff0:	08020aeb 	.word	0x08020aeb

0801fff4 <fopen>:
 801fff4:	4b02      	ldr	r3, [pc, #8]	; (8020000 <fopen+0xc>)
 801fff6:	460a      	mov	r2, r1
 801fff8:	4601      	mov	r1, r0
 801fffa:	6818      	ldr	r0, [r3, #0]
 801fffc:	f7ff bfa6 	b.w	801ff4c <_fopen_r>
 8020000:	20000108 	.word	0x20000108

08020004 <_fputs_r>:
 8020004:	b570      	push	{r4, r5, r6, lr}
 8020006:	460e      	mov	r6, r1
 8020008:	4614      	mov	r4, r2
 802000a:	4605      	mov	r5, r0
 802000c:	b118      	cbz	r0, 8020016 <_fputs_r+0x12>
 802000e:	6983      	ldr	r3, [r0, #24]
 8020010:	b90b      	cbnz	r3, 8020016 <_fputs_r+0x12>
 8020012:	f7ff ff1d 	bl	801fe50 <__sinit>
 8020016:	4b2b      	ldr	r3, [pc, #172]	; (80200c4 <_fputs_r+0xc0>)
 8020018:	429c      	cmp	r4, r3
 802001a:	d11e      	bne.n	802005a <_fputs_r+0x56>
 802001c:	686c      	ldr	r4, [r5, #4]
 802001e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020020:	07da      	lsls	r2, r3, #31
 8020022:	d405      	bmi.n	8020030 <_fputs_r+0x2c>
 8020024:	89a3      	ldrh	r3, [r4, #12]
 8020026:	059b      	lsls	r3, r3, #22
 8020028:	d402      	bmi.n	8020030 <_fputs_r+0x2c>
 802002a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802002c:	f000 fac3 	bl	80205b6 <__retarget_lock_acquire_recursive>
 8020030:	89a3      	ldrh	r3, [r4, #12]
 8020032:	0718      	lsls	r0, r3, #28
 8020034:	d51b      	bpl.n	802006e <_fputs_r+0x6a>
 8020036:	6923      	ldr	r3, [r4, #16]
 8020038:	b1cb      	cbz	r3, 802006e <_fputs_r+0x6a>
 802003a:	3e01      	subs	r6, #1
 802003c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020040:	bb39      	cbnz	r1, 8020092 <_fputs_r+0x8e>
 8020042:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8020044:	f015 0501 	ands.w	r5, r5, #1
 8020048:	d139      	bne.n	80200be <_fputs_r+0xba>
 802004a:	89a3      	ldrh	r3, [r4, #12]
 802004c:	0599      	lsls	r1, r3, #22
 802004e:	d402      	bmi.n	8020056 <_fputs_r+0x52>
 8020050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020052:	f000 fab2 	bl	80205ba <__retarget_lock_release_recursive>
 8020056:	4628      	mov	r0, r5
 8020058:	bd70      	pop	{r4, r5, r6, pc}
 802005a:	4b1b      	ldr	r3, [pc, #108]	; (80200c8 <_fputs_r+0xc4>)
 802005c:	429c      	cmp	r4, r3
 802005e:	d101      	bne.n	8020064 <_fputs_r+0x60>
 8020060:	68ac      	ldr	r4, [r5, #8]
 8020062:	e7dc      	b.n	802001e <_fputs_r+0x1a>
 8020064:	4b19      	ldr	r3, [pc, #100]	; (80200cc <_fputs_r+0xc8>)
 8020066:	429c      	cmp	r4, r3
 8020068:	bf08      	it	eq
 802006a:	68ec      	ldreq	r4, [r5, #12]
 802006c:	e7d7      	b.n	802001e <_fputs_r+0x1a>
 802006e:	4621      	mov	r1, r4
 8020070:	4628      	mov	r0, r5
 8020072:	f001 fe9f 	bl	8021db4 <__swsetup_r>
 8020076:	2800      	cmp	r0, #0
 8020078:	d0df      	beq.n	802003a <_fputs_r+0x36>
 802007a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802007c:	07da      	lsls	r2, r3, #31
 802007e:	d405      	bmi.n	802008c <_fputs_r+0x88>
 8020080:	89a3      	ldrh	r3, [r4, #12]
 8020082:	059b      	lsls	r3, r3, #22
 8020084:	d402      	bmi.n	802008c <_fputs_r+0x88>
 8020086:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020088:	f000 fa97 	bl	80205ba <__retarget_lock_release_recursive>
 802008c:	f04f 35ff 	mov.w	r5, #4294967295
 8020090:	e7e1      	b.n	8020056 <_fputs_r+0x52>
 8020092:	68a3      	ldr	r3, [r4, #8]
 8020094:	3b01      	subs	r3, #1
 8020096:	2b00      	cmp	r3, #0
 8020098:	60a3      	str	r3, [r4, #8]
 802009a:	da04      	bge.n	80200a6 <_fputs_r+0xa2>
 802009c:	69a2      	ldr	r2, [r4, #24]
 802009e:	4293      	cmp	r3, r2
 80200a0:	db06      	blt.n	80200b0 <_fputs_r+0xac>
 80200a2:	290a      	cmp	r1, #10
 80200a4:	d004      	beq.n	80200b0 <_fputs_r+0xac>
 80200a6:	6823      	ldr	r3, [r4, #0]
 80200a8:	1c5a      	adds	r2, r3, #1
 80200aa:	6022      	str	r2, [r4, #0]
 80200ac:	7019      	strb	r1, [r3, #0]
 80200ae:	e7c5      	b.n	802003c <_fputs_r+0x38>
 80200b0:	4622      	mov	r2, r4
 80200b2:	4628      	mov	r0, r5
 80200b4:	f001 fe1a 	bl	8021cec <__swbuf_r>
 80200b8:	3001      	adds	r0, #1
 80200ba:	d1bf      	bne.n	802003c <_fputs_r+0x38>
 80200bc:	e7dd      	b.n	802007a <_fputs_r+0x76>
 80200be:	460d      	mov	r5, r1
 80200c0:	e7c9      	b.n	8020056 <_fputs_r+0x52>
 80200c2:	bf00      	nop
 80200c4:	08029510 	.word	0x08029510
 80200c8:	08029530 	.word	0x08029530
 80200cc:	080294f0 	.word	0x080294f0

080200d0 <fputs>:
 80200d0:	4b02      	ldr	r3, [pc, #8]	; (80200dc <fputs+0xc>)
 80200d2:	460a      	mov	r2, r1
 80200d4:	4601      	mov	r1, r0
 80200d6:	6818      	ldr	r0, [r3, #0]
 80200d8:	f7ff bf94 	b.w	8020004 <_fputs_r>
 80200dc:	20000108 	.word	0x20000108

080200e0 <_fseek_r>:
 80200e0:	f000 b800 	b.w	80200e4 <_fseeko_r>

080200e4 <_fseeko_r>:
 80200e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200e8:	460c      	mov	r4, r1
 80200ea:	4617      	mov	r7, r2
 80200ec:	461e      	mov	r6, r3
 80200ee:	4605      	mov	r5, r0
 80200f0:	b118      	cbz	r0, 80200fa <_fseeko_r+0x16>
 80200f2:	6983      	ldr	r3, [r0, #24]
 80200f4:	b90b      	cbnz	r3, 80200fa <_fseeko_r+0x16>
 80200f6:	f7ff feab 	bl	801fe50 <__sinit>
 80200fa:	4b44      	ldr	r3, [pc, #272]	; (802020c <_fseeko_r+0x128>)
 80200fc:	429c      	cmp	r4, r3
 80200fe:	d122      	bne.n	8020146 <_fseeko_r+0x62>
 8020100:	686c      	ldr	r4, [r5, #4]
 8020102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020104:	07d9      	lsls	r1, r3, #31
 8020106:	d405      	bmi.n	8020114 <_fseeko_r+0x30>
 8020108:	89a3      	ldrh	r3, [r4, #12]
 802010a:	059a      	lsls	r2, r3, #22
 802010c:	d402      	bmi.n	8020114 <_fseeko_r+0x30>
 802010e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020110:	f000 fa51 	bl	80205b6 <__retarget_lock_acquire_recursive>
 8020114:	89a3      	ldrh	r3, [r4, #12]
 8020116:	f403 7384 	and.w	r3, r3, #264	; 0x108
 802011a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 802011e:	d103      	bne.n	8020128 <_fseeko_r+0x44>
 8020120:	4621      	mov	r1, r4
 8020122:	4628      	mov	r0, r5
 8020124:	f7ff fdee 	bl	801fd04 <_fflush_r>
 8020128:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 802012c:	f1b8 0f00 	cmp.w	r8, #0
 8020130:	d113      	bne.n	802015a <_fseeko_r+0x76>
 8020132:	231d      	movs	r3, #29
 8020134:	602b      	str	r3, [r5, #0]
 8020136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020138:	07d9      	lsls	r1, r3, #31
 802013a:	d55d      	bpl.n	80201f8 <_fseeko_r+0x114>
 802013c:	f04f 36ff 	mov.w	r6, #4294967295
 8020140:	4630      	mov	r0, r6
 8020142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020146:	4b32      	ldr	r3, [pc, #200]	; (8020210 <_fseeko_r+0x12c>)
 8020148:	429c      	cmp	r4, r3
 802014a:	d101      	bne.n	8020150 <_fseeko_r+0x6c>
 802014c:	68ac      	ldr	r4, [r5, #8]
 802014e:	e7d8      	b.n	8020102 <_fseeko_r+0x1e>
 8020150:	4b30      	ldr	r3, [pc, #192]	; (8020214 <_fseeko_r+0x130>)
 8020152:	429c      	cmp	r4, r3
 8020154:	bf08      	it	eq
 8020156:	68ec      	ldreq	r4, [r5, #12]
 8020158:	e7d3      	b.n	8020102 <_fseeko_r+0x1e>
 802015a:	2e01      	cmp	r6, #1
 802015c:	d036      	beq.n	80201cc <_fseeko_r+0xe8>
 802015e:	f036 0302 	bics.w	r3, r6, #2
 8020162:	d147      	bne.n	80201f4 <_fseeko_r+0x110>
 8020164:	6923      	ldr	r3, [r4, #16]
 8020166:	b91b      	cbnz	r3, 8020170 <_fseeko_r+0x8c>
 8020168:	4621      	mov	r1, r4
 802016a:	4628      	mov	r0, r5
 802016c:	f000 fa4a 	bl	8020604 <__smakebuf_r>
 8020170:	4621      	mov	r1, r4
 8020172:	4628      	mov	r0, r5
 8020174:	f7ff fdc6 	bl	801fd04 <_fflush_r>
 8020178:	2800      	cmp	r0, #0
 802017a:	d1dc      	bne.n	8020136 <_fseeko_r+0x52>
 802017c:	6a21      	ldr	r1, [r4, #32]
 802017e:	4633      	mov	r3, r6
 8020180:	463a      	mov	r2, r7
 8020182:	4628      	mov	r0, r5
 8020184:	47c0      	blx	r8
 8020186:	3001      	adds	r0, #1
 8020188:	d0d5      	beq.n	8020136 <_fseeko_r+0x52>
 802018a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802018c:	b141      	cbz	r1, 80201a0 <_fseeko_r+0xbc>
 802018e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020192:	4299      	cmp	r1, r3
 8020194:	d002      	beq.n	802019c <_fseeko_r+0xb8>
 8020196:	4628      	mov	r0, r5
 8020198:	f000 faaa 	bl	80206f0 <_free_r>
 802019c:	2300      	movs	r3, #0
 802019e:	6363      	str	r3, [r4, #52]	; 0x34
 80201a0:	6923      	ldr	r3, [r4, #16]
 80201a2:	6023      	str	r3, [r4, #0]
 80201a4:	89a3      	ldrh	r3, [r4, #12]
 80201a6:	2500      	movs	r5, #0
 80201a8:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 80201ac:	6065      	str	r5, [r4, #4]
 80201ae:	81a3      	strh	r3, [r4, #12]
 80201b0:	2208      	movs	r2, #8
 80201b2:	4629      	mov	r1, r5
 80201b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80201b8:	f000 fa82 	bl	80206c0 <memset>
 80201bc:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80201be:	f016 0601 	ands.w	r6, r6, #1
 80201c2:	d120      	bne.n	8020206 <_fseeko_r+0x122>
 80201c4:	89a3      	ldrh	r3, [r4, #12]
 80201c6:	059b      	lsls	r3, r3, #22
 80201c8:	d4ba      	bmi.n	8020140 <_fseeko_r+0x5c>
 80201ca:	e00c      	b.n	80201e6 <_fseeko_r+0x102>
 80201cc:	4621      	mov	r1, r4
 80201ce:	4628      	mov	r0, r5
 80201d0:	f000 f822 	bl	8020218 <_ftello_r>
 80201d4:	1c43      	adds	r3, r0, #1
 80201d6:	4606      	mov	r6, r0
 80201d8:	d109      	bne.n	80201ee <_fseeko_r+0x10a>
 80201da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80201dc:	07dd      	lsls	r5, r3, #31
 80201de:	d4ad      	bmi.n	802013c <_fseeko_r+0x58>
 80201e0:	89a3      	ldrh	r3, [r4, #12]
 80201e2:	0598      	lsls	r0, r3, #22
 80201e4:	d4aa      	bmi.n	802013c <_fseeko_r+0x58>
 80201e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80201e8:	f000 f9e7 	bl	80205ba <__retarget_lock_release_recursive>
 80201ec:	e7a8      	b.n	8020140 <_fseeko_r+0x5c>
 80201ee:	4407      	add	r7, r0
 80201f0:	2600      	movs	r6, #0
 80201f2:	e7b7      	b.n	8020164 <_fseeko_r+0x80>
 80201f4:	2316      	movs	r3, #22
 80201f6:	e79d      	b.n	8020134 <_fseeko_r+0x50>
 80201f8:	89a3      	ldrh	r3, [r4, #12]
 80201fa:	059a      	lsls	r2, r3, #22
 80201fc:	d49e      	bmi.n	802013c <_fseeko_r+0x58>
 80201fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020200:	f000 f9db 	bl	80205ba <__retarget_lock_release_recursive>
 8020204:	e79a      	b.n	802013c <_fseeko_r+0x58>
 8020206:	462e      	mov	r6, r5
 8020208:	e79a      	b.n	8020140 <_fseeko_r+0x5c>
 802020a:	bf00      	nop
 802020c:	08029510 	.word	0x08029510
 8020210:	08029530 	.word	0x08029530
 8020214:	080294f0 	.word	0x080294f0

08020218 <_ftello_r>:
 8020218:	b570      	push	{r4, r5, r6, lr}
 802021a:	460c      	mov	r4, r1
 802021c:	4605      	mov	r5, r0
 802021e:	b118      	cbz	r0, 8020228 <_ftello_r+0x10>
 8020220:	6983      	ldr	r3, [r0, #24]
 8020222:	b90b      	cbnz	r3, 8020228 <_ftello_r+0x10>
 8020224:	f7ff fe14 	bl	801fe50 <__sinit>
 8020228:	4b32      	ldr	r3, [pc, #200]	; (80202f4 <_ftello_r+0xdc>)
 802022a:	429c      	cmp	r4, r3
 802022c:	d114      	bne.n	8020258 <_ftello_r+0x40>
 802022e:	686c      	ldr	r4, [r5, #4]
 8020230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020232:	07da      	lsls	r2, r3, #31
 8020234:	d405      	bmi.n	8020242 <_ftello_r+0x2a>
 8020236:	89a3      	ldrh	r3, [r4, #12]
 8020238:	059b      	lsls	r3, r3, #22
 802023a:	d402      	bmi.n	8020242 <_ftello_r+0x2a>
 802023c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802023e:	f000 f9ba 	bl	80205b6 <__retarget_lock_acquire_recursive>
 8020242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020244:	b9ce      	cbnz	r6, 802027a <_ftello_r+0x62>
 8020246:	231d      	movs	r3, #29
 8020248:	602b      	str	r3, [r5, #0]
 802024a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802024c:	07de      	lsls	r6, r3, #31
 802024e:	d50d      	bpl.n	802026c <_ftello_r+0x54>
 8020250:	f04f 35ff 	mov.w	r5, #4294967295
 8020254:	4628      	mov	r0, r5
 8020256:	bd70      	pop	{r4, r5, r6, pc}
 8020258:	4b27      	ldr	r3, [pc, #156]	; (80202f8 <_ftello_r+0xe0>)
 802025a:	429c      	cmp	r4, r3
 802025c:	d101      	bne.n	8020262 <_ftello_r+0x4a>
 802025e:	68ac      	ldr	r4, [r5, #8]
 8020260:	e7e6      	b.n	8020230 <_ftello_r+0x18>
 8020262:	4b26      	ldr	r3, [pc, #152]	; (80202fc <_ftello_r+0xe4>)
 8020264:	429c      	cmp	r4, r3
 8020266:	bf08      	it	eq
 8020268:	68ec      	ldreq	r4, [r5, #12]
 802026a:	e7e1      	b.n	8020230 <_ftello_r+0x18>
 802026c:	89a3      	ldrh	r3, [r4, #12]
 802026e:	059d      	lsls	r5, r3, #22
 8020270:	d4ee      	bmi.n	8020250 <_ftello_r+0x38>
 8020272:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020274:	f000 f9a1 	bl	80205ba <__retarget_lock_release_recursive>
 8020278:	e7ea      	b.n	8020250 <_ftello_r+0x38>
 802027a:	89a2      	ldrh	r2, [r4, #12]
 802027c:	f002 030c 	and.w	r3, r2, #12
 8020280:	2b08      	cmp	r3, #8
 8020282:	d119      	bne.n	80202b8 <_ftello_r+0xa0>
 8020284:	6823      	ldr	r3, [r4, #0]
 8020286:	b1bb      	cbz	r3, 80202b8 <_ftello_r+0xa0>
 8020288:	6921      	ldr	r1, [r4, #16]
 802028a:	1a5b      	subs	r3, r3, r1
 802028c:	2b00      	cmp	r3, #0
 802028e:	dd13      	ble.n	80202b8 <_ftello_r+0xa0>
 8020290:	05d0      	lsls	r0, r2, #23
 8020292:	d511      	bpl.n	80202b8 <_ftello_r+0xa0>
 8020294:	2302      	movs	r3, #2
 8020296:	2200      	movs	r2, #0
 8020298:	6a21      	ldr	r1, [r4, #32]
 802029a:	4628      	mov	r0, r5
 802029c:	47b0      	blx	r6
 802029e:	1c41      	adds	r1, r0, #1
 80202a0:	4605      	mov	r5, r0
 80202a2:	d10d      	bne.n	80202c0 <_ftello_r+0xa8>
 80202a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80202a6:	07da      	lsls	r2, r3, #31
 80202a8:	d4d2      	bmi.n	8020250 <_ftello_r+0x38>
 80202aa:	89a3      	ldrh	r3, [r4, #12]
 80202ac:	059b      	lsls	r3, r3, #22
 80202ae:	d4cf      	bmi.n	8020250 <_ftello_r+0x38>
 80202b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80202b2:	f000 f982 	bl	80205ba <__retarget_lock_release_recursive>
 80202b6:	e7cd      	b.n	8020254 <_ftello_r+0x3c>
 80202b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80202bc:	d00f      	beq.n	80202de <_ftello_r+0xc6>
 80202be:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80202c0:	89a2      	ldrh	r2, [r4, #12]
 80202c2:	0756      	lsls	r6, r2, #29
 80202c4:	d50d      	bpl.n	80202e2 <_ftello_r+0xca>
 80202c6:	6863      	ldr	r3, [r4, #4]
 80202c8:	1aed      	subs	r5, r5, r3
 80202ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80202cc:	b10b      	cbz	r3, 80202d2 <_ftello_r+0xba>
 80202ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80202d0:	1aed      	subs	r5, r5, r3
 80202d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80202d4:	07d9      	lsls	r1, r3, #31
 80202d6:	d4bd      	bmi.n	8020254 <_ftello_r+0x3c>
 80202d8:	0593      	lsls	r3, r2, #22
 80202da:	d4bb      	bmi.n	8020254 <_ftello_r+0x3c>
 80202dc:	e7e8      	b.n	80202b0 <_ftello_r+0x98>
 80202de:	2301      	movs	r3, #1
 80202e0:	e7da      	b.n	8020298 <_ftello_r+0x80>
 80202e2:	0710      	lsls	r0, r2, #28
 80202e4:	d5f5      	bpl.n	80202d2 <_ftello_r+0xba>
 80202e6:	6823      	ldr	r3, [r4, #0]
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	d0f2      	beq.n	80202d2 <_ftello_r+0xba>
 80202ec:	6921      	ldr	r1, [r4, #16]
 80202ee:	1a5b      	subs	r3, r3, r1
 80202f0:	441d      	add	r5, r3
 80202f2:	e7ee      	b.n	80202d2 <_ftello_r+0xba>
 80202f4:	08029510 	.word	0x08029510
 80202f8:	08029530 	.word	0x08029530
 80202fc:	080294f0 	.word	0x080294f0

08020300 <_fwalk_reent>:
 8020300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020304:	4606      	mov	r6, r0
 8020306:	4688      	mov	r8, r1
 8020308:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802030c:	2700      	movs	r7, #0
 802030e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020312:	f1b9 0901 	subs.w	r9, r9, #1
 8020316:	d505      	bpl.n	8020324 <_fwalk_reent+0x24>
 8020318:	6824      	ldr	r4, [r4, #0]
 802031a:	2c00      	cmp	r4, #0
 802031c:	d1f7      	bne.n	802030e <_fwalk_reent+0xe>
 802031e:	4638      	mov	r0, r7
 8020320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020324:	89ab      	ldrh	r3, [r5, #12]
 8020326:	2b01      	cmp	r3, #1
 8020328:	d907      	bls.n	802033a <_fwalk_reent+0x3a>
 802032a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802032e:	3301      	adds	r3, #1
 8020330:	d003      	beq.n	802033a <_fwalk_reent+0x3a>
 8020332:	4629      	mov	r1, r5
 8020334:	4630      	mov	r0, r6
 8020336:	47c0      	blx	r8
 8020338:	4307      	orrs	r7, r0
 802033a:	3568      	adds	r5, #104	; 0x68
 802033c:	e7e9      	b.n	8020312 <_fwalk_reent+0x12>
	...

08020340 <__libc_init_array>:
 8020340:	b570      	push	{r4, r5, r6, lr}
 8020342:	4d0d      	ldr	r5, [pc, #52]	; (8020378 <__libc_init_array+0x38>)
 8020344:	4c0d      	ldr	r4, [pc, #52]	; (802037c <__libc_init_array+0x3c>)
 8020346:	1b64      	subs	r4, r4, r5
 8020348:	10a4      	asrs	r4, r4, #2
 802034a:	2600      	movs	r6, #0
 802034c:	42a6      	cmp	r6, r4
 802034e:	d109      	bne.n	8020364 <__libc_init_array+0x24>
 8020350:	4d0b      	ldr	r5, [pc, #44]	; (8020380 <__libc_init_array+0x40>)
 8020352:	4c0c      	ldr	r4, [pc, #48]	; (8020384 <__libc_init_array+0x44>)
 8020354:	f003 f8d6 	bl	8023504 <_init>
 8020358:	1b64      	subs	r4, r4, r5
 802035a:	10a4      	asrs	r4, r4, #2
 802035c:	2600      	movs	r6, #0
 802035e:	42a6      	cmp	r6, r4
 8020360:	d105      	bne.n	802036e <__libc_init_array+0x2e>
 8020362:	bd70      	pop	{r4, r5, r6, pc}
 8020364:	f855 3b04 	ldr.w	r3, [r5], #4
 8020368:	4798      	blx	r3
 802036a:	3601      	adds	r6, #1
 802036c:	e7ee      	b.n	802034c <__libc_init_array+0xc>
 802036e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020372:	4798      	blx	r3
 8020374:	3601      	adds	r6, #1
 8020376:	e7f2      	b.n	802035e <__libc_init_array+0x1e>
 8020378:	08029ae8 	.word	0x08029ae8
 802037c:	08029ae8 	.word	0x08029ae8
 8020380:	08029ae8 	.word	0x08029ae8
 8020384:	08029af8 	.word	0x08029af8

08020388 <localtime>:
 8020388:	b538      	push	{r3, r4, r5, lr}
 802038a:	4b0b      	ldr	r3, [pc, #44]	; (80203b8 <localtime+0x30>)
 802038c:	681d      	ldr	r5, [r3, #0]
 802038e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8020390:	4604      	mov	r4, r0
 8020392:	b953      	cbnz	r3, 80203aa <localtime+0x22>
 8020394:	2024      	movs	r0, #36	; 0x24
 8020396:	f000 f975 	bl	8020684 <malloc>
 802039a:	4602      	mov	r2, r0
 802039c:	63e8      	str	r0, [r5, #60]	; 0x3c
 802039e:	b920      	cbnz	r0, 80203aa <localtime+0x22>
 80203a0:	4b06      	ldr	r3, [pc, #24]	; (80203bc <localtime+0x34>)
 80203a2:	4807      	ldr	r0, [pc, #28]	; (80203c0 <localtime+0x38>)
 80203a4:	2132      	movs	r1, #50	; 0x32
 80203a6:	f001 fdd9 	bl	8021f5c <__assert_func>
 80203aa:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80203ac:	4620      	mov	r0, r4
 80203ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80203b2:	f000 b807 	b.w	80203c4 <localtime_r>
 80203b6:	bf00      	nop
 80203b8:	20000108 	.word	0x20000108
 80203bc:	08029554 	.word	0x08029554
 80203c0:	0802956b 	.word	0x0802956b

080203c4 <localtime_r>:
 80203c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80203c8:	4607      	mov	r7, r0
 80203ca:	9101      	str	r1, [sp, #4]
 80203cc:	f001 fe90 	bl	80220f0 <__gettzinfo>
 80203d0:	9901      	ldr	r1, [sp, #4]
 80203d2:	4680      	mov	r8, r0
 80203d4:	4638      	mov	r0, r7
 80203d6:	f001 fe8f 	bl	80220f8 <gmtime_r>
 80203da:	6943      	ldr	r3, [r0, #20]
 80203dc:	079a      	lsls	r2, r3, #30
 80203de:	4604      	mov	r4, r0
 80203e0:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80203e4:	d105      	bne.n	80203f2 <localtime_r+0x2e>
 80203e6:	2264      	movs	r2, #100	; 0x64
 80203e8:	fb96 f3f2 	sdiv	r3, r6, r2
 80203ec:	fb02 6313 	mls	r3, r2, r3, r6
 80203f0:	bb7b      	cbnz	r3, 8020452 <localtime_r+0x8e>
 80203f2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80203f6:	fb96 f5f3 	sdiv	r5, r6, r3
 80203fa:	fb03 6515 	mls	r5, r3, r5, r6
 80203fe:	fab5 f585 	clz	r5, r5
 8020402:	096d      	lsrs	r5, r5, #5
 8020404:	4b68      	ldr	r3, [pc, #416]	; (80205a8 <localtime_r+0x1e4>)
 8020406:	2230      	movs	r2, #48	; 0x30
 8020408:	fb02 3505 	mla	r5, r2, r5, r3
 802040c:	f001 faa6 	bl	802195c <__tz_lock>
 8020410:	f001 fab0 	bl	8021974 <_tzset_unlocked>
 8020414:	4b65      	ldr	r3, [pc, #404]	; (80205ac <localtime_r+0x1e8>)
 8020416:	681b      	ldr	r3, [r3, #0]
 8020418:	b353      	cbz	r3, 8020470 <localtime_r+0xac>
 802041a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802041e:	42b3      	cmp	r3, r6
 8020420:	d119      	bne.n	8020456 <localtime_r+0x92>
 8020422:	f8d8 1000 	ldr.w	r1, [r8]
 8020426:	e9d7 6700 	ldrd	r6, r7, [r7]
 802042a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 802042e:	b9d1      	cbnz	r1, 8020466 <localtime_r+0xa2>
 8020430:	4296      	cmp	r6, r2
 8020432:	eb77 0303 	sbcs.w	r3, r7, r3
 8020436:	da23      	bge.n	8020480 <localtime_r+0xbc>
 8020438:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 802043c:	4296      	cmp	r6, r2
 802043e:	eb77 0303 	sbcs.w	r3, r7, r3
 8020442:	bfb4      	ite	lt
 8020444:	2301      	movlt	r3, #1
 8020446:	2300      	movge	r3, #0
 8020448:	6223      	str	r3, [r4, #32]
 802044a:	db1b      	blt.n	8020484 <localtime_r+0xc0>
 802044c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8020450:	e01a      	b.n	8020488 <localtime_r+0xc4>
 8020452:	2501      	movs	r5, #1
 8020454:	e7d6      	b.n	8020404 <localtime_r+0x40>
 8020456:	4630      	mov	r0, r6
 8020458:	f001 f9d8 	bl	802180c <__tzcalc_limits>
 802045c:	2800      	cmp	r0, #0
 802045e:	d1e0      	bne.n	8020422 <localtime_r+0x5e>
 8020460:	f04f 33ff 	mov.w	r3, #4294967295
 8020464:	e004      	b.n	8020470 <localtime_r+0xac>
 8020466:	4296      	cmp	r6, r2
 8020468:	eb77 0303 	sbcs.w	r3, r7, r3
 802046c:	da02      	bge.n	8020474 <localtime_r+0xb0>
 802046e:	2300      	movs	r3, #0
 8020470:	6223      	str	r3, [r4, #32]
 8020472:	e7eb      	b.n	802044c <localtime_r+0x88>
 8020474:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8020478:	4296      	cmp	r6, r2
 802047a:	eb77 0303 	sbcs.w	r3, r7, r3
 802047e:	daf6      	bge.n	802046e <localtime_r+0xaa>
 8020480:	2301      	movs	r3, #1
 8020482:	6223      	str	r3, [r4, #32]
 8020484:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8020488:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802048c:	203c      	movs	r0, #60	; 0x3c
 802048e:	fb91 f6f3 	sdiv	r6, r1, r3
 8020492:	fb03 1316 	mls	r3, r3, r6, r1
 8020496:	6861      	ldr	r1, [r4, #4]
 8020498:	fb93 f2f0 	sdiv	r2, r3, r0
 802049c:	fb00 3012 	mls	r0, r0, r2, r3
 80204a0:	6823      	ldr	r3, [r4, #0]
 80204a2:	1a89      	subs	r1, r1, r2
 80204a4:	68a2      	ldr	r2, [r4, #8]
 80204a6:	6061      	str	r1, [r4, #4]
 80204a8:	1a1b      	subs	r3, r3, r0
 80204aa:	1b92      	subs	r2, r2, r6
 80204ac:	2b3b      	cmp	r3, #59	; 0x3b
 80204ae:	6023      	str	r3, [r4, #0]
 80204b0:	60a2      	str	r2, [r4, #8]
 80204b2:	dd35      	ble.n	8020520 <localtime_r+0x15c>
 80204b4:	3101      	adds	r1, #1
 80204b6:	6061      	str	r1, [r4, #4]
 80204b8:	3b3c      	subs	r3, #60	; 0x3c
 80204ba:	6023      	str	r3, [r4, #0]
 80204bc:	6863      	ldr	r3, [r4, #4]
 80204be:	2b3b      	cmp	r3, #59	; 0x3b
 80204c0:	dd34      	ble.n	802052c <localtime_r+0x168>
 80204c2:	3201      	adds	r2, #1
 80204c4:	60a2      	str	r2, [r4, #8]
 80204c6:	3b3c      	subs	r3, #60	; 0x3c
 80204c8:	6063      	str	r3, [r4, #4]
 80204ca:	68a3      	ldr	r3, [r4, #8]
 80204cc:	2b17      	cmp	r3, #23
 80204ce:	dd33      	ble.n	8020538 <localtime_r+0x174>
 80204d0:	69e2      	ldr	r2, [r4, #28]
 80204d2:	3201      	adds	r2, #1
 80204d4:	61e2      	str	r2, [r4, #28]
 80204d6:	69a2      	ldr	r2, [r4, #24]
 80204d8:	3201      	adds	r2, #1
 80204da:	2a06      	cmp	r2, #6
 80204dc:	bfc8      	it	gt
 80204de:	2200      	movgt	r2, #0
 80204e0:	61a2      	str	r2, [r4, #24]
 80204e2:	68e2      	ldr	r2, [r4, #12]
 80204e4:	3b18      	subs	r3, #24
 80204e6:	3201      	adds	r2, #1
 80204e8:	60a3      	str	r3, [r4, #8]
 80204ea:	6923      	ldr	r3, [r4, #16]
 80204ec:	60e2      	str	r2, [r4, #12]
 80204ee:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80204f2:	428a      	cmp	r2, r1
 80204f4:	dd0e      	ble.n	8020514 <localtime_r+0x150>
 80204f6:	2b0b      	cmp	r3, #11
 80204f8:	eba2 0201 	sub.w	r2, r2, r1
 80204fc:	60e2      	str	r2, [r4, #12]
 80204fe:	f103 0201 	add.w	r2, r3, #1
 8020502:	bf09      	itett	eq
 8020504:	6963      	ldreq	r3, [r4, #20]
 8020506:	6122      	strne	r2, [r4, #16]
 8020508:	2200      	moveq	r2, #0
 802050a:	3301      	addeq	r3, #1
 802050c:	bf02      	ittt	eq
 802050e:	6122      	streq	r2, [r4, #16]
 8020510:	6163      	streq	r3, [r4, #20]
 8020512:	61e2      	streq	r2, [r4, #28]
 8020514:	f001 fa28 	bl	8021968 <__tz_unlock>
 8020518:	4620      	mov	r0, r4
 802051a:	b002      	add	sp, #8
 802051c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020520:	2b00      	cmp	r3, #0
 8020522:	dacb      	bge.n	80204bc <localtime_r+0xf8>
 8020524:	3901      	subs	r1, #1
 8020526:	6061      	str	r1, [r4, #4]
 8020528:	333c      	adds	r3, #60	; 0x3c
 802052a:	e7c6      	b.n	80204ba <localtime_r+0xf6>
 802052c:	2b00      	cmp	r3, #0
 802052e:	dacc      	bge.n	80204ca <localtime_r+0x106>
 8020530:	3a01      	subs	r2, #1
 8020532:	60a2      	str	r2, [r4, #8]
 8020534:	333c      	adds	r3, #60	; 0x3c
 8020536:	e7c7      	b.n	80204c8 <localtime_r+0x104>
 8020538:	2b00      	cmp	r3, #0
 802053a:	daeb      	bge.n	8020514 <localtime_r+0x150>
 802053c:	69e2      	ldr	r2, [r4, #28]
 802053e:	3a01      	subs	r2, #1
 8020540:	61e2      	str	r2, [r4, #28]
 8020542:	69a2      	ldr	r2, [r4, #24]
 8020544:	3a01      	subs	r2, #1
 8020546:	bf48      	it	mi
 8020548:	2206      	movmi	r2, #6
 802054a:	61a2      	str	r2, [r4, #24]
 802054c:	68e2      	ldr	r2, [r4, #12]
 802054e:	3318      	adds	r3, #24
 8020550:	3a01      	subs	r2, #1
 8020552:	60e2      	str	r2, [r4, #12]
 8020554:	60a3      	str	r3, [r4, #8]
 8020556:	2a00      	cmp	r2, #0
 8020558:	d1dc      	bne.n	8020514 <localtime_r+0x150>
 802055a:	6923      	ldr	r3, [r4, #16]
 802055c:	3b01      	subs	r3, #1
 802055e:	d405      	bmi.n	802056c <localtime_r+0x1a8>
 8020560:	6123      	str	r3, [r4, #16]
 8020562:	6923      	ldr	r3, [r4, #16]
 8020564:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020568:	60e3      	str	r3, [r4, #12]
 802056a:	e7d3      	b.n	8020514 <localtime_r+0x150>
 802056c:	230b      	movs	r3, #11
 802056e:	6123      	str	r3, [r4, #16]
 8020570:	6963      	ldr	r3, [r4, #20]
 8020572:	1e5a      	subs	r2, r3, #1
 8020574:	6162      	str	r2, [r4, #20]
 8020576:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 802057a:	0793      	lsls	r3, r2, #30
 802057c:	d105      	bne.n	802058a <localtime_r+0x1c6>
 802057e:	2164      	movs	r1, #100	; 0x64
 8020580:	fb92 f3f1 	sdiv	r3, r2, r1
 8020584:	fb01 2313 	mls	r3, r1, r3, r2
 8020588:	b963      	cbnz	r3, 80205a4 <localtime_r+0x1e0>
 802058a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802058e:	fb92 f3f1 	sdiv	r3, r2, r1
 8020592:	fb01 2313 	mls	r3, r1, r3, r2
 8020596:	fab3 f383 	clz	r3, r3
 802059a:	095b      	lsrs	r3, r3, #5
 802059c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80205a0:	61e3      	str	r3, [r4, #28]
 80205a2:	e7de      	b.n	8020562 <localtime_r+0x19e>
 80205a4:	2301      	movs	r3, #1
 80205a6:	e7f9      	b.n	802059c <localtime_r+0x1d8>
 80205a8:	080295cc 	.word	0x080295cc
 80205ac:	20000eec 	.word	0x20000eec

080205b0 <__retarget_lock_init_recursive>:
 80205b0:	4770      	bx	lr

080205b2 <__retarget_lock_close_recursive>:
 80205b2:	4770      	bx	lr

080205b4 <__retarget_lock_acquire>:
 80205b4:	4770      	bx	lr

080205b6 <__retarget_lock_acquire_recursive>:
 80205b6:	4770      	bx	lr

080205b8 <__retarget_lock_release>:
 80205b8:	4770      	bx	lr

080205ba <__retarget_lock_release_recursive>:
 80205ba:	4770      	bx	lr

080205bc <__swhatbuf_r>:
 80205bc:	b570      	push	{r4, r5, r6, lr}
 80205be:	460e      	mov	r6, r1
 80205c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80205c4:	2900      	cmp	r1, #0
 80205c6:	b096      	sub	sp, #88	; 0x58
 80205c8:	4614      	mov	r4, r2
 80205ca:	461d      	mov	r5, r3
 80205cc:	da07      	bge.n	80205de <__swhatbuf_r+0x22>
 80205ce:	2300      	movs	r3, #0
 80205d0:	602b      	str	r3, [r5, #0]
 80205d2:	89b3      	ldrh	r3, [r6, #12]
 80205d4:	061a      	lsls	r2, r3, #24
 80205d6:	d410      	bmi.n	80205fa <__swhatbuf_r+0x3e>
 80205d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80205dc:	e00e      	b.n	80205fc <__swhatbuf_r+0x40>
 80205de:	466a      	mov	r2, sp
 80205e0:	f001 fd32 	bl	8022048 <_fstat_r>
 80205e4:	2800      	cmp	r0, #0
 80205e6:	dbf2      	blt.n	80205ce <__swhatbuf_r+0x12>
 80205e8:	9a01      	ldr	r2, [sp, #4]
 80205ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80205ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80205f2:	425a      	negs	r2, r3
 80205f4:	415a      	adcs	r2, r3
 80205f6:	602a      	str	r2, [r5, #0]
 80205f8:	e7ee      	b.n	80205d8 <__swhatbuf_r+0x1c>
 80205fa:	2340      	movs	r3, #64	; 0x40
 80205fc:	2000      	movs	r0, #0
 80205fe:	6023      	str	r3, [r4, #0]
 8020600:	b016      	add	sp, #88	; 0x58
 8020602:	bd70      	pop	{r4, r5, r6, pc}

08020604 <__smakebuf_r>:
 8020604:	898b      	ldrh	r3, [r1, #12]
 8020606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020608:	079d      	lsls	r5, r3, #30
 802060a:	4606      	mov	r6, r0
 802060c:	460c      	mov	r4, r1
 802060e:	d507      	bpl.n	8020620 <__smakebuf_r+0x1c>
 8020610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020614:	6023      	str	r3, [r4, #0]
 8020616:	6123      	str	r3, [r4, #16]
 8020618:	2301      	movs	r3, #1
 802061a:	6163      	str	r3, [r4, #20]
 802061c:	b002      	add	sp, #8
 802061e:	bd70      	pop	{r4, r5, r6, pc}
 8020620:	ab01      	add	r3, sp, #4
 8020622:	466a      	mov	r2, sp
 8020624:	f7ff ffca 	bl	80205bc <__swhatbuf_r>
 8020628:	9900      	ldr	r1, [sp, #0]
 802062a:	4605      	mov	r5, r0
 802062c:	4630      	mov	r0, r6
 802062e:	f000 f8af 	bl	8020790 <_malloc_r>
 8020632:	b948      	cbnz	r0, 8020648 <__smakebuf_r+0x44>
 8020634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020638:	059a      	lsls	r2, r3, #22
 802063a:	d4ef      	bmi.n	802061c <__smakebuf_r+0x18>
 802063c:	f023 0303 	bic.w	r3, r3, #3
 8020640:	f043 0302 	orr.w	r3, r3, #2
 8020644:	81a3      	strh	r3, [r4, #12]
 8020646:	e7e3      	b.n	8020610 <__smakebuf_r+0xc>
 8020648:	4b0d      	ldr	r3, [pc, #52]	; (8020680 <__smakebuf_r+0x7c>)
 802064a:	62b3      	str	r3, [r6, #40]	; 0x28
 802064c:	89a3      	ldrh	r3, [r4, #12]
 802064e:	6020      	str	r0, [r4, #0]
 8020650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020654:	81a3      	strh	r3, [r4, #12]
 8020656:	9b00      	ldr	r3, [sp, #0]
 8020658:	6163      	str	r3, [r4, #20]
 802065a:	9b01      	ldr	r3, [sp, #4]
 802065c:	6120      	str	r0, [r4, #16]
 802065e:	b15b      	cbz	r3, 8020678 <__smakebuf_r+0x74>
 8020660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020664:	4630      	mov	r0, r6
 8020666:	f001 fdf7 	bl	8022258 <_isatty_r>
 802066a:	b128      	cbz	r0, 8020678 <__smakebuf_r+0x74>
 802066c:	89a3      	ldrh	r3, [r4, #12]
 802066e:	f023 0303 	bic.w	r3, r3, #3
 8020672:	f043 0301 	orr.w	r3, r3, #1
 8020676:	81a3      	strh	r3, [r4, #12]
 8020678:	89a0      	ldrh	r0, [r4, #12]
 802067a:	4305      	orrs	r5, r0
 802067c:	81a5      	strh	r5, [r4, #12]
 802067e:	e7cd      	b.n	802061c <__smakebuf_r+0x18>
 8020680:	0801fde9 	.word	0x0801fde9

08020684 <malloc>:
 8020684:	4b02      	ldr	r3, [pc, #8]	; (8020690 <malloc+0xc>)
 8020686:	4601      	mov	r1, r0
 8020688:	6818      	ldr	r0, [r3, #0]
 802068a:	f000 b881 	b.w	8020790 <_malloc_r>
 802068e:	bf00      	nop
 8020690:	20000108 	.word	0x20000108

08020694 <free>:
 8020694:	4b02      	ldr	r3, [pc, #8]	; (80206a0 <free+0xc>)
 8020696:	4601      	mov	r1, r0
 8020698:	6818      	ldr	r0, [r3, #0]
 802069a:	f000 b829 	b.w	80206f0 <_free_r>
 802069e:	bf00      	nop
 80206a0:	20000108 	.word	0x20000108

080206a4 <memcpy>:
 80206a4:	440a      	add	r2, r1
 80206a6:	4291      	cmp	r1, r2
 80206a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80206ac:	d100      	bne.n	80206b0 <memcpy+0xc>
 80206ae:	4770      	bx	lr
 80206b0:	b510      	push	{r4, lr}
 80206b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80206b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80206ba:	4291      	cmp	r1, r2
 80206bc:	d1f9      	bne.n	80206b2 <memcpy+0xe>
 80206be:	bd10      	pop	{r4, pc}

080206c0 <memset>:
 80206c0:	4402      	add	r2, r0
 80206c2:	4603      	mov	r3, r0
 80206c4:	4293      	cmp	r3, r2
 80206c6:	d100      	bne.n	80206ca <memset+0xa>
 80206c8:	4770      	bx	lr
 80206ca:	f803 1b01 	strb.w	r1, [r3], #1
 80206ce:	e7f9      	b.n	80206c4 <memset+0x4>

080206d0 <_calloc_r>:
 80206d0:	b513      	push	{r0, r1, r4, lr}
 80206d2:	434a      	muls	r2, r1
 80206d4:	4611      	mov	r1, r2
 80206d6:	9201      	str	r2, [sp, #4]
 80206d8:	f000 f85a 	bl	8020790 <_malloc_r>
 80206dc:	4604      	mov	r4, r0
 80206de:	b118      	cbz	r0, 80206e8 <_calloc_r+0x18>
 80206e0:	9a01      	ldr	r2, [sp, #4]
 80206e2:	2100      	movs	r1, #0
 80206e4:	f7ff ffec 	bl	80206c0 <memset>
 80206e8:	4620      	mov	r0, r4
 80206ea:	b002      	add	sp, #8
 80206ec:	bd10      	pop	{r4, pc}
	...

080206f0 <_free_r>:
 80206f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80206f2:	2900      	cmp	r1, #0
 80206f4:	d048      	beq.n	8020788 <_free_r+0x98>
 80206f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80206fa:	9001      	str	r0, [sp, #4]
 80206fc:	2b00      	cmp	r3, #0
 80206fe:	f1a1 0404 	sub.w	r4, r1, #4
 8020702:	bfb8      	it	lt
 8020704:	18e4      	addlt	r4, r4, r3
 8020706:	f001 fddf 	bl	80222c8 <__malloc_lock>
 802070a:	4a20      	ldr	r2, [pc, #128]	; (802078c <_free_r+0x9c>)
 802070c:	9801      	ldr	r0, [sp, #4]
 802070e:	6813      	ldr	r3, [r2, #0]
 8020710:	4615      	mov	r5, r2
 8020712:	b933      	cbnz	r3, 8020722 <_free_r+0x32>
 8020714:	6063      	str	r3, [r4, #4]
 8020716:	6014      	str	r4, [r2, #0]
 8020718:	b003      	add	sp, #12
 802071a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802071e:	f001 bdd9 	b.w	80222d4 <__malloc_unlock>
 8020722:	42a3      	cmp	r3, r4
 8020724:	d90b      	bls.n	802073e <_free_r+0x4e>
 8020726:	6821      	ldr	r1, [r4, #0]
 8020728:	1862      	adds	r2, r4, r1
 802072a:	4293      	cmp	r3, r2
 802072c:	bf04      	itt	eq
 802072e:	681a      	ldreq	r2, [r3, #0]
 8020730:	685b      	ldreq	r3, [r3, #4]
 8020732:	6063      	str	r3, [r4, #4]
 8020734:	bf04      	itt	eq
 8020736:	1852      	addeq	r2, r2, r1
 8020738:	6022      	streq	r2, [r4, #0]
 802073a:	602c      	str	r4, [r5, #0]
 802073c:	e7ec      	b.n	8020718 <_free_r+0x28>
 802073e:	461a      	mov	r2, r3
 8020740:	685b      	ldr	r3, [r3, #4]
 8020742:	b10b      	cbz	r3, 8020748 <_free_r+0x58>
 8020744:	42a3      	cmp	r3, r4
 8020746:	d9fa      	bls.n	802073e <_free_r+0x4e>
 8020748:	6811      	ldr	r1, [r2, #0]
 802074a:	1855      	adds	r5, r2, r1
 802074c:	42a5      	cmp	r5, r4
 802074e:	d10b      	bne.n	8020768 <_free_r+0x78>
 8020750:	6824      	ldr	r4, [r4, #0]
 8020752:	4421      	add	r1, r4
 8020754:	1854      	adds	r4, r2, r1
 8020756:	42a3      	cmp	r3, r4
 8020758:	6011      	str	r1, [r2, #0]
 802075a:	d1dd      	bne.n	8020718 <_free_r+0x28>
 802075c:	681c      	ldr	r4, [r3, #0]
 802075e:	685b      	ldr	r3, [r3, #4]
 8020760:	6053      	str	r3, [r2, #4]
 8020762:	4421      	add	r1, r4
 8020764:	6011      	str	r1, [r2, #0]
 8020766:	e7d7      	b.n	8020718 <_free_r+0x28>
 8020768:	d902      	bls.n	8020770 <_free_r+0x80>
 802076a:	230c      	movs	r3, #12
 802076c:	6003      	str	r3, [r0, #0]
 802076e:	e7d3      	b.n	8020718 <_free_r+0x28>
 8020770:	6825      	ldr	r5, [r4, #0]
 8020772:	1961      	adds	r1, r4, r5
 8020774:	428b      	cmp	r3, r1
 8020776:	bf04      	itt	eq
 8020778:	6819      	ldreq	r1, [r3, #0]
 802077a:	685b      	ldreq	r3, [r3, #4]
 802077c:	6063      	str	r3, [r4, #4]
 802077e:	bf04      	itt	eq
 8020780:	1949      	addeq	r1, r1, r5
 8020782:	6021      	streq	r1, [r4, #0]
 8020784:	6054      	str	r4, [r2, #4]
 8020786:	e7c7      	b.n	8020718 <_free_r+0x28>
 8020788:	b003      	add	sp, #12
 802078a:	bd30      	pop	{r4, r5, pc}
 802078c:	20000ec8 	.word	0x20000ec8

08020790 <_malloc_r>:
 8020790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020792:	1ccd      	adds	r5, r1, #3
 8020794:	f025 0503 	bic.w	r5, r5, #3
 8020798:	3508      	adds	r5, #8
 802079a:	2d0c      	cmp	r5, #12
 802079c:	bf38      	it	cc
 802079e:	250c      	movcc	r5, #12
 80207a0:	2d00      	cmp	r5, #0
 80207a2:	4606      	mov	r6, r0
 80207a4:	db01      	blt.n	80207aa <_malloc_r+0x1a>
 80207a6:	42a9      	cmp	r1, r5
 80207a8:	d903      	bls.n	80207b2 <_malloc_r+0x22>
 80207aa:	230c      	movs	r3, #12
 80207ac:	6033      	str	r3, [r6, #0]
 80207ae:	2000      	movs	r0, #0
 80207b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80207b2:	f001 fd89 	bl	80222c8 <__malloc_lock>
 80207b6:	4921      	ldr	r1, [pc, #132]	; (802083c <_malloc_r+0xac>)
 80207b8:	680a      	ldr	r2, [r1, #0]
 80207ba:	4614      	mov	r4, r2
 80207bc:	b99c      	cbnz	r4, 80207e6 <_malloc_r+0x56>
 80207be:	4f20      	ldr	r7, [pc, #128]	; (8020840 <_malloc_r+0xb0>)
 80207c0:	683b      	ldr	r3, [r7, #0]
 80207c2:	b923      	cbnz	r3, 80207ce <_malloc_r+0x3e>
 80207c4:	4621      	mov	r1, r4
 80207c6:	4630      	mov	r0, r6
 80207c8:	f000 f8da 	bl	8020980 <_sbrk_r>
 80207cc:	6038      	str	r0, [r7, #0]
 80207ce:	4629      	mov	r1, r5
 80207d0:	4630      	mov	r0, r6
 80207d2:	f000 f8d5 	bl	8020980 <_sbrk_r>
 80207d6:	1c43      	adds	r3, r0, #1
 80207d8:	d123      	bne.n	8020822 <_malloc_r+0x92>
 80207da:	230c      	movs	r3, #12
 80207dc:	6033      	str	r3, [r6, #0]
 80207de:	4630      	mov	r0, r6
 80207e0:	f001 fd78 	bl	80222d4 <__malloc_unlock>
 80207e4:	e7e3      	b.n	80207ae <_malloc_r+0x1e>
 80207e6:	6823      	ldr	r3, [r4, #0]
 80207e8:	1b5b      	subs	r3, r3, r5
 80207ea:	d417      	bmi.n	802081c <_malloc_r+0x8c>
 80207ec:	2b0b      	cmp	r3, #11
 80207ee:	d903      	bls.n	80207f8 <_malloc_r+0x68>
 80207f0:	6023      	str	r3, [r4, #0]
 80207f2:	441c      	add	r4, r3
 80207f4:	6025      	str	r5, [r4, #0]
 80207f6:	e004      	b.n	8020802 <_malloc_r+0x72>
 80207f8:	6863      	ldr	r3, [r4, #4]
 80207fa:	42a2      	cmp	r2, r4
 80207fc:	bf0c      	ite	eq
 80207fe:	600b      	streq	r3, [r1, #0]
 8020800:	6053      	strne	r3, [r2, #4]
 8020802:	4630      	mov	r0, r6
 8020804:	f001 fd66 	bl	80222d4 <__malloc_unlock>
 8020808:	f104 000b 	add.w	r0, r4, #11
 802080c:	1d23      	adds	r3, r4, #4
 802080e:	f020 0007 	bic.w	r0, r0, #7
 8020812:	1ac2      	subs	r2, r0, r3
 8020814:	d0cc      	beq.n	80207b0 <_malloc_r+0x20>
 8020816:	1a1b      	subs	r3, r3, r0
 8020818:	50a3      	str	r3, [r4, r2]
 802081a:	e7c9      	b.n	80207b0 <_malloc_r+0x20>
 802081c:	4622      	mov	r2, r4
 802081e:	6864      	ldr	r4, [r4, #4]
 8020820:	e7cc      	b.n	80207bc <_malloc_r+0x2c>
 8020822:	1cc4      	adds	r4, r0, #3
 8020824:	f024 0403 	bic.w	r4, r4, #3
 8020828:	42a0      	cmp	r0, r4
 802082a:	d0e3      	beq.n	80207f4 <_malloc_r+0x64>
 802082c:	1a21      	subs	r1, r4, r0
 802082e:	4630      	mov	r0, r6
 8020830:	f000 f8a6 	bl	8020980 <_sbrk_r>
 8020834:	3001      	adds	r0, #1
 8020836:	d1dd      	bne.n	80207f4 <_malloc_r+0x64>
 8020838:	e7cf      	b.n	80207da <_malloc_r+0x4a>
 802083a:	bf00      	nop
 802083c:	20000ec8 	.word	0x20000ec8
 8020840:	20000ecc 	.word	0x20000ecc

08020844 <_open_r>:
 8020844:	b538      	push	{r3, r4, r5, lr}
 8020846:	4d07      	ldr	r5, [pc, #28]	; (8020864 <_open_r+0x20>)
 8020848:	4604      	mov	r4, r0
 802084a:	4608      	mov	r0, r1
 802084c:	4611      	mov	r1, r2
 802084e:	2200      	movs	r2, #0
 8020850:	602a      	str	r2, [r5, #0]
 8020852:	461a      	mov	r2, r3
 8020854:	f7e0 fb0c 	bl	8000e70 <_open>
 8020858:	1c43      	adds	r3, r0, #1
 802085a:	d102      	bne.n	8020862 <_open_r+0x1e>
 802085c:	682b      	ldr	r3, [r5, #0]
 802085e:	b103      	cbz	r3, 8020862 <_open_r+0x1e>
 8020860:	6023      	str	r3, [r4, #0]
 8020862:	bd38      	pop	{r3, r4, r5, pc}
 8020864:	20000f94 	.word	0x20000f94

08020868 <putchar>:
 8020868:	4b09      	ldr	r3, [pc, #36]	; (8020890 <putchar+0x28>)
 802086a:	b513      	push	{r0, r1, r4, lr}
 802086c:	681c      	ldr	r4, [r3, #0]
 802086e:	4601      	mov	r1, r0
 8020870:	b134      	cbz	r4, 8020880 <putchar+0x18>
 8020872:	69a3      	ldr	r3, [r4, #24]
 8020874:	b923      	cbnz	r3, 8020880 <putchar+0x18>
 8020876:	9001      	str	r0, [sp, #4]
 8020878:	4620      	mov	r0, r4
 802087a:	f7ff fae9 	bl	801fe50 <__sinit>
 802087e:	9901      	ldr	r1, [sp, #4]
 8020880:	68a2      	ldr	r2, [r4, #8]
 8020882:	4620      	mov	r0, r4
 8020884:	b002      	add	sp, #8
 8020886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802088a:	f002 b999 	b.w	8022bc0 <_putc_r>
 802088e:	bf00      	nop
 8020890:	20000108 	.word	0x20000108

08020894 <srand>:
 8020894:	b538      	push	{r3, r4, r5, lr}
 8020896:	4b10      	ldr	r3, [pc, #64]	; (80208d8 <srand+0x44>)
 8020898:	681d      	ldr	r5, [r3, #0]
 802089a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802089c:	4604      	mov	r4, r0
 802089e:	b9b3      	cbnz	r3, 80208ce <srand+0x3a>
 80208a0:	2018      	movs	r0, #24
 80208a2:	f7ff feef 	bl	8020684 <malloc>
 80208a6:	4602      	mov	r2, r0
 80208a8:	63a8      	str	r0, [r5, #56]	; 0x38
 80208aa:	b920      	cbnz	r0, 80208b6 <srand+0x22>
 80208ac:	4b0b      	ldr	r3, [pc, #44]	; (80208dc <srand+0x48>)
 80208ae:	480c      	ldr	r0, [pc, #48]	; (80208e0 <srand+0x4c>)
 80208b0:	2142      	movs	r1, #66	; 0x42
 80208b2:	f001 fb53 	bl	8021f5c <__assert_func>
 80208b6:	490b      	ldr	r1, [pc, #44]	; (80208e4 <srand+0x50>)
 80208b8:	4b0b      	ldr	r3, [pc, #44]	; (80208e8 <srand+0x54>)
 80208ba:	e9c0 1300 	strd	r1, r3, [r0]
 80208be:	4b0b      	ldr	r3, [pc, #44]	; (80208ec <srand+0x58>)
 80208c0:	6083      	str	r3, [r0, #8]
 80208c2:	230b      	movs	r3, #11
 80208c4:	8183      	strh	r3, [r0, #12]
 80208c6:	2100      	movs	r1, #0
 80208c8:	2001      	movs	r0, #1
 80208ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80208ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80208d0:	2200      	movs	r2, #0
 80208d2:	611c      	str	r4, [r3, #16]
 80208d4:	615a      	str	r2, [r3, #20]
 80208d6:	bd38      	pop	{r3, r4, r5, pc}
 80208d8:	20000108 	.word	0x20000108
 80208dc:	08029554 	.word	0x08029554
 80208e0:	0802962c 	.word	0x0802962c
 80208e4:	abcd330e 	.word	0xabcd330e
 80208e8:	e66d1234 	.word	0xe66d1234
 80208ec:	0005deec 	.word	0x0005deec

080208f0 <rand>:
 80208f0:	4b17      	ldr	r3, [pc, #92]	; (8020950 <rand+0x60>)
 80208f2:	b510      	push	{r4, lr}
 80208f4:	681c      	ldr	r4, [r3, #0]
 80208f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80208f8:	b9b3      	cbnz	r3, 8020928 <rand+0x38>
 80208fa:	2018      	movs	r0, #24
 80208fc:	f7ff fec2 	bl	8020684 <malloc>
 8020900:	63a0      	str	r0, [r4, #56]	; 0x38
 8020902:	b928      	cbnz	r0, 8020910 <rand+0x20>
 8020904:	4602      	mov	r2, r0
 8020906:	4b13      	ldr	r3, [pc, #76]	; (8020954 <rand+0x64>)
 8020908:	4813      	ldr	r0, [pc, #76]	; (8020958 <rand+0x68>)
 802090a:	214e      	movs	r1, #78	; 0x4e
 802090c:	f001 fb26 	bl	8021f5c <__assert_func>
 8020910:	4a12      	ldr	r2, [pc, #72]	; (802095c <rand+0x6c>)
 8020912:	4b13      	ldr	r3, [pc, #76]	; (8020960 <rand+0x70>)
 8020914:	e9c0 2300 	strd	r2, r3, [r0]
 8020918:	4b12      	ldr	r3, [pc, #72]	; (8020964 <rand+0x74>)
 802091a:	6083      	str	r3, [r0, #8]
 802091c:	230b      	movs	r3, #11
 802091e:	8183      	strh	r3, [r0, #12]
 8020920:	2201      	movs	r2, #1
 8020922:	2300      	movs	r3, #0
 8020924:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020928:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802092a:	480f      	ldr	r0, [pc, #60]	; (8020968 <rand+0x78>)
 802092c:	690a      	ldr	r2, [r1, #16]
 802092e:	694b      	ldr	r3, [r1, #20]
 8020930:	4c0e      	ldr	r4, [pc, #56]	; (802096c <rand+0x7c>)
 8020932:	4350      	muls	r0, r2
 8020934:	fb04 0003 	mla	r0, r4, r3, r0
 8020938:	fba2 3404 	umull	r3, r4, r2, r4
 802093c:	1c5a      	adds	r2, r3, #1
 802093e:	4404      	add	r4, r0
 8020940:	f144 0000 	adc.w	r0, r4, #0
 8020944:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8020948:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802094c:	bd10      	pop	{r4, pc}
 802094e:	bf00      	nop
 8020950:	20000108 	.word	0x20000108
 8020954:	08029554 	.word	0x08029554
 8020958:	0802962c 	.word	0x0802962c
 802095c:	abcd330e 	.word	0xabcd330e
 8020960:	e66d1234 	.word	0xe66d1234
 8020964:	0005deec 	.word	0x0005deec
 8020968:	5851f42d 	.word	0x5851f42d
 802096c:	4c957f2d 	.word	0x4c957f2d

08020970 <realloc>:
 8020970:	4b02      	ldr	r3, [pc, #8]	; (802097c <realloc+0xc>)
 8020972:	460a      	mov	r2, r1
 8020974:	4601      	mov	r1, r0
 8020976:	6818      	ldr	r0, [r3, #0]
 8020978:	f001 bcb2 	b.w	80222e0 <_realloc_r>
 802097c:	20000108 	.word	0x20000108

08020980 <_sbrk_r>:
 8020980:	b538      	push	{r3, r4, r5, lr}
 8020982:	4d06      	ldr	r5, [pc, #24]	; (802099c <_sbrk_r+0x1c>)
 8020984:	2300      	movs	r3, #0
 8020986:	4604      	mov	r4, r0
 8020988:	4608      	mov	r0, r1
 802098a:	602b      	str	r3, [r5, #0]
 802098c:	f7e0 fa7e 	bl	8000e8c <_sbrk>
 8020990:	1c43      	adds	r3, r0, #1
 8020992:	d102      	bne.n	802099a <_sbrk_r+0x1a>
 8020994:	682b      	ldr	r3, [r5, #0]
 8020996:	b103      	cbz	r3, 802099a <_sbrk_r+0x1a>
 8020998:	6023      	str	r3, [r4, #0]
 802099a:	bd38      	pop	{r3, r4, r5, pc}
 802099c:	20000f94 	.word	0x20000f94

080209a0 <_raise_r>:
 80209a0:	291f      	cmp	r1, #31
 80209a2:	b538      	push	{r3, r4, r5, lr}
 80209a4:	4604      	mov	r4, r0
 80209a6:	460d      	mov	r5, r1
 80209a8:	d904      	bls.n	80209b4 <_raise_r+0x14>
 80209aa:	2316      	movs	r3, #22
 80209ac:	6003      	str	r3, [r0, #0]
 80209ae:	f04f 30ff 	mov.w	r0, #4294967295
 80209b2:	bd38      	pop	{r3, r4, r5, pc}
 80209b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80209b6:	b112      	cbz	r2, 80209be <_raise_r+0x1e>
 80209b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80209bc:	b94b      	cbnz	r3, 80209d2 <_raise_r+0x32>
 80209be:	4620      	mov	r0, r4
 80209c0:	f000 f830 	bl	8020a24 <_getpid_r>
 80209c4:	462a      	mov	r2, r5
 80209c6:	4601      	mov	r1, r0
 80209c8:	4620      	mov	r0, r4
 80209ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80209ce:	f000 b817 	b.w	8020a00 <_kill_r>
 80209d2:	2b01      	cmp	r3, #1
 80209d4:	d00a      	beq.n	80209ec <_raise_r+0x4c>
 80209d6:	1c59      	adds	r1, r3, #1
 80209d8:	d103      	bne.n	80209e2 <_raise_r+0x42>
 80209da:	2316      	movs	r3, #22
 80209dc:	6003      	str	r3, [r0, #0]
 80209de:	2001      	movs	r0, #1
 80209e0:	e7e7      	b.n	80209b2 <_raise_r+0x12>
 80209e2:	2400      	movs	r4, #0
 80209e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80209e8:	4628      	mov	r0, r5
 80209ea:	4798      	blx	r3
 80209ec:	2000      	movs	r0, #0
 80209ee:	e7e0      	b.n	80209b2 <_raise_r+0x12>

080209f0 <raise>:
 80209f0:	4b02      	ldr	r3, [pc, #8]	; (80209fc <raise+0xc>)
 80209f2:	4601      	mov	r1, r0
 80209f4:	6818      	ldr	r0, [r3, #0]
 80209f6:	f7ff bfd3 	b.w	80209a0 <_raise_r>
 80209fa:	bf00      	nop
 80209fc:	20000108 	.word	0x20000108

08020a00 <_kill_r>:
 8020a00:	b538      	push	{r3, r4, r5, lr}
 8020a02:	4d07      	ldr	r5, [pc, #28]	; (8020a20 <_kill_r+0x20>)
 8020a04:	2300      	movs	r3, #0
 8020a06:	4604      	mov	r4, r0
 8020a08:	4608      	mov	r0, r1
 8020a0a:	4611      	mov	r1, r2
 8020a0c:	602b      	str	r3, [r5, #0]
 8020a0e:	f7e0 f9a8 	bl	8000d62 <_kill>
 8020a12:	1c43      	adds	r3, r0, #1
 8020a14:	d102      	bne.n	8020a1c <_kill_r+0x1c>
 8020a16:	682b      	ldr	r3, [r5, #0]
 8020a18:	b103      	cbz	r3, 8020a1c <_kill_r+0x1c>
 8020a1a:	6023      	str	r3, [r4, #0]
 8020a1c:	bd38      	pop	{r3, r4, r5, pc}
 8020a1e:	bf00      	nop
 8020a20:	20000f94 	.word	0x20000f94

08020a24 <_getpid_r>:
 8020a24:	f7e0 b995 	b.w	8000d52 <_getpid>

08020a28 <siprintf>:
 8020a28:	b40e      	push	{r1, r2, r3}
 8020a2a:	b500      	push	{lr}
 8020a2c:	b09c      	sub	sp, #112	; 0x70
 8020a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8020a30:	9002      	str	r0, [sp, #8]
 8020a32:	9006      	str	r0, [sp, #24]
 8020a34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020a38:	4809      	ldr	r0, [pc, #36]	; (8020a60 <siprintf+0x38>)
 8020a3a:	9107      	str	r1, [sp, #28]
 8020a3c:	9104      	str	r1, [sp, #16]
 8020a3e:	4909      	ldr	r1, [pc, #36]	; (8020a64 <siprintf+0x3c>)
 8020a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a44:	9105      	str	r1, [sp, #20]
 8020a46:	6800      	ldr	r0, [r0, #0]
 8020a48:	9301      	str	r3, [sp, #4]
 8020a4a:	a902      	add	r1, sp, #8
 8020a4c:	f001 fcca 	bl	80223e4 <_svfiprintf_r>
 8020a50:	9b02      	ldr	r3, [sp, #8]
 8020a52:	2200      	movs	r2, #0
 8020a54:	701a      	strb	r2, [r3, #0]
 8020a56:	b01c      	add	sp, #112	; 0x70
 8020a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8020a5c:	b003      	add	sp, #12
 8020a5e:	4770      	bx	lr
 8020a60:	20000108 	.word	0x20000108
 8020a64:	ffff0208 	.word	0xffff0208

08020a68 <__sread>:
 8020a68:	b510      	push	{r4, lr}
 8020a6a:	460c      	mov	r4, r1
 8020a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a70:	f002 f8ee 	bl	8022c50 <_read_r>
 8020a74:	2800      	cmp	r0, #0
 8020a76:	bfab      	itete	ge
 8020a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8020a7c:	181b      	addge	r3, r3, r0
 8020a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020a82:	bfac      	ite	ge
 8020a84:	6563      	strge	r3, [r4, #84]	; 0x54
 8020a86:	81a3      	strhlt	r3, [r4, #12]
 8020a88:	bd10      	pop	{r4, pc}

08020a8a <__seofread>:
 8020a8a:	2000      	movs	r0, #0
 8020a8c:	4770      	bx	lr

08020a8e <__swrite>:
 8020a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a92:	461f      	mov	r7, r3
 8020a94:	898b      	ldrh	r3, [r1, #12]
 8020a96:	05db      	lsls	r3, r3, #23
 8020a98:	4605      	mov	r5, r0
 8020a9a:	460c      	mov	r4, r1
 8020a9c:	4616      	mov	r6, r2
 8020a9e:	d505      	bpl.n	8020aac <__swrite+0x1e>
 8020aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020aa4:	2302      	movs	r3, #2
 8020aa6:	2200      	movs	r2, #0
 8020aa8:	f001 fbea 	bl	8022280 <_lseek_r>
 8020aac:	89a3      	ldrh	r3, [r4, #12]
 8020aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020ab6:	81a3      	strh	r3, [r4, #12]
 8020ab8:	4632      	mov	r2, r6
 8020aba:	463b      	mov	r3, r7
 8020abc:	4628      	mov	r0, r5
 8020abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020ac2:	f001 b965 	b.w	8021d90 <_write_r>

08020ac6 <__sseek>:
 8020ac6:	b510      	push	{r4, lr}
 8020ac8:	460c      	mov	r4, r1
 8020aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ace:	f001 fbd7 	bl	8022280 <_lseek_r>
 8020ad2:	1c43      	adds	r3, r0, #1
 8020ad4:	89a3      	ldrh	r3, [r4, #12]
 8020ad6:	bf15      	itete	ne
 8020ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8020ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020ae2:	81a3      	strheq	r3, [r4, #12]
 8020ae4:	bf18      	it	ne
 8020ae6:	81a3      	strhne	r3, [r4, #12]
 8020ae8:	bd10      	pop	{r4, pc}

08020aea <__sclose>:
 8020aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020aee:	f001 ba53 	b.w	8021f98 <_close_r>
	...

08020af4 <iso_year_adjust>:
 8020af4:	6941      	ldr	r1, [r0, #20]
 8020af6:	2900      	cmp	r1, #0
 8020af8:	f240 736c 	movw	r3, #1900	; 0x76c
 8020afc:	bfa8      	it	ge
 8020afe:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8020b02:	18ca      	adds	r2, r1, r3
 8020b04:	078b      	lsls	r3, r1, #30
 8020b06:	d105      	bne.n	8020b14 <iso_year_adjust+0x20>
 8020b08:	2164      	movs	r1, #100	; 0x64
 8020b0a:	fb92 f3f1 	sdiv	r3, r2, r1
 8020b0e:	fb01 2313 	mls	r3, r1, r3, r2
 8020b12:	b9db      	cbnz	r3, 8020b4c <iso_year_adjust+0x58>
 8020b14:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020b18:	fb92 f3f1 	sdiv	r3, r2, r1
 8020b1c:	fb01 2313 	mls	r3, r1, r3, r2
 8020b20:	fab3 f383 	clz	r3, r3
 8020b24:	095b      	lsrs	r3, r3, #5
 8020b26:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8020b2a:	0040      	lsls	r0, r0, #1
 8020b2c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8020b30:	4418      	add	r0, r3
 8020b32:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8020b36:	4298      	cmp	r0, r3
 8020b38:	d03a      	beq.n	8020bb0 <iso_year_adjust+0xbc>
 8020b3a:	dc21      	bgt.n	8020b80 <iso_year_adjust+0x8c>
 8020b3c:	2801      	cmp	r0, #1
 8020b3e:	dc1a      	bgt.n	8020b76 <iso_year_adjust+0x82>
 8020b40:	2800      	cmp	r0, #0
 8020b42:	bfb4      	ite	lt
 8020b44:	2000      	movlt	r0, #0
 8020b46:	f04f 30ff 	movge.w	r0, #4294967295
 8020b4a:	4770      	bx	lr
 8020b4c:	2301      	movs	r3, #1
 8020b4e:	e7ea      	b.n	8020b26 <iso_year_adjust+0x32>
 8020b50:	2817      	cmp	r0, #23
 8020b52:	d813      	bhi.n	8020b7c <iso_year_adjust+0x88>
 8020b54:	e8df f000 	tbb	[pc, r0]
 8020b58:	0c0c0c0c 	.word	0x0c0c0c0c
 8020b5c:	0c0c1212 	.word	0x0c0c1212
 8020b60:	12121212 	.word	0x12121212
 8020b64:	12121212 	.word	0x12121212
 8020b68:	0c0c1212 	.word	0x0c0c1212
 8020b6c:	0c0c1212 	.word	0x0c0c1212
 8020b70:	f04f 30ff 	mov.w	r0, #4294967295
 8020b74:	4770      	bx	lr
 8020b76:	380a      	subs	r0, #10
 8020b78:	2817      	cmp	r0, #23
 8020b7a:	d9e9      	bls.n	8020b50 <iso_year_adjust+0x5c>
 8020b7c:	2000      	movs	r0, #0
 8020b7e:	4770      	bx	lr
 8020b80:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8020b84:	4298      	cmp	r0, r3
 8020b86:	dc06      	bgt.n	8020b96 <iso_year_adjust+0xa2>
 8020b88:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8020b8c:	4298      	cmp	r0, r3
 8020b8e:	bfd4      	ite	le
 8020b90:	2000      	movle	r0, #0
 8020b92:	2001      	movgt	r0, #1
 8020b94:	4770      	bx	lr
 8020b96:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8020b9a:	3802      	subs	r0, #2
 8020b9c:	2815      	cmp	r0, #21
 8020b9e:	d8ed      	bhi.n	8020b7c <iso_year_adjust+0x88>
 8020ba0:	2301      	movs	r3, #1
 8020ba2:	4083      	lsls	r3, r0
 8020ba4:	4803      	ldr	r0, [pc, #12]	; (8020bb4 <iso_year_adjust+0xc0>)
 8020ba6:	4018      	ands	r0, r3
 8020ba8:	3800      	subs	r0, #0
 8020baa:	bf18      	it	ne
 8020bac:	2001      	movne	r0, #1
 8020bae:	4770      	bx	lr
 8020bb0:	2001      	movs	r0, #1
 8020bb2:	4770      	bx	lr
 8020bb4:	002a001f 	.word	0x002a001f

08020bb8 <__strftime>:
 8020bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bbc:	b091      	sub	sp, #68	; 0x44
 8020bbe:	461d      	mov	r5, r3
 8020bc0:	2300      	movs	r3, #0
 8020bc2:	4681      	mov	r9, r0
 8020bc4:	4688      	mov	r8, r1
 8020bc6:	9304      	str	r3, [sp, #16]
 8020bc8:	461c      	mov	r4, r3
 8020bca:	7813      	ldrb	r3, [r2, #0]
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	f000 84d1 	beq.w	8021574 <__strftime+0x9bc>
 8020bd2:	2b25      	cmp	r3, #37	; 0x25
 8020bd4:	d11b      	bne.n	8020c0e <__strftime+0x56>
 8020bd6:	7857      	ldrb	r7, [r2, #1]
 8020bd8:	2f30      	cmp	r7, #48	; 0x30
 8020bda:	d024      	beq.n	8020c26 <__strftime+0x6e>
 8020bdc:	2f2b      	cmp	r7, #43	; 0x2b
 8020bde:	d022      	beq.n	8020c26 <__strftime+0x6e>
 8020be0:	f102 0b01 	add.w	fp, r2, #1
 8020be4:	2700      	movs	r7, #0
 8020be6:	f89b 3000 	ldrb.w	r3, [fp]
 8020bea:	3b31      	subs	r3, #49	; 0x31
 8020bec:	2b08      	cmp	r3, #8
 8020bee:	d81d      	bhi.n	8020c2c <__strftime+0x74>
 8020bf0:	4658      	mov	r0, fp
 8020bf2:	220a      	movs	r2, #10
 8020bf4:	a908      	add	r1, sp, #32
 8020bf6:	f000 fdff 	bl	80217f8 <strtoul>
 8020bfa:	f8dd b020 	ldr.w	fp, [sp, #32]
 8020bfe:	4606      	mov	r6, r0
 8020c00:	f89b 3000 	ldrb.w	r3, [fp]
 8020c04:	2b45      	cmp	r3, #69	; 0x45
 8020c06:	d113      	bne.n	8020c30 <__strftime+0x78>
 8020c08:	f10b 0b01 	add.w	fp, fp, #1
 8020c0c:	e012      	b.n	8020c34 <__strftime+0x7c>
 8020c0e:	f108 31ff 	add.w	r1, r8, #4294967295
 8020c12:	42a1      	cmp	r1, r4
 8020c14:	d802      	bhi.n	8020c1c <__strftime+0x64>
 8020c16:	2400      	movs	r4, #0
 8020c18:	f000 bcb2 	b.w	8021580 <__strftime+0x9c8>
 8020c1c:	f809 3004 	strb.w	r3, [r9, r4]
 8020c20:	3201      	adds	r2, #1
 8020c22:	3401      	adds	r4, #1
 8020c24:	e7d1      	b.n	8020bca <__strftime+0x12>
 8020c26:	f102 0b02 	add.w	fp, r2, #2
 8020c2a:	e7dc      	b.n	8020be6 <__strftime+0x2e>
 8020c2c:	2600      	movs	r6, #0
 8020c2e:	e7e7      	b.n	8020c00 <__strftime+0x48>
 8020c30:	2b4f      	cmp	r3, #79	; 0x4f
 8020c32:	d0e9      	beq.n	8020c08 <__strftime+0x50>
 8020c34:	f89b 0000 	ldrb.w	r0, [fp]
 8020c38:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8020c3c:	2b55      	cmp	r3, #85	; 0x55
 8020c3e:	d8ea      	bhi.n	8020c16 <__strftime+0x5e>
 8020c40:	a201      	add	r2, pc, #4	; (adr r2, 8020c48 <__strftime+0x90>)
 8020c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020c46:	bf00      	nop
 8020c48:	08021567 	.word	0x08021567
 8020c4c:	08020c17 	.word	0x08020c17
 8020c50:	08020c17 	.word	0x08020c17
 8020c54:	08020c17 	.word	0x08020c17
 8020c58:	08020c17 	.word	0x08020c17
 8020c5c:	08020c17 	.word	0x08020c17
 8020c60:	08020c17 	.word	0x08020c17
 8020c64:	08020c17 	.word	0x08020c17
 8020c68:	08020c17 	.word	0x08020c17
 8020c6c:	08020c17 	.word	0x08020c17
 8020c70:	08020c17 	.word	0x08020c17
 8020c74:	08020c17 	.word	0x08020c17
 8020c78:	08020c17 	.word	0x08020c17
 8020c7c:	08020c17 	.word	0x08020c17
 8020c80:	08020c17 	.word	0x08020c17
 8020c84:	08020c17 	.word	0x08020c17
 8020c88:	08020c17 	.word	0x08020c17
 8020c8c:	08020c17 	.word	0x08020c17
 8020c90:	08020c17 	.word	0x08020c17
 8020c94:	08020c17 	.word	0x08020c17
 8020c98:	08020c17 	.word	0x08020c17
 8020c9c:	08020c17 	.word	0x08020c17
 8020ca0:	08020c17 	.word	0x08020c17
 8020ca4:	08020c17 	.word	0x08020c17
 8020ca8:	08020c17 	.word	0x08020c17
 8020cac:	08020c17 	.word	0x08020c17
 8020cb0:	08020c17 	.word	0x08020c17
 8020cb4:	08020c17 	.word	0x08020c17
 8020cb8:	08020ddf 	.word	0x08020ddf
 8020cbc:	08020e39 	.word	0x08020e39
 8020cc0:	08020eaf 	.word	0x08020eaf
 8020cc4:	08020f49 	.word	0x08020f49
 8020cc8:	08020c17 	.word	0x08020c17
 8020ccc:	08020f95 	.word	0x08020f95
 8020cd0:	08021075 	.word	0x08021075
 8020cd4:	08021177 	.word	0x08021177
 8020cd8:	08021185 	.word	0x08021185
 8020cdc:	08020c17 	.word	0x08020c17
 8020ce0:	08020c17 	.word	0x08020c17
 8020ce4:	08020c17 	.word	0x08020c17
 8020ce8:	080211b5 	.word	0x080211b5
 8020cec:	08020c17 	.word	0x08020c17
 8020cf0:	08020c17 	.word	0x08020c17
 8020cf4:	080211cd 	.word	0x080211cd
 8020cf8:	08020c17 	.word	0x08020c17
 8020cfc:	0802121b 	.word	0x0802121b
 8020d00:	08021331 	.word	0x08021331
 8020d04:	08021343 	.word	0x08021343
 8020d08:	0802139b 	.word	0x0802139b
 8020d0c:	080213ab 	.word	0x080213ab
 8020d10:	08021421 	.word	0x08021421
 8020d14:	08020ea7 	.word	0x08020ea7
 8020d18:	08021455 	.word	0x08021455
 8020d1c:	08021513 	.word	0x08021513
 8020d20:	08020c17 	.word	0x08020c17
 8020d24:	08020c17 	.word	0x08020c17
 8020d28:	08020c17 	.word	0x08020c17
 8020d2c:	08020c17 	.word	0x08020c17
 8020d30:	08020c17 	.word	0x08020c17
 8020d34:	08020c17 	.word	0x08020c17
 8020d38:	08020da1 	.word	0x08020da1
 8020d3c:	08020e0d 	.word	0x08020e0d
 8020d40:	08020e67 	.word	0x08020e67
 8020d44:	08020f21 	.word	0x08020f21
 8020d48:	08020f21 	.word	0x08020f21
 8020d4c:	08020c17 	.word	0x08020c17
 8020d50:	08020fdd 	.word	0x08020fdd
 8020d54:	08020e0d 	.word	0x08020e0d
 8020d58:	08020c17 	.word	0x08020c17
 8020d5c:	080211a7 	.word	0x080211a7
 8020d60:	08021177 	.word	0x08021177
 8020d64:	08021185 	.word	0x08021185
 8020d68:	080211af 	.word	0x080211af
 8020d6c:	080211b9 	.word	0x080211b9
 8020d70:	08020c17 	.word	0x08020c17
 8020d74:	080211cd 	.word	0x080211cd
 8020d78:	08020c17 	.word	0x08020c17
 8020d7c:	08020e97 	.word	0x08020e97
 8020d80:	08021231 	.word	0x08021231
 8020d84:	08021335 	.word	0x08021335
 8020d88:	0802137d 	.word	0x0802137d
 8020d8c:	08020c17 	.word	0x08020c17
 8020d90:	08021411 	.word	0x08021411
 8020d94:	08020e9f 	.word	0x08020e9f
 8020d98:	08021439 	.word	0x08021439
 8020d9c:	080214a5 	.word	0x080214a5
 8020da0:	69ab      	ldr	r3, [r5, #24]
 8020da2:	4aa7      	ldr	r2, [pc, #668]	; (8021040 <__strftime+0x488>)
 8020da4:	3318      	adds	r3, #24
 8020da6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8020daa:	4630      	mov	r0, r6
 8020dac:	f7df fa46 	bl	800023c <strlen>
 8020db0:	3e01      	subs	r6, #1
 8020db2:	4420      	add	r0, r4
 8020db4:	f108 33ff 	add.w	r3, r8, #4294967295
 8020db8:	42a0      	cmp	r0, r4
 8020dba:	d107      	bne.n	8020dcc <__strftime+0x214>
 8020dbc:	f89b 3000 	ldrb.w	r3, [fp]
 8020dc0:	2b00      	cmp	r3, #0
 8020dc2:	f000 83d7 	beq.w	8021574 <__strftime+0x9bc>
 8020dc6:	f10b 0201 	add.w	r2, fp, #1
 8020dca:	e6fe      	b.n	8020bca <__strftime+0x12>
 8020dcc:	42a3      	cmp	r3, r4
 8020dce:	f67f af22 	bls.w	8020c16 <__strftime+0x5e>
 8020dd2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020dd6:	f809 2004 	strb.w	r2, [r9, r4]
 8020dda:	3401      	adds	r4, #1
 8020ddc:	e7ec      	b.n	8020db8 <__strftime+0x200>
 8020dde:	69aa      	ldr	r2, [r5, #24]
 8020de0:	4b97      	ldr	r3, [pc, #604]	; (8021040 <__strftime+0x488>)
 8020de2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8020de6:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8020de8:	4630      	mov	r0, r6
 8020dea:	f7df fa27 	bl	800023c <strlen>
 8020dee:	3e01      	subs	r6, #1
 8020df0:	4420      	add	r0, r4
 8020df2:	f108 33ff 	add.w	r3, r8, #4294967295
 8020df6:	42a0      	cmp	r0, r4
 8020df8:	d0e0      	beq.n	8020dbc <__strftime+0x204>
 8020dfa:	42a3      	cmp	r3, r4
 8020dfc:	f67f af0b 	bls.w	8020c16 <__strftime+0x5e>
 8020e00:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020e04:	f809 2004 	strb.w	r2, [r9, r4]
 8020e08:	3401      	adds	r4, #1
 8020e0a:	e7f4      	b.n	8020df6 <__strftime+0x23e>
 8020e0c:	4b8c      	ldr	r3, [pc, #560]	; (8021040 <__strftime+0x488>)
 8020e0e:	692a      	ldr	r2, [r5, #16]
 8020e10:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020e14:	4630      	mov	r0, r6
 8020e16:	f7df fa11 	bl	800023c <strlen>
 8020e1a:	3e01      	subs	r6, #1
 8020e1c:	4420      	add	r0, r4
 8020e1e:	f108 33ff 	add.w	r3, r8, #4294967295
 8020e22:	42a0      	cmp	r0, r4
 8020e24:	d0ca      	beq.n	8020dbc <__strftime+0x204>
 8020e26:	42a3      	cmp	r3, r4
 8020e28:	f67f aef5 	bls.w	8020c16 <__strftime+0x5e>
 8020e2c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020e30:	f809 2004 	strb.w	r2, [r9, r4]
 8020e34:	3401      	adds	r4, #1
 8020e36:	e7f4      	b.n	8020e22 <__strftime+0x26a>
 8020e38:	692b      	ldr	r3, [r5, #16]
 8020e3a:	4a81      	ldr	r2, [pc, #516]	; (8021040 <__strftime+0x488>)
 8020e3c:	330c      	adds	r3, #12
 8020e3e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8020e42:	4630      	mov	r0, r6
 8020e44:	f7df f9fa 	bl	800023c <strlen>
 8020e48:	3e01      	subs	r6, #1
 8020e4a:	4420      	add	r0, r4
 8020e4c:	f108 33ff 	add.w	r3, r8, #4294967295
 8020e50:	42a0      	cmp	r0, r4
 8020e52:	d0b3      	beq.n	8020dbc <__strftime+0x204>
 8020e54:	42a3      	cmp	r3, r4
 8020e56:	f67f aede 	bls.w	8020c16 <__strftime+0x5e>
 8020e5a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020e5e:	f809 2004 	strb.w	r2, [r9, r4]
 8020e62:	3401      	adds	r4, #1
 8020e64:	e7f4      	b.n	8020e50 <__strftime+0x298>
 8020e66:	4b76      	ldr	r3, [pc, #472]	; (8021040 <__strftime+0x488>)
 8020e68:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8020e6c:	4630      	mov	r0, r6
 8020e6e:	f7df f9e5 	bl	800023c <strlen>
 8020e72:	7833      	ldrb	r3, [r6, #0]
 8020e74:	2b00      	cmp	r3, #0
 8020e76:	d0a1      	beq.n	8020dbc <__strftime+0x204>
 8020e78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020e7a:	9300      	str	r3, [sp, #0]
 8020e7c:	4632      	mov	r2, r6
 8020e7e:	462b      	mov	r3, r5
 8020e80:	eba8 0104 	sub.w	r1, r8, r4
 8020e84:	eb09 0004 	add.w	r0, r9, r4
 8020e88:	f7ff fe96 	bl	8020bb8 <__strftime>
 8020e8c:	2800      	cmp	r0, #0
 8020e8e:	f77f aec2 	ble.w	8020c16 <__strftime+0x5e>
 8020e92:	4404      	add	r4, r0
 8020e94:	e792      	b.n	8020dbc <__strftime+0x204>
 8020e96:	4b6a      	ldr	r3, [pc, #424]	; (8021040 <__strftime+0x488>)
 8020e98:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8020e9c:	e7e6      	b.n	8020e6c <__strftime+0x2b4>
 8020e9e:	4b68      	ldr	r3, [pc, #416]	; (8021040 <__strftime+0x488>)
 8020ea0:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8020ea4:	e7e2      	b.n	8020e6c <__strftime+0x2b4>
 8020ea6:	4b66      	ldr	r3, [pc, #408]	; (8021040 <__strftime+0x488>)
 8020ea8:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8020eac:	e7de      	b.n	8020e6c <__strftime+0x2b4>
 8020eae:	4965      	ldr	r1, [pc, #404]	; (8021044 <__strftime+0x48c>)
 8020eb0:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8020eb4:	458a      	cmp	sl, r1
 8020eb6:	bfac      	ite	ge
 8020eb8:	2100      	movge	r1, #0
 8020eba:	2101      	movlt	r1, #1
 8020ebc:	f1ba 0f00 	cmp.w	sl, #0
 8020ec0:	db0e      	blt.n	8020ee0 <__strftime+0x328>
 8020ec2:	2064      	movs	r0, #100	; 0x64
 8020ec4:	fb9a f0f0 	sdiv	r0, sl, r0
 8020ec8:	3013      	adds	r0, #19
 8020eca:	b19f      	cbz	r7, 8020ef4 <__strftime+0x33c>
 8020ecc:	2863      	cmp	r0, #99	; 0x63
 8020ece:	dd25      	ble.n	8020f1c <__strftime+0x364>
 8020ed0:	4a5d      	ldr	r2, [pc, #372]	; (8021048 <__strftime+0x490>)
 8020ed2:	4b5e      	ldr	r3, [pc, #376]	; (802104c <__strftime+0x494>)
 8020ed4:	2f2b      	cmp	r7, #43	; 0x2b
 8020ed6:	bf14      	ite	ne
 8020ed8:	4617      	movne	r7, r2
 8020eda:	461f      	moveq	r7, r3
 8020edc:	4a5c      	ldr	r2, [pc, #368]	; (8021050 <__strftime+0x498>)
 8020ede:	e00b      	b.n	8020ef8 <__strftime+0x340>
 8020ee0:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8020ee4:	9105      	str	r1, [sp, #20]
 8020ee6:	f001 f835 	bl	8021f54 <abs>
 8020eea:	2364      	movs	r3, #100	; 0x64
 8020eec:	9905      	ldr	r1, [sp, #20]
 8020eee:	fb90 f0f3 	sdiv	r0, r0, r3
 8020ef2:	e7ea      	b.n	8020eca <__strftime+0x312>
 8020ef4:	4f54      	ldr	r7, [pc, #336]	; (8021048 <__strftime+0x490>)
 8020ef6:	4a57      	ldr	r2, [pc, #348]	; (8021054 <__strftime+0x49c>)
 8020ef8:	4b57      	ldr	r3, [pc, #348]	; (8021058 <__strftime+0x4a0>)
 8020efa:	9001      	str	r0, [sp, #4]
 8020efc:	2e02      	cmp	r6, #2
 8020efe:	bf2c      	ite	cs
 8020f00:	ebc1 0606 	rsbcs	r6, r1, r6
 8020f04:	f1c1 0602 	rsbcc	r6, r1, #2
 8020f08:	494e      	ldr	r1, [pc, #312]	; (8021044 <__strftime+0x48c>)
 8020f0a:	9600      	str	r6, [sp, #0]
 8020f0c:	458a      	cmp	sl, r1
 8020f0e:	bfa8      	it	ge
 8020f10:	463b      	movge	r3, r7
 8020f12:	eba8 0104 	sub.w	r1, r8, r4
 8020f16:	eb09 0004 	add.w	r0, r9, r4
 8020f1a:	e02a      	b.n	8020f72 <__strftime+0x3ba>
 8020f1c:	4f4a      	ldr	r7, [pc, #296]	; (8021048 <__strftime+0x490>)
 8020f1e:	e7dd      	b.n	8020edc <__strftime+0x324>
 8020f20:	494e      	ldr	r1, [pc, #312]	; (802105c <__strftime+0x4a4>)
 8020f22:	4a4f      	ldr	r2, [pc, #316]	; (8021060 <__strftime+0x4a8>)
 8020f24:	68eb      	ldr	r3, [r5, #12]
 8020f26:	2864      	cmp	r0, #100	; 0x64
 8020f28:	bf08      	it	eq
 8020f2a:	460a      	moveq	r2, r1
 8020f2c:	eba8 0104 	sub.w	r1, r8, r4
 8020f30:	eb09 0004 	add.w	r0, r9, r4
 8020f34:	f001 fe9e 	bl	8022c74 <sniprintf>
 8020f38:	2800      	cmp	r0, #0
 8020f3a:	f6ff ae6c 	blt.w	8020c16 <__strftime+0x5e>
 8020f3e:	4404      	add	r4, r0
 8020f40:	45a0      	cmp	r8, r4
 8020f42:	f63f af3b 	bhi.w	8020dbc <__strftime+0x204>
 8020f46:	e666      	b.n	8020c16 <__strftime+0x5e>
 8020f48:	6968      	ldr	r0, [r5, #20]
 8020f4a:	692b      	ldr	r3, [r5, #16]
 8020f4c:	68ef      	ldr	r7, [r5, #12]
 8020f4e:	2800      	cmp	r0, #0
 8020f50:	eb09 0604 	add.w	r6, r9, r4
 8020f54:	eba8 0104 	sub.w	r1, r8, r4
 8020f58:	f103 0301 	add.w	r3, r3, #1
 8020f5c:	db0c      	blt.n	8020f78 <__strftime+0x3c0>
 8020f5e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020f62:	fb90 f2fc 	sdiv	r2, r0, ip
 8020f66:	fb0c 0212 	mls	r2, ip, r2, r0
 8020f6a:	e9cd 7200 	strd	r7, r2, [sp]
 8020f6e:	4a3d      	ldr	r2, [pc, #244]	; (8021064 <__strftime+0x4ac>)
 8020f70:	4630      	mov	r0, r6
 8020f72:	f001 fe7f 	bl	8022c74 <sniprintf>
 8020f76:	e7df      	b.n	8020f38 <__strftime+0x380>
 8020f78:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020f7c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8020f80:	f000 ffe8 	bl	8021f54 <abs>
 8020f84:	2264      	movs	r2, #100	; 0x64
 8020f86:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8020f8a:	fb90 fcf2 	sdiv	ip, r0, r2
 8020f8e:	fb0c 0212 	mls	r2, ip, r2, r0
 8020f92:	e7ea      	b.n	8020f6a <__strftime+0x3b2>
 8020f94:	2325      	movs	r3, #37	; 0x25
 8020f96:	f88d 3020 	strb.w	r3, [sp, #32]
 8020f9a:	b187      	cbz	r7, 8020fbe <__strftime+0x406>
 8020f9c:	2e06      	cmp	r6, #6
 8020f9e:	bf38      	it	cc
 8020fa0:	2606      	movcc	r6, #6
 8020fa2:	1fb3      	subs	r3, r6, #6
 8020fa4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8020fa8:	d10c      	bne.n	8020fc4 <__strftime+0x40c>
 8020faa:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020fae:	492e      	ldr	r1, [pc, #184]	; (8021068 <__strftime+0x4b0>)
 8020fb0:	f001 fec0 	bl	8022d34 <strcpy>
 8020fb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020fb6:	9300      	str	r3, [sp, #0]
 8020fb8:	aa08      	add	r2, sp, #32
 8020fba:	462b      	mov	r3, r5
 8020fbc:	e760      	b.n	8020e80 <__strftime+0x2c8>
 8020fbe:	272b      	movs	r7, #43	; 0x2b
 8020fc0:	260a      	movs	r6, #10
 8020fc2:	e7ee      	b.n	8020fa2 <__strftime+0x3ea>
 8020fc4:	4a29      	ldr	r2, [pc, #164]	; (802106c <__strftime+0x4b4>)
 8020fc6:	211e      	movs	r1, #30
 8020fc8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020fcc:	f001 fe52 	bl	8022c74 <sniprintf>
 8020fd0:	2800      	cmp	r0, #0
 8020fd2:	ddea      	ble.n	8020faa <__strftime+0x3f2>
 8020fd4:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8020fd8:	4418      	add	r0, r3
 8020fda:	e7e8      	b.n	8020fae <__strftime+0x3f6>
 8020fdc:	4628      	mov	r0, r5
 8020fde:	f7ff fd89 	bl	8020af4 <iso_year_adjust>
 8020fe2:	4606      	mov	r6, r0
 8020fe4:	6968      	ldr	r0, [r5, #20]
 8020fe6:	2800      	cmp	r0, #0
 8020fe8:	db11      	blt.n	802100e <__strftime+0x456>
 8020fea:	2264      	movs	r2, #100	; 0x64
 8020fec:	fb90 f3f2 	sdiv	r3, r0, r2
 8020ff0:	fb02 0313 	mls	r3, r2, r3, r0
 8020ff4:	441e      	add	r6, r3
 8020ff6:	2364      	movs	r3, #100	; 0x64
 8020ff8:	fb96 f0f3 	sdiv	r0, r6, r3
 8020ffc:	fb03 6610 	mls	r6, r3, r0, r6
 8021000:	441e      	add	r6, r3
 8021002:	fbb6 f2f3 	udiv	r2, r6, r3
 8021006:	fb03 6312 	mls	r3, r3, r2, r6
 802100a:	4a14      	ldr	r2, [pc, #80]	; (802105c <__strftime+0x4a4>)
 802100c:	e78e      	b.n	8020f2c <__strftime+0x374>
 802100e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021012:	f000 ff9f 	bl	8021f54 <abs>
 8021016:	2364      	movs	r3, #100	; 0x64
 8021018:	2e00      	cmp	r6, #0
 802101a:	fb90 f2f3 	sdiv	r2, r0, r3
 802101e:	fb02 0313 	mls	r3, r2, r3, r0
 8021022:	da05      	bge.n	8021030 <__strftime+0x478>
 8021024:	6969      	ldr	r1, [r5, #20]
 8021026:	4a12      	ldr	r2, [pc, #72]	; (8021070 <__strftime+0x4b8>)
 8021028:	4291      	cmp	r1, r2
 802102a:	bfb8      	it	lt
 802102c:	2601      	movlt	r6, #1
 802102e:	e7e1      	b.n	8020ff4 <__strftime+0x43c>
 8021030:	d0e0      	beq.n	8020ff4 <__strftime+0x43c>
 8021032:	6969      	ldr	r1, [r5, #20]
 8021034:	4a03      	ldr	r2, [pc, #12]	; (8021044 <__strftime+0x48c>)
 8021036:	4291      	cmp	r1, r2
 8021038:	bfb8      	it	lt
 802103a:	f04f 36ff 	movlt.w	r6, #4294967295
 802103e:	e7d9      	b.n	8020ff4 <__strftime+0x43c>
 8021040:	08029810 	.word	0x08029810
 8021044:	fffff894 	.word	0xfffff894
 8021048:	08029983 	.word	0x08029983
 802104c:	0802969a 	.word	0x0802969a
 8021050:	08029692 	.word	0x08029692
 8021054:	0802968b 	.word	0x0802968b
 8021058:	08029ac3 	.word	0x08029ac3
 802105c:	080296aa 	.word	0x080296aa
 8021060:	0802969c 	.word	0x0802969c
 8021064:	080296a0 	.word	0x080296a0
 8021068:	080296b3 	.word	0x080296b3
 802106c:	080296af 	.word	0x080296af
 8021070:	fffff895 	.word	0xfffff895
 8021074:	4bb6      	ldr	r3, [pc, #728]	; (8021350 <__strftime+0x798>)
 8021076:	6969      	ldr	r1, [r5, #20]
 8021078:	4299      	cmp	r1, r3
 802107a:	bfac      	ite	ge
 802107c:	2300      	movge	r3, #0
 802107e:	2301      	movlt	r3, #1
 8021080:	4628      	mov	r0, r5
 8021082:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8021086:	f7ff fd35 	bl	8020af4 <iso_year_adjust>
 802108a:	9906      	ldr	r1, [sp, #24]
 802108c:	2900      	cmp	r1, #0
 802108e:	4682      	mov	sl, r0
 8021090:	db27      	blt.n	80210e2 <__strftime+0x52a>
 8021092:	2264      	movs	r2, #100	; 0x64
 8021094:	fb91 f2f2 	sdiv	r2, r1, r2
 8021098:	3213      	adds	r2, #19
 802109a:	6968      	ldr	r0, [r5, #20]
 802109c:	2800      	cmp	r0, #0
 802109e:	db2b      	blt.n	80210f8 <__strftime+0x540>
 80210a0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80210a4:	fb90 fefc 	sdiv	lr, r0, ip
 80210a8:	fb0c 001e 	mls	r0, ip, lr, r0
 80210ac:	f1ba 0f00 	cmp.w	sl, #0
 80210b0:	da31      	bge.n	8021116 <__strftime+0x55e>
 80210b2:	6969      	ldr	r1, [r5, #20]
 80210b4:	4ba7      	ldr	r3, [pc, #668]	; (8021354 <__strftime+0x79c>)
 80210b6:	4299      	cmp	r1, r3
 80210b8:	db38      	blt.n	802112c <__strftime+0x574>
 80210ba:	eb0a 0300 	add.w	r3, sl, r0
 80210be:	1c59      	adds	r1, r3, #1
 80210c0:	d139      	bne.n	8021136 <__strftime+0x57e>
 80210c2:	3a01      	subs	r2, #1
 80210c4:	2363      	movs	r3, #99	; 0x63
 80210c6:	2064      	movs	r0, #100	; 0x64
 80210c8:	fb00 3202 	mla	r2, r0, r2, r3
 80210cc:	9b05      	ldr	r3, [sp, #20]
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	d036      	beq.n	8021140 <__strftime+0x588>
 80210d2:	232d      	movs	r3, #45	; 0x2d
 80210d4:	f88d 3020 	strb.w	r3, [sp, #32]
 80210d8:	b106      	cbz	r6, 80210dc <__strftime+0x524>
 80210da:	3e01      	subs	r6, #1
 80210dc:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80210e0:	e038      	b.n	8021154 <__strftime+0x59c>
 80210e2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80210e6:	9106      	str	r1, [sp, #24]
 80210e8:	f000 ff34 	bl	8021f54 <abs>
 80210ec:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80210f0:	9906      	ldr	r1, [sp, #24]
 80210f2:	fb90 f2fc 	sdiv	r2, r0, ip
 80210f6:	e7d0      	b.n	802109a <__strftime+0x4e2>
 80210f8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80210fc:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8021100:	f000 ff28 	bl	8021f54 <abs>
 8021104:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021108:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802110c:	fb90 fefc 	sdiv	lr, r0, ip
 8021110:	fb0e 001c 	mls	r0, lr, ip, r0
 8021114:	e7ca      	b.n	80210ac <__strftime+0x4f4>
 8021116:	d0d0      	beq.n	80210ba <__strftime+0x502>
 8021118:	4b8d      	ldr	r3, [pc, #564]	; (8021350 <__strftime+0x798>)
 802111a:	4299      	cmp	r1, r3
 802111c:	bfb4      	ite	lt
 802111e:	2301      	movlt	r3, #1
 8021120:	2300      	movge	r3, #0
 8021122:	9305      	str	r3, [sp, #20]
 8021124:	bfb8      	it	lt
 8021126:	f04f 3aff 	movlt.w	sl, #4294967295
 802112a:	e7c6      	b.n	80210ba <__strftime+0x502>
 802112c:	f04f 0a01 	mov.w	sl, #1
 8021130:	f8cd a014 	str.w	sl, [sp, #20]
 8021134:	e7c1      	b.n	80210ba <__strftime+0x502>
 8021136:	2b64      	cmp	r3, #100	; 0x64
 8021138:	bf04      	itt	eq
 802113a:	3201      	addeq	r2, #1
 802113c:	2300      	moveq	r3, #0
 802113e:	e7c2      	b.n	80210c6 <__strftime+0x50e>
 8021140:	2f2b      	cmp	r7, #43	; 0x2b
 8021142:	d106      	bne.n	8021152 <__strftime+0x59a>
 8021144:	f242 730f 	movw	r3, #9999	; 0x270f
 8021148:	429a      	cmp	r2, r3
 802114a:	d902      	bls.n	8021152 <__strftime+0x59a>
 802114c:	f88d 7020 	strb.w	r7, [sp, #32]
 8021150:	e7c2      	b.n	80210d8 <__strftime+0x520>
 8021152:	ab08      	add	r3, sp, #32
 8021154:	2125      	movs	r1, #37	; 0x25
 8021156:	7019      	strb	r1, [r3, #0]
 8021158:	b94f      	cbnz	r7, 802116e <__strftime+0x5b6>
 802115a:	1c58      	adds	r0, r3, #1
 802115c:	497e      	ldr	r1, [pc, #504]	; (8021358 <__strftime+0x7a0>)
 802115e:	9205      	str	r2, [sp, #20]
 8021160:	f001 fde8 	bl	8022d34 <strcpy>
 8021164:	9a05      	ldr	r2, [sp, #20]
 8021166:	9200      	str	r2, [sp, #0]
 8021168:	4633      	mov	r3, r6
 802116a:	aa08      	add	r2, sp, #32
 802116c:	e059      	b.n	8021222 <__strftime+0x66a>
 802116e:	2130      	movs	r1, #48	; 0x30
 8021170:	1c98      	adds	r0, r3, #2
 8021172:	7059      	strb	r1, [r3, #1]
 8021174:	e7f2      	b.n	802115c <__strftime+0x5a4>
 8021176:	4979      	ldr	r1, [pc, #484]	; (802135c <__strftime+0x7a4>)
 8021178:	4a79      	ldr	r2, [pc, #484]	; (8021360 <__strftime+0x7a8>)
 802117a:	68ab      	ldr	r3, [r5, #8]
 802117c:	286b      	cmp	r0, #107	; 0x6b
 802117e:	bf08      	it	eq
 8021180:	460a      	moveq	r2, r1
 8021182:	e6d3      	b.n	8020f2c <__strftime+0x374>
 8021184:	68ab      	ldr	r3, [r5, #8]
 8021186:	b163      	cbz	r3, 80211a2 <__strftime+0x5ea>
 8021188:	2b0c      	cmp	r3, #12
 802118a:	d004      	beq.n	8021196 <__strftime+0x5de>
 802118c:	210c      	movs	r1, #12
 802118e:	fb93 f2f1 	sdiv	r2, r3, r1
 8021192:	fb01 3312 	mls	r3, r1, r2, r3
 8021196:	4972      	ldr	r1, [pc, #456]	; (8021360 <__strftime+0x7a8>)
 8021198:	4a70      	ldr	r2, [pc, #448]	; (802135c <__strftime+0x7a4>)
 802119a:	2849      	cmp	r0, #73	; 0x49
 802119c:	bf08      	it	eq
 802119e:	460a      	moveq	r2, r1
 80211a0:	e6c4      	b.n	8020f2c <__strftime+0x374>
 80211a2:	230c      	movs	r3, #12
 80211a4:	e7f7      	b.n	8021196 <__strftime+0x5de>
 80211a6:	69eb      	ldr	r3, [r5, #28]
 80211a8:	4a6e      	ldr	r2, [pc, #440]	; (8021364 <__strftime+0x7ac>)
 80211aa:	3301      	adds	r3, #1
 80211ac:	e6be      	b.n	8020f2c <__strftime+0x374>
 80211ae:	692b      	ldr	r3, [r5, #16]
 80211b0:	3301      	adds	r3, #1
 80211b2:	e72a      	b.n	802100a <__strftime+0x452>
 80211b4:	686b      	ldr	r3, [r5, #4]
 80211b6:	e728      	b.n	802100a <__strftime+0x452>
 80211b8:	f108 33ff 	add.w	r3, r8, #4294967295
 80211bc:	42a3      	cmp	r3, r4
 80211be:	f67f ad2a 	bls.w	8020c16 <__strftime+0x5e>
 80211c2:	230a      	movs	r3, #10
 80211c4:	f809 3004 	strb.w	r3, [r9, r4]
 80211c8:	3401      	adds	r4, #1
 80211ca:	e5f7      	b.n	8020dbc <__strftime+0x204>
 80211cc:	68ab      	ldr	r3, [r5, #8]
 80211ce:	2b0b      	cmp	r3, #11
 80211d0:	bfcc      	ite	gt
 80211d2:	22a4      	movgt	r2, #164	; 0xa4
 80211d4:	22a0      	movle	r2, #160	; 0xa0
 80211d6:	4b64      	ldr	r3, [pc, #400]	; (8021368 <__strftime+0x7b0>)
 80211d8:	4413      	add	r3, r2
 80211da:	685e      	ldr	r6, [r3, #4]
 80211dc:	4630      	mov	r0, r6
 80211de:	f7df f82d 	bl	800023c <strlen>
 80211e2:	1e72      	subs	r2, r6, #1
 80211e4:	4420      	add	r0, r4
 80211e6:	f108 36ff 	add.w	r6, r8, #4294967295
 80211ea:	42a0      	cmp	r0, r4
 80211ec:	f43f ade6 	beq.w	8020dbc <__strftime+0x204>
 80211f0:	42a6      	cmp	r6, r4
 80211f2:	f67f ad10 	bls.w	8020c16 <__strftime+0x5e>
 80211f6:	f89b 1000 	ldrb.w	r1, [fp]
 80211fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80211fe:	2950      	cmp	r1, #80	; 0x50
 8021200:	d107      	bne.n	8021212 <__strftime+0x65a>
 8021202:	495a      	ldr	r1, [pc, #360]	; (802136c <__strftime+0x7b4>)
 8021204:	5cc9      	ldrb	r1, [r1, r3]
 8021206:	f001 0103 	and.w	r1, r1, #3
 802120a:	2901      	cmp	r1, #1
 802120c:	bf08      	it	eq
 802120e:	3320      	addeq	r3, #32
 8021210:	b2db      	uxtb	r3, r3
 8021212:	f809 3004 	strb.w	r3, [r9, r4]
 8021216:	3401      	adds	r4, #1
 8021218:	e7e7      	b.n	80211ea <__strftime+0x632>
 802121a:	686b      	ldr	r3, [r5, #4]
 802121c:	9300      	str	r3, [sp, #0]
 802121e:	4a54      	ldr	r2, [pc, #336]	; (8021370 <__strftime+0x7b8>)
 8021220:	68ab      	ldr	r3, [r5, #8]
 8021222:	eba8 0104 	sub.w	r1, r8, r4
 8021226:	eb09 0004 	add.w	r0, r9, r4
 802122a:	f001 fd23 	bl	8022c74 <sniprintf>
 802122e:	e683      	b.n	8020f38 <__strftime+0x380>
 8021230:	6a2b      	ldr	r3, [r5, #32]
 8021232:	2b00      	cmp	r3, #0
 8021234:	db79      	blt.n	802132a <__strftime+0x772>
 8021236:	f000 fb91 	bl	802195c <__tz_lock>
 802123a:	9b04      	ldr	r3, [sp, #16]
 802123c:	b90b      	cbnz	r3, 8021242 <__strftime+0x68a>
 802123e:	f000 fb99 	bl	8021974 <_tzset_unlocked>
 8021242:	f000 ff55 	bl	80220f0 <__gettzinfo>
 8021246:	6a2b      	ldr	r3, [r5, #32]
 8021248:	2b00      	cmp	r3, #0
 802124a:	bfcc      	ite	gt
 802124c:	2350      	movgt	r3, #80	; 0x50
 802124e:	2328      	movle	r3, #40	; 0x28
 8021250:	58c3      	ldr	r3, [r0, r3]
 8021252:	f1c3 0a00 	rsb	sl, r3, #0
 8021256:	f000 fb87 	bl	8021968 <__tz_unlock>
 802125a:	2301      	movs	r3, #1
 802125c:	9304      	str	r3, [sp, #16]
 802125e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8021262:	4662      	mov	r2, ip
 8021264:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8021268:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802126c:	9602      	str	r6, [sp, #8]
 802126e:	f143 36ff 	adc.w	r6, r3, #4294967295
 8021272:	9603      	str	r6, [sp, #12]
 8021274:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021278:	2e00      	cmp	r6, #0
 802127a:	f177 0600 	sbcs.w	r6, r7, #0
 802127e:	eba8 0104 	sub.w	r1, r8, r4
 8021282:	eb09 0004 	add.w	r0, r9, r4
 8021286:	da05      	bge.n	8021294 <__strftime+0x6dc>
 8021288:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 802128c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8021290:	9602      	str	r6, [sp, #8]
 8021292:	9303      	str	r3, [sp, #12]
 8021294:	9b02      	ldr	r3, [sp, #8]
 8021296:	089e      	lsrs	r6, r3, #2
 8021298:	9b03      	ldr	r3, [sp, #12]
 802129a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 802129e:	f10c 32ff 	add.w	r2, ip, #4294967295
 80212a2:	109f      	asrs	r7, r3, #2
 80212a4:	2364      	movs	r3, #100	; 0x64
 80212a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80212aa:	1af6      	subs	r6, r6, r3
 80212ac:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 80212b0:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80212b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80212b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80212bc:	18f6      	adds	r6, r6, r3
 80212be:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80212c2:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80212c6:	f240 136d 	movw	r3, #365	; 0x16d
 80212ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80212ce:	69eb      	ldr	r3, [r5, #28]
 80212d0:	eb16 060c 	adds.w	r6, r6, ip
 80212d4:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 80212d8:	18f6      	adds	r6, r6, r3
 80212da:	f04f 0c18 	mov.w	ip, #24
 80212de:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80212e2:	fba6 230c 	umull	r2, r3, r6, ip
 80212e6:	68ae      	ldr	r6, [r5, #8]
 80212e8:	fb0c 3307 	mla	r3, ip, r7, r3
 80212ec:	1992      	adds	r2, r2, r6
 80212ee:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80212f2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80212f6:	fba2 670c 	umull	r6, r7, r2, ip
 80212fa:	fb0c 7703 	mla	r7, ip, r3, r7
 80212fe:	686b      	ldr	r3, [r5, #4]
 8021300:	18f6      	adds	r6, r6, r3
 8021302:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8021306:	fba6 230c 	umull	r2, r3, r6, ip
 802130a:	682e      	ldr	r6, [r5, #0]
 802130c:	fb0c 3307 	mla	r3, ip, r7, r3
 8021310:	1992      	adds	r2, r2, r6
 8021312:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8021316:	ebb2 020a 	subs.w	r2, r2, sl
 802131a:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802131e:	e9cd 2300 	strd	r2, r3, [sp]
 8021322:	4a14      	ldr	r2, [pc, #80]	; (8021374 <__strftime+0x7bc>)
 8021324:	f001 fca6 	bl	8022c74 <sniprintf>
 8021328:	e606      	b.n	8020f38 <__strftime+0x380>
 802132a:	f04f 0a00 	mov.w	sl, #0
 802132e:	e796      	b.n	802125e <__strftime+0x6a6>
 8021330:	682b      	ldr	r3, [r5, #0]
 8021332:	e66a      	b.n	802100a <__strftime+0x452>
 8021334:	f108 33ff 	add.w	r3, r8, #4294967295
 8021338:	42a3      	cmp	r3, r4
 802133a:	f67f ac6c 	bls.w	8020c16 <__strftime+0x5e>
 802133e:	2309      	movs	r3, #9
 8021340:	e740      	b.n	80211c4 <__strftime+0x60c>
 8021342:	682b      	ldr	r3, [r5, #0]
 8021344:	9301      	str	r3, [sp, #4]
 8021346:	686b      	ldr	r3, [r5, #4]
 8021348:	9300      	str	r3, [sp, #0]
 802134a:	4a0b      	ldr	r2, [pc, #44]	; (8021378 <__strftime+0x7c0>)
 802134c:	68ab      	ldr	r3, [r5, #8]
 802134e:	e5e0      	b.n	8020f12 <__strftime+0x35a>
 8021350:	fffff894 	.word	0xfffff894
 8021354:	fffff895 	.word	0xfffff895
 8021358:	080296bb 	.word	0x080296bb
 802135c:	0802969c 	.word	0x0802969c
 8021360:	080296aa 	.word	0x080296aa
 8021364:	080296bf 	.word	0x080296bf
 8021368:	08029810 	.word	0x08029810
 802136c:	08029985 	.word	0x08029985
 8021370:	080296ce 	.word	0x080296ce
 8021374:	080296c4 	.word	0x080296c4
 8021378:	080296c9 	.word	0x080296c9
 802137c:	f108 33ff 	add.w	r3, r8, #4294967295
 8021380:	42a3      	cmp	r3, r4
 8021382:	f67f ac48 	bls.w	8020c16 <__strftime+0x5e>
 8021386:	69ab      	ldr	r3, [r5, #24]
 8021388:	eb09 0204 	add.w	r2, r9, r4
 802138c:	3401      	adds	r4, #1
 802138e:	b913      	cbnz	r3, 8021396 <__strftime+0x7de>
 8021390:	2337      	movs	r3, #55	; 0x37
 8021392:	7013      	strb	r3, [r2, #0]
 8021394:	e512      	b.n	8020dbc <__strftime+0x204>
 8021396:	3330      	adds	r3, #48	; 0x30
 8021398:	e7fb      	b.n	8021392 <__strftime+0x7da>
 802139a:	69eb      	ldr	r3, [r5, #28]
 802139c:	69aa      	ldr	r2, [r5, #24]
 802139e:	3307      	adds	r3, #7
 80213a0:	1a9b      	subs	r3, r3, r2
 80213a2:	2207      	movs	r2, #7
 80213a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80213a8:	e62f      	b.n	802100a <__strftime+0x452>
 80213aa:	4628      	mov	r0, r5
 80213ac:	f7ff fba2 	bl	8020af4 <iso_year_adjust>
 80213b0:	69aa      	ldr	r2, [r5, #24]
 80213b2:	b132      	cbz	r2, 80213c2 <__strftime+0x80a>
 80213b4:	3a01      	subs	r2, #1
 80213b6:	2800      	cmp	r0, #0
 80213b8:	dc28      	bgt.n	802140c <__strftime+0x854>
 80213ba:	69eb      	ldr	r3, [r5, #28]
 80213bc:	d103      	bne.n	80213c6 <__strftime+0x80e>
 80213be:	330a      	adds	r3, #10
 80213c0:	e7ee      	b.n	80213a0 <__strftime+0x7e8>
 80213c2:	2206      	movs	r2, #6
 80213c4:	e7f7      	b.n	80213b6 <__strftime+0x7fe>
 80213c6:	6968      	ldr	r0, [r5, #20]
 80213c8:	2800      	cmp	r0, #0
 80213ca:	eba2 0303 	sub.w	r3, r2, r3
 80213ce:	f240 726b 	movw	r2, #1899	; 0x76b
 80213d2:	bfa8      	it	ge
 80213d4:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80213d8:	4410      	add	r0, r2
 80213da:	0782      	lsls	r2, r0, #30
 80213dc:	d105      	bne.n	80213ea <__strftime+0x832>
 80213de:	2264      	movs	r2, #100	; 0x64
 80213e0:	fb90 f1f2 	sdiv	r1, r0, r2
 80213e4:	fb02 0111 	mls	r1, r2, r1, r0
 80213e8:	b971      	cbnz	r1, 8021408 <__strftime+0x850>
 80213ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80213ee:	fb90 f2f1 	sdiv	r2, r0, r1
 80213f2:	fb01 0212 	mls	r2, r1, r2, r0
 80213f6:	fab2 f282 	clz	r2, r2
 80213fa:	0952      	lsrs	r2, r2, #5
 80213fc:	1a9a      	subs	r2, r3, r2
 80213fe:	2a05      	cmp	r2, #5
 8021400:	bfb4      	ite	lt
 8021402:	2335      	movlt	r3, #53	; 0x35
 8021404:	2334      	movge	r3, #52	; 0x34
 8021406:	e600      	b.n	802100a <__strftime+0x452>
 8021408:	2201      	movs	r2, #1
 802140a:	e7f7      	b.n	80213fc <__strftime+0x844>
 802140c:	2301      	movs	r3, #1
 802140e:	e5fc      	b.n	802100a <__strftime+0x452>
 8021410:	f108 33ff 	add.w	r3, r8, #4294967295
 8021414:	42a3      	cmp	r3, r4
 8021416:	f67f abfe 	bls.w	8020c16 <__strftime+0x5e>
 802141a:	69ab      	ldr	r3, [r5, #24]
 802141c:	3330      	adds	r3, #48	; 0x30
 802141e:	e6d1      	b.n	80211c4 <__strftime+0x60c>
 8021420:	69ab      	ldr	r3, [r5, #24]
 8021422:	b13b      	cbz	r3, 8021434 <__strftime+0x87c>
 8021424:	3b01      	subs	r3, #1
 8021426:	69ea      	ldr	r2, [r5, #28]
 8021428:	3207      	adds	r2, #7
 802142a:	1ad2      	subs	r2, r2, r3
 802142c:	2307      	movs	r3, #7
 802142e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021432:	e5ea      	b.n	802100a <__strftime+0x452>
 8021434:	2306      	movs	r3, #6
 8021436:	e7f6      	b.n	8021426 <__strftime+0x86e>
 8021438:	6968      	ldr	r0, [r5, #20]
 802143a:	2800      	cmp	r0, #0
 802143c:	db05      	blt.n	802144a <__strftime+0x892>
 802143e:	2264      	movs	r2, #100	; 0x64
 8021440:	fb90 f3f2 	sdiv	r3, r0, r2
 8021444:	fb03 0312 	mls	r3, r3, r2, r0
 8021448:	e5df      	b.n	802100a <__strftime+0x452>
 802144a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802144e:	f000 fd81 	bl	8021f54 <abs>
 8021452:	e7f4      	b.n	802143e <__strftime+0x886>
 8021454:	696b      	ldr	r3, [r5, #20]
 8021456:	4a4c      	ldr	r2, [pc, #304]	; (8021588 <__strftime+0x9d0>)
 8021458:	4293      	cmp	r3, r2
 802145a:	da09      	bge.n	8021470 <__strftime+0x8b8>
 802145c:	212d      	movs	r1, #45	; 0x2d
 802145e:	f88d 1020 	strb.w	r1, [sp, #32]
 8021462:	eba2 0a03 	sub.w	sl, r2, r3
 8021466:	b106      	cbz	r6, 802146a <__strftime+0x8b2>
 8021468:	3e01      	subs	r6, #1
 802146a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 802146e:	e00b      	b.n	8021488 <__strftime+0x8d0>
 8021470:	2f2b      	cmp	r7, #43	; 0x2b
 8021472:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8021476:	d106      	bne.n	8021486 <__strftime+0x8ce>
 8021478:	f242 730f 	movw	r3, #9999	; 0x270f
 802147c:	459a      	cmp	sl, r3
 802147e:	d902      	bls.n	8021486 <__strftime+0x8ce>
 8021480:	f88d 7020 	strb.w	r7, [sp, #32]
 8021484:	e7ef      	b.n	8021466 <__strftime+0x8ae>
 8021486:	ab08      	add	r3, sp, #32
 8021488:	2225      	movs	r2, #37	; 0x25
 802148a:	701a      	strb	r2, [r3, #0]
 802148c:	b937      	cbnz	r7, 802149c <__strftime+0x8e4>
 802148e:	1c58      	adds	r0, r3, #1
 8021490:	493e      	ldr	r1, [pc, #248]	; (802158c <__strftime+0x9d4>)
 8021492:	f001 fc4f 	bl	8022d34 <strcpy>
 8021496:	f8cd a000 	str.w	sl, [sp]
 802149a:	e665      	b.n	8021168 <__strftime+0x5b0>
 802149c:	2230      	movs	r2, #48	; 0x30
 802149e:	1c98      	adds	r0, r3, #2
 80214a0:	705a      	strb	r2, [r3, #1]
 80214a2:	e7f5      	b.n	8021490 <__strftime+0x8d8>
 80214a4:	6a2b      	ldr	r3, [r5, #32]
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	f6ff ac88 	blt.w	8020dbc <__strftime+0x204>
 80214ac:	f000 fa56 	bl	802195c <__tz_lock>
 80214b0:	9b04      	ldr	r3, [sp, #16]
 80214b2:	b90b      	cbnz	r3, 80214b8 <__strftime+0x900>
 80214b4:	f000 fa5e 	bl	8021974 <_tzset_unlocked>
 80214b8:	f000 fe1a 	bl	80220f0 <__gettzinfo>
 80214bc:	6a2b      	ldr	r3, [r5, #32]
 80214be:	2b00      	cmp	r3, #0
 80214c0:	bfcc      	ite	gt
 80214c2:	2350      	movgt	r3, #80	; 0x50
 80214c4:	2328      	movle	r3, #40	; 0x28
 80214c6:	eb09 0704 	add.w	r7, r9, r4
 80214ca:	58c6      	ldr	r6, [r0, r3]
 80214cc:	f000 fa4c 	bl	8021968 <__tz_unlock>
 80214d0:	4276      	negs	r6, r6
 80214d2:	233c      	movs	r3, #60	; 0x3c
 80214d4:	fb96 f0f3 	sdiv	r0, r6, r3
 80214d8:	f000 fece 	bl	8022278 <labs>
 80214dc:	233c      	movs	r3, #60	; 0x3c
 80214de:	eba8 0a04 	sub.w	sl, r8, r4
 80214e2:	fb90 f2f3 	sdiv	r2, r0, r3
 80214e6:	fb02 0013 	mls	r0, r2, r3, r0
 80214ea:	9000      	str	r0, [sp, #0]
 80214ec:	4a28      	ldr	r2, [pc, #160]	; (8021590 <__strftime+0x9d8>)
 80214ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80214f2:	4651      	mov	r1, sl
 80214f4:	4638      	mov	r0, r7
 80214f6:	fb96 f3f3 	sdiv	r3, r6, r3
 80214fa:	f001 fbbb 	bl	8022c74 <sniprintf>
 80214fe:	2800      	cmp	r0, #0
 8021500:	f6ff ab89 	blt.w	8020c16 <__strftime+0x5e>
 8021504:	4404      	add	r4, r0
 8021506:	45a0      	cmp	r8, r4
 8021508:	f67f ab85 	bls.w	8020c16 <__strftime+0x5e>
 802150c:	2301      	movs	r3, #1
 802150e:	9304      	str	r3, [sp, #16]
 8021510:	e454      	b.n	8020dbc <__strftime+0x204>
 8021512:	6a2b      	ldr	r3, [r5, #32]
 8021514:	2b00      	cmp	r3, #0
 8021516:	f6ff ac51 	blt.w	8020dbc <__strftime+0x204>
 802151a:	f000 fa1f 	bl	802195c <__tz_lock>
 802151e:	9b04      	ldr	r3, [sp, #16]
 8021520:	b90b      	cbnz	r3, 8021526 <__strftime+0x96e>
 8021522:	f000 fa27 	bl	8021974 <_tzset_unlocked>
 8021526:	6a2b      	ldr	r3, [r5, #32]
 8021528:	4a1a      	ldr	r2, [pc, #104]	; (8021594 <__strftime+0x9dc>)
 802152a:	2b00      	cmp	r3, #0
 802152c:	bfd4      	ite	le
 802152e:	2300      	movle	r3, #0
 8021530:	2301      	movgt	r3, #1
 8021532:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021536:	4630      	mov	r0, r6
 8021538:	f7de fe80 	bl	800023c <strlen>
 802153c:	3e01      	subs	r6, #1
 802153e:	4420      	add	r0, r4
 8021540:	f108 33ff 	add.w	r3, r8, #4294967295
 8021544:	42a0      	cmp	r0, r4
 8021546:	d102      	bne.n	802154e <__strftime+0x996>
 8021548:	f000 fa0e 	bl	8021968 <__tz_unlock>
 802154c:	e7de      	b.n	802150c <__strftime+0x954>
 802154e:	42a3      	cmp	r3, r4
 8021550:	d905      	bls.n	802155e <__strftime+0x9a6>
 8021552:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8021556:	f809 2004 	strb.w	r2, [r9, r4]
 802155a:	3401      	adds	r4, #1
 802155c:	e7f2      	b.n	8021544 <__strftime+0x98c>
 802155e:	f000 fa03 	bl	8021968 <__tz_unlock>
 8021562:	f7ff bb58 	b.w	8020c16 <__strftime+0x5e>
 8021566:	f108 33ff 	add.w	r3, r8, #4294967295
 802156a:	42a3      	cmp	r3, r4
 802156c:	f67f ab53 	bls.w	8020c16 <__strftime+0x5e>
 8021570:	2325      	movs	r3, #37	; 0x25
 8021572:	e627      	b.n	80211c4 <__strftime+0x60c>
 8021574:	f1b8 0f00 	cmp.w	r8, #0
 8021578:	d002      	beq.n	8021580 <__strftime+0x9c8>
 802157a:	2300      	movs	r3, #0
 802157c:	f809 3004 	strb.w	r3, [r9, r4]
 8021580:	4620      	mov	r0, r4
 8021582:	b011      	add	sp, #68	; 0x44
 8021584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021588:	fffff894 	.word	0xfffff894
 802158c:	080296bb 	.word	0x080296bb
 8021590:	080296d8 	.word	0x080296d8
 8021594:	2000016c 	.word	0x2000016c

08021598 <strftime>:
 8021598:	b513      	push	{r0, r1, r4, lr}
 802159a:	4c03      	ldr	r4, [pc, #12]	; (80215a8 <strftime+0x10>)
 802159c:	9400      	str	r4, [sp, #0]
 802159e:	f7ff fb0b 	bl	8020bb8 <__strftime>
 80215a2:	b002      	add	sp, #8
 80215a4:	bd10      	pop	{r4, pc}
 80215a6:	bf00      	nop
 80215a8:	200001d0 	.word	0x200001d0

080215ac <strstr>:
 80215ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215ae:	780c      	ldrb	r4, [r1, #0]
 80215b0:	b164      	cbz	r4, 80215cc <strstr+0x20>
 80215b2:	4603      	mov	r3, r0
 80215b4:	781a      	ldrb	r2, [r3, #0]
 80215b6:	4618      	mov	r0, r3
 80215b8:	1c5e      	adds	r6, r3, #1
 80215ba:	b90a      	cbnz	r2, 80215c0 <strstr+0x14>
 80215bc:	4610      	mov	r0, r2
 80215be:	e005      	b.n	80215cc <strstr+0x20>
 80215c0:	4294      	cmp	r4, r2
 80215c2:	d108      	bne.n	80215d6 <strstr+0x2a>
 80215c4:	460d      	mov	r5, r1
 80215c6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80215ca:	b902      	cbnz	r2, 80215ce <strstr+0x22>
 80215cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80215ce:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80215d2:	4297      	cmp	r7, r2
 80215d4:	d0f7      	beq.n	80215c6 <strstr+0x1a>
 80215d6:	4633      	mov	r3, r6
 80215d8:	e7ec      	b.n	80215b4 <strstr+0x8>
	...

080215dc <_strtol_l.isra.0>:
 80215dc:	2b01      	cmp	r3, #1
 80215de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80215e2:	d001      	beq.n	80215e8 <_strtol_l.isra.0+0xc>
 80215e4:	2b24      	cmp	r3, #36	; 0x24
 80215e6:	d906      	bls.n	80215f6 <_strtol_l.isra.0+0x1a>
 80215e8:	f7fe fa8c 	bl	801fb04 <__errno>
 80215ec:	2316      	movs	r3, #22
 80215ee:	6003      	str	r3, [r0, #0]
 80215f0:	2000      	movs	r0, #0
 80215f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80215f6:	4f3a      	ldr	r7, [pc, #232]	; (80216e0 <_strtol_l.isra.0+0x104>)
 80215f8:	468e      	mov	lr, r1
 80215fa:	4676      	mov	r6, lr
 80215fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021600:	5de5      	ldrb	r5, [r4, r7]
 8021602:	f015 0508 	ands.w	r5, r5, #8
 8021606:	d1f8      	bne.n	80215fa <_strtol_l.isra.0+0x1e>
 8021608:	2c2d      	cmp	r4, #45	; 0x2d
 802160a:	d134      	bne.n	8021676 <_strtol_l.isra.0+0x9a>
 802160c:	f89e 4000 	ldrb.w	r4, [lr]
 8021610:	f04f 0801 	mov.w	r8, #1
 8021614:	f106 0e02 	add.w	lr, r6, #2
 8021618:	2b00      	cmp	r3, #0
 802161a:	d05c      	beq.n	80216d6 <_strtol_l.isra.0+0xfa>
 802161c:	2b10      	cmp	r3, #16
 802161e:	d10c      	bne.n	802163a <_strtol_l.isra.0+0x5e>
 8021620:	2c30      	cmp	r4, #48	; 0x30
 8021622:	d10a      	bne.n	802163a <_strtol_l.isra.0+0x5e>
 8021624:	f89e 4000 	ldrb.w	r4, [lr]
 8021628:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802162c:	2c58      	cmp	r4, #88	; 0x58
 802162e:	d14d      	bne.n	80216cc <_strtol_l.isra.0+0xf0>
 8021630:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021634:	2310      	movs	r3, #16
 8021636:	f10e 0e02 	add.w	lr, lr, #2
 802163a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 802163e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021642:	2600      	movs	r6, #0
 8021644:	fbbc f9f3 	udiv	r9, ip, r3
 8021648:	4635      	mov	r5, r6
 802164a:	fb03 ca19 	mls	sl, r3, r9, ip
 802164e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021652:	2f09      	cmp	r7, #9
 8021654:	d818      	bhi.n	8021688 <_strtol_l.isra.0+0xac>
 8021656:	463c      	mov	r4, r7
 8021658:	42a3      	cmp	r3, r4
 802165a:	dd24      	ble.n	80216a6 <_strtol_l.isra.0+0xca>
 802165c:	2e00      	cmp	r6, #0
 802165e:	db1f      	blt.n	80216a0 <_strtol_l.isra.0+0xc4>
 8021660:	45a9      	cmp	r9, r5
 8021662:	d31d      	bcc.n	80216a0 <_strtol_l.isra.0+0xc4>
 8021664:	d101      	bne.n	802166a <_strtol_l.isra.0+0x8e>
 8021666:	45a2      	cmp	sl, r4
 8021668:	db1a      	blt.n	80216a0 <_strtol_l.isra.0+0xc4>
 802166a:	fb05 4503 	mla	r5, r5, r3, r4
 802166e:	2601      	movs	r6, #1
 8021670:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021674:	e7eb      	b.n	802164e <_strtol_l.isra.0+0x72>
 8021676:	2c2b      	cmp	r4, #43	; 0x2b
 8021678:	bf08      	it	eq
 802167a:	f89e 4000 	ldrbeq.w	r4, [lr]
 802167e:	46a8      	mov	r8, r5
 8021680:	bf08      	it	eq
 8021682:	f106 0e02 	addeq.w	lr, r6, #2
 8021686:	e7c7      	b.n	8021618 <_strtol_l.isra.0+0x3c>
 8021688:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802168c:	2f19      	cmp	r7, #25
 802168e:	d801      	bhi.n	8021694 <_strtol_l.isra.0+0xb8>
 8021690:	3c37      	subs	r4, #55	; 0x37
 8021692:	e7e1      	b.n	8021658 <_strtol_l.isra.0+0x7c>
 8021694:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021698:	2f19      	cmp	r7, #25
 802169a:	d804      	bhi.n	80216a6 <_strtol_l.isra.0+0xca>
 802169c:	3c57      	subs	r4, #87	; 0x57
 802169e:	e7db      	b.n	8021658 <_strtol_l.isra.0+0x7c>
 80216a0:	f04f 36ff 	mov.w	r6, #4294967295
 80216a4:	e7e4      	b.n	8021670 <_strtol_l.isra.0+0x94>
 80216a6:	2e00      	cmp	r6, #0
 80216a8:	da05      	bge.n	80216b6 <_strtol_l.isra.0+0xda>
 80216aa:	2322      	movs	r3, #34	; 0x22
 80216ac:	6003      	str	r3, [r0, #0]
 80216ae:	4665      	mov	r5, ip
 80216b0:	b942      	cbnz	r2, 80216c4 <_strtol_l.isra.0+0xe8>
 80216b2:	4628      	mov	r0, r5
 80216b4:	e79d      	b.n	80215f2 <_strtol_l.isra.0+0x16>
 80216b6:	f1b8 0f00 	cmp.w	r8, #0
 80216ba:	d000      	beq.n	80216be <_strtol_l.isra.0+0xe2>
 80216bc:	426d      	negs	r5, r5
 80216be:	2a00      	cmp	r2, #0
 80216c0:	d0f7      	beq.n	80216b2 <_strtol_l.isra.0+0xd6>
 80216c2:	b10e      	cbz	r6, 80216c8 <_strtol_l.isra.0+0xec>
 80216c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80216c8:	6011      	str	r1, [r2, #0]
 80216ca:	e7f2      	b.n	80216b2 <_strtol_l.isra.0+0xd6>
 80216cc:	2430      	movs	r4, #48	; 0x30
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d1b3      	bne.n	802163a <_strtol_l.isra.0+0x5e>
 80216d2:	2308      	movs	r3, #8
 80216d4:	e7b1      	b.n	802163a <_strtol_l.isra.0+0x5e>
 80216d6:	2c30      	cmp	r4, #48	; 0x30
 80216d8:	d0a4      	beq.n	8021624 <_strtol_l.isra.0+0x48>
 80216da:	230a      	movs	r3, #10
 80216dc:	e7ad      	b.n	802163a <_strtol_l.isra.0+0x5e>
 80216de:	bf00      	nop
 80216e0:	08029985 	.word	0x08029985

080216e4 <_strtol_r>:
 80216e4:	f7ff bf7a 	b.w	80215dc <_strtol_l.isra.0>

080216e8 <strtol>:
 80216e8:	4613      	mov	r3, r2
 80216ea:	460a      	mov	r2, r1
 80216ec:	4601      	mov	r1, r0
 80216ee:	4802      	ldr	r0, [pc, #8]	; (80216f8 <strtol+0x10>)
 80216f0:	6800      	ldr	r0, [r0, #0]
 80216f2:	f7ff bf73 	b.w	80215dc <_strtol_l.isra.0>
 80216f6:	bf00      	nop
 80216f8:	20000108 	.word	0x20000108

080216fc <_strtoul_l.isra.0>:
 80216fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021700:	4e3b      	ldr	r6, [pc, #236]	; (80217f0 <_strtoul_l.isra.0+0xf4>)
 8021702:	4686      	mov	lr, r0
 8021704:	468c      	mov	ip, r1
 8021706:	4660      	mov	r0, ip
 8021708:	f81c 4b01 	ldrb.w	r4, [ip], #1
 802170c:	5da5      	ldrb	r5, [r4, r6]
 802170e:	f015 0508 	ands.w	r5, r5, #8
 8021712:	d1f8      	bne.n	8021706 <_strtoul_l.isra.0+0xa>
 8021714:	2c2d      	cmp	r4, #45	; 0x2d
 8021716:	d134      	bne.n	8021782 <_strtoul_l.isra.0+0x86>
 8021718:	f89c 4000 	ldrb.w	r4, [ip]
 802171c:	f04f 0801 	mov.w	r8, #1
 8021720:	f100 0c02 	add.w	ip, r0, #2
 8021724:	2b00      	cmp	r3, #0
 8021726:	d05e      	beq.n	80217e6 <_strtoul_l.isra.0+0xea>
 8021728:	2b10      	cmp	r3, #16
 802172a:	d10c      	bne.n	8021746 <_strtoul_l.isra.0+0x4a>
 802172c:	2c30      	cmp	r4, #48	; 0x30
 802172e:	d10a      	bne.n	8021746 <_strtoul_l.isra.0+0x4a>
 8021730:	f89c 0000 	ldrb.w	r0, [ip]
 8021734:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8021738:	2858      	cmp	r0, #88	; 0x58
 802173a:	d14f      	bne.n	80217dc <_strtoul_l.isra.0+0xe0>
 802173c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8021740:	2310      	movs	r3, #16
 8021742:	f10c 0c02 	add.w	ip, ip, #2
 8021746:	f04f 37ff 	mov.w	r7, #4294967295
 802174a:	2500      	movs	r5, #0
 802174c:	fbb7 f7f3 	udiv	r7, r7, r3
 8021750:	fb03 f907 	mul.w	r9, r3, r7
 8021754:	ea6f 0909 	mvn.w	r9, r9
 8021758:	4628      	mov	r0, r5
 802175a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 802175e:	2e09      	cmp	r6, #9
 8021760:	d818      	bhi.n	8021794 <_strtoul_l.isra.0+0x98>
 8021762:	4634      	mov	r4, r6
 8021764:	42a3      	cmp	r3, r4
 8021766:	dd24      	ble.n	80217b2 <_strtoul_l.isra.0+0xb6>
 8021768:	2d00      	cmp	r5, #0
 802176a:	db1f      	blt.n	80217ac <_strtoul_l.isra.0+0xb0>
 802176c:	4287      	cmp	r7, r0
 802176e:	d31d      	bcc.n	80217ac <_strtoul_l.isra.0+0xb0>
 8021770:	d101      	bne.n	8021776 <_strtoul_l.isra.0+0x7a>
 8021772:	45a1      	cmp	r9, r4
 8021774:	db1a      	blt.n	80217ac <_strtoul_l.isra.0+0xb0>
 8021776:	fb00 4003 	mla	r0, r0, r3, r4
 802177a:	2501      	movs	r5, #1
 802177c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021780:	e7eb      	b.n	802175a <_strtoul_l.isra.0+0x5e>
 8021782:	2c2b      	cmp	r4, #43	; 0x2b
 8021784:	bf08      	it	eq
 8021786:	f89c 4000 	ldrbeq.w	r4, [ip]
 802178a:	46a8      	mov	r8, r5
 802178c:	bf08      	it	eq
 802178e:	f100 0c02 	addeq.w	ip, r0, #2
 8021792:	e7c7      	b.n	8021724 <_strtoul_l.isra.0+0x28>
 8021794:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8021798:	2e19      	cmp	r6, #25
 802179a:	d801      	bhi.n	80217a0 <_strtoul_l.isra.0+0xa4>
 802179c:	3c37      	subs	r4, #55	; 0x37
 802179e:	e7e1      	b.n	8021764 <_strtoul_l.isra.0+0x68>
 80217a0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80217a4:	2e19      	cmp	r6, #25
 80217a6:	d804      	bhi.n	80217b2 <_strtoul_l.isra.0+0xb6>
 80217a8:	3c57      	subs	r4, #87	; 0x57
 80217aa:	e7db      	b.n	8021764 <_strtoul_l.isra.0+0x68>
 80217ac:	f04f 35ff 	mov.w	r5, #4294967295
 80217b0:	e7e4      	b.n	802177c <_strtoul_l.isra.0+0x80>
 80217b2:	2d00      	cmp	r5, #0
 80217b4:	da07      	bge.n	80217c6 <_strtoul_l.isra.0+0xca>
 80217b6:	2322      	movs	r3, #34	; 0x22
 80217b8:	f8ce 3000 	str.w	r3, [lr]
 80217bc:	f04f 30ff 	mov.w	r0, #4294967295
 80217c0:	b942      	cbnz	r2, 80217d4 <_strtoul_l.isra.0+0xd8>
 80217c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80217c6:	f1b8 0f00 	cmp.w	r8, #0
 80217ca:	d000      	beq.n	80217ce <_strtoul_l.isra.0+0xd2>
 80217cc:	4240      	negs	r0, r0
 80217ce:	2a00      	cmp	r2, #0
 80217d0:	d0f7      	beq.n	80217c2 <_strtoul_l.isra.0+0xc6>
 80217d2:	b10d      	cbz	r5, 80217d8 <_strtoul_l.isra.0+0xdc>
 80217d4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80217d8:	6011      	str	r1, [r2, #0]
 80217da:	e7f2      	b.n	80217c2 <_strtoul_l.isra.0+0xc6>
 80217dc:	2430      	movs	r4, #48	; 0x30
 80217de:	2b00      	cmp	r3, #0
 80217e0:	d1b1      	bne.n	8021746 <_strtoul_l.isra.0+0x4a>
 80217e2:	2308      	movs	r3, #8
 80217e4:	e7af      	b.n	8021746 <_strtoul_l.isra.0+0x4a>
 80217e6:	2c30      	cmp	r4, #48	; 0x30
 80217e8:	d0a2      	beq.n	8021730 <_strtoul_l.isra.0+0x34>
 80217ea:	230a      	movs	r3, #10
 80217ec:	e7ab      	b.n	8021746 <_strtoul_l.isra.0+0x4a>
 80217ee:	bf00      	nop
 80217f0:	08029985 	.word	0x08029985

080217f4 <_strtoul_r>:
 80217f4:	f7ff bf82 	b.w	80216fc <_strtoul_l.isra.0>

080217f8 <strtoul>:
 80217f8:	4613      	mov	r3, r2
 80217fa:	460a      	mov	r2, r1
 80217fc:	4601      	mov	r1, r0
 80217fe:	4802      	ldr	r0, [pc, #8]	; (8021808 <strtoul+0x10>)
 8021800:	6800      	ldr	r0, [r0, #0]
 8021802:	f7ff bf7b 	b.w	80216fc <_strtoul_l.isra.0>
 8021806:	bf00      	nop
 8021808:	20000108 	.word	0x20000108

0802180c <__tzcalc_limits>:
 802180c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021810:	4680      	mov	r8, r0
 8021812:	f000 fc6d 	bl	80220f0 <__gettzinfo>
 8021816:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802181a:	4598      	cmp	r8, r3
 802181c:	f340 8098 	ble.w	8021950 <__tzcalc_limits+0x144>
 8021820:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8021824:	4443      	add	r3, r8
 8021826:	109b      	asrs	r3, r3, #2
 8021828:	f240 126d 	movw	r2, #365	; 0x16d
 802182c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8021830:	fb02 3505 	mla	r5, r2, r5, r3
 8021834:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8021838:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 802183c:	fb93 f3f2 	sdiv	r3, r3, r2
 8021840:	441d      	add	r5, r3
 8021842:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8021846:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 802184a:	fb98 f7f3 	sdiv	r7, r8, r3
 802184e:	fb03 8717 	mls	r7, r3, r7, r8
 8021852:	4442      	add	r2, r8
 8021854:	fab7 fc87 	clz	ip, r7
 8021858:	fbb2 f2f3 	udiv	r2, r2, r3
 802185c:	f008 0303 	and.w	r3, r8, #3
 8021860:	4415      	add	r5, r2
 8021862:	2264      	movs	r2, #100	; 0x64
 8021864:	f8c0 8004 	str.w	r8, [r0, #4]
 8021868:	fb98 f6f2 	sdiv	r6, r8, r2
 802186c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021870:	fb02 8616 	mls	r6, r2, r6, r8
 8021874:	4604      	mov	r4, r0
 8021876:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 802187a:	9300      	str	r3, [sp, #0]
 802187c:	f04f 0e07 	mov.w	lr, #7
 8021880:	7a22      	ldrb	r2, [r4, #8]
 8021882:	6963      	ldr	r3, [r4, #20]
 8021884:	2a4a      	cmp	r2, #74	; 0x4a
 8021886:	d128      	bne.n	80218da <__tzcalc_limits+0xce>
 8021888:	9900      	ldr	r1, [sp, #0]
 802188a:	18ea      	adds	r2, r5, r3
 802188c:	b901      	cbnz	r1, 8021890 <__tzcalc_limits+0x84>
 802188e:	b906      	cbnz	r6, 8021892 <__tzcalc_limits+0x86>
 8021890:	bb0f      	cbnz	r7, 80218d6 <__tzcalc_limits+0xca>
 8021892:	2b3b      	cmp	r3, #59	; 0x3b
 8021894:	bfd4      	ite	le
 8021896:	2300      	movle	r3, #0
 8021898:	2301      	movgt	r3, #1
 802189a:	4413      	add	r3, r2
 802189c:	1e5a      	subs	r2, r3, #1
 802189e:	69a3      	ldr	r3, [r4, #24]
 80218a0:	492c      	ldr	r1, [pc, #176]	; (8021954 <__tzcalc_limits+0x148>)
 80218a2:	fb01 3202 	mla	r2, r1, r2, r3
 80218a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80218a8:	4413      	add	r3, r2
 80218aa:	461a      	mov	r2, r3
 80218ac:	17db      	asrs	r3, r3, #31
 80218ae:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80218b2:	3428      	adds	r4, #40	; 0x28
 80218b4:	45a3      	cmp	fp, r4
 80218b6:	d1e3      	bne.n	8021880 <__tzcalc_limits+0x74>
 80218b8:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80218bc:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80218c0:	4294      	cmp	r4, r2
 80218c2:	eb75 0303 	sbcs.w	r3, r5, r3
 80218c6:	bfb4      	ite	lt
 80218c8:	2301      	movlt	r3, #1
 80218ca:	2300      	movge	r3, #0
 80218cc:	6003      	str	r3, [r0, #0]
 80218ce:	2001      	movs	r0, #1
 80218d0:	b003      	add	sp, #12
 80218d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218d6:	2300      	movs	r3, #0
 80218d8:	e7df      	b.n	802189a <__tzcalc_limits+0x8e>
 80218da:	2a44      	cmp	r2, #68	; 0x44
 80218dc:	d101      	bne.n	80218e2 <__tzcalc_limits+0xd6>
 80218de:	18ea      	adds	r2, r5, r3
 80218e0:	e7dd      	b.n	802189e <__tzcalc_limits+0x92>
 80218e2:	9a00      	ldr	r2, [sp, #0]
 80218e4:	bb72      	cbnz	r2, 8021944 <__tzcalc_limits+0x138>
 80218e6:	2e00      	cmp	r6, #0
 80218e8:	bf0c      	ite	eq
 80218ea:	46e0      	moveq	r8, ip
 80218ec:	f04f 0801 	movne.w	r8, #1
 80218f0:	4919      	ldr	r1, [pc, #100]	; (8021958 <__tzcalc_limits+0x14c>)
 80218f2:	68e2      	ldr	r2, [r4, #12]
 80218f4:	9201      	str	r2, [sp, #4]
 80218f6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80218fa:	fb0a 1808 	mla	r8, sl, r8, r1
 80218fe:	462a      	mov	r2, r5
 8021900:	f04f 0900 	mov.w	r9, #0
 8021904:	f1a8 0804 	sub.w	r8, r8, #4
 8021908:	9901      	ldr	r1, [sp, #4]
 802190a:	f109 0901 	add.w	r9, r9, #1
 802190e:	4549      	cmp	r1, r9
 8021910:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8021914:	dc18      	bgt.n	8021948 <__tzcalc_limits+0x13c>
 8021916:	f102 0804 	add.w	r8, r2, #4
 802191a:	fb98 f9fe 	sdiv	r9, r8, lr
 802191e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8021922:	eba8 0909 	sub.w	r9, r8, r9
 8021926:	ebb3 0909 	subs.w	r9, r3, r9
 802192a:	6923      	ldr	r3, [r4, #16]
 802192c:	f103 33ff 	add.w	r3, r3, #4294967295
 8021930:	bf48      	it	mi
 8021932:	f109 0907 	addmi.w	r9, r9, #7
 8021936:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802193a:	444b      	add	r3, r9
 802193c:	4553      	cmp	r3, sl
 802193e:	da05      	bge.n	802194c <__tzcalc_limits+0x140>
 8021940:	441a      	add	r2, r3
 8021942:	e7ac      	b.n	802189e <__tzcalc_limits+0x92>
 8021944:	46e0      	mov	r8, ip
 8021946:	e7d3      	b.n	80218f0 <__tzcalc_limits+0xe4>
 8021948:	4452      	add	r2, sl
 802194a:	e7dd      	b.n	8021908 <__tzcalc_limits+0xfc>
 802194c:	3b07      	subs	r3, #7
 802194e:	e7f5      	b.n	802193c <__tzcalc_limits+0x130>
 8021950:	2000      	movs	r0, #0
 8021952:	e7bd      	b.n	80218d0 <__tzcalc_limits+0xc4>
 8021954:	00015180 	.word	0x00015180
 8021958:	080295cc 	.word	0x080295cc

0802195c <__tz_lock>:
 802195c:	4801      	ldr	r0, [pc, #4]	; (8021964 <__tz_lock+0x8>)
 802195e:	f7fe be29 	b.w	80205b4 <__retarget_lock_acquire>
 8021962:	bf00      	nop
 8021964:	20000f8f 	.word	0x20000f8f

08021968 <__tz_unlock>:
 8021968:	4801      	ldr	r0, [pc, #4]	; (8021970 <__tz_unlock+0x8>)
 802196a:	f7fe be25 	b.w	80205b8 <__retarget_lock_release>
 802196e:	bf00      	nop
 8021970:	20000f8f 	.word	0x20000f8f

08021974 <_tzset_unlocked>:
 8021974:	4b01      	ldr	r3, [pc, #4]	; (802197c <_tzset_unlocked+0x8>)
 8021976:	6818      	ldr	r0, [r3, #0]
 8021978:	f000 b802 	b.w	8021980 <_tzset_unlocked_r>
 802197c:	20000108 	.word	0x20000108

08021980 <_tzset_unlocked_r>:
 8021980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021984:	b08d      	sub	sp, #52	; 0x34
 8021986:	4607      	mov	r7, r0
 8021988:	f000 fbb2 	bl	80220f0 <__gettzinfo>
 802198c:	49ae      	ldr	r1, [pc, #696]	; (8021c48 <_tzset_unlocked_r+0x2c8>)
 802198e:	4eaf      	ldr	r6, [pc, #700]	; (8021c4c <_tzset_unlocked_r+0x2cc>)
 8021990:	4605      	mov	r5, r0
 8021992:	4638      	mov	r0, r7
 8021994:	f000 fba4 	bl	80220e0 <_getenv_r>
 8021998:	4604      	mov	r4, r0
 802199a:	b970      	cbnz	r0, 80219ba <_tzset_unlocked_r+0x3a>
 802199c:	4bac      	ldr	r3, [pc, #688]	; (8021c50 <_tzset_unlocked_r+0x2d0>)
 802199e:	4aad      	ldr	r2, [pc, #692]	; (8021c54 <_tzset_unlocked_r+0x2d4>)
 80219a0:	6018      	str	r0, [r3, #0]
 80219a2:	4bad      	ldr	r3, [pc, #692]	; (8021c58 <_tzset_unlocked_r+0x2d8>)
 80219a4:	6018      	str	r0, [r3, #0]
 80219a6:	4bad      	ldr	r3, [pc, #692]	; (8021c5c <_tzset_unlocked_r+0x2dc>)
 80219a8:	6830      	ldr	r0, [r6, #0]
 80219aa:	e9c3 2200 	strd	r2, r2, [r3]
 80219ae:	f7fe fe71 	bl	8020694 <free>
 80219b2:	6034      	str	r4, [r6, #0]
 80219b4:	b00d      	add	sp, #52	; 0x34
 80219b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219ba:	6831      	ldr	r1, [r6, #0]
 80219bc:	2900      	cmp	r1, #0
 80219be:	d15f      	bne.n	8021a80 <_tzset_unlocked_r+0x100>
 80219c0:	6830      	ldr	r0, [r6, #0]
 80219c2:	f7fe fe67 	bl	8020694 <free>
 80219c6:	4620      	mov	r0, r4
 80219c8:	f7de fc38 	bl	800023c <strlen>
 80219cc:	1c41      	adds	r1, r0, #1
 80219ce:	4638      	mov	r0, r7
 80219d0:	f7fe fede 	bl	8020790 <_malloc_r>
 80219d4:	6030      	str	r0, [r6, #0]
 80219d6:	2800      	cmp	r0, #0
 80219d8:	d157      	bne.n	8021a8a <_tzset_unlocked_r+0x10a>
 80219da:	7823      	ldrb	r3, [r4, #0]
 80219dc:	4aa0      	ldr	r2, [pc, #640]	; (8021c60 <_tzset_unlocked_r+0x2e0>)
 80219de:	49a1      	ldr	r1, [pc, #644]	; (8021c64 <_tzset_unlocked_r+0x2e4>)
 80219e0:	2b3a      	cmp	r3, #58	; 0x3a
 80219e2:	bf08      	it	eq
 80219e4:	3401      	addeq	r4, #1
 80219e6:	ae0a      	add	r6, sp, #40	; 0x28
 80219e8:	4633      	mov	r3, r6
 80219ea:	4620      	mov	r0, r4
 80219ec:	f001 f976 	bl	8022cdc <siscanf>
 80219f0:	2800      	cmp	r0, #0
 80219f2:	dddf      	ble.n	80219b4 <_tzset_unlocked_r+0x34>
 80219f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219f6:	18e7      	adds	r7, r4, r3
 80219f8:	5ce3      	ldrb	r3, [r4, r3]
 80219fa:	2b2d      	cmp	r3, #45	; 0x2d
 80219fc:	d149      	bne.n	8021a92 <_tzset_unlocked_r+0x112>
 80219fe:	3701      	adds	r7, #1
 8021a00:	f04f 34ff 	mov.w	r4, #4294967295
 8021a04:	f10d 0a20 	add.w	sl, sp, #32
 8021a08:	f10d 0b1e 	add.w	fp, sp, #30
 8021a0c:	f04f 0800 	mov.w	r8, #0
 8021a10:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8021a14:	4994      	ldr	r1, [pc, #592]	; (8021c68 <_tzset_unlocked_r+0x2e8>)
 8021a16:	9603      	str	r6, [sp, #12]
 8021a18:	f8cd b000 	str.w	fp, [sp]
 8021a1c:	4633      	mov	r3, r6
 8021a1e:	aa07      	add	r2, sp, #28
 8021a20:	4638      	mov	r0, r7
 8021a22:	f8ad 801e 	strh.w	r8, [sp, #30]
 8021a26:	f8ad 8020 	strh.w	r8, [sp, #32]
 8021a2a:	f001 f957 	bl	8022cdc <siscanf>
 8021a2e:	4540      	cmp	r0, r8
 8021a30:	ddc0      	ble.n	80219b4 <_tzset_unlocked_r+0x34>
 8021a32:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021a36:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021a3a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8021c74 <_tzset_unlocked_r+0x2f4>
 8021a3e:	213c      	movs	r1, #60	; 0x3c
 8021a40:	fb01 2203 	mla	r2, r1, r3, r2
 8021a44:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021a48:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021a4c:	fb01 2303 	mla	r3, r1, r3, r2
 8021a50:	435c      	muls	r4, r3
 8021a52:	62ac      	str	r4, [r5, #40]	; 0x28
 8021a54:	4c81      	ldr	r4, [pc, #516]	; (8021c5c <_tzset_unlocked_r+0x2dc>)
 8021a56:	4b82      	ldr	r3, [pc, #520]	; (8021c60 <_tzset_unlocked_r+0x2e0>)
 8021a58:	6023      	str	r3, [r4, #0]
 8021a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a5c:	4981      	ldr	r1, [pc, #516]	; (8021c64 <_tzset_unlocked_r+0x2e4>)
 8021a5e:	441f      	add	r7, r3
 8021a60:	464a      	mov	r2, r9
 8021a62:	4633      	mov	r3, r6
 8021a64:	4638      	mov	r0, r7
 8021a66:	f001 f939 	bl	8022cdc <siscanf>
 8021a6a:	4540      	cmp	r0, r8
 8021a6c:	dc16      	bgt.n	8021a9c <_tzset_unlocked_r+0x11c>
 8021a6e:	6823      	ldr	r3, [r4, #0]
 8021a70:	6063      	str	r3, [r4, #4]
 8021a72:	4b77      	ldr	r3, [pc, #476]	; (8021c50 <_tzset_unlocked_r+0x2d0>)
 8021a74:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021a76:	601a      	str	r2, [r3, #0]
 8021a78:	4b77      	ldr	r3, [pc, #476]	; (8021c58 <_tzset_unlocked_r+0x2d8>)
 8021a7a:	f8c3 8000 	str.w	r8, [r3]
 8021a7e:	e799      	b.n	80219b4 <_tzset_unlocked_r+0x34>
 8021a80:	f7de fbe4 	bl	800024c <strcmp>
 8021a84:	2800      	cmp	r0, #0
 8021a86:	d19b      	bne.n	80219c0 <_tzset_unlocked_r+0x40>
 8021a88:	e794      	b.n	80219b4 <_tzset_unlocked_r+0x34>
 8021a8a:	4621      	mov	r1, r4
 8021a8c:	f001 f952 	bl	8022d34 <strcpy>
 8021a90:	e7a3      	b.n	80219da <_tzset_unlocked_r+0x5a>
 8021a92:	2b2b      	cmp	r3, #43	; 0x2b
 8021a94:	bf08      	it	eq
 8021a96:	3701      	addeq	r7, #1
 8021a98:	2401      	movs	r4, #1
 8021a9a:	e7b3      	b.n	8021a04 <_tzset_unlocked_r+0x84>
 8021a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a9e:	f8c4 9004 	str.w	r9, [r4, #4]
 8021aa2:	18fc      	adds	r4, r7, r3
 8021aa4:	5cfb      	ldrb	r3, [r7, r3]
 8021aa6:	2b2d      	cmp	r3, #45	; 0x2d
 8021aa8:	f040 808b 	bne.w	8021bc2 <_tzset_unlocked_r+0x242>
 8021aac:	3401      	adds	r4, #1
 8021aae:	f04f 37ff 	mov.w	r7, #4294967295
 8021ab2:	2300      	movs	r3, #0
 8021ab4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021ab8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021abc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8021ac2:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021ac6:	e9cd b600 	strd	fp, r6, [sp]
 8021aca:	4967      	ldr	r1, [pc, #412]	; (8021c68 <_tzset_unlocked_r+0x2e8>)
 8021acc:	4633      	mov	r3, r6
 8021ace:	aa07      	add	r2, sp, #28
 8021ad0:	4620      	mov	r0, r4
 8021ad2:	f001 f903 	bl	8022cdc <siscanf>
 8021ad6:	2800      	cmp	r0, #0
 8021ad8:	dc78      	bgt.n	8021bcc <_tzset_unlocked_r+0x24c>
 8021ada:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8021adc:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8021ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ae2:	652f      	str	r7, [r5, #80]	; 0x50
 8021ae4:	441c      	add	r4, r3
 8021ae6:	462f      	mov	r7, r5
 8021ae8:	f04f 0900 	mov.w	r9, #0
 8021aec:	7823      	ldrb	r3, [r4, #0]
 8021aee:	2b2c      	cmp	r3, #44	; 0x2c
 8021af0:	bf08      	it	eq
 8021af2:	3401      	addeq	r4, #1
 8021af4:	f894 8000 	ldrb.w	r8, [r4]
 8021af8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8021afc:	d178      	bne.n	8021bf0 <_tzset_unlocked_r+0x270>
 8021afe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8021b02:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8021b06:	ab09      	add	r3, sp, #36	; 0x24
 8021b08:	9300      	str	r3, [sp, #0]
 8021b0a:	4958      	ldr	r1, [pc, #352]	; (8021c6c <_tzset_unlocked_r+0x2ec>)
 8021b0c:	9603      	str	r6, [sp, #12]
 8021b0e:	4633      	mov	r3, r6
 8021b10:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8021b14:	4620      	mov	r0, r4
 8021b16:	f001 f8e1 	bl	8022cdc <siscanf>
 8021b1a:	2803      	cmp	r0, #3
 8021b1c:	f47f af4a 	bne.w	80219b4 <_tzset_unlocked_r+0x34>
 8021b20:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8021b24:	1e4b      	subs	r3, r1, #1
 8021b26:	2b0b      	cmp	r3, #11
 8021b28:	f63f af44 	bhi.w	80219b4 <_tzset_unlocked_r+0x34>
 8021b2c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021b30:	1e53      	subs	r3, r2, #1
 8021b32:	2b04      	cmp	r3, #4
 8021b34:	f63f af3e 	bhi.w	80219b4 <_tzset_unlocked_r+0x34>
 8021b38:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8021b3c:	2b06      	cmp	r3, #6
 8021b3e:	f63f af39 	bhi.w	80219b4 <_tzset_unlocked_r+0x34>
 8021b42:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8021b46:	f887 8008 	strb.w	r8, [r7, #8]
 8021b4a:	617b      	str	r3, [r7, #20]
 8021b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b4e:	eb04 0803 	add.w	r8, r4, r3
 8021b52:	2302      	movs	r3, #2
 8021b54:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021b58:	2300      	movs	r3, #0
 8021b5a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021b5e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021b62:	930a      	str	r3, [sp, #40]	; 0x28
 8021b64:	f898 3000 	ldrb.w	r3, [r8]
 8021b68:	2b2f      	cmp	r3, #47	; 0x2f
 8021b6a:	d109      	bne.n	8021b80 <_tzset_unlocked_r+0x200>
 8021b6c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021b70:	e9cd b600 	strd	fp, r6, [sp]
 8021b74:	493e      	ldr	r1, [pc, #248]	; (8021c70 <_tzset_unlocked_r+0x2f0>)
 8021b76:	4633      	mov	r3, r6
 8021b78:	aa07      	add	r2, sp, #28
 8021b7a:	4640      	mov	r0, r8
 8021b7c:	f001 f8ae 	bl	8022cdc <siscanf>
 8021b80:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021b84:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021b88:	213c      	movs	r1, #60	; 0x3c
 8021b8a:	fb01 2203 	mla	r2, r1, r3, r2
 8021b8e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021b92:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021b96:	fb01 2303 	mla	r3, r1, r3, r2
 8021b9a:	61bb      	str	r3, [r7, #24]
 8021b9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021b9e:	3728      	adds	r7, #40	; 0x28
 8021ba0:	4444      	add	r4, r8
 8021ba2:	f1b9 0f00 	cmp.w	r9, #0
 8021ba6:	d020      	beq.n	8021bea <_tzset_unlocked_r+0x26a>
 8021ba8:	6868      	ldr	r0, [r5, #4]
 8021baa:	f7ff fe2f 	bl	802180c <__tzcalc_limits>
 8021bae:	4b28      	ldr	r3, [pc, #160]	; (8021c50 <_tzset_unlocked_r+0x2d0>)
 8021bb0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021bb2:	601a      	str	r2, [r3, #0]
 8021bb4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8021bb6:	1a9b      	subs	r3, r3, r2
 8021bb8:	4a27      	ldr	r2, [pc, #156]	; (8021c58 <_tzset_unlocked_r+0x2d8>)
 8021bba:	bf18      	it	ne
 8021bbc:	2301      	movne	r3, #1
 8021bbe:	6013      	str	r3, [r2, #0]
 8021bc0:	e6f8      	b.n	80219b4 <_tzset_unlocked_r+0x34>
 8021bc2:	2b2b      	cmp	r3, #43	; 0x2b
 8021bc4:	bf08      	it	eq
 8021bc6:	3401      	addeq	r4, #1
 8021bc8:	2701      	movs	r7, #1
 8021bca:	e772      	b.n	8021ab2 <_tzset_unlocked_r+0x132>
 8021bcc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021bd0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021bd4:	213c      	movs	r1, #60	; 0x3c
 8021bd6:	fb01 2203 	mla	r2, r1, r3, r2
 8021bda:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021bde:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021be2:	fb01 2303 	mla	r3, r1, r3, r2
 8021be6:	435f      	muls	r7, r3
 8021be8:	e77a      	b.n	8021ae0 <_tzset_unlocked_r+0x160>
 8021bea:	f04f 0901 	mov.w	r9, #1
 8021bee:	e77d      	b.n	8021aec <_tzset_unlocked_r+0x16c>
 8021bf0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8021bf4:	bf06      	itte	eq
 8021bf6:	3401      	addeq	r4, #1
 8021bf8:	4643      	moveq	r3, r8
 8021bfa:	2344      	movne	r3, #68	; 0x44
 8021bfc:	220a      	movs	r2, #10
 8021bfe:	a90b      	add	r1, sp, #44	; 0x2c
 8021c00:	4620      	mov	r0, r4
 8021c02:	9305      	str	r3, [sp, #20]
 8021c04:	f7ff fdf8 	bl	80217f8 <strtoul>
 8021c08:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8021c0c:	9b05      	ldr	r3, [sp, #20]
 8021c0e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8021c12:	45a0      	cmp	r8, r4
 8021c14:	d114      	bne.n	8021c40 <_tzset_unlocked_r+0x2c0>
 8021c16:	234d      	movs	r3, #77	; 0x4d
 8021c18:	f1b9 0f00 	cmp.w	r9, #0
 8021c1c:	d107      	bne.n	8021c2e <_tzset_unlocked_r+0x2ae>
 8021c1e:	722b      	strb	r3, [r5, #8]
 8021c20:	2103      	movs	r1, #3
 8021c22:	2302      	movs	r3, #2
 8021c24:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8021c28:	f8c5 9014 	str.w	r9, [r5, #20]
 8021c2c:	e791      	b.n	8021b52 <_tzset_unlocked_r+0x1d2>
 8021c2e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8021c32:	220b      	movs	r2, #11
 8021c34:	2301      	movs	r3, #1
 8021c36:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8021c3a:	2300      	movs	r3, #0
 8021c3c:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021c3e:	e788      	b.n	8021b52 <_tzset_unlocked_r+0x1d2>
 8021c40:	b280      	uxth	r0, r0
 8021c42:	723b      	strb	r3, [r7, #8]
 8021c44:	6178      	str	r0, [r7, #20]
 8021c46:	e784      	b.n	8021b52 <_tzset_unlocked_r+0x1d2>
 8021c48:	0802990c 	.word	0x0802990c
 8021c4c:	20000ee8 	.word	0x20000ee8
 8021c50:	20000ef0 	.word	0x20000ef0
 8021c54:	0802990f 	.word	0x0802990f
 8021c58:	20000eec 	.word	0x20000eec
 8021c5c:	2000016c 	.word	0x2000016c
 8021c60:	20000edb 	.word	0x20000edb
 8021c64:	08029913 	.word	0x08029913
 8021c68:	08029936 	.word	0x08029936
 8021c6c:	08029922 	.word	0x08029922
 8021c70:	08029935 	.word	0x08029935
 8021c74:	20000ed0 	.word	0x20000ed0

08021c78 <_vsniprintf_r>:
 8021c78:	b530      	push	{r4, r5, lr}
 8021c7a:	1e14      	subs	r4, r2, #0
 8021c7c:	4605      	mov	r5, r0
 8021c7e:	b09b      	sub	sp, #108	; 0x6c
 8021c80:	4618      	mov	r0, r3
 8021c82:	da05      	bge.n	8021c90 <_vsniprintf_r+0x18>
 8021c84:	238b      	movs	r3, #139	; 0x8b
 8021c86:	602b      	str	r3, [r5, #0]
 8021c88:	f04f 30ff 	mov.w	r0, #4294967295
 8021c8c:	b01b      	add	sp, #108	; 0x6c
 8021c8e:	bd30      	pop	{r4, r5, pc}
 8021c90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021c94:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021c98:	bf14      	ite	ne
 8021c9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021c9e:	4623      	moveq	r3, r4
 8021ca0:	9302      	str	r3, [sp, #8]
 8021ca2:	9305      	str	r3, [sp, #20]
 8021ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021ca8:	9100      	str	r1, [sp, #0]
 8021caa:	9104      	str	r1, [sp, #16]
 8021cac:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021cb0:	4602      	mov	r2, r0
 8021cb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021cb4:	4669      	mov	r1, sp
 8021cb6:	4628      	mov	r0, r5
 8021cb8:	f000 fb94 	bl	80223e4 <_svfiprintf_r>
 8021cbc:	1c43      	adds	r3, r0, #1
 8021cbe:	bfbc      	itt	lt
 8021cc0:	238b      	movlt	r3, #139	; 0x8b
 8021cc2:	602b      	strlt	r3, [r5, #0]
 8021cc4:	2c00      	cmp	r4, #0
 8021cc6:	d0e1      	beq.n	8021c8c <_vsniprintf_r+0x14>
 8021cc8:	9b00      	ldr	r3, [sp, #0]
 8021cca:	2200      	movs	r2, #0
 8021ccc:	701a      	strb	r2, [r3, #0]
 8021cce:	e7dd      	b.n	8021c8c <_vsniprintf_r+0x14>

08021cd0 <vsniprintf>:
 8021cd0:	b507      	push	{r0, r1, r2, lr}
 8021cd2:	9300      	str	r3, [sp, #0]
 8021cd4:	4613      	mov	r3, r2
 8021cd6:	460a      	mov	r2, r1
 8021cd8:	4601      	mov	r1, r0
 8021cda:	4803      	ldr	r0, [pc, #12]	; (8021ce8 <vsniprintf+0x18>)
 8021cdc:	6800      	ldr	r0, [r0, #0]
 8021cde:	f7ff ffcb 	bl	8021c78 <_vsniprintf_r>
 8021ce2:	b003      	add	sp, #12
 8021ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8021ce8:	20000108 	.word	0x20000108

08021cec <__swbuf_r>:
 8021cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021cee:	460e      	mov	r6, r1
 8021cf0:	4614      	mov	r4, r2
 8021cf2:	4605      	mov	r5, r0
 8021cf4:	b118      	cbz	r0, 8021cfe <__swbuf_r+0x12>
 8021cf6:	6983      	ldr	r3, [r0, #24]
 8021cf8:	b90b      	cbnz	r3, 8021cfe <__swbuf_r+0x12>
 8021cfa:	f7fe f8a9 	bl	801fe50 <__sinit>
 8021cfe:	4b21      	ldr	r3, [pc, #132]	; (8021d84 <__swbuf_r+0x98>)
 8021d00:	429c      	cmp	r4, r3
 8021d02:	d12b      	bne.n	8021d5c <__swbuf_r+0x70>
 8021d04:	686c      	ldr	r4, [r5, #4]
 8021d06:	69a3      	ldr	r3, [r4, #24]
 8021d08:	60a3      	str	r3, [r4, #8]
 8021d0a:	89a3      	ldrh	r3, [r4, #12]
 8021d0c:	071a      	lsls	r2, r3, #28
 8021d0e:	d52f      	bpl.n	8021d70 <__swbuf_r+0x84>
 8021d10:	6923      	ldr	r3, [r4, #16]
 8021d12:	b36b      	cbz	r3, 8021d70 <__swbuf_r+0x84>
 8021d14:	6923      	ldr	r3, [r4, #16]
 8021d16:	6820      	ldr	r0, [r4, #0]
 8021d18:	1ac0      	subs	r0, r0, r3
 8021d1a:	6963      	ldr	r3, [r4, #20]
 8021d1c:	b2f6      	uxtb	r6, r6
 8021d1e:	4283      	cmp	r3, r0
 8021d20:	4637      	mov	r7, r6
 8021d22:	dc04      	bgt.n	8021d2e <__swbuf_r+0x42>
 8021d24:	4621      	mov	r1, r4
 8021d26:	4628      	mov	r0, r5
 8021d28:	f7fd ffec 	bl	801fd04 <_fflush_r>
 8021d2c:	bb30      	cbnz	r0, 8021d7c <__swbuf_r+0x90>
 8021d2e:	68a3      	ldr	r3, [r4, #8]
 8021d30:	3b01      	subs	r3, #1
 8021d32:	60a3      	str	r3, [r4, #8]
 8021d34:	6823      	ldr	r3, [r4, #0]
 8021d36:	1c5a      	adds	r2, r3, #1
 8021d38:	6022      	str	r2, [r4, #0]
 8021d3a:	701e      	strb	r6, [r3, #0]
 8021d3c:	6963      	ldr	r3, [r4, #20]
 8021d3e:	3001      	adds	r0, #1
 8021d40:	4283      	cmp	r3, r0
 8021d42:	d004      	beq.n	8021d4e <__swbuf_r+0x62>
 8021d44:	89a3      	ldrh	r3, [r4, #12]
 8021d46:	07db      	lsls	r3, r3, #31
 8021d48:	d506      	bpl.n	8021d58 <__swbuf_r+0x6c>
 8021d4a:	2e0a      	cmp	r6, #10
 8021d4c:	d104      	bne.n	8021d58 <__swbuf_r+0x6c>
 8021d4e:	4621      	mov	r1, r4
 8021d50:	4628      	mov	r0, r5
 8021d52:	f7fd ffd7 	bl	801fd04 <_fflush_r>
 8021d56:	b988      	cbnz	r0, 8021d7c <__swbuf_r+0x90>
 8021d58:	4638      	mov	r0, r7
 8021d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021d5c:	4b0a      	ldr	r3, [pc, #40]	; (8021d88 <__swbuf_r+0x9c>)
 8021d5e:	429c      	cmp	r4, r3
 8021d60:	d101      	bne.n	8021d66 <__swbuf_r+0x7a>
 8021d62:	68ac      	ldr	r4, [r5, #8]
 8021d64:	e7cf      	b.n	8021d06 <__swbuf_r+0x1a>
 8021d66:	4b09      	ldr	r3, [pc, #36]	; (8021d8c <__swbuf_r+0xa0>)
 8021d68:	429c      	cmp	r4, r3
 8021d6a:	bf08      	it	eq
 8021d6c:	68ec      	ldreq	r4, [r5, #12]
 8021d6e:	e7ca      	b.n	8021d06 <__swbuf_r+0x1a>
 8021d70:	4621      	mov	r1, r4
 8021d72:	4628      	mov	r0, r5
 8021d74:	f000 f81e 	bl	8021db4 <__swsetup_r>
 8021d78:	2800      	cmp	r0, #0
 8021d7a:	d0cb      	beq.n	8021d14 <__swbuf_r+0x28>
 8021d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8021d80:	e7ea      	b.n	8021d58 <__swbuf_r+0x6c>
 8021d82:	bf00      	nop
 8021d84:	08029510 	.word	0x08029510
 8021d88:	08029530 	.word	0x08029530
 8021d8c:	080294f0 	.word	0x080294f0

08021d90 <_write_r>:
 8021d90:	b538      	push	{r3, r4, r5, lr}
 8021d92:	4d07      	ldr	r5, [pc, #28]	; (8021db0 <_write_r+0x20>)
 8021d94:	4604      	mov	r4, r0
 8021d96:	4608      	mov	r0, r1
 8021d98:	4611      	mov	r1, r2
 8021d9a:	2200      	movs	r2, #0
 8021d9c:	602a      	str	r2, [r5, #0]
 8021d9e:	461a      	mov	r2, r3
 8021da0:	f7df f816 	bl	8000dd0 <_write>
 8021da4:	1c43      	adds	r3, r0, #1
 8021da6:	d102      	bne.n	8021dae <_write_r+0x1e>
 8021da8:	682b      	ldr	r3, [r5, #0]
 8021daa:	b103      	cbz	r3, 8021dae <_write_r+0x1e>
 8021dac:	6023      	str	r3, [r4, #0]
 8021dae:	bd38      	pop	{r3, r4, r5, pc}
 8021db0:	20000f94 	.word	0x20000f94

08021db4 <__swsetup_r>:
 8021db4:	4b32      	ldr	r3, [pc, #200]	; (8021e80 <__swsetup_r+0xcc>)
 8021db6:	b570      	push	{r4, r5, r6, lr}
 8021db8:	681d      	ldr	r5, [r3, #0]
 8021dba:	4606      	mov	r6, r0
 8021dbc:	460c      	mov	r4, r1
 8021dbe:	b125      	cbz	r5, 8021dca <__swsetup_r+0x16>
 8021dc0:	69ab      	ldr	r3, [r5, #24]
 8021dc2:	b913      	cbnz	r3, 8021dca <__swsetup_r+0x16>
 8021dc4:	4628      	mov	r0, r5
 8021dc6:	f7fe f843 	bl	801fe50 <__sinit>
 8021dca:	4b2e      	ldr	r3, [pc, #184]	; (8021e84 <__swsetup_r+0xd0>)
 8021dcc:	429c      	cmp	r4, r3
 8021dce:	d10f      	bne.n	8021df0 <__swsetup_r+0x3c>
 8021dd0:	686c      	ldr	r4, [r5, #4]
 8021dd2:	89a3      	ldrh	r3, [r4, #12]
 8021dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021dd8:	0719      	lsls	r1, r3, #28
 8021dda:	d42c      	bmi.n	8021e36 <__swsetup_r+0x82>
 8021ddc:	06dd      	lsls	r5, r3, #27
 8021dde:	d411      	bmi.n	8021e04 <__swsetup_r+0x50>
 8021de0:	2309      	movs	r3, #9
 8021de2:	6033      	str	r3, [r6, #0]
 8021de4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021de8:	81a3      	strh	r3, [r4, #12]
 8021dea:	f04f 30ff 	mov.w	r0, #4294967295
 8021dee:	e03e      	b.n	8021e6e <__swsetup_r+0xba>
 8021df0:	4b25      	ldr	r3, [pc, #148]	; (8021e88 <__swsetup_r+0xd4>)
 8021df2:	429c      	cmp	r4, r3
 8021df4:	d101      	bne.n	8021dfa <__swsetup_r+0x46>
 8021df6:	68ac      	ldr	r4, [r5, #8]
 8021df8:	e7eb      	b.n	8021dd2 <__swsetup_r+0x1e>
 8021dfa:	4b24      	ldr	r3, [pc, #144]	; (8021e8c <__swsetup_r+0xd8>)
 8021dfc:	429c      	cmp	r4, r3
 8021dfe:	bf08      	it	eq
 8021e00:	68ec      	ldreq	r4, [r5, #12]
 8021e02:	e7e6      	b.n	8021dd2 <__swsetup_r+0x1e>
 8021e04:	0758      	lsls	r0, r3, #29
 8021e06:	d512      	bpl.n	8021e2e <__swsetup_r+0x7a>
 8021e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021e0a:	b141      	cbz	r1, 8021e1e <__swsetup_r+0x6a>
 8021e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021e10:	4299      	cmp	r1, r3
 8021e12:	d002      	beq.n	8021e1a <__swsetup_r+0x66>
 8021e14:	4630      	mov	r0, r6
 8021e16:	f7fe fc6b 	bl	80206f0 <_free_r>
 8021e1a:	2300      	movs	r3, #0
 8021e1c:	6363      	str	r3, [r4, #52]	; 0x34
 8021e1e:	89a3      	ldrh	r3, [r4, #12]
 8021e20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021e24:	81a3      	strh	r3, [r4, #12]
 8021e26:	2300      	movs	r3, #0
 8021e28:	6063      	str	r3, [r4, #4]
 8021e2a:	6923      	ldr	r3, [r4, #16]
 8021e2c:	6023      	str	r3, [r4, #0]
 8021e2e:	89a3      	ldrh	r3, [r4, #12]
 8021e30:	f043 0308 	orr.w	r3, r3, #8
 8021e34:	81a3      	strh	r3, [r4, #12]
 8021e36:	6923      	ldr	r3, [r4, #16]
 8021e38:	b94b      	cbnz	r3, 8021e4e <__swsetup_r+0x9a>
 8021e3a:	89a3      	ldrh	r3, [r4, #12]
 8021e3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021e44:	d003      	beq.n	8021e4e <__swsetup_r+0x9a>
 8021e46:	4621      	mov	r1, r4
 8021e48:	4630      	mov	r0, r6
 8021e4a:	f7fe fbdb 	bl	8020604 <__smakebuf_r>
 8021e4e:	89a0      	ldrh	r0, [r4, #12]
 8021e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021e54:	f010 0301 	ands.w	r3, r0, #1
 8021e58:	d00a      	beq.n	8021e70 <__swsetup_r+0xbc>
 8021e5a:	2300      	movs	r3, #0
 8021e5c:	60a3      	str	r3, [r4, #8]
 8021e5e:	6963      	ldr	r3, [r4, #20]
 8021e60:	425b      	negs	r3, r3
 8021e62:	61a3      	str	r3, [r4, #24]
 8021e64:	6923      	ldr	r3, [r4, #16]
 8021e66:	b943      	cbnz	r3, 8021e7a <__swsetup_r+0xc6>
 8021e68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021e6c:	d1ba      	bne.n	8021de4 <__swsetup_r+0x30>
 8021e6e:	bd70      	pop	{r4, r5, r6, pc}
 8021e70:	0781      	lsls	r1, r0, #30
 8021e72:	bf58      	it	pl
 8021e74:	6963      	ldrpl	r3, [r4, #20]
 8021e76:	60a3      	str	r3, [r4, #8]
 8021e78:	e7f4      	b.n	8021e64 <__swsetup_r+0xb0>
 8021e7a:	2000      	movs	r0, #0
 8021e7c:	e7f7      	b.n	8021e6e <__swsetup_r+0xba>
 8021e7e:	bf00      	nop
 8021e80:	20000108 	.word	0x20000108
 8021e84:	08029510 	.word	0x08029510
 8021e88:	08029530 	.word	0x08029530
 8021e8c:	080294f0 	.word	0x080294f0

08021e90 <__register_exitproc>:
 8021e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021e94:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8021f50 <__register_exitproc+0xc0>
 8021e98:	4606      	mov	r6, r0
 8021e9a:	f8d8 0000 	ldr.w	r0, [r8]
 8021e9e:	461f      	mov	r7, r3
 8021ea0:	460d      	mov	r5, r1
 8021ea2:	4691      	mov	r9, r2
 8021ea4:	f7fe fb87 	bl	80205b6 <__retarget_lock_acquire_recursive>
 8021ea8:	4b25      	ldr	r3, [pc, #148]	; (8021f40 <__register_exitproc+0xb0>)
 8021eaa:	681c      	ldr	r4, [r3, #0]
 8021eac:	b934      	cbnz	r4, 8021ebc <__register_exitproc+0x2c>
 8021eae:	4c25      	ldr	r4, [pc, #148]	; (8021f44 <__register_exitproc+0xb4>)
 8021eb0:	601c      	str	r4, [r3, #0]
 8021eb2:	4b25      	ldr	r3, [pc, #148]	; (8021f48 <__register_exitproc+0xb8>)
 8021eb4:	b113      	cbz	r3, 8021ebc <__register_exitproc+0x2c>
 8021eb6:	681b      	ldr	r3, [r3, #0]
 8021eb8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8021ebc:	6863      	ldr	r3, [r4, #4]
 8021ebe:	2b1f      	cmp	r3, #31
 8021ec0:	dd07      	ble.n	8021ed2 <__register_exitproc+0x42>
 8021ec2:	f8d8 0000 	ldr.w	r0, [r8]
 8021ec6:	f7fe fb78 	bl	80205ba <__retarget_lock_release_recursive>
 8021eca:	f04f 30ff 	mov.w	r0, #4294967295
 8021ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021ed2:	b34e      	cbz	r6, 8021f28 <__register_exitproc+0x98>
 8021ed4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021ed8:	b988      	cbnz	r0, 8021efe <__register_exitproc+0x6e>
 8021eda:	4b1c      	ldr	r3, [pc, #112]	; (8021f4c <__register_exitproc+0xbc>)
 8021edc:	b923      	cbnz	r3, 8021ee8 <__register_exitproc+0x58>
 8021ede:	f8d8 0000 	ldr.w	r0, [r8]
 8021ee2:	f7fe fb69 	bl	80205b8 <__retarget_lock_release>
 8021ee6:	e7f0      	b.n	8021eca <__register_exitproc+0x3a>
 8021ee8:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021eec:	f7fe fbca 	bl	8020684 <malloc>
 8021ef0:	2800      	cmp	r0, #0
 8021ef2:	d0f4      	beq.n	8021ede <__register_exitproc+0x4e>
 8021ef4:	2300      	movs	r3, #0
 8021ef6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8021efa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8021efe:	6863      	ldr	r3, [r4, #4]
 8021f00:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8021f04:	2201      	movs	r2, #1
 8021f06:	409a      	lsls	r2, r3
 8021f08:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8021f0c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8021f10:	4313      	orrs	r3, r2
 8021f12:	2e02      	cmp	r6, #2
 8021f14:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021f18:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8021f1c:	bf02      	ittt	eq
 8021f1e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8021f22:	431a      	orreq	r2, r3
 8021f24:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8021f28:	6863      	ldr	r3, [r4, #4]
 8021f2a:	f8d8 0000 	ldr.w	r0, [r8]
 8021f2e:	1c5a      	adds	r2, r3, #1
 8021f30:	3302      	adds	r3, #2
 8021f32:	6062      	str	r2, [r4, #4]
 8021f34:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8021f38:	f7fe fb3f 	bl	80205ba <__retarget_lock_release_recursive>
 8021f3c:	2000      	movs	r0, #0
 8021f3e:	e7c6      	b.n	8021ece <__register_exitproc+0x3e>
 8021f40:	20000f80 	.word	0x20000f80
 8021f44:	20000ef4 	.word	0x20000ef4
 8021f48:	00000000 	.word	0x00000000
 8021f4c:	08020685 	.word	0x08020685
 8021f50:	20000174 	.word	0x20000174

08021f54 <abs>:
 8021f54:	2800      	cmp	r0, #0
 8021f56:	bfb8      	it	lt
 8021f58:	4240      	neglt	r0, r0
 8021f5a:	4770      	bx	lr

08021f5c <__assert_func>:
 8021f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021f5e:	4614      	mov	r4, r2
 8021f60:	461a      	mov	r2, r3
 8021f62:	4b09      	ldr	r3, [pc, #36]	; (8021f88 <__assert_func+0x2c>)
 8021f64:	681b      	ldr	r3, [r3, #0]
 8021f66:	4605      	mov	r5, r0
 8021f68:	68d8      	ldr	r0, [r3, #12]
 8021f6a:	b14c      	cbz	r4, 8021f80 <__assert_func+0x24>
 8021f6c:	4b07      	ldr	r3, [pc, #28]	; (8021f8c <__assert_func+0x30>)
 8021f6e:	9100      	str	r1, [sp, #0]
 8021f70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021f74:	4906      	ldr	r1, [pc, #24]	; (8021f90 <__assert_func+0x34>)
 8021f76:	462b      	mov	r3, r5
 8021f78:	f000 f854 	bl	8022024 <fiprintf>
 8021f7c:	f7fd fda8 	bl	801fad0 <abort>
 8021f80:	4b04      	ldr	r3, [pc, #16]	; (8021f94 <__assert_func+0x38>)
 8021f82:	461c      	mov	r4, r3
 8021f84:	e7f3      	b.n	8021f6e <__assert_func+0x12>
 8021f86:	bf00      	nop
 8021f88:	20000108 	.word	0x20000108
 8021f8c:	08029948 	.word	0x08029948
 8021f90:	08029955 	.word	0x08029955
 8021f94:	08029983 	.word	0x08029983

08021f98 <_close_r>:
 8021f98:	b538      	push	{r3, r4, r5, lr}
 8021f9a:	4d06      	ldr	r5, [pc, #24]	; (8021fb4 <_close_r+0x1c>)
 8021f9c:	2300      	movs	r3, #0
 8021f9e:	4604      	mov	r4, r0
 8021fa0:	4608      	mov	r0, r1
 8021fa2:	602b      	str	r3, [r5, #0]
 8021fa4:	f7de ff30 	bl	8000e08 <_close>
 8021fa8:	1c43      	adds	r3, r0, #1
 8021faa:	d102      	bne.n	8021fb2 <_close_r+0x1a>
 8021fac:	682b      	ldr	r3, [r5, #0]
 8021fae:	b103      	cbz	r3, 8021fb2 <_close_r+0x1a>
 8021fb0:	6023      	str	r3, [r4, #0]
 8021fb2:	bd38      	pop	{r3, r4, r5, pc}
 8021fb4:	20000f94 	.word	0x20000f94

08021fb8 <__sflags>:
 8021fb8:	780b      	ldrb	r3, [r1, #0]
 8021fba:	2b72      	cmp	r3, #114	; 0x72
 8021fbc:	b530      	push	{r4, r5, lr}
 8021fbe:	d022      	beq.n	8022006 <__sflags+0x4e>
 8021fc0:	2b77      	cmp	r3, #119	; 0x77
 8021fc2:	d024      	beq.n	802200e <__sflags+0x56>
 8021fc4:	2b61      	cmp	r3, #97	; 0x61
 8021fc6:	d027      	beq.n	8022018 <__sflags+0x60>
 8021fc8:	2316      	movs	r3, #22
 8021fca:	6003      	str	r3, [r0, #0]
 8021fcc:	2000      	movs	r0, #0
 8021fce:	bd30      	pop	{r4, r5, pc}
 8021fd0:	2d62      	cmp	r5, #98	; 0x62
 8021fd2:	d012      	beq.n	8021ffa <__sflags+0x42>
 8021fd4:	2d78      	cmp	r5, #120	; 0x78
 8021fd6:	d013      	beq.n	8022000 <__sflags+0x48>
 8021fd8:	2d2b      	cmp	r5, #43	; 0x2b
 8021fda:	d107      	bne.n	8021fec <__sflags+0x34>
 8021fdc:	f020 001c 	bic.w	r0, r0, #28
 8021fe0:	f023 0303 	bic.w	r3, r3, #3
 8021fe4:	f040 0010 	orr.w	r0, r0, #16
 8021fe8:	f043 0302 	orr.w	r3, r3, #2
 8021fec:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8021ff0:	2d00      	cmp	r5, #0
 8021ff2:	d1ed      	bne.n	8021fd0 <__sflags+0x18>
 8021ff4:	4323      	orrs	r3, r4
 8021ff6:	6013      	str	r3, [r2, #0]
 8021ff8:	e7e9      	b.n	8021fce <__sflags+0x16>
 8021ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021ffe:	e7f5      	b.n	8021fec <__sflags+0x34>
 8022000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8022004:	e7f2      	b.n	8021fec <__sflags+0x34>
 8022006:	2400      	movs	r4, #0
 8022008:	4623      	mov	r3, r4
 802200a:	2004      	movs	r0, #4
 802200c:	e7ee      	b.n	8021fec <__sflags+0x34>
 802200e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8022012:	2301      	movs	r3, #1
 8022014:	2008      	movs	r0, #8
 8022016:	e7e9      	b.n	8021fec <__sflags+0x34>
 8022018:	f44f 7402 	mov.w	r4, #520	; 0x208
 802201c:	2301      	movs	r3, #1
 802201e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8022022:	e7e3      	b.n	8021fec <__sflags+0x34>

08022024 <fiprintf>:
 8022024:	b40e      	push	{r1, r2, r3}
 8022026:	b503      	push	{r0, r1, lr}
 8022028:	4601      	mov	r1, r0
 802202a:	ab03      	add	r3, sp, #12
 802202c:	4805      	ldr	r0, [pc, #20]	; (8022044 <fiprintf+0x20>)
 802202e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022032:	6800      	ldr	r0, [r0, #0]
 8022034:	9301      	str	r3, [sp, #4]
 8022036:	f000 faff 	bl	8022638 <_vfiprintf_r>
 802203a:	b002      	add	sp, #8
 802203c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022040:	b003      	add	sp, #12
 8022042:	4770      	bx	lr
 8022044:	20000108 	.word	0x20000108

08022048 <_fstat_r>:
 8022048:	b538      	push	{r3, r4, r5, lr}
 802204a:	4d07      	ldr	r5, [pc, #28]	; (8022068 <_fstat_r+0x20>)
 802204c:	2300      	movs	r3, #0
 802204e:	4604      	mov	r4, r0
 8022050:	4608      	mov	r0, r1
 8022052:	4611      	mov	r1, r2
 8022054:	602b      	str	r3, [r5, #0]
 8022056:	f7de fee3 	bl	8000e20 <_fstat>
 802205a:	1c43      	adds	r3, r0, #1
 802205c:	d102      	bne.n	8022064 <_fstat_r+0x1c>
 802205e:	682b      	ldr	r3, [r5, #0]
 8022060:	b103      	cbz	r3, 8022064 <_fstat_r+0x1c>
 8022062:	6023      	str	r3, [r4, #0]
 8022064:	bd38      	pop	{r3, r4, r5, pc}
 8022066:	bf00      	nop
 8022068:	20000f94 	.word	0x20000f94

0802206c <_findenv_r>:
 802206c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022070:	4607      	mov	r7, r0
 8022072:	4689      	mov	r9, r1
 8022074:	4616      	mov	r6, r2
 8022076:	f000 fe85 	bl	8022d84 <__env_lock>
 802207a:	4b18      	ldr	r3, [pc, #96]	; (80220dc <_findenv_r+0x70>)
 802207c:	681c      	ldr	r4, [r3, #0]
 802207e:	469a      	mov	sl, r3
 8022080:	b134      	cbz	r4, 8022090 <_findenv_r+0x24>
 8022082:	464b      	mov	r3, r9
 8022084:	4698      	mov	r8, r3
 8022086:	f813 1b01 	ldrb.w	r1, [r3], #1
 802208a:	b139      	cbz	r1, 802209c <_findenv_r+0x30>
 802208c:	293d      	cmp	r1, #61	; 0x3d
 802208e:	d1f9      	bne.n	8022084 <_findenv_r+0x18>
 8022090:	4638      	mov	r0, r7
 8022092:	f000 fe7d 	bl	8022d90 <__env_unlock>
 8022096:	2000      	movs	r0, #0
 8022098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802209c:	eba8 0809 	sub.w	r8, r8, r9
 80220a0:	46a3      	mov	fp, r4
 80220a2:	f854 0b04 	ldr.w	r0, [r4], #4
 80220a6:	2800      	cmp	r0, #0
 80220a8:	d0f2      	beq.n	8022090 <_findenv_r+0x24>
 80220aa:	4642      	mov	r2, r8
 80220ac:	4649      	mov	r1, r9
 80220ae:	f000 fe49 	bl	8022d44 <strncmp>
 80220b2:	2800      	cmp	r0, #0
 80220b4:	d1f4      	bne.n	80220a0 <_findenv_r+0x34>
 80220b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80220ba:	eb03 0508 	add.w	r5, r3, r8
 80220be:	f813 3008 	ldrb.w	r3, [r3, r8]
 80220c2:	2b3d      	cmp	r3, #61	; 0x3d
 80220c4:	d1ec      	bne.n	80220a0 <_findenv_r+0x34>
 80220c6:	f8da 3000 	ldr.w	r3, [sl]
 80220ca:	ebab 0303 	sub.w	r3, fp, r3
 80220ce:	109b      	asrs	r3, r3, #2
 80220d0:	4638      	mov	r0, r7
 80220d2:	6033      	str	r3, [r6, #0]
 80220d4:	f000 fe5c 	bl	8022d90 <__env_unlock>
 80220d8:	1c68      	adds	r0, r5, #1
 80220da:	e7dd      	b.n	8022098 <_findenv_r+0x2c>
 80220dc:	20000000 	.word	0x20000000

080220e0 <_getenv_r>:
 80220e0:	b507      	push	{r0, r1, r2, lr}
 80220e2:	aa01      	add	r2, sp, #4
 80220e4:	f7ff ffc2 	bl	802206c <_findenv_r>
 80220e8:	b003      	add	sp, #12
 80220ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080220f0 <__gettzinfo>:
 80220f0:	4800      	ldr	r0, [pc, #0]	; (80220f4 <__gettzinfo+0x4>)
 80220f2:	4770      	bx	lr
 80220f4:	20000178 	.word	0x20000178

080220f8 <gmtime_r>:
 80220f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220fc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8022100:	460c      	mov	r4, r1
 8022102:	4a51      	ldr	r2, [pc, #324]	; (8022248 <gmtime_r+0x150>)
 8022104:	2300      	movs	r3, #0
 8022106:	4630      	mov	r0, r6
 8022108:	4639      	mov	r1, r7
 802210a:	f7de fb53 	bl	80007b4 <__aeabi_ldivmod>
 802210e:	4639      	mov	r1, r7
 8022110:	4605      	mov	r5, r0
 8022112:	4a4d      	ldr	r2, [pc, #308]	; (8022248 <gmtime_r+0x150>)
 8022114:	4630      	mov	r0, r6
 8022116:	2300      	movs	r3, #0
 8022118:	f7de fb4c 	bl	80007b4 <__aeabi_ldivmod>
 802211c:	2a00      	cmp	r2, #0
 802211e:	bfbc      	itt	lt
 8022120:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8022124:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8022128:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802212c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8022130:	fbb2 f3f1 	udiv	r3, r2, r1
 8022134:	fb01 2213 	mls	r2, r1, r3, r2
 8022138:	f04f 013c 	mov.w	r1, #60	; 0x3c
 802213c:	bfac      	ite	ge
 802213e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8022142:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8022146:	60a3      	str	r3, [r4, #8]
 8022148:	fbb2 f3f1 	udiv	r3, r2, r1
 802214c:	fb01 2213 	mls	r2, r1, r3, r2
 8022150:	6063      	str	r3, [r4, #4]
 8022152:	6022      	str	r2, [r4, #0]
 8022154:	1cc3      	adds	r3, r0, #3
 8022156:	2207      	movs	r2, #7
 8022158:	fb93 f2f2 	sdiv	r2, r3, r2
 802215c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8022160:	1a9b      	subs	r3, r3, r2
 8022162:	bf48      	it	mi
 8022164:	3307      	addmi	r3, #7
 8022166:	2800      	cmp	r0, #0
 8022168:	61a3      	str	r3, [r4, #24]
 802216a:	bfb8      	it	lt
 802216c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8022170:	4936      	ldr	r1, [pc, #216]	; (802224c <gmtime_r+0x154>)
 8022172:	bfae      	itee	ge
 8022174:	fb90 f1f1 	sdivge	r1, r0, r1
 8022178:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 802217c:	fb93 f1f1 	sdivlt	r1, r3, r1
 8022180:	4b33      	ldr	r3, [pc, #204]	; (8022250 <gmtime_r+0x158>)
 8022182:	fb03 0001 	mla	r0, r3, r1, r0
 8022186:	f648 62ac 	movw	r2, #36524	; 0x8eac
 802218a:	fbb0 f2f2 	udiv	r2, r0, r2
 802218e:	4402      	add	r2, r0
 8022190:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8022194:	fbb0 f3fc 	udiv	r3, r0, ip
 8022198:	1ad2      	subs	r2, r2, r3
 802219a:	f240 176d 	movw	r7, #365	; 0x16d
 802219e:	4b2d      	ldr	r3, [pc, #180]	; (8022254 <gmtime_r+0x15c>)
 80221a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80221a4:	2664      	movs	r6, #100	; 0x64
 80221a6:	1ad3      	subs	r3, r2, r3
 80221a8:	fbb3 f5f7 	udiv	r5, r3, r7
 80221ac:	fbb3 f3fc 	udiv	r3, r3, ip
 80221b0:	fbb5 f2f6 	udiv	r2, r5, r6
 80221b4:	1ad3      	subs	r3, r2, r3
 80221b6:	4403      	add	r3, r0
 80221b8:	fb07 3315 	mls	r3, r7, r5, r3
 80221bc:	2099      	movs	r0, #153	; 0x99
 80221be:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80221c2:	f10c 0c02 	add.w	ip, ip, #2
 80221c6:	f103 0e01 	add.w	lr, r3, #1
 80221ca:	fbbc f7f0 	udiv	r7, ip, r0
 80221ce:	4378      	muls	r0, r7
 80221d0:	3002      	adds	r0, #2
 80221d2:	f04f 0805 	mov.w	r8, #5
 80221d6:	fbb0 f0f8 	udiv	r0, r0, r8
 80221da:	ebae 0000 	sub.w	r0, lr, r0
 80221de:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80221e2:	45f4      	cmp	ip, lr
 80221e4:	bf94      	ite	ls
 80221e6:	f04f 0c02 	movls.w	ip, #2
 80221ea:	f06f 0c09 	mvnhi.w	ip, #9
 80221ee:	4467      	add	r7, ip
 80221f0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80221f4:	fb0c 5101 	mla	r1, ip, r1, r5
 80221f8:	2f01      	cmp	r7, #1
 80221fa:	bf98      	it	ls
 80221fc:	3101      	addls	r1, #1
 80221fe:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8022202:	d30c      	bcc.n	802221e <gmtime_r+0x126>
 8022204:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8022208:	61e3      	str	r3, [r4, #28]
 802220a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 802220e:	2300      	movs	r3, #0
 8022210:	60e0      	str	r0, [r4, #12]
 8022212:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8022216:	6223      	str	r3, [r4, #32]
 8022218:	4620      	mov	r0, r4
 802221a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802221e:	f015 0f03 	tst.w	r5, #3
 8022222:	d102      	bne.n	802222a <gmtime_r+0x132>
 8022224:	fb06 5212 	mls	r2, r6, r2, r5
 8022228:	b95a      	cbnz	r2, 8022242 <gmtime_r+0x14a>
 802222a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 802222e:	fbb5 f2f6 	udiv	r2, r5, r6
 8022232:	fb06 5212 	mls	r2, r6, r2, r5
 8022236:	fab2 f282 	clz	r2, r2
 802223a:	0952      	lsrs	r2, r2, #5
 802223c:	333b      	adds	r3, #59	; 0x3b
 802223e:	4413      	add	r3, r2
 8022240:	e7e2      	b.n	8022208 <gmtime_r+0x110>
 8022242:	2201      	movs	r2, #1
 8022244:	e7fa      	b.n	802223c <gmtime_r+0x144>
 8022246:	bf00      	nop
 8022248:	00015180 	.word	0x00015180
 802224c:	00023ab1 	.word	0x00023ab1
 8022250:	fffdc54f 	.word	0xfffdc54f
 8022254:	00023ab0 	.word	0x00023ab0

08022258 <_isatty_r>:
 8022258:	b538      	push	{r3, r4, r5, lr}
 802225a:	4d06      	ldr	r5, [pc, #24]	; (8022274 <_isatty_r+0x1c>)
 802225c:	2300      	movs	r3, #0
 802225e:	4604      	mov	r4, r0
 8022260:	4608      	mov	r0, r1
 8022262:	602b      	str	r3, [r5, #0]
 8022264:	f7de fdec 	bl	8000e40 <_isatty>
 8022268:	1c43      	adds	r3, r0, #1
 802226a:	d102      	bne.n	8022272 <_isatty_r+0x1a>
 802226c:	682b      	ldr	r3, [r5, #0]
 802226e:	b103      	cbz	r3, 8022272 <_isatty_r+0x1a>
 8022270:	6023      	str	r3, [r4, #0]
 8022272:	bd38      	pop	{r3, r4, r5, pc}
 8022274:	20000f94 	.word	0x20000f94

08022278 <labs>:
 8022278:	2800      	cmp	r0, #0
 802227a:	bfb8      	it	lt
 802227c:	4240      	neglt	r0, r0
 802227e:	4770      	bx	lr

08022280 <_lseek_r>:
 8022280:	b538      	push	{r3, r4, r5, lr}
 8022282:	4d07      	ldr	r5, [pc, #28]	; (80222a0 <_lseek_r+0x20>)
 8022284:	4604      	mov	r4, r0
 8022286:	4608      	mov	r0, r1
 8022288:	4611      	mov	r1, r2
 802228a:	2200      	movs	r2, #0
 802228c:	602a      	str	r2, [r5, #0]
 802228e:	461a      	mov	r2, r3
 8022290:	f7de fde1 	bl	8000e56 <_lseek>
 8022294:	1c43      	adds	r3, r0, #1
 8022296:	d102      	bne.n	802229e <_lseek_r+0x1e>
 8022298:	682b      	ldr	r3, [r5, #0]
 802229a:	b103      	cbz	r3, 802229e <_lseek_r+0x1e>
 802229c:	6023      	str	r3, [r4, #0]
 802229e:	bd38      	pop	{r3, r4, r5, pc}
 80222a0:	20000f94 	.word	0x20000f94

080222a4 <__ascii_mbtowc>:
 80222a4:	b082      	sub	sp, #8
 80222a6:	b901      	cbnz	r1, 80222aa <__ascii_mbtowc+0x6>
 80222a8:	a901      	add	r1, sp, #4
 80222aa:	b142      	cbz	r2, 80222be <__ascii_mbtowc+0x1a>
 80222ac:	b14b      	cbz	r3, 80222c2 <__ascii_mbtowc+0x1e>
 80222ae:	7813      	ldrb	r3, [r2, #0]
 80222b0:	600b      	str	r3, [r1, #0]
 80222b2:	7812      	ldrb	r2, [r2, #0]
 80222b4:	1e10      	subs	r0, r2, #0
 80222b6:	bf18      	it	ne
 80222b8:	2001      	movne	r0, #1
 80222ba:	b002      	add	sp, #8
 80222bc:	4770      	bx	lr
 80222be:	4610      	mov	r0, r2
 80222c0:	e7fb      	b.n	80222ba <__ascii_mbtowc+0x16>
 80222c2:	f06f 0001 	mvn.w	r0, #1
 80222c6:	e7f8      	b.n	80222ba <__ascii_mbtowc+0x16>

080222c8 <__malloc_lock>:
 80222c8:	4801      	ldr	r0, [pc, #4]	; (80222d0 <__malloc_lock+0x8>)
 80222ca:	f7fe b974 	b.w	80205b6 <__retarget_lock_acquire_recursive>
 80222ce:	bf00      	nop
 80222d0:	20000f8c 	.word	0x20000f8c

080222d4 <__malloc_unlock>:
 80222d4:	4801      	ldr	r0, [pc, #4]	; (80222dc <__malloc_unlock+0x8>)
 80222d6:	f7fe b970 	b.w	80205ba <__retarget_lock_release_recursive>
 80222da:	bf00      	nop
 80222dc:	20000f8c 	.word	0x20000f8c

080222e0 <_realloc_r>:
 80222e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222e2:	4607      	mov	r7, r0
 80222e4:	4614      	mov	r4, r2
 80222e6:	460e      	mov	r6, r1
 80222e8:	b921      	cbnz	r1, 80222f4 <_realloc_r+0x14>
 80222ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80222ee:	4611      	mov	r1, r2
 80222f0:	f7fe ba4e 	b.w	8020790 <_malloc_r>
 80222f4:	b922      	cbnz	r2, 8022300 <_realloc_r+0x20>
 80222f6:	f7fe f9fb 	bl	80206f0 <_free_r>
 80222fa:	4625      	mov	r5, r4
 80222fc:	4628      	mov	r0, r5
 80222fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022300:	f000 fd66 	bl	8022dd0 <_malloc_usable_size_r>
 8022304:	42a0      	cmp	r0, r4
 8022306:	d20f      	bcs.n	8022328 <_realloc_r+0x48>
 8022308:	4621      	mov	r1, r4
 802230a:	4638      	mov	r0, r7
 802230c:	f7fe fa40 	bl	8020790 <_malloc_r>
 8022310:	4605      	mov	r5, r0
 8022312:	2800      	cmp	r0, #0
 8022314:	d0f2      	beq.n	80222fc <_realloc_r+0x1c>
 8022316:	4631      	mov	r1, r6
 8022318:	4622      	mov	r2, r4
 802231a:	f7fe f9c3 	bl	80206a4 <memcpy>
 802231e:	4631      	mov	r1, r6
 8022320:	4638      	mov	r0, r7
 8022322:	f7fe f9e5 	bl	80206f0 <_free_r>
 8022326:	e7e9      	b.n	80222fc <_realloc_r+0x1c>
 8022328:	4635      	mov	r5, r6
 802232a:	e7e7      	b.n	80222fc <_realloc_r+0x1c>

0802232c <__ssputs_r>:
 802232c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022330:	688e      	ldr	r6, [r1, #8]
 8022332:	429e      	cmp	r6, r3
 8022334:	4682      	mov	sl, r0
 8022336:	460c      	mov	r4, r1
 8022338:	4690      	mov	r8, r2
 802233a:	461f      	mov	r7, r3
 802233c:	d838      	bhi.n	80223b0 <__ssputs_r+0x84>
 802233e:	898a      	ldrh	r2, [r1, #12]
 8022340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022344:	d032      	beq.n	80223ac <__ssputs_r+0x80>
 8022346:	6825      	ldr	r5, [r4, #0]
 8022348:	6909      	ldr	r1, [r1, #16]
 802234a:	eba5 0901 	sub.w	r9, r5, r1
 802234e:	6965      	ldr	r5, [r4, #20]
 8022350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022358:	3301      	adds	r3, #1
 802235a:	444b      	add	r3, r9
 802235c:	106d      	asrs	r5, r5, #1
 802235e:	429d      	cmp	r5, r3
 8022360:	bf38      	it	cc
 8022362:	461d      	movcc	r5, r3
 8022364:	0553      	lsls	r3, r2, #21
 8022366:	d531      	bpl.n	80223cc <__ssputs_r+0xa0>
 8022368:	4629      	mov	r1, r5
 802236a:	f7fe fa11 	bl	8020790 <_malloc_r>
 802236e:	4606      	mov	r6, r0
 8022370:	b950      	cbnz	r0, 8022388 <__ssputs_r+0x5c>
 8022372:	230c      	movs	r3, #12
 8022374:	f8ca 3000 	str.w	r3, [sl]
 8022378:	89a3      	ldrh	r3, [r4, #12]
 802237a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802237e:	81a3      	strh	r3, [r4, #12]
 8022380:	f04f 30ff 	mov.w	r0, #4294967295
 8022384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022388:	6921      	ldr	r1, [r4, #16]
 802238a:	464a      	mov	r2, r9
 802238c:	f7fe f98a 	bl	80206a4 <memcpy>
 8022390:	89a3      	ldrh	r3, [r4, #12]
 8022392:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802239a:	81a3      	strh	r3, [r4, #12]
 802239c:	6126      	str	r6, [r4, #16]
 802239e:	6165      	str	r5, [r4, #20]
 80223a0:	444e      	add	r6, r9
 80223a2:	eba5 0509 	sub.w	r5, r5, r9
 80223a6:	6026      	str	r6, [r4, #0]
 80223a8:	60a5      	str	r5, [r4, #8]
 80223aa:	463e      	mov	r6, r7
 80223ac:	42be      	cmp	r6, r7
 80223ae:	d900      	bls.n	80223b2 <__ssputs_r+0x86>
 80223b0:	463e      	mov	r6, r7
 80223b2:	4632      	mov	r2, r6
 80223b4:	6820      	ldr	r0, [r4, #0]
 80223b6:	4641      	mov	r1, r8
 80223b8:	f000 fcf0 	bl	8022d9c <memmove>
 80223bc:	68a3      	ldr	r3, [r4, #8]
 80223be:	6822      	ldr	r2, [r4, #0]
 80223c0:	1b9b      	subs	r3, r3, r6
 80223c2:	4432      	add	r2, r6
 80223c4:	60a3      	str	r3, [r4, #8]
 80223c6:	6022      	str	r2, [r4, #0]
 80223c8:	2000      	movs	r0, #0
 80223ca:	e7db      	b.n	8022384 <__ssputs_r+0x58>
 80223cc:	462a      	mov	r2, r5
 80223ce:	f7ff ff87 	bl	80222e0 <_realloc_r>
 80223d2:	4606      	mov	r6, r0
 80223d4:	2800      	cmp	r0, #0
 80223d6:	d1e1      	bne.n	802239c <__ssputs_r+0x70>
 80223d8:	6921      	ldr	r1, [r4, #16]
 80223da:	4650      	mov	r0, sl
 80223dc:	f7fe f988 	bl	80206f0 <_free_r>
 80223e0:	e7c7      	b.n	8022372 <__ssputs_r+0x46>
	...

080223e4 <_svfiprintf_r>:
 80223e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223e8:	4698      	mov	r8, r3
 80223ea:	898b      	ldrh	r3, [r1, #12]
 80223ec:	061b      	lsls	r3, r3, #24
 80223ee:	b09d      	sub	sp, #116	; 0x74
 80223f0:	4607      	mov	r7, r0
 80223f2:	460d      	mov	r5, r1
 80223f4:	4614      	mov	r4, r2
 80223f6:	d50e      	bpl.n	8022416 <_svfiprintf_r+0x32>
 80223f8:	690b      	ldr	r3, [r1, #16]
 80223fa:	b963      	cbnz	r3, 8022416 <_svfiprintf_r+0x32>
 80223fc:	2140      	movs	r1, #64	; 0x40
 80223fe:	f7fe f9c7 	bl	8020790 <_malloc_r>
 8022402:	6028      	str	r0, [r5, #0]
 8022404:	6128      	str	r0, [r5, #16]
 8022406:	b920      	cbnz	r0, 8022412 <_svfiprintf_r+0x2e>
 8022408:	230c      	movs	r3, #12
 802240a:	603b      	str	r3, [r7, #0]
 802240c:	f04f 30ff 	mov.w	r0, #4294967295
 8022410:	e0d1      	b.n	80225b6 <_svfiprintf_r+0x1d2>
 8022412:	2340      	movs	r3, #64	; 0x40
 8022414:	616b      	str	r3, [r5, #20]
 8022416:	2300      	movs	r3, #0
 8022418:	9309      	str	r3, [sp, #36]	; 0x24
 802241a:	2320      	movs	r3, #32
 802241c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022420:	f8cd 800c 	str.w	r8, [sp, #12]
 8022424:	2330      	movs	r3, #48	; 0x30
 8022426:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80225d0 <_svfiprintf_r+0x1ec>
 802242a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802242e:	f04f 0901 	mov.w	r9, #1
 8022432:	4623      	mov	r3, r4
 8022434:	469a      	mov	sl, r3
 8022436:	f813 2b01 	ldrb.w	r2, [r3], #1
 802243a:	b10a      	cbz	r2, 8022440 <_svfiprintf_r+0x5c>
 802243c:	2a25      	cmp	r2, #37	; 0x25
 802243e:	d1f9      	bne.n	8022434 <_svfiprintf_r+0x50>
 8022440:	ebba 0b04 	subs.w	fp, sl, r4
 8022444:	d00b      	beq.n	802245e <_svfiprintf_r+0x7a>
 8022446:	465b      	mov	r3, fp
 8022448:	4622      	mov	r2, r4
 802244a:	4629      	mov	r1, r5
 802244c:	4638      	mov	r0, r7
 802244e:	f7ff ff6d 	bl	802232c <__ssputs_r>
 8022452:	3001      	adds	r0, #1
 8022454:	f000 80aa 	beq.w	80225ac <_svfiprintf_r+0x1c8>
 8022458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802245a:	445a      	add	r2, fp
 802245c:	9209      	str	r2, [sp, #36]	; 0x24
 802245e:	f89a 3000 	ldrb.w	r3, [sl]
 8022462:	2b00      	cmp	r3, #0
 8022464:	f000 80a2 	beq.w	80225ac <_svfiprintf_r+0x1c8>
 8022468:	2300      	movs	r3, #0
 802246a:	f04f 32ff 	mov.w	r2, #4294967295
 802246e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022472:	f10a 0a01 	add.w	sl, sl, #1
 8022476:	9304      	str	r3, [sp, #16]
 8022478:	9307      	str	r3, [sp, #28]
 802247a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802247e:	931a      	str	r3, [sp, #104]	; 0x68
 8022480:	4654      	mov	r4, sl
 8022482:	2205      	movs	r2, #5
 8022484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022488:	4851      	ldr	r0, [pc, #324]	; (80225d0 <_svfiprintf_r+0x1ec>)
 802248a:	f7dd fee9 	bl	8000260 <memchr>
 802248e:	9a04      	ldr	r2, [sp, #16]
 8022490:	b9d8      	cbnz	r0, 80224ca <_svfiprintf_r+0xe6>
 8022492:	06d0      	lsls	r0, r2, #27
 8022494:	bf44      	itt	mi
 8022496:	2320      	movmi	r3, #32
 8022498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802249c:	0711      	lsls	r1, r2, #28
 802249e:	bf44      	itt	mi
 80224a0:	232b      	movmi	r3, #43	; 0x2b
 80224a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80224a6:	f89a 3000 	ldrb.w	r3, [sl]
 80224aa:	2b2a      	cmp	r3, #42	; 0x2a
 80224ac:	d015      	beq.n	80224da <_svfiprintf_r+0xf6>
 80224ae:	9a07      	ldr	r2, [sp, #28]
 80224b0:	4654      	mov	r4, sl
 80224b2:	2000      	movs	r0, #0
 80224b4:	f04f 0c0a 	mov.w	ip, #10
 80224b8:	4621      	mov	r1, r4
 80224ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80224be:	3b30      	subs	r3, #48	; 0x30
 80224c0:	2b09      	cmp	r3, #9
 80224c2:	d94e      	bls.n	8022562 <_svfiprintf_r+0x17e>
 80224c4:	b1b0      	cbz	r0, 80224f4 <_svfiprintf_r+0x110>
 80224c6:	9207      	str	r2, [sp, #28]
 80224c8:	e014      	b.n	80224f4 <_svfiprintf_r+0x110>
 80224ca:	eba0 0308 	sub.w	r3, r0, r8
 80224ce:	fa09 f303 	lsl.w	r3, r9, r3
 80224d2:	4313      	orrs	r3, r2
 80224d4:	9304      	str	r3, [sp, #16]
 80224d6:	46a2      	mov	sl, r4
 80224d8:	e7d2      	b.n	8022480 <_svfiprintf_r+0x9c>
 80224da:	9b03      	ldr	r3, [sp, #12]
 80224dc:	1d19      	adds	r1, r3, #4
 80224de:	681b      	ldr	r3, [r3, #0]
 80224e0:	9103      	str	r1, [sp, #12]
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	bfbb      	ittet	lt
 80224e6:	425b      	neglt	r3, r3
 80224e8:	f042 0202 	orrlt.w	r2, r2, #2
 80224ec:	9307      	strge	r3, [sp, #28]
 80224ee:	9307      	strlt	r3, [sp, #28]
 80224f0:	bfb8      	it	lt
 80224f2:	9204      	strlt	r2, [sp, #16]
 80224f4:	7823      	ldrb	r3, [r4, #0]
 80224f6:	2b2e      	cmp	r3, #46	; 0x2e
 80224f8:	d10c      	bne.n	8022514 <_svfiprintf_r+0x130>
 80224fa:	7863      	ldrb	r3, [r4, #1]
 80224fc:	2b2a      	cmp	r3, #42	; 0x2a
 80224fe:	d135      	bne.n	802256c <_svfiprintf_r+0x188>
 8022500:	9b03      	ldr	r3, [sp, #12]
 8022502:	1d1a      	adds	r2, r3, #4
 8022504:	681b      	ldr	r3, [r3, #0]
 8022506:	9203      	str	r2, [sp, #12]
 8022508:	2b00      	cmp	r3, #0
 802250a:	bfb8      	it	lt
 802250c:	f04f 33ff 	movlt.w	r3, #4294967295
 8022510:	3402      	adds	r4, #2
 8022512:	9305      	str	r3, [sp, #20]
 8022514:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80225e0 <_svfiprintf_r+0x1fc>
 8022518:	7821      	ldrb	r1, [r4, #0]
 802251a:	2203      	movs	r2, #3
 802251c:	4650      	mov	r0, sl
 802251e:	f7dd fe9f 	bl	8000260 <memchr>
 8022522:	b140      	cbz	r0, 8022536 <_svfiprintf_r+0x152>
 8022524:	2340      	movs	r3, #64	; 0x40
 8022526:	eba0 000a 	sub.w	r0, r0, sl
 802252a:	fa03 f000 	lsl.w	r0, r3, r0
 802252e:	9b04      	ldr	r3, [sp, #16]
 8022530:	4303      	orrs	r3, r0
 8022532:	3401      	adds	r4, #1
 8022534:	9304      	str	r3, [sp, #16]
 8022536:	f814 1b01 	ldrb.w	r1, [r4], #1
 802253a:	4826      	ldr	r0, [pc, #152]	; (80225d4 <_svfiprintf_r+0x1f0>)
 802253c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022540:	2206      	movs	r2, #6
 8022542:	f7dd fe8d 	bl	8000260 <memchr>
 8022546:	2800      	cmp	r0, #0
 8022548:	d038      	beq.n	80225bc <_svfiprintf_r+0x1d8>
 802254a:	4b23      	ldr	r3, [pc, #140]	; (80225d8 <_svfiprintf_r+0x1f4>)
 802254c:	bb1b      	cbnz	r3, 8022596 <_svfiprintf_r+0x1b2>
 802254e:	9b03      	ldr	r3, [sp, #12]
 8022550:	3307      	adds	r3, #7
 8022552:	f023 0307 	bic.w	r3, r3, #7
 8022556:	3308      	adds	r3, #8
 8022558:	9303      	str	r3, [sp, #12]
 802255a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802255c:	4433      	add	r3, r6
 802255e:	9309      	str	r3, [sp, #36]	; 0x24
 8022560:	e767      	b.n	8022432 <_svfiprintf_r+0x4e>
 8022562:	fb0c 3202 	mla	r2, ip, r2, r3
 8022566:	460c      	mov	r4, r1
 8022568:	2001      	movs	r0, #1
 802256a:	e7a5      	b.n	80224b8 <_svfiprintf_r+0xd4>
 802256c:	2300      	movs	r3, #0
 802256e:	3401      	adds	r4, #1
 8022570:	9305      	str	r3, [sp, #20]
 8022572:	4619      	mov	r1, r3
 8022574:	f04f 0c0a 	mov.w	ip, #10
 8022578:	4620      	mov	r0, r4
 802257a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802257e:	3a30      	subs	r2, #48	; 0x30
 8022580:	2a09      	cmp	r2, #9
 8022582:	d903      	bls.n	802258c <_svfiprintf_r+0x1a8>
 8022584:	2b00      	cmp	r3, #0
 8022586:	d0c5      	beq.n	8022514 <_svfiprintf_r+0x130>
 8022588:	9105      	str	r1, [sp, #20]
 802258a:	e7c3      	b.n	8022514 <_svfiprintf_r+0x130>
 802258c:	fb0c 2101 	mla	r1, ip, r1, r2
 8022590:	4604      	mov	r4, r0
 8022592:	2301      	movs	r3, #1
 8022594:	e7f0      	b.n	8022578 <_svfiprintf_r+0x194>
 8022596:	ab03      	add	r3, sp, #12
 8022598:	9300      	str	r3, [sp, #0]
 802259a:	462a      	mov	r2, r5
 802259c:	4b0f      	ldr	r3, [pc, #60]	; (80225dc <_svfiprintf_r+0x1f8>)
 802259e:	a904      	add	r1, sp, #16
 80225a0:	4638      	mov	r0, r7
 80225a2:	f3af 8000 	nop.w
 80225a6:	1c42      	adds	r2, r0, #1
 80225a8:	4606      	mov	r6, r0
 80225aa:	d1d6      	bne.n	802255a <_svfiprintf_r+0x176>
 80225ac:	89ab      	ldrh	r3, [r5, #12]
 80225ae:	065b      	lsls	r3, r3, #25
 80225b0:	f53f af2c 	bmi.w	802240c <_svfiprintf_r+0x28>
 80225b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80225b6:	b01d      	add	sp, #116	; 0x74
 80225b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225bc:	ab03      	add	r3, sp, #12
 80225be:	9300      	str	r3, [sp, #0]
 80225c0:	462a      	mov	r2, r5
 80225c2:	4b06      	ldr	r3, [pc, #24]	; (80225dc <_svfiprintf_r+0x1f8>)
 80225c4:	a904      	add	r1, sp, #16
 80225c6:	4638      	mov	r0, r7
 80225c8:	f000 f9d4 	bl	8022974 <_printf_i>
 80225cc:	e7eb      	b.n	80225a6 <_svfiprintf_r+0x1c2>
 80225ce:	bf00      	nop
 80225d0:	08029a8f 	.word	0x08029a8f
 80225d4:	08029a99 	.word	0x08029a99
 80225d8:	00000000 	.word	0x00000000
 80225dc:	0802232d 	.word	0x0802232d
 80225e0:	08029a95 	.word	0x08029a95

080225e4 <__sfputc_r>:
 80225e4:	6893      	ldr	r3, [r2, #8]
 80225e6:	3b01      	subs	r3, #1
 80225e8:	2b00      	cmp	r3, #0
 80225ea:	b410      	push	{r4}
 80225ec:	6093      	str	r3, [r2, #8]
 80225ee:	da08      	bge.n	8022602 <__sfputc_r+0x1e>
 80225f0:	6994      	ldr	r4, [r2, #24]
 80225f2:	42a3      	cmp	r3, r4
 80225f4:	db01      	blt.n	80225fa <__sfputc_r+0x16>
 80225f6:	290a      	cmp	r1, #10
 80225f8:	d103      	bne.n	8022602 <__sfputc_r+0x1e>
 80225fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80225fe:	f7ff bb75 	b.w	8021cec <__swbuf_r>
 8022602:	6813      	ldr	r3, [r2, #0]
 8022604:	1c58      	adds	r0, r3, #1
 8022606:	6010      	str	r0, [r2, #0]
 8022608:	7019      	strb	r1, [r3, #0]
 802260a:	4608      	mov	r0, r1
 802260c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022610:	4770      	bx	lr

08022612 <__sfputs_r>:
 8022612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022614:	4606      	mov	r6, r0
 8022616:	460f      	mov	r7, r1
 8022618:	4614      	mov	r4, r2
 802261a:	18d5      	adds	r5, r2, r3
 802261c:	42ac      	cmp	r4, r5
 802261e:	d101      	bne.n	8022624 <__sfputs_r+0x12>
 8022620:	2000      	movs	r0, #0
 8022622:	e007      	b.n	8022634 <__sfputs_r+0x22>
 8022624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022628:	463a      	mov	r2, r7
 802262a:	4630      	mov	r0, r6
 802262c:	f7ff ffda 	bl	80225e4 <__sfputc_r>
 8022630:	1c43      	adds	r3, r0, #1
 8022632:	d1f3      	bne.n	802261c <__sfputs_r+0xa>
 8022634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022638 <_vfiprintf_r>:
 8022638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802263c:	460d      	mov	r5, r1
 802263e:	b09d      	sub	sp, #116	; 0x74
 8022640:	4614      	mov	r4, r2
 8022642:	4698      	mov	r8, r3
 8022644:	4606      	mov	r6, r0
 8022646:	b118      	cbz	r0, 8022650 <_vfiprintf_r+0x18>
 8022648:	6983      	ldr	r3, [r0, #24]
 802264a:	b90b      	cbnz	r3, 8022650 <_vfiprintf_r+0x18>
 802264c:	f7fd fc00 	bl	801fe50 <__sinit>
 8022650:	4b89      	ldr	r3, [pc, #548]	; (8022878 <_vfiprintf_r+0x240>)
 8022652:	429d      	cmp	r5, r3
 8022654:	d11b      	bne.n	802268e <_vfiprintf_r+0x56>
 8022656:	6875      	ldr	r5, [r6, #4]
 8022658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802265a:	07d9      	lsls	r1, r3, #31
 802265c:	d405      	bmi.n	802266a <_vfiprintf_r+0x32>
 802265e:	89ab      	ldrh	r3, [r5, #12]
 8022660:	059a      	lsls	r2, r3, #22
 8022662:	d402      	bmi.n	802266a <_vfiprintf_r+0x32>
 8022664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022666:	f7fd ffa6 	bl	80205b6 <__retarget_lock_acquire_recursive>
 802266a:	89ab      	ldrh	r3, [r5, #12]
 802266c:	071b      	lsls	r3, r3, #28
 802266e:	d501      	bpl.n	8022674 <_vfiprintf_r+0x3c>
 8022670:	692b      	ldr	r3, [r5, #16]
 8022672:	b9eb      	cbnz	r3, 80226b0 <_vfiprintf_r+0x78>
 8022674:	4629      	mov	r1, r5
 8022676:	4630      	mov	r0, r6
 8022678:	f7ff fb9c 	bl	8021db4 <__swsetup_r>
 802267c:	b1c0      	cbz	r0, 80226b0 <_vfiprintf_r+0x78>
 802267e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022680:	07dc      	lsls	r4, r3, #31
 8022682:	d50e      	bpl.n	80226a2 <_vfiprintf_r+0x6a>
 8022684:	f04f 30ff 	mov.w	r0, #4294967295
 8022688:	b01d      	add	sp, #116	; 0x74
 802268a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802268e:	4b7b      	ldr	r3, [pc, #492]	; (802287c <_vfiprintf_r+0x244>)
 8022690:	429d      	cmp	r5, r3
 8022692:	d101      	bne.n	8022698 <_vfiprintf_r+0x60>
 8022694:	68b5      	ldr	r5, [r6, #8]
 8022696:	e7df      	b.n	8022658 <_vfiprintf_r+0x20>
 8022698:	4b79      	ldr	r3, [pc, #484]	; (8022880 <_vfiprintf_r+0x248>)
 802269a:	429d      	cmp	r5, r3
 802269c:	bf08      	it	eq
 802269e:	68f5      	ldreq	r5, [r6, #12]
 80226a0:	e7da      	b.n	8022658 <_vfiprintf_r+0x20>
 80226a2:	89ab      	ldrh	r3, [r5, #12]
 80226a4:	0598      	lsls	r0, r3, #22
 80226a6:	d4ed      	bmi.n	8022684 <_vfiprintf_r+0x4c>
 80226a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80226aa:	f7fd ff86 	bl	80205ba <__retarget_lock_release_recursive>
 80226ae:	e7e9      	b.n	8022684 <_vfiprintf_r+0x4c>
 80226b0:	2300      	movs	r3, #0
 80226b2:	9309      	str	r3, [sp, #36]	; 0x24
 80226b4:	2320      	movs	r3, #32
 80226b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80226ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80226be:	2330      	movs	r3, #48	; 0x30
 80226c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022884 <_vfiprintf_r+0x24c>
 80226c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80226c8:	f04f 0901 	mov.w	r9, #1
 80226cc:	4623      	mov	r3, r4
 80226ce:	469a      	mov	sl, r3
 80226d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80226d4:	b10a      	cbz	r2, 80226da <_vfiprintf_r+0xa2>
 80226d6:	2a25      	cmp	r2, #37	; 0x25
 80226d8:	d1f9      	bne.n	80226ce <_vfiprintf_r+0x96>
 80226da:	ebba 0b04 	subs.w	fp, sl, r4
 80226de:	d00b      	beq.n	80226f8 <_vfiprintf_r+0xc0>
 80226e0:	465b      	mov	r3, fp
 80226e2:	4622      	mov	r2, r4
 80226e4:	4629      	mov	r1, r5
 80226e6:	4630      	mov	r0, r6
 80226e8:	f7ff ff93 	bl	8022612 <__sfputs_r>
 80226ec:	3001      	adds	r0, #1
 80226ee:	f000 80aa 	beq.w	8022846 <_vfiprintf_r+0x20e>
 80226f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80226f4:	445a      	add	r2, fp
 80226f6:	9209      	str	r2, [sp, #36]	; 0x24
 80226f8:	f89a 3000 	ldrb.w	r3, [sl]
 80226fc:	2b00      	cmp	r3, #0
 80226fe:	f000 80a2 	beq.w	8022846 <_vfiprintf_r+0x20e>
 8022702:	2300      	movs	r3, #0
 8022704:	f04f 32ff 	mov.w	r2, #4294967295
 8022708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802270c:	f10a 0a01 	add.w	sl, sl, #1
 8022710:	9304      	str	r3, [sp, #16]
 8022712:	9307      	str	r3, [sp, #28]
 8022714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022718:	931a      	str	r3, [sp, #104]	; 0x68
 802271a:	4654      	mov	r4, sl
 802271c:	2205      	movs	r2, #5
 802271e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022722:	4858      	ldr	r0, [pc, #352]	; (8022884 <_vfiprintf_r+0x24c>)
 8022724:	f7dd fd9c 	bl	8000260 <memchr>
 8022728:	9a04      	ldr	r2, [sp, #16]
 802272a:	b9d8      	cbnz	r0, 8022764 <_vfiprintf_r+0x12c>
 802272c:	06d1      	lsls	r1, r2, #27
 802272e:	bf44      	itt	mi
 8022730:	2320      	movmi	r3, #32
 8022732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022736:	0713      	lsls	r3, r2, #28
 8022738:	bf44      	itt	mi
 802273a:	232b      	movmi	r3, #43	; 0x2b
 802273c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022740:	f89a 3000 	ldrb.w	r3, [sl]
 8022744:	2b2a      	cmp	r3, #42	; 0x2a
 8022746:	d015      	beq.n	8022774 <_vfiprintf_r+0x13c>
 8022748:	9a07      	ldr	r2, [sp, #28]
 802274a:	4654      	mov	r4, sl
 802274c:	2000      	movs	r0, #0
 802274e:	f04f 0c0a 	mov.w	ip, #10
 8022752:	4621      	mov	r1, r4
 8022754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022758:	3b30      	subs	r3, #48	; 0x30
 802275a:	2b09      	cmp	r3, #9
 802275c:	d94e      	bls.n	80227fc <_vfiprintf_r+0x1c4>
 802275e:	b1b0      	cbz	r0, 802278e <_vfiprintf_r+0x156>
 8022760:	9207      	str	r2, [sp, #28]
 8022762:	e014      	b.n	802278e <_vfiprintf_r+0x156>
 8022764:	eba0 0308 	sub.w	r3, r0, r8
 8022768:	fa09 f303 	lsl.w	r3, r9, r3
 802276c:	4313      	orrs	r3, r2
 802276e:	9304      	str	r3, [sp, #16]
 8022770:	46a2      	mov	sl, r4
 8022772:	e7d2      	b.n	802271a <_vfiprintf_r+0xe2>
 8022774:	9b03      	ldr	r3, [sp, #12]
 8022776:	1d19      	adds	r1, r3, #4
 8022778:	681b      	ldr	r3, [r3, #0]
 802277a:	9103      	str	r1, [sp, #12]
 802277c:	2b00      	cmp	r3, #0
 802277e:	bfbb      	ittet	lt
 8022780:	425b      	neglt	r3, r3
 8022782:	f042 0202 	orrlt.w	r2, r2, #2
 8022786:	9307      	strge	r3, [sp, #28]
 8022788:	9307      	strlt	r3, [sp, #28]
 802278a:	bfb8      	it	lt
 802278c:	9204      	strlt	r2, [sp, #16]
 802278e:	7823      	ldrb	r3, [r4, #0]
 8022790:	2b2e      	cmp	r3, #46	; 0x2e
 8022792:	d10c      	bne.n	80227ae <_vfiprintf_r+0x176>
 8022794:	7863      	ldrb	r3, [r4, #1]
 8022796:	2b2a      	cmp	r3, #42	; 0x2a
 8022798:	d135      	bne.n	8022806 <_vfiprintf_r+0x1ce>
 802279a:	9b03      	ldr	r3, [sp, #12]
 802279c:	1d1a      	adds	r2, r3, #4
 802279e:	681b      	ldr	r3, [r3, #0]
 80227a0:	9203      	str	r2, [sp, #12]
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	bfb8      	it	lt
 80227a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80227aa:	3402      	adds	r4, #2
 80227ac:	9305      	str	r3, [sp, #20]
 80227ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022894 <_vfiprintf_r+0x25c>
 80227b2:	7821      	ldrb	r1, [r4, #0]
 80227b4:	2203      	movs	r2, #3
 80227b6:	4650      	mov	r0, sl
 80227b8:	f7dd fd52 	bl	8000260 <memchr>
 80227bc:	b140      	cbz	r0, 80227d0 <_vfiprintf_r+0x198>
 80227be:	2340      	movs	r3, #64	; 0x40
 80227c0:	eba0 000a 	sub.w	r0, r0, sl
 80227c4:	fa03 f000 	lsl.w	r0, r3, r0
 80227c8:	9b04      	ldr	r3, [sp, #16]
 80227ca:	4303      	orrs	r3, r0
 80227cc:	3401      	adds	r4, #1
 80227ce:	9304      	str	r3, [sp, #16]
 80227d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227d4:	482c      	ldr	r0, [pc, #176]	; (8022888 <_vfiprintf_r+0x250>)
 80227d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80227da:	2206      	movs	r2, #6
 80227dc:	f7dd fd40 	bl	8000260 <memchr>
 80227e0:	2800      	cmp	r0, #0
 80227e2:	d03f      	beq.n	8022864 <_vfiprintf_r+0x22c>
 80227e4:	4b29      	ldr	r3, [pc, #164]	; (802288c <_vfiprintf_r+0x254>)
 80227e6:	bb1b      	cbnz	r3, 8022830 <_vfiprintf_r+0x1f8>
 80227e8:	9b03      	ldr	r3, [sp, #12]
 80227ea:	3307      	adds	r3, #7
 80227ec:	f023 0307 	bic.w	r3, r3, #7
 80227f0:	3308      	adds	r3, #8
 80227f2:	9303      	str	r3, [sp, #12]
 80227f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227f6:	443b      	add	r3, r7
 80227f8:	9309      	str	r3, [sp, #36]	; 0x24
 80227fa:	e767      	b.n	80226cc <_vfiprintf_r+0x94>
 80227fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8022800:	460c      	mov	r4, r1
 8022802:	2001      	movs	r0, #1
 8022804:	e7a5      	b.n	8022752 <_vfiprintf_r+0x11a>
 8022806:	2300      	movs	r3, #0
 8022808:	3401      	adds	r4, #1
 802280a:	9305      	str	r3, [sp, #20]
 802280c:	4619      	mov	r1, r3
 802280e:	f04f 0c0a 	mov.w	ip, #10
 8022812:	4620      	mov	r0, r4
 8022814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022818:	3a30      	subs	r2, #48	; 0x30
 802281a:	2a09      	cmp	r2, #9
 802281c:	d903      	bls.n	8022826 <_vfiprintf_r+0x1ee>
 802281e:	2b00      	cmp	r3, #0
 8022820:	d0c5      	beq.n	80227ae <_vfiprintf_r+0x176>
 8022822:	9105      	str	r1, [sp, #20]
 8022824:	e7c3      	b.n	80227ae <_vfiprintf_r+0x176>
 8022826:	fb0c 2101 	mla	r1, ip, r1, r2
 802282a:	4604      	mov	r4, r0
 802282c:	2301      	movs	r3, #1
 802282e:	e7f0      	b.n	8022812 <_vfiprintf_r+0x1da>
 8022830:	ab03      	add	r3, sp, #12
 8022832:	9300      	str	r3, [sp, #0]
 8022834:	462a      	mov	r2, r5
 8022836:	4b16      	ldr	r3, [pc, #88]	; (8022890 <_vfiprintf_r+0x258>)
 8022838:	a904      	add	r1, sp, #16
 802283a:	4630      	mov	r0, r6
 802283c:	f3af 8000 	nop.w
 8022840:	4607      	mov	r7, r0
 8022842:	1c78      	adds	r0, r7, #1
 8022844:	d1d6      	bne.n	80227f4 <_vfiprintf_r+0x1bc>
 8022846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022848:	07d9      	lsls	r1, r3, #31
 802284a:	d405      	bmi.n	8022858 <_vfiprintf_r+0x220>
 802284c:	89ab      	ldrh	r3, [r5, #12]
 802284e:	059a      	lsls	r2, r3, #22
 8022850:	d402      	bmi.n	8022858 <_vfiprintf_r+0x220>
 8022852:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022854:	f7fd feb1 	bl	80205ba <__retarget_lock_release_recursive>
 8022858:	89ab      	ldrh	r3, [r5, #12]
 802285a:	065b      	lsls	r3, r3, #25
 802285c:	f53f af12 	bmi.w	8022684 <_vfiprintf_r+0x4c>
 8022860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022862:	e711      	b.n	8022688 <_vfiprintf_r+0x50>
 8022864:	ab03      	add	r3, sp, #12
 8022866:	9300      	str	r3, [sp, #0]
 8022868:	462a      	mov	r2, r5
 802286a:	4b09      	ldr	r3, [pc, #36]	; (8022890 <_vfiprintf_r+0x258>)
 802286c:	a904      	add	r1, sp, #16
 802286e:	4630      	mov	r0, r6
 8022870:	f000 f880 	bl	8022974 <_printf_i>
 8022874:	e7e4      	b.n	8022840 <_vfiprintf_r+0x208>
 8022876:	bf00      	nop
 8022878:	08029510 	.word	0x08029510
 802287c:	08029530 	.word	0x08029530
 8022880:	080294f0 	.word	0x080294f0
 8022884:	08029a8f 	.word	0x08029a8f
 8022888:	08029a99 	.word	0x08029a99
 802288c:	00000000 	.word	0x00000000
 8022890:	08022613 	.word	0x08022613
 8022894:	08029a95 	.word	0x08029a95

08022898 <_printf_common>:
 8022898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802289c:	4616      	mov	r6, r2
 802289e:	4699      	mov	r9, r3
 80228a0:	688a      	ldr	r2, [r1, #8]
 80228a2:	690b      	ldr	r3, [r1, #16]
 80228a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80228a8:	4293      	cmp	r3, r2
 80228aa:	bfb8      	it	lt
 80228ac:	4613      	movlt	r3, r2
 80228ae:	6033      	str	r3, [r6, #0]
 80228b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80228b4:	4607      	mov	r7, r0
 80228b6:	460c      	mov	r4, r1
 80228b8:	b10a      	cbz	r2, 80228be <_printf_common+0x26>
 80228ba:	3301      	adds	r3, #1
 80228bc:	6033      	str	r3, [r6, #0]
 80228be:	6823      	ldr	r3, [r4, #0]
 80228c0:	0699      	lsls	r1, r3, #26
 80228c2:	bf42      	ittt	mi
 80228c4:	6833      	ldrmi	r3, [r6, #0]
 80228c6:	3302      	addmi	r3, #2
 80228c8:	6033      	strmi	r3, [r6, #0]
 80228ca:	6825      	ldr	r5, [r4, #0]
 80228cc:	f015 0506 	ands.w	r5, r5, #6
 80228d0:	d106      	bne.n	80228e0 <_printf_common+0x48>
 80228d2:	f104 0a19 	add.w	sl, r4, #25
 80228d6:	68e3      	ldr	r3, [r4, #12]
 80228d8:	6832      	ldr	r2, [r6, #0]
 80228da:	1a9b      	subs	r3, r3, r2
 80228dc:	42ab      	cmp	r3, r5
 80228de:	dc26      	bgt.n	802292e <_printf_common+0x96>
 80228e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80228e4:	1e13      	subs	r3, r2, #0
 80228e6:	6822      	ldr	r2, [r4, #0]
 80228e8:	bf18      	it	ne
 80228ea:	2301      	movne	r3, #1
 80228ec:	0692      	lsls	r2, r2, #26
 80228ee:	d42b      	bmi.n	8022948 <_printf_common+0xb0>
 80228f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80228f4:	4649      	mov	r1, r9
 80228f6:	4638      	mov	r0, r7
 80228f8:	47c0      	blx	r8
 80228fa:	3001      	adds	r0, #1
 80228fc:	d01e      	beq.n	802293c <_printf_common+0xa4>
 80228fe:	6823      	ldr	r3, [r4, #0]
 8022900:	68e5      	ldr	r5, [r4, #12]
 8022902:	6832      	ldr	r2, [r6, #0]
 8022904:	f003 0306 	and.w	r3, r3, #6
 8022908:	2b04      	cmp	r3, #4
 802290a:	bf08      	it	eq
 802290c:	1aad      	subeq	r5, r5, r2
 802290e:	68a3      	ldr	r3, [r4, #8]
 8022910:	6922      	ldr	r2, [r4, #16]
 8022912:	bf0c      	ite	eq
 8022914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022918:	2500      	movne	r5, #0
 802291a:	4293      	cmp	r3, r2
 802291c:	bfc4      	itt	gt
 802291e:	1a9b      	subgt	r3, r3, r2
 8022920:	18ed      	addgt	r5, r5, r3
 8022922:	2600      	movs	r6, #0
 8022924:	341a      	adds	r4, #26
 8022926:	42b5      	cmp	r5, r6
 8022928:	d11a      	bne.n	8022960 <_printf_common+0xc8>
 802292a:	2000      	movs	r0, #0
 802292c:	e008      	b.n	8022940 <_printf_common+0xa8>
 802292e:	2301      	movs	r3, #1
 8022930:	4652      	mov	r2, sl
 8022932:	4649      	mov	r1, r9
 8022934:	4638      	mov	r0, r7
 8022936:	47c0      	blx	r8
 8022938:	3001      	adds	r0, #1
 802293a:	d103      	bne.n	8022944 <_printf_common+0xac>
 802293c:	f04f 30ff 	mov.w	r0, #4294967295
 8022940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022944:	3501      	adds	r5, #1
 8022946:	e7c6      	b.n	80228d6 <_printf_common+0x3e>
 8022948:	18e1      	adds	r1, r4, r3
 802294a:	1c5a      	adds	r2, r3, #1
 802294c:	2030      	movs	r0, #48	; 0x30
 802294e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022952:	4422      	add	r2, r4
 8022954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802295c:	3302      	adds	r3, #2
 802295e:	e7c7      	b.n	80228f0 <_printf_common+0x58>
 8022960:	2301      	movs	r3, #1
 8022962:	4622      	mov	r2, r4
 8022964:	4649      	mov	r1, r9
 8022966:	4638      	mov	r0, r7
 8022968:	47c0      	blx	r8
 802296a:	3001      	adds	r0, #1
 802296c:	d0e6      	beq.n	802293c <_printf_common+0xa4>
 802296e:	3601      	adds	r6, #1
 8022970:	e7d9      	b.n	8022926 <_printf_common+0x8e>
	...

08022974 <_printf_i>:
 8022974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022978:	460c      	mov	r4, r1
 802297a:	4691      	mov	r9, r2
 802297c:	7e27      	ldrb	r7, [r4, #24]
 802297e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022980:	2f78      	cmp	r7, #120	; 0x78
 8022982:	4680      	mov	r8, r0
 8022984:	469a      	mov	sl, r3
 8022986:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802298a:	d807      	bhi.n	802299c <_printf_i+0x28>
 802298c:	2f62      	cmp	r7, #98	; 0x62
 802298e:	d80a      	bhi.n	80229a6 <_printf_i+0x32>
 8022990:	2f00      	cmp	r7, #0
 8022992:	f000 80d8 	beq.w	8022b46 <_printf_i+0x1d2>
 8022996:	2f58      	cmp	r7, #88	; 0x58
 8022998:	f000 80a3 	beq.w	8022ae2 <_printf_i+0x16e>
 802299c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80229a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80229a4:	e03a      	b.n	8022a1c <_printf_i+0xa8>
 80229a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80229aa:	2b15      	cmp	r3, #21
 80229ac:	d8f6      	bhi.n	802299c <_printf_i+0x28>
 80229ae:	a001      	add	r0, pc, #4	; (adr r0, 80229b4 <_printf_i+0x40>)
 80229b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80229b4:	08022a0d 	.word	0x08022a0d
 80229b8:	08022a21 	.word	0x08022a21
 80229bc:	0802299d 	.word	0x0802299d
 80229c0:	0802299d 	.word	0x0802299d
 80229c4:	0802299d 	.word	0x0802299d
 80229c8:	0802299d 	.word	0x0802299d
 80229cc:	08022a21 	.word	0x08022a21
 80229d0:	0802299d 	.word	0x0802299d
 80229d4:	0802299d 	.word	0x0802299d
 80229d8:	0802299d 	.word	0x0802299d
 80229dc:	0802299d 	.word	0x0802299d
 80229e0:	08022b2d 	.word	0x08022b2d
 80229e4:	08022a51 	.word	0x08022a51
 80229e8:	08022b0f 	.word	0x08022b0f
 80229ec:	0802299d 	.word	0x0802299d
 80229f0:	0802299d 	.word	0x0802299d
 80229f4:	08022b4f 	.word	0x08022b4f
 80229f8:	0802299d 	.word	0x0802299d
 80229fc:	08022a51 	.word	0x08022a51
 8022a00:	0802299d 	.word	0x0802299d
 8022a04:	0802299d 	.word	0x0802299d
 8022a08:	08022b17 	.word	0x08022b17
 8022a0c:	680b      	ldr	r3, [r1, #0]
 8022a0e:	1d1a      	adds	r2, r3, #4
 8022a10:	681b      	ldr	r3, [r3, #0]
 8022a12:	600a      	str	r2, [r1, #0]
 8022a14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022a1c:	2301      	movs	r3, #1
 8022a1e:	e0a3      	b.n	8022b68 <_printf_i+0x1f4>
 8022a20:	6825      	ldr	r5, [r4, #0]
 8022a22:	6808      	ldr	r0, [r1, #0]
 8022a24:	062e      	lsls	r6, r5, #24
 8022a26:	f100 0304 	add.w	r3, r0, #4
 8022a2a:	d50a      	bpl.n	8022a42 <_printf_i+0xce>
 8022a2c:	6805      	ldr	r5, [r0, #0]
 8022a2e:	600b      	str	r3, [r1, #0]
 8022a30:	2d00      	cmp	r5, #0
 8022a32:	da03      	bge.n	8022a3c <_printf_i+0xc8>
 8022a34:	232d      	movs	r3, #45	; 0x2d
 8022a36:	426d      	negs	r5, r5
 8022a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022a3c:	485e      	ldr	r0, [pc, #376]	; (8022bb8 <_printf_i+0x244>)
 8022a3e:	230a      	movs	r3, #10
 8022a40:	e019      	b.n	8022a76 <_printf_i+0x102>
 8022a42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022a46:	6805      	ldr	r5, [r0, #0]
 8022a48:	600b      	str	r3, [r1, #0]
 8022a4a:	bf18      	it	ne
 8022a4c:	b22d      	sxthne	r5, r5
 8022a4e:	e7ef      	b.n	8022a30 <_printf_i+0xbc>
 8022a50:	680b      	ldr	r3, [r1, #0]
 8022a52:	6825      	ldr	r5, [r4, #0]
 8022a54:	1d18      	adds	r0, r3, #4
 8022a56:	6008      	str	r0, [r1, #0]
 8022a58:	0628      	lsls	r0, r5, #24
 8022a5a:	d501      	bpl.n	8022a60 <_printf_i+0xec>
 8022a5c:	681d      	ldr	r5, [r3, #0]
 8022a5e:	e002      	b.n	8022a66 <_printf_i+0xf2>
 8022a60:	0669      	lsls	r1, r5, #25
 8022a62:	d5fb      	bpl.n	8022a5c <_printf_i+0xe8>
 8022a64:	881d      	ldrh	r5, [r3, #0]
 8022a66:	4854      	ldr	r0, [pc, #336]	; (8022bb8 <_printf_i+0x244>)
 8022a68:	2f6f      	cmp	r7, #111	; 0x6f
 8022a6a:	bf0c      	ite	eq
 8022a6c:	2308      	moveq	r3, #8
 8022a6e:	230a      	movne	r3, #10
 8022a70:	2100      	movs	r1, #0
 8022a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022a76:	6866      	ldr	r6, [r4, #4]
 8022a78:	60a6      	str	r6, [r4, #8]
 8022a7a:	2e00      	cmp	r6, #0
 8022a7c:	bfa2      	ittt	ge
 8022a7e:	6821      	ldrge	r1, [r4, #0]
 8022a80:	f021 0104 	bicge.w	r1, r1, #4
 8022a84:	6021      	strge	r1, [r4, #0]
 8022a86:	b90d      	cbnz	r5, 8022a8c <_printf_i+0x118>
 8022a88:	2e00      	cmp	r6, #0
 8022a8a:	d04d      	beq.n	8022b28 <_printf_i+0x1b4>
 8022a8c:	4616      	mov	r6, r2
 8022a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8022a92:	fb03 5711 	mls	r7, r3, r1, r5
 8022a96:	5dc7      	ldrb	r7, [r0, r7]
 8022a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022a9c:	462f      	mov	r7, r5
 8022a9e:	42bb      	cmp	r3, r7
 8022aa0:	460d      	mov	r5, r1
 8022aa2:	d9f4      	bls.n	8022a8e <_printf_i+0x11a>
 8022aa4:	2b08      	cmp	r3, #8
 8022aa6:	d10b      	bne.n	8022ac0 <_printf_i+0x14c>
 8022aa8:	6823      	ldr	r3, [r4, #0]
 8022aaa:	07df      	lsls	r7, r3, #31
 8022aac:	d508      	bpl.n	8022ac0 <_printf_i+0x14c>
 8022aae:	6923      	ldr	r3, [r4, #16]
 8022ab0:	6861      	ldr	r1, [r4, #4]
 8022ab2:	4299      	cmp	r1, r3
 8022ab4:	bfde      	ittt	le
 8022ab6:	2330      	movle	r3, #48	; 0x30
 8022ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022abc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022ac0:	1b92      	subs	r2, r2, r6
 8022ac2:	6122      	str	r2, [r4, #16]
 8022ac4:	f8cd a000 	str.w	sl, [sp]
 8022ac8:	464b      	mov	r3, r9
 8022aca:	aa03      	add	r2, sp, #12
 8022acc:	4621      	mov	r1, r4
 8022ace:	4640      	mov	r0, r8
 8022ad0:	f7ff fee2 	bl	8022898 <_printf_common>
 8022ad4:	3001      	adds	r0, #1
 8022ad6:	d14c      	bne.n	8022b72 <_printf_i+0x1fe>
 8022ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8022adc:	b004      	add	sp, #16
 8022ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ae2:	4835      	ldr	r0, [pc, #212]	; (8022bb8 <_printf_i+0x244>)
 8022ae4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022ae8:	6823      	ldr	r3, [r4, #0]
 8022aea:	680e      	ldr	r6, [r1, #0]
 8022aec:	061f      	lsls	r7, r3, #24
 8022aee:	f856 5b04 	ldr.w	r5, [r6], #4
 8022af2:	600e      	str	r6, [r1, #0]
 8022af4:	d514      	bpl.n	8022b20 <_printf_i+0x1ac>
 8022af6:	07d9      	lsls	r1, r3, #31
 8022af8:	bf44      	itt	mi
 8022afa:	f043 0320 	orrmi.w	r3, r3, #32
 8022afe:	6023      	strmi	r3, [r4, #0]
 8022b00:	b91d      	cbnz	r5, 8022b0a <_printf_i+0x196>
 8022b02:	6823      	ldr	r3, [r4, #0]
 8022b04:	f023 0320 	bic.w	r3, r3, #32
 8022b08:	6023      	str	r3, [r4, #0]
 8022b0a:	2310      	movs	r3, #16
 8022b0c:	e7b0      	b.n	8022a70 <_printf_i+0xfc>
 8022b0e:	6823      	ldr	r3, [r4, #0]
 8022b10:	f043 0320 	orr.w	r3, r3, #32
 8022b14:	6023      	str	r3, [r4, #0]
 8022b16:	2378      	movs	r3, #120	; 0x78
 8022b18:	4828      	ldr	r0, [pc, #160]	; (8022bbc <_printf_i+0x248>)
 8022b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022b1e:	e7e3      	b.n	8022ae8 <_printf_i+0x174>
 8022b20:	065e      	lsls	r6, r3, #25
 8022b22:	bf48      	it	mi
 8022b24:	b2ad      	uxthmi	r5, r5
 8022b26:	e7e6      	b.n	8022af6 <_printf_i+0x182>
 8022b28:	4616      	mov	r6, r2
 8022b2a:	e7bb      	b.n	8022aa4 <_printf_i+0x130>
 8022b2c:	680b      	ldr	r3, [r1, #0]
 8022b2e:	6826      	ldr	r6, [r4, #0]
 8022b30:	6960      	ldr	r0, [r4, #20]
 8022b32:	1d1d      	adds	r5, r3, #4
 8022b34:	600d      	str	r5, [r1, #0]
 8022b36:	0635      	lsls	r5, r6, #24
 8022b38:	681b      	ldr	r3, [r3, #0]
 8022b3a:	d501      	bpl.n	8022b40 <_printf_i+0x1cc>
 8022b3c:	6018      	str	r0, [r3, #0]
 8022b3e:	e002      	b.n	8022b46 <_printf_i+0x1d2>
 8022b40:	0671      	lsls	r1, r6, #25
 8022b42:	d5fb      	bpl.n	8022b3c <_printf_i+0x1c8>
 8022b44:	8018      	strh	r0, [r3, #0]
 8022b46:	2300      	movs	r3, #0
 8022b48:	6123      	str	r3, [r4, #16]
 8022b4a:	4616      	mov	r6, r2
 8022b4c:	e7ba      	b.n	8022ac4 <_printf_i+0x150>
 8022b4e:	680b      	ldr	r3, [r1, #0]
 8022b50:	1d1a      	adds	r2, r3, #4
 8022b52:	600a      	str	r2, [r1, #0]
 8022b54:	681e      	ldr	r6, [r3, #0]
 8022b56:	6862      	ldr	r2, [r4, #4]
 8022b58:	2100      	movs	r1, #0
 8022b5a:	4630      	mov	r0, r6
 8022b5c:	f7dd fb80 	bl	8000260 <memchr>
 8022b60:	b108      	cbz	r0, 8022b66 <_printf_i+0x1f2>
 8022b62:	1b80      	subs	r0, r0, r6
 8022b64:	6060      	str	r0, [r4, #4]
 8022b66:	6863      	ldr	r3, [r4, #4]
 8022b68:	6123      	str	r3, [r4, #16]
 8022b6a:	2300      	movs	r3, #0
 8022b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022b70:	e7a8      	b.n	8022ac4 <_printf_i+0x150>
 8022b72:	6923      	ldr	r3, [r4, #16]
 8022b74:	4632      	mov	r2, r6
 8022b76:	4649      	mov	r1, r9
 8022b78:	4640      	mov	r0, r8
 8022b7a:	47d0      	blx	sl
 8022b7c:	3001      	adds	r0, #1
 8022b7e:	d0ab      	beq.n	8022ad8 <_printf_i+0x164>
 8022b80:	6823      	ldr	r3, [r4, #0]
 8022b82:	079b      	lsls	r3, r3, #30
 8022b84:	d413      	bmi.n	8022bae <_printf_i+0x23a>
 8022b86:	68e0      	ldr	r0, [r4, #12]
 8022b88:	9b03      	ldr	r3, [sp, #12]
 8022b8a:	4298      	cmp	r0, r3
 8022b8c:	bfb8      	it	lt
 8022b8e:	4618      	movlt	r0, r3
 8022b90:	e7a4      	b.n	8022adc <_printf_i+0x168>
 8022b92:	2301      	movs	r3, #1
 8022b94:	4632      	mov	r2, r6
 8022b96:	4649      	mov	r1, r9
 8022b98:	4640      	mov	r0, r8
 8022b9a:	47d0      	blx	sl
 8022b9c:	3001      	adds	r0, #1
 8022b9e:	d09b      	beq.n	8022ad8 <_printf_i+0x164>
 8022ba0:	3501      	adds	r5, #1
 8022ba2:	68e3      	ldr	r3, [r4, #12]
 8022ba4:	9903      	ldr	r1, [sp, #12]
 8022ba6:	1a5b      	subs	r3, r3, r1
 8022ba8:	42ab      	cmp	r3, r5
 8022baa:	dcf2      	bgt.n	8022b92 <_printf_i+0x21e>
 8022bac:	e7eb      	b.n	8022b86 <_printf_i+0x212>
 8022bae:	2500      	movs	r5, #0
 8022bb0:	f104 0619 	add.w	r6, r4, #25
 8022bb4:	e7f5      	b.n	8022ba2 <_printf_i+0x22e>
 8022bb6:	bf00      	nop
 8022bb8:	08029aa0 	.word	0x08029aa0
 8022bbc:	08029ab1 	.word	0x08029ab1

08022bc0 <_putc_r>:
 8022bc0:	b570      	push	{r4, r5, r6, lr}
 8022bc2:	460d      	mov	r5, r1
 8022bc4:	4614      	mov	r4, r2
 8022bc6:	4606      	mov	r6, r0
 8022bc8:	b118      	cbz	r0, 8022bd2 <_putc_r+0x12>
 8022bca:	6983      	ldr	r3, [r0, #24]
 8022bcc:	b90b      	cbnz	r3, 8022bd2 <_putc_r+0x12>
 8022bce:	f7fd f93f 	bl	801fe50 <__sinit>
 8022bd2:	4b1c      	ldr	r3, [pc, #112]	; (8022c44 <_putc_r+0x84>)
 8022bd4:	429c      	cmp	r4, r3
 8022bd6:	d124      	bne.n	8022c22 <_putc_r+0x62>
 8022bd8:	6874      	ldr	r4, [r6, #4]
 8022bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022bdc:	07d8      	lsls	r0, r3, #31
 8022bde:	d405      	bmi.n	8022bec <_putc_r+0x2c>
 8022be0:	89a3      	ldrh	r3, [r4, #12]
 8022be2:	0599      	lsls	r1, r3, #22
 8022be4:	d402      	bmi.n	8022bec <_putc_r+0x2c>
 8022be6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022be8:	f7fd fce5 	bl	80205b6 <__retarget_lock_acquire_recursive>
 8022bec:	68a3      	ldr	r3, [r4, #8]
 8022bee:	3b01      	subs	r3, #1
 8022bf0:	2b00      	cmp	r3, #0
 8022bf2:	60a3      	str	r3, [r4, #8]
 8022bf4:	da05      	bge.n	8022c02 <_putc_r+0x42>
 8022bf6:	69a2      	ldr	r2, [r4, #24]
 8022bf8:	4293      	cmp	r3, r2
 8022bfa:	db1c      	blt.n	8022c36 <_putc_r+0x76>
 8022bfc:	b2eb      	uxtb	r3, r5
 8022bfe:	2b0a      	cmp	r3, #10
 8022c00:	d019      	beq.n	8022c36 <_putc_r+0x76>
 8022c02:	6823      	ldr	r3, [r4, #0]
 8022c04:	1c5a      	adds	r2, r3, #1
 8022c06:	6022      	str	r2, [r4, #0]
 8022c08:	701d      	strb	r5, [r3, #0]
 8022c0a:	b2ed      	uxtb	r5, r5
 8022c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022c0e:	07da      	lsls	r2, r3, #31
 8022c10:	d405      	bmi.n	8022c1e <_putc_r+0x5e>
 8022c12:	89a3      	ldrh	r3, [r4, #12]
 8022c14:	059b      	lsls	r3, r3, #22
 8022c16:	d402      	bmi.n	8022c1e <_putc_r+0x5e>
 8022c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022c1a:	f7fd fcce 	bl	80205ba <__retarget_lock_release_recursive>
 8022c1e:	4628      	mov	r0, r5
 8022c20:	bd70      	pop	{r4, r5, r6, pc}
 8022c22:	4b09      	ldr	r3, [pc, #36]	; (8022c48 <_putc_r+0x88>)
 8022c24:	429c      	cmp	r4, r3
 8022c26:	d101      	bne.n	8022c2c <_putc_r+0x6c>
 8022c28:	68b4      	ldr	r4, [r6, #8]
 8022c2a:	e7d6      	b.n	8022bda <_putc_r+0x1a>
 8022c2c:	4b07      	ldr	r3, [pc, #28]	; (8022c4c <_putc_r+0x8c>)
 8022c2e:	429c      	cmp	r4, r3
 8022c30:	bf08      	it	eq
 8022c32:	68f4      	ldreq	r4, [r6, #12]
 8022c34:	e7d1      	b.n	8022bda <_putc_r+0x1a>
 8022c36:	4629      	mov	r1, r5
 8022c38:	4622      	mov	r2, r4
 8022c3a:	4630      	mov	r0, r6
 8022c3c:	f7ff f856 	bl	8021cec <__swbuf_r>
 8022c40:	4605      	mov	r5, r0
 8022c42:	e7e3      	b.n	8022c0c <_putc_r+0x4c>
 8022c44:	08029510 	.word	0x08029510
 8022c48:	08029530 	.word	0x08029530
 8022c4c:	080294f0 	.word	0x080294f0

08022c50 <_read_r>:
 8022c50:	b538      	push	{r3, r4, r5, lr}
 8022c52:	4d07      	ldr	r5, [pc, #28]	; (8022c70 <_read_r+0x20>)
 8022c54:	4604      	mov	r4, r0
 8022c56:	4608      	mov	r0, r1
 8022c58:	4611      	mov	r1, r2
 8022c5a:	2200      	movs	r2, #0
 8022c5c:	602a      	str	r2, [r5, #0]
 8022c5e:	461a      	mov	r2, r3
 8022c60:	f7de f899 	bl	8000d96 <_read>
 8022c64:	1c43      	adds	r3, r0, #1
 8022c66:	d102      	bne.n	8022c6e <_read_r+0x1e>
 8022c68:	682b      	ldr	r3, [r5, #0]
 8022c6a:	b103      	cbz	r3, 8022c6e <_read_r+0x1e>
 8022c6c:	6023      	str	r3, [r4, #0]
 8022c6e:	bd38      	pop	{r3, r4, r5, pc}
 8022c70:	20000f94 	.word	0x20000f94

08022c74 <sniprintf>:
 8022c74:	b40c      	push	{r2, r3}
 8022c76:	b530      	push	{r4, r5, lr}
 8022c78:	4b17      	ldr	r3, [pc, #92]	; (8022cd8 <sniprintf+0x64>)
 8022c7a:	1e0c      	subs	r4, r1, #0
 8022c7c:	681d      	ldr	r5, [r3, #0]
 8022c7e:	b09d      	sub	sp, #116	; 0x74
 8022c80:	da08      	bge.n	8022c94 <sniprintf+0x20>
 8022c82:	238b      	movs	r3, #139	; 0x8b
 8022c84:	602b      	str	r3, [r5, #0]
 8022c86:	f04f 30ff 	mov.w	r0, #4294967295
 8022c8a:	b01d      	add	sp, #116	; 0x74
 8022c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022c90:	b002      	add	sp, #8
 8022c92:	4770      	bx	lr
 8022c94:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022c98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022c9c:	bf14      	ite	ne
 8022c9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022ca2:	4623      	moveq	r3, r4
 8022ca4:	9304      	str	r3, [sp, #16]
 8022ca6:	9307      	str	r3, [sp, #28]
 8022ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022cac:	9002      	str	r0, [sp, #8]
 8022cae:	9006      	str	r0, [sp, #24]
 8022cb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022cb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022cb6:	ab21      	add	r3, sp, #132	; 0x84
 8022cb8:	a902      	add	r1, sp, #8
 8022cba:	4628      	mov	r0, r5
 8022cbc:	9301      	str	r3, [sp, #4]
 8022cbe:	f7ff fb91 	bl	80223e4 <_svfiprintf_r>
 8022cc2:	1c43      	adds	r3, r0, #1
 8022cc4:	bfbc      	itt	lt
 8022cc6:	238b      	movlt	r3, #139	; 0x8b
 8022cc8:	602b      	strlt	r3, [r5, #0]
 8022cca:	2c00      	cmp	r4, #0
 8022ccc:	d0dd      	beq.n	8022c8a <sniprintf+0x16>
 8022cce:	9b02      	ldr	r3, [sp, #8]
 8022cd0:	2200      	movs	r2, #0
 8022cd2:	701a      	strb	r2, [r3, #0]
 8022cd4:	e7d9      	b.n	8022c8a <sniprintf+0x16>
 8022cd6:	bf00      	nop
 8022cd8:	20000108 	.word	0x20000108

08022cdc <siscanf>:
 8022cdc:	b40e      	push	{r1, r2, r3}
 8022cde:	b510      	push	{r4, lr}
 8022ce0:	b09f      	sub	sp, #124	; 0x7c
 8022ce2:	ac21      	add	r4, sp, #132	; 0x84
 8022ce4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8022ce8:	f854 2b04 	ldr.w	r2, [r4], #4
 8022cec:	9201      	str	r2, [sp, #4]
 8022cee:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022cf2:	9004      	str	r0, [sp, #16]
 8022cf4:	9008      	str	r0, [sp, #32]
 8022cf6:	f7dd faa1 	bl	800023c <strlen>
 8022cfa:	4b0c      	ldr	r3, [pc, #48]	; (8022d2c <siscanf+0x50>)
 8022cfc:	9005      	str	r0, [sp, #20]
 8022cfe:	9009      	str	r0, [sp, #36]	; 0x24
 8022d00:	930d      	str	r3, [sp, #52]	; 0x34
 8022d02:	480b      	ldr	r0, [pc, #44]	; (8022d30 <siscanf+0x54>)
 8022d04:	9a01      	ldr	r2, [sp, #4]
 8022d06:	6800      	ldr	r0, [r0, #0]
 8022d08:	9403      	str	r4, [sp, #12]
 8022d0a:	2300      	movs	r3, #0
 8022d0c:	9311      	str	r3, [sp, #68]	; 0x44
 8022d0e:	9316      	str	r3, [sp, #88]	; 0x58
 8022d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022d14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022d18:	a904      	add	r1, sp, #16
 8022d1a:	4623      	mov	r3, r4
 8022d1c:	f000 f8ba 	bl	8022e94 <__ssvfiscanf_r>
 8022d20:	b01f      	add	sp, #124	; 0x7c
 8022d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d26:	b003      	add	sp, #12
 8022d28:	4770      	bx	lr
 8022d2a:	bf00      	nop
 8022d2c:	08020a8b 	.word	0x08020a8b
 8022d30:	20000108 	.word	0x20000108

08022d34 <strcpy>:
 8022d34:	4603      	mov	r3, r0
 8022d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022d3a:	f803 2b01 	strb.w	r2, [r3], #1
 8022d3e:	2a00      	cmp	r2, #0
 8022d40:	d1f9      	bne.n	8022d36 <strcpy+0x2>
 8022d42:	4770      	bx	lr

08022d44 <strncmp>:
 8022d44:	b510      	push	{r4, lr}
 8022d46:	b16a      	cbz	r2, 8022d64 <strncmp+0x20>
 8022d48:	3901      	subs	r1, #1
 8022d4a:	1884      	adds	r4, r0, r2
 8022d4c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022d50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8022d54:	4293      	cmp	r3, r2
 8022d56:	d103      	bne.n	8022d60 <strncmp+0x1c>
 8022d58:	42a0      	cmp	r0, r4
 8022d5a:	d001      	beq.n	8022d60 <strncmp+0x1c>
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	d1f5      	bne.n	8022d4c <strncmp+0x8>
 8022d60:	1a98      	subs	r0, r3, r2
 8022d62:	bd10      	pop	{r4, pc}
 8022d64:	4610      	mov	r0, r2
 8022d66:	e7fc      	b.n	8022d62 <strncmp+0x1e>

08022d68 <__ascii_wctomb>:
 8022d68:	b149      	cbz	r1, 8022d7e <__ascii_wctomb+0x16>
 8022d6a:	2aff      	cmp	r2, #255	; 0xff
 8022d6c:	bf85      	ittet	hi
 8022d6e:	238a      	movhi	r3, #138	; 0x8a
 8022d70:	6003      	strhi	r3, [r0, #0]
 8022d72:	700a      	strbls	r2, [r1, #0]
 8022d74:	f04f 30ff 	movhi.w	r0, #4294967295
 8022d78:	bf98      	it	ls
 8022d7a:	2001      	movls	r0, #1
 8022d7c:	4770      	bx	lr
 8022d7e:	4608      	mov	r0, r1
 8022d80:	4770      	bx	lr
	...

08022d84 <__env_lock>:
 8022d84:	4801      	ldr	r0, [pc, #4]	; (8022d8c <__env_lock+0x8>)
 8022d86:	f7fd bc16 	b.w	80205b6 <__retarget_lock_acquire_recursive>
 8022d8a:	bf00      	nop
 8022d8c:	20000f8a 	.word	0x20000f8a

08022d90 <__env_unlock>:
 8022d90:	4801      	ldr	r0, [pc, #4]	; (8022d98 <__env_unlock+0x8>)
 8022d92:	f7fd bc12 	b.w	80205ba <__retarget_lock_release_recursive>
 8022d96:	bf00      	nop
 8022d98:	20000f8a 	.word	0x20000f8a

08022d9c <memmove>:
 8022d9c:	4288      	cmp	r0, r1
 8022d9e:	b510      	push	{r4, lr}
 8022da0:	eb01 0402 	add.w	r4, r1, r2
 8022da4:	d902      	bls.n	8022dac <memmove+0x10>
 8022da6:	4284      	cmp	r4, r0
 8022da8:	4623      	mov	r3, r4
 8022daa:	d807      	bhi.n	8022dbc <memmove+0x20>
 8022dac:	1e43      	subs	r3, r0, #1
 8022dae:	42a1      	cmp	r1, r4
 8022db0:	d008      	beq.n	8022dc4 <memmove+0x28>
 8022db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022dba:	e7f8      	b.n	8022dae <memmove+0x12>
 8022dbc:	4402      	add	r2, r0
 8022dbe:	4601      	mov	r1, r0
 8022dc0:	428a      	cmp	r2, r1
 8022dc2:	d100      	bne.n	8022dc6 <memmove+0x2a>
 8022dc4:	bd10      	pop	{r4, pc}
 8022dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022dce:	e7f7      	b.n	8022dc0 <memmove+0x24>

08022dd0 <_malloc_usable_size_r>:
 8022dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022dd4:	1f18      	subs	r0, r3, #4
 8022dd6:	2b00      	cmp	r3, #0
 8022dd8:	bfbc      	itt	lt
 8022dda:	580b      	ldrlt	r3, [r1, r0]
 8022ddc:	18c0      	addlt	r0, r0, r3
 8022dde:	4770      	bx	lr

08022de0 <_sungetc_r>:
 8022de0:	b538      	push	{r3, r4, r5, lr}
 8022de2:	1c4b      	adds	r3, r1, #1
 8022de4:	4614      	mov	r4, r2
 8022de6:	d103      	bne.n	8022df0 <_sungetc_r+0x10>
 8022de8:	f04f 35ff 	mov.w	r5, #4294967295
 8022dec:	4628      	mov	r0, r5
 8022dee:	bd38      	pop	{r3, r4, r5, pc}
 8022df0:	8993      	ldrh	r3, [r2, #12]
 8022df2:	f023 0320 	bic.w	r3, r3, #32
 8022df6:	8193      	strh	r3, [r2, #12]
 8022df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022dfa:	6852      	ldr	r2, [r2, #4]
 8022dfc:	b2cd      	uxtb	r5, r1
 8022dfe:	b18b      	cbz	r3, 8022e24 <_sungetc_r+0x44>
 8022e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022e02:	4293      	cmp	r3, r2
 8022e04:	dd08      	ble.n	8022e18 <_sungetc_r+0x38>
 8022e06:	6823      	ldr	r3, [r4, #0]
 8022e08:	1e5a      	subs	r2, r3, #1
 8022e0a:	6022      	str	r2, [r4, #0]
 8022e0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8022e10:	6863      	ldr	r3, [r4, #4]
 8022e12:	3301      	adds	r3, #1
 8022e14:	6063      	str	r3, [r4, #4]
 8022e16:	e7e9      	b.n	8022dec <_sungetc_r+0xc>
 8022e18:	4621      	mov	r1, r4
 8022e1a:	f000 fb39 	bl	8023490 <__submore>
 8022e1e:	2800      	cmp	r0, #0
 8022e20:	d0f1      	beq.n	8022e06 <_sungetc_r+0x26>
 8022e22:	e7e1      	b.n	8022de8 <_sungetc_r+0x8>
 8022e24:	6921      	ldr	r1, [r4, #16]
 8022e26:	6823      	ldr	r3, [r4, #0]
 8022e28:	b151      	cbz	r1, 8022e40 <_sungetc_r+0x60>
 8022e2a:	4299      	cmp	r1, r3
 8022e2c:	d208      	bcs.n	8022e40 <_sungetc_r+0x60>
 8022e2e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8022e32:	42a9      	cmp	r1, r5
 8022e34:	d104      	bne.n	8022e40 <_sungetc_r+0x60>
 8022e36:	3b01      	subs	r3, #1
 8022e38:	3201      	adds	r2, #1
 8022e3a:	6023      	str	r3, [r4, #0]
 8022e3c:	6062      	str	r2, [r4, #4]
 8022e3e:	e7d5      	b.n	8022dec <_sungetc_r+0xc>
 8022e40:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8022e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022e48:	6363      	str	r3, [r4, #52]	; 0x34
 8022e4a:	2303      	movs	r3, #3
 8022e4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8022e4e:	4623      	mov	r3, r4
 8022e50:	f803 5f46 	strb.w	r5, [r3, #70]!
 8022e54:	6023      	str	r3, [r4, #0]
 8022e56:	2301      	movs	r3, #1
 8022e58:	e7dc      	b.n	8022e14 <_sungetc_r+0x34>

08022e5a <__ssrefill_r>:
 8022e5a:	b510      	push	{r4, lr}
 8022e5c:	460c      	mov	r4, r1
 8022e5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022e60:	b169      	cbz	r1, 8022e7e <__ssrefill_r+0x24>
 8022e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022e66:	4299      	cmp	r1, r3
 8022e68:	d001      	beq.n	8022e6e <__ssrefill_r+0x14>
 8022e6a:	f7fd fc41 	bl	80206f0 <_free_r>
 8022e6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022e70:	6063      	str	r3, [r4, #4]
 8022e72:	2000      	movs	r0, #0
 8022e74:	6360      	str	r0, [r4, #52]	; 0x34
 8022e76:	b113      	cbz	r3, 8022e7e <__ssrefill_r+0x24>
 8022e78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022e7a:	6023      	str	r3, [r4, #0]
 8022e7c:	bd10      	pop	{r4, pc}
 8022e7e:	6923      	ldr	r3, [r4, #16]
 8022e80:	6023      	str	r3, [r4, #0]
 8022e82:	2300      	movs	r3, #0
 8022e84:	6063      	str	r3, [r4, #4]
 8022e86:	89a3      	ldrh	r3, [r4, #12]
 8022e88:	f043 0320 	orr.w	r3, r3, #32
 8022e8c:	81a3      	strh	r3, [r4, #12]
 8022e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8022e92:	e7f3      	b.n	8022e7c <__ssrefill_r+0x22>

08022e94 <__ssvfiscanf_r>:
 8022e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e98:	460c      	mov	r4, r1
 8022e9a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8022e9e:	2100      	movs	r1, #0
 8022ea0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8022ea4:	49b2      	ldr	r1, [pc, #712]	; (8023170 <__ssvfiscanf_r+0x2dc>)
 8022ea6:	91a0      	str	r1, [sp, #640]	; 0x280
 8022ea8:	f10d 0804 	add.w	r8, sp, #4
 8022eac:	49b1      	ldr	r1, [pc, #708]	; (8023174 <__ssvfiscanf_r+0x2e0>)
 8022eae:	4fb2      	ldr	r7, [pc, #712]	; (8023178 <__ssvfiscanf_r+0x2e4>)
 8022eb0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 802317c <__ssvfiscanf_r+0x2e8>
 8022eb4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8022eb8:	4606      	mov	r6, r0
 8022eba:	91a1      	str	r1, [sp, #644]	; 0x284
 8022ebc:	9300      	str	r3, [sp, #0]
 8022ebe:	f892 a000 	ldrb.w	sl, [r2]
 8022ec2:	f1ba 0f00 	cmp.w	sl, #0
 8022ec6:	f000 8151 	beq.w	802316c <__ssvfiscanf_r+0x2d8>
 8022eca:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8022ece:	f013 0308 	ands.w	r3, r3, #8
 8022ed2:	f102 0501 	add.w	r5, r2, #1
 8022ed6:	d019      	beq.n	8022f0c <__ssvfiscanf_r+0x78>
 8022ed8:	6863      	ldr	r3, [r4, #4]
 8022eda:	2b00      	cmp	r3, #0
 8022edc:	dd0f      	ble.n	8022efe <__ssvfiscanf_r+0x6a>
 8022ede:	6823      	ldr	r3, [r4, #0]
 8022ee0:	781a      	ldrb	r2, [r3, #0]
 8022ee2:	5cba      	ldrb	r2, [r7, r2]
 8022ee4:	0712      	lsls	r2, r2, #28
 8022ee6:	d401      	bmi.n	8022eec <__ssvfiscanf_r+0x58>
 8022ee8:	462a      	mov	r2, r5
 8022eea:	e7e8      	b.n	8022ebe <__ssvfiscanf_r+0x2a>
 8022eec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022eee:	3201      	adds	r2, #1
 8022ef0:	9245      	str	r2, [sp, #276]	; 0x114
 8022ef2:	6862      	ldr	r2, [r4, #4]
 8022ef4:	3301      	adds	r3, #1
 8022ef6:	3a01      	subs	r2, #1
 8022ef8:	6062      	str	r2, [r4, #4]
 8022efa:	6023      	str	r3, [r4, #0]
 8022efc:	e7ec      	b.n	8022ed8 <__ssvfiscanf_r+0x44>
 8022efe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022f00:	4621      	mov	r1, r4
 8022f02:	4630      	mov	r0, r6
 8022f04:	4798      	blx	r3
 8022f06:	2800      	cmp	r0, #0
 8022f08:	d0e9      	beq.n	8022ede <__ssvfiscanf_r+0x4a>
 8022f0a:	e7ed      	b.n	8022ee8 <__ssvfiscanf_r+0x54>
 8022f0c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8022f10:	f040 8083 	bne.w	802301a <__ssvfiscanf_r+0x186>
 8022f14:	9341      	str	r3, [sp, #260]	; 0x104
 8022f16:	9343      	str	r3, [sp, #268]	; 0x10c
 8022f18:	7853      	ldrb	r3, [r2, #1]
 8022f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8022f1c:	bf02      	ittt	eq
 8022f1e:	2310      	moveq	r3, #16
 8022f20:	1c95      	addeq	r5, r2, #2
 8022f22:	9341      	streq	r3, [sp, #260]	; 0x104
 8022f24:	220a      	movs	r2, #10
 8022f26:	46ab      	mov	fp, r5
 8022f28:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8022f2c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8022f30:	2b09      	cmp	r3, #9
 8022f32:	d91d      	bls.n	8022f70 <__ssvfiscanf_r+0xdc>
 8022f34:	4891      	ldr	r0, [pc, #580]	; (802317c <__ssvfiscanf_r+0x2e8>)
 8022f36:	2203      	movs	r2, #3
 8022f38:	f7dd f992 	bl	8000260 <memchr>
 8022f3c:	b140      	cbz	r0, 8022f50 <__ssvfiscanf_r+0xbc>
 8022f3e:	2301      	movs	r3, #1
 8022f40:	eba0 0009 	sub.w	r0, r0, r9
 8022f44:	fa03 f000 	lsl.w	r0, r3, r0
 8022f48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022f4a:	4318      	orrs	r0, r3
 8022f4c:	9041      	str	r0, [sp, #260]	; 0x104
 8022f4e:	465d      	mov	r5, fp
 8022f50:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022f54:	2b78      	cmp	r3, #120	; 0x78
 8022f56:	d806      	bhi.n	8022f66 <__ssvfiscanf_r+0xd2>
 8022f58:	2b57      	cmp	r3, #87	; 0x57
 8022f5a:	d810      	bhi.n	8022f7e <__ssvfiscanf_r+0xea>
 8022f5c:	2b25      	cmp	r3, #37	; 0x25
 8022f5e:	d05c      	beq.n	802301a <__ssvfiscanf_r+0x186>
 8022f60:	d856      	bhi.n	8023010 <__ssvfiscanf_r+0x17c>
 8022f62:	2b00      	cmp	r3, #0
 8022f64:	d074      	beq.n	8023050 <__ssvfiscanf_r+0x1bc>
 8022f66:	2303      	movs	r3, #3
 8022f68:	9347      	str	r3, [sp, #284]	; 0x11c
 8022f6a:	230a      	movs	r3, #10
 8022f6c:	9342      	str	r3, [sp, #264]	; 0x108
 8022f6e:	e081      	b.n	8023074 <__ssvfiscanf_r+0x1e0>
 8022f70:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8022f72:	fb02 1303 	mla	r3, r2, r3, r1
 8022f76:	3b30      	subs	r3, #48	; 0x30
 8022f78:	9343      	str	r3, [sp, #268]	; 0x10c
 8022f7a:	465d      	mov	r5, fp
 8022f7c:	e7d3      	b.n	8022f26 <__ssvfiscanf_r+0x92>
 8022f7e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8022f82:	2a20      	cmp	r2, #32
 8022f84:	d8ef      	bhi.n	8022f66 <__ssvfiscanf_r+0xd2>
 8022f86:	a101      	add	r1, pc, #4	; (adr r1, 8022f8c <__ssvfiscanf_r+0xf8>)
 8022f88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022f8c:	0802305f 	.word	0x0802305f
 8022f90:	08022f67 	.word	0x08022f67
 8022f94:	08022f67 	.word	0x08022f67
 8022f98:	080230bd 	.word	0x080230bd
 8022f9c:	08022f67 	.word	0x08022f67
 8022fa0:	08022f67 	.word	0x08022f67
 8022fa4:	08022f67 	.word	0x08022f67
 8022fa8:	08022f67 	.word	0x08022f67
 8022fac:	08022f67 	.word	0x08022f67
 8022fb0:	08022f67 	.word	0x08022f67
 8022fb4:	08022f67 	.word	0x08022f67
 8022fb8:	080230d3 	.word	0x080230d3
 8022fbc:	080230a9 	.word	0x080230a9
 8022fc0:	08023017 	.word	0x08023017
 8022fc4:	08023017 	.word	0x08023017
 8022fc8:	08023017 	.word	0x08023017
 8022fcc:	08022f67 	.word	0x08022f67
 8022fd0:	080230ad 	.word	0x080230ad
 8022fd4:	08022f67 	.word	0x08022f67
 8022fd8:	08022f67 	.word	0x08022f67
 8022fdc:	08022f67 	.word	0x08022f67
 8022fe0:	08022f67 	.word	0x08022f67
 8022fe4:	080230e3 	.word	0x080230e3
 8022fe8:	080230b5 	.word	0x080230b5
 8022fec:	08023057 	.word	0x08023057
 8022ff0:	08022f67 	.word	0x08022f67
 8022ff4:	08022f67 	.word	0x08022f67
 8022ff8:	080230df 	.word	0x080230df
 8022ffc:	08022f67 	.word	0x08022f67
 8023000:	080230a9 	.word	0x080230a9
 8023004:	08022f67 	.word	0x08022f67
 8023008:	08022f67 	.word	0x08022f67
 802300c:	0802305f 	.word	0x0802305f
 8023010:	3b45      	subs	r3, #69	; 0x45
 8023012:	2b02      	cmp	r3, #2
 8023014:	d8a7      	bhi.n	8022f66 <__ssvfiscanf_r+0xd2>
 8023016:	2305      	movs	r3, #5
 8023018:	e02b      	b.n	8023072 <__ssvfiscanf_r+0x1de>
 802301a:	6863      	ldr	r3, [r4, #4]
 802301c:	2b00      	cmp	r3, #0
 802301e:	dd0d      	ble.n	802303c <__ssvfiscanf_r+0x1a8>
 8023020:	6823      	ldr	r3, [r4, #0]
 8023022:	781a      	ldrb	r2, [r3, #0]
 8023024:	4552      	cmp	r2, sl
 8023026:	f040 80a1 	bne.w	802316c <__ssvfiscanf_r+0x2d8>
 802302a:	3301      	adds	r3, #1
 802302c:	6862      	ldr	r2, [r4, #4]
 802302e:	6023      	str	r3, [r4, #0]
 8023030:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8023032:	3a01      	subs	r2, #1
 8023034:	3301      	adds	r3, #1
 8023036:	6062      	str	r2, [r4, #4]
 8023038:	9345      	str	r3, [sp, #276]	; 0x114
 802303a:	e755      	b.n	8022ee8 <__ssvfiscanf_r+0x54>
 802303c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802303e:	4621      	mov	r1, r4
 8023040:	4630      	mov	r0, r6
 8023042:	4798      	blx	r3
 8023044:	2800      	cmp	r0, #0
 8023046:	d0eb      	beq.n	8023020 <__ssvfiscanf_r+0x18c>
 8023048:	9844      	ldr	r0, [sp, #272]	; 0x110
 802304a:	2800      	cmp	r0, #0
 802304c:	f040 8084 	bne.w	8023158 <__ssvfiscanf_r+0x2c4>
 8023050:	f04f 30ff 	mov.w	r0, #4294967295
 8023054:	e086      	b.n	8023164 <__ssvfiscanf_r+0x2d0>
 8023056:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023058:	f042 0220 	orr.w	r2, r2, #32
 802305c:	9241      	str	r2, [sp, #260]	; 0x104
 802305e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023064:	9241      	str	r2, [sp, #260]	; 0x104
 8023066:	2210      	movs	r2, #16
 8023068:	2b6f      	cmp	r3, #111	; 0x6f
 802306a:	9242      	str	r2, [sp, #264]	; 0x108
 802306c:	bf34      	ite	cc
 802306e:	2303      	movcc	r3, #3
 8023070:	2304      	movcs	r3, #4
 8023072:	9347      	str	r3, [sp, #284]	; 0x11c
 8023074:	6863      	ldr	r3, [r4, #4]
 8023076:	2b00      	cmp	r3, #0
 8023078:	dd41      	ble.n	80230fe <__ssvfiscanf_r+0x26a>
 802307a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802307c:	0659      	lsls	r1, r3, #25
 802307e:	d404      	bmi.n	802308a <__ssvfiscanf_r+0x1f6>
 8023080:	6823      	ldr	r3, [r4, #0]
 8023082:	781a      	ldrb	r2, [r3, #0]
 8023084:	5cba      	ldrb	r2, [r7, r2]
 8023086:	0712      	lsls	r2, r2, #28
 8023088:	d440      	bmi.n	802310c <__ssvfiscanf_r+0x278>
 802308a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802308c:	2b02      	cmp	r3, #2
 802308e:	dc4f      	bgt.n	8023130 <__ssvfiscanf_r+0x29c>
 8023090:	466b      	mov	r3, sp
 8023092:	4622      	mov	r2, r4
 8023094:	a941      	add	r1, sp, #260	; 0x104
 8023096:	4630      	mov	r0, r6
 8023098:	f000 f874 	bl	8023184 <_scanf_chars>
 802309c:	2801      	cmp	r0, #1
 802309e:	d065      	beq.n	802316c <__ssvfiscanf_r+0x2d8>
 80230a0:	2802      	cmp	r0, #2
 80230a2:	f47f af21 	bne.w	8022ee8 <__ssvfiscanf_r+0x54>
 80230a6:	e7cf      	b.n	8023048 <__ssvfiscanf_r+0x1b4>
 80230a8:	220a      	movs	r2, #10
 80230aa:	e7dd      	b.n	8023068 <__ssvfiscanf_r+0x1d4>
 80230ac:	2300      	movs	r3, #0
 80230ae:	9342      	str	r3, [sp, #264]	; 0x108
 80230b0:	2303      	movs	r3, #3
 80230b2:	e7de      	b.n	8023072 <__ssvfiscanf_r+0x1de>
 80230b4:	2308      	movs	r3, #8
 80230b6:	9342      	str	r3, [sp, #264]	; 0x108
 80230b8:	2304      	movs	r3, #4
 80230ba:	e7da      	b.n	8023072 <__ssvfiscanf_r+0x1de>
 80230bc:	4629      	mov	r1, r5
 80230be:	4640      	mov	r0, r8
 80230c0:	f000 f9ac 	bl	802341c <__sccl>
 80230c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80230c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80230ca:	9341      	str	r3, [sp, #260]	; 0x104
 80230cc:	4605      	mov	r5, r0
 80230ce:	2301      	movs	r3, #1
 80230d0:	e7cf      	b.n	8023072 <__ssvfiscanf_r+0x1de>
 80230d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80230d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80230d8:	9341      	str	r3, [sp, #260]	; 0x104
 80230da:	2300      	movs	r3, #0
 80230dc:	e7c9      	b.n	8023072 <__ssvfiscanf_r+0x1de>
 80230de:	2302      	movs	r3, #2
 80230e0:	e7c7      	b.n	8023072 <__ssvfiscanf_r+0x1de>
 80230e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80230e4:	06c3      	lsls	r3, r0, #27
 80230e6:	f53f aeff 	bmi.w	8022ee8 <__ssvfiscanf_r+0x54>
 80230ea:	9b00      	ldr	r3, [sp, #0]
 80230ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80230ee:	1d19      	adds	r1, r3, #4
 80230f0:	9100      	str	r1, [sp, #0]
 80230f2:	681b      	ldr	r3, [r3, #0]
 80230f4:	07c0      	lsls	r0, r0, #31
 80230f6:	bf4c      	ite	mi
 80230f8:	801a      	strhmi	r2, [r3, #0]
 80230fa:	601a      	strpl	r2, [r3, #0]
 80230fc:	e6f4      	b.n	8022ee8 <__ssvfiscanf_r+0x54>
 80230fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023100:	4621      	mov	r1, r4
 8023102:	4630      	mov	r0, r6
 8023104:	4798      	blx	r3
 8023106:	2800      	cmp	r0, #0
 8023108:	d0b7      	beq.n	802307a <__ssvfiscanf_r+0x1e6>
 802310a:	e79d      	b.n	8023048 <__ssvfiscanf_r+0x1b4>
 802310c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802310e:	3201      	adds	r2, #1
 8023110:	9245      	str	r2, [sp, #276]	; 0x114
 8023112:	6862      	ldr	r2, [r4, #4]
 8023114:	3a01      	subs	r2, #1
 8023116:	2a00      	cmp	r2, #0
 8023118:	6062      	str	r2, [r4, #4]
 802311a:	dd02      	ble.n	8023122 <__ssvfiscanf_r+0x28e>
 802311c:	3301      	adds	r3, #1
 802311e:	6023      	str	r3, [r4, #0]
 8023120:	e7ae      	b.n	8023080 <__ssvfiscanf_r+0x1ec>
 8023122:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023124:	4621      	mov	r1, r4
 8023126:	4630      	mov	r0, r6
 8023128:	4798      	blx	r3
 802312a:	2800      	cmp	r0, #0
 802312c:	d0a8      	beq.n	8023080 <__ssvfiscanf_r+0x1ec>
 802312e:	e78b      	b.n	8023048 <__ssvfiscanf_r+0x1b4>
 8023130:	2b04      	cmp	r3, #4
 8023132:	dc06      	bgt.n	8023142 <__ssvfiscanf_r+0x2ae>
 8023134:	466b      	mov	r3, sp
 8023136:	4622      	mov	r2, r4
 8023138:	a941      	add	r1, sp, #260	; 0x104
 802313a:	4630      	mov	r0, r6
 802313c:	f000 f87a 	bl	8023234 <_scanf_i>
 8023140:	e7ac      	b.n	802309c <__ssvfiscanf_r+0x208>
 8023142:	4b0f      	ldr	r3, [pc, #60]	; (8023180 <__ssvfiscanf_r+0x2ec>)
 8023144:	2b00      	cmp	r3, #0
 8023146:	f43f aecf 	beq.w	8022ee8 <__ssvfiscanf_r+0x54>
 802314a:	466b      	mov	r3, sp
 802314c:	4622      	mov	r2, r4
 802314e:	a941      	add	r1, sp, #260	; 0x104
 8023150:	4630      	mov	r0, r6
 8023152:	f3af 8000 	nop.w
 8023156:	e7a1      	b.n	802309c <__ssvfiscanf_r+0x208>
 8023158:	89a3      	ldrh	r3, [r4, #12]
 802315a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802315e:	bf18      	it	ne
 8023160:	f04f 30ff 	movne.w	r0, #4294967295
 8023164:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8023168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802316c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802316e:	e7f9      	b.n	8023164 <__ssvfiscanf_r+0x2d0>
 8023170:	08022de1 	.word	0x08022de1
 8023174:	08022e5b 	.word	0x08022e5b
 8023178:	08029985 	.word	0x08029985
 802317c:	08029a95 	.word	0x08029a95
 8023180:	00000000 	.word	0x00000000

08023184 <_scanf_chars>:
 8023184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023188:	4615      	mov	r5, r2
 802318a:	688a      	ldr	r2, [r1, #8]
 802318c:	4680      	mov	r8, r0
 802318e:	460c      	mov	r4, r1
 8023190:	b932      	cbnz	r2, 80231a0 <_scanf_chars+0x1c>
 8023192:	698a      	ldr	r2, [r1, #24]
 8023194:	2a00      	cmp	r2, #0
 8023196:	bf0c      	ite	eq
 8023198:	2201      	moveq	r2, #1
 802319a:	f04f 32ff 	movne.w	r2, #4294967295
 802319e:	608a      	str	r2, [r1, #8]
 80231a0:	6822      	ldr	r2, [r4, #0]
 80231a2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8023230 <_scanf_chars+0xac>
 80231a6:	06d1      	lsls	r1, r2, #27
 80231a8:	bf5f      	itttt	pl
 80231aa:	681a      	ldrpl	r2, [r3, #0]
 80231ac:	1d11      	addpl	r1, r2, #4
 80231ae:	6019      	strpl	r1, [r3, #0]
 80231b0:	6816      	ldrpl	r6, [r2, #0]
 80231b2:	2700      	movs	r7, #0
 80231b4:	69a0      	ldr	r0, [r4, #24]
 80231b6:	b188      	cbz	r0, 80231dc <_scanf_chars+0x58>
 80231b8:	2801      	cmp	r0, #1
 80231ba:	d107      	bne.n	80231cc <_scanf_chars+0x48>
 80231bc:	682b      	ldr	r3, [r5, #0]
 80231be:	781a      	ldrb	r2, [r3, #0]
 80231c0:	6963      	ldr	r3, [r4, #20]
 80231c2:	5c9b      	ldrb	r3, [r3, r2]
 80231c4:	b953      	cbnz	r3, 80231dc <_scanf_chars+0x58>
 80231c6:	bb27      	cbnz	r7, 8023212 <_scanf_chars+0x8e>
 80231c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80231cc:	2802      	cmp	r0, #2
 80231ce:	d120      	bne.n	8023212 <_scanf_chars+0x8e>
 80231d0:	682b      	ldr	r3, [r5, #0]
 80231d2:	781b      	ldrb	r3, [r3, #0]
 80231d4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80231d8:	071b      	lsls	r3, r3, #28
 80231da:	d41a      	bmi.n	8023212 <_scanf_chars+0x8e>
 80231dc:	6823      	ldr	r3, [r4, #0]
 80231de:	06da      	lsls	r2, r3, #27
 80231e0:	bf5e      	ittt	pl
 80231e2:	682b      	ldrpl	r3, [r5, #0]
 80231e4:	781b      	ldrbpl	r3, [r3, #0]
 80231e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80231ea:	682a      	ldr	r2, [r5, #0]
 80231ec:	686b      	ldr	r3, [r5, #4]
 80231ee:	3201      	adds	r2, #1
 80231f0:	602a      	str	r2, [r5, #0]
 80231f2:	68a2      	ldr	r2, [r4, #8]
 80231f4:	3b01      	subs	r3, #1
 80231f6:	3a01      	subs	r2, #1
 80231f8:	606b      	str	r3, [r5, #4]
 80231fa:	3701      	adds	r7, #1
 80231fc:	60a2      	str	r2, [r4, #8]
 80231fe:	b142      	cbz	r2, 8023212 <_scanf_chars+0x8e>
 8023200:	2b00      	cmp	r3, #0
 8023202:	dcd7      	bgt.n	80231b4 <_scanf_chars+0x30>
 8023204:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023208:	4629      	mov	r1, r5
 802320a:	4640      	mov	r0, r8
 802320c:	4798      	blx	r3
 802320e:	2800      	cmp	r0, #0
 8023210:	d0d0      	beq.n	80231b4 <_scanf_chars+0x30>
 8023212:	6823      	ldr	r3, [r4, #0]
 8023214:	f013 0310 	ands.w	r3, r3, #16
 8023218:	d105      	bne.n	8023226 <_scanf_chars+0xa2>
 802321a:	68e2      	ldr	r2, [r4, #12]
 802321c:	3201      	adds	r2, #1
 802321e:	60e2      	str	r2, [r4, #12]
 8023220:	69a2      	ldr	r2, [r4, #24]
 8023222:	b102      	cbz	r2, 8023226 <_scanf_chars+0xa2>
 8023224:	7033      	strb	r3, [r6, #0]
 8023226:	6923      	ldr	r3, [r4, #16]
 8023228:	441f      	add	r7, r3
 802322a:	6127      	str	r7, [r4, #16]
 802322c:	2000      	movs	r0, #0
 802322e:	e7cb      	b.n	80231c8 <_scanf_chars+0x44>
 8023230:	08029985 	.word	0x08029985

08023234 <_scanf_i>:
 8023234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023238:	4698      	mov	r8, r3
 802323a:	4b74      	ldr	r3, [pc, #464]	; (802340c <_scanf_i+0x1d8>)
 802323c:	460c      	mov	r4, r1
 802323e:	4682      	mov	sl, r0
 8023240:	4616      	mov	r6, r2
 8023242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8023246:	b087      	sub	sp, #28
 8023248:	ab03      	add	r3, sp, #12
 802324a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802324e:	4b70      	ldr	r3, [pc, #448]	; (8023410 <_scanf_i+0x1dc>)
 8023250:	69a1      	ldr	r1, [r4, #24]
 8023252:	4a70      	ldr	r2, [pc, #448]	; (8023414 <_scanf_i+0x1e0>)
 8023254:	2903      	cmp	r1, #3
 8023256:	bf18      	it	ne
 8023258:	461a      	movne	r2, r3
 802325a:	68a3      	ldr	r3, [r4, #8]
 802325c:	9201      	str	r2, [sp, #4]
 802325e:	1e5a      	subs	r2, r3, #1
 8023260:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8023264:	bf88      	it	hi
 8023266:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802326a:	4627      	mov	r7, r4
 802326c:	bf82      	ittt	hi
 802326e:	eb03 0905 	addhi.w	r9, r3, r5
 8023272:	f240 135d 	movwhi	r3, #349	; 0x15d
 8023276:	60a3      	strhi	r3, [r4, #8]
 8023278:	f857 3b1c 	ldr.w	r3, [r7], #28
 802327c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8023280:	bf98      	it	ls
 8023282:	f04f 0900 	movls.w	r9, #0
 8023286:	6023      	str	r3, [r4, #0]
 8023288:	463d      	mov	r5, r7
 802328a:	f04f 0b00 	mov.w	fp, #0
 802328e:	6831      	ldr	r1, [r6, #0]
 8023290:	ab03      	add	r3, sp, #12
 8023292:	7809      	ldrb	r1, [r1, #0]
 8023294:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8023298:	2202      	movs	r2, #2
 802329a:	f7dc ffe1 	bl	8000260 <memchr>
 802329e:	b328      	cbz	r0, 80232ec <_scanf_i+0xb8>
 80232a0:	f1bb 0f01 	cmp.w	fp, #1
 80232a4:	d159      	bne.n	802335a <_scanf_i+0x126>
 80232a6:	6862      	ldr	r2, [r4, #4]
 80232a8:	b92a      	cbnz	r2, 80232b6 <_scanf_i+0x82>
 80232aa:	6822      	ldr	r2, [r4, #0]
 80232ac:	2308      	movs	r3, #8
 80232ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80232b2:	6063      	str	r3, [r4, #4]
 80232b4:	6022      	str	r2, [r4, #0]
 80232b6:	6822      	ldr	r2, [r4, #0]
 80232b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80232bc:	6022      	str	r2, [r4, #0]
 80232be:	68a2      	ldr	r2, [r4, #8]
 80232c0:	1e51      	subs	r1, r2, #1
 80232c2:	60a1      	str	r1, [r4, #8]
 80232c4:	b192      	cbz	r2, 80232ec <_scanf_i+0xb8>
 80232c6:	6832      	ldr	r2, [r6, #0]
 80232c8:	1c51      	adds	r1, r2, #1
 80232ca:	6031      	str	r1, [r6, #0]
 80232cc:	7812      	ldrb	r2, [r2, #0]
 80232ce:	f805 2b01 	strb.w	r2, [r5], #1
 80232d2:	6872      	ldr	r2, [r6, #4]
 80232d4:	3a01      	subs	r2, #1
 80232d6:	2a00      	cmp	r2, #0
 80232d8:	6072      	str	r2, [r6, #4]
 80232da:	dc07      	bgt.n	80232ec <_scanf_i+0xb8>
 80232dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80232e0:	4631      	mov	r1, r6
 80232e2:	4650      	mov	r0, sl
 80232e4:	4790      	blx	r2
 80232e6:	2800      	cmp	r0, #0
 80232e8:	f040 8085 	bne.w	80233f6 <_scanf_i+0x1c2>
 80232ec:	f10b 0b01 	add.w	fp, fp, #1
 80232f0:	f1bb 0f03 	cmp.w	fp, #3
 80232f4:	d1cb      	bne.n	802328e <_scanf_i+0x5a>
 80232f6:	6863      	ldr	r3, [r4, #4]
 80232f8:	b90b      	cbnz	r3, 80232fe <_scanf_i+0xca>
 80232fa:	230a      	movs	r3, #10
 80232fc:	6063      	str	r3, [r4, #4]
 80232fe:	6863      	ldr	r3, [r4, #4]
 8023300:	4945      	ldr	r1, [pc, #276]	; (8023418 <_scanf_i+0x1e4>)
 8023302:	6960      	ldr	r0, [r4, #20]
 8023304:	1ac9      	subs	r1, r1, r3
 8023306:	f000 f889 	bl	802341c <__sccl>
 802330a:	f04f 0b00 	mov.w	fp, #0
 802330e:	68a3      	ldr	r3, [r4, #8]
 8023310:	6822      	ldr	r2, [r4, #0]
 8023312:	2b00      	cmp	r3, #0
 8023314:	d03d      	beq.n	8023392 <_scanf_i+0x15e>
 8023316:	6831      	ldr	r1, [r6, #0]
 8023318:	6960      	ldr	r0, [r4, #20]
 802331a:	f891 c000 	ldrb.w	ip, [r1]
 802331e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8023322:	2800      	cmp	r0, #0
 8023324:	d035      	beq.n	8023392 <_scanf_i+0x15e>
 8023326:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802332a:	d124      	bne.n	8023376 <_scanf_i+0x142>
 802332c:	0510      	lsls	r0, r2, #20
 802332e:	d522      	bpl.n	8023376 <_scanf_i+0x142>
 8023330:	f10b 0b01 	add.w	fp, fp, #1
 8023334:	f1b9 0f00 	cmp.w	r9, #0
 8023338:	d003      	beq.n	8023342 <_scanf_i+0x10e>
 802333a:	3301      	adds	r3, #1
 802333c:	f109 39ff 	add.w	r9, r9, #4294967295
 8023340:	60a3      	str	r3, [r4, #8]
 8023342:	6873      	ldr	r3, [r6, #4]
 8023344:	3b01      	subs	r3, #1
 8023346:	2b00      	cmp	r3, #0
 8023348:	6073      	str	r3, [r6, #4]
 802334a:	dd1b      	ble.n	8023384 <_scanf_i+0x150>
 802334c:	6833      	ldr	r3, [r6, #0]
 802334e:	3301      	adds	r3, #1
 8023350:	6033      	str	r3, [r6, #0]
 8023352:	68a3      	ldr	r3, [r4, #8]
 8023354:	3b01      	subs	r3, #1
 8023356:	60a3      	str	r3, [r4, #8]
 8023358:	e7d9      	b.n	802330e <_scanf_i+0xda>
 802335a:	f1bb 0f02 	cmp.w	fp, #2
 802335e:	d1ae      	bne.n	80232be <_scanf_i+0x8a>
 8023360:	6822      	ldr	r2, [r4, #0]
 8023362:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8023366:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802336a:	d1bf      	bne.n	80232ec <_scanf_i+0xb8>
 802336c:	2310      	movs	r3, #16
 802336e:	6063      	str	r3, [r4, #4]
 8023370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023374:	e7a2      	b.n	80232bc <_scanf_i+0x88>
 8023376:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802337a:	6022      	str	r2, [r4, #0]
 802337c:	780b      	ldrb	r3, [r1, #0]
 802337e:	f805 3b01 	strb.w	r3, [r5], #1
 8023382:	e7de      	b.n	8023342 <_scanf_i+0x10e>
 8023384:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023388:	4631      	mov	r1, r6
 802338a:	4650      	mov	r0, sl
 802338c:	4798      	blx	r3
 802338e:	2800      	cmp	r0, #0
 8023390:	d0df      	beq.n	8023352 <_scanf_i+0x11e>
 8023392:	6823      	ldr	r3, [r4, #0]
 8023394:	05d9      	lsls	r1, r3, #23
 8023396:	d50d      	bpl.n	80233b4 <_scanf_i+0x180>
 8023398:	42bd      	cmp	r5, r7
 802339a:	d909      	bls.n	80233b0 <_scanf_i+0x17c>
 802339c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80233a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80233a4:	4632      	mov	r2, r6
 80233a6:	4650      	mov	r0, sl
 80233a8:	4798      	blx	r3
 80233aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80233ae:	464d      	mov	r5, r9
 80233b0:	42bd      	cmp	r5, r7
 80233b2:	d028      	beq.n	8023406 <_scanf_i+0x1d2>
 80233b4:	6822      	ldr	r2, [r4, #0]
 80233b6:	f012 0210 	ands.w	r2, r2, #16
 80233ba:	d113      	bne.n	80233e4 <_scanf_i+0x1b0>
 80233bc:	702a      	strb	r2, [r5, #0]
 80233be:	6863      	ldr	r3, [r4, #4]
 80233c0:	9e01      	ldr	r6, [sp, #4]
 80233c2:	4639      	mov	r1, r7
 80233c4:	4650      	mov	r0, sl
 80233c6:	47b0      	blx	r6
 80233c8:	f8d8 3000 	ldr.w	r3, [r8]
 80233cc:	6821      	ldr	r1, [r4, #0]
 80233ce:	1d1a      	adds	r2, r3, #4
 80233d0:	f8c8 2000 	str.w	r2, [r8]
 80233d4:	f011 0f20 	tst.w	r1, #32
 80233d8:	681b      	ldr	r3, [r3, #0]
 80233da:	d00f      	beq.n	80233fc <_scanf_i+0x1c8>
 80233dc:	6018      	str	r0, [r3, #0]
 80233de:	68e3      	ldr	r3, [r4, #12]
 80233e0:	3301      	adds	r3, #1
 80233e2:	60e3      	str	r3, [r4, #12]
 80233e4:	1bed      	subs	r5, r5, r7
 80233e6:	44ab      	add	fp, r5
 80233e8:	6925      	ldr	r5, [r4, #16]
 80233ea:	445d      	add	r5, fp
 80233ec:	6125      	str	r5, [r4, #16]
 80233ee:	2000      	movs	r0, #0
 80233f0:	b007      	add	sp, #28
 80233f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233f6:	f04f 0b00 	mov.w	fp, #0
 80233fa:	e7ca      	b.n	8023392 <_scanf_i+0x15e>
 80233fc:	07ca      	lsls	r2, r1, #31
 80233fe:	bf4c      	ite	mi
 8023400:	8018      	strhmi	r0, [r3, #0]
 8023402:	6018      	strpl	r0, [r3, #0]
 8023404:	e7eb      	b.n	80233de <_scanf_i+0x1aa>
 8023406:	2001      	movs	r0, #1
 8023408:	e7f2      	b.n	80233f0 <_scanf_i+0x1bc>
 802340a:	bf00      	nop
 802340c:	0802694c 	.word	0x0802694c
 8023410:	080217f5 	.word	0x080217f5
 8023414:	080216e5 	.word	0x080216e5
 8023418:	08029adb 	.word	0x08029adb

0802341c <__sccl>:
 802341c:	b570      	push	{r4, r5, r6, lr}
 802341e:	780b      	ldrb	r3, [r1, #0]
 8023420:	4604      	mov	r4, r0
 8023422:	2b5e      	cmp	r3, #94	; 0x5e
 8023424:	bf0b      	itete	eq
 8023426:	784b      	ldrbeq	r3, [r1, #1]
 8023428:	1c48      	addne	r0, r1, #1
 802342a:	1c88      	addeq	r0, r1, #2
 802342c:	2200      	movne	r2, #0
 802342e:	bf08      	it	eq
 8023430:	2201      	moveq	r2, #1
 8023432:	1e61      	subs	r1, r4, #1
 8023434:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8023438:	f801 2f01 	strb.w	r2, [r1, #1]!
 802343c:	42a9      	cmp	r1, r5
 802343e:	d1fb      	bne.n	8023438 <__sccl+0x1c>
 8023440:	b90b      	cbnz	r3, 8023446 <__sccl+0x2a>
 8023442:	3801      	subs	r0, #1
 8023444:	bd70      	pop	{r4, r5, r6, pc}
 8023446:	f082 0101 	eor.w	r1, r2, #1
 802344a:	54e1      	strb	r1, [r4, r3]
 802344c:	1c42      	adds	r2, r0, #1
 802344e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8023452:	2d2d      	cmp	r5, #45	; 0x2d
 8023454:	f102 36ff 	add.w	r6, r2, #4294967295
 8023458:	4610      	mov	r0, r2
 802345a:	d006      	beq.n	802346a <__sccl+0x4e>
 802345c:	2d5d      	cmp	r5, #93	; 0x5d
 802345e:	d0f1      	beq.n	8023444 <__sccl+0x28>
 8023460:	b90d      	cbnz	r5, 8023466 <__sccl+0x4a>
 8023462:	4630      	mov	r0, r6
 8023464:	e7ee      	b.n	8023444 <__sccl+0x28>
 8023466:	462b      	mov	r3, r5
 8023468:	e7ef      	b.n	802344a <__sccl+0x2e>
 802346a:	7816      	ldrb	r6, [r2, #0]
 802346c:	2e5d      	cmp	r6, #93	; 0x5d
 802346e:	d0fa      	beq.n	8023466 <__sccl+0x4a>
 8023470:	42b3      	cmp	r3, r6
 8023472:	dcf8      	bgt.n	8023466 <__sccl+0x4a>
 8023474:	4618      	mov	r0, r3
 8023476:	3001      	adds	r0, #1
 8023478:	4286      	cmp	r6, r0
 802347a:	5421      	strb	r1, [r4, r0]
 802347c:	dcfb      	bgt.n	8023476 <__sccl+0x5a>
 802347e:	43d8      	mvns	r0, r3
 8023480:	4430      	add	r0, r6
 8023482:	1c5d      	adds	r5, r3, #1
 8023484:	42b3      	cmp	r3, r6
 8023486:	bfa8      	it	ge
 8023488:	2000      	movge	r0, #0
 802348a:	182b      	adds	r3, r5, r0
 802348c:	3202      	adds	r2, #2
 802348e:	e7de      	b.n	802344e <__sccl+0x32>

08023490 <__submore>:
 8023490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023494:	460c      	mov	r4, r1
 8023496:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802349c:	4299      	cmp	r1, r3
 802349e:	d11d      	bne.n	80234dc <__submore+0x4c>
 80234a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80234a4:	f7fd f974 	bl	8020790 <_malloc_r>
 80234a8:	b918      	cbnz	r0, 80234b2 <__submore+0x22>
 80234aa:	f04f 30ff 	mov.w	r0, #4294967295
 80234ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80234b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80234b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80234b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80234bc:	6360      	str	r0, [r4, #52]	; 0x34
 80234be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80234c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80234c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80234ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80234ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80234d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80234d6:	6020      	str	r0, [r4, #0]
 80234d8:	2000      	movs	r0, #0
 80234da:	e7e8      	b.n	80234ae <__submore+0x1e>
 80234dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80234de:	0077      	lsls	r7, r6, #1
 80234e0:	463a      	mov	r2, r7
 80234e2:	f7fe fefd 	bl	80222e0 <_realloc_r>
 80234e6:	4605      	mov	r5, r0
 80234e8:	2800      	cmp	r0, #0
 80234ea:	d0de      	beq.n	80234aa <__submore+0x1a>
 80234ec:	eb00 0806 	add.w	r8, r0, r6
 80234f0:	4601      	mov	r1, r0
 80234f2:	4632      	mov	r2, r6
 80234f4:	4640      	mov	r0, r8
 80234f6:	f7fd f8d5 	bl	80206a4 <memcpy>
 80234fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80234fe:	f8c4 8000 	str.w	r8, [r4]
 8023502:	e7e9      	b.n	80234d8 <__submore+0x48>

08023504 <_init>:
 8023504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023506:	bf00      	nop
 8023508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802350a:	bc08      	pop	{r3}
 802350c:	469e      	mov	lr, r3
 802350e:	4770      	bx	lr

08023510 <_fini>:
 8023510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023512:	bf00      	nop
 8023514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023516:	bc08      	pop	{r3}
 8023518:	469e      	mov	lr, r3
 802351a:	4770      	bx	lr
 802351c:	0000      	movs	r0, r0
	...

08023520 <__time_veneer>:
 8023520:	e51ff004 	ldr	pc, [pc, #-4]	; 8023524 <__time_veneer+0x4>
 8023524:	200005c0 	.word	0x200005c0
