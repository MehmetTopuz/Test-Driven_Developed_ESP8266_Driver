
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021998  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005bb8  08021b78  08021b78  00031b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027730  08027730  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08027730  08027730  00037730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027738  08027738  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08027738  08027738  00037738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08027748  08027748  00037748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08027758  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b38  2000033c  08027a94  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e74  08027a94  00040e74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00068541  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c0c8  00000000  00000000  000a88ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004280  00000000  00000000  000b4978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004060  00000000  00000000  000b8bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d83d  00000000  00000000  000bcc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c9ae  00000000  00000000  000ea495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001113ff  00000000  00000000  00116e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00228242  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000141c0  00000000  00000000  00228298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08021b58 	.word	0x08021b58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08021b58 	.word	0x08021b58

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000408 	.word	0x20000408

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01d f9fe 	bl	801e16c <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01d f956 	bl	801e16c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000e78 	.word	0x20000e78

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01d fd2d 	bl	801e9a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f003 f803 	bl	8003f58 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	08027758 	.word	0x08027758
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000e74 	.word	0x20000e74

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000e60 	.word	0x20000e60
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000e60 	.word	0x20000e60

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08024cd4 	.word	0x08024cd4
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08024ce4 	.word	0x08024ce4

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08024ce4 	.word	0x08024ce4

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08024cec 	.word	0x08024cec
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08024d04 	.word	0x08024d04
 8003904:	08024d0c 	.word	0x08024d0c

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 fa1e 	bl	8003d7c <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	20000498 	.word	0x20000498

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fa30 	bl	8003dfe <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	20000498 	.word	0x20000498

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 faa7 	bl	8003f12 <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000498 	.word	0x20000498

080039d4 <Wait_Response>:


Status Wait_Response(char* response, uint32_t timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <Wait_Response+0x74>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <Wait_Response+0x78>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <Wait_Response+0x7c>)
 80039f0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <Wait_Response+0x74>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <Wait_Response+0x80>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fa87 	bl	8003f12 <ringBuffer_lookFor>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <Wait_Response+0x46>
	{
		firstCall = 0;
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <Wait_Response+0x74>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <Wait_Response+0x7c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e012      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <Wait_Response+0x78>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4798      	blx	r3
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <Wait_Response+0x7c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d807      	bhi.n	8003a3e <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <Wait_Response+0x74>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <Wait_Response+0x7c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e000      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003a3e:	2305      	movs	r3, #5
	}

}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2000036c 	.word	0x2000036c
 8003a4c:	20000360 	.word	0x20000360
 8003a50:	20000370 	.word	0x20000370
 8003a54:	20000498 	.word	0x20000498

08003a58 <Connect_Wifi>:

Status Connect_Wifi(char* ssid, char* password)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b09e      	sub	sp, #120	; 0x78
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	static Status response_state = IDLE;

	static uint8_t commandCount = 0,firstCall = 1;


	switch(commandCount)
 8003a62:	4b9a      	ldr	r3, [pc, #616]	; (8003ccc <Connect_Wifi+0x274>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	f000 80c4 	beq.w	8003bf4 <Connect_Wifi+0x19c>
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	f300 8127 	bgt.w	8003cc0 <Connect_Wifi+0x268>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <Connect_Wifi+0x24>
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d05e      	beq.n	8003b38 <Connect_Wifi+0xe0>
 8003a7a:	e121      	b.n	8003cc0 <Connect_Wifi+0x268>
	{
	case 0:
		if(firstCall)
 8003a7c:	4b94      	ldr	r3, [pc, #592]	; (8003cd0 <Connect_Wifi+0x278>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <Connect_Wifi+0x38>
		{
			Send_AT_Command(AT_CWMODE_STATION);  // sending AT+CWMODE=1
 8003a84:	4893      	ldr	r0, [pc, #588]	; (8003cd4 <Connect_Wifi+0x27c>)
 8003a86:	f7ff ff6b 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003a8a:	4b91      	ldr	r3, [pc, #580]	; (8003cd0 <Connect_Wifi+0x278>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003a90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a94:	4890      	ldr	r0, [pc, #576]	; (8003cd8 <Connect_Wifi+0x280>)
 8003a96:	f7ff ff9d 	bl	80039d4 <Wait_Response>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b8f      	ldr	r3, [pc, #572]	; (8003cdc <Connect_Wifi+0x284>)
 8003aa0:	701a      	strb	r2, [r3, #0]

		if(Read_Response(AT_RESPONSE_ERROR))		// if there is an ERROR message in the buffer return CONNECTION_ERROR
 8003aa2:	488f      	ldr	r0, [pc, #572]	; (8003ce0 <Connect_Wifi+0x288>)
 8003aa4:	f7ff ff84 	bl	80039b0 <Read_Response>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <Connect_Wifi+0x70>
		{
			firstCall = 1;
 8003aae:	4b88      	ldr	r3, [pc, #544]	; (8003cd0 <Connect_Wifi+0x278>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003ab4:	4b85      	ldr	r3, [pc, #532]	; (8003ccc <Connect_Wifi+0x274>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003aba:	4b8a      	ldr	r3, [pc, #552]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f9f1 	bl	8003ea6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	e0fc      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		if(response_state == IDLE)
 8003ac8:	4b84      	ldr	r3, [pc, #528]	; (8003cdc <Connect_Wifi+0x284>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d101      	bne.n	8003ad4 <Connect_Wifi+0x7c>
		{
			return IDLE;
 8003ad0:	2305      	movs	r3, #5
 8003ad2:	e0f6      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == FOUND)
 8003ad4:	4b81      	ldr	r3, [pc, #516]	; (8003cdc <Connect_Wifi+0x284>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <Connect_Wifi+0xa4>
		{
			commandCount += 1;
 8003adc:	4b7b      	ldr	r3, [pc, #492]	; (8003ccc <Connect_Wifi+0x274>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b79      	ldr	r3, [pc, #484]	; (8003ccc <Connect_Wifi+0x274>)
 8003ae6:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003ae8:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 f9da 	bl	8003ea6 <ringBuffer_flush>
			firstCall = 1;
 8003af2:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <Connect_Wifi+0x278>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
			return FOUND;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e0e2      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == TIMEOUT_ERROR)
 8003afc:	4b77      	ldr	r3, [pc, #476]	; (8003cdc <Connect_Wifi+0x284>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d10c      	bne.n	8003b1e <Connect_Wifi+0xc6>
		{
			firstCall = 1;
 8003b04:	4b72      	ldr	r3, [pc, #456]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003b0a:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f9c9 	bl	8003ea6 <ringBuffer_flush>
			commandCount = 0;
 8003b14:	4b6d      	ldr	r3, [pc, #436]	; (8003ccc <Connect_Wifi+0x274>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
			return TIMEOUT_ERROR;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e0d1      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else
		{
			firstCall = 1;
 8003b1e:	4b6c      	ldr	r3, [pc, #432]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003b24:	4b69      	ldr	r3, [pc, #420]	; (8003ccc <Connect_Wifi+0x274>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003b2a:	4b6e      	ldr	r3, [pc, #440]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f9b9 	bl	8003ea6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003b34:	2304      	movs	r3, #4
 8003b36:	e0c4      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}


		break;
	case 1:
		if(firstCall)
 8003b38:	4b65      	ldr	r3, [pc, #404]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <Connect_Wifi+0xf4>
		{
			Send_AT_Command(AT_CWQAP);  // sending AT+CWQAP
 8003b40:	4869      	ldr	r0, [pc, #420]	; (8003ce8 <Connect_Wifi+0x290>)
 8003b42:	f7ff ff0d 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003b46:	4b62      	ldr	r3, [pc, #392]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b50:	4861      	ldr	r0, [pc, #388]	; (8003cd8 <Connect_Wifi+0x280>)
 8003b52:	f7ff ff3f 	bl	80039d4 <Wait_Response>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b60      	ldr	r3, [pc, #384]	; (8003cdc <Connect_Wifi+0x284>)
 8003b5c:	701a      	strb	r2, [r3, #0]
		if(Read_Response(AT_RESPONSE_ERROR))
 8003b5e:	4860      	ldr	r0, [pc, #384]	; (8003ce0 <Connect_Wifi+0x288>)
 8003b60:	f7ff ff26 	bl	80039b0 <Read_Response>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00c      	beq.n	8003b84 <Connect_Wifi+0x12c>
		{
			firstCall = 1;
 8003b6a:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003b70:	4b56      	ldr	r3, [pc, #344]	; (8003ccc <Connect_Wifi+0x274>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003b76:	4b5b      	ldr	r3, [pc, #364]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f993 	bl	8003ea6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003b80:	2304      	movs	r3, #4
 8003b82:	e09e      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		if(response_state == IDLE)
 8003b84:	4b55      	ldr	r3, [pc, #340]	; (8003cdc <Connect_Wifi+0x284>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d101      	bne.n	8003b90 <Connect_Wifi+0x138>
		{
			return IDLE;
 8003b8c:	2305      	movs	r3, #5
 8003b8e:	e098      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == FOUND)
 8003b90:	4b52      	ldr	r3, [pc, #328]	; (8003cdc <Connect_Wifi+0x284>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10f      	bne.n	8003bb8 <Connect_Wifi+0x160>
		{
			commandCount += 1;
 8003b98:	4b4c      	ldr	r3, [pc, #304]	; (8003ccc <Connect_Wifi+0x274>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <Connect_Wifi+0x274>)
 8003ba2:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003ba4:	4b4f      	ldr	r3, [pc, #316]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f97c 	bl	8003ea6 <ringBuffer_flush>
			firstCall = 1;
 8003bae:	4b48      	ldr	r3, [pc, #288]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
			return FOUND;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e084      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == TIMEOUT_ERROR)
 8003bb8:	4b48      	ldr	r3, [pc, #288]	; (8003cdc <Connect_Wifi+0x284>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d10c      	bne.n	8003bda <Connect_Wifi+0x182>
		{
			firstCall = 1;
 8003bc0:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003bc6:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <Connect_Wifi+0x274>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003bcc:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 f968 	bl	8003ea6 <ringBuffer_flush>
			return TIMEOUT_ERROR;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e073      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else
		{
			firstCall = 1;
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003be0:	4b3a      	ldr	r3, [pc, #232]	; (8003ccc <Connect_Wifi+0x274>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003be6:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f95b 	bl	8003ea6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	e066      	b.n	8003cc2 <Connect_Wifi+0x26a>

		break;

	case 2:
	{
		if(firstCall)
 8003bf4:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d010      	beq.n	8003c1e <Connect_Wifi+0x1c6>
		{
			char tx_buffer[100];

			sprintf(tx_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003bfc:	f107 000c 	add.w	r0, r7, #12
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a39      	ldr	r2, [pc, #228]	; (8003cec <Connect_Wifi+0x294>)
 8003c08:	4939      	ldr	r1, [pc, #228]	; (8003cf0 <Connect_Wifi+0x298>)
 8003c0a:	f01b fa41 	bl	801f090 <siprintf>

			Send_AT_Command(tx_buffer);  // sending AT+CWJAP="<SSID>","<password>"
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fea4 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003c18:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003c1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c22:	482d      	ldr	r0, [pc, #180]	; (8003cd8 <Connect_Wifi+0x280>)
 8003c24:	f7ff fed6 	bl	80039d4 <Wait_Response>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <Connect_Wifi+0x284>)
 8003c2e:	701a      	strb	r2, [r3, #0]
		if(Read_Response(AT_RESPONSE_ERROR))
 8003c30:	482b      	ldr	r0, [pc, #172]	; (8003ce0 <Connect_Wifi+0x288>)
 8003c32:	f7ff febd 	bl	80039b0 <Read_Response>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00c      	beq.n	8003c56 <Connect_Wifi+0x1fe>
		{
			firstCall = 1;
 8003c3c:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <Connect_Wifi+0x274>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 f92a 	bl	8003ea6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003c52:	2304      	movs	r3, #4
 8003c54:	e035      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		if(response_state == IDLE)
 8003c56:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <Connect_Wifi+0x284>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d101      	bne.n	8003c62 <Connect_Wifi+0x20a>
		{

			return IDLE;
 8003c5e:	2305      	movs	r3, #5
 8003c60:	e02f      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == FOUND)
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <Connect_Wifi+0x284>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <Connect_Wifi+0x22c>
		{
			commandCount = 0;
 8003c6a:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <Connect_Wifi+0x274>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f916 	bl	8003ea6 <ringBuffer_flush>
			firstCall = 1;
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
			return CONNECTION_OK;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e01e      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == TIMEOUT_ERROR)
 8003c84:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <Connect_Wifi+0x284>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d10c      	bne.n	8003ca6 <Connect_Wifi+0x24e>
		{
			firstCall = 1;
 8003c8c:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <Connect_Wifi+0x274>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 f902 	bl	8003ea6 <ringBuffer_flush>
			return TIMEOUT_ERROR;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e00d      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else
		{
			firstCall = 1;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <Connect_Wifi+0x278>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <Connect_Wifi+0x274>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f8f5 	bl	8003ea6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	e000      	b.n	8003cc2 <Connect_Wifi+0x26a>


		break;
	}

	default: return CONNECTION_ERROR;
 8003cc0:	2304      	movs	r3, #4
	}
	return IDLE;
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3770      	adds	r7, #112	; 0x70
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000374 	.word	0x20000374
 8003cd0:	20000010 	.word	0x20000010
 8003cd4:	08021b78 	.word	0x08021b78
 8003cd8:	08021b88 	.word	0x08021b88
 8003cdc:	20000011 	.word	0x20000011
 8003ce0:	08021b8c 	.word	0x08021b8c
 8003ce4:	20000498 	.word	0x20000498
 8003ce8:	08021b94 	.word	0x08021b94
 8003cec:	08021ba0 	.word	0x08021ba0
 8003cf0:	08021bac 	.word	0x08021bac

08003cf4 <Disconnect_Wifi>:

Status Disconnect_Wifi(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	static Status response_state = IDLE;
	static uint8_t firstCall = 1;

	if(firstCall)
 8003cf8:	4b1a      	ldr	r3, [pc, #104]	; (8003d64 <Disconnect_Wifi+0x70>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <Disconnect_Wifi+0x18>
	{
		Send_AT_Command(AT_CWQAP);  // sending AT+CWQAP
 8003d00:	4819      	ldr	r0, [pc, #100]	; (8003d68 <Disconnect_Wifi+0x74>)
 8003d02:	f7ff fe2d 	bl	8003960 <Send_AT_Command>
		firstCall = 0;
 8003d06:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <Disconnect_Wifi+0x70>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
	}

	response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d10:	4816      	ldr	r0, [pc, #88]	; (8003d6c <Disconnect_Wifi+0x78>)
 8003d12:	f7ff fe5f 	bl	80039d4 <Wait_Response>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <Disconnect_Wifi+0x7c>)
 8003d1c:	701a      	strb	r2, [r3, #0]

	if(Read_Response(AT_RESPONSE_ERROR))
 8003d1e:	4815      	ldr	r0, [pc, #84]	; (8003d74 <Disconnect_Wifi+0x80>)
 8003d20:	f7ff fe46 	bl	80039b0 <Read_Response>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <Disconnect_Wifi+0x4a>
	{
		firstCall = 1;
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <Disconnect_Wifi+0x70>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	701a      	strb	r2, [r3, #0]
		ringBuffer_flush(rx_buffer);
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <Disconnect_Wifi+0x84>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f8b6 	bl	8003ea6 <ringBuffer_flush>
		return CONNECTION_ERROR;
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	e00f      	b.n	8003d5e <Disconnect_Wifi+0x6a>
	}
	if(response_state == IDLE)
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <Disconnect_Wifi+0x7c>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b05      	cmp	r3, #5
 8003d44:	d101      	bne.n	8003d4a <Disconnect_Wifi+0x56>
		return IDLE;
 8003d46:	2305      	movs	r3, #5
 8003d48:	e009      	b.n	8003d5e <Disconnect_Wifi+0x6a>
	else
	{
		firstCall = 1;
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <Disconnect_Wifi+0x70>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	701a      	strb	r2, [r3, #0]
		ringBuffer_flush(rx_buffer);
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <Disconnect_Wifi+0x84>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f8a6 	bl	8003ea6 <ringBuffer_flush>
		return response_state;
 8003d5a:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <Disconnect_Wifi+0x7c>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
	}
	return response_state;

}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000012 	.word	0x20000012
 8003d68:	08021b94 	.word	0x08021b94
 8003d6c:	08021b88 	.word	0x08021b88
 8003d70:	20000013 	.word	0x20000013
 8003d74:	08021b8c 	.word	0x08021b8c
 8003d78:	20000498 	.word	0x20000498

08003d7c <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003d84:	2010      	movs	r0, #16
 8003d86:	f01a ffb1 	bl	801ecec <malloc>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e017      	b.n	8003dc8 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003daa:	2101      	movs	r1, #1
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f01a f9d5 	bl	801e15c <calloc>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f01a ff86 	bl	801ecfc <free>
		}
		free(buffer);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f01a ff83 	bl	801ecfc <free>
	}
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d00c      	beq.n	8003e32 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003e30:	e009      	b.n	8003e46 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d00d      	beq.n	8003e84 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	605a      	str	r2, [r3, #4]
		return data;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	e00a      	b.n	8003e9a <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	605a      	str	r2, [r3, #4]
		return data;
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68d8      	ldr	r0, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2100      	movs	r1, #0
 8003eba:	f01a ff35 	bl	801ed28 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	605a      	str	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	601a      	str	r2, [r3, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	e00a      	b.n	8003efa <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4413      	add	r3, r2
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff ff85 	bl	8003dfe <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	6838      	ldr	r0, [r7, #0]
 8003efc:	f7fc f99e 	bl	800023c <strlen>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d8ed      	bhi.n	8003ee4 <ringBuffer_pushArray+0x10>
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	6839      	ldr	r1, [r7, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f01b fe76 	bl	801fc14 <strstr>
 8003f28:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <ringBuffer_lookFor+0x22>
		return 1;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003f34:	2300      	movs	r3, #0

}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f5e:	f7fd f806 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f62:	f000 f81d 	bl	8003fa0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f66:	f000 f951 	bl	800420c <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003f6a:	f000 f891 	bl	8004090 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003f6e:	f000 f8ed 	bl	800414c <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003f72:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <main+0x44>)
 8003f74:	463b      	mov	r3, r7
 8003f76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f7a:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003f7e:	463b      	mov	r3, r7
 8003f80:	4619      	mov	r1, r3
 8003f82:	2002      	movs	r0, #2
 8003f84:	f003 f960 	bl	8007248 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003f88:	2120      	movs	r1, #32
 8003f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f8e:	f7fd fbeb 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003f92:	2064      	movs	r0, #100	; 0x64
 8003f94:	f7fd f85c 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003f98:	e7f6      	b.n	8003f88 <main+0x30>
 8003f9a:	bf00      	nop
 8003f9c:	08021bc4 	.word	0x08021bc4

08003fa0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b0a8      	sub	sp, #160	; 0xa0
 8003fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fa6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003faa:	2238      	movs	r2, #56	; 0x38
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f01a feba 	bl	801ed28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
 8003fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fc4:	463b      	mov	r3, r7
 8003fc6:	2254      	movs	r2, #84	; 0x54
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f01a feac 	bl	801ed28 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f7fd fc07 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fde:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fe0:	2340      	movs	r3, #64	; 0x40
 8003fe2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fea:	2302      	movs	r3, #2
 8003fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003ff6:	2355      	movs	r3, #85	; 0x55
 8003ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004002:	2302      	movs	r3, #2
 8004004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004008:	2302      	movs	r3, #2
 800400a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800400e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004012:	4618      	mov	r0, r3
 8004014:	f7fd fc9a 	bl	800194c <HAL_RCC_OscConfig>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	bf14      	ite	ne
 800401e:	2301      	movne	r3, #1
 8004020:	2300      	moveq	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8004028:	f000 f960 	bl	80042ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800402c:	230f      	movs	r3, #15
 800402e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004030:	2303      	movs	r3, #3
 8004032:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004034:	2300      	movs	r3, #0
 8004036:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004038:	2300      	movs	r3, #0
 800403a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800403c:	2300      	movs	r3, #0
 800403e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004040:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004044:	2104      	movs	r1, #4
 8004046:	4618      	mov	r0, r3
 8004048:	f7fd ff98 	bl	8001f7c <HAL_RCC_ClockConfig>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 800405c:	f000 f946 	bl	80042ec <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8004060:	2321      	movs	r3, #33	; 0x21
 8004062:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004064:	2300      	movs	r3, #0
 8004066:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800406c:	463b      	mov	r3, r7
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe f9a0 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8004084:	f000 f932 	bl	80042ec <Error_Handler>
  }
}
 8004088:	bf00      	nop
 800408a:	37a0      	adds	r7, #160	; 0xa0
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004096:	4a2c      	ldr	r2, [pc, #176]	; (8004148 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8004098:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800409a:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800409c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040a2:	4b28      	ldr	r3, [pc, #160]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80040a8:	4b26      	ldr	r3, [pc, #152]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80040ae:	4b25      	ldr	r3, [pc, #148]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80040b4:	4b23      	ldr	r3, [pc, #140]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040b6:	220c      	movs	r2, #12
 80040b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ba:	4b22      	ldr	r3, [pc, #136]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040c0:	4b20      	ldr	r3, [pc, #128]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80040c6:	4b1f      	ldr	r3, [pc, #124]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040cc:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80040d2:	481c      	ldr	r0, [pc, #112]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040d4:	f7fe fbba 	bl	800284c <HAL_UART_Init>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bf14      	ite	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	2300      	moveq	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80040e8:	f000 f900 	bl	80042ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040ec:	2100      	movs	r1, #0
 80040ee:	4815      	ldr	r0, [pc, #84]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040f0:	f7ff fb40 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bf14      	ite	ne
 80040fa:	2301      	movne	r3, #1
 80040fc:	2300      	moveq	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8004104:	f000 f8f2 	bl	80042ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004108:	2100      	movs	r1, #0
 800410a:	480e      	ldr	r0, [pc, #56]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800410c:	f7ff fb70 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8004120:	f000 f8e4 	bl	80042ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004124:	4807      	ldr	r0, [pc, #28]	; (8004144 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004126:	f7ff faec 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 800413a:	f000 f8d7 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000378 	.word	0x20000378
 8004148:	40008000 	.word	0x40008000

0800414c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004150:	4b2c      	ldr	r3, [pc, #176]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004152:	4a2d      	ldr	r2, [pc, #180]	; (8004208 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8004154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004156:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800415c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800415e:	4b29      	ldr	r3, [pc, #164]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004164:	4b27      	ldr	r3, [pc, #156]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004166:	2200      	movs	r2, #0
 8004168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800416a:	4b26      	ldr	r3, [pc, #152]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800416c:	2200      	movs	r2, #0
 800416e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004170:	4b24      	ldr	r3, [pc, #144]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004172:	220c      	movs	r2, #12
 8004174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004176:	4b23      	ldr	r3, [pc, #140]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004178:	2200      	movs	r2, #0
 800417a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800417e:	2200      	movs	r2, #0
 8004180:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004184:	2200      	movs	r2, #0
 8004186:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004188:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800418a:	2200      	movs	r2, #0
 800418c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004190:	2200      	movs	r2, #0
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004194:	481b      	ldr	r0, [pc, #108]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004196:	f7fe fb59 	bl	800284c <HAL_UART_Init>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80041aa:	f000 f89f 	bl	80042ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041ae:	2100      	movs	r1, #0
 80041b0:	4814      	ldr	r0, [pc, #80]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041b2:	f7ff fadf 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf14      	ite	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	2300      	moveq	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80041c6:	f000 f891 	bl	80042ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041ca:	2100      	movs	r1, #0
 80041cc:	480d      	ldr	r0, [pc, #52]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041ce:	f7ff fb0f 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf14      	ite	ne
 80041d8:	2301      	movne	r3, #1
 80041da:	2300      	moveq	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80041e2:	f000 f883 	bl	80042ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80041e6:	4807      	ldr	r0, [pc, #28]	; (8004204 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041e8:	f7ff fa8b 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bf14      	ite	ne
 80041f2:	2301      	movne	r3, #1
 80041f4:	2300      	moveq	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80041fc:	f000 f876 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000408 	.word	0x20000408
 8004208:	40013800 	.word	0x40013800

0800420c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004212:	f107 0314 	add.w	r3, r7, #20
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	609a      	str	r2, [r3, #8]
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004222:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004226:	4a2e      	ldr	r2, [pc, #184]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800422e:	4b2c      	ldr	r3, [pc, #176]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800423a:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004240:	f043 0320 	orr.w	r3, r3, #32
 8004244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004252:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004256:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004270:	f043 0302 	orr.w	r3, r3, #2
 8004274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004276:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004282:	2200      	movs	r2, #0
 8004284:	2120      	movs	r1, #32
 8004286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800428a:	f7fd fa55 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800428e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <_ZL12MX_GPIO_Initv+0xd8>)
 8004296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	4619      	mov	r1, r3
 80042a2:	4811      	ldr	r0, [pc, #68]	; (80042e8 <_ZL12MX_GPIO_Initv+0xdc>)
 80042a4:	f7fd f8c6 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80042a8:	2320      	movs	r3, #32
 80042aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ac:	2301      	movs	r3, #1
 80042ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b4:	2300      	movs	r3, #0
 80042b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4619      	mov	r1, r3
 80042be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042c2:	f7fd f8b7 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2100      	movs	r1, #0
 80042ca:	2028      	movs	r0, #40	; 0x28
 80042cc:	f7fc ffbd 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80042d0:	2028      	movs	r0, #40	; 0x28
 80042d2:	f7fc ffd4 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 80042d6:	bf00      	nop
 80042d8:	3728      	adds	r7, #40	; 0x28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000
 80042e4:	10110000 	.word	0x10110000
 80042e8:	48000800 	.word	0x48000800

080042ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042f0:	b672      	cpsid	i
}
 80042f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042f4:	e7fe      	b.n	80042f4 <Error_Handler+0x8>

080042f6 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 80042fe:	2032      	movs	r0, #50	; 0x32
 8004300:	f7ff fd3c 	bl	8003d7c <ringBuffer_init>
 8004304:	4602      	mov	r2, r0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	605a      	str	r2, [r3, #4]

	}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fd56 	bl	8003dd0 <ringBuffer_deInit>
	}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4618      	mov	r0, r3
 8004338:	f00e fc24 	bl	8012b84 <_ZN5UtestC1Ev>
 800433c:	4a03      	ldr	r2, [pc, #12]	; (800434c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	08025d2c 	.word	0x08025d2c

08004350 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	4a05      	ldr	r2, [pc, #20]	; (8004370 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4618      	mov	r0, r3
 8004362:	f00e fc1f 	bl	8012ba4 <_ZN5UtestD1Ev>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	08025d2c 	.word	0x08025d2c

08004374 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff ffe7 	bl	8004350 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004382:	2108      	movs	r1, #8
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f004 fc41 	bl	8008c0c <_ZdlPvj>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff ffbe 	bl	800432c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80043b0:	4a03      	ldr	r2, [pc, #12]	; (80043c0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	08025d0c 	.word	0x08025d0c

080043c4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	2224      	movs	r2, #36	; 0x24
 80043ce:	4906      	ldr	r1, [pc, #24]	; (80043e8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80043d0:	2008      	movs	r0, #8
 80043d2:	f004 fc07 	bl	8008be4 <_ZnwjPKci>
 80043d6:	4604      	mov	r4, r0
 80043d8:	4620      	mov	r0, r4
 80043da:	f7ff ffdb 	bl	8004394 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80043de:	4623      	mov	r3, r4
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd90      	pop	{r4, r7, pc}
 80043e8:	08021bcc 	.word	0x08021bcc

080043ec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f00c ffe2 	bl	80113c0 <_ZN10UtestShellC1Ev>
 80043fc:	4a03      	ldr	r2, [pc, #12]	; (800440c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	08025c60 	.word	0x08025c60

08004410 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004412:	b087      	sub	sp, #28
 8004414:	af04      	add	r7, sp, #16
 8004416:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004418:	f00e fb8a 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 800441c:	4604      	mov	r4, r0
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	3338      	adds	r3, #56	; 0x38
 8004422:	681d      	ldr	r5, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	461e      	mov	r6, r3
 800442c:	f00e fb90 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004430:	4603      	mov	r3, r0
 8004432:	9302      	str	r3, [sp, #8]
 8004434:	2327      	movs	r3, #39	; 0x27
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	4b2a      	ldr	r3, [pc, #168]	; (80044e4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 800443e:	4632      	mov	r2, r6
 8004440:	2132      	movs	r1, #50	; 0x32
 8004442:	4620      	mov	r0, r4
 8004444:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8004446:	f00e fb73 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 800444a:	4604      	mov	r4, r0
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	3320      	adds	r3, #32
 8004450:	681d      	ldr	r5, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf14      	ite	ne
 800445c:	2301      	movne	r3, #1
 800445e:	2300      	moveq	r3, #0
 8004460:	b2de      	uxtb	r6, r3
 8004462:	f00e fb75 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004466:	4603      	mov	r3, r0
 8004468:	9303      	str	r3, [sp, #12]
 800446a:	2328      	movs	r3, #40	; 0x28
 800446c:	9302      	str	r3, [sp, #8]
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	2300      	movs	r3, #0
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004478:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 800447a:	4631      	mov	r1, r6
 800447c:	4620      	mov	r0, r4
 800447e:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004480:	f00e fb56 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8004484:	4604      	mov	r4, r0
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	3338      	adds	r3, #56	; 0x38
 800448a:	681d      	ldr	r5, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461e      	mov	r6, r3
 8004494:	f00e fb5c 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004498:	4603      	mov	r3, r0
 800449a:	9302      	str	r3, [sp, #8]
 800449c:	2329      	movs	r3, #41	; 0x29
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 80044a6:	4632      	mov	r2, r6
 80044a8:	2100      	movs	r1, #0
 80044aa:	4620      	mov	r0, r4
 80044ac:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 80044ae:	f00e fb3f 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80044b2:	4604      	mov	r4, r0
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	3338      	adds	r3, #56	; 0x38
 80044b8:	681d      	ldr	r5, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	461e      	mov	r6, r3
 80044c2:	f00e fb45 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044c6:	4603      	mov	r3, r0
 80044c8:	9302      	str	r3, [sp, #8]
 80044ca:	232a      	movs	r3, #42	; 0x2a
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80044d4:	4632      	mov	r2, r6
 80044d6:	2100      	movs	r1, #0
 80044d8:	4620      	mov	r0, r4
 80044da:	47a8      	blx	r5

}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e4:	08021bcc 	.word	0x08021bcc
 80044e8:	08021be0 	.word	0x08021be0
 80044ec:	08021c08 	.word	0x08021c08
 80044f0:	08021c20 	.word	0x08021c20
 80044f4:	08021c28 	.word	0x08021c28
 80044f8:	08021c50 	.word	0x08021c50

080044fc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	605a      	str	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff0a 	bl	800432c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004518:	4a03      	ldr	r2, [pc, #12]	; (8004528 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	08025c40 	.word	0x08025c40

0800452c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	222e      	movs	r2, #46	; 0x2e
 8004536:	4906      	ldr	r1, [pc, #24]	; (8004550 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004538:	2008      	movs	r0, #8
 800453a:	f004 fb53 	bl	8008be4 <_ZnwjPKci>
 800453e:	4604      	mov	r4, r0
 8004540:	4620      	mov	r0, r4
 8004542:	f7ff ffdb 	bl	80044fc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8004546:	4623      	mov	r3, r4
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	bd90      	pop	{r4, r7, pc}
 8004550:	08021bcc 	.word	0x08021bcc

08004554 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4618      	mov	r0, r3
 8004560:	f00c ff2e 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8004564:	4a03      	ldr	r2, [pc, #12]	; (8004574 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	08025b94 	.word	0x08025b94

08004578 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457a:	b087      	sub	sp, #28
 800457c:	af04      	add	r7, sp, #16
 800457e:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2145      	movs	r1, #69	; 0x45
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fc39 	bl	8003dfe <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 800458c:	f00e fad0 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8004590:	4604      	mov	r4, r0
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	3338      	adds	r3, #56	; 0x38
 8004596:	681d      	ldr	r5, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	461e      	mov	r6, r3
 80045a2:	f00e fad5 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045a6:	4603      	mov	r3, r0
 80045a8:	9302      	str	r3, [sp, #8]
 80045aa:	2331      	movs	r3, #49	; 0x31
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 80045b4:	4632      	mov	r2, r6
 80045b6:	2145      	movs	r1, #69	; 0x45
 80045b8:	4620      	mov	r0, r4
 80045ba:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2110      	movs	r1, #16
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fc1b 	bl	8003dfe <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80045c8:	f00e fab2 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80045cc:	4604      	mov	r4, r0
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	3338      	adds	r3, #56	; 0x38
 80045d2:	681d      	ldr	r5, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	3301      	adds	r3, #1
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	461e      	mov	r6, r3
 80045e0:	f00e fab6 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045e4:	4603      	mov	r3, r0
 80045e6:	9302      	str	r3, [sp, #8]
 80045e8:	2334      	movs	r3, #52	; 0x34
 80045ea:	9301      	str	r3, [sp, #4]
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80045f2:	4632      	mov	r2, r6
 80045f4:	2110      	movs	r1, #16
 80045f6:	4620      	mov	r0, r4
 80045f8:	47a8      	blx	r5

}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004602:	bf00      	nop
 8004604:	08021bcc 	.word	0x08021bcc
 8004608:	08021c78 	.word	0x08021c78
 800460c:	08021ca8 	.word	0x08021ca8

08004610 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff fe80 	bl	800432c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800462c:	4a03      	ldr	r2, [pc, #12]	; (800463c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	08025b74 	.word	0x08025b74

08004640 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	2238      	movs	r2, #56	; 0x38
 800464a:	4906      	ldr	r1, [pc, #24]	; (8004664 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 800464c:	2008      	movs	r0, #8
 800464e:	f004 fac9 	bl	8008be4 <_ZnwjPKci>
 8004652:	4604      	mov	r4, r0
 8004654:	4620      	mov	r0, r4
 8004656:	f7ff ffdb 	bl	8004610 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800465a:	4623      	mov	r3, r4
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	bd90      	pop	{r4, r7, pc}
 8004664:	08021bcc 	.word	0x08021bcc

08004668 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4618      	mov	r0, r3
 8004674:	f00c fea4 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8004678:	4a03      	ldr	r2, [pc, #12]	; (8004688 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	08025ac8 	.word	0x08025ac8

0800468c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 800468c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468e:	b089      	sub	sp, #36	; 0x24
 8004690:	af04      	add	r7, sp, #16
 8004692:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	429a      	cmp	r2, r3
 80046ac:	bf0c      	ite	eq
 80046ae:	2301      	moveq	r3, #1
 80046b0:	2300      	movne	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4293      	cmp	r3, r2
 80046ba:	da0b      	bge.n	80046d4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fb99 	bl	8003dfe <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	e7e3      	b.n	800469c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	21ff      	movs	r1, #255	; 0xff
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fb8f 	bl	8003dfe <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80046e0:	f00e fa26 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80046e4:	4604      	mov	r4, r0
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	3338      	adds	r3, #56	; 0x38
 80046ea:	681d      	ldr	r5, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	461e      	mov	r6, r3
 80046f6:	f00e fa2b 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046fa:	4603      	mov	r3, r0
 80046fc:	9302      	str	r3, [sp, #8]
 80046fe:	2340      	movs	r3, #64	; 0x40
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	4b05      	ldr	r3, [pc, #20]	; (8004718 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004708:	4632      	mov	r2, r6
 800470a:	21ff      	movs	r1, #255	; 0xff
 800470c:	4620      	mov	r0, r4
 800470e:	47a8      	blx	r5
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004718:	08021bcc 	.word	0x08021bcc
 800471c:	08021cd8 	.word	0x08021cd8

08004720 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fdf8 	bl	800432c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800473c:	4a03      	ldr	r2, [pc, #12]	; (800474c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	08025aa8 	.word	0x08025aa8

08004750 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	2243      	movs	r2, #67	; 0x43
 800475a:	4906      	ldr	r1, [pc, #24]	; (8004774 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 800475c:	2008      	movs	r0, #8
 800475e:	f004 fa41 	bl	8008be4 <_ZnwjPKci>
 8004762:	4604      	mov	r4, r0
 8004764:	4620      	mov	r0, r4
 8004766:	f7ff ffdb 	bl	8004720 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800476a:	4623      	mov	r3, r4
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bd90      	pop	{r4, r7, pc}
 8004774:	08021bcc 	.word	0x08021bcc

08004778 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	f00c fe1c 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8004788:	4a03      	ldr	r2, [pc, #12]	; (8004798 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	080259fc 	.word	0x080259fc

0800479c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 800479c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479e:	b089      	sub	sp, #36	; 0x24
 80047a0:	af04      	add	r7, sp, #16
 80047a2:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	21ff      	movs	r1, #255	; 0xff
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fb27 	bl	8003dfe <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fb4c 	bl	8003e52 <ringBuffer_pop>
 80047ba:	4603      	mov	r3, r0
 80047bc:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 80047be:	f00e f9b7 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80047c2:	4604      	mov	r4, r0
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	3338      	adds	r3, #56	; 0x38
 80047c8:	681d      	ldr	r5, [r3, #0]
 80047ca:	7bfe      	ldrb	r6, [r7, #15]
 80047cc:	f00e f9c0 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047d0:	4603      	mov	r3, r0
 80047d2:	9302      	str	r3, [sp, #8]
 80047d4:	2348      	movs	r3, #72	; 0x48
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80047de:	4632      	mov	r2, r6
 80047e0:	21ff      	movs	r1, #255	; 0xff
 80047e2:	4620      	mov	r0, r4
 80047e4:	47a8      	blx	r5

}
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ee:	bf00      	nop
 80047f0:	08021bcc 	.word	0x08021bcc
 80047f4:	08021d08 	.word	0x08021d08

080047f8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	605a      	str	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fd8c 	bl	800432c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004814:	4a03      	ldr	r2, [pc, #12]	; (8004824 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	080259dc 	.word	0x080259dc

08004828 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	224c      	movs	r2, #76	; 0x4c
 8004832:	4906      	ldr	r1, [pc, #24]	; (800484c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004834:	2008      	movs	r0, #8
 8004836:	f004 f9d5 	bl	8008be4 <_ZnwjPKci>
 800483a:	4604      	mov	r4, r0
 800483c:	4620      	mov	r0, r4
 800483e:	f7ff ffdb 	bl	80047f8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004842:	4623      	mov	r3, r4
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	bd90      	pop	{r4, r7, pc}
 800484c:	08021bcc 	.word	0x08021bcc

08004850 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4618      	mov	r0, r3
 800485c:	f00c fdb0 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8004860:	4a03      	ldr	r2, [pc, #12]	; (8004870 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	08025930 	.word	0x08025930

08004874 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af04      	add	r7, sp, #16
 800487a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	21aa      	movs	r1, #170	; 0xaa
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fab9 	bl	8003dfe <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	429a      	cmp	r2, r3
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4293      	cmp	r3, r2
 80048b2:	da0a      	bge.n	80048ca <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff faca 	bl	8003e52 <ringBuffer_pop>
 80048be:	4603      	mov	r3, r0
 80048c0:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3301      	adds	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e7e4      	b.n	8004894 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff fabf 	bl	8003e52 <ringBuffer_pop>
 80048d4:	4603      	mov	r3, r0
 80048d6:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80048d8:	f00e f92a 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80048dc:	4604      	mov	r4, r0
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	3338      	adds	r3, #56	; 0x38
 80048e2:	681d      	ldr	r5, [r3, #0]
 80048e4:	7afe      	ldrb	r6, [r7, #11]
 80048e6:	f00e f933 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048ea:	4603      	mov	r3, r0
 80048ec:	9302      	str	r3, [sp, #8]
 80048ee:	2359      	movs	r3, #89	; 0x59
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80048f8:	4632      	mov	r2, r6
 80048fa:	21aa      	movs	r1, #170	; 0xaa
 80048fc:	4620      	mov	r0, r4
 80048fe:	47a8      	blx	r5
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004908:	08021bcc 	.word	0x08021bcc
 800490c:	08021d28 	.word	0x08021d28

08004910 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	605a      	str	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fd00 	bl	800432c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800492c:	4a03      	ldr	r2, [pc, #12]	; (800493c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	08025910 	.word	0x08025910

08004940 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	225c      	movs	r2, #92	; 0x5c
 800494a:	4906      	ldr	r1, [pc, #24]	; (8004964 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 800494c:	2008      	movs	r0, #8
 800494e:	f004 f949 	bl	8008be4 <_ZnwjPKci>
 8004952:	4604      	mov	r4, r0
 8004954:	4620      	mov	r0, r4
 8004956:	f7ff ffdb 	bl	8004910 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 800495a:	4623      	mov	r3, r4
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bd90      	pop	{r4, r7, pc}
 8004964:	08021bcc 	.word	0x08021bcc

08004968 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	f00c fd24 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8004978:	4a03      	ldr	r2, [pc, #12]	; (8004988 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	08025864 	.word	0x08025864

0800498c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 800498c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498e:	b089      	sub	sp, #36	; 0x24
 8004990:	af04      	add	r7, sp, #16
 8004992:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d20b      	bcs.n	80049bc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fa25 	bl	8003dfe <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3301      	adds	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	e7ed      	b.n	8004998 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 80049bc:	f00e f8b8 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80049c0:	4604      	mov	r4, r0
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	3338      	adds	r3, #56	; 0x38
 80049c6:	681d      	ldr	r5, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	4413      	add	r3, r2
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	461e      	mov	r6, r3
 80049dc:	f00e f8b8 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049e0:	4603      	mov	r3, r0
 80049e2:	9302      	str	r3, [sp, #8]
 80049e4:	2363      	movs	r3, #99	; 0x63
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 80049ee:	4632      	mov	r2, r6
 80049f0:	2131      	movs	r1, #49	; 0x31
 80049f2:	4620      	mov	r0, r4
 80049f4:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fa53 	bl	8003ea6 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004a00:	f00e f896 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8004a04:	4604      	mov	r4, r0
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	3338      	adds	r3, #56	; 0x38
 8004a0a:	681d      	ldr	r5, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	4413      	add	r3, r2
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	461e      	mov	r6, r3
 8004a20:	f00e f896 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a24:	4603      	mov	r3, r0
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	2367      	movs	r3, #103	; 0x67
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004a32:	4632      	mov	r2, r6
 8004a34:	2100      	movs	r1, #0
 8004a36:	4620      	mov	r0, r4
 8004a38:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004a3a:	f00e f879 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8004a3e:	4604      	mov	r4, r0
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	3338      	adds	r3, #56	; 0x38
 8004a44:	681d      	ldr	r5, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	4413      	add	r3, r2
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	461e      	mov	r6, r3
 8004a5a:	f00e f879 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	9302      	str	r3, [sp, #8]
 8004a62:	2368      	movs	r3, #104	; 0x68
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004a6c:	4632      	mov	r2, r6
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4620      	mov	r0, r4
 8004a72:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004a74:	bf00      	nop
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7c:	08021bcc 	.word	0x08021bcc
 8004a80:	08021d48 	.word	0x08021d48
 8004a84:	08021d84 	.word	0x08021d84
 8004a88:	08021dc0 	.word	0x08021dc0

08004a8c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fc42 	bl	800432c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004aa8:	4a03      	ldr	r2, [pc, #12]	; (8004ab8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	08025844 	.word	0x08025844

08004abc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004abc:	b590      	push	{r4, r7, lr}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	2271      	movs	r2, #113	; 0x71
 8004ac6:	4906      	ldr	r1, [pc, #24]	; (8004ae0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004ac8:	2008      	movs	r0, #8
 8004aca:	f004 f88b 	bl	8008be4 <_ZnwjPKci>
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f7ff ffdb 	bl	8004a8c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd90      	pop	{r4, r7, pc}
 8004ae0:	08021bcc 	.word	0x08021bcc

08004ae4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f00c fc66 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8004af4:	4a03      	ldr	r2, [pc, #12]	; (8004b04 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	08025798 	.word	0x08025798

08004b08 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af04      	add	r7, sp, #16
 8004b0e:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	490e      	ldr	r1, [pc, #56]	; (8004b50 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff f9dc 	bl	8003ed4 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004b1c:	f00e f808 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8004b20:	4604      	mov	r4, r0
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	3324      	adds	r3, #36	; 0x24
 8004b26:	681d      	ldr	r5, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	68de      	ldr	r6, [r3, #12]
 8004b2e:	f00e f80f 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b32:	4603      	mov	r3, r0
 8004b34:	9302      	str	r3, [sp, #8]
 8004b36:	2375      	movs	r3, #117	; 0x75
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	4632      	mov	r2, r6
 8004b42:	4903      	ldr	r1, [pc, #12]	; (8004b50 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004b44:	4620      	mov	r0, r4
 8004b46:	47a8      	blx	r5
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b50:	08021df8 	.word	0x08021df8
 8004b54:	08021bcc 	.word	0x08021bcc

08004b58 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fbdc 	bl	800432c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004b74:	4a03      	ldr	r2, [pc, #12]	; (8004b84 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	08025778 	.word	0x08025778

08004b88 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	2278      	movs	r2, #120	; 0x78
 8004b92:	4906      	ldr	r1, [pc, #24]	; (8004bac <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004b94:	2008      	movs	r0, #8
 8004b96:	f004 f825 	bl	8008be4 <_ZnwjPKci>
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f7ff ffdb 	bl	8004b58 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd90      	pop	{r4, r7, pc}
 8004bac:	08021bcc 	.word	0x08021bcc

08004bb0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f00c fc00 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8004bc0:	4a03      	ldr	r2, [pc, #12]	; (8004bd0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	080256cc 	.word	0x080256cc

08004bd4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd8:	b08a      	sub	sp, #40	; 0x28
 8004bda:	af04      	add	r7, sp, #16
 8004bdc:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	494e      	ldr	r1, [pc, #312]	; (8004d1c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff f975 	bl	8003ed4 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004bea:	f00d ffa1 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8004bee:	4604      	mov	r4, r0
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	3324      	adds	r3, #36	; 0x24
 8004bf4:	681d      	ldr	r5, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	68de      	ldr	r6, [r3, #12]
 8004bfc:	f00d ffa8 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c00:	4603      	mov	r3, r0
 8004c02:	9302      	str	r3, [sp, #8]
 8004c04:	237c      	movs	r3, #124	; 0x7c
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	4b45      	ldr	r3, [pc, #276]	; (8004d20 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4632      	mov	r2, r6
 8004c10:	4942      	ldr	r1, [pc, #264]	; (8004d1c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004c12:	4620      	mov	r0, r4
 8004c14:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4942      	ldr	r1, [pc, #264]	; (8004d24 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff f978 	bl	8003f12 <ringBuffer_lookFor>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d05c      	beq.n	8004cec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	493b      	ldr	r1, [pc, #236]	; (8004d24 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff f96a 	bl	8003f12 <ringBuffer_lookFor>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4937      	ldr	r1, [pc, #220]	; (8004d24 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff f963 	bl	8003f12 <ringBuffer_lookFor>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	429c      	cmp	r4, r3
 8004c50:	bf14      	ite	ne
 8004c52:	2301      	movne	r3, #1
 8004c54:	2300      	moveq	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004c5c:	f00d ff68 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8004c60:	6803      	ldr	r3, [r0, #0]
 8004c62:	3370      	adds	r3, #112	; 0x70
 8004c64:	681c      	ldr	r4, [r3, #0]
 8004c66:	237d      	movs	r3, #125	; 0x7d
 8004c68:	4a2d      	ldr	r2, [pc, #180]	; (8004d20 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004c6a:	492f      	ldr	r1, [pc, #188]	; (8004d28 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004c6c:	47a0      	blx	r4
 8004c6e:	f00d ff5f 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8004c72:	4604      	mov	r4, r0
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	3358      	adds	r3, #88	; 0x58
 8004c78:	681d      	ldr	r5, [r3, #0]
 8004c7a:	f107 0308 	add.w	r3, r7, #8
 8004c7e:	2101      	movs	r1, #1
 8004c80:	4618      	mov	r0, r3
 8004c82:	f007 f9f1 	bl	800c068 <_Z10StringFromi>
 8004c86:	f107 0308 	add.w	r3, r7, #8
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f006 fef8 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8004c90:	4606      	mov	r6, r0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	4923      	ldr	r1, [pc, #140]	; (8004d24 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff f93a 	bl	8003f12 <ringBuffer_lookFor>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	f107 0310 	add.w	r3, r7, #16
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f007 fc58 	bl	800c55c <_Z10StringFromm>
 8004cac:	f107 0310 	add.w	r3, r7, #16
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f006 fee5 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8004cb6:	4680      	mov	r8, r0
 8004cb8:	f00d ff4a 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	9303      	str	r3, [sp, #12]
 8004cc0:	237d      	movs	r3, #125	; 0x7d
 8004cc2:	9302      	str	r3, [sp, #8]
 8004cc4:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	4643      	mov	r3, r8
 8004cce:	4632      	mov	r2, r6
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	47a8      	blx	r5
 8004cd6:	f107 0310 	add.w	r3, r7, #16
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f006 fefd 	bl	800bada <_ZN12SimpleStringD1Ev>
 8004ce0:	f107 0308 	add.w	r3, r7, #8
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f006 fef8 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8004cea:	e012      	b.n	8004d12 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004cec:	f00d ff20 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	3338      	adds	r3, #56	; 0x38
 8004cf6:	681d      	ldr	r5, [r3, #0]
 8004cf8:	f00d ff2a 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	9302      	str	r3, [sp, #8]
 8004d00:	237d      	movs	r3, #125	; 0x7d
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4620      	mov	r0, r4
 8004d10:	47a8      	blx	r5
}
 8004d12:	bf00      	nop
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d1c:	08021e00 	.word	0x08021e00
 8004d20:	08021bcc 	.word	0x08021bcc
 8004d24:	08021e0c 	.word	0x08021e0c
 8004d28:	08021e14 	.word	0x08021e14

08004d2c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	605a      	str	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff faf2 	bl	800432c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004d48:	4a03      	ldr	r2, [pc, #12]	; (8004d58 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4618      	mov	r0, r3
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	080256ac 	.word	0x080256ac

08004d5c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004d5c:	b590      	push	{r4, r7, lr}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	2280      	movs	r2, #128	; 0x80
 8004d66:	4906      	ldr	r1, [pc, #24]	; (8004d80 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004d68:	2008      	movs	r0, #8
 8004d6a:	f003 ff3b 	bl	8008be4 <_ZnwjPKci>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff ffdb 	bl	8004d2c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004d76:	4623      	mov	r3, r4
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd90      	pop	{r4, r7, pc}
 8004d80:	08021bcc 	.word	0x08021bcc

08004d84 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f00c fb16 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8004d94:	4a03      	ldr	r2, [pc, #12]	; (8004da4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	08025600 	.word	0x08025600

08004da8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af04      	add	r7, sp, #16
 8004dae:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004db0:	f00d febe 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8004db4:	4604      	mov	r4, r0
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	3338      	adds	r3, #56	; 0x38
 8004dba:	681d      	ldr	r5, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff f8bc 	bl	8003f3e <ringBuffer_capacity>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	461e      	mov	r6, r3
 8004dca:	f00d fec1 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	9302      	str	r3, [sp, #8]
 8004dd2:	2383      	movs	r3, #131	; 0x83
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004ddc:	4632      	mov	r2, r6
 8004dde:	2132      	movs	r1, #50	; 0x32
 8004de0:	4620      	mov	r0, r4
 8004de2:	47a8      	blx	r5

}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dec:	08021bcc 	.word	0x08021bcc
 8004df0:	08021eb8 	.word	0x08021eb8

08004df4 <_Z18UART_Transmit_FakePh>:


void UART_Transmit_Fake(uint8_t* data)
{
 8004df4:	b5b0      	push	{r4, r5, r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
//	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004dfc:	f107 0308 	add.w	r3, r7, #8
 8004e00:	491d      	ldr	r1, [pc, #116]	; (8004e78 <_Z18UART_Transmit_FakePh+0x84>)
 8004e02:	4618      	mov	r0, r3
 8004e04:	f006 fab1 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8004e08:	f107 0308 	add.w	r3, r7, #8
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f004 fb84 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e14:	4604      	mov	r4, r0
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	3318      	adds	r3, #24
 8004e1a:	681d      	ldr	r5, [r3, #0]
 8004e1c:	f107 0310 	add.w	r3, r7, #16
 8004e20:	4916      	ldr	r1, [pc, #88]	; (8004e7c <_Z18UART_Transmit_FakePh+0x88>)
 8004e22:	4618      	mov	r0, r3
 8004e24:	f006 faa1 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8004e28:	f107 0310 	add.w	r3, r7, #16
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4620      	mov	r0, r4
 8004e30:	47a8      	blx	r5
 8004e32:	4604      	mov	r4, r0
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	333c      	adds	r3, #60	; 0x3c
 8004e38:	681d      	ldr	r5, [r3, #0]
 8004e3a:	f107 0318 	add.w	r3, r7, #24
 8004e3e:	4910      	ldr	r1, [pc, #64]	; (8004e80 <_Z18UART_Transmit_FakePh+0x8c>)
 8004e40:	4618      	mov	r0, r3
 8004e42:	f006 fa92 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8004e46:	f107 0318 	add.w	r3, r7, #24
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4620      	mov	r0, r4
 8004e50:	47a8      	blx	r5
 8004e52:	f107 0318 	add.w	r3, r7, #24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f006 fe3f 	bl	800bada <_ZN12SimpleStringD1Ev>
 8004e5c:	f107 0310 	add.w	r3, r7, #16
 8004e60:	4618      	mov	r0, r3
 8004e62:	f006 fe3a 	bl	800bada <_ZN12SimpleStringD1Ev>
 8004e66:	f107 0308 	add.w	r3, r7, #8
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f006 fe35 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8004e70:	bf00      	nop
 8004e72:	3720      	adds	r7, #32
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bdb0      	pop	{r4, r5, r7, pc}
 8004e78:	08021ef0 	.word	0x08021ef0
 8004e7c:	08021ef4 	.word	0x08021ef4
 8004e80:	08021f08 	.word	0x08021f08

08004e84 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004e84:	b5b0      	push	{r4, r5, r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	4916      	ldr	r1, [pc, #88]	; (8004ee8 <_Z17UART_Receive_Fakev+0x64>)
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f006 fa6b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8004e94:	463b      	mov	r3, r7
 8004e96:	2100      	movs	r1, #0
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f004 fb3f 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	681d      	ldr	r5, [r3, #0]
 8004ea6:	f107 0308 	add.w	r3, r7, #8
 8004eaa:	4910      	ldr	r1, [pc, #64]	; (8004eec <_Z17UART_Receive_Fakev+0x68>)
 8004eac:	4618      	mov	r0, r3
 8004eae:	f006 fa5c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8004eb2:	f107 0308 	add.w	r3, r7, #8
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4620      	mov	r0, r4
 8004eba:	47a8      	blx	r5
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	3264      	adds	r2, #100	; 0x64
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	4790      	blx	r2
 8004ec8:	4603      	mov	r3, r0
 8004eca:	b2dc      	uxtb	r4, r3
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f006 fe02 	bl	800bada <_ZN12SimpleStringD1Ev>
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f006 fdfe 	bl	800bada <_ZN12SimpleStringD1Ev>
 8004ede:	4623      	mov	r3, r4
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ee8:	08021ef0 	.word	0x08021ef0
 8004eec:	08021f10 	.word	0x08021f10

08004ef0 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <_Z12getTick_Fakev+0x30>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d103      	bne.n	8004f06 <_Z12getTick_Fakev+0x16>
		time = 0;
 8004efe:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <_Z12getTick_Fakev+0x30>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e004      	b.n	8004f10 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <_Z12getTick_Fakev+0x30>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	4a04      	ldr	r2, [pc, #16]	; (8004f20 <_Z12getTick_Fakev+0x30>)
 8004f0e:	6013      	str	r3, [r2, #0]
	return time;
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <_Z12getTick_Fakev+0x30>)
 8004f12:	681b      	ldr	r3, [r3, #0]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	200005bc 	.word	0x200005bc

08004f24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004f2c:	2364      	movs	r3, #100	; 0x64
 8004f2e:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004f30:	4904      	ldr	r1, [pc, #16]	; (8004f44 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004f32:	4805      	ldr	r0, [pc, #20]	; (8004f48 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004f34:	f7fe fce8 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	08004ef1 	.word	0x08004ef1
 8004f44:	08004e85 	.word	0x08004e85
 8004f48:	08004df5 	.word	0x08004df5

08004f4c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8004f54:	f107 0308 	add.w	r3, r7, #8
 8004f58:	4917      	ldr	r1, [pc, #92]	; (8004fb8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f006 fa05 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8004f60:	f107 0308 	add.w	r3, r7, #8
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f004 fad8 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	3294      	adds	r2, #148	; 0x94
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	4790      	blx	r2
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f006 fdac 	bl	800bada <_ZN12SimpleStringD1Ev>
		mock().clear();
 8004f82:	f107 0310 	add.w	r3, r7, #16
 8004f86:	490c      	ldr	r1, [pc, #48]	; (8004fb8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f006 f9ee 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8004f8e:	f107 0310 	add.w	r3, r7, #16
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f004 fac1 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	329c      	adds	r2, #156	; 0x9c
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	4790      	blx	r2
 8004fa6:	f107 0310 	add.w	r3, r7, #16
 8004faa:	4618      	mov	r0, r3
 8004fac:	f006 fd95 	bl	800bada <_ZN12SimpleStringD1Ev>
	}
 8004fb0:	bf00      	nop
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	08021ef0 	.word	0x08021ef0

08004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f00d fddc 	bl	8012b84 <_ZN5UtestC1Ev>
 8004fcc:	4a03      	ldr	r2, [pc, #12]	; (8004fdc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	080255e0 	.word	0x080255e0

08004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	4a05      	ldr	r2, [pc, #20]	; (8005000 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f00d fdd7 	bl	8012ba4 <_ZN5UtestD1Ev>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	080255e0 	.word	0x080255e0

08005004 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff ffe7 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005012:	2104      	movs	r1, #4
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f003 fdf9 	bl	8008c0c <_ZdlPvj>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff ffc4 	bl	8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005034:	4a03      	ldr	r2, [pc, #12]	; (8005044 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	080255c0 	.word	0x080255c0

08005048 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	22b8      	movs	r2, #184	; 0xb8
 8005052:	4906      	ldr	r1, [pc, #24]	; (800506c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8005054:	2004      	movs	r0, #4
 8005056:	f003 fdc5 	bl	8008be4 <_ZnwjPKci>
 800505a:	4604      	mov	r4, r0
 800505c:	4620      	mov	r0, r4
 800505e:	f7ff ffe1 	bl	8005024 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8005062:	4623      	mov	r3, r4
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	bd90      	pop	{r4, r7, pc}
 800506c:	08021bcc 	.word	0x08021bcc

08005070 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4618      	mov	r0, r3
 800507c:	f00c f9a0 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8005080:	4a03      	ldr	r2, [pc, #12]	; (8005090 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	08025514 	.word	0x08025514

08005094 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8005094:	b5b0      	push	{r4, r5, r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af04      	add	r7, sp, #16
 800509a:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 800509c:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 800509e:	4a11      	ldr	r2, [pc, #68]	; (80050e4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 80050a0:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 80050a2:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	2364      	movs	r3, #100	; 0x64
 80050a8:	4a0f      	ldr	r2, [pc, #60]	; (80050e8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 80050aa:	4910      	ldr	r1, [pc, #64]	; (80050ec <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 80050ac:	f7fe fc2c 	bl	8003908 <ESP_Init>
 80050b0:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 80050b2:	f00d fd3d 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80050b6:	4604      	mov	r4, r0
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	3338      	adds	r3, #56	; 0x38
 80050bc:	681d      	ldr	r5, [r3, #0]
 80050be:	f00d fd47 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80050c2:	4603      	mov	r3, r0
 80050c4:	9302      	str	r3, [sp, #8]
 80050c6:	23c6      	movs	r3, #198	; 0xc6
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	2101      	movs	r1, #1
 80050d4:	4620      	mov	r0, r4
 80050d6:	47a8      	blx	r5

}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bdb0      	pop	{r4, r5, r7, pc}
 80050e0:	200005c0 	.word	0x200005c0
 80050e4:	08004df5 	.word	0x08004df5
 80050e8:	08004ef1 	.word	0x08004ef1
 80050ec:	08004e85 	.word	0x08004e85
 80050f0:	08021bcc 	.word	0x08021bcc
 80050f4:	08021f24 	.word	0x08021f24

080050f8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff ff5a 	bl	8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005108:	4a03      	ldr	r2, [pc, #12]	; (8005118 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	080254f4 	.word	0x080254f4

0800511c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	22ca      	movs	r2, #202	; 0xca
 8005126:	4906      	ldr	r1, [pc, #24]	; (8005140 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8005128:	2004      	movs	r0, #4
 800512a:	f003 fd5b 	bl	8008be4 <_ZnwjPKci>
 800512e:	4604      	mov	r4, r0
 8005130:	4620      	mov	r0, r4
 8005132:	f7ff ffe1 	bl	80050f8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8005136:	4623      	mov	r3, r4
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	bd90      	pop	{r4, r7, pc}
 8005140:	08021bcc 	.word	0x08021bcc

08005144 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	f00c f936 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8005154:	4a03      	ldr	r2, [pc, #12]	; (8005164 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	08025448 	.word	0x08025448

08005168 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8005168:	b5b0      	push	{r4, r5, r7, lr}
 800516a:	b08e      	sub	sp, #56	; 0x38
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");
 8005170:	f107 0308 	add.w	r3, r7, #8
 8005174:	493d      	ldr	r1, [pc, #244]	; (800526c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8005176:	4618      	mov	r0, r3
 8005178:	f006 f8f7 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800517c:	f107 0308 	add.w	r3, r7, #8
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f004 f9ca 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005188:	4604      	mov	r4, r0
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	330c      	adds	r3, #12
 800518e:	681d      	ldr	r5, [r3, #0]
 8005190:	f107 0310 	add.w	r3, r7, #16
 8005194:	4936      	ldr	r1, [pc, #216]	; (8005270 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8005196:	4618      	mov	r0, r3
 8005198:	f006 f8e7 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800519c:	f107 0310 	add.w	r3, r7, #16
 80051a0:	4619      	mov	r1, r3
 80051a2:	4620      	mov	r0, r4
 80051a4:	47a8      	blx	r5
 80051a6:	4604      	mov	r4, r0
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	334c      	adds	r3, #76	; 0x4c
 80051ac:	681d      	ldr	r5, [r3, #0]
 80051ae:	f107 0318 	add.w	r3, r7, #24
 80051b2:	4930      	ldr	r1, [pc, #192]	; (8005274 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 80051b4:	4618      	mov	r0, r3
 80051b6:	f006 f8d8 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80051ba:	f107 0318 	add.w	r3, r7, #24
 80051be:	4a2e      	ldr	r2, [pc, #184]	; (8005278 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80051c0:	4619      	mov	r1, r3
 80051c2:	4620      	mov	r0, r4
 80051c4:	47a8      	blx	r5
 80051c6:	f107 0318 	add.w	r3, r7, #24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f006 fc85 	bl	800bada <_ZN12SimpleStringD1Ev>
 80051d0:	f107 0310 	add.w	r3, r7, #16
 80051d4:	4618      	mov	r0, r3
 80051d6:	f006 fc80 	bl	800bada <_ZN12SimpleStringD1Ev>
 80051da:	f107 0308 	add.w	r3, r7, #8
 80051de:	4618      	mov	r0, r3
 80051e0:	f006 fc7b 	bl	800bada <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 80051e4:	f107 0320 	add.w	r3, r7, #32
 80051e8:	4920      	ldr	r1, [pc, #128]	; (800526c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80051ea:	4618      	mov	r0, r3
 80051ec:	f006 f8bd 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80051f0:	f107 0320 	add.w	r3, r7, #32
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f004 f990 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80051fc:	4604      	mov	r4, r0
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	681d      	ldr	r5, [r3, #0]
 8005204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005208:	4919      	ldr	r1, [pc, #100]	; (8005270 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 800520a:	4618      	mov	r0, r3
 800520c:	f006 f8ad 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005214:	4619      	mov	r1, r3
 8005216:	4620      	mov	r0, r4
 8005218:	47a8      	blx	r5
 800521a:	4604      	mov	r4, r0
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	334c      	adds	r3, #76	; 0x4c
 8005220:	681d      	ldr	r5, [r3, #0]
 8005222:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005226:	4913      	ldr	r1, [pc, #76]	; (8005274 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8005228:	4618      	mov	r0, r3
 800522a:	f006 f89e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800522e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005232:	4a12      	ldr	r2, [pc, #72]	; (800527c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005234:	4619      	mov	r1, r3
 8005236:	4620      	mov	r0, r4
 8005238:	47a8      	blx	r5
 800523a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800523e:	4618      	mov	r0, r3
 8005240:	f006 fc4b 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005248:	4618      	mov	r0, r3
 800524a:	f006 fc46 	bl	800bada <_ZN12SimpleStringD1Ev>
 800524e:	f107 0320 	add.w	r3, r7, #32
 8005252:	4618      	mov	r0, r3
 8005254:	f006 fc41 	bl	800bada <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 8005258:	4807      	ldr	r0, [pc, #28]	; (8005278 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 800525a:	f7fe fb81 	bl	8003960 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 800525e:	4807      	ldr	r0, [pc, #28]	; (800527c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005260:	f7fe fb7e 	bl	8003960 <Send_AT_Command>



}
 8005264:	bf00      	nop
 8005266:	3738      	adds	r7, #56	; 0x38
 8005268:	46bd      	mov	sp, r7
 800526a:	bdb0      	pop	{r4, r5, r7, pc}
 800526c:	08021ef0 	.word	0x08021ef0
 8005270:	08021ef4 	.word	0x08021ef4
 8005274:	08021f08 	.word	0x08021f08
 8005278:	08021df8 	.word	0x08021df8
 800527c:	08021f44 	.word	0x08021f44

08005280 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff fe96 	bl	8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005290:	4a03      	ldr	r2, [pc, #12]	; (80052a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	08025428 	.word	0x08025428

080052a4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 80052a4:	b590      	push	{r4, r7, lr}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	22d6      	movs	r2, #214	; 0xd6
 80052ae:	4906      	ldr	r1, [pc, #24]	; (80052c8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 80052b0:	2004      	movs	r0, #4
 80052b2:	f003 fc97 	bl	8008be4 <_ZnwjPKci>
 80052b6:	4604      	mov	r4, r0
 80052b8:	4620      	mov	r0, r4
 80052ba:	f7ff ffe1 	bl	8005280 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 80052be:	4623      	mov	r3, r4
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd90      	pop	{r4, r7, pc}
 80052c8:	08021bcc 	.word	0x08021bcc

080052cc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f00c f872 	bl	80113c0 <_ZN10UtestShellC1Ev>
 80052dc:	4a03      	ldr	r2, [pc, #12]	; (80052ec <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	0802537c 	.word	0x0802537c

080052f0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	b097      	sub	sp, #92	; 0x5c
 80052f4:	af04      	add	r7, sp, #16
 80052f6:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 80052f8:	f107 0308 	add.w	r3, r7, #8
 80052fc:	4967      	ldr	r1, [pc, #412]	; (800549c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 80052fe:	4618      	mov	r0, r3
 8005300:	f006 f833 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005304:	f107 0308 	add.w	r3, r7, #8
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f004 f906 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005310:	4604      	mov	r4, r0
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	330c      	adds	r3, #12
 8005316:	681d      	ldr	r5, [r3, #0]
 8005318:	f107 0310 	add.w	r3, r7, #16
 800531c:	4960      	ldr	r1, [pc, #384]	; (80054a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 800531e:	4618      	mov	r0, r3
 8005320:	f006 f823 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005324:	f107 0310 	add.w	r3, r7, #16
 8005328:	4619      	mov	r1, r3
 800532a:	4620      	mov	r0, r4
 800532c:	47a8      	blx	r5
 800532e:	4603      	mov	r3, r0
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	3264      	adds	r2, #100	; 0x64
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	214f      	movs	r1, #79	; 0x4f
 8005338:	4618      	mov	r0, r3
 800533a:	4790      	blx	r2
 800533c:	f107 0310 	add.w	r3, r7, #16
 8005340:	4618      	mov	r0, r3
 8005342:	f006 fbca 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005346:	f107 0308 	add.w	r3, r7, #8
 800534a:	4618      	mov	r0, r3
 800534c:	f006 fbc5 	bl	800bada <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005350:	f7fe fb14 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 8005354:	f107 0318 	add.w	r3, r7, #24
 8005358:	4950      	ldr	r1, [pc, #320]	; (800549c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 800535a:	4618      	mov	r0, r3
 800535c:	f006 f805 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005360:	f107 0318 	add.w	r3, r7, #24
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f004 f8d8 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800536c:	4604      	mov	r4, r0
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	681d      	ldr	r5, [r3, #0]
 8005374:	f107 0320 	add.w	r3, r7, #32
 8005378:	4949      	ldr	r1, [pc, #292]	; (80054a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 800537a:	4618      	mov	r0, r3
 800537c:	f005 fff5 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005380:	f107 0320 	add.w	r3, r7, #32
 8005384:	4619      	mov	r1, r3
 8005386:	4620      	mov	r0, r4
 8005388:	47a8      	blx	r5
 800538a:	4603      	mov	r3, r0
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	3264      	adds	r2, #100	; 0x64
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	214b      	movs	r1, #75	; 0x4b
 8005394:	4618      	mov	r0, r3
 8005396:	4790      	blx	r2
 8005398:	f107 0320 	add.w	r3, r7, #32
 800539c:	4618      	mov	r0, r3
 800539e:	f006 fb9c 	bl	800bada <_ZN12SimpleStringD1Ev>
 80053a2:	f107 0318 	add.w	r3, r7, #24
 80053a6:	4618      	mov	r0, r3
 80053a8:	f006 fb97 	bl	800bada <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80053ac:	f7fe fae6 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 80053b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053b4:	4939      	ldr	r1, [pc, #228]	; (800549c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 80053b6:	4618      	mov	r0, r3
 80053b8:	f005 ffd7 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80053bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f004 f8aa 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80053c8:	4604      	mov	r4, r0
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	681d      	ldr	r5, [r3, #0]
 80053d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053d4:	4932      	ldr	r1, [pc, #200]	; (80054a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 80053d6:	4618      	mov	r0, r3
 80053d8:	f005 ffc7 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80053dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053e0:	4619      	mov	r1, r3
 80053e2:	4620      	mov	r0, r4
 80053e4:	47a8      	blx	r5
 80053e6:	4603      	mov	r3, r0
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	3264      	adds	r2, #100	; 0x64
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	210d      	movs	r1, #13
 80053f0:	4618      	mov	r0, r3
 80053f2:	4790      	blx	r2
 80053f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053f8:	4618      	mov	r0, r3
 80053fa:	f006 fb6e 	bl	800bada <_ZN12SimpleStringD1Ev>
 80053fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005402:	4618      	mov	r0, r3
 8005404:	f006 fb69 	bl	800bada <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005408:	f7fe fab8 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 800540c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005410:	4922      	ldr	r1, [pc, #136]	; (800549c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 8005412:	4618      	mov	r0, r3
 8005414:	f005 ffa9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005418:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f004 f87c 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005424:	4604      	mov	r4, r0
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	681d      	ldr	r5, [r3, #0]
 800542c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005430:	491b      	ldr	r1, [pc, #108]	; (80054a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 8005432:	4618      	mov	r0, r3
 8005434:	f005 ff99 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800543c:	4619      	mov	r1, r3
 800543e:	4620      	mov	r0, r4
 8005440:	47a8      	blx	r5
 8005442:	4603      	mov	r3, r0
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	3264      	adds	r2, #100	; 0x64
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	210a      	movs	r1, #10
 800544c:	4618      	mov	r0, r3
 800544e:	4790      	blx	r2
 8005450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005454:	4618      	mov	r0, r3
 8005456:	f006 fb40 	bl	800bada <_ZN12SimpleStringD1Ev>
 800545a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800545e:	4618      	mov	r0, r3
 8005460:	f006 fb3b 	bl	800bada <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005464:	f7fe fa8a 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 8005468:	f00d fb62 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 800546c:	4604      	mov	r4, r0
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	3324      	adds	r3, #36	; 0x24
 8005472:	681d      	ldr	r5, [r3, #0]
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68de      	ldr	r6, [r3, #12]
 800547a:	f00d fb69 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800547e:	4603      	mov	r3, r0
 8005480:	9302      	str	r3, [sp, #8]
 8005482:	23e2      	movs	r3, #226	; 0xe2
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b8>)
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	2300      	movs	r3, #0
 800548c:	4632      	mov	r2, r6
 800548e:	4907      	ldr	r1, [pc, #28]	; (80054ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1bc>)
 8005490:	4620      	mov	r0, r4
 8005492:	47a8      	blx	r5

}
 8005494:	bf00      	nop
 8005496:	374c      	adds	r7, #76	; 0x4c
 8005498:	46bd      	mov	sp, r7
 800549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800549c:	08021ef0 	.word	0x08021ef0
 80054a0:	08021f10 	.word	0x08021f10
 80054a4:	20000498 	.word	0x20000498
 80054a8:	08021bcc 	.word	0x08021bcc
 80054ac:	08021f4c 	.word	0x08021f4c

080054b0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fd7e 	bl	8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80054c0:	4a03      	ldr	r2, [pc, #12]	; (80054d0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	0802535c 	.word	0x0802535c

080054d4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 80054d4:	b590      	push	{r4, r7, lr}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	22e6      	movs	r2, #230	; 0xe6
 80054de:	4906      	ldr	r1, [pc, #24]	; (80054f8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 80054e0:	2004      	movs	r0, #4
 80054e2:	f003 fb7f 	bl	8008be4 <_ZnwjPKci>
 80054e6:	4604      	mov	r4, r0
 80054e8:	4620      	mov	r0, r4
 80054ea:	f7ff ffe1 	bl	80054b0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 80054ee:	4623      	mov	r3, r4
 80054f0:	4618      	mov	r0, r3
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd90      	pop	{r4, r7, pc}
 80054f8:	08021bcc 	.word	0x08021bcc

080054fc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4618      	mov	r0, r3
 8005508:	f00b ff5a 	bl	80113c0 <_ZN10UtestShellC1Ev>
 800550c:	4a03      	ldr	r2, [pc, #12]	; (800551c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	080252b0 	.word	0x080252b0

08005520 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005522:	b091      	sub	sp, #68	; 0x44
 8005524:	af04      	add	r7, sp, #16
 8005526:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 8005528:	4a35      	ldr	r2, [pc, #212]	; (8005600 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 800552a:	f107 030c 	add.w	r3, r7, #12
 800552e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005532:	6018      	str	r0, [r3, #0]
 8005534:	3304      	adds	r3, #4
 8005536:	7019      	strb	r1, [r3, #0]
 8005538:	f107 0311 	add.w	r3, r7, #17
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 8005542:	2300      	movs	r3, #0
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005546:	f107 030c 	add.w	r3, r7, #12
 800554a:	4618      	mov	r0, r3
 800554c:	f7fa fe76 	bl	800023c <strlen>
 8005550:	4603      	mov	r3, r0
 8005552:	461a      	mov	r2, r3
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	4293      	cmp	r3, r2
 8005558:	da35      	bge.n	80055c6 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800555a:	f107 0318 	add.w	r3, r7, #24
 800555e:	4929      	ldr	r1, [pc, #164]	; (8005604 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 8005560:	4618      	mov	r0, r3
 8005562:	f005 ff02 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005566:	f107 0318 	add.w	r3, r7, #24
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f003 ffd5 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005572:	4604      	mov	r4, r0
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	681d      	ldr	r5, [r3, #0]
 800557a:	f107 0320 	add.w	r3, r7, #32
 800557e:	4922      	ldr	r1, [pc, #136]	; (8005608 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8005580:	4618      	mov	r0, r3
 8005582:	f005 fef2 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005586:	f107 0320 	add.w	r3, r7, #32
 800558a:	4619      	mov	r1, r3
 800558c:	4620      	mov	r0, r4
 800558e:	47a8      	blx	r5
 8005590:	4603      	mov	r3, r0
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	3264      	adds	r2, #100	; 0x64
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	f107 000c 	add.w	r0, r7, #12
 800559c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800559e:	4401      	add	r1, r0
 80055a0:	7809      	ldrb	r1, [r1, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	4790      	blx	r2
 80055a6:	f107 0320 	add.w	r3, r7, #32
 80055aa:	4618      	mov	r0, r3
 80055ac:	f006 fa95 	bl	800bada <_ZN12SimpleStringD1Ev>
 80055b0:	f107 0318 	add.w	r3, r7, #24
 80055b4:	4618      	mov	r0, r3
 80055b6:	f006 fa90 	bl	800bada <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80055ba:	f7fe f9df 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	3301      	adds	r3, #1
 80055c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c4:	e7bf      	b.n	8005546 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 80055c6:	4811      	ldr	r0, [pc, #68]	; (800560c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xec>)
 80055c8:	f7fe f9f2 	bl	80039b0 <Read_Response>
 80055cc:	62b8      	str	r0, [r7, #40]	; 0x28

	LONGS_EQUAL(1,result);
 80055ce:	f00d faaf 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80055d2:	4604      	mov	r4, r0
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	3338      	adds	r3, #56	; 0x38
 80055d8:	681d      	ldr	r5, [r3, #0]
 80055da:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80055dc:	f00d fab8 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80055e0:	4603      	mov	r3, r0
 80055e2:	9302      	str	r3, [sp, #8]
 80055e4:	23f2      	movs	r3, #242	; 0xf2
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf0>)
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf4>)
 80055ee:	4632      	mov	r2, r6
 80055f0:	2101      	movs	r1, #1
 80055f2:	4620      	mov	r0, r4
 80055f4:	47a8      	blx	r5

}
 80055f6:	bf00      	nop
 80055f8:	3734      	adds	r7, #52	; 0x34
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055fe:	bf00      	nop
 8005600:	08021f58 	.word	0x08021f58
 8005604:	08021ef0 	.word	0x08021ef0
 8005608:	08021f10 	.word	0x08021f10
 800560c:	08021f54 	.word	0x08021f54
 8005610:	08021bcc 	.word	0x08021bcc
 8005614:	08021f24 	.word	0x08021f24

08005618 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff fcca 	bl	8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005628:	4a03      	ldr	r2, [pc, #12]	; (8005638 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	08025290 	.word	0x08025290

0800563c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	22f7      	movs	r2, #247	; 0xf7
 8005646:	4906      	ldr	r1, [pc, #24]	; (8005660 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8005648:	2004      	movs	r0, #4
 800564a:	f003 facb 	bl	8008be4 <_ZnwjPKci>
 800564e:	4604      	mov	r4, r0
 8005650:	4620      	mov	r0, r4
 8005652:	f7ff ffe1 	bl	8005618 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8005656:	4623      	mov	r3, r4
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	bd90      	pop	{r4, r7, pc}
 8005660:	08021bcc 	.word	0x08021bcc

08005664 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4618      	mov	r0, r3
 8005670:	f00b fea6 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8005674:	4a03      	ldr	r2, [pc, #12]	; (8005684 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	080251e4 	.word	0x080251e4

08005688 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800568a:	b089      	sub	sp, #36	; 0x24
 800568c:	af04      	add	r7, sp, #16
 800568e:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005690:	2305      	movs	r3, #5
 8005692:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8005694:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005698:	4811      	ldr	r0, [pc, #68]	; (80056e0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 800569a:	f7fe f99b 	bl	80039d4 <Wait_Response>
 800569e:	4603      	mov	r3, r0
 80056a0:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b05      	cmp	r3, #5
 80056a6:	d100      	bne.n	80056aa <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 80056a8:	e7f4      	b.n	8005694 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 80056aa:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 80056ac:	f00d fa40 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80056b0:	4604      	mov	r4, r0
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	3338      	adds	r3, #56	; 0x38
 80056b6:	681d      	ldr	r5, [r3, #0]
 80056b8:	7bfe      	ldrb	r6, [r7, #15]
 80056ba:	f00d fa49 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80056be:	4603      	mov	r3, r0
 80056c0:	9302      	str	r3, [sp, #8]
 80056c2:	f240 1303 	movw	r3, #259	; 0x103
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 80056ce:	4632      	mov	r2, r6
 80056d0:	2102      	movs	r1, #2
 80056d2:	4620      	mov	r0, r4
 80056d4:	47a8      	blx	r5

}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056de:	bf00      	nop
 80056e0:	08021f54 	.word	0x08021f54
 80056e4:	08021bcc 	.word	0x08021bcc
 80056e8:	08021f64 	.word	0x08021f64

080056ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fc60 	bl	8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80056fc:	4a03      	ldr	r2, [pc, #12]	; (800570c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	080251c4 	.word	0x080251c4

08005710 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	f240 1207 	movw	r2, #263	; 0x107
 800571c:	4906      	ldr	r1, [pc, #24]	; (8005738 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 800571e:	2004      	movs	r0, #4
 8005720:	f003 fa60 	bl	8008be4 <_ZnwjPKci>
 8005724:	4604      	mov	r4, r0
 8005726:	4620      	mov	r0, r4
 8005728:	f7ff ffe0 	bl	80056ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 800572c:	4623      	mov	r3, r4
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	bd90      	pop	{r4, r7, pc}
 8005736:	bf00      	nop
 8005738:	08021bcc 	.word	0x08021bcc

0800573c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4618      	mov	r0, r3
 8005748:	f00b fe3a 	bl	80113c0 <_ZN10UtestShellC1Ev>
 800574c:	4a03      	ldr	r2, [pc, #12]	; (800575c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	08025118 	.word	0x08025118

08005760 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005762:	b091      	sub	sp, #68	; 0x44
 8005764:	af04      	add	r7, sp, #16
 8005766:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005768:	2305      	movs	r3, #5
 800576a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	char response[10] = "OK\r\n";
 800576e:	4a3b      	ldr	r2, [pc, #236]	; (800585c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 8005770:	f107 030c 	add.w	r3, r7, #12
 8005774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005778:	6018      	str	r0, [r3, #0]
 800577a:	3304      	adds	r3, #4
 800577c:	7019      	strb	r1, [r3, #0]
 800577e:	f107 0311 	add.w	r3, r7, #17
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	711a      	strb	r2, [r3, #4]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005788:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800578c:	4834      	ldr	r0, [pc, #208]	; (8005860 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 800578e:	f7fe f921 	bl	80039d4 <Wait_Response>
 8005792:	4603      	mov	r3, r0
 8005794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(response_state != IDLE)
 8005798:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800579c:	2b05      	cmp	r3, #5
 800579e:	d141      	bne.n	8005824 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xc4>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 80057a0:	2300      	movs	r3, #0
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a4:	f107 030c 	add.w	r3, r7, #12
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fa fd47 	bl	800023c <strlen>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b4:	4293      	cmp	r3, r2
 80057b6:	dae7      	bge.n	8005788 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x28>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80057b8:	f107 0318 	add.w	r3, r7, #24
 80057bc:	4929      	ldr	r1, [pc, #164]	; (8005864 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 80057be:	4618      	mov	r0, r3
 80057c0:	f005 fdd3 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80057c4:	f107 0318 	add.w	r3, r7, #24
 80057c8:	2100      	movs	r1, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f003 fea6 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80057d0:	4604      	mov	r4, r0
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	681d      	ldr	r5, [r3, #0]
 80057d8:	f107 0320 	add.w	r3, r7, #32
 80057dc:	4922      	ldr	r1, [pc, #136]	; (8005868 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x108>)
 80057de:	4618      	mov	r0, r3
 80057e0:	f005 fdc3 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80057e4:	f107 0320 	add.w	r3, r7, #32
 80057e8:	4619      	mov	r1, r3
 80057ea:	4620      	mov	r0, r4
 80057ec:	47a8      	blx	r5
 80057ee:	4603      	mov	r3, r0
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	3264      	adds	r2, #100	; 0x64
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	f107 000c 	add.w	r0, r7, #12
 80057fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057fc:	4401      	add	r1, r0
 80057fe:	7809      	ldrb	r1, [r1, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	4790      	blx	r2
 8005804:	f107 0320 	add.w	r3, r7, #32
 8005808:	4618      	mov	r0, r3
 800580a:	f006 f966 	bl	800bada <_ZN12SimpleStringD1Ev>
 800580e:	f107 0318 	add.w	r3, r7, #24
 8005812:	4618      	mov	r0, r3
 8005814:	f006 f961 	bl	800bada <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005818:	f7fe f8b0 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	3301      	adds	r3, #1
 8005820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005822:	e7bf      	b.n	80057a4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x44>
			break;
 8005824:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 8005826:	f00d f983 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 800582a:	4604      	mov	r4, r0
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	3338      	adds	r3, #56	; 0x38
 8005830:	681d      	ldr	r5, [r3, #0]
 8005832:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 8005836:	f00d f98b 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800583a:	4603      	mov	r3, r0
 800583c:	9302      	str	r3, [sp, #8]
 800583e:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x10c>)
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	4b09      	ldr	r3, [pc, #36]	; (8005870 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x110>)
 800584a:	4632      	mov	r2, r6
 800584c:	2100      	movs	r1, #0
 800584e:	4620      	mov	r0, r4
 8005850:	47a8      	blx	r5
}
 8005852:	bf00      	nop
 8005854:	3734      	adds	r7, #52	; 0x34
 8005856:	46bd      	mov	sp, r7
 8005858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585a:	bf00      	nop
 800585c:	08021f58 	.word	0x08021f58
 8005860:	08021f54 	.word	0x08021f54
 8005864:	08021ef0 	.word	0x08021ef0
 8005868:	08021f10 	.word	0x08021f10
 800586c:	08021bcc 	.word	0x08021bcc
 8005870:	08021f98 	.word	0x08021f98

08005874 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fb9c 	bl	8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005884:	4a03      	ldr	r2, [pc, #12]	; (8005894 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	080250f8 	.word	0x080250f8

08005898 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	f240 121d 	movw	r2, #285	; 0x11d
 80058a4:	4906      	ldr	r1, [pc, #24]	; (80058c0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 80058a6:	2004      	movs	r0, #4
 80058a8:	f003 f99c 	bl	8008be4 <_ZnwjPKci>
 80058ac:	4604      	mov	r4, r0
 80058ae:	4620      	mov	r0, r4
 80058b0:	f7ff ffe0 	bl	8005874 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 80058b4:	4623      	mov	r3, r4
 80058b6:	4618      	mov	r0, r3
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd90      	pop	{r4, r7, pc}
 80058be:	bf00      	nop
 80058c0:	08021bcc 	.word	0x08021bcc

080058c4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f00b fd76 	bl	80113c0 <_ZN10UtestShellC1Ev>
 80058d4:	4a03      	ldr	r2, [pc, #12]	; (80058e4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	0802504c 	.word	0x0802504c

080058e8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 80058e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ea:	b08f      	sub	sp, #60	; 0x3c
 80058ec:	af04      	add	r7, sp, #16
 80058ee:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 80058f0:	2302      	movs	r3, #2
 80058f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 80058f6:	f107 030c 	add.w	r3, r7, #12
 80058fa:	492f      	ldr	r1, [pc, #188]	; (80059b8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80058fc:	4618      	mov	r0, r3
 80058fe:	f005 fd34 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005902:	f107 030c 	add.w	r3, r7, #12
 8005906:	2100      	movs	r1, #0
 8005908:	4618      	mov	r0, r3
 800590a:	f003 fe07 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800590e:	4604      	mov	r4, r0
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	330c      	adds	r3, #12
 8005914:	681d      	ldr	r5, [r3, #0]
 8005916:	f107 0314 	add.w	r3, r7, #20
 800591a:	4928      	ldr	r1, [pc, #160]	; (80059bc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 800591c:	4618      	mov	r0, r3
 800591e:	f005 fd24 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005922:	f107 0314 	add.w	r3, r7, #20
 8005926:	4619      	mov	r1, r3
 8005928:	4620      	mov	r0, r4
 800592a:	47a8      	blx	r5
 800592c:	4604      	mov	r4, r0
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	334c      	adds	r3, #76	; 0x4c
 8005932:	681d      	ldr	r5, [r3, #0]
 8005934:	f107 031c 	add.w	r3, r7, #28
 8005938:	4921      	ldr	r1, [pc, #132]	; (80059c0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 800593a:	4618      	mov	r0, r3
 800593c:	f005 fd15 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005940:	f107 031c 	add.w	r3, r7, #28
 8005944:	4a1f      	ldr	r2, [pc, #124]	; (80059c4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005946:	4619      	mov	r1, r3
 8005948:	4620      	mov	r0, r4
 800594a:	47a8      	blx	r5
 800594c:	f107 031c 	add.w	r3, r7, #28
 8005950:	4618      	mov	r0, r3
 8005952:	f006 f8c2 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005956:	f107 0314 	add.w	r3, r7, #20
 800595a:	4618      	mov	r0, r3
 800595c:	f006 f8bd 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	4618      	mov	r0, r3
 8005966:	f006 f8b8 	bl	800bada <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 800596a:	4917      	ldr	r1, [pc, #92]	; (80059c8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 800596c:	4817      	ldr	r0, [pc, #92]	; (80059cc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 800596e:	f7fe f873 	bl	8003a58 <Connect_Wifi>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800597c:	2b05      	cmp	r3, #5
 800597e:	d100      	bne.n	8005982 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005980:	e7f3      	b.n	800596a <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005982:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005984:	f00d f8d4 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8005988:	4604      	mov	r4, r0
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	3338      	adds	r3, #56	; 0x38
 800598e:	681d      	ldr	r5, [r3, #0]
 8005990:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005994:	f00d f8dc 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005998:	4603      	mov	r3, r0
 800599a:	9302      	str	r3, [sp, #8]
 800599c:	f44f 7398 	mov.w	r3, #304	; 0x130
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 80059a8:	4632      	mov	r2, r6
 80059aa:	2102      	movs	r1, #2
 80059ac:	4620      	mov	r0, r4
 80059ae:	47a8      	blx	r5

}
 80059b0:	bf00      	nop
 80059b2:	372c      	adds	r7, #44	; 0x2c
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b8:	08021ef0 	.word	0x08021ef0
 80059bc:	08021ef4 	.word	0x08021ef4
 80059c0:	08021f08 	.word	0x08021f08
 80059c4:	08021fc4 	.word	0x08021fc4
 80059c8:	08021fd4 	.word	0x08021fd4
 80059cc:	08021fdc 	.word	0x08021fdc
 80059d0:	08021bcc 	.word	0x08021bcc
 80059d4:	08021fe4 	.word	0x08021fe4

080059d8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff faea 	bl	8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80059e8:	4a03      	ldr	r2, [pc, #12]	; (80059f8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	0802502c 	.word	0x0802502c

080059fc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005a08:	4906      	ldr	r1, [pc, #24]	; (8005a24 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005a0a:	2004      	movs	r0, #4
 8005a0c:	f003 f8ea 	bl	8008be4 <_ZnwjPKci>
 8005a10:	4604      	mov	r4, r0
 8005a12:	4620      	mov	r0, r4
 8005a14:	f7ff ffe0 	bl	80059d8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005a18:	4623      	mov	r3, r4
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd90      	pop	{r4, r7, pc}
 8005a22:	bf00      	nop
 8005a24:	08021bcc 	.word	0x08021bcc

08005a28 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f00b fcc4 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8005a38:	4a03      	ldr	r2, [pc, #12]	; (8005a48 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	08024f80 	.word	0x08024f80

08005a4c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4e:	b0e1      	sub	sp, #388	; 0x184
 8005a50:	af04      	add	r7, sp, #16
 8005a52:	1d3b      	adds	r3, r7, #4
 8005a54:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005a56:	4a78      	ldr	r2, [pc, #480]	; (8005c38 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005a58:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	2296      	movs	r2, #150	; 0x96
 8005a60:	4618      	mov	r0, r3
 8005a62:	f019 f953 	bl	801ed0c <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									// check disconnect response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	char fake_tx_buffer[3][50] =
 8005a66:	f107 0308 	add.w	r3, r7, #8
 8005a6a:	4a74      	ldr	r2, [pc, #464]	; (8005c3c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	4611      	mov	r1, r2
 8005a70:	2396      	movs	r3, #150	; 0x96
 8005a72:	461a      	mov	r2, r3
 8005a74:	f019 f94a 	bl	801ed0c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005a7e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	dc46      	bgt.n	8005b14 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005a86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a8a:	496d      	ldr	r1, [pc, #436]	; (8005c40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f005 fc6c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005a92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f003 fd3f 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	681d      	ldr	r5, [r3, #0]
 8005aa6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005aaa:	4966      	ldr	r1, [pc, #408]	; (8005c44 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005aac:	4618      	mov	r0, r3
 8005aae:	f005 fc5c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005ab2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4620      	mov	r0, r4
 8005aba:	47a8      	blx	r5
 8005abc:	4604      	mov	r4, r0
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	334c      	adds	r3, #76	; 0x4c
 8005ac2:	681d      	ldr	r5, [r3, #0]
 8005ac4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ac8:	495f      	ldr	r1, [pc, #380]	; (8005c48 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005aca:	4618      	mov	r0, r3
 8005acc:	f005 fc4d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005ad0:	f107 0208 	add.w	r2, r7, #8
 8005ad4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005ad8:	2132      	movs	r1, #50	; 0x32
 8005ada:	fb01 f303 	mul.w	r3, r1, r3
 8005ade:	441a      	add	r2, r3
 8005ae0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	47a8      	blx	r5
 8005aea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005aee:	4618      	mov	r0, r3
 8005af0:	f005 fff3 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005af4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005af8:	4618      	mov	r0, r3
 8005afa:	f005 ffee 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005afe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b02:	4618      	mov	r0, r3
 8005b04:	f005 ffe9 	bl	800bada <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005b08:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005b12:	e7b4      	b.n	8005a7e <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005b14:	2305      	movs	r3, #5
 8005b16:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005b20:	494a      	ldr	r1, [pc, #296]	; (8005c4c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005b22:	484b      	ldr	r0, [pc, #300]	; (8005c50 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005b24:	f7fd ff98 	bl	8003a58 <Connect_Wifi>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == CONNECTION_ERROR || response == CONNECTION_OK || response == TIMEOUT_ERROR)
 8005b2e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d065      	beq.n	8005c02 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005b36:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d061      	beq.n	8005c02 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005b3e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d05d      	beq.n	8005c02 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
		{
			break;
		}

		if(i<3)
 8005b46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	dce8      	bgt.n	8005b20 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005b54:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005b58:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b5c:	2132      	movs	r1, #50	; 0x32
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	4413      	add	r3, r2
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fa fb69 	bl	800023c <strlen>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b72:	4293      	cmp	r3, r2
 8005b74:	da3f      	bge.n	8005bf6 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1aa>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005b76:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b7a:	4931      	ldr	r1, [pc, #196]	; (8005c40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f005 fbf4 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005b82:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f003 fcc7 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b8e:	4604      	mov	r4, r0
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	330c      	adds	r3, #12
 8005b94:	681d      	ldr	r5, [r3, #0]
 8005b96:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b9a:	492e      	ldr	r1, [pc, #184]	; (8005c54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x208>)
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f005 fbe4 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005ba2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4620      	mov	r0, r4
 8005baa:	47a8      	blx	r5
 8005bac:	4603      	mov	r3, r0
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	3264      	adds	r2, #100	; 0x64
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005bb8:	2032      	movs	r0, #50	; 0x32
 8005bba:	fb00 f101 	mul.w	r1, r0, r1
 8005bbe:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005bc2:	4408      	add	r0, r1
 8005bc4:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005bc8:	4401      	add	r1, r0
 8005bca:	39d0      	subs	r1, #208	; 0xd0
 8005bcc:	7809      	ldrb	r1, [r1, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	4790      	blx	r2
 8005bd2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f005 ff7f 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005bdc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005be0:	4618      	mov	r0, r3
 8005be2:	f005 ff7a 	bl	800bada <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005be6:	f7fd fec9 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005bea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005bee:	3301      	adds	r3, #1
 8005bf0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005bf4:	e7ae      	b.n	8005b54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x108>
			}
			i++;
 8005bf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005c00:	e78e      	b.n	8005b20 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
	LONGS_EQUAL(CONNECTION_ERROR,response);
 8005c02:	f00c ff95 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8005c06:	4604      	mov	r4, r0
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	3338      	adds	r3, #56	; 0x38
 8005c0c:	681d      	ldr	r5, [r3, #0]
 8005c0e:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005c12:	f00c ff9d 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005c16:	4603      	mov	r3, r0
 8005c18:	9302      	str	r3, [sp, #8]
 8005c1a:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x20c>)
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x210>)
 8005c26:	4632      	mov	r2, r6
 8005c28:	2104      	movs	r1, #4
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	47a8      	blx	r5

}
 8005c2e:	bf00      	nop
 8005c30:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c38:	08022040 	.word	0x08022040
 8005c3c:	080220d8 	.word	0x080220d8
 8005c40:	08021ef0 	.word	0x08021ef0
 8005c44:	08021ef4 	.word	0x08021ef4
 8005c48:	08021f08 	.word	0x08021f08
 8005c4c:	08021fd4 	.word	0x08021fd4
 8005c50:	08021fdc 	.word	0x08021fdc
 8005c54:	08021f10 	.word	0x08021f10
 8005c58:	08021bcc 	.word	0x08021bcc
 8005c5c:	08022010 	.word	0x08022010

08005c60 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff f9a6 	bl	8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005c70:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	08024f60 	.word	0x08024f60

08005c84 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005c90:	4906      	ldr	r1, [pc, #24]	; (8005cac <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005c92:	2004      	movs	r0, #4
 8005c94:	f002 ffa6 	bl	8008be4 <_ZnwjPKci>
 8005c98:	4604      	mov	r4, r0
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f7ff ffe0 	bl	8005c60 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd90      	pop	{r4, r7, pc}
 8005caa:	bf00      	nop
 8005cac:	08021bcc 	.word	0x08021bcc

08005cb0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f00b fb80 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8005cc0:	4a03      	ldr	r2, [pc, #12]	; (8005cd0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	08024eb4 	.word	0x08024eb4

08005cd4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cd6:	b0e1      	sub	sp, #388	; 0x184
 8005cd8:	af04      	add	r7, sp, #16
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005cde:	4a77      	ldr	r2, [pc, #476]	; (8005ebc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005ce0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	2296      	movs	r2, #150	; 0x96
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f019 f80f 	bl	801ed0c <memcpy>
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char fake_tx_buffer[3][50] =
 8005cee:	f107 0308 	add.w	r3, r7, #8
 8005cf2:	4a73      	ldr	r2, [pc, #460]	; (8005ec0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	2396      	movs	r3, #150	; 0x96
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f019 f806 	bl	801ed0c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005d00:	2300      	movs	r3, #0
 8005d02:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d06:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	dc46      	bgt.n	8005d9c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005d0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d12:	496c      	ldr	r1, [pc, #432]	; (8005ec4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005d14:	4618      	mov	r0, r3
 8005d16:	f005 fb28 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005d1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d1e:	2100      	movs	r1, #0
 8005d20:	4618      	mov	r0, r3
 8005d22:	f003 fbfb 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005d26:	4604      	mov	r4, r0
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	330c      	adds	r3, #12
 8005d2c:	681d      	ldr	r5, [r3, #0]
 8005d2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d32:	4965      	ldr	r1, [pc, #404]	; (8005ec8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005d34:	4618      	mov	r0, r3
 8005d36:	f005 fb18 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005d3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4620      	mov	r0, r4
 8005d42:	47a8      	blx	r5
 8005d44:	4604      	mov	r4, r0
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	334c      	adds	r3, #76	; 0x4c
 8005d4a:	681d      	ldr	r5, [r3, #0]
 8005d4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d50:	495e      	ldr	r1, [pc, #376]	; (8005ecc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005d52:	4618      	mov	r0, r3
 8005d54:	f005 fb09 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005d58:	f107 0208 	add.w	r2, r7, #8
 8005d5c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d60:	2132      	movs	r1, #50	; 0x32
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	441a      	add	r2, r3
 8005d68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4620      	mov	r0, r4
 8005d70:	47a8      	blx	r5
 8005d72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d76:	4618      	mov	r0, r3
 8005d78:	f005 feaf 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005d7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d80:	4618      	mov	r0, r3
 8005d82:	f005 feaa 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005d86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f005 fea5 	bl	800bada <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005d90:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d94:	3301      	adds	r3, #1
 8005d96:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d9a:	e7b4      	b.n	8005d06 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005da2:	494b      	ldr	r1, [pc, #300]	; (8005ed0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005da4:	484b      	ldr	r0, [pc, #300]	; (8005ed4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x200>)
 8005da6:	f7fd fe57 	bl	8003a58 <Connect_Wifi>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == CONNECTION_ERROR || response == CONNECTION_OK || response == TIMEOUT_ERROR)
 8005db0:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d065      	beq.n	8005e84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005db8:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d061      	beq.n	8005e84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005dc0:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d05d      	beq.n	8005e84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
		{
			break;
		}

		if(i<3)
 8005dc8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	dce8      	bgt.n	8005da2 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005dd6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005dda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005dde:	2132      	movs	r1, #50	; 0x32
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa fa28 	bl	800023c <strlen>
 8005dec:	4603      	mov	r3, r0
 8005dee:	461a      	mov	r2, r3
 8005df0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005df4:	4293      	cmp	r3, r2
 8005df6:	da3f      	bge.n	8005e78 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005df8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005dfc:	4931      	ldr	r1, [pc, #196]	; (8005ec4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f005 fab3 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005e04:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e08:	2100      	movs	r1, #0
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f003 fb86 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005e10:	4604      	mov	r4, r0
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	330c      	adds	r3, #12
 8005e16:	681d      	ldr	r5, [r3, #0]
 8005e18:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e1c:	492e      	ldr	r1, [pc, #184]	; (8005ed8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x204>)
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f005 faa3 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005e24:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	47a8      	blx	r5
 8005e2e:	4603      	mov	r3, r0
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	3264      	adds	r2, #100	; 0x64
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005e3a:	2032      	movs	r0, #50	; 0x32
 8005e3c:	fb00 f101 	mul.w	r1, r0, r1
 8005e40:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005e44:	4408      	add	r0, r1
 8005e46:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005e4a:	4401      	add	r1, r0
 8005e4c:	39d0      	subs	r1, #208	; 0xd0
 8005e4e:	7809      	ldrb	r1, [r1, #0]
 8005e50:	4618      	mov	r0, r3
 8005e52:	4790      	blx	r2
 8005e54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f005 fe3e 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005e5e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e62:	4618      	mov	r0, r3
 8005e64:	f005 fe39 	bl	800bada <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005e68:	f7fd fd88 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005e6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005e70:	3301      	adds	r3, #1
 8005e72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005e76:	e7ae      	b.n	8005dd6 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x102>
			}
			i++;
 8005e78:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005e82:	e78e      	b.n	8005da2 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
	LONGS_EQUAL(CONNECTION_OK,response);
 8005e84:	f00c fe54 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8005e88:	4604      	mov	r4, r0
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	3338      	adds	r3, #56	; 0x38
 8005e8e:	681d      	ldr	r5, [r3, #0]
 8005e90:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005e94:	f00c fe5c 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	9302      	str	r3, [sp, #8]
 8005e9c:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x208>)
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	; (8005ee0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x20c>)
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	2103      	movs	r1, #3
 8005eac:	4620      	mov	r0, r4
 8005eae:	47a8      	blx	r5

}
 8005eb0:	bf00      	nop
 8005eb2:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	0802219c 	.word	0x0802219c
 8005ec0:	080220d8 	.word	0x080220d8
 8005ec4:	08021ef0 	.word	0x08021ef0
 8005ec8:	08021ef4 	.word	0x08021ef4
 8005ecc:	08021f08 	.word	0x08021f08
 8005ed0:	08021fd4 	.word	0x08021fd4
 8005ed4:	08021fdc 	.word	0x08021fdc
 8005ed8:	08021f10 	.word	0x08021f10
 8005edc:	08021bcc 	.word	0x08021bcc
 8005ee0:	08022170 	.word	0x08022170

08005ee4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff f864 	bl	8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ef4:	4a03      	ldr	r2, [pc, #12]	; (8005f04 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	08024e94 	.word	0x08024e94

08005f08 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005f08:	b590      	push	{r4, r7, lr}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005f14:	4906      	ldr	r1, [pc, #24]	; (8005f30 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005f16:	2004      	movs	r0, #4
 8005f18:	f002 fe64 	bl	8008be4 <_ZnwjPKci>
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7ff ffe0 	bl	8005ee4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8005f24:	4623      	mov	r3, r4
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd90      	pop	{r4, r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	08021bcc 	.word	0x08021bcc

08005f34 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f00b fa3e 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8005f44:	4a03      	ldr	r2, [pc, #12]	; (8005f54 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	08024de8 	.word	0x08024de8

08005f58 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f5a:	b08f      	sub	sp, #60	; 0x3c
 8005f5c:	af04      	add	r7, sp, #16
 8005f5e:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005f60:	f107 030c 	add.w	r3, r7, #12
 8005f64:	492e      	ldr	r1, [pc, #184]	; (8006020 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 8005f66:	4618      	mov	r0, r3
 8005f68:	f005 f9ff 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005f6c:	f107 030c 	add.w	r3, r7, #12
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f003 fad2 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f78:	4604      	mov	r4, r0
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	681d      	ldr	r5, [r3, #0]
 8005f80:	f107 0314 	add.w	r3, r7, #20
 8005f84:	4927      	ldr	r1, [pc, #156]	; (8006024 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 8005f86:	4618      	mov	r0, r3
 8005f88:	f005 f9ef 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	4619      	mov	r1, r3
 8005f92:	4620      	mov	r0, r4
 8005f94:	47a8      	blx	r5
 8005f96:	4604      	mov	r4, r0
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	334c      	adds	r3, #76	; 0x4c
 8005f9c:	681d      	ldr	r5, [r3, #0]
 8005f9e:	f107 031c 	add.w	r3, r7, #28
 8005fa2:	4921      	ldr	r1, [pc, #132]	; (8006028 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f005 f9e0 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8005faa:	f107 031c 	add.w	r3, r7, #28
 8005fae:	4a1f      	ldr	r2, [pc, #124]	; (800602c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	47a8      	blx	r5
 8005fb6:	f107 031c 	add.w	r3, r7, #28
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f005 fd8d 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005fc0:	f107 0314 	add.w	r3, r7, #20
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f005 fd88 	bl	800bada <_ZN12SimpleStringD1Ev>
 8005fca:	f107 030c 	add.w	r3, r7, #12
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f005 fd83 	bl	800bada <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8005fd4:	f7fd fe8e 	bl	8003cf4 <Disconnect_Wifi>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe2:	2b05      	cmp	r3, #5
 8005fe4:	d100      	bne.n	8005fe8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 8005fe6:	e7f5      	b.n	8005fd4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 8005fe8:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005fea:	f00c fda1 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8005fee:	4604      	mov	r4, r0
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	3338      	adds	r3, #56	; 0x38
 8005ff4:	681d      	ldr	r5, [r3, #0]
 8005ff6:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005ffa:	f00c fda9 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005ffe:	4603      	mov	r3, r0
 8006000:	9302      	str	r3, [sp, #8]
 8006002:	f240 139b 	movw	r3, #411	; 0x19b
 8006006:	9301      	str	r3, [sp, #4]
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	4b09      	ldr	r3, [pc, #36]	; (8006034 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 800600e:	4632      	mov	r2, r6
 8006010:	2102      	movs	r1, #2
 8006012:	4620      	mov	r0, r4
 8006014:	47a8      	blx	r5
}
 8006016:	bf00      	nop
 8006018:	372c      	adds	r7, #44	; 0x2c
 800601a:	46bd      	mov	sp, r7
 800601c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800601e:	bf00      	nop
 8006020:	08021ef0 	.word	0x08021ef0
 8006024:	08021ef4 	.word	0x08021ef4
 8006028:	08021f08 	.word	0x08021f08
 800602c:	08022234 	.word	0x08022234
 8006030:	08021bcc 	.word	0x08021bcc
 8006034:	08021fe4 	.word	0x08021fe4

08006038 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe ffba 	bl	8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006048:	4a03      	ldr	r2, [pc, #12]	; (8006058 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	08024dc8 	.word	0x08024dc8

0800605c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8006068:	4906      	ldr	r1, [pc, #24]	; (8006084 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 800606a:	2004      	movs	r0, #4
 800606c:	f002 fdba 	bl	8008be4 <_ZnwjPKci>
 8006070:	4604      	mov	r4, r0
 8006072:	4620      	mov	r0, r4
 8006074:	f7ff ffe0 	bl	8006038 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 8006078:	4623      	mov	r3, r4
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	bd90      	pop	{r4, r7, pc}
 8006082:	bf00      	nop
 8006084:	08021bcc 	.word	0x08021bcc

08006088 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4618      	mov	r0, r3
 8006094:	f00b f994 	bl	80113c0 <_ZN10UtestShellC1Ev>
 8006098:	4a03      	ldr	r2, [pc, #12]	; (80060a8 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	08024d1c 	.word	0x08024d1c

080060ac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 80060ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ae:	b093      	sub	sp, #76	; 0x4c
 80060b0:	af04      	add	r7, sp, #16
 80060b2:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 80060b4:	f107 0308 	add.w	r3, r7, #8
 80060b8:	494a      	ldr	r1, [pc, #296]	; (80061e4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 80060ba:	4618      	mov	r0, r3
 80060bc:	f005 f955 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80060c0:	f107 0308 	add.w	r3, r7, #8
 80060c4:	2100      	movs	r1, #0
 80060c6:	4618      	mov	r0, r3
 80060c8:	f003 fa28 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80060cc:	4604      	mov	r4, r0
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	681d      	ldr	r5, [r3, #0]
 80060d4:	f107 0310 	add.w	r3, r7, #16
 80060d8:	4943      	ldr	r1, [pc, #268]	; (80061e8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 80060da:	4618      	mov	r0, r3
 80060dc:	f005 f945 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80060e0:	f107 0310 	add.w	r3, r7, #16
 80060e4:	4619      	mov	r1, r3
 80060e6:	4620      	mov	r0, r4
 80060e8:	47a8      	blx	r5
 80060ea:	4604      	mov	r4, r0
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	334c      	adds	r3, #76	; 0x4c
 80060f0:	681d      	ldr	r5, [r3, #0]
 80060f2:	f107 0318 	add.w	r3, r7, #24
 80060f6:	493d      	ldr	r1, [pc, #244]	; (80061ec <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 80060f8:	4618      	mov	r0, r3
 80060fa:	f005 f936 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80060fe:	f107 0318 	add.w	r3, r7, #24
 8006102:	4a3b      	ldr	r2, [pc, #236]	; (80061f0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 8006104:	4619      	mov	r1, r3
 8006106:	4620      	mov	r0, r4
 8006108:	47a8      	blx	r5
 800610a:	f107 0318 	add.w	r3, r7, #24
 800610e:	4618      	mov	r0, r3
 8006110:	f005 fce3 	bl	800bada <_ZN12SimpleStringD1Ev>
 8006114:	f107 0310 	add.w	r3, r7, #16
 8006118:	4618      	mov	r0, r3
 800611a:	f005 fcde 	bl	800bada <_ZN12SimpleStringD1Ev>
 800611e:	f107 0308 	add.w	r3, r7, #8
 8006122:	4618      	mov	r0, r3
 8006124:	f005 fcd9 	bl	800bada <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8006128:	f7fd fde4 	bl	8003cf4 <Disconnect_Wifi>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006132:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006136:	2b05      	cmp	r3, #5
 8006138:	d139      	bne.n	80061ae <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 800613a:	2300      	movs	r3, #0
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006140:	2b01      	cmp	r3, #1
 8006142:	dcf1      	bgt.n	8006128 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006144:	f107 0320 	add.w	r3, r7, #32
 8006148:	4926      	ldr	r1, [pc, #152]	; (80061e4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 800614a:	4618      	mov	r0, r3
 800614c:	f005 f90d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8006150:	f107 0320 	add.w	r3, r7, #32
 8006154:	2100      	movs	r1, #0
 8006156:	4618      	mov	r0, r3
 8006158:	f003 f9e0 	bl	800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800615c:	4604      	mov	r4, r0
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	681d      	ldr	r5, [r3, #0]
 8006164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006168:	4922      	ldr	r1, [pc, #136]	; (80061f4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 800616a:	4618      	mov	r0, r3
 800616c:	f005 f8fd 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8006170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006174:	4619      	mov	r1, r3
 8006176:	4620      	mov	r0, r4
 8006178:	47a8      	blx	r5
 800617a:	4603      	mov	r3, r0
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	3264      	adds	r2, #100	; 0x64
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	481d      	ldr	r0, [pc, #116]	; (80061f8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 8006184:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006186:	4401      	add	r1, r0
 8006188:	7809      	ldrb	r1, [r1, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	4790      	blx	r2
 800618e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006192:	4618      	mov	r0, r3
 8006194:	f005 fca1 	bl	800bada <_ZN12SimpleStringD1Ev>
 8006198:	f107 0320 	add.w	r3, r7, #32
 800619c:	4618      	mov	r0, r3
 800619e:	f005 fc9c 	bl	800bada <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80061a2:	f7fd fbeb 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a8:	3301      	adds	r3, #1
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
 80061ac:	e7c7      	b.n	800613e <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 80061ae:	bf00      	nop
		}

	}

	LONGS_EQUAL(FOUND,response);
 80061b0:	f00c fcbe 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80061b4:	4604      	mov	r4, r0
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	3338      	adds	r3, #56	; 0x38
 80061ba:	681d      	ldr	r5, [r3, #0]
 80061bc:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80061c0:	f00c fcc6 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80061c4:	4603      	mov	r3, r0
 80061c6:	9302      	str	r3, [sp, #8]
 80061c8:	f240 13b3 	movw	r3, #435	; 0x1b3
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 80061d4:	4632      	mov	r2, r6
 80061d6:	2100      	movs	r1, #0
 80061d8:	4620      	mov	r0, r4
 80061da:	47a8      	blx	r5
}
 80061dc:	bf00      	nop
 80061de:	373c      	adds	r7, #60	; 0x3c
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e4:	08021ef0 	.word	0x08021ef0
 80061e8:	08021ef4 	.word	0x08021ef4
 80061ec:	08021f08 	.word	0x08021f08
 80061f0:	08022234 	.word	0x08022234
 80061f4:	08021f10 	.word	0x08021f10
 80061f8:	08021f54 	.word	0x08021f54
 80061fc:	08021bcc 	.word	0x08021bcc
 8006200:	08022240 	.word	0x08022240

08006204 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	4a05      	ldr	r2, [pc, #20]	; (8006224 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4618      	mov	r0, r3
 8006216:	f00b f927 	bl	8011468 <_ZN10UtestShellD1Ev>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	08024d1c 	.word	0x08024d1c

08006228 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ffe7 	bl	8006204 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 8006236:	211c      	movs	r1, #28
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f002 fce7 	bl	8008c0c <_ZdlPvj>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	4a05      	ldr	r2, [pc, #20]	; (8006268 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe fec1 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	08024dc8 	.word	0x08024dc8

0800626c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff ffe7 	bl	8006248 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 800627a:	2104      	movs	r1, #4
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f002 fcc5 	bl	8008c0c <_ZdlPvj>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	4a05      	ldr	r2, [pc, #20]	; (80062ac <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4618      	mov	r0, r3
 800629e:	f00b f8e3 	bl	8011468 <_ZN10UtestShellD1Ev>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	08024de8 	.word	0x08024de8

080062b0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff ffe7 	bl	800628c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 80062be:	211c      	movs	r1, #28
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f002 fca3 	bl	8008c0c <_ZdlPvj>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	4a05      	ldr	r2, [pc, #20]	; (80062f0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fe7d 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	08024e94 	.word	0x08024e94

080062f4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ffe7 	bl	80062d0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 8006302:	2104      	movs	r1, #4
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f002 fc81 	bl	8008c0c <_ZdlPvj>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	4a05      	ldr	r2, [pc, #20]	; (8006334 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4618      	mov	r0, r3
 8006326:	f00b f89f 	bl	8011468 <_ZN10UtestShellD1Ev>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	08024eb4 	.word	0x08024eb4

08006338 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff ffe7 	bl	8006314 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8006346:	211c      	movs	r1, #28
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f002 fc5f 	bl	8008c0c <_ZdlPvj>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	4a05      	ldr	r2, [pc, #20]	; (8006378 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe fe39 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	08024f60 	.word	0x08024f60

0800637c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff ffe7 	bl	8006358 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 800638a:	2104      	movs	r1, #4
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f002 fc3d 	bl	8008c0c <_ZdlPvj>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	4a05      	ldr	r2, [pc, #20]	; (80063bc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f00b f85b 	bl	8011468 <_ZN10UtestShellD1Ev>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	08024f80 	.word	0x08024f80

080063c0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff ffe7 	bl	800639c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 80063ce:	211c      	movs	r1, #28
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f002 fc1b 	bl	8008c0c <_ZdlPvj>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	4a05      	ldr	r2, [pc, #20]	; (8006400 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe fdf5 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	0802502c 	.word	0x0802502c

08006404 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ffe7 	bl	80063e0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8006412:	2104      	movs	r1, #4
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f002 fbf9 	bl	8008c0c <_ZdlPvj>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	4a05      	ldr	r2, [pc, #20]	; (8006444 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4618      	mov	r0, r3
 8006436:	f00b f817 	bl	8011468 <_ZN10UtestShellD1Ev>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	0802504c 	.word	0x0802504c

08006448 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff ffe7 	bl	8006424 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8006456:	211c      	movs	r1, #28
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f002 fbd7 	bl	8008c0c <_ZdlPvj>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	4a05      	ldr	r2, [pc, #20]	; (8006488 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe fdb1 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	080250f8 	.word	0x080250f8

0800648c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ffe7 	bl	8006468 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 800649a:	2104      	movs	r1, #4
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f002 fbb5 	bl	8008c0c <_ZdlPvj>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	4a05      	ldr	r2, [pc, #20]	; (80064cc <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4618      	mov	r0, r3
 80064be:	f00a ffd3 	bl	8011468 <_ZN10UtestShellD1Ev>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	08025118 	.word	0x08025118

080064d0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ffe7 	bl	80064ac <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 80064de:	211c      	movs	r1, #28
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f002 fb93 	bl	8008c0c <_ZdlPvj>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	4a05      	ldr	r2, [pc, #20]	; (8006510 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4618      	mov	r0, r3
 8006502:	f7fe fd6d 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	080251c4 	.word	0x080251c4

08006514 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff ffe7 	bl	80064f0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8006522:	2104      	movs	r1, #4
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f002 fb71 	bl	8008c0c <_ZdlPvj>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	4a05      	ldr	r2, [pc, #20]	; (8006554 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4618      	mov	r0, r3
 8006546:	f00a ff8f 	bl	8011468 <_ZN10UtestShellD1Ev>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	080251e4 	.word	0x080251e4

08006558 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff ffe7 	bl	8006534 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8006566:	211c      	movs	r1, #28
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f002 fb4f 	bl	8008c0c <_ZdlPvj>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4618      	mov	r0, r3
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	4a05      	ldr	r2, [pc, #20]	; (8006598 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe fd29 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	08025290 	.word	0x08025290

0800659c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff ffe7 	bl	8006578 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 80065aa:	2104      	movs	r1, #4
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f002 fb2d 	bl	8008c0c <_ZdlPvj>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	4a05      	ldr	r2, [pc, #20]	; (80065dc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f00a ff4b 	bl	8011468 <_ZN10UtestShellD1Ev>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	080252b0 	.word	0x080252b0

080065e0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ffe7 	bl	80065bc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 80065ee:	211c      	movs	r1, #28
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f002 fb0b 	bl	8008c0c <_ZdlPvj>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	4a05      	ldr	r2, [pc, #20]	; (8006620 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe fce5 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	0802535c 	.word	0x0802535c

08006624 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ffe7 	bl	8006600 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8006632:	2104      	movs	r1, #4
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f002 fae9 	bl	8008c0c <_ZdlPvj>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	4a05      	ldr	r2, [pc, #20]	; (8006664 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4618      	mov	r0, r3
 8006656:	f00a ff07 	bl	8011468 <_ZN10UtestShellD1Ev>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	0802537c 	.word	0x0802537c

08006668 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff ffe7 	bl	8006644 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8006676:	211c      	movs	r1, #28
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f002 fac7 	bl	8008c0c <_ZdlPvj>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	4a05      	ldr	r2, [pc, #20]	; (80066a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe fca1 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	08025428 	.word	0x08025428

080066ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff ffe7 	bl	8006688 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 80066ba:	2104      	movs	r1, #4
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f002 faa5 	bl	8008c0c <_ZdlPvj>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	4a05      	ldr	r2, [pc, #20]	; (80066ec <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4618      	mov	r0, r3
 80066de:	f00a fec3 	bl	8011468 <_ZN10UtestShellD1Ev>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	08025448 	.word	0x08025448

080066f0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff ffe7 	bl	80066cc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 80066fe:	211c      	movs	r1, #28
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f002 fa83 	bl	8008c0c <_ZdlPvj>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	4a05      	ldr	r2, [pc, #20]	; (8006730 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe fc5d 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	080254f4 	.word	0x080254f4

08006734 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff ffe7 	bl	8006710 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8006742:	2104      	movs	r1, #4
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f002 fa61 	bl	8008c0c <_ZdlPvj>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4618      	mov	r0, r3
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	4a05      	ldr	r2, [pc, #20]	; (8006774 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4618      	mov	r0, r3
 8006766:	f00a fe7f 	bl	8011468 <_ZN10UtestShellD1Ev>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	08025514 	.word	0x08025514

08006778 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ffe7 	bl	8006754 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8006786:	211c      	movs	r1, #28
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f002 fa3f 	bl	8008c0c <_ZdlPvj>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	4a05      	ldr	r2, [pc, #20]	; (80067b8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe fc19 	bl	8004fe0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	080255c0 	.word	0x080255c0

080067bc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff ffe7 	bl	8006798 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 80067ca:	2104      	movs	r1, #4
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f002 fa1d 	bl	8008c0c <_ZdlPvj>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	4a05      	ldr	r2, [pc, #20]	; (80067fc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f00a fe3b 	bl	8011468 <_ZN10UtestShellD1Ev>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	08025600 	.word	0x08025600

08006800 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff ffe7 	bl	80067dc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 800680e:	211c      	movs	r1, #28
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f002 f9fb 	bl	8008c0c <_ZdlPvj>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	4a05      	ldr	r2, [pc, #20]	; (8006840 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4618      	mov	r0, r3
 8006832:	f7fd fd8d 	bl	8004350 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	080256ac 	.word	0x080256ac

08006844 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ffe7 	bl	8006820 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8006852:	2108      	movs	r1, #8
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f002 f9d9 	bl	8008c0c <_ZdlPvj>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	4a05      	ldr	r2, [pc, #20]	; (8006884 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4618      	mov	r0, r3
 8006876:	f00a fdf7 	bl	8011468 <_ZN10UtestShellD1Ev>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	080256cc 	.word	0x080256cc

08006888 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff ffe7 	bl	8006864 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8006896:	211c      	movs	r1, #28
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f002 f9b7 	bl	8008c0c <_ZdlPvj>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fd fd49 	bl	8004350 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	08025778 	.word	0x08025778

080068cc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff ffe7 	bl	80068a8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 80068da:	2108      	movs	r1, #8
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f002 f995 	bl	8008c0c <_ZdlPvj>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	4a05      	ldr	r2, [pc, #20]	; (800690c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f00a fdb3 	bl	8011468 <_ZN10UtestShellD1Ev>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	08025798 	.word	0x08025798

08006910 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff ffe7 	bl	80068ec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 800691e:	211c      	movs	r1, #28
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f002 f973 	bl	8008c0c <_ZdlPvj>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	4a05      	ldr	r2, [pc, #20]	; (8006950 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4618      	mov	r0, r3
 8006942:	f7fd fd05 	bl	8004350 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	08025844 	.word	0x08025844

08006954 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff ffe7 	bl	8006930 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8006962:	2108      	movs	r1, #8
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f002 f951 	bl	8008c0c <_ZdlPvj>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	4a05      	ldr	r2, [pc, #20]	; (8006994 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4618      	mov	r0, r3
 8006986:	f00a fd6f 	bl	8011468 <_ZN10UtestShellD1Ev>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	08025864 	.word	0x08025864

08006998 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff ffe7 	bl	8006974 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 80069a6:	211c      	movs	r1, #28
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f002 f92f 	bl	8008c0c <_ZdlPvj>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	4a05      	ldr	r2, [pc, #20]	; (80069d8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fd fcc1 	bl	8004350 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	08025910 	.word	0x08025910

080069dc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ffe7 	bl	80069b8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 80069ea:	2108      	movs	r1, #8
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f002 f90d 	bl	8008c0c <_ZdlPvj>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	4a05      	ldr	r2, [pc, #20]	; (8006a1c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f00a fd2b 	bl	8011468 <_ZN10UtestShellD1Ev>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	08025930 	.word	0x08025930

08006a20 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff ffe7 	bl	80069fc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8006a2e:	211c      	movs	r1, #28
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f002 f8eb 	bl	8008c0c <_ZdlPvj>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	4a05      	ldr	r2, [pc, #20]	; (8006a60 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fd fc7d 	bl	8004350 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	080259dc 	.word	0x080259dc

08006a64 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff ffe7 	bl	8006a40 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8006a72:	2108      	movs	r1, #8
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f002 f8c9 	bl	8008c0c <_ZdlPvj>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	4a05      	ldr	r2, [pc, #20]	; (8006aa4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f00a fce7 	bl	8011468 <_ZN10UtestShellD1Ev>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	080259fc 	.word	0x080259fc

08006aa8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff ffe7 	bl	8006a84 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8006ab6:	211c      	movs	r1, #28
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f002 f8a7 	bl	8008c0c <_ZdlPvj>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	4a05      	ldr	r2, [pc, #20]	; (8006ae8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fd fc39 	bl	8004350 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	08025aa8 	.word	0x08025aa8

08006aec <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff ffe7 	bl	8006ac8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8006afa:	2108      	movs	r1, #8
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f002 f885 	bl	8008c0c <_ZdlPvj>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	4a05      	ldr	r2, [pc, #20]	; (8006b2c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f00a fca3 	bl	8011468 <_ZN10UtestShellD1Ev>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	08025ac8 	.word	0x08025ac8

08006b30 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff ffe7 	bl	8006b0c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8006b3e:	211c      	movs	r1, #28
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f002 f863 	bl	8008c0c <_ZdlPvj>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	4a05      	ldr	r2, [pc, #20]	; (8006b70 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fd fbf5 	bl	8004350 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	08025b74 	.word	0x08025b74

08006b74 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff ffe7 	bl	8006b50 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8006b82:	2108      	movs	r1, #8
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f002 f841 	bl	8008c0c <_ZdlPvj>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	4a05      	ldr	r2, [pc, #20]	; (8006bb4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f00a fc5f 	bl	8011468 <_ZN10UtestShellD1Ev>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	08025b94 	.word	0x08025b94

08006bb8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff ffe7 	bl	8006b94 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8006bc6:	211c      	movs	r1, #28
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f002 f81f 	bl	8008c0c <_ZdlPvj>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	4a05      	ldr	r2, [pc, #20]	; (8006bf8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fd fbb1 	bl	8004350 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	08025c40 	.word	0x08025c40

08006bfc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff ffe7 	bl	8006bd8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8006c0a:	2108      	movs	r1, #8
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 fffd 	bl	8008c0c <_ZdlPvj>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	4a05      	ldr	r2, [pc, #20]	; (8006c3c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f00a fc1b 	bl	8011468 <_ZN10UtestShellD1Ev>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4618      	mov	r0, r3
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	08025c60 	.word	0x08025c60

08006c40 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff ffe7 	bl	8006c1c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8006c4e:	211c      	movs	r1, #28
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 ffdb 	bl	8008c0c <_ZdlPvj>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	4a05      	ldr	r2, [pc, #20]	; (8006c80 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fd fb6d 	bl	8004350 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	08025d0c 	.word	0x08025d0c

08006c84 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ffe7 	bl	8006c60 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8006c92:	2108      	movs	r1, #8
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 ffb9 	bl	8008c0c <_ZdlPvj>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <_Z41__static_initialization_and_destruction_0ii>:
}
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	f040 8110 	bne.w	8006ed6 <_Z41__static_initialization_and_destruction_0ii+0x232>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	f040 810a 	bne.w	8006ed6 <_Z41__static_initialization_and_destruction_0ii+0x232>
TEST(RingBuffer_Test_Group, InitTest)
 8006cc2:	48a4      	ldr	r0, [pc, #656]	; (8006f54 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006cc4:	f7fd fb92 	bl	80043ec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8006cc8:	2324      	movs	r3, #36	; 0x24
 8006cca:	9301      	str	r3, [sp, #4]
 8006ccc:	4ba2      	ldr	r3, [pc, #648]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	4ba2      	ldr	r3, [pc, #648]	; (8006f5c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006cd2:	4aa3      	ldr	r2, [pc, #652]	; (8006f60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006cd4:	499f      	ldr	r1, [pc, #636]	; (8006f54 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006cd6:	48a3      	ldr	r0, [pc, #652]	; (8006f64 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8006cd8:	f00c f9c2 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8006cdc:	48a2      	ldr	r0, [pc, #648]	; (8006f68 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006cde:	f7fd fc39 	bl	8004554 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8006ce2:	232e      	movs	r3, #46	; 0x2e
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	4b9c      	ldr	r3, [pc, #624]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	4ba0      	ldr	r3, [pc, #640]	; (8006f6c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8006cec:	4a9c      	ldr	r2, [pc, #624]	; (8006f60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006cee:	499e      	ldr	r1, [pc, #632]	; (8006f68 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006cf0:	489f      	ldr	r0, [pc, #636]	; (8006f70 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8006cf2:	f00c f9b5 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8006cf6:	489f      	ldr	r0, [pc, #636]	; (8006f74 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8006cf8:	f7fd fcb6 	bl	8004668 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8006cfc:	2338      	movs	r3, #56	; 0x38
 8006cfe:	9301      	str	r3, [sp, #4]
 8006d00:	4b95      	ldr	r3, [pc, #596]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	4b9c      	ldr	r3, [pc, #624]	; (8006f78 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8006d06:	4a96      	ldr	r2, [pc, #600]	; (8006f60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006d08:	499a      	ldr	r1, [pc, #616]	; (8006f74 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8006d0a:	489c      	ldr	r0, [pc, #624]	; (8006f7c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8006d0c:	f00c f9a8 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8006d10:	489b      	ldr	r0, [pc, #620]	; (8006f80 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8006d12:	f7fd fd31 	bl	8004778 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8006d16:	2343      	movs	r3, #67	; 0x43
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	4b8f      	ldr	r3, [pc, #572]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	4b99      	ldr	r3, [pc, #612]	; (8006f84 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8006d20:	4a8f      	ldr	r2, [pc, #572]	; (8006f60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006d22:	4997      	ldr	r1, [pc, #604]	; (8006f80 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8006d24:	4898      	ldr	r0, [pc, #608]	; (8006f88 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8006d26:	f00c f99b 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8006d2a:	4898      	ldr	r0, [pc, #608]	; (8006f8c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8006d2c:	f7fd fd90 	bl	8004850 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8006d30:	234c      	movs	r3, #76	; 0x4c
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	4b88      	ldr	r3, [pc, #544]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4b95      	ldr	r3, [pc, #596]	; (8006f90 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8006d3a:	4a89      	ldr	r2, [pc, #548]	; (8006f60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006d3c:	4993      	ldr	r1, [pc, #588]	; (8006f8c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8006d3e:	4895      	ldr	r0, [pc, #596]	; (8006f94 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8006d40:	f00c f98e 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8006d44:	4894      	ldr	r0, [pc, #592]	; (8006f98 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8006d46:	f7fd fe0f 	bl	8004968 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8006d4a:	235c      	movs	r3, #92	; 0x5c
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	4b82      	ldr	r3, [pc, #520]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4b92      	ldr	r3, [pc, #584]	; (8006f9c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8006d54:	4a82      	ldr	r2, [pc, #520]	; (8006f60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006d56:	4990      	ldr	r1, [pc, #576]	; (8006f98 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8006d58:	4891      	ldr	r0, [pc, #580]	; (8006fa0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8006d5a:	f00c f981 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8006d5e:	4891      	ldr	r0, [pc, #580]	; (8006fa4 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8006d60:	f7fd fec0 	bl	8004ae4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8006d64:	2371      	movs	r3, #113	; 0x71
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	4b7b      	ldr	r3, [pc, #492]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	4b8e      	ldr	r3, [pc, #568]	; (8006fa8 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8006d6e:	4a7c      	ldr	r2, [pc, #496]	; (8006f60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006d70:	498c      	ldr	r1, [pc, #560]	; (8006fa4 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8006d72:	488e      	ldr	r0, [pc, #568]	; (8006fac <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8006d74:	f00c f974 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8006d78:	488d      	ldr	r0, [pc, #564]	; (8006fb0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8006d7a:	f7fd ff19 	bl	8004bb0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8006d7e:	2378      	movs	r3, #120	; 0x78
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	4b75      	ldr	r3, [pc, #468]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	4b8b      	ldr	r3, [pc, #556]	; (8006fb4 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8006d88:	4a75      	ldr	r2, [pc, #468]	; (8006f60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006d8a:	4989      	ldr	r1, [pc, #548]	; (8006fb0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8006d8c:	488a      	ldr	r0, [pc, #552]	; (8006fb8 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8006d8e:	f00c f967 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8006d92:	488a      	ldr	r0, [pc, #552]	; (8006fbc <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8006d94:	f7fd fff6 	bl	8004d84 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8006d98:	2380      	movs	r3, #128	; 0x80
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	4b6e      	ldr	r3, [pc, #440]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4b87      	ldr	r3, [pc, #540]	; (8006fc0 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8006da2:	4a6f      	ldr	r2, [pc, #444]	; (8006f60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006da4:	4985      	ldr	r1, [pc, #532]	; (8006fbc <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8006da6:	4887      	ldr	r0, [pc, #540]	; (8006fc4 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8006da8:	f00c f95a 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8006dac:	4886      	ldr	r0, [pc, #536]	; (8006fc8 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8006dae:	f7fe f95f 	bl	8005070 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8006db2:	23b8      	movs	r3, #184	; 0xb8
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	4b68      	ldr	r3, [pc, #416]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	4b84      	ldr	r3, [pc, #528]	; (8006fcc <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006dbc:	4a84      	ldr	r2, [pc, #528]	; (8006fd0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006dbe:	4982      	ldr	r1, [pc, #520]	; (8006fc8 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8006dc0:	4884      	ldr	r0, [pc, #528]	; (8006fd4 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8006dc2:	f00c f94d 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8006dc6:	4884      	ldr	r0, [pc, #528]	; (8006fd8 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8006dc8:	f7fe f9bc 	bl	8005144 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8006dcc:	23ca      	movs	r3, #202	; 0xca
 8006dce:	9301      	str	r3, [sp, #4]
 8006dd0:	4b61      	ldr	r3, [pc, #388]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	4b81      	ldr	r3, [pc, #516]	; (8006fdc <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006dd6:	4a7e      	ldr	r2, [pc, #504]	; (8006fd0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006dd8:	497f      	ldr	r1, [pc, #508]	; (8006fd8 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8006dda:	4881      	ldr	r0, [pc, #516]	; (8006fe0 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8006ddc:	f00c f940 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8006de0:	4880      	ldr	r0, [pc, #512]	; (8006fe4 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8006de2:	f7fe fa73 	bl	80052cc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8006de6:	23d6      	movs	r3, #214	; 0xd6
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	4b5b      	ldr	r3, [pc, #364]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	4b7e      	ldr	r3, [pc, #504]	; (8006fe8 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8006df0:	4a77      	ldr	r2, [pc, #476]	; (8006fd0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006df2:	497c      	ldr	r1, [pc, #496]	; (8006fe4 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8006df4:	487d      	ldr	r0, [pc, #500]	; (8006fec <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8006df6:	f00c f933 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8006dfa:	487d      	ldr	r0, [pc, #500]	; (8006ff0 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8006dfc:	f7fe fb7e 	bl	80054fc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8006e00:	23e6      	movs	r3, #230	; 0xe6
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	4b54      	ldr	r3, [pc, #336]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	4b7a      	ldr	r3, [pc, #488]	; (8006ff4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8006e0a:	4a71      	ldr	r2, [pc, #452]	; (8006fd0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006e0c:	4978      	ldr	r1, [pc, #480]	; (8006ff0 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8006e0e:	487a      	ldr	r0, [pc, #488]	; (8006ff8 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8006e10:	f00c f926 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8006e14:	4879      	ldr	r0, [pc, #484]	; (8006ffc <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8006e16:	f7fe fc25 	bl	8005664 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8006e1a:	23f7      	movs	r3, #247	; 0xf7
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	4b4e      	ldr	r3, [pc, #312]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	4b77      	ldr	r3, [pc, #476]	; (8007000 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8006e24:	4a6a      	ldr	r2, [pc, #424]	; (8006fd0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006e26:	4975      	ldr	r1, [pc, #468]	; (8006ffc <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8006e28:	4876      	ldr	r0, [pc, #472]	; (8007004 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8006e2a:	f00c f919 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8006e2e:	4876      	ldr	r0, [pc, #472]	; (8007008 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8006e30:	f7fe fc84 	bl	800573c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8006e34:	f240 1307 	movw	r3, #263	; 0x107
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	4b47      	ldr	r3, [pc, #284]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4b73      	ldr	r3, [pc, #460]	; (800700c <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8006e40:	4a63      	ldr	r2, [pc, #396]	; (8006fd0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006e42:	4971      	ldr	r1, [pc, #452]	; (8007008 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8006e44:	4872      	ldr	r0, [pc, #456]	; (8007010 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8006e46:	f00c f90b 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8006e4a:	4872      	ldr	r0, [pc, #456]	; (8007014 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8006e4c:	f7fe fd3a 	bl	80058c4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8006e50:	f240 131d 	movw	r3, #285	; 0x11d
 8006e54:	9301      	str	r3, [sp, #4]
 8006e56:	4b40      	ldr	r3, [pc, #256]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	4b6f      	ldr	r3, [pc, #444]	; (8007018 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8006e5c:	4a5c      	ldr	r2, [pc, #368]	; (8006fd0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006e5e:	496d      	ldr	r1, [pc, #436]	; (8007014 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8006e60:	486e      	ldr	r0, [pc, #440]	; (800701c <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8006e62:	f00c f8fd 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8006e66:	486e      	ldr	r0, [pc, #440]	; (8007020 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8006e68:	f7fe fdde 	bl	8005a28 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8006e6c:	f44f 739a 	mov.w	r3, #308	; 0x134
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	4b39      	ldr	r3, [pc, #228]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	4b6b      	ldr	r3, [pc, #428]	; (8007024 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8006e78:	4a55      	ldr	r2, [pc, #340]	; (8006fd0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006e7a:	4969      	ldr	r1, [pc, #420]	; (8007020 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8006e7c:	486a      	ldr	r0, [pc, #424]	; (8007028 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006e7e:	f00c f8ef 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8006e82:	486a      	ldr	r0, [pc, #424]	; (800702c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006e84:	f7fe ff14 	bl	8005cb0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 8006e88:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	4b32      	ldr	r3, [pc, #200]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	4b67      	ldr	r3, [pc, #412]	; (8007030 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8006e94:	4a4e      	ldr	r2, [pc, #312]	; (8006fd0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006e96:	4965      	ldr	r1, [pc, #404]	; (800702c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006e98:	4866      	ldr	r0, [pc, #408]	; (8007034 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006e9a:	f00c f8e1 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8006e9e:	4866      	ldr	r0, [pc, #408]	; (8007038 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8006ea0:	f7ff f848 	bl	8005f34 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 8006ea4:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	4b2b      	ldr	r3, [pc, #172]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4b63      	ldr	r3, [pc, #396]	; (800703c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8006eb0:	4a47      	ldr	r2, [pc, #284]	; (8006fd0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006eb2:	4961      	ldr	r1, [pc, #388]	; (8007038 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8006eb4:	4862      	ldr	r0, [pc, #392]	; (8007040 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8006eb6:	f00c f8d3 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006eba:	4862      	ldr	r0, [pc, #392]	; (8007044 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8006ebc:	f7ff f8e4 	bl	8006088 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 8006ec0:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	4b24      	ldr	r3, [pc, #144]	; (8006f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	4b5f      	ldr	r3, [pc, #380]	; (8007048 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8006ecc:	4a40      	ldr	r2, [pc, #256]	; (8006fd0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006ece:	495d      	ldr	r1, [pc, #372]	; (8007044 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8006ed0:	485e      	ldr	r0, [pc, #376]	; (800704c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8006ed2:	f00c f8c5 	bl	8013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f040 80fe 	bne.w	80070da <_Z41__static_initialization_and_destruction_0ii+0x436>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	f040 80f8 	bne.w	80070da <_Z41__static_initialization_and_destruction_0ii+0x436>
 8006eea:	4858      	ldr	r0, [pc, #352]	; (800704c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8006eec:	f00c f8e2 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8006ef0:	4854      	ldr	r0, [pc, #336]	; (8007044 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8006ef2:	f7ff f987 	bl	8006204 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8006ef6:	4852      	ldr	r0, [pc, #328]	; (8007040 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8006ef8:	f00c f8dc 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8006efc:	484e      	ldr	r0, [pc, #312]	; (8007038 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8006efe:	f7ff f9c5 	bl	800628c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8006f02:	484c      	ldr	r0, [pc, #304]	; (8007034 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006f04:	f00c f8d6 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8006f08:	4848      	ldr	r0, [pc, #288]	; (800702c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8006f0a:	f7ff fa03 	bl	8006314 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8006f0e:	4846      	ldr	r0, [pc, #280]	; (8007028 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006f10:	f00c f8d0 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8006f14:	4842      	ldr	r0, [pc, #264]	; (8007020 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8006f16:	f7ff fa41 	bl	800639c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8006f1a:	4840      	ldr	r0, [pc, #256]	; (800701c <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8006f1c:	f00c f8ca 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8006f20:	483c      	ldr	r0, [pc, #240]	; (8007014 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8006f22:	f7ff fa7f 	bl	8006424 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8006f26:	483a      	ldr	r0, [pc, #232]	; (8007010 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8006f28:	f00c f8c4 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8006f2c:	4836      	ldr	r0, [pc, #216]	; (8007008 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8006f2e:	f7ff fabd 	bl	80064ac <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8006f32:	4834      	ldr	r0, [pc, #208]	; (8007004 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8006f34:	f00c f8be 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8006f38:	4830      	ldr	r0, [pc, #192]	; (8006ffc <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8006f3a:	f7ff fafb 	bl	8006534 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8006f3e:	482e      	ldr	r0, [pc, #184]	; (8006ff8 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8006f40:	f00c f8b8 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8006f44:	482a      	ldr	r0, [pc, #168]	; (8006ff0 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8006f46:	f7ff fb39 	bl	80065bc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8006f4a:	4828      	ldr	r0, [pc, #160]	; (8006fec <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8006f4c:	f00c f8b2 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8006f50:	e07e      	b.n	8007050 <_Z41__static_initialization_and_destruction_0ii+0x3ac>
 8006f52:	bf00      	nop
 8006f54:	2000049c 	.word	0x2000049c
 8006f58:	08021bcc 	.word	0x08021bcc
 8006f5c:	08022264 	.word	0x08022264
 8006f60:	08022270 	.word	0x08022270
 8006f64:	200004b8 	.word	0x200004b8
 8006f68:	200004bc 	.word	0x200004bc
 8006f6c:	08022288 	.word	0x08022288
 8006f70:	200004d8 	.word	0x200004d8
 8006f74:	200004dc 	.word	0x200004dc
 8006f78:	08022298 	.word	0x08022298
 8006f7c:	200004f8 	.word	0x200004f8
 8006f80:	200004fc 	.word	0x200004fc
 8006f84:	080222ac 	.word	0x080222ac
 8006f88:	20000518 	.word	0x20000518
 8006f8c:	2000051c 	.word	0x2000051c
 8006f90:	080222bc 	.word	0x080222bc
 8006f94:	20000538 	.word	0x20000538
 8006f98:	2000053c 	.word	0x2000053c
 8006f9c:	080222d4 	.word	0x080222d4
 8006fa0:	20000558 	.word	0x20000558
 8006fa4:	2000055c 	.word	0x2000055c
 8006fa8:	080222e4 	.word	0x080222e4
 8006fac:	20000578 	.word	0x20000578
 8006fb0:	2000057c 	.word	0x2000057c
 8006fb4:	080222f4 	.word	0x080222f4
 8006fb8:	20000598 	.word	0x20000598
 8006fbc:	2000059c 	.word	0x2000059c
 8006fc0:	08022300 	.word	0x08022300
 8006fc4:	200005b8 	.word	0x200005b8
 8006fc8:	200005c4 	.word	0x200005c4
 8006fcc:	08022310 	.word	0x08022310
 8006fd0:	08022320 	.word	0x08022320
 8006fd4:	200005e0 	.word	0x200005e0
 8006fd8:	200005e4 	.word	0x200005e4
 8006fdc:	08022338 	.word	0x08022338
 8006fe0:	20000600 	.word	0x20000600
 8006fe4:	20000604 	.word	0x20000604
 8006fe8:	08022350 	.word	0x08022350
 8006fec:	20000620 	.word	0x20000620
 8006ff0:	20000624 	.word	0x20000624
 8006ff4:	0802236c 	.word	0x0802236c
 8006ff8:	20000640 	.word	0x20000640
 8006ffc:	20000644 	.word	0x20000644
 8007000:	08022380 	.word	0x08022380
 8007004:	20000660 	.word	0x20000660
 8007008:	20000664 	.word	0x20000664
 800700c:	0802239c 	.word	0x0802239c
 8007010:	20000680 	.word	0x20000680
 8007014:	20000684 	.word	0x20000684
 8007018:	080223b0 	.word	0x080223b0
 800701c:	200006a0 	.word	0x200006a0
 8007020:	200006a4 	.word	0x200006a4
 8007024:	080223cc 	.word	0x080223cc
 8007028:	200006c0 	.word	0x200006c0
 800702c:	200006c4 	.word	0x200006c4
 8007030:	080223e4 	.word	0x080223e4
 8007034:	200006e0 	.word	0x200006e0
 8007038:	200006e4 	.word	0x200006e4
 800703c:	080223f8 	.word	0x080223f8
 8007040:	20000700 	.word	0x20000700
 8007044:	20000704 	.word	0x20000704
 8007048:	08022418 	.word	0x08022418
 800704c:	20000720 	.word	0x20000720
 8007050:	4824      	ldr	r0, [pc, #144]	; (80070e4 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8007052:	f7ff faf7 	bl	8006644 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007056:	4824      	ldr	r0, [pc, #144]	; (80070e8 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8007058:	f00c f82c 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 800705c:	4823      	ldr	r0, [pc, #140]	; (80070ec <_Z41__static_initialization_and_destruction_0ii+0x448>)
 800705e:	f7ff fb35 	bl	80066cc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007062:	4823      	ldr	r0, [pc, #140]	; (80070f0 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8007064:	f00c f826 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8007068:	4822      	ldr	r0, [pc, #136]	; (80070f4 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 800706a:	f7ff fb73 	bl	8006754 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 800706e:	4822      	ldr	r0, [pc, #136]	; (80070f8 <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8007070:	f00c f820 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8007074:	4821      	ldr	r0, [pc, #132]	; (80070fc <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8007076:	f7ff fbb1 	bl	80067dc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 800707a:	4821      	ldr	r0, [pc, #132]	; (8007100 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 800707c:	f00c f81a 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8007080:	4820      	ldr	r0, [pc, #128]	; (8007104 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8007082:	f7ff fbef 	bl	8006864 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8007086:	4820      	ldr	r0, [pc, #128]	; (8007108 <_Z41__static_initialization_and_destruction_0ii+0x464>)
 8007088:	f00c f814 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 800708c:	481f      	ldr	r0, [pc, #124]	; (800710c <_Z41__static_initialization_and_destruction_0ii+0x468>)
 800708e:	f7ff fc2d 	bl	80068ec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007092:	481f      	ldr	r0, [pc, #124]	; (8007110 <_Z41__static_initialization_and_destruction_0ii+0x46c>)
 8007094:	f00c f80e 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 8007098:	481e      	ldr	r0, [pc, #120]	; (8007114 <_Z41__static_initialization_and_destruction_0ii+0x470>)
 800709a:	f7ff fc6b 	bl	8006974 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800709e:	481e      	ldr	r0, [pc, #120]	; (8007118 <_Z41__static_initialization_and_destruction_0ii+0x474>)
 80070a0:	f00c f808 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 80070a4:	481d      	ldr	r0, [pc, #116]	; (800711c <_Z41__static_initialization_and_destruction_0ii+0x478>)
 80070a6:	f7ff fca9 	bl	80069fc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 80070aa:	481d      	ldr	r0, [pc, #116]	; (8007120 <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 80070ac:	f00c f802 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 80070b0:	481c      	ldr	r0, [pc, #112]	; (8007124 <_Z41__static_initialization_and_destruction_0ii+0x480>)
 80070b2:	f7ff fce7 	bl	8006a84 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80070b6:	481c      	ldr	r0, [pc, #112]	; (8007128 <_Z41__static_initialization_and_destruction_0ii+0x484>)
 80070b8:	f00b fffc 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 80070bc:	481b      	ldr	r0, [pc, #108]	; (800712c <_Z41__static_initialization_and_destruction_0ii+0x488>)
 80070be:	f7ff fd25 	bl	8006b0c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 80070c2:	481b      	ldr	r0, [pc, #108]	; (8007130 <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 80070c4:	f00b fff6 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 80070c8:	481a      	ldr	r0, [pc, #104]	; (8007134 <_Z41__static_initialization_and_destruction_0ii+0x490>)
 80070ca:	f7ff fd63 	bl	8006b94 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 80070ce:	481a      	ldr	r0, [pc, #104]	; (8007138 <_Z41__static_initialization_and_destruction_0ii+0x494>)
 80070d0:	f00b fff0 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 80070d4:	4819      	ldr	r0, [pc, #100]	; (800713c <_Z41__static_initialization_and_destruction_0ii+0x498>)
 80070d6:	f7ff fda1 	bl	8006c1c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000604 	.word	0x20000604
 80070e8:	20000600 	.word	0x20000600
 80070ec:	200005e4 	.word	0x200005e4
 80070f0:	200005e0 	.word	0x200005e0
 80070f4:	200005c4 	.word	0x200005c4
 80070f8:	200005b8 	.word	0x200005b8
 80070fc:	2000059c 	.word	0x2000059c
 8007100:	20000598 	.word	0x20000598
 8007104:	2000057c 	.word	0x2000057c
 8007108:	20000578 	.word	0x20000578
 800710c:	2000055c 	.word	0x2000055c
 8007110:	20000558 	.word	0x20000558
 8007114:	2000053c 	.word	0x2000053c
 8007118:	20000538 	.word	0x20000538
 800711c:	2000051c 	.word	0x2000051c
 8007120:	20000518 	.word	0x20000518
 8007124:	200004fc 	.word	0x200004fc
 8007128:	200004f8 	.word	0x200004f8
 800712c:	200004dc 	.word	0x200004dc
 8007130:	200004d8 	.word	0x200004d8
 8007134:	200004bc 	.word	0x200004bc
 8007138:	200004b8 	.word	0x200004b8
 800713c:	2000049c 	.word	0x2000049c

08007140 <_GLOBAL__sub_I_rx_buffer>:
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
 8007144:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007148:	2001      	movs	r0, #1
 800714a:	f7ff fdab 	bl	8006ca4 <_Z41__static_initialization_and_destruction_0ii>
 800714e:	bd80      	pop	{r7, pc}

08007150 <_GLOBAL__sub_D_rx_buffer>:
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
 8007154:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007158:	2000      	movs	r0, #0
 800715a:	f7ff fda3 	bl	8006ca4 <_Z41__static_initialization_and_destruction_0ii>
 800715e:	bd80      	pop	{r7, pc}

08007160 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
    }
 800716c:	4618      	mov	r0, r3
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	69db      	ldr	r3, [r3, #28]
    }
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	695b      	ldr	r3, [r3, #20]
    }
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 80071a8:	b590      	push	{r4, r7, lr}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff ffed 	bl	8007190 <_ZNK10TestResult15getFailureCountEv>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <_ZNK10TestResult9isFailureEv+0x2a>
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff ffcf 	bl	8007160 <_ZNK10TestResult11getRunCountEv>
 80071c2:	4604      	mov	r4, r0
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff ffd7 	bl	8007178 <_ZNK10TestResult15getIgnoredCountEv>
 80071ca:	4603      	mov	r3, r0
 80071cc:	4423      	add	r3, r4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <_ZNK10TestResult9isFailureEv+0x2e>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <_ZNK10TestResult9isFailureEv+0x30>
 80071d6:	2300      	movs	r3, #0
    }
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd90      	pop	{r4, r7, pc}

080071e0 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
    {
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f007 fde6 	bl	800edbc <_ZN10TestOutputC1Ev>
 80071f0:	4a03      	ldr	r2, [pc, #12]	; (8007200 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
    }
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	080263c0 	.word	0x080263c0

08007204 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
    {
 800720c:	4a05      	ldr	r2, [pc, #20]	; (8007224 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4618      	mov	r0, r3
 8007216:	f007 fdef 	bl	800edf8 <_ZN10TestOutputD1Ev>
    }
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4618      	mov	r0, r3
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	080263c0 	.word	0x080263c0

08007228 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
    }
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff ffe7 	bl	8007204 <_ZN17ConsoleTestOutputD1Ev>
 8007236:	2110      	movs	r1, #16
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 fce7 	bl	8008c0c <_ZdlPvj>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8007248:	b5b0      	push	{r4, r5, r7, lr}
 800724a:	b098      	sub	sp, #96	; 0x60
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
    int result = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8007256:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff ffc0 	bl	80071e0 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8007260:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007264:	4935      	ldr	r1, [pc, #212]	; (800733c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8007266:	4618      	mov	r0, r3
 8007268:	f004 f87f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800726c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8007270:	f107 0318 	add.w	r3, r7, #24
 8007274:	2200      	movs	r2, #0
 8007276:	4618      	mov	r0, r3
 8007278:	f001 ff6a 	bl	8009150 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 800727c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007280:	4618      	mov	r0, r3
 8007282:	f004 fc2a 	bl	800bada <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8007286:	f107 0318 	add.w	r3, r7, #24
 800728a:	2101      	movs	r1, #1
 800728c:	4618      	mov	r0, r3
 800728e:	f001 ff2f 	bl	80090f0 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8007292:	f009 fb21 	bl	80108d8 <_ZN12TestRegistry18getCurrentRegistryEv>
 8007296:	4603      	mov	r3, r0
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	3234      	adds	r2, #52	; 0x34
 800729c:	6812      	ldr	r2, [r2, #0]
 800729e:	f107 0118 	add.w	r1, r7, #24
 80072a2:	4618      	mov	r0, r3
 80072a4:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80072a6:	f009 fb17 	bl	80108d8 <_ZN12TestRegistry18getCurrentRegistryEv>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f107 0008 	add.w	r0, r7, #8
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	f000 f844 	bl	8007340 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 80072b8:	f107 0308 	add.w	r3, r7, #8
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f899 	bl	80073f4 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 80072c2:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80072c4:	f107 0308 	add.w	r3, r7, #8
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 f863 	bl	8007394 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 80072ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10c      	bne.n	80072ee <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 80072d4:	f107 0318 	add.w	r3, r7, #24
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f002 f83a 	bl	8009354 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 80072e0:	4602      	mov	r2, r0
 80072e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80072e6:	4611      	mov	r1, r2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f007 fe27 	bl	800ef3c <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 80072ee:	f009 faf3 	bl	80108d8 <_ZN12TestRegistry18getCurrentRegistryEv>
 80072f2:	4604      	mov	r4, r0
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	3344      	adds	r3, #68	; 0x44
 80072f8:	681d      	ldr	r5, [r3, #0]
 80072fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80072fe:	490f      	ldr	r1, [pc, #60]	; (800733c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8007300:	4618      	mov	r0, r3
 8007302:	f004 f832 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8007306:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800730a:	4619      	mov	r1, r3
 800730c:	4620      	mov	r0, r4
 800730e:	47a8      	blx	r5
 8007310:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007314:	4618      	mov	r0, r3
 8007316:	f004 fbe0 	bl	800bada <_ZN12SimpleStringD1Ev>
    return result;
 800731a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800731c:	f107 0318 	add.w	r3, r7, #24
 8007320:	4618      	mov	r0, r3
 8007322:	f001 ff4d 	bl	80091c0 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8007326:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff ff6a 	bl	8007204 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8007330:	4623      	mov	r3, r4
}
 8007332:	4618      	mov	r0, r3
 8007334:	3760      	adds	r7, #96	; 0x60
 8007336:	46bd      	mov	sp, r7
 8007338:	bdb0      	pop	{r4, r5, r7, pc}
 800733a:	bf00      	nop
 800733c:	08022430 	.word	0x08022430

08007340 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8007340:	b590      	push	{r4, r7, lr}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 800734e:	4a0f      	ldr	r2, [pc, #60]	; (800738c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	605a      	str	r2, [r3, #4]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	609a      	str	r2, [r3, #8]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8007366:	2241      	movs	r2, #65	; 0x41
 8007368:	4909      	ldr	r1, [pc, #36]	; (8007390 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 800736a:	2038      	movs	r0, #56	; 0x38
 800736c:	f001 fc3a 	bl	8008be4 <_ZnwjPKci>
 8007370:	4604      	mov	r4, r0
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	4620      	mov	r0, r4
 8007378:	f00c f84a 	bl	8013410 <_ZN20CommandLineArgumentsC1EiPKPKc>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	609c      	str	r4, [r3, #8]
}
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	bd90      	pop	{r4, r7, pc}
 800738a:	bf00      	nop
 800738c:	08025d4c 	.word	0x08025d4c
 8007390:	08022444 	.word	0x08022444

08007394 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	4a0c      	ldr	r2, [pc, #48]	; (80073d0 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	3204      	adds	r2, #4
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	4790      	blx	r2
    delete output_;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	3204      	adds	r2, #4
 80073c0:	6812      	ldr	r2, [r2, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	4790      	blx	r2
}
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	08025d4c 	.word	0x08025d4c

080073d4 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
}
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff ffd9 	bl	8007394 <_ZN21CommandLineTestRunnerD1Ev>
 80073e2:	2110      	movs	r1, #16
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fc11 	bl	8008c0c <_ZdlPvj>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 80073f4:	b5b0      	push	{r4, r5, r7, lr}
 80073f6:	b08c      	sub	sp, #48	; 0x30
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 80073fc:	2301      	movs	r3, #1
 80073fe:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8007400:	f107 031c 	add.w	r3, r7, #28
 8007404:	4929      	ldr	r1, [pc, #164]	; (80074ac <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8007406:	4618      	mov	r0, r3
 8007408:	f003 ffaf 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800740c:	f107 021c 	add.w	r2, r7, #28
 8007410:	f107 0308 	add.w	r3, r7, #8
 8007414:	4611      	mov	r1, r2
 8007416:	4618      	mov	r0, r3
 8007418:	f008 fe1c 	bl	8010054 <_ZN16SetPointerPluginC1ERK12SimpleString>
 800741c:	f107 031c 	add.w	r3, r7, #28
 8007420:	4618      	mov	r0, r3
 8007422:	f004 fb5a 	bl	800bada <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3334      	adds	r3, #52	; 0x34
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f107 0108 	add.w	r1, r7, #8
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	333c      	adds	r3, #60	; 0x3c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4610      	mov	r0, r2
 800744c:	4798      	blx	r3
 800744e:	4603      	mov	r3, r0
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa3e 	bl	80078d4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f8ac 	bl	80075bc <_ZN21CommandLineTestRunner11runAllTestsEv>
 8007464:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68dd      	ldr	r5, [r3, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3344      	adds	r3, #68	; 0x44
 8007472:	681c      	ldr	r4, [r3, #0]
 8007474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007478:	490c      	ldr	r1, [pc, #48]	; (80074ac <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800747a:	4618      	mov	r0, r3
 800747c:	f003 ff75 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8007480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007484:	4619      	mov	r1, r3
 8007486:	4628      	mov	r0, r5
 8007488:	47a0      	blx	r4
 800748a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800748e:	4618      	mov	r0, r3
 8007490:	f004 fb23 	bl	800bada <_ZN12SimpleStringD1Ev>
    return testResult;
 8007494:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8007496:	f107 0308 	add.w	r3, r7, #8
 800749a:	4618      	mov	r0, r3
 800749c:	f000 faaa 	bl	80079f4 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80074a0:	4623      	mov	r3, r4
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3730      	adds	r7, #48	; 0x30
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bdb0      	pop	{r4, r5, r7, pc}
 80074aa:	bf00      	nop
 80074ac:	08022468 	.word	0x08022468

080074b0 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80074b0:	b5b0      	push	{r4, r5, r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68dd      	ldr	r5, [r3, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3330      	adds	r3, #48	; 0x30
 80074c4:	681c      	ldr	r4, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f00c fce0 	bl	8013e90 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 80074d0:	4603      	mov	r3, r0
 80074d2:	4619      	mov	r1, r3
 80074d4:	4628      	mov	r0, r5
 80074d6:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68dd      	ldr	r5, [r3, #12]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	332c      	adds	r3, #44	; 0x2c
 80074e4:	681c      	ldr	r4, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f00c fcdc 	bl	8013ea8 <_ZNK20CommandLineArguments14getNameFiltersEv>
 80074f0:	4603      	mov	r3, r0
 80074f2:	4619      	mov	r1, r3
 80074f4:	4628      	mov	r0, r5
 80074f6:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f00c fc2b 	bl	8013d58 <_ZNK20CommandLineArguments9isVerboseEv>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3320      	adds	r3, #32
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2101      	movs	r1, #1
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4618      	mov	r0, r3
 8007522:	f00c fc25 	bl	8013d70 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d009      	beq.n	8007540 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3320      	adds	r3, #32
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2102      	movs	r1, #2
 800753c:	4610      	mov	r0, r2
 800753e:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	4618      	mov	r0, r3
 8007546:	f00c fc1f 	bl	8013d88 <_ZNK20CommandLineArguments7isColorEv>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3324      	adds	r3, #36	; 0x24
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4610      	mov	r0, r2
 8007560:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f00c fc4a 	bl	8013e00 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3360      	adds	r3, #96	; 0x60
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4610      	mov	r0, r2
 8007582:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	4618      	mov	r0, r3
 800758a:	f00c fc2d 	bl	8013de8 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d004      	beq.n	800759e <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	4618      	mov	r0, r3
 800759a:	f009 fa19 	bl	80109d0 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f00c fc50 	bl	8013e48 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80075ae:	f00b fadb 	bl	8012b68 <_ZN10UtestShell14setCrashOnFailEv>
}
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080075bc <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 80075bc:	b5b0      	push	{r4, r5, r7, lr}
 80075be:	b094      	sub	sp, #80	; 0x50
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff ff73 	bl	80074b0 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	4618      	mov	r0, r3
 80075dc:	f00c fc1c 	bl	8013e18 <_ZNK20CommandLineArguments14getRepeatCountEv>
 80075e0:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f00c fbda 	bl	8013da0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d019      	beq.n	8007626 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	f107 0308 	add.w	r3, r7, #8
 80075fa:	4611      	mov	r1, r2
 80075fc:	4618      	mov	r0, r3
 80075fe:	f009 fbaf 	bl	8010d60 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3320      	adds	r3, #32
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f107 0108 	add.w	r1, r7, #8
 8007614:	4610      	mov	r0, r2
 8007616:	4798      	blx	r3
        return 0;
 8007618:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800761a:	f107 0308 	add.w	r3, r7, #8
 800761e:	4618      	mov	r0, r3
 8007620:	f009 fbd6 	bl	8010dd0 <_ZN10TestResultD1Ev>
 8007624:	e0e1      	b.n	80077ea <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	4618      	mov	r0, r3
 800762c:	f00c fbc4 	bl	8013db8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d019      	beq.n	800766a <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	f107 0308 	add.w	r3, r7, #8
 800763e:	4611      	mov	r1, r2
 8007640:	4618      	mov	r0, r3
 8007642:	f009 fb8d 	bl	8010d60 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3324      	adds	r3, #36	; 0x24
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f107 0108 	add.w	r1, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
        return 0;
 800765c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800765e:	f107 0308 	add.w	r3, r7, #8
 8007662:	4618      	mov	r0, r3
 8007664:	f009 fbb4 	bl	8010dd0 <_ZN10TestResultD1Ev>
 8007668:	e0bf      	b.n	80077ea <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	4618      	mov	r0, r3
 8007670:	f00c fbae 	bl	8013dd0 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d019      	beq.n	80076ae <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	f107 0308 	add.w	r3, r7, #8
 8007682:	4611      	mov	r1, r2
 8007684:	4618      	mov	r0, r3
 8007686:	f009 fb6b 	bl	8010d60 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3328      	adds	r3, #40	; 0x28
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f107 0108 	add.w	r1, r7, #8
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
        return 0;
 80076a0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80076a2:	f107 0308 	add.w	r3, r7, #8
 80076a6:	4618      	mov	r0, r3
 80076a8:	f009 fb92 	bl	8010dd0 <_ZN10TestResultD1Ev>
 80076ac:	e09d      	b.n	80077ea <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f00c fbbc 	bl	8013e30 <_ZNK20CommandLineArguments11isReversingEv>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d008      	beq.n	80076d0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	331c      	adds	r3, #28
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3

    if (arguments_->isShuffling())
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f00c fbc3 	bl	8013e60 <_ZNK20CommandLineArguments11isShufflingEv>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d023      	beq.n	8007728 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	332c      	adds	r3, #44	; 0x2c
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4941      	ldr	r1, [pc, #260]	; (80077f4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 80076f0:	4610      	mov	r0, r2
 80076f2:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685d      	ldr	r5, [r3, #4]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3334      	adds	r3, #52	; 0x34
 8007700:	681c      	ldr	r4, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	4618      	mov	r0, r3
 8007708:	f00c fbb6 	bl	8013e78 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800770c:	4603      	mov	r3, r0
 800770e:	4619      	mov	r1, r3
 8007710:	4628      	mov	r0, r5
 8007712:	47a0      	blx	r4
        output_->print("\n");
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	332c      	adds	r3, #44	; 0x2c
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4935      	ldr	r1, [pc, #212]	; (80077f8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8007724:	4610      	mov	r0, r2
 8007726:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8007728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800772e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007730:	429a      	cmp	r2, r3
 8007732:	bf8c      	ite	hi
 8007734:	2301      	movhi	r3, #1
 8007736:	2300      	movls	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d04e      	beq.n	80077dc <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	4618      	mov	r0, r3
 8007744:	f00c fb8c 	bl	8013e60 <_ZNK20CommandLineArguments11isShufflingEv>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00f      	beq.n	800776e <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68dd      	ldr	r5, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3318      	adds	r3, #24
 800775a:	681c      	ldr	r4, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	4618      	mov	r0, r3
 8007762:	f00c fb89 	bl	8013e78 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8007766:	4603      	mov	r3, r0
 8007768:	4619      	mov	r1, r3
 800776a:	4628      	mov	r0, r5
 800776c:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6858      	ldr	r0, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3340      	adds	r3, #64	; 0x40
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800777e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007780:	4798      	blx	r3
        TestResult tr(*output_);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	f107 0308 	add.w	r3, r7, #8
 800778a:	4611      	mov	r1, r2
 800778c:	4618      	mov	r0, r3
 800778e:	f009 fae7 	bl	8010d60 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3314      	adds	r3, #20
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f107 0108 	add.w	r1, r7, #8
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 80077a8:	f107 0308 	add.w	r3, r7, #8
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff fcef 	bl	8007190 <_ZNK10TestResult15getFailureCountEv>
 80077b2:	4602      	mov	r2, r0
 80077b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077b6:	4413      	add	r3, r2
 80077b8:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 80077ba:	f107 0308 	add.w	r3, r7, #8
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff fcf2 	bl	80071a8 <_ZNK10TestResult9isFailureEv>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 80077ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077cc:	3301      	adds	r3, #1
 80077ce:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 80077d0:	f107 0308 	add.w	r3, r7, #8
 80077d4:	4618      	mov	r0, r3
 80077d6:	f009 fafb 	bl	8010dd0 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 80077da:	e7a5      	b.n	8007728 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 80077dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 80077e2:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80077e4:	e000      	b.n	80077e8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 80077e6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80077e8:	bf00      	nop
 80077ea:	4623      	mov	r3, r4
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3750      	adds	r7, #80	; 0x50
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bdb0      	pop	{r4, r5, r7, pc}
 80077f4:	0802247c 	.word	0x0802247c
 80077f8:	080224a8 	.word	0x080224a8

080077fc <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 80077fc:	b590      	push	{r4, r7, lr}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8007804:	229d      	movs	r2, #157	; 0x9d
 8007806:	4906      	ldr	r1, [pc, #24]	; (8007820 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8007808:	201c      	movs	r0, #28
 800780a:	f001 f9eb 	bl	8008be4 <_ZnwjPKci>
 800780e:	4604      	mov	r4, r0
 8007810:	4620      	mov	r0, r4
 8007812:	f005 f955 	bl	800cac0 <_ZN18TeamCityTestOutputC1Ev>
 8007816:	4623      	mov	r3, r4
}
 8007818:	4618      	mov	r0, r3
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	bd90      	pop	{r4, r7, pc}
 8007820:	08022444 	.word	0x08022444

08007824 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8007824:	b590      	push	{r4, r7, lr}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 800782e:	22a2      	movs	r2, #162	; 0xa2
 8007830:	490a      	ldr	r1, [pc, #40]	; (800785c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8007832:	2014      	movs	r0, #20
 8007834:	f001 f9d6 	bl	8008be4 <_ZnwjPKci>
 8007838:	4604      	mov	r4, r0
 800783a:	4620      	mov	r0, r4
 800783c:	f000 f980 	bl	8007b40 <_ZN15JUnitTestOutputC1Ev>
 8007840:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 fbb2 	bl	8007fb4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8007850:	68fb      	ldr	r3, [r7, #12]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	bd90      	pop	{r4, r7, pc}
 800785a:	bf00      	nop
 800785c:	08022444 	.word	0x08022444

08007860 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8007860:	b590      	push	{r4, r7, lr}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8007868:	22ab      	movs	r2, #171	; 0xab
 800786a:	4906      	ldr	r1, [pc, #24]	; (8007884 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 800786c:	2010      	movs	r0, #16
 800786e:	f001 f9b9 	bl	8008be4 <_ZnwjPKci>
 8007872:	4604      	mov	r4, r0
 8007874:	4620      	mov	r0, r4
 8007876:	f7ff fcb3 	bl	80071e0 <_ZN17ConsoleTestOutputC1Ev>
 800787a:	4623      	mov	r3, r4
}
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	bd90      	pop	{r4, r7, pc}
 8007884:	08022444 	.word	0x08022444

08007888 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8007888:	b590      	push	{r4, r7, lr}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8007894:	22b0      	movs	r2, #176	; 0xb0
 8007896:	490e      	ldr	r1, [pc, #56]	; (80078d0 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8007898:	2018      	movs	r0, #24
 800789a:	f001 f9a3 	bl	8008be4 <_ZnwjPKci>
 800789e:	4604      	mov	r4, r0
 80078a0:	4620      	mov	r0, r4
 80078a2:	f007 ff83 	bl	800f7ac <_ZN19CompositeTestOutputC1Ev>
 80078a6:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	335c      	adds	r3, #92	; 0x5c
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68b9      	ldr	r1, [r7, #8]
 80078b2:	6978      	ldr	r0, [r7, #20]
 80078b4:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3360      	adds	r3, #96	; 0x60
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	6978      	ldr	r0, [r7, #20]
 80078c2:	4798      	blx	r3
  return composite;
 80078c4:	697b      	ldr	r3, [r7, #20]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd90      	pop	{r4, r7, pc}
 80078ce:	bf00      	nop
 80078d0:	08022444 	.word	0x08022444

080078d4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 80078d4:	b5b0      	push	{r4, r5, r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f00b fe4f 	bl	8013588 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f083 0301 	eor.w	r3, r3, #1
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d029      	beq.n	800794a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3310      	adds	r3, #16
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
 8007902:	4602      	mov	r2, r0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685d      	ldr	r5, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	332c      	adds	r3, #44	; 0x2c
 8007914:	681c      	ldr	r4, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	4618      	mov	r0, r3
 800791c:	f00c fa10 	bl	8013d40 <_ZNK20CommandLineArguments8needHelpEv>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d006      	beq.n	8007934 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	4618      	mov	r0, r3
 800792c:	f00c f9fa 	bl	8013d24 <_ZNK20CommandLineArguments4helpEv>
 8007930:	4603      	mov	r3, r0
 8007932:	e005      	b.n	8007940 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	4618      	mov	r0, r3
 800793a:	f00c f9e5 	bl	8013d08 <_ZNK20CommandLineArguments5usageEv>
 800793e:	4603      	mov	r3, r0
 8007940:	4619      	mov	r1, r3
 8007942:	4628      	mov	r0, r5
 8007944:	47a0      	blx	r4
    return false;
 8007946:	2300      	movs	r3, #0
 8007948:	e050      	b.n	80079ec <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	4618      	mov	r0, r3
 8007950:	f00d f84c 	bl	80149ec <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d02c      	beq.n	80079b4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	330c      	adds	r3, #12
 8007960:	681c      	ldr	r4, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	4618      	mov	r0, r3
 8007968:	f00d f864 	bl	8014a34 <_ZNK20CommandLineArguments14getPackageNameEv>
 800796c:	4603      	mov	r3, r0
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	47a0      	blx	r4
 8007974:	4602      	mov	r2, r0
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	4618      	mov	r0, r3
 8007980:	f00c f9ea 	bl	8013d58 <_ZNK20CommandLineArguments9isVerboseEv>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d02f      	beq.n	80079ea <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3314      	adds	r3, #20
 8007990:	681c      	ldr	r4, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685d      	ldr	r5, [r3, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3310      	adds	r3, #16
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	461a      	mov	r2, r3
 80079a6:	4629      	mov	r1, r5
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	47a0      	blx	r4
 80079ac:	4602      	mov	r2, r0
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	605a      	str	r2, [r3, #4]
 80079b2:	e01a      	b.n	80079ea <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f00d f829 	bl	8014a10 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d009      	beq.n	80079d8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
 80079d0:	4602      	mov	r2, r0
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	605a      	str	r2, [r3, #4]
 80079d6:	e008      	b.n	80079ea <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3310      	adds	r3, #16
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
 80079e4:	4602      	mov	r2, r0
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	605a      	str	r2, [r3, #4]
  return true;
 80079ea:	2301      	movs	r3, #1
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bdb0      	pop	{r4, r5, r7, pc}

080079f4 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	4a05      	ldr	r2, [pc, #20]	; (8007a14 <_ZN16SetPointerPluginD1Ev+0x20>)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f008 f9e7 	bl	800fdd8 <_ZN10TestPluginD1Ev>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	080264cc 	.word	0x080264cc

08007a18 <_ZN16SetPointerPluginD0Ev>:
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff ffe7 	bl	80079f4 <_ZN16SetPointerPluginD1Ev>
 8007a26:	2114      	movs	r1, #20
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f001 f8ef 	bl	8008c0c <_ZdlPvj>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	691b      	ldr	r3, [r3, #16]
    }
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4910      	ldr	r1, [pc, #64]	; (8007a9c <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f003 fc84 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	609a      	str	r2, [r3, #8]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	60da      	str	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	741a      	strb	r2, [r3, #16]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3314      	adds	r3, #20
 8007a78:	4908      	ldr	r1, [pc, #32]	; (8007a9c <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f003 fc75 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	61da      	str	r2, [r3, #28]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	621a      	str	r2, [r3, #32]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	080224ac 	.word	0x080224ac

08007aa0 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	605a      	str	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	609a      	str	r2, [r3, #8]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	60da      	str	r2, [r3, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	611a      	str	r2, [r3, #16]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3314      	adds	r3, #20
 8007aca:	4907      	ldr	r1, [pc, #28]	; (8007ae8 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8007acc:	4618      	mov	r0, r3
 8007ace:	f003 fc4c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	61da      	str	r2, [r3, #28]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	621a      	str	r2, [r3, #32]
    {
    }
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	080224ac 	.word	0x080224ac

08007aec <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3314      	adds	r3, #20
 8007af8:	4618      	mov	r0, r3
 8007afa:	f003 ffee 	bl	800bada <_ZN12SimpleStringD1Ev>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff ffc4 	bl	8007aa0 <_ZN20JUnitTestGroupResultC1Ev>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3328      	adds	r3, #40	; 0x28
 8007b1c:	4907      	ldr	r1, [pc, #28]	; (8007b3c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f003 fc23 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3330      	adds	r3, #48	; 0x30
 8007b28:	4904      	ldr	r1, [pc, #16]	; (8007b3c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f003 fc1d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	080224ac 	.word	0x080224ac

08007b40 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8007b40:	b590      	push	{r4, r7, lr}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f007 f936 	bl	800edbc <_ZN10TestOutputC1Ev>
 8007b50:	4a09      	ldr	r2, [pc, #36]	; (8007b78 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	224d      	movs	r2, #77	; 0x4d
 8007b58:	4908      	ldr	r1, [pc, #32]	; (8007b7c <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8007b5a:	2038      	movs	r0, #56	; 0x38
 8007b5c:	f001 f842 	bl	8008be4 <_ZnwjPKci>
 8007b60:	4604      	mov	r4, r0
 8007b62:	4620      	mov	r0, r4
 8007b64:	f7ff ffd0 	bl	8007b08 <_ZN19JUnitTestOutputImplC1Ev>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	611c      	str	r4, [r3, #16]
{
}
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd90      	pop	{r4, r7, pc}
 8007b76:	bf00      	nop
 8007b78:	08025d6c 	.word	0x08025d6c
 8007b7c:	080224b0 	.word	0x080224b0

08007b80 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3330      	adds	r3, #48	; 0x30
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f003 ffa4 	bl	800bada <_ZN12SimpleStringD1Ev>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3328      	adds	r3, #40	; 0x28
 8007b96:	4618      	mov	r0, r3
 8007b98:	f003 ff9f 	bl	800bada <_ZN12SimpleStringD1Ev>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff ffa4 	bl	8007aec <_ZN20JUnitTestGroupResultD1Ev>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8007bb0:	b590      	push	{r4, r7, lr}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	4a0c      	ldr	r2, [pc, #48]	; (8007bec <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f838 	bl	8007c34 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691c      	ldr	r4, [r3, #16]
 8007bc8:	2c00      	cmp	r4, #0
 8007bca:	d006      	beq.n	8007bda <_ZN15JUnitTestOutputD1Ev+0x2a>
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f7ff ffd7 	bl	8007b80 <_ZN19JUnitTestOutputImplD1Ev>
 8007bd2:	2138      	movs	r1, #56	; 0x38
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f001 f819 	bl	8008c0c <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f007 f90b 	bl	800edf8 <_ZN10TestOutputD1Ev>
}
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd90      	pop	{r4, r7, pc}
 8007bec:	08025d6c 	.word	0x08025d6c

08007bf0 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
}
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff ffd9 	bl	8007bb0 <_ZN15JUnitTestOutputD1Ev>
 8007bfe:	2114      	movs	r1, #20
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 f803 	bl	8008c0c <_ZdlPvj>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3314      	adds	r3, #20
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f003 ff5c 	bl	800bada <_ZN12SimpleStringD1Ev>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f003 ff58 	bl	800bada <_ZN12SimpleStringD1Ev>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8007c34:	b590      	push	{r4, r7, lr}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	f103 0414 	add.w	r4, r3, #20
 8007c54:	f107 0308 	add.w	r3, r7, #8
 8007c58:	491d      	ldr	r1, [pc, #116]	; (8007cd0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f003 fb85 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8007c60:	f107 0308 	add.w	r3, r7, #8
 8007c64:	4619      	mov	r1, r3
 8007c66:	4620      	mov	r0, r4
 8007c68:	f003 fbeb 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 8007c6c:	f107 0308 	add.w	r3, r7, #8
 8007c70:	4618      	mov	r0, r3
 8007c72:	f003 ff32 	bl	800bada <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	617b      	str	r3, [r7, #20]
    while (cur) {
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d018      	beq.n	8007cb6 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d004      	beq.n	8007c9c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	3204      	adds	r2, #4
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	4790      	blx	r2
        delete cur;
 8007c9c:	697c      	ldr	r4, [r7, #20]
 8007c9e:	2c00      	cmp	r4, #0
 8007ca0:	d006      	beq.n	8007cb0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f7ff ffb4 	bl	8007c10 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8007ca8:	2128      	movs	r1, #40	; 0x28
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 ffae 	bl	8008c0c <_ZdlPvj>
        cur = tmp;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	617b      	str	r3, [r7, #20]
    while (cur) {
 8007cb4:	e7e3      	b.n	8007c7e <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd90      	pop	{r4, r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	080224ac 	.word	0x080224ac

08007cd4 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8007cfe:	b590      	push	{r4, r7, lr}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	6a1c      	ldr	r4, [r3, #32]
 8007d0e:	6838      	ldr	r0, [r7, #0]
 8007d10:	f009 f9c6 	bl	80110a0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8007d14:	4603      	mov	r3, r0
 8007d16:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	6a1c      	ldr	r4, [r3, #32]
 8007d1e:	6838      	ldr	r0, [r7, #0]
 8007d20:	f7ff fe8a 	bl	8007a38 <_ZNK10TestResult13getCheckCountEv>
 8007d24:	4603      	mov	r3, r0
 8007d26:	6223      	str	r3, [r4, #32]
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd90      	pop	{r4, r7, pc}

08007d30 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8007d46:	b590      	push	{r4, r7, lr}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691c      	ldr	r4, [r3, #16]
 8007d54:	6838      	ldr	r0, [r7, #0]
 8007d56:	f009 f9af 	bl	80110b8 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3364      	adds	r3, #100	; 0x64
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
    resetTestGroupResult();
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff ff62 	bl	8007c34 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd90      	pop	{r4, r7, pc}

08007d78 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8007d78:	b590      	push	{r4, r7, lr}
 8007d7a:	b089      	sub	sp, #36	; 0x24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	3201      	adds	r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	f103 0414 	add.w	r4, r3, #20
 8007d94:	f107 0308 	add.w	r3, r7, #8
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f009 fcef 	bl	801177e <_ZNK10UtestShell8getGroupEv>
 8007da0:	f107 0308 	add.w	r3, r7, #8
 8007da4:	4619      	mov	r1, r3
 8007da6:	4620      	mov	r0, r4
 8007da8:	f003 fb4b 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 8007dac:	f107 0308 	add.w	r3, r7, #8
 8007db0:	4618      	mov	r0, r3
 8007db2:	f003 fe92 	bl	800bada <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8007db6:	4b3c      	ldr	r3, [pc, #240]	; (8007ea8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4798      	blx	r3
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d110      	bne.n	8007df0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8007dce:	2288      	movs	r2, #136	; 0x88
 8007dd0:	4936      	ldr	r1, [pc, #216]	; (8007eac <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8007dd2:	2028      	movs	r0, #40	; 0x28
 8007dd4:	f000 ff06 	bl	8008be4 <_ZnwjPKci>
 8007dd8:	4604      	mov	r4, r0
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f7ff fe38 	bl	8007a50 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8007de4:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	6912      	ldr	r2, [r2, #16]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	61d3      	str	r3, [r2, #28]
 8007dee:	e013      	b.n	8007e18 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8007df0:	228b      	movs	r2, #139	; 0x8b
 8007df2:	492e      	ldr	r1, [pc, #184]	; (8007eac <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8007df4:	2028      	movs	r0, #40	; 0x28
 8007df6:	f000 fef5 	bl	8008be4 <_ZnwjPKci>
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f7ff fe27 	bl	8007a50 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	6a1a      	ldr	r2, [r3, #32]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e16:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	461c      	mov	r4, r3
 8007e20:	f107 0310 	add.w	r3, r7, #16
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f009 fc9a 	bl	8011760 <_ZNK10UtestShell7getNameEv>
 8007e2c:	f107 0310 	add.w	r3, r7, #16
 8007e30:	4619      	mov	r1, r3
 8007e32:	4620      	mov	r0, r4
 8007e34:	f003 fb05 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 8007e38:	f107 0310 	add.w	r3, r7, #16
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f003 fe4c 	bl	800bada <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	f103 0414 	add.w	r4, r3, #20
 8007e4c:	f107 0318 	add.w	r3, r7, #24
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f009 fd55 	bl	8011902 <_ZNK10UtestShell7getFileEv>
 8007e58:	f107 0318 	add.w	r3, r7, #24
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f003 faef 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 8007e64:	f107 0318 	add.w	r3, r7, #24
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f003 fe36 	bl	800bada <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	6a1c      	ldr	r4, [r3, #32]
 8007e74:	6838      	ldr	r0, [r7, #0]
 8007e76:	f009 fd53 	bl	8011920 <_ZNK10UtestShell13getLineNumberEv>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3318      	adds	r3, #24
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6838      	ldr	r0, [r7, #0]
 8007e88:	4798      	blx	r3
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	f083 0301 	eor.w	r3, r3, #1
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d004      	beq.n	8007ea0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	741a      	strb	r2, [r3, #16]
    }
}
 8007ea0:	bf00      	nop
 8007ea2:	3724      	adds	r7, #36	; 0x24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd90      	pop	{r4, r7, pc}
 8007ea8:	200000a8 	.word	0x200000a8
 8007eac:	080224b0 	.word	0x080224b0

08007eb0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08a      	sub	sp, #40	; 0x28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8007ebc:	f107 0310 	add.w	r3, r7, #16
 8007ec0:	4928      	ldr	r1, [pc, #160]	; (8007f64 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f003 fa51 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	3328      	adds	r3, #40	; 0x28
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f003 fdf2 	bl	800bab8 <_ZNK12SimpleString7isEmptyEv>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f083 0301 	eor.w	r3, r3, #1
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00f      	beq.n	8007f00 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8007ee8:	f107 0310 	add.w	r3, r7, #16
 8007eec:	4611      	mov	r1, r2
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f003 fe70 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8007ef4:	f107 0310 	add.w	r3, r7, #16
 8007ef8:	491b      	ldr	r1, [pc, #108]	; (8007f68 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8007efa:	4618      	mov	r0, r3
 8007efc:	f003 fe7c 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8007f00:	f107 0310 	add.w	r3, r7, #16
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f003 fe64 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3384      	adds	r3, #132	; 0x84
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f107 0018 	add.w	r0, r7, #24
 8007f18:	f107 0210 	add.w	r2, r7, #16
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	4798      	blx	r3
 8007f20:	f107 0320 	add.w	r3, r7, #32
 8007f24:	4911      	ldr	r1, [pc, #68]	; (8007f6c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8007f26:	4618      	mov	r0, r3
 8007f28:	f003 fa1f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f107 0220 	add.w	r2, r7, #32
 8007f32:	f107 0118 	add.w	r1, r7, #24
 8007f36:	4618      	mov	r0, r3
 8007f38:	f003 fe31 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 8007f3c:	f107 0320 	add.w	r3, r7, #32
 8007f40:	4618      	mov	r0, r3
 8007f42:	f003 fdca 	bl	800bada <_ZN12SimpleStringD1Ev>
 8007f46:	f107 0318 	add.w	r3, r7, #24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f003 fdc5 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8007f50:	f107 0310 	add.w	r3, r7, #16
 8007f54:	4618      	mov	r0, r3
 8007f56:	f003 fdc0 	bl	800bada <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8007f5a:	bf00      	nop
}
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	3728      	adds	r7, #40	; 0x28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	080224cc 	.word	0x080224cc
 8007f68:	080224d8 	.word	0x080224d8
 8007f6c:	080224dc 	.word	0x080224dc

08007f70 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8007f7c:	6879      	ldr	r1, [r7, #4]
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f003 fa47 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8007f84:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00a      	beq.n	8007fa6 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	225f      	movs	r2, #95	; 0x5f
 8007f96:	4619      	mov	r1, r3
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f003 fbcc 	bl	800b736 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	617b      	str	r3, [r7, #20]
 8007fa4:	e7f0      	b.n	8007f88 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8007fa6:	bf00      	nop
}
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	080224e4 	.word	0x080224e4

08007fb4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d006      	beq.n	8007fd4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	3328      	adds	r3, #40	; 0x28
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f003 fa37 	bl	800b442 <_ZN12SimpleStringaSERKS_>
    }
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8007fdc:	b590      	push	{r4, r7, lr}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3368      	adds	r3, #104	; 0x68
 8007fea:	681c      	ldr	r4, [r3, #0]
 8007fec:	f107 0308 	add.w	r3, r7, #8
 8007ff0:	4908      	ldr	r1, [pc, #32]	; (8008014 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f003 f9b9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8007ff8:	f107 0308 	add.w	r3, r7, #8
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	47a0      	blx	r4
 8008002:	f107 0308 	add.w	r3, r7, #8
 8008006:	4618      	mov	r0, r3
 8008008:	f003 fd67 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800800c:	bf00      	nop
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	bd90      	pop	{r4, r7, pc}
 8008014:	080224f0 	.word	0x080224f0

08008018 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8008018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801c:	b08a      	sub	sp, #40	; 0x28
 800801e:	af04      	add	r7, sp, #16
 8008020:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8008028:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800802e:	3314      	adds	r3, #20
 8008030:	4618      	mov	r0, r3
 8008032:	f003 fd25 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8008036:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800803e:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	4a23      	ldr	r2, [pc, #140]	; (80080d4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8008048:	fba2 2303 	umull	r2, r3, r2, r3
 800804c:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800804e:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	691a      	ldr	r2, [r3, #16]
 8008056:	4b1f      	ldr	r3, [pc, #124]	; (80080d4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8008058:	fba3 1302 	umull	r1, r3, r3, r2
 800805c:	099b      	lsrs	r3, r3, #6
 800805e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008062:	fb01 f303 	mul.w	r3, r1, r3
 8008066:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8008068:	603b      	str	r3, [r7, #0]
 800806a:	4b1b      	ldr	r3, [pc, #108]	; (80080d8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4798      	blx	r3
 8008070:	4603      	mov	r3, r0
 8008072:	f107 0008 	add.w	r0, r7, #8
 8008076:	9303      	str	r3, [sp, #12]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	9302      	str	r3, [sp, #8]
 800807c:	9601      	str	r6, [sp, #4]
 800807e:	9500      	str	r5, [sp, #0]
 8008080:	4623      	mov	r3, r4
 8008082:	4642      	mov	r2, r8
 8008084:	4915      	ldr	r1, [pc, #84]	; (80080dc <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8008086:	f004 fa2f 	bl	800c4e8 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3368      	adds	r3, #104	; 0x68
 8008090:	681c      	ldr	r4, [r3, #0]
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	4618      	mov	r0, r3
 8008098:	f003 fcf2 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800809c:	4602      	mov	r2, r0
 800809e:	f107 0310 	add.w	r3, r7, #16
 80080a2:	4611      	mov	r1, r2
 80080a4:	4618      	mov	r0, r3
 80080a6:	f003 f960 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80080aa:	f107 0310 	add.w	r3, r7, #16
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	47a0      	blx	r4
 80080b4:	f107 0310 	add.w	r3, r7, #16
 80080b8:	4618      	mov	r0, r3
 80080ba:	f003 fd0e 	bl	800bada <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 80080be:	f107 0308 	add.w	r3, r7, #8
 80080c2:	4618      	mov	r0, r3
 80080c4:	f003 fd09 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 80080c8:	bf00      	nop
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d2:	bf00      	nop
 80080d4:	10624dd3 	.word	0x10624dd3
 80080d8:	200000ac 	.word	0x200000ac
 80080dc:	0802251c 	.word	0x0802251c

080080e0 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 80080e0:	b590      	push	{r4, r7, lr}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3368      	adds	r3, #104	; 0x68
 80080ee:	681c      	ldr	r4, [r3, #0]
 80080f0:	f107 0308 	add.w	r3, r7, #8
 80080f4:	4912      	ldr	r1, [pc, #72]	; (8008140 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 80080f6:	4618      	mov	r0, r3
 80080f8:	f003 f937 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80080fc:	f107 0308 	add.w	r3, r7, #8
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	47a0      	blx	r4
 8008106:	f107 0308 	add.w	r3, r7, #8
 800810a:	4618      	mov	r0, r3
 800810c:	f003 fce5 	bl	800bada <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3368      	adds	r3, #104	; 0x68
 8008116:	681c      	ldr	r4, [r3, #0]
 8008118:	f107 0310 	add.w	r3, r7, #16
 800811c:	4909      	ldr	r1, [pc, #36]	; (8008144 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800811e:	4618      	mov	r0, r3
 8008120:	f003 f923 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8008124:	f107 0310 	add.w	r3, r7, #16
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	47a0      	blx	r4
 800812e:	f107 0310 	add.w	r3, r7, #16
 8008132:	4618      	mov	r0, r3
 8008134:	f003 fcd1 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8008138:	bf00      	nop
 800813a:	371c      	adds	r7, #28
 800813c:	46bd      	mov	sp, r7
 800813e:	bd90      	pop	{r4, r7, pc}
 8008140:	0802258c 	.word	0x0802258c
 8008144:	0802259c 	.word	0x0802259c

08008148 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f003 fc93 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800815a:	4603      	mov	r3, r0
 800815c:	4619      	mov	r1, r3
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f003 f903 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8008164:	4a0e      	ldr	r2, [pc, #56]	; (80081a0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8008166:	490f      	ldr	r1, [pc, #60]	; (80081a4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f003 fb13 	bl	800b794 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800816e:	4a0e      	ldr	r2, [pc, #56]	; (80081a8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8008170:	490e      	ldr	r1, [pc, #56]	; (80081ac <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f003 fb0e 	bl	800b794 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8008178:	4a0d      	ldr	r2, [pc, #52]	; (80081b0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 800817a:	490e      	ldr	r1, [pc, #56]	; (80081b4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f003 fb09 	bl	800b794 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8008182:	4a0d      	ldr	r2, [pc, #52]	; (80081b8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8008184:	490d      	ldr	r1, [pc, #52]	; (80081bc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f003 fb04 	bl	800b794 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 800818c:	4a0c      	ldr	r2, [pc, #48]	; (80081c0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 800818e:	490d      	ldr	r1, [pc, #52]	; (80081c4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f003 faff 	bl	800b794 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8008196:	bf00      	nop
}
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	080225ac 	.word	0x080225ac
 80081a4:	080225b4 	.word	0x080225b4
 80081a8:	080225b8 	.word	0x080225b8
 80081ac:	080225c0 	.word	0x080225c0
 80081b0:	080225c4 	.word	0x080225c4
 80081b4:	080225cc 	.word	0x080225cc
 80081b8:	080225d0 	.word	0x080225d0
 80081bc:	080225d8 	.word	0x080225d8
 80081c0:	080225dc 	.word	0x080225dc
 80081c4:	080225e8 	.word	0x080225e8

080081c8 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 80081c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081cc:	b096      	sub	sp, #88	; 0x58
 80081ce:	af08      	add	r7, sp, #32
 80081d0:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 80081da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 80b2 	beq.w	8008346 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 80081e6:	3328      	adds	r3, #40	; 0x28
 80081e8:	4618      	mov	r0, r3
 80081ea:	f003 fc49 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 80081ee:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	3328      	adds	r3, #40	; 0x28
 80081f6:	4618      	mov	r0, r3
 80081f8:	f003 fc5e 	bl	800bab8 <_ZNK12SimpleString7isEmptyEv>
 80081fc:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8008202:	4c53      	ldr	r4, [pc, #332]	; (8008350 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8008204:	e000      	b.n	8008208 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8008206:	4c53      	ldr	r4, [pc, #332]	; (8008354 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 800820c:	3314      	adds	r3, #20
 800820e:	4618      	mov	r0, r3
 8008210:	f003 fc36 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8008214:	4605      	mov	r5, r0
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008218:	4618      	mov	r0, r3
 800821a:	f003 fc31 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800821e:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8008220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008222:	6a1a      	ldr	r2, [r3, #32]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800822c:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800822e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	4a49      	ldr	r2, [pc, #292]	; (8008358 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8008234:	fba2 2303 	umull	r2, r3, r2, r3
 8008238:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800823a:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800823c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	4b45      	ldr	r3, [pc, #276]	; (8008358 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8008242:	fba3 1302 	umull	r1, r3, r3, r2
 8008246:	099b      	lsrs	r3, r3, #6
 8008248:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800824c:	fb01 f303 	mul.w	r3, r1, r3
 8008250:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008256:	3314      	adds	r3, #20
 8008258:	4618      	mov	r0, r3
 800825a:	f003 fc11 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800825e:	4602      	mov	r2, r0
 8008260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f107 0014 	add.w	r0, r7, #20
 8008268:	9306      	str	r3, [sp, #24]
 800826a:	9205      	str	r2, [sp, #20]
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	9204      	str	r2, [sp, #16]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	9203      	str	r2, [sp, #12]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	9302      	str	r3, [sp, #8]
 8008278:	9601      	str	r6, [sp, #4]
 800827a:	9500      	str	r5, [sp, #0]
 800827c:	4623      	mov	r3, r4
 800827e:	4642      	mov	r2, r8
 8008280:	4936      	ldr	r1, [pc, #216]	; (800835c <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8008282:	f004 f931 	bl	800c4e8 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3368      	adds	r3, #104	; 0x68
 800828c:	681c      	ldr	r4, [r3, #0]
 800828e:	f107 0314 	add.w	r3, r7, #20
 8008292:	4618      	mov	r0, r3
 8008294:	f003 fbf4 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8008298:	4602      	mov	r2, r0
 800829a:	f107 031c 	add.w	r3, r7, #28
 800829e:	4611      	mov	r1, r2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f003 f862 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80082a6:	f107 031c 	add.w	r3, r7, #28
 80082aa:	4619      	mov	r1, r3
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	47a0      	blx	r4
 80082b0:	f107 031c 	add.w	r3, r7, #28
 80082b4:	4618      	mov	r0, r3
 80082b6:	f003 fc10 	bl	800bada <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082c0:	6a12      	ldr	r2, [r2, #32]
 80082c2:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 80082c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d007      	beq.n	80082dc <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3388      	adds	r3, #136	; 0x88
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	4798      	blx	r3
 80082da:	e017      	b.n	800830c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 80082dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082de:	7c1b      	ldrb	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d013      	beq.n	800830c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3368      	adds	r3, #104	; 0x68
 80082ea:	681c      	ldr	r4, [r3, #0]
 80082ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082f0:	491b      	ldr	r1, [pc, #108]	; (8008360 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 80082f2:	4618      	mov	r0, r3
 80082f4:	f003 f839 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80082f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082fc:	4619      	mov	r1, r3
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	47a0      	blx	r4
 8008302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008306:	4618      	mov	r0, r3
 8008308:	f003 fbe7 	bl	800bada <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3368      	adds	r3, #104	; 0x68
 8008312:	681c      	ldr	r4, [r3, #0]
 8008314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008318:	4912      	ldr	r1, [pc, #72]	; (8008364 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800831a:	4618      	mov	r0, r3
 800831c:	f003 f825 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8008320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008324:	4619      	mov	r1, r3
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	47a0      	blx	r4
 800832a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800832e:	4618      	mov	r0, r3
 8008330:	f003 fbd3 	bl	800bada <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8008334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800833a:	f107 0314 	add.w	r3, r7, #20
 800833e:	4618      	mov	r0, r3
 8008340:	f003 fbcb 	bl	800bada <_ZN12SimpleStringD1Ev>
    while (cur) {
 8008344:	e749      	b.n	80081da <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8008346:	bf00      	nop
 8008348:	3738      	adds	r7, #56	; 0x38
 800834a:	46bd      	mov	sp, r7
 800834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008350:	080224ac 	.word	0x080224ac
 8008354:	080225ec 	.word	0x080225ec
 8008358:	10624dd3 	.word	0x10624dd3
 800835c:	080225f0 	.word	0x080225f0
 8008360:	0802264c 	.word	0x0802264c
 8008364:	0802265c 	.word	0x0802265c

08008368 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8008368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800836a:	b091      	sub	sp, #68	; 0x44
 800836c:	af02      	add	r7, sp, #8
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	68d9      	ldr	r1, [r3, #12]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f107 0210 	add.w	r2, r7, #16
 8008384:	4610      	mov	r0, r2
 8008386:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8008388:	f107 0310 	add.w	r3, r7, #16
 800838c:	4618      	mov	r0, r3
 800838e:	f003 fb77 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8008392:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	68da      	ldr	r2, [r3, #12]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3314      	adds	r3, #20
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4610      	mov	r0, r2
 80083a4:	4798      	blx	r3
 80083a6:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80083a8:	461e      	mov	r6, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3380      	adds	r3, #128	; 0x80
 80083b0:	681c      	ldr	r4, [r3, #0]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68d9      	ldr	r1, [r3, #12]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3318      	adds	r3, #24
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f107 0220 	add.w	r2, r7, #32
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	f107 0318 	add.w	r3, r7, #24
 80083cc:	f107 0220 	add.w	r2, r7, #32
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	4618      	mov	r0, r3
 80083d4:	47a0      	blx	r4
 80083d6:	f107 0318 	add.w	r3, r7, #24
 80083da:	4618      	mov	r0, r3
 80083dc:	f003 fb50 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 80083e0:	4603      	mov	r3, r0
 80083e2:	f107 0008 	add.w	r0, r7, #8
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	4633      	mov	r3, r6
 80083ea:	462a      	mov	r2, r5
 80083ec:	4924      	ldr	r1, [pc, #144]	; (8008480 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 80083ee:	f004 f87b 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 80083f2:	f107 0318 	add.w	r3, r7, #24
 80083f6:	4618      	mov	r0, r3
 80083f8:	f003 fb6f 	bl	800bada <_ZN12SimpleStringD1Ev>
 80083fc:	f107 0320 	add.w	r3, r7, #32
 8008400:	4618      	mov	r0, r3
 8008402:	f003 fb6a 	bl	800bada <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8008406:	f107 0310 	add.w	r3, r7, #16
 800840a:	4618      	mov	r0, r3
 800840c:	f003 fb65 	bl	800bada <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3368      	adds	r3, #104	; 0x68
 8008416:	681c      	ldr	r4, [r3, #0]
 8008418:	f107 0308 	add.w	r3, r7, #8
 800841c:	4618      	mov	r0, r3
 800841e:	f003 fb2f 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8008422:	4602      	mov	r2, r0
 8008424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008428:	4611      	mov	r1, r2
 800842a:	4618      	mov	r0, r3
 800842c:	f002 ff9d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8008430:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	47a0      	blx	r4
 800843a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800843e:	4618      	mov	r0, r3
 8008440:	f003 fb4b 	bl	800bada <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3368      	adds	r3, #104	; 0x68
 800844a:	681c      	ldr	r4, [r3, #0]
 800844c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008450:	490c      	ldr	r1, [pc, #48]	; (8008484 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8008452:	4618      	mov	r0, r3
 8008454:	f002 ff89 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8008458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	47a0      	blx	r4
 8008462:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008466:	4618      	mov	r0, r3
 8008468:	f003 fb37 	bl	800bada <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800846c:	f107 0308 	add.w	r3, r7, #8
 8008470:	4618      	mov	r0, r3
 8008472:	f003 fb32 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8008476:	bf00      	nop
 8008478:	373c      	adds	r7, #60	; 0x3c
 800847a:	46bd      	mov	sp, r7
 800847c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800847e:	bf00      	nop
 8008480:	0802266c 	.word	0x0802266c
 8008484:	080226a8 	.word	0x080226a8

08008488 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8008488:	b590      	push	{r4, r7, lr}
 800848a:	b08d      	sub	sp, #52	; 0x34
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3368      	adds	r3, #104	; 0x68
 8008496:	681c      	ldr	r4, [r3, #0]
 8008498:	f107 0308 	add.w	r3, r7, #8
 800849c:	4933      	ldr	r1, [pc, #204]	; (800856c <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800849e:	4618      	mov	r0, r3
 80084a0:	f002 ff63 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80084a4:	f107 0308 	add.w	r3, r7, #8
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	47a0      	blx	r4
 80084ae:	f107 0308 	add.w	r3, r7, #8
 80084b2:	4618      	mov	r0, r3
 80084b4:	f003 fb11 	bl	800bada <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3368      	adds	r3, #104	; 0x68
 80084be:	681c      	ldr	r4, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3380      	adds	r3, #128	; 0x80
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	6912      	ldr	r2, [r2, #16]
 80084cc:	3230      	adds	r2, #48	; 0x30
 80084ce:	f107 0010 	add.w	r0, r7, #16
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	4798      	blx	r3
 80084d6:	f107 0310 	add.w	r3, r7, #16
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	47a0      	blx	r4
 80084e0:	f107 0310 	add.w	r3, r7, #16
 80084e4:	4618      	mov	r0, r3
 80084e6:	f003 faf8 	bl	800bada <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3368      	adds	r3, #104	; 0x68
 80084f0:	681c      	ldr	r4, [r3, #0]
 80084f2:	f107 0318 	add.w	r3, r7, #24
 80084f6:	491e      	ldr	r1, [pc, #120]	; (8008570 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 80084f8:	4618      	mov	r0, r3
 80084fa:	f002 ff36 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80084fe:	f107 0318 	add.w	r3, r7, #24
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	47a0      	blx	r4
 8008508:	f107 0318 	add.w	r3, r7, #24
 800850c:	4618      	mov	r0, r3
 800850e:	f003 fae4 	bl	800bada <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3368      	adds	r3, #104	; 0x68
 8008518:	681c      	ldr	r4, [r3, #0]
 800851a:	f107 0320 	add.w	r3, r7, #32
 800851e:	4915      	ldr	r1, [pc, #84]	; (8008574 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8008520:	4618      	mov	r0, r3
 8008522:	f002 ff22 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8008526:	f107 0320 	add.w	r3, r7, #32
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	47a0      	blx	r4
 8008530:	f107 0320 	add.w	r3, r7, #32
 8008534:	4618      	mov	r0, r3
 8008536:	f003 fad0 	bl	800bada <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3368      	adds	r3, #104	; 0x68
 8008540:	681c      	ldr	r4, [r3, #0]
 8008542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008546:	490c      	ldr	r1, [pc, #48]	; (8008578 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8008548:	4618      	mov	r0, r3
 800854a:	f002 ff0e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800854e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	47a0      	blx	r4
 8008558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800855c:	4618      	mov	r0, r3
 800855e:	f003 fabc 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8008562:	bf00      	nop
 8008564:	3734      	adds	r7, #52	; 0x34
 8008566:	46bd      	mov	sp, r7
 8008568:	bd90      	pop	{r4, r7, pc}
 800856a:	bf00      	nop
 800856c:	080226b4 	.word	0x080226b4
 8008570:	080226c4 	.word	0x080226c4
 8008574:	080226d4 	.word	0x080226d4
 8008578:	080226f0 	.word	0x080226f0

0800857c <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 800857c:	b590      	push	{r4, r7, lr}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3360      	adds	r3, #96	; 0x60
 800858a:	681c      	ldr	r4, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	335c      	adds	r3, #92	; 0x5c
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6912      	ldr	r2, [r2, #16]
 8008598:	3214      	adds	r2, #20
 800859a:	f107 0008 	add.w	r0, r7, #8
 800859e:	6879      	ldr	r1, [r7, #4]
 80085a0:	4798      	blx	r3
 80085a2:	f107 0308 	add.w	r3, r7, #8
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	47a0      	blx	r4
 80085ac:	f107 0308 	add.w	r3, r7, #8
 80085b0:	4618      	mov	r0, r3
 80085b2:	f003 fa92 	bl	800bada <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3370      	adds	r3, #112	; 0x70
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
    writeTestSuiteSummary();
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3374      	adds	r3, #116	; 0x74
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	4798      	blx	r3
    writeProperties();
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3378      	adds	r3, #120	; 0x78
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	4798      	blx	r3
    writeTestCases();
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	337c      	adds	r3, #124	; 0x7c
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	4798      	blx	r3
    writeFileEnding();
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	338c      	adds	r3, #140	; 0x8c
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
    closeFile();
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	336c      	adds	r3, #108	; 0x6c
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	4798      	blx	r3
}
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	bd90      	pop	{r4, r7, pc}

08008606 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	3330      	adds	r3, #48	; 0x30
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	4618      	mov	r0, r3
 8008630:	f003 fae2 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
}
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8008652:	b480      	push	{r7}
 8008654:	b083      	sub	sp, #12
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800867c:	b590      	push	{r4, r7, lr}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d113      	bne.n	80086ba <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	3201      	adds	r2, #1
 800869a:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800869c:	f240 1233 	movw	r2, #307	; 0x133
 80086a0:	4908      	ldr	r1, [pc, #32]	; (80086c4 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 80086a2:	2034      	movs	r0, #52	; 0x34
 80086a4:	f000 fa9e 	bl	8008be4 <_ZnwjPKci>
 80086a8:	4604      	mov	r4, r0
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	4620      	mov	r0, r4
 80086ae:	f004 fd37 	bl	800d120 <_ZN11TestFailureC1ERKS_>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	60dc      	str	r4, [r3, #12]
    }
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd90      	pop	{r4, r7, pc}
 80086c2:	bf00      	nop
 80086c4:	080224b0 	.word	0x080224b0

080086c8 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 80086c8:	b5b0      	push	{r4, r5, r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 80086d2:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 80086d4:	681d      	ldr	r5, [r3, #0]
 80086d6:	6838      	ldr	r0, [r7, #0]
 80086d8:	f003 f9d2 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 80086dc:	4602      	mov	r2, r0
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691c      	ldr	r4, [r3, #16]
 80086e2:	4905      	ldr	r1, [pc, #20]	; (80086f8 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 80086e4:	4610      	mov	r0, r2
 80086e6:	47a8      	blx	r5
 80086e8:	4603      	mov	r3, r0
 80086ea:	6263      	str	r3, [r4, #36]	; 0x24
}
 80086ec:	bf00      	nop
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bdb0      	pop	{r4, r5, r7, pc}
 80086f4:	200000b4 	.word	0x200000b4
 80086f8:	08022700 	.word	0x08022700

080086fc <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 80086fc:	b590      	push	{r4, r7, lr}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8008706:	4b08      	ldr	r3, [pc, #32]	; (8008728 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8008708:	681c      	ldr	r4, [r3, #0]
 800870a:	6838      	ldr	r0, [r7, #0]
 800870c:	f003 f9b8 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8008710:	4602      	mov	r2, r0
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	47a0      	blx	r4
}
 800871e:	bf00      	nop
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	bd90      	pop	{r4, r7, pc}
 8008726:	bf00      	nop
 8008728:	200000b8 	.word	0x200000b8

0800872c <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8008734:	4b05      	ldr	r3, [pc, #20]	; (800874c <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	6912      	ldr	r2, [r2, #16]
 800873c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800873e:	4610      	mov	r0, r2
 8008740:	4798      	blx	r3
}
 8008742:	bf00      	nop
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	200000bc 	.word	0x200000bc

08008750 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
        return false;
 800875e:	2300      	movs	r3, #0
    }
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
    {
 8008774:	4a04      	ldr	r2, [pc, #16]	; (8008788 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	601a      	str	r2, [r3, #0]
    }
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	08025e18 	.word	0x08025e18

0800878c <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
    }
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff ffe9 	bl	800876c <_ZN17MemoryLeakFailureD1Ev>
 800879a:	2104      	movs	r1, #4
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fa35 	bl	8008c0c <_ZdlPvj>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4618      	mov	r0, r3
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 80087ac:	b590      	push	{r4, r7, lr}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	687c      	ldr	r4, [r7, #4]
 80087b6:	f000 fc71 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80087ba:	4603      	mov	r3, r0
 80087bc:	4618      	mov	r0, r3
 80087be:	f00c ff6c 	bl	801569a <_ZN18MemoryLeakDetector8getMutexEv>
 80087c2:	4603      	mov	r3, r0
 80087c4:	4619      	mov	r1, r3
 80087c6:	4620      	mov	r0, r4
 80087c8:	f002 fb24 	bl	800ae14 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd90      	pop	{r4, r7, pc}

080087d6 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f002 fb29 	bl	800ae38 <_ZN15ScopedMutexLockD1Ev>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 80087f0:	b590      	push	{r4, r7, lr}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af02      	add	r7, sp, #8
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 80087fc:	f000 fc4e 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008800:	4604      	mov	r4, r0
 8008802:	f006 f8df 	bl	800e9c4 <_Z25getCurrentMallocAllocatorv>
 8008806:	4601      	mov	r1, r0
 8008808:	2301      	movs	r3, #1
 800880a:	9301      	str	r3, [sp, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4620      	mov	r0, r4
 8008816:	f00d f983 	bl	8015b20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800881a:	4603      	mov	r3, r0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	bd90      	pop	{r4, r7, pc}

08008824 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8008824:	b590      	push	{r4, r7, lr}
 8008826:	b087      	sub	sp, #28
 8008828:	af02      	add	r7, sp, #8
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8008830:	f000 fc34 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008834:	4603      	mov	r3, r0
 8008836:	68f9      	ldr	r1, [r7, #12]
 8008838:	4618      	mov	r0, r3
 800883a:	f00c ffdd 	bl	80157f8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800883e:	f000 fc2d 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008842:	4604      	mov	r4, r0
 8008844:	f006 f8be 	bl	800e9c4 <_Z25getCurrentMallocAllocatorv>
 8008848:	4601      	mov	r1, r0
 800884a:	2301      	movs	r3, #1
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4620      	mov	r0, r4
 8008858:	f00d f996 	bl	8015b88 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800885c:	bf00      	nop
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	bd90      	pop	{r4, r7, pc}

08008864 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8008864:	b590      	push	{r4, r7, lr}
 8008866:	b089      	sub	sp, #36	; 0x24
 8008868:	af04      	add	r7, sp, #16
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8008872:	f000 fc13 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008876:	4604      	mov	r4, r0
 8008878:	f006 f8a4 	bl	800e9c4 <_Z25getCurrentMallocAllocatorv>
 800887c:	4601      	mov	r1, r0
 800887e:	2301      	movs	r3, #1
 8008880:	9302      	str	r3, [sp, #8]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4620      	mov	r0, r4
 8008890:	f00d f9de 	bl	8015c50 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8008894:	4603      	mov	r3, r0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	bd90      	pop	{r4, r7, pc}
	...

080088a0 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 80088ac:	4b04      	ldr	r3, [pc, #16]	; (80088c0 <_ZL13normal_mallocjPKcj+0x20>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	4798      	blx	r3
 80088b4:	4603      	mov	r3, r0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	200000c8 	.word	0x200000c8

080088c4 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 80088d2:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <_ZL14normal_reallocPvjPKcj+0x24>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68b9      	ldr	r1, [r7, #8]
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	4798      	blx	r3
 80088dc:	4603      	mov	r3, r0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	200000cc 	.word	0x200000cc

080088ec <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 80088f8:	4b03      	ldr	r3, [pc, #12]	; (8008908 <_ZL11normal_freePvPKcj+0x1c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	4798      	blx	r3
}
 8008900:	bf00      	nop
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	200000d0 	.word	0x200000d0

0800890c <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800890c:	b590      	push	{r4, r7, lr}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8008914:	f107 0308 	add.w	r3, r7, #8
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff ff47 	bl	80087ac <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800891e:	f000 fbbd 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008922:	4604      	mov	r4, r0
 8008924:	f005 ff9e 	bl	800e864 <_Z22getCurrentNewAllocatorv>
 8008928:	4601      	mov	r1, r0
 800892a:	2300      	movs	r3, #0
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	4620      	mov	r0, r4
 8008930:	f00d f864 	bl	80159fc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008934:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008936:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8008938:	f107 0308 	add.w	r3, r7, #8
 800893c:	4618      	mov	r0, r3
 800893e:	f7ff ff4a 	bl	80087d6 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8008942:	4623      	mov	r3, r4
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	bd90      	pop	{r4, r7, pc}

0800894c <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800894c:	b590      	push	{r4, r7, lr}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8008954:	f000 fba2 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008958:	4604      	mov	r4, r0
 800895a:	f005 ff83 	bl	800e864 <_Z22getCurrentNewAllocatorv>
 800895e:	4601      	mov	r1, r0
 8008960:	2300      	movs	r3, #0
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	4620      	mov	r0, r4
 8008966:	f00d f849 	bl	80159fc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800896a:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800896c:	68fb      	ldr	r3, [r7, #12]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	bd90      	pop	{r4, r7, pc}

08008976 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8008976:	b590      	push	{r4, r7, lr}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800897e:	f000 fb8d 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008982:	4604      	mov	r4, r0
 8008984:	f005 ff6e 	bl	800e864 <_Z22getCurrentNewAllocatorv>
 8008988:	4601      	mov	r1, r0
 800898a:	2300      	movs	r3, #0
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	4620      	mov	r0, r4
 8008990:	f00d f834 	bl	80159fc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008994:	4603      	mov	r3, r0
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	bd90      	pop	{r4, r7, pc}

0800899e <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800899e:	b590      	push	{r4, r7, lr}
 80089a0:	b089      	sub	sp, #36	; 0x24
 80089a2:	af02      	add	r7, sp, #8
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 80089aa:	f000 fb77 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80089ae:	4604      	mov	r4, r0
 80089b0:	f005 ff58 	bl	800e864 <_Z22getCurrentNewAllocatorv>
 80089b4:	4601      	mov	r1, r0
 80089b6:	2300      	movs	r3, #0
 80089b8:	9301      	str	r3, [sp, #4]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	4620      	mov	r0, r4
 80089c4:	f00d f8ac 	bl	8015b20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80089c8:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80089ca:	697b      	ldr	r3, [r7, #20]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	371c      	adds	r7, #28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd90      	pop	{r4, r7, pc}

080089d4 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 80089d4:	b590      	push	{r4, r7, lr}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 80089dc:	f000 fb5e 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80089e0:	4604      	mov	r4, r0
 80089e2:	f005 ff97 	bl	800e914 <_Z27getCurrentNewArrayAllocatorv>
 80089e6:	4601      	mov	r1, r0
 80089e8:	2300      	movs	r3, #0
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	4620      	mov	r0, r4
 80089ee:	f00d f805 	bl	80159fc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80089f2:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80089f4:	68fb      	ldr	r3, [r7, #12]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd90      	pop	{r4, r7, pc}

080089fe <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 80089fe:	b590      	push	{r4, r7, lr}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8008a06:	f000 fb49 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	f005 ff82 	bl	800e914 <_Z27getCurrentNewArrayAllocatorv>
 8008a10:	4601      	mov	r1, r0
 8008a12:	2300      	movs	r3, #0
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	4620      	mov	r0, r4
 8008a18:	f00c fff0 	bl	80159fc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008a1c:	4603      	mov	r3, r0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd90      	pop	{r4, r7, pc}

08008a26 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8008a26:	b590      	push	{r4, r7, lr}
 8008a28:	b089      	sub	sp, #36	; 0x24
 8008a2a:	af02      	add	r7, sp, #8
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8008a32:	f000 fb33 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008a36:	4604      	mov	r4, r0
 8008a38:	f005 ff6c 	bl	800e914 <_Z27getCurrentNewArrayAllocatorv>
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f00d f868 	bl	8015b20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8008a50:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008a52:	697b      	ldr	r3, [r7, #20]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	371c      	adds	r7, #28
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd90      	pop	{r4, r7, pc}

08008a5c <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8008a5c:	b590      	push	{r4, r7, lr}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8008a64:	f000 fb1a 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f00c fec3 	bl	80157f8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8008a72:	f000 fb13 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008a76:	4604      	mov	r4, r0
 8008a78:	f005 fef4 	bl	800e864 <_Z22getCurrentNewAllocatorv>
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	2300      	movs	r3, #0
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	4620      	mov	r0, r4
 8008a84:	f00d f8ca 	bl	8015c1c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd90      	pop	{r4, r7, pc}

08008a90 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8008a90:	b590      	push	{r4, r7, lr}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8008a98:	f000 fb00 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f00c fea9 	bl	80157f8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8008aa6:	f000 faf9 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008aaa:	4604      	mov	r4, r0
 8008aac:	f005 ff32 	bl	800e914 <_Z27getCurrentNewArrayAllocatorv>
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f00d f8b0 	bl	8015c1c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd90      	pop	{r4, r7, pc}

08008ac4 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008acc:	4b04      	ldr	r3, [pc, #16]	; (8008ae0 <_ZL19normal_operator_newj+0x1c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	4798      	blx	r3
 8008ad4:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	200000c8 	.word	0x200000c8

08008ae4 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8008aec:	4b04      	ldr	r3, [pc, #16]	; (8008b00 <_ZL27normal_operator_new_nothrowj+0x1c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	4798      	blx	r3
 8008af4:	4603      	mov	r3, r0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	200000c8 	.word	0x200000c8

08008b04 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008b10:	4b04      	ldr	r3, [pc, #16]	; (8008b24 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	4798      	blx	r3
 8008b18:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008b1a:	697b      	ldr	r3, [r7, #20]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	200000c8 	.word	0x200000c8

08008b28 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008b30:	4b04      	ldr	r3, [pc, #16]	; (8008b44 <_ZL25normal_operator_new_arrayj+0x1c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	4798      	blx	r3
 8008b38:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	200000c8 	.word	0x200000c8

08008b48 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8008b50:	4b04      	ldr	r3, [pc, #16]	; (8008b64 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	4798      	blx	r3
 8008b58:	4603      	mov	r3, r0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	200000c8 	.word	0x200000c8

08008b68 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008b74:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	4798      	blx	r3
 8008b7c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008b7e:	697b      	ldr	r3, [r7, #20]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	200000c8 	.word	0x200000c8

08008b8c <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8008b94:	4b03      	ldr	r3, [pc, #12]	; (8008ba4 <_ZL22normal_operator_deletePv+0x18>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	4798      	blx	r3
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	200000d0 	.word	0x200000d0

08008ba8 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8008bb0:	4b03      	ldr	r3, [pc, #12]	; (8008bc0 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	4798      	blx	r3
}
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	200000d0 	.word	0x200000d0

08008bc4 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8008bcc:	4b04      	ldr	r3, [pc, #16]	; (8008be0 <_Znwj+0x1c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	4798      	blx	r3
 8008bd4:	4603      	mov	r3, r0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	2000002c 	.word	0x2000002c

08008be4 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <_ZnwjPKci+0x24>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	68b9      	ldr	r1, [r7, #8]
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	4798      	blx	r3
 8008bfc:	4603      	mov	r3, r0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20000034 	.word	0x20000034

08008c0c <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8008c16:	4b04      	ldr	r3, [pc, #16]	; (8008c28 <_ZdlPvj+0x1c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	4798      	blx	r3
}
 8008c1e:	bf00      	nop
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000044 	.word	0x20000044

08008c2c <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <_ZnajPKci+0x24>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	68b9      	ldr	r1, [r7, #8]
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	4798      	blx	r3
 8008c44:	4603      	mov	r3, r0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000040 	.word	0x20000040

08008c54 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8008c5c:	4b03      	ldr	r3, [pc, #12]	; (8008c6c <_ZdaPv+0x18>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	4798      	blx	r3
}
 8008c64:	bf00      	nop
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20000048 	.word	0x20000048

08008c70 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8008c7a:	4b04      	ldr	r3, [pc, #16]	; (8008c8c <_ZdaPvj+0x1c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	4798      	blx	r3
}
 8008c82:	bf00      	nop
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20000048 	.word	0x20000048

08008c90 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8008c94:	4b12      	ldr	r3, [pc, #72]	; (8008ce0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8008c96:	4a13      	ldr	r2, [pc, #76]	; (8008ce4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8008c98:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8008c9a:	4b13      	ldr	r3, [pc, #76]	; (8008ce8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8008c9c:	4a13      	ldr	r2, [pc, #76]	; (8008cec <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8008c9e:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8008ca0:	4b13      	ldr	r3, [pc, #76]	; (8008cf0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8008ca2:	4a14      	ldr	r2, [pc, #80]	; (8008cf4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8008ca4:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8008ca6:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8008ca8:	4a14      	ldr	r2, [pc, #80]	; (8008cfc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8008caa:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8008cac:	4b14      	ldr	r3, [pc, #80]	; (8008d00 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8008cae:	4a15      	ldr	r2, [pc, #84]	; (8008d04 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8008cb0:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8008cb2:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8008cb4:	4a15      	ldr	r2, [pc, #84]	; (8008d0c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8008cb6:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8008cb8:	4b15      	ldr	r3, [pc, #84]	; (8008d10 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8008cba:	4a16      	ldr	r2, [pc, #88]	; (8008d14 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8008cbc:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8008cbe:	4b16      	ldr	r3, [pc, #88]	; (8008d18 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8008cc0:	4a16      	ldr	r2, [pc, #88]	; (8008d1c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8008cc2:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8008cc4:	4b16      	ldr	r3, [pc, #88]	; (8008d20 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8008cc6:	4a17      	ldr	r2, [pc, #92]	; (8008d24 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8008cc8:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8008cca:	4b17      	ldr	r3, [pc, #92]	; (8008d28 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8008ccc:	4a17      	ldr	r2, [pc, #92]	; (8008d2c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8008cce:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8008cd0:	4b17      	ldr	r3, [pc, #92]	; (8008d30 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8008cd2:	4a18      	ldr	r2, [pc, #96]	; (8008d34 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8008cd4:	601a      	str	r2, [r3, #0]

#endif
}
 8008cd6:	bf00      	nop
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	2000002c 	.word	0x2000002c
 8008ce4:	08008ac5 	.word	0x08008ac5
 8008ce8:	20000030 	.word	0x20000030
 8008cec:	08008ae5 	.word	0x08008ae5
 8008cf0:	20000034 	.word	0x20000034
 8008cf4:	08008b05 	.word	0x08008b05
 8008cf8:	20000038 	.word	0x20000038
 8008cfc:	08008b29 	.word	0x08008b29
 8008d00:	2000003c 	.word	0x2000003c
 8008d04:	08008b49 	.word	0x08008b49
 8008d08:	20000040 	.word	0x20000040
 8008d0c:	08008b69 	.word	0x08008b69
 8008d10:	20000044 	.word	0x20000044
 8008d14:	08008b8d 	.word	0x08008b8d
 8008d18:	20000048 	.word	0x20000048
 8008d1c:	08008ba9 	.word	0x08008ba9
 8008d20:	20000014 	.word	0x20000014
 8008d24:	080088a1 	.word	0x080088a1
 8008d28:	2000001c 	.word	0x2000001c
 8008d2c:	080088c5 	.word	0x080088c5
 8008d30:	20000018 	.word	0x20000018
 8008d34:	080088ed 	.word	0x080088ed

08008d38 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8008d3c:	4b08      	ldr	r3, [pc, #32]	; (8008d60 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a08      	ldr	r2, [pc, #32]	; (8008d64 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d004      	beq.n	8008d50 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8008d46:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a07      	ldr	r2, [pc, #28]	; (8008d68 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d101      	bne.n	8008d54 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8008d50:	2301      	movs	r3, #1
 8008d52:	e000      	b.n	8008d56 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8008d54:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	2000002c 	.word	0x2000002c
 8008d64:	0800894d 	.word	0x0800894d
 8008d68:	0800890d 	.word	0x0800890d

08008d6c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8008d70:	4b1f      	ldr	r3, [pc, #124]	; (8008df0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3301      	adds	r3, #1
 8008d76:	4a1e      	ldr	r2, [pc, #120]	; (8008df0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	4b1d      	ldr	r3, [pc, #116]	; (8008df0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	bfcc      	ite	gt
 8008d82:	2301      	movgt	r3, #1
 8008d84:	2300      	movle	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d12e      	bne.n	8008dea <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8008d8c:	4b19      	ldr	r3, [pc, #100]	; (8008df4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a19      	ldr	r2, [pc, #100]	; (8008df8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8008d92:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8008d94:	4b19      	ldr	r3, [pc, #100]	; (8008dfc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a19      	ldr	r2, [pc, #100]	; (8008e00 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8008d9a:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8008d9c:	4b19      	ldr	r3, [pc, #100]	; (8008e04 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a19      	ldr	r2, [pc, #100]	; (8008e08 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8008da2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8008da4:	4b19      	ldr	r3, [pc, #100]	; (8008e0c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a19      	ldr	r2, [pc, #100]	; (8008e10 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8008daa:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8008dac:	4b19      	ldr	r3, [pc, #100]	; (8008e14 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a19      	ldr	r2, [pc, #100]	; (8008e18 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8008db2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8008db4:	4b19      	ldr	r3, [pc, #100]	; (8008e1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a19      	ldr	r2, [pc, #100]	; (8008e20 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8008dba:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8008dbc:	4b19      	ldr	r3, [pc, #100]	; (8008e24 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a19      	ldr	r2, [pc, #100]	; (8008e28 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8008dc2:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8008dc4:	4b19      	ldr	r3, [pc, #100]	; (8008e2c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a19      	ldr	r2, [pc, #100]	; (8008e30 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8008dca:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8008dcc:	4b19      	ldr	r3, [pc, #100]	; (8008e34 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a19      	ldr	r2, [pc, #100]	; (8008e38 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8008dd2:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8008dd4:	4b19      	ldr	r3, [pc, #100]	; (8008e3c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a19      	ldr	r2, [pc, #100]	; (8008e40 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8008dda:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8008ddc:	4b19      	ldr	r3, [pc, #100]	; (8008e44 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a19      	ldr	r2, [pc, #100]	; (8008e48 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8008de2:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8008de4:	f7ff ff54 	bl	8008c90 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8008de8:	e000      	b.n	8008dec <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8008dea:	bf00      	nop
#endif
}
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20000724 	.word	0x20000724
 8008df4:	2000002c 	.word	0x2000002c
 8008df8:	2000004c 	.word	0x2000004c
 8008dfc:	20000030 	.word	0x20000030
 8008e00:	20000050 	.word	0x20000050
 8008e04:	20000034 	.word	0x20000034
 8008e08:	20000054 	.word	0x20000054
 8008e0c:	20000038 	.word	0x20000038
 8008e10:	20000058 	.word	0x20000058
 8008e14:	2000003c 	.word	0x2000003c
 8008e18:	2000005c 	.word	0x2000005c
 8008e1c:	20000040 	.word	0x20000040
 8008e20:	20000060 	.word	0x20000060
 8008e24:	20000044 	.word	0x20000044
 8008e28:	20000064 	.word	0x20000064
 8008e2c:	20000048 	.word	0x20000048
 8008e30:	20000068 	.word	0x20000068
 8008e34:	20000014 	.word	0x20000014
 8008e38:	20000020 	.word	0x20000020
 8008e3c:	2000001c 	.word	0x2000001c
 8008e40:	20000028 	.word	0x20000028
 8008e44:	20000018 	.word	0x20000018
 8008e48:	20000024 	.word	0x20000024

08008e4c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8008e50:	4b1f      	ldr	r3, [pc, #124]	; (8008ed0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	3b01      	subs	r3, #1
 8008e56:	4a1e      	ldr	r2, [pc, #120]	; (8008ed0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	4b1d      	ldr	r3, [pc, #116]	; (8008ed0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bfcc      	ite	gt
 8008e62:	2301      	movgt	r3, #1
 8008e64:	2300      	movle	r3, #0
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d12c      	bne.n	8008ec6 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 8008e6c:	4b19      	ldr	r3, [pc, #100]	; (8008ed4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a19      	ldr	r2, [pc, #100]	; (8008ed8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 8008e72:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8008e74:	4b19      	ldr	r3, [pc, #100]	; (8008edc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a19      	ldr	r2, [pc, #100]	; (8008ee0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 8008e7a:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 8008e7c:	4b19      	ldr	r3, [pc, #100]	; (8008ee4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a19      	ldr	r2, [pc, #100]	; (8008ee8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 8008e82:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8008e84:	4b19      	ldr	r3, [pc, #100]	; (8008eec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a19      	ldr	r2, [pc, #100]	; (8008ef0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 8008e8a:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 8008e8c:	4b19      	ldr	r3, [pc, #100]	; (8008ef4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a19      	ldr	r2, [pc, #100]	; (8008ef8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 8008e92:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8008e94:	4b19      	ldr	r3, [pc, #100]	; (8008efc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a19      	ldr	r2, [pc, #100]	; (8008f00 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 8008e9a:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 8008e9c:	4b19      	ldr	r3, [pc, #100]	; (8008f04 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a19      	ldr	r2, [pc, #100]	; (8008f08 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 8008ea2:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8008ea4:	4b19      	ldr	r3, [pc, #100]	; (8008f0c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a19      	ldr	r2, [pc, #100]	; (8008f10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 8008eaa:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 8008eac:	4b19      	ldr	r3, [pc, #100]	; (8008f14 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a19      	ldr	r2, [pc, #100]	; (8008f18 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8008eb2:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8008eb4:	4b19      	ldr	r3, [pc, #100]	; (8008f1c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a19      	ldr	r2, [pc, #100]	; (8008f20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8008eba:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8008ebc:	4b19      	ldr	r3, [pc, #100]	; (8008f24 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a19      	ldr	r2, [pc, #100]	; (8008f28 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	e000      	b.n	8008ec8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8008ec6:	bf00      	nop
#endif
}
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	20000724 	.word	0x20000724
 8008ed4:	2000004c 	.word	0x2000004c
 8008ed8:	2000002c 	.word	0x2000002c
 8008edc:	20000050 	.word	0x20000050
 8008ee0:	20000030 	.word	0x20000030
 8008ee4:	20000054 	.word	0x20000054
 8008ee8:	20000034 	.word	0x20000034
 8008eec:	20000058 	.word	0x20000058
 8008ef0:	20000038 	.word	0x20000038
 8008ef4:	2000005c 	.word	0x2000005c
 8008ef8:	2000003c 	.word	0x2000003c
 8008efc:	20000060 	.word	0x20000060
 8008f00:	20000040 	.word	0x20000040
 8008f04:	20000064 	.word	0x20000064
 8008f08:	20000044 	.word	0x20000044
 8008f0c:	20000068 	.word	0x20000068
 8008f10:	20000048 	.word	0x20000048
 8008f14:	20000020 	.word	0x20000020
 8008f18:	20000014 	.word	0x20000014
 8008f1c:	20000028 	.word	0x20000028
 8008f20:	2000001c 	.word	0x2000001c
 8008f24:	20000024 	.word	0x20000024
 8008f28:	20000018 	.word	0x20000018

08008f2c <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
    {
 8008f34:	4a05      	ldr	r2, [pc, #20]	; (8008f4c <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff fc15 	bl	800876c <_ZN17MemoryLeakFailureD1Ev>
    }
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4618      	mov	r0, r3
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	08025e04 	.word	0x08025e04

08008f50 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
    }
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff ffe7 	bl	8008f2c <_ZN25MemoryLeakWarningReporterD1Ev>
 8008f5e:	2104      	movs	r1, #4
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7ff fe53 	bl	8008c0c <_ZdlPvj>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	4a04      	ldr	r2, [pc, #16]	; (8008f8c <_ZN14TestTerminatorC1Ev+0x1c>)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4618      	mov	r0, r3
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	080267b0 	.word	0x080267b0

08008f90 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7ff ffe8 	bl	8008f70 <_ZN14TestTerminatorC1Ev>
 8008fa0:	4a03      	ldr	r2, [pc, #12]	; (8008fb0 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	08026788 	.word	0x08026788

08008fb4 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8008fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fb6:	b099      	sub	sp, #100	; 0x64
 8008fb8:	af02      	add	r7, sp, #8
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 8008fbe:	f009 fdb7 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8008fc2:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8008fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	339c      	adds	r3, #156	; 0x9c
 8008fca:	681c      	ldr	r4, [r3, #0]
 8008fcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008fd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f008 fbc4 	bl	8011760 <_ZNK10UtestShell7getNameEv>
 8008fd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f002 fd4f 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008fe6:	f008 fc9b 	bl	8011920 <_ZNK10UtestShell13getLineNumberEv>
 8008fea:	4606      	mov	r6, r0
 8008fec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f002 f9b9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8008ff8:	f107 000c 	add.w	r0, r7, #12
 8008ffc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	4633      	mov	r3, r6
 8009004:	462a      	mov	r2, r5
 8009006:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009008:	f004 fd14 	bl	800da34 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800900c:	2300      	movs	r3, #0
 800900e:	653b      	str	r3, [r7, #80]	; 0x50
 8009010:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009014:	4618      	mov	r0, r3
 8009016:	f7ff ffbb 	bl	8008f90 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800901a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800901e:	f107 030c 	add.w	r3, r7, #12
 8009022:	4619      	mov	r1, r3
 8009024:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009026:	47a0      	blx	r4
 8009028:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800902c:	4618      	mov	r0, r3
 800902e:	f009 fe79 	bl	8012d24 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8009032:	f107 030c 	add.w	r3, r7, #12
 8009036:	4618      	mov	r0, r3
 8009038:	f000 f9ac 	bl	8009394 <_ZN11FailFailureD1Ev>
 800903c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009040:	4618      	mov	r0, r3
 8009042:	f002 fd4a 	bl	800bada <_ZN12SimpleStringD1Ev>
 8009046:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800904a:	4618      	mov	r0, r3
 800904c:	f002 fd45 	bl	800bada <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8009050:	bf00      	nop
 8009052:	375c      	adds	r7, #92	; 0x5c
 8009054:	46bd      	mov	sp, r7
 8009056:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009058 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	4a04      	ldr	r2, [pc, #16]	; (8009074 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	08025e18 	.word	0x08025e18

08009078 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff ffe8 	bl	8009058 <_ZN17MemoryLeakFailureC1Ev>
 8009088:	4a03      	ldr	r2, [pc, #12]	; (8009098 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	08025e04 	.word	0x08025e04

0800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800909c:	b598      	push	{r3, r4, r7, lr}
 800909e:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 80090a0:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d11b      	bne.n	80090e0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 80090a8:	f7ff fe60 	bl	8008d6c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 80090ac:	2004      	movs	r0, #4
 80090ae:	f7ff fd89 	bl	8008bc4 <_Znwj>
 80090b2:	4603      	mov	r3, r0
 80090b4:	461c      	mov	r4, r3
 80090b6:	4620      	mov	r0, r4
 80090b8:	f7ff ffde 	bl	8009078 <_ZN25MemoryLeakWarningReporterC1Ev>
 80090bc:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 80090be:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 80090c0:	f241 1050 	movw	r0, #4432	; 0x1150
 80090c4:	f7ff fd7e 	bl	8008bc4 <_Znwj>
 80090c8:	4603      	mov	r3, r0
 80090ca:	461c      	mov	r4, r3
 80090cc:	4b07      	ldr	r3, [pc, #28]	; (80090ec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4619      	mov	r1, r3
 80090d2:	4620      	mov	r0, r4
 80090d4:	f00c fa3e 	bl	8015554 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 80090d8:	4b03      	ldr	r3, [pc, #12]	; (80090e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80090da:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 80090dc:	f7ff feb6 	bl	8008e4c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 80090e0:	4b01      	ldr	r3, [pc, #4]	; (80090e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	bd98      	pop	{r3, r4, r7, pc}
 80090e8:	2000072c 	.word	0x2000072c
 80090ec:	20000728 	.word	0x20000728

080090f0 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	78fa      	ldrb	r2, [r7, #3]
 8009100:	765a      	strb	r2, [r3, #25]
}
 8009102:	bf00      	nop
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
	...

08009110 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8009114:	f7ff fdbc 	bl	8008c90 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8009118:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	3204      	adds	r2, #4
 8009124:	6812      	ldr	r2, [r2, #0]
 8009126:	4618      	mov	r0, r3
 8009128:	4790      	blx	r2
    delete globalReporter;
 800912a:	4b08      	ldr	r3, [pc, #32]	; (800914c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d004      	beq.n	800913c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	3204      	adds	r2, #4
 8009136:	6812      	ldr	r2, [r2, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	4790      	blx	r2
    globalDetector = NULLPTR;
 800913c:	4b02      	ldr	r3, [pc, #8]	; (8009148 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800913e:	2200      	movs	r2, #0
 8009140:	601a      	str	r2, [r3, #0]
}
 8009142:	bf00      	nop
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	2000072c 	.word	0x2000072c
 800914c:	20000728 	.word	0x20000728

08009150 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	68b9      	ldr	r1, [r7, #8]
 8009160:	4618      	mov	r0, r3
 8009162:	f006 fdfd 	bl	800fd60 <_ZN10TestPluginC1ERK12SimpleString>
 8009166:	4a14      	ldr	r2, [pc, #80]	; (80091b8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	601a      	str	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	761a      	strb	r2, [r3, #24]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	765a      	strb	r2, [r3, #25]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800917e:	4b0f      	ldr	r3, [pc, #60]	; (80091bc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 8009186:	4a0d      	ldr	r2, [pc, #52]	; (80091bc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	615a      	str	r2, [r3, #20]
 8009198:	e004      	b.n	80091a4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800919a:	f7ff ff7f 	bl	800909c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800919e:	4602      	mov	r2, r0
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f00c fa69 	bl	8015680 <_ZN18MemoryLeakDetector6enableEv>
}
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	08025e2c 	.word	0x08025e2c
 80091bc:	20000730 	.word	0x20000730

080091c0 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	7e5b      	ldrb	r3, [r3, #25]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 80091d6:	f7ff fd5b 	bl	8008c90 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 80091da:	f7ff ff99 	bl	8009110 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f006 fdf9 	bl	800fdd8 <_ZN10TestPluginD1Ev>
    }
}
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	08025e2c 	.word	0x08025e2c

080091f4 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
}
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff ffdf 	bl	80091c0 <_ZN23MemoryLeakWarningPluginD1Ev>
 8009202:	2124      	movs	r1, #36	; 0x24
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff fd01 	bl	8008c0c <_ZdlPvj>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	4618      	mov	r0, r3
 8009226:	f00c fa0e 	bl	8015646 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7fd ffb0 	bl	8007190 <_ZNK10TestResult15getFailureCountEv>
 8009230:	4602      	mov	r2, r0
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	621a      	str	r2, [r3, #32]
}
 8009236:	bf00      	nop
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8009240:	b590      	push	{r4, r7, lr}
 8009242:	b097      	sub	sp, #92	; 0x5c
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	695b      	ldr	r3, [r3, #20]
 8009250:	4618      	mov	r0, r3
 8009252:	f00c fa08 	bl	8015666 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	2103      	movs	r1, #3
 800925c:	4618      	mov	r0, r3
 800925e:	f00c fda5 	bl	8015dac <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8009262:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	7e1b      	ldrb	r3, [r3, #24]
 8009268:	f083 0301 	eor.w	r3, r3, #1
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00e      	beq.n	8009290 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009278:	429a      	cmp	r2, r3
 800927a:	d009      	beq.n	8009290 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6a1c      	ldr	r4, [r3, #32]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7fd ff85 	bl	8007190 <_ZNK10TestResult15getFailureCountEv>
 8009286:	4603      	mov	r3, r0
 8009288:	429c      	cmp	r4, r3
 800928a:	d101      	bne.n	8009290 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 8009290:	2300      	movs	r3, #0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d04c      	beq.n	8009330 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 8009296:	f7ff fd4f 	bl	8008d38 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d028      	beq.n	80092f2 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	2103      	movs	r1, #3
 80092a6:	4618      	mov	r0, r3
 80092a8:	f00c fd45 	bl	8015d36 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80092ac:	4602      	mov	r2, r0
 80092ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80092b2:	4611      	mov	r1, r2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f002 f858 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80092ba:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80092be:	f107 0310 	add.w	r3, r7, #16
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f003 feaf 	bl	800d028 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 80092ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80092ce:	4618      	mov	r0, r3
 80092d0:	f002 fc03 	bl	800bada <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3334      	adds	r3, #52	; 0x34
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f107 0210 	add.w	r2, r7, #16
 80092e0:	4611      	mov	r1, r2
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 80092e6:	f107 0310 	add.w	r3, r7, #16
 80092ea:	4618      	mov	r0, r3
 80092ec:	f003 ff5c 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 80092f0:	e01e      	b.n	8009330 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d01a      	beq.n	8009330 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3338      	adds	r3, #56	; 0x38
 8009300:	681c      	ldr	r4, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	461a      	mov	r2, r3
 8009308:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800930c:	4910      	ldr	r1, [pc, #64]	; (8009350 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800930e:	4618      	mov	r0, r3
 8009310:	f003 f8ea 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 8009314:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009318:	4618      	mov	r0, r3
 800931a:	f002 fbb1 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800931e:	4603      	mov	r3, r0
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	47a0      	blx	r4
 8009326:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800932a:	4618      	mov	r0, r3
 800932c:	f002 fbd5 	bl	800bada <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	4618      	mov	r0, r3
 8009336:	f00c fd13 	bl	8015d60 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	61da      	str	r2, [r3, #28]
}
 8009346:	bf00      	nop
 8009348:	375c      	adds	r7, #92	; 0x5c
 800934a:	46bd      	mov	sp, r7
 800934c:	bd90      	pop	{r4, r7, pc}
 800934e:	bf00      	nop
 8009350:	08022704 	.word	0x08022704

08009354 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	2102      	movs	r1, #2
 8009364:	4618      	mov	r0, r3
 8009366:	f00c fd21 	bl	8015dac <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800936a:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	429a      	cmp	r2, r3
 8009372:	d007      	beq.n	8009384 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	2102      	movs	r1, #2
 800937a:	4618      	mov	r0, r3
 800937c:	f00c fcdb 	bl	8015d36 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8009380:	4603      	mov	r3, r0
 8009382:	e000      	b.n	8009386 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 8009384:	4b02      	ldr	r3, [pc, #8]	; (8009390 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	08022744 	.word	0x08022744

08009394 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	4a05      	ldr	r2, [pc, #20]	; (80093b4 <_ZN11FailFailureD1Ev+0x20>)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f003 feff 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4618      	mov	r0, r3
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	08025e74 	.word	0x08025e74

080093b8 <_ZN11FailFailureD0Ev>:
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff ffe7 	bl	8009394 <_ZN11FailFailureD1Ev>
 80093c6:	2134      	movs	r1, #52	; 0x34
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff fc1f 	bl	8008c0c <_ZdlPvj>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4618      	mov	r0, r3
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	4a06      	ldr	r2, [pc, #24]	; (800942c <_ZN19MockFailureReporterC1Ev+0x24>)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	711a      	strb	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4618      	mov	r0, r3
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	08027050 	.word	0x08027050

08009430 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	4a04      	ldr	r2, [pc, #16]	; (800944c <_ZN19MockFailureReporterD1Ev+0x1c>)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	08027050 	.word	0x08027050

08009450 <_ZN19MockFailureReporterD0Ev>:
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff ffe9 	bl	8009430 <_ZN19MockFailureReporterD1Ev>
 800945e:	2108      	movs	r1, #8
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff fbd3 	bl	8008c0c <_ZdlPvj>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	4a05      	ldr	r2, [pc, #20]	; (8009490 <_ZN11MockFailureD1Ev+0x20>)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4618      	mov	r0, r3
 8009482:	f003 fe91 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4618      	mov	r0, r3
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	08025fc8 	.word	0x08025fc8

08009494 <_ZN11MockFailureD0Ev>:
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff ffe7 	bl	8009470 <_ZN11MockFailureD1Ev>
 80094a2:	2134      	movs	r1, #52	; 0x34
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7ff fbb1 	bl	8008c0c <_ZdlPvj>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 80094b4:	b590      	push	{r4, r7, lr}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
 80094be:	4a16      	ldr	r2, [pc, #88]	; (8009518 <_ZN14MockNamedValueC1ERKS_+0x64>)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	1d1a      	adds	r2, r3, #4
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	3304      	adds	r3, #4
 80094cc:	4619      	mov	r1, r3
 80094ce:	4610      	mov	r0, r2
 80094d0:	f001 ff9f 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f103 020c 	add.w	r2, r3, #12
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	330c      	adds	r3, #12
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f001 ff96 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	f102 0418 	add.w	r4, r2, #24
 80094ee:	3318      	adds	r3, #24
 80094f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	629a      	str	r2, [r3, #40]	; 0x28
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	62da      	str	r2, [r3, #44]	; 0x2c
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	631a      	str	r2, [r3, #48]	; 0x30
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	bd90      	pop	{r4, r7, pc}
 8009518:	08027090 	.word	0x08027090

0800951c <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 8009526:	f107 030c 	add.w	r3, r7, #12
 800952a:	4916      	ldr	r1, [pc, #88]	; (8009584 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800952c:	4618      	mov	r0, r3
 800952e:	f001 ff1c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8009532:	f107 030c 	add.w	r3, r7, #12
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f002 fb1f 	bl	800bb7c <_ZneRK12SimpleStringS1_>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 8009544:	6879      	ldr	r1, [r7, #4]
 8009546:	4810      	ldr	r0, [pc, #64]	; (8009588 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8009548:	f000 ff70 	bl	800a42c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800954c:	4603      	mov	r3, r0
 800954e:	e000      	b.n	8009552 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 8009550:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	f107 030c 	add.w	r3, r7, #12
 8009558:	4618      	mov	r0, r3
 800955a:	f002 fabe 	bl	800bada <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	33a8      	adds	r3, #168	; 0xa8
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6978      	ldr	r0, [r7, #20]
 800956a:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	33ac      	adds	r3, #172	; 0xac
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6978      	ldr	r0, [r7, #20]
 8009576:	4798      	blx	r3
    return mock_support;
 8009578:	697b      	ldr	r3, [r7, #20]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	08022748 	.word	0x08022748
 8009588:	20000734 	.word	0x20000734

0800958c <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 8009596:	4a21      	ldr	r2, [pc, #132]	; (800961c <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	605a      	str	r2, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	609a      	str	r2, [r3, #8]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	731a      	strb	r2, [r3, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f103 0218 	add.w	r2, r3, #24
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	615a      	str	r2, [r3, #20]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3318      	adds	r3, #24
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff ff23 	bl	8009408 <_ZN19MockFailureReporterC1Ev>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3320      	adds	r3, #32
 80095c6:	4618      	mov	r0, r3
 80095c8:	f010 fefc 	bl	801a3c4 <_ZN21MockExpectedCallsListC1Ev>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3330      	adds	r3, #48	; 0x30
 80095e6:	4618      	mov	r0, r3
 80095e8:	f014 fbe8 	bl	801ddbc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3338      	adds	r3, #56	; 0x38
 80095f0:	4618      	mov	r0, r3
 80095f2:	f014 faf2 	bl	801dbda <_ZN18MockNamedValueListC1Ev>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	333c      	adds	r3, #60	; 0x3c
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f001 ff08 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800960a:	2100      	movs	r1, #0
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f894 	bl	800973a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4618      	mov	r0, r3
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	08025ea0 	.word	0x08025ea0

08009620 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	4a0d      	ldr	r2, [pc, #52]	; (8009660 <_ZN11MockSupportD1Ev+0x40>)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	333c      	adds	r3, #60	; 0x3c
 8009632:	4618      	mov	r0, r3
 8009634:	f002 fa51 	bl	800bada <_ZN12SimpleStringD1Ev>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3330      	adds	r3, #48	; 0x30
 800963c:	4618      	mov	r0, r3
 800963e:	f014 fbd1 	bl	801dde4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3320      	adds	r3, #32
 8009646:	4618      	mov	r0, r3
 8009648:	f010 fed0 	bl	801a3ec <_ZN21MockExpectedCallsListD1Ev>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3318      	adds	r3, #24
 8009650:	4618      	mov	r0, r3
 8009652:	f7ff feed 	bl	8009430 <_ZN19MockFailureReporterD1Ev>
{
}
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	08025ea0 	.word	0x08025ea0

08009664 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
}
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff ffd7 	bl	8009620 <_ZN11MockSupportD1Ev>
 8009672:	2148      	movs	r1, #72	; 0x48
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff fac9 	bl	8008c0c <_ZdlPvj>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3310      	adds	r3, #16
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	78f9      	ldrb	r1, [r7, #3]
 80096a0:	4610      	mov	r0, r2
 80096a2:	4798      	blx	r3
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d102      	bne.n	80096c2 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3318      	adds	r3, #24
 80096c0:	e000      	b.n	80096c4 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	33c8      	adds	r3, #200	; 0xc8
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	6952      	ldr	r2, [r2, #20]
 80096e2:	4611      	mov	r1, r2
 80096e4:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3338      	adds	r3, #56	; 0x38
 80096ea:	4618      	mov	r0, r3
 80096ec:	f014 fb0b 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d01c      	beq.n	8009732 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 80096f8:	68f9      	ldr	r1, [r7, #12]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 ff26 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	bf14      	ite	ne
 8009706:	2301      	movne	r3, #1
 8009708:	2300      	moveq	r3, #0
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00b      	beq.n	8009728 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 8009710:	68f9      	ldr	r1, [r7, #12]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 ff1a 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009718:	4603      	mov	r3, r0
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	32a4      	adds	r2, #164	; 0xa4
 800971e:	6812      	ldr	r2, [r2, #0]
 8009720:	6879      	ldr	r1, [r7, #4]
 8009722:	6949      	ldr	r1, [r1, #20]
 8009724:	4618      	mov	r0, r3
 8009726:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f014 f9f5 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	e7df      	b.n	80096f2 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d102      	bne.n	8009750 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	e000      	b.n	8009752 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	6113      	str	r3, [r2, #16]
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	3330      	adds	r3, #48	; 0x30
 800976e:	4618      	mov	r0, r3
 8009770:	f012 fb10 	bl	801bd94 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800977c:	b590      	push	{r4, r7, lr}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3330      	adds	r3, #48	; 0x30
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	68b9      	ldr	r1, [r7, #8]
 8009790:	4618      	mov	r0, r3
 8009792:	f014 fb75 	bl	801de80 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3338      	adds	r3, #56	; 0x38
 800979a:	4618      	mov	r0, r3
 800979c:	f014 fab3 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 80097a0:	6178      	str	r0, [r7, #20]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d01c      	beq.n	80097e2 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 80097a8:	6979      	ldr	r1, [r7, #20]
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f000 fece 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	bf14      	ite	ne
 80097b6:	2301      	movne	r3, #1
 80097b8:	2300      	moveq	r3, #0
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00b      	beq.n	80097d8 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 80097c0:	6979      	ldr	r1, [r7, #20]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 fec2 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80097c8:	4603      	mov	r3, r0
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	32b0      	adds	r2, #176	; 0xb0
 80097ce:	6814      	ldr	r4, [r2, #0]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	68b9      	ldr	r1, [r7, #8]
 80097d4:	4618      	mov	r0, r3
 80097d6:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80097d8:	6978      	ldr	r0, [r7, #20]
 80097da:	f014 f99d 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 80097de:	6178      	str	r0, [r7, #20]
 80097e0:	e7df      	b.n	80097a2 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 80097e2:	bf00      	nop
 80097e4:	371c      	adds	r7, #28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd90      	pop	{r4, r7, pc}

080097ea <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 80097ea:	b590      	push	{r4, r7, lr}
 80097ec:	b087      	sub	sp, #28
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	60b9      	str	r1, [r7, #8]
 80097f4:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3330      	adds	r3, #48	; 0x30
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	68b9      	ldr	r1, [r7, #8]
 80097fe:	4618      	mov	r0, r3
 8009800:	f014 fb5a 	bl	801deb8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	3338      	adds	r3, #56	; 0x38
 8009808:	4618      	mov	r0, r3
 800980a:	f014 fa7c 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 800980e:	6178      	str	r0, [r7, #20]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d01c      	beq.n	8009850 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 8009816:	6979      	ldr	r1, [r7, #20]
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 fe97 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	bf14      	ite	ne
 8009824:	2301      	movne	r3, #1
 8009826:	2300      	moveq	r3, #0
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00b      	beq.n	8009846 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800982e:	6979      	ldr	r1, [r7, #20]
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 fe8b 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009836:	4603      	mov	r3, r0
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	32b4      	adds	r2, #180	; 0xb4
 800983c:	6814      	ldr	r4, [r2, #0]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	68b9      	ldr	r1, [r7, #8]
 8009842:	4618      	mov	r0, r3
 8009844:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009846:	6978      	ldr	r0, [r7, #20]
 8009848:	f014 f966 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 800984c:	6178      	str	r0, [r7, #20]
 800984e:	e7df      	b.n	8009810 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 8009850:	bf00      	nop
 8009852:	371c      	adds	r7, #28
 8009854:	46bd      	mov	sp, r7
 8009856:	bd90      	pop	{r4, r7, pc}

08009858 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	3330      	adds	r3, #48	; 0x30
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	4618      	mov	r0, r3
 800986a:	f014 fb91 	bl	801df90 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	3338      	adds	r3, #56	; 0x38
 8009872:	4618      	mov	r0, r3
 8009874:	f014 fa47 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d01b      	beq.n	80098b8 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 8009880:	68f9      	ldr	r1, [r7, #12]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fe62 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	bf14      	ite	ne
 800988e:	2301      	movne	r3, #1
 8009890:	2300      	moveq	r3, #0
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00a      	beq.n	80098ae <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 8009898:	68f9      	ldr	r1, [r7, #12]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fe56 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80098a0:	4603      	mov	r3, r0
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	32b8      	adds	r2, #184	; 0xb8
 80098a6:	6812      	ldr	r2, [r2, #0]
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	4618      	mov	r0, r3
 80098ac:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f014 f932 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 80098b4:	60f8      	str	r0, [r7, #12]
 80098b6:	e7e0      	b.n	800987a <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 80098b8:	bf00      	nop
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3330      	adds	r3, #48	; 0x30
 80098cc:	4618      	mov	r0, r3
 80098ce:	f014 fab8 	bl	801de42 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3338      	adds	r3, #56	; 0x38
 80098d6:	4618      	mov	r0, r3
 80098d8:	f014 fa15 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 80098dc:	60f8      	str	r0, [r7, #12]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d01a      	beq.n	800991a <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 80098e4:	68f9      	ldr	r1, [r7, #12]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fe30 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bf14      	ite	ne
 80098f2:	2301      	movne	r3, #1
 80098f4:	2300      	moveq	r3, #0
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d009      	beq.n	8009910 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 80098fc:	68f9      	ldr	r1, [r7, #12]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fe24 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009904:	4603      	mov	r3, r0
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	32bc      	adds	r2, #188	; 0xbc
 800990a:	6812      	ldr	r2, [r2, #0]
 800990c:	4618      	mov	r0, r3
 800990e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f014 f901 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	e7e1      	b.n	80098de <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800991a:	bf00      	nop
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b084      	sub	sp, #16
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992e:	2b00      	cmp	r3, #0
 8009930:	d004      	beq.n	800993c <_ZN11MockSupport5clearEv+0x1a>
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	3204      	adds	r2, #4
 8009936:	6812      	ldr	r2, [r2, #0]
 8009938:	4618      	mov	r0, r3
 800993a:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800994a:	f00e fe0d 	bl	8018568 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3320      	adds	r3, #32
 8009952:	4618      	mov	r0, r3
 8009954:	f011 f937 	bl	801abc6 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3338      	adds	r3, #56	; 0x38
 800997e:	4618      	mov	r0, r3
 8009980:	f014 f9c1 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d01a      	beq.n	80099c2 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800998c:	68f9      	ldr	r1, [r7, #12]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fddc 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009994:	60b8      	str	r0, [r7, #8]
        if (support) {
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00d      	beq.n	80099b8 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	339c      	adds	r3, #156	; 0x9c
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68b8      	ldr	r0, [r7, #8]
 80099a6:	4798      	blx	r3
            delete support;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d004      	beq.n	80099b8 <_ZN11MockSupport5clearEv+0x96>
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	3204      	adds	r2, #4
 80099b2:	6812      	ldr	r2, [r2, #0]
 80099b4:	4618      	mov	r0, r3
 80099b6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f014 f8ad 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	e7e1      	b.n	8009986 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3338      	adds	r3, #56	; 0x38
 80099c6:	4618      	mov	r0, r3
 80099c8:	f014 f915 	bl	801dbf6 <_ZN18MockNamedValueList5clearEv>
}
 80099cc:	bf00      	nop
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	731a      	strb	r2, [r3, #12]
}
 80099e2:	bf00      	nop
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
	...

080099f0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 80099f0:	b590      	push	{r4, r7, lr}
 80099f2:	b089      	sub	sp, #36	; 0x24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	333c      	adds	r3, #60	; 0x3c
 8009a00:	4618      	mov	r0, r3
 8009a02:	f002 f859 	bl	800bab8 <_ZNK12SimpleString7isEmptyEv>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d004      	beq.n	8009a16 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 8009a0c:	6879      	ldr	r1, [r7, #4]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f001 fcff 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 8009a14:	e021      	b.n	8009a5a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8009a1c:	f107 0318 	add.w	r3, r7, #24
 8009a20:	4910      	ldr	r1, [pc, #64]	; (8009a64 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 fca1 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8009a28:	f107 0310 	add.w	r3, r7, #16
 8009a2c:	f107 0218 	add.w	r2, r7, #24
 8009a30:	4621      	mov	r1, r4
 8009a32:	4618      	mov	r0, r3
 8009a34:	f002 f8b3 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f107 0110 	add.w	r1, r7, #16
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f002 f8ac 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 8009a46:	f107 0310 	add.w	r3, r7, #16
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f002 f845 	bl	800bada <_ZN12SimpleStringD1Ev>
 8009a50:	f107 0318 	add.w	r3, r7, #24
 8009a54:	4618      	mov	r0, r3
 8009a56:	f002 f840 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	3724      	adds	r7, #36	; 0x24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd90      	pop	{r4, r7, pc}
 8009a62:	bf00      	nop
 8009a64:	0802274c 	.word	0x0802274c

08009a68 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3314      	adds	r3, #20
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	4798      	blx	r3
 8009a82:	4603      	mov	r3, r0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3314      	adds	r3, #20
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	4798      	blx	r3
}
 8009aa6:	bf00      	nop
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 8009ab0:	b590      	push	{r4, r7, lr}
 8009ab2:	b089      	sub	sp, #36	; 0x24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009ac2:	f083 0301 	eor.w	r3, r3, #1
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 8009acc:	f010 fbf6 	bl	801a2bc <_ZN23MockIgnoredExpectedCall8instanceEv>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	e041      	b.n	8009b58 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 fb1b 	bl	800a110 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 8009ada:	22a5      	movs	r2, #165	; 0xa5
 8009adc:	4920      	ldr	r1, [pc, #128]	; (8009b60 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 8009ade:	2070      	movs	r0, #112	; 0x70
 8009ae0:	f7ff f880 	bl	8008be4 <_ZnwjPKci>
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	68b9      	ldr	r1, [r7, #8]
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f00f f8f3 	bl	8018cd4 <_ZN23MockCheckedExpectedCallC1Ej>
 8009aee:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3308      	adds	r3, #8
 8009af6:	681c      	ldr	r4, [r3, #0]
 8009af8:	f107 0314 	add.w	r3, r7, #20
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	68f9      	ldr	r1, [r7, #12]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7ff ff75 	bl	80099f0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 8009b06:	f107 0314 	add.w	r3, r7, #20
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	69f8      	ldr	r0, [r7, #28]
 8009b0e:	47a0      	blx	r4
 8009b10:	f107 0314 	add.w	r3, r7, #20
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 ffe0 	bl	800bada <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	7b1b      	ldrb	r3, [r3, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d013      	beq.n	8009b4a <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3310      	adds	r3, #16
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	6892      	ldr	r2, [r2, #8]
 8009b2e:	1c50      	adds	r0, r2, #1
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	6891      	ldr	r1, [r2, #8]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	440a      	add	r2, r1
 8009b38:	4601      	mov	r1, r0
 8009b3a:	69f8      	ldr	r0, [r7, #28]
 8009b3c:	4798      	blx	r3
        expectedCallOrder_ += amount;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	689a      	ldr	r2, [r3, #8]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	441a      	add	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3320      	adds	r3, #32
 8009b4e:	69f9      	ldr	r1, [r7, #28]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f010 fd89 	bl	801a668 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 8009b56:	69fb      	ldr	r3, [r7, #28]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3724      	adds	r7, #36	; 0x24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd90      	pop	{r4, r7, pc}
 8009b60:	08022750 	.word	0x08022750

08009b64 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 8009b64:	b5b0      	push	{r4, r5, r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	605a      	str	r2, [r3, #4]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685d      	ldr	r5, [r3, #4]
 8009b7a:	22b1      	movs	r2, #177	; 0xb1
 8009b7c:	490a      	ldr	r1, [pc, #40]	; (8009ba8 <_ZN11MockSupport16createActualCallEv+0x44>)
 8009b7e:	202c      	movs	r0, #44	; 0x2c
 8009b80:	f7ff f830 	bl	8008be4 <_ZnwjPKci>
 8009b84:	4604      	mov	r4, r0
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	691a      	ldr	r2, [r3, #16]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3320      	adds	r3, #32
 8009b8e:	4629      	mov	r1, r5
 8009b90:	4620      	mov	r0, r4
 8009b92:	f00c fbdb 	bl	801634c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	08022750 	.word	0x08022750

08009bac <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00d      	beq.n	8009bdc <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	3320      	adds	r3, #32
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f010 fd2a 	bl	801a620 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	f083 0301 	eor.w	r3, r3, #1
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e000      	b.n	8009bde <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 8009be6:	b590      	push	{r4, r7, lr}
 8009be8:	b087      	sub	sp, #28
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 8009bf0:	f107 030c 	add.w	r3, r7, #12
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff fef9 	bl	80099f0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d014      	beq.n	8009c30 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	33c4      	adds	r3, #196	; 0xc4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4610      	mov	r0, r2
 8009c16:	4798      	blx	r3
        delete lastActualFunctionCall_;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d004      	beq.n	8009c2a <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	3204      	adds	r2, #4
 8009c24:	6812      	ldr	r2, [r2, #0]
 8009c26:	4618      	mov	r0, r3
 8009c28:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009c36:	f083 0301 	eor.w	r3, r3, #1
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d004      	beq.n	8009c4a <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 8009c40:	f00e fcbe 	bl	80185c0 <_ZN21MockIgnoredActualCall8instanceEv>
 8009c44:	4603      	mov	r3, r0
 8009c46:	461c      	mov	r4, r3
 8009c48:	e02f      	b.n	8009caa <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00b      	beq.n	8009c6c <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 8009c54:	f00e fc6e 	bl	8018534 <_ZN19MockActualCallTrace8instanceEv>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	3208      	adds	r2, #8
 8009c5e:	6812      	ldr	r2, [r2, #0]
 8009c60:	f107 010c 	add.w	r1, r7, #12
 8009c64:	4618      	mov	r0, r3
 8009c66:	4790      	blx	r2
 8009c68:	4604      	mov	r4, r0
 8009c6a:	e01e      	b.n	8009caa <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 8009c6c:	f107 030c 	add.w	r3, r7, #12
 8009c70:	4619      	mov	r1, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff ff9a 	bl	8009bac <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d004      	beq.n	8009c88 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 8009c7e:	f00e fc9f 	bl	80185c0 <_ZN21MockIgnoredActualCall8instanceEv>
 8009c82:	4603      	mov	r3, r0
 8009c84:	461c      	mov	r4, r3
 8009c86:	e010      	b.n	8009caa <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	33c0      	adds	r3, #192	; 0xc0
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	4798      	blx	r3
 8009c94:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3308      	adds	r3, #8
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f107 020c 	add.w	r2, r7, #12
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	6978      	ldr	r0, [r7, #20]
 8009ca6:	4798      	blx	r3
    return *call;
 8009ca8:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 8009caa:	f107 030c 	add.w	r3, r7, #12
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f001 ff13 	bl	800bada <_ZN12SimpleStringD1Ev>
 8009cb4:	4623      	mov	r3, r4
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd90      	pop	{r4, r7, pc}

08009cbe <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	3338      	adds	r3, #56	; 0x38
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f014 f817 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01a      	beq.n	8009d16 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 8009ce0:	68f9      	ldr	r1, [r7, #12]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fc32 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bf14      	ite	ne
 8009cee:	2301      	movne	r3, #1
 8009cf0:	2300      	moveq	r3, #0
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d009      	beq.n	8009d0c <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 8009cf8:	68f9      	ldr	r1, [r7, #12]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fc26 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009d00:	4603      	mov	r3, r0
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	3290      	adds	r2, #144	; 0x90
 8009d06:	6812      	ldr	r2, [r2, #0]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f013 ff03 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	e7e1      	b.n	8009cda <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 8009d16:	bf00      	nop
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	3338      	adds	r3, #56	; 0x38
 8009d32:	4618      	mov	r0, r3
 8009d34:	f013 ffe7 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01a      	beq.n	8009d76 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 8009d40:	68f9      	ldr	r1, [r7, #12]
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fc02 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	bf14      	ite	ne
 8009d4e:	2301      	movne	r3, #1
 8009d50:	2300      	moveq	r3, #0
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d009      	beq.n	8009d6c <_ZN11MockSupport7disableEv+0x4e>
 8009d58:	68f9      	ldr	r1, [r7, #12]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fbf6 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009d60:	4603      	mov	r3, r0
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	3284      	adds	r2, #132	; 0x84
 8009d66:	6812      	ldr	r2, [r2, #0]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f013 fed3 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	e7e1      	b.n	8009d3a <_ZN11MockSupport7disableEv+0x1c>
}
 8009d76:	bf00      	nop
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	3338      	adds	r3, #56	; 0x38
 8009d92:	4618      	mov	r0, r3
 8009d94:	f013 ffb7 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8009d98:	60f8      	str	r0, [r7, #12]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01a      	beq.n	8009dd6 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 8009da0:	68f9      	ldr	r1, [r7, #12]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fbd2 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	bf14      	ite	ne
 8009dae:	2301      	movne	r3, #1
 8009db0:	2300      	moveq	r3, #0
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d009      	beq.n	8009dcc <_ZN11MockSupport6enableEv+0x4e>
 8009db8:	68f9      	ldr	r1, [r7, #12]
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fbc6 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	3288      	adds	r2, #136	; 0x88
 8009dc6:	6812      	ldr	r2, [r2, #0]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f013 fea3 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	e7e1      	b.n	8009d9a <_ZN11MockSupport6enableEv+0x1c>
}
 8009dd6:	bf00      	nop
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	460b      	mov	r3, r1
 8009de8:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	78fa      	ldrb	r2, [r7, #3]
 8009dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3338      	adds	r3, #56	; 0x38
 8009df6:	4618      	mov	r0, r3
 8009df8:	f013 ff85 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d01b      	beq.n	8009e3c <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 8009e04:	68f9      	ldr	r1, [r7, #12]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fba0 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bf14      	ite	ne
 8009e12:	2301      	movne	r3, #1
 8009e14:	2300      	moveq	r3, #0
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00a      	beq.n	8009e32 <_ZN11MockSupport7tracingEb+0x54>
 8009e1c:	68f9      	ldr	r1, [r7, #12]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fb94 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009e24:	4603      	mov	r3, r0
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	328c      	adds	r2, #140	; 0x8c
 8009e2a:	6812      	ldr	r2, [r2, #0]
 8009e2c:	78f9      	ldrb	r1, [r7, #3]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f013 fe70 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	e7e0      	b.n	8009dfe <_ZN11MockSupport7tracingEb+0x20>
}
 8009e3c:	bf00      	nop
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	3320      	adds	r3, #32
 8009e50:	4618      	mov	r0, r3
 8009e52:	f010 fbc1 	bl	801a5d8 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 8009e56:	4603      	mov	r3, r0
 8009e58:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	3338      	adds	r3, #56	; 0x38
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f013 ff51 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8009e64:	60b8      	str	r0, [r7, #8]
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01f      	beq.n	8009eac <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 8009e6c:	68b9      	ldr	r1, [r7, #8]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fb6c 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	bf14      	ite	ne
 8009e7a:	2301      	movne	r3, #1
 8009e7c:	2300      	moveq	r3, #0
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00e      	beq.n	8009ea2 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fb60 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	3298      	adds	r2, #152	; 0x98
 8009e92:	6812      	ldr	r2, [r2, #0]
 8009e94:	4618      	mov	r0, r3
 8009e96:	4790      	blx	r2
 8009e98:	4603      	mov	r3, r0
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009ea2:	68b8      	ldr	r0, [r7, #8]
 8009ea4:	f013 fe38 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8009ea8:	60b8      	str	r0, [r7, #8]
 8009eaa:	e7dc      	b.n	8009e66 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bf14      	ite	ne
 8009eb2:	2301      	movne	r3, #1
 8009eb4:	2300      	moveq	r3, #0
 8009eb6:	b2db      	uxtb	r3, r3
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d010      	beq.n	8009ef2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	33bc      	adds	r3, #188	; 0xbc
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4610      	mov	r0, r2
 8009ee0:	4798      	blx	r3
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	f083 0301 	eor.w	r3, r3, #1
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e000      	b.n	8009ef4 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e02a      	b.n	8009f52 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3338      	adds	r3, #56	; 0x38
 8009f00:	4618      	mov	r0, r3
 8009f02:	f013 ff00 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d020      	beq.n	8009f50 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 8009f0e:	68f9      	ldr	r1, [r7, #12]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fb1b 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00f      	beq.n	8009f3c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8009f1c:	68f9      	ldr	r1, [r7, #12]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fb14 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009f24:	4603      	mov	r3, r0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff ffca 	bl	8009ec0 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	f083 0301 	eor.w	r3, r3, #1
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e000      	b.n	8009f3e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 8009f42:	2300      	movs	r3, #0
 8009f44:	e005      	b.n	8009f52 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f013 fde6 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8009f4c:	60f8      	str	r0, [r7, #12]
 8009f4e:	e7db      	b.n	8009f08 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 8009f50:	2301      	movs	r3, #1
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b092      	sub	sp, #72	; 0x48
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8009f62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009f66:	4618      	mov	r0, r3
 8009f68:	f010 fa2c 	bl	801a3c4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f103 0220 	add.w	r2, r3, #32
 8009f72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009f76:	4611      	mov	r1, r2
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f010 fbf3 	bl	801a764 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3338      	adds	r3, #56	; 0x38
 8009f82:	4618      	mov	r0, r3
 8009f84:	f013 febf 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8009f88:	6478      	str	r0, [r7, #68]	; 0x44
 8009f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d01d      	beq.n	8009fcc <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 8009f90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fada 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	bf14      	ite	ne
 8009f9e:	2301      	movne	r3, #1
 8009fa0:	2300      	moveq	r3, #0
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00c      	beq.n	8009fc2 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 8009fa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 face 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f103 0220 	add.w	r2, r3, #32
 8009fb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f010 fbd1 	bl	801a764 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009fc2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009fc4:	f013 fda8 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8009fc8:	6478      	str	r0, [r7, #68]	; 0x44
 8009fca:	e7de      	b.n	8009f8a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	330c      	adds	r3, #12
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4610      	mov	r0, r2
 8009fdc:	4798      	blx	r3
 8009fde:	4601      	mov	r1, r0
 8009fe0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009fe4:	f107 0308 	add.w	r3, r7, #8
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f011 f9f5 	bl	801b3d8 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	33c4      	adds	r3, #196	; 0xc4
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f107 0208 	add.w	r2, r7, #8
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800a000:	f107 0308 	add.w	r3, r7, #8
 800a004:	4618      	mov	r0, r3
 800a006:	f000 fe6d 	bl	800ace4 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800a00a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a00e:	4618      	mov	r0, r3
 800a010:	f010 f9ec 	bl	801a3ec <_ZN21MockExpectedCallsListD1Ev>
}
 800a014:	bf00      	nop
 800a016:	3748      	adds	r7, #72	; 0x48
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b092      	sub	sp, #72	; 0x48
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800a024:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a028:	4618      	mov	r0, r3
 800a02a:	f010 f9cb 	bl	801a3c4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f103 0220 	add.w	r2, r3, #32
 800a034:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a038:	4611      	mov	r1, r2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f010 fb92 	bl	801a764 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3338      	adds	r3, #56	; 0x38
 800a044:	4618      	mov	r0, r3
 800a046:	f013 fe5e 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 800a04a:	6478      	str	r0, [r7, #68]	; 0x44
 800a04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d01d      	beq.n	800a08e <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800a052:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fa79 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	bf14      	ite	ne
 800a060:	2301      	movne	r3, #1
 800a062:	2300      	moveq	r3, #0
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00c      	beq.n	800a084 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800a06a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fa6d 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a072:	4603      	mov	r3, r0
 800a074:	f103 0220 	add.w	r2, r3, #32
 800a078:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a07c:	4611      	mov	r1, r2
 800a07e:	4618      	mov	r0, r3
 800a080:	f010 fb70 	bl	801a764 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a084:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a086:	f013 fd47 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 800a08a:	6478      	str	r0, [r7, #68]	; 0x44
 800a08c:	e7de      	b.n	800a04c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	691a      	ldr	r2, [r3, #16]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	330c      	adds	r3, #12
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	4601      	mov	r1, r0
 800a0a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a0a6:	f107 0308 	add.w	r3, r7, #8
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f011 fa38 	bl	801b520 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	33c4      	adds	r3, #196	; 0xc4
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f107 0208 	add.w	r2, r7, #8
 800a0bc:	4611      	mov	r1, r2
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800a0c2:	f107 0308 	add.w	r3, r7, #8
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fe2e 	bl	800ad28 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800a0cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f010 f98b 	bl	801a3ec <_ZN21MockExpectedCallsListD1Ev>
}
 800a0d6:	bf00      	nop
 800a0d8:	3748      	adds	r7, #72	; 0x48
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b082      	sub	sp, #8
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	6039      	str	r1, [r7, #0]
    clear();
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	339c      	adds	r3, #156	; 0x9c
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	691a      	ldr	r2, [r3, #16]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3308      	adds	r3, #8
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	4610      	mov	r0, r2
 800a106:	4798      	blx	r3
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800a118:	f008 fd0a 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 800a11c:	4603      	mov	r3, r0
 800a11e:	4618      	mov	r0, r3
 800a120:	f007 fb78 	bl	8011814 <_ZN10UtestShell10countCheckEv>
}
 800a124:	bf00      	nop
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d008      	beq.n	800a14e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	33c4      	adds	r3, #196	; 0xc4
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4610      	mov	r0, r2
 800a14c:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	3338      	adds	r3, #56	; 0x38
 800a152:	4618      	mov	r0, r3
 800a154:	f013 fdd7 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d023      	beq.n	800a1a8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800a160:	68f9      	ldr	r1, [r7, #12]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f9f2 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d009      	beq.n	800a182 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800a16e:	68f9      	ldr	r1, [r7, #12]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f9eb 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a176:	4603      	mov	r3, r0
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800a17e:	2301      	movs	r3, #1
 800a180:	e000      	b.n	800a184 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800a182:	2300      	movs	r3, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00a      	beq.n	800a19e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800a188:	68f9      	ldr	r1, [r7, #12]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f9de 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a190:	4603      	mov	r3, r0
 800a192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	32c4      	adds	r2, #196	; 0xc4
 800a198:	6812      	ldr	r2, [r2, #0]
 800a19a:	4618      	mov	r0, r3
 800a19c:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f013 fcba 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	e7d8      	b.n	800a15a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800a1a8:	bf00      	nop
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	3320      	adds	r3, #32
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f010 f947 	bl	801a450 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e027      	b.n	800a21c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	3338      	adds	r3, #56	; 0x38
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f013 fd98 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d01d      	beq.n	800a21a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f9b3 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00c      	beq.n	800a206 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800a1ec:	68f9      	ldr	r1, [r7, #12]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f9ac 	bl	800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff ffda 	bl	800a1b0 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800a202:	2301      	movs	r3, #1
 800a204:	e000      	b.n	800a208 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800a206:	2300      	movs	r3, #0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e005      	b.n	800a21c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f013 fc81 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	e7de      	b.n	800a1d8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7ff ff7d 	bl	800a12c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7ff fe44 	bl	8009ec0 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00a      	beq.n	800a254 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3398      	adds	r3, #152	; 0x98
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	4798      	blx	r3
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800a250:	2301      	movs	r3, #1
 800a252:	e000      	b.n	800a256 <_ZN11MockSupport17checkExpectationsEv+0x32>
 800a254:	2300      	movs	r3, #0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d002      	beq.n	800a260 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff fe7d 	bl	8009f5a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7ff ffa5 	bl	800a1b0 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7ff fed5 	bl	800a01c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800a272:	bf00      	nop
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b082      	sub	sp, #8
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3338      	adds	r3, #56	; 0x38
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f013 fd0c 	bl	801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	bf14      	ite	ne
 800a296:	2301      	movne	r3, #1
 800a298:	2300      	moveq	r3, #0
 800a29a:	b2db      	uxtb	r3, r3
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800a2a4:	b590      	push	{r4, r7, lr}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3338      	adds	r3, #56	; 0x38
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f013 fcf7 	bl	801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800a2ba:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d111      	bne.n	800a2e6 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800a2c2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a2c6:	490a      	ldr	r1, [pc, #40]	; (800a2f0 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800a2c8:	2038      	movs	r0, #56	; 0x38
 800a2ca:	f7fe fc8b 	bl	8008be4 <_ZnwjPKci>
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f011 fd6e 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
 800a2d8:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	3338      	adds	r3, #56	; 0x38
 800a2de:	68f9      	ldr	r1, [r7, #12]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f013 fcab 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd90      	pop	{r4, r7, pc}
 800a2f0:	08022750 	.word	0x08022750

0800a2f4 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
 800a300:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800a302:	68b9      	ldr	r1, [r7, #8]
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f7ff ffcd 	bl	800a2a4 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800a30a:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3344      	adds	r3, #68	; 0x44
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	6978      	ldr	r0, [r7, #20]
 800a31a:	4798      	blx	r3
}
 800a31c:	bf00      	nop
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b088      	sub	sp, #32
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	3338      	adds	r3, #56	; 0x38
 800a334:	6879      	ldr	r1, [r7, #4]
 800a336:	4618      	mov	r0, r3
 800a338:	f013 fcb6 	bl	801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800a33c:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d111      	bne.n	800a368 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800a344:	f107 0314 	add.w	r3, r7, #20
 800a348:	490b      	ldr	r1, [pc, #44]	; (800a378 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 f80d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800a350:	f107 0314 	add.w	r3, r7, #20
 800a354:	4619      	mov	r1, r3
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f011 fd2c 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
 800a35c:	f107 0314 	add.w	r3, r7, #20
 800a360:	4618      	mov	r0, r3
 800a362:	f001 fbba 	bl	800bada <_ZN12SimpleStringD1Ev>
 800a366:	e003      	b.n	800a370 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800a368:	69f9      	ldr	r1, [r7, #28]
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f7ff f8a2 	bl	80094b4 <_ZN14MockNamedValueC1ERKS_>
}
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	08022748 	.word	0x08022748

0800a37c <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800a37c:	b590      	push	{r4, r7, lr}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800a386:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a38a:	4927      	ldr	r1, [pc, #156]	; (800a428 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800a38c:	2048      	movs	r0, #72	; 0x48
 800a38e:	f7fe fc29 	bl	8008be4 <_ZnwjPKci>
 800a392:	4604      	mov	r4, r0
 800a394:	6839      	ldr	r1, [r7, #0]
 800a396:	4620      	mov	r0, r4
 800a398:	f7ff f8f8 	bl	800958c <_ZN11MockSupportC1ERK12SimpleString>
 800a39c:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	33a4      	adds	r3, #164	; 0xa4
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	6952      	ldr	r2, [r2, #20]
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3390      	adds	r3, #144	; 0x90
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a3cc:	f083 0301 	eor.w	r3, r3, #1
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d005      	beq.n	800a3e2 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3384      	adds	r3, #132	; 0x84
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	7b1b      	ldrb	r3, [r3, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d005      	beq.n	800a3f6 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3308      	adds	r3, #8
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	4798      	blx	r3

    newMock->tracing(tracing_);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	338c      	adds	r3, #140	; 0x8c
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800a404:	4611      	mov	r1, r2
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	33b8      	adds	r3, #184	; 0xb8
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	3230      	adds	r2, #48	; 0x30
 800a416:	4611      	mov	r1, r2
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	4798      	blx	r3
    return newMock;
 800a41c:	68fb      	ldr	r3, [r7, #12]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3714      	adds	r7, #20
 800a422:	46bd      	mov	sp, r7
 800a424:	bd90      	pop	{r4, r7, pc}
 800a426:	bf00      	nop
 800a428:	08022750 	.word	0x08022750

0800a42c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800a42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a42e:	b0ab      	sub	sp, #172	; 0xac
 800a430:	af04      	add	r7, sp, #16
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800a436:	f107 0308 	add.w	r3, r7, #8
 800a43a:	4941      	ldr	r1, [pc, #260]	; (800a540 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 ff94 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800a442:	f107 0308 	add.w	r3, r7, #8
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	4618      	mov	r0, r3
 800a44a:	f001 fbc3 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800a44e:	f107 0308 	add.w	r3, r7, #8
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff ff10 	bl	800a27a <_ZN11MockSupport7hasDataERK12SimpleString>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d048      	beq.n	800a4f2 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800a460:	f008 fb66 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 800a464:	4604      	mov	r4, r0
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	3324      	adds	r3, #36	; 0x24
 800a46a:	681d      	ldr	r5, [r3, #0]
 800a46c:	f107 0318 	add.w	r3, r7, #24
 800a470:	f107 0208 	add.w	r2, r7, #8
 800a474:	6879      	ldr	r1, [r7, #4]
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff ff54 	bl	800a324 <_ZN11MockSupport7getDataERK12SimpleString>
 800a47c:	f107 0310 	add.w	r3, r7, #16
 800a480:	f107 0218 	add.w	r2, r7, #24
 800a484:	4611      	mov	r1, r2
 800a486:	4618      	mov	r0, r3
 800a488:	f011 ff61 	bl	801c34e <_ZNK14MockNamedValue7getTypeEv>
 800a48c:	f107 0310 	add.w	r3, r7, #16
 800a490:	4618      	mov	r0, r3
 800a492:	f001 faf5 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800a496:	4606      	mov	r6, r0
 800a498:	f008 fb5a 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a49c:	4603      	mov	r3, r0
 800a49e:	9302      	str	r3, [sp, #8]
 800a4a0:	f240 13bd 	movw	r3, #445	; 0x1bd
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	4b27      	ldr	r3, [pc, #156]	; (800a544 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	4632      	mov	r2, r6
 800a4ae:	4926      	ldr	r1, [pc, #152]	; (800a548 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	47a8      	blx	r5
 800a4b4:	f107 0310 	add.w	r3, r7, #16
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f001 fb0e 	bl	800bada <_ZN12SimpleStringD1Ev>
 800a4be:	f107 0318 	add.w	r3, r7, #24
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f011 fca0 	bl	801be08 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800a4c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a4cc:	f107 0208 	add.w	r2, r7, #8
 800a4d0:	6879      	ldr	r1, [r7, #4]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7ff ff26 	bl	800a324 <_ZN11MockSupport7getDataERK12SimpleString>
 800a4d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f012 fa4f 	bl	801c980 <_ZNK14MockNamedValue16getObjectPointerEv>
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	bf00      	nop
 800a4e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f011 fc8c 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 800a4f0:	e01b      	b.n	800a52a <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7ff ff41 	bl	800a37c <_ZN11MockSupport5cloneERK12SimpleString>
 800a4fa:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800a4fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a502:	4911      	ldr	r1, [pc, #68]	; (800a548 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800a504:	4618      	mov	r0, r3
 800a506:	f000 ff30 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800a50a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800a50e:	f107 0108 	add.w	r1, r7, #8
 800a512:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff feec 	bl	800a2f4 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800a51c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a520:	4618      	mov	r0, r3
 800a522:	f001 fada 	bl	800bada <_ZN12SimpleStringD1Ev>
    return newMock;
 800a526:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800a52a:	f107 0308 	add.w	r3, r7, #8
 800a52e:	4618      	mov	r0, r3
 800a530:	f001 fad3 	bl	800bada <_ZN12SimpleStringD1Ev>
 800a534:	4623      	mov	r3, r4
}
 800a536:	4618      	mov	r0, r3
 800a538:	379c      	adds	r7, #156	; 0x9c
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a53e:	bf00      	nop
 800a540:	08022768 	.word	0x08022768
 800a544:	08022750 	.word	0x08022750
 800a548:	08022788 	.word	0x08022788

0800a54c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800a54c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a550:	b08b      	sub	sp, #44	; 0x2c
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800a558:	2500      	movs	r5, #0
 800a55a:	2600      	movs	r6, #0
 800a55c:	f107 0308 	add.w	r3, r7, #8
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	4618      	mov	r0, r3
 800a564:	f013 fb26 	bl	801dbb4 <_ZNK22MockNamedValueListNode7getTypeEv>
 800a568:	f04f 0801 	mov.w	r8, #1
 800a56c:	f107 0310 	add.w	r3, r7, #16
 800a570:	492e      	ldr	r1, [pc, #184]	; (800a62c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800a572:	4618      	mov	r0, r3
 800a574:	f000 fef9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800a578:	f04f 0901 	mov.w	r9, #1
 800a57c:	f107 0210 	add.w	r2, r7, #16
 800a580:	f107 0308 	add.w	r3, r7, #8
 800a584:	4611      	mov	r1, r2
 800a586:	4618      	mov	r0, r3
 800a588:	f001 fab3 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d01a      	beq.n	800a5c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800a592:	f107 0318 	add.w	r3, r7, #24
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	4618      	mov	r0, r3
 800a59a:	f013 faf8 	bl	801db8e <_ZNK22MockNamedValueListNode7getNameEv>
 800a59e:	2501      	movs	r5, #1
 800a5a0:	f107 0320 	add.w	r3, r7, #32
 800a5a4:	4922      	ldr	r1, [pc, #136]	; (800a630 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 fedf 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800a5ac:	2601      	movs	r6, #1
 800a5ae:	f107 0220 	add.w	r2, r7, #32
 800a5b2:	f107 0318 	add.w	r3, r7, #24
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 ff54 	bl	800b466 <_ZNK12SimpleString8containsERKS_>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800a5c4:	2401      	movs	r4, #1
 800a5c6:	e000      	b.n	800a5ca <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800a5c8:	2400      	movs	r4, #0
 800a5ca:	2e00      	cmp	r6, #0
 800a5cc:	d004      	beq.n	800a5d8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800a5ce:	f107 0320 	add.w	r3, r7, #32
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f001 fa81 	bl	800bada <_ZN12SimpleStringD1Ev>
 800a5d8:	2d00      	cmp	r5, #0
 800a5da:	d004      	beq.n	800a5e6 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800a5dc:	f107 0318 	add.w	r3, r7, #24
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f001 fa7a 	bl	800bada <_ZN12SimpleStringD1Ev>
 800a5e6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ea:	d004      	beq.n	800a5f6 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800a5ec:	f107 0310 	add.w	r3, r7, #16
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f001 fa72 	bl	800bada <_ZN12SimpleStringD1Ev>
 800a5f6:	f1b8 0f00 	cmp.w	r8, #0
 800a5fa:	d004      	beq.n	800a606 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800a5fc:	f107 0308 	add.w	r3, r7, #8
 800a600:	4618      	mov	r0, r3
 800a602:	f001 fa6a 	bl	800bada <_ZN12SimpleStringD1Ev>
 800a606:	2c00      	cmp	r4, #0
 800a608:	d00a      	beq.n	800a620 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800a60a:	6838      	ldr	r0, [r7, #0]
 800a60c:	f013 fa90 	bl	801db30 <_ZN22MockNamedValueListNode4itemEv>
 800a610:	4603      	mov	r3, r0
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	32a0      	adds	r2, #160	; 0xa0
 800a616:	6812      	ldr	r2, [r2, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	4790      	blx	r2
 800a61c:	4603      	mov	r3, r0
 800a61e:	e000      	b.n	800a622 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	372c      	adds	r7, #44	; 0x2c
 800a626:	46bd      	mov	sp, r7
 800a628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a62c:	08022788 	.word	0x08022788
 800a630:	08022768 	.word	0x08022768

0800a634 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <_ZN11MockSupport11returnValueEv+0x28>
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3354      	adds	r3, #84	; 0x54
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	4610      	mov	r0, r2
 800a658:	4798      	blx	r3
 800a65a:	e010      	b.n	800a67e <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800a65c:	f107 0308 	add.w	r3, r7, #8
 800a660:	4909      	ldr	r1, [pc, #36]	; (800a688 <_ZN11MockSupport11returnValueEv+0x54>)
 800a662:	4618      	mov	r0, r3
 800a664:	f000 fe81 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800a668:	f107 0308 	add.w	r3, r7, #8
 800a66c:	4619      	mov	r1, r3
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f011 fba0 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
 800a674:	f107 0308 	add.w	r3, r7, #8
 800a678:	4618      	mov	r0, r3
 800a67a:	f001 fa2e 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	08022748 	.word	0x08022748

0800a68c <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800a68c:	b590      	push	{r4, r7, lr}
 800a68e:	b091      	sub	sp, #68	; 0x44
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	3320      	adds	r3, #32
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f107 0208 	add.w	r2, r7, #8
 800a6a0:	6879      	ldr	r1, [r7, #4]
 800a6a2:	4610      	mov	r0, r2
 800a6a4:	4798      	blx	r3
 800a6a6:	f107 0308 	add.w	r3, r7, #8
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f011 fe5e 	bl	801c36c <_ZNK14MockNamedValue12getBoolValueEv>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	461c      	mov	r4, r3
 800a6b4:	bf00      	nop
 800a6b6:	f107 0308 	add.w	r3, r7, #8
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f011 fba4 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 800a6c0:	4623      	mov	r3, r4
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3744      	adds	r7, #68	; 0x44
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd90      	pop	{r4, r7, pc}

0800a6ca <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800a6ca:	b590      	push	{r4, r7, lr}
 800a6cc:	b091      	sub	sp, #68	; 0x44
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3320      	adds	r3, #32
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f107 0208 	add.w	r2, r7, #8
 800a6de:	6879      	ldr	r1, [r7, #4]
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	4798      	blx	r3
 800a6e4:	f107 0308 	add.w	r3, r7, #8
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f011 fe67 	bl	801c3bc <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	bf00      	nop
 800a6f2:	f107 0308 	add.w	r3, r7, #8
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f011 fb86 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 800a6fc:	4623      	mov	r3, r4
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3744      	adds	r7, #68	; 0x44
 800a702:	46bd      	mov	sp, r7
 800a704:	bd90      	pop	{r4, r7, pc}

0800a706 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800a706:	b590      	push	{r4, r7, lr}
 800a708:	b091      	sub	sp, #68	; 0x44
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3320      	adds	r3, #32
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f107 0208 	add.w	r2, r7, #8
 800a71a:	6879      	ldr	r1, [r7, #4]
 800a71c:	4610      	mov	r0, r2
 800a71e:	4798      	blx	r3
 800a720:	f107 0308 	add.w	r3, r7, #8
 800a724:	4618      	mov	r0, r3
 800a726:	f011 fe99 	bl	801c45c <_ZNK14MockNamedValue11getIntValueEv>
 800a72a:	4604      	mov	r4, r0
 800a72c:	bf00      	nop
 800a72e:	f107 0308 	add.w	r3, r7, #8
 800a732:	4618      	mov	r0, r3
 800a734:	f011 fb68 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 800a738:	4623      	mov	r3, r4
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3744      	adds	r7, #68	; 0x44
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd90      	pop	{r4, r7, pc}

0800a742 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b082      	sub	sp, #8
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	331c      	adds	r3, #28
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	4798      	blx	r3
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d007      	beq.n	800a76e <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	335c      	adds	r3, #92	; 0x5c
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
 800a76a:	4603      	mov	r3, r0
 800a76c:	e000      	b.n	800a770 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800a76e:	683b      	ldr	r3, [r7, #0]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	331c      	adds	r3, #28
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	4798      	blx	r3
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3368      	adds	r3, #104	; 0x68
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	4798      	blx	r3
 800a7a2:	eeb0 7a40 	vmov.f32	s14, s0
 800a7a6:	eef0 7a60 	vmov.f32	s15, s1
 800a7aa:	e001      	b.n	800a7b0 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800a7ac:	ed97 7b00 	vldr	d7, [r7]
}
 800a7b0:	eeb0 0a47 	vmov.f32	s0, s14
 800a7b4:	eef0 0a67 	vmov.f32	s1, s15
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	331c      	adds	r3, #28
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	4798      	blx	r3
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d007      	beq.n	800a7ea <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3338      	adds	r3, #56	; 0x38
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	4798      	blx	r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	e000      	b.n	800a7ec <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800a7ea:	683b      	ldr	r3, [r7, #0]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	331c      	adds	r3, #28
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	4798      	blx	r3
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d007      	beq.n	800a822 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3324      	adds	r3, #36	; 0x24
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	4798      	blx	r3
 800a81e:	4603      	mov	r3, r0
 800a820:	e000      	b.n	800a824 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800a822:	78fb      	ldrb	r3, [r7, #3]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	331c      	adds	r3, #28
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	4798      	blx	r3
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d007      	beq.n	800a858 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	332c      	adds	r3, #44	; 0x2c
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	4798      	blx	r3
 800a854:	4603      	mov	r3, r0
 800a856:	e000      	b.n	800a85a <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800a858:	683b      	ldr	r3, [r7, #0]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	331c      	adds	r3, #28
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	4798      	blx	r3
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3334      	adds	r3, #52	; 0x34
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	4798      	blx	r3
 800a88a:	4603      	mov	r3, r0
 800a88c:	e000      	b.n	800a890 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800a88e:	683b      	ldr	r3, [r7, #0]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	331c      	adds	r3, #28
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	4798      	blx	r3
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d007      	beq.n	800a8c4 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3340      	adds	r3, #64	; 0x40
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	4798      	blx	r3
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	e000      	b.n	800a8c6 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800a8c4:	683b      	ldr	r3, [r7, #0]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800a8ce:	b590      	push	{r4, r7, lr}
 800a8d0:	b091      	sub	sp, #68	; 0x44
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3320      	adds	r3, #32
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f107 0208 	add.w	r2, r7, #8
 800a8e2:	6879      	ldr	r1, [r7, #4]
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	4798      	blx	r3
 800a8e8:	f107 0308 	add.w	r3, r7, #8
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f011 fddd 	bl	801c4ac <_ZNK14MockNamedValue15getLongIntValueEv>
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	bf00      	nop
 800a8f6:	f107 0308 	add.w	r3, r7, #8
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f011 fa84 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 800a900:	4623      	mov	r3, r4
}
 800a902:	4618      	mov	r0, r3
 800a904:	3744      	adds	r7, #68	; 0x44
 800a906:	46bd      	mov	sp, r7
 800a908:	bd90      	pop	{r4, r7, pc}

0800a90a <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800a90a:	b590      	push	{r4, r7, lr}
 800a90c:	b091      	sub	sp, #68	; 0x44
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3320      	adds	r3, #32
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f107 0208 	add.w	r2, r7, #8
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	4610      	mov	r0, r2
 800a922:	4798      	blx	r3
 800a924:	f107 0308 	add.w	r3, r7, #8
 800a928:	4618      	mov	r0, r3
 800a92a:	f011 fe21 	bl	801c570 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800a92e:	4604      	mov	r4, r0
 800a930:	bf00      	nop
 800a932:	f107 0308 	add.w	r3, r7, #8
 800a936:	4618      	mov	r0, r3
 800a938:	f011 fa66 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 800a93c:	4623      	mov	r3, r4
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3744      	adds	r7, #68	; 0x44
 800a942:	46bd      	mov	sp, r7
 800a944:	bd90      	pop	{r4, r7, pc}
	...

0800a948 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800a948:	b5b0      	push	{r4, r5, r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af02      	add	r7, sp, #8
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800a952:	f008 f8ed 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 800a956:	4604      	mov	r4, r0
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	3368      	adds	r3, #104	; 0x68
 800a95c:	681d      	ldr	r5, [r3, #0]
 800a95e:	f008 f8f7 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a962:	4603      	mov	r3, r0
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	f240 2345 	movw	r3, #581	; 0x245
 800a96a:	4a06      	ldr	r2, [pc, #24]	; (800a984 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800a96c:	4906      	ldr	r1, [pc, #24]	; (800a988 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800a96e:	4620      	mov	r0, r4
 800a970:	47a8      	blx	r5
    return cpputest_longlong(0);
 800a972:	2100      	movs	r1, #0
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7fe fd2f 	bl	80093d8 <_ZN17cpputest_longlongC1Ei>
}
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bdb0      	pop	{r4, r5, r7, pc}
 800a982:	bf00      	nop
 800a984:	08022750 	.word	0x08022750
 800a988:	08022794 	.word	0x08022794

0800a98c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800a98c:	b5b0      	push	{r4, r5, r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af02      	add	r7, sp, #8
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800a996:	f008 f8cb 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 800a99a:	4604      	mov	r4, r0
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	3368      	adds	r3, #104	; 0x68
 800a9a0:	681d      	ldr	r5, [r3, #0]
 800a9a2:	f008 f8d5 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	f240 234b 	movw	r3, #587	; 0x24b
 800a9ae:	4a06      	ldr	r2, [pc, #24]	; (800a9c8 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800a9b0:	4906      	ldr	r1, [pc, #24]	; (800a9cc <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7fe fd19 	bl	80093f0 <_ZN18cpputest_ulonglongC1Ei>
}
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	08022750 	.word	0x08022750
 800a9cc:	080227b4 	.word	0x080227b4

0800a9d0 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800a9d0:	b5b0      	push	{r4, r5, r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af02      	add	r7, sp, #8
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4639      	mov	r1, r7
 800a9dc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800a9e0:	f008 f8a6 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	6823      	ldr	r3, [r4, #0]
 800a9e8:	3368      	adds	r3, #104	; 0x68
 800a9ea:	681d      	ldr	r5, [r3, #0]
 800a9ec:	f008 f8b0 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	f240 2351 	movw	r3, #593	; 0x251
 800a9f8:	4a06      	ldr	r2, [pc, #24]	; (800aa14 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800a9fa:	4907      	ldr	r1, [pc, #28]	; (800aa18 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	47a8      	blx	r5
    return defaultValue;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	461a      	mov	r2, r3
 800aa04:	463b      	mov	r3, r7
 800aa06:	cb03      	ldmia	r3!, {r0, r1}
 800aa08:	6010      	str	r0, [r2, #0]
 800aa0a:	6051      	str	r1, [r2, #4]
}
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bdb0      	pop	{r4, r5, r7, pc}
 800aa14:	08022750 	.word	0x08022750
 800aa18:	08022794 	.word	0x08022794

0800aa1c <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800aa1c:	b5b0      	push	{r4, r5, r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af02      	add	r7, sp, #8
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	4639      	mov	r1, r7
 800aa28:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800aa2c:	f008 f880 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 800aa30:	4604      	mov	r4, r0
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	3368      	adds	r3, #104	; 0x68
 800aa36:	681d      	ldr	r5, [r3, #0]
 800aa38:	f008 f88a 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	f240 2357 	movw	r3, #599	; 0x257
 800aa44:	4a06      	ldr	r2, [pc, #24]	; (800aa60 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800aa46:	4907      	ldr	r1, [pc, #28]	; (800aa64 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800aa48:	4620      	mov	r0, r4
 800aa4a:	47a8      	blx	r5
    return defaultValue;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	463b      	mov	r3, r7
 800aa52:	cb03      	ldmia	r3!, {r0, r1}
 800aa54:	6010      	str	r0, [r2, #0]
 800aa56:	6051      	str	r1, [r2, #4]
}
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bdb0      	pop	{r4, r5, r7, pc}
 800aa60:	08022750 	.word	0x08022750
 800aa64:	080227b4 	.word	0x080227b4

0800aa68 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800aa68:	b590      	push	{r4, r7, lr}
 800aa6a:	b091      	sub	sp, #68	; 0x44
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3320      	adds	r3, #32
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f107 0208 	add.w	r2, r7, #8
 800aa7c:	6879      	ldr	r1, [r7, #4]
 800aa7e:	4610      	mov	r0, r2
 800aa80:	4798      	blx	r3
 800aa82:	f107 0308 	add.w	r3, r7, #8
 800aa86:	4618      	mov	r0, r3
 800aa88:	f011 fea6 	bl	801c7d8 <_ZNK14MockNamedValue14getStringValueEv>
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	bf00      	nop
 800aa90:	f107 0308 	add.w	r3, r7, #8
 800aa94:	4618      	mov	r0, r3
 800aa96:	f011 f9b7 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 800aa9a:	4623      	mov	r3, r4
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3744      	adds	r7, #68	; 0x44
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd90      	pop	{r4, r7, pc}

0800aaa4 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	ed2d 8b02 	vpush	{d8}
 800aaaa:	b090      	sub	sp, #64	; 0x40
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3320      	adds	r3, #32
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f107 0208 	add.w	r2, r7, #8
 800aabc:	6879      	ldr	r1, [r7, #4]
 800aabe:	4610      	mov	r0, r2
 800aac0:	4798      	blx	r3
 800aac2:	f107 0308 	add.w	r3, r7, #8
 800aac6:	4618      	mov	r0, r3
 800aac8:	f011 fe2a 	bl	801c720 <_ZNK14MockNamedValue14getDoubleValueEv>
 800aacc:	eeb0 8a40 	vmov.f32	s16, s0
 800aad0:	eef0 8a60 	vmov.f32	s17, s1
 800aad4:	bf00      	nop
 800aad6:	f107 0308 	add.w	r3, r7, #8
 800aada:	4618      	mov	r0, r3
 800aadc:	f011 f994 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 800aae0:	eeb0 7a48 	vmov.f32	s14, s16
 800aae4:	eef0 7a68 	vmov.f32	s15, s17
}
 800aae8:	eeb0 0a47 	vmov.f32	s0, s14
 800aaec:	eef0 0a67 	vmov.f32	s1, s15
 800aaf0:	3740      	adds	r7, #64	; 0x40
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	ecbd 8b02 	vpop	{d8}
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b082      	sub	sp, #8
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	331c      	adds	r3, #28
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	4798      	blx	r3
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d007      	beq.n	800ab26 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	336c      	adds	r3, #108	; 0x6c
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	4798      	blx	r3
 800ab22:	4603      	mov	r3, r0
 800ab24:	e000      	b.n	800ab28 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800ab26:	683b      	ldr	r3, [r7, #0]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	331c      	adds	r3, #28
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	4798      	blx	r3
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d007      	beq.n	800ab5c <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3378      	adds	r3, #120	; 0x78
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	4798      	blx	r3
 800ab58:	4603      	mov	r3, r0
 800ab5a:	e000      	b.n	800ab5e <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800ab5c:	683b      	ldr	r3, [r7, #0]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	331c      	adds	r3, #28
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	4798      	blx	r3
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d007      	beq.n	800ab92 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	3380      	adds	r3, #128	; 0x80
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	4798      	blx	r3
 800ab8e:	4603      	mov	r3, r0
 800ab90:	e000      	b.n	800ab94 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800ab92:	683b      	ldr	r3, [r7, #0]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800ab9c:	b590      	push	{r4, r7, lr}
 800ab9e:	b091      	sub	sp, #68	; 0x44
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	3320      	adds	r3, #32
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f107 0208 	add.w	r2, r7, #8
 800abb0:	6879      	ldr	r1, [r7, #4]
 800abb2:	4610      	mov	r0, r2
 800abb4:	4798      	blx	r3
 800abb6:	f107 0308 	add.w	r3, r7, #8
 800abba:	4618      	mov	r0, r3
 800abbc:	f011 fe34 	bl	801c828 <_ZNK14MockNamedValue15getPointerValueEv>
 800abc0:	4604      	mov	r4, r0
 800abc2:	bf00      	nop
 800abc4:	f107 0308 	add.w	r3, r7, #8
 800abc8:	4618      	mov	r0, r3
 800abca:	f011 f91d 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 800abce:	4623      	mov	r3, r4
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3744      	adds	r7, #68	; 0x44
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd90      	pop	{r4, r7, pc}

0800abd8 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800abd8:	b590      	push	{r4, r7, lr}
 800abda:	b091      	sub	sp, #68	; 0x44
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3320      	adds	r3, #32
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f107 0208 	add.w	r2, r7, #8
 800abec:	6879      	ldr	r1, [r7, #4]
 800abee:	4610      	mov	r0, r2
 800abf0:	4798      	blx	r3
 800abf2:	f107 0308 	add.w	r3, r7, #8
 800abf6:	4618      	mov	r0, r3
 800abf8:	f011 fe3e 	bl	801c878 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800abfc:	4604      	mov	r4, r0
 800abfe:	bf00      	nop
 800ac00:	f107 0308 	add.w	r3, r7, #8
 800ac04:	4618      	mov	r0, r3
 800ac06:	f011 f8ff 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 800ac0a:	4623      	mov	r3, r4
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3744      	adds	r7, #68	; 0x44
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd90      	pop	{r4, r7, pc}

0800ac14 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800ac14:	b590      	push	{r4, r7, lr}
 800ac16:	b091      	sub	sp, #68	; 0x44
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3320      	adds	r3, #32
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f107 0208 	add.w	r2, r7, #8
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	4798      	blx	r3
 800ac2e:	f107 0308 	add.w	r3, r7, #8
 800ac32:	4618      	mov	r0, r3
 800ac34:	f011 fe48 	bl	801c8c8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800ac38:	4604      	mov	r4, r0
 800ac3a:	bf00      	nop
 800ac3c:	f107 0308 	add.w	r3, r7, #8
 800ac40:	4618      	mov	r0, r3
 800ac42:	f011 f8e1 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 800ac46:	4623      	mov	r3, r4
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3744      	adds	r7, #68	; 0x44
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd90      	pop	{r4, r7, pc}

0800ac50 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00a      	beq.n	800ac76 <_ZN11MockSupport14hasReturnValueEv+0x26>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3350      	adds	r3, #80	; 0x50
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4610      	mov	r0, r2
 800ac70:	4798      	blx	r3
 800ac72:	4603      	mov	r3, r0
 800ac74:	e000      	b.n	800ac78 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <_Z41__static_initialization_and_destruction_0ii>:
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d115      	bne.n	800acbc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d110      	bne.n	800acbc <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800ac9a:	f107 0308 	add.w	r3, r7, #8
 800ac9e:	490f      	ldr	r1, [pc, #60]	; (800acdc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 fb62 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800aca6:	f107 0308 	add.w	r3, r7, #8
 800acaa:	4619      	mov	r1, r3
 800acac:	480c      	ldr	r0, [pc, #48]	; (800ace0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800acae:	f7fe fc6d 	bl	800958c <_ZN11MockSupportC1ERK12SimpleString>
 800acb2:	f107 0308 	add.w	r3, r7, #8
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 ff0f 	bl	800bada <_ZN12SimpleStringD1Ev>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d107      	bne.n	800acd2 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acc8:	4293      	cmp	r3, r2
 800acca:	d102      	bne.n	800acd2 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800accc:	4804      	ldr	r0, [pc, #16]	; (800ace0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800acce:	f7fe fca7 	bl	8009620 <_ZN11MockSupportD1Ev>
}
 800acd2:	bf00      	nop
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	08022748 	.word	0x08022748
 800ace0:	20000734 	.word	0x20000734

0800ace4 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	4a05      	ldr	r2, [pc, #20]	; (800ad04 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	601a      	str	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe fbbb 	bl	8009470 <_ZN11MockFailureD1Ev>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4618      	mov	r0, r3
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	08025f9c 	.word	0x08025f9c

0800ad08 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7ff ffe7 	bl	800ace4 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800ad16:	2134      	movs	r1, #52	; 0x34
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7fd ff77 	bl	8008c0c <_ZdlPvj>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4618      	mov	r0, r3
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	4a05      	ldr	r2, [pc, #20]	; (800ad48 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7fe fb99 	bl	8009470 <_ZN11MockFailureD1Ev>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4618      	mov	r0, r3
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	08025f70 	.word	0x08025f70

0800ad4c <_ZN20MockCallOrderFailureD0Ev>:
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff ffe7 	bl	800ad28 <_ZN20MockCallOrderFailureD1Ev>
 800ad5a:	2134      	movs	r1, #52	; 0x34
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7fd ff55 	bl	8008c0c <_ZdlPvj>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4618      	mov	r0, r3
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ad74:	2001      	movs	r0, #1
 800ad76:	f7ff ff83 	bl	800ac80 <_Z41__static_initialization_and_destruction_0ii>
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ad84:	2000      	movs	r0, #0
 800ad86:	f7ff ff7b 	bl	800ac80 <_Z41__static_initialization_and_destruction_0ii>
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800ad94:	4b05      	ldr	r3, [pc, #20]	; (800adac <_ZN11SimpleMutexC1Ev+0x20>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4798      	blx	r3
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	601a      	str	r2, [r3, #0]
}
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4618      	mov	r0, r3
 800ada4:	3708      	adds	r7, #8
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	200000f0 	.word	0x200000f0

0800adb0 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800adb8:	4b05      	ldr	r3, [pc, #20]	; (800add0 <_ZN11SimpleMutexD1Ev+0x20>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	6812      	ldr	r2, [r2, #0]
 800adc0:	4610      	mov	r0, r2
 800adc2:	4798      	blx	r3
}
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	200000fc 	.word	0x200000fc

0800add4 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800addc:	4b04      	ldr	r3, [pc, #16]	; (800adf0 <_ZN11SimpleMutex4LockEv+0x1c>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	6812      	ldr	r2, [r2, #0]
 800ade4:	4610      	mov	r0, r2
 800ade6:	4798      	blx	r3
}
 800ade8:	bf00      	nop
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	200000f4 	.word	0x200000f4

0800adf4 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800adfc:	4b04      	ldr	r3, [pc, #16]	; (800ae10 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	6812      	ldr	r2, [r2, #0]
 800ae04:	4610      	mov	r0, r2
 800ae06:	4798      	blx	r3
}
 800ae08:	bf00      	nop
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	200000f8 	.word	0x200000f8

0800ae14 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7ff ffd3 	bl	800add4 <_ZN11SimpleMutex4LockEv>
}
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7ff ffd5 	bl	800adf4 <_ZN11SimpleMutex6UnlockEv>
}
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800ae58:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d103      	bne.n	800ae68 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800ae60:	f003 fd7a 	bl	800e958 <_Z24defaultNewArrayAllocatorv>
 800ae64:	4603      	mov	r3, r0
 800ae66:	e001      	b.n	800ae6c <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800ae68:	4b01      	ldr	r3, [pc, #4]	; (800ae70 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	2000077c 	.word	0x2000077c

0800ae74 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800ae74:	b590      	push	{r4, r7, lr}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800ae80:	f7ff ffe8 	bl	800ae54 <_ZN12SimpleString18getStringAllocatorEv>
 800ae84:	6803      	ldr	r3, [r0, #0]
 800ae86:	3308      	adds	r3, #8
 800ae88:	681c      	ldr	r4, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	68f9      	ldr	r1, [r7, #12]
 800ae90:	47a0      	blx	r4
 800ae92:	4603      	mov	r3, r0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd90      	pop	{r4, r7, pc}

0800ae9c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800ae9c:	b590      	push	{r4, r7, lr}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af02      	add	r7, sp, #8
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800aeaa:	f7ff ffd3 	bl	800ae54 <_ZN12SimpleString18getStringAllocatorEv>
 800aeae:	6803      	ldr	r3, [r0, #0]
 800aeb0:	330c      	adds	r3, #12
 800aeb2:	681c      	ldr	r4, [r3, #0]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	68f9      	ldr	r1, [r7, #12]
 800aebe:	47a0      	blx	r4
}
 800aec0:	bf00      	nop
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd90      	pop	{r4, r7, pc}

0800aec8 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800aed0:	2284      	movs	r2, #132	; 0x84
 800aed2:	4906      	ldr	r1, [pc, #24]	; (800aeec <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800aed4:	2001      	movs	r0, #1
 800aed6:	f7ff ffcd 	bl	800ae74 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800aeda:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	701a      	strb	r2, [r3, #0]
    return empty;
 800aee2:	68fb      	ldr	r3, [r7, #12]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	080227e0 	.word	0x080227e0

0800aef0 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f001 f809 	bl	800bf14 <_ZN12SimpleString7isSpaceEc>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d003      	beq.n	800af10 <_ZN12SimpleString4AtoUEPKc+0x20>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3301      	adds	r3, #1
 800af0c:	607b      	str	r3, [r7, #4]
 800af0e:	e7f3      	b.n	800aef8 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 ffe7 	bl	800beec <_ZN12SimpleString7isDigitEc>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d005      	beq.n	800af30 <_ZN12SimpleString4AtoUEPKc+0x40>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b2f      	cmp	r3, #47	; 0x2f
 800af2a:	d901      	bls.n	800af30 <_ZN12SimpleString4AtoUEPKc+0x40>
 800af2c:	2301      	movs	r3, #1
 800af2e:	e000      	b.n	800af32 <_ZN12SimpleString4AtoUEPKc+0x42>
 800af30:	2300      	movs	r3, #0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d010      	beq.n	800af58 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	4613      	mov	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	4413      	add	r3, r2
 800af4c:	3b30      	subs	r3, #48	; 0x30
 800af4e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	3301      	adds	r3, #1
 800af54:	607b      	str	r3, [r7, #4]
 800af56:	e7dd      	b.n	800af14 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800af58:	68fb      	ldr	r3, [r7, #12]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 ffd0 	bl	800bf14 <_ZN12SimpleString7isSpaceEc>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d003      	beq.n	800af82 <_ZN12SimpleString4AtoIEPKc+0x20>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3301      	adds	r3, #1
 800af7e:	607b      	str	r3, [r7, #4]
 800af80:	e7f3      	b.n	800af6a <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800af88:	7afb      	ldrb	r3, [r7, #11]
 800af8a:	2b2d      	cmp	r3, #45	; 0x2d
 800af8c:	d002      	beq.n	800af94 <_ZN12SimpleString4AtoIEPKc+0x32>
 800af8e:	7afb      	ldrb	r3, [r7, #11]
 800af90:	2b2b      	cmp	r3, #43	; 0x2b
 800af92:	d102      	bne.n	800af9a <_ZN12SimpleString4AtoIEPKc+0x38>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3301      	adds	r3, #1
 800af98:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 ffa2 	bl	800beec <_ZN12SimpleString7isDigitEc>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00f      	beq.n	800afce <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	4613      	mov	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	3b30      	subs	r3, #48	; 0x30
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	4413      	add	r3, r2
 800afc4:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3301      	adds	r3, #1
 800afca:	607b      	str	r3, [r7, #4]
 800afcc:	e7e7      	b.n	800af9e <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	2b2d      	cmp	r3, #45	; 0x2d
 800afd2:	d102      	bne.n	800afda <_ZN12SimpleString4AtoIEPKc+0x78>
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	425b      	negs	r3, r3
 800afd8:	e000      	b.n	800afdc <_ZN12SimpleString4AtoIEPKc+0x7a>
 800afda:	68fb      	ldr	r3, [r7, #12]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00c      	beq.n	800b010 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	781a      	ldrb	r2, [r3, #0]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	429a      	cmp	r2, r3
 800b000:	d106      	bne.n	800b010 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	3301      	adds	r3, #1
 800b006:	607b      	str	r3, [r7, #4]
       ++s2;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	3301      	adds	r3, #1
 800b00c:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800b00e:	e7ee      	b.n	800afee <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	461a      	mov	r2, r3
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	1ad3      	subs	r3, r2, r3
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800b030:	f04f 33ff 	mov.w	r3, #4294967295
 800b034:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3301      	adds	r3, #1
 800b03a:	60fb      	str	r3, [r7, #12]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	607a      	str	r2, [r7, #4]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	bf14      	ite	ne
 800b048:	2301      	movne	r3, #1
 800b04a:	2300      	moveq	r3, #0
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d000      	beq.n	800b054 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800b052:	e7f0      	b.n	800b036 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800b054:	68fb      	ldr	r3, [r7, #12]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800b062:	b480      	push	{r7}
 800b064:	b085      	sub	sp, #20
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	60b9      	str	r1, [r7, #8]
 800b06c:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d013      	beq.n	800b09c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00f      	beq.n	800b09c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	781a      	ldrb	r2, [r3, #0]
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	429a      	cmp	r2, r3
 800b086:	d109      	bne.n	800b09c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	607b      	str	r3, [r7, #4]
        ++s1;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	3301      	adds	r3, #1
 800b092:	60fb      	str	r3, [r7, #12]
        ++s2;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	3301      	adds	r3, #1
 800b098:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800b09a:	e7e8      	b.n	800b06e <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d006      	beq.n	800b0b0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	e000      	b.n	800b0b2 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr

0800b0be <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800b0be:	b480      	push	{r7}
 800b0c0:	b087      	sub	sp, #28
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	60f8      	str	r0, [r7, #12]
 800b0c6:	60b9      	str	r1, [r7, #8]
 800b0c8:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	e01e      	b.n	800b11c <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	781a      	ldrb	r2, [r3, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	607b      	str	r3, [r7, #4]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d005      	beq.n	800b0fe <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d001      	beq.n	800b0fe <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e000      	b.n	800b100 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800b0fe:	2300      	movs	r3, #0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00a      	beq.n	800b11a <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	3301      	adds	r3, #1
 800b108:	60bb      	str	r3, [r7, #8]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3301      	adds	r3, #1
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	781a      	ldrb	r2, [r3, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800b118:	e7e5      	b.n	800b0e6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800b11a:	697b      	ldr	r3, [r7, #20]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	371c      	adds	r7, #28
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	e01b      	b.n	800b176 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d016      	beq.n	800b174 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800b146:	6838      	ldr	r0, [r7, #0]
 800b148:	f7ff ff6e 	bl	800b028 <_ZN12SimpleString6StrLenEPKc>
 800b14c:	4603      	mov	r3, r0
 800b14e:	461a      	mov	r2, r3
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7ff ff85 	bl	800b062 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	bf0c      	ite	eq
 800b15e:	2301      	moveq	r3, #1
 800b160:	2300      	movne	r3, #0
 800b162:	b2db      	uxtb	r3, r3
 800b164:	2b00      	cmp	r3, #0
 800b166:	d001      	beq.n	800b16c <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	e004      	b.n	800b176 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	3301      	adds	r3, #1
 800b170:	607b      	str	r3, [r7, #4]
 800b172:	e7e4      	b.n	800b13e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b082      	sub	sp, #8
 800b182:	af00      	add	r7, sp, #0
 800b184:	4603      	mov	r3, r0
 800b186:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800b188:	79fb      	ldrb	r3, [r7, #7]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 fed9 	bl	800bf42 <_ZN12SimpleString7isUpperEc>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d003      	beq.n	800b19e <_ZN12SimpleString7ToLowerEc+0x20>
 800b196:	79fb      	ldrb	r3, [r7, #7]
 800b198:	3320      	adds	r3, #32
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	e000      	b.n	800b1a0 <_ZN12SimpleString7ToLowerEc+0x22>
 800b19e:	79fb      	ldrb	r3, [r7, #7]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	613b      	str	r3, [r7, #16]

    while (n--)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	1e5a      	subs	r2, r3, #1
 800b1c0:	607a      	str	r2, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	bf14      	ite	ne
 800b1c6:	2301      	movne	r3, #1
 800b1c8:	2300      	moveq	r3, #0
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d013      	beq.n	800b1f8 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	781a      	ldrb	r2, [r3, #0]
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d006      	beq.n	800b1ea <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	e007      	b.n	800b1fa <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	617b      	str	r3, [r7, #20]
            ++p2;
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	613b      	str	r3, [r7, #16]
    while (n--)
 800b1f6:	e7e1      	b.n	800b1bc <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	371c      	adds	r7, #28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
	...

0800b208 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00d      	beq.n	800b234 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6818      	ldr	r0, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6859      	ldr	r1, [r3, #4]
 800b220:	23ee      	movs	r3, #238	; 0xee
 800b222:	4a06      	ldr	r2, [pc, #24]	; (800b23c <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800b224:	f7ff fe3a 	bl	800ae9c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	605a      	str	r2, [r3, #4]
    }
}
 800b234:	bf00      	nop
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	080227e0 	.word	0x080227e0

0800b240 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff ffdd 	bl	800b208 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff fe37 	bl	800aec8 <_ZNK12SimpleString14getEmptyStringEv>
 800b25a:	4602      	mov	r2, r0
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	601a      	str	r2, [r3, #0]
}
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f7ff ffc7 	bl	800b208 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	4619      	mov	r1, r3
 800b286:	68b8      	ldr	r0, [r7, #8]
 800b288:	f000 fe12 	bl	800beb0 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800b28c:	4602      	mov	r2, r0
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	601a      	str	r2, [r3, #0]
}
 800b292:	bf00      	nop
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
	...

0800b29c <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f7ff ffae 	bl	800b208 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	f240 1209 	movw	r2, #265	; 0x109
 800b2ba:	4907      	ldr	r1, [pc, #28]	; (800b2d8 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7ff fdd9 	bl	800ae74 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	701a      	strb	r2, [r3, #0]
}
 800b2d0:	bf00      	nop
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	080227e0 	.word	0x080227e0

0800b2dc <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7ff ff8d 	bl	800b208 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	601a      	str	r2, [r3, #0]
}
 800b2fa:	bf00      	nop
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800b302:	b590      	push	{r4, r7, lr}
 800b304:	b083      	sub	sp, #12
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	681c      	ldr	r4, [r3, #0]
 800b310:	6838      	ldr	r0, [r7, #0]
 800b312:	f000 fbc1 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800b316:	4603      	mov	r3, r0
 800b318:	3301      	adds	r3, #1
 800b31a:	461a      	mov	r2, r3
 800b31c:	4621      	mov	r1, r4
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f7ff ffa2 	bl	800b268 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800b324:	bf00      	nop
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd90      	pop	{r4, r7, pc}

0800b32c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800b336:	6838      	ldr	r0, [r7, #0]
 800b338:	f7ff fe76 	bl	800b028 <_ZN12SimpleString6StrLenEPKc>
 800b33c:	4603      	mov	r3, r0
 800b33e:	3301      	adds	r3, #1
 800b340:	461a      	mov	r2, r3
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7ff ff8f 	bl	800b268 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800b34a:	bf00      	nop
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
    return buffer_;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	370c      	adds	r7, #12
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b082      	sub	sp, #8
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d103      	bne.n	800b38e <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7ff ff5a 	bl	800b240 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800b38c:	e003      	b.n	800b396 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800b38e:	6839      	ldr	r1, [r7, #0]
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f7ff ffcb 	bl	800b32c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b088      	sub	sp, #32
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800b3b8:	68b8      	ldr	r0, [r7, #8]
 800b3ba:	f7ff fe35 	bl	800b028 <_ZN12SimpleString6StrLenEPKc>
 800b3be:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	fb02 f303 	mul.w	r3, r2, r3
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f7ff ff65 	bl	800b29c <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800b3d8:	2300      	movs	r3, #0
 800b3da:	61bb      	str	r3, [r7, #24]
 800b3dc:	69ba      	ldr	r2, [r7, #24]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d20e      	bcs.n	800b402 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	68b9      	ldr	r1, [r7, #8]
 800b3ec:	69f8      	ldr	r0, [r7, #28]
 800b3ee:	f7ff fe66 	bl	800b0be <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800b3f2:	69fa      	ldr	r2, [r7, #28]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	61bb      	str	r3, [r7, #24]
 800b400:	e7ec      	b.n	800b3dc <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	2200      	movs	r2, #0
 800b406:	701a      	strb	r2, [r3, #0]
}
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	4618      	mov	r0, r3
 800b40c:	3720      	adds	r7, #32
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800b412:	b580      	push	{r7, lr}
 800b414:	b082      	sub	sp, #8
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800b428:	6838      	ldr	r0, [r7, #0]
 800b42a:	f7ff ff92 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b42e:	4603      	mov	r3, r0
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7ff ff7a 	bl	800b32c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4618      	mov	r0, r3
 800b43c:	3708      	adds	r7, #8
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b082      	sub	sp, #8
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	429a      	cmp	r2, r3
 800b452:	d003      	beq.n	800b45c <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7ff ff53 	bl	800b302 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800b45c:	687b      	ldr	r3, [r7, #4]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800b466:	b590      	push	{r4, r7, lr}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff ff6e 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b476:	4604      	mov	r4, r0
 800b478:	6838      	ldr	r0, [r7, #0]
 800b47a:	f7ff ff6a 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b47e:	4603      	mov	r3, r0
 800b480:	4619      	mov	r1, r3
 800b482:	4620      	mov	r0, r4
 800b484:	f7ff fe50 	bl	800b128 <_ZN12SimpleString6StrStrEPKcS1_>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	bf14      	ite	ne
 800b48e:	2301      	movne	r3, #1
 800b490:	2300      	moveq	r3, #0
 800b492:	b2db      	uxtb	r3, r3
}
 800b494:	4618      	mov	r0, r3
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd90      	pop	{r4, r7, pc}

0800b49c <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800b49c:	b590      	push	{r4, r7, lr}
 800b49e:	b087      	sub	sp, #28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800b4a6:	f107 0308 	add.w	r3, r7, #8
 800b4aa:	6879      	ldr	r1, [r7, #4]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f000 fabb 	bl	800ba28 <_ZNK12SimpleString9lowerCaseEv>
 800b4b2:	f107 0310 	add.w	r3, r7, #16
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 fab5 	bl	800ba28 <_ZNK12SimpleString9lowerCaseEv>
 800b4be:	f107 0210 	add.w	r2, r7, #16
 800b4c2:	f107 0308 	add.w	r3, r7, #8
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff ffcc 	bl	800b466 <_ZNK12SimpleString8containsERKS_>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	461c      	mov	r4, r3
 800b4d2:	bf00      	nop
 800b4d4:	f107 0310 	add.w	r3, r7, #16
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f000 fafe 	bl	800bada <_ZN12SimpleStringD1Ev>
 800b4de:	f107 0308 	add.w	r3, r7, #8
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 faf9 	bl	800bada <_ZN12SimpleStringD1Ev>
 800b4e8:	4623      	mov	r3, r4
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	371c      	adds	r7, #28
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd90      	pop	{r4, r7, pc}

0800b4f2 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800b4f2:	b590      	push	{r4, r7, lr}
 800b4f4:	b083      	sub	sp, #12
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800b4fc:	6838      	ldr	r0, [r7, #0]
 800b4fe:	f000 facb 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	bf0c      	ite	eq
 800b508:	2301      	moveq	r3, #1
 800b50a:	2300      	movne	r3, #0
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d001      	beq.n	800b516 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800b512:	2301      	movs	r3, #1
 800b514:	e022      	b.n	800b55c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fabe 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	bf0c      	ite	eq
 800b522:	2301      	moveq	r3, #1
 800b524:	2300      	movne	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800b52c:	2300      	movs	r3, #0
 800b52e:	e015      	b.n	800b55c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff ff0e 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b536:	4604      	mov	r4, r0
 800b538:	6838      	ldr	r0, [r7, #0]
 800b53a:	f7ff ff0a 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b53e:	4603      	mov	r3, r0
 800b540:	4619      	mov	r1, r3
 800b542:	4620      	mov	r0, r4
 800b544:	f7ff fdf0 	bl	800b128 <_ZN12SimpleString6StrStrEPKcS1_>
 800b548:	4604      	mov	r4, r0
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7ff ff01 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b550:	4603      	mov	r3, r0
 800b552:	429c      	cmp	r4, r3
 800b554:	bf0c      	ite	eq
 800b556:	2301      	moveq	r3, #1
 800b558:	2300      	movne	r3, #0
 800b55a:	b2db      	uxtb	r3, r3
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	bd90      	pop	{r4, r7, pc}

0800b564 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800b564:	b590      	push	{r4, r7, lr}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 fa92 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800b574:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800b576:	6838      	ldr	r0, [r7, #0]
 800b578:	f000 fa8e 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800b57c:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800b584:	2301      	movs	r3, #1
 800b586:	e020      	b.n	800b5ca <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d101      	bne.n	800b592 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800b58e:	2300      	movs	r3, #0
 800b590:	e01b      	b.n	800b5ca <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	429a      	cmp	r2, r3
 800b598:	d201      	bcs.n	800b59e <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800b59a:	2300      	movs	r3, #0
 800b59c:	e015      	b.n	800b5ca <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff fed7 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b5a4:	4601      	mov	r1, r0
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	18cc      	adds	r4, r1, r3
 800b5ae:	6838      	ldr	r0, [r7, #0]
 800b5b0:	f7ff fecf 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f7ff fd13 	bl	800afe4 <_ZN12SimpleString6StrCmpEPKcS1_>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	bf0c      	ite	eq
 800b5c4:	2301      	moveq	r3, #1
 800b5c6:	2300      	movne	r3, #0
 800b5c8:	b2db      	uxtb	r3, r3
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3714      	adds	r7, #20
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd90      	pop	{r4, r7, pc}

0800b5d2 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b086      	sub	sp, #24
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
 800b5da:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7ff feb6 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b5e6:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60fb      	str	r3, [r7, #12]
    if (*str){
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d008      	beq.n	800b606 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800b5f4:	6838      	ldr	r0, [r7, #0]
 800b5f6:	f7ff feac 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6938      	ldr	r0, [r7, #16]
 800b600:	f7ff fd92 	bl	800b128 <_ZN12SimpleString6StrStrEPKcS1_>
 800b604:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d014      	beq.n	800b638 <_ZNK12SimpleString5countERKS_+0x66>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d011      	beq.n	800b638 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	613b      	str	r3, [r7, #16]
        str++;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	3301      	adds	r3, #1
 800b61c:	613b      	str	r3, [r7, #16]
        num++;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	3301      	adds	r3, #1
 800b622:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800b624:	6838      	ldr	r0, [r7, #0]
 800b626:	f7ff fe94 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b62a:	4603      	mov	r3, r0
 800b62c:	4619      	mov	r1, r3
 800b62e:	6938      	ldr	r0, [r7, #16]
 800b630:	f7ff fd7a 	bl	800b128 <_ZN12SimpleString6StrStrEPKcS1_>
 800b634:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800b636:	e7e6      	b.n	800b606 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800b638:	697b      	ldr	r3, [r7, #20]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3718      	adds	r7, #24
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800b642:	b590      	push	{r4, r7, lr}
 800b644:	b091      	sub	sp, #68	; 0x44
 800b646:	af00      	add	r7, sp, #0
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	60b9      	str	r1, [r7, #8]
 800b64c:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800b64e:	68b9      	ldr	r1, [r7, #8]
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7ff ffbe 	bl	800b5d2 <_ZNK12SimpleString5countERKS_>
 800b656:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800b658:	68b9      	ldr	r1, [r7, #8]
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff ff82 	bl	800b564 <_ZNK12SimpleString8endsWithERKS_>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800b666:	2300      	movs	r3, #0
 800b668:	e000      	b.n	800b66c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800b66a:	2301      	movs	r3, #1
 800b66c:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800b66e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b672:	4413      	add	r3, r2
 800b674:	4619      	mov	r1, r3
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f001 f95c 	bl	800c934 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff fe68 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b682:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800b684:	2300      	movs	r3, #0
 800b686:	63bb      	str	r3, [r7, #56]	; 0x38
 800b688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d235      	bcs.n	800b6fc <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800b690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b692:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800b694:	68b8      	ldr	r0, [r7, #8]
 800b696:	f7ff fe5c 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b69a:	4603      	mov	r3, r0
 800b69c:	4619      	mov	r1, r3
 800b69e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b6a0:	f7ff fd42 	bl	800b128 <_ZN12SimpleString6StrStrEPKcS1_>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800b6aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f001 f9db 	bl	800ca68 <_ZN22SimpleStringCollectionixEj>
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	f107 031c 	add.w	r3, r7, #28
 800b6b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff fe55 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800b6c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	f107 0014 	add.w	r0, r7, #20
 800b6ca:	f107 011c 	add.w	r1, r7, #28
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f000 fb0c 	bl	800bcec <_ZNK12SimpleString9subStringEjj>
 800b6d4:	f107 0314 	add.w	r3, r7, #20
 800b6d8:	4619      	mov	r1, r3
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f7ff feb1 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800b6e0:	f107 0314 	add.w	r3, r7, #20
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 f9f8 	bl	800bada <_ZN12SimpleStringD1Ev>
 800b6ea:	f107 031c 	add.w	r3, r7, #28
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 f9f3 	bl	800bada <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6fa:	e7c5      	b.n	800b688 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d015      	beq.n	800b72e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800b702:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f001 f9af 	bl	800ca68 <_ZN22SimpleStringCollectionixEj>
 800b70a:	4604      	mov	r4, r0
 800b70c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff fe29 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800b718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b71c:	4619      	mov	r1, r3
 800b71e:	4620      	mov	r0, r4
 800b720:	f7ff fe8f 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800b724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 f9d6 	bl	800bada <_ZN12SimpleStringD1Ev>
    }
}
 800b72e:	bf00      	nop
 800b730:	3744      	adds	r7, #68	; 0x44
 800b732:	46bd      	mov	sp, r7
 800b734:	bd90      	pop	{r4, r7, pc}

0800b736 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	460b      	mov	r3, r1
 800b740:	70fb      	strb	r3, [r7, #3]
 800b742:	4613      	mov	r3, r2
 800b744:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f9a6 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800b74c:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800b74e:	2300      	movs	r3, #0
 800b750:	60fb      	str	r3, [r7, #12]
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	429a      	cmp	r2, r3
 800b758:	d218      	bcs.n	800b78c <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff fdf9 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b760:	4602      	mov	r2, r0
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	4413      	add	r3, r2
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	78fa      	ldrb	r2, [r7, #3]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	bf0c      	ite	eq
 800b76e:	2301      	moveq	r3, #1
 800b770:	2300      	movne	r3, #0
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b00      	cmp	r3, #0
 800b776:	d005      	beq.n	800b784 <_ZN12SimpleString7replaceEcc+0x4e>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4413      	add	r3, r2
 800b780:	78ba      	ldrb	r2, [r7, #2]
 800b782:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	3301      	adds	r3, #1
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	e7e2      	b.n	800b752 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800b78c:	bf00      	nop
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b08e      	sub	sp, #56	; 0x38
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800b7a0:	f107 0310 	add.w	r3, r7, #16
 800b7a4:	68b9      	ldr	r1, [r7, #8]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7ff fddf 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800b7ac:	f107 0310 	add.w	r3, r7, #16
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff ff0d 	bl	800b5d2 <_ZNK12SimpleString5countERKS_>
 800b7b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b7ba:	f107 0310 	add.w	r3, r7, #16
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f000 f98b 	bl	800bada <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800b7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d071      	beq.n	800b8ae <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f000 f964 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800b7d0:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800b7d2:	68b8      	ldr	r0, [r7, #8]
 800b7d4:	f7ff fc28 	bl	800b028 <_ZN12SimpleString6StrLenEPKc>
 800b7d8:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7ff fc24 	bl	800b028 <_ZN12SimpleString6StrLenEPKc>
 800b7e0:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800b7e2:	6a3b      	ldr	r3, [r7, #32]
 800b7e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7e6:	fb02 f203 	mul.w	r2, r2, r3
 800b7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ec:	441a      	add	r2, r3
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7f2:	fb01 f303 	mul.w	r3, r1, r3
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d951      	bls.n	800b8a6 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800b802:	f240 129d 	movw	r2, #413	; 0x19d
 800b806:	492c      	ldr	r1, [pc, #176]	; (800b8b8 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800b808:	69f8      	ldr	r0, [r7, #28]
 800b80a:	f7ff fb33 	bl	800ae74 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b80e:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800b810:	2300      	movs	r3, #0
 800b812:	637b      	str	r3, [r7, #52]	; 0x34
 800b814:	2300      	movs	r3, #0
 800b816:	633b      	str	r3, [r7, #48]	; 0x30
 800b818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d236      	bcs.n	800b88e <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f7ff fd96 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b826:	4602      	mov	r2, r0
 800b828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82a:	4413      	add	r3, r2
 800b82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b82e:	68b9      	ldr	r1, [r7, #8]
 800b830:	4618      	mov	r0, r3
 800b832:	f7ff fc16 	bl	800b062 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	bf0c      	ite	eq
 800b83c:	2301      	moveq	r3, #1
 800b83e:	2300      	movne	r3, #0
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d011      	beq.n	800b86a <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800b846:	69ba      	ldr	r2, [r7, #24]
 800b848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84a:	18d0      	adds	r0, r2, r3
 800b84c:	6a3b      	ldr	r3, [r7, #32]
 800b84e:	3301      	adds	r3, #1
 800b850:	461a      	mov	r2, r3
 800b852:	6879      	ldr	r1, [r7, #4]
 800b854:	f7ff fc33 	bl	800b0be <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800b858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b85a:	6a3b      	ldr	r3, [r7, #32]
 800b85c:	4413      	add	r3, r2
 800b85e:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800b860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	4413      	add	r3, r2
 800b866:	637b      	str	r3, [r7, #52]	; 0x34
 800b868:	e7d6      	b.n	800b818 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f7ff fd71 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800b870:	4602      	mov	r2, r0
 800b872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b874:	441a      	add	r2, r3
 800b876:	69b9      	ldr	r1, [r7, #24]
 800b878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87a:	440b      	add	r3, r1
 800b87c:	7812      	ldrb	r2, [r2, #0]
 800b87e:	701a      	strb	r2, [r3, #0]
                j++;
 800b880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b882:	3301      	adds	r3, #1
 800b884:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800b886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b888:	3301      	adds	r3, #1
 800b88a:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800b88c:	e7c4      	b.n	800b818 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	3b01      	subs	r3, #1
 800b892:	69ba      	ldr	r2, [r7, #24]
 800b894:	4413      	add	r3, r2
 800b896:	2200      	movs	r2, #0
 800b898:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800b89a:	69fa      	ldr	r2, [r7, #28]
 800b89c:	69b9      	ldr	r1, [r7, #24]
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f7ff fd1c 	bl	800b2dc <_ZN12SimpleString19setInternalBufferToEPcj>
 800b8a4:	e004      	b.n	800b8b0 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f7ff fcca 	bl	800b240 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800b8ac:	e000      	b.n	800b8b0 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800b8ae:	bf00      	nop
}
 800b8b0:	3738      	adds	r7, #56	; 0x38
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	080227e0 	.word	0x080227e0

0800b8bc <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800b8bc:	b590      	push	{r4, r7, lr}
 800b8be:	b089      	sub	sp, #36	; 0x24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800b8c6:	493b      	ldr	r1, [pc, #236]	; (800b9b4 <_ZNK12SimpleString9printableEv+0xf8>)
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f7ff fd4e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800b8ce:	6838      	ldr	r0, [r7, #0]
 800b8d0:	f000 f876 	bl	800b9c0 <_ZNK12SimpleString16getPrintableSizeEv>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fcde 	bl	800b29c <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800b8e0:	6838      	ldr	r0, [r7, #0]
 800b8e2:	f000 f8d9 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800b8e6:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	61bb      	str	r3, [r7, #24]
 800b8f0:	69ba      	ldr	r2, [r7, #24]
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d252      	bcs.n	800b99e <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	4413      	add	r3, r2
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800b904:	7cfb      	ldrb	r3, [r7, #19]
 800b906:	4618      	mov	r0, r3
 800b908:	f000 fb43 	bl	800bf92 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d012      	beq.n	800b938 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	18d0      	adds	r0, r2, r3
 800b91a:	7cfb      	ldrb	r3, [r7, #19]
 800b91c:	3b07      	subs	r3, #7
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	461a      	mov	r2, r3
 800b922:	4b25      	ldr	r3, [pc, #148]	; (800b9b8 <_ZNK12SimpleString9printableEv+0xfc>)
 800b924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b928:	2202      	movs	r2, #2
 800b92a:	4619      	mov	r1, r3
 800b92c:	f7ff fbc7 	bl	800b0be <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	3302      	adds	r3, #2
 800b934:	61fb      	str	r3, [r7, #28]
 800b936:	e02e      	b.n	800b996 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800b938:	7cfb      	ldrb	r3, [r7, #19]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 fb15 	bl	800bf6a <_ZN12SimpleString9isControlEc>
 800b940:	4603      	mov	r3, r0
 800b942:	2b00      	cmp	r3, #0
 800b944:	d01e      	beq.n	800b984 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800b946:	7cfa      	ldrb	r2, [r7, #19]
 800b948:	f107 0308 	add.w	r3, r7, #8
 800b94c:	491b      	ldr	r1, [pc, #108]	; (800b9bc <_ZNK12SimpleString9printableEv+0x100>)
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 fdca 	bl	800c4e8 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	18d4      	adds	r4, r2, r3
 800b95c:	f107 0308 	add.w	r3, r7, #8
 800b960:	4618      	mov	r0, r3
 800b962:	f000 f88d 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800b966:	4603      	mov	r3, r0
 800b968:	2204      	movs	r2, #4
 800b96a:	4619      	mov	r1, r3
 800b96c:	4620      	mov	r0, r4
 800b96e:	f7ff fba6 	bl	800b0be <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	3304      	adds	r3, #4
 800b976:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800b978:	f107 0308 	add.w	r3, r7, #8
 800b97c:	4618      	mov	r0, r3
 800b97e:	f000 f8ac 	bl	800bada <_ZN12SimpleStringD1Ev>
 800b982:	e008      	b.n	800b996 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	4413      	add	r3, r2
 800b98c:	7cfa      	ldrb	r2, [r7, #19]
 800b98e:	701a      	strb	r2, [r3, #0]
            j++;
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	3301      	adds	r3, #1
 800b994:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	3301      	adds	r3, #1
 800b99a:	61bb      	str	r3, [r7, #24]
 800b99c:	e7a8      	b.n	800b8f0 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	701a      	strb	r2, [r3, #0]

    return result;
 800b9aa:	bf00      	nop
}
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	3724      	adds	r7, #36	; 0x24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd90      	pop	{r4, r7, pc}
 800b9b4:	080228a0 	.word	0x080228a0
 800b9b8:	2000006c 	.word	0x2000006c
 800b9bc:	080228a4 	.word	0x080228a4

0800b9c0 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 f865 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800b9ce:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	613b      	str	r3, [r7, #16]
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d21e      	bcs.n	800ba1e <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800b9ec:	7afb      	ldrb	r3, [r7, #11]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f000 facf 	bl	800bf92 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	617b      	str	r3, [r7, #20]
 800ba00:	e009      	b.n	800ba16 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 fab0 	bl	800bf6a <_ZN12SimpleString9isControlEc>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	3303      	adds	r3, #3
 800ba14:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	613b      	str	r3, [r7, #16]
 800ba1c:	e7dc      	b.n	800b9d8 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800ba1e:	697b      	ldr	r3, [r7, #20]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800ba28:	b590      	push	{r4, r7, lr}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7ff fcec 	bl	800b412 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f82c 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800ba40:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800ba42:	2300      	movs	r3, #0
 800ba44:	60fb      	str	r3, [r7, #12]
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d213      	bcs.n	800ba76 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7ff fc7f 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800ba54:	4602      	mov	r2, r0
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	4413      	add	r3, r2
 800ba5a:	7819      	ldrb	r1, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	18d4      	adds	r4, r2, r3
 800ba64:	4608      	mov	r0, r1
 800ba66:	f7ff fb8a 	bl	800b17e <_ZN12SimpleString7ToLowerEc>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3301      	adds	r3, #1
 800ba72:	60fb      	str	r3, [r7, #12]
 800ba74:	e7e7      	b.n	800ba46 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800ba76:	bf00      	nop
}
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd90      	pop	{r4, r7, pc}

0800ba80 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff fc62 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800ba8e:	4603      	mov	r3, r0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff fc56 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800baa6:	4603      	mov	r3, r0
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff fabd 	bl	800b028 <_ZN12SimpleString6StrLenEPKc>
 800baae:	4603      	mov	r3, r0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f7ff ffe9 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bf0c      	ite	eq
 800bacc:	2301      	moveq	r3, #1
 800bace:	2300      	movne	r3, #0
 800bad0:	b2db      	uxtb	r3, r3
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800bada:	b580      	push	{r7, lr}
 800badc:	b082      	sub	sp, #8
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7ff fb90 	bl	800b208 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4618      	mov	r0, r3
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800baf2:	b590      	push	{r4, r7, lr}
 800baf4:	b083      	sub	sp, #12
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7ff ffbf 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800bb02:	4604      	mov	r4, r0
 800bb04:	6838      	ldr	r0, [r7, #0]
 800bb06:	f7ff ffbb 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f7ff fa68 	bl	800afe4 <_ZN12SimpleString6StrCmpEPKcS1_>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	bf0c      	ite	eq
 800bb1a:	2301      	moveq	r3, #1
 800bb1c:	2300      	movne	r3, #0
 800bb1e:	b2db      	uxtb	r3, r3
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd90      	pop	{r4, r7, pc}

0800bb28 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800bb28:	b590      	push	{r4, r7, lr}
 800bb2a:	b087      	sub	sp, #28
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800bb32:	f107 0308 	add.w	r3, r7, #8
 800bb36:	6879      	ldr	r1, [r7, #4]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff ff75 	bl	800ba28 <_ZNK12SimpleString9lowerCaseEv>
 800bb3e:	f107 0310 	add.w	r3, r7, #16
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7ff ff6f 	bl	800ba28 <_ZNK12SimpleString9lowerCaseEv>
 800bb4a:	f107 0210 	add.w	r2, r7, #16
 800bb4e:	f107 0308 	add.w	r3, r7, #8
 800bb52:	4611      	mov	r1, r2
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7ff ffcc 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	461c      	mov	r4, r3
 800bb5e:	f107 0310 	add.w	r3, r7, #16
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7ff ffb9 	bl	800bada <_ZN12SimpleStringD1Ev>
 800bb68:	f107 0308 	add.w	r3, r7, #8
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7ff ffb4 	bl	800bada <_ZN12SimpleStringD1Ev>
 800bb72:	4623      	mov	r3, r4
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	371c      	adds	r7, #28
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd90      	pop	{r4, r7, pc}

0800bb7c <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800bb86:	6839      	ldr	r1, [r7, #0]
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7ff ffb2 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	f083 0301 	eor.w	r3, r3, #1
 800bb94:	b2db      	uxtb	r3, r3
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b084      	sub	sp, #16
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	60f8      	str	r0, [r7, #12]
 800bba6:	60b9      	str	r1, [r7, #8]
 800bba8:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800bbaa:	68b8      	ldr	r0, [r7, #8]
 800bbac:	f7ff fbd1 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f7ff fbd8 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f7ff fbc9 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f000 f817 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    return t;
 800bbca:	bf00      	nop
}
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800bbde:	6838      	ldr	r0, [r7, #0]
 800bbe0:	f7ff fbb7 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f805 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
 800bbee:	4603      	mov	r3, r0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7ff ff48 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800bc08:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800bc0a:	6838      	ldr	r0, [r7, #0]
 800bc0c:	f7ff fa0c 	bl	800b028 <_ZN12SimpleString6StrLenEPKc>
 800bc10:	4603      	mov	r3, r0
 800bc12:	3301      	adds	r3, #1
 800bc14:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7ff fb97 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800bc24:	4603      	mov	r3, r0
 800bc26:	68f9      	ldr	r1, [r7, #12]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f000 f941 	bl	800beb0 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800bc2e:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	4413      	add	r3, r2
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7ff fa3f 	bl	800b0be <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	68b9      	ldr	r1, [r7, #8]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff fb49 	bl	800b2dc <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800bc4a:	687b      	ldr	r3, [r7, #4]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3718      	adds	r7, #24
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800bc54:	b590      	push	{r4, r7, lr}
 800bc56:	b08b      	sub	sp, #44	; 0x2c
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f7ff ff18 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800bc68:	4604      	mov	r4, r0
 800bc6a:	68b8      	ldr	r0, [r7, #8]
 800bc6c:	f7ff ff14 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800bc70:	4603      	mov	r3, r0
 800bc72:	429c      	cmp	r4, r3
 800bc74:	bf8c      	ite	hi
 800bc76:	2301      	movhi	r3, #1
 800bc78:	2300      	movls	r3, #0
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d006      	beq.n	800bc8e <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800bc80:	79fb      	ldrb	r3, [r7, #7]
 800bc82:	461a      	mov	r2, r3
 800bc84:	68f9      	ldr	r1, [r7, #12]
 800bc86:	68b8      	ldr	r0, [r7, #8]
 800bc88:	f7ff ffe4 	bl	800bc54 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800bc8c:	e02b      	b.n	800bce6 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800bc96:	68b8      	ldr	r0, [r7, #8]
 800bc98:	f7ff fefe 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f7ff fefa 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800bca4:	4603      	mov	r3, r0
 800bca6:	1ae2      	subs	r2, r4, r3
 800bca8:	f107 0114 	add.w	r1, r7, #20
 800bcac:	f107 0320 	add.w	r3, r7, #32
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7ff fb75 	bl	800b3a0 <_ZN12SimpleStringC1EPKcj>
 800bcb6:	f107 0318 	add.w	r3, r7, #24
 800bcba:	f107 0120 	add.w	r1, r7, #32
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7ff ff6c 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800bcc6:	f107 0318 	add.w	r3, r7, #24
 800bcca:	4619      	mov	r1, r3
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f7ff fbb8 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800bcd2:	f107 0318 	add.w	r3, r7, #24
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7ff feff 	bl	800bada <_ZN12SimpleStringD1Ev>
 800bcdc:	f107 0320 	add.w	r3, r7, #32
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7ff fefa 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800bce6:	372c      	adds	r7, #44	; 0x2c
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd90      	pop	{r4, r7, pc}

0800bcec <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800bcfa:	68b8      	ldr	r0, [r7, #8]
 800bcfc:	f7ff fecc 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800bd00:	4603      	mov	r3, r0
 800bd02:	3b01      	subs	r3, #1
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	bf8c      	ite	hi
 800bd0a:	2301      	movhi	r3, #1
 800bd0c:	2300      	movls	r3, #0
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d004      	beq.n	800bd1e <_ZNK12SimpleString9subStringEjj+0x32>
 800bd14:	4919      	ldr	r1, [pc, #100]	; (800bd7c <_ZNK12SimpleString9subStringEjj+0x90>)
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7ff fb27 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800bd1c:	e029      	b.n	800bd72 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800bd1e:	68b8      	ldr	r0, [r7, #8]
 800bd20:	f7ff fb17 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800bd24:	4602      	mov	r2, r0
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	441a      	add	r2, r3
 800bd2a:	f107 0310 	add.w	r3, r7, #16
 800bd2e:	4611      	mov	r1, r2
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff fb1a 	bl	800b36a <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800bd36:	f107 0310 	add.w	r3, r7, #16
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff feac 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800bd40:	4602      	mov	r2, r0
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	4293      	cmp	r3, r2
 800bd46:	bf34      	ite	cc
 800bd48:	2301      	movcc	r3, #1
 800bd4a:	2300      	movcs	r3, #0
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d004      	beq.n	800bd5c <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	4413      	add	r3, r2
 800bd58:	2200      	movs	r2, #0
 800bd5a:	701a      	strb	r2, [r3, #0]

    return newString;
 800bd5c:	f107 0310 	add.w	r3, r7, #16
 800bd60:	4619      	mov	r1, r3
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f7ff fb55 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800bd68:	f107 0310 	add.w	r3, r7, #16
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7ff feb4 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	3718      	adds	r7, #24
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	080228a0 	.word	0x080228a0

0800bd80 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	68b9      	ldr	r1, [r7, #8]
 800bd96:	f7ff ffa9 	bl	800bcec <_ZNK12SimpleString9subStringEjj>
}
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b082      	sub	sp, #8
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f7ff fad0 	bl	800b352 <_ZNK12SimpleString9getBufferEv>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	781b      	ldrb	r3, [r3, #0]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	460b      	mov	r3, r1
 800bdcc:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800bdce:	78fb      	ldrb	r3, [r7, #3]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 f805 	bl	800bde4 <_ZNK12SimpleString8findFromEjc>
 800bdda:	4603      	mov	r3, r0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f7ff fe50 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800bdf8:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	617b      	str	r3, [r7, #20]
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	429a      	cmp	r2, r3
 800be04:	d213      	bcs.n	800be2e <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800be06:	6979      	ldr	r1, [r7, #20]
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f7ff ffca 	bl	800bda2 <_ZNK12SimpleString2atEj>
 800be0e:	4603      	mov	r3, r0
 800be10:	461a      	mov	r2, r3
 800be12:	79fb      	ldrb	r3, [r7, #7]
 800be14:	4293      	cmp	r3, r2
 800be16:	bf0c      	ite	eq
 800be18:	2301      	moveq	r3, #1
 800be1a:	2300      	movne	r3, #0
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <_ZNK12SimpleString8findFromEjc+0x42>
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	e005      	b.n	800be32 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	3301      	adds	r3, #1
 800be2a:	617b      	str	r3, [r7, #20]
 800be2c:	e7e7      	b.n	800bdfe <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800be2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be32:	4618      	mov	r0, r3
 800be34:	3718      	adds	r7, #24
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
	...

0800be3c <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	4611      	mov	r1, r2
 800be48:	461a      	mov	r2, r3
 800be4a:	460b      	mov	r3, r1
 800be4c:	71fb      	strb	r3, [r7, #7]
 800be4e:	4613      	mov	r3, r2
 800be50:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800be52:	79fb      	ldrb	r3, [r7, #7]
 800be54:	4619      	mov	r1, r3
 800be56:	68b8      	ldr	r0, [r7, #8]
 800be58:	f7ff ffb3 	bl	800bdc2 <_ZNK12SimpleString4findEc>
 800be5c:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be64:	d104      	bne.n	800be70 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800be66:	4911      	ldr	r1, [pc, #68]	; (800beac <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f7ff fa7e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800be6e:	e019      	b.n	800bea4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800be70:	79bb      	ldrb	r3, [r7, #6]
 800be72:	461a      	mov	r2, r3
 800be74:	6979      	ldr	r1, [r7, #20]
 800be76:	68b8      	ldr	r0, [r7, #8]
 800be78:	f7ff ffb4 	bl	800bde4 <_ZNK12SimpleString8findFromEjc>
 800be7c:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be84:	d106      	bne.n	800be94 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	697a      	ldr	r2, [r7, #20]
 800be8a:	68b9      	ldr	r1, [r7, #8]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff ff77 	bl	800bd80 <_ZNK12SimpleString9subStringEj>
 800be92:	e007      	b.n	800bea4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800be94:	693a      	ldr	r2, [r7, #16]
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	68b9      	ldr	r1, [r7, #8]
 800bea0:	f7ff ff24 	bl	800bcec <_ZNK12SimpleString9subStringEjj>
}
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	3718      	adds	r7, #24
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	080228a0 	.word	0x080228a0

0800beb0 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800beba:	f240 2275 	movw	r2, #629	; 0x275
 800bebe:	490a      	ldr	r1, [pc, #40]	; (800bee8 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800bec0:	6838      	ldr	r0, [r7, #0]
 800bec2:	f7fe ffd7 	bl	800ae74 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800bec6:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	6879      	ldr	r1, [r7, #4]
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f7ff f8f6 	bl	800b0be <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	3b01      	subs	r3, #1
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	4413      	add	r3, r2
 800beda:	2200      	movs	r2, #0
 800bedc:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800bede:	68fb      	ldr	r3, [r7, #12]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	080227e0 	.word	0x080227e0

0800beec <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	4603      	mov	r3, r0
 800bef4:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800bef6:	79fb      	ldrb	r3, [r7, #7]
 800bef8:	2b2f      	cmp	r3, #47	; 0x2f
 800befa:	d904      	bls.n	800bf06 <_ZN12SimpleString7isDigitEc+0x1a>
 800befc:	79fb      	ldrb	r3, [r7, #7]
 800befe:	2b39      	cmp	r3, #57	; 0x39
 800bf00:	d801      	bhi.n	800bf06 <_ZN12SimpleString7isDigitEc+0x1a>
 800bf02:	2301      	movs	r3, #1
 800bf04:	e000      	b.n	800bf08 <_ZN12SimpleString7isDigitEc+0x1c>
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800bf1e:	79fb      	ldrb	r3, [r7, #7]
 800bf20:	2b20      	cmp	r3, #32
 800bf22:	d005      	beq.n	800bf30 <_ZN12SimpleString7isSpaceEc+0x1c>
 800bf24:	79fb      	ldrb	r3, [r7, #7]
 800bf26:	2b08      	cmp	r3, #8
 800bf28:	d904      	bls.n	800bf34 <_ZN12SimpleString7isSpaceEc+0x20>
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	2b0d      	cmp	r3, #13
 800bf2e:	d801      	bhi.n	800bf34 <_ZN12SimpleString7isSpaceEc+0x20>
 800bf30:	2301      	movs	r3, #1
 800bf32:	e000      	b.n	800bf36 <_ZN12SimpleString7isSpaceEc+0x22>
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b083      	sub	sp, #12
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	4603      	mov	r3, r0
 800bf4a:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800bf4c:	79fb      	ldrb	r3, [r7, #7]
 800bf4e:	2b40      	cmp	r3, #64	; 0x40
 800bf50:	d904      	bls.n	800bf5c <_ZN12SimpleString7isUpperEc+0x1a>
 800bf52:	79fb      	ldrb	r3, [r7, #7]
 800bf54:	2b5a      	cmp	r3, #90	; 0x5a
 800bf56:	d801      	bhi.n	800bf5c <_ZN12SimpleString7isUpperEc+0x1a>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e000      	b.n	800bf5e <_ZN12SimpleString7isUpperEc+0x1c>
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	370c      	adds	r7, #12
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr

0800bf6a <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800bf6a:	b480      	push	{r7}
 800bf6c:	b083      	sub	sp, #12
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	4603      	mov	r3, r0
 800bf72:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800bf74:	79fb      	ldrb	r3, [r7, #7]
 800bf76:	2b1f      	cmp	r3, #31
 800bf78:	d902      	bls.n	800bf80 <_ZN12SimpleString9isControlEc+0x16>
 800bf7a:	79fb      	ldrb	r3, [r7, #7]
 800bf7c:	2b7f      	cmp	r3, #127	; 0x7f
 800bf7e:	d101      	bne.n	800bf84 <_ZN12SimpleString9isControlEc+0x1a>
 800bf80:	2301      	movs	r3, #1
 800bf82:	e000      	b.n	800bf86 <_ZN12SimpleString9isControlEc+0x1c>
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	370c      	adds	r7, #12
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	4603      	mov	r3, r0
 800bf9a:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800bf9c:	79fb      	ldrb	r3, [r7, #7]
 800bf9e:	2b06      	cmp	r3, #6
 800bfa0:	d904      	bls.n	800bfac <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	2b0d      	cmp	r3, #13
 800bfa6:	d801      	bhi.n	800bfac <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e000      	b.n	800bfae <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	370c      	adds	r7, #12
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
	...

0800bfbc <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800bfc8:	78fb      	ldrb	r3, [r7, #3]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <_Z10StringFromb+0x16>
 800bfce:	4a06      	ldr	r2, [pc, #24]	; (800bfe8 <_Z10StringFromb+0x2c>)
 800bfd0:	e000      	b.n	800bfd4 <_Z10StringFromb+0x18>
 800bfd2:	4a06      	ldr	r2, [pc, #24]	; (800bfec <_Z10StringFromb+0x30>)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4906      	ldr	r1, [pc, #24]	; (800bff0 <_Z10StringFromb+0x34>)
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 fa85 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	080228ac 	.word	0x080228ac
 800bfec:	080228b4 	.word	0x080228b4
 800bff0:	080228bc 	.word	0x080228bc

0800bff4 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f7ff f9b2 	bl	800b36a <_ZN12SimpleStringC1EPKc>
}
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
	...

0800c010 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800c010:	b590      	push	{r4, r7, lr}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800c01a:	2400      	movs	r4, #0
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00e      	beq.n	800c040 <_Z25PrintableStringFromOrNullPKc+0x30>
 800c022:	f107 0308 	add.w	r3, r7, #8
 800c026:	6839      	ldr	r1, [r7, #0]
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff ffe3 	bl	800bff4 <_Z10StringFromPKc>
 800c02e:	2401      	movs	r4, #1
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f107 0208 	add.w	r2, r7, #8
 800c036:	4611      	mov	r1, r2
 800c038:	4618      	mov	r0, r3
 800c03a:	f7ff fc3f 	bl	800b8bc <_ZNK12SimpleString9printableEv>
 800c03e:	e004      	b.n	800c04a <_Z25PrintableStringFromOrNullPKc+0x3a>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4908      	ldr	r1, [pc, #32]	; (800c064 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff ffd5 	bl	800bff4 <_Z10StringFromPKc>
 800c04a:	2c00      	cmp	r4, #0
 800c04c:	d004      	beq.n	800c058 <_Z25PrintableStringFromOrNullPKc+0x48>
 800c04e:	f107 0308 	add.w	r3, r7, #8
 800c052:	4618      	mov	r0, r3
 800c054:	f7ff fd41 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c058:	bf00      	nop
}
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	3714      	adds	r7, #20
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd90      	pop	{r4, r7, pc}
 800c062:	bf00      	nop
 800c064:	080228c0 	.word	0x080228c0

0800c068 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	4904      	ldr	r1, [pc, #16]	; (800c088 <_Z10StringFromi+0x20>)
 800c078:	4618      	mov	r0, r3
 800c07a:	f000 fa35 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	080228c8 	.word	0x080228c8

0800c08c <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	683a      	ldr	r2, [r7, #0]
 800c09a:	4904      	ldr	r1, [pc, #16]	; (800c0ac <_Z10StringFroml+0x20>)
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 fa23 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	080228cc 	.word	0x080228cc

0800c0b0 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800c0ba:	f107 0308 	add.w	r3, r7, #8
 800c0be:	4910      	ldr	r1, [pc, #64]	; (800c100 <_Z10StringFromPKv+0x50>)
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7ff f952 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800c0c6:	f107 0310 	add.w	r3, r7, #16
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 f9a1 	bl	800c414 <_Z13HexStringFromPKv>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f107 0210 	add.w	r2, r7, #16
 800c0d8:	f107 0108 	add.w	r1, r7, #8
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff fd5e 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800c0e2:	f107 0310 	add.w	r3, r7, #16
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7ff fcf7 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c0ec:	f107 0308 	add.w	r3, r7, #8
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff fcf2 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c0f6:	bf00      	nop
}
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	080228d0 	.word	0x080228d0

0800c104 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800c10e:	f107 0308 	add.w	r3, r7, #8
 800c112:	4910      	ldr	r1, [pc, #64]	; (800c154 <_Z10StringFromPFvvE+0x50>)
 800c114:	4618      	mov	r0, r3
 800c116:	f7ff f928 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800c11a:	f107 0310 	add.w	r3, r7, #16
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	4618      	mov	r0, r3
 800c122:	f000 f98b 	bl	800c43c <_Z13HexStringFromPFvvE>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f107 0210 	add.w	r2, r7, #16
 800c12c:	f107 0108 	add.w	r1, r7, #8
 800c130:	4618      	mov	r0, r3
 800c132:	f7ff fd34 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800c136:	f107 0310 	add.w	r3, r7, #16
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff fccd 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c140:	f107 0308 	add.w	r3, r7, #8
 800c144:	4618      	mov	r0, r3
 800c146:	f7ff fcc8 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c14a:	bf00      	nop
}
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	3718      	adds	r7, #24
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	080228d0 	.word	0x080228d0

0800c158 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	683a      	ldr	r2, [r7, #0]
 800c166:	4904      	ldr	r1, [pc, #16]	; (800c178 <_Z13HexStringFroml+0x20>)
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 f9bd 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	080228d4 	.word	0x080228d4

0800c17c <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	683a      	ldr	r2, [r7, #0]
 800c18a:	4904      	ldr	r1, [pc, #16]	; (800c19c <_Z13HexStringFromi+0x20>)
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 f9ab 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	080228d8 	.word	0x080228d8

0800c1a0 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800c1ac:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4912      	ldr	r1, [pc, #72]	; (800c1fc <_Z13HexStringFroma+0x5c>)
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 f997 	bl	800c4e8 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800c1ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	da16      	bge.n	800c1f0 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7ff fc68 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800c1c8:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	1e9a      	subs	r2, r3, #2
 800c1ce:	f107 030c 	add.w	r3, r7, #12
 800c1d2:	6879      	ldr	r1, [r7, #4]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7ff fdd3 	bl	800bd80 <_ZNK12SimpleString9subStringEj>
 800c1da:	f107 030c 	add.w	r3, r7, #12
 800c1de:	4619      	mov	r1, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7ff f92e 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800c1e6:	f107 030c 	add.w	r3, r7, #12
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7ff fc75 	bl	800bada <_ZN12SimpleStringD1Ev>
    }
    return result;
 800c1f0:	bf00      	nop
}
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	3718      	adds	r7, #24
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	080228d8 	.word	0x080228d8

0800c200 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	683a      	ldr	r2, [r7, #0]
 800c20e:	4904      	ldr	r1, [pc, #16]	; (800c220 <_Z13HexStringFromm+0x20>)
 800c210:	4618      	mov	r0, r3
 800c212:	f000 f969 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	080228d4 	.word	0x080228d4

0800c224 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	4904      	ldr	r1, [pc, #16]	; (800c244 <_Z13HexStringFromj+0x20>)
 800c234:	4618      	mov	r0, r3
 800c236:	f000 f957 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	080228d8 	.word	0x080228d8

0800c248 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c252:	f107 0308 	add.w	r3, r7, #8
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	4618      	mov	r0, r3
 800c25a:	f7ff ff8f 	bl	800c17c <_Z13HexStringFromi>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f107 0208 	add.w	r2, r7, #8
 800c264:	4611      	mov	r1, r2
 800c266:	4618      	mov	r0, r3
 800c268:	f000 f87e 	bl	800c368 <_Z26BracketsFormattedHexString12SimpleString>
 800c26c:	f107 0308 	add.w	r3, r7, #8
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff fc32 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c276:	bf00      	nop
}
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c28a:	f107 0308 	add.w	r3, r7, #8
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff ffc7 	bl	800c224 <_Z13HexStringFromj>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f107 0208 	add.w	r2, r7, #8
 800c29c:	4611      	mov	r1, r2
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 f862 	bl	800c368 <_Z26BracketsFormattedHexString12SimpleString>
 800c2a4:	f107 0308 	add.w	r3, r7, #8
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7ff fc16 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c2ae:	bf00      	nop
}
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c2c2:	f107 0308 	add.w	r3, r7, #8
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff ff45 	bl	800c158 <_Z13HexStringFroml>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f107 0208 	add.w	r2, r7, #8
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 f846 	bl	800c368 <_Z26BracketsFormattedHexString12SimpleString>
 800c2dc:	f107 0308 	add.w	r3, r7, #8
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7ff fbfa 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c2e6:	bf00      	nop
}
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c2fa:	f107 0308 	add.w	r3, r7, #8
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff ff7d 	bl	800c200 <_Z13HexStringFromm>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f107 0208 	add.w	r2, r7, #8
 800c30c:	4611      	mov	r1, r2
 800c30e:	4618      	mov	r0, r3
 800c310:	f000 f82a 	bl	800c368 <_Z26BracketsFormattedHexString12SimpleString>
 800c314:	f107 0308 	add.w	r3, r7, #8
 800c318:	4618      	mov	r0, r3
 800c31a:	f7ff fbde 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c31e:	bf00      	nop
}
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	460b      	mov	r3, r1
 800c332:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c334:	f107 0308 	add.w	r3, r7, #8
 800c338:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800c33c:	4611      	mov	r1, r2
 800c33e:	4618      	mov	r0, r3
 800c340:	f7ff ff2e 	bl	800c1a0 <_Z13HexStringFroma>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f107 0208 	add.w	r2, r7, #8
 800c34a:	4611      	mov	r1, r2
 800c34c:	4618      	mov	r0, r3
 800c34e:	f000 f80b 	bl	800c368 <_Z26BracketsFormattedHexString12SimpleString>
 800c352:	f107 0308 	add.w	r3, r7, #8
 800c356:	4618      	mov	r0, r3
 800c358:	f7ff fbbf 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c35c:	bf00      	nop
}
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
	...

0800c368 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b088      	sub	sp, #32
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800c372:	f107 0310 	add.w	r3, r7, #16
 800c376:	4917      	ldr	r1, [pc, #92]	; (800c3d4 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800c378:	4618      	mov	r0, r3
 800c37a:	f7fe fff6 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800c37e:	f107 0308 	add.w	r3, r7, #8
 800c382:	f107 0110 	add.w	r1, r7, #16
 800c386:	683a      	ldr	r2, [r7, #0]
 800c388:	4618      	mov	r0, r3
 800c38a:	f7ff fc08 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800c38e:	f107 0318 	add.w	r3, r7, #24
 800c392:	4911      	ldr	r1, [pc, #68]	; (800c3d8 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800c394:	4618      	mov	r0, r3
 800c396:	f7fe ffe8 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f107 0218 	add.w	r2, r7, #24
 800c3a0:	f107 0108 	add.w	r1, r7, #8
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7ff fbfa 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800c3aa:	f107 0318 	add.w	r3, r7, #24
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7ff fb93 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c3b4:	f107 0308 	add.w	r3, r7, #8
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7ff fb8e 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c3be:	f107 0310 	add.w	r3, r7, #16
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff fb89 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c3c8:	bf00      	nop
}
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	3720      	adds	r7, #32
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	080228dc 	.word	0x080228dc
 800c3d8:	080228e0 	.word	0x080228e0

0800c3dc <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800c3e4:	1d3b      	adds	r3, r7, #4
 800c3e6:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800c400:	1d3b      	adds	r3, r7, #4
 800c402:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3714      	adds	r7, #20
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800c41e:	6838      	ldr	r0, [r7, #0]
 800c420:	f7ff ffdc 	bl	800c3dc <_ZL25convertPointerToLongValuePKv>
 800c424:	4602      	mov	r2, r0
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4903      	ldr	r1, [pc, #12]	; (800c438 <_Z13HexStringFromPKv+0x24>)
 800c42a:	4618      	mov	r0, r3
 800c42c:	f000 f85c 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	080228d4 	.word	0x080228d4

0800c43c <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800c446:	6838      	ldr	r0, [r7, #0]
 800c448:	f7ff ffd6 	bl	800c3f8 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800c44c:	4602      	mov	r2, r0
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4903      	ldr	r1, [pc, #12]	; (800c460 <_Z13HexStringFromPFvvE+0x24>)
 800c452:	4618      	mov	r0, r3
 800c454:	f000 f848 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	080228d4 	.word	0x080228d4

0800c464 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af02      	add	r7, sp, #8
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	ed87 0b00 	vstr	d0, [r7]
 800c470:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800c472:	4b18      	ldr	r3, [pc, #96]	; (800c4d4 <_Z10StringFromdi+0x70>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	ed97 0b00 	vldr	d0, [r7]
 800c47a:	4798      	blx	r3
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	bf14      	ite	ne
 800c482:	2301      	movne	r3, #1
 800c484:	2300      	moveq	r3, #0
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d004      	beq.n	800c496 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800c48c:	4912      	ldr	r1, [pc, #72]	; (800c4d8 <_Z10StringFromdi+0x74>)
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f7fe ff6b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800c494:	e01a      	b.n	800c4cc <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800c496:	4b11      	ldr	r3, [pc, #68]	; (800c4dc <_Z10StringFromdi+0x78>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	ed97 0b00 	vldr	d0, [r7]
 800c49e:	4798      	blx	r3
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	bf14      	ite	ne
 800c4a6:	2301      	movne	r3, #1
 800c4a8:	2300      	moveq	r3, #0
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d004      	beq.n	800c4ba <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800c4b0:	490b      	ldr	r1, [pc, #44]	; (800c4e0 <_Z10StringFromdi+0x7c>)
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f7fe ff59 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800c4b8:	e008      	b.n	800c4cc <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4c0:	e9cd 2300 	strd	r2, r3, [sp]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	4907      	ldr	r1, [pc, #28]	; (800c4e4 <_Z10StringFromdi+0x80>)
 800c4c8:	f000 f80e 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	200000e8 	.word	0x200000e8
 800c4d8:	08022914 	.word	0x08022914
 800c4dc:	200000ec 	.word	0x200000ec
 800c4e0:	08022928 	.word	0x08022928
 800c4e4:	08022938 	.word	0x08022938

0800c4e8 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800c4e8:	b40e      	push	{r1, r2, r3}
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b087      	sub	sp, #28
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800c4f2:	4910      	ldr	r1, [pc, #64]	; (800c534 <_Z16StringFromFormatPKcz+0x4c>)
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f7fe ff38 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800c4fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c4fe:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800c500:	f107 0310 	add.w	r3, r7, #16
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c508:	4618      	mov	r0, r3
 800c50a:	f000 f839 	bl	800c580 <_Z17VStringFromFormatPKcSt9__va_list>
 800c50e:	f107 0310 	add.w	r3, r7, #16
 800c512:	4619      	mov	r1, r3
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f7fe ff94 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800c51a:	f107 0310 	add.w	r3, r7, #16
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff fadb 	bl	800bada <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800c524:	bf00      	nop
}
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	371c      	adds	r7, #28
 800c52a:	46bd      	mov	sp, r7
 800c52c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c530:	b003      	add	sp, #12
 800c532:	4770      	bx	lr
 800c534:	080228a0 	.word	0x080228a0

0800c538 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	4904      	ldr	r1, [pc, #16]	; (800c558 <_Z10StringFromj+0x20>)
 800c548:	4618      	mov	r0, r3
 800c54a:	f7ff ffcd 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	08022944 	.word	0x08022944

0800c55c <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	4904      	ldr	r1, [pc, #16]	; (800c57c <_Z10StringFromm+0x20>)
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7ff ffbb 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	3708      	adds	r7, #8
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	08022948 	.word	0x08022948

0800c580 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800c580:	b590      	push	{r4, r7, lr}
 800c582:	b0a7      	sub	sp, #156	; 0x9c
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800c590:	492e      	ldr	r1, [pc, #184]	; (800c64c <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f7fe fee9 	bl	800b36a <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800c598:	4b2d      	ldr	r3, [pc, #180]	; (800c650 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800c59a:	681c      	ldr	r4, [r3, #0]
 800c59c:	f107 0014 	add.w	r0, r7, #20
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	2164      	movs	r1, #100	; 0x64
 800c5a6:	47a0      	blx	r4
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800c5ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5b2:	2b63      	cmp	r3, #99	; 0x63
 800c5b4:	d813      	bhi.n	800c5de <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800c5b6:	f107 0214 	add.w	r2, r7, #20
 800c5ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c5be:	4611      	mov	r1, r2
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fe fed2 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800c5c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f7fe ff38 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800c5d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7ff fa7f 	bl	800bada <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800c5dc:	e031      	b.n	800c642 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800c5de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800c5e8:	f240 32c3 	movw	r2, #963	; 0x3c3
 800c5ec:	4919      	ldr	r1, [pc, #100]	; (800c654 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800c5ee:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c5f2:	f7fe fc3f 	bl	800ae74 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c5f6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800c5fa:	4b15      	ldr	r3, [pc, #84]	; (800c650 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800c5fc:	681c      	ldr	r4, [r3, #0]
 800c5fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c606:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c60a:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800c60c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c610:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c614:	4618      	mov	r0, r3
 800c616:	f7fe fea8 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800c61a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c61e:	4619      	mov	r1, r3
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f7fe ff0e 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800c626:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7ff fa55 	bl	800bada <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800c630:	f240 33c7 	movw	r3, #967	; 0x3c7
 800c634:	4a07      	ldr	r2, [pc, #28]	; (800c654 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800c636:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c63a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c63e:	f7fe fc2d 	bl	800ae9c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800c642:	bf00      	nop
}
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	379c      	adds	r7, #156	; 0x9c
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd90      	pop	{r4, r7, pc}
 800c64c:	080228a0 	.word	0x080228a0
 800c650:	200000b0 	.word	0x200000b0
 800c654:	080227e0 	.word	0x080227e0

0800c658 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08a      	sub	sp, #40	; 0x28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800c664:	491f      	ldr	r1, [pc, #124]	; (800c6e4 <_Z16StringFromBinaryPKhj+0x8c>)
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	f7fe fe7f 	bl	800b36a <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800c66c:	2300      	movs	r3, #0
 800c66e:	627b      	str	r3, [r7, #36]	; 0x24
 800c670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	429a      	cmp	r2, r3
 800c676:	d219      	bcs.n	800c6ac <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	4413      	add	r3, r2
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	461a      	mov	r2, r3
 800c682:	f107 0314 	add.w	r3, r7, #20
 800c686:	4918      	ldr	r1, [pc, #96]	; (800c6e8 <_Z16StringFromBinaryPKhj+0x90>)
 800c688:	4618      	mov	r0, r3
 800c68a:	f7ff ff2d 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 800c68e:	f107 0314 	add.w	r3, r7, #20
 800c692:	4619      	mov	r1, r3
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f7ff fa9d 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800c69a:	f107 0314 	add.w	r3, r7, #20
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7ff fa1b 	bl	800bada <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c6aa:	e7e1      	b.n	800c670 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f7ff f9f3 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	f107 001c 	add.w	r0, r7, #28
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	68f9      	ldr	r1, [r7, #12]
 800c6be:	f7ff fb15 	bl	800bcec <_ZNK12SimpleString9subStringEjj>
 800c6c2:	f107 031c 	add.w	r3, r7, #28
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f7fe feba 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800c6ce:	f107 031c 	add.w	r3, r7, #28
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7ff fa01 	bl	800bada <_ZN12SimpleStringD1Ev>

    return result;
 800c6d8:	bf00      	nop
}
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	3728      	adds	r7, #40	; 0x28
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	080228a0 	.word	0x080228a0
 800c6e8:	0802294c 	.word	0x0802294c

0800c6ec <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d006      	beq.n	800c70c <_Z22StringFromBinaryOrNullPKhj+0x20>
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	68b9      	ldr	r1, [r7, #8]
 800c704:	4618      	mov	r0, r3
 800c706:	f7ff ffa7 	bl	800c658 <_Z16StringFromBinaryPKhj>
 800c70a:	e004      	b.n	800c716 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	4904      	ldr	r1, [pc, #16]	; (800c720 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800c710:	4618      	mov	r0, r3
 800c712:	f7ff fc6f 	bl	800bff4 <_Z10StringFromPKc>
}
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	3710      	adds	r7, #16
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	080228c0 	.word	0x080228c0

0800c724 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b088      	sub	sp, #32
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	4913      	ldr	r1, [pc, #76]	; (800c784 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800c736:	4618      	mov	r0, r3
 800c738:	f7ff fed6 	bl	800c4e8 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2b80      	cmp	r3, #128	; 0x80
 800c740:	bf28      	it	cs
 800c742:	2380      	movcs	r3, #128	; 0x80
 800c744:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800c746:	f107 0314 	add.w	r3, r7, #20
 800c74a:	69fa      	ldr	r2, [r7, #28]
 800c74c:	68b9      	ldr	r1, [r7, #8]
 800c74e:	4618      	mov	r0, r3
 800c750:	f7ff ffcc 	bl	800c6ec <_Z22StringFromBinaryOrNullPKhj>
 800c754:	f107 0314 	add.w	r3, r7, #20
 800c758:	4619      	mov	r1, r3
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f7ff fa3a 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800c760:	f107 0314 	add.w	r3, r7, #20
 800c764:	4618      	mov	r0, r3
 800c766:	f7ff f9b8 	bl	800bada <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d903      	bls.n	800c77a <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800c772:	4905      	ldr	r1, [pc, #20]	; (800c788 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800c774:	68f8      	ldr	r0, [r7, #12]
 800c776:	f7ff fa3f 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800c77a:	bf00      	nop
}
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	3720      	adds	r7, #32
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	08022954 	.word	0x08022954
 800c788:	08022970 	.word	0x08022970

0800c78c <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d006      	beq.n	800c7ac <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	68b9      	ldr	r1, [r7, #8]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7ff ffbd 	bl	800c724 <_Z24StringFromBinaryWithSizePKhj>
 800c7aa:	e004      	b.n	800c7b6 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4904      	ldr	r1, [pc, #16]	; (800c7c0 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7ff fc1f 	bl	800bff4 <_Z10StringFromPKc>
}
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	080228c0 	.word	0x080228c0

0800c7c4 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b088      	sub	sp, #32
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
 800c7d0:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800c7d2:	4925      	ldr	r1, [pc, #148]	; (800c868 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f7fe fdc8 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	2b04      	cmp	r3, #4
 800c7de:	d802      	bhi.n	800c7e6 <_Z20StringFromMaskedBitsmmj+0x22>
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	00db      	lsls	r3, r3, #3
 800c7e4:	e000      	b.n	800c7e8 <_Z20StringFromMaskedBitsmmj+0x24>
 800c7e6:	2320      	movs	r3, #32
 800c7e8:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f4:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	61fb      	str	r3, [r7, #28]
 800c7fa:	69fa      	ldr	r2, [r7, #28]
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d22d      	bcs.n	800c85e <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	4013      	ands	r3, r2
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00c      	beq.n	800c826 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	4013      	ands	r3, r2
 800c812:	2b00      	cmp	r3, #0
 800c814:	d001      	beq.n	800c81a <_Z20StringFromMaskedBitsmmj+0x56>
 800c816:	4b15      	ldr	r3, [pc, #84]	; (800c86c <_Z20StringFromMaskedBitsmmj+0xa8>)
 800c818:	e000      	b.n	800c81c <_Z20StringFromMaskedBitsmmj+0x58>
 800c81a:	4b15      	ldr	r3, [pc, #84]	; (800c870 <_Z20StringFromMaskedBitsmmj+0xac>)
 800c81c:	4619      	mov	r1, r3
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f7ff f9ea 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
 800c824:	e003      	b.n	800c82e <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800c826:	4913      	ldr	r1, [pc, #76]	; (800c874 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff f9e5 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	f003 0307 	and.w	r3, r3, #7
 800c834:	2b07      	cmp	r3, #7
 800c836:	d108      	bne.n	800c84a <_Z20StringFromMaskedBitsmmj+0x86>
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	3b01      	subs	r3, #1
 800c83c:	69fa      	ldr	r2, [r7, #28]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d003      	beq.n	800c84a <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800c842:	490d      	ldr	r1, [pc, #52]	; (800c878 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f7ff f9d7 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	005b      	lsls	r3, r3, #1
 800c84e:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	005b      	lsls	r3, r3, #1
 800c854:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	3301      	adds	r3, #1
 800c85a:	61fb      	str	r3, [r7, #28]
 800c85c:	e7cd      	b.n	800c7fa <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800c85e:	bf00      	nop
}
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	3720      	adds	r7, #32
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	080228a0 	.word	0x080228a0
 800c86c:	08022978 	.word	0x08022978
 800c870:	0802297c 	.word	0x0802297c
 800c874:	08022980 	.word	0x08022980
 800c878:	08022984 	.word	0x08022984

0800c87c <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	4b18      	ldr	r3, [pc, #96]	; (800c8ec <_Z23StringFromOrdinalNumberj+0x70>)
 800c88a:	fba3 1302 	umull	r1, r3, r3, r2
 800c88e:	08d9      	lsrs	r1, r3, #3
 800c890:	460b      	mov	r3, r1
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	440b      	add	r3, r1
 800c896:	005b      	lsls	r3, r3, #1
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2b0a      	cmp	r3, #10
 800c8a0:	d905      	bls.n	800c8ae <_Z23StringFromOrdinalNumberj+0x32>
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2b0d      	cmp	r3, #13
 800c8a6:	d802      	bhi.n	800c8ae <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800c8a8:	4b11      	ldr	r3, [pc, #68]	; (800c8f0 <_Z23StringFromOrdinalNumberj+0x74>)
 800c8aa:	60fb      	str	r3, [r7, #12]
 800c8ac:	e013      	b.n	800c8d6 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	2b03      	cmp	r3, #3
 800c8b2:	d102      	bne.n	800c8ba <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800c8b4:	4b0f      	ldr	r3, [pc, #60]	; (800c8f4 <_Z23StringFromOrdinalNumberj+0x78>)
 800c8b6:	60fb      	str	r3, [r7, #12]
 800c8b8:	e00d      	b.n	800c8d6 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d102      	bne.n	800c8c6 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800c8c0:	4b0d      	ldr	r3, [pc, #52]	; (800c8f8 <_Z23StringFromOrdinalNumberj+0x7c>)
 800c8c2:	60fb      	str	r3, [r7, #12]
 800c8c4:	e007      	b.n	800c8d6 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d102      	bne.n	800c8d2 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800c8cc:	4b0b      	ldr	r3, [pc, #44]	; (800c8fc <_Z23StringFromOrdinalNumberj+0x80>)
 800c8ce:	60fb      	str	r3, [r7, #12]
 800c8d0:	e001      	b.n	800c8d6 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800c8d2:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <_Z23StringFromOrdinalNumberj+0x74>)
 800c8d4:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	4908      	ldr	r1, [pc, #32]	; (800c900 <_Z23StringFromOrdinalNumberj+0x84>)
 800c8de:	f7ff fe03 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	cccccccd 	.word	0xcccccccd
 800c8f0:	08022988 	.word	0x08022988
 800c8f4:	0802298c 	.word	0x0802298c
 800c8f8:	08022990 	.word	0x08022990
 800c8fc:	08022994 	.word	0x08022994
 800c900:	08022998 	.word	0x08022998

0800c904 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	3304      	adds	r3, #4
 800c910:	4907      	ldr	r1, [pc, #28]	; (800c930 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800c912:	4618      	mov	r0, r3
 800c914:	f7fe fd29 	bl	800b36a <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	60da      	str	r2, [r3, #12]
}
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4618      	mov	r0, r3
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	080228a0 	.word	0x080228a0

0800c934 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800c934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d01e      	beq.n	800c984 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	3b04      	subs	r3, #4
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	18d4      	adds	r4, r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	429c      	cmp	r4, r3
 800c95c:	d004      	beq.n	800c968 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800c95e:	3c08      	subs	r4, #8
 800c960:	4620      	mov	r0, r4
 800c962:	f7ff f8ba 	bl	800bada <_ZN12SimpleStringD1Ev>
 800c966:	e7f6      	b.n	800c956 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f1a3 0208 	sub.w	r2, r3, #8
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3b04      	subs	r3, #4
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	3301      	adds	r3, #1
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	4619      	mov	r1, r3
 800c97e:	4610      	mov	r0, r2
 800c980:	f7fc f976 	bl	8008c70 <_ZdaPvj>

    size_ = _size;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	683a      	ldr	r2, [r7, #0]
 800c988:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	68dc      	ldr	r4, [r3, #12]
 800c98e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800c992:	d202      	bcs.n	800c99a <_ZN22SimpleStringCollection8allocateEj+0x66>
 800c994:	1c63      	adds	r3, r4, #1
 800c996:	00db      	lsls	r3, r3, #3
 800c998:	e001      	b.n	800c99e <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800c99a:	f04f 33ff 	mov.w	r3, #4294967295
 800c99e:	f240 4227 	movw	r2, #1063	; 0x427
 800c9a2:	4910      	ldr	r1, [pc, #64]	; (800c9e4 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7fc f941 	bl	8008c2c <_ZnajPKci>
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	1d2b      	adds	r3, r5, #4
 800c9ae:	3b04      	subs	r3, #4
 800c9b0:	2208      	movs	r2, #8
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	1d2b      	adds	r3, r5, #4
 800c9b6:	601c      	str	r4, [r3, #0]
 800c9b8:	f105 0308 	add.w	r3, r5, #8
 800c9bc:	1e62      	subs	r2, r4, #1
 800c9be:	4614      	mov	r4, r2
 800c9c0:	461e      	mov	r6, r3
 800c9c2:	2c00      	cmp	r4, #0
 800c9c4:	db06      	blt.n	800c9d4 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800c9c6:	4908      	ldr	r1, [pc, #32]	; (800c9e8 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	f7fe fcce 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800c9ce:	3608      	adds	r6, #8
 800c9d0:	3c01      	subs	r4, #1
 800c9d2:	e7f6      	b.n	800c9c2 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800c9d4:	f105 0208 	add.w	r2, r5, #8
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	601a      	str	r2, [r3, #0]
}
 800c9dc:	bf00      	nop
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9e4:	080227e0 	.word	0x080227e0
 800c9e8:	080228a0 	.word	0x080228a0

0800c9ec <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800c9ec:	b590      	push	{r4, r7, lr}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d01e      	beq.n	800ca3a <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3b04      	subs	r3, #4
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	00db      	lsls	r3, r3, #3
 800ca0a:	18d4      	adds	r4, r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	429c      	cmp	r4, r3
 800ca12:	d004      	beq.n	800ca1e <_ZN22SimpleStringCollectionD1Ev+0x32>
 800ca14:	3c08      	subs	r4, #8
 800ca16:	4620      	mov	r0, r4
 800ca18:	f7ff f85f 	bl	800bada <_ZN12SimpleStringD1Ev>
 800ca1c:	e7f6      	b.n	800ca0c <_ZN22SimpleStringCollectionD1Ev+0x20>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f1a3 0208 	sub.w	r2, r3, #8
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	3b04      	subs	r3, #4
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	00db      	lsls	r3, r3, #3
 800ca32:	4619      	mov	r1, r3
 800ca34:	4610      	mov	r0, r2
 800ca36:	f7fc f91b 	bl	8008c70 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7ff f84b 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4618      	mov	r0, r3
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd90      	pop	{r4, r7, pc}

0800ca4e <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800ca4e:	b480      	push	{r7}
 800ca50:	b083      	sub	sp, #12
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
    return size_;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	68db      	ldr	r3, [r3, #12]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
	...

0800ca68 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800ca68:	b590      	push	{r4, r7, lr}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	683a      	ldr	r2, [r7, #0]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d315      	bcc.n	800caa8 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	1d1c      	adds	r4, r3, #4
 800ca80:	f107 0308 	add.w	r3, r7, #8
 800ca84:	490d      	ldr	r1, [pc, #52]	; (800cabc <_ZN22SimpleStringCollectionixEj+0x54>)
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fe fc6f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800ca8c:	f107 0308 	add.w	r3, r7, #8
 800ca90:	4619      	mov	r1, r3
 800ca92:	4620      	mov	r0, r4
 800ca94:	f7fe fcd5 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800ca98:	f107 0308 	add.w	r3, r7, #8
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7ff f81c 	bl	800bada <_ZN12SimpleStringD1Ev>
        return empty_;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	3304      	adds	r3, #4
 800caa6:	e004      	b.n	800cab2 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	4413      	add	r3, r2
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3714      	adds	r7, #20
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd90      	pop	{r4, r7, pc}
 800caba:	bf00      	nop
 800cabc:	080228a0 	.word	0x080228a0

0800cac0 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fa fb88 	bl	80071e0 <_ZN17ConsoleTestOutputC1Ev>
 800cad0:	4a08      	ldr	r2, [pc, #32]	; (800caf4 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	601a      	str	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	611a      	str	r2, [r3, #16]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	3314      	adds	r3, #20
 800cae0:	4905      	ldr	r1, [pc, #20]	; (800caf8 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fe fc41 	bl	800b36a <_ZN12SimpleStringC1EPKc>
{
}
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4618      	mov	r0, r3
 800caec:	3708      	adds	r7, #8
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	08025ff4 	.word	0x08025ff4
 800caf8:	080229a0 	.word	0x080229a0

0800cafc <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	4a08      	ldr	r2, [pc, #32]	; (800cb28 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	3314      	adds	r3, #20
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe ffe3 	bl	800bada <_ZN12SimpleStringD1Ev>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fa fb74 	bl	8007204 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	08025ff4 	.word	0x08025ff4

0800cb2c <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
}
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff ffe1 	bl	800cafc <_ZN18TeamCityTestOutputD1Ev>
 800cb3a:	211c      	movs	r1, #28
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7fc f865 	bl	8008c0c <_ZdlPvj>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4618      	mov	r0, r3
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b086      	sub	sp, #24
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	332c      	adds	r3, #44	; 0x2c
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	492b      	ldr	r1, [pc, #172]	; (800cc10 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800cb62:	4610      	mov	r0, r2
 800cb64:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800cb66:	f107 0308 	add.w	r3, r7, #8
 800cb6a:	6839      	ldr	r1, [r7, #0]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f004 fdf7 	bl	8011760 <_ZNK10UtestShell7getNameEv>
 800cb72:	f107 0308 	add.w	r3, r7, #8
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fe ff82 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f919 	bl	800cdb8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800cb86:	f107 0308 	add.w	r3, r7, #8
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fe ffa5 	bl	800bada <_ZN12SimpleStringD1Ev>
    print("']\n");
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	332c      	adds	r3, #44	; 0x2c
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	491e      	ldr	r1, [pc, #120]	; (800cc14 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	4798      	blx	r3
    if (!test.willRun()) {
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	3318      	adds	r3, #24
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6838      	ldr	r0, [r7, #0]
 800cbaa:	4798      	blx	r3
 800cbac:	4603      	mov	r3, r0
 800cbae:	f083 0301 	eor.w	r3, r3, #1
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d024      	beq.n	800cc02 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	332c      	adds	r3, #44	; 0x2c
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4915      	ldr	r1, [pc, #84]	; (800cc18 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800cbc8:	f107 0310 	add.w	r3, r7, #16
 800cbcc:	6839      	ldr	r1, [r7, #0]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f004 fdc6 	bl	8011760 <_ZNK10UtestShell7getNameEv>
 800cbd4:	f107 0310 	add.w	r3, r7, #16
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fe ff51 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 f8e8 	bl	800cdb8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800cbe8:	f107 0310 	add.w	r3, r7, #16
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fe ff74 	bl	800bada <_ZN12SimpleStringD1Ev>
        print("']\n");
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	332c      	adds	r3, #44	; 0x2c
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4905      	ldr	r1, [pc, #20]	; (800cc14 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800cbfe:	4610      	mov	r0, r2
 800cc00:	4798      	blx	r3
    }
    currtest_ = &test;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	683a      	ldr	r2, [r7, #0]
 800cc06:	611a      	str	r2, [r3, #16]
}
 800cc08:	bf00      	nop
 800cc0a:	3718      	adds	r7, #24
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	080229a4 	.word	0x080229a4
 800cc14:	080229c4 	.word	0x080229c4
 800cc18:	080229c8 	.word	0x080229c8

0800cc1c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800cc1c:	b5b0      	push	{r4, r5, r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d03b      	beq.n	800cca6 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	332c      	adds	r3, #44	; 0x2c
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	491d      	ldr	r1, [pc, #116]	; (800ccb0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800cc3a:	4610      	mov	r0, r2
 800cc3c:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	691a      	ldr	r2, [r3, #16]
 800cc42:	f107 0308 	add.w	r3, r7, #8
 800cc46:	4611      	mov	r1, r2
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f004 fd89 	bl	8011760 <_ZNK10UtestShell7getNameEv>
 800cc4e:	f107 0308 	add.w	r3, r7, #8
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fe ff14 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 f8ab 	bl	800cdb8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800cc62:	f107 0308 	add.w	r3, r7, #8
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fe ff37 	bl	800bada <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	332c      	adds	r3, #44	; 0x2c
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	490f      	ldr	r1, [pc, #60]	; (800ccb4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800cc78:	4610      	mov	r0, r2
 800cc7a:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800cc7c:	687d      	ldr	r5, [r7, #4]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	3334      	adds	r3, #52	; 0x34
 800cc84:	681c      	ldr	r4, [r3, #0]
 800cc86:	6838      	ldr	r0, [r7, #0]
 800cc88:	f004 fa0a 	bl	80110a0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	4619      	mov	r1, r3
 800cc90:	4628      	mov	r0, r5
 800cc92:	47a0      	blx	r4
    print("']\n");
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	332c      	adds	r3, #44	; 0x2c
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4906      	ldr	r1, [pc, #24]	; (800ccb8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800cca0:	4610      	mov	r0, r2
 800cca2:	4798      	blx	r3
 800cca4:	e000      	b.n	800cca8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800cca6:	bf00      	nop
}
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bdb0      	pop	{r4, r5, r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	080229e8 	.word	0x080229e8
 800ccb4:	08022a08 	.word	0x08022a08
 800ccb8:	080229c4 	.word	0x080229c4

0800ccbc <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800ccbc:	b590      	push	{r4, r7, lr}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f103 0414 	add.w	r4, r3, #20
 800cccc:	f107 0308 	add.w	r3, r7, #8
 800ccd0:	6839      	ldr	r1, [r7, #0]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f004 fd53 	bl	801177e <_ZNK10UtestShell8getGroupEv>
 800ccd8:	f107 0308 	add.w	r3, r7, #8
 800ccdc:	4619      	mov	r1, r3
 800ccde:	4620      	mov	r0, r4
 800cce0:	f7fe fbaf 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800cce4:	f107 0308 	add.w	r3, r7, #8
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7fe fef6 	bl	800bada <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	332c      	adds	r3, #44	; 0x2c
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	490c      	ldr	r1, [pc, #48]	; (800cd2c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800ccfa:	4610      	mov	r0, r2
 800ccfc:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3314      	adds	r3, #20
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fe febc 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f853 	bl	800cdb8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	332c      	adds	r3, #44	; 0x2c
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4904      	ldr	r1, [pc, #16]	; (800cd30 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800cd1e:	4610      	mov	r0, r2
 800cd20:	4798      	blx	r3
}
 800cd22:	bf00      	nop
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd90      	pop	{r4, r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	08022a18 	.word	0x08022a18
 800cd30:	080229c4 	.word	0x080229c4

0800cd34 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800cd34:	b590      	push	{r4, r7, lr}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f103 0414 	add.w	r4, r3, #20
 800cd44:	f107 0308 	add.w	r3, r7, #8
 800cd48:	4918      	ldr	r1, [pc, #96]	; (800cdac <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fe fb0d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800cd50:	f107 0308 	add.w	r3, r7, #8
 800cd54:	4619      	mov	r1, r3
 800cd56:	4620      	mov	r0, r4
 800cd58:	f7fe fecb 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	461c      	mov	r4, r3
 800cd60:	f107 0308 	add.w	r3, r7, #8
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fe feb8 	bl	800bada <_ZN12SimpleStringD1Ev>
 800cd6a:	2c00      	cmp	r4, #0
 800cd6c:	d11a      	bne.n	800cda4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	332c      	adds	r3, #44	; 0x2c
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	490d      	ldr	r1, [pc, #52]	; (800cdb0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800cd7a:	4610      	mov	r0, r2
 800cd7c:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	3314      	adds	r3, #20
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fe fe7c 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f813 	bl	800cdb8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	332c      	adds	r3, #44	; 0x2c
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4905      	ldr	r1, [pc, #20]	; (800cdb4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800cd9e:	4610      	mov	r0, r2
 800cda0:	4798      	blx	r3
 800cda2:	e000      	b.n	800cda6 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800cda4:	bf00      	nop
}
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd90      	pop	{r4, r7, pc}
 800cdac:	080229a0 	.word	0x080229a0
 800cdb0:	08022a3c 	.word	0x08022a3c
 800cdb4:	080229c4 	.word	0x080229c4

0800cdb8 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
    while (*s) {
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d03f      	beq.n	800ce4a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	2b27      	cmp	r3, #39	; 0x27
 800cdd0:	d00b      	beq.n	800cdea <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	2b7c      	cmp	r3, #124	; 0x7c
 800cdd8:	d007      	beq.n	800cdea <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	2b5b      	cmp	r3, #91	; 0x5b
 800cde0:	d003      	beq.n	800cdea <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	2b5d      	cmp	r3, #93	; 0x5d
 800cde8:	d107      	bne.n	800cdfa <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800cdea:	237c      	movs	r3, #124	; 0x7c
 800cdec:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	73bb      	strb	r3, [r7, #14]
 800cdf8:	e01a      	b.n	800ce30 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	2b0d      	cmp	r3, #13
 800ce00:	d106      	bne.n	800ce10 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800ce02:	237c      	movs	r3, #124	; 0x7c
 800ce04:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800ce06:	2372      	movs	r3, #114	; 0x72
 800ce08:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	73bb      	strb	r3, [r7, #14]
 800ce0e:	e00f      	b.n	800ce30 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	2b0a      	cmp	r3, #10
 800ce16:	d106      	bne.n	800ce26 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800ce18:	237c      	movs	r3, #124	; 0x7c
 800ce1a:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800ce1c:	236e      	movs	r3, #110	; 0x6e
 800ce1e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	73bb      	strb	r3, [r7, #14]
 800ce24:	e004      	b.n	800ce30 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	3328      	adds	r3, #40	; 0x28
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f107 010c 	add.w	r1, r7, #12
 800ce3e:	4610      	mov	r0, r2
 800ce40:	4798      	blx	r3
        s++;
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	3301      	adds	r3, #1
 800ce46:	603b      	str	r3, [r7, #0]
    while (*s) {
 800ce48:	e7bb      	b.n	800cdc2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800ce4a:	bf00      	nop
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
	...

0800ce54 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800ce54:	b5b0      	push	{r4, r5, r7, lr}
 800ce56:	b08a      	sub	sp, #40	; 0x28
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	332c      	adds	r3, #44	; 0x2c
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4968      	ldr	r1, [pc, #416]	; (800d00c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800ce6a:	4610      	mov	r0, r2
 800ce6c:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3310      	adds	r3, #16
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f107 0208 	add.w	r2, r7, #8
 800ce7a:	6839      	ldr	r1, [r7, #0]
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	4798      	blx	r3
 800ce80:	f107 0308 	add.w	r3, r7, #8
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fe fdfb 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7ff ff92 	bl	800cdb8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800ce94:	f107 0308 	add.w	r3, r7, #8
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fe fe1e 	bl	800bada <_ZN12SimpleStringD1Ev>
    print("' message='");
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	332c      	adds	r3, #44	; 0x2c
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4959      	ldr	r1, [pc, #356]	; (800d010 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800ceaa:	4610      	mov	r0, r2
 800ceac:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800ceae:	6838      	ldr	r0, [r7, #0]
 800ceb0:	f000 fa15 	bl	800d2de <_ZNK11TestFailure17isOutsideTestFileEv>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d105      	bne.n	800cec6 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800ceba:	6838      	ldr	r0, [r7, #0]
 800cebc:	f000 fa21 	bl	800d302 <_ZNK11TestFailure18isInHelperFunctionEv>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d001      	beq.n	800ceca <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800cec6:	2301      	movs	r3, #1
 800cec8:	e000      	b.n	800cecc <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800ceca:	2300      	movs	r3, #0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d042      	beq.n	800cf56 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	332c      	adds	r3, #44	; 0x2c
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	494e      	ldr	r1, [pc, #312]	; (800d014 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800cedc:	4610      	mov	r0, r2
 800cede:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800cee0:	687d      	ldr	r5, [r7, #4]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	332c      	adds	r3, #44	; 0x2c
 800cee8:	681c      	ldr	r4, [r3, #0]
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	331c      	adds	r3, #28
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f107 0210 	add.w	r2, r7, #16
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	4610      	mov	r0, r2
 800cefa:	4798      	blx	r3
 800cefc:	f107 0310 	add.w	r3, r7, #16
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fe fdbd 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800cf06:	4603      	mov	r3, r0
 800cf08:	4619      	mov	r1, r3
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	47a0      	blx	r4
 800cf0e:	f107 0310 	add.w	r3, r7, #16
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7fe fde1 	bl	800bada <_ZN12SimpleStringD1Ev>
        print(":");
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	332c      	adds	r3, #44	; 0x2c
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	493d      	ldr	r1, [pc, #244]	; (800d018 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800cf24:	4610      	mov	r0, r2
 800cf26:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800cf28:	687d      	ldr	r5, [r7, #4]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3334      	adds	r3, #52	; 0x34
 800cf30:	681c      	ldr	r4, [r3, #0]
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	3320      	adds	r3, #32
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6838      	ldr	r0, [r7, #0]
 800cf3c:	4798      	blx	r3
 800cf3e:	4603      	mov	r3, r0
 800cf40:	4619      	mov	r1, r3
 800cf42:	4628      	mov	r0, r5
 800cf44:	47a0      	blx	r4
        print("): ");
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	332c      	adds	r3, #44	; 0x2c
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4932      	ldr	r1, [pc, #200]	; (800d01c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800cf52:	4610      	mov	r0, r2
 800cf54:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	3308      	adds	r3, #8
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f107 0218 	add.w	r2, r7, #24
 800cf62:	6839      	ldr	r1, [r7, #0]
 800cf64:	4610      	mov	r0, r2
 800cf66:	4798      	blx	r3
 800cf68:	f107 0318 	add.w	r3, r7, #24
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7fe fd87 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800cf72:	4603      	mov	r3, r0
 800cf74:	4619      	mov	r1, r3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff ff1e 	bl	800cdb8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800cf7c:	f107 0318 	add.w	r3, r7, #24
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fe fdaa 	bl	800bada <_ZN12SimpleStringD1Ev>
    print(":");
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	332c      	adds	r3, #44	; 0x2c
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4921      	ldr	r1, [pc, #132]	; (800d018 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800cf92:	4610      	mov	r0, r2
 800cf94:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800cf96:	687d      	ldr	r5, [r7, #4]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3334      	adds	r3, #52	; 0x34
 800cf9e:	681c      	ldr	r4, [r3, #0]
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	3314      	adds	r3, #20
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	6838      	ldr	r0, [r7, #0]
 800cfaa:	4798      	blx	r3
 800cfac:	4603      	mov	r3, r0
 800cfae:	4619      	mov	r1, r3
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	47a0      	blx	r4

    print("' details='");
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	332c      	adds	r3, #44	; 0x2c
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4918      	ldr	r1, [pc, #96]	; (800d020 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	3318      	adds	r3, #24
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f107 0220 	add.w	r2, r7, #32
 800cfd0:	6839      	ldr	r1, [r7, #0]
 800cfd2:	4610      	mov	r0, r2
 800cfd4:	4798      	blx	r3
 800cfd6:	f107 0320 	add.w	r3, r7, #32
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fe fd50 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7ff fee7 	bl	800cdb8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800cfea:	f107 0320 	add.w	r3, r7, #32
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fe fd73 	bl	800bada <_ZN12SimpleStringD1Ev>
    print("']\n");
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	332c      	adds	r3, #44	; 0x2c
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4909      	ldr	r1, [pc, #36]	; (800d024 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800d000:	4610      	mov	r0, r2
 800d002:	4798      	blx	r3
}
 800d004:	bf00      	nop
 800d006:	3728      	adds	r7, #40	; 0x28
 800d008:	46bd      	mov	sp, r7
 800d00a:	bdb0      	pop	{r4, r5, r7, pc}
 800d00c:	08022a60 	.word	0x08022a60
 800d010:	08022a80 	.word	0x08022a80
 800d014:	08022a8c 	.word	0x08022a8c
 800d018:	08022a9c 	.word	0x08022a9c
 800d01c:	08022aa0 	.word	0x08022aa0
 800d020:	08022aa4 	.word	0x08022aa4
 800d024:	080229c4 	.word	0x080229c4

0800d028 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800d034:	4a1a      	ldr	r2, [pc, #104]	; (800d0a0 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	601a      	str	r2, [r3, #0]
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	3314      	adds	r3, #20
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	3204      	adds	r2, #4
 800d046:	68b9      	ldr	r1, [r7, #8]
 800d048:	4610      	mov	r0, r2
 800d04a:	4798      	blx	r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	330c      	adds	r3, #12
 800d050:	68b9      	ldr	r1, [r7, #8]
 800d052:	4618      	mov	r0, r3
 800d054:	f004 fb84 	bl	8011760 <_ZNK10UtestShell7getNameEv>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	3314      	adds	r3, #20
 800d05c:	68b9      	ldr	r1, [r7, #8]
 800d05e:	4618      	mov	r0, r3
 800d060:	f004 fc4f 	bl	8011902 <_ZNK10UtestShell7getFileEv>
 800d064:	68b8      	ldr	r0, [r7, #8]
 800d066:	f004 fc5b 	bl	8011920 <_ZNK10UtestShell13getLineNumberEv>
 800d06a:	4602      	mov	r2, r0
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	61da      	str	r2, [r3, #28]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	3320      	adds	r3, #32
 800d074:	68b9      	ldr	r1, [r7, #8]
 800d076:	4618      	mov	r0, r3
 800d078:	f004 fc43 	bl	8011902 <_ZNK10UtestShell7getFileEv>
 800d07c:	68b8      	ldr	r0, [r7, #8]
 800d07e:	f004 fc4f 	bl	8011920 <_ZNK10UtestShell13getLineNumberEv>
 800d082:	4602      	mov	r2, r0
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	629a      	str	r2, [r3, #40]	; 0x28
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	332c      	adds	r3, #44	; 0x2c
 800d08c:	6879      	ldr	r1, [r7, #4]
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fe f9bf 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
{
}
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	080262c0 	.word	0x080262c0

0800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
 800d0b0:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800d0b2:	4a19      	ldr	r2, [pc, #100]	; (800d118 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	601a      	str	r2, [r3, #0]
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3314      	adds	r3, #20
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	3204      	adds	r2, #4
 800d0c4:	68b9      	ldr	r1, [r7, #8]
 800d0c6:	4610      	mov	r0, r2
 800d0c8:	4798      	blx	r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	330c      	adds	r3, #12
 800d0ce:	68b9      	ldr	r1, [r7, #8]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f004 fb45 	bl	8011760 <_ZNK10UtestShell7getNameEv>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	3314      	adds	r3, #20
 800d0da:	6879      	ldr	r1, [r7, #4]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fe f944 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	683a      	ldr	r2, [r7, #0]
 800d0e6:	61da      	str	r2, [r3, #28]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	3320      	adds	r3, #32
 800d0ec:	68b9      	ldr	r1, [r7, #8]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f004 fc07 	bl	8011902 <_ZNK10UtestShell7getFileEv>
 800d0f4:	68b8      	ldr	r0, [r7, #8]
 800d0f6:	f004 fc13 	bl	8011920 <_ZNK10UtestShell13getLineNumberEv>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	629a      	str	r2, [r3, #40]	; 0x28
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	332c      	adds	r3, #44	; 0x2c
 800d104:	4905      	ldr	r1, [pc, #20]	; (800d11c <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe f92f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
{
}
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	080262c0 	.word	0x080262c0
 800d11c:	08022ab0 	.word	0x08022ab0

0800d120 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800d12a:	4a1e      	ldr	r2, [pc, #120]	; (800d1a4 <_ZN11TestFailureC1ERKS_+0x84>)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	601a      	str	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	1d1a      	adds	r2, r3, #4
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	3304      	adds	r3, #4
 800d138:	4619      	mov	r1, r3
 800d13a:	4610      	mov	r0, r2
 800d13c:	f7fe f969 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f103 020c 	add.w	r2, r3, #12
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	330c      	adds	r3, #12
 800d14a:	4619      	mov	r1, r3
 800d14c:	4610      	mov	r0, r2
 800d14e:	f7fe f960 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f103 0214 	add.w	r2, r3, #20
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	3314      	adds	r3, #20
 800d15c:	4619      	mov	r1, r3
 800d15e:	4610      	mov	r0, r2
 800d160:	f7fe f957 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	69da      	ldr	r2, [r3, #28]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	61da      	str	r2, [r3, #28]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f103 0220 	add.w	r2, r3, #32
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	3320      	adds	r3, #32
 800d176:	4619      	mov	r1, r3
 800d178:	4610      	mov	r0, r2
 800d17a:	f7fe f94a 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	629a      	str	r2, [r3, #40]	; 0x28
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	332c      	adds	r3, #44	; 0x2c
 800d190:	4619      	mov	r1, r3
 800d192:	4610      	mov	r0, r2
 800d194:	f7fe f93d 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
{
}
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4618      	mov	r0, r3
 800d19c:	3708      	adds	r7, #8
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	080262c0 	.word	0x080262c0

0800d1a8 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	4a10      	ldr	r2, [pc, #64]	; (800d1f4 <_ZN11TestFailureD1Ev+0x4c>)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	332c      	adds	r3, #44	; 0x2c
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fe fc8d 	bl	800bada <_ZN12SimpleStringD1Ev>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	3320      	adds	r3, #32
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fe fc88 	bl	800bada <_ZN12SimpleStringD1Ev>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	3314      	adds	r3, #20
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fe fc83 	bl	800bada <_ZN12SimpleStringD1Ev>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	330c      	adds	r3, #12
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7fe fc7e 	bl	800bada <_ZN12SimpleStringD1Ev>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3304      	adds	r3, #4
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fe fc79 	bl	800bada <_ZN12SimpleStringD1Ev>
{
}
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	080262c0 	.word	0x080262c0

0800d1f8 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
}
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f7ff ffd1 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800d206:	2134      	movs	r1, #52	; 0x34
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7fb fcff 	bl	8008c0c <_ZdlPvj>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4618      	mov	r0, r3
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
    return fileName_;
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	3314      	adds	r3, #20
 800d226:	4619      	mov	r1, r3
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f7fe f8f2 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
}
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b082      	sub	sp, #8
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	3320      	adds	r3, #32
 800d244:	4619      	mov	r1, r3
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7fe f8e3 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
}
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
    return testName_;
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	3304      	adds	r3, #4
 800d262:	4619      	mov	r1, r3
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7fe f8d4 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
}
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b082      	sub	sp, #8
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
 800d27a:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	330c      	adds	r3, #12
 800d280:	4619      	mov	r1, r3
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7fe f8c5 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
}
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	69db      	ldr	r3, [r3, #28]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	370c      	adds	r7, #12
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
    return message_;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	332c      	adds	r3, #44	; 0x2c
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7fe f89e 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
}
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b082      	sub	sp, #8
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f103 0220 	add.w	r2, r3, #32
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	3314      	adds	r3, #20
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	4610      	mov	r0, r2
 800d2f4:	f7fe fc42 	bl	800bb7c <_ZneRK12SimpleStringS1_>
 800d2f8:	4603      	mov	r3, r0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800d302:	b480      	push	{r7}
 800d304:	b083      	sub	sp, #12
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	69da      	ldr	r2, [r3, #28]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d312:	429a      	cmp	r2, r3
 800d314:	bf34      	ite	cc
 800d316:	2301      	movcc	r3, #1
 800d318:	2300      	movcs	r3, #0
 800d31a:	b2db      	uxtb	r3, r3
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800d328:	b590      	push	{r4, r7, lr}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
 800d334:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7fe fba2 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800d33c:	4604      	mov	r4, r0
 800d33e:	6838      	ldr	r0, [r7, #0]
 800d340:	f7fe fb9e 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800d344:	4603      	mov	r3, r0
 800d346:	68f8      	ldr	r0, [r7, #12]
 800d348:	4622      	mov	r2, r4
 800d34a:	4903      	ldr	r1, [pc, #12]	; (800d358 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800d34c:	f7ff f8cc 	bl	800c4e8 <_Z16StringFromFormatPKcz>
}
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	3714      	adds	r7, #20
 800d354:	46bd      	mov	sp, r7
 800d356:	bd90      	pop	{r4, r7, pc}
 800d358:	08022abc 	.word	0x08022abc

0800d35c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800d35c:	b590      	push	{r4, r7, lr}
 800d35e:	b097      	sub	sp, #92	; 0x5c
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
 800d368:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800d36a:	494c      	ldr	r1, [pc, #304]	; (800d49c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f7fd fffc 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800d372:	2314      	movs	r3, #20
 800d374:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800d376:	230a      	movs	r3, #10
 800d378:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800d37a:	f107 0320 	add.w	r3, r7, #32
 800d37e:	220a      	movs	r2, #10
 800d380:	4947      	ldr	r1, [pc, #284]	; (800d4a0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800d382:	4618      	mov	r0, r3
 800d384:	f7fe f80c 	bl	800b3a0 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800d388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d38c:	f107 0120 	add.w	r1, r7, #32
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe fc03 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800d398:	f107 0318 	add.w	r3, r7, #24
 800d39c:	f107 0220 	add.w	r2, r7, #32
 800d3a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe fbfa 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800d3aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fe fb93 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800d3b4:	f107 0310 	add.w	r3, r7, #16
 800d3b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3ba:	493a      	ldr	r1, [pc, #232]	; (800d4a4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff f893 	bl	800c4e8 <_Z16StringFromFormatPKcz>

    result += "\n";
 800d3c2:	4939      	ldr	r1, [pc, #228]	; (800d4a8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f7fe fc17 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800d3ca:	f107 0310 	add.w	r3, r7, #16
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7fe fb56 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800d3da:	f107 0118 	add.w	r1, r7, #24
 800d3de:	2314      	movs	r3, #20
 800d3e0:	683a      	ldr	r2, [r7, #0]
 800d3e2:	f7fe fc83 	bl	800bcec <_ZNK12SimpleString9subStringEjj>
 800d3e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fe fb48 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d3f6:	4622      	mov	r2, r4
 800d3f8:	492c      	ldr	r1, [pc, #176]	; (800d4ac <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800d3fa:	f7ff f875 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 800d3fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d402:	4619      	mov	r1, r3
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f7fe fbe5 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800d40a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fe fb63 	bl	800bada <_ZN12SimpleStringD1Ev>
 800d414:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fe fb5e 	bl	800bada <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800d41e:	f107 0310 	add.w	r3, r7, #16
 800d422:	4618      	mov	r0, r3
 800d424:	f7fe fb38 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 800d428:	4603      	mov	r3, r0
 800d42a:	f103 020a 	add.w	r2, r3, #10
 800d42e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d432:	491b      	ldr	r1, [pc, #108]	; (800d4a0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800d434:	4618      	mov	r0, r3
 800d436:	f7fd ffb3 	bl	800b3a0 <_ZN12SimpleStringC1EPKcj>
 800d43a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fe fb1e 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800d444:	4602      	mov	r2, r0
 800d446:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d44a:	4919      	ldr	r1, [pc, #100]	; (800d4b0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7ff f84b 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 800d452:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d456:	4619      	mov	r1, r3
 800d458:	68f8      	ldr	r0, [r7, #12]
 800d45a:	f7fe fbbb 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800d45e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d462:	4618      	mov	r0, r3
 800d464:	f7fe fb39 	bl	800bada <_ZN12SimpleStringD1Ev>
 800d468:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7fe fb34 	bl	800bada <_ZN12SimpleStringD1Ev>
    return result;
 800d472:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800d474:	f107 0310 	add.w	r3, r7, #16
 800d478:	4618      	mov	r0, r3
 800d47a:	f7fe fb2e 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800d47e:	f107 0318 	add.w	r3, r7, #24
 800d482:	4618      	mov	r0, r3
 800d484:	f7fe fb29 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800d488:	f107 0320 	add.w	r3, r7, #32
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fe fb24 	bl	800bada <_ZN12SimpleStringD1Ev>
    return result;
 800d492:	bf00      	nop
}
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	375c      	adds	r7, #92	; 0x5c
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd90      	pop	{r4, r7, pc}
 800d49c:	08022adc 	.word	0x08022adc
 800d4a0:	08022ae0 	.word	0x08022ae0
 800d4a4:	08022ae4 	.word	0x08022ae4
 800d4a8:	08022b0c 	.word	0x08022b0c
 800d4ac:	08022b10 	.word	0x08022b10
 800d4b0:	08022b18 	.word	0x08022b18

0800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800d4b4:	b590      	push	{r4, r7, lr}
 800d4b6:	b087      	sub	sp, #28
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800d4c0:	491a      	ldr	r1, [pc, #104]	; (800d52c <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7fd ff51 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7fe faf5 	bl	800bab8 <_ZNK12SimpleString7isEmptyEv>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	f083 0301 	eor.w	r3, r3, #1
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d022      	beq.n	800d520 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800d4da:	f107 0310 	add.w	r3, r7, #16
 800d4de:	4914      	ldr	r1, [pc, #80]	; (800d530 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fd ff42 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800d4e6:	f107 0310 	add.w	r3, r7, #16
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7fe f800 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	f083 0301 	eor.w	r3, r3, #1
 800d4f8:	b2dc      	uxtb	r4, r3
 800d4fa:	f107 0310 	add.w	r3, r7, #16
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe faeb 	bl	800bada <_ZN12SimpleStringD1Ev>
 800d504:	2c00      	cmp	r4, #0
 800d506:	d003      	beq.n	800d510 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800d508:	490a      	ldr	r1, [pc, #40]	; (800d534 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f7fe fb74 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800d510:	6879      	ldr	r1, [r7, #4]
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f7fe fb5e 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800d518:	4907      	ldr	r1, [pc, #28]	; (800d538 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f7fe fb6c 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800d520:	bf00      	nop
}
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	371c      	adds	r7, #28
 800d526:	46bd      	mov	sp, r7
 800d528:	bd90      	pop	{r4, r7, pc}
 800d52a:	bf00      	nop
 800d52c:	08022adc 	.word	0x08022adc
 800d530:	08022b20 	.word	0x08022b20
 800d534:	08022b2c 	.word	0x08022b2c
 800d538:	08022b38 	.word	0x08022b38

0800d53c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800d53c:	b590      	push	{r4, r7, lr}
 800d53e:	b089      	sub	sp, #36	; 0x24
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
 800d548:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	68b9      	ldr	r1, [r7, #8]
 800d552:	f7ff fda7 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d556:	4a19      	ldr	r2, [pc, #100]	; (800d5bc <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d562:	68f9      	ldr	r1, [r7, #12]
 800d564:	f107 0310 	add.w	r3, r7, #16
 800d568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff ffa2 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d570:	f107 0310 	add.w	r3, r7, #16
 800d574:	4619      	mov	r1, r3
 800d576:	4620      	mov	r0, r4
 800d578:	f7fd ff63 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800d57c:	f107 0310 	add.w	r3, r7, #16
 800d580:	4618      	mov	r0, r3
 800d582:	f7fe faaa 	bl	800bada <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d58c:	68f9      	ldr	r1, [r7, #12]
 800d58e:	f107 0018 	add.w	r0, r7, #24
 800d592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d596:	f7ff fec7 	bl	800d328 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d59a:	f107 0318 	add.w	r3, r7, #24
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f7fe fb17 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800d5a6:	f107 0318 	add.w	r3, r7, #24
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fe fa95 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3724      	adds	r7, #36	; 0x24
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd90      	pop	{r4, r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	08026294 	.word	0x08026294

0800d5c0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800d5c0:	b5b0      	push	{r4, r5, r7, lr}
 800d5c2:	b094      	sub	sp, #80	; 0x50
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6278      	str	r0, [r7, #36]	; 0x24
 800d5c8:	6239      	str	r1, [r7, #32]
 800d5ca:	61fa      	str	r2, [r7, #28]
 800d5cc:	61bb      	str	r3, [r7, #24]
 800d5ce:	ed87 0b04 	vstr	d0, [r7, #16]
 800d5d2:	ed87 1b02 	vstr	d1, [r7, #8]
 800d5d6:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800d5da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	69fa      	ldr	r2, [r7, #28]
 800d5e0:	6a39      	ldr	r1, [r7, #32]
 800d5e2:	f7ff fd5f 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d5e6:	4a4a      	ldr	r2, [pc, #296]	; (800d710 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d5f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d5f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7ff ff5a 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d604:	4619      	mov	r1, r3
 800d606:	4620      	mov	r0, r4
 800d608:	f7fd ff1b 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800d60c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d610:	4618      	mov	r0, r3
 800d612:	f7fe fa62 	bl	800bada <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800d616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d618:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d61c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800d61e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d622:	2107      	movs	r1, #7
 800d624:	ed97 0b04 	vldr	d0, [r7, #16]
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe ff1b 	bl	800c464 <_Z10StringFromdi>
 800d62e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d632:	2107      	movs	r1, #7
 800d634:	ed97 0b02 	vldr	d0, [r7, #8]
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fe ff13 	bl	800c464 <_Z10StringFromdi>
 800d63e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d642:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d646:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d64a:	4629      	mov	r1, r5
 800d64c:	f7ff fe6c 	bl	800d328 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d654:	4619      	mov	r1, r3
 800d656:	4620      	mov	r0, r4
 800d658:	f7fe fabc 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800d65c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d660:	4618      	mov	r0, r3
 800d662:	f7fe fa3a 	bl	800bada <_ZN12SimpleStringD1Ev>
 800d666:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fe fa35 	bl	800bada <_ZN12SimpleStringD1Ev>
 800d670:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d674:	4618      	mov	r0, r3
 800d676:	f7fe fa30 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	332c      	adds	r3, #44	; 0x2c
 800d67e:	4925      	ldr	r1, [pc, #148]	; (800d714 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800d680:	4618      	mov	r0, r3
 800d682:	f7fe fab9 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800d686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d688:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d68c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d690:	2107      	movs	r1, #7
 800d692:	ed97 0b00 	vldr	d0, [r7]
 800d696:	4618      	mov	r0, r3
 800d698:	f7fe fee4 	bl	800c464 <_Z10StringFromdi>
 800d69c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f7fe fa96 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800d6a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fe fa14 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b4:	332c      	adds	r3, #44	; 0x2c
 800d6b6:	4918      	ldr	r1, [pc, #96]	; (800d718 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fe fa9d 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800d6be:	4b17      	ldr	r3, [pc, #92]	; (800d71c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	ed97 0b04 	vldr	d0, [r7, #16]
 800d6c6:	4798      	blx	r3
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10f      	bne.n	800d6ee <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800d6ce:	4b13      	ldr	r3, [pc, #76]	; (800d71c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	ed97 0b02 	vldr	d0, [r7, #8]
 800d6d6:	4798      	blx	r3
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d107      	bne.n	800d6ee <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800d6de:	4b0f      	ldr	r3, [pc, #60]	; (800d71c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	ed97 0b00 	vldr	d0, [r7]
 800d6e6:	4798      	blx	r3
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d001      	beq.n	800d6f2 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e000      	b.n	800d6f4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d005      	beq.n	800d704 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fa:	332c      	adds	r3, #44	; 0x2c
 800d6fc:	4908      	ldr	r1, [pc, #32]	; (800d720 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fe fa7a 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
}
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	4618      	mov	r0, r3
 800d708:	3750      	adds	r7, #80	; 0x50
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bdb0      	pop	{r4, r5, r7, pc}
 800d70e:	bf00      	nop
 800d710:	08026268 	.word	0x08026268
 800d714:	08022b3c 	.word	0x08022b3c
 800d718:	08022b54 	.word	0x08022b54
 800d71c:	200000e8 	.word	0x200000e8
 800d720:	08022b58 	.word	0x08022b58

0800d724 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800d724:	b590      	push	{r4, r7, lr}
 800d726:	b093      	sub	sp, #76	; 0x4c
 800d728:	af02      	add	r7, sp, #8
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
 800d730:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	68b9      	ldr	r1, [r7, #8]
 800d73a:	f7ff fcb3 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d73e:	4a4f      	ldr	r2, [pc, #316]	; (800d87c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d74a:	68f9      	ldr	r1, [r7, #12]
 800d74c:	f107 0320 	add.w	r3, r7, #32
 800d750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d752:	4618      	mov	r0, r3
 800d754:	f7ff feae 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d758:	f107 0320 	add.w	r3, r7, #32
 800d75c:	4619      	mov	r1, r3
 800d75e:	4620      	mov	r0, r4
 800d760:	f7fd fe6f 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800d764:	f107 0320 	add.w	r3, r7, #32
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fe f9b6 	bl	800bada <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800d76e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d770:	f7fe f986 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800d774:	4602      	mov	r2, r0
 800d776:	f107 0318 	add.w	r3, r7, #24
 800d77a:	4611      	mov	r1, r2
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fe fc47 	bl	800c010 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800d782:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d784:	f7fe f97c 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800d788:	4602      	mov	r2, r0
 800d78a:	f107 0310 	add.w	r3, r7, #16
 800d78e:	4611      	mov	r1, r2
 800d790:	4618      	mov	r0, r3
 800d792:	f7fe fc3d 	bl	800c010 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d79c:	68f9      	ldr	r1, [r7, #12]
 800d79e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d7a2:	f107 0310 	add.w	r3, r7, #16
 800d7a6:	f107 0218 	add.w	r2, r7, #24
 800d7aa:	f7ff fdbd 	bl	800d328 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d7ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	f7fe fa0d 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800d7ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fe f98b 	bl	800bada <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d7cc:	f7fe fae9 	bl	800bda2 <_ZNK12SimpleString2atEj>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	461c      	mov	r4, r3
 800d7d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d7d8:	f7fe fae3 	bl	800bda2 <_ZNK12SimpleString2atEj>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	429c      	cmp	r4, r3
 800d7e0:	bf0c      	ite	eq
 800d7e2:	2301      	moveq	r3, #1
 800d7e4:	2300      	movne	r3, #0
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d003      	beq.n	800d7f4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800d7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7f2:	e7e9      	b.n	800d7c8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d7f8:	f107 0310 	add.w	r3, r7, #16
 800d7fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7fe facf 	bl	800bda2 <_ZNK12SimpleString2atEj>
 800d804:	4603      	mov	r3, r0
 800d806:	461c      	mov	r4, r3
 800d808:	f107 0318 	add.w	r3, r7, #24
 800d80c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fe fac7 	bl	800bda2 <_ZNK12SimpleString2atEj>
 800d814:	4603      	mov	r3, r0
 800d816:	429c      	cmp	r4, r3
 800d818:	bf0c      	ite	eq
 800d81a:	2301      	moveq	r3, #1
 800d81c:	2300      	movne	r3, #0
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	2b00      	cmp	r3, #0
 800d822:	d003      	beq.n	800d82c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800d824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d826:	3301      	adds	r3, #1
 800d828:	63bb      	str	r3, [r7, #56]	; 0x38
 800d82a:	e7e5      	b.n	800d7f8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d832:	68f9      	ldr	r1, [r7, #12]
 800d834:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d838:	f107 0210 	add.w	r2, r7, #16
 800d83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d842:	f7ff fd8b 	bl	800d35c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d84a:	4619      	mov	r1, r3
 800d84c:	4620      	mov	r0, r4
 800d84e:	f7fe f9c1 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800d852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d856:	4618      	mov	r0, r3
 800d858:	f7fe f93f 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800d85c:	f107 0310 	add.w	r3, r7, #16
 800d860:	4618      	mov	r0, r3
 800d862:	f7fe f93a 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800d866:	f107 0318 	add.w	r3, r7, #24
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fe f935 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	4618      	mov	r0, r3
 800d874:	3744      	adds	r7, #68	; 0x44
 800d876:	46bd      	mov	sp, r7
 800d878:	bd90      	pop	{r4, r7, pc}
 800d87a:	bf00      	nop
 800d87c:	0802623c 	.word	0x0802623c

0800d880 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800d880:	b590      	push	{r4, r7, lr}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	68b9      	ldr	r1, [r7, #8]
 800d896:	f7ff fc05 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d89a:	4a1a      	ldr	r2, [pc, #104]	; (800d904 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d8a6:	68f9      	ldr	r1, [r7, #12]
 800d8a8:	f107 0310 	add.w	r3, r7, #16
 800d8ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7ff fe00 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d8b4:	f107 0310 	add.w	r3, r7, #16
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f7fd fdc1 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800d8c0:	f107 0310 	add.w	r3, r7, #16
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fe f908 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	332c      	adds	r3, #44	; 0x2c
 800d8ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fe f97f 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	332c      	adds	r3, #44	; 0x2c
 800d8da:	490b      	ldr	r1, [pc, #44]	; (800d908 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7fe f98b 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	332c      	adds	r3, #44	; 0x2c
 800d8e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7fe f973 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	332c      	adds	r3, #44	; 0x2c
 800d8f2:	4906      	ldr	r1, [pc, #24]	; (800d90c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7fe f97f 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
}
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	371c      	adds	r7, #28
 800d900:	46bd      	mov	sp, r7
 800d902:	bd90      	pop	{r4, r7, pc}
 800d904:	08026210 	.word	0x08026210
 800d908:	08022b7c 	.word	0x08022b7c
 800d90c:	08022b80 	.word	0x08022b80

0800d910 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800d910:	b5b0      	push	{r4, r5, r7, lr}
 800d912:	b088      	sub	sp, #32
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
 800d91c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	68b9      	ldr	r1, [r7, #8]
 800d926:	f7ff fbbd 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d92a:	4a1c      	ldr	r2, [pc, #112]	; (800d99c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d936:	68f9      	ldr	r1, [r7, #12]
 800d938:	f107 0310 	add.w	r3, r7, #16
 800d93c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d93e:	4618      	mov	r0, r3
 800d940:	f7ff fdb8 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d944:	f107 0310 	add.w	r3, r7, #16
 800d948:	4619      	mov	r1, r3
 800d94a:	4620      	mov	r0, r4
 800d94c:	f7fd fd79 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800d950:	f107 0310 	add.w	r3, r7, #16
 800d954:	4618      	mov	r0, r3
 800d956:	f7fe f8c0 	bl	800bada <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d960:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d962:	f7fe f88d 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800d966:	4605      	mov	r5, r0
 800d968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d96a:	f7fe f889 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800d96e:	4603      	mov	r3, r0
 800d970:	f107 0018 	add.w	r0, r7, #24
 800d974:	462a      	mov	r2, r5
 800d976:	490a      	ldr	r1, [pc, #40]	; (800d9a0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800d978:	f7fe fdb6 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 800d97c:	f107 0318 	add.w	r3, r7, #24
 800d980:	4619      	mov	r1, r3
 800d982:	4620      	mov	r0, r4
 800d984:	f7fe f926 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800d988:	f107 0318 	add.w	r3, r7, #24
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fe f8a4 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	4618      	mov	r0, r3
 800d996:	3720      	adds	r7, #32
 800d998:	46bd      	mov	sp, r7
 800d99a:	bdb0      	pop	{r4, r5, r7, pc}
 800d99c:	080261e4 	.word	0x080261e4
 800d9a0:	08022b8c 	.word	0x08022b8c

0800d9a4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800d9a4:	b590      	push	{r4, r7, lr}
 800d9a6:	b087      	sub	sp, #28
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
 800d9b0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	68b9      	ldr	r1, [r7, #8]
 800d9ba:	f7ff fb73 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d9be:	4a1a      	ldr	r2, [pc, #104]	; (800da28 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d9ca:	68f9      	ldr	r1, [r7, #12]
 800d9cc:	f107 0310 	add.w	r3, r7, #16
 800d9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff fd6e 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d9d8:	f107 0310 	add.w	r3, r7, #16
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f7fd fd2f 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800d9e4:	f107 0310 	add.w	r3, r7, #16
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7fe f876 	bl	800bada <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	332c      	adds	r3, #44	; 0x2c
 800d9f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fe f8ed 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	332c      	adds	r3, #44	; 0x2c
 800d9fe:	490b      	ldr	r1, [pc, #44]	; (800da2c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800da00:	4618      	mov	r0, r3
 800da02:	f7fe f8f9 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	332c      	adds	r3, #44	; 0x2c
 800da0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fe f8e1 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	332c      	adds	r3, #44	; 0x2c
 800da16:	4906      	ldr	r1, [pc, #24]	; (800da30 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800da18:	4618      	mov	r0, r3
 800da1a:	f7fe f8ed 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
}
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	4618      	mov	r0, r3
 800da22:	371c      	adds	r7, #28
 800da24:	46bd      	mov	sp, r7
 800da26:	bd90      	pop	{r4, r7, pc}
 800da28:	080261b8 	.word	0x080261b8
 800da2c:	08022b7c 	.word	0x08022b7c
 800da30:	08022b80 	.word	0x08022b80

0800da34 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
 800da40:	603b      	str	r3, [r7, #0]
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	68b9      	ldr	r1, [r7, #8]
 800da4a:	f7ff fb2b 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800da4e:	4a07      	ldr	r2, [pc, #28]	; (800da6c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	332c      	adds	r3, #44	; 0x2c
 800da58:	69b9      	ldr	r1, [r7, #24]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fd fcf1 	bl	800b442 <_ZN12SimpleStringaSERKS_>
}
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	4618      	mov	r0, r3
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	08025e74 	.word	0x08025e74

0800da70 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800da70:	b590      	push	{r4, r7, lr}
 800da72:	b09d      	sub	sp, #116	; 0x74
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
 800da7c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	68b9      	ldr	r1, [r7, #8]
 800da86:	f7ff fb0d 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800da8a:	4a5d      	ldr	r2, [pc, #372]	; (800dc00 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800da96:	68f9      	ldr	r1, [r7, #12]
 800da98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da9c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff fd07 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800daa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800daaa:	4619      	mov	r1, r3
 800daac:	4620      	mov	r0, r4
 800daae:	f7fd fcc8 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800dab2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fe f80f 	bl	800bada <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800dabc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dac0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fe fae1 	bl	800c08c <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800daca:	f107 0320 	add.w	r3, r7, #32
 800dace:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fe fada 	bl	800c08c <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800dad8:	f107 0120 	add.w	r1, r7, #32
 800dadc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dae0:	2220      	movs	r2, #32
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fe f8b6 	bl	800bc54 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800dae8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800daec:	4945      	ldr	r1, [pc, #276]	; (800dc04 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fd fc3b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800daf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800daf8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800dafc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800db00:	4618      	mov	r0, r3
 800db02:	f7fe f84c 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800db06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db0a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fe fbd2 	bl	800c2b8 <_Z30BracketsFormattedHexStringFroml>
 800db14:	f107 0318 	add.w	r3, r7, #24
 800db18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800db1c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe f83c 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800db26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fd ffd5 	bl	800bada <_ZN12SimpleStringD1Ev>
 800db30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800db34:	4618      	mov	r0, r3
 800db36:	f7fd ffd0 	bl	800bada <_ZN12SimpleStringD1Ev>
 800db3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fd ffcb 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800db44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800db48:	492e      	ldr	r1, [pc, #184]	; (800dc04 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fd fc0d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800db50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800db54:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800db58:	f107 0120 	add.w	r1, r7, #32
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fe f81e 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800db62:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800db66:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe fba4 	bl	800c2b8 <_Z30BracketsFormattedHexStringFroml>
 800db70:	f107 0310 	add.w	r3, r7, #16
 800db74:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800db78:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7fe f80e 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800db82:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800db86:	4618      	mov	r0, r3
 800db88:	f7fd ffa7 	bl	800bada <_ZN12SimpleStringD1Ev>
 800db8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800db90:	4618      	mov	r0, r3
 800db92:	f7fd ffa2 	bl	800bada <_ZN12SimpleStringD1Ev>
 800db96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fd ff9d 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dba6:	68f9      	ldr	r1, [r7, #12]
 800dba8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800dbac:	f107 0318 	add.w	r3, r7, #24
 800dbb0:	f107 0210 	add.w	r2, r7, #16
 800dbb4:	f7ff fbb8 	bl	800d328 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800dbb8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f7fe f808 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800dbc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fd ff86 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800dbce:	f107 0310 	add.w	r3, r7, #16
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fd ff81 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800dbd8:	f107 0318 	add.w	r3, r7, #24
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7fd ff7c 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800dbe2:	f107 0320 	add.w	r3, r7, #32
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fd ff77 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800dbec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fd ff72 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3774      	adds	r7, #116	; 0x74
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd90      	pop	{r4, r7, pc}
 800dc00:	0802618c 	.word	0x0802618c
 800dc04:	08022ae0 	.word	0x08022ae0

0800dc08 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800dc08:	b590      	push	{r4, r7, lr}
 800dc0a:	b09d      	sub	sp, #116	; 0x74
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]
 800dc14:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	68b9      	ldr	r1, [r7, #8]
 800dc1e:	f7ff fa41 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800dc22:	4a5d      	ldr	r2, [pc, #372]	; (800dd98 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dc2e:	68f9      	ldr	r1, [r7, #12]
 800dc30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc34:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7ff fc3b 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800dc3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc42:	4619      	mov	r1, r3
 800dc44:	4620      	mov	r0, r4
 800dc46:	f7fd fbfc 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800dc4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fd ff43 	bl	800bada <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800dc54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc58:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7fe fc7d 	bl	800c55c <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800dc62:	f107 0320 	add.w	r3, r7, #32
 800dc66:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe fc76 	bl	800c55c <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800dc70:	f107 0120 	add.w	r1, r7, #32
 800dc74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc78:	2220      	movs	r2, #32
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fd ffea 	bl	800bc54 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800dc80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dc84:	4945      	ldr	r1, [pc, #276]	; (800dd9c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fd fb6f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800dc8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dc90:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800dc94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fd ff80 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800dc9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dca2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fe fb22 	bl	800c2f0 <_Z30BracketsFormattedHexStringFromm>
 800dcac:	f107 0318 	add.w	r3, r7, #24
 800dcb0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dcb4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fd ff70 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800dcbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fd ff09 	bl	800bada <_ZN12SimpleStringD1Ev>
 800dcc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fd ff04 	bl	800bada <_ZN12SimpleStringD1Ev>
 800dcd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fd feff 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800dcdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dce0:	492e      	ldr	r1, [pc, #184]	; (800dd9c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fd fb41 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800dce8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dcec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dcf0:	f107 0120 	add.w	r1, r7, #32
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7fd ff52 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800dcfa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dcfe:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7fe faf4 	bl	800c2f0 <_Z30BracketsFormattedHexStringFromm>
 800dd08:	f107 0310 	add.w	r3, r7, #16
 800dd0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dd10:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7fd ff42 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800dd1a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fd fedb 	bl	800bada <_ZN12SimpleStringD1Ev>
 800dd24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7fd fed6 	bl	800bada <_ZN12SimpleStringD1Ev>
 800dd2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fd fed1 	bl	800bada <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dd3e:	68f9      	ldr	r1, [r7, #12]
 800dd40:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800dd44:	f107 0318 	add.w	r3, r7, #24
 800dd48:	f107 0210 	add.w	r2, r7, #16
 800dd4c:	f7ff faec 	bl	800d328 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800dd50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dd54:	4619      	mov	r1, r3
 800dd56:	4620      	mov	r0, r4
 800dd58:	f7fd ff3c 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800dd5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fd feba 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800dd66:	f107 0310 	add.w	r3, r7, #16
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fd feb5 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800dd70:	f107 0318 	add.w	r3, r7, #24
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7fd feb0 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800dd7a:	f107 0320 	add.w	r3, r7, #32
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fd feab 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800dd84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fd fea6 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	4618      	mov	r0, r3
 800dd92:	3774      	adds	r7, #116	; 0x74
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd90      	pop	{r4, r7, pc}
 800dd98:	08026160 	.word	0x08026160
 800dd9c:	08022ae0 	.word	0x08022ae0

0800dda0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800dda0:	b590      	push	{r4, r7, lr}
 800dda2:	b09d      	sub	sp, #116	; 0x74
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
 800ddac:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	68b9      	ldr	r1, [r7, #8]
 800ddb6:	f7ff f975 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ddba:	4a5f      	ldr	r2, [pc, #380]	; (800df38 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ddc6:	68f9      	ldr	r1, [r7, #12]
 800ddc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ddcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7ff fb6f 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ddd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ddda:	4619      	mov	r1, r3
 800dddc:	4620      	mov	r0, r4
 800ddde:	f7fd fb30 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800dde2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fd fe77 	bl	800bada <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800ddec:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800ddf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ddf4:	4611      	mov	r1, r2
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fe f936 	bl	800c068 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800ddfc:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800de00:	f107 0320 	add.w	r3, r7, #32
 800de04:	4611      	mov	r1, r2
 800de06:	4618      	mov	r0, r3
 800de08:	f7fe f92e 	bl	800c068 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800de0c:	f107 0120 	add.w	r1, r7, #32
 800de10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de14:	2220      	movs	r2, #32
 800de16:	4618      	mov	r0, r3
 800de18:	f7fd ff1c 	bl	800bc54 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800de1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800de20:	4946      	ldr	r1, [pc, #280]	; (800df3c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800de22:	4618      	mov	r0, r3
 800de24:	f7fd faa1 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800de28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800de2c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800de30:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800de34:	4618      	mov	r0, r3
 800de36:	f7fd feb2 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800de3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de3e:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800de42:	4611      	mov	r1, r2
 800de44:	4618      	mov	r0, r3
 800de46:	f7fe fa6f 	bl	800c328 <_Z30BracketsFormattedHexStringFroma>
 800de4a:	f107 0318 	add.w	r3, r7, #24
 800de4e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800de52:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800de56:	4618      	mov	r0, r3
 800de58:	f7fd fea1 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800de5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de60:	4618      	mov	r0, r3
 800de62:	f7fd fe3a 	bl	800bada <_ZN12SimpleStringD1Ev>
 800de66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fd fe35 	bl	800bada <_ZN12SimpleStringD1Ev>
 800de70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800de74:	4618      	mov	r0, r3
 800de76:	f7fd fe30 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800de7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800de7e:	492f      	ldr	r1, [pc, #188]	; (800df3c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800de80:	4618      	mov	r0, r3
 800de82:	f7fd fa72 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800de86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800de8a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800de8e:	f107 0120 	add.w	r1, r7, #32
 800de92:	4618      	mov	r0, r3
 800de94:	f7fd fe83 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800de98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800de9c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800dea0:	4611      	mov	r1, r2
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fe fa40 	bl	800c328 <_Z30BracketsFormattedHexStringFroma>
 800dea8:	f107 0310 	add.w	r3, r7, #16
 800deac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800deb0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fd fe72 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 800deba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fd fe0b 	bl	800bada <_ZN12SimpleStringD1Ev>
 800dec4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fd fe06 	bl	800bada <_ZN12SimpleStringD1Ev>
 800dece:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fd fe01 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dede:	68f9      	ldr	r1, [r7, #12]
 800dee0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800dee4:	f107 0318 	add.w	r3, r7, #24
 800dee8:	f107 0210 	add.w	r2, r7, #16
 800deec:	f7ff fa1c 	bl	800d328 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800def0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800def4:	4619      	mov	r1, r3
 800def6:	4620      	mov	r0, r4
 800def8:	f7fd fe6c 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800defc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800df00:	4618      	mov	r0, r3
 800df02:	f7fd fdea 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800df06:	f107 0310 	add.w	r3, r7, #16
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7fd fde5 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800df10:	f107 0318 	add.w	r3, r7, #24
 800df14:	4618      	mov	r0, r3
 800df16:	f7fd fde0 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800df1a:	f107 0320 	add.w	r3, r7, #32
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fd fddb 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800df24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fd fdd6 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	4618      	mov	r0, r3
 800df32:	3774      	adds	r7, #116	; 0x74
 800df34:	46bd      	mov	sp, r7
 800df36:	bd90      	pop	{r4, r7, pc}
 800df38:	08026134 	.word	0x08026134
 800df3c:	08022ae0 	.word	0x08022ae0

0800df40 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800df40:	b590      	push	{r4, r7, lr}
 800df42:	b093      	sub	sp, #76	; 0x4c
 800df44:	af02      	add	r7, sp, #8
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
 800df4c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	68b9      	ldr	r1, [r7, #8]
 800df56:	f7ff f8a5 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800df5a:	4a4a      	ldr	r2, [pc, #296]	; (800e084 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800df66:	68f9      	ldr	r1, [r7, #12]
 800df68:	f107 0320 	add.w	r3, r7, #32
 800df6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff faa0 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800df74:	f107 0320 	add.w	r3, r7, #32
 800df78:	4619      	mov	r1, r3
 800df7a:	4620      	mov	r0, r4
 800df7c:	f7fd fa61 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800df80:	f107 0320 	add.w	r3, r7, #32
 800df84:	4618      	mov	r0, r3
 800df86:	f7fd fda8 	bl	800bada <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800df8a:	f107 0318 	add.w	r3, r7, #24
 800df8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df90:	4618      	mov	r0, r3
 800df92:	f7fe f83d 	bl	800c010 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800df96:	f107 0310 	add.w	r3, r7, #16
 800df9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fe f837 	bl	800c010 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dfa8:	68f9      	ldr	r1, [r7, #12]
 800dfaa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800dfae:	f107 0310 	add.w	r3, r7, #16
 800dfb2:	f107 0218 	add.w	r2, r7, #24
 800dfb6:	f7ff f9b7 	bl	800d328 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800dfba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f7fd fe07 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800dfc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fd fd85 	bl	800bada <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800dfd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d046      	beq.n	800e064 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800dfd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d043      	beq.n	800e064 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800dfdc:	2300      	movs	r3, #0
 800dfde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dfe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe4:	4413      	add	r3, r2
 800dfe6:	781a      	ldrb	r2, [r3, #0]
 800dfe8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dfea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfec:	440b      	add	r3, r1
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d103      	bne.n	800dffc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800dff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff6:	3301      	adds	r3, #1
 800dff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dffa:	e7f1      	b.n	800dfe0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800dffc:	2300      	movs	r3, #0
 800dffe:	63bb      	str	r3, [r7, #56]	; 0x38
 800e000:	f107 0310 	add.w	r3, r7, #16
 800e004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e006:	4618      	mov	r0, r3
 800e008:	f7fd fecb 	bl	800bda2 <_ZNK12SimpleString2atEj>
 800e00c:	4603      	mov	r3, r0
 800e00e:	461c      	mov	r4, r3
 800e010:	f107 0318 	add.w	r3, r7, #24
 800e014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e016:	4618      	mov	r0, r3
 800e018:	f7fd fec3 	bl	800bda2 <_ZNK12SimpleString2atEj>
 800e01c:	4603      	mov	r3, r0
 800e01e:	429c      	cmp	r4, r3
 800e020:	bf0c      	ite	eq
 800e022:	2301      	moveq	r3, #1
 800e024:	2300      	movne	r3, #0
 800e026:	b2db      	uxtb	r3, r3
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d003      	beq.n	800e034 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800e02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02e:	3301      	adds	r3, #1
 800e030:	63bb      	str	r3, [r7, #56]	; 0x38
 800e032:	e7e5      	b.n	800e000 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e03a:	68f9      	ldr	r1, [r7, #12]
 800e03c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e040:	f107 0210 	add.w	r2, r7, #16
 800e044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e046:	9300      	str	r3, [sp, #0]
 800e048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04a:	f7ff f987 	bl	800d35c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800e04e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e052:	4619      	mov	r1, r3
 800e054:	4620      	mov	r0, r4
 800e056:	f7fd fdbd 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800e05a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fd fd3b 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800e064:	f107 0310 	add.w	r3, r7, #16
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fd fd36 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800e06e:	f107 0318 	add.w	r3, r7, #24
 800e072:	4618      	mov	r0, r3
 800e074:	f7fd fd31 	bl	800bada <_ZN12SimpleStringD1Ev>
    }
}
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	4618      	mov	r0, r3
 800e07c:	3744      	adds	r7, #68	; 0x44
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd90      	pop	{r4, r7, pc}
 800e082:	bf00      	nop
 800e084:	08026108 	.word	0x08026108

0800e088 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800e088:	b590      	push	{r4, r7, lr}
 800e08a:	b093      	sub	sp, #76	; 0x4c
 800e08c:	af02      	add	r7, sp, #8
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
 800e094:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	68b9      	ldr	r1, [r7, #8]
 800e09e:	f7ff f801 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e0a2:	4a55      	ldr	r2, [pc, #340]	; (800e1f8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e0ae:	68f9      	ldr	r1, [r7, #12]
 800e0b0:	f107 0320 	add.w	r3, r7, #32
 800e0b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7ff f9fc 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e0bc:	f107 0320 	add.w	r3, r7, #32
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f7fd f9bd 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800e0c8:	f107 0320 	add.w	r3, r7, #32
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fd fd04 	bl	800bada <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800e0d2:	f107 0318 	add.w	r3, r7, #24
 800e0d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fd ff99 	bl	800c010 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800e0de:	f107 0310 	add.w	r3, r7, #16
 800e0e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fd ff93 	bl	800c010 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e0f0:	68f9      	ldr	r1, [r7, #12]
 800e0f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e0f6:	f107 0310 	add.w	r3, r7, #16
 800e0fa:	f107 0218 	add.w	r2, r7, #24
 800e0fe:	f7ff f913 	bl	800d328 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e106:	4619      	mov	r1, r3
 800e108:	4620      	mov	r0, r4
 800e10a:	f7fd fd63 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800e10e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e112:	4618      	mov	r0, r3
 800e114:	f7fd fce1 	bl	800bada <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800e118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d05c      	beq.n	800e1d8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800e11e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e120:	2b00      	cmp	r3, #0
 800e122:	d059      	beq.n	800e1d8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800e124:	2300      	movs	r3, #0
 800e126:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e12c:	4413      	add	r3, r2
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	4618      	mov	r0, r3
 800e132:	f7fd f824 	bl	800b17e <_ZN12SimpleString7ToLowerEc>
 800e136:	4603      	mov	r3, r0
 800e138:	461c      	mov	r4, r3
 800e13a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e13e:	4413      	add	r3, r2
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	4618      	mov	r0, r3
 800e144:	f7fd f81b 	bl	800b17e <_ZN12SimpleString7ToLowerEc>
 800e148:	4603      	mov	r3, r0
 800e14a:	429c      	cmp	r4, r3
 800e14c:	bf0c      	ite	eq
 800e14e:	2301      	moveq	r3, #1
 800e150:	2300      	movne	r3, #0
 800e152:	b2db      	uxtb	r3, r3
 800e154:	2b00      	cmp	r3, #0
 800e156:	d003      	beq.n	800e160 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800e158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e15a:	3301      	adds	r3, #1
 800e15c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e15e:	e7e3      	b.n	800e128 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800e160:	2300      	movs	r3, #0
 800e162:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800e164:	f107 0310 	add.w	r3, r7, #16
 800e168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fd fe19 	bl	800bda2 <_ZNK12SimpleString2atEj>
 800e170:	4603      	mov	r3, r0
 800e172:	4618      	mov	r0, r3
 800e174:	f7fd f803 	bl	800b17e <_ZN12SimpleString7ToLowerEc>
 800e178:	4603      	mov	r3, r0
 800e17a:	461c      	mov	r4, r3
 800e17c:	f107 0318 	add.w	r3, r7, #24
 800e180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e182:	4618      	mov	r0, r3
 800e184:	f7fd fe0d 	bl	800bda2 <_ZNK12SimpleString2atEj>
 800e188:	4603      	mov	r3, r0
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fc fff7 	bl	800b17e <_ZN12SimpleString7ToLowerEc>
 800e190:	4603      	mov	r3, r0
 800e192:	429c      	cmp	r4, r3
 800e194:	bf0c      	ite	eq
 800e196:	2301      	moveq	r3, #1
 800e198:	2300      	movne	r3, #0
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d003      	beq.n	800e1a8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1a6:	e7dd      	b.n	800e164 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e1ae:	68f9      	ldr	r1, [r7, #12]
 800e1b0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e1b4:	f107 0210 	add.w	r2, r7, #16
 800e1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ba:	9300      	str	r3, [sp, #0]
 800e1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1be:	f7ff f8cd 	bl	800d35c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800e1c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	f7fd fd03 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800e1ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fd fc81 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800e1d8:	f107 0310 	add.w	r3, r7, #16
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7fd fc7c 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800e1e2:	f107 0318 	add.w	r3, r7, #24
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7fd fc77 	bl	800bada <_ZN12SimpleStringD1Ev>
    }
}
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3744      	adds	r7, #68	; 0x44
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd90      	pop	{r4, r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	080260dc 	.word	0x080260dc

0800e1fc <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800e1fc:	b5b0      	push	{r4, r5, r7, lr}
 800e1fe:	b092      	sub	sp, #72	; 0x48
 800e200:	af02      	add	r7, sp, #8
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	607a      	str	r2, [r7, #4]
 800e208:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	68b9      	ldr	r1, [r7, #8]
 800e212:	f7fe ff47 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e216:	4a40      	ldr	r2, [pc, #256]	; (800e318 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e222:	68f9      	ldr	r1, [r7, #12]
 800e224:	f107 031c 	add.w	r3, r7, #28
 800e228:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7ff f942 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e230:	f107 031c 	add.w	r3, r7, #28
 800e234:	4619      	mov	r1, r3
 800e236:	4620      	mov	r0, r4
 800e238:	f7fd f903 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800e23c:	f107 031c 	add.w	r3, r7, #28
 800e240:	4618      	mov	r0, r3
 800e242:	f7fd fc4a 	bl	800bada <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800e246:	f107 0314 	add.w	r3, r7, #20
 800e24a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e24c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fe fa4c 	bl	800c6ec <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e25a:	68fd      	ldr	r5, [r7, #12]
 800e25c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e262:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e264:	4618      	mov	r0, r3
 800e266:	f7fe fa41 	bl	800c6ec <_Z22StringFromBinaryOrNullPKhj>
 800e26a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e26e:	f107 0314 	add.w	r3, r7, #20
 800e272:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e276:	4629      	mov	r1, r5
 800e278:	f7ff f856 	bl	800d328 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e27c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e280:	4619      	mov	r1, r3
 800e282:	4620      	mov	r0, r4
 800e284:	f7fd fca6 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800e288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fd fc24 	bl	800bada <_ZN12SimpleStringD1Ev>
 800e292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e296:	4618      	mov	r0, r3
 800e298:	f7fd fc1f 	bl	800bada <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800e29c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d02f      	beq.n	800e302 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800e2a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d02c      	beq.n	800e302 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b0:	4413      	add	r3, r2
 800e2b2:	781a      	ldrb	r2, [r3, #0]
 800e2b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b8:	440b      	add	r3, r1
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d103      	bne.n	800e2c8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800e2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2c6:	e7f1      	b.n	800e2ac <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e2ce:	68f9      	ldr	r1, [r7, #12]
 800e2d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	4413      	add	r3, r2
 800e2d8:	1c5d      	adds	r5, r3, #1
 800e2da:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800e2de:	f107 0214 	add.w	r2, r7, #20
 800e2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	462b      	mov	r3, r5
 800e2e8:	f7ff f838 	bl	800d35c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800e2ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f7fd fc6e 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800e2f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7fd fbec 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800e302:	f107 0314 	add.w	r3, r7, #20
 800e306:	4618      	mov	r0, r3
 800e308:	f7fd fbe7 	bl	800bada <_ZN12SimpleStringD1Ev>
	}
}
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	4618      	mov	r0, r3
 800e310:	3740      	adds	r7, #64	; 0x40
 800e312:	46bd      	mov	sp, r7
 800e314:	bdb0      	pop	{r4, r5, r7, pc}
 800e316:	bf00      	nop
 800e318:	080260b0 	.word	0x080260b0

0800e31c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800e31c:	b5b0      	push	{r4, r5, r7, lr}
 800e31e:	b08c      	sub	sp, #48	; 0x30
 800e320:	af00      	add	r7, sp, #0
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	607a      	str	r2, [r7, #4]
 800e328:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800e32a:	68f8      	ldr	r0, [r7, #12]
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	68b9      	ldr	r1, [r7, #8]
 800e332:	f7fe feb7 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e336:	4a26      	ldr	r2, [pc, #152]	; (800e3d0 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e342:	68f9      	ldr	r1, [r7, #12]
 800e344:	f107 0310 	add.w	r3, r7, #16
 800e348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7ff f8b2 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e350:	f107 0310 	add.w	r3, r7, #16
 800e354:	4619      	mov	r1, r3
 800e356:	4620      	mov	r0, r4
 800e358:	f7fd f873 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800e35c:	f107 0310 	add.w	r3, r7, #16
 800e360:	4618      	mov	r0, r3
 800e362:	f7fd fbba 	bl	800bada <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e36c:	68fd      	ldr	r5, [r7, #12]
 800e36e:	f107 0020 	add.w	r0, r7, #32
 800e372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e376:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e378:	f7fe fa24 	bl	800c7c4 <_Z20StringFromMaskedBitsmmj>
 800e37c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e384:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e386:	f7fe fa1d 	bl	800c7c4 <_Z20StringFromMaskedBitsmmj>
 800e38a:	f107 0018 	add.w	r0, r7, #24
 800e38e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e392:	f107 0220 	add.w	r2, r7, #32
 800e396:	4629      	mov	r1, r5
 800e398:	f7fe ffc6 	bl	800d328 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e39c:	f107 0318 	add.w	r3, r7, #24
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f7fd fc16 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800e3a8:	f107 0318 	add.w	r3, r7, #24
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fd fb94 	bl	800bada <_ZN12SimpleStringD1Ev>
 800e3b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fd fb8f 	bl	800bada <_ZN12SimpleStringD1Ev>
 800e3bc:	f107 0320 	add.w	r3, r7, #32
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fd fb8a 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3730      	adds	r7, #48	; 0x30
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bdb0      	pop	{r4, r5, r7, pc}
 800e3d0:	08026084 	.word	0x08026084

0800e3d4 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800e3d4:	b590      	push	{r4, r7, lr}
 800e3d6:	b089      	sub	sp, #36	; 0x24
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	607a      	str	r2, [r7, #4]
 800e3e0:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	68b9      	ldr	r1, [r7, #8]
 800e3ea:	f7fe fe5b 	bl	800d0a4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e3ee:	4a1a      	ldr	r2, [pc, #104]	; (800e458 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e3fa:	68f9      	ldr	r1, [r7, #12]
 800e3fc:	f107 0310 	add.w	r3, r7, #16
 800e400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e402:	4618      	mov	r0, r3
 800e404:	f7ff f856 	bl	800d4b4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e408:	f107 0310 	add.w	r3, r7, #16
 800e40c:	4619      	mov	r1, r3
 800e40e:	4620      	mov	r0, r4
 800e410:	f7fd f817 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 800e414:	f107 0310 	add.w	r3, r7, #16
 800e418:	4618      	mov	r0, r3
 800e41a:	f7fd fb5e 	bl	800bada <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e426:	f7fd fb2b 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800e42a:	4602      	mov	r2, r0
 800e42c:	f107 0318 	add.w	r3, r7, #24
 800e430:	490a      	ldr	r1, [pc, #40]	; (800e45c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800e432:	4618      	mov	r0, r3
 800e434:	f7fe f858 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 800e438:	f107 0318 	add.w	r3, r7, #24
 800e43c:	4619      	mov	r1, r3
 800e43e:	4620      	mov	r0, r4
 800e440:	f7fd fbc8 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 800e444:	f107 0318 	add.w	r3, r7, #24
 800e448:	4618      	mov	r0, r3
 800e44a:	f7fd fb46 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	4618      	mov	r0, r3
 800e452:	3724      	adds	r7, #36	; 0x24
 800e454:	46bd      	mov	sp, r7
 800e456:	bd90      	pop	{r4, r7, pc}
 800e458:	08026058 	.word	0x08026058
 800e45c:	08022bb0 	.word	0x08022bb0

0800e460 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	4a05      	ldr	r2, [pc, #20]	; (800e480 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	601a      	str	r2, [r3, #0]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	4618      	mov	r0, r3
 800e472:	f7fe fe99 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	4618      	mov	r0, r3
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	08026058 	.word	0x08026058

0800e484 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7ff ffe7 	bl	800e460 <_ZN25FeatureUnsupportedFailureD1Ev>
 800e492:	2134      	movs	r1, #52	; 0x34
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f7fa fbb9 	bl	8008c0c <_ZdlPvj>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4618      	mov	r0, r3
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	4a05      	ldr	r2, [pc, #20]	; (800e4c4 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	601a      	str	r2, [r3, #0]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fe fe77 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	08026084 	.word	0x08026084

0800e4c8 <_ZN16BitsEqualFailureD0Ev>:
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f7ff ffe7 	bl	800e4a4 <_ZN16BitsEqualFailureD1Ev>
 800e4d6:	2134      	movs	r1, #52	; 0x34
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f7fa fb97 	bl	8008c0c <_ZdlPvj>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	4a05      	ldr	r2, [pc, #20]	; (800e508 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	601a      	str	r2, [r3, #0]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fe fe55 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4618      	mov	r0, r3
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	080260b0 	.word	0x080260b0

0800e50c <_ZN18BinaryEqualFailureD0Ev>:
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7ff ffe7 	bl	800e4e8 <_ZN18BinaryEqualFailureD1Ev>
 800e51a:	2134      	movs	r1, #52	; 0x34
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f7fa fb75 	bl	8008c0c <_ZdlPvj>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4618      	mov	r0, r3
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	4a05      	ldr	r2, [pc, #20]	; (800e54c <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	601a      	str	r2, [r3, #0]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7fe fe33 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4618      	mov	r0, r3
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	080260dc 	.word	0x080260dc

0800e550 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f7ff ffe7 	bl	800e52c <_ZN24StringEqualNoCaseFailureD1Ev>
 800e55e:	2134      	movs	r1, #52	; 0x34
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7fa fb53 	bl	8008c0c <_ZdlPvj>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	4618      	mov	r0, r3
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	4a05      	ldr	r2, [pc, #20]	; (800e590 <_ZN18StringEqualFailureD1Ev+0x20>)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	601a      	str	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4618      	mov	r0, r3
 800e582:	f7fe fe11 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4618      	mov	r0, r3
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	08026108 	.word	0x08026108

0800e594 <_ZN18StringEqualFailureD0Ev>:
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7ff ffe7 	bl	800e570 <_ZN18StringEqualFailureD1Ev>
 800e5a2:	2134      	movs	r1, #52	; 0x34
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7fa fb31 	bl	8008c0c <_ZdlPvj>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	4a05      	ldr	r2, [pc, #20]	; (800e5d4 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	601a      	str	r2, [r3, #0]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fe fdef 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3708      	adds	r7, #8
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	08026134 	.word	0x08026134

0800e5d8 <_ZN23SignedBytesEqualFailureD0Ev>:
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7ff ffe7 	bl	800e5b4 <_ZN23SignedBytesEqualFailureD1Ev>
 800e5e6:	2134      	movs	r1, #52	; 0x34
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7fa fb0f 	bl	8008c0c <_ZdlPvj>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	4a05      	ldr	r2, [pc, #20]	; (800e618 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	601a      	str	r2, [r3, #0]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	4618      	mov	r0, r3
 800e60a:	f7fe fdcd 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	4618      	mov	r0, r3
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	08026160 	.word	0x08026160

0800e61c <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f7ff ffe7 	bl	800e5f8 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800e62a:	2134      	movs	r1, #52	; 0x34
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f7fa faed 	bl	8008c0c <_ZdlPvj>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4618      	mov	r0, r3
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	4a05      	ldr	r2, [pc, #20]	; (800e65c <_ZN17LongsEqualFailureD1Ev+0x20>)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	601a      	str	r2, [r3, #0]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7fe fdab 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4618      	mov	r0, r3
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	0802618c 	.word	0x0802618c

0800e660 <_ZN17LongsEqualFailureD0Ev>:
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7ff ffe7 	bl	800e63c <_ZN17LongsEqualFailureD1Ev>
 800e66e:	2134      	movs	r1, #52	; 0x34
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7fa facb 	bl	8008c0c <_ZdlPvj>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	4618      	mov	r0, r3
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	4a05      	ldr	r2, [pc, #20]	; (800e6a0 <_ZN12CheckFailureD1Ev+0x20>)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	601a      	str	r2, [r3, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4618      	mov	r0, r3
 800e692:	f7fe fd89 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	4618      	mov	r0, r3
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	080261b8 	.word	0x080261b8

0800e6a4 <_ZN12CheckFailureD0Ev>:
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7ff ffe7 	bl	800e680 <_ZN12CheckFailureD1Ev>
 800e6b2:	2134      	movs	r1, #52	; 0x34
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7fa faa9 	bl	8008c0c <_ZdlPvj>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	4a05      	ldr	r2, [pc, #20]	; (800e6e4 <_ZN15ContainsFailureD1Ev+0x20>)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	601a      	str	r2, [r3, #0]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fe fd67 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	080261e4 	.word	0x080261e4

0800e6e8 <_ZN15ContainsFailureD0Ev>:
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7ff ffe7 	bl	800e6c4 <_ZN15ContainsFailureD1Ev>
 800e6f6:	2134      	movs	r1, #52	; 0x34
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f7fa fa87 	bl	8008c0c <_ZdlPvj>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4618      	mov	r0, r3
 800e702:	3708      	adds	r7, #8
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	4a05      	ldr	r2, [pc, #20]	; (800e728 <_ZN17ComparisonFailureD1Ev+0x20>)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	601a      	str	r2, [r3, #0]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4618      	mov	r0, r3
 800e71a:	f7fe fd45 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	4618      	mov	r0, r3
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	08026210 	.word	0x08026210

0800e72c <_ZN17ComparisonFailureD0Ev>:
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7ff ffe7 	bl	800e708 <_ZN17ComparisonFailureD1Ev>
 800e73a:	2134      	movs	r1, #52	; 0x34
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7fa fa65 	bl	8008c0c <_ZdlPvj>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	4618      	mov	r0, r3
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	4a05      	ldr	r2, [pc, #20]	; (800e76c <_ZN17CheckEqualFailureD1Ev+0x20>)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	601a      	str	r2, [r3, #0]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fe fd23 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	4618      	mov	r0, r3
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	0802623c 	.word	0x0802623c

0800e770 <_ZN17CheckEqualFailureD0Ev>:
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7ff ffe7 	bl	800e74c <_ZN17CheckEqualFailureD1Ev>
 800e77e:	2134      	movs	r1, #52	; 0x34
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7fa fa43 	bl	8008c0c <_ZdlPvj>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4618      	mov	r0, r3
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	4a05      	ldr	r2, [pc, #20]	; (800e7b0 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fe fd01 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	08026268 	.word	0x08026268

0800e7b4 <_ZN19DoublesEqualFailureD0Ev>:
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7ff ffe7 	bl	800e790 <_ZN19DoublesEqualFailureD1Ev>
 800e7c2:	2134      	movs	r1, #52	; 0x34
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7fa fa21 	bl	8008c0c <_ZdlPvj>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3708      	adds	r7, #8
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	4a05      	ldr	r2, [pc, #20]	; (800e7f4 <_ZN13EqualsFailureD1Ev+0x20>)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	601a      	str	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fe fcdf 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	08026294 	.word	0x08026294

0800e7f8 <_ZN13EqualsFailureD0Ev>:
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f7ff ffe7 	bl	800e7d4 <_ZN13EqualsFailureD1Ev>
 800e806:	2134      	movs	r1, #52	; 0x34
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7fa f9ff 	bl	8008c0c <_ZdlPvj>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4618      	mov	r0, r3
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800e818:	b5b0      	push	{r4, r5, r7, lr}
 800e81a:	b086      	sub	sp, #24
 800e81c:	af02      	add	r7, sp, #8
 800e81e:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800e820:	4b0d      	ldr	r3, [pc, #52]	; (800e858 <_ZL13checkedMallocj+0x40>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	4798      	blx	r3
 800e828:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d10e      	bne.n	800e84e <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800e830:	f004 f97e 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 800e834:	4604      	mov	r4, r0
 800e836:	6823      	ldr	r3, [r4, #0]
 800e838:	3368      	adds	r3, #104	; 0x68
 800e83a:	681d      	ldr	r5, [r3, #0]
 800e83c:	f004 f988 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800e840:	4603      	mov	r3, r0
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	2325      	movs	r3, #37	; 0x25
 800e846:	4a05      	ldr	r2, [pc, #20]	; (800e85c <_ZL13checkedMallocj+0x44>)
 800e848:	4905      	ldr	r1, [pc, #20]	; (800e860 <_ZL13checkedMallocj+0x48>)
 800e84a:	4620      	mov	r0, r4
 800e84c:	47a8      	blx	r5
    return mem;
 800e84e:	68fb      	ldr	r3, [r7, #12]
}
 800e850:	4618      	mov	r0, r3
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bdb0      	pop	{r4, r5, r7, pc}
 800e858:	200000c8 	.word	0x200000c8
 800e85c:	08022c24 	.word	0x08022c24
 800e860:	08022c44 	.word	0x08022c44

0800e864 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800e864:	b580      	push	{r7, lr}
 800e866:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800e868:	4b04      	ldr	r3, [pc, #16]	; (800e87c <_Z22getCurrentNewAllocatorv+0x18>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d101      	bne.n	800e874 <_Z22getCurrentNewAllocatorv+0x10>
 800e870:	f000 f806 	bl	800e880 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800e874:	4b01      	ldr	r3, [pc, #4]	; (800e87c <_Z22getCurrentNewAllocatorv+0x18>)
 800e876:	681b      	ldr	r3, [r3, #0]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	20000780 	.word	0x20000780

0800e880 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800e880:	b580      	push	{r7, lr}
 800e882:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800e884:	f000 f810 	bl	800e8a8 <_Z19defaultNewAllocatorv>
 800e888:	4603      	mov	r3, r0
 800e88a:	4a02      	ldr	r2, [pc, #8]	; (800e894 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800e88c:	6013      	str	r3, [r2, #0]
}
 800e88e:	bf00      	nop
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	20000780 	.word	0x20000780

0800e898 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800e898:	b580      	push	{r7, lr}
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	4801      	ldr	r0, [pc, #4]	; (800e8a4 <__tcf_0+0xc>)
 800e89e:	f000 f909 	bl	800eab4 <_ZN19TestMemoryAllocatorD1Ev>
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	2000078c 	.word	0x2000078c

0800e8a8 <_Z19defaultNewAllocatorv>:
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800e8ac:	4b13      	ldr	r3, [pc, #76]	; (800e8fc <_Z19defaultNewAllocatorv+0x54>)
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	f3bf 8f5b 	dmb	ish
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	f003 0301 	and.w	r3, r3, #1
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	bf0c      	ite	eq
 800e8be:	2301      	moveq	r3, #1
 800e8c0:	2300      	movne	r3, #0
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d016      	beq.n	800e8f6 <_Z19defaultNewAllocatorv+0x4e>
 800e8c8:	480c      	ldr	r0, [pc, #48]	; (800e8fc <_Z19defaultNewAllocatorv+0x54>)
 800e8ca:	f00f fc0d 	bl	801e0e8 <__cxa_guard_acquire>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	bf14      	ite	ne
 800e8d4:	2301      	movne	r3, #1
 800e8d6:	2300      	moveq	r3, #0
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00b      	beq.n	800e8f6 <_Z19defaultNewAllocatorv+0x4e>
 800e8de:	4b08      	ldr	r3, [pc, #32]	; (800e900 <_Z19defaultNewAllocatorv+0x58>)
 800e8e0:	4a08      	ldr	r2, [pc, #32]	; (800e904 <_Z19defaultNewAllocatorv+0x5c>)
 800e8e2:	4909      	ldr	r1, [pc, #36]	; (800e908 <_Z19defaultNewAllocatorv+0x60>)
 800e8e4:	4809      	ldr	r0, [pc, #36]	; (800e90c <_Z19defaultNewAllocatorv+0x64>)
 800e8e6:	f000 f8c5 	bl	800ea74 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e8ea:	4804      	ldr	r0, [pc, #16]	; (800e8fc <_Z19defaultNewAllocatorv+0x54>)
 800e8ec:	f00f fc08 	bl	801e100 <__cxa_guard_release>
 800e8f0:	4807      	ldr	r0, [pc, #28]	; (800e910 <_Z19defaultNewAllocatorv+0x68>)
 800e8f2:	f00f fc2c 	bl	801e14e <atexit>
    return &allocator;
 800e8f6:	4b05      	ldr	r3, [pc, #20]	; (800e90c <_Z19defaultNewAllocatorv+0x64>)
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	200007a0 	.word	0x200007a0
 800e900:	08022c64 	.word	0x08022c64
 800e904:	08022c6c 	.word	0x08022c6c
 800e908:	08022c70 	.word	0x08022c70
 800e90c:	2000078c 	.word	0x2000078c
 800e910:	0800e899 	.word	0x0800e899

0800e914 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800e914:	b580      	push	{r7, lr}
 800e916:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800e918:	4b04      	ldr	r3, [pc, #16]	; (800e92c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d101      	bne.n	800e924 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800e920:	f000 f806 	bl	800e930 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800e924:	4b01      	ldr	r3, [pc, #4]	; (800e92c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800e926:	681b      	ldr	r3, [r3, #0]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	20000784 	.word	0x20000784

0800e930 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800e930:	b580      	push	{r7, lr}
 800e932:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800e934:	f000 f810 	bl	800e958 <_Z24defaultNewArrayAllocatorv>
 800e938:	4603      	mov	r3, r0
 800e93a:	4a02      	ldr	r2, [pc, #8]	; (800e944 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800e93c:	6013      	str	r3, [r2, #0]
}
 800e93e:	bf00      	nop
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	20000784 	.word	0x20000784

0800e948 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800e948:	b580      	push	{r7, lr}
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	4801      	ldr	r0, [pc, #4]	; (800e954 <__tcf_1+0xc>)
 800e94e:	f000 f8b1 	bl	800eab4 <_ZN19TestMemoryAllocatorD1Ev>
 800e952:	bd80      	pop	{r7, pc}
 800e954:	200007a4 	.word	0x200007a4

0800e958 <_Z24defaultNewArrayAllocatorv>:
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800e95c:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <_Z24defaultNewArrayAllocatorv+0x54>)
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	f3bf 8f5b 	dmb	ish
 800e964:	b2db      	uxtb	r3, r3
 800e966:	f003 0301 	and.w	r3, r3, #1
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	bf0c      	ite	eq
 800e96e:	2301      	moveq	r3, #1
 800e970:	2300      	movne	r3, #0
 800e972:	b2db      	uxtb	r3, r3
 800e974:	2b00      	cmp	r3, #0
 800e976:	d016      	beq.n	800e9a6 <_Z24defaultNewArrayAllocatorv+0x4e>
 800e978:	480c      	ldr	r0, [pc, #48]	; (800e9ac <_Z24defaultNewArrayAllocatorv+0x54>)
 800e97a:	f00f fbb5 	bl	801e0e8 <__cxa_guard_acquire>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	bf14      	ite	ne
 800e984:	2301      	movne	r3, #1
 800e986:	2300      	moveq	r3, #0
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00b      	beq.n	800e9a6 <_Z24defaultNewArrayAllocatorv+0x4e>
 800e98e:	4b08      	ldr	r3, [pc, #32]	; (800e9b0 <_Z24defaultNewArrayAllocatorv+0x58>)
 800e990:	4a08      	ldr	r2, [pc, #32]	; (800e9b4 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800e992:	4909      	ldr	r1, [pc, #36]	; (800e9b8 <_Z24defaultNewArrayAllocatorv+0x60>)
 800e994:	4809      	ldr	r0, [pc, #36]	; (800e9bc <_Z24defaultNewArrayAllocatorv+0x64>)
 800e996:	f000 f86d 	bl	800ea74 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e99a:	4804      	ldr	r0, [pc, #16]	; (800e9ac <_Z24defaultNewArrayAllocatorv+0x54>)
 800e99c:	f00f fbb0 	bl	801e100 <__cxa_guard_release>
 800e9a0:	4807      	ldr	r0, [pc, #28]	; (800e9c0 <_Z24defaultNewArrayAllocatorv+0x68>)
 800e9a2:	f00f fbd4 	bl	801e14e <atexit>
    return &allocator;
 800e9a6:	4b05      	ldr	r3, [pc, #20]	; (800e9bc <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	200007b8 	.word	0x200007b8
 800e9b0:	08022c88 	.word	0x08022c88
 800e9b4:	08022c94 	.word	0x08022c94
 800e9b8:	08022c9c 	.word	0x08022c9c
 800e9bc:	200007a4 	.word	0x200007a4
 800e9c0:	0800e949 	.word	0x0800e949

0800e9c4 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800e9c8:	4b04      	ldr	r3, [pc, #16]	; (800e9dc <_Z25getCurrentMallocAllocatorv+0x18>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d101      	bne.n	800e9d4 <_Z25getCurrentMallocAllocatorv+0x10>
 800e9d0:	f000 f806 	bl	800e9e0 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800e9d4:	4b01      	ldr	r3, [pc, #4]	; (800e9dc <_Z25getCurrentMallocAllocatorv+0x18>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	20000788 	.word	0x20000788

0800e9e0 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800e9e4:	f000 f810 	bl	800ea08 <_Z22defaultMallocAllocatorv>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	4a02      	ldr	r2, [pc, #8]	; (800e9f4 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800e9ec:	6013      	str	r3, [r2, #0]
}
 800e9ee:	bf00      	nop
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	20000788 	.word	0x20000788

0800e9f8 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	4801      	ldr	r0, [pc, #4]	; (800ea04 <__tcf_2+0xc>)
 800e9fe:	f000 f859 	bl	800eab4 <_ZN19TestMemoryAllocatorD1Ev>
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	200007bc 	.word	0x200007bc

0800ea08 <_Z22defaultMallocAllocatorv>:
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800ea0c:	4b13      	ldr	r3, [pc, #76]	; (800ea5c <_Z22defaultMallocAllocatorv+0x54>)
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	f3bf 8f5b 	dmb	ish
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	f003 0301 	and.w	r3, r3, #1
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	bf0c      	ite	eq
 800ea1e:	2301      	moveq	r3, #1
 800ea20:	2300      	movne	r3, #0
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d016      	beq.n	800ea56 <_Z22defaultMallocAllocatorv+0x4e>
 800ea28:	480c      	ldr	r0, [pc, #48]	; (800ea5c <_Z22defaultMallocAllocatorv+0x54>)
 800ea2a:	f00f fb5d 	bl	801e0e8 <__cxa_guard_acquire>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	bf14      	ite	ne
 800ea34:	2301      	movne	r3, #1
 800ea36:	2300      	moveq	r3, #0
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00b      	beq.n	800ea56 <_Z22defaultMallocAllocatorv+0x4e>
 800ea3e:	4b08      	ldr	r3, [pc, #32]	; (800ea60 <_Z22defaultMallocAllocatorv+0x58>)
 800ea40:	4a08      	ldr	r2, [pc, #32]	; (800ea64 <_Z22defaultMallocAllocatorv+0x5c>)
 800ea42:	4909      	ldr	r1, [pc, #36]	; (800ea68 <_Z22defaultMallocAllocatorv+0x60>)
 800ea44:	4809      	ldr	r0, [pc, #36]	; (800ea6c <_Z22defaultMallocAllocatorv+0x64>)
 800ea46:	f000 f815 	bl	800ea74 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ea4a:	4804      	ldr	r0, [pc, #16]	; (800ea5c <_Z22defaultMallocAllocatorv+0x54>)
 800ea4c:	f00f fb58 	bl	801e100 <__cxa_guard_release>
 800ea50:	4807      	ldr	r0, [pc, #28]	; (800ea70 <_Z22defaultMallocAllocatorv+0x68>)
 800ea52:	f00f fb7c 	bl	801e14e <atexit>
    return &allocator;
 800ea56:	4b05      	ldr	r3, [pc, #20]	; (800ea6c <_Z22defaultMallocAllocatorv+0x64>)
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	200007d0 	.word	0x200007d0
 800ea60:	08022cb8 	.word	0x08022cb8
 800ea64:	08022cc0 	.word	0x08022cc0
 800ea68:	08022cc8 	.word	0x08022cc8
 800ea6c:	200007bc 	.word	0x200007bc
 800ea70:	0800e9f9 	.word	0x0800e9f9

0800ea74 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	607a      	str	r2, [r7, #4]
 800ea80:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800ea82:	4a0b      	ldr	r2, [pc, #44]	; (800eab0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	601a      	str	r2, [r3, #0]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	605a      	str	r2, [r3, #4]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	609a      	str	r2, [r3, #8]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	683a      	ldr	r2, [r7, #0]
 800ea98:	60da      	str	r2, [r3, #12]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	741a      	strb	r2, [r3, #16]
{
}
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	08026320 	.word	0x08026320

0800eab4 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	4a06      	ldr	r2, [pc, #24]	; (800ead8 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	741a      	strb	r2, [r3, #16]
}
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	4618      	mov	r0, r3
 800eacc:	370c      	adds	r7, #12
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop
 800ead8:	08026320 	.word	0x08026320

0800eadc <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
}
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7ff ffe5 	bl	800eab4 <_ZN19TestMemoryAllocatorD1Ev>
 800eaea:	2114      	movs	r1, #20
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7fa f88d 	bl	8008c0c <_ZdlPvj>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800eafc:	b480      	push	{r7}
 800eafe:	b083      	sub	sp, #12
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	7c1b      	ldrb	r3, [r3, #16]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800eb14:	b590      	push	{r4, r7, lr}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	3310      	adds	r3, #16
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	4798      	blx	r3
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	3310      	adds	r3, #16
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	6838      	ldr	r0, [r7, #0]
 800eb36:	4798      	blx	r3
 800eb38:	4603      	mov	r3, r0
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f7fc fa51 	bl	800afe4 <_ZN12SimpleString6StrCmpEPKcS1_>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	bf0c      	ite	eq
 800eb48:	2301      	moveq	r3, #1
 800eb4a:	2300      	movne	r3, #0
 800eb4c:	b2db      	uxtb	r3, r3
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	370c      	adds	r7, #12
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd90      	pop	{r4, r7, pc}
	...

0800eb58 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800eb58:	b590      	push	{r4, r7, lr}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	3308      	adds	r3, #8
 800eb68:	681c      	ldr	r4, [r3, #0]
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4a04      	ldr	r2, [pc, #16]	; (800eb80 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800eb6e:	6839      	ldr	r1, [r7, #0]
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	47a0      	blx	r4
 800eb74:	4603      	mov	r3, r0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd90      	pop	{r4, r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	08022ce4 	.word	0x08022ce4

0800eb84 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800eb84:	b590      	push	{r4, r7, lr}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af02      	add	r7, sp, #8
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	330c      	adds	r3, #12
 800eb94:	681c      	ldr	r4, [r3, #0]
 800eb96:	2301      	movs	r3, #1
 800eb98:	9300      	str	r3, [sp, #0]
 800eb9a:	4b04      	ldr	r3, [pc, #16]	; (800ebac <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	6839      	ldr	r1, [r7, #0]
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	47a0      	blx	r4
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd90      	pop	{r4, r7, pc}
 800ebac:	08022ce4 	.word	0x08022ce4

0800ebb0 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
 800ebbc:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800ebbe:	68b8      	ldr	r0, [r7, #8]
 800ebc0:	f7ff fe2a 	bl	800e818 <_ZL13checkedMallocj>
 800ebc4:	4603      	mov	r3, r0
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
	...

0800ebd0 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	607a      	str	r2, [r7, #4]
 800ebdc:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800ebde:	4b04      	ldr	r3, [pc, #16]	; (800ebf0 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	68b8      	ldr	r0, [r7, #8]
 800ebe4:	4798      	blx	r3
}
 800ebe6:	bf00      	nop
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	200000d0 	.word	0x200000d0

0800ebf4 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
    return name_;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	689b      	ldr	r3, [r3, #8]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
    return free_name_;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	68db      	ldr	r3, [r3, #12]
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
    return this;
 800ec44:	687b      	ldr	r3, [r7, #4]
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	370c      	adds	r7, #12
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr
	...

0800ec54 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	4a05      	ldr	r2, [pc, #20]	; (800ec74 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7ff ff25 	bl	800eab4 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3708      	adds	r7, #8
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	080262ec 	.word	0x080262ec

0800ec78 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
}
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff ffe7 	bl	800ec54 <_ZN20NullUnknownAllocatorD1Ev>
 800ec86:	2114      	movs	r1, #20
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f7f9 ffbf 	bl	8008c0c <_ZdlPvj>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	4618      	mov	r0, r3
 800ec92:	3708      	adds	r7, #8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
 800eca4:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800eca6:	2300      	movs	r3, #0
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3714      	adds	r7, #20
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	607a      	str	r2, [r7, #4]
 800ecc0:	603b      	str	r3, [r7, #0]
}
 800ecc2:	bf00      	nop
 800ecc4:	3714      	adds	r7, #20
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eccc:	4770      	bx	lr
	...

0800ecd0 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	4b06      	ldr	r3, [pc, #24]	; (800ecf4 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800ecdc:	4a05      	ldr	r2, [pc, #20]	; (800ecf4 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800ecde:	4906      	ldr	r1, [pc, #24]	; (800ecf8 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800ece0:	f7ff fec8 	bl	800ea74 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ece4:	4a05      	ldr	r2, [pc, #20]	; (800ecfc <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	601a      	str	r2, [r3, #0]
{
}
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	4618      	mov	r0, r3
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	08022d18 	.word	0x08022d18
 800ecf8:	08022d20 	.word	0x08022d20
 800ecfc:	080262ec 	.word	0x080262ec

0800ed00 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800ed00:	b580      	push	{r7, lr}
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	4801      	ldr	r0, [pc, #4]	; (800ed0c <__tcf_3+0xc>)
 800ed06:	f7ff ffa5 	bl	800ec54 <_ZN20NullUnknownAllocatorD1Ev>
 800ed0a:	bd80      	pop	{r7, pc}
 800ed0c:	200007d4 	.word	0x200007d4

0800ed10 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800ed14:	4b12      	ldr	r3, [pc, #72]	; (800ed60 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	f3bf 8f5b 	dmb	ish
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	f003 0301 	and.w	r3, r3, #1
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	bf0c      	ite	eq
 800ed26:	2301      	moveq	r3, #1
 800ed28:	2300      	movne	r3, #0
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d013      	beq.n	800ed58 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800ed30:	480b      	ldr	r0, [pc, #44]	; (800ed60 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800ed32:	f00f f9d9 	bl	801e0e8 <__cxa_guard_acquire>
 800ed36:	4603      	mov	r3, r0
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	bf14      	ite	ne
 800ed3c:	2301      	movne	r3, #1
 800ed3e:	2300      	moveq	r3, #0
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d008      	beq.n	800ed58 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800ed46:	4807      	ldr	r0, [pc, #28]	; (800ed64 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800ed48:	f7ff ffc2 	bl	800ecd0 <_ZN20NullUnknownAllocatorC1Ev>
 800ed4c:	4804      	ldr	r0, [pc, #16]	; (800ed60 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800ed4e:	f00f f9d7 	bl	801e100 <__cxa_guard_release>
 800ed52:	4805      	ldr	r0, [pc, #20]	; (800ed68 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800ed54:	f00f f9fb 	bl	801e14e <atexit>
    return &allocator;
 800ed58:	4b02      	ldr	r3, [pc, #8]	; (800ed64 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	200007e8 	.word	0x200007e8
 800ed64:	200007d4 	.word	0x200007d4
 800ed68:	0800ed01 	.word	0x0800ed01

0800ed6c <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
        return testCount_;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	689b      	ldr	r3, [r3, #8]
    }
 800ed78:	4618      	mov	r0, r3
 800ed7a:	370c      	adds	r7, #12
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr

0800ed84 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800ed84:	b480      	push	{r7}
 800ed86:	b083      	sub	sp, #12
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	699b      	ldr	r3, [r3, #24]
    }
 800ed90:	4618      	mov	r0, r3
 800ed92:	370c      	adds	r7, #12
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr

0800ed9c <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800eda0:	4b05      	ldr	r3, [pc, #20]	; (800edb8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	d103      	bne.n	800edb0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800eda8:	f004 fa4a 	bl	8013240 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800edac:	4603      	mov	r3, r0
 800edae:	e001      	b.n	800edb4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800edb0:	4b01      	ldr	r3, [pc, #4]	; (800edb8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800edb2:	781b      	ldrb	r3, [r3, #0]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	bd80      	pop	{r7, pc}
 800edb8:	20000088 	.word	0x20000088

0800edbc <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800edc4:	4a0a      	ldr	r2, [pc, #40]	; (800edf0 <_ZN10TestOutputC1Ev+0x34>)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	601a      	str	r2, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	605a      	str	r2, [r3, #4]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2200      	movs	r2, #0
 800edd4:	721a      	strb	r2, [r3, #8]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	725a      	strb	r2, [r3, #9]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	4a05      	ldr	r2, [pc, #20]	; (800edf4 <_ZN10TestOutputC1Ev+0x38>)
 800ede0:	60da      	str	r2, [r3, #12]
{
}
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4618      	mov	r0, r3
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr
 800edf0:	08026424 	.word	0x08026424
 800edf4:	08023120 	.word	0x08023120

0800edf8 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	4a04      	ldr	r2, [pc, #16]	; (800ee14 <_ZN10TestOutputD1Ev+0x1c>)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	601a      	str	r2, [r3, #0]
{
}
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	370c      	adds	r7, #12
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr
 800ee14:	08026424 	.word	0x08026424

0800ee18 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	460b      	mov	r3, r1
 800ee22:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	78fa      	ldrb	r2, [r7, #3]
 800ee28:	721a      	strb	r2, [r3, #8]
}
 800ee2a:	bf00      	nop
 800ee2c:	370c      	adds	r7, #12
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr

0800ee36 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800ee36:	b480      	push	{r7}
 800ee38:	b083      	sub	sp, #12
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
    color_ = true;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2201      	movs	r2, #1
 800ee42:	725a      	strb	r2, [r3, #9]
}
 800ee44:	bf00      	nop
 800ee46:	370c      	adds	r7, #12
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr

0800ee50 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	3328      	adds	r3, #40	; 0x28
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	6839      	ldr	r1, [r7, #0]
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	4798      	blx	r3
}
 800ee68:	bf00      	nop
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800ee70:	b590      	push	{r4, r7, lr}
 800ee72:	b085      	sub	sp, #20
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	332c      	adds	r3, #44	; 0x2c
 800ee80:	681c      	ldr	r4, [r3, #0]
 800ee82:	f107 0308 	add.w	r3, r7, #8
 800ee86:	6839      	ldr	r1, [r7, #0]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fd f8ff 	bl	800c08c <_Z10StringFroml>
 800ee8e:	f107 0308 	add.w	r3, r7, #8
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fc fdf4 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	47a0      	blx	r4
 800eea0:	f107 0308 	add.w	r3, r7, #8
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7fc fe18 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800eeaa:	bf00      	nop
 800eeac:	3714      	adds	r7, #20
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd90      	pop	{r4, r7, pc}

0800eeb2 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800eeb2:	b590      	push	{r4, r7, lr}
 800eeb4:	b085      	sub	sp, #20
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
 800eeba:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	332c      	adds	r3, #44	; 0x2c
 800eec2:	681c      	ldr	r4, [r3, #0]
 800eec4:	f107 0308 	add.w	r3, r7, #8
 800eec8:	6839      	ldr	r1, [r7, #0]
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fd fb34 	bl	800c538 <_Z10StringFromj>
 800eed0:	f107 0308 	add.w	r3, r7, #8
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7fc fdd3 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800eeda:	4603      	mov	r3, r0
 800eedc:	4619      	mov	r1, r3
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	47a0      	blx	r4
 800eee2:	f107 0308 	add.w	r3, r7, #8
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fc fdf7 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800eeec:	bf00      	nop
 800eeee:	3714      	adds	r7, #20
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd90      	pop	{r4, r7, pc}

0800eef4 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800eef4:	b590      	push	{r4, r7, lr}
 800eef6:	b087      	sub	sp, #28
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	332c      	adds	r3, #44	; 0x2c
 800ef06:	681c      	ldr	r4, [r3, #0]
 800ef08:	f107 0310 	add.w	r3, r7, #16
 800ef0c:	2106      	movs	r1, #6
 800ef0e:	ed97 0b00 	vldr	d0, [r7]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fd faa6 	bl	800c464 <_Z10StringFromdi>
 800ef18:	f107 0310 	add.w	r3, r7, #16
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fc fdaf 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800ef22:	4603      	mov	r3, r0
 800ef24:	4619      	mov	r1, r3
 800ef26:	68f8      	ldr	r0, [r7, #12]
 800ef28:	47a0      	blx	r4
 800ef2a:	f107 0310 	add.w	r3, r7, #16
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fc fdd3 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800ef34:	bf00      	nop
 800ef36:	371c      	adds	r7, #28
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd90      	pop	{r4, r7, pc}

0800ef3c <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
    p.print(s);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	332c      	adds	r3, #44	; 0x2c
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	6839      	ldr	r1, [r7, #0]
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	4798      	blx	r3
    return p;
 800ef54:	687b      	ldr	r3, [r7, #4]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3708      	adds	r7, #8
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
	...

0800ef60 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800ef60:	b590      	push	{r4, r7, lr}
 800ef62:	b085      	sub	sp, #20
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	7a1b      	ldrb	r3, [r3, #8]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d01a      	beq.n	800efa8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	332c      	adds	r3, #44	; 0x2c
 800ef78:	681c      	ldr	r4, [r3, #0]
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	3314      	adds	r3, #20
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f107 0208 	add.w	r2, r7, #8
 800ef86:	6839      	ldr	r1, [r7, #0]
 800ef88:	4610      	mov	r0, r2
 800ef8a:	4798      	blx	r3
 800ef8c:	f107 0308 	add.w	r3, r7, #8
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7fc fd75 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800ef96:	4603      	mov	r3, r0
 800ef98:	4619      	mov	r1, r3
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	47a0      	blx	r4
 800ef9e:	f107 0308 	add.w	r3, r7, #8
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fc fd99 	bl	800bada <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	3318      	adds	r3, #24
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	6838      	ldr	r0, [r7, #0]
 800efb2:	4798      	blx	r3
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d007      	beq.n	800efca <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	3344      	adds	r3, #68	; 0x44
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	4907      	ldr	r1, [pc, #28]	; (800efe0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800efc8:	e006      	b.n	800efd8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	3344      	adds	r3, #68	; 0x44
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	4904      	ldr	r1, [pc, #16]	; (800efe4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	4798      	blx	r3
}
 800efd8:	bf00      	nop
 800efda:	3714      	adds	r7, #20
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd90      	pop	{r4, r7, pc}
 800efe0:	08023120 	.word	0x08023120
 800efe4:	08023124 	.word	0x08023124

0800efe8 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800efe8:	b590      	push	{r4, r7, lr}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	7a1b      	ldrb	r3, [r3, #8]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d019      	beq.n	800f02e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	332c      	adds	r3, #44	; 0x2c
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4910      	ldr	r1, [pc, #64]	; (800f044 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	3334      	adds	r3, #52	; 0x34
 800f00e:	681c      	ldr	r4, [r3, #0]
 800f010:	6838      	ldr	r0, [r7, #0]
 800f012:	f002 f845 	bl	80110a0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800f016:	4603      	mov	r3, r0
 800f018:	4619      	mov	r1, r3
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	47a0      	blx	r4
        print(" ms\n");
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	332c      	adds	r3, #44	; 0x2c
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4908      	ldr	r1, [pc, #32]	; (800f048 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800f02c:	e005      	b.n	800f03a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	3358      	adds	r3, #88	; 0x58
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	4798      	blx	r3
}
 800f03a:	bf00      	nop
 800f03c:	370c      	adds	r7, #12
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd90      	pop	{r4, r7, pc}
 800f042:	bf00      	nop
 800f044:	08023128 	.word	0x08023128
 800f048:	0802312c 	.word	0x0802312c

0800f04c <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	332c      	adds	r3, #44	; 0x2c
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	68d2      	ldr	r2, [r2, #12]
 800f060:	4611      	mov	r1, r2
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	605a      	str	r2, [r3, #4]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	685a      	ldr	r2, [r3, #4]
 800f074:	4b0d      	ldr	r3, [pc, #52]	; (800f0ac <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800f076:	fb83 1302 	smull	r1, r3, r3, r2
 800f07a:	1119      	asrs	r1, r3, #4
 800f07c:	17d3      	asrs	r3, r2, #31
 800f07e:	1acb      	subs	r3, r1, r3
 800f080:	2132      	movs	r1, #50	; 0x32
 800f082:	fb01 f303 	mul.w	r3, r1, r3
 800f086:	1ad3      	subs	r3, r2, r3
 800f088:	2b00      	cmp	r3, #0
 800f08a:	bf0c      	ite	eq
 800f08c:	2301      	moveq	r3, #1
 800f08e:	2300      	movne	r3, #0
 800f090:	b2db      	uxtb	r3, r3
 800f092:	2b00      	cmp	r3, #0
 800f094:	d006      	beq.n	800f0a4 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	332c      	adds	r3, #44	; 0x2c
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	4904      	ldr	r1, [pc, #16]	; (800f0b0 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	4798      	blx	r3
}
 800f0a4:	bf00      	nop
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	51eb851f 	.word	0x51eb851f
 800f0b0:	08023134 	.word	0x08023134

0800f0b4 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	683a      	ldr	r2, [r7, #0]
 800f0c2:	60da      	str	r2, [r3, #12]
}
 800f0c4:	bf00      	nop
 800f0c6:	370c      	adds	r7, #12
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
}
 800f0d8:	bf00      	nop
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
}
 800f0ee:	bf00      	nop
 800f0f0:	370c      	adds	r7, #12
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr

0800f0fa <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800f0fa:	b480      	push	{r7}
 800f0fc:	b083      	sub	sp, #12
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
 800f102:	6039      	str	r1, [r7, #0]
}
 800f104:	bf00      	nop
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800f110:	b590      	push	{r4, r7, lr}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
    print("\n");
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	332c      	adds	r3, #44	; 0x2c
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	496f      	ldr	r1, [pc, #444]	; (800f2e0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800f128:	6838      	ldr	r0, [r7, #0]
 800f12a:	f7f8 f83d 	bl	80071a8 <_ZNK10TestResult9isFailureEv>
 800f12e:	4603      	mov	r3, r0
 800f130:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800f132:	6838      	ldr	r0, [r7, #0]
 800f134:	f7f8 f82c 	bl	8007190 <_ZNK10TestResult15getFailureCountEv>
 800f138:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800f13a:	7bfb      	ldrb	r3, [r7, #15]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d02b      	beq.n	800f198 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	7a5b      	ldrb	r3, [r3, #9]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d006      	beq.n	800f156 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	332c      	adds	r3, #44	; 0x2c
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4964      	ldr	r1, [pc, #400]	; (800f2e4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	4798      	blx	r3
        }
        print("Errors (");
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	332c      	adds	r3, #44	; 0x2c
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4962      	ldr	r1, [pc, #392]	; (800f2e8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	4798      	blx	r3
        if (failureCount > 0) {
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00e      	beq.n	800f188 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	3334      	adds	r3, #52	; 0x34
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	68b9      	ldr	r1, [r7, #8]
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	4798      	blx	r3
            print(" failures, ");
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	332c      	adds	r3, #44	; 0x2c
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	495a      	ldr	r1, [pc, #360]	; (800f2ec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	4798      	blx	r3
 800f186:	e019      	b.n	800f1bc <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	332c      	adds	r3, #44	; 0x2c
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4957      	ldr	r1, [pc, #348]	; (800f2f0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	4798      	blx	r3
 800f196:	e011      	b.n	800f1bc <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	7a5b      	ldrb	r3, [r3, #9]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d006      	beq.n	800f1ae <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	332c      	adds	r3, #44	; 0x2c
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4952      	ldr	r1, [pc, #328]	; (800f2f4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	4798      	blx	r3
        }
        print("OK (");
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	332c      	adds	r3, #44	; 0x2c
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4950      	ldr	r1, [pc, #320]	; (800f2f8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	4798      	blx	r3
    }
    print(result.getTestCount());
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	3334      	adds	r3, #52	; 0x34
 800f1c2:	681c      	ldr	r4, [r3, #0]
 800f1c4:	6838      	ldr	r0, [r7, #0]
 800f1c6:	f7ff fdd1 	bl	800ed6c <_ZNK10TestResult12getTestCountEv>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	47a0      	blx	r4
    print(" tests, ");
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	332c      	adds	r3, #44	; 0x2c
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	4948      	ldr	r1, [pc, #288]	; (800f2fc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	4798      	blx	r3
    print(result.getRunCount());
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	3334      	adds	r3, #52	; 0x34
 800f1e6:	681c      	ldr	r4, [r3, #0]
 800f1e8:	6838      	ldr	r0, [r7, #0]
 800f1ea:	f7f7 ffb9 	bl	8007160 <_ZNK10TestResult11getRunCountEv>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	47a0      	blx	r4
    print(" ran, ");
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	332c      	adds	r3, #44	; 0x2c
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4940      	ldr	r1, [pc, #256]	; (800f300 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	4798      	blx	r3
    print(result.getCheckCount());
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	3334      	adds	r3, #52	; 0x34
 800f20a:	681c      	ldr	r4, [r3, #0]
 800f20c:	6838      	ldr	r0, [r7, #0]
 800f20e:	f7f8 fc13 	bl	8007a38 <_ZNK10TestResult13getCheckCountEv>
 800f212:	4603      	mov	r3, r0
 800f214:	4619      	mov	r1, r3
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	47a0      	blx	r4
    print(" checks, ");
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	332c      	adds	r3, #44	; 0x2c
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4938      	ldr	r1, [pc, #224]	; (800f304 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	4798      	blx	r3
    print(result.getIgnoredCount());
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	3334      	adds	r3, #52	; 0x34
 800f22e:	681c      	ldr	r4, [r3, #0]
 800f230:	6838      	ldr	r0, [r7, #0]
 800f232:	f7f7 ffa1 	bl	8007178 <_ZNK10TestResult15getIgnoredCountEv>
 800f236:	4603      	mov	r3, r0
 800f238:	4619      	mov	r1, r3
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	47a0      	blx	r4
    print(" ignored, ");
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	332c      	adds	r3, #44	; 0x2c
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4930      	ldr	r1, [pc, #192]	; (800f308 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	3334      	adds	r3, #52	; 0x34
 800f252:	681c      	ldr	r4, [r3, #0]
 800f254:	6838      	ldr	r0, [r7, #0]
 800f256:	f7ff fd95 	bl	800ed84 <_ZNK10TestResult19getFilteredOutCountEv>
 800f25a:	4603      	mov	r3, r0
 800f25c:	4619      	mov	r1, r3
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	47a0      	blx	r4
    print(" filtered out, ");
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	332c      	adds	r3, #44	; 0x2c
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4928      	ldr	r1, [pc, #160]	; (800f30c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	3334      	adds	r3, #52	; 0x34
 800f276:	681c      	ldr	r4, [r3, #0]
 800f278:	6838      	ldr	r0, [r7, #0]
 800f27a:	f001 ff05 	bl	8011088 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800f27e:	4603      	mov	r3, r0
 800f280:	4619      	mov	r1, r3
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	47a0      	blx	r4
    print(" ms)");
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	332c      	adds	r3, #44	; 0x2c
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	4920      	ldr	r1, [pc, #128]	; (800f310 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	4798      	blx	r3
    if (color_) {
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	7a5b      	ldrb	r3, [r3, #9]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d006      	beq.n	800f2aa <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	332c      	adds	r3, #44	; 0x2c
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	491b      	ldr	r1, [pc, #108]	; (800f314 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800f2aa:	7bfb      	ldrb	r3, [r7, #15]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d009      	beq.n	800f2c4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d106      	bne.n	800f2c4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	332c      	adds	r3, #44	; 0x2c
 800f2bc:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800f2be:	4916      	ldr	r1, [pc, #88]	; (800f318 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	4798      	blx	r3
    }
    print("\n\n");
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	332c      	adds	r3, #44	; 0x2c
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4913      	ldr	r1, [pc, #76]	; (800f31c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	4798      	blx	r3

    dotCount_ = 0;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	605a      	str	r2, [r3, #4]
}
 800f2d8:	bf00      	nop
 800f2da:	3714      	adds	r7, #20
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd90      	pop	{r4, r7, pc}
 800f2e0:	08023134 	.word	0x08023134
 800f2e4:	08023138 	.word	0x08023138
 800f2e8:	08023140 	.word	0x08023140
 800f2ec:	0802314c 	.word	0x0802314c
 800f2f0:	08023158 	.word	0x08023158
 800f2f4:	08023168 	.word	0x08023168
 800f2f8:	08023170 	.word	0x08023170
 800f2fc:	08023178 	.word	0x08023178
 800f300:	08023184 	.word	0x08023184
 800f304:	0802318c 	.word	0x0802318c
 800f308:	08023198 	.word	0x08023198
 800f30c:	080231a4 	.word	0x080231a4
 800f310:	080231b4 	.word	0x080231b4
 800f314:	080231bc 	.word	0x080231bc
 800f318:	080231c0 	.word	0x080231c0
 800f31c:	08023264 	.word	0x08023264

0800f320 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d922      	bls.n	800f378 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	332c      	adds	r3, #44	; 0x2c
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	4911      	ldr	r1, [pc, #68]	; (800f380 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	4798      	blx	r3
        print(number);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	3334      	adds	r3, #52	; 0x34
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	68b9      	ldr	r1, [r7, #8]
 800f34a:	68f8      	ldr	r0, [r7, #12]
 800f34c:	4798      	blx	r3
        print(" of ");
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	332c      	adds	r3, #44	; 0x2c
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	490b      	ldr	r1, [pc, #44]	; (800f384 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	4798      	blx	r3
        print(total);
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	3334      	adds	r3, #52	; 0x34
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	6879      	ldr	r1, [r7, #4]
 800f366:	68f8      	ldr	r0, [r7, #12]
 800f368:	4798      	blx	r3
        print("\n");
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	332c      	adds	r3, #44	; 0x2c
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4905      	ldr	r1, [pc, #20]	; (800f388 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	4798      	blx	r3
    }
}
 800f378:	bf00      	nop
 800f37a:	3710      	adds	r7, #16
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	08023268 	.word	0x08023268
 800f384:	08023274 	.word	0x08023274
 800f388:	08023134 	.word	0x08023134

0800f38c <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800f396:	6838      	ldr	r0, [r7, #0]
 800f398:	f7fd ffa1 	bl	800d2de <_ZNK11TestFailure17isOutsideTestFileEv>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d105      	bne.n	800f3ae <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800f3a2:	6838      	ldr	r0, [r7, #0]
 800f3a4:	f7fd ffad 	bl	800d302 <_ZNK11TestFailure18isInHelperFunctionEv>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d001      	beq.n	800f3b2 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e000      	b.n	800f3b4 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d004      	beq.n	800f3c2 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800f3b8:	6839      	ldr	r1, [r7, #0]
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 f81d 	bl	800f3fa <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800f3c0:	e003      	b.n	800f3ca <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800f3c2:	6839      	ldr	r1, [r7, #0]
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f000 f86b 	bl	800f4a0 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	3318      	adds	r3, #24
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f107 0208 	add.w	r2, r7, #8
 800f3d6:	6839      	ldr	r1, [r7, #0]
 800f3d8:	4610      	mov	r0, r2
 800f3da:	4798      	blx	r3
 800f3dc:	f107 0308 	add.w	r3, r7, #8
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 f8b2 	bl	800f54c <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800f3e8:	f107 0308 	add.w	r3, r7, #8
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fc fb74 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800f3f2:	bf00      	nop
 800f3f4:	3710      	adds	r7, #16
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b088      	sub	sp, #32
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
 800f402:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	331c      	adds	r3, #28
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f107 0208 	add.w	r2, r7, #8
 800f410:	6839      	ldr	r1, [r7, #0]
 800f412:	4610      	mov	r0, r2
 800f414:	4798      	blx	r3
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	3320      	adds	r3, #32
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	6838      	ldr	r0, [r7, #0]
 800f420:	4798      	blx	r3
 800f422:	4602      	mov	r2, r0
 800f424:	f107 0308 	add.w	r3, r7, #8
 800f428:	4619      	mov	r1, r3
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f8be 	bl	800f5ac <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800f430:	f107 0308 	add.w	r3, r7, #8
 800f434:	4618      	mov	r0, r3
 800f436:	f7fc fb50 	bl	800bada <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	330c      	adds	r3, #12
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f107 0210 	add.w	r2, r7, #16
 800f446:	6839      	ldr	r1, [r7, #0]
 800f448:	4610      	mov	r0, r2
 800f44a:	4798      	blx	r3
 800f44c:	f107 0310 	add.w	r3, r7, #16
 800f450:	4619      	mov	r1, r3
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 f85c 	bl	800f510 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800f458:	f107 0310 	add.w	r3, r7, #16
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7fc fb3c 	bl	800bada <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	3308      	adds	r3, #8
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f107 0218 	add.w	r2, r7, #24
 800f46e:	6839      	ldr	r1, [r7, #0]
 800f470:	4610      	mov	r0, r2
 800f472:	4798      	blx	r3
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	3314      	adds	r3, #20
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	6838      	ldr	r0, [r7, #0]
 800f47e:	4798      	blx	r3
 800f480:	4602      	mov	r2, r0
 800f482:	f107 0318 	add.w	r3, r7, #24
 800f486:	4619      	mov	r1, r3
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 f88f 	bl	800f5ac <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800f48e:	f107 0318 	add.w	r3, r7, #24
 800f492:	4618      	mov	r0, r3
 800f494:	f7fc fb21 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800f498:	bf00      	nop
 800f49a:	3720      	adds	r7, #32
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b086      	sub	sp, #24
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	3308      	adds	r3, #8
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f107 0208 	add.w	r2, r7, #8
 800f4b6:	6839      	ldr	r1, [r7, #0]
 800f4b8:	4610      	mov	r0, r2
 800f4ba:	4798      	blx	r3
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	3314      	adds	r3, #20
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	6838      	ldr	r0, [r7, #0]
 800f4c6:	4798      	blx	r3
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	f107 0308 	add.w	r3, r7, #8
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 f86b 	bl	800f5ac <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800f4d6:	f107 0308 	add.w	r3, r7, #8
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fc fafd 	bl	800bada <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	330c      	adds	r3, #12
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f107 0210 	add.w	r2, r7, #16
 800f4ec:	6839      	ldr	r1, [r7, #0]
 800f4ee:	4610      	mov	r0, r2
 800f4f0:	4798      	blx	r3
 800f4f2:	f107 0310 	add.w	r3, r7, #16
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 f809 	bl	800f510 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800f4fe:	f107 0310 	add.w	r3, r7, #16
 800f502:	4618      	mov	r0, r3
 800f504:	f7fc fae9 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800f508:	bf00      	nop
 800f50a:	3718      	adds	r7, #24
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800f510:	b590      	push	{r4, r7, lr}
 800f512:	b083      	sub	sp, #12
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	332c      	adds	r3, #44	; 0x2c
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4909      	ldr	r1, [pc, #36]	; (800f548 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	4798      	blx	r3
    print(testName.asCharString());
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	332c      	adds	r3, #44	; 0x2c
 800f52e:	681c      	ldr	r4, [r3, #0]
 800f530:	6838      	ldr	r0, [r7, #0]
 800f532:	f7fc faa5 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800f536:	4603      	mov	r3, r0
 800f538:	4619      	mov	r1, r3
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	47a0      	blx	r4
}
 800f53e:	bf00      	nop
 800f540:	370c      	adds	r7, #12
 800f542:	46bd      	mov	sp, r7
 800f544:	bd90      	pop	{r4, r7, pc}
 800f546:	bf00      	nop
 800f548:	0802327c 	.word	0x0802327c

0800f54c <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800f54c:	b590      	push	{r4, r7, lr}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	6039      	str	r1, [r7, #0]
    print("\n");
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	332c      	adds	r3, #44	; 0x2c
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	4910      	ldr	r1, [pc, #64]	; (800f5a0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	4798      	blx	r3
    print("\t");
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	332c      	adds	r3, #44	; 0x2c
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	490d      	ldr	r1, [pc, #52]	; (800f5a4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	4798      	blx	r3
    print(reason.asCharString());
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	332c      	adds	r3, #44	; 0x2c
 800f578:	681c      	ldr	r4, [r3, #0]
 800f57a:	6838      	ldr	r0, [r7, #0]
 800f57c:	f7fc fa80 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800f580:	4603      	mov	r3, r0
 800f582:	4619      	mov	r1, r3
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	47a0      	blx	r4
    print("\n\n");
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	332c      	adds	r3, #44	; 0x2c
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	4905      	ldr	r1, [pc, #20]	; (800f5a8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	4798      	blx	r3
}
 800f596:	bf00      	nop
 800f598:	370c      	adds	r7, #12
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd90      	pop	{r4, r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	08023134 	.word	0x08023134
 800f5a4:	0802328c 	.word	0x0802328c
 800f5a8:	08023264 	.word	0x08023264

0800f5ac <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800f5ac:	b590      	push	{r4, r7, lr}
 800f5ae:	b089      	sub	sp, #36	; 0x24
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800f5b8:	f7ff fbf0 	bl	800ed9c <_ZN10TestOutput21getWorkingEnvironmentEv>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	bf0c      	ite	eq
 800f5c2:	2301      	moveq	r3, #1
 800f5c4:	2300      	movne	r3, #0
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d015      	beq.n	800f5f8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	3354      	adds	r3, #84	; 0x54
 800f5d2:	681c      	ldr	r4, [r3, #0]
 800f5d4:	f107 0310 	add.w	r3, r7, #16
 800f5d8:	68b9      	ldr	r1, [r7, #8]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7fb ff19 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 800f5e0:	f107 0310 	add.w	r3, r7, #16
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	47a0      	blx	r4
 800f5ec:	f107 0310 	add.w	r3, r7, #16
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7fc fa72 	bl	800bada <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800f5f6:	e014      	b.n	800f622 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	3350      	adds	r3, #80	; 0x50
 800f5fe:	681c      	ldr	r4, [r3, #0]
 800f600:	f107 0318 	add.w	r3, r7, #24
 800f604:	68b9      	ldr	r1, [r7, #8]
 800f606:	4618      	mov	r0, r3
 800f608:	f7fb ff03 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 800f60c:	f107 0318 	add.w	r3, r7, #24
 800f610:	687a      	ldr	r2, [r7, #4]
 800f612:	4619      	mov	r1, r3
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	47a0      	blx	r4
 800f618:	f107 0318 	add.w	r3, r7, #24
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7fc fa5c 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 800f622:	bf00      	nop
 800f624:	3724      	adds	r7, #36	; 0x24
 800f626:	46bd      	mov	sp, r7
 800f628:	bd90      	pop	{r4, r7, pc}
	...

0800f62c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800f62c:	b590      	push	{r4, r7, lr}
 800f62e:	b085      	sub	sp, #20
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	607a      	str	r2, [r7, #4]
    print("\n");
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	332c      	adds	r3, #44	; 0x2c
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4916      	ldr	r1, [pc, #88]	; (800f69c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	4798      	blx	r3
    print(file.asCharString());
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	332c      	adds	r3, #44	; 0x2c
 800f64c:	681c      	ldr	r4, [r3, #0]
 800f64e:	68b8      	ldr	r0, [r7, #8]
 800f650:	f7fc fa16 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800f654:	4603      	mov	r3, r0
 800f656:	4619      	mov	r1, r3
 800f658:	68f8      	ldr	r0, [r7, #12]
 800f65a:	47a0      	blx	r4
    print(":");
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	332c      	adds	r3, #44	; 0x2c
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	490e      	ldr	r1, [pc, #56]	; (800f6a0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800f666:	68f8      	ldr	r0, [r7, #12]
 800f668:	4798      	blx	r3
    print(lineNumber);
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	3334      	adds	r3, #52	; 0x34
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	6879      	ldr	r1, [r7, #4]
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	4798      	blx	r3
    print(":");
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	332c      	adds	r3, #44	; 0x2c
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4907      	ldr	r1, [pc, #28]	; (800f6a0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800f682:	68f8      	ldr	r0, [r7, #12]
 800f684:	4798      	blx	r3
    print(" error:");
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	332c      	adds	r3, #44	; 0x2c
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4905      	ldr	r1, [pc, #20]	; (800f6a4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	4798      	blx	r3
}
 800f694:	bf00      	nop
 800f696:	3714      	adds	r7, #20
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd90      	pop	{r4, r7, pc}
 800f69c:	08023134 	.word	0x08023134
 800f6a0:	08023290 	.word	0x08023290
 800f6a4:	08023294 	.word	0x08023294

0800f6a8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800f6a8:	b590      	push	{r4, r7, lr}
 800f6aa:	b085      	sub	sp, #20
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
    print("\n");
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	332c      	adds	r3, #44	; 0x2c
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4916      	ldr	r1, [pc, #88]	; (800f718 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	4798      	blx	r3
    print(file.asCharString());
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	332c      	adds	r3, #44	; 0x2c
 800f6c8:	681c      	ldr	r4, [r3, #0]
 800f6ca:	68b8      	ldr	r0, [r7, #8]
 800f6cc:	f7fc f9d8 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	68f8      	ldr	r0, [r7, #12]
 800f6d6:	47a0      	blx	r4
    print("(");
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	332c      	adds	r3, #44	; 0x2c
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	490e      	ldr	r1, [pc, #56]	; (800f71c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800f6e2:	68f8      	ldr	r0, [r7, #12]
 800f6e4:	4798      	blx	r3
    print(lineNumber);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	3334      	adds	r3, #52	; 0x34
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	6879      	ldr	r1, [r7, #4]
 800f6f0:	68f8      	ldr	r0, [r7, #12]
 800f6f2:	4798      	blx	r3
    print("):");
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	332c      	adds	r3, #44	; 0x2c
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4908      	ldr	r1, [pc, #32]	; (800f720 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	4798      	blx	r3
    print(" error:");
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	332c      	adds	r3, #44	; 0x2c
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4906      	ldr	r1, [pc, #24]	; (800f724 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800f70c:	68f8      	ldr	r0, [r7, #12]
 800f70e:	4798      	blx	r3
}
 800f710:	bf00      	nop
 800f712:	3714      	adds	r7, #20
 800f714:	46bd      	mov	sp, r7
 800f716:	bd90      	pop	{r4, r7, pc}
 800f718:	08023134 	.word	0x08023134
 800f71c:	0802329c 	.word	0x0802329c
 800f720:	080232a0 	.word	0x080232a0
 800f724:	08023294 	.word	0x08023294

0800f728 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	7a1b      	ldrb	r3, [r3, #8]
 800f736:	2b02      	cmp	r3, #2
 800f738:	d106      	bne.n	800f748 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3328      	adds	r3, #40	; 0x28
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	6839      	ldr	r1, [r7, #0]
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	4798      	blx	r3
}
 800f748:	bf00      	nop
 800f74a:	3708      	adds	r7, #8
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b082      	sub	sp, #8
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
    while (*s) {
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d009      	beq.n	800f776 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800f762:	4b0a      	ldr	r3, [pc, #40]	; (800f78c <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	683a      	ldr	r2, [r7, #0]
 800f768:	7812      	ldrb	r2, [r2, #0]
 800f76a:	4610      	mov	r0, r2
 800f76c:	4798      	blx	r3
        s++;
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	3301      	adds	r3, #1
 800f772:	603b      	str	r3, [r7, #0]
    while (*s) {
 800f774:	e7f1      	b.n	800f75a <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	334c      	adds	r3, #76	; 0x4c
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	4798      	blx	r3
}
 800f782:	bf00      	nop
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	200000c0 	.word	0x200000c0

0800f790 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800f798:	4b03      	ldr	r3, [pc, #12]	; (800f7a8 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4798      	blx	r3
}
 800f79e:	bf00      	nop
 800f7a0:	3708      	adds	r7, #8
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	200000c4 	.word	0x200000c4

0800f7ac <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7ff fb00 	bl	800edbc <_ZN10TestOutputC1Ev>
 800f7bc:	4a06      	ldr	r2, [pc, #24]	; (800f7d8 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	601a      	str	r2, [r3, #0]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	611a      	str	r2, [r3, #16]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	615a      	str	r2, [r3, #20]
{
}
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	08026354 	.word	0x08026354

0800f7dc <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	4a0e      	ldr	r2, [pc, #56]	; (800f820 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	691b      	ldr	r3, [r3, #16]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d004      	beq.n	800f7fc <_ZN19CompositeTestOutputD1Ev+0x20>
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	3204      	adds	r2, #4
 800f7f6:	6812      	ldr	r2, [r2, #0]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	4790      	blx	r2
  delete outputTwo_;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	695b      	ldr	r3, [r3, #20]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d004      	beq.n	800f80e <_ZN19CompositeTestOutputD1Ev+0x32>
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	3204      	adds	r2, #4
 800f808:	6812      	ldr	r2, [r2, #0]
 800f80a:	4618      	mov	r0, r3
 800f80c:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4618      	mov	r0, r3
 800f812:	f7ff faf1 	bl	800edf8 <_ZN10TestOutputD1Ev>
}
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4618      	mov	r0, r3
 800f81a:	3708      	adds	r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	08026354 	.word	0x08026354

0800f824 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
}
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff ffd5 	bl	800f7dc <_ZN19CompositeTestOutputD1Ev>
 800f832:	2118      	movs	r1, #24
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f7f9 f9e9 	bl	8008c0c <_ZdlPvj>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4618      	mov	r0, r3
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	691b      	ldr	r3, [r3, #16]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d004      	beq.n	800f860 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	3204      	adds	r2, #4
 800f85a:	6812      	ldr	r2, [r2, #0]
 800f85c:	4618      	mov	r0, r3
 800f85e:	4790      	blx	r2
  outputOne_ = output;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	611a      	str	r2, [r3, #16]
}
 800f866:	bf00      	nop
 800f868:	3708      	adds	r7, #8
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	b082      	sub	sp, #8
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
 800f876:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	695b      	ldr	r3, [r3, #20]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d004      	beq.n	800f88a <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800f880:	681a      	ldr	r2, [r3, #0]
 800f882:	3204      	adds	r2, #4
 800f884:	6812      	ldr	r2, [r2, #0]
 800f886:	4618      	mov	r0, r3
 800f888:	4790      	blx	r2
  outputTwo_ = output;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	683a      	ldr	r2, [r7, #0]
 800f88e:	615a      	str	r2, [r3, #20]
}
 800f890:	bf00      	nop
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d008      	beq.n	800f8ba <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	691a      	ldr	r2, [r3, #16]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	691b      	ldr	r3, [r3, #16]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	3308      	adds	r3, #8
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4610      	mov	r0, r2
 800f8b8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	695b      	ldr	r3, [r3, #20]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d008      	beq.n	800f8d4 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	695a      	ldr	r2, [r3, #20]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	695b      	ldr	r3, [r3, #20]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	3308      	adds	r3, #8
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4610      	mov	r0, r2
 800f8d2:	4798      	blx	r3
}
 800f8d4:	bf00      	nop
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	691b      	ldr	r3, [r3, #16]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d009      	beq.n	800f902 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	691a      	ldr	r2, [r3, #16]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	691b      	ldr	r3, [r3, #16]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	330c      	adds	r3, #12
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	6839      	ldr	r1, [r7, #0]
 800f8fe:	4610      	mov	r0, r2
 800f900:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	695b      	ldr	r3, [r3, #20]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d009      	beq.n	800f91e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	695a      	ldr	r2, [r3, #20]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	695b      	ldr	r3, [r3, #20]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	330c      	adds	r3, #12
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	6839      	ldr	r1, [r7, #0]
 800f91a:	4610      	mov	r0, r2
 800f91c:	4798      	blx	r3
}
 800f91e:	bf00      	nop
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800f926:	b580      	push	{r7, lr}
 800f928:	b082      	sub	sp, #8
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
 800f92e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	691b      	ldr	r3, [r3, #16]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d009      	beq.n	800f94c <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	691a      	ldr	r2, [r3, #16]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	691b      	ldr	r3, [r3, #16]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	3310      	adds	r3, #16
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	6839      	ldr	r1, [r7, #0]
 800f948:	4610      	mov	r0, r2
 800f94a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	695b      	ldr	r3, [r3, #20]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d009      	beq.n	800f968 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	695a      	ldr	r2, [r3, #20]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	695b      	ldr	r3, [r3, #20]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	3310      	adds	r3, #16
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	6839      	ldr	r1, [r7, #0]
 800f964:	4610      	mov	r0, r2
 800f966:	4798      	blx	r3
}
 800f968:	bf00      	nop
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	691b      	ldr	r3, [r3, #16]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d009      	beq.n	800f996 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	691a      	ldr	r2, [r3, #16]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	691b      	ldr	r3, [r3, #16]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	3314      	adds	r3, #20
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	6839      	ldr	r1, [r7, #0]
 800f992:	4610      	mov	r0, r2
 800f994:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	695b      	ldr	r3, [r3, #20]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d009      	beq.n	800f9b2 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	695a      	ldr	r2, [r3, #20]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	695b      	ldr	r3, [r3, #20]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	3314      	adds	r3, #20
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	6839      	ldr	r1, [r7, #0]
 800f9ae:	4610      	mov	r0, r2
 800f9b0:	4798      	blx	r3
}
 800f9b2:	bf00      	nop
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b082      	sub	sp, #8
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
 800f9c2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	691b      	ldr	r3, [r3, #16]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d009      	beq.n	800f9e0 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	691a      	ldr	r2, [r3, #16]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	691b      	ldr	r3, [r3, #16]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	3318      	adds	r3, #24
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	6839      	ldr	r1, [r7, #0]
 800f9dc:	4610      	mov	r0, r2
 800f9de:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	695b      	ldr	r3, [r3, #20]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d009      	beq.n	800f9fc <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	695a      	ldr	r2, [r3, #20]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	695b      	ldr	r3, [r3, #20]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	3318      	adds	r3, #24
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	6839      	ldr	r1, [r7, #0]
 800f9f8:	4610      	mov	r0, r2
 800f9fa:	4798      	blx	r3
}
 800f9fc:	bf00      	nop
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	691b      	ldr	r3, [r3, #16]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d009      	beq.n	800fa2a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	691a      	ldr	r2, [r3, #16]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	691b      	ldr	r3, [r3, #16]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	331c      	adds	r3, #28
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	6839      	ldr	r1, [r7, #0]
 800fa26:	4610      	mov	r0, r2
 800fa28:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	695b      	ldr	r3, [r3, #20]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d009      	beq.n	800fa46 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	695a      	ldr	r2, [r3, #20]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	695b      	ldr	r3, [r3, #20]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	331c      	adds	r3, #28
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	6839      	ldr	r1, [r7, #0]
 800fa42:	4610      	mov	r0, r2
 800fa44:	4798      	blx	r3
}
 800fa46:	bf00      	nop
 800fa48:	3708      	adds	r7, #8
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}

0800fa4e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	b082      	sub	sp, #8
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
 800fa56:	460b      	mov	r3, r1
 800fa58:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	691b      	ldr	r3, [r3, #16]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d009      	beq.n	800fa76 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	691a      	ldr	r2, [r3, #16]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	691b      	ldr	r3, [r3, #16]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	3320      	adds	r3, #32
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	78f9      	ldrb	r1, [r7, #3]
 800fa72:	4610      	mov	r0, r2
 800fa74:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	695b      	ldr	r3, [r3, #20]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d009      	beq.n	800fa92 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	695a      	ldr	r2, [r3, #20]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	3320      	adds	r3, #32
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	78f9      	ldrb	r1, [r7, #3]
 800fa8e:	4610      	mov	r0, r2
 800fa90:	4798      	blx	r3
}
 800fa92:	bf00      	nop
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}

0800fa9a <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800fa9a:	b580      	push	{r7, lr}
 800fa9c:	b082      	sub	sp, #8
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	691b      	ldr	r3, [r3, #16]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d008      	beq.n	800fabc <_ZN19CompositeTestOutput5colorEv+0x22>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	691a      	ldr	r2, [r3, #16]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	691b      	ldr	r3, [r3, #16]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	3324      	adds	r3, #36	; 0x24
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	4610      	mov	r0, r2
 800faba:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	695b      	ldr	r3, [r3, #20]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d008      	beq.n	800fad6 <_ZN19CompositeTestOutput5colorEv+0x3c>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	695a      	ldr	r2, [r3, #20]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	695b      	ldr	r3, [r3, #20]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	3324      	adds	r3, #36	; 0x24
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	4610      	mov	r0, r2
 800fad4:	4798      	blx	r3
}
 800fad6:	bf00      	nop
 800fad8:	3708      	adds	r7, #8
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b082      	sub	sp, #8
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	691b      	ldr	r3, [r3, #16]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d009      	beq.n	800fb04 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	691a      	ldr	r2, [r3, #16]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	3328      	adds	r3, #40	; 0x28
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	6839      	ldr	r1, [r7, #0]
 800fb00:	4610      	mov	r0, r2
 800fb02:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	695b      	ldr	r3, [r3, #20]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d009      	beq.n	800fb20 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	695a      	ldr	r2, [r3, #20]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	695b      	ldr	r3, [r3, #20]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3328      	adds	r3, #40	; 0x28
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	6839      	ldr	r1, [r7, #0]
 800fb1c:	4610      	mov	r0, r2
 800fb1e:	4798      	blx	r3
}
 800fb20:	bf00      	nop
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	691b      	ldr	r3, [r3, #16]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d009      	beq.n	800fb4e <_ZN19CompositeTestOutput5printEPKc+0x26>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	691a      	ldr	r2, [r3, #16]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	691b      	ldr	r3, [r3, #16]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	332c      	adds	r3, #44	; 0x2c
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	6839      	ldr	r1, [r7, #0]
 800fb4a:	4610      	mov	r0, r2
 800fb4c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	695b      	ldr	r3, [r3, #20]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d009      	beq.n	800fb6a <_ZN19CompositeTestOutput5printEPKc+0x42>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	695a      	ldr	r2, [r3, #20]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	695b      	ldr	r3, [r3, #20]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	332c      	adds	r3, #44	; 0x2c
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	6839      	ldr	r1, [r7, #0]
 800fb66:	4610      	mov	r0, r2
 800fb68:	4798      	blx	r3
}
 800fb6a:	bf00      	nop
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b082      	sub	sp, #8
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	691b      	ldr	r3, [r3, #16]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d009      	beq.n	800fb98 <_ZN19CompositeTestOutput5printEl+0x26>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	691a      	ldr	r2, [r3, #16]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	691b      	ldr	r3, [r3, #16]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	3330      	adds	r3, #48	; 0x30
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	6839      	ldr	r1, [r7, #0]
 800fb94:	4610      	mov	r0, r2
 800fb96:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	695b      	ldr	r3, [r3, #20]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d009      	beq.n	800fbb4 <_ZN19CompositeTestOutput5printEl+0x42>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	695a      	ldr	r2, [r3, #20]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	695b      	ldr	r3, [r3, #20]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	3330      	adds	r3, #48	; 0x30
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	6839      	ldr	r1, [r7, #0]
 800fbb0:	4610      	mov	r0, r2
 800fbb2:	4798      	blx	r3
}
 800fbb4:	bf00      	nop
 800fbb6:	3708      	adds	r7, #8
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	691b      	ldr	r3, [r3, #16]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d009      	beq.n	800fbe2 <_ZN19CompositeTestOutput5printEj+0x26>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	691a      	ldr	r2, [r3, #16]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	691b      	ldr	r3, [r3, #16]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	3334      	adds	r3, #52	; 0x34
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	6839      	ldr	r1, [r7, #0]
 800fbde:	4610      	mov	r0, r2
 800fbe0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	695b      	ldr	r3, [r3, #20]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d009      	beq.n	800fbfe <_ZN19CompositeTestOutput5printEj+0x42>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	695a      	ldr	r2, [r3, #20]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	695b      	ldr	r3, [r3, #20]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	3334      	adds	r3, #52	; 0x34
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	6839      	ldr	r1, [r7, #0]
 800fbfa:	4610      	mov	r0, r2
 800fbfc:	4798      	blx	r3
}
 800fbfe:	bf00      	nop
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b084      	sub	sp, #16
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	60f8      	str	r0, [r7, #12]
 800fc0e:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	691b      	ldr	r3, [r3, #16]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00a      	beq.n	800fc30 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	691a      	ldr	r2, [r3, #16]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	691b      	ldr	r3, [r3, #16]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	3338      	adds	r3, #56	; 0x38
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	ed97 0b00 	vldr	d0, [r7]
 800fc2c:	4610      	mov	r0, r2
 800fc2e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	695b      	ldr	r3, [r3, #20]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d00a      	beq.n	800fc4e <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	695a      	ldr	r2, [r3, #20]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	695b      	ldr	r3, [r3, #20]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	3338      	adds	r3, #56	; 0x38
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	ed97 0b00 	vldr	d0, [r7]
 800fc4a:	4610      	mov	r0, r2
 800fc4c:	4798      	blx	r3
}
 800fc4e:	bf00      	nop
 800fc50:	3710      	adds	r7, #16
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}

0800fc56 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b082      	sub	sp, #8
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
 800fc5e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	691b      	ldr	r3, [r3, #16]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d009      	beq.n	800fc7c <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	691a      	ldr	r2, [r3, #16]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	333c      	adds	r3, #60	; 0x3c
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	6839      	ldr	r1, [r7, #0]
 800fc78:	4610      	mov	r0, r2
 800fc7a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	695b      	ldr	r3, [r3, #20]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d009      	beq.n	800fc98 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	695a      	ldr	r2, [r3, #20]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	695b      	ldr	r3, [r3, #20]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	333c      	adds	r3, #60	; 0x3c
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	6839      	ldr	r1, [r7, #0]
 800fc94:	4610      	mov	r0, r2
 800fc96:	4798      	blx	r3
}
 800fc98:	bf00      	nop
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	691b      	ldr	r3, [r3, #16]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d009      	beq.n	800fcc6 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	691a      	ldr	r2, [r3, #16]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	691b      	ldr	r3, [r3, #16]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	3344      	adds	r3, #68	; 0x44
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	6839      	ldr	r1, [r7, #0]
 800fcc2:	4610      	mov	r0, r2
 800fcc4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	695b      	ldr	r3, [r3, #20]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d009      	beq.n	800fce2 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	695a      	ldr	r2, [r3, #20]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	695b      	ldr	r3, [r3, #20]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	3344      	adds	r3, #68	; 0x44
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	6839      	ldr	r1, [r7, #0]
 800fcde:	4610      	mov	r0, r2
 800fce0:	4798      	blx	r3
}
 800fce2:	bf00      	nop
 800fce4:	3708      	adds	r7, #8
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}

0800fcea <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800fcea:	b580      	push	{r7, lr}
 800fcec:	b082      	sub	sp, #8
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d008      	beq.n	800fd0c <_ZN19CompositeTestOutput5flushEv+0x22>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	691a      	ldr	r2, [r3, #16]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	691b      	ldr	r3, [r3, #16]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	334c      	adds	r3, #76	; 0x4c
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4610      	mov	r0, r2
 800fd0a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	695b      	ldr	r3, [r3, #20]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d008      	beq.n	800fd26 <_ZN19CompositeTestOutput5flushEv+0x3c>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	695a      	ldr	r2, [r3, #20]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	695b      	ldr	r3, [r3, #20]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	334c      	adds	r3, #76	; 0x4c
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4610      	mov	r0, r2
 800fd24:	4798      	blx	r3
}
 800fd26:	bf00      	nop
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800fd2e:	b480      	push	{r7}
 800fd30:	b085      	sub	sp, #20
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	60f8      	str	r0, [r7, #12]
 800fd36:	60b9      	str	r1, [r7, #8]
 800fd38:	607a      	str	r2, [r7, #4]
    }
 800fd3a:	bf00      	nop
 800fd3c:	3714      	adds	r7, #20
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr

0800fd46 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800fd46:	b480      	push	{r7}
 800fd48:	b085      	sub	sp, #20
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	60f8      	str	r0, [r7, #12]
 800fd4e:	60b9      	str	r1, [r7, #8]
 800fd50:	607a      	str	r2, [r7, #4]
    }
 800fd52:	bf00      	nop
 800fd54:	3714      	adds	r7, #20
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr
	...

0800fd60 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800fd6a:	4a0b      	ldr	r2, [pc, #44]	; (800fd98 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	601a      	str	r2, [r3, #0]
 800fd70:	f000 f9ce 	bl	8010110 <_ZN14NullTestPlugin8instanceEv>
 800fd74:	4602      	mov	r2, r0
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	605a      	str	r2, [r3, #4]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	3308      	adds	r3, #8
 800fd7e:	6839      	ldr	r1, [r7, #0]
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fb fb46 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2201      	movs	r2, #1
 800fd8a:	741a      	strb	r2, [r3, #16]
{
}
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3708      	adds	r7, #8
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
 800fd96:	bf00      	nop
 800fd98:	08026510 	.word	0x08026510

0800fd9c <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800fda6:	4a0a      	ldr	r2, [pc, #40]	; (800fdd0 <_ZN10TestPluginC1EPS_+0x34>)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	601a      	str	r2, [r3, #0]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	683a      	ldr	r2, [r7, #0]
 800fdb0:	605a      	str	r2, [r3, #4]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	3308      	adds	r3, #8
 800fdb6:	4907      	ldr	r1, [pc, #28]	; (800fdd4 <_ZN10TestPluginC1EPS_+0x38>)
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7fb fad6 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	741a      	strb	r2, [r3, #16]
{
}
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3708      	adds	r7, #8
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	08026510 	.word	0x08026510
 800fdd4:	080232a4 	.word	0x080232a4

0800fdd8 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	4a06      	ldr	r2, [pc, #24]	; (800fdfc <_ZN10TestPluginD1Ev+0x24>)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	601a      	str	r2, [r3, #0]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	3308      	adds	r3, #8
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fb fe75 	bl	800bada <_ZN12SimpleStringD1Ev>
{
}
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3708      	adds	r7, #8
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	08026510 	.word	0x08026510

0800fe00 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
}
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f7ff ffe5 	bl	800fdd8 <_ZN10TestPluginD1Ev>
 800fe0e:	2114      	movs	r1, #20
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f7f8 fefb 	bl	8008c0c <_ZdlPvj>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3708      	adds	r7, #8
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b083      	sub	sp, #12
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	683a      	ldr	r2, [r7, #0]
 800fe2e:	605a      	str	r2, [r3, #4]
    return this;
 800fe30:	687b      	ldr	r3, [r7, #4]
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	370c      	adds	r7, #12
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr

0800fe3e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b084      	sub	sp, #16
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	60f8      	str	r0, [r7, #12]
 800fe46:	60b9      	str	r1, [r7, #8]
 800fe48:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	7c1b      	ldrb	r3, [r3, #16]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d007      	beq.n	800fe62 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	3308      	adds	r3, #8
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	687a      	ldr	r2, [r7, #4]
 800fe5c:	68b9      	ldr	r1, [r7, #8]
 800fe5e:	68f8      	ldr	r0, [r7, #12]
 800fe60:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	6858      	ldr	r0, [r3, #4]
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	3314      	adds	r3, #20
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	68b9      	ldr	r1, [r7, #8]
 800fe74:	4798      	blx	r3
}
 800fe76:	bf00      	nop
 800fe78:	3710      	adds	r7, #16
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b084      	sub	sp, #16
 800fe82:	af00      	add	r7, sp, #0
 800fe84:	60f8      	str	r0, [r7, #12]
 800fe86:	60b9      	str	r1, [r7, #8]
 800fe88:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	6858      	ldr	r0, [r3, #4]
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	3318      	adds	r3, #24
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	68b9      	ldr	r1, [r7, #8]
 800fe9c:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	7c1b      	ldrb	r3, [r3, #16]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d007      	beq.n	800feb6 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	330c      	adds	r3, #12
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	68b9      	ldr	r1, [r7, #8]
 800feb2:	68f8      	ldr	r0, [r7, #12]
 800feb4:	4798      	blx	r3
}
 800feb6:	bf00      	nop
 800feb8:	3710      	adds	r7, #16
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800febe:	b590      	push	{r4, r7, lr}
 800fec0:	b085      	sub	sp, #20
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	60f8      	str	r0, [r7, #12]
 800fec6:	60b9      	str	r1, [r7, #8]
 800fec8:	607a      	str	r2, [r7, #4]
 800feca:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	331c      	adds	r3, #28
 800fed2:	681c      	ldr	r4, [r3, #0]
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	687a      	ldr	r2, [r7, #4]
 800fed8:	68b9      	ldr	r1, [r7, #8]
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	47a0      	blx	r4
 800fede:	4603      	mov	r3, r0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3714      	adds	r7, #20
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd90      	pop	{r4, r7, pc}

0800fee8 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800fee8:	b590      	push	{r4, r7, lr}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	607a      	str	r2, [r7, #4]
 800fef4:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	3310      	adds	r3, #16
 800fefc:	681c      	ldr	r4, [r3, #0]
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	68b9      	ldr	r1, [r7, #8]
 800ff04:	68f8      	ldr	r0, [r7, #12]
 800ff06:	47a0      	blx	r4
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d001      	beq.n	800ff12 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e011      	b.n	800ff36 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00c      	beq.n	800ff34 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	6858      	ldr	r0, [r3, #4]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	331c      	adds	r3, #28
 800ff26:	681c      	ldr	r4, [r3, #0]
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	68b9      	ldr	r1, [r7, #8]
 800ff2e:	47a0      	blx	r4
 800ff30:	4603      	mov	r3, r0
 800ff32:	e000      	b.n	800ff36 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800ff34:	2300      	movs	r3, #0
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3714      	adds	r7, #20
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd90      	pop	{r4, r7, pc}

0800ff3e <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800ff3e:	b480      	push	{r7}
 800ff40:	b083      	sub	sp, #12
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	6078      	str	r0, [r7, #4]
    return name_;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	3308      	adds	r3, #8
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	370c      	adds	r7, #12
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr

0800ff56 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800ff56:	b580      	push	{r7, lr}
 800ff58:	b082      	sub	sp, #8
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
 800ff5e:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	3308      	adds	r3, #8
 800ff64:	4619      	mov	r1, r3
 800ff66:	6838      	ldr	r0, [r7, #0]
 800ff68:	f7fb fdc3 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d001      	beq.n	800ff76 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	e00d      	b.n	800ff92 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d007      	beq.n	800ff8e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	6839      	ldr	r1, [r7, #0]
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7ff ffe6 	bl	800ff56 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	e001      	b.n	800ff92 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	685b      	ldr	r3, [r3, #4]
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3708      	adds	r7, #8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800ff9a:	b480      	push	{r7}
 800ff9c:	b083      	sub	sp, #12
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
    return next_;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	685b      	ldr	r3, [r3, #4]
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	370c      	adds	r7, #12
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b084      	sub	sp, #16
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
 800ffba:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d00e      	beq.n	800ffe6 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7ff ffb6 	bl	800ff3e <_ZN10TestPlugin7getNameEv>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	6839      	ldr	r1, [r7, #0]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fb fd8b 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e000      	b.n	800ffe8 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d007      	beq.n	800fffc <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	685a      	ldr	r2, [r3, #4]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800fffc:	68fb      	ldr	r3, [r7, #12]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 8010006:	b480      	push	{r7}
 8010008:	b083      	sub	sp, #12
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2200      	movs	r2, #0
 8010012:	741a      	strb	r2, [r3, #16]
}
 8010014:	bf00      	nop
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 8010020:	b480      	push	{r7}
 8010022:	b083      	sub	sp, #12
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2201      	movs	r2, #1
 801002c:	741a      	strb	r2, [r3, #16]
}
 801002e:	bf00      	nop
 8010030:	370c      	adds	r7, #12
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr

0801003a <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 801003a:	b480      	push	{r7}
 801003c:	b083      	sub	sp, #12
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
    return enabled_;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	7c1b      	ldrb	r3, [r3, #16]
}
 8010046:	4618      	mov	r0, r3
 8010048:	370c      	adds	r7, #12
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr
	...

08010054 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6839      	ldr	r1, [r7, #0]
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff fe7c 	bl	800fd60 <_ZN10TestPluginC1ERK12SimpleString>
 8010068:	4a05      	ldr	r2, [pc, #20]	; (8010080 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 801006e:	4b05      	ldr	r3, [pc, #20]	; (8010084 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8010070:	2200      	movs	r2, #0
 8010072:	601a      	str	r2, [r3, #0]
}
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	4618      	mov	r0, r3
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	080264cc 	.word	0x080264cc
 8010084:	200007ec 	.word	0x200007ec

08010088 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8010088:	b480      	push	{r7}
 801008a:	b087      	sub	sp, #28
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8010094:	4b0e      	ldr	r3, [pc, #56]	; (80100d0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	3b01      	subs	r3, #1
 801009a:	617b      	str	r3, [r7, #20]
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	db0d      	blt.n	80100be <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 80100a2:	4a0c      	ldr	r2, [pc, #48]	; (80100d4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80100aa:	490a      	ldr	r1, [pc, #40]	; (80100d4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	00db      	lsls	r3, r3, #3
 80100b0:	440b      	add	r3, r1
 80100b2:	685b      	ldr	r3, [r3, #4]
 80100b4:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	3b01      	subs	r3, #1
 80100ba:	617b      	str	r3, [r7, #20]
 80100bc:	e7ee      	b.n	801009c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 80100be:	4b04      	ldr	r3, [pc, #16]	; (80100d0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 80100c0:	2200      	movs	r2, #0
 80100c2:	601a      	str	r2, [r3, #0]
}
 80100c4:	bf00      	nop
 80100c6:	371c      	adds	r7, #28
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr
 80100d0:	200007ec 	.word	0x200007ec
 80100d4:	200007f0 	.word	0x200007f0

080100d8 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2100      	movs	r1, #0
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7ff fe59 	bl	800fd9c <_ZN10TestPluginC1EPS_>
 80100ea:	4a04      	ldr	r2, [pc, #16]	; (80100fc <_ZN14NullTestPluginC1Ev+0x24>)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	601a      	str	r2, [r3, #0]
{
}
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	4618      	mov	r0, r3
 80100f4:	3708      	adds	r7, #8
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	08026488 	.word	0x08026488

08010100 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8010100:	b580      	push	{r7, lr}
 8010102:	af00      	add	r7, sp, #0
 8010104:	4801      	ldr	r0, [pc, #4]	; (801010c <__tcf_0+0xc>)
 8010106:	f000 f849 	bl	801019c <_ZN14NullTestPluginD1Ev>
 801010a:	bd80      	pop	{r7, pc}
 801010c:	200008f0 	.word	0x200008f0

08010110 <_ZN14NullTestPlugin8instanceEv>:
{
 8010110:	b580      	push	{r7, lr}
 8010112:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8010114:	4b12      	ldr	r3, [pc, #72]	; (8010160 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	f3bf 8f5b 	dmb	ish
 801011c:	b2db      	uxtb	r3, r3
 801011e:	f003 0301 	and.w	r3, r3, #1
 8010122:	2b00      	cmp	r3, #0
 8010124:	bf0c      	ite	eq
 8010126:	2301      	moveq	r3, #1
 8010128:	2300      	movne	r3, #0
 801012a:	b2db      	uxtb	r3, r3
 801012c:	2b00      	cmp	r3, #0
 801012e:	d013      	beq.n	8010158 <_ZN14NullTestPlugin8instanceEv+0x48>
 8010130:	480b      	ldr	r0, [pc, #44]	; (8010160 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8010132:	f00d ffd9 	bl	801e0e8 <__cxa_guard_acquire>
 8010136:	4603      	mov	r3, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	bf14      	ite	ne
 801013c:	2301      	movne	r3, #1
 801013e:	2300      	moveq	r3, #0
 8010140:	b2db      	uxtb	r3, r3
 8010142:	2b00      	cmp	r3, #0
 8010144:	d008      	beq.n	8010158 <_ZN14NullTestPlugin8instanceEv+0x48>
 8010146:	4807      	ldr	r0, [pc, #28]	; (8010164 <_ZN14NullTestPlugin8instanceEv+0x54>)
 8010148:	f7ff ffc6 	bl	80100d8 <_ZN14NullTestPluginC1Ev>
 801014c:	4804      	ldr	r0, [pc, #16]	; (8010160 <_ZN14NullTestPlugin8instanceEv+0x50>)
 801014e:	f00d ffd7 	bl	801e100 <__cxa_guard_release>
 8010152:	4805      	ldr	r0, [pc, #20]	; (8010168 <_ZN14NullTestPlugin8instanceEv+0x58>)
 8010154:	f00d fffb 	bl	801e14e <atexit>
    return &_instance;
 8010158:	4b02      	ldr	r3, [pc, #8]	; (8010164 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 801015a:	4618      	mov	r0, r3
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	20000904 	.word	0x20000904
 8010164:	200008f0 	.word	0x200008f0
 8010168:	08010101 	.word	0x08010101

0801016c <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 801016c:	b480      	push	{r7}
 801016e:	b085      	sub	sp, #20
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
}
 8010178:	bf00      	nop
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8010184:	b480      	push	{r7}
 8010186:	b085      	sub	sp, #20
 8010188:	af00      	add	r7, sp, #0
 801018a:	60f8      	str	r0, [r7, #12]
 801018c:	60b9      	str	r1, [r7, #8]
 801018e:	607a      	str	r2, [r7, #4]
}
 8010190:	bf00      	nop
 8010192:	3714      	adds	r7, #20
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	4a05      	ldr	r2, [pc, #20]	; (80101bc <_ZN14NullTestPluginD1Ev+0x20>)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	601a      	str	r2, [r3, #0]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7ff fe13 	bl	800fdd8 <_ZN10TestPluginD1Ev>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	4618      	mov	r0, r3
 80101b6:	3708      	adds	r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	08026488 	.word	0x08026488

080101c0 <_ZN14NullTestPluginD0Ev>:
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7ff ffe7 	bl	801019c <_ZN14NullTestPluginD1Ev>
 80101ce:	2114      	movs	r1, #20
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f7f8 fd1b 	bl	8008c0c <_ZdlPvj>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4618      	mov	r0, r3
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 80101e8:	4a0f      	ldr	r2, [pc, #60]	; (8010228 <_ZN12TestRegistryC1Ev+0x48>)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	601a      	str	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	605a      	str	r2, [r3, #4]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	609a      	str	r2, [r3, #8]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	60da      	str	r2, [r3, #12]
 8010200:	f7ff ff86 	bl	8010110 <_ZN14NullTestPlugin8instanceEv>
 8010204:	4602      	mov	r2, r0
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	611a      	str	r2, [r3, #16]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	751a      	strb	r2, [r3, #20]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	619a      	str	r2, [r3, #24]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2200      	movs	r2, #0
 801021a:	771a      	strb	r2, [r3, #28]
{
}
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	4618      	mov	r0, r3
 8010220:	3708      	adds	r7, #8
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	08026554 	.word	0x08026554

0801022c <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	4a04      	ldr	r2, [pc, #16]	; (8010248 <_ZN12TestRegistryD1Ev+0x1c>)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	601a      	str	r2, [r3, #0]
{
}
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4618      	mov	r0, r3
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	08026554 	.word	0x08026554

0801024c <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
}
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f7ff ffe9 	bl	801022c <_ZN12TestRegistryD1Ev>
 801025a:	2120      	movs	r1, #32
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f7f8 fcd5 	bl	8008c0c <_ZdlPvj>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4618      	mov	r0, r3
 8010266:	3708      	adds	r7, #8
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b082      	sub	sp, #8
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	3308      	adds	r3, #8
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	687a      	ldr	r2, [r7, #4]
 8010280:	6852      	ldr	r2, [r2, #4]
 8010282:	4611      	mov	r1, r2
 8010284:	6838      	ldr	r0, [r7, #0]
 8010286:	4798      	blx	r3
 8010288:	4602      	mov	r2, r0
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	605a      	str	r2, [r3, #4]
}
 801028e:	bf00      	nop
 8010290:	3708      	adds	r7, #8
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}

08010296 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b084      	sub	sp, #16
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
 801029e:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 80102a0:	2301      	movs	r3, #1
 80102a2:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	3308      	adds	r3, #8
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	6838      	ldr	r0, [r7, #0]
 80102ae:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	60bb      	str	r3, [r7, #8]
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d05c      	beq.n	8010376 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	7d1b      	ldrb	r3, [r3, #20]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d005      	beq.n	80102d0 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	3380      	adds	r3, #128	; 0x80
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	68b8      	ldr	r0, [r7, #8]
 80102ce:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	7f1b      	ldrb	r3, [r3, #28]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d005      	beq.n	80102e4 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	3384      	adds	r3, #132	; 0x84
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	68b8      	ldr	r0, [r7, #8]
 80102e2:	4798      	blx	r3

        if (groupStart) {
 80102e4:	7bfb      	ldrb	r3, [r7, #15]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d008      	beq.n	80102fc <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	3310      	adds	r3, #16
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	68b9      	ldr	r1, [r7, #8]
 80102f4:	6838      	ldr	r0, [r7, #0]
 80102f6:	4798      	blx	r3
            groupStart = false;
 80102f8:	2300      	movs	r3, #0
 80102fa:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	3320      	adds	r3, #32
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	6838      	ldr	r0, [r7, #0]
 8010306:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8010308:	683a      	ldr	r2, [r7, #0]
 801030a:	68b9      	ldr	r1, [r7, #8]
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 fb79 	bl	8010a04 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	d016      	beq.n	8010346 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	3318      	adds	r3, #24
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	68b9      	ldr	r1, [r7, #8]
 8010322:	6838      	ldr	r0, [r7, #0]
 8010324:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	3390      	adds	r3, #144	; 0x90
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	6911      	ldr	r1, [r2, #16]
 8010332:	683a      	ldr	r2, [r7, #0]
 8010334:	68b8      	ldr	r0, [r7, #8]
 8010336:	4798      	blx	r3
            result.currentTestEnded(test);
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	331c      	adds	r3, #28
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	68b9      	ldr	r1, [r7, #8]
 8010342:	6838      	ldr	r0, [r7, #0]
 8010344:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 8010346:	68b9      	ldr	r1, [r7, #8]
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 fa5b 	bl	8010804 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 801034e:	4603      	mov	r3, r0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d008      	beq.n	8010366 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8010354:	2301      	movs	r3, #1
 8010356:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	3314      	adds	r3, #20
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	68b9      	ldr	r1, [r7, #8]
 8010362:	6838      	ldr	r0, [r7, #0]
 8010364:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	330c      	adds	r3, #12
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	68b8      	ldr	r0, [r7, #8]
 8010370:	4798      	blx	r3
 8010372:	60b8      	str	r0, [r7, #8]
 8010374:	e79f      	b.n	80102b6 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	330c      	adds	r3, #12
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	6838      	ldr	r0, [r7, #0]
 8010380:	4798      	blx	r3
    currentRepetition_++;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	699b      	ldr	r3, [r3, #24]
 8010386:	1c5a      	adds	r2, r3, #1
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	619a      	str	r2, [r3, #24]
}
 801038c:	bf00      	nop
 801038e:	3710      	adds	r7, #16
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 8010394:	b590      	push	{r4, r7, lr}
 8010396:	b08f      	sub	sp, #60	; 0x3c
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 801039e:	f107 0314 	add.w	r3, r7, #20
 80103a2:	4953      	ldr	r1, [pc, #332]	; (80104f0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fa ffe0 	bl	800b36a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	685b      	ldr	r3, [r3, #4]
 80103ae:	637b      	str	r3, [r7, #52]	; 0x34
 80103b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d04d      	beq.n	8010452 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 80103b6:	f107 030c 	add.w	r3, r7, #12
 80103ba:	494d      	ldr	r1, [pc, #308]	; (80104f0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80103bc:	4618      	mov	r0, r3
 80103be:	f7fa ffd4 	bl	800b36a <_ZN12SimpleStringC1EPKc>
        gname += "#";
 80103c2:	f107 030c 	add.w	r3, r7, #12
 80103c6:	494b      	ldr	r1, [pc, #300]	; (80104f4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fb fc15 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 80103ce:	f107 031c 	add.w	r3, r7, #28
 80103d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80103d4:	4618      	mov	r0, r3
 80103d6:	f001 f9d2 	bl	801177e <_ZNK10UtestShell8getGroupEv>
 80103da:	f107 021c 	add.w	r2, r7, #28
 80103de:	f107 030c 	add.w	r3, r7, #12
 80103e2:	4611      	mov	r1, r2
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7fb fbf5 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 80103ea:	f107 031c 	add.w	r3, r7, #28
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7fb fb73 	bl	800bada <_ZN12SimpleStringD1Ev>
        gname += "#";
 80103f4:	f107 030c 	add.w	r3, r7, #12
 80103f8:	493e      	ldr	r1, [pc, #248]	; (80104f4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fb fbfc 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8010400:	f107 020c 	add.w	r2, r7, #12
 8010404:	f107 0314 	add.w	r3, r7, #20
 8010408:	4611      	mov	r1, r2
 801040a:	4618      	mov	r0, r3
 801040c:	f7fb f82b 	bl	800b466 <_ZNK12SimpleString8containsERKS_>
 8010410:	4603      	mov	r3, r0
 8010412:	f083 0301 	eor.w	r3, r3, #1
 8010416:	b2db      	uxtb	r3, r3
 8010418:	2b00      	cmp	r3, #0
 801041a:	d00d      	beq.n	8010438 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 801041c:	f107 020c 	add.w	r2, r7, #12
 8010420:	f107 0314 	add.w	r3, r7, #20
 8010424:	4611      	mov	r1, r2
 8010426:	4618      	mov	r0, r3
 8010428:	f7fb fbd4 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 801042c:	f107 0314 	add.w	r3, r7, #20
 8010430:	4931      	ldr	r1, [pc, #196]	; (80104f8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8010432:	4618      	mov	r0, r3
 8010434:	f7fb fbe0 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8010438:	f107 030c 	add.w	r3, r7, #12
 801043c:	4618      	mov	r0, r3
 801043e:	f7fb fb4c 	bl	800bada <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8010442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	330c      	adds	r3, #12
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801044c:	4798      	blx	r3
 801044e:	6378      	str	r0, [r7, #52]	; 0x34
 8010450:	e7ae      	b.n	80103b0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 8010452:	f107 0314 	add.w	r3, r7, #20
 8010456:	4a26      	ldr	r2, [pc, #152]	; (80104f0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8010458:	4926      	ldr	r1, [pc, #152]	; (80104f4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 801045a:	4618      	mov	r0, r3
 801045c:	f7fb f99a 	bl	800b794 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8010460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010464:	4924      	ldr	r1, [pc, #144]	; (80104f8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8010466:	4618      	mov	r0, r3
 8010468:	f7fa ff7f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801046c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010470:	f107 0314 	add.w	r3, r7, #20
 8010474:	4611      	mov	r1, r2
 8010476:	4618      	mov	r0, r3
 8010478:	f7fb f874 	bl	800b564 <_ZNK12SimpleString8endsWithERKS_>
 801047c:	4603      	mov	r3, r0
 801047e:	461c      	mov	r4, r3
 8010480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010484:	4618      	mov	r0, r3
 8010486:	f7fb fb28 	bl	800bada <_ZN12SimpleStringD1Ev>
 801048a:	2c00      	cmp	r4, #0
 801048c:	d01a      	beq.n	80104c4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 801048e:	f107 0314 	add.w	r3, r7, #20
 8010492:	4618      	mov	r0, r3
 8010494:	f7fb fb00 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 8010498:	4603      	mov	r3, r0
 801049a:	3b01      	subs	r3, #1
 801049c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80104a0:	f107 0114 	add.w	r1, r7, #20
 80104a4:	2200      	movs	r2, #0
 80104a6:	f7fb fc21 	bl	800bcec <_ZNK12SimpleString9subStringEjj>
 80104aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80104ae:	f107 0314 	add.w	r3, r7, #20
 80104b2:	4611      	mov	r1, r2
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7fa ffc4 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 80104ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80104be:	4618      	mov	r0, r3
 80104c0:	f7fb fb0b 	bl	800bada <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	3338      	adds	r3, #56	; 0x38
 80104ca:	681c      	ldr	r4, [r3, #0]
 80104cc:	f107 0314 	add.w	r3, r7, #20
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7fb fad5 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 80104d6:	4603      	mov	r3, r0
 80104d8:	4619      	mov	r1, r3
 80104da:	6838      	ldr	r0, [r7, #0]
 80104dc:	47a0      	blx	r4
    SimpleString groupList;
 80104de:	f107 0314 	add.w	r3, r7, #20
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7fb faf9 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 80104e8:	bf00      	nop
 80104ea:	373c      	adds	r7, #60	; 0x3c
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd90      	pop	{r4, r7, pc}
 80104f0:	080232f4 	.word	0x080232f4
 80104f4:	080232f8 	.word	0x080232f8
 80104f8:	080232fc 	.word	0x080232fc

080104fc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 80104fc:	b590      	push	{r4, r7, lr}
 80104fe:	b091      	sub	sp, #68	; 0x44
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 8010506:	f107 0314 	add.w	r3, r7, #20
 801050a:	4964      	ldr	r1, [pc, #400]	; (801069c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 801050c:	4618      	mov	r0, r3
 801050e:	f7fa ff2c 	bl	800b36a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801051a:	2b00      	cmp	r3, #0
 801051c:	d06e      	beq.n	80105fc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 801051e:	683a      	ldr	r2, [r7, #0]
 8010520:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 fa6e 	bl	8010a04 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d05e      	beq.n	80105ec <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 801052e:	f107 030c 	add.w	r3, r7, #12
 8010532:	495a      	ldr	r1, [pc, #360]	; (801069c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8010534:	4618      	mov	r0, r3
 8010536:	f7fa ff18 	bl	800b36a <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 801053a:	f107 030c 	add.w	r3, r7, #12
 801053e:	4958      	ldr	r1, [pc, #352]	; (80106a0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8010540:	4618      	mov	r0, r3
 8010542:	f7fb fb59 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 8010546:	f107 031c 	add.w	r3, r7, #28
 801054a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801054c:	4618      	mov	r0, r3
 801054e:	f001 f916 	bl	801177e <_ZNK10UtestShell8getGroupEv>
 8010552:	f107 021c 	add.w	r2, r7, #28
 8010556:	f107 030c 	add.w	r3, r7, #12
 801055a:	4611      	mov	r1, r2
 801055c:	4618      	mov	r0, r3
 801055e:	f7fb fb39 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8010562:	f107 031c 	add.w	r3, r7, #28
 8010566:	4618      	mov	r0, r3
 8010568:	f7fb fab7 	bl	800bada <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 801056c:	f107 030c 	add.w	r3, r7, #12
 8010570:	494c      	ldr	r1, [pc, #304]	; (80106a4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 8010572:	4618      	mov	r0, r3
 8010574:	f7fb fb40 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 8010578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801057c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801057e:	4618      	mov	r0, r3
 8010580:	f001 f8ee 	bl	8011760 <_ZNK10UtestShell7getNameEv>
 8010584:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010588:	f107 030c 	add.w	r3, r7, #12
 801058c:	4611      	mov	r1, r2
 801058e:	4618      	mov	r0, r3
 8010590:	f7fb fb20 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8010594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010598:	4618      	mov	r0, r3
 801059a:	f7fb fa9e 	bl	800bada <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 801059e:	f107 030c 	add.w	r3, r7, #12
 80105a2:	493f      	ldr	r1, [pc, #252]	; (80106a0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7fb fb27 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 80105aa:	f107 020c 	add.w	r2, r7, #12
 80105ae:	f107 0314 	add.w	r3, r7, #20
 80105b2:	4611      	mov	r1, r2
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fa ff56 	bl	800b466 <_ZNK12SimpleString8containsERKS_>
 80105ba:	4603      	mov	r3, r0
 80105bc:	f083 0301 	eor.w	r3, r3, #1
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00d      	beq.n	80105e2 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 80105c6:	f107 020c 	add.w	r2, r7, #12
 80105ca:	f107 0314 	add.w	r3, r7, #20
 80105ce:	4611      	mov	r1, r2
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7fb faff 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 80105d6:	f107 0314 	add.w	r3, r7, #20
 80105da:	4933      	ldr	r1, [pc, #204]	; (80106a8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 80105dc:	4618      	mov	r0, r3
 80105de:	f7fb fb0b 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 80105e2:	f107 030c 	add.w	r3, r7, #12
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fb fa77 	bl	800bada <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80105ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	330c      	adds	r3, #12
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80105f6:	4798      	blx	r3
 80105f8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80105fa:	e78d      	b.n	8010518 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 80105fc:	f107 0314 	add.w	r3, r7, #20
 8010600:	4a26      	ldr	r2, [pc, #152]	; (801069c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8010602:	4927      	ldr	r1, [pc, #156]	; (80106a0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8010604:	4618      	mov	r0, r3
 8010606:	f7fb f8c5 	bl	800b794 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 801060a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801060e:	4926      	ldr	r1, [pc, #152]	; (80106a8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8010610:	4618      	mov	r0, r3
 8010612:	f7fa feaa 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8010616:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801061a:	f107 0314 	add.w	r3, r7, #20
 801061e:	4611      	mov	r1, r2
 8010620:	4618      	mov	r0, r3
 8010622:	f7fa ff9f 	bl	800b564 <_ZNK12SimpleString8endsWithERKS_>
 8010626:	4603      	mov	r3, r0
 8010628:	461c      	mov	r4, r3
 801062a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801062e:	4618      	mov	r0, r3
 8010630:	f7fb fa53 	bl	800bada <_ZN12SimpleStringD1Ev>
 8010634:	2c00      	cmp	r4, #0
 8010636:	d01a      	beq.n	801066e <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8010638:	f107 0314 	add.w	r3, r7, #20
 801063c:	4618      	mov	r0, r3
 801063e:	f7fb fa2b 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 8010642:	4603      	mov	r3, r0
 8010644:	3b01      	subs	r3, #1
 8010646:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801064a:	f107 0114 	add.w	r1, r7, #20
 801064e:	2200      	movs	r2, #0
 8010650:	f7fb fb4c 	bl	800bcec <_ZNK12SimpleString9subStringEjj>
 8010654:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010658:	f107 0314 	add.w	r3, r7, #20
 801065c:	4611      	mov	r1, r2
 801065e:	4618      	mov	r0, r3
 8010660:	f7fa feef 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 8010664:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010668:	4618      	mov	r0, r3
 801066a:	f7fb fa36 	bl	800bada <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	3338      	adds	r3, #56	; 0x38
 8010674:	681c      	ldr	r4, [r3, #0]
 8010676:	f107 0314 	add.w	r3, r7, #20
 801067a:	4618      	mov	r0, r3
 801067c:	f7fb fa00 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8010680:	4603      	mov	r3, r0
 8010682:	4619      	mov	r1, r3
 8010684:	6838      	ldr	r0, [r7, #0]
 8010686:	47a0      	blx	r4
    SimpleString groupAndNameList;
 8010688:	f107 0314 	add.w	r3, r7, #20
 801068c:	4618      	mov	r0, r3
 801068e:	f7fb fa24 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8010692:	bf00      	nop
 8010694:	3744      	adds	r7, #68	; 0x44
 8010696:	46bd      	mov	sp, r7
 8010698:	bd90      	pop	{r4, r7, pc}
 801069a:	bf00      	nop
 801069c:	080232f4 	.word	0x080232f4
 80106a0:	080232f8 	.word	0x080232f8
 80106a4:	08023300 	.word	0x08023300
 80106a8:	080232fc 	.word	0x080232fc

080106ac <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 80106ac:	b590      	push	{r4, r7, lr}
 80106ae:	b091      	sub	sp, #68	; 0x44
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 80106b6:	f107 0314 	add.w	r3, r7, #20
 80106ba:	494f      	ldr	r1, [pc, #316]	; (80107f8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fa fe54 	bl	800b36a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d07d      	beq.n	80107ca <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 80106ce:	f107 030c 	add.w	r3, r7, #12
 80106d2:	4949      	ldr	r1, [pc, #292]	; (80107f8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fa fe48 	bl	800b36a <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 80106da:	f107 031c 	add.w	r3, r7, #28
 80106de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106e0:	4618      	mov	r0, r3
 80106e2:	f001 f84c 	bl	801177e <_ZNK10UtestShell8getGroupEv>
 80106e6:	f107 021c 	add.w	r2, r7, #28
 80106ea:	f107 030c 	add.w	r3, r7, #12
 80106ee:	4611      	mov	r1, r2
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fb fa6f 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 80106f6:	f107 031c 	add.w	r3, r7, #28
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7fb f9ed 	bl	800bada <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8010700:	f107 030c 	add.w	r3, r7, #12
 8010704:	493d      	ldr	r1, [pc, #244]	; (80107fc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8010706:	4618      	mov	r0, r3
 8010708:	f7fb fa76 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 801070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010712:	4618      	mov	r0, r3
 8010714:	f001 f824 	bl	8011760 <_ZNK10UtestShell7getNameEv>
 8010718:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801071c:	f107 030c 	add.w	r3, r7, #12
 8010720:	4611      	mov	r1, r2
 8010722:	4618      	mov	r0, r3
 8010724:	f7fb fa56 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8010728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801072c:	4618      	mov	r0, r3
 801072e:	f7fb f9d4 	bl	800bada <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8010732:	f107 030c 	add.w	r3, r7, #12
 8010736:	4931      	ldr	r1, [pc, #196]	; (80107fc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8010738:	4618      	mov	r0, r3
 801073a:	f7fb fa5d 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 801073e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010742:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010744:	4618      	mov	r0, r3
 8010746:	f001 f8dc 	bl	8011902 <_ZNK10UtestShell7getFileEv>
 801074a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801074e:	f107 030c 	add.w	r3, r7, #12
 8010752:	4611      	mov	r1, r2
 8010754:	4618      	mov	r0, r3
 8010756:	f7fb fa3d 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801075a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801075e:	4618      	mov	r0, r3
 8010760:	f7fb f9bb 	bl	800bada <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8010764:	f107 030c 	add.w	r3, r7, #12
 8010768:	4924      	ldr	r1, [pc, #144]	; (80107fc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801076a:	4618      	mov	r0, r3
 801076c:	f7fb fa44 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8010770:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010772:	f001 f8d5 	bl	8011920 <_ZNK10UtestShell13getLineNumberEv>
 8010776:	4603      	mov	r3, r0
 8010778:	461a      	mov	r2, r3
 801077a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801077e:	4920      	ldr	r1, [pc, #128]	; (8010800 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8010780:	4618      	mov	r0, r3
 8010782:	f7fb feb1 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 8010786:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801078a:	f107 030c 	add.w	r3, r7, #12
 801078e:	4611      	mov	r1, r2
 8010790:	4618      	mov	r0, r3
 8010792:	f7fb fa1f 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8010796:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801079a:	4618      	mov	r0, r3
 801079c:	f7fb f99d 	bl	800bada <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 80107a0:	f107 020c 	add.w	r2, r7, #12
 80107a4:	f107 0314 	add.w	r3, r7, #20
 80107a8:	4611      	mov	r1, r2
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fb fa12 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 80107b0:	f107 030c 	add.w	r3, r7, #12
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fb f990 	bl	800bada <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80107ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	330c      	adds	r3, #12
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107c4:	4798      	blx	r3
 80107c6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80107c8:	e77e      	b.n	80106c8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	3338      	adds	r3, #56	; 0x38
 80107d0:	681c      	ldr	r4, [r3, #0]
 80107d2:	f107 0314 	add.w	r3, r7, #20
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fb f952 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 80107dc:	4603      	mov	r3, r0
 80107de:	4619      	mov	r1, r3
 80107e0:	6838      	ldr	r0, [r7, #0]
 80107e2:	47a0      	blx	r4
    SimpleString testLocations;
 80107e4:	f107 0314 	add.w	r3, r7, #20
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7fb f976 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 80107ee:	bf00      	nop
 80107f0:	3744      	adds	r7, #68	; 0x44
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd90      	pop	{r4, r7, pc}
 80107f6:	bf00      	nop
 80107f8:	080232f4 	.word	0x080232f4
 80107fc:	08023300 	.word	0x08023300
 8010800:	08023304 	.word	0x08023304

08010804 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8010804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010806:	b087      	sub	sp, #28
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 801080e:	2400      	movs	r4, #0
 8010810:	2500      	movs	r5, #0
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d028      	beq.n	801086a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	330c      	adds	r3, #12
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	6838      	ldr	r0, [r7, #0]
 8010822:	4798      	blx	r3
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d01f      	beq.n	801086a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801082a:	f107 0308 	add.w	r3, r7, #8
 801082e:	6839      	ldr	r1, [r7, #0]
 8010830:	4618      	mov	r0, r3
 8010832:	f000 ffa4 	bl	801177e <_ZNK10UtestShell8getGroupEv>
 8010836:	2401      	movs	r4, #1
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	330c      	adds	r3, #12
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	6838      	ldr	r0, [r7, #0]
 8010842:	4798      	blx	r3
 8010844:	4602      	mov	r2, r0
 8010846:	f107 0310 	add.w	r3, r7, #16
 801084a:	4611      	mov	r1, r2
 801084c:	4618      	mov	r0, r3
 801084e:	f000 ff96 	bl	801177e <_ZNK10UtestShell8getGroupEv>
 8010852:	2501      	movs	r5, #1
 8010854:	f107 0210 	add.w	r2, r7, #16
 8010858:	f107 0308 	add.w	r3, r7, #8
 801085c:	4611      	mov	r1, r2
 801085e:	4618      	mov	r0, r3
 8010860:	f7fb f98c 	bl	800bb7c <_ZneRK12SimpleStringS1_>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d001      	beq.n	801086e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 801086a:	2601      	movs	r6, #1
 801086c:	e000      	b.n	8010870 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 801086e:	2600      	movs	r6, #0
 8010870:	2d00      	cmp	r5, #0
 8010872:	d004      	beq.n	801087e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8010874:	f107 0310 	add.w	r3, r7, #16
 8010878:	4618      	mov	r0, r3
 801087a:	f7fb f92e 	bl	800bada <_ZN12SimpleStringD1Ev>
 801087e:	2c00      	cmp	r4, #0
 8010880:	d004      	beq.n	801088c <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8010882:	f107 0308 	add.w	r3, r7, #8
 8010886:	4618      	mov	r0, r3
 8010888:	f7fb f927 	bl	800bada <_ZN12SimpleStringD1Ev>
 801088c:	4633      	mov	r3, r6
}
 801088e:	4618      	mov	r0, r3
 8010890:	371c      	adds	r7, #28
 8010892:	46bd      	mov	sp, r7
 8010894:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010896 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 8010896:	b580      	push	{r7, lr}
 8010898:	b082      	sub	sp, #8
 801089a:	af00      	add	r7, sp, #0
 801089c:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d00a      	beq.n	80108bc <_ZN12TestRegistry10countTestsEv+0x26>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	685a      	ldr	r2, [r3, #4]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	685b      	ldr	r3, [r3, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	3310      	adds	r3, #16
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4610      	mov	r0, r2
 80108b6:	4798      	blx	r3
 80108b8:	4603      	mov	r3, r0
 80108ba:	e000      	b.n	80108be <_ZN12TestRegistry10countTestsEv+0x28>
 80108bc:	2300      	movs	r3, #0
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3708      	adds	r7, #8
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
	...

080108c8 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 80108c8:	b580      	push	{r7, lr}
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	4801      	ldr	r0, [pc, #4]	; (80108d4 <__tcf_0+0xc>)
 80108ce:	f7ff fcad 	bl	801022c <_ZN12TestRegistryD1Ev>
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	2000090c 	.word	0x2000090c

080108d8 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 80108dc:	4b15      	ldr	r3, [pc, #84]	; (8010934 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	f3bf 8f5b 	dmb	ish
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	f003 0301 	and.w	r3, r3, #1
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	bf0c      	ite	eq
 80108ee:	2301      	moveq	r3, #1
 80108f0:	2300      	movne	r3, #0
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d013      	beq.n	8010920 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 80108f8:	480e      	ldr	r0, [pc, #56]	; (8010934 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 80108fa:	f00d fbf5 	bl	801e0e8 <__cxa_guard_acquire>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	bf14      	ite	ne
 8010904:	2301      	movne	r3, #1
 8010906:	2300      	moveq	r3, #0
 8010908:	b2db      	uxtb	r3, r3
 801090a:	2b00      	cmp	r3, #0
 801090c:	d008      	beq.n	8010920 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 801090e:	480a      	ldr	r0, [pc, #40]	; (8010938 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8010910:	f7ff fc66 	bl	80101e0 <_ZN12TestRegistryC1Ev>
 8010914:	4807      	ldr	r0, [pc, #28]	; (8010934 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8010916:	f00d fbf3 	bl	801e100 <__cxa_guard_release>
 801091a:	4808      	ldr	r0, [pc, #32]	; (801093c <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 801091c:	f00d fc17 	bl	801e14e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8010920:	4b07      	ldr	r3, [pc, #28]	; (8010940 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d002      	beq.n	801092e <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8010928:	4b05      	ldr	r3, [pc, #20]	; (8010940 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	e000      	b.n	8010930 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 801092e:	4b02      	ldr	r3, [pc, #8]	; (8010938 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8010930:	4618      	mov	r0, r3
 8010932:	bd80      	pop	{r7, pc}
 8010934:	2000092c 	.word	0x2000092c
 8010938:	2000090c 	.word	0x2000090c
 801093c:	080108c9 	.word	0x080108c9
 8010940:	20000908 	.word	0x20000908

08010944 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 801094e:	4a04      	ldr	r2, [pc, #16]	; (8010960 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	6013      	str	r3, [r2, #0]
}
 8010954:	bf00      	nop
 8010956:	370c      	adds	r7, #12
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr
 8010960:	20000908 	.word	0x20000908

08010964 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00a      	beq.n	801098a <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	685a      	ldr	r2, [r3, #4]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	330c      	adds	r3, #12
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	4610      	mov	r0, r2
 8010984:	4798      	blx	r3
 8010986:	4603      	mov	r3, r0
 8010988:	e000      	b.n	801098c <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 801098a:	2300      	movs	r3, #0
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	6053      	str	r3, [r2, #4]

}
 8010990:	bf00      	nop
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	683a      	ldr	r2, [r7, #0]
 80109a6:	609a      	str	r2, [r3, #8]
}
 80109a8:	bf00      	nop
 80109aa:	370c      	adds	r7, #12
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	683a      	ldr	r2, [r7, #0]
 80109c2:	60da      	str	r2, [r3, #12]
}
 80109c4:	bf00      	nop
 80109c6:	370c      	adds	r7, #12
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr

080109d0 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2201      	movs	r2, #1
 80109dc:	771a      	strb	r2, [r3, #28]
}
 80109de:	bf00      	nop
 80109e0:	370c      	adds	r7, #12
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr

080109ea <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 80109ea:	b480      	push	{r7}
 80109ec:	b083      	sub	sp, #12
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2201      	movs	r2, #1
 80109f6:	751a      	strb	r2, [r3, #20]
}
 80109f8:	bf00      	nop
 80109fa:	370c      	adds	r7, #12
 80109fc:	46bd      	mov	sp, r7
 80109fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a02:	4770      	bx	lr

08010a04 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	60f8      	str	r0, [r7, #12]
 8010a0c:	60b9      	str	r1, [r7, #8]
 8010a0e:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	68d9      	ldr	r1, [r3, #12]
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	689b      	ldr	r3, [r3, #8]
 8010a18:	461a      	mov	r2, r3
 8010a1a:	68b8      	ldr	r0, [r7, #8]
 8010a1c:	f000 ffbb 	bl	8011996 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d001      	beq.n	8010a2a <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8010a26:	2301      	movs	r3, #1
 8010a28:	e006      	b.n	8010a38 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	332c      	adds	r3, #44	; 0x2c
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	4798      	blx	r3
        return false;
 8010a36:	2300      	movs	r3, #0
    }
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3710      	adds	r7, #16
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}

08010a40 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8010a48:	f7ff fb62 	bl	8010110 <_ZN14NullTestPlugin8instanceEv>
 8010a4c:	4602      	mov	r2, r0
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	611a      	str	r2, [r3, #16]
}
 8010a52:	bf00      	nop
 8010a54:	3708      	adds	r7, #8
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}

08010a5a <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b082      	sub	sp, #8
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	6078      	str	r0, [r7, #4]
 8010a62:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	3324      	adds	r3, #36	; 0x24
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	6912      	ldr	r2, [r2, #16]
 8010a70:	4611      	mov	r1, r2
 8010a72:	6838      	ldr	r0, [r7, #0]
 8010a74:	4798      	blx	r3
 8010a76:	4602      	mov	r2, r0
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	611a      	str	r2, [r3, #16]
}
 8010a7c:	bf00      	nop
 8010a7e:	3708      	adds	r7, #8
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8010a84:	b480      	push	{r7}
 8010a86:	b083      	sub	sp, #12
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	691b      	ldr	r3, [r3, #16]
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	691b      	ldr	r3, [r3, #16]
 8010aaa:	6839      	ldr	r1, [r7, #0]
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7ff fa52 	bl	800ff56 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8010ab2:	4603      	mov	r3, r0
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3708      	adds	r7, #8
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b082      	sub	sp, #8
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	691a      	ldr	r2, [r3, #16]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	691b      	ldr	r3, [r3, #16]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	3328      	adds	r3, #40	; 0x28
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	6839      	ldr	r1, [r7, #0]
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	4798      	blx	r3
 8010ada:	4602      	mov	r2, r0
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	691b      	ldr	r3, [r3, #16]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	bf0c      	ite	eq
 8010ae4:	2301      	moveq	r3, #1
 8010ae6:	2300      	movne	r3, #0
 8010ae8:	b2db      	uxtb	r3, r3
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00b      	beq.n	8010b06 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	691a      	ldr	r2, [r3, #16]
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	691b      	ldr	r3, [r3, #16]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	332c      	adds	r3, #44	; 0x2c
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	4610      	mov	r0, r2
 8010afe:	4798      	blx	r3
 8010b00:	4602      	mov	r2, r0
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	691b      	ldr	r3, [r3, #16]
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7ff fa17 	bl	800ff3e <_ZN10TestPlugin7getNameEv>
 8010b10:	4603      	mov	r3, r0
 8010b12:	6839      	ldr	r1, [r7, #0]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7fa ffec 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d00b      	beq.n	8010b38 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	691a      	ldr	r2, [r3, #16]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	691b      	ldr	r3, [r3, #16]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	332c      	adds	r3, #44	; 0x2c
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	4610      	mov	r0, r2
 8010b30:	4798      	blx	r3
 8010b32:	4602      	mov	r2, r0
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	691a      	ldr	r2, [r3, #16]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	691b      	ldr	r3, [r3, #16]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	3328      	adds	r3, #40	; 0x28
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	6839      	ldr	r1, [r7, #0]
 8010b48:	4610      	mov	r0, r2
 8010b4a:	4798      	blx	r3
}
 8010b4c:	bf00      	nop
 8010b4e:	3708      	adds	r7, #8
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
    int count = 0;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	691b      	ldr	r3, [r3, #16]
 8010b64:	60bb      	str	r3, [r7, #8]
 8010b66:	f7ff fad3 	bl	8010110 <_ZN14NullTestPlugin8instanceEv>
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	bf14      	ite	ne
 8010b72:	2301      	movne	r3, #1
 8010b74:	2300      	moveq	r3, #0
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d00a      	beq.n	8010b92 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	332c      	adds	r3, #44	; 0x2c
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	68b8      	ldr	r0, [r7, #8]
 8010b8c:	4798      	blx	r3
 8010b8e:	60b8      	str	r0, [r7, #8]
 8010b90:	e7e9      	b.n	8010b66 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8010b92:	68fb      	ldr	r3, [r7, #12]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3710      	adds	r7, #16
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b083      	sub	sp, #12
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
    return tests_;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	685b      	ldr	r3, [r3, #4]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b084      	sub	sp, #16
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	334c      	adds	r3, #76	; 0x4c
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	4798      	blx	r3
 8010bca:	4602      	mov	r2, r0
 8010bcc:	f107 0308 	add.w	r3, r7, #8
 8010bd0:	4611      	mov	r1, r2
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f002 f8f8 	bl	8012dc8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8010bd8:	f107 0308 	add.w	r3, r7, #8
 8010bdc:	6839      	ldr	r1, [r7, #0]
 8010bde:	4618      	mov	r0, r3
 8010be0:	f002 f980 	bl	8012ee4 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8010be4:	f107 0308 	add.w	r3, r7, #8
 8010be8:	4618      	mov	r0, r3
 8010bea:	f002 fa13 	bl	8013014 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8010bf4:	f107 0308 	add.w	r3, r7, #8
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f002 f939 	bl	8012e70 <_ZN22UtestShellPointerArrayD1Ev>
}
 8010bfe:	bf00      	nop
 8010c00:	3710      	adds	r7, #16
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}

08010c06 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8010c06:	b580      	push	{r7, lr}
 8010c08:	b084      	sub	sp, #16
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	334c      	adds	r3, #76	; 0x4c
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	4798      	blx	r3
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	f107 0308 	add.w	r3, r7, #8
 8010c20:	4611      	mov	r1, r2
 8010c22:	4618      	mov	r0, r3
 8010c24:	f002 f8d0 	bl	8012dc8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8010c28:	f107 0308 	add.w	r3, r7, #8
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f002 f995 	bl	8012f5c <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8010c32:	f107 0308 	add.w	r3, r7, #8
 8010c36:	4618      	mov	r0, r3
 8010c38:	f002 f9ec 	bl	8013014 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8010c42:	f107 0308 	add.w	r3, r7, #8
 8010c46:	4618      	mov	r0, r3
 8010c48:	f002 f912 	bl	8012e70 <_ZN22UtestShellPointerArrayD1Ev>
}
 8010c4c:	bf00      	nop
 8010c4e:	3710      	adds	r7, #16
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d00b      	beq.n	8010c82 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	330c      	adds	r3, #12
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	68f8      	ldr	r0, [r7, #12]
 8010c74:	4798      	blx	r3
 8010c76:	4602      	mov	r2, r0
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d001      	beq.n	8010c82 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8010c7e:	2301      	movs	r3, #1
 8010c80:	e000      	b.n	8010c84 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8010c82:	2300      	movs	r3, #0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d007      	beq.n	8010c98 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	330c      	adds	r3, #12
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	4798      	blx	r3
 8010c94:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 8010c96:	e7e5      	b.n	8010c64 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8010c98:	68fb      	ldr	r3, [r7, #12]
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3710      	adds	r7, #16
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 8010ca2:	b590      	push	{r4, r7, lr}
 8010ca4:	b087      	sub	sp, #28
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
 8010caa:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	617b      	str	r3, [r7, #20]
    while (current) {
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d01e      	beq.n	8010cf6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8010cb8:	f107 030c 	add.w	r3, r7, #12
 8010cbc:	6979      	ldr	r1, [r7, #20]
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f000 fd4e 	bl	8011760 <_ZNK10UtestShell7getNameEv>
 8010cc4:	f107 030c 	add.w	r3, r7, #12
 8010cc8:	6839      	ldr	r1, [r7, #0]
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7fa ff11 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	461c      	mov	r4, r3
 8010cd4:	f107 030c 	add.w	r3, r7, #12
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7fa fefe 	bl	800bada <_ZN12SimpleStringD1Ev>
 8010cde:	2c00      	cmp	r4, #0
 8010ce0:	d001      	beq.n	8010ce6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	e008      	b.n	8010cf8 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	330c      	adds	r3, #12
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	6978      	ldr	r0, [r7, #20]
 8010cf0:	4798      	blx	r3
 8010cf2:	6178      	str	r0, [r7, #20]
    while (current) {
 8010cf4:	e7dd      	b.n	8010cb2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8010cf6:	2300      	movs	r3, #0
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	371c      	adds	r7, #28
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd90      	pop	{r4, r7, pc}

08010d00 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8010d00:	b590      	push	{r4, r7, lr}
 8010d02:	b087      	sub	sp, #28
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	617b      	str	r3, [r7, #20]
    while (current) {
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d01e      	beq.n	8010d54 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 8010d16:	f107 030c 	add.w	r3, r7, #12
 8010d1a:	6979      	ldr	r1, [r7, #20]
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f000 fd2e 	bl	801177e <_ZNK10UtestShell8getGroupEv>
 8010d22:	f107 030c 	add.w	r3, r7, #12
 8010d26:	6839      	ldr	r1, [r7, #0]
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7fa fee2 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	461c      	mov	r4, r3
 8010d32:	f107 030c 	add.w	r3, r7, #12
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7fa fecf 	bl	800bada <_ZN12SimpleStringD1Ev>
 8010d3c:	2c00      	cmp	r4, #0
 8010d3e:	d001      	beq.n	8010d44 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	e008      	b.n	8010d56 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	330c      	adds	r3, #12
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	6978      	ldr	r0, [r7, #20]
 8010d4e:	4798      	blx	r3
 8010d50:	6178      	str	r0, [r7, #20]
    while (current) {
 8010d52:	e7dd      	b.n	8010d10 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8010d54:	2300      	movs	r3, #0
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	371c      	adds	r7, #28
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd90      	pop	{r4, r7, pc}
	...

08010d60 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8010d60:	b480      	push	{r7}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 8010d6a:	4a18      	ldr	r2, [pc, #96]	; (8010dcc <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	601a      	str	r2, [r3, #0]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	683a      	ldr	r2, [r7, #0]
 8010d74:	605a      	str	r2, [r3, #4]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	609a      	str	r2, [r3, #8]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	60da      	str	r2, [r3, #12]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2200      	movs	r2, #0
 8010d86:	611a      	str	r2, [r3, #16]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	615a      	str	r2, [r3, #20]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2200      	movs	r2, #0
 8010d92:	619a      	str	r2, [r3, #24]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2200      	movs	r2, #0
 8010d98:	61da      	str	r2, [r3, #28]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	621a      	str	r2, [r3, #32]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2200      	movs	r2, #0
 8010da4:	625a      	str	r2, [r3, #36]	; 0x24
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2200      	movs	r2, #0
 8010daa:	629a      	str	r2, [r3, #40]	; 0x28
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2200      	movs	r2, #0
 8010db0:	62da      	str	r2, [r3, #44]	; 0x2c
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2200      	movs	r2, #0
 8010db6:	631a      	str	r2, [r3, #48]	; 0x30
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2200      	movs	r2, #0
 8010dbc:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	370c      	adds	r7, #12
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr
 8010dcc:	080265c0 	.word	0x080265c0

08010dd0 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8010dd0:	b480      	push	{r7}
 8010dd2:	b083      	sub	sp, #12
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	4a04      	ldr	r2, [pc, #16]	; (8010dec <_ZN10TestResultD1Ev+0x1c>)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	601a      	str	r2, [r3, #0]
{
}
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	4618      	mov	r0, r3
 8010de2:	370c      	adds	r7, #12
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr
 8010dec:	080265c0 	.word	0x080265c0

08010df0 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
}
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f7ff ffe9 	bl	8010dd0 <_ZN10TestResultD1Ev>
 8010dfe:	2138      	movs	r1, #56	; 0x38
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7f7 ff03 	bl	8008c0c <_ZdlPvj>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b082      	sub	sp, #8
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	685a      	ldr	r2, [r3, #4]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	3318      	adds	r3, #24
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	6839      	ldr	r1, [r7, #0]
 8010e2a:	4610      	mov	r0, r2
 8010e2c:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8010e2e:	4b05      	ldr	r3, [pc, #20]	; (8010e44 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	4798      	blx	r3
 8010e34:	4603      	mov	r3, r0
 8010e36:	461a      	mov	r2, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010e3c:	bf00      	nop
 8010e3e:	3708      	adds	r7, #8
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	200000a8 	.word	0x200000a8

08010e48 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8010e52:	4b0c      	ldr	r3, [pc, #48]	; (8010e84 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	4798      	blx	r3
 8010e58:	4603      	mov	r3, r0
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e60:	1ad2      	subs	r2, r2, r3
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	685a      	ldr	r2, [r3, #4]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	331c      	adds	r3, #28
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	6879      	ldr	r1, [r7, #4]
 8010e76:	4610      	mov	r0, r2
 8010e78:	4798      	blx	r3
}
 8010e7a:	bf00      	nop
 8010e7c:	3708      	adds	r7, #8
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	200000a8 	.word	0x200000a8

08010e88 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	685a      	ldr	r2, [r3, #4]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	3310      	adds	r3, #16
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	6839      	ldr	r1, [r7, #0]
 8010ea2:	4610      	mov	r0, r2
 8010ea4:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8010ea6:	4b05      	ldr	r3, [pc, #20]	; (8010ebc <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	4798      	blx	r3
 8010eac:	4603      	mov	r3, r0
 8010eae:	461a      	mov	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010eb4:	bf00      	nop
 8010eb6:	3708      	adds	r7, #8
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	200000a8 	.word	0x200000a8

08010ec0 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	685a      	ldr	r2, [r3, #4]
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	332c      	adds	r3, #44	; 0x2c
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	6839      	ldr	r1, [r7, #0]
 8010eda:	4610      	mov	r0, r2
 8010edc:	4798      	blx	r3
}
 8010ede:	bf00      	nop
 8010ee0:	3708      	adds	r7, #8
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}

08010ee6 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8010ee6:	b580      	push	{r7, lr}
 8010ee8:	b082      	sub	sp, #8
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	6078      	str	r0, [r7, #4]
 8010eee:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	685a      	ldr	r2, [r3, #4]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	685b      	ldr	r3, [r3, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	3348      	adds	r3, #72	; 0x48
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	6839      	ldr	r1, [r7, #0]
 8010f00:	4610      	mov	r0, r2
 8010f02:	4798      	blx	r3
}
 8010f04:	bf00      	nop
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 8010f16:	4b0c      	ldr	r3, [pc, #48]	; (8010f48 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	4798      	blx	r3
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	461a      	mov	r2, r3
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f24:	1ad2      	subs	r2, r2, r3
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	685a      	ldr	r2, [r3, #4]
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	3314      	adds	r3, #20
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	6879      	ldr	r1, [r7, #4]
 8010f3a:	4610      	mov	r0, r2
 8010f3c:	4798      	blx	r3

}
 8010f3e:	bf00      	nop
 8010f40:	3708      	adds	r7, #8
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	200000a8 	.word	0x200000a8

08010f4c <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	685a      	ldr	r2, [r3, #4]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	333c      	adds	r3, #60	; 0x3c
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	6839      	ldr	r1, [r7, #0]
 8010f66:	4610      	mov	r0, r2
 8010f68:	4798      	blx	r3
    failureCount_++;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	695b      	ldr	r3, [r3, #20]
 8010f6e:	1c5a      	adds	r2, r3, #1
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	615a      	str	r2, [r3, #20]
}
 8010f74:	bf00      	nop
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
    testCount_++;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	689b      	ldr	r3, [r3, #8]
 8010f88:	1c5a      	adds	r2, r3, #1
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	609a      	str	r2, [r3, #8]
}
 8010f8e:	bf00      	nop
 8010f90:	370c      	adds	r7, #12
 8010f92:	46bd      	mov	sp, r7
 8010f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f98:	4770      	bx	lr

08010f9a <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8010f9a:	b480      	push	{r7}
 8010f9c:	b083      	sub	sp, #12
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
    runCount_++;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	68db      	ldr	r3, [r3, #12]
 8010fa6:	1c5a      	adds	r2, r3, #1
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	60da      	str	r2, [r3, #12]
}
 8010fac:	bf00      	nop
 8010fae:	370c      	adds	r7, #12
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8010fb8:	b480      	push	{r7}
 8010fba:	b083      	sub	sp, #12
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	691b      	ldr	r3, [r3, #16]
 8010fc4:	1c5a      	adds	r2, r3, #1
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	611a      	str	r2, [r3, #16]
}
 8010fca:	bf00      	nop
 8010fcc:	370c      	adds	r7, #12
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr

08010fd6 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8010fd6:	b480      	push	{r7}
 8010fd8:	b083      	sub	sp, #12
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	699b      	ldr	r3, [r3, #24]
 8010fe2:	1c5a      	adds	r2, r3, #1
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	619a      	str	r2, [r3, #24]
}
 8010fe8:	bf00      	nop
 8010fea:	370c      	adds	r7, #12
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr

08010ff4 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b083      	sub	sp, #12
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	69db      	ldr	r3, [r3, #28]
 8011000:	1c5a      	adds	r2, r3, #1
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	61da      	str	r2, [r3, #28]
}
 8011006:	bf00      	nop
 8011008:	370c      	adds	r7, #12
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr
	...

08011014 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 801101c:	4b09      	ldr	r3, [pc, #36]	; (8011044 <_ZN10TestResult12testsStartedEv+0x30>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4798      	blx	r3
 8011022:	4603      	mov	r3, r0
 8011024:	461a      	mov	r2, r3
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	685a      	ldr	r2, [r3, #4]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	3308      	adds	r3, #8
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4610      	mov	r0, r2
 801103a:	4798      	blx	r3
}
 801103c:	bf00      	nop
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	200000a8 	.word	0x200000a8

08011048 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8011050:	4b0c      	ldr	r3, [pc, #48]	; (8011084 <_ZN10TestResult10testsEndedEv+0x3c>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4798      	blx	r3
 8011056:	4603      	mov	r3, r0
 8011058:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	1ad2      	subs	r2, r2, r3
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	685a      	ldr	r2, [r3, #4]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	330c      	adds	r3, #12
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	6879      	ldr	r1, [r7, #4]
 8011076:	4610      	mov	r0, r2
 8011078:	4798      	blx	r3
}
 801107a:	bf00      	nop
 801107c:	3710      	adds	r7, #16
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	200000a8 	.word	0x200000a8

08011088 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6a1b      	ldr	r3, [r3, #32]
}
 8011094:	4618      	mov	r0, r3
 8011096:	370c      	adds	r7, #12
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr

080110a0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80110ac:	4618      	mov	r0, r3
 80110ae:	370c      	adds	r7, #12
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr

080110b8 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 80110b8:	b480      	push	{r7}
 80110ba:	b083      	sub	sp, #12
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	370c      	adds	r7, #12
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr

080110d0 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 80110d0:	b590      	push	{r4, r7, lr}
 80110d2:	b087      	sub	sp, #28
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	ed87 0b04 	vstr	d0, [r7, #16]
 80110da:	ed87 1b02 	vstr	d1, [r7, #8]
 80110de:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 80110e2:	4b2c      	ldr	r3, [pc, #176]	; (8011194 <_Z13doubles_equalddd+0xc4>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	ed97 0b04 	vldr	d0, [r7, #16]
 80110ea:	4798      	blx	r3
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d10f      	bne.n	8011112 <_Z13doubles_equalddd+0x42>
 80110f2:	4b28      	ldr	r3, [pc, #160]	; (8011194 <_Z13doubles_equalddd+0xc4>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	ed97 0b02 	vldr	d0, [r7, #8]
 80110fa:	4798      	blx	r3
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d107      	bne.n	8011112 <_Z13doubles_equalddd+0x42>
 8011102:	4b24      	ldr	r3, [pc, #144]	; (8011194 <_Z13doubles_equalddd+0xc4>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	ed97 0b00 	vldr	d0, [r7]
 801110a:	4798      	blx	r3
 801110c:	4603      	mov	r3, r0
 801110e:	2b00      	cmp	r3, #0
 8011110:	d001      	beq.n	8011116 <_Z13doubles_equalddd+0x46>
 8011112:	2301      	movs	r3, #1
 8011114:	e000      	b.n	8011118 <_Z13doubles_equalddd+0x48>
 8011116:	2300      	movs	r3, #0
 8011118:	2b00      	cmp	r3, #0
 801111a:	d001      	beq.n	8011120 <_Z13doubles_equalddd+0x50>
        return false;
 801111c:	2300      	movs	r3, #0
 801111e:	e035      	b.n	801118c <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8011120:	4b1d      	ldr	r3, [pc, #116]	; (8011198 <_Z13doubles_equalddd+0xc8>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	ed97 0b04 	vldr	d0, [r7, #16]
 8011128:	4798      	blx	r3
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	d009      	beq.n	8011144 <_Z13doubles_equalddd+0x74>
 8011130:	4b19      	ldr	r3, [pc, #100]	; (8011198 <_Z13doubles_equalddd+0xc8>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	ed97 0b02 	vldr	d0, [r7, #8]
 8011138:	4798      	blx	r3
 801113a:	4603      	mov	r3, r0
 801113c:	2b00      	cmp	r3, #0
 801113e:	d001      	beq.n	8011144 <_Z13doubles_equalddd+0x74>
 8011140:	2301      	movs	r3, #1
 8011142:	e000      	b.n	8011146 <_Z13doubles_equalddd+0x76>
 8011144:	2300      	movs	r3, #0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d001      	beq.n	801114e <_Z13doubles_equalddd+0x7e>
    {
        return true;
 801114a:	2301      	movs	r3, #1
 801114c:	e01e      	b.n	801118c <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 801114e:	4b13      	ldr	r3, [pc, #76]	; (801119c <_Z13doubles_equalddd+0xcc>)
 8011150:	681c      	ldr	r4, [r3, #0]
 8011152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011156:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801115a:	f7ef f8d5 	bl	8000308 <__aeabi_dsub>
 801115e:	4602      	mov	r2, r0
 8011160:	460b      	mov	r3, r1
 8011162:	ec43 2b17 	vmov	d7, r2, r3
 8011166:	eeb0 0a47 	vmov.f32	s0, s14
 801116a:	eef0 0a67 	vmov.f32	s1, s15
 801116e:	47a0      	blx	r4
 8011170:	ec53 2b10 	vmov	r2, r3, d0
 8011174:	2101      	movs	r1, #1
 8011176:	460c      	mov	r4, r1
 8011178:	e9d7 0100 	ldrd	r0, r1, [r7]
 801117c:	f7ef faf0 	bl	8000760 <__aeabi_dcmpge>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d101      	bne.n	801118a <_Z13doubles_equalddd+0xba>
 8011186:	2300      	movs	r3, #0
 8011188:	461c      	mov	r4, r3
 801118a:	b2e3      	uxtb	r3, r4
}
 801118c:	4618      	mov	r0, r3
 801118e:	371c      	adds	r7, #28
 8011190:	46bd      	mov	sp, r7
 8011192:	bd90      	pop	{r4, r7, pc}
 8011194:	200000e8 	.word	0x200000e8
 8011198:	200000ec 	.word	0x200000ec
 801119c:	200000dc 	.word	0x200000dc

080111a0 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 80111a0:	b480      	push	{r7}
 80111a2:	b083      	sub	sp, #12
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	332c      	adds	r3, #44	; 0x2c
    }
 80111ac:	4618      	mov	r0, r3
 80111ae:	370c      	adds	r7, #12
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr

080111b8 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b082      	sub	sp, #8
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
    {
 80111c0:	4a0a      	ldr	r2, [pc, #40]	; (80111ec <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	601a      	str	r2, [r3, #0]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	332c      	adds	r3, #44	; 0x2c
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7ff fe00 	bl	8010dd0 <_ZN10TestResultD1Ev>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	331c      	adds	r3, #28
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7f6 f815 	bl	8007204 <_ZN17ConsoleTestOutputD1Ev>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	4618      	mov	r0, r3
 80111de:	f000 f943 	bl	8011468 <_ZN10UtestShellD1Ev>
    }
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	4618      	mov	r0, r3
 80111e6:	3708      	adds	r7, #8
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	08026608 	.word	0x08026608

080111f0 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
    }
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f7ff ffdd 	bl	80111b8 <_ZN22OutsideTestRunnerUTestD1Ev>
 80111fe:	2164      	movs	r1, #100	; 0x64
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f7f7 fd03 	bl	8008c0c <_ZdlPvj>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	4618      	mov	r0, r3
 801120a:	3708      	adds	r7, #8
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}

08011210 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8011210:	b580      	push	{r7, lr}
 8011212:	b084      	sub	sp, #16
 8011214:	af02      	add	r7, sp, #8
 8011216:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	2300      	movs	r3, #0
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	4b0d      	ldr	r3, [pc, #52]	; (8011254 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8011220:	4a0d      	ldr	r2, [pc, #52]	; (8011258 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8011222:	490e      	ldr	r1, [pc, #56]	; (801125c <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8011224:	f000 f8f8 	bl	8011418 <_ZN10UtestShellC1EPKcS1_S1_j>
 8011228:	4a0d      	ldr	r2, [pc, #52]	; (8011260 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	601a      	str	r2, [r3, #0]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	331c      	adds	r3, #28
 8011232:	4618      	mov	r0, r3
 8011234:	f7f5 ffd4 	bl	80071e0 <_ZN17ConsoleTestOutputC1Ev>
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	331c      	adds	r3, #28
 8011242:	4619      	mov	r1, r3
 8011244:	4610      	mov	r0, r2
 8011246:	f7ff fd8b 	bl	8010d60 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	4618      	mov	r0, r3
 801124e:	3708      	adds	r7, #8
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}
 8011254:	08023308 	.word	0x08023308
 8011258:	08023318 	.word	0x08023318
 801125c:	08023358 	.word	0x08023358
 8011260:	08026608 	.word	0x08026608

08011264 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8011264:	b580      	push	{r7, lr}
 8011266:	af00      	add	r7, sp, #0
 8011268:	4801      	ldr	r0, [pc, #4]	; (8011270 <__tcf_0+0xc>)
 801126a:	f7ff ffa5 	bl	80111b8 <_ZN22OutsideTestRunnerUTestD1Ev>
 801126e:	bd80      	pop	{r7, pc}
 8011270:	20000930 	.word	0x20000930

08011274 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8011274:	b580      	push	{r7, lr}
 8011276:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8011278:	4b12      	ldr	r3, [pc, #72]	; (80112c4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	f3bf 8f5b 	dmb	ish
 8011280:	b2db      	uxtb	r3, r3
 8011282:	f003 0301 	and.w	r3, r3, #1
 8011286:	2b00      	cmp	r3, #0
 8011288:	bf0c      	ite	eq
 801128a:	2301      	moveq	r3, #1
 801128c:	2300      	movne	r3, #0
 801128e:	b2db      	uxtb	r3, r3
 8011290:	2b00      	cmp	r3, #0
 8011292:	d013      	beq.n	80112bc <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8011294:	480b      	ldr	r0, [pc, #44]	; (80112c4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8011296:	f00c ff27 	bl	801e0e8 <__cxa_guard_acquire>
 801129a:	4603      	mov	r3, r0
 801129c:	2b00      	cmp	r3, #0
 801129e:	bf14      	ite	ne
 80112a0:	2301      	movne	r3, #1
 80112a2:	2300      	moveq	r3, #0
 80112a4:	b2db      	uxtb	r3, r3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d008      	beq.n	80112bc <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80112aa:	4807      	ldr	r0, [pc, #28]	; (80112c8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 80112ac:	f7ff ffb0 	bl	8011210 <_ZN22OutsideTestRunnerUTestC1Ev>
 80112b0:	4804      	ldr	r0, [pc, #16]	; (80112c4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80112b2:	f00c ff25 	bl	801e100 <__cxa_guard_release>
 80112b6:	4805      	ldr	r0, [pc, #20]	; (80112cc <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 80112b8:	f00c ff49 	bl	801e14e <atexit>
    return instance_;
 80112bc:	4b02      	ldr	r3, [pc, #8]	; (80112c8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 80112be:	4618      	mov	r0, r3
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	20000994 	.word	0x20000994
 80112c8:	20000930 	.word	0x20000930
 80112cc:	08011265 	.word	0x08011265

080112d0 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	330c      	adds	r3, #12
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	4798      	blx	r3
    }
 80112e4:	bf00      	nop
 80112e6:	3708      	adds	r7, #8
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	3314      	adds	r3, #20
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	4798      	blx	r3
    }
 8011300:	bf00      	nop
 8011302:	3708      	adds	r7, #8
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	3310      	adds	r3, #16
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	4798      	blx	r3
    }
 801131c:	bf00      	nop
 801131e:	3708      	adds	r7, #8
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8011324:	b480      	push	{r7}
 8011326:	b085      	sub	sp, #20
 8011328:	af00      	add	r7, sp, #0
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	60b9      	str	r1, [r7, #8]
 801132e:	607a      	str	r2, [r7, #4]
 8011330:	603b      	str	r3, [r7, #0]
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	68ba      	ldr	r2, [r7, #8]
 8011336:	601a      	str	r2, [r3, #0]
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	687a      	ldr	r2, [r7, #4]
 801133c:	605a      	str	r2, [r3, #4]
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	683a      	ldr	r2, [r7, #0]
 8011342:	609a      	str	r2, [r3, #8]
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	4618      	mov	r0, r3
 8011348:	3714      	adds	r7, #20
 801134a:	46bd      	mov	sp, r7
 801134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011350:	4770      	bx	lr

08011352 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8011352:	b580      	push	{r7, lr}
 8011354:	b086      	sub	sp, #24
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	689b      	ldr	r3, [r3, #8]
 801136e:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	3394      	adds	r3, #148	; 0x94
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	68ba      	ldr	r2, [r7, #8]
 801137a:	68f9      	ldr	r1, [r7, #12]
 801137c:	6938      	ldr	r0, [r7, #16]
 801137e:	4798      	blx	r3
    }
 8011380:	bf00      	nop
 8011382:	3718      	adds	r7, #24
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}

08011388 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8011388:	b580      	push	{r7, lr}
 801138a:	b086      	sub	sp, #24
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	689b      	ldr	r3, [r3, #8]
 80113a4:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 80113a6:	4b05      	ldr	r3, [pc, #20]	; (80113bc <helperDoRunOneTestSeperateProcess+0x34>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	68ba      	ldr	r2, [r7, #8]
 80113ac:	68f9      	ldr	r1, [r7, #12]
 80113ae:	6938      	ldr	r0, [r7, #16]
 80113b0:	4798      	blx	r3
    }
 80113b2:	bf00      	nop
 80113b4:	3718      	adds	r7, #24
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	2000009c 	.word	0x2000009c

080113c0 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 80113c8:	4a0f      	ldr	r2, [pc, #60]	; (8011408 <_ZN10UtestShellC1Ev+0x48>)
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	601a      	str	r2, [r3, #0]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	4a0e      	ldr	r2, [pc, #56]	; (801140c <_ZN10UtestShellC1Ev+0x4c>)
 80113d2:	605a      	str	r2, [r3, #4]
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	4a0e      	ldr	r2, [pc, #56]	; (8011410 <_ZN10UtestShellC1Ev+0x50>)
 80113d8:	609a      	str	r2, [r3, #8]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	4a0d      	ldr	r2, [pc, #52]	; (8011414 <_ZN10UtestShellC1Ev+0x54>)
 80113de:	60da      	str	r2, [r3, #12]
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	611a      	str	r2, [r3, #16]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2200      	movs	r2, #0
 80113ea:	615a      	str	r2, [r3, #20]
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2200      	movs	r2, #0
 80113f0:	761a      	strb	r2, [r3, #24]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	765a      	strb	r2, [r3, #25]
{
}
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	4618      	mov	r0, r3
 80113fc:	370c      	adds	r7, #12
 80113fe:	46bd      	mov	sp, r7
 8011400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011404:	4770      	bx	lr
 8011406:	bf00      	nop
 8011408:	080266c8 	.word	0x080266c8
 801140c:	080233a4 	.word	0x080233a4
 8011410:	080233b8 	.word	0x080233b8
 8011414:	080233c8 	.word	0x080233c8

08011418 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8011418:	b480      	push	{r7}
 801141a:	b085      	sub	sp, #20
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	607a      	str	r2, [r7, #4]
 8011424:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8011426:	4a0f      	ldr	r2, [pc, #60]	; (8011464 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	601a      	str	r2, [r3, #0]
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	68ba      	ldr	r2, [r7, #8]
 8011430:	605a      	str	r2, [r3, #4]
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	609a      	str	r2, [r3, #8]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	683a      	ldr	r2, [r7, #0]
 801143c:	60da      	str	r2, [r3, #12]
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	69ba      	ldr	r2, [r7, #24]
 8011442:	611a      	str	r2, [r3, #16]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	2200      	movs	r2, #0
 8011448:	615a      	str	r2, [r3, #20]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2200      	movs	r2, #0
 801144e:	761a      	strb	r2, [r3, #24]
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2200      	movs	r2, #0
 8011454:	765a      	strb	r2, [r3, #25]
{
}
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	4618      	mov	r0, r3
 801145a:	3714      	adds	r7, #20
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr
 8011464:	080266c8 	.word	0x080266c8

08011468 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8011468:	b480      	push	{r7}
 801146a:	b083      	sub	sp, #12
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	4a04      	ldr	r2, [pc, #16]	; (8011484 <_ZN10UtestShellD1Ev+0x1c>)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	601a      	str	r2, [r3, #0]
{
}
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	4618      	mov	r0, r3
 801147a:	370c      	adds	r7, #12
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr
 8011484:	080266c8 	.word	0x080266c8

08011488 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
}
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7ff ffe9 	bl	8011468 <_ZN10UtestShellD1Ev>
 8011496:	211c      	movs	r1, #28
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f7f7 fbb7 	bl	8008c0c <_ZdlPvj>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	4618      	mov	r0, r3
 80114a2:	3708      	adds	r7, #8
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 80114ae:	2300      	movs	r3, #0
 80114b0:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	3310      	adds	r3, #16
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	4798      	blx	r3
}
 80114be:	bf00      	nop
 80114c0:	3708      	adds	r7, #8
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
	...

080114c8 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 80114cc:	4b02      	ldr	r3, [pc, #8]	; (80114d8 <_ZN10UtestShell5crashEv+0x10>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4798      	blx	r3
}
 80114d2:	bf00      	nop
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop
 80114d8:	20000098 	.word	0x20000098

080114dc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b088      	sub	sp, #32
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2200      	movs	r2, #0
 80114ec:	765a      	strb	r2, [r3, #25]
    result.countRun();
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	3324      	adds	r3, #36	; 0x24
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 80114fa:	f107 0014 	add.w	r0, r7, #20
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	68ba      	ldr	r2, [r7, #8]
 8011502:	68f9      	ldr	r1, [r7, #12]
 8011504:	f7ff ff0e 	bl	8011324 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	337c      	adds	r3, #124	; 0x7c
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	4798      	blx	r3
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d007      	beq.n	801152a <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 801151a:	4b09      	ldr	r3, [pc, #36]	; (8011540 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f107 0214 	add.w	r2, r7, #20
 8011522:	4611      	mov	r1, r2
 8011524:	4807      	ldr	r0, [pc, #28]	; (8011544 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8011526:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8011528:	e006      	b.n	8011538 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 801152a:	4b05      	ldr	r3, [pc, #20]	; (8011540 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f107 0214 	add.w	r2, r7, #20
 8011532:	4611      	mov	r1, r2
 8011534:	4804      	ldr	r0, [pc, #16]	; (8011548 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8011536:	4798      	blx	r3
}
 8011538:	bf00      	nop
 801153a:	3720      	adds	r7, #32
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}
 8011540:	200000a4 	.word	0x200000a4
 8011544:	08011389 	.word	0x08011389
 8011548:	08011353 	.word	0x08011353

0801154c <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 801154c:	b590      	push	{r4, r7, lr}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
    return new Utest();
 8011554:	22d3      	movs	r2, #211	; 0xd3
 8011556:	4906      	ldr	r1, [pc, #24]	; (8011570 <_ZN10UtestShell10createTestEv+0x24>)
 8011558:	2004      	movs	r0, #4
 801155a:	f7f7 fb43 	bl	8008be4 <_ZnwjPKci>
 801155e:	4604      	mov	r4, r0
 8011560:	4620      	mov	r0, r4
 8011562:	f001 fb0f 	bl	8012b84 <_ZN5UtestC1Ev>
 8011566:	4623      	mov	r3, r4
}
 8011568:	4618      	mov	r0, r3
 801156a:	370c      	adds	r7, #12
 801156c:	46bd      	mov	sp, r7
 801156e:	bd90      	pop	{r4, r7, pc}
 8011570:	080233d8 	.word	0x080233d8

08011574 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	6039      	str	r1, [r7, #0]
    delete test;
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d004      	beq.n	801158e <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8011584:	681a      	ldr	r2, [r3, #0]
 8011586:	3204      	adds	r2, #4
 8011588:	6812      	ldr	r2, [r2, #0]
 801158a:	4618      	mov	r0, r3
 801158c:	4790      	blx	r2
}
 801158e:	bf00      	nop
 8011590:	3708      	adds	r7, #8
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}
	...

08011598 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b088      	sub	sp, #32
 801159c:	af00      	add	r7, sp, #0
 801159e:	60f8      	str	r0, [r7, #12]
 80115a0:	60b9      	str	r1, [r7, #8]
 80115a2:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	333c      	adds	r3, #60	; 0x3c
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	4940      	ldr	r1, [pc, #256]	; (80116b0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	3314      	adds	r3, #20
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	68f9      	ldr	r1, [r7, #12]
 80115be:	68b8      	ldr	r0, [r7, #8]
 80115c0:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	333c      	adds	r3, #60	; 0x3c
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	493a      	ldr	r1, [pc, #232]	; (80116b4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 80115cc:	6878      	ldr	r0, [r7, #4]
 80115ce:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 80115d0:	f001 faae 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80115d4:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 80115d6:	68f8      	ldr	r0, [r7, #12]
 80115d8:	f001 fa90 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 80115dc:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 80115de:	6879      	ldr	r1, [r7, #4]
 80115e0:	68f8      	ldr	r0, [r7, #12]
 80115e2:	f001 fa6b 	bl	8012abc <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 80115e6:	68f9      	ldr	r1, [r7, #12]
 80115e8:	68f8      	ldr	r0, [r7, #12]
 80115ea:	f001 fa77 	bl	8012adc <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	333c      	adds	r3, #60	; 0x3c
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	4930      	ldr	r1, [pc, #192]	; (80116b8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	4798      	blx	r3
    Utest* testToRun = createTest();
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	3388      	adds	r3, #136	; 0x88
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	68f8      	ldr	r0, [r7, #12]
 8011606:	4798      	blx	r3
 8011608:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	333c      	adds	r3, #60	; 0x3c
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	492a      	ldr	r1, [pc, #168]	; (80116bc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	333c      	adds	r3, #60	; 0x3c
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	4927      	ldr	r1, [pc, #156]	; (80116c0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	4798      	blx	r3
    testToRun->run();
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	3308      	adds	r3, #8
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	6978      	ldr	r0, [r7, #20]
 8011630:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	333c      	adds	r3, #60	; 0x3c
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	4922      	ldr	r1, [pc, #136]	; (80116c4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8011640:	69f9      	ldr	r1, [r7, #28]
 8011642:	68f8      	ldr	r0, [r7, #12]
 8011644:	f001 fa4a 	bl	8012adc <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8011648:	69b9      	ldr	r1, [r7, #24]
 801164a:	68f8      	ldr	r0, [r7, #12]
 801164c:	f001 fa36 	bl	8012abc <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	333c      	adds	r3, #60	; 0x3c
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	491b      	ldr	r1, [pc, #108]	; (80116c8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	4798      	blx	r3
    destroyTest(testToRun);
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	338c      	adds	r3, #140	; 0x8c
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	6979      	ldr	r1, [r7, #20]
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	333c      	adds	r3, #60	; 0x3c
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4915      	ldr	r1, [pc, #84]	; (80116cc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	333c      	adds	r3, #60	; 0x3c
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	4913      	ldr	r1, [pc, #76]	; (80116d0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	3318      	adds	r3, #24
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	68f9      	ldr	r1, [r7, #12]
 8011694:	68b8      	ldr	r0, [r7, #8]
 8011696:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	333c      	adds	r3, #60	; 0x3c
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	490c      	ldr	r1, [pc, #48]	; (80116d4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	4798      	blx	r3
}
 80116a6:	bf00      	nop
 80116a8:	3720      	adds	r7, #32
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	080233ec 	.word	0x080233ec
 80116b4:	08023410 	.word	0x08023410
 80116b8:	08023430 	.word	0x08023430
 80116bc:	0802344c 	.word	0x0802344c
 80116c0:	08023468 	.word	0x08023468
 80116c4:	08023484 	.word	0x08023484
 80116c8:	0802349c 	.word	0x0802349c
 80116cc:	080234b8 	.word	0x080234b8
 80116d0:	080234d4 	.word	0x080234d4
 80116d4:	080234f8 	.word	0x080234f8

080116d8 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 80116d8:	b480      	push	{r7}
 80116da:	b083      	sub	sp, #12
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
    return next_;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	695b      	ldr	r3, [r3, #20]
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	370c      	adds	r7, #12
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr

080116f0 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 80116f0:	b480      	push	{r7}
 80116f2:	b083      	sub	sp, #12
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
    next_ = test;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	683a      	ldr	r2, [r7, #0]
 80116fe:	615a      	str	r2, [r3, #20]
    return this;
 8011700:	687b      	ldr	r3, [r7, #4]
}
 8011702:	4618      	mov	r0, r3
 8011704:	370c      	adds	r7, #12
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr

0801170e <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 801170e:	b580      	push	{r7, lr}
 8011710:	b082      	sub	sp, #8
 8011712:	af00      	add	r7, sp, #0
 8011714:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	695b      	ldr	r3, [r3, #20]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d00b      	beq.n	8011736 <_ZN10UtestShell10countTestsEv+0x28>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	695a      	ldr	r2, [r3, #20]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	695b      	ldr	r3, [r3, #20]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	3310      	adds	r3, #16
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	4610      	mov	r0, r2
 801172e:	4798      	blx	r3
 8011730:	4603      	mov	r3, r0
 8011732:	3301      	adds	r3, #1
 8011734:	e000      	b.n	8011738 <_ZN10UtestShell10countTestsEv+0x2a>
 8011736:	2301      	movs	r3, #1
}
 8011738:	4618      	mov	r0, r3
 801173a:	3708      	adds	r7, #8
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
    return "TEST";
 801174a:	4904      	ldr	r1, [pc, #16]	; (801175c <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f7f9 fe0c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
}
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	3708      	adds	r7, #8
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
 801175a:	bf00      	nop
 801175c:	0802351c 	.word	0x0802351c

08011760 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	689b      	ldr	r3, [r3, #8]
 801176e:	4619      	mov	r1, r3
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f7f9 fdfa 	bl	800b36a <_ZN12SimpleStringC1EPKc>
}
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	3708      	adds	r7, #8
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}

0801177e <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 801177e:	b580      	push	{r7, lr}
 8011780:	b082      	sub	sp, #8
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
 8011786:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	4619      	mov	r1, r3
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f7f9 fdeb 	bl	800b36a <_ZN12SimpleStringC1EPKc>
}
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	3708      	adds	r7, #8
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}

0801179c <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	33a0      	adds	r3, #160	; 0xa0
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	6839      	ldr	r1, [r7, #0]
 80117b2:	4610      	mov	r0, r2
 80117b4:	4798      	blx	r3
    formattedName += "(";
 80117b6:	490e      	ldr	r1, [pc, #56]	; (80117f0 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f7fa fa1d 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	4619      	mov	r1, r3
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7fa fa17 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 80117ca:	490a      	ldr	r1, [pc, #40]	; (80117f4 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f7fa fa13 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	689b      	ldr	r3, [r3, #8]
 80117d6:	4619      	mov	r1, r3
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7fa fa0d 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 80117de:	4906      	ldr	r1, [pc, #24]	; (80117f8 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f7fa fa09 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 80117e6:	bf00      	nop
}
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	3708      	adds	r7, #8
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}
 80117f0:	08023524 	.word	0x08023524
 80117f4:	08023528 	.word	0x08023528
 80117f8:	0802352c 	.word	0x0802352c

080117fc <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 80117fc:	b480      	push	{r7}
 80117fe:	b083      	sub	sp, #12
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	7e5b      	ldrb	r3, [r3, #25]
}
 8011808:	4618      	mov	r0, r3
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f001 f96d 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8011822:	4603      	mov	r3, r0
 8011824:	681a      	ldr	r2, [r3, #0]
 8011826:	3228      	adds	r2, #40	; 0x28
 8011828:	6812      	ldr	r2, [r2, #0]
 801182a:	4618      	mov	r0, r3
 801182c:	4790      	blx	r2
}
 801182e:	bf00      	nop
 8011830:	3708      	adds	r7, #8
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}

08011836 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8011836:	b480      	push	{r7}
 8011838:	b083      	sub	sp, #12
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
    return true;
 801183e:	2301      	movs	r3, #1
}
 8011840:	4618      	mov	r0, r3
 8011842:	370c      	adds	r7, #12
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr

0801184c <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 801184c:	b480      	push	{r7}
 801184e:	b083      	sub	sp, #12
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	7e1b      	ldrb	r3, [r3, #24]
}
 8011858:	4618      	mov	r0, r3
 801185a:	370c      	adds	r7, #12
 801185c:	46bd      	mov	sp, r7
 801185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011862:	4770      	bx	lr

08011864 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8011864:	b480      	push	{r7}
 8011866:	b083      	sub	sp, #12
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2201      	movs	r2, #1
 8011870:	761a      	strb	r2, [r3, #24]
}
 8011872:	bf00      	nop
 8011874:	370c      	adds	r7, #12
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr

0801187e <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 801187e:	b480      	push	{r7}
 8011880:	b083      	sub	sp, #12
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]

}
 8011886:	bf00      	nop
 8011888:	370c      	adds	r7, #12
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr

08011892 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8011892:	b480      	push	{r7}
 8011894:	b083      	sub	sp, #12
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
 801189a:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	683a      	ldr	r2, [r7, #0]
 80118a0:	60da      	str	r2, [r3, #12]
}
 80118a2:	bf00      	nop
 80118a4:	370c      	adds	r7, #12
 80118a6:	46bd      	mov	sp, r7
 80118a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ac:	4770      	bx	lr

080118ae <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 80118ae:	b480      	push	{r7}
 80118b0:	b083      	sub	sp, #12
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	6078      	str	r0, [r7, #4]
 80118b6:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	683a      	ldr	r2, [r7, #0]
 80118bc:	611a      	str	r2, [r3, #16]
}
 80118be:	bf00      	nop
 80118c0:	370c      	adds	r7, #12
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr

080118ca <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 80118ca:	b480      	push	{r7}
 80118cc:	b083      	sub	sp, #12
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
 80118d2:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	683a      	ldr	r2, [r7, #0]
 80118d8:	605a      	str	r2, [r3, #4]
}
 80118da:	bf00      	nop
 80118dc:	370c      	adds	r7, #12
 80118de:	46bd      	mov	sp, r7
 80118e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e4:	4770      	bx	lr

080118e6 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 80118e6:	b480      	push	{r7}
 80118e8:	b083      	sub	sp, #12
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
 80118ee:	6039      	str	r1, [r7, #0]
    name_ = testName;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	683a      	ldr	r2, [r7, #0]
 80118f4:	609a      	str	r2, [r3, #8]
}
 80118f6:	bf00      	nop
 80118f8:	370c      	adds	r7, #12
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr

08011902 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8011902:	b580      	push	{r7, lr}
 8011904:	b082      	sub	sp, #8
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
 801190a:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	68db      	ldr	r3, [r3, #12]
 8011910:	4619      	mov	r1, r3
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f7f9 fd29 	bl	800b36a <_ZN12SimpleStringC1EPKc>
}
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	3708      	adds	r7, #8
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	691b      	ldr	r3, [r3, #16]
}
 801192c:	4618      	mov	r0, r3
 801192e:	370c      	adds	r7, #12
 8011930:	46bd      	mov	sp, r7
 8011932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011936:	4770      	bx	lr

08011938 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8011938:	b590      	push	{r4, r7, lr}
 801193a:	b087      	sub	sp, #28
 801193c:	af00      	add	r7, sp, #0
 801193e:	60f8      	str	r0, [r7, #12]
 8011940:	60b9      	str	r1, [r7, #8]
 8011942:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d101      	bne.n	801194e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 801194a:	2301      	movs	r3, #1
 801194c:	e01f      	b.n	801198e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d01b      	beq.n	801198c <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8011954:	f107 0310 	add.w	r3, r7, #16
 8011958:	68b9      	ldr	r1, [r7, #8]
 801195a:	4618      	mov	r0, r3
 801195c:	f7f9 fd05 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011960:	f107 0310 	add.w	r3, r7, #16
 8011964:	4619      	mov	r1, r3
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f00c fb91 	bl	801e08e <_ZNK10TestFilter5matchERK12SimpleString>
 801196c:	4603      	mov	r3, r0
 801196e:	461c      	mov	r4, r3
 8011970:	f107 0310 	add.w	r3, r7, #16
 8011974:	4618      	mov	r0, r3
 8011976:	f7fa f8b0 	bl	800bada <_ZN12SimpleStringD1Ev>
 801197a:	2c00      	cmp	r4, #0
 801197c:	d001      	beq.n	8011982 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 801197e:	2301      	movs	r3, #1
 8011980:	e005      	b.n	801198e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f00c fb5d 	bl	801e042 <_ZNK10TestFilter7getNextEv>
 8011988:	6078      	str	r0, [r7, #4]
 801198a:	e7e0      	b.n	801194e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 801198c:	2300      	movs	r3, #0
}
 801198e:	4618      	mov	r0, r3
 8011990:	371c      	adds	r7, #28
 8011992:	46bd      	mov	sp, r7
 8011994:	bd90      	pop	{r4, r7, pc}

08011996 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8011996:	b580      	push	{r7, lr}
 8011998:	b084      	sub	sp, #16
 801199a:	af00      	add	r7, sp, #0
 801199c:	60f8      	str	r0, [r7, #12]
 801199e:	60b9      	str	r1, [r7, #8]
 80119a0:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	68ba      	ldr	r2, [r7, #8]
 80119a8:	4619      	mov	r1, r3
 80119aa:	68f8      	ldr	r0, [r7, #12]
 80119ac:	f7ff ffc4 	bl	8011938 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d00b      	beq.n	80119ce <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	689b      	ldr	r3, [r3, #8]
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	4619      	mov	r1, r3
 80119be:	68f8      	ldr	r0, [r7, #12]
 80119c0:	f7ff ffba 	bl	8011938 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80119c4:	4603      	mov	r3, r0
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d001      	beq.n	80119ce <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80119ca:	2301      	movs	r3, #1
 80119cc:	e000      	b.n	80119d0 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 80119ce:	2300      	movs	r3, #0
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3710      	adds	r7, #16
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 80119d8:	b590      	push	{r4, r7, lr}
 80119da:	b083      	sub	sp, #12
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	339c      	adds	r3, #156	; 0x9c
 80119e8:	681c      	ldr	r4, [r3, #0]
 80119ea:	f001 f8b1 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80119ee:	4603      	mov	r3, r0
 80119f0:	461a      	mov	r2, r3
 80119f2:	6839      	ldr	r1, [r7, #0]
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 80119f8:	bf00      	nop
 80119fa:	370c      	adds	r7, #12
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd90      	pop	{r4, r7, pc}

08011a00 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b084      	sub	sp, #16
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	60f8      	str	r0, [r7, #12]
 8011a08:	60b9      	str	r1, [r7, #8]
 8011a0a:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	2201      	movs	r2, #1
 8011a10:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8011a12:	68f8      	ldr	r0, [r7, #12]
 8011a14:	f001 f872 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	3234      	adds	r2, #52	; 0x34
 8011a1e:	6812      	ldr	r2, [r2, #0]
 8011a20:	68b9      	ldr	r1, [r7, #8]
 8011a22:	4618      	mov	r0, r3
 8011a24:	4790      	blx	r2
    terminator.exitCurrentTest();
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011a30:	bf00      	nop
 8011a32:	3710      	adds	r7, #16
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	6838      	ldr	r0, [r7, #0]
 8011a4a:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011a4c:	bf00      	nop
 8011a4e:	3708      	adds	r7, #8
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011a54:	b590      	push	{r4, r7, lr}
 8011a56:	b09d      	sub	sp, #116	; 0x74
 8011a58:	af04      	add	r7, sp, #16
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	607a      	str	r2, [r7, #4]
 8011a5e:	603b      	str	r3, [r7, #0]
 8011a60:	460b      	mov	r3, r1
 8011a62:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f001 f849 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	3228      	adds	r2, #40	; 0x28
 8011a70:	6812      	ldr	r2, [r2, #0]
 8011a72:	4618      	mov	r0, r3
 8011a74:	4790      	blx	r2
    if (!condition)
 8011a76:	7afb      	ldrb	r3, [r7, #11]
 8011a78:	f083 0301 	eor.w	r3, r3, #1
 8011a7c:	b2db      	uxtb	r3, r3
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d03f      	beq.n	8011b02 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	339c      	adds	r3, #156	; 0x9c
 8011a88:	681c      	ldr	r4, [r3, #0]
 8011a8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011a8e:	6879      	ldr	r1, [r7, #4]
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7f9 fc6a 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011a96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011a9a:	6839      	ldr	r1, [r7, #0]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7f9 fc64 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011aa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011aa6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7f9 fc5e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011aae:	f107 0014 	add.w	r0, r7, #20
 8011ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011ab6:	9302      	str	r3, [sp, #8]
 8011ab8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011abc:	9301      	str	r3, [sp, #4]
 8011abe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ac2:	9300      	str	r3, [sp, #0]
 8011ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ac6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011ac8:	68f9      	ldr	r1, [r7, #12]
 8011aca:	f7fb ff6b 	bl	800d9a4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011ace:	f107 0314 	add.w	r3, r7, #20
 8011ad2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	68f8      	ldr	r0, [r7, #12]
 8011ad8:	47a0      	blx	r4
 8011ada:	f107 0314 	add.w	r3, r7, #20
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7fc fdce 	bl	800e680 <_ZN12CheckFailureD1Ev>
 8011ae4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7f9 fff6 	bl	800bada <_ZN12SimpleStringD1Ev>
 8011aee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7f9 fff1 	bl	800bada <_ZN12SimpleStringD1Ev>
 8011af8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011afc:	4618      	mov	r0, r3
 8011afe:	f7f9 ffec 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8011b02:	bf00      	nop
 8011b04:	3764      	adds	r7, #100	; 0x64
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd90      	pop	{r4, r7, pc}

08011b0a <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011b0a:	b590      	push	{r4, r7, lr}
 8011b0c:	b097      	sub	sp, #92	; 0x5c
 8011b0e:	af02      	add	r7, sp, #8
 8011b10:	60f8      	str	r0, [r7, #12]
 8011b12:	60b9      	str	r1, [r7, #8]
 8011b14:	607a      	str	r2, [r7, #4]
 8011b16:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011b18:	68f8      	ldr	r0, [r7, #12]
 8011b1a:	f000 ffef 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	681a      	ldr	r2, [r3, #0]
 8011b22:	3228      	adds	r2, #40	; 0x28
 8011b24:	6812      	ldr	r2, [r2, #0]
 8011b26:	4618      	mov	r0, r3
 8011b28:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	339c      	adds	r3, #156	; 0x9c
 8011b30:	681c      	ldr	r4, [r3, #0]
 8011b32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011b36:	68b9      	ldr	r1, [r7, #8]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7f9 fc16 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011b3e:	f107 0014 	add.w	r0, r7, #20
 8011b42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011b46:	9300      	str	r3, [sp, #0]
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	68f9      	ldr	r1, [r7, #12]
 8011b4e:	f7fb ff71 	bl	800da34 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8011b52:	f107 0314 	add.w	r3, r7, #20
 8011b56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b58:	4619      	mov	r1, r3
 8011b5a:	68f8      	ldr	r0, [r7, #12]
 8011b5c:	47a0      	blx	r4
 8011b5e:	f107 0314 	add.w	r3, r7, #20
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7f7 fc16 	bl	8009394 <_ZN11FailFailureD1Ev>
 8011b68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7f9 ffb4 	bl	800bada <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8011b72:	bf00      	nop
 8011b74:	3754      	adds	r7, #84	; 0x54
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd90      	pop	{r4, r7, pc}

08011b7a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011b7a:	b590      	push	{r4, r7, lr}
 8011b7c:	b0a7      	sub	sp, #156	; 0x9c
 8011b7e:	af04      	add	r7, sp, #16
 8011b80:	60f8      	str	r0, [r7, #12]
 8011b82:	60b9      	str	r1, [r7, #8]
 8011b84:	607a      	str	r2, [r7, #4]
 8011b86:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011b88:	68f8      	ldr	r0, [r7, #12]
 8011b8a:	f000 ffb7 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	681a      	ldr	r2, [r3, #0]
 8011b92:	3228      	adds	r2, #40	; 0x28
 8011b94:	6812      	ldr	r2, [r2, #0]
 8011b96:	4618      	mov	r0, r3
 8011b98:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d102      	bne.n	8011ba6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d068      	beq.n	8011c78 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d002      	beq.n	8011bb2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d12a      	bne.n	8011c08 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	339c      	adds	r3, #156	; 0x9c
 8011bb8:	681c      	ldr	r4, [r3, #0]
 8011bba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011bbe:	6839      	ldr	r1, [r7, #0]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7f9 fbd2 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011bc6:	f107 0010 	add.w	r0, r7, #16
 8011bca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011bce:	9302      	str	r3, [sp, #8]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	9301      	str	r3, [sp, #4]
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	9300      	str	r3, [sp, #0]
 8011bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011bdc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011be0:	68f9      	ldr	r1, [r7, #12]
 8011be2:	f7fc f9ad 	bl	800df40 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011be6:	f107 0310 	add.w	r3, r7, #16
 8011bea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011bee:	4619      	mov	r1, r3
 8011bf0:	68f8      	ldr	r0, [r7, #12]
 8011bf2:	47a0      	blx	r4
 8011bf4:	f107 0310 	add.w	r3, r7, #16
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7fc fcb9 	bl	800e570 <_ZN18StringEqualFailureD1Ev>
 8011bfe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7f9 ff69 	bl	800bada <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8011c08:	6879      	ldr	r1, [r7, #4]
 8011c0a:	68b8      	ldr	r0, [r7, #8]
 8011c0c:	f7f9 f9ea 	bl	800afe4 <_ZN12SimpleString6StrCmpEPKcS1_>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	bf14      	ite	ne
 8011c16:	2301      	movne	r3, #1
 8011c18:	2300      	moveq	r3, #0
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d02c      	beq.n	8011c7a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	339c      	adds	r3, #156	; 0x9c
 8011c26:	681c      	ldr	r4, [r3, #0]
 8011c28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011c2c:	6839      	ldr	r1, [r7, #0]
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7f9 fb9b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011c34:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8011c38:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011c3c:	9302      	str	r3, [sp, #8]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	9301      	str	r3, [sp, #4]
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	9300      	str	r3, [sp, #0]
 8011c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011c4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011c4e:	68f9      	ldr	r1, [r7, #12]
 8011c50:	f7fc f976 	bl	800df40 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011c54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011c58:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	68f8      	ldr	r0, [r7, #12]
 8011c60:	47a0      	blx	r4
 8011c62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7fc fc82 	bl	800e570 <_ZN18StringEqualFailureD1Ev>
 8011c6c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7f9 ff32 	bl	800bada <_ZN12SimpleStringD1Ev>
 8011c76:	e000      	b.n	8011c7a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011c78:	bf00      	nop
}
 8011c7a:	378c      	adds	r7, #140	; 0x8c
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd90      	pop	{r4, r7, pc}

08011c80 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011c80:	b590      	push	{r4, r7, lr}
 8011c82:	b0a7      	sub	sp, #156	; 0x9c
 8011c84:	af04      	add	r7, sp, #16
 8011c86:	60f8      	str	r0, [r7, #12]
 8011c88:	60b9      	str	r1, [r7, #8]
 8011c8a:	607a      	str	r2, [r7, #4]
 8011c8c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011c8e:	68f8      	ldr	r0, [r7, #12]
 8011c90:	f000 ff34 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8011c94:	4603      	mov	r3, r0
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	3228      	adds	r2, #40	; 0x28
 8011c9a:	6812      	ldr	r2, [r2, #0]
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d102      	bne.n	8011cac <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d06b      	beq.n	8011d84 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d002      	beq.n	8011cb8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d12b      	bne.n	8011d10 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	339c      	adds	r3, #156	; 0x9c
 8011cbe:	681c      	ldr	r4, [r3, #0]
 8011cc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011cc4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7f9 fb4e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011cce:	f107 0010 	add.w	r0, r7, #16
 8011cd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011cd6:	9302      	str	r3, [sp, #8]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	9301      	str	r3, [sp, #4]
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011ce4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011ce8:	68f9      	ldr	r1, [r7, #12]
 8011cea:	f7fc f929 	bl	800df40 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011cee:	f107 0310 	add.w	r3, r7, #16
 8011cf2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	68f8      	ldr	r0, [r7, #12]
 8011cfa:	47a0      	blx	r4
 8011cfc:	f107 0310 	add.w	r3, r7, #16
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7fc fc35 	bl	800e570 <_ZN18StringEqualFailureD1Ev>
 8011d06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7f9 fee5 	bl	800bada <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8011d10:	683a      	ldr	r2, [r7, #0]
 8011d12:	6879      	ldr	r1, [r7, #4]
 8011d14:	68b8      	ldr	r0, [r7, #8]
 8011d16:	f7f9 f9a4 	bl	800b062 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	bf14      	ite	ne
 8011d20:	2301      	movne	r3, #1
 8011d22:	2300      	moveq	r3, #0
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d02d      	beq.n	8011d86 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	339c      	adds	r3, #156	; 0x9c
 8011d30:	681c      	ldr	r4, [r3, #0]
 8011d32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011d36:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7f9 fb15 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011d40:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8011d44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011d48:	9302      	str	r3, [sp, #8]
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	9301      	str	r3, [sp, #4]
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	9300      	str	r3, [sp, #0]
 8011d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011d56:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011d5a:	68f9      	ldr	r1, [r7, #12]
 8011d5c:	f7fc f8f0 	bl	800df40 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011d60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011d64:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011d68:	4619      	mov	r1, r3
 8011d6a:	68f8      	ldr	r0, [r7, #12]
 8011d6c:	47a0      	blx	r4
 8011d6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7fc fbfc 	bl	800e570 <_ZN18StringEqualFailureD1Ev>
 8011d78:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7f9 feac 	bl	800bada <_ZN12SimpleStringD1Ev>
 8011d82:	e000      	b.n	8011d86 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011d84:	bf00      	nop
}
 8011d86:	378c      	adds	r7, #140	; 0x8c
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd90      	pop	{r4, r7, pc}

08011d8c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8011d8c:	b590      	push	{r4, r7, lr}
 8011d8e:	b0ab      	sub	sp, #172	; 0xac
 8011d90:	af04      	add	r7, sp, #16
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	60b9      	str	r1, [r7, #8]
 8011d96:	607a      	str	r2, [r7, #4]
 8011d98:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011d9a:	68f8      	ldr	r0, [r7, #12]
 8011d9c:	f000 feae 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8011da0:	4603      	mov	r3, r0
 8011da2:	681a      	ldr	r2, [r3, #0]
 8011da4:	3228      	adds	r2, #40	; 0x28
 8011da6:	6812      	ldr	r2, [r2, #0]
 8011da8:	4618      	mov	r0, r3
 8011daa:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d102      	bne.n	8011db8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d07c      	beq.n	8011eb2 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d002      	beq.n	8011dc4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d128      	bne.n	8011e16 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	3398      	adds	r3, #152	; 0x98
 8011dca:	681c      	ldr	r4, [r3, #0]
 8011dcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011dd0:	6839      	ldr	r1, [r7, #0]
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7f9 fac9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011dd8:	f107 0010 	add.w	r0, r7, #16
 8011ddc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011de0:	9302      	str	r3, [sp, #8]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	9301      	str	r3, [sp, #4]
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	9300      	str	r3, [sp, #0]
 8011dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011dee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011df2:	68f9      	ldr	r1, [r7, #12]
 8011df4:	f7fc f948 	bl	800e088 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011df8:	f107 0310 	add.w	r3, r7, #16
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	68f8      	ldr	r0, [r7, #12]
 8011e00:	47a0      	blx	r4
 8011e02:	f107 0310 	add.w	r3, r7, #16
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7fc fb90 	bl	800e52c <_ZN24StringEqualNoCaseFailureD1Ev>
 8011e0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7f9 fe62 	bl	800bada <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8011e16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011e1a:	68b9      	ldr	r1, [r7, #8]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7f9 faa4 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011e22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011e26:	6879      	ldr	r1, [r7, #4]
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7f9 fa9e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011e2e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011e32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011e36:	4611      	mov	r1, r2
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7f9 fe75 	bl	800bb28 <_ZNK12SimpleString12equalsNoCaseERKS_>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	f083 0301 	eor.w	r3, r3, #1
 8011e44:	b2dc      	uxtb	r4, r3
 8011e46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7f9 fe45 	bl	800bada <_ZN12SimpleStringD1Ev>
 8011e50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7f9 fe40 	bl	800bada <_ZN12SimpleStringD1Ev>
 8011e5a:	2c00      	cmp	r4, #0
 8011e5c:	d02a      	beq.n	8011eb4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	3398      	adds	r3, #152	; 0x98
 8011e64:	681c      	ldr	r4, [r3, #0]
 8011e66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011e6a:	6839      	ldr	r1, [r7, #0]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7f9 fa7c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011e72:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8011e76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011e7a:	9302      	str	r3, [sp, #8]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	9301      	str	r3, [sp, #4]
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	9300      	str	r3, [sp, #0]
 8011e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011e88:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011e8c:	68f9      	ldr	r1, [r7, #12]
 8011e8e:	f7fc f8fb 	bl	800e088 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011e92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011e96:	4619      	mov	r1, r3
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	47a0      	blx	r4
 8011e9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7fc fb43 	bl	800e52c <_ZN24StringEqualNoCaseFailureD1Ev>
 8011ea6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f7f9 fe15 	bl	800bada <_ZN12SimpleStringD1Ev>
 8011eb0:	e000      	b.n	8011eb4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011eb2:	bf00      	nop
}
 8011eb4:	379c      	adds	r7, #156	; 0x9c
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd90      	pop	{r4, r7, pc}

08011eba <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8011eba:	b590      	push	{r4, r7, lr}
 8011ebc:	b0b3      	sub	sp, #204	; 0xcc
 8011ebe:	af04      	add	r7, sp, #16
 8011ec0:	60f8      	str	r0, [r7, #12]
 8011ec2:	60b9      	str	r1, [r7, #8]
 8011ec4:	607a      	str	r2, [r7, #4]
 8011ec6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011ec8:	68f8      	ldr	r0, [r7, #12]
 8011eca:	f000 fe17 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	681a      	ldr	r2, [r3, #0]
 8011ed2:	3228      	adds	r2, #40	; 0x28
 8011ed4:	6812      	ldr	r2, [r2, #0]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d103      	bne.n	8011ee8 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	f000 80ad 	beq.w	8012042 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d002      	beq.n	8011ef4 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d140      	bne.n	8011f76 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	3398      	adds	r3, #152	; 0x98
 8011efa:	681c      	ldr	r4, [r3, #0]
 8011efc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011f00:	68b9      	ldr	r1, [r7, #8]
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7f9 fa31 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011f08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f0c:	6879      	ldr	r1, [r7, #4]
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7f9 fa2b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011f14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011f18:	6839      	ldr	r1, [r7, #0]
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7f9 fa25 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011f20:	f107 0010 	add.w	r0, r7, #16
 8011f24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011f28:	9302      	str	r3, [sp, #8]
 8011f2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f2e:	9301      	str	r3, [sp, #4]
 8011f30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011f34:	9300      	str	r3, [sp, #0]
 8011f36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011f3e:	68f9      	ldr	r1, [r7, #12]
 8011f40:	f7fb fce6 	bl	800d910 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011f44:	f107 0310 	add.w	r3, r7, #16
 8011f48:	4619      	mov	r1, r3
 8011f4a:	68f8      	ldr	r0, [r7, #12]
 8011f4c:	47a0      	blx	r4
 8011f4e:	f107 0310 	add.w	r3, r7, #16
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7fc fbb6 	bl	800e6c4 <_ZN15ContainsFailureD1Ev>
 8011f58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7f9 fdbc 	bl	800bada <_ZN12SimpleStringD1Ev>
 8011f62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7f9 fdb7 	bl	800bada <_ZN12SimpleStringD1Ev>
 8011f6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7f9 fdb2 	bl	800bada <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8011f76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011f7a:	6879      	ldr	r1, [r7, #4]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7f9 f9f4 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011f82:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011f86:	68b9      	ldr	r1, [r7, #8]
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7f9 f9ee 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011f8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011f92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011f96:	4611      	mov	r1, r2
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7f9 fa64 	bl	800b466 <_ZNK12SimpleString8containsERKS_>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	f083 0301 	eor.w	r3, r3, #1
 8011fa4:	b2dc      	uxtb	r4, r3
 8011fa6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011faa:	4618      	mov	r0, r3
 8011fac:	f7f9 fd95 	bl	800bada <_ZN12SimpleStringD1Ev>
 8011fb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7f9 fd90 	bl	800bada <_ZN12SimpleStringD1Ev>
 8011fba:	2c00      	cmp	r4, #0
 8011fbc:	d042      	beq.n	8012044 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	3398      	adds	r3, #152	; 0x98
 8011fc4:	681c      	ldr	r4, [r3, #0]
 8011fc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011fca:	68b9      	ldr	r1, [r7, #8]
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7f9 f9cc 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011fd2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011fd6:	6879      	ldr	r1, [r7, #4]
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7f9 f9c6 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011fde:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011fe2:	6839      	ldr	r1, [r7, #0]
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7f9 f9c0 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8011fea:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8011fee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011ff2:	9302      	str	r3, [sp, #8]
 8011ff4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011ff8:	9301      	str	r3, [sp, #4]
 8011ffa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011ffe:	9300      	str	r3, [sp, #0]
 8012000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012004:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8012008:	68f9      	ldr	r1, [r7, #12]
 801200a:	f7fb fc81 	bl	800d910 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801200e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012012:	4619      	mov	r1, r3
 8012014:	68f8      	ldr	r0, [r7, #12]
 8012016:	47a0      	blx	r4
 8012018:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801201c:	4618      	mov	r0, r3
 801201e:	f7fc fb51 	bl	800e6c4 <_ZN15ContainsFailureD1Ev>
 8012022:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012026:	4618      	mov	r0, r3
 8012028:	f7f9 fd57 	bl	800bada <_ZN12SimpleStringD1Ev>
 801202c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012030:	4618      	mov	r0, r3
 8012032:	f7f9 fd52 	bl	800bada <_ZN12SimpleStringD1Ev>
 8012036:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801203a:	4618      	mov	r0, r3
 801203c:	f7f9 fd4d 	bl	800bada <_ZN12SimpleStringD1Ev>
 8012040:	e000      	b.n	8012044 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012042:	bf00      	nop
}
 8012044:	37bc      	adds	r7, #188	; 0xbc
 8012046:	46bd      	mov	sp, r7
 8012048:	bd90      	pop	{r4, r7, pc}

0801204a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801204a:	b590      	push	{r4, r7, lr}
 801204c:	b0b3      	sub	sp, #204	; 0xcc
 801204e:	af04      	add	r7, sp, #16
 8012050:	60f8      	str	r0, [r7, #12]
 8012052:	60b9      	str	r1, [r7, #8]
 8012054:	607a      	str	r2, [r7, #4]
 8012056:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012058:	68f8      	ldr	r0, [r7, #12]
 801205a:	f000 fd4f 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 801205e:	4603      	mov	r3, r0
 8012060:	681a      	ldr	r2, [r3, #0]
 8012062:	3228      	adds	r2, #40	; 0x28
 8012064:	6812      	ldr	r2, [r2, #0]
 8012066:	4618      	mov	r0, r3
 8012068:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d103      	bne.n	8012078 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	2b00      	cmp	r3, #0
 8012074:	f000 80ad 	beq.w	80121d2 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d002      	beq.n	8012084 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d140      	bne.n	8012106 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	3398      	adds	r3, #152	; 0x98
 801208a:	681c      	ldr	r4, [r3, #0]
 801208c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012090:	68b9      	ldr	r1, [r7, #8]
 8012092:	4618      	mov	r0, r3
 8012094:	f7f9 f969 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8012098:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801209c:	6879      	ldr	r1, [r7, #4]
 801209e:	4618      	mov	r0, r3
 80120a0:	f7f9 f963 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80120a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80120a8:	6839      	ldr	r1, [r7, #0]
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7f9 f95d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80120b0:	f107 0010 	add.w	r0, r7, #16
 80120b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80120b8:	9302      	str	r3, [sp, #8]
 80120ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80120be:	9301      	str	r3, [sp, #4]
 80120c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80120ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80120ce:	68f9      	ldr	r1, [r7, #12]
 80120d0:	f7fb fc1e 	bl	800d910 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80120d4:	f107 0310 	add.w	r3, r7, #16
 80120d8:	4619      	mov	r1, r3
 80120da:	68f8      	ldr	r0, [r7, #12]
 80120dc:	47a0      	blx	r4
 80120de:	f107 0310 	add.w	r3, r7, #16
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7fc faee 	bl	800e6c4 <_ZN15ContainsFailureD1Ev>
 80120e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7f9 fcf4 	bl	800bada <_ZN12SimpleStringD1Ev>
 80120f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7f9 fcef 	bl	800bada <_ZN12SimpleStringD1Ev>
 80120fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012100:	4618      	mov	r0, r3
 8012102:	f7f9 fcea 	bl	800bada <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8012106:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801210a:	6879      	ldr	r1, [r7, #4]
 801210c:	4618      	mov	r0, r3
 801210e:	f7f9 f92c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8012112:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012116:	68b9      	ldr	r1, [r7, #8]
 8012118:	4618      	mov	r0, r3
 801211a:	f7f9 f926 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801211e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8012122:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012126:	4611      	mov	r1, r2
 8012128:	4618      	mov	r0, r3
 801212a:	f7f9 f9b7 	bl	800b49c <_ZNK12SimpleString14containsNoCaseERKS_>
 801212e:	4603      	mov	r3, r0
 8012130:	f083 0301 	eor.w	r3, r3, #1
 8012134:	b2dc      	uxtb	r4, r3
 8012136:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801213a:	4618      	mov	r0, r3
 801213c:	f7f9 fccd 	bl	800bada <_ZN12SimpleStringD1Ev>
 8012140:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012144:	4618      	mov	r0, r3
 8012146:	f7f9 fcc8 	bl	800bada <_ZN12SimpleStringD1Ev>
 801214a:	2c00      	cmp	r4, #0
 801214c:	d042      	beq.n	80121d4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	3398      	adds	r3, #152	; 0x98
 8012154:	681c      	ldr	r4, [r3, #0]
 8012156:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801215a:	68b9      	ldr	r1, [r7, #8]
 801215c:	4618      	mov	r0, r3
 801215e:	f7f9 f904 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8012162:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012166:	6879      	ldr	r1, [r7, #4]
 8012168:	4618      	mov	r0, r3
 801216a:	f7f9 f8fe 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801216e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012172:	6839      	ldr	r1, [r7, #0]
 8012174:	4618      	mov	r0, r3
 8012176:	f7f9 f8f8 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801217a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801217e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012182:	9302      	str	r3, [sp, #8]
 8012184:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012188:	9301      	str	r3, [sp, #4]
 801218a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801218e:	9300      	str	r3, [sp, #0]
 8012190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012194:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8012198:	68f9      	ldr	r1, [r7, #12]
 801219a:	f7fb fbb9 	bl	800d910 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801219e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80121a2:	4619      	mov	r1, r3
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	47a0      	blx	r4
 80121a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7fc fa89 	bl	800e6c4 <_ZN15ContainsFailureD1Ev>
 80121b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7f9 fc8f 	bl	800bada <_ZN12SimpleStringD1Ev>
 80121bc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7f9 fc8a 	bl	800bada <_ZN12SimpleStringD1Ev>
 80121c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7f9 fc85 	bl	800bada <_ZN12SimpleStringD1Ev>
 80121d0:	e000      	b.n	80121d4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80121d2:	bf00      	nop
}
 80121d4:	37bc      	adds	r7, #188	; 0xbc
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd90      	pop	{r4, r7, pc}

080121da <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80121da:	b590      	push	{r4, r7, lr}
 80121dc:	b099      	sub	sp, #100	; 0x64
 80121de:	af04      	add	r7, sp, #16
 80121e0:	60f8      	str	r0, [r7, #12]
 80121e2:	60b9      	str	r1, [r7, #8]
 80121e4:	607a      	str	r2, [r7, #4]
 80121e6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f000 fc87 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 80121ee:	4603      	mov	r3, r0
 80121f0:	681a      	ldr	r2, [r3, #0]
 80121f2:	3228      	adds	r2, #40	; 0x28
 80121f4:	6812      	ldr	r2, [r2, #0]
 80121f6:	4618      	mov	r0, r3
 80121f8:	4790      	blx	r2
    if (expected != actual)
 80121fa:	68ba      	ldr	r2, [r7, #8]
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	429a      	cmp	r2, r3
 8012200:	d027      	beq.n	8012252 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	339c      	adds	r3, #156	; 0x9c
 8012208:	681c      	ldr	r4, [r3, #0]
 801220a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801220e:	6839      	ldr	r1, [r7, #0]
 8012210:	4618      	mov	r0, r3
 8012212:	f7f9 f8aa 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8012216:	f107 0014 	add.w	r0, r7, #20
 801221a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801221e:	9302      	str	r3, [sp, #8]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	9301      	str	r3, [sp, #4]
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801222a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801222c:	68f9      	ldr	r1, [r7, #12]
 801222e:	f7fb fc1f 	bl	800da70 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8012232:	f107 0314 	add.w	r3, r7, #20
 8012236:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012238:	4619      	mov	r1, r3
 801223a:	68f8      	ldr	r0, [r7, #12]
 801223c:	47a0      	blx	r4
 801223e:	f107 0314 	add.w	r3, r7, #20
 8012242:	4618      	mov	r0, r3
 8012244:	f7fc f9fa 	bl	800e63c <_ZN17LongsEqualFailureD1Ev>
 8012248:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801224c:	4618      	mov	r0, r3
 801224e:	f7f9 fc44 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8012252:	bf00      	nop
 8012254:	3754      	adds	r7, #84	; 0x54
 8012256:	46bd      	mov	sp, r7
 8012258:	bd90      	pop	{r4, r7, pc}

0801225a <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801225a:	b590      	push	{r4, r7, lr}
 801225c:	b099      	sub	sp, #100	; 0x64
 801225e:	af04      	add	r7, sp, #16
 8012260:	60f8      	str	r0, [r7, #12]
 8012262:	60b9      	str	r1, [r7, #8]
 8012264:	607a      	str	r2, [r7, #4]
 8012266:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012268:	68f8      	ldr	r0, [r7, #12]
 801226a:	f000 fc47 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 801226e:	4603      	mov	r3, r0
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	3228      	adds	r2, #40	; 0x28
 8012274:	6812      	ldr	r2, [r2, #0]
 8012276:	4618      	mov	r0, r3
 8012278:	4790      	blx	r2
    if (expected != actual)
 801227a:	68ba      	ldr	r2, [r7, #8]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	429a      	cmp	r2, r3
 8012280:	d027      	beq.n	80122d2 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	339c      	adds	r3, #156	; 0x9c
 8012288:	681c      	ldr	r4, [r3, #0]
 801228a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801228e:	6839      	ldr	r1, [r7, #0]
 8012290:	4618      	mov	r0, r3
 8012292:	f7f9 f86a 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8012296:	f107 0014 	add.w	r0, r7, #20
 801229a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801229e:	9302      	str	r3, [sp, #8]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	9301      	str	r3, [sp, #4]
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80122ac:	68f9      	ldr	r1, [r7, #12]
 80122ae:	f7fb fcab 	bl	800dc08 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 80122b2:	f107 0314 	add.w	r3, r7, #20
 80122b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80122b8:	4619      	mov	r1, r3
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	47a0      	blx	r4
 80122be:	f107 0314 	add.w	r3, r7, #20
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fc f998 	bl	800e5f8 <_ZN25UnsignedLongsEqualFailureD1Ev>
 80122c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7f9 fc04 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 80122d2:	bf00      	nop
 80122d4:	3754      	adds	r7, #84	; 0x54
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd90      	pop	{r4, r7, pc}
	...

080122dc <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80122dc:	b082      	sub	sp, #8
 80122de:	b590      	push	{r4, r7, lr}
 80122e0:	b099      	sub	sp, #100	; 0x64
 80122e2:	af02      	add	r7, sp, #8
 80122e4:	60f8      	str	r0, [r7, #12]
 80122e6:	1d38      	adds	r0, r7, #4
 80122e8:	e880 0006 	stmia.w	r0, {r1, r2}
 80122ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f000 fc04 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 80122f4:	4603      	mov	r3, r0
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	3228      	adds	r2, #40	; 0x28
 80122fa:	6812      	ldr	r2, [r2, #0]
 80122fc:	4618      	mov	r0, r3
 80122fe:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	339c      	adds	r3, #156	; 0x9c
 8012306:	681c      	ldr	r4, [r3, #0]
 8012308:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801230c:	4919      	ldr	r1, [pc, #100]	; (8012374 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 801230e:	4618      	mov	r0, r3
 8012310:	f7f9 f82b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8012314:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012318:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801231a:	4618      	mov	r0, r3
 801231c:	f7f9 f825 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8012320:	f107 0014 	add.w	r0, r7, #20
 8012324:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012328:	9301      	str	r3, [sp, #4]
 801232a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801232e:	9300      	str	r3, [sp, #0]
 8012330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012332:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012334:	68f9      	ldr	r1, [r7, #12]
 8012336:	f7fc f84d 	bl	800e3d4 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 801233a:	f107 0314 	add.w	r3, r7, #20
 801233e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012342:	4619      	mov	r1, r3
 8012344:	68f8      	ldr	r0, [r7, #12]
 8012346:	47a0      	blx	r4
 8012348:	f107 0314 	add.w	r3, r7, #20
 801234c:	4618      	mov	r0, r3
 801234e:	f7fc f887 	bl	800e460 <_ZN25FeatureUnsupportedFailureD1Ev>
 8012352:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012356:	4618      	mov	r0, r3
 8012358:	f7f9 fbbf 	bl	800bada <_ZN12SimpleStringD1Ev>
 801235c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012360:	4618      	mov	r0, r3
 8012362:	f7f9 fbba 	bl	800bada <_ZN12SimpleStringD1Ev>
#endif
}
 8012366:	bf00      	nop
 8012368:	375c      	adds	r7, #92	; 0x5c
 801236a:	46bd      	mov	sp, r7
 801236c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8012370:	b002      	add	sp, #8
 8012372:	4770      	bx	lr
 8012374:	08023530 	.word	0x08023530

08012378 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012378:	b082      	sub	sp, #8
 801237a:	b590      	push	{r4, r7, lr}
 801237c:	b099      	sub	sp, #100	; 0x64
 801237e:	af02      	add	r7, sp, #8
 8012380:	60f8      	str	r0, [r7, #12]
 8012382:	1d38      	adds	r0, r7, #4
 8012384:	e880 0006 	stmia.w	r0, {r1, r2}
 8012388:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	f000 fbb6 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8012390:	4603      	mov	r3, r0
 8012392:	681a      	ldr	r2, [r3, #0]
 8012394:	3228      	adds	r2, #40	; 0x28
 8012396:	6812      	ldr	r2, [r2, #0]
 8012398:	4618      	mov	r0, r3
 801239a:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	339c      	adds	r3, #156	; 0x9c
 80123a2:	681c      	ldr	r4, [r3, #0]
 80123a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80123a8:	4919      	ldr	r1, [pc, #100]	; (8012410 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7f8 ffdd 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80123b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80123b4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7f8 ffd7 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80123bc:	f107 0014 	add.w	r0, r7, #20
 80123c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80123c4:	9301      	str	r3, [sp, #4]
 80123c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80123ca:	9300      	str	r3, [sp, #0]
 80123cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80123ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80123d0:	68f9      	ldr	r1, [r7, #12]
 80123d2:	f7fb ffff 	bl	800e3d4 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 80123d6:	f107 0314 	add.w	r3, r7, #20
 80123da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80123de:	4619      	mov	r1, r3
 80123e0:	68f8      	ldr	r0, [r7, #12]
 80123e2:	47a0      	blx	r4
 80123e4:	f107 0314 	add.w	r3, r7, #20
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7fc f839 	bl	800e460 <_ZN25FeatureUnsupportedFailureD1Ev>
 80123ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7f9 fb71 	bl	800bada <_ZN12SimpleStringD1Ev>
 80123f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7f9 fb6c 	bl	800bada <_ZN12SimpleStringD1Ev>
#endif
}
 8012402:	bf00      	nop
 8012404:	375c      	adds	r7, #92	; 0x5c
 8012406:	46bd      	mov	sp, r7
 8012408:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801240c:	b002      	add	sp, #8
 801240e:	4770      	bx	lr
 8012410:	08023530 	.word	0x08023530

08012414 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012414:	b590      	push	{r4, r7, lr}
 8012416:	b099      	sub	sp, #100	; 0x64
 8012418:	af04      	add	r7, sp, #16
 801241a:	60f8      	str	r0, [r7, #12]
 801241c:	607b      	str	r3, [r7, #4]
 801241e:	460b      	mov	r3, r1
 8012420:	72fb      	strb	r3, [r7, #11]
 8012422:	4613      	mov	r3, r2
 8012424:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8012426:	68f8      	ldr	r0, [r7, #12]
 8012428:	f000 fb68 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 801242c:	4603      	mov	r3, r0
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	3228      	adds	r2, #40	; 0x28
 8012432:	6812      	ldr	r2, [r2, #0]
 8012434:	4618      	mov	r0, r3
 8012436:	4790      	blx	r2
    if (expected != actual)
 8012438:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801243c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8012440:	429a      	cmp	r2, r3
 8012442:	d029      	beq.n	8012498 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	339c      	adds	r3, #156	; 0x9c
 801244a:	681c      	ldr	r4, [r3, #0]
 801244c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012450:	6879      	ldr	r1, [r7, #4]
 8012452:	4618      	mov	r0, r3
 8012454:	f7f8 ff89 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8012458:	f107 0014 	add.w	r0, r7, #20
 801245c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012460:	9302      	str	r3, [sp, #8]
 8012462:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8012466:	9301      	str	r3, [sp, #4]
 8012468:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801246c:	9300      	str	r3, [sp, #0]
 801246e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012470:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012472:	68f9      	ldr	r1, [r7, #12]
 8012474:	f7fb fc94 	bl	800dda0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8012478:	f107 0314 	add.w	r3, r7, #20
 801247c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801247e:	4619      	mov	r1, r3
 8012480:	68f8      	ldr	r0, [r7, #12]
 8012482:	47a0      	blx	r4
 8012484:	f107 0314 	add.w	r3, r7, #20
 8012488:	4618      	mov	r0, r3
 801248a:	f7fc f893 	bl	800e5b4 <_ZN23SignedBytesEqualFailureD1Ev>
 801248e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012492:	4618      	mov	r0, r3
 8012494:	f7f9 fb21 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8012498:	bf00      	nop
 801249a:	3754      	adds	r7, #84	; 0x54
 801249c:	46bd      	mov	sp, r7
 801249e:	bd90      	pop	{r4, r7, pc}

080124a0 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80124a0:	b590      	push	{r4, r7, lr}
 80124a2:	b09d      	sub	sp, #116	; 0x74
 80124a4:	af04      	add	r7, sp, #16
 80124a6:	60f8      	str	r0, [r7, #12]
 80124a8:	60b9      	str	r1, [r7, #8]
 80124aa:	607a      	str	r2, [r7, #4]
 80124ac:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80124ae:	68f8      	ldr	r0, [r7, #12]
 80124b0:	f000 fb24 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 80124b4:	4603      	mov	r3, r0
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	3228      	adds	r2, #40	; 0x28
 80124ba:	6812      	ldr	r2, [r2, #0]
 80124bc:	4618      	mov	r0, r3
 80124be:	4790      	blx	r2
    if (expected != actual)
 80124c0:	68ba      	ldr	r2, [r7, #8]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d03f      	beq.n	8012548 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	339c      	adds	r3, #156	; 0x9c
 80124ce:	681c      	ldr	r4, [r3, #0]
 80124d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80124d4:	68b9      	ldr	r1, [r7, #8]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7f9 fdea 	bl	800c0b0 <_Z10StringFromPKv>
 80124dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80124e0:	6879      	ldr	r1, [r7, #4]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7f9 fde4 	bl	800c0b0 <_Z10StringFromPKv>
 80124e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80124ec:	6839      	ldr	r1, [r7, #0]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7f8 ff3b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80124f4:	f107 0014 	add.w	r0, r7, #20
 80124f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80124fc:	9302      	str	r3, [sp, #8]
 80124fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012502:	9301      	str	r3, [sp, #4]
 8012504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012508:	9300      	str	r3, [sp, #0]
 801250a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801250c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801250e:	68f9      	ldr	r1, [r7, #12]
 8012510:	f7fb f814 	bl	800d53c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012514:	f107 0314 	add.w	r3, r7, #20
 8012518:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801251a:	4619      	mov	r1, r3
 801251c:	68f8      	ldr	r0, [r7, #12]
 801251e:	47a0      	blx	r4
 8012520:	f107 0314 	add.w	r3, r7, #20
 8012524:	4618      	mov	r0, r3
 8012526:	f7fc f955 	bl	800e7d4 <_ZN13EqualsFailureD1Ev>
 801252a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801252e:	4618      	mov	r0, r3
 8012530:	f7f9 fad3 	bl	800bada <_ZN12SimpleStringD1Ev>
 8012534:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012538:	4618      	mov	r0, r3
 801253a:	f7f9 face 	bl	800bada <_ZN12SimpleStringD1Ev>
 801253e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012542:	4618      	mov	r0, r3
 8012544:	f7f9 fac9 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8012548:	bf00      	nop
 801254a:	3764      	adds	r7, #100	; 0x64
 801254c:	46bd      	mov	sp, r7
 801254e:	bd90      	pop	{r4, r7, pc}

08012550 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012550:	b590      	push	{r4, r7, lr}
 8012552:	b09d      	sub	sp, #116	; 0x74
 8012554:	af04      	add	r7, sp, #16
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
 801255c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801255e:	68f8      	ldr	r0, [r7, #12]
 8012560:	f000 facc 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8012564:	4603      	mov	r3, r0
 8012566:	681a      	ldr	r2, [r3, #0]
 8012568:	3228      	adds	r2, #40	; 0x28
 801256a:	6812      	ldr	r2, [r2, #0]
 801256c:	4618      	mov	r0, r3
 801256e:	4790      	blx	r2
    if (expected != actual)
 8012570:	68ba      	ldr	r2, [r7, #8]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	429a      	cmp	r2, r3
 8012576:	d03f      	beq.n	80125f8 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	339c      	adds	r3, #156	; 0x9c
 801257e:	681c      	ldr	r4, [r3, #0]
 8012580:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012584:	68b9      	ldr	r1, [r7, #8]
 8012586:	4618      	mov	r0, r3
 8012588:	f7f9 fdbc 	bl	800c104 <_Z10StringFromPFvvE>
 801258c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012590:	6879      	ldr	r1, [r7, #4]
 8012592:	4618      	mov	r0, r3
 8012594:	f7f9 fdb6 	bl	800c104 <_Z10StringFromPFvvE>
 8012598:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801259c:	6839      	ldr	r1, [r7, #0]
 801259e:	4618      	mov	r0, r3
 80125a0:	f7f8 fee3 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80125a4:	f107 0014 	add.w	r0, r7, #20
 80125a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80125ac:	9302      	str	r3, [sp, #8]
 80125ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80125b2:	9301      	str	r3, [sp, #4]
 80125b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80125b8:	9300      	str	r3, [sp, #0]
 80125ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80125bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80125be:	68f9      	ldr	r1, [r7, #12]
 80125c0:	f7fa ffbc 	bl	800d53c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80125c4:	f107 0314 	add.w	r3, r7, #20
 80125c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80125ca:	4619      	mov	r1, r3
 80125cc:	68f8      	ldr	r0, [r7, #12]
 80125ce:	47a0      	blx	r4
 80125d0:	f107 0314 	add.w	r3, r7, #20
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7fc f8fd 	bl	800e7d4 <_ZN13EqualsFailureD1Ev>
 80125da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80125de:	4618      	mov	r0, r3
 80125e0:	f7f9 fa7b 	bl	800bada <_ZN12SimpleStringD1Ev>
 80125e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7f9 fa76 	bl	800bada <_ZN12SimpleStringD1Ev>
 80125ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7f9 fa71 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 80125f8:	bf00      	nop
 80125fa:	3764      	adds	r7, #100	; 0x64
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd90      	pop	{r4, r7, pc}

08012600 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012600:	b590      	push	{r4, r7, lr}
 8012602:	b09d      	sub	sp, #116	; 0x74
 8012604:	af02      	add	r7, sp, #8
 8012606:	6278      	str	r0, [r7, #36]	; 0x24
 8012608:	ed87 0b06 	vstr	d0, [r7, #24]
 801260c:	ed87 1b04 	vstr	d1, [r7, #16]
 8012610:	ed87 2b02 	vstr	d2, [r7, #8]
 8012614:	6239      	str	r1, [r7, #32]
 8012616:	607a      	str	r2, [r7, #4]
 8012618:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801261a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801261c:	f000 fa6e 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8012620:	4603      	mov	r3, r0
 8012622:	681a      	ldr	r2, [r3, #0]
 8012624:	3228      	adds	r2, #40	; 0x28
 8012626:	6812      	ldr	r2, [r2, #0]
 8012628:	4618      	mov	r0, r3
 801262a:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 801262c:	ed97 2b02 	vldr	d2, [r7, #8]
 8012630:	ed97 1b04 	vldr	d1, [r7, #16]
 8012634:	ed97 0b06 	vldr	d0, [r7, #24]
 8012638:	f7fe fd4a 	bl	80110d0 <_Z13doubles_equalddd>
 801263c:	4603      	mov	r3, r0
 801263e:	f083 0301 	eor.w	r3, r3, #1
 8012642:	b2db      	uxtb	r3, r3
 8012644:	2b00      	cmp	r3, #0
 8012646:	d029      	beq.n	801269c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8012648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	339c      	adds	r3, #156	; 0x9c
 801264e:	681c      	ldr	r4, [r3, #0]
 8012650:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012654:	6a39      	ldr	r1, [r7, #32]
 8012656:	4618      	mov	r0, r3
 8012658:	f7f8 fe87 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801265c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8012660:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012664:	9300      	str	r3, [sp, #0]
 8012666:	ed97 2b02 	vldr	d2, [r7, #8]
 801266a:	ed97 1b04 	vldr	d1, [r7, #16]
 801266e:	ed97 0b06 	vldr	d0, [r7, #24]
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	687a      	ldr	r2, [r7, #4]
 8012676:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012678:	f7fa ffa2 	bl	800d5c0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 801267c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012680:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012682:	4619      	mov	r1, r3
 8012684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012686:	47a0      	blx	r4
 8012688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801268c:	4618      	mov	r0, r3
 801268e:	f7fc f87f 	bl	800e790 <_ZN19DoublesEqualFailureD1Ev>
 8012692:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012696:	4618      	mov	r0, r3
 8012698:	f7f9 fa1f 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 801269c:	bf00      	nop
 801269e:	376c      	adds	r7, #108	; 0x6c
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd90      	pop	{r4, r7, pc}

080126a4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80126a4:	b590      	push	{r4, r7, lr}
 80126a6:	b0a7      	sub	sp, #156	; 0x9c
 80126a8:	af04      	add	r7, sp, #16
 80126aa:	60f8      	str	r0, [r7, #12]
 80126ac:	60b9      	str	r1, [r7, #8]
 80126ae:	607a      	str	r2, [r7, #4]
 80126b0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80126b2:	68f8      	ldr	r0, [r7, #12]
 80126b4:	f000 fa22 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 80126b8:	4603      	mov	r3, r0
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	3228      	adds	r2, #40	; 0x28
 80126be:	6812      	ldr	r2, [r2, #0]
 80126c0:	4618      	mov	r0, r3
 80126c2:	4790      	blx	r2
	if (length == 0) return;
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d075      	beq.n	80127b6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d102      	bne.n	80126d6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d071      	beq.n	80127ba <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d002      	beq.n	80126e2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d12d      	bne.n	801273e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	339c      	adds	r3, #156	; 0x9c
 80126e8:	681c      	ldr	r4, [r3, #0]
 80126ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80126ee:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7f8 fe39 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80126f8:	f107 0010 	add.w	r0, r7, #16
 80126fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012700:	9303      	str	r3, [sp, #12]
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	9302      	str	r3, [sp, #8]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	9301      	str	r3, [sp, #4]
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	9300      	str	r3, [sp, #0]
 801270e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012712:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012716:	68f9      	ldr	r1, [r7, #12]
 8012718:	f7fb fd70 	bl	800e1fc <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 801271c:	f107 0310 	add.w	r3, r7, #16
 8012720:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012724:	4619      	mov	r1, r3
 8012726:	68f8      	ldr	r0, [r7, #12]
 8012728:	47a0      	blx	r4
 801272a:	f107 0310 	add.w	r3, r7, #16
 801272e:	4618      	mov	r0, r3
 8012730:	f7fb feda 	bl	800e4e8 <_ZN18BinaryEqualFailureD1Ev>
 8012734:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012738:	4618      	mov	r0, r3
 801273a:	f7f9 f9ce 	bl	800bada <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 801273e:	683a      	ldr	r2, [r7, #0]
 8012740:	6879      	ldr	r1, [r7, #4]
 8012742:	68b8      	ldr	r0, [r7, #8]
 8012744:	f7f8 fd30 	bl	800b1a8 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	bf14      	ite	ne
 801274e:	2301      	movne	r3, #1
 8012750:	2300      	moveq	r3, #0
 8012752:	b2db      	uxtb	r3, r3
 8012754:	2b00      	cmp	r3, #0
 8012756:	d031      	beq.n	80127bc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	339c      	adds	r3, #156	; 0x9c
 801275e:	681c      	ldr	r4, [r3, #0]
 8012760:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012764:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012768:	4618      	mov	r0, r3
 801276a:	f7f8 fdfe 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801276e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012772:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012776:	9303      	str	r3, [sp, #12]
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	9302      	str	r3, [sp, #8]
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	9301      	str	r3, [sp, #4]
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	9300      	str	r3, [sp, #0]
 8012784:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012788:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801278c:	68f9      	ldr	r1, [r7, #12]
 801278e:	f7fb fd35 	bl	800e1fc <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8012792:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012796:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801279a:	4619      	mov	r1, r3
 801279c:	68f8      	ldr	r0, [r7, #12]
 801279e:	47a0      	blx	r4
 80127a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7fb fe9f 	bl	800e4e8 <_ZN18BinaryEqualFailureD1Ev>
 80127aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7f9 f993 	bl	800bada <_ZN12SimpleStringD1Ev>
 80127b4:	e002      	b.n	80127bc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 80127b6:	bf00      	nop
 80127b8:	e000      	b.n	80127bc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80127ba:	bf00      	nop
}
 80127bc:	378c      	adds	r7, #140	; 0x8c
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd90      	pop	{r4, r7, pc}

080127c2 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80127c2:	b590      	push	{r4, r7, lr}
 80127c4:	b09b      	sub	sp, #108	; 0x6c
 80127c6:	af06      	add	r7, sp, #24
 80127c8:	60f8      	str	r0, [r7, #12]
 80127ca:	60b9      	str	r1, [r7, #8]
 80127cc:	607a      	str	r2, [r7, #4]
 80127ce:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80127d0:	68f8      	ldr	r0, [r7, #12]
 80127d2:	f000 f993 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 80127d6:	4603      	mov	r3, r0
 80127d8:	681a      	ldr	r2, [r3, #0]
 80127da:	3228      	adds	r2, #40	; 0x28
 80127dc:	6812      	ldr	r2, [r2, #0]
 80127de:	4618      	mov	r0, r3
 80127e0:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 80127e2:	68ba      	ldr	r2, [r7, #8]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	405a      	eors	r2, r3
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	4013      	ands	r3, r2
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d02b      	beq.n	8012848 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	339c      	adds	r3, #156	; 0x9c
 80127f6:	681c      	ldr	r4, [r3, #0]
 80127f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80127fc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80127fe:	4618      	mov	r0, r3
 8012800:	f7f8 fdb3 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8012804:	f107 0014 	add.w	r0, r7, #20
 8012808:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801280c:	9304      	str	r3, [sp, #16]
 801280e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012810:	9303      	str	r3, [sp, #12]
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	9302      	str	r3, [sp, #8]
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	9301      	str	r3, [sp, #4]
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	9300      	str	r3, [sp, #0]
 801281e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012820:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012822:	68f9      	ldr	r1, [r7, #12]
 8012824:	f7fb fd7a 	bl	800e31c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8012828:	f107 0314 	add.w	r3, r7, #20
 801282c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801282e:	4619      	mov	r1, r3
 8012830:	68f8      	ldr	r0, [r7, #12]
 8012832:	47a0      	blx	r4
 8012834:	f107 0314 	add.w	r3, r7, #20
 8012838:	4618      	mov	r0, r3
 801283a:	f7fb fe33 	bl	800e4a4 <_ZN16BitsEqualFailureD1Ev>
 801283e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012842:	4618      	mov	r0, r3
 8012844:	f7f9 f949 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8012848:	bf00      	nop
 801284a:	3754      	adds	r7, #84	; 0x54
 801284c:	46bd      	mov	sp, r7
 801284e:	bd90      	pop	{r4, r7, pc}

08012850 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8012850:	b590      	push	{r4, r7, lr}
 8012852:	b09d      	sub	sp, #116	; 0x74
 8012854:	af04      	add	r7, sp, #16
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	607a      	str	r2, [r7, #4]
 801285a:	603b      	str	r3, [r7, #0]
 801285c:	460b      	mov	r3, r1
 801285e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012860:	68f8      	ldr	r0, [r7, #12]
 8012862:	f000 f94b 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8012866:	4603      	mov	r3, r0
 8012868:	681a      	ldr	r2, [r3, #0]
 801286a:	3228      	adds	r2, #40	; 0x28
 801286c:	6812      	ldr	r2, [r2, #0]
 801286e:	4618      	mov	r0, r3
 8012870:	4790      	blx	r2
    if (failed)
 8012872:	7afb      	ldrb	r3, [r7, #11]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d03f      	beq.n	80128f8 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	339c      	adds	r3, #156	; 0x9c
 801287e:	681c      	ldr	r4, [r3, #0]
 8012880:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012884:	6879      	ldr	r1, [r7, #4]
 8012886:	4618      	mov	r0, r3
 8012888:	f7f8 fd6f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801288c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012890:	6839      	ldr	r1, [r7, #0]
 8012892:	4618      	mov	r0, r3
 8012894:	f7f8 fd69 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8012898:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801289c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801289e:	4618      	mov	r0, r3
 80128a0:	f7f8 fd63 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80128a4:	f107 0014 	add.w	r0, r7, #20
 80128a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80128ac:	9302      	str	r3, [sp, #8]
 80128ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80128b2:	9301      	str	r3, [sp, #4]
 80128b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80128b8:	9300      	str	r3, [sp, #0]
 80128ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80128bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80128be:	68f9      	ldr	r1, [r7, #12]
 80128c0:	f7fa ff30 	bl	800d724 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80128c4:	f107 0314 	add.w	r3, r7, #20
 80128c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80128ca:	4619      	mov	r1, r3
 80128cc:	68f8      	ldr	r0, [r7, #12]
 80128ce:	47a0      	blx	r4
 80128d0:	f107 0314 	add.w	r3, r7, #20
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7fb ff39 	bl	800e74c <_ZN17CheckEqualFailureD1Ev>
 80128da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80128de:	4618      	mov	r0, r3
 80128e0:	f7f9 f8fb 	bl	800bada <_ZN12SimpleStringD1Ev>
 80128e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7f9 f8f6 	bl	800bada <_ZN12SimpleStringD1Ev>
 80128ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7f9 f8f1 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 80128f8:	bf00      	nop
 80128fa:	3764      	adds	r7, #100	; 0x64
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd90      	pop	{r4, r7, pc}

08012900 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8012900:	b590      	push	{r4, r7, lr}
 8012902:	b09d      	sub	sp, #116	; 0x74
 8012904:	af04      	add	r7, sp, #16
 8012906:	60f8      	str	r0, [r7, #12]
 8012908:	607a      	str	r2, [r7, #4]
 801290a:	603b      	str	r3, [r7, #0]
 801290c:	460b      	mov	r3, r1
 801290e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012910:	68f8      	ldr	r0, [r7, #12]
 8012912:	f000 f8f3 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8012916:	4603      	mov	r3, r0
 8012918:	681a      	ldr	r2, [r3, #0]
 801291a:	3228      	adds	r2, #40	; 0x28
 801291c:	6812      	ldr	r2, [r2, #0]
 801291e:	4618      	mov	r0, r3
 8012920:	4790      	blx	r2
    if (!comparison)
 8012922:	7afb      	ldrb	r3, [r7, #11]
 8012924:	f083 0301 	eor.w	r3, r3, #1
 8012928:	b2db      	uxtb	r3, r3
 801292a:	2b00      	cmp	r3, #0
 801292c:	d03f      	beq.n	80129ae <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	339c      	adds	r3, #156	; 0x9c
 8012934:	681c      	ldr	r4, [r3, #0]
 8012936:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801293a:	6879      	ldr	r1, [r7, #4]
 801293c:	4618      	mov	r0, r3
 801293e:	f7f8 fd14 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8012942:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012946:	6839      	ldr	r1, [r7, #0]
 8012948:	4618      	mov	r0, r3
 801294a:	f7f8 fd0e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801294e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012952:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012954:	4618      	mov	r0, r3
 8012956:	f7f8 fd08 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801295a:	f107 0014 	add.w	r0, r7, #20
 801295e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012962:	9302      	str	r3, [sp, #8]
 8012964:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012968:	9301      	str	r3, [sp, #4]
 801296a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801296e:	9300      	str	r3, [sp, #0]
 8012970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012972:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012974:	68f9      	ldr	r1, [r7, #12]
 8012976:	f7fa ff83 	bl	800d880 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801297a:	f107 0314 	add.w	r3, r7, #20
 801297e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012980:	4619      	mov	r1, r3
 8012982:	68f8      	ldr	r0, [r7, #12]
 8012984:	47a0      	blx	r4
 8012986:	f107 0314 	add.w	r3, r7, #20
 801298a:	4618      	mov	r0, r3
 801298c:	f7fb febc 	bl	800e708 <_ZN17ComparisonFailureD1Ev>
 8012990:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012994:	4618      	mov	r0, r3
 8012996:	f7f9 f8a0 	bl	800bada <_ZN12SimpleStringD1Ev>
 801299a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801299e:	4618      	mov	r0, r3
 80129a0:	f7f9 f89b 	bl	800bada <_ZN12SimpleStringD1Ev>
 80129a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80129a8:	4618      	mov	r0, r3
 80129aa:	f7f9 f896 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 80129ae:	bf00      	nop
 80129b0:	3764      	adds	r7, #100	; 0x64
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd90      	pop	{r4, r7, pc}
	...

080129b8 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 80129b8:	b5b0      	push	{r4, r5, r7, lr}
 80129ba:	b088      	sub	sp, #32
 80129bc:	af00      	add	r7, sp, #0
 80129be:	60f8      	str	r0, [r7, #12]
 80129c0:	60b9      	str	r1, [r7, #8]
 80129c2:	607a      	str	r2, [r7, #4]
 80129c4:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 80129c6:	f107 0310 	add.w	r3, r7, #16
 80129ca:	4924      	ldr	r1, [pc, #144]	; (8012a5c <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7f8 fccc 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 80129d2:	f107 0310 	add.w	r3, r7, #16
 80129d6:	6879      	ldr	r1, [r7, #4]
 80129d8:	4618      	mov	r0, r3
 80129da:	f7f9 f90d 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 80129de:	f107 0310 	add.w	r3, r7, #16
 80129e2:	491f      	ldr	r1, [pc, #124]	; (8012a60 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 80129e4:	4618      	mov	r0, r3
 80129e6:	f7f9 f907 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 80129ea:	f107 0318 	add.w	r3, r7, #24
 80129ee:	6839      	ldr	r1, [r7, #0]
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7f9 fda1 	bl	800c538 <_Z10StringFromj>
 80129f6:	f107 0218 	add.w	r2, r7, #24
 80129fa:	f107 0310 	add.w	r3, r7, #16
 80129fe:	4611      	mov	r1, r2
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7f9 f8e7 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8012a06:	f107 0318 	add.w	r3, r7, #24
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7f9 f865 	bl	800bada <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8012a10:	f107 0310 	add.w	r3, r7, #16
 8012a14:	4913      	ldr	r1, [pc, #76]	; (8012a64 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7f9 f8ee 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8012a1c:	f107 0310 	add.w	r3, r7, #16
 8012a20:	68b9      	ldr	r1, [r7, #8]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7f9 f8e8 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8012a28:	68f8      	ldr	r0, [r7, #12]
 8012a2a:	f000 f867 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8012a2e:	4604      	mov	r4, r0
 8012a30:	6823      	ldr	r3, [r4, #0]
 8012a32:	3338      	adds	r3, #56	; 0x38
 8012a34:	681d      	ldr	r5, [r3, #0]
 8012a36:	f107 0310 	add.w	r3, r7, #16
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7f9 f820 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8012a40:	4603      	mov	r3, r0
 8012a42:	4619      	mov	r1, r3
 8012a44:	4620      	mov	r0, r4
 8012a46:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8012a48:	f107 0310 	add.w	r3, r7, #16
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7f9 f844 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8012a52:	bf00      	nop
 8012a54:	3720      	adds	r7, #32
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bdb0      	pop	{r4, r5, r7, pc}
 8012a5a:	bf00      	nop
 8012a5c:	08023548 	.word	0x08023548
 8012a60:	0802354c 	.word	0x0802354c
 8012a64:	08023550 	.word	0x08023550

08012a68 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8012a68:	b590      	push	{r4, r7, lr}
 8012a6a:	b085      	sub	sp, #20
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	607a      	str	r2, [r7, #4]
 8012a74:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	3370      	adds	r3, #112	; 0x70
 8012a7c:	681c      	ldr	r4, [r3, #0]
 8012a7e:	68b8      	ldr	r0, [r7, #8]
 8012a80:	f7f8 fffe 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8012a84:	4601      	mov	r1, r0
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	687a      	ldr	r2, [r7, #4]
 8012a8a:	68f8      	ldr	r0, [r7, #12]
 8012a8c:	47a0      	blx	r4
}
 8012a8e:	bf00      	nop
 8012a90:	3714      	adds	r7, #20
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd90      	pop	{r4, r7, pc}

08012a96 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8012a96:	b580      	push	{r7, lr}
 8012a98:	b082      	sub	sp, #8
 8012a9a:	af00      	add	r7, sp, #0
 8012a9c:	6078      	str	r0, [r7, #4]
 8012a9e:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f000 f82b 	bl	8012afc <_ZN10UtestShell13getTestResultEv>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	681a      	ldr	r2, [r3, #0]
 8012aaa:	323c      	adds	r2, #60	; 0x3c
 8012aac:	6812      	ldr	r2, [r2, #0]
 8012aae:	6839      	ldr	r1, [r7, #0]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	4790      	blx	r2
}
 8012ab4:	bf00      	nop
 8012ab6:	3708      	adds	r7, #8
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}

08012abc <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8012abc:	b480      	push	{r7}
 8012abe:	b083      	sub	sp, #12
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8012ac6:	4a04      	ldr	r2, [pc, #16]	; (8012ad8 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	6013      	str	r3, [r2, #0]
}
 8012acc:	bf00      	nop
 8012ace:	370c      	adds	r7, #12
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr
 8012ad8:	20000998 	.word	0x20000998

08012adc <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8012ae6:	4a04      	ldr	r2, [pc, #16]	; (8012af8 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	6013      	str	r3, [r2, #0]
}
 8012aec:	bf00      	nop
 8012aee:	370c      	adds	r7, #12
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr
 8012af8:	2000099c 	.word	0x2000099c

08012afc <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8012b04:	4b09      	ldr	r3, [pc, #36]	; (8012b2c <_ZN10UtestShell13getTestResultEv+0x30>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d109      	bne.n	8012b20 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8012b0c:	f7fe fbb2 	bl	8011274 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8012b10:	4603      	mov	r3, r0
 8012b12:	681a      	ldr	r2, [r3, #0]
 8012b14:	32a4      	adds	r2, #164	; 0xa4
 8012b16:	6812      	ldr	r2, [r2, #0]
 8012b18:	4618      	mov	r0, r3
 8012b1a:	4790      	blx	r2
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	e001      	b.n	8012b24 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8012b20:	4b02      	ldr	r3, [pc, #8]	; (8012b2c <_ZN10UtestShell13getTestResultEv+0x30>)
 8012b22:	681b      	ldr	r3, [r3, #0]
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3708      	adds	r7, #8
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	20000998 	.word	0x20000998

08012b30 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8012b34:	4b05      	ldr	r3, [pc, #20]	; (8012b4c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d103      	bne.n	8012b44 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8012b3c:	f7fe fb9a 	bl	8011274 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8012b40:	4603      	mov	r3, r0
 8012b42:	e001      	b.n	8012b48 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8012b44:	4b01      	ldr	r3, [pc, #4]	; (8012b4c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8012b46:	681b      	ldr	r3, [r3, #0]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	2000099c 	.word	0x2000099c

08012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8012b50:	b480      	push	{r7}
 8012b52:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8012b54:	4b03      	ldr	r3, [pc, #12]	; (8012b64 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8012b56:	681b      	ldr	r3, [r3, #0]
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	20000094 	.word	0x20000094

08012b68 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8012b68:	b480      	push	{r7}
 8012b6a:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8012b6c:	4b03      	ldr	r3, [pc, #12]	; (8012b7c <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8012b6e:	4a04      	ldr	r2, [pc, #16]	; (8012b80 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8012b70:	601a      	str	r2, [r3, #0]
}
 8012b72:	bf00      	nop
 8012b74:	46bd      	mov	sp, r7
 8012b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7a:	4770      	bx	lr
 8012b7c:	20000094 	.word	0x20000094
 8012b80:	20000090 	.word	0x20000090

08012b84 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8012b84:	b480      	push	{r7}
 8012b86:	b083      	sub	sp, #12
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	4a04      	ldr	r2, [pc, #16]	; (8012ba0 <_ZN5UtestC1Ev+0x1c>)
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	601a      	str	r2, [r3, #0]
{
}
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	4618      	mov	r0, r3
 8012b96:	370c      	adds	r7, #12
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9e:	4770      	bx	lr
 8012ba0:	080267c4 	.word	0x080267c4

08012ba4 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	4a04      	ldr	r2, [pc, #16]	; (8012bc0 <_ZN5UtestD1Ev+0x1c>)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	601a      	str	r2, [r3, #0]
{
}
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr
 8012bc0:	080267c4 	.word	0x080267c4

08012bc4 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
}
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff ffe9 	bl	8012ba4 <_ZN5UtestD1Ev>
 8012bd2:	2104      	movs	r1, #4
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f7f6 f819 	bl	8008c0c <_ZdlPvj>
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3708      	adds	r7, #8
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8012bec:	4b0d      	ldr	r3, [pc, #52]	; (8012c24 <_ZN5Utest3runEv+0x40>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	6879      	ldr	r1, [r7, #4]
 8012bf2:	480d      	ldr	r0, [pc, #52]	; (8012c28 <_ZN5Utest3runEv+0x44>)
 8012bf4:	4798      	blx	r3
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	bf14      	ite	ne
 8012bfc:	2301      	movne	r3, #1
 8012bfe:	2300      	moveq	r3, #0
 8012c00:	b2db      	uxtb	r3, r3
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d004      	beq.n	8012c10 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8012c06:	4b07      	ldr	r3, [pc, #28]	; (8012c24 <_ZN5Utest3runEv+0x40>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	6879      	ldr	r1, [r7, #4]
 8012c0c:	4807      	ldr	r0, [pc, #28]	; (8012c2c <_ZN5Utest3runEv+0x48>)
 8012c0e:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8012c10:	4b04      	ldr	r3, [pc, #16]	; (8012c24 <_ZN5Utest3runEv+0x40>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	6879      	ldr	r1, [r7, #4]
 8012c16:	4806      	ldr	r0, [pc, #24]	; (8012c30 <_ZN5Utest3runEv+0x4c>)
 8012c18:	4798      	blx	r3
}
 8012c1a:	bf00      	nop
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	200000a4 	.word	0x200000a4
 8012c28:	080112d1 	.word	0x080112d1
 8012c2c:	080112ed 	.word	0x080112ed
 8012c30:	08011309 	.word	0x08011309

08012c34 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
}
 8012c3c:	bf00      	nop
 8012c3e:	370c      	adds	r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b083      	sub	sp, #12
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
}
 8012c50:	bf00      	nop
 8012c52:	370c      	adds	r7, #12
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr

08012c5c <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
}
 8012c64:	bf00      	nop
 8012c66:	370c      	adds	r7, #12
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr

08012c70 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	4a04      	ldr	r2, [pc, #16]	; (8012c8c <_ZN14TestTerminatorD1Ev+0x1c>)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	601a      	str	r2, [r3, #0]
{
}
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	4618      	mov	r0, r3
 8012c82:	370c      	adds	r7, #12
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr
 8012c8c:	080267b0 	.word	0x080267b0

08012c90 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b084      	sub	sp, #16
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8012c98:	2300      	movs	r3, #0
 8012c9a:	60fb      	str	r3, [r7, #12]
 8012c9c:	f107 030c 	add.w	r3, r7, #12
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7f6 f975 	bl	8008f90 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8012ca6:	f107 030c 	add.w	r3, r7, #12
 8012caa:	4618      	mov	r0, r3
 8012cac:	f000 f82c 	bl	8012d08 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8012cb0:	f107 030c 	add.w	r3, r7, #12
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f000 f835 	bl	8012d24 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8012cba:	bf00      	nop
 8012cbc:	3710      	adds	r7, #16
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}
	...

08012cc4 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	4a05      	ldr	r2, [pc, #20]	; (8012ce4 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	601a      	str	r2, [r3, #0]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7ff ffcb 	bl	8012c70 <_ZN14TestTerminatorD1Ev>
{
}
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	4618      	mov	r0, r3
 8012cde:	3708      	adds	r7, #8
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}
 8012ce4:	0802679c 	.word	0x0802679c

08012ce8 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
}
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f7ff ffe7 	bl	8012cc4 <_ZN20NormalTestTerminatorD1Ev>
 8012cf6:	2104      	movs	r1, #4
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f7f5 ff87 	bl	8008c0c <_ZdlPvj>
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	4618      	mov	r0, r3
 8012d02:	3708      	adds	r7, #8
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8012d10:	4b03      	ldr	r3, [pc, #12]	; (8012d20 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8012d16:	bf00      	nop
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	200000a0 	.word	0x200000a0

08012d24 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
 8012d2c:	4a05      	ldr	r2, [pc, #20]	; (8012d44 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	601a      	str	r2, [r3, #0]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7ff ff9b 	bl	8012c70 <_ZN14TestTerminatorD1Ev>
{
}
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3708      	adds	r7, #8
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	08026788 	.word	0x08026788

08012d48 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
}
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f7ff ffe7 	bl	8012d24 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8012d56:	2104      	movs	r1, #4
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7f5 ff57 	bl	8008c0c <_ZdlPvj>
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	4618      	mov	r0, r3
 8012d62:	3708      	adds	r7, #8
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}

08012d68 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b082      	sub	sp, #8
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8012d70:	f7fe fbaa 	bl	80114c8 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7ff ff8a 	bl	8012c90 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8012d7c:	bf00      	nop
 8012d7e:	3708      	adds	r7, #8
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}

08012d84 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b082      	sub	sp, #8
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	4a05      	ldr	r2, [pc, #20]	; (8012da4 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	601a      	str	r2, [r3, #0]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7ff ff95 	bl	8012cc4 <_ZN20NormalTestTerminatorD1Ev>
{
}
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3708      	adds	r7, #8
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}
 8012da4:	08026774 	.word	0x08026774

08012da8 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
}
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f7ff ffe7 	bl	8012d84 <_ZN22CrashingTestTerminatorD1Ev>
 8012db6:	2104      	movs	r1, #4
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f7f5 ff27 	bl	8008c0c <_ZdlPvj>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3708      	adds	r7, #8
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b084      	sub	sp, #16
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	601a      	str	r2, [r3, #0]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d007      	beq.n	8012df4 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	3310      	adds	r3, #16
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	6838      	ldr	r0, [r7, #0]
 8012dee:	4798      	blx	r3
 8012df0:	4603      	mov	r3, r0
 8012df2:	e000      	b.n	8012df6 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8012df4:	2300      	movs	r3, #0
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	685b      	ldr	r3, [r3, #4]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d02d      	beq.n	8012e5e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	685b      	ldr	r3, [r3, #4]
 8012e06:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	d201      	bcs.n	8012e12 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8012e0e:	009b      	lsls	r3, r3, #2
 8012e10:	e001      	b.n	8012e16 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8012e12:	f04f 33ff 	mov.w	r3, #4294967295
 8012e16:	f240 3237 	movw	r2, #823	; 0x337
 8012e1a:	4914      	ldr	r1, [pc, #80]	; (8012e6c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7f5 ff05 	bl	8008c2c <_ZnajPKci>
 8012e22:	4602      	mov	r2, r0
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	60bb      	str	r3, [r7, #8]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	685b      	ldr	r3, [r3, #4]
 8012e34:	68ba      	ldr	r2, [r7, #8]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d212      	bcs.n	8012e60 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681a      	ldr	r2, [r3, #0]
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	009b      	lsls	r3, r3, #2
 8012e42:	4413      	add	r3, r2
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	330c      	adds	r3, #12
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	68f8      	ldr	r0, [r7, #12]
 8012e52:	4798      	blx	r3
 8012e54:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	3301      	adds	r3, #1
 8012e5a:	60bb      	str	r3, [r7, #8]
 8012e5c:	e7e8      	b.n	8012e30 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 8012e5e:	bf00      	nop
    }
}
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	4618      	mov	r0, r3
 8012e64:	3710      	adds	r7, #16
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	080233d8 	.word	0x080233d8

08012e70 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b082      	sub	sp, #8
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d004      	beq.n	8012e8a <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7f5 fee5 	bl	8008c54 <_ZdaPv>
}
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3708      	adds	r7, #8
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}

08012e94 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8012e94:	b480      	push	{r7}
 8012e96:	b087      	sub	sp, #28
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	60f8      	str	r0, [r7, #12]
 8012e9c:	60b9      	str	r1, [r7, #8]
 8012e9e:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	681a      	ldr	r2, [r3, #0]
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	009b      	lsls	r3, r3, #2
 8012ea8:	4413      	add	r3, r2
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	681a      	ldr	r2, [r3, #0]
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	009b      	lsls	r3, r3, #2
 8012eb6:	4413      	add	r3, r2
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	681a      	ldr	r2, [r3, #0]
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	009b      	lsls	r3, r3, #2
 8012ec4:	4413      	add	r3, r2
 8012ec6:	697a      	ldr	r2, [r7, #20]
 8012ec8:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	681a      	ldr	r2, [r3, #0]
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	4413      	add	r3, r2
 8012ed4:	693a      	ldr	r2, [r7, #16]
 8012ed6:	601a      	str	r2, [r3, #0]
}
 8012ed8:	bf00      	nop
 8012eda:	371c      	adds	r7, #28
 8012edc:	46bd      	mov	sp, r7
 8012ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee2:	4770      	bx	lr

08012ee4 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
 8012eec:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d028      	beq.n	8012f48 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8012ef6:	4b17      	ldr	r3, [pc, #92]	; (8012f54 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	6838      	ldr	r0, [r7, #0]
 8012efc:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	3b01      	subs	r3, #1
 8012f04:	60fb      	str	r3, [r7, #12]
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d019      	beq.n	8012f40 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	685b      	ldr	r3, [r3, #4]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d01b      	beq.n	8012f4c <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8012f14:	4b10      	ldr	r3, [pc, #64]	; (8012f58 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	4798      	blx	r3
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	3301      	adds	r3, #1
 8012f22:	fbb2 f1f3 	udiv	r1, r2, r3
 8012f26:	fb03 f301 	mul.w	r3, r3, r1
 8012f2a:	1ad3      	subs	r3, r2, r3
 8012f2c:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8012f2e:	68ba      	ldr	r2, [r7, #8]
 8012f30:	68f9      	ldr	r1, [r7, #12]
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f7ff ffae 	bl	8012e94 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	3b01      	subs	r3, #1
 8012f3c:	60fb      	str	r3, [r7, #12]
 8012f3e:	e7e2      	b.n	8012f06 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f000 f834 	bl	8012fae <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8012f46:	e002      	b.n	8012f4e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8012f48:	bf00      	nop
 8012f4a:	e000      	b.n	8012f4e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8012f4c:	bf00      	nop
}
 8012f4e:	3710      	adds	r7, #16
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	200000e0 	.word	0x200000e0
 8012f58:	200000e4 	.word	0x200000e4

08012f5c <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b086      	sub	sp, #24
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	685b      	ldr	r3, [r3, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d01c      	beq.n	8012fa6 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	085b      	lsrs	r3, r3, #1
 8012f72:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8012f74:	2300      	movs	r3, #0
 8012f76:	617b      	str	r3, [r7, #20]
 8012f78:	697a      	ldr	r2, [r7, #20]
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	d20e      	bcs.n	8012f9e <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	685a      	ldr	r2, [r3, #4]
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	1ad3      	subs	r3, r2, r3
 8012f88:	3b01      	subs	r3, #1
 8012f8a:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8012f8c:	68fa      	ldr	r2, [r7, #12]
 8012f8e:	6979      	ldr	r1, [r7, #20]
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f7ff ff7f 	bl	8012e94 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	3301      	adds	r3, #1
 8012f9a:	617b      	str	r3, [r7, #20]
 8012f9c:	e7ec      	b.n	8012f78 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f000 f805 	bl	8012fae <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8012fa4:	e000      	b.n	8012fa8 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8012fa6:	bf00      	nop
}
 8012fa8:	3718      	adds	r7, #24
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}

08012fae <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	b084      	sub	sp, #16
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012fba:	2300      	movs	r3, #0
 8012fbc:	60bb      	str	r3, [r7, #8]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	68ba      	ldr	r2, [r7, #8]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d221      	bcs.n	801300c <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681a      	ldr	r2, [r3, #0]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6859      	ldr	r1, [r3, #4]
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	1acb      	subs	r3, r1, r3
 8012fd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012fd8:	3b01      	subs	r3, #1
 8012fda:	009b      	lsls	r3, r3, #2
 8012fdc:	4413      	add	r3, r2
 8012fde:	6818      	ldr	r0, [r3, #0]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681a      	ldr	r2, [r3, #0]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	6859      	ldr	r1, [r3, #4]
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	1acb      	subs	r3, r1, r3
 8012fec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012ff0:	3b01      	subs	r3, #1
 8012ff2:	009b      	lsls	r3, r3, #2
 8012ff4:	4413      	add	r3, r2
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	3308      	adds	r3, #8
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	68f9      	ldr	r1, [r7, #12]
 8013000:	4798      	blx	r3
 8013002:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	3301      	adds	r3, #1
 8013008:	60bb      	str	r3, [r7, #8]
 801300a:	e7d8      	b.n	8012fbe <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 801300c:	bf00      	nop
 801300e:	3710      	adds	r7, #16
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}

08013014 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
    return get(0);
 801301c:	2100      	movs	r1, #0
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f000 f805 	bl	801302e <_ZNK22UtestShellPointerArray3getEj>
 8013024:	4603      	mov	r3, r0
}
 8013026:	4618      	mov	r0, r3
 8013028:	3708      	adds	r7, #8
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}

0801302e <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 801302e:	b480      	push	{r7}
 8013030:	b083      	sub	sp, #12
 8013032:	af00      	add	r7, sp, #0
 8013034:	6078      	str	r0, [r7, #4]
 8013036:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	683a      	ldr	r2, [r7, #0]
 801303e:	429a      	cmp	r2, r3
 8013040:	d301      	bcc.n	8013046 <_ZNK22UtestShellPointerArray3getEj+0x18>
 8013042:	2300      	movs	r3, #0
 8013044:	e005      	b.n	8013052 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	4413      	add	r3, r2
 8013050:	681b      	ldr	r3, [r3, #0]
}
 8013052:	4618      	mov	r0, r3
 8013054:	370c      	adds	r7, #12
 8013056:	46bd      	mov	sp, r7
 8013058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305c:	4770      	bx	lr
	...

08013060 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	60f8      	str	r0, [r7, #12]
 8013068:	60b9      	str	r1, [r7, #8]
 801306a:	607a      	str	r2, [r7, #4]
 801306c:	603b      	str	r3, [r7, #0]
 801306e:	4a10      	ldr	r2, [pc, #64]	; (80130b0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8013074:	6879      	ldr	r1, [r7, #4]
 8013076:	68b8      	ldr	r0, [r7, #8]
 8013078:	f7fe fc27 	bl	80118ca <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 801307c:	6839      	ldr	r1, [r7, #0]
 801307e:	68b8      	ldr	r0, [r7, #8]
 8013080:	f7fe fc31 	bl	80118e6 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8013084:	69b9      	ldr	r1, [r7, #24]
 8013086:	68b8      	ldr	r0, [r7, #8]
 8013088:	f7fe fc03 	bl	8011892 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 801308c:	69f9      	ldr	r1, [r7, #28]
 801308e:	68b8      	ldr	r0, [r7, #8]
 8013090:	f7fe fc0d 	bl	80118ae <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8013094:	f7fd fc20 	bl	80108d8 <_ZN12TestRegistry18getCurrentRegistryEv>
 8013098:	4603      	mov	r3, r0
 801309a:	681a      	ldr	r2, [r3, #0]
 801309c:	3208      	adds	r2, #8
 801309e:	6812      	ldr	r2, [r2, #0]
 80130a0:	68b9      	ldr	r1, [r7, #8]
 80130a2:	4618      	mov	r0, r3
 80130a4:	4790      	blx	r2
}
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	4618      	mov	r0, r3
 80130aa:	3710      	adds	r7, #16
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	080266b8 	.word	0x080266b8

080130b4 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 80130b4:	b480      	push	{r7}
 80130b6:	b083      	sub	sp, #12
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	4a04      	ldr	r2, [pc, #16]	; (80130d0 <_ZN13TestInstallerD1Ev+0x1c>)
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	601a      	str	r2, [r3, #0]
{
}
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	4618      	mov	r0, r3
 80130c6:	370c      	adds	r7, #12
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr
 80130d0:	080266b8 	.word	0x080266b8

080130d4 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b082      	sub	sp, #8
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
}
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f7ff ffe9 	bl	80130b4 <_ZN13TestInstallerD1Ev>
 80130e2:	2104      	movs	r1, #4
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f7f5 fd91 	bl	8008c0c <_ZdlPvj>
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	4618      	mov	r0, r3
 80130ee:	3708      	adds	r7, #8
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}

080130f4 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b082      	sub	sp, #8
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d10a      	bne.n	801311a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801310a:	4293      	cmp	r3, r2
 801310c:	d105      	bne.n	801311a <_Z41__static_initialization_and_destruction_0ii+0x26>
 801310e:	4805      	ldr	r0, [pc, #20]	; (8013124 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8013110:	f7ff fe38 	bl	8012d84 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8013114:	4804      	ldr	r0, [pc, #16]	; (8013128 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8013116:	f7ff fdd5 	bl	8012cc4 <_ZN20NormalTestTerminatorD1Ev>
}
 801311a:	bf00      	nop
 801311c:	3708      	adds	r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	20000090 	.word	0x20000090
 8013128:	2000008c 	.word	0x2000008c

0801312c <_GLOBAL__sub_I__Z13doubles_equalddd>:
 801312c:	b580      	push	{r7, lr}
 801312e:	af00      	add	r7, sp, #0
 8013130:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013134:	2001      	movs	r0, #1
 8013136:	f7ff ffdd 	bl	80130f4 <_Z41__static_initialization_and_destruction_0ii>
 801313a:	bd80      	pop	{r7, pc}

0801313c <_GLOBAL__sub_D__Z13doubles_equalddd>:
 801313c:	b580      	push	{r7, lr}
 801313e:	af00      	add	r7, sp, #0
 8013140:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013144:	2000      	movs	r0, #0
 8013146:	f7ff ffd5 	bl	80130f4 <_Z41__static_initialization_and_destruction_0ii>
 801314a:	bd80      	pop	{r7, pc}

0801314c <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 801314c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
 8013152:	ed87 0b00 	vstr	d0, [r7]
 8013156:	683c      	ldr	r4, [r7, #0]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801315e:	2301      	movs	r3, #1
 8013160:	461e      	mov	r6, r3
 8013162:	f04f 32ff 	mov.w	r2, #4294967295
 8013166:	4b10      	ldr	r3, [pc, #64]	; (80131a8 <_ZSt5isinfd+0x5c>)
 8013168:	4620      	mov	r0, r4
 801316a:	4629      	mov	r1, r5
 801316c:	f7ed fb0c 	bl	8000788 <__aeabi_dcmpun>
 8013170:	4603      	mov	r3, r0
 8013172:	2b00      	cmp	r3, #0
 8013174:	d10b      	bne.n	801318e <_ZSt5isinfd+0x42>
 8013176:	f04f 32ff 	mov.w	r2, #4294967295
 801317a:	4b0b      	ldr	r3, [pc, #44]	; (80131a8 <_ZSt5isinfd+0x5c>)
 801317c:	4620      	mov	r0, r4
 801317e:	4629      	mov	r1, r5
 8013180:	f7ed fae4 	bl	800074c <__aeabi_dcmple>
 8013184:	4603      	mov	r3, r0
 8013186:	2b00      	cmp	r3, #0
 8013188:	d101      	bne.n	801318e <_ZSt5isinfd+0x42>
 801318a:	2300      	movs	r3, #0
 801318c:	461e      	mov	r6, r3
 801318e:	b2f3      	uxtb	r3, r6
 8013190:	f083 0301 	eor.w	r3, r3, #1
 8013194:	b2db      	uxtb	r3, r3
 8013196:	2b00      	cmp	r3, #0
 8013198:	bf14      	ite	ne
 801319a:	2301      	movne	r3, #1
 801319c:	2300      	moveq	r3, #0
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	4618      	mov	r0, r3
 80131a2:	370c      	adds	r7, #12
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131a8:	7fefffff 	.word	0x7fefffff

080131ac <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 80131ac:	b590      	push	{r4, r7, lr}
 80131ae:	b083      	sub	sp, #12
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	ed87 0b00 	vstr	d0, [r7]
 80131b6:	2301      	movs	r3, #1
 80131b8:	461c      	mov	r4, r3
 80131ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80131c2:	f7ed fae1 	bl	8000788 <__aeabi_dcmpun>
 80131c6:	4603      	mov	r3, r0
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d101      	bne.n	80131d0 <_ZSt5isnand+0x24>
 80131cc:	2300      	movs	r3, #0
 80131ce:	461c      	mov	r4, r3
 80131d0:	b2e3      	uxtb	r3, r4
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	bf14      	ite	ne
 80131d6:	2301      	movne	r3, #1
 80131d8:	2300      	moveq	r3, #0
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	4618      	mov	r0, r3
 80131de:	370c      	adds	r7, #12
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd90      	pop	{r4, r7, pc}

080131e4 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 80131e4:	b590      	push	{r4, r7, lr}
 80131e6:	b095      	sub	sp, #84	; 0x54
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	60f8      	str	r0, [r7, #12]
 80131ec:	60b9      	str	r1, [r7, #8]
 80131ee:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	3334      	adds	r3, #52	; 0x34
 80131f6:	681c      	ldr	r4, [r3, #0]
 80131f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80131fc:	490f      	ldr	r1, [pc, #60]	; (801323c <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 80131fe:	4618      	mov	r0, r3
 8013200:	f7f8 f8b3 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013204:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8013208:	f107 0314 	add.w	r3, r7, #20
 801320c:	68f9      	ldr	r1, [r7, #12]
 801320e:	4618      	mov	r0, r3
 8013210:	f7f9 ff0a 	bl	800d028 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8013214:	f107 0314 	add.w	r3, r7, #20
 8013218:	4619      	mov	r1, r3
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	47a0      	blx	r4
 801321e:	f107 0314 	add.w	r3, r7, #20
 8013222:	4618      	mov	r0, r3
 8013224:	f7f9 ffc0 	bl	800d1a8 <_ZN11TestFailureD1Ev>
 8013228:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801322c:	4618      	mov	r0, r3
 801322e:	f7f8 fc54 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 8013232:	bf00      	nop
 8013234:	3754      	adds	r7, #84	; 0x54
 8013236:	46bd      	mov	sp, r7
 8013238:	bd90      	pop	{r4, r7, pc}
 801323a:	bf00      	nop
 801323c:	08023560 	.word	0x08023560

08013240 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8013240:	b480      	push	{r7}
 8013242:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8013244:	2301      	movs	r3, #1
}
 8013246:	4618      	mov	r0, r3
 8013248:	46bd      	mov	sp, r7
 801324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324e:	4770      	bx	lr

08013250 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
 8013258:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 801325a:	4b13      	ldr	r3, [pc, #76]	; (80132a8 <PlatformSpecificSetJmpImplementation+0x58>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	225c      	movs	r2, #92	; 0x5c
 8013260:	fb02 f303 	mul.w	r3, r2, r3
 8013264:	4a11      	ldr	r2, [pc, #68]	; (80132ac <PlatformSpecificSetJmpImplementation+0x5c>)
 8013266:	4413      	add	r3, r2
 8013268:	4618      	mov	r0, r3
 801326a:	f7ec ffd9 	bl	8000220 <setjmp>
 801326e:	4603      	mov	r3, r0
 8013270:	2b00      	cmp	r3, #0
 8013272:	bf0c      	ite	eq
 8013274:	2301      	moveq	r3, #1
 8013276:	2300      	movne	r3, #0
 8013278:	b2db      	uxtb	r3, r3
 801327a:	2b00      	cmp	r3, #0
 801327c:	d00e      	beq.n	801329c <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 801327e:	4b0a      	ldr	r3, [pc, #40]	; (80132a8 <PlatformSpecificSetJmpImplementation+0x58>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	3301      	adds	r3, #1
 8013284:	4a08      	ldr	r2, [pc, #32]	; (80132a8 <PlatformSpecificSetJmpImplementation+0x58>)
 8013286:	6013      	str	r3, [r2, #0]
        function(data);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6838      	ldr	r0, [r7, #0]
 801328c:	4798      	blx	r3
        jmp_buf_index--;
 801328e:	4b06      	ldr	r3, [pc, #24]	; (80132a8 <PlatformSpecificSetJmpImplementation+0x58>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	3b01      	subs	r3, #1
 8013294:	4a04      	ldr	r2, [pc, #16]	; (80132a8 <PlatformSpecificSetJmpImplementation+0x58>)
 8013296:	6013      	str	r3, [r2, #0]
        return 1;
 8013298:	2301      	movs	r3, #1
 801329a:	e000      	b.n	801329e <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 801329c:	2300      	movs	r3, #0
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3708      	adds	r7, #8
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	20000d38 	.word	0x20000d38
 80132ac:	200009a0 	.word	0x200009a0

080132b0 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 80132b4:	4b07      	ldr	r3, [pc, #28]	; (80132d4 <PlatformSpecificLongJmpImplementation+0x24>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	3b01      	subs	r3, #1
 80132ba:	4a06      	ldr	r2, [pc, #24]	; (80132d4 <PlatformSpecificLongJmpImplementation+0x24>)
 80132bc:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 80132be:	4b05      	ldr	r3, [pc, #20]	; (80132d4 <PlatformSpecificLongJmpImplementation+0x24>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	225c      	movs	r2, #92	; 0x5c
 80132c4:	fb02 f303 	mul.w	r3, r2, r3
 80132c8:	4a03      	ldr	r2, [pc, #12]	; (80132d8 <PlatformSpecificLongJmpImplementation+0x28>)
 80132ca:	4413      	add	r3, r2
 80132cc:	2101      	movs	r1, #1
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7ec ffac 	bl	800022c <longjmp>
 80132d4:	20000d38 	.word	0x20000d38
 80132d8:	200009a0 	.word	0x200009a0

080132dc <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 80132dc:	b480      	push	{r7}
 80132de:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 80132e0:	2300      	movs	r3, #0
#endif
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	46bd      	mov	sp, r7
 80132e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ea:	4770      	bx	lr

080132ec <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b084      	sub	sp, #16
 80132f0:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 80132f2:	2000      	movs	r0, #0
 80132f4:	f00e ec3c 	blx	8021b70 <__time_veneer>
 80132f8:	4602      	mov	r2, r0
 80132fa:	460b      	mov	r3, r1
 80132fc:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8013300:	463b      	mov	r3, r7
 8013302:	4618      	mov	r0, r3
 8013304:	f00b fb74 	bl	801e9f0 <localtime>
 8013308:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	4a04      	ldr	r2, [pc, #16]	; (8013320 <TimeStringImplementation+0x34>)
 801330e:	2150      	movs	r1, #80	; 0x50
 8013310:	4804      	ldr	r0, [pc, #16]	; (8013324 <TimeStringImplementation+0x38>)
 8013312:	f00c fc75 	bl	801fc00 <strftime>
    return dateTime;
 8013316:	4b03      	ldr	r3, [pc, #12]	; (8013324 <TimeStringImplementation+0x38>)
}
 8013318:	4618      	mov	r0, r3
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}
 8013320:	0802359c 	.word	0x0802359c
 8013324:	20000d3c 	.word	0x20000d3c

08013328 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
 8013330:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8013332:	6839      	ldr	r1, [r7, #0]
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f00b f991 	bl	801e65c <fopen>
 801333a:	4603      	mov	r3, r0
#endif
}
 801333c:	4618      	mov	r0, r3
 801333e:	3708      	adds	r7, #8
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}

08013344 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 801334e:	6839      	ldr	r1, [r7, #0]
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f00b f9f1 	bl	801e738 <fputs>
}
 8013356:	bf00      	nop
 8013358:	3708      	adds	r7, #8
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}

0801335e <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 801335e:	b580      	push	{r7, lr}
 8013360:	b082      	sub	sp, #8
 8013362:	af00      	add	r7, sp, #0
 8013364:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f00a ff72 	bl	801e250 <fclose>
}
 801336c:	bf00      	nop
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}

08013374 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8013374:	b580      	push	{r7, lr}
 8013376:	af00      	add	r7, sp, #0
  fflush(stdout);
 8013378:	4b03      	ldr	r3, [pc, #12]	; (8013388 <PlatformSpecificFlushImplementation+0x14>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	689b      	ldr	r3, [r3, #8]
 801337e:	4618      	mov	r0, r3
 8013380:	f00b f830 	bl	801e3e4 <fflush>
}
 8013384:	bf00      	nop
 8013386:	bd80      	pop	{r7, pc}
 8013388:	20000108 	.word	0x20000108

0801338c <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8013396:	ed97 0b00 	vldr	d0, [r7]
 801339a:	f7ff ff07 	bl	80131ac <_ZSt5isnand>
 801339e:	4603      	mov	r3, r0
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3708      	adds	r7, #8
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}

080133a8 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 80133b2:	ed97 0b00 	vldr	d0, [r7]
 80133b6:	f7ff fec9 	bl	801314c <_ZSt5isinfd>
 80133ba:	4603      	mov	r3, r0
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3708      	adds	r7, #8
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 80133c4:	b480      	push	{r7}
 80133c6:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 80133c8:	2300      	movs	r3, #0
#endif

}
 80133ca:	4618      	mov	r0, r3
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 80133d4:	b480      	push	{r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
}
 80133dc:	bf00      	nop
 80133de:	370c      	adds	r7, #12
 80133e0:	46bd      	mov	sp, r7
 80133e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e6:	4770      	bx	lr

080133e8 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 80133e8:	b480      	push	{r7}
 80133ea:	b083      	sub	sp, #12
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
}
 80133f0:	bf00      	nop
 80133f2:	370c      	adds	r7, #12
 80133f4:	46bd      	mov	sp, r7
 80133f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fa:	4770      	bx	lr

080133fc <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 80133fc:	b480      	push	{r7}
 80133fe:	b083      	sub	sp, #12
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
}
 8013404:	bf00      	nop
 8013406:	370c      	adds	r7, #12
 8013408:	46bd      	mov	sp, r7
 801340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340e:	4770      	bx	lr

08013410 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8013410:	b580      	push	{r7, lr}
 8013412:	b084      	sub	sp, #16
 8013414:	af00      	add	r7, sp, #0
 8013416:	60f8      	str	r0, [r7, #12]
 8013418:	60b9      	str	r1, [r7, #8]
 801341a:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 801341c:	4a25      	ldr	r2, [pc, #148]	; (80134b4 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	601a      	str	r2, [r3, #0]
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	68ba      	ldr	r2, [r7, #8]
 8013426:	605a      	str	r2, [r3, #4]
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	609a      	str	r2, [r3, #8]
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2200      	movs	r2, #0
 8013432:	731a      	strb	r2, [r3, #12]
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2200      	movs	r2, #0
 8013438:	735a      	strb	r2, [r3, #13]
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	2200      	movs	r2, #0
 801343e:	739a      	strb	r2, [r3, #14]
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	2200      	movs	r2, #0
 8013444:	73da      	strb	r2, [r3, #15]
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	2200      	movs	r2, #0
 801344a:	741a      	strb	r2, [r3, #16]
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	2200      	movs	r2, #0
 8013450:	745a      	strb	r2, [r3, #17]
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	2200      	movs	r2, #0
 8013456:	749a      	strb	r2, [r3, #18]
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	2200      	movs	r2, #0
 801345c:	74da      	strb	r2, [r3, #19]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	2200      	movs	r2, #0
 8013462:	751a      	strb	r2, [r3, #20]
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	2200      	movs	r2, #0
 8013468:	755a      	strb	r2, [r3, #21]
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	2200      	movs	r2, #0
 801346e:	759a      	strb	r2, [r3, #22]
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	2200      	movs	r2, #0
 8013474:	75da      	strb	r2, [r3, #23]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	2200      	movs	r2, #0
 801347a:	761a      	strb	r2, [r3, #24]
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2201      	movs	r2, #1
 8013480:	61da      	str	r2, [r3, #28]
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	2200      	movs	r2, #0
 8013486:	621a      	str	r2, [r3, #32]
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2200      	movs	r2, #0
 801348c:	625a      	str	r2, [r3, #36]	; 0x24
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	2200      	movs	r2, #0
 8013492:	629a      	str	r2, [r3, #40]	; 0x28
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2200      	movs	r2, #0
 8013498:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	3330      	adds	r3, #48	; 0x30
 80134a0:	4905      	ldr	r1, [pc, #20]	; (80134b8 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7f7 ff61 	bl	800b36a <_ZN12SimpleStringC1EPKc>
{
}
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	4618      	mov	r0, r3
 80134ac:	3710      	adds	r7, #16
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	080267e4 	.word	0x080267e4
 80134b8:	080235b0 	.word	0x080235b0

080134bc <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7f8 fb07 	bl	800bada <_ZN12SimpleStringD1Ev>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	4618      	mov	r0, r3
 80134d0:	3708      	adds	r7, #8
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
	...

080134d8 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 80134d8:	b590      	push	{r4, r7, lr}
 80134da:	b085      	sub	sp, #20
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	4a20      	ldr	r2, [pc, #128]	; (8013564 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d015      	beq.n	801351a <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f2:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f8:	4618      	mov	r0, r3
 80134fa:	f00a fda2 	bl	801e042 <_ZNK10TestFilter7getNextEv>
 80134fe:	4602      	mov	r2, r0
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8013504:	68fc      	ldr	r4, [r7, #12]
 8013506:	2c00      	cmp	r4, #0
 8013508:	d0ed      	beq.n	80134e6 <_ZN20CommandLineArgumentsD1Ev+0xe>
 801350a:	4620      	mov	r0, r4
 801350c:	f7ff ffd6 	bl	80134bc <_ZN10TestFilterD1Ev>
 8013510:	2110      	movs	r1, #16
 8013512:	4620      	mov	r0, r4
 8013514:	f7f5 fb7a 	bl	8008c0c <_ZdlPvj>
    while(groupFilters_) {
 8013518:	e7e5      	b.n	80134e6 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801351e:	2b00      	cmp	r3, #0
 8013520:	d015      	beq.n	801354e <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013526:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801352c:	4618      	mov	r0, r3
 801352e:	f00a fd88 	bl	801e042 <_ZNK10TestFilter7getNextEv>
 8013532:	4602      	mov	r2, r0
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8013538:	68bc      	ldr	r4, [r7, #8]
 801353a:	2c00      	cmp	r4, #0
 801353c:	d0ed      	beq.n	801351a <_ZN20CommandLineArgumentsD1Ev+0x42>
 801353e:	4620      	mov	r0, r4
 8013540:	f7ff ffbc 	bl	80134bc <_ZN10TestFilterD1Ev>
 8013544:	2110      	movs	r1, #16
 8013546:	4620      	mov	r0, r4
 8013548:	f7f5 fb60 	bl	8008c0c <_ZdlPvj>
    while(nameFilters_) {
 801354c:	e7e5      	b.n	801351a <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	3330      	adds	r3, #48	; 0x30
 8013552:	4618      	mov	r0, r3
 8013554:	f7f8 fac1 	bl	800bada <_ZN12SimpleStringD1Ev>
    }
}
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	4618      	mov	r0, r3
 801355c:	3714      	adds	r7, #20
 801355e:	46bd      	mov	sp, r7
 8013560:	bd90      	pop	{r4, r7, pc}
 8013562:	bf00      	nop
 8013564:	080267e4 	.word	0x080267e4

08013568 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
}
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7ff ffb1 	bl	80134d8 <_ZN20CommandLineArgumentsD1Ev>
 8013576:	2138      	movs	r1, #56	; 0x38
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f7f5 fb47 	bl	8008c0c <_ZdlPvj>
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	4618      	mov	r0, r3
 8013582:	3708      	adds	r7, #8
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8013588:	b5b0      	push	{r4, r5, r7, lr}
 801358a:	b0be      	sub	sp, #248	; 0xf8
 801358c:	af02      	add	r7, sp, #8
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
 8013592:	2400      	movs	r4, #0
    bool correctParameters = true;
 8013594:	2301      	movs	r3, #1
 8013596:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 801359a:	2301      	movs	r3, #1
 801359c:	613b      	str	r3, [r7, #16]
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	685a      	ldr	r2, [r3, #4]
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	429a      	cmp	r2, r3
 80135a6:	f340 83a4 	ble.w	8013cf2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	689a      	ldr	r2, [r3, #8]
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	009b      	lsls	r3, r3, #2
 80135b2:	4413      	add	r3, r2
 80135b4:	681a      	ldr	r2, [r3, #0]
 80135b6:	f107 0308 	add.w	r3, r7, #8
 80135ba:	4611      	mov	r1, r2
 80135bc:	4618      	mov	r0, r3
 80135be:	f7f7 fed4 	bl	800b36a <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 80135c2:	f107 0314 	add.w	r3, r7, #20
 80135c6:	49c8      	ldr	r1, [pc, #800]	; (80138e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7f7 fece 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80135ce:	f107 0214 	add.w	r2, r7, #20
 80135d2:	f107 0308 	add.w	r3, r7, #8
 80135d6:	4611      	mov	r1, r2
 80135d8:	4618      	mov	r0, r3
 80135da:	f7f8 fa8a 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 80135de:	4603      	mov	r3, r0
 80135e0:	461d      	mov	r5, r3
 80135e2:	f107 0314 	add.w	r3, r7, #20
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7f8 fa77 	bl	800bada <_ZN12SimpleStringD1Ev>
 80135ec:	2d00      	cmp	r5, #0
 80135ee:	d006      	beq.n	80135fe <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2201      	movs	r2, #1
 80135f4:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 80135f6:	2300      	movs	r3, #0
 80135f8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80135fc:	e366      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 80135fe:	f107 031c 	add.w	r3, r7, #28
 8013602:	49ba      	ldr	r1, [pc, #744]	; (80138ec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8013604:	4618      	mov	r0, r3
 8013606:	f7f7 feb0 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801360a:	f107 021c 	add.w	r2, r7, #28
 801360e:	f107 0308 	add.w	r3, r7, #8
 8013612:	4611      	mov	r1, r2
 8013614:	4618      	mov	r0, r3
 8013616:	f7f8 fa6c 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801361a:	4603      	mov	r3, r0
 801361c:	461d      	mov	r5, r3
 801361e:	f107 031c 	add.w	r3, r7, #28
 8013622:	4618      	mov	r0, r3
 8013624:	f7f8 fa59 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013628:	2d00      	cmp	r5, #0
 801362a:	d003      	beq.n	8013634 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2201      	movs	r2, #1
 8013630:	735a      	strb	r2, [r3, #13]
 8013632:	e34b      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8013634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013638:	49ad      	ldr	r1, [pc, #692]	; (80138f0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 801363a:	4618      	mov	r0, r3
 801363c:	f7f7 fe95 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013640:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013644:	f107 0308 	add.w	r3, r7, #8
 8013648:	4611      	mov	r1, r2
 801364a:	4618      	mov	r0, r3
 801364c:	f7f8 fa51 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8013650:	4603      	mov	r3, r0
 8013652:	461d      	mov	r5, r3
 8013654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013658:	4618      	mov	r0, r3
 801365a:	f7f8 fa3e 	bl	800bada <_ZN12SimpleStringD1Ev>
 801365e:	2d00      	cmp	r5, #0
 8013660:	d003      	beq.n	801366a <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2201      	movs	r2, #1
 8013666:	739a      	strb	r2, [r3, #14]
 8013668:	e330      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 801366a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801366e:	49a1      	ldr	r1, [pc, #644]	; (80138f4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8013670:	4618      	mov	r0, r3
 8013672:	f7f7 fe7a 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013676:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801367a:	f107 0308 	add.w	r3, r7, #8
 801367e:	4611      	mov	r1, r2
 8013680:	4618      	mov	r0, r3
 8013682:	f7f8 fa36 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8013686:	4603      	mov	r3, r0
 8013688:	461d      	mov	r5, r3
 801368a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801368e:	4618      	mov	r0, r3
 8013690:	f7f8 fa23 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013694:	2d00      	cmp	r5, #0
 8013696:	d003      	beq.n	80136a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2201      	movs	r2, #1
 801369c:	73da      	strb	r2, [r3, #15]
 801369e:	e315      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80136a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80136a4:	4994      	ldr	r1, [pc, #592]	; (80138f8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7f7 fe5f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80136ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80136b0:	f107 0308 	add.w	r3, r7, #8
 80136b4:	4611      	mov	r1, r2
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7f8 fa1b 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 80136bc:	4603      	mov	r3, r0
 80136be:	461d      	mov	r5, r3
 80136c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7f8 fa08 	bl	800bada <_ZN12SimpleStringD1Ev>
 80136ca:	2d00      	cmp	r5, #0
 80136cc:	d003      	beq.n	80136d6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2201      	movs	r2, #1
 80136d2:	741a      	strb	r2, [r3, #16]
 80136d4:	e2fa      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 80136d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80136da:	4988      	ldr	r1, [pc, #544]	; (80138fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 80136dc:	4618      	mov	r0, r3
 80136de:	f7f7 fe44 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80136e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80136e6:	f107 0308 	add.w	r3, r7, #8
 80136ea:	4611      	mov	r1, r2
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7f8 fa00 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 80136f2:	4603      	mov	r3, r0
 80136f4:	461d      	mov	r5, r3
 80136f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7f8 f9ed 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013700:	2d00      	cmp	r5, #0
 8013702:	d003      	beq.n	801370c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	2201      	movs	r2, #1
 8013708:	755a      	strb	r2, [r3, #21]
 801370a:	e2df      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 801370c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013710:	497b      	ldr	r1, [pc, #492]	; (8013900 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8013712:	4618      	mov	r0, r3
 8013714:	f7f7 fe29 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013718:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801371c:	f107 0308 	add.w	r3, r7, #8
 8013720:	4611      	mov	r1, r2
 8013722:	4618      	mov	r0, r3
 8013724:	f7f8 f9e5 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8013728:	4603      	mov	r3, r0
 801372a:	461d      	mov	r5, r3
 801372c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013730:	4618      	mov	r0, r3
 8013732:	f7f8 f9d2 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013736:	2d00      	cmp	r5, #0
 8013738:	d003      	beq.n	8013742 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2201      	movs	r2, #1
 801373e:	745a      	strb	r2, [r3, #17]
 8013740:	e2c4      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8013742:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013746:	496f      	ldr	r1, [pc, #444]	; (8013904 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8013748:	4618      	mov	r0, r3
 801374a:	f7f7 fe0e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801374e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8013752:	f107 0308 	add.w	r3, r7, #8
 8013756:	4611      	mov	r1, r2
 8013758:	4618      	mov	r0, r3
 801375a:	f7f8 f9ca 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801375e:	4603      	mov	r3, r0
 8013760:	461d      	mov	r5, r3
 8013762:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013766:	4618      	mov	r0, r3
 8013768:	f7f8 f9b7 	bl	800bada <_ZN12SimpleStringD1Ev>
 801376c:	2d00      	cmp	r5, #0
 801376e:	d003      	beq.n	8013778 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2201      	movs	r2, #1
 8013774:	749a      	strb	r2, [r3, #18]
 8013776:	e2a9      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8013778:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801377c:	4962      	ldr	r1, [pc, #392]	; (8013908 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 801377e:	4618      	mov	r0, r3
 8013780:	f7f7 fdf3 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013784:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8013788:	f107 0308 	add.w	r3, r7, #8
 801378c:	4611      	mov	r1, r2
 801378e:	4618      	mov	r0, r3
 8013790:	f7f8 f9af 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8013794:	4603      	mov	r3, r0
 8013796:	461d      	mov	r5, r3
 8013798:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801379c:	4618      	mov	r0, r3
 801379e:	f7f8 f99c 	bl	800bada <_ZN12SimpleStringD1Ev>
 80137a2:	2d00      	cmp	r5, #0
 80137a4:	d003      	beq.n	80137ae <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2201      	movs	r2, #1
 80137aa:	74da      	strb	r2, [r3, #19]
 80137ac:	e28e      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80137ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80137b2:	4956      	ldr	r1, [pc, #344]	; (801390c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7f7 fdd8 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80137ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80137be:	f107 0308 	add.w	r3, r7, #8
 80137c2:	4611      	mov	r1, r2
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7f8 f994 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 80137ca:	4603      	mov	r3, r0
 80137cc:	461d      	mov	r5, r3
 80137ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7f8 f981 	bl	800bada <_ZN12SimpleStringD1Ev>
 80137d8:	2d00      	cmp	r5, #0
 80137da:	d003      	beq.n	80137e4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2201      	movs	r2, #1
 80137e0:	751a      	strb	r2, [r3, #20]
 80137e2:	e273      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 80137e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80137e8:	4949      	ldr	r1, [pc, #292]	; (8013910 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7f7 fdbd 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80137f0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80137f4:	f107 0308 	add.w	r3, r7, #8
 80137f8:	4611      	mov	r1, r2
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7f8 f979 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8013800:	4603      	mov	r3, r0
 8013802:	461d      	mov	r5, r3
 8013804:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013808:	4618      	mov	r0, r3
 801380a:	f7f8 f966 	bl	800bada <_ZN12SimpleStringD1Ev>
 801380e:	2d00      	cmp	r5, #0
 8013810:	d003      	beq.n	801381a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	2201      	movs	r2, #1
 8013816:	759a      	strb	r2, [r3, #22]
 8013818:	e258      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 801381a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801381e:	493d      	ldr	r1, [pc, #244]	; (8013914 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8013820:	4618      	mov	r0, r3
 8013822:	f7f7 fda2 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013826:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801382a:	f107 0308 	add.w	r3, r7, #8
 801382e:	4611      	mov	r1, r2
 8013830:	4618      	mov	r0, r3
 8013832:	f7f7 fe5e 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013836:	4603      	mov	r3, r0
 8013838:	461d      	mov	r5, r3
 801383a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801383e:	4618      	mov	r0, r3
 8013840:	f7f8 f94b 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013844:	2d00      	cmp	r5, #0
 8013846:	d009      	beq.n	801385c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	6859      	ldr	r1, [r3, #4]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	689a      	ldr	r2, [r3, #8]
 8013850:	f107 0310 	add.w	r3, r7, #16
 8013854:	6878      	ldr	r0, [r7, #4]
 8013856:	f000 fb33 	bl	8013ec0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 801385a:	e237      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 801385c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013860:	492d      	ldr	r1, [pc, #180]	; (8013918 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8013862:	4618      	mov	r0, r3
 8013864:	f7f7 fd81 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013868:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801386c:	f107 0308 	add.w	r3, r7, #8
 8013870:	4611      	mov	r1, r2
 8013872:	4618      	mov	r0, r3
 8013874:	f7f7 fe3d 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013878:	4603      	mov	r3, r0
 801387a:	461d      	mov	r5, r3
 801387c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013880:	4618      	mov	r0, r3
 8013882:	f7f8 f92a 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013886:	2d00      	cmp	r5, #0
 8013888:	d009      	beq.n	801389e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6859      	ldr	r1, [r3, #4]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	689a      	ldr	r2, [r3, #8]
 8013892:	f107 0310 	add.w	r3, r7, #16
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f000 fc40 	bl	801411c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 801389c:	e216      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 801389e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80138a2:	491e      	ldr	r1, [pc, #120]	; (801391c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7f7 fd60 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80138aa:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80138ae:	f107 0308 	add.w	r3, r7, #8
 80138b2:	4611      	mov	r1, r2
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7f7 fe1c 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 80138ba:	4603      	mov	r3, r0
 80138bc:	461d      	mov	r5, r3
 80138be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7f8 f909 	bl	800bada <_ZN12SimpleStringD1Ev>
 80138c8:	2d00      	cmp	r5, #0
 80138ca:	d029      	beq.n	8013920 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	6859      	ldr	r1, [r3, #4]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	689a      	ldr	r2, [r3, #8]
 80138d4:	f107 0310 	add.w	r3, r7, #16
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f000 fc61 	bl	80141a0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 80138de:	4603      	mov	r3, r0
 80138e0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80138e4:	e1f2      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 80138e6:	bf00      	nop
 80138e8:	080235b4 	.word	0x080235b4
 80138ec:	080235b8 	.word	0x080235b8
 80138f0:	080235bc 	.word	0x080235bc
 80138f4:	080235c0 	.word	0x080235c0
 80138f8:	080235c4 	.word	0x080235c4
 80138fc:	080235c8 	.word	0x080235c8
 8013900:	080235cc 	.word	0x080235cc
 8013904:	080235d0 	.word	0x080235d0
 8013908:	080235d4 	.word	0x080235d4
 801390c:	080235d8 	.word	0x080235d8
 8013910:	080235dc 	.word	0x080235dc
 8013914:	080235e0 	.word	0x080235e0
 8013918:	080235e4 	.word	0x080235e4
 801391c:	080235e8 	.word	0x080235e8
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8013920:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013924:	49b9      	ldr	r1, [pc, #740]	; (8013c0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8013926:	4618      	mov	r0, r3
 8013928:	f7f7 fd1f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801392c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013930:	f107 0308 	add.w	r3, r7, #8
 8013934:	4611      	mov	r1, r2
 8013936:	4618      	mov	r0, r3
 8013938:	f7f7 fddb 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 801393c:	4603      	mov	r3, r0
 801393e:	461d      	mov	r5, r3
 8013940:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013944:	4618      	mov	r0, r3
 8013946:	f7f8 f8c8 	bl	800bada <_ZN12SimpleStringD1Ev>
 801394a:	2d00      	cmp	r5, #0
 801394c:	d009      	beq.n	8013962 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6859      	ldr	r1, [r3, #4]
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	689a      	ldr	r2, [r3, #8]
 8013956:	f107 0310 	add.w	r3, r7, #16
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f000 fccc 	bl	80142f8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8013960:	e1b4      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8013962:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013966:	49aa      	ldr	r1, [pc, #680]	; (8013c10 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8013968:	4618      	mov	r0, r3
 801396a:	f7f7 fcfe 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801396e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8013972:	f107 0308 	add.w	r3, r7, #8
 8013976:	4611      	mov	r1, r2
 8013978:	4618      	mov	r0, r3
 801397a:	f7f7 fdba 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 801397e:	4603      	mov	r3, r0
 8013980:	461d      	mov	r5, r3
 8013982:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013986:	4618      	mov	r0, r3
 8013988:	f7f8 f8a7 	bl	800bada <_ZN12SimpleStringD1Ev>
 801398c:	2d00      	cmp	r5, #0
 801398e:	d009      	beq.n	80139a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6859      	ldr	r1, [r3, #4]
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	689a      	ldr	r2, [r3, #8]
 8013998:	f107 0310 	add.w	r3, r7, #16
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f000 fcf1 	bl	8014384 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 80139a2:	e193      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 80139a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80139a8:	499a      	ldr	r1, [pc, #616]	; (8013c14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7f7 fcdd 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80139b0:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80139b4:	f107 0308 	add.w	r3, r7, #8
 80139b8:	4611      	mov	r1, r2
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7f7 fd99 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 80139c0:	4603      	mov	r3, r0
 80139c2:	461d      	mov	r5, r3
 80139c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7f8 f886 	bl	800bada <_ZN12SimpleStringD1Ev>
 80139ce:	2d00      	cmp	r5, #0
 80139d0:	d009      	beq.n	80139e6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	6859      	ldr	r1, [r3, #4]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	689a      	ldr	r2, [r3, #8]
 80139da:	f107 0310 	add.w	r3, r7, #16
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f000 fd16 	bl	8014410 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 80139e4:	e172      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 80139e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80139ea:	498b      	ldr	r1, [pc, #556]	; (8013c18 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7f7 fcbc 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80139f2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80139f6:	f107 0308 	add.w	r3, r7, #8
 80139fa:	4611      	mov	r1, r2
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7f7 fd78 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013a02:	4603      	mov	r3, r0
 8013a04:	461d      	mov	r5, r3
 8013a06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7f8 f865 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013a10:	2d00      	cmp	r5, #0
 8013a12:	d009      	beq.n	8013a28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	6859      	ldr	r1, [r3, #4]
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	689a      	ldr	r2, [r3, #8]
 8013a1c:	f107 0310 	add.w	r3, r7, #16
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f000 fd3d 	bl	80144a0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8013a26:	e151      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8013a28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013a2c:	497b      	ldr	r1, [pc, #492]	; (8013c1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7f7 fc9b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013a34:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8013a38:	f107 0308 	add.w	r3, r7, #8
 8013a3c:	4611      	mov	r1, r2
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7f7 fd57 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013a44:	4603      	mov	r3, r0
 8013a46:	461d      	mov	r5, r3
 8013a48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7f8 f844 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013a52:	2d00      	cmp	r5, #0
 8013a54:	d009      	beq.n	8013a6a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	6859      	ldr	r1, [r3, #4]
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	689a      	ldr	r2, [r3, #8]
 8013a5e:	f107 0310 	add.w	r3, r7, #16
 8013a62:	6878      	ldr	r0, [r7, #4]
 8013a64:	f000 fd5e 	bl	8014524 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8013a68:	e130      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8013a6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013a6e:	496c      	ldr	r1, [pc, #432]	; (8013c20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7f7 fc7a 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013a76:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8013a7a:	f107 0308 	add.w	r3, r7, #8
 8013a7e:	4611      	mov	r1, r2
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7f7 fd36 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013a86:	4603      	mov	r3, r0
 8013a88:	461d      	mov	r5, r3
 8013a8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7f8 f823 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013a94:	2d00      	cmp	r5, #0
 8013a96:	d009      	beq.n	8013aac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6859      	ldr	r1, [r3, #4]
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	689a      	ldr	r2, [r3, #8]
 8013aa0:	f107 0310 	add.w	r3, r7, #16
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f000 fd83 	bl	80145b0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8013aaa:	e10f      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8013aac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013ab0:	495c      	ldr	r1, [pc, #368]	; (8013c24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7f7 fc59 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013ab8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8013abc:	f107 0308 	add.w	r3, r7, #8
 8013ac0:	4611      	mov	r1, r2
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7f7 fd15 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	461d      	mov	r5, r3
 8013acc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7f8 f802 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013ad6:	2d00      	cmp	r5, #0
 8013ad8:	d009      	beq.n	8013aee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6859      	ldr	r1, [r3, #4]
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	689a      	ldr	r2, [r3, #8]
 8013ae2:	f107 0310 	add.w	r3, r7, #16
 8013ae6:	6878      	ldr	r0, [r7, #4]
 8013ae8:	f000 fda8 	bl	801463c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8013aec:	e0ee      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8013aee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013af2:	494d      	ldr	r1, [pc, #308]	; (8013c28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7f7 fc38 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013afa:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8013afe:	f107 0308 	add.w	r3, r7, #8
 8013b02:	4611      	mov	r1, r2
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7f7 fcf4 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	461d      	mov	r5, r3
 8013b0e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7f7 ffe1 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013b18:	2d00      	cmp	r5, #0
 8013b1a:	d00c      	beq.n	8013b36 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6859      	ldr	r1, [r3, #4]
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	689a      	ldr	r2, [r3, #8]
 8013b24:	f107 0310 	add.w	r3, r7, #16
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f000 fa29 	bl	8013f80 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013b34:	e0ca      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8013b36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013b3a:	493c      	ldr	r1, [pc, #240]	; (8013c2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7f7 fc14 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013b42:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8013b46:	f107 0308 	add.w	r3, r7, #8
 8013b4a:	4611      	mov	r1, r2
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7f7 fcd0 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013b52:	4603      	mov	r3, r0
 8013b54:	461d      	mov	r5, r3
 8013b56:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7f7 ffbd 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013b60:	2d00      	cmp	r5, #0
 8013b62:	d00b      	beq.n	8013b7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	6859      	ldr	r1, [r3, #4]
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	689a      	ldr	r2, [r3, #8]
 8013b6c:	f107 0310 	add.w	r3, r7, #16
 8013b70:	482e      	ldr	r0, [pc, #184]	; (8013c2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8013b72:	9000      	str	r0, [sp, #0]
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f000 fda9 	bl	80146cc <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8013b7a:	e0a7      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8013b7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013b80:	492b      	ldr	r1, [pc, #172]	; (8013c30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7f7 fbf1 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013b88:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8013b8c:	f107 0308 	add.w	r3, r7, #8
 8013b90:	4611      	mov	r1, r2
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7f7 fcad 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	461d      	mov	r5, r3
 8013b9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7f7 ff9a 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013ba6:	2d00      	cmp	r5, #0
 8013ba8:	d00b      	beq.n	8013bc2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	6859      	ldr	r1, [r3, #4]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	689a      	ldr	r2, [r3, #8]
 8013bb2:	f107 0310 	add.w	r3, r7, #16
 8013bb6:	481e      	ldr	r0, [pc, #120]	; (8013c30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8013bb8:	9000      	str	r0, [sp, #0]
 8013bba:	6878      	ldr	r0, [r7, #4]
 8013bbc:	f000 fd86 	bl	80146cc <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8013bc0:	e084      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8013bc2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013bc6:	491b      	ldr	r1, [pc, #108]	; (8013c34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7f7 fbce 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013bce:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8013bd2:	f107 0308 	add.w	r3, r7, #8
 8013bd6:	4611      	mov	r1, r2
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7f7 fc8a 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013bde:	4603      	mov	r3, r0
 8013be0:	461d      	mov	r5, r3
 8013be2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7f7 ff77 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013bec:	2d00      	cmp	r5, #0
 8013bee:	d023      	beq.n	8013c38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6859      	ldr	r1, [r3, #4]
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	689a      	ldr	r2, [r3, #8]
 8013bf8:	f107 0310 	add.w	r3, r7, #16
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f000 fe3b 	bl	8014878 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8013c02:	4603      	mov	r3, r0
 8013c04:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013c08:	e060      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8013c0a:	bf00      	nop
 8013c0c:	080235ec 	.word	0x080235ec
 8013c10:	080235f0 	.word	0x080235f0
 8013c14:	080235f4 	.word	0x080235f4
 8013c18:	080235fc 	.word	0x080235fc
 8013c1c:	08023600 	.word	0x08023600
 8013c20:	08023604 	.word	0x08023604
 8013c24:	08023608 	.word	0x08023608
 8013c28:	08023610 	.word	0x08023610
 8013c2c:	08023614 	.word	0x08023614
 8013c30:	0802361c 	.word	0x0802361c
 8013c34:	0802362c 	.word	0x0802362c
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8013c38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8013c3c:	4930      	ldr	r1, [pc, #192]	; (8013d00 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7f7 fb93 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013c44:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8013c48:	f107 0308 	add.w	r3, r7, #8
 8013c4c:	4611      	mov	r1, r2
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7f7 fc4f 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013c54:	4603      	mov	r3, r0
 8013c56:	461d      	mov	r5, r3
 8013c58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f7f7 ff3c 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013c62:	2d00      	cmp	r5, #0
 8013c64:	d00e      	beq.n	8013c84 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	331c      	adds	r3, #28
 8013c6c:	681d      	ldr	r5, [r3, #0]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6859      	ldr	r1, [r3, #4]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	689a      	ldr	r2, [r3, #8]
 8013c76:	693b      	ldr	r3, [r7, #16]
 8013c78:	6838      	ldr	r0, [r7, #0]
 8013c7a:	47a8      	blx	r5
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013c82:	e023      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8013c84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013c88:	491e      	ldr	r1, [pc, #120]	; (8013d04 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7f7 fb6d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8013c90:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8013c94:	f107 0308 	add.w	r3, r7, #8
 8013c98:	4611      	mov	r1, r2
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f7f7 fc29 	bl	800b4f2 <_ZNK12SimpleString10startsWithERKS_>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	461d      	mov	r5, r3
 8013ca4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7f7 ff16 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013cae:	2d00      	cmp	r5, #0
 8013cb0:	d009      	beq.n	8013cc6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6859      	ldr	r1, [r3, #4]
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	689a      	ldr	r2, [r3, #8]
 8013cba:	f107 0310 	add.w	r3, r7, #16
 8013cbe:	6878      	ldr	r0, [r7, #4]
 8013cc0:	f000 fd98 	bl	80147f4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8013cc4:	e002      	b.n	8013ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8013ccc:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d102      	bne.n	8013cda <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8013cd4:	2400      	movs	r4, #0
 8013cd6:	2500      	movs	r5, #0
 8013cd8:	e000      	b.n	8013cdc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8013cda:	2501      	movs	r5, #1
 8013cdc:	f107 0308 	add.w	r3, r7, #8
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7f7 fefa 	bl	800bada <_ZN12SimpleStringD1Ev>
 8013ce6:	2d01      	cmp	r5, #1
 8013ce8:	d104      	bne.n	8013cf4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8013cea:	693b      	ldr	r3, [r7, #16]
 8013cec:	3301      	adds	r3, #1
 8013cee:	613b      	str	r3, [r7, #16]
 8013cf0:	e455      	b.n	801359e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8013cf2:	2401      	movs	r4, #1
 8013cf4:	4623      	mov	r3, r4
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	37f0      	adds	r7, #240	; 0xf0
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8013cfe:	bf00      	nop
 8013d00:	080235c4 	.word	0x080235c4
 8013d04:	08023630 	.word	0x08023630

08013d08 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b083      	sub	sp, #12
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8013d10:	4b03      	ldr	r3, [pc, #12]	; (8013d20 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	370c      	adds	r7, #12
 8013d16:	46bd      	mov	sp, r7
 8013d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1c:	4770      	bx	lr
 8013d1e:	bf00      	nop
 8013d20:	08023634 	.word	0x08023634

08013d24 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8013d24:	b480      	push	{r7}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8013d2c:	4b03      	ldr	r3, [pc, #12]	; (8013d3c <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	370c      	adds	r7, #12
 8013d32:	46bd      	mov	sp, r7
 8013d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d38:	4770      	bx	lr
 8013d3a:	bf00      	nop
 8013d3c:	08023764 	.word	0x08023764

08013d40 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	7b1b      	ldrb	r3, [r3, #12]
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	370c      	adds	r7, #12
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr

08013d58 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b083      	sub	sp, #12
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
    return verbose_;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	7b5b      	ldrb	r3, [r3, #13]
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	370c      	adds	r7, #12
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6e:	4770      	bx	lr

08013d70 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8013d70:	b480      	push	{r7}
 8013d72:	b083      	sub	sp, #12
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	7b9b      	ldrb	r3, [r3, #14]
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	370c      	adds	r7, #12
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr

08013d88 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b083      	sub	sp, #12
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
    return color_;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	7bdb      	ldrb	r3, [r3, #15]
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	370c      	adds	r7, #12
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9e:	4770      	bx	lr

08013da0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8013da0:	b480      	push	{r7}
 8013da2:	b083      	sub	sp, #12
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	7c5b      	ldrb	r3, [r3, #17]
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	370c      	adds	r7, #12
 8013db0:	46bd      	mov	sp, r7
 8013db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db6:	4770      	bx	lr

08013db8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	7c9b      	ldrb	r3, [r3, #18]
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	370c      	adds	r7, #12
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr

08013dd0 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8013dd0:	b480      	push	{r7}
 8013dd2:	b083      	sub	sp, #12
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	7cdb      	ldrb	r3, [r3, #19]
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	370c      	adds	r7, #12
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr

08013de8 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8013de8:	b480      	push	{r7}
 8013dea:	b083      	sub	sp, #12
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	7d1b      	ldrb	r3, [r3, #20]
}
 8013df4:	4618      	mov	r0, r3
 8013df6:	370c      	adds	r7, #12
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfe:	4770      	bx	lr

08013e00 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8013e00:	b480      	push	{r7}
 8013e02:	b083      	sub	sp, #12
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	7c1b      	ldrb	r3, [r3, #16]
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	370c      	adds	r7, #12
 8013e10:	46bd      	mov	sp, r7
 8013e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e16:	4770      	bx	lr

08013e18 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b083      	sub	sp, #12
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
    return repeat_;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	69db      	ldr	r3, [r3, #28]
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	370c      	adds	r7, #12
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8013e30:	b480      	push	{r7}
 8013e32:	b083      	sub	sp, #12
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
    return reversing_;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	7d5b      	ldrb	r3, [r3, #21]
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	370c      	adds	r7, #12
 8013e40:	46bd      	mov	sp, r7
 8013e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e46:	4770      	bx	lr

08013e48 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	7d9b      	ldrb	r3, [r3, #22]
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	370c      	adds	r7, #12
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr

08013e60 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8013e60:	b480      	push	{r7}
 8013e62:	b083      	sub	sp, #12
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	7ddb      	ldrb	r3, [r3, #23]
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	370c      	adds	r7, #12
 8013e70:	46bd      	mov	sp, r7
 8013e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e76:	4770      	bx	lr

08013e78 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8013e78:	b480      	push	{r7}
 8013e7a:	b083      	sub	sp, #12
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6a1b      	ldr	r3, [r3, #32]
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	370c      	adds	r7, #12
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8e:	4770      	bx	lr

08013e90 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8013e90:	b480      	push	{r7}
 8013e92:	b083      	sub	sp, #12
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	370c      	adds	r7, #12
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr

08013ea8 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b083      	sub	sp, #12
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	370c      	adds	r7, #12
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebe:	4770      	bx	lr

08013ec0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b086      	sub	sp, #24
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	60f8      	str	r0, [r7, #12]
 8013ec8:	60b9      	str	r1, [r7, #8]
 8013eca:	607a      	str	r2, [r7, #4]
 8013ecc:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	009b      	lsls	r3, r3, #2
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	4413      	add	r3, r2
 8013ede:	681a      	ldr	r2, [r3, #0]
 8013ee0:	f107 0310 	add.w	r3, r7, #16
 8013ee4:	4611      	mov	r1, r2
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7f7 fa3f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8013eec:	f107 0310 	add.w	r3, r7, #16
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7f7 fdd1 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	2b02      	cmp	r3, #2
 8013efa:	bf8c      	ite	hi
 8013efc:	2301      	movhi	r3, #1
 8013efe:	2300      	movls	r3, #0
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d00e      	beq.n	8013f24 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	009b      	lsls	r3, r3, #2
 8013f0c:	687a      	ldr	r2, [r7, #4]
 8013f0e:	4413      	add	r3, r2
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	3302      	adds	r3, #2
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7f7 f824 	bl	800af62 <_ZN12SimpleString4AtoIEPKc>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	61da      	str	r2, [r3, #28]
 8013f22:	e01c      	b.n	8013f5e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	3301      	adds	r3, #1
 8013f2a:	68ba      	ldr	r2, [r7, #8]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	dd16      	ble.n	8013f5e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	3301      	adds	r3, #1
 8013f36:	009b      	lsls	r3, r3, #2
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	4413      	add	r3, r2
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7f7 f80f 	bl	800af62 <_ZN12SimpleString4AtoIEPKc>
 8013f44:	4603      	mov	r3, r0
 8013f46:	461a      	mov	r2, r3
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	69db      	ldr	r3, [r3, #28]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d004      	beq.n	8013f5e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	1c5a      	adds	r2, r3, #1
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	69db      	ldr	r3, [r3, #28]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d102      	bne.n	8013f6c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	2202      	movs	r2, #2
 8013f6a:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8013f6c:	f107 0310 	add.w	r3, r7, #16
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7f7 fdb2 	bl	800bada <_ZN12SimpleStringD1Ev>

}
 8013f76:	bf00      	nop
 8013f78:	3718      	adds	r7, #24
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}
	...

08013f80 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8013f80:	b590      	push	{r4, r7, lr}
 8013f82:	b089      	sub	sp, #36	; 0x24
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	60f8      	str	r0, [r7, #12]
 8013f88:	60b9      	str	r1, [r7, #8]
 8013f8a:	607a      	str	r2, [r7, #4]
 8013f8c:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	2201      	movs	r2, #1
 8013f92:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8013f94:	4b34      	ldr	r3, [pc, #208]	; (8014068 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	4798      	blx	r3
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	461a      	mov	r2, r3
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	6a1b      	ldr	r3, [r3, #32]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d104      	bne.n	8013fb4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	6a1b      	ldr	r3, [r3, #32]
 8013fae:	1c5a      	adds	r2, r3, #1
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	009b      	lsls	r3, r3, #2
 8013fba:	687a      	ldr	r2, [r7, #4]
 8013fbc:	4413      	add	r3, r2
 8013fbe:	681a      	ldr	r2, [r3, #0]
 8013fc0:	f107 0314 	add.w	r3, r7, #20
 8013fc4:	4611      	mov	r1, r2
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7f7 f9cf 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8013fcc:	f107 0314 	add.w	r3, r7, #20
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7f7 fd61 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	2b02      	cmp	r3, #2
 8013fda:	bf8c      	ite	hi
 8013fdc:	2301      	movhi	r3, #1
 8013fde:	2300      	movls	r3, #0
 8013fe0:	b2db      	uxtb	r3, r3
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d010      	beq.n	8014008 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	2201      	movs	r2, #1
 8013fea:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	009b      	lsls	r3, r3, #2
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	4413      	add	r3, r2
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	3302      	adds	r3, #2
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f7f6 ff78 	bl	800aef0 <_ZN12SimpleString4AtoUEPKc>
 8014000:	4602      	mov	r2, r0
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	621a      	str	r2, [r3, #32]
 8014006:	e01e      	b.n	8014046 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	3301      	adds	r3, #1
 801400e:	68ba      	ldr	r2, [r7, #8]
 8014010:	429a      	cmp	r2, r3
 8014012:	dd18      	ble.n	8014046 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	3301      	adds	r3, #1
 801401a:	009b      	lsls	r3, r3, #2
 801401c:	687a      	ldr	r2, [r7, #4]
 801401e:	4413      	add	r3, r2
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	4618      	mov	r0, r3
 8014024:	f7f6 ff64 	bl	800aef0 <_ZN12SimpleString4AtoUEPKc>
 8014028:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d00a      	beq.n	8014046 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	2201      	movs	r2, #1
 8014034:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	69fa      	ldr	r2, [r7, #28]
 801403a:	621a      	str	r2, [r3, #32]
            i++;
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	1c5a      	adds	r2, r3, #1
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	6a1b      	ldr	r3, [r3, #32]
 801404a:	2b00      	cmp	r3, #0
 801404c:	bf14      	ite	ne
 801404e:	2301      	movne	r3, #1
 8014050:	2300      	moveq	r3, #0
 8014052:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8014054:	f107 0314 	add.w	r3, r7, #20
 8014058:	4618      	mov	r0, r3
 801405a:	f7f7 fd3e 	bl	800bada <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 801405e:	4623      	mov	r3, r4
}
 8014060:	4618      	mov	r0, r3
 8014062:	3724      	adds	r7, #36	; 0x24
 8014064:	46bd      	mov	sp, r7
 8014066:	bd90      	pop	{r4, r7, pc}
 8014068:	200000a8 	.word	0x200000a8

0801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b088      	sub	sp, #32
 8014070:	af00      	add	r7, sp, #0
 8014072:	60f8      	str	r0, [r7, #12]
 8014074:	60b9      	str	r1, [r7, #8]
 8014076:	607a      	str	r2, [r7, #4]
 8014078:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 801407a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801407c:	f7f7 fd0c 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 8014080:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8014082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	009b      	lsls	r3, r3, #2
 8014088:	683a      	ldr	r2, [r7, #0]
 801408a:	4413      	add	r3, r2
 801408c:	681a      	ldr	r2, [r3, #0]
 801408e:	f107 0314 	add.w	r3, r7, #20
 8014092:	4611      	mov	r1, r2
 8014094:	4618      	mov	r0, r3
 8014096:	f7f7 f968 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 801409a:	f107 0314 	add.w	r3, r7, #20
 801409e:	4618      	mov	r0, r3
 80140a0:	f7f7 fcfa 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 80140a4:	4602      	mov	r2, r0
 80140a6:	69fb      	ldr	r3, [r7, #28]
 80140a8:	4293      	cmp	r3, r2
 80140aa:	bf34      	ite	cc
 80140ac:	2301      	movcc	r3, #1
 80140ae:	2300      	movcs	r3, #0
 80140b0:	b2db      	uxtb	r3, r3
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d00c      	beq.n	80140d0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 80140b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	009b      	lsls	r3, r3, #2
 80140bc:	683a      	ldr	r2, [r7, #0]
 80140be:	4413      	add	r3, r2
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	69fb      	ldr	r3, [r7, #28]
 80140c4:	4413      	add	r3, r2
 80140c6:	4619      	mov	r1, r3
 80140c8:	68f8      	ldr	r0, [r7, #12]
 80140ca:	f7f7 f94e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80140ce:	e019      	b.n	8014104 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 80140d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	3301      	adds	r3, #1
 80140d6:	687a      	ldr	r2, [r7, #4]
 80140d8:	429a      	cmp	r2, r3
 80140da:	dd0f      	ble.n	80140fc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 80140dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	1c5a      	adds	r2, r3, #1
 80140e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140e4:	601a      	str	r2, [r3, #0]
 80140e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	009b      	lsls	r3, r3, #2
 80140ec:	683a      	ldr	r2, [r7, #0]
 80140ee:	4413      	add	r3, r2
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	4619      	mov	r1, r3
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f7f7 f938 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80140fa:	e003      	b.n	8014104 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 80140fc:	4906      	ldr	r1, [pc, #24]	; (8014118 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 80140fe:	68f8      	ldr	r0, [r7, #12]
 8014100:	f7f7 f933 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8014104:	f107 0314 	add.w	r3, r7, #20
 8014108:	4618      	mov	r0, r3
 801410a:	f7f7 fce6 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 801410e:	68f8      	ldr	r0, [r7, #12]
 8014110:	3720      	adds	r7, #32
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}
 8014116:	bf00      	nop
 8014118:	080235b0 	.word	0x080235b0

0801411c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 801411c:	b5b0      	push	{r4, r5, r7, lr}
 801411e:	b08c      	sub	sp, #48	; 0x30
 8014120:	af02      	add	r7, sp, #8
 8014122:	60f8      	str	r0, [r7, #12]
 8014124:	60b9      	str	r1, [r7, #8]
 8014126:	607a      	str	r2, [r7, #4]
 8014128:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 801412a:	f107 031c 	add.w	r3, r7, #28
 801412e:	491a      	ldr	r1, [pc, #104]	; (8014198 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8014130:	4618      	mov	r0, r3
 8014132:	f7f7 f91a 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8014136:	f107 0014 	add.w	r0, r7, #20
 801413a:	f107 031c 	add.w	r3, r7, #28
 801413e:	9301      	str	r3, [sp, #4]
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	9300      	str	r3, [sp, #0]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	68ba      	ldr	r2, [r7, #8]
 8014148:	68f9      	ldr	r1, [r7, #12]
 801414a:	f7ff ff8f 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801414e:	f107 0514 	add.w	r5, r7, #20
 8014152:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014156:	4911      	ldr	r1, [pc, #68]	; (801419c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8014158:	2010      	movs	r0, #16
 801415a:	f7f4 fd43 	bl	8008be4 <_ZnwjPKci>
 801415e:	4604      	mov	r4, r0
 8014160:	4629      	mov	r1, r5
 8014162:	4620      	mov	r0, r4
 8014164:	f009 ff3e 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 8014168:	627c      	str	r4, [r7, #36]	; 0x24
 801416a:	f107 0314 	add.w	r3, r7, #20
 801416e:	4618      	mov	r0, r3
 8014170:	f7f7 fcb3 	bl	800bada <_ZN12SimpleStringD1Ev>
 8014174:	f107 031c 	add.w	r3, r7, #28
 8014178:	4618      	mov	r0, r3
 801417a:	f7f7 fcae 	bl	800bada <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014182:	4619      	mov	r1, r3
 8014184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014186:	f009 ff4d 	bl	801e024 <_ZN10TestFilter3addEPS_>
 801418a:	4602      	mov	r2, r0
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014190:	bf00      	nop
 8014192:	3728      	adds	r7, #40	; 0x28
 8014194:	46bd      	mov	sp, r7
 8014196:	bdb0      	pop	{r4, r5, r7, pc}
 8014198:	080235e4 	.word	0x080235e4
 801419c:	08023f78 	.word	0x08023f78

080141a0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80141a0:	b5b0      	push	{r4, r5, r7, lr}
 80141a2:	b092      	sub	sp, #72	; 0x48
 80141a4:	af02      	add	r7, sp, #8
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	607a      	str	r2, [r7, #4]
 80141ac:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80141ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80141b2:	494e      	ldr	r1, [pc, #312]	; (80142ec <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7f7 f8d8 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80141ba:	f107 0020 	add.w	r0, r7, #32
 80141be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80141c2:	9301      	str	r3, [sp, #4]
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	9300      	str	r3, [sp, #0]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	68ba      	ldr	r2, [r7, #8]
 80141cc:	68f9      	ldr	r1, [r7, #12]
 80141ce:	f7ff ff4d 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80141d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7f7 fc7f 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 80141dc:	f107 0310 	add.w	r3, r7, #16
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7f8 fb8f 	bl	800c904 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 80141e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80141ea:	4941      	ldr	r1, [pc, #260]	; (80142f0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7f7 f8bc 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80141f2:	f107 0210 	add.w	r2, r7, #16
 80141f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80141fa:	f107 0320 	add.w	r3, r7, #32
 80141fe:	4618      	mov	r0, r3
 8014200:	f7f7 fa1f 	bl	800b642 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8014204:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014208:	4618      	mov	r0, r3
 801420a:	f7f7 fc66 	bl	800bada <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 801420e:	f107 0310 	add.w	r3, r7, #16
 8014212:	4618      	mov	r0, r3
 8014214:	f7f8 fc1b 	bl	800ca4e <_ZNK22SimpleStringCollection4sizeEv>
 8014218:	4603      	mov	r3, r0
 801421a:	2b02      	cmp	r3, #2
 801421c:	bf14      	ite	ne
 801421e:	2301      	movne	r3, #1
 8014220:	2300      	moveq	r3, #0
 8014222:	b2db      	uxtb	r3, r3
 8014224:	2b00      	cmp	r3, #0
 8014226:	d001      	beq.n	801422c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8014228:	2400      	movs	r4, #0
 801422a:	e04f      	b.n	80142cc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 801422c:	f107 0310 	add.w	r3, r7, #16
 8014230:	2100      	movs	r1, #0
 8014232:	4618      	mov	r0, r3
 8014234:	f7f8 fc18 	bl	800ca68 <_ZN22SimpleStringCollectionixEj>
 8014238:	4604      	mov	r4, r0
 801423a:	f107 0310 	add.w	r3, r7, #16
 801423e:	2100      	movs	r1, #0
 8014240:	4618      	mov	r0, r3
 8014242:	f7f8 fc11 	bl	800ca68 <_ZN22SimpleStringCollectionixEj>
 8014246:	4603      	mov	r3, r0
 8014248:	4618      	mov	r0, r3
 801424a:	f7f7 fc25 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 801424e:	4603      	mov	r3, r0
 8014250:	3b01      	subs	r3, #1
 8014252:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8014256:	2200      	movs	r2, #0
 8014258:	4621      	mov	r1, r4
 801425a:	f7f7 fd47 	bl	800bcec <_ZNK12SimpleString9subStringEjj>
 801425e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8014262:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8014266:	4923      	ldr	r1, [pc, #140]	; (80142f4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8014268:	2010      	movs	r0, #16
 801426a:	f7f4 fcbb 	bl	8008be4 <_ZnwjPKci>
 801426e:	4604      	mov	r4, r0
 8014270:	4629      	mov	r1, r5
 8014272:	4620      	mov	r0, r4
 8014274:	f009 feb6 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801427c:	4619      	mov	r1, r3
 801427e:	4620      	mov	r0, r4
 8014280:	f009 fed0 	bl	801e024 <_ZN10TestFilter3addEPS_>
 8014284:	4602      	mov	r2, r0
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	625a      	str	r2, [r3, #36]	; 0x24
 801428a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801428e:	4618      	mov	r0, r3
 8014290:	f7f7 fc23 	bl	800bada <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8014294:	f107 0310 	add.w	r3, r7, #16
 8014298:	2101      	movs	r1, #1
 801429a:	4618      	mov	r0, r3
 801429c:	f7f8 fbe4 	bl	800ca68 <_ZN22SimpleStringCollectionixEj>
 80142a0:	4605      	mov	r5, r0
 80142a2:	f240 121f 	movw	r2, #287	; 0x11f
 80142a6:	4913      	ldr	r1, [pc, #76]	; (80142f4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80142a8:	2010      	movs	r0, #16
 80142aa:	f7f4 fc9b 	bl	8008be4 <_ZnwjPKci>
 80142ae:	4604      	mov	r4, r0
 80142b0:	4629      	mov	r1, r5
 80142b2:	4620      	mov	r0, r4
 80142b4:	f009 fe96 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142bc:	4619      	mov	r1, r3
 80142be:	4620      	mov	r0, r4
 80142c0:	f009 feb0 	bl	801e024 <_ZN10TestFilter3addEPS_>
 80142c4:	4602      	mov	r2, r0
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80142ca:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 80142cc:	f107 0310 	add.w	r3, r7, #16
 80142d0:	4618      	mov	r0, r3
 80142d2:	f7f8 fb8b 	bl	800c9ec <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80142d6:	f107 0320 	add.w	r3, r7, #32
 80142da:	4618      	mov	r0, r3
 80142dc:	f7f7 fbfd 	bl	800bada <_ZN12SimpleStringD1Ev>
 80142e0:	4623      	mov	r3, r4
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3740      	adds	r7, #64	; 0x40
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bdb0      	pop	{r4, r5, r7, pc}
 80142ea:	bf00      	nop
 80142ec:	080235e8 	.word	0x080235e8
 80142f0:	08023f98 	.word	0x08023f98
 80142f4:	08023f78 	.word	0x08023f78

080142f8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 80142f8:	b5b0      	push	{r4, r5, r7, lr}
 80142fa:	b08c      	sub	sp, #48	; 0x30
 80142fc:	af02      	add	r7, sp, #8
 80142fe:	60f8      	str	r0, [r7, #12]
 8014300:	60b9      	str	r1, [r7, #8]
 8014302:	607a      	str	r2, [r7, #4]
 8014304:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8014306:	f107 031c 	add.w	r3, r7, #28
 801430a:	491c      	ldr	r1, [pc, #112]	; (801437c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 801430c:	4618      	mov	r0, r3
 801430e:	f7f7 f82c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8014312:	f107 0014 	add.w	r0, r7, #20
 8014316:	f107 031c 	add.w	r3, r7, #28
 801431a:	9301      	str	r3, [sp, #4]
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	9300      	str	r3, [sp, #0]
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	68ba      	ldr	r2, [r7, #8]
 8014324:	68f9      	ldr	r1, [r7, #12]
 8014326:	f7ff fea1 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801432a:	f107 0514 	add.w	r5, r7, #20
 801432e:	f240 1225 	movw	r2, #293	; 0x125
 8014332:	4913      	ldr	r1, [pc, #76]	; (8014380 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8014334:	2010      	movs	r0, #16
 8014336:	f7f4 fc55 	bl	8008be4 <_ZnwjPKci>
 801433a:	4604      	mov	r4, r0
 801433c:	4629      	mov	r1, r5
 801433e:	4620      	mov	r0, r4
 8014340:	f009 fe50 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 8014344:	627c      	str	r4, [r7, #36]	; 0x24
 8014346:	f107 0314 	add.w	r3, r7, #20
 801434a:	4618      	mov	r0, r3
 801434c:	f7f7 fbc5 	bl	800bada <_ZN12SimpleStringD1Ev>
 8014350:	f107 031c 	add.w	r3, r7, #28
 8014354:	4618      	mov	r0, r3
 8014356:	f7f7 fbc0 	bl	800bada <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801435a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801435c:	f009 fe7d 	bl	801e05a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014364:	4619      	mov	r1, r3
 8014366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014368:	f009 fe5c 	bl	801e024 <_ZN10TestFilter3addEPS_>
 801436c:	4602      	mov	r2, r0
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014372:	bf00      	nop
 8014374:	3728      	adds	r7, #40	; 0x28
 8014376:	46bd      	mov	sp, r7
 8014378:	bdb0      	pop	{r4, r5, r7, pc}
 801437a:	bf00      	nop
 801437c:	080235ec 	.word	0x080235ec
 8014380:	08023f78 	.word	0x08023f78

08014384 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8014384:	b5b0      	push	{r4, r5, r7, lr}
 8014386:	b08c      	sub	sp, #48	; 0x30
 8014388:	af02      	add	r7, sp, #8
 801438a:	60f8      	str	r0, [r7, #12]
 801438c:	60b9      	str	r1, [r7, #8]
 801438e:	607a      	str	r2, [r7, #4]
 8014390:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8014392:	f107 031c 	add.w	r3, r7, #28
 8014396:	491c      	ldr	r1, [pc, #112]	; (8014408 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8014398:	4618      	mov	r0, r3
 801439a:	f7f6 ffe6 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801439e:	f107 0014 	add.w	r0, r7, #20
 80143a2:	f107 031c 	add.w	r3, r7, #28
 80143a6:	9301      	str	r3, [sp, #4]
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	9300      	str	r3, [sp, #0]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	68ba      	ldr	r2, [r7, #8]
 80143b0:	68f9      	ldr	r1, [r7, #12]
 80143b2:	f7ff fe5b 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80143b6:	f107 0514 	add.w	r5, r7, #20
 80143ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80143be:	4913      	ldr	r1, [pc, #76]	; (801440c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 80143c0:	2010      	movs	r0, #16
 80143c2:	f7f4 fc0f 	bl	8008be4 <_ZnwjPKci>
 80143c6:	4604      	mov	r4, r0
 80143c8:	4629      	mov	r1, r5
 80143ca:	4620      	mov	r0, r4
 80143cc:	f009 fe0a 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 80143d0:	627c      	str	r4, [r7, #36]	; 0x24
 80143d2:	f107 0314 	add.w	r3, r7, #20
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7f7 fb7f 	bl	800bada <_ZN12SimpleStringD1Ev>
 80143dc:	f107 031c 	add.w	r3, r7, #28
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7f7 fb7a 	bl	800bada <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 80143e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143e8:	f009 fe44 	bl	801e074 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143f0:	4619      	mov	r1, r3
 80143f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143f4:	f009 fe16 	bl	801e024 <_ZN10TestFilter3addEPS_>
 80143f8:	4602      	mov	r2, r0
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80143fe:	bf00      	nop
 8014400:	3728      	adds	r7, #40	; 0x28
 8014402:	46bd      	mov	sp, r7
 8014404:	bdb0      	pop	{r4, r5, r7, pc}
 8014406:	bf00      	nop
 8014408:	080235f0 	.word	0x080235f0
 801440c:	08023f78 	.word	0x08023f78

08014410 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8014410:	b5b0      	push	{r4, r5, r7, lr}
 8014412:	b08c      	sub	sp, #48	; 0x30
 8014414:	af02      	add	r7, sp, #8
 8014416:	60f8      	str	r0, [r7, #12]
 8014418:	60b9      	str	r1, [r7, #8]
 801441a:	607a      	str	r2, [r7, #4]
 801441c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 801441e:	f107 031c 	add.w	r3, r7, #28
 8014422:	491d      	ldr	r1, [pc, #116]	; (8014498 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8014424:	4618      	mov	r0, r3
 8014426:	f7f6 ffa0 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801442a:	f107 0014 	add.w	r0, r7, #20
 801442e:	f107 031c 	add.w	r3, r7, #28
 8014432:	9301      	str	r3, [sp, #4]
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	9300      	str	r3, [sp, #0]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	68ba      	ldr	r2, [r7, #8]
 801443c:	68f9      	ldr	r1, [r7, #12]
 801443e:	f7ff fe15 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014442:	f107 0514 	add.w	r5, r7, #20
 8014446:	f240 1233 	movw	r2, #307	; 0x133
 801444a:	4914      	ldr	r1, [pc, #80]	; (801449c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 801444c:	2010      	movs	r0, #16
 801444e:	f7f4 fbc9 	bl	8008be4 <_ZnwjPKci>
 8014452:	4604      	mov	r4, r0
 8014454:	4629      	mov	r1, r5
 8014456:	4620      	mov	r0, r4
 8014458:	f009 fdc4 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 801445c:	627c      	str	r4, [r7, #36]	; 0x24
 801445e:	f107 0314 	add.w	r3, r7, #20
 8014462:	4618      	mov	r0, r3
 8014464:	f7f7 fb39 	bl	800bada <_ZN12SimpleStringD1Ev>
 8014468:	f107 031c 	add.w	r3, r7, #28
 801446c:	4618      	mov	r0, r3
 801446e:	f7f7 fb34 	bl	800bada <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8014472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014474:	f009 fdf1 	bl	801e05a <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8014478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801447a:	f009 fdfb 	bl	801e074 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014482:	4619      	mov	r1, r3
 8014484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014486:	f009 fdcd 	bl	801e024 <_ZN10TestFilter3addEPS_>
 801448a:	4602      	mov	r2, r0
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014490:	bf00      	nop
 8014492:	3728      	adds	r7, #40	; 0x28
 8014494:	46bd      	mov	sp, r7
 8014496:	bdb0      	pop	{r4, r5, r7, pc}
 8014498:	080235f4 	.word	0x080235f4
 801449c:	08023f78 	.word	0x08023f78

080144a0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80144a0:	b5b0      	push	{r4, r5, r7, lr}
 80144a2:	b08c      	sub	sp, #48	; 0x30
 80144a4:	af02      	add	r7, sp, #8
 80144a6:	60f8      	str	r0, [r7, #12]
 80144a8:	60b9      	str	r1, [r7, #8]
 80144aa:	607a      	str	r2, [r7, #4]
 80144ac:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80144ae:	f107 031c 	add.w	r3, r7, #28
 80144b2:	491a      	ldr	r1, [pc, #104]	; (801451c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7f6 ff58 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80144ba:	f107 0014 	add.w	r0, r7, #20
 80144be:	f107 031c 	add.w	r3, r7, #28
 80144c2:	9301      	str	r3, [sp, #4]
 80144c4:	683b      	ldr	r3, [r7, #0]
 80144c6:	9300      	str	r3, [sp, #0]
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	68ba      	ldr	r2, [r7, #8]
 80144cc:	68f9      	ldr	r1, [r7, #12]
 80144ce:	f7ff fdcd 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80144d2:	f107 0514 	add.w	r5, r7, #20
 80144d6:	f240 123b 	movw	r2, #315	; 0x13b
 80144da:	4911      	ldr	r1, [pc, #68]	; (8014520 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 80144dc:	2010      	movs	r0, #16
 80144de:	f7f4 fb81 	bl	8008be4 <_ZnwjPKci>
 80144e2:	4604      	mov	r4, r0
 80144e4:	4629      	mov	r1, r5
 80144e6:	4620      	mov	r0, r4
 80144e8:	f009 fd7c 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 80144ec:	627c      	str	r4, [r7, #36]	; 0x24
 80144ee:	f107 0314 	add.w	r3, r7, #20
 80144f2:	4618      	mov	r0, r3
 80144f4:	f7f7 faf1 	bl	800bada <_ZN12SimpleStringD1Ev>
 80144f8:	f107 031c 	add.w	r3, r7, #28
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7f7 faec 	bl	800bada <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014506:	4619      	mov	r1, r3
 8014508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801450a:	f009 fd8b 	bl	801e024 <_ZN10TestFilter3addEPS_>
 801450e:	4602      	mov	r2, r0
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	629a      	str	r2, [r3, #40]	; 0x28
}
 8014514:	bf00      	nop
 8014516:	3728      	adds	r7, #40	; 0x28
 8014518:	46bd      	mov	sp, r7
 801451a:	bdb0      	pop	{r4, r5, r7, pc}
 801451c:	080235fc 	.word	0x080235fc
 8014520:	08023f78 	.word	0x08023f78

08014524 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8014524:	b5b0      	push	{r4, r5, r7, lr}
 8014526:	b08c      	sub	sp, #48	; 0x30
 8014528:	af02      	add	r7, sp, #8
 801452a:	60f8      	str	r0, [r7, #12]
 801452c:	60b9      	str	r1, [r7, #8]
 801452e:	607a      	str	r2, [r7, #4]
 8014530:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8014532:	f107 031c 	add.w	r3, r7, #28
 8014536:	491c      	ldr	r1, [pc, #112]	; (80145a8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8014538:	4618      	mov	r0, r3
 801453a:	f7f6 ff16 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801453e:	f107 0014 	add.w	r0, r7, #20
 8014542:	f107 031c 	add.w	r3, r7, #28
 8014546:	9301      	str	r3, [sp, #4]
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	9300      	str	r3, [sp, #0]
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	68ba      	ldr	r2, [r7, #8]
 8014550:	68f9      	ldr	r1, [r7, #12]
 8014552:	f7ff fd8b 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014556:	f107 0514 	add.w	r5, r7, #20
 801455a:	f240 1241 	movw	r2, #321	; 0x141
 801455e:	4913      	ldr	r1, [pc, #76]	; (80145ac <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8014560:	2010      	movs	r0, #16
 8014562:	f7f4 fb3f 	bl	8008be4 <_ZnwjPKci>
 8014566:	4604      	mov	r4, r0
 8014568:	4629      	mov	r1, r5
 801456a:	4620      	mov	r0, r4
 801456c:	f009 fd3a 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 8014570:	627c      	str	r4, [r7, #36]	; 0x24
 8014572:	f107 0314 	add.w	r3, r7, #20
 8014576:	4618      	mov	r0, r3
 8014578:	f7f7 faaf 	bl	800bada <_ZN12SimpleStringD1Ev>
 801457c:	f107 031c 	add.w	r3, r7, #28
 8014580:	4618      	mov	r0, r3
 8014582:	f7f7 faaa 	bl	800bada <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8014586:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014588:	f009 fd67 	bl	801e05a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014590:	4619      	mov	r1, r3
 8014592:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014594:	f009 fd46 	bl	801e024 <_ZN10TestFilter3addEPS_>
 8014598:	4602      	mov	r2, r0
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801459e:	bf00      	nop
 80145a0:	3728      	adds	r7, #40	; 0x28
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bdb0      	pop	{r4, r5, r7, pc}
 80145a6:	bf00      	nop
 80145a8:	08023600 	.word	0x08023600
 80145ac:	08023f78 	.word	0x08023f78

080145b0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80145b0:	b5b0      	push	{r4, r5, r7, lr}
 80145b2:	b08c      	sub	sp, #48	; 0x30
 80145b4:	af02      	add	r7, sp, #8
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	60b9      	str	r1, [r7, #8]
 80145ba:	607a      	str	r2, [r7, #4]
 80145bc:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80145be:	f107 031c 	add.w	r3, r7, #28
 80145c2:	491c      	ldr	r1, [pc, #112]	; (8014634 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 80145c4:	4618      	mov	r0, r3
 80145c6:	f7f6 fed0 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80145ca:	f107 0014 	add.w	r0, r7, #20
 80145ce:	f107 031c 	add.w	r3, r7, #28
 80145d2:	9301      	str	r3, [sp, #4]
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	9300      	str	r3, [sp, #0]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	68ba      	ldr	r2, [r7, #8]
 80145dc:	68f9      	ldr	r1, [r7, #12]
 80145de:	f7ff fd45 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80145e2:	f107 0514 	add.w	r5, r7, #20
 80145e6:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80145ea:	4913      	ldr	r1, [pc, #76]	; (8014638 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 80145ec:	2010      	movs	r0, #16
 80145ee:	f7f4 faf9 	bl	8008be4 <_ZnwjPKci>
 80145f2:	4604      	mov	r4, r0
 80145f4:	4629      	mov	r1, r5
 80145f6:	4620      	mov	r0, r4
 80145f8:	f009 fcf4 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 80145fc:	627c      	str	r4, [r7, #36]	; 0x24
 80145fe:	f107 0314 	add.w	r3, r7, #20
 8014602:	4618      	mov	r0, r3
 8014604:	f7f7 fa69 	bl	800bada <_ZN12SimpleStringD1Ev>
 8014608:	f107 031c 	add.w	r3, r7, #28
 801460c:	4618      	mov	r0, r3
 801460e:	f7f7 fa64 	bl	800bada <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8014612:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014614:	f009 fd2e 	bl	801e074 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801461c:	4619      	mov	r1, r3
 801461e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014620:	f009 fd00 	bl	801e024 <_ZN10TestFilter3addEPS_>
 8014624:	4602      	mov	r2, r0
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	629a      	str	r2, [r3, #40]	; 0x28
}
 801462a:	bf00      	nop
 801462c:	3728      	adds	r7, #40	; 0x28
 801462e:	46bd      	mov	sp, r7
 8014630:	bdb0      	pop	{r4, r5, r7, pc}
 8014632:	bf00      	nop
 8014634:	08023604 	.word	0x08023604
 8014638:	08023f78 	.word	0x08023f78

0801463c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 801463c:	b5b0      	push	{r4, r5, r7, lr}
 801463e:	b08c      	sub	sp, #48	; 0x30
 8014640:	af02      	add	r7, sp, #8
 8014642:	60f8      	str	r0, [r7, #12]
 8014644:	60b9      	str	r1, [r7, #8]
 8014646:	607a      	str	r2, [r7, #4]
 8014648:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801464a:	f107 031c 	add.w	r3, r7, #28
 801464e:	491d      	ldr	r1, [pc, #116]	; (80146c4 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8014650:	4618      	mov	r0, r3
 8014652:	f7f6 fe8a 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8014656:	f107 0014 	add.w	r0, r7, #20
 801465a:	f107 031c 	add.w	r3, r7, #28
 801465e:	9301      	str	r3, [sp, #4]
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	9300      	str	r3, [sp, #0]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	68ba      	ldr	r2, [r7, #8]
 8014668:	68f9      	ldr	r1, [r7, #12]
 801466a:	f7ff fcff 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801466e:	f107 0514 	add.w	r5, r7, #20
 8014672:	f240 124f 	movw	r2, #335	; 0x14f
 8014676:	4914      	ldr	r1, [pc, #80]	; (80146c8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8014678:	2010      	movs	r0, #16
 801467a:	f7f4 fab3 	bl	8008be4 <_ZnwjPKci>
 801467e:	4604      	mov	r4, r0
 8014680:	4629      	mov	r1, r5
 8014682:	4620      	mov	r0, r4
 8014684:	f009 fcae 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 8014688:	627c      	str	r4, [r7, #36]	; 0x24
 801468a:	f107 0314 	add.w	r3, r7, #20
 801468e:	4618      	mov	r0, r3
 8014690:	f7f7 fa23 	bl	800bada <_ZN12SimpleStringD1Ev>
 8014694:	f107 031c 	add.w	r3, r7, #28
 8014698:	4618      	mov	r0, r3
 801469a:	f7f7 fa1e 	bl	800bada <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 801469e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146a0:	f009 fce8 	bl	801e074 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80146a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146a6:	f009 fcd8 	bl	801e05a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146ae:	4619      	mov	r1, r3
 80146b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146b2:	f009 fcb7 	bl	801e024 <_ZN10TestFilter3addEPS_>
 80146b6:	4602      	mov	r2, r0
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80146bc:	bf00      	nop
 80146be:	3728      	adds	r7, #40	; 0x28
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bdb0      	pop	{r4, r5, r7, pc}
 80146c4:	08023608 	.word	0x08023608
 80146c8:	08023f78 	.word	0x08023f78

080146cc <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80146cc:	b5b0      	push	{r4, r5, r7, lr}
 80146ce:	b092      	sub	sp, #72	; 0x48
 80146d0:	af02      	add	r7, sp, #8
 80146d2:	60f8      	str	r0, [r7, #12]
 80146d4:	60b9      	str	r1, [r7, #8]
 80146d6:	607a      	str	r2, [r7, #4]
 80146d8:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80146da:	f107 0320 	add.w	r3, r7, #32
 80146de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7f6 fe42 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80146e6:	f107 0018 	add.w	r0, r7, #24
 80146ea:	f107 0320 	add.w	r3, r7, #32
 80146ee:	9301      	str	r3, [sp, #4]
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	9300      	str	r3, [sp, #0]
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	68ba      	ldr	r2, [r7, #8]
 80146f8:	68f9      	ldr	r1, [r7, #12]
 80146fa:	f7ff fcb7 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80146fe:	f107 0320 	add.w	r3, r7, #32
 8014702:	4618      	mov	r0, r3
 8014704:	f7f7 f9e9 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8014708:	f107 0010 	add.w	r0, r7, #16
 801470c:	f107 0118 	add.w	r1, r7, #24
 8014710:	2329      	movs	r3, #41	; 0x29
 8014712:	222c      	movs	r2, #44	; 0x2c
 8014714:	f7f7 fb92 	bl	800be3c <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8014718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801471c:	f107 0110 	add.w	r1, r7, #16
 8014720:	2202      	movs	r2, #2
 8014722:	4618      	mov	r0, r3
 8014724:	f7f7 fb2c 	bl	800bd80 <_ZNK12SimpleString9subStringEj>
 8014728:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801472c:	f107 0310 	add.w	r3, r7, #16
 8014730:	4611      	mov	r1, r2
 8014732:	4618      	mov	r0, r3
 8014734:	f7f6 fe85 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 8014738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801473c:	4618      	mov	r0, r3
 801473e:	f7f7 f9cc 	bl	800bada <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8014742:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8014746:	492a      	ldr	r1, [pc, #168]	; (80147f0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8014748:	2010      	movs	r0, #16
 801474a:	f7f4 fa4b 	bl	8008be4 <_ZnwjPKci>
 801474e:	4604      	mov	r4, r0
 8014750:	f107 0310 	add.w	r3, r7, #16
 8014754:	4619      	mov	r1, r3
 8014756:	4620      	mov	r0, r4
 8014758:	f009 fc44 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 801475c:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 801475e:	f107 0318 	add.w	r3, r7, #24
 8014762:	2100      	movs	r1, #0
 8014764:	4618      	mov	r0, r3
 8014766:	f7f7 fb1c 	bl	800bda2 <_ZNK12SimpleString2atEj>
 801476a:	4603      	mov	r3, r0
 801476c:	461a      	mov	r2, r3
 801476e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8014772:	f107 0118 	add.w	r1, r7, #24
 8014776:	232c      	movs	r3, #44	; 0x2c
 8014778:	f7f7 fb60 	bl	800be3c <_ZNK12SimpleString17subStringFromTillEcc>
 801477c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8014780:	f240 125b 	movw	r2, #347	; 0x15b
 8014784:	491a      	ldr	r1, [pc, #104]	; (80147f0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8014786:	2010      	movs	r0, #16
 8014788:	f7f4 fa2c 	bl	8008be4 <_ZnwjPKci>
 801478c:	4604      	mov	r4, r0
 801478e:	4629      	mov	r1, r5
 8014790:	4620      	mov	r0, r4
 8014792:	f009 fc27 	bl	801dfe4 <_ZN10TestFilterC1ERK12SimpleString>
 8014796:	63bc      	str	r4, [r7, #56]	; 0x38
 8014798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801479c:	4618      	mov	r0, r3
 801479e:	f7f7 f99c 	bl	800bada <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80147a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80147a4:	f009 fc59 	bl	801e05a <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80147a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80147aa:	f009 fc56 	bl	801e05a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147b2:	4619      	mov	r1, r3
 80147b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80147b6:	f009 fc35 	bl	801e024 <_ZN10TestFilter3addEPS_>
 80147ba:	4602      	mov	r2, r0
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147c4:	4619      	mov	r1, r3
 80147c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80147c8:	f009 fc2c 	bl	801e024 <_ZN10TestFilter3addEPS_>
 80147cc:	4602      	mov	r2, r0
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80147d2:	f107 0310 	add.w	r3, r7, #16
 80147d6:	4618      	mov	r0, r3
 80147d8:	f7f7 f97f 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80147dc:	f107 0318 	add.w	r3, r7, #24
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7f7 f97a 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 80147e6:	bf00      	nop
 80147e8:	3740      	adds	r7, #64	; 0x40
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bdb0      	pop	{r4, r5, r7, pc}
 80147ee:	bf00      	nop
 80147f0:	08023f78 	.word	0x08023f78

080147f4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 80147f4:	b590      	push	{r4, r7, lr}
 80147f6:	b08b      	sub	sp, #44	; 0x2c
 80147f8:	af02      	add	r7, sp, #8
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	607a      	str	r2, [r7, #4]
 8014800:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8014802:	f107 0318 	add.w	r3, r7, #24
 8014806:	491b      	ldr	r1, [pc, #108]	; (8014874 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8014808:	4618      	mov	r0, r3
 801480a:	f7f6 fdae 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801480e:	f107 0010 	add.w	r0, r7, #16
 8014812:	f107 0318 	add.w	r3, r7, #24
 8014816:	9301      	str	r3, [sp, #4]
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	9300      	str	r3, [sp, #0]
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	68ba      	ldr	r2, [r7, #8]
 8014820:	68f9      	ldr	r1, [r7, #12]
 8014822:	f7ff fc23 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014826:	f107 0318 	add.w	r3, r7, #24
 801482a:	4618      	mov	r0, r3
 801482c:	f7f7 f955 	bl	800bada <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8014830:	f107 0310 	add.w	r3, r7, #16
 8014834:	4618      	mov	r0, r3
 8014836:	f7f7 f92f 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 801483a:	4603      	mov	r3, r0
 801483c:	2b00      	cmp	r3, #0
 801483e:	bf0c      	ite	eq
 8014840:	2301      	moveq	r3, #1
 8014842:	2300      	movne	r3, #0
 8014844:	b2db      	uxtb	r3, r3
 8014846:	2b00      	cmp	r3, #0
 8014848:	d001      	beq.n	801484e <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 801484a:	2400      	movs	r4, #0
 801484c:	e008      	b.n	8014860 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	3330      	adds	r3, #48	; 0x30
 8014852:	f107 0210 	add.w	r2, r7, #16
 8014856:	4611      	mov	r1, r2
 8014858:	4618      	mov	r0, r3
 801485a:	f7f6 fdf2 	bl	800b442 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801485e:	2401      	movs	r4, #1
 8014860:	f107 0310 	add.w	r3, r7, #16
 8014864:	4618      	mov	r0, r3
 8014866:	f7f7 f938 	bl	800bada <_ZN12SimpleStringD1Ev>
 801486a:	2c01      	cmp	r4, #1
}
 801486c:	3724      	adds	r7, #36	; 0x24
 801486e:	46bd      	mov	sp, r7
 8014870:	bd90      	pop	{r4, r7, pc}
 8014872:	bf00      	nop
 8014874:	08023630 	.word	0x08023630

08014878 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8014878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801487a:	b093      	sub	sp, #76	; 0x4c
 801487c:	af02      	add	r7, sp, #8
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	607a      	str	r2, [r7, #4]
 8014884:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8014886:	f107 0318 	add.w	r3, r7, #24
 801488a:	4953      	ldr	r1, [pc, #332]	; (80149d8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 801488c:	4618      	mov	r0, r3
 801488e:	f7f6 fd6c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8014892:	f107 0010 	add.w	r0, r7, #16
 8014896:	f107 0318 	add.w	r3, r7, #24
 801489a:	9301      	str	r3, [sp, #4]
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	9300      	str	r3, [sp, #0]
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	68ba      	ldr	r2, [r7, #8]
 80148a4:	68f9      	ldr	r1, [r7, #12]
 80148a6:	f7ff fbe1 	bl	801406c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80148aa:	f107 0318 	add.w	r3, r7, #24
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7f7 f913 	bl	800bada <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 80148b4:	f107 0310 	add.w	r3, r7, #16
 80148b8:	4618      	mov	r0, r3
 80148ba:	f7f7 f8ed 	bl	800ba98 <_ZNK12SimpleString4sizeEv>
 80148be:	4603      	mov	r3, r0
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	bf0c      	ite	eq
 80148c4:	2301      	moveq	r3, #1
 80148c6:	2300      	movne	r3, #0
 80148c8:	b2db      	uxtb	r3, r3
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d001      	beq.n	80148d2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 80148ce:	2400      	movs	r4, #0
 80148d0:	e078      	b.n	80149c4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 80148d2:	2500      	movs	r5, #0
 80148d4:	f107 0320 	add.w	r3, r7, #32
 80148d8:	4940      	ldr	r1, [pc, #256]	; (80149dc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 80148da:	4618      	mov	r0, r3
 80148dc:	f7f6 fd45 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80148e0:	2601      	movs	r6, #1
 80148e2:	f107 0220 	add.w	r2, r7, #32
 80148e6:	f107 0310 	add.w	r3, r7, #16
 80148ea:	4611      	mov	r1, r2
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7f7 f900 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 80148f2:	4603      	mov	r3, r0
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d111      	bne.n	801491c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 80148f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80148fc:	4938      	ldr	r1, [pc, #224]	; (80149e0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 80148fe:	4618      	mov	r0, r3
 8014900:	f7f6 fd33 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8014904:	2501      	movs	r5, #1
 8014906:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801490a:	f107 0310 	add.w	r3, r7, #16
 801490e:	4611      	mov	r1, r2
 8014910:	4618      	mov	r0, r3
 8014912:	f7f7 f8ee 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8014916:	4603      	mov	r3, r0
 8014918:	2b00      	cmp	r3, #0
 801491a:	d001      	beq.n	8014920 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 801491c:	2401      	movs	r4, #1
 801491e:	e000      	b.n	8014922 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8014920:	2400      	movs	r4, #0
 8014922:	2d00      	cmp	r5, #0
 8014924:	d004      	beq.n	8014930 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8014926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801492a:	4618      	mov	r0, r3
 801492c:	f7f7 f8d5 	bl	800bada <_ZN12SimpleStringD1Ev>
 8014930:	2e00      	cmp	r6, #0
 8014932:	d004      	beq.n	801493e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8014934:	f107 0320 	add.w	r3, r7, #32
 8014938:	4618      	mov	r0, r3
 801493a:	f7f7 f8ce 	bl	800bada <_ZN12SimpleStringD1Ev>
 801493e:	2c00      	cmp	r4, #0
 8014940:	d005      	beq.n	801494e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	2200      	movs	r2, #0
 8014946:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801494a:	2401      	movs	r4, #1
 801494c:	e03a      	b.n	80149c4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 801494e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014952:	4924      	ldr	r1, [pc, #144]	; (80149e4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8014954:	4618      	mov	r0, r3
 8014956:	f7f6 fd08 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801495a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801495e:	f107 0310 	add.w	r3, r7, #16
 8014962:	4611      	mov	r1, r2
 8014964:	4618      	mov	r0, r3
 8014966:	f7f7 f8c4 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801496a:	4603      	mov	r3, r0
 801496c:	461c      	mov	r4, r3
 801496e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014972:	4618      	mov	r0, r3
 8014974:	f7f7 f8b1 	bl	800bada <_ZN12SimpleStringD1Ev>
 8014978:	2c00      	cmp	r4, #0
 801497a:	d005      	beq.n	8014988 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2201      	movs	r2, #1
 8014980:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8014984:	2401      	movs	r4, #1
 8014986:	e01d      	b.n	80149c4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8014988:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801498c:	4916      	ldr	r1, [pc, #88]	; (80149e8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 801498e:	4618      	mov	r0, r3
 8014990:	f7f6 fceb 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8014994:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014998:	f107 0310 	add.w	r3, r7, #16
 801499c:	4611      	mov	r1, r2
 801499e:	4618      	mov	r0, r3
 80149a0:	f7f7 f8a7 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 80149a4:	4603      	mov	r3, r0
 80149a6:	461c      	mov	r4, r3
 80149a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80149ac:	4618      	mov	r0, r3
 80149ae:	f7f7 f894 	bl	800bada <_ZN12SimpleStringD1Ev>
 80149b2:	2c00      	cmp	r4, #0
 80149b4:	d005      	beq.n	80149c2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	2202      	movs	r2, #2
 80149ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80149be:	2401      	movs	r4, #1
 80149c0:	e000      	b.n	80149c4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 80149c2:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80149c4:	f107 0310 	add.w	r3, r7, #16
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7f7 f886 	bl	800bada <_ZN12SimpleStringD1Ev>
 80149ce:	4623      	mov	r3, r4
}
 80149d0:	4618      	mov	r0, r3
 80149d2:	3744      	adds	r7, #68	; 0x44
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149d8:	0802362c 	.word	0x0802362c
 80149dc:	08023f9c 	.word	0x08023f9c
 80149e0:	08023fa4 	.word	0x08023fa4
 80149e4:	08023fac 	.word	0x08023fac
 80149e8:	08023fb4 	.word	0x08023fb4

080149ec <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 80149ec:	b480      	push	{r7}
 80149ee:	b083      	sub	sp, #12
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80149fa:	2b01      	cmp	r3, #1
 80149fc:	bf0c      	ite	eq
 80149fe:	2301      	moveq	r3, #1
 8014a00:	2300      	movne	r3, #0
 8014a02:	b2db      	uxtb	r3, r3
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	370c      	adds	r7, #12
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0e:	4770      	bx	lr

08014a10 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8014a10:	b480      	push	{r7}
 8014a12:	b083      	sub	sp, #12
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014a1e:	2b02      	cmp	r3, #2
 8014a20:	bf0c      	ite	eq
 8014a22:	2301      	moveq	r3, #1
 8014a24:	2300      	movne	r3, #0
 8014a26:	b2db      	uxtb	r3, r3
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	370c      	adds	r7, #12
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr

08014a34 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8014a34:	b480      	push	{r7}
 8014a36:	b083      	sub	sp, #12
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
    return packageName_;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	3330      	adds	r3, #48	; 0x30
}
 8014a40:	4618      	mov	r0, r3
 8014a42:	370c      	adds	r7, #12
 8014a44:	46bd      	mov	sp, r7
 8014a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4a:	4770      	bx	lr

08014a4c <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8014a4c:	b480      	push	{r7}
 8014a4e:	b083      	sub	sp, #12
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2200      	movs	r2, #0
 8014a58:	601a      	str	r2, [r3, #0]
    {}
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	370c      	adds	r7, #12
 8014a60:	46bd      	mov	sp, r7
 8014a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a66:	4770      	bx	lr

08014a68 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8014a68:	b480      	push	{r7}
 8014a6a:	b083      	sub	sp, #12
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a76:	2200      	movs	r2, #0
 8014a78:	601a      	str	r2, [r3, #0]
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a80:	3304      	adds	r3, #4
 8014a82:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014a86:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	701a      	strb	r2, [r3, #0]
}
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	4618      	mov	r0, r3
 8014a92:	370c      	adds	r7, #12
 8014a94:	46bd      	mov	sp, r7
 8014a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9a:	4770      	bx	lr

08014a9c <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8014a9c:	b480      	push	{r7}
 8014a9e:	b083      	sub	sp, #12
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014aaa:	2200      	movs	r2, #0
 8014aac:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	701a      	strb	r2, [r3, #0]
}
 8014ab4:	bf00      	nop
 8014ab6:	370c      	adds	r7, #12
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr

08014ac0 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8014ac0:	b40e      	push	{r1, r2, r3}
 8014ac2:	b590      	push	{r4, r7, lr}
 8014ac4:	b086      	sub	sp, #24
 8014ac6:	af00      	add	r7, sp, #0
 8014ac8:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ad0:	3304      	adds	r3, #4
 8014ad2:	681a      	ldr	r2, [r3, #0]
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	1ad3      	subs	r3, r2, r3
 8014ade:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d032      	beq.n	8014b4c <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8014ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014aea:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8014aec:	4b1b      	ldr	r3, [pc, #108]	; (8014b5c <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8014aee:	681c      	ldr	r4, [r3, #0]
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	18d0      	adds	r0, r2, r3
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	1c59      	adds	r1, r3, #1
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b04:	47a0      	blx	r4
 8014b06:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8014b08:	693b      	ldr	r3, [r7, #16]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	dd09      	ble.n	8014b22 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b14:	681a      	ldr	r2, [r3, #0]
 8014b16:	693b      	ldr	r3, [r7, #16]
 8014b18:	441a      	add	r2, r3
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b20:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b28:	681a      	ldr	r2, [r3, #0]
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b30:	3304      	adds	r3, #4
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d90a      	bls.n	8014b4e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b3e:	3304      	adds	r3, #4
 8014b40:	681a      	ldr	r2, [r3, #0]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b48:	601a      	str	r2, [r3, #0]
 8014b4a:	e000      	b.n	8014b4e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8014b4c:	bf00      	nop
    va_end(arguments);
}
 8014b4e:	3718      	adds	r7, #24
 8014b50:	46bd      	mov	sp, r7
 8014b52:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014b56:	b003      	add	sp, #12
 8014b58:	4770      	bx	lr
 8014b5a:	bf00      	nop
 8014b5c:	200000b0 	.word	0x200000b0

08014b60 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b08c      	sub	sp, #48	; 0x30
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	60f8      	str	r0, [r7, #12]
 8014b68:	60b9      	str	r1, [r7, #8]
 8014b6a:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8014b70:	2310      	movs	r3, #16
 8014b72:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8014b74:	2300      	movs	r3, #0
 8014b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8014b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d273      	bcs.n	8014c68 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8014b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b82:	493b      	ldr	r1, [pc, #236]	; (8014c70 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8014b84:	68f8      	ldr	r0, [r7, #12]
 8014b86:	f7ff ff9b 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8014b8a:	687a      	ldr	r2, [r7, #4]
 8014b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b8e:	1ad3      	subs	r3, r2, r3
 8014b90:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8014b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b94:	2b10      	cmp	r3, #16
 8014b96:	d901      	bls.n	8014b9c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8014b98:	2310      	movs	r3, #16
 8014b9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8014b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9e:	f1c3 0310 	rsb	r3, r3, #16
 8014ba2:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d215      	bcs.n	8014bdc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8014bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb4:	4413      	add	r3, r2
 8014bb6:	69fa      	ldr	r2, [r7, #28]
 8014bb8:	4413      	add	r3, r2
 8014bba:	781b      	ldrb	r3, [r3, #0]
 8014bbc:	461a      	mov	r2, r3
 8014bbe:	492d      	ldr	r1, [pc, #180]	; (8014c74 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8014bc0:	68f8      	ldr	r0, [r7, #12]
 8014bc2:	f7ff ff7d 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8014bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc8:	2b07      	cmp	r3, #7
 8014bca:	d103      	bne.n	8014bd4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8014bcc:	492a      	ldr	r1, [pc, #168]	; (8014c78 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8014bce:	68f8      	ldr	r0, [r7, #12]
 8014bd0:	f7ff ff76 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8014bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8014bda:	e7e5      	b.n	8014ba8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8014bdc:	2300      	movs	r3, #0
 8014bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8014be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d207      	bcs.n	8014bf8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8014be8:	4924      	ldr	r1, [pc, #144]	; (8014c7c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8014bea:	68f8      	ldr	r0, [r7, #12]
 8014bec:	f7ff ff68 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8014bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8014bf6:	e7f3      	b.n	8014be0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	2b08      	cmp	r3, #8
 8014bfc:	d903      	bls.n	8014c06 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8014bfe:	491e      	ldr	r1, [pc, #120]	; (8014c78 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8014c00:	68f8      	ldr	r0, [r7, #12]
 8014c02:	f7ff ff5d 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8014c06:	491e      	ldr	r1, [pc, #120]	; (8014c80 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8014c08:	68f8      	ldr	r0, [r7, #12]
 8014c0a:	f7ff ff59 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8014c0e:	2300      	movs	r3, #0
 8014c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d21d      	bcs.n	8014c56 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8014c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c1e:	4413      	add	r3, r2
 8014c20:	69fa      	ldr	r2, [r7, #28]
 8014c22:	4413      	add	r3, r2
 8014c24:	781b      	ldrb	r3, [r3, #0]
 8014c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8014c2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014c2e:	2b1f      	cmp	r3, #31
 8014c30:	d903      	bls.n	8014c3a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8014c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014c36:	2b7e      	cmp	r3, #126	; 0x7e
 8014c38:	d902      	bls.n	8014c40 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8014c3a:	232e      	movs	r3, #46	; 0x2e
 8014c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8014c40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014c44:	461a      	mov	r2, r3
 8014c46:	490f      	ldr	r1, [pc, #60]	; (8014c84 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8014c48:	68f8      	ldr	r0, [r7, #12]
 8014c4a:	f7ff ff39 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8014c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c50:	3301      	adds	r3, #1
 8014c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c54:	e7dd      	b.n	8014c12 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8014c56:	490c      	ldr	r1, [pc, #48]	; (8014c88 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8014c58:	68f8      	ldr	r0, [r7, #12]
 8014c5a:	f7ff ff31 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8014c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c62:	4413      	add	r3, r2
 8014c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8014c66:	e787      	b.n	8014b78 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8014c68:	bf00      	nop
 8014c6a:	3730      	adds	r7, #48	; 0x30
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}
 8014c70:	08023fcc 	.word	0x08023fcc
 8014c74:	08023fd8 	.word	0x08023fd8
 8014c78:	08023fe0 	.word	0x08023fe0
 8014c7c:	08023fe4 	.word	0x08023fe4
 8014c80:	08023fe8 	.word	0x08023fe8
 8014c84:	08023fec 	.word	0x08023fec
 8014c88:	08023ff0 	.word	0x08023ff0

08014c8c <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8014c8c:	b480      	push	{r7}
 8014c8e:	b083      	sub	sp, #12
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
    return buffer_;
 8014c94:	687b      	ldr	r3, [r7, #4]
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	370c      	adds	r7, #12
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca0:	4770      	bx	lr

08014ca2 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8014ca2:	b480      	push	{r7}
 8014ca4:	b083      	sub	sp, #12
 8014ca6:	af00      	add	r7, sp, #0
 8014ca8:	6078      	str	r0, [r7, #4]
 8014caa:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cb2:	3304      	adds	r3, #4
 8014cb4:	683a      	ldr	r2, [r7, #0]
 8014cb6:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cbe:	3304      	adds	r3, #4
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014cc6:	d306      	bcc.n	8014cd6 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cce:	3304      	adds	r3, #4
 8014cd0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014cd4:	601a      	str	r2, [r3, #0]
}
 8014cd6:	bf00      	nop
 8014cd8:	370c      	adds	r7, #12
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce0:	4770      	bx	lr

08014ce2 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8014ce2:	b480      	push	{r7}
 8014ce4:	b083      	sub	sp, #12
 8014ce6:	af00      	add	r7, sp, #0
 8014ce8:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cf0:	3304      	adds	r3, #4
 8014cf2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014cf6:	601a      	str	r2, [r3, #0]
}
 8014cf8:	bf00      	nop
 8014cfa:	370c      	adds	r7, #12
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d02:	4770      	bx	lr

08014d04 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8014d04:	b480      	push	{r7}
 8014d06:	b083      	sub	sp, #12
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014d12:	681a      	ldr	r2, [r3, #0]
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014d1a:	3304      	adds	r3, #4
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	429a      	cmp	r2, r3
 8014d20:	bf2c      	ite	cs
 8014d22:	2301      	movcs	r3, #1
 8014d24:	2300      	movcc	r3, #0
 8014d26:	b2db      	uxtb	r3, r3
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	370c      	adds	r7, #12
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d32:	4770      	bx	lr

08014d34 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	601a      	str	r2, [r3, #0]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2200      	movs	r2, #0
 8014d46:	711a      	strb	r2, [r3, #4]
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	3308      	adds	r3, #8
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f7ff fe8b 	bl	8014a68 <_ZN18SimpleStringBufferC1Ev>
{
}
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	4618      	mov	r0, r3
 8014d56:	3708      	adds	r7, #8
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}

08014d5c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8014d5c:	b5b0      	push	{r4, r5, r7, lr}
 8014d5e:	b086      	sub	sp, #24
 8014d60:	af02      	add	r7, sp, #8
 8014d62:	60f8      	str	r0, [r7, #12]
 8014d64:	60b9      	str	r1, [r7, #8]
 8014d66:	607a      	str	r2, [r7, #4]
 8014d68:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	f103 0408 	add.w	r4, r3, #8
 8014d70:	687d      	ldr	r5, [r7, #4]
 8014d72:	6a3b      	ldr	r3, [r7, #32]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	3314      	adds	r3, #20
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	6a38      	ldr	r0, [r7, #32]
 8014d7c:	4798      	blx	r3
 8014d7e:	4603      	mov	r3, r0
 8014d80:	9301      	str	r3, [sp, #4]
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	9300      	str	r3, [sp, #0]
 8014d86:	462b      	mov	r3, r5
 8014d88:	68ba      	ldr	r2, [r7, #8]
 8014d8a:	4904      	ldr	r1, [pc, #16]	; (8014d9c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	f7ff fe97 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014d92:	bf00      	nop
 8014d94:	3710      	adds	r7, #16
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bdb0      	pop	{r4, r5, r7, pc}
 8014d9a:	bf00      	nop
 8014d9c:	08023ff4 	.word	0x08023ff4

08014da0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8014da0:	b5b0      	push	{r4, r5, r7, lr}
 8014da2:	b086      	sub	sp, #24
 8014da4:	af02      	add	r7, sp, #8
 8014da6:	60f8      	str	r0, [r7, #12]
 8014da8:	60b9      	str	r1, [r7, #8]
 8014daa:	607a      	str	r2, [r7, #4]
 8014dac:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	f103 0408 	add.w	r4, r3, #8
 8014db4:	687d      	ldr	r5, [r7, #4]
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	3318      	adds	r3, #24
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	6838      	ldr	r0, [r7, #0]
 8014dc0:	4798      	blx	r3
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	9300      	str	r3, [sp, #0]
 8014dc6:	462b      	mov	r3, r5
 8014dc8:	68ba      	ldr	r2, [r7, #8]
 8014dca:	4904      	ldr	r1, [pc, #16]	; (8014ddc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8014dcc:	4620      	mov	r0, r4
 8014dce:	f7ff fe77 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014dd2:	bf00      	nop
 8014dd4:	3710      	adds	r7, #16
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8014dda:	bf00      	nop
 8014ddc:	0802402c 	.word	0x0802402c

08014de0 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	3308      	adds	r3, #8
 8014dec:	4903      	ldr	r1, [pc, #12]	; (8014dfc <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8014dee:	4618      	mov	r0, r3
 8014df0:	f7ff fe66 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014df4:	bf00      	nop
 8014df6:	3708      	adds	r7, #8
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}
 8014dfc:	0802405c 	.word	0x0802405c

08014e00 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8014e14:	2367      	movs	r3, #103	; 0x67
 8014e16:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	f203 1311 	addw	r3, r3, #273	; 0x111
 8014e1e:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f103 0208 	add.w	r2, r3, #8
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	4610      	mov	r0, r2
 8014e30:	f7ff ff37 	bl	8014ca2 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8014e34:	bf00      	nop
 8014e36:	3710      	adds	r7, #16
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}

08014e3c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8014e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e3e:	b089      	sub	sp, #36	; 0x24
 8014e40:	af04      	add	r7, sp, #16
 8014e42:	60f8      	str	r0, [r7, #12]
 8014e44:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d102      	bne.n	8014e54 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8014e4e:	68f8      	ldr	r0, [r7, #12]
 8014e50:	f000 f882 	bl	8014f58 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	1c5a      	adds	r2, r3, #1
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	f103 0508 	add.w	r5, r3, #8
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8014e6e:	68bb      	ldr	r3, [r7, #8]
 8014e70:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8014e76:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	695a      	ldr	r2, [r3, #20]
 8014e7c:	68bb      	ldr	r3, [r7, #8]
 8014e7e:	695b      	ldr	r3, [r3, #20]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	3314      	adds	r3, #20
 8014e84:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8014e86:	4610      	mov	r0, r2
 8014e88:	4798      	blx	r3
 8014e8a:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8014e90:	9303      	str	r3, [sp, #12]
 8014e92:	9202      	str	r2, [sp, #8]
 8014e94:	683a      	ldr	r2, [r7, #0]
 8014e96:	9201      	str	r2, [sp, #4]
 8014e98:	9400      	str	r4, [sp, #0]
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	4632      	mov	r2, r6
 8014e9e:	4915      	ldr	r1, [pc, #84]	; (8014ef4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8014ea0:	4628      	mov	r0, r5
 8014ea2:	f7ff fe0d 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	f103 0008 	add.w	r0, r3, #8
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	6899      	ldr	r1, [r3, #8]
 8014eb0:	68bb      	ldr	r3, [r7, #8]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	f7ff fe53 	bl	8014b60 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	695a      	ldr	r2, [r3, #20]
 8014ebe:	68bb      	ldr	r3, [r7, #8]
 8014ec0:	695b      	ldr	r3, [r3, #20]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	3314      	adds	r3, #20
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	4610      	mov	r0, r2
 8014eca:	4798      	blx	r3
 8014ecc:	4603      	mov	r3, r0
 8014ece:	490a      	ldr	r1, [pc, #40]	; (8014ef8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7f6 f887 	bl	800afe4 <_ZN12SimpleString6StrCmpEPKcS1_>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	bf0c      	ite	eq
 8014edc:	2301      	moveq	r3, #1
 8014ede:	2300      	movne	r3, #0
 8014ee0:	b2db      	uxtb	r3, r3
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d002      	beq.n	8014eec <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2201      	movs	r2, #1
 8014eea:	711a      	strb	r2, [r3, #4]
}
 8014eec:	bf00      	nop
 8014eee:	3714      	adds	r7, #20
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ef4:	0802407c 	.word	0x0802407c
 8014ef8:	080240dc 	.word	0x080240dc

08014efc <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d103      	bne.n	8014f14 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8014f0c:	6878      	ldr	r0, [r7, #4]
 8014f0e:	f7ff ff67 	bl	8014de0 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8014f12:	e01e      	b.n	8014f52 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	3308      	adds	r3, #8
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f7ff fef3 	bl	8014d04 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	3308      	adds	r3, #8
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7ff fedb 	bl	8014ce2 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8014f2c:	7bfb      	ldrb	r3, [r7, #15]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d002      	beq.n	8014f38 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f000 f820 	bl	8014f78 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	4619      	mov	r1, r3
 8014f3e:	6878      	ldr	r0, [r7, #4]
 8014f40:	f000 f82a 	bl	8014f98 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	791b      	ldrb	r3, [r3, #4]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d002      	beq.n	8014f52 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f000 f839 	bl	8014fc4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8014f52:	3710      	adds	r7, #16
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	3308      	adds	r3, #8
 8014f64:	4903      	ldr	r1, [pc, #12]	; (8014f74 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8014f66:	4618      	mov	r0, r3
 8014f68:	f7ff fdaa 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014f6c:	bf00      	nop
 8014f6e:	3708      	adds	r7, #8
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	080240e4 	.word	0x080240e4

08014f78 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b082      	sub	sp, #8
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	3308      	adds	r3, #8
 8014f84:	4903      	ldr	r1, [pc, #12]	; (8014f94 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8014f86:	4618      	mov	r0, r3
 8014f88:	f7ff fd9a 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014f8c:	bf00      	nop
 8014f8e:	3708      	adds	r7, #8
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}
 8014f94:	080240fc 	.word	0x080240fc

08014f98 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b082      	sub	sp, #8
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f103 0008 	add.w	r0, r3, #8
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	4a04      	ldr	r2, [pc, #16]	; (8014fbc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8014fac:	4904      	ldr	r1, [pc, #16]	; (8014fc0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8014fae:	f7ff fd87 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014fb2:	bf00      	nop
 8014fb4:	3708      	adds	r7, #8
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}
 8014fba:	bf00      	nop
 8014fbc:	08024144 	.word	0x08024144
 8014fc0:	0802415c 	.word	0x0802415c

08014fc4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	3308      	adds	r3, #8
 8014fd0:	4903      	ldr	r1, [pc, #12]	; (8014fe0 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7ff fd74 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014fd8:	bf00      	nop
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}
 8014fe0:	08024164 	.word	0x08024164

08014fe4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b08a      	sub	sp, #40	; 0x28
 8014fe8:	af06      	add	r7, sp, #24
 8014fea:	60f8      	str	r0, [r7, #12]
 8014fec:	60b9      	str	r1, [r7, #8]
 8014fee:	607a      	str	r2, [r7, #4]
 8014ff0:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8014ff2:	f7f9 fe8d 	bl	800ed10 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8014ff6:	4602      	mov	r2, r0
 8014ff8:	69bb      	ldr	r3, [r7, #24]
 8014ffa:	9305      	str	r3, [sp, #20]
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	9304      	str	r3, [sp, #16]
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	9303      	str	r3, [sp, #12]
 8015004:	68bb      	ldr	r3, [r7, #8]
 8015006:	9302      	str	r3, [sp, #8]
 8015008:	9201      	str	r2, [sp, #4]
 801500a:	2300      	movs	r3, #0
 801500c:	9300      	str	r3, [sp, #0]
 801500e:	2300      	movs	r3, #0
 8015010:	4a04      	ldr	r2, [pc, #16]	; (8015024 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8015012:	4905      	ldr	r1, [pc, #20]	; (8015028 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8015014:	68f8      	ldr	r0, [r7, #12]
 8015016:	f000 f855 	bl	80150c4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801501a:	bf00      	nop
 801501c:	3710      	adds	r7, #16
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}
 8015022:	bf00      	nop
 8015024:	08023fc0 	.word	0x08023fc0
 8015028:	08024278 	.word	0x08024278

0801502c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 801502c:	b590      	push	{r4, r7, lr}
 801502e:	b08b      	sub	sp, #44	; 0x2c
 8015030:	af06      	add	r7, sp, #24
 8015032:	60f8      	str	r0, [r7, #12]
 8015034:	60b9      	str	r1, [r7, #8]
 8015036:	607a      	str	r2, [r7, #4]
 8015038:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 801503a:	68bb      	ldr	r3, [r7, #8]
 801503c:	68d8      	ldr	r0, [r3, #12]
 801503e:	68bb      	ldr	r3, [r7, #8]
 8015040:	691c      	ldr	r4, [r3, #16]
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	68ba      	ldr	r2, [r7, #8]
 8015048:	6952      	ldr	r2, [r2, #20]
 801504a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801504c:	9105      	str	r1, [sp, #20]
 801504e:	6a39      	ldr	r1, [r7, #32]
 8015050:	9104      	str	r1, [sp, #16]
 8015052:	6839      	ldr	r1, [r7, #0]
 8015054:	9103      	str	r1, [sp, #12]
 8015056:	6879      	ldr	r1, [r7, #4]
 8015058:	9102      	str	r1, [sp, #8]
 801505a:	9201      	str	r2, [sp, #4]
 801505c:	9300      	str	r3, [sp, #0]
 801505e:	4623      	mov	r3, r4
 8015060:	4602      	mov	r2, r0
 8015062:	4904      	ldr	r1, [pc, #16]	; (8015074 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8015064:	68f8      	ldr	r0, [r7, #12]
 8015066:	f000 f82d 	bl	80150c4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801506a:	bf00      	nop
 801506c:	3714      	adds	r7, #20
 801506e:	46bd      	mov	sp, r7
 8015070:	bd90      	pop	{r4, r7, pc}
 8015072:	bf00      	nop
 8015074:	0802429c 	.word	0x0802429c

08015078 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8015078:	b590      	push	{r4, r7, lr}
 801507a:	b08b      	sub	sp, #44	; 0x2c
 801507c:	af06      	add	r7, sp, #24
 801507e:	60f8      	str	r0, [r7, #12]
 8015080:	60b9      	str	r1, [r7, #8]
 8015082:	607a      	str	r2, [r7, #4]
 8015084:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8015086:	68bb      	ldr	r3, [r7, #8]
 8015088:	68d8      	ldr	r0, [r3, #12]
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	691c      	ldr	r4, [r3, #16]
 801508e:	68bb      	ldr	r3, [r7, #8]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	68ba      	ldr	r2, [r7, #8]
 8015094:	6952      	ldr	r2, [r2, #20]
 8015096:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015098:	9105      	str	r1, [sp, #20]
 801509a:	6a39      	ldr	r1, [r7, #32]
 801509c:	9104      	str	r1, [sp, #16]
 801509e:	6839      	ldr	r1, [r7, #0]
 80150a0:	9103      	str	r1, [sp, #12]
 80150a2:	6879      	ldr	r1, [r7, #4]
 80150a4:	9102      	str	r1, [sp, #8]
 80150a6:	9201      	str	r2, [sp, #4]
 80150a8:	9300      	str	r3, [sp, #0]
 80150aa:	4623      	mov	r3, r4
 80150ac:	4602      	mov	r2, r0
 80150ae:	4904      	ldr	r1, [pc, #16]	; (80150c0 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80150b0:	68f8      	ldr	r0, [r7, #12]
 80150b2:	f000 f807 	bl	80150c4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80150b6:	bf00      	nop
 80150b8:	3714      	adds	r7, #20
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd90      	pop	{r4, r7, pc}
 80150be:	bf00      	nop
 80150c0:	080242c4 	.word	0x080242c4

080150c4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80150c4:	b590      	push	{r4, r7, lr}
 80150c6:	b087      	sub	sp, #28
 80150c8:	af02      	add	r7, sp, #8
 80150ca:	60f8      	str	r0, [r7, #12]
 80150cc:	60b9      	str	r1, [r7, #8]
 80150ce:	607a      	str	r2, [r7, #4]
 80150d0:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	3308      	adds	r3, #8
 80150d6:	68ba      	ldr	r2, [r7, #8]
 80150d8:	4910      	ldr	r1, [pc, #64]	; (801511c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 80150da:	4618      	mov	r0, r3
 80150dc:	f7ff fcf0 	bl	8014ac0 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 80150e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e2:	9300      	str	r3, [sp, #0]
 80150e4:	6a3b      	ldr	r3, [r7, #32]
 80150e6:	683a      	ldr	r2, [r7, #0]
 80150e8:	6879      	ldr	r1, [r7, #4]
 80150ea:	68f8      	ldr	r0, [r7, #12]
 80150ec:	f7ff fe36 	bl	8014d5c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 80150f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80150f6:	68f8      	ldr	r0, [r7, #12]
 80150f8:	f7ff fe52 	bl	8014da0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 80150fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	3308      	adds	r3, #8
 8015102:	681c      	ldr	r4, [r3, #0]
 8015104:	68f8      	ldr	r0, [r7, #12]
 8015106:	f000 f80b 	bl	8015120 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801510a:	4603      	mov	r3, r0
 801510c:	4619      	mov	r1, r3
 801510e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015110:	47a0      	blx	r4
}
 8015112:	bf00      	nop
 8015114:	3714      	adds	r7, #20
 8015116:	46bd      	mov	sp, r7
 8015118:	bd90      	pop	{r4, r7, pc}
 801511a:	bf00      	nop
 801511c:	080242f0 	.word	0x080242f0

08015120 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	3308      	adds	r3, #8
 801512c:	4618      	mov	r0, r3
 801512e:	f7ff fdad 	bl	8014c8c <_ZN18SimpleStringBuffer8toStringEv>
 8015132:	4603      	mov	r3, r0
}
 8015134:	4618      	mov	r0, r3
 8015136:	3708      	adds	r7, #8
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}

0801513c <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b082      	sub	sp, #8
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	3308      	adds	r3, #8
 8015148:	4618      	mov	r0, r3
 801514a:	f7ff fca7 	bl	8014a9c <_ZN18SimpleStringBuffer5clearEv>
}
 801514e:	bf00      	nop
 8015150:	3708      	adds	r7, #8
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}

08015156 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8015156:	b480      	push	{r7}
 8015158:	b085      	sub	sp, #20
 801515a:	af00      	add	r7, sp, #0
 801515c:	60f8      	str	r0, [r7, #12]
 801515e:	60b9      	str	r1, [r7, #8]
 8015160:	607a      	str	r2, [r7, #4]
 8015162:	603b      	str	r3, [r7, #0]
    number_ = number;
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	687a      	ldr	r2, [r7, #4]
 8015168:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	68ba      	ldr	r2, [r7, #8]
 801516e:	609a      	str	r2, [r3, #8]
    size_ = size;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	683a      	ldr	r2, [r7, #0]
 8015174:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	69ba      	ldr	r2, [r7, #24]
 801517a:	615a      	str	r2, [r3, #20]
    period_ = period;
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	7f3a      	ldrb	r2, [r7, #28]
 8015180:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015188:	765a      	strb	r2, [r3, #25]
    file_ = file;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801518e:	60da      	str	r2, [r3, #12]
    line_ = line;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015194:	611a      	str	r2, [r3, #16]
}
 8015196:	bf00      	nop
 8015198:	3714      	adds	r7, #20
 801519a:	46bd      	mov	sp, r7
 801519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a0:	4770      	bx	lr

080151a2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80151a2:	b480      	push	{r7}
 80151a4:	b085      	sub	sp, #20
 80151a6:	af00      	add	r7, sp, #0
 80151a8:	60f8      	str	r0, [r7, #12]
 80151aa:	60b9      	str	r1, [r7, #8]
 80151ac:	4613      	mov	r3, r2
 80151ae:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80151b0:	79fb      	ldrb	r3, [r7, #7]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d00b      	beq.n	80151ce <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	7e1b      	ldrb	r3, [r3, #24]
 80151ba:	79fa      	ldrb	r2, [r7, #7]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d006      	beq.n	80151ce <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80151c0:	68bb      	ldr	r3, [r7, #8]
 80151c2:	7e1b      	ldrb	r3, [r3, #24]
 80151c4:	2b01      	cmp	r3, #1
 80151c6:	d004      	beq.n	80151d2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80151c8:	79fb      	ldrb	r3, [r7, #7]
 80151ca:	2b02      	cmp	r3, #2
 80151cc:	d101      	bne.n	80151d2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80151ce:	2301      	movs	r3, #1
 80151d0:	e000      	b.n	80151d4 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 80151d2:	2300      	movs	r3, #0
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3714      	adds	r7, #20
 80151d8:	46bd      	mov	sp, r7
 80151da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151de:	4770      	bx	lr

080151e0 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 80151e0:	b480      	push	{r7}
 80151e2:	b083      	sub	sp, #12
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681a      	ldr	r2, [r3, #0]
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	61da      	str	r2, [r3, #28]
    head_ = node;
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	683a      	ldr	r2, [r7, #0]
 80151f6:	601a      	str	r2, [r3, #0]
}
 80151f8:	bf00      	nop
 80151fa:	370c      	adds	r7, #12
 80151fc:	46bd      	mov	sp, r7
 80151fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015202:	4770      	bx	lr

08015204 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8015204:	b480      	push	{r7}
 8015206:	b085      	sub	sp, #20
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8015214:	2300      	movs	r3, #0
 8015216:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d019      	beq.n	8015252 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	689b      	ldr	r3, [r3, #8]
 8015222:	683a      	ldr	r2, [r7, #0]
 8015224:	429a      	cmp	r2, r3
 8015226:	d10e      	bne.n	8015246 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d005      	beq.n	801523a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	69da      	ldr	r2, [r3, #28]
 8015232:	68bb      	ldr	r3, [r7, #8]
 8015234:	61da      	str	r2, [r3, #28]
                return cur;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	e00c      	b.n	8015254 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	69da      	ldr	r2, [r3, #28]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	601a      	str	r2, [r3, #0]
                return cur;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	e006      	b.n	8015254 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	69db      	ldr	r3, [r3, #28]
 801524e:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8015250:	e7e2      	b.n	8015218 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8015252:	2300      	movs	r3, #0
}
 8015254:	4618      	mov	r0, r3
 8015256:	3714      	adds	r7, #20
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr

08015260 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8015260:	b480      	push	{r7}
 8015262:	b085      	sub	sp, #20
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
 8015268:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d00a      	beq.n	801528c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	689b      	ldr	r3, [r3, #8]
 801527a:	683a      	ldr	r2, [r7, #0]
 801527c:	429a      	cmp	r2, r3
 801527e:	d101      	bne.n	8015284 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	e004      	b.n	801528e <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	69db      	ldr	r3, [r3, #28]
 8015288:	60fb      	str	r3, [r7, #12]
  while (cur) {
 801528a:	e7f1      	b.n	8015270 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 801528c:	2300      	movs	r3, #0
}
 801528e:	4618      	mov	r0, r3
 8015290:	3714      	adds	r7, #20
 8015292:	46bd      	mov	sp, r7
 8015294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015298:	4770      	bx	lr

0801529a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801529a:	b580      	push	{r7, lr}
 801529c:	b086      	sub	sp, #24
 801529e:	af00      	add	r7, sp, #0
 80152a0:	60f8      	str	r0, [r7, #12]
 80152a2:	60b9      	str	r1, [r7, #8]
 80152a4:	4613      	mov	r3, r2
 80152a6:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	617b      	str	r3, [r7, #20]
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d00e      	beq.n	80152d0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80152b2:	79fb      	ldrb	r3, [r7, #7]
 80152b4:	461a      	mov	r2, r3
 80152b6:	6979      	ldr	r1, [r7, #20]
 80152b8:	68f8      	ldr	r0, [r7, #12]
 80152ba:	f7ff ff72 	bl	80151a2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80152be:	4603      	mov	r3, r0
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d001      	beq.n	80152c8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 80152c4:	697b      	ldr	r3, [r7, #20]
 80152c6:	e004      	b.n	80152d2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	69db      	ldr	r3, [r3, #28]
 80152cc:	617b      	str	r3, [r7, #20]
 80152ce:	e7ed      	b.n	80152ac <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 80152d0:	2300      	movs	r3, #0
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	3718      	adds	r7, #24
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}

080152da <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 80152da:	b580      	push	{r7, lr}
 80152dc:	b082      	sub	sp, #8
 80152de:	af00      	add	r7, sp, #0
 80152e0:	6078      	str	r0, [r7, #4]
 80152e2:	460b      	mov	r3, r1
 80152e4:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	78fa      	ldrb	r2, [r7, #3]
 80152ec:	4619      	mov	r1, r3
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	f7ff ffd3 	bl	801529a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80152f4:	4603      	mov	r3, r0
}
 80152f6:	4618      	mov	r0, r3
 80152f8:	3708      	adds	r7, #8
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bd80      	pop	{r7, pc}

080152fe <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80152fe:	b580      	push	{r7, lr}
 8015300:	b084      	sub	sp, #16
 8015302:	af00      	add	r7, sp, #0
 8015304:	60f8      	str	r0, [r7, #12]
 8015306:	60b9      	str	r1, [r7, #8]
 8015308:	4613      	mov	r3, r2
 801530a:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	69db      	ldr	r3, [r3, #28]
 8015310:	79fa      	ldrb	r2, [r7, #7]
 8015312:	4619      	mov	r1, r3
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f7ff ffc0 	bl	801529a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801531a:	4603      	mov	r3, r0
}
 801531c:	4618      	mov	r0, r3
 801531e:	3710      	adds	r7, #16
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b084      	sub	sp, #16
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	460b      	mov	r3, r1
 801532e:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8015330:	2300      	movs	r3, #0
 8015332:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	60bb      	str	r3, [r7, #8]
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d00f      	beq.n	8015360 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8015340:	78fb      	ldrb	r3, [r7, #3]
 8015342:	461a      	mov	r2, r3
 8015344:	68b9      	ldr	r1, [r7, #8]
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f7ff ff2b 	bl	80151a2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801534c:	4603      	mov	r3, r0
 801534e:	2b00      	cmp	r3, #0
 8015350:	d002      	beq.n	8015358 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	3301      	adds	r3, #1
 8015356:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	69db      	ldr	r3, [r3, #28]
 801535c:	60bb      	str	r3, [r7, #8]
 801535e:	e7ec      	b.n	801533a <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8015360:	68fb      	ldr	r3, [r7, #12]
}
 8015362:	4618      	mov	r0, r3
 8015364:	3710      	adds	r7, #16
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
	...

0801536c <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 801536c:	b480      	push	{r7}
 801536e:	b083      	sub	sp, #12
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8015376:	6839      	ldr	r1, [r7, #0]
 8015378:	4b09      	ldr	r3, [pc, #36]	; (80153a0 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 801537a:	fba3 2301 	umull	r2, r3, r3, r1
 801537e:	1aca      	subs	r2, r1, r3
 8015380:	0852      	lsrs	r2, r2, #1
 8015382:	4413      	add	r3, r2
 8015384:	099a      	lsrs	r2, r3, #6
 8015386:	4613      	mov	r3, r2
 8015388:	00db      	lsls	r3, r3, #3
 801538a:	4413      	add	r3, r2
 801538c:	00db      	lsls	r3, r3, #3
 801538e:	4413      	add	r3, r2
 8015390:	1aca      	subs	r2, r1, r3
 8015392:	4613      	mov	r3, r2
}
 8015394:	4618      	mov	r0, r3
 8015396:	370c      	adds	r7, #12
 8015398:	46bd      	mov	sp, r7
 801539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539e:	4770      	bx	lr
 80153a0:	c0e07039 	.word	0xc0e07039

080153a4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b082      	sub	sp, #8
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
 80153ac:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	689b      	ldr	r3, [r3, #8]
 80153b2:	4619      	mov	r1, r3
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	f7ff ffd9 	bl	801536c <_ZN23MemoryLeakDetectorTable4hashEPc>
 80153ba:	4603      	mov	r3, r0
 80153bc:	009b      	lsls	r3, r3, #2
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	4413      	add	r3, r2
 80153c2:	6839      	ldr	r1, [r7, #0]
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7ff ff0b 	bl	80151e0 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 80153ca:	bf00      	nop
 80153cc:	3708      	adds	r7, #8
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}

080153d2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 80153d2:	b580      	push	{r7, lr}
 80153d4:	b082      	sub	sp, #8
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
 80153da:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 80153dc:	6839      	ldr	r1, [r7, #0]
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f7ff ffc4 	bl	801536c <_ZN23MemoryLeakDetectorTable4hashEPc>
 80153e4:	4603      	mov	r3, r0
 80153e6:	009b      	lsls	r3, r3, #2
 80153e8:	687a      	ldr	r2, [r7, #4]
 80153ea:	4413      	add	r3, r2
 80153ec:	6839      	ldr	r1, [r7, #0]
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7ff ff08 	bl	8015204 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 80153f4:	4603      	mov	r3, r0
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	3708      	adds	r7, #8
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}

080153fe <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 80153fe:	b580      	push	{r7, lr}
 8015400:	b082      	sub	sp, #8
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
 8015406:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8015408:	6839      	ldr	r1, [r7, #0]
 801540a:	6878      	ldr	r0, [r7, #4]
 801540c:	f7ff ffae 	bl	801536c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8015410:	4603      	mov	r3, r0
 8015412:	009b      	lsls	r3, r3, #2
 8015414:	687a      	ldr	r2, [r7, #4]
 8015416:	4413      	add	r3, r2
 8015418:	6839      	ldr	r1, [r7, #0]
 801541a:	4618      	mov	r0, r3
 801541c:	f7ff ff20 	bl	8015260 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8015420:	4603      	mov	r3, r0
}
 8015422:	4618      	mov	r0, r3
 8015424:	3708      	adds	r7, #8
 8015426:	46bd      	mov	sp, r7
 8015428:	bd80      	pop	{r7, pc}

0801542a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 801542a:	b580      	push	{r7, lr}
 801542c:	b084      	sub	sp, #16
 801542e:	af00      	add	r7, sp, #0
 8015430:	6078      	str	r0, [r7, #4]
 8015432:	460b      	mov	r3, r1
 8015434:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8015436:	2300      	movs	r3, #0
 8015438:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801543a:	2300      	movs	r3, #0
 801543c:	60bb      	str	r3, [r7, #8]
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	2b48      	cmp	r3, #72	; 0x48
 8015442:	dc10      	bgt.n	8015466 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8015444:	68bb      	ldr	r3, [r7, #8]
 8015446:	009b      	lsls	r3, r3, #2
 8015448:	687a      	ldr	r2, [r7, #4]
 801544a:	4413      	add	r3, r2
 801544c:	78fa      	ldrb	r2, [r7, #3]
 801544e:	4611      	mov	r1, r2
 8015450:	4618      	mov	r0, r3
 8015452:	f7ff ff67 	bl	8015324 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8015456:	4602      	mov	r2, r0
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	4413      	add	r3, r2
 801545c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	3301      	adds	r3, #1
 8015462:	60bb      	str	r3, [r7, #8]
 8015464:	e7eb      	b.n	801543e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8015466:	68fb      	ldr	r3, [r7, #12]
}
 8015468:	4618      	mov	r0, r3
 801546a:	3710      	adds	r7, #16
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b084      	sub	sp, #16
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	460b      	mov	r3, r1
 801547a:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 801547c:	2300      	movs	r3, #0
 801547e:	60fb      	str	r3, [r7, #12]
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	2b48      	cmp	r3, #72	; 0x48
 8015484:	dc12      	bgt.n	80154ac <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	009b      	lsls	r3, r3, #2
 801548a:	687a      	ldr	r2, [r7, #4]
 801548c:	4413      	add	r3, r2
 801548e:	78fa      	ldrb	r2, [r7, #3]
 8015490:	4611      	mov	r1, r2
 8015492:	4618      	mov	r0, r3
 8015494:	f7ff ff21 	bl	80152da <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8015498:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d001      	beq.n	80154a4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	e004      	b.n	80154ae <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	3301      	adds	r3, #1
 80154a8:	60fb      	str	r3, [r7, #12]
 80154aa:	e7e9      	b.n	8015480 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80154ac:	2300      	movs	r3, #0
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3710      	adds	r7, #16
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}

080154b6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80154b6:	b580      	push	{r7, lr}
 80154b8:	b086      	sub	sp, #24
 80154ba:	af00      	add	r7, sp, #0
 80154bc:	60f8      	str	r0, [r7, #12]
 80154be:	60b9      	str	r1, [r7, #8]
 80154c0:	4613      	mov	r3, r2
 80154c2:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	689b      	ldr	r3, [r3, #8]
 80154c8:	4619      	mov	r1, r3
 80154ca:	68f8      	ldr	r0, [r7, #12]
 80154cc:	f7ff ff4e 	bl	801536c <_ZN23MemoryLeakDetectorTable4hashEPc>
 80154d0:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	009b      	lsls	r3, r3, #2
 80154d6:	68fa      	ldr	r2, [r7, #12]
 80154d8:	4413      	add	r3, r2
 80154da:	79fa      	ldrb	r2, [r7, #7]
 80154dc:	68b9      	ldr	r1, [r7, #8]
 80154de:	4618      	mov	r0, r3
 80154e0:	f7ff ff0d 	bl	80152fe <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80154e4:	6138      	str	r0, [r7, #16]
    if (node) return node;
 80154e6:	693b      	ldr	r3, [r7, #16]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d001      	beq.n	80154f0 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 80154ec:	693b      	ldr	r3, [r7, #16]
 80154ee:	e019      	b.n	8015524 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	3301      	adds	r3, #1
 80154f4:	617b      	str	r3, [r7, #20]
 80154f6:	697b      	ldr	r3, [r7, #20]
 80154f8:	2b48      	cmp	r3, #72	; 0x48
 80154fa:	d812      	bhi.n	8015522 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	009b      	lsls	r3, r3, #2
 8015500:	68fa      	ldr	r2, [r7, #12]
 8015502:	4413      	add	r3, r2
 8015504:	79fa      	ldrb	r2, [r7, #7]
 8015506:	4611      	mov	r1, r2
 8015508:	4618      	mov	r0, r3
 801550a:	f7ff fee6 	bl	80152da <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801550e:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8015510:	693b      	ldr	r3, [r7, #16]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d001      	beq.n	801551a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	e004      	b.n	8015524 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	3301      	adds	r3, #1
 801551e:	617b      	str	r3, [r7, #20]
 8015520:	e7e9      	b.n	80154f6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8015522:	2300      	movs	r3, #0
}
 8015524:	4618      	mov	r0, r3
 8015526:	3718      	adds	r7, #24
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 801552c:	b5b0      	push	{r4, r5, r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2448      	movs	r4, #72	; 0x48
 8015538:	461d      	mov	r5, r3
 801553a:	2c00      	cmp	r4, #0
 801553c:	db05      	blt.n	801554a <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 801553e:	4628      	mov	r0, r5
 8015540:	f7ff fa84 	bl	8014a4c <_ZN22MemoryLeakDetectorListC1Ev>
 8015544:	3504      	adds	r5, #4
 8015546:	3c01      	subs	r4, #1
 8015548:	e7f7      	b.n	801553a <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	4618      	mov	r0, r3
 801554e:	3708      	adds	r7, #8
 8015550:	46bd      	mov	sp, r7
 8015552:	bdb0      	pop	{r4, r5, r7, pc}

08015554 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8015554:	b590      	push	{r4, r7, lr}
 8015556:	b083      	sub	sp, #12
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	6039      	str	r1, [r7, #0]
 801555e:	4a1d      	ldr	r2, [pc, #116]	; (80155d4 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	601a      	str	r2, [r3, #0]
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	330c      	adds	r3, #12
 8015568:	4618      	mov	r0, r3
 801556a:	f7ff fbe3 	bl	8014d34 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015574:	331c      	adds	r3, #28
 8015576:	4618      	mov	r0, r3
 8015578:	f7ff ffd8 	bl	801552c <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015582:	2201      	movs	r2, #1
 8015584:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801558c:	3304      	adds	r3, #4
 801558e:	2201      	movs	r2, #1
 8015590:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2201      	movs	r2, #1
 8015596:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801559e:	3308      	adds	r3, #8
 80155a0:	2200      	movs	r2, #0
 80155a2:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	683a      	ldr	r2, [r7, #0]
 80155a8:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80155aa:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80155ae:	490a      	ldr	r1, [pc, #40]	; (80155d8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80155b0:	2004      	movs	r0, #4
 80155b2:	f7f3 fb17 	bl	8008be4 <_ZnwjPKci>
 80155b6:	4604      	mov	r4, r0
 80155b8:	4620      	mov	r0, r4
 80155ba:	f7f5 fbe7 	bl	800ad8c <_ZN11SimpleMutexC1Ev>
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80155c4:	330c      	adds	r3, #12
 80155c6:	601c      	str	r4, [r3, #0]
}
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	4618      	mov	r0, r3
 80155cc:	370c      	adds	r7, #12
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd90      	pop	{r4, r7, pc}
 80155d2:	bf00      	nop
 80155d4:	080267f8 	.word	0x080267f8
 80155d8:	080242f4 	.word	0x080242f4

080155dc <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 80155dc:	b590      	push	{r4, r7, lr}
 80155de:	b083      	sub	sp, #12
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
 80155e4:	4a0e      	ldr	r2, [pc, #56]	; (8015620 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80155f0:	330c      	adds	r3, #12
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d00d      	beq.n	8015614 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80155fe:	330c      	adds	r3, #12
 8015600:	681c      	ldr	r4, [r3, #0]
 8015602:	2c00      	cmp	r4, #0
 8015604:	d006      	beq.n	8015614 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8015606:	4620      	mov	r0, r4
 8015608:	f7f5 fbd2 	bl	800adb0 <_ZN11SimpleMutexD1Ev>
 801560c:	2104      	movs	r1, #4
 801560e:	4620      	mov	r0, r4
 8015610:	f7f3 fafc 	bl	8008c0c <_ZdlPvj>
    }
}
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	4618      	mov	r0, r3
 8015618:	370c      	adds	r7, #12
 801561a:	46bd      	mov	sp, r7
 801561c:	bd90      	pop	{r4, r7, pc}
 801561e:	bf00      	nop
 8015620:	080267f8 	.word	0x080267f8

08015624 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8015624:	b580      	push	{r7, lr}
 8015626:	b082      	sub	sp, #8
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
}
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f7ff ffd5 	bl	80155dc <_ZN18MemoryLeakDetectorD1Ev>
 8015632:	f241 1150 	movw	r1, #4432	; 0x1150
 8015636:	6878      	ldr	r0, [r7, #4]
 8015638:	f7f3 fae8 	bl	8008c0c <_ZdlPvj>
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	4618      	mov	r0, r3
 8015640:	3708      	adds	r7, #8
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}

08015646 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8015646:	b580      	push	{r7, lr}
 8015648:	b082      	sub	sp, #8
 801564a:	af00      	add	r7, sp, #0
 801564c:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	330c      	adds	r3, #12
 8015652:	4618      	mov	r0, r3
 8015654:	f7ff fd72 	bl	801513c <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2203      	movs	r2, #3
 801565c:	721a      	strb	r2, [r3, #8]
}
 801565e:	bf00      	nop
 8015660:	3708      	adds	r7, #8
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}

08015666 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8015666:	b480      	push	{r7}
 8015668:	b083      	sub	sp, #12
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2202      	movs	r2, #2
 8015672:	721a      	strb	r2, [r3, #8]
}
 8015674:	bf00      	nop
 8015676:	370c      	adds	r7, #12
 8015678:	46bd      	mov	sp, r7
 801567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567e:	4770      	bx	lr

08015680 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8015680:	b480      	push	{r7}
 8015682:	b083      	sub	sp, #12
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	2202      	movs	r2, #2
 801568c:	721a      	strb	r2, [r3, #8]
}
 801568e:	bf00      	nop
 8015690:	370c      	adds	r7, #12
 8015692:	46bd      	mov	sp, r7
 8015694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015698:	4770      	bx	lr

0801569a <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 801569a:	b480      	push	{r7}
 801569c:	b083      	sub	sp, #12
 801569e:	af00      	add	r7, sp, #0
 80156a0:	6078      	str	r0, [r7, #4]
    return mutex_;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80156a8:	330c      	adds	r3, #12
 80156aa:	681b      	ldr	r3, [r3, #0]
}
 80156ac:	4618      	mov	r0, r3
 80156ae:	370c      	adds	r7, #12
 80156b0:	46bd      	mov	sp, r7
 80156b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b6:	4770      	bx	lr

080156b8 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80156b8:	b480      	push	{r7}
 80156ba:	b083      	sub	sp, #12
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f023 0303 	bic.w	r3, r3, #3
 80156c6:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 80156c8:	4618      	mov	r0, r3
 80156ca:	370c      	adds	r7, #12
 80156cc:	46bd      	mov	sp, r7
 80156ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d2:	4770      	bx	lr

080156d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b082      	sub	sp, #8
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	3303      	adds	r3, #3
 80156e2:	4618      	mov	r0, r3
 80156e4:	f7ff ffe8 	bl	80156b8 <_ZL31calculateVoidPointerAlignedSizej>
 80156e8:	4603      	mov	r3, r0
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	3708      	adds	r7, #8
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}

080156f2 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 80156f2:	b580      	push	{r7, lr}
 80156f4:	b084      	sub	sp, #16
 80156f6:	af00      	add	r7, sp, #0
 80156f8:	60f8      	str	r0, [r7, #12]
 80156fa:	60b9      	str	r1, [r7, #8]
 80156fc:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 80156fe:	6879      	ldr	r1, [r7, #4]
 8015700:	68f8      	ldr	r0, [r7, #12]
 8015702:	f7ff ffe7 	bl	80156d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015706:	4602      	mov	r2, r0
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	4413      	add	r3, r2
}
 801570c:	4618      	mov	r0, r3
 801570e:	3710      	adds	r7, #16
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}

08015714 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b08a      	sub	sp, #40	; 0x28
 8015718:	af06      	add	r7, sp, #24
 801571a:	60f8      	str	r0, [r7, #12]
 801571c:	60b9      	str	r1, [r7, #8]
 801571e:	607a      	str	r2, [r7, #4]
 8015720:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015728:	3304      	adds	r3, #4
 801572a:	681a      	ldr	r2, [r3, #0]
 801572c:	1c51      	adds	r1, r2, #1
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015734:	3304      	adds	r3, #4
 8015736:	6019      	str	r1, [r3, #0]
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	7a19      	ldrb	r1, [r3, #8]
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015742:	3308      	adds	r3, #8
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	6a38      	ldr	r0, [r7, #32]
 8015748:	9004      	str	r0, [sp, #16]
 801574a:	69f8      	ldr	r0, [r7, #28]
 801574c:	9003      	str	r0, [sp, #12]
 801574e:	9302      	str	r3, [sp, #8]
 8015750:	9101      	str	r1, [sp, #4]
 8015752:	69bb      	ldr	r3, [r7, #24]
 8015754:	9300      	str	r3, [sp, #0]
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	6879      	ldr	r1, [r7, #4]
 801575a:	68b8      	ldr	r0, [r7, #8]
 801575c:	f7ff fcfb 	bl	8015156 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	689a      	ldr	r2, [r3, #8]
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	4413      	add	r3, r2
 801576a:	4619      	mov	r1, r3
 801576c:	68f8      	ldr	r0, [r7, #12]
 801576e:	f000 f861 	bl	8015834 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015778:	331c      	adds	r3, #28
 801577a:	68b9      	ldr	r1, [r7, #8]
 801577c:	4618      	mov	r0, r3
 801577e:	f7ff fe11 	bl	80153a4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8015782:	bf00      	nop
 8015784:	3710      	adds	r7, #16
 8015786:	46bd      	mov	sp, r7
 8015788:	bd80      	pop	{r7, pc}

0801578a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801578a:	b580      	push	{r7, lr}
 801578c:	b08a      	sub	sp, #40	; 0x28
 801578e:	af04      	add	r7, sp, #16
 8015790:	60f8      	str	r0, [r7, #12]
 8015792:	60b9      	str	r1, [r7, #8]
 8015794:	607a      	str	r2, [r7, #4]
 8015796:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8015798:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801579c:	9302      	str	r3, [sp, #8]
 801579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157a0:	9301      	str	r3, [sp, #4]
 80157a2:	6a3b      	ldr	r3, [r7, #32]
 80157a4:	9300      	str	r3, [sp, #0]
 80157a6:	683b      	ldr	r3, [r7, #0]
 80157a8:	687a      	ldr	r2, [r7, #4]
 80157aa:	68b9      	ldr	r1, [r7, #8]
 80157ac:	68f8      	ldr	r0, [r7, #12]
 80157ae:	f000 f96f 	bl	8015a90 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80157b2:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d101      	bne.n	80157be <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80157ba:	2300      	movs	r3, #0
 80157bc:	e017      	b.n	80157ee <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80157be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80157c2:	9300      	str	r3, [sp, #0]
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	683a      	ldr	r2, [r7, #0]
 80157c8:	68b9      	ldr	r1, [r7, #8]
 80157ca:	68f8      	ldr	r0, [r7, #12]
 80157cc:	f000 f98a 	bl	8015ae4 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80157d0:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 80157d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d4:	9302      	str	r3, [sp, #8]
 80157d6:	6a3b      	ldr	r3, [r7, #32]
 80157d8:	9301      	str	r3, [sp, #4]
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	9300      	str	r3, [sp, #0]
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	697a      	ldr	r2, [r7, #20]
 80157e2:	6939      	ldr	r1, [r7, #16]
 80157e4:	68f8      	ldr	r0, [r7, #12]
 80157e6:	f7ff ff95 	bl	8015714 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	689b      	ldr	r3, [r3, #8]
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	3718      	adds	r7, #24
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}
	...

080157f8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b084      	sub	sp, #16
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
 8015800:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015808:	331c      	adds	r3, #28
 801580a:	6839      	ldr	r1, [r7, #0]
 801580c:	4618      	mov	r0, r3
 801580e:	f7ff fdf6 	bl	80153fe <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8015812:	60f8      	str	r0, [r7, #12]
  if (node)
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d006      	beq.n	8015828 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 801581a:	4b05      	ldr	r3, [pc, #20]	; (8015830 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	68fa      	ldr	r2, [r7, #12]
 8015820:	6812      	ldr	r2, [r2, #0]
 8015822:	21cd      	movs	r1, #205	; 0xcd
 8015824:	6838      	ldr	r0, [r7, #0]
 8015826:	4798      	blx	r3
#endif
}
 8015828:	bf00      	nop
 801582a:	3710      	adds	r7, #16
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}
 8015830:	200000d8 	.word	0x200000d8

08015834 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8015834:	b480      	push	{r7}
 8015836:	b085      	sub	sp, #20
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
 801583c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801583e:	2300      	movs	r3, #0
 8015840:	60fb      	str	r3, [r7, #12]
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	2b02      	cmp	r3, #2
 8015846:	d812      	bhi.n	801586e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8015848:	68f9      	ldr	r1, [r7, #12]
 801584a:	4b0c      	ldr	r3, [pc, #48]	; (801587c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 801584c:	fba3 2301 	umull	r2, r3, r3, r1
 8015850:	085a      	lsrs	r2, r3, #1
 8015852:	4613      	mov	r3, r2
 8015854:	005b      	lsls	r3, r3, #1
 8015856:	4413      	add	r3, r2
 8015858:	1aca      	subs	r2, r1, r3
 801585a:	6839      	ldr	r1, [r7, #0]
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	440b      	add	r3, r1
 8015860:	4907      	ldr	r1, [pc, #28]	; (8015880 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8015862:	5c8a      	ldrb	r2, [r1, r2]
 8015864:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	3301      	adds	r3, #1
 801586a:	60fb      	str	r3, [r7, #12]
 801586c:	e7e9      	b.n	8015842 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 801586e:	bf00      	nop
 8015870:	3714      	adds	r7, #20
 8015872:	46bd      	mov	sp, r7
 8015874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015878:	4770      	bx	lr
 801587a:	bf00      	nop
 801587c:	aaaaaaab 	.word	0xaaaaaaab
 8015880:	080267ec 	.word	0x080267ec

08015884 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8015884:	b480      	push	{r7}
 8015886:	b085      	sub	sp, #20
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801588e:	2300      	movs	r3, #0
 8015890:	60fb      	str	r3, [r7, #12]
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	2b02      	cmp	r3, #2
 8015896:	d816      	bhi.n	80158c6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8015898:	683a      	ldr	r2, [r7, #0]
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	4413      	add	r3, r2
 801589e:	7818      	ldrb	r0, [r3, #0]
 80158a0:	68f9      	ldr	r1, [r7, #12]
 80158a2:	4b0c      	ldr	r3, [pc, #48]	; (80158d4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80158a4:	fba3 2301 	umull	r2, r3, r3, r1
 80158a8:	085a      	lsrs	r2, r3, #1
 80158aa:	4613      	mov	r3, r2
 80158ac:	005b      	lsls	r3, r3, #1
 80158ae:	4413      	add	r3, r2
 80158b0:	1aca      	subs	r2, r1, r3
 80158b2:	4b09      	ldr	r3, [pc, #36]	; (80158d8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 80158b4:	5c9b      	ldrb	r3, [r3, r2]
 80158b6:	4298      	cmp	r0, r3
 80158b8:	d001      	beq.n	80158be <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 80158ba:	2300      	movs	r3, #0
 80158bc:	e004      	b.n	80158c8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	3301      	adds	r3, #1
 80158c2:	60fb      	str	r3, [r7, #12]
 80158c4:	e7e5      	b.n	8015892 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 80158c6:	2301      	movs	r3, #1
}
 80158c8:	4618      	mov	r0, r3
 80158ca:	3714      	adds	r7, #20
 80158cc:	46bd      	mov	sp, r7
 80158ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d2:	4770      	bx	lr
 80158d4:	aaaaaaab 	.word	0xaaaaaaab
 80158d8:	080267ec 	.word	0x080267ec

080158dc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	60f8      	str	r0, [r7, #12]
 80158e4:	60b9      	str	r1, [r7, #8]
 80158e6:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 80158e8:	68ba      	ldr	r2, [r7, #8]
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	429a      	cmp	r2, r3
 80158ee:	d101      	bne.n	80158f4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 80158f0:	2301      	movs	r3, #1
 80158f2:	e013      	b.n	801591c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	f083 0301 	eor.w	r3, r3, #1
 8015900:	b2db      	uxtb	r3, r3
 8015902:	2b00      	cmp	r3, #0
 8015904:	d001      	beq.n	801590a <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8015906:	2301      	movs	r3, #1
 8015908:	e008      	b.n	801591c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	331c      	adds	r3, #28
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	68b9      	ldr	r1, [r7, #8]
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	4798      	blx	r3
 8015918:	4603      	mov	r3, r0
 801591a:	bf00      	nop
}
 801591c:	4618      	mov	r0, r3
 801591e:	3710      	adds	r7, #16
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8015924:	b590      	push	{r4, r7, lr}
 8015926:	b087      	sub	sp, #28
 8015928:	af02      	add	r7, sp, #8
 801592a:	60f8      	str	r0, [r7, #12]
 801592c:	60b9      	str	r1, [r7, #8]
 801592e:	607a      	str	r2, [r7, #4]
 8015930:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	695a      	ldr	r2, [r3, #20]
 8015936:	68bb      	ldr	r3, [r7, #8]
 8015938:	695b      	ldr	r3, [r3, #20]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	3328      	adds	r3, #40	; 0x28
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	4610      	mov	r0, r2
 8015942:	4798      	blx	r3
 8015944:	4604      	mov	r4, r0
 8015946:	6a3b      	ldr	r3, [r7, #32]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	3328      	adds	r3, #40	; 0x28
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	6a38      	ldr	r0, [r7, #32]
 8015950:	4798      	blx	r3
 8015952:	4603      	mov	r3, r0
 8015954:	461a      	mov	r2, r3
 8015956:	4621      	mov	r1, r4
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	f7ff ffbf 	bl	80158dc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 801595e:	4603      	mov	r3, r0
 8015960:	f083 0301 	eor.w	r3, r3, #1
 8015964:	b2db      	uxtb	r3, r3
 8015966:	2b00      	cmp	r3, #0
 8015968:	d014      	beq.n	8015994 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	f103 040c 	add.w	r4, r3, #12
 8015970:	6a3b      	ldr	r3, [r7, #32]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	3328      	adds	r3, #40	; 0x28
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	6a38      	ldr	r0, [r7, #32]
 801597a:	4798      	blx	r3
 801597c:	4602      	mov	r2, r0
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	9301      	str	r3, [sp, #4]
 8015984:	9200      	str	r2, [sp, #0]
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	687a      	ldr	r2, [r7, #4]
 801598a:	68b9      	ldr	r1, [r7, #8]
 801598c:	4620      	mov	r0, r4
 801598e:	f7ff fb4d 	bl	801502c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8015992:	e02e      	b.n	80159f2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	689a      	ldr	r2, [r3, #8]
 8015998:	68bb      	ldr	r3, [r7, #8]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	4413      	add	r3, r2
 801599e:	4619      	mov	r1, r3
 80159a0:	68f8      	ldr	r0, [r7, #12]
 80159a2:	f7ff ff6f 	bl	8015884 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 80159a6:	4603      	mov	r3, r0
 80159a8:	f083 0301 	eor.w	r3, r3, #1
 80159ac:	b2db      	uxtb	r3, r3
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d014      	beq.n	80159dc <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	f103 040c 	add.w	r4, r3, #12
 80159b8:	6a3b      	ldr	r3, [r7, #32]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	3328      	adds	r3, #40	; 0x28
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	6a38      	ldr	r0, [r7, #32]
 80159c2:	4798      	blx	r3
 80159c4:	4602      	mov	r2, r0
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	9301      	str	r3, [sp, #4]
 80159cc:	9200      	str	r2, [sp, #0]
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	687a      	ldr	r2, [r7, #4]
 80159d2:	68b9      	ldr	r1, [r7, #8]
 80159d4:	4620      	mov	r0, r4
 80159d6:	f7ff fb4f 	bl	8015078 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 80159da:	e00a      	b.n	80159f2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 80159dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d006      	beq.n	80159f2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 80159e4:	6a3b      	ldr	r3, [r7, #32]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	3324      	adds	r3, #36	; 0x24
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	68b9      	ldr	r1, [r7, #8]
 80159ee:	6a38      	ldr	r0, [r7, #32]
 80159f0:	4798      	blx	r3
}
 80159f2:	bf00      	nop
 80159f4:	3714      	adds	r7, #20
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd90      	pop	{r4, r7, pc}
	...

080159fc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b086      	sub	sp, #24
 8015a00:	af02      	add	r7, sp, #8
 8015a02:	60f8      	str	r0, [r7, #12]
 8015a04:	60b9      	str	r1, [r7, #8]
 8015a06:	607a      	str	r2, [r7, #4]
 8015a08:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8015a0a:	4b08      	ldr	r3, [pc, #32]	; (8015a2c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8015a0c:	681a      	ldr	r2, [r3, #0]
 8015a0e:	78fb      	ldrb	r3, [r7, #3]
 8015a10:	9301      	str	r3, [sp, #4]
 8015a12:	2300      	movs	r3, #0
 8015a14:	9300      	str	r3, [sp, #0]
 8015a16:	4613      	mov	r3, r2
 8015a18:	687a      	ldr	r2, [r7, #4]
 8015a1a:	68b9      	ldr	r1, [r7, #8]
 8015a1c:	68f8      	ldr	r0, [r7, #12]
 8015a1e:	f000 f87f 	bl	8015b20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8015a22:	4603      	mov	r3, r0
}
 8015a24:	4618      	mov	r0, r3
 8015a26:	3710      	adds	r7, #16
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}
 8015a2c:	20000100 	.word	0x20000100

08015a30 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015a30:	b590      	push	{r4, r7, lr}
 8015a32:	b085      	sub	sp, #20
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	60f8      	str	r0, [r7, #12]
 8015a38:	60b9      	str	r1, [r7, #8]
 8015a3a:	607a      	str	r2, [r7, #4]
 8015a3c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8015a3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d00e      	beq.n	8015a64 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	3308      	adds	r3, #8
 8015a4c:	681c      	ldr	r4, [r3, #0]
 8015a4e:	6879      	ldr	r1, [r7, #4]
 8015a50:	68f8      	ldr	r0, [r7, #12]
 8015a52:	f7ff fe3f 	bl	80156d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015a56:	4601      	mov	r1, r0
 8015a58:	6a3b      	ldr	r3, [r7, #32]
 8015a5a:	683a      	ldr	r2, [r7, #0]
 8015a5c:	68b8      	ldr	r0, [r7, #8]
 8015a5e:	47a0      	blx	r4
 8015a60:	4603      	mov	r3, r0
 8015a62:	e010      	b.n	8015a86 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	3308      	adds	r3, #8
 8015a6a:	681c      	ldr	r4, [r3, #0]
 8015a6c:	6879      	ldr	r1, [r7, #4]
 8015a6e:	68f8      	ldr	r0, [r7, #12]
 8015a70:	f7ff fe30 	bl	80156d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015a74:	4603      	mov	r3, r0
 8015a76:	f103 0120 	add.w	r1, r3, #32
 8015a7a:	6a3b      	ldr	r3, [r7, #32]
 8015a7c:	683a      	ldr	r2, [r7, #0]
 8015a7e:	68b8      	ldr	r0, [r7, #8]
 8015a80:	47a0      	blx	r4
 8015a82:	4603      	mov	r3, r0
 8015a84:	bf00      	nop
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3714      	adds	r7, #20
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd90      	pop	{r4, r7, pc}
	...

08015a90 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8015a90:	b590      	push	{r4, r7, lr}
 8015a92:	b085      	sub	sp, #20
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	60f8      	str	r0, [r7, #12]
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	607a      	str	r2, [r7, #4]
 8015a9c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8015a9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d00b      	beq.n	8015abe <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8015aa6:	4b0e      	ldr	r3, [pc, #56]	; (8015ae0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8015aa8:	681c      	ldr	r4, [r3, #0]
 8015aaa:	6839      	ldr	r1, [r7, #0]
 8015aac:	68f8      	ldr	r0, [r7, #12]
 8015aae:	f7ff fe11 	bl	80156d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	47a0      	blx	r4
 8015aba:	4603      	mov	r3, r0
 8015abc:	e00c      	b.n	8015ad8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8015abe:	4b08      	ldr	r3, [pc, #32]	; (8015ae0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8015ac0:	681c      	ldr	r4, [r3, #0]
 8015ac2:	6839      	ldr	r1, [r7, #0]
 8015ac4:	68f8      	ldr	r0, [r7, #12]
 8015ac6:	f7ff fe05 	bl	80156d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015aca:	4603      	mov	r3, r0
 8015acc:	3320      	adds	r3, #32
 8015ace:	4619      	mov	r1, r3
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	47a0      	blx	r4
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	bf00      	nop
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3714      	adds	r7, #20
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd90      	pop	{r4, r7, pc}
 8015ae0:	200000cc 	.word	0x200000cc

08015ae4 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b084      	sub	sp, #16
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	60f8      	str	r0, [r7, #12]
 8015aec:	60b9      	str	r1, [r7, #8]
 8015aee:	607a      	str	r2, [r7, #4]
 8015af0:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8015af2:	7e3b      	ldrb	r3, [r7, #24]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d008      	beq.n	8015b0a <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	3320      	adds	r3, #32
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	2120      	movs	r1, #32
 8015b02:	68b8      	ldr	r0, [r7, #8]
 8015b04:	4798      	blx	r3
 8015b06:	4603      	mov	r3, r0
 8015b08:	e006      	b.n	8015b18 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	6839      	ldr	r1, [r7, #0]
 8015b0e:	68f8      	ldr	r0, [r7, #12]
 8015b10:	f7ff fdef 	bl	80156f2 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8015b14:	4603      	mov	r3, r0
 8015b16:	bf00      	nop
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3710      	adds	r7, #16
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}

08015b20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b08a      	sub	sp, #40	; 0x28
 8015b24:	af04      	add	r7, sp, #16
 8015b26:	60f8      	str	r0, [r7, #12]
 8015b28:	60b9      	str	r1, [r7, #8]
 8015b2a:	607a      	str	r2, [r7, #4]
 8015b2c:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8015b2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015b32:	9301      	str	r3, [sp, #4]
 8015b34:	6a3b      	ldr	r3, [r7, #32]
 8015b36:	9300      	str	r3, [sp, #0]
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	687a      	ldr	r2, [r7, #4]
 8015b3c:	68b9      	ldr	r1, [r7, #8]
 8015b3e:	68f8      	ldr	r0, [r7, #12]
 8015b40:	f7ff ff76 	bl	8015a30 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8015b44:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8015b46:	697b      	ldr	r3, [r7, #20]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d101      	bne.n	8015b50 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	e017      	b.n	8015b80 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8015b50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015b54:	9300      	str	r3, [sp, #0]
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	687a      	ldr	r2, [r7, #4]
 8015b5a:	68b9      	ldr	r1, [r7, #8]
 8015b5c:	68f8      	ldr	r0, [r7, #12]
 8015b5e:	f7ff ffc1 	bl	8015ae4 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8015b62:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8015b64:	6a3b      	ldr	r3, [r7, #32]
 8015b66:	9302      	str	r3, [sp, #8]
 8015b68:	683b      	ldr	r3, [r7, #0]
 8015b6a:	9301      	str	r3, [sp, #4]
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	9300      	str	r3, [sp, #0]
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	697a      	ldr	r2, [r7, #20]
 8015b74:	6939      	ldr	r1, [r7, #16]
 8015b76:	68f8      	ldr	r0, [r7, #12]
 8015b78:	f7ff fdcc 	bl	8015714 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8015b7c:	693b      	ldr	r3, [r7, #16]
 8015b7e:	689b      	ldr	r3, [r3, #8]
}
 8015b80:	4618      	mov	r0, r3
 8015b82:	3718      	adds	r7, #24
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}

08015b88 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015b88:	b590      	push	{r4, r7, lr}
 8015b8a:	b089      	sub	sp, #36	; 0x24
 8015b8c:	af02      	add	r7, sp, #8
 8015b8e:	60f8      	str	r0, [r7, #12]
 8015b90:	60b9      	str	r1, [r7, #8]
 8015b92:	607a      	str	r2, [r7, #4]
 8015b94:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d03a      	beq.n	8015c12 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ba2:	331c      	adds	r3, #28
 8015ba4:	6879      	ldr	r1, [r7, #4]
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f7ff fc13 	bl	80153d2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8015bac:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d10b      	bne.n	8015bcc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	f103 000c 	add.w	r0, r3, #12
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	685b      	ldr	r3, [r3, #4]
 8015bbe:	9300      	str	r3, [sp, #0]
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015bc4:	6839      	ldr	r1, [r7, #0]
 8015bc6:	f7ff fa0d 	bl	8014fe4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8015bca:	e023      	b.n	8015c14 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8015bcc:	68b8      	ldr	r0, [r7, #8]
 8015bce:	f7f8 ff95 	bl	800eafc <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	f083 0301 	eor.w	r3, r3, #1
 8015bd8:	b2db      	uxtb	r3, r3
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d01a      	beq.n	8015c14 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8015be4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015be8:	9301      	str	r3, [sp, #4]
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	9300      	str	r3, [sp, #0]
 8015bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bf0:	683a      	ldr	r2, [r7, #0]
 8015bf2:	6979      	ldr	r1, [r7, #20]
 8015bf4:	68f8      	ldr	r0, [r7, #12]
 8015bf6:	f7ff fe95 	bl	8015924 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8015bfa:	68bb      	ldr	r3, [r7, #8]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	330c      	adds	r3, #12
 8015c00:	681c      	ldr	r4, [r3, #0]
 8015c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c04:	9300      	str	r3, [sp, #0]
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	693a      	ldr	r2, [r7, #16]
 8015c0a:	6879      	ldr	r1, [r7, #4]
 8015c0c:	68b8      	ldr	r0, [r7, #8]
 8015c0e:	47a0      	blx	r4
 8015c10:	e000      	b.n	8015c14 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8015c12:	bf00      	nop
    }
}
 8015c14:	371c      	adds	r7, #28
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd90      	pop	{r4, r7, pc}
	...

08015c1c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b086      	sub	sp, #24
 8015c20:	af02      	add	r7, sp, #8
 8015c22:	60f8      	str	r0, [r7, #12]
 8015c24:	60b9      	str	r1, [r7, #8]
 8015c26:	607a      	str	r2, [r7, #4]
 8015c28:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8015c2a:	4b08      	ldr	r3, [pc, #32]	; (8015c4c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8015c2c:	681a      	ldr	r2, [r3, #0]
 8015c2e:	78fb      	ldrb	r3, [r7, #3]
 8015c30:	9301      	str	r3, [sp, #4]
 8015c32:	2300      	movs	r3, #0
 8015c34:	9300      	str	r3, [sp, #0]
 8015c36:	4613      	mov	r3, r2
 8015c38:	687a      	ldr	r2, [r7, #4]
 8015c3a:	68b9      	ldr	r1, [r7, #8]
 8015c3c:	68f8      	ldr	r0, [r7, #12]
 8015c3e:	f7ff ffa3 	bl	8015b88 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8015c42:	bf00      	nop
 8015c44:	3710      	adds	r7, #16
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	20000100 	.word	0x20000100

08015c50 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b08a      	sub	sp, #40	; 0x28
 8015c54:	af04      	add	r7, sp, #16
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	60b9      	str	r1, [r7, #8]
 8015c5a:	607a      	str	r2, [r7, #4]
 8015c5c:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d023      	beq.n	8015cac <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c6a:	331c      	adds	r3, #28
 8015c6c:	6879      	ldr	r1, [r7, #4]
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f7ff fbaf 	bl	80153d2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8015c74:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8015c76:	697b      	ldr	r3, [r7, #20]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d10c      	bne.n	8015c96 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	f103 000c 	add.w	r0, r3, #12
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	685b      	ldr	r3, [r3, #4]
 8015c86:	9300      	str	r3, [sp, #0]
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c8c:	6a39      	ldr	r1, [r7, #32]
 8015c8e:	f7ff f9a9 	bl	8014fe4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8015c92:	2300      	movs	r3, #0
 8015c94:	e019      	b.n	8015cca <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8015c96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015c9a:	9301      	str	r3, [sp, #4]
 8015c9c:	68bb      	ldr	r3, [r7, #8]
 8015c9e:	9300      	str	r3, [sp, #0]
 8015ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca2:	6a3a      	ldr	r2, [r7, #32]
 8015ca4:	6979      	ldr	r1, [r7, #20]
 8015ca6:	68f8      	ldr	r0, [r7, #12]
 8015ca8:	f7ff fe3c 	bl	8015924 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8015cac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015cb0:	9302      	str	r3, [sp, #8]
 8015cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb4:	9301      	str	r3, [sp, #4]
 8015cb6:	6a3b      	ldr	r3, [r7, #32]
 8015cb8:	9300      	str	r3, [sp, #0]
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	687a      	ldr	r2, [r7, #4]
 8015cbe:	68b9      	ldr	r1, [r7, #8]
 8015cc0:	68f8      	ldr	r0, [r7, #12]
 8015cc2:	f7ff fd62 	bl	801578a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	bf00      	nop
}
 8015cca:	4618      	mov	r0, r3
 8015ccc:	3718      	adds	r7, #24
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd80      	pop	{r7, pc}

08015cd2 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8015cd2:	b580      	push	{r7, lr}
 8015cd4:	b084      	sub	sp, #16
 8015cd6:	af00      	add	r7, sp, #0
 8015cd8:	6078      	str	r0, [r7, #4]
 8015cda:	460b      	mov	r3, r1
 8015cdc:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ce4:	331c      	adds	r3, #28
 8015ce6:	78fa      	ldrb	r2, [r7, #3]
 8015ce8:	4611      	mov	r1, r2
 8015cea:	4618      	mov	r0, r3
 8015cec:	f7ff fbc0 	bl	8015470 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8015cf0:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	330c      	adds	r3, #12
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f7ff f882 	bl	8014e00 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d010      	beq.n	8015d24 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	330c      	adds	r3, #12
 8015d06:	68f9      	ldr	r1, [r7, #12]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7ff f897 	bl	8014e3c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d14:	331c      	adds	r3, #28
 8015d16:	78fa      	ldrb	r2, [r7, #3]
 8015d18:	68f9      	ldr	r1, [r7, #12]
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7ff fbcb 	bl	80154b6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8015d20:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8015d22:	e7eb      	b.n	8015cfc <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	330c      	adds	r3, #12
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f7ff f8e7 	bl	8014efc <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8015d2e:	bf00      	nop
 8015d30:	3710      	adds	r7, #16
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}

08015d36 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8015d36:	b580      	push	{r7, lr}
 8015d38:	b082      	sub	sp, #8
 8015d3a:	af00      	add	r7, sp, #0
 8015d3c:	6078      	str	r0, [r7, #4]
 8015d3e:	460b      	mov	r3, r1
 8015d40:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8015d42:	78fb      	ldrb	r3, [r7, #3]
 8015d44:	4619      	mov	r1, r3
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f7ff ffc3 	bl	8015cd2 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	330c      	adds	r3, #12
 8015d50:	4618      	mov	r0, r3
 8015d52:	f7ff f9e5 	bl	8015120 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8015d56:	4603      	mov	r3, r0
}
 8015d58:	4618      	mov	r0, r3
 8015d5a:	3708      	adds	r7, #8
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}

08015d60 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b084      	sub	sp, #16
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d6e:	331c      	adds	r3, #28
 8015d70:	2103      	movs	r1, #3
 8015d72:	4618      	mov	r0, r3
 8015d74:	f7ff fb7c 	bl	8015470 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8015d78:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d011      	beq.n	8015da4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	7e1b      	ldrb	r3, [r3, #24]
 8015d84:	2b03      	cmp	r3, #3
 8015d86:	d102      	bne.n	8015d8e <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	2202      	movs	r2, #2
 8015d8c:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d94:	331c      	adds	r3, #28
 8015d96:	2203      	movs	r2, #3
 8015d98:	68f9      	ldr	r1, [r7, #12]
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7ff fb8b 	bl	80154b6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8015da0:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8015da2:	e7ea      	b.n	8015d7a <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8015da4:	bf00      	nop
 8015da6:	3710      	adds	r7, #16
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}

08015dac <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b082      	sub	sp, #8
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
 8015db4:	460b      	mov	r3, r1
 8015db6:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015dbe:	331c      	adds	r3, #28
 8015dc0:	78fa      	ldrb	r2, [r7, #3]
 8015dc2:	4611      	mov	r1, r2
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f7ff fb30 	bl	801542a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8015dca:	4603      	mov	r3, r0
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3708      	adds	r7, #8
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}

08015dd4 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b084      	sub	sp, #16
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	60f8      	str	r0, [r7, #12]
 8015ddc:	60b9      	str	r1, [r7, #8]
 8015dde:	607a      	str	r2, [r7, #4]
 8015de0:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	68b9      	ldr	r1, [r7, #8]
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7f5 fb13 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	3308      	adds	r3, #8
 8015df0:	6879      	ldr	r1, [r7, #4]
 8015df2:	4618      	mov	r0, r3
 8015df4:	f7f5 fb0d 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	683a      	ldr	r2, [r7, #0]
 8015dfc:	611a      	str	r2, [r3, #16]
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2200      	movs	r2, #0
 8015e02:	615a      	str	r2, [r3, #20]
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	4618      	mov	r0, r3
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}

08015e0e <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8015e0e:	b480      	push	{r7}
 8015e10:	b083      	sub	sp, #12
 8015e12:	af00      	add	r7, sp, #0
 8015e14:	6078      	str	r0, [r7, #4]
 8015e16:	6039      	str	r1, [r7, #0]
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	370c      	adds	r7, #12
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e24:	4770      	bx	lr

08015e26 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8015e26:	b480      	push	{r7}
 8015e28:	b083      	sub	sp, #12
 8015e2a:	af00      	add	r7, sp, #0
 8015e2c:	6078      	str	r0, [r7, #4]
 8015e2e:	6039      	str	r1, [r7, #0]
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	4618      	mov	r0, r3
 8015e34:	370c      	adds	r7, #12
 8015e36:	46bd      	mov	sp, r7
 8015e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3c:	4770      	bx	lr

08015e3e <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8015e3e:	b480      	push	{r7}
 8015e40:	b085      	sub	sp, #20
 8015e42:	af00      	add	r7, sp, #0
 8015e44:	60f8      	str	r0, [r7, #12]
 8015e46:	60b9      	str	r1, [r7, #8]
 8015e48:	4613      	mov	r3, r2
 8015e4a:	71fb      	strb	r3, [r7, #7]
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	4618      	mov	r0, r3
 8015e50:	3714      	adds	r7, #20
 8015e52:	46bd      	mov	sp, r7
 8015e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e58:	4770      	bx	lr

08015e5a <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8015e5a:	b480      	push	{r7}
 8015e5c:	b085      	sub	sp, #20
 8015e5e:	af00      	add	r7, sp, #0
 8015e60:	60f8      	str	r0, [r7, #12]
 8015e62:	60b9      	str	r1, [r7, #8]
 8015e64:	607a      	str	r2, [r7, #4]
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	4618      	mov	r0, r3
 8015e6a:	3714      	adds	r7, #20
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e72:	4770      	bx	lr

08015e74 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8015e74:	b480      	push	{r7}
 8015e76:	b085      	sub	sp, #20
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	60f8      	str	r0, [r7, #12]
 8015e7c:	60b9      	str	r1, [r7, #8]
 8015e7e:	607a      	str	r2, [r7, #4]
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	4618      	mov	r0, r3
 8015e84:	3714      	adds	r7, #20
 8015e86:	46bd      	mov	sp, r7
 8015e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8c:	4770      	bx	lr

08015e8e <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8015e8e:	b480      	push	{r7}
 8015e90:	b085      	sub	sp, #20
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	60f8      	str	r0, [r7, #12]
 8015e96:	60b9      	str	r1, [r7, #8]
 8015e98:	607a      	str	r2, [r7, #4]
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	3714      	adds	r7, #20
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea6:	4770      	bx	lr

08015ea8 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8015ea8:	b480      	push	{r7}
 8015eaa:	b085      	sub	sp, #20
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	60f8      	str	r0, [r7, #12]
 8015eb0:	60b9      	str	r1, [r7, #8]
 8015eb2:	607a      	str	r2, [r7, #4]
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3714      	adds	r7, #20
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec0:	4770      	bx	lr

08015ec2 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8015ec2:	b480      	push	{r7}
 8015ec4:	b085      	sub	sp, #20
 8015ec6:	af00      	add	r7, sp, #0
 8015ec8:	60f8      	str	r0, [r7, #12]
 8015eca:	60b9      	str	r1, [r7, #8]
 8015ecc:	4639      	mov	r1, r7
 8015ece:	e881 000c 	stmia.w	r1, {r2, r3}
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3714      	adds	r7, #20
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ede:	4770      	bx	lr

08015ee0 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8015ee0:	b480      	push	{r7}
 8015ee2:	b085      	sub	sp, #20
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	4639      	mov	r1, r7
 8015eec:	e881 000c 	stmia.w	r1, {r2, r3}
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	3714      	adds	r7, #20
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efc:	4770      	bx	lr

08015efe <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8015efe:	b480      	push	{r7}
 8015f00:	b085      	sub	sp, #20
 8015f02:	af00      	add	r7, sp, #0
 8015f04:	60f8      	str	r0, [r7, #12]
 8015f06:	60b9      	str	r1, [r7, #8]
 8015f08:	ed87 0b00 	vstr	d0, [r7]
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	4618      	mov	r0, r3
 8015f10:	3714      	adds	r7, #20
 8015f12:	46bd      	mov	sp, r7
 8015f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f18:	4770      	bx	lr

08015f1a <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8015f1a:	b480      	push	{r7}
 8015f1c:	b085      	sub	sp, #20
 8015f1e:	af00      	add	r7, sp, #0
 8015f20:	60f8      	str	r0, [r7, #12]
 8015f22:	60b9      	str	r1, [r7, #8]
 8015f24:	607a      	str	r2, [r7, #4]
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3714      	adds	r7, #20
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f32:	4770      	bx	lr

08015f34 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8015f34:	b480      	push	{r7}
 8015f36:	b085      	sub	sp, #20
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	60f8      	str	r0, [r7, #12]
 8015f3c:	60b9      	str	r1, [r7, #8]
 8015f3e:	607a      	str	r2, [r7, #4]
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	4618      	mov	r0, r3
 8015f44:	3714      	adds	r7, #20
 8015f46:	46bd      	mov	sp, r7
 8015f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4c:	4770      	bx	lr

08015f4e <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8015f4e:	b480      	push	{r7}
 8015f50:	b085      	sub	sp, #20
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	60f8      	str	r0, [r7, #12]
 8015f56:	60b9      	str	r1, [r7, #8]
 8015f58:	607a      	str	r2, [r7, #4]
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	3714      	adds	r7, #20
 8015f60:	46bd      	mov	sp, r7
 8015f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f66:	4770      	bx	lr

08015f68 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8015f68:	b480      	push	{r7}
 8015f6a:	b085      	sub	sp, #20
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
 8015f72:	607a      	str	r2, [r7, #4]
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	4618      	mov	r0, r3
 8015f78:	3714      	adds	r7, #20
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f80:	4770      	bx	lr

08015f82 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8015f82:	b480      	push	{r7}
 8015f84:	b085      	sub	sp, #20
 8015f86:	af00      	add	r7, sp, #0
 8015f88:	60f8      	str	r0, [r7, #12]
 8015f8a:	60b9      	str	r1, [r7, #8]
 8015f8c:	607a      	str	r2, [r7, #4]
 8015f8e:	603b      	str	r3, [r7, #0]
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	4618      	mov	r0, r3
 8015f94:	3714      	adds	r7, #20
 8015f96:	46bd      	mov	sp, r7
 8015f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9c:	4770      	bx	lr

08015f9e <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8015f9e:	b480      	push	{r7}
 8015fa0:	b085      	sub	sp, #20
 8015fa2:	af00      	add	r7, sp, #0
 8015fa4:	60f8      	str	r0, [r7, #12]
 8015fa6:	60b9      	str	r1, [r7, #8]
 8015fa8:	607a      	str	r2, [r7, #4]
 8015faa:	603b      	str	r3, [r7, #0]
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3714      	adds	r7, #20
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb8:	4770      	bx	lr

08015fba <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8015fba:	b480      	push	{r7}
 8015fbc:	b085      	sub	sp, #20
 8015fbe:	af00      	add	r7, sp, #0
 8015fc0:	60f8      	str	r0, [r7, #12]
 8015fc2:	60b9      	str	r1, [r7, #8]
 8015fc4:	607a      	str	r2, [r7, #4]
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3714      	adds	r7, #20
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd2:	4770      	bx	lr

08015fd4 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8015fd4:	b480      	push	{r7}
 8015fd6:	b085      	sub	sp, #20
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	60f8      	str	r0, [r7, #12]
 8015fdc:	60b9      	str	r1, [r7, #8]
 8015fde:	607a      	str	r2, [r7, #4]
 8015fe0:	603b      	str	r3, [r7, #0]
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3714      	adds	r7, #20
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr

08015ff0 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8015ff0:	b480      	push	{r7}
 8015ff2:	b083      	sub	sp, #12
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	370c      	adds	r7, #12
 8015ffe:	46bd      	mov	sp, r7
 8016000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016004:	4770      	bx	lr
	...

08016008 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8016008:	b580      	push	{r7, lr}
 801600a:	b084      	sub	sp, #16
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
 8016010:	6039      	str	r1, [r7, #0]
 8016012:	f107 0308 	add.w	r3, r7, #8
 8016016:	4909      	ldr	r1, [pc, #36]	; (801603c <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8016018:	4618      	mov	r0, r3
 801601a:	f7f5 f9a6 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801601e:	f107 0308 	add.w	r3, r7, #8
 8016022:	4619      	mov	r1, r3
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f005 fec5 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801602a:	f107 0308 	add.w	r3, r7, #8
 801602e:	4618      	mov	r0, r3
 8016030:	f7f5 fd53 	bl	800bada <_ZN12SimpleStringD1Ev>
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	3710      	adds	r7, #16
 8016038:	46bd      	mov	sp, r7
 801603a:	bd80      	pop	{r7, pc}
 801603c:	08024314 	.word	0x08024314

08016040 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8016040:	b480      	push	{r7}
 8016042:	b083      	sub	sp, #12
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
 8016048:	460b      	mov	r3, r1
 801604a:	70fb      	strb	r3, [r7, #3]
 801604c:	78fb      	ldrb	r3, [r7, #3]
 801604e:	4618      	mov	r0, r3
 8016050:	370c      	adds	r7, #12
 8016052:	46bd      	mov	sp, r7
 8016054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016058:	4770      	bx	lr

0801605a <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 801605a:	b480      	push	{r7}
 801605c:	b083      	sub	sp, #12
 801605e:	af00      	add	r7, sp, #0
 8016060:	6078      	str	r0, [r7, #4]
 8016062:	2300      	movs	r3, #0
 8016064:	4618      	mov	r0, r3
 8016066:	370c      	adds	r7, #12
 8016068:	46bd      	mov	sp, r7
 801606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606e:	4770      	bx	lr

08016070 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8016070:	b480      	push	{r7}
 8016072:	b083      	sub	sp, #12
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
 8016078:	2300      	movs	r3, #0
 801607a:	4618      	mov	r0, r3
 801607c:	370c      	adds	r7, #12
 801607e:	46bd      	mov	sp, r7
 8016080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016084:	4770      	bx	lr

08016086 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8016086:	b480      	push	{r7}
 8016088:	b083      	sub	sp, #12
 801608a:	af00      	add	r7, sp, #0
 801608c:	6078      	str	r0, [r7, #4]
 801608e:	6039      	str	r1, [r7, #0]
 8016090:	683b      	ldr	r3, [r7, #0]
 8016092:	4618      	mov	r0, r3
 8016094:	370c      	adds	r7, #12
 8016096:	46bd      	mov	sp, r7
 8016098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609c:	4770      	bx	lr

0801609e <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 801609e:	b480      	push	{r7}
 80160a0:	b083      	sub	sp, #12
 80160a2:	af00      	add	r7, sp, #0
 80160a4:	6078      	str	r0, [r7, #4]
 80160a6:	2300      	movs	r3, #0
 80160a8:	4618      	mov	r0, r3
 80160aa:	370c      	adds	r7, #12
 80160ac:	46bd      	mov	sp, r7
 80160ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b2:	4770      	bx	lr

080160b4 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 80160b4:	b480      	push	{r7}
 80160b6:	b083      	sub	sp, #12
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
 80160bc:	6039      	str	r1, [r7, #0]
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	4618      	mov	r0, r3
 80160c2:	370c      	adds	r7, #12
 80160c4:	46bd      	mov	sp, r7
 80160c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ca:	4770      	bx	lr

080160cc <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 80160cc:	b480      	push	{r7}
 80160ce:	b083      	sub	sp, #12
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	2300      	movs	r3, #0
 80160d6:	4618      	mov	r0, r3
 80160d8:	370c      	adds	r7, #12
 80160da:	46bd      	mov	sp, r7
 80160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e0:	4770      	bx	lr

080160e2 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 80160e2:	b480      	push	{r7}
 80160e4:	b083      	sub	sp, #12
 80160e6:	af00      	add	r7, sp, #0
 80160e8:	6078      	str	r0, [r7, #4]
 80160ea:	6039      	str	r1, [r7, #0]
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	4618      	mov	r0, r3
 80160f0:	370c      	adds	r7, #12
 80160f2:	46bd      	mov	sp, r7
 80160f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f8:	4770      	bx	lr

080160fa <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 80160fa:	b580      	push	{r7, lr}
 80160fc:	b082      	sub	sp, #8
 80160fe:	af00      	add	r7, sp, #0
 8016100:	6078      	str	r0, [r7, #4]
 8016102:	6039      	str	r1, [r7, #0]
 8016104:	2100      	movs	r1, #0
 8016106:	6878      	ldr	r0, [r7, #4]
 8016108:	f7f3 f972 	bl	80093f0 <_ZN18cpputest_ulonglongC1Ei>
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	3708      	adds	r7, #8
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}

08016114 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8016114:	b480      	push	{r7}
 8016116:	b085      	sub	sp, #20
 8016118:	af00      	add	r7, sp, #0
 801611a:	60f8      	str	r0, [r7, #12]
 801611c:	60b9      	str	r1, [r7, #8]
 801611e:	4639      	mov	r1, r7
 8016120:	e881 000c 	stmia.w	r1, {r2, r3}
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	461a      	mov	r2, r3
 8016128:	463b      	mov	r3, r7
 801612a:	cb03      	ldmia	r3!, {r0, r1}
 801612c:	6010      	str	r0, [r2, #0]
 801612e:	6051      	str	r1, [r2, #4]
 8016130:	68f8      	ldr	r0, [r7, #12]
 8016132:	3714      	adds	r7, #20
 8016134:	46bd      	mov	sp, r7
 8016136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613a:	4770      	bx	lr

0801613c <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 801613c:	b580      	push	{r7, lr}
 801613e:	b082      	sub	sp, #8
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
 8016144:	6039      	str	r1, [r7, #0]
 8016146:	2100      	movs	r1, #0
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	f7f3 f945 	bl	80093d8 <_ZN17cpputest_longlongC1Ei>
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	3708      	adds	r7, #8
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}

08016156 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8016156:	b480      	push	{r7}
 8016158:	b085      	sub	sp, #20
 801615a:	af00      	add	r7, sp, #0
 801615c:	60f8      	str	r0, [r7, #12]
 801615e:	60b9      	str	r1, [r7, #8]
 8016160:	4639      	mov	r1, r7
 8016162:	e881 000c 	stmia.w	r1, {r2, r3}
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	461a      	mov	r2, r3
 801616a:	463b      	mov	r3, r7
 801616c:	cb03      	ldmia	r3!, {r0, r1}
 801616e:	6010      	str	r0, [r2, #0]
 8016170:	6051      	str	r1, [r2, #4]
 8016172:	68f8      	ldr	r0, [r7, #12]
 8016174:	3714      	adds	r7, #20
 8016176:	46bd      	mov	sp, r7
 8016178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617c:	4770      	bx	lr

0801617e <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 801617e:	b480      	push	{r7}
 8016180:	b083      	sub	sp, #12
 8016182:	af00      	add	r7, sp, #0
 8016184:	6078      	str	r0, [r7, #4]
 8016186:	2300      	movs	r3, #0
 8016188:	4618      	mov	r0, r3
 801618a:	370c      	adds	r7, #12
 801618c:	46bd      	mov	sp, r7
 801618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016192:	4770      	bx	lr

08016194 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8016194:	b480      	push	{r7}
 8016196:	b083      	sub	sp, #12
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
 801619c:	6039      	str	r1, [r7, #0]
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	4618      	mov	r0, r3
 80161a2:	370c      	adds	r7, #12
 80161a4:	46bd      	mov	sp, r7
 80161a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161aa:	4770      	bx	lr

080161ac <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 80161ac:	b480      	push	{r7}
 80161ae:	b083      	sub	sp, #12
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
 80161b4:	f04f 0200 	mov.w	r2, #0
 80161b8:	f04f 0300 	mov.w	r3, #0
 80161bc:	ec43 2b17 	vmov	d7, r2, r3
 80161c0:	eeb0 0a47 	vmov.f32	s0, s14
 80161c4:	eef0 0a67 	vmov.f32	s1, s15
 80161c8:	370c      	adds	r7, #12
 80161ca:	46bd      	mov	sp, r7
 80161cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d0:	4770      	bx	lr

080161d2 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 80161d2:	b480      	push	{r7}
 80161d4:	b085      	sub	sp, #20
 80161d6:	af00      	add	r7, sp, #0
 80161d8:	60f8      	str	r0, [r7, #12]
 80161da:	ed87 0b00 	vstr	d0, [r7]
 80161de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80161e2:	ec43 2b17 	vmov	d7, r2, r3
 80161e6:	eeb0 0a47 	vmov.f32	s0, s14
 80161ea:	eef0 0a67 	vmov.f32	s1, s15
 80161ee:	3714      	adds	r7, #20
 80161f0:	46bd      	mov	sp, r7
 80161f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f6:	4770      	bx	lr

080161f8 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 80161f8:	b480      	push	{r7}
 80161fa:	b083      	sub	sp, #12
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	4b03      	ldr	r3, [pc, #12]	; (8016210 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8016202:	4618      	mov	r0, r3
 8016204:	370c      	adds	r7, #12
 8016206:	46bd      	mov	sp, r7
 8016208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620c:	4770      	bx	lr
 801620e:	bf00      	nop
 8016210:	08024314 	.word	0x08024314

08016214 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8016214:	b480      	push	{r7}
 8016216:	b083      	sub	sp, #12
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
 801621c:	6039      	str	r1, [r7, #0]
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	4618      	mov	r0, r3
 8016222:	370c      	adds	r7, #12
 8016224:	46bd      	mov	sp, r7
 8016226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622a:	4770      	bx	lr

0801622c <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 801622c:	b480      	push	{r7}
 801622e:	b083      	sub	sp, #12
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
 8016234:	2300      	movs	r3, #0
 8016236:	4618      	mov	r0, r3
 8016238:	370c      	adds	r7, #12
 801623a:	46bd      	mov	sp, r7
 801623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016240:	4770      	bx	lr

08016242 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8016242:	b480      	push	{r7}
 8016244:	b083      	sub	sp, #12
 8016246:	af00      	add	r7, sp, #0
 8016248:	6078      	str	r0, [r7, #4]
 801624a:	6039      	str	r1, [r7, #0]
 801624c:	683b      	ldr	r3, [r7, #0]
 801624e:	4618      	mov	r0, r3
 8016250:	370c      	adds	r7, #12
 8016252:	46bd      	mov	sp, r7
 8016254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016258:	4770      	bx	lr

0801625a <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 801625a:	b480      	push	{r7}
 801625c:	b083      	sub	sp, #12
 801625e:	af00      	add	r7, sp, #0
 8016260:	6078      	str	r0, [r7, #4]
 8016262:	2300      	movs	r3, #0
 8016264:	4618      	mov	r0, r3
 8016266:	370c      	adds	r7, #12
 8016268:	46bd      	mov	sp, r7
 801626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626e:	4770      	bx	lr

08016270 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8016270:	b480      	push	{r7}
 8016272:	b083      	sub	sp, #12
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
 8016278:	6039      	str	r1, [r7, #0]
 801627a:	683b      	ldr	r3, [r7, #0]
 801627c:	4618      	mov	r0, r3
 801627e:	370c      	adds	r7, #12
 8016280:	46bd      	mov	sp, r7
 8016282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016286:	4770      	bx	lr

08016288 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8016288:	b480      	push	{r7}
 801628a:	b083      	sub	sp, #12
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	2300      	movs	r3, #0
 8016292:	4618      	mov	r0, r3
 8016294:	370c      	adds	r7, #12
 8016296:	46bd      	mov	sp, r7
 8016298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629c:	4770      	bx	lr

0801629e <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 801629e:	b480      	push	{r7}
 80162a0:	b083      	sub	sp, #12
 80162a2:	af00      	add	r7, sp, #0
 80162a4:	6078      	str	r0, [r7, #4]
 80162a6:	6039      	str	r1, [r7, #0]
 80162a8:	683b      	ldr	r3, [r7, #0]
 80162aa:	4618      	mov	r0, r3
 80162ac:	370c      	adds	r7, #12
 80162ae:	46bd      	mov	sp, r7
 80162b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b4:	4770      	bx	lr

080162b6 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 80162b6:	b480      	push	{r7}
 80162b8:	b083      	sub	sp, #12
 80162ba:	af00      	add	r7, sp, #0
 80162bc:	6078      	str	r0, [r7, #4]
 80162be:	6039      	str	r1, [r7, #0]
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	4618      	mov	r0, r3
 80162c4:	370c      	adds	r7, #12
 80162c6:	46bd      	mov	sp, r7
 80162c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162cc:	4770      	bx	lr
	...

080162d0 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 80162d0:	b480      	push	{r7}
 80162d2:	b083      	sub	sp, #12
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
 80162d8:	4a04      	ldr	r2, [pc, #16]	; (80162ec <_ZN14MockActualCallC1Ev+0x1c>)
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	601a      	str	r2, [r3, #0]
{
}
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	4618      	mov	r0, r3
 80162e2:	370c      	adds	r7, #12
 80162e4:	46bd      	mov	sp, r7
 80162e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ea:	4770      	bx	lr
 80162ec:	08026bf0 	.word	0x08026bf0

080162f0 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 80162f0:	b480      	push	{r7}
 80162f2:	b083      	sub	sp, #12
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
 80162f8:	4a04      	ldr	r2, [pc, #16]	; (801630c <_ZN14MockActualCallD1Ev+0x1c>)
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	601a      	str	r2, [r3, #0]
{
}
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	4618      	mov	r0, r3
 8016302:	370c      	adds	r7, #12
 8016304:	46bd      	mov	sp, r7
 8016306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630a:	4770      	bx	lr
 801630c:	08026bf0 	.word	0x08026bf0

08016310 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b082      	sub	sp, #8
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
 8016318:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	3304      	adds	r3, #4
 801631e:	6839      	ldr	r1, [r7, #0]
 8016320:	4618      	mov	r0, r3
 8016322:	f7f5 f88e 	bl	800b442 <_ZN12SimpleStringaSERKS_>
}
 8016326:	bf00      	nop
 8016328:	3708      	adds	r7, #8
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}

0801632e <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 801632e:	b580      	push	{r7, lr}
 8016330:	b082      	sub	sp, #8
 8016332:	af00      	add	r7, sp, #0
 8016334:	6078      	str	r0, [r7, #4]
 8016336:	6039      	str	r1, [r7, #0]
    return functionName_;
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	3304      	adds	r3, #4
 801633c:	4619      	mov	r1, r3
 801633e:	6878      	ldr	r0, [r7, #4]
 8016340:	f7f5 f867 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
}
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	3708      	adds	r7, #8
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}

0801634c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	60b9      	str	r1, [r7, #8]
 8016356:	607a      	str	r2, [r7, #4]
 8016358:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	4618      	mov	r0, r3
 801635e:	f7ff ffb7 	bl	80162d0 <_ZN14MockActualCallC1Ev>
 8016362:	4a17      	ldr	r2, [pc, #92]	; (80163c0 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	601a      	str	r2, [r3, #0]
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	3304      	adds	r3, #4
 801636c:	4915      	ldr	r1, [pc, #84]	; (80163c4 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 801636e:	4618      	mov	r0, r3
 8016370:	f7f4 fffb 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	68ba      	ldr	r2, [r7, #8]
 8016378:	60da      	str	r2, [r3, #12]
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	687a      	ldr	r2, [r7, #4]
 801637e:	611a      	str	r2, [r3, #16]
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	2202      	movs	r2, #2
 8016384:	751a      	strb	r2, [r3, #20]
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	2200      	movs	r2, #0
 801638a:	755a      	strb	r2, [r3, #21]
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	2200      	movs	r2, #0
 8016390:	619a      	str	r2, [r3, #24]
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	331c      	adds	r3, #28
 8016396:	4618      	mov	r0, r3
 8016398:	f004 f814 	bl	801a3c4 <_ZN21MockExpectedCallsListC1Ev>
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	683a      	ldr	r2, [r7, #0]
 80163a0:	625a      	str	r2, [r3, #36]	; 0x24
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	2200      	movs	r2, #0
 80163a6:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	331c      	adds	r3, #28
 80163ac:	6839      	ldr	r1, [r7, #0]
 80163ae:	4618      	mov	r0, r3
 80163b0:	f004 f986 	bl	801a6c0 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	4618      	mov	r0, r3
 80163b8:	3710      	adds	r7, #16
 80163ba:	46bd      	mov	sp, r7
 80163bc:	bd80      	pop	{r7, pc}
 80163be:	bf00      	nop
 80163c0:	08026af0 	.word	0x08026af0
 80163c4:	08024314 	.word	0x08024314

080163c8 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b082      	sub	sp, #8
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
 80163d0:	4a0c      	ldr	r2, [pc, #48]	; (8016404 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	f001 fae4 	bl	80179a4 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	331c      	adds	r3, #28
 80163e0:	4618      	mov	r0, r3
 80163e2:	f004 f803 	bl	801a3ec <_ZN21MockExpectedCallsListD1Ev>
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	3304      	adds	r3, #4
 80163ea:	4618      	mov	r0, r3
 80163ec:	f7f5 fb75 	bl	800bada <_ZN12SimpleStringD1Ev>
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	4618      	mov	r0, r3
 80163f4:	f7ff ff7c 	bl	80162f0 <_ZN14MockActualCallD1Ev>
}
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	4618      	mov	r0, r3
 80163fc:	3708      	adds	r7, #8
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
 8016402:	bf00      	nop
 8016404:	08026af0 	.word	0x08026af0

08016408 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8016408:	b580      	push	{r7, lr}
 801640a:	b082      	sub	sp, #8
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
}
 8016410:	6878      	ldr	r0, [r7, #4]
 8016412:	f7ff ffd9 	bl	80163c8 <_ZN21MockCheckedActualCallD1Ev>
 8016416:	212c      	movs	r1, #44	; 0x2c
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	f7f2 fbf7 	bl	8008c0c <_ZdlPvj>
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	4618      	mov	r0, r3
 8016422:	3708      	adds	r7, #8
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}

08016428 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8016428:	b480      	push	{r7}
 801642a:	b083      	sub	sp, #12
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
 8016430:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	683a      	ldr	r2, [r7, #0]
 8016436:	611a      	str	r2, [r3, #16]
}
 8016438:	bf00      	nop
 801643a:	370c      	adds	r7, #12
 801643c:	46bd      	mov	sp, r7
 801643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016442:	4770      	bx	lr

08016444 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b082      	sub	sp, #8
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	691a      	ldr	r2, [r3, #16]
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	691b      	ldr	r3, [r3, #16]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	330c      	adds	r3, #12
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	4610      	mov	r0, r2
 801645c:	4798      	blx	r3
 801645e:	4603      	mov	r3, r0
}
 8016460:	4618      	mov	r0, r3
 8016462:	3708      	adds	r7, #8
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}

08016468 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b082      	sub	sp, #8
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
 8016470:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	33c0      	adds	r3, #192	; 0xc0
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	4798      	blx	r3
 801647e:	4603      	mov	r3, r0
 8016480:	f083 0301 	eor.w	r3, r3, #1
 8016484:	b2db      	uxtb	r3, r3
 8016486:	2b00      	cmp	r3, #0
 8016488:	d010      	beq.n	80164ac <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	33ec      	adds	r3, #236	; 0xec
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	2101      	movs	r1, #1
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	4798      	blx	r3
        reporter_->failTest(failure);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	691a      	ldr	r2, [r3, #16]
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	691b      	ldr	r3, [r3, #16]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	3308      	adds	r3, #8
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	6839      	ldr	r1, [r7, #0]
 80164a8:	4610      	mov	r0, r2
 80164aa:	4798      	blx	r3
    }
}
 80164ac:	bf00      	nop
 80164ae:	3708      	adds	r7, #8
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}

080164b4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 80164b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b8:	b0bc      	sub	sp, #240	; 0xf0
 80164ba:	af00      	add	r7, sp, #0
 80164bc:	6078      	str	r0, [r7, #4]
 80164be:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80164c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	f000 80f5 	beq.w	80166bc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80164d2:	683b      	ldr	r3, [r7, #0]
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	339c      	adds	r3, #156	; 0x9c
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80164de:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80164e2:	6839      	ldr	r1, [r7, #0]
 80164e4:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 80164e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80164ea:	4618      	mov	r0, r3
 80164ec:	f006 fa6c 	bl	801c9c8 <_ZNK14MockNamedValue9getCopierEv>
 80164f0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 80164f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d013      	beq.n	8016524 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 80164fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	3308      	adds	r3, #8
 8016504:	681c      	ldr	r4, [r3, #0]
 8016506:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801650a:	691d      	ldr	r5, [r3, #16]
 801650c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016510:	4618      	mov	r0, r3
 8016512:	f006 fa29 	bl	801c968 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8016516:	4603      	mov	r3, r0
 8016518:	461a      	mov	r2, r3
 801651a:	4629      	mov	r1, r5
 801651c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8016520:	47a0      	blx	r4
 8016522:	e0c0      	b.n	80166a6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8016524:	2500      	movs	r5, #0
 8016526:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801652a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801652e:	4611      	mov	r1, r2
 8016530:	4618      	mov	r0, r3
 8016532:	f005 ff0c 	bl	801c34e <_ZNK14MockNamedValue7getTypeEv>
 8016536:	2601      	movs	r6, #1
 8016538:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801653c:	4962      	ldr	r1, [pc, #392]	; (80166c8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 801653e:	4618      	mov	r0, r3
 8016540:	f7f4 ff13 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8016544:	f04f 0801 	mov.w	r8, #1
 8016548:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801654c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016550:	4611      	mov	r1, r2
 8016552:	4618      	mov	r0, r3
 8016554:	f7f5 facd 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8016558:	4603      	mov	r3, r0
 801655a:	2b00      	cmp	r3, #0
 801655c:	d015      	beq.n	801658a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801655e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016562:	f103 0408 	add.w	r4, r3, #8
 8016566:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801656a:	4958      	ldr	r1, [pc, #352]	; (80166cc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 801656c:	4618      	mov	r0, r3
 801656e:	f7f4 fefc 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8016572:	2501      	movs	r5, #1
 8016574:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016578:	4619      	mov	r1, r3
 801657a:	4620      	mov	r0, r4
 801657c:	f7f5 fab9 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8016580:	4603      	mov	r3, r0
 8016582:	2b00      	cmp	r3, #0
 8016584:	d001      	beq.n	801658a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8016586:	2401      	movs	r4, #1
 8016588:	e000      	b.n	801658c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 801658a:	2400      	movs	r4, #0
 801658c:	2d00      	cmp	r5, #0
 801658e:	d004      	beq.n	801659a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8016590:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016594:	4618      	mov	r0, r3
 8016596:	f7f5 faa0 	bl	800bada <_ZN12SimpleStringD1Ev>
 801659a:	f1b8 0f00 	cmp.w	r8, #0
 801659e:	d004      	beq.n	80165aa <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 80165a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7f5 fa98 	bl	800bada <_ZN12SimpleStringD1Ev>
 80165aa:	2e00      	cmp	r6, #0
 80165ac:	d004      	beq.n	80165b8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 80165ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80165b2:	4618      	mov	r0, r3
 80165b4:	f7f5 fa91 	bl	800bada <_ZN12SimpleStringD1Ev>
 80165b8:	2c00      	cmp	r4, #0
 80165ba:	d018      	beq.n	80165ee <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 80165bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80165c0:	4618      	mov	r0, r3
 80165c2:	f006 f959 	bl	801c878 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80165c6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 80165ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80165ce:	4618      	mov	r0, r3
 80165d0:	f006 f9e2 	bl	801c998 <_ZNK14MockNamedValue7getSizeEv>
 80165d4:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 80165d8:	4b3d      	ldr	r3, [pc, #244]	; (80166d0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80165e0:	6910      	ldr	r0, [r2, #16]
 80165e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80165e6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80165ea:	4798      	blx	r3
 80165ec:	e05b      	b.n	80166a6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 80165ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80165f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80165f6:	4611      	mov	r1, r2
 80165f8:	4618      	mov	r0, r3
 80165fa:	f005 fe99 	bl	801c330 <_ZNK14MockNamedValue7getNameEv>
 80165fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016602:	4934      	ldr	r1, [pc, #208]	; (80166d4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8016604:	4618      	mov	r0, r3
 8016606:	f7f4 feb0 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801660a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801660e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016612:	4611      	mov	r1, r2
 8016614:	4618      	mov	r0, r3
 8016616:	f7f5 fab1 	bl	800bb7c <_ZneRK12SimpleStringS1_>
 801661a:	4603      	mov	r3, r0
 801661c:	461c      	mov	r4, r3
 801661e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016622:	4618      	mov	r0, r3
 8016624:	f7f5 fa59 	bl	800bada <_ZN12SimpleStringD1Ev>
 8016628:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801662c:	4618      	mov	r0, r3
 801662e:	f7f5 fa54 	bl	800bada <_ZN12SimpleStringD1Ev>
 8016632:	2c00      	cmp	r4, #0
 8016634:	d037      	beq.n	80166a6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8016636:	683b      	ldr	r3, [r7, #0]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	339c      	adds	r3, #156	; 0x9c
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016642:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8016646:	6839      	ldr	r1, [r7, #0]
 8016648:	4798      	blx	r3
 801664a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801664e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8016652:	4611      	mov	r1, r2
 8016654:	4618      	mov	r0, r3
 8016656:	f005 fe7a 	bl	801c34e <_ZNK14MockNamedValue7getTypeEv>
 801665a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801665e:	4618      	mov	r0, r3
 8016660:	f005 fbd2 	bl	801be08 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	33cc      	adds	r3, #204	; 0xcc
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	6878      	ldr	r0, [r7, #4]
 801666e:	4798      	blx	r3
 8016670:	4601      	mov	r1, r0
 8016672:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8016676:	f107 030c 	add.w	r3, r7, #12
 801667a:	4618      	mov	r0, r3
 801667c:	f005 faee 	bl	801bc5c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	33dc      	adds	r3, #220	; 0xdc
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	f107 020c 	add.w	r2, r7, #12
 801668c:	4611      	mov	r1, r2
 801668e:	6878      	ldr	r0, [r7, #4]
 8016690:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8016692:	f107 030c 	add.w	r3, r7, #12
 8016696:	4618      	mov	r0, r3
 8016698:	f001 ffe2 	bl	8018660 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801669c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7f5 fa1a 	bl	800bada <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80166a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80166aa:	4618      	mov	r0, r3
 80166ac:	f005 fbac 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80166b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80166b4:	695b      	ldr	r3, [r3, #20]
 80166b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80166ba:	e705      	b.n	80164c8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 80166bc:	bf00      	nop
 80166be:	37f0      	adds	r7, #240	; 0xf0
 80166c0:	46bd      	mov	sp, r7
 80166c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166c6:	bf00      	nop
 80166c8:	08024318 	.word	0x08024318
 80166cc:	08024324 	.word	0x08024324
 80166d0:	200000d4 	.word	0x200000d4
 80166d4:	08024314 	.word	0x08024314

080166d8 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b084      	sub	sp, #16
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	331c      	adds	r3, #28
 80166e4:	4618      	mov	r0, r3
 80166e6:	f004 f9bb 	bl	801aa60 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 80166ea:	4602      	mov	r2, r0
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	699b      	ldr	r3, [r3, #24]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d00f      	beq.n	8016718 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	33d4      	adds	r3, #212	; 0xd4
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	687a      	ldr	r2, [r7, #4]
 8016702:	6992      	ldr	r2, [r2, #24]
 8016704:	4611      	mov	r1, r2
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	4798      	blx	r3
        callHasSucceeded();
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	33d0      	adds	r3, #208	; 0xd0
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8016716:	e00f      	b.n	8016738 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	331c      	adds	r3, #28
 801671c:	4618      	mov	r0, r3
 801671e:	f004 f9cc 	bl	801aaba <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8016722:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d006      	beq.n	8016738 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	33d4      	adds	r3, #212	; 0xd4
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	68f9      	ldr	r1, [r7, #12]
 8016734:	6878      	ldr	r0, [r7, #4]
 8016736:	4798      	blx	r3
}
 8016738:	bf00      	nop
 801673a:	3710      	adds	r7, #16
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}

08016740 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	33ec      	adds	r3, #236	; 0xec
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	2102      	movs	r1, #2
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	4798      	blx	r3
}
 8016756:	bf00      	nop
 8016758:	3708      	adds	r7, #8
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}

0801675e <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 801675e:	b580      	push	{r7, lr}
 8016760:	b082      	sub	sp, #8
 8016762:	af00      	add	r7, sp, #0
 8016764:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	699b      	ldr	r3, [r3, #24]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d00b      	beq.n	8016786 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	699a      	ldr	r2, [r3, #24]
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	699b      	ldr	r3, [r3, #24]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	33ec      	adds	r3, #236	; 0xec
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	4610      	mov	r0, r2
 801677e:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	2200      	movs	r2, #0
 8016784:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	331c      	adds	r3, #28
 801678a:	4618      	mov	r0, r3
 801678c:	f004 f85c 	bl	801a848 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8016790:	bf00      	nop
 8016792:	3708      	adds	r7, #8
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}

08016798 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8016798:	b590      	push	{r4, r7, lr}
 801679a:	b091      	sub	sp, #68	; 0x44
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	6039      	str	r1, [r7, #0]
    setName(name);
 80167a2:	6839      	ldr	r1, [r7, #0]
 80167a4:	6878      	ldr	r0, [r7, #4]
 80167a6:	f7ff fdb3 	bl	8016310 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	33ec      	adds	r3, #236	; 0xec
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2100      	movs	r1, #0
 80167b4:	6878      	ldr	r0, [r7, #4]
 80167b6:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	331c      	adds	r3, #28
 80167bc:	6839      	ldr	r1, [r7, #0]
 80167be:	4618      	mov	r0, r3
 80167c0:	f003 ffec 	bl	801a79c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	331c      	adds	r3, #28
 80167c8:	4618      	mov	r0, r3
 80167ca:	f003 fe7c 	bl	801a4c6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80167ce:	4603      	mov	r3, r0
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d01d      	beq.n	8016810 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	33cc      	adds	r3, #204	; 0xcc
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	4798      	blx	r3
 80167e0:	4601      	mov	r1, r0
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167e6:	f107 000c 	add.w	r0, r7, #12
 80167ea:	683a      	ldr	r2, [r7, #0]
 80167ec:	f004 fe24 	bl	801b438 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	33dc      	adds	r3, #220	; 0xdc
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	f107 020c 	add.w	r2, r7, #12
 80167fc:	4611      	mov	r1, r2
 80167fe:	6878      	ldr	r0, [r7, #4]
 8016800:	4798      	blx	r3
        return *this;
 8016802:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8016804:	f107 030c 	add.w	r3, r7, #12
 8016808:	4618      	mov	r0, r3
 801680a:	f001 ff4b 	bl	80186a4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801680e:	e006      	b.n	801681e <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	33d8      	adds	r3, #216	; 0xd8
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	4798      	blx	r3

    return *this;
 801681c:	687c      	ldr	r4, [r7, #4]
 801681e:	4623      	mov	r3, r4
}
 8016820:	4618      	mov	r0, r3
 8016822:	3744      	adds	r7, #68	; 0x44
 8016824:	46bd      	mov	sp, r7
 8016826:	bd90      	pop	{r4, r7, pc}

08016828 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8016828:	b480      	push	{r7}
 801682a:	b083      	sub	sp, #12
 801682c:	af00      	add	r7, sp, #0
 801682e:	6078      	str	r0, [r7, #4]
 8016830:	6039      	str	r1, [r7, #0]
    return *this;
 8016832:	687b      	ldr	r3, [r7, #4]
}
 8016834:	4618      	mov	r0, r3
 8016836:	370c      	adds	r7, #12
 8016838:	46bd      	mov	sp, r7
 801683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683e:	4770      	bx	lr

08016840 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8016840:	b590      	push	{r4, r7, lr}
 8016842:	b097      	sub	sp, #92	; 0x5c
 8016844:	af02      	add	r7, sp, #8
 8016846:	6078      	str	r0, [r7, #4]
 8016848:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	33c0      	adds	r3, #192	; 0xc0
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	4798      	blx	r3
 8016856:	4603      	mov	r3, r0
 8016858:	2b00      	cmp	r3, #0
 801685a:	d164      	bne.n	8016926 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	33ec      	adds	r3, #236	; 0xec
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	2100      	movs	r1, #0
 8016866:	6878      	ldr	r0, [r7, #4]
 8016868:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	33e8      	adds	r3, #232	; 0xe8
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	6878      	ldr	r0, [r7, #4]
 8016874:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	331c      	adds	r3, #28
 801687a:	6839      	ldr	r1, [r7, #0]
 801687c:	4618      	mov	r0, r3
 801687e:	f004 f86b 	bl	801a958 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	331c      	adds	r3, #28
 8016886:	4618      	mov	r0, r3
 8016888:	f003 fe1d 	bl	801a4c6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801688c:	4603      	mov	r3, r0
 801688e:	2b00      	cmp	r3, #0
 8016890:	d02b      	beq.n	80168ea <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	33cc      	adds	r3, #204	; 0xcc
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	6878      	ldr	r0, [r7, #4]
 801689c:	4798      	blx	r3
 801689e:	4604      	mov	r4, r0
 80168a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80168a4:	6879      	ldr	r1, [r7, #4]
 80168a6:	4618      	mov	r0, r3
 80168a8:	f7ff fd41 	bl	801632e <_ZNK21MockCheckedActualCall7getNameEv>
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80168b4:	f107 000c 	add.w	r0, r7, #12
 80168b8:	9300      	str	r3, [sp, #0]
 80168ba:	683b      	ldr	r3, [r7, #0]
 80168bc:	4621      	mov	r1, r4
 80168be:	f004 fe7f 	bl	801b5c0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80168c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80168c6:	4618      	mov	r0, r3
 80168c8:	f7f5 f907 	bl	800bada <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	33dc      	adds	r3, #220	; 0xdc
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	f107 020c 	add.w	r2, r7, #12
 80168d8:	4611      	mov	r1, r2
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80168de:	f107 030c 	add.w	r3, r7, #12
 80168e2:	4618      	mov	r0, r3
 80168e4:	f001 ff00 	bl	80186e8 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 80168e8:	e01e      	b.n	8016928 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	f103 041c 	add.w	r4, r3, #28
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	335c      	adds	r3, #92	; 0x5c
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80168fc:	6839      	ldr	r1, [r7, #0]
 80168fe:	4610      	mov	r0, r2
 8016900:	4798      	blx	r3
 8016902:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016906:	4619      	mov	r1, r3
 8016908:	4620      	mov	r0, r4
 801690a:	f004 f9b8 	bl	801ac7e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 801690e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016912:	4618      	mov	r0, r3
 8016914:	f7f5 f8e1 	bl	800bada <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	33d8      	adds	r3, #216	; 0xd8
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	6878      	ldr	r0, [r7, #4]
 8016922:	4798      	blx	r3
 8016924:	e000      	b.n	8016928 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8016926:	bf00      	nop
}
 8016928:	3754      	adds	r7, #84	; 0x54
 801692a:	46bd      	mov	sp, r7
 801692c:	bd90      	pop	{r4, r7, pc}

0801692e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 801692e:	b590      	push	{r4, r7, lr}
 8016930:	b097      	sub	sp, #92	; 0x5c
 8016932:	af02      	add	r7, sp, #8
 8016934:	6078      	str	r0, [r7, #4]
 8016936:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	33c0      	adds	r3, #192	; 0xc0
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	6878      	ldr	r0, [r7, #4]
 8016942:	4798      	blx	r3
 8016944:	4603      	mov	r3, r0
 8016946:	2b00      	cmp	r3, #0
 8016948:	d164      	bne.n	8016a14 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	33ec      	adds	r3, #236	; 0xec
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	2100      	movs	r1, #0
 8016954:	6878      	ldr	r0, [r7, #4]
 8016956:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	33e8      	adds	r3, #232	; 0xe8
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	6878      	ldr	r0, [r7, #4]
 8016962:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	331c      	adds	r3, #28
 8016968:	6839      	ldr	r1, [r7, #0]
 801696a:	4618      	mov	r0, r3
 801696c:	f004 f820 	bl	801a9b0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	331c      	adds	r3, #28
 8016974:	4618      	mov	r0, r3
 8016976:	f003 fda6 	bl	801a4c6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801697a:	4603      	mov	r3, r0
 801697c:	2b00      	cmp	r3, #0
 801697e:	d02b      	beq.n	80169d8 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	33cc      	adds	r3, #204	; 0xcc
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	6878      	ldr	r0, [r7, #4]
 801698a:	4798      	blx	r3
 801698c:	4604      	mov	r4, r0
 801698e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016992:	6879      	ldr	r1, [r7, #4]
 8016994:	4618      	mov	r0, r3
 8016996:	f7ff fcca 	bl	801632e <_ZNK21MockCheckedActualCall7getNameEv>
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801699e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80169a2:	f107 000c 	add.w	r0, r7, #12
 80169a6:	9300      	str	r3, [sp, #0]
 80169a8:	683b      	ldr	r3, [r7, #0]
 80169aa:	4621      	mov	r1, r4
 80169ac:	f004 ff6a 	bl	801b884 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80169b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80169b4:	4618      	mov	r0, r3
 80169b6:	f7f5 f890 	bl	800bada <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	33dc      	adds	r3, #220	; 0xdc
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	f107 020c 	add.w	r2, r7, #12
 80169c6:	4611      	mov	r1, r2
 80169c8:	6878      	ldr	r0, [r7, #4]
 80169ca:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 80169cc:	f107 030c 	add.w	r3, r7, #12
 80169d0:	4618      	mov	r0, r3
 80169d2:	f001 feab 	bl	801872c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 80169d6:	e01e      	b.n	8016a16 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	f103 041c 	add.w	r4, r3, #28
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	335c      	adds	r3, #92	; 0x5c
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80169ea:	6839      	ldr	r1, [r7, #0]
 80169ec:	4610      	mov	r0, r2
 80169ee:	4798      	blx	r3
 80169f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80169f4:	4619      	mov	r1, r3
 80169f6:	4620      	mov	r0, r4
 80169f8:	f004 f95e 	bl	801acb8 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 80169fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016a00:	4618      	mov	r0, r3
 8016a02:	f7f5 f86a 	bl	800bada <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	33d8      	adds	r3, #216	; 0xd8
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	4798      	blx	r3
 8016a12:	e000      	b.n	8016a16 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8016a14:	bf00      	nop
}
 8016a16:	3754      	adds	r7, #84	; 0x54
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd90      	pop	{r4, r7, pc}

08016a1c <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8016a1c:	b590      	push	{r4, r7, lr}
 8016a1e:	b093      	sub	sp, #76	; 0x4c
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	60f8      	str	r0, [r7, #12]
 8016a24:	60b9      	str	r1, [r7, #8]
 8016a26:	4613      	mov	r3, r2
 8016a28:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8016a2a:	f107 0310 	add.w	r3, r7, #16
 8016a2e:	68b9      	ldr	r1, [r7, #8]
 8016a30:	4618      	mov	r0, r3
 8016a32:	f005 f9bf 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016a36:	79fa      	ldrb	r2, [r7, #7]
 8016a38:	f107 0310 	add.w	r3, r7, #16
 8016a3c:	4611      	mov	r1, r2
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f005 fa0a 	bl	801be58 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	33e0      	adds	r3, #224	; 0xe0
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	f107 0210 	add.w	r2, r7, #16
 8016a50:	4611      	mov	r1, r2
 8016a52:	68f8      	ldr	r0, [r7, #12]
 8016a54:	4798      	blx	r3
    return *this;
 8016a56:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016a58:	f107 0310 	add.w	r3, r7, #16
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f005 f9d3 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016a62:	4623      	mov	r3, r4
}
 8016a64:	4618      	mov	r0, r3
 8016a66:	374c      	adds	r7, #76	; 0x4c
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd90      	pop	{r4, r7, pc}

08016a6c <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8016a6c:	b590      	push	{r4, r7, lr}
 8016a6e:	b093      	sub	sp, #76	; 0x4c
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	60f8      	str	r0, [r7, #12]
 8016a74:	60b9      	str	r1, [r7, #8]
 8016a76:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016a78:	f107 0310 	add.w	r3, r7, #16
 8016a7c:	68b9      	ldr	r1, [r7, #8]
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f005 f998 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016a84:	f107 0310 	add.w	r3, r7, #16
 8016a88:	6879      	ldr	r1, [r7, #4]
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	f005 fa08 	bl	801bea0 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	33e0      	adds	r3, #224	; 0xe0
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	f107 0210 	add.w	r2, r7, #16
 8016a9c:	4611      	mov	r1, r2
 8016a9e:	68f8      	ldr	r0, [r7, #12]
 8016aa0:	4798      	blx	r3
    return *this;
 8016aa2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016aa4:	f107 0310 	add.w	r3, r7, #16
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f005 f9ad 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016aae:	4623      	mov	r3, r4
}
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	374c      	adds	r7, #76	; 0x4c
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd90      	pop	{r4, r7, pc}

08016ab8 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8016ab8:	b590      	push	{r4, r7, lr}
 8016aba:	b093      	sub	sp, #76	; 0x4c
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	60f8      	str	r0, [r7, #12]
 8016ac0:	60b9      	str	r1, [r7, #8]
 8016ac2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016ac4:	f107 0310 	add.w	r3, r7, #16
 8016ac8:	68b9      	ldr	r1, [r7, #8]
 8016aca:	4618      	mov	r0, r3
 8016acc:	f005 f972 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016ad0:	f107 0310 	add.w	r3, r7, #16
 8016ad4:	6879      	ldr	r1, [r7, #4]
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	f005 fa04 	bl	801bee4 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	33e0      	adds	r3, #224	; 0xe0
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	f107 0210 	add.w	r2, r7, #16
 8016ae8:	4611      	mov	r1, r2
 8016aea:	68f8      	ldr	r0, [r7, #12]
 8016aec:	4798      	blx	r3
    return *this;
 8016aee:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016af0:	f107 0310 	add.w	r3, r7, #16
 8016af4:	4618      	mov	r0, r3
 8016af6:	f005 f987 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016afa:	4623      	mov	r3, r4
}
 8016afc:	4618      	mov	r0, r3
 8016afe:	374c      	adds	r7, #76	; 0x4c
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bd90      	pop	{r4, r7, pc}

08016b04 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8016b04:	b590      	push	{r4, r7, lr}
 8016b06:	b093      	sub	sp, #76	; 0x4c
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	60f8      	str	r0, [r7, #12]
 8016b0c:	60b9      	str	r1, [r7, #8]
 8016b0e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016b10:	f107 0310 	add.w	r3, r7, #16
 8016b14:	68b9      	ldr	r1, [r7, #8]
 8016b16:	4618      	mov	r0, r3
 8016b18:	f005 f94c 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016b1c:	f107 0310 	add.w	r3, r7, #16
 8016b20:	6879      	ldr	r1, [r7, #4]
 8016b22:	4618      	mov	r0, r3
 8016b24:	f005 fa22 	bl	801bf6c <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	33e0      	adds	r3, #224	; 0xe0
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	f107 0210 	add.w	r2, r7, #16
 8016b34:	4611      	mov	r1, r2
 8016b36:	68f8      	ldr	r0, [r7, #12]
 8016b38:	4798      	blx	r3
    return *this;
 8016b3a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016b3c:	f107 0310 	add.w	r3, r7, #16
 8016b40:	4618      	mov	r0, r3
 8016b42:	f005 f961 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016b46:	4623      	mov	r3, r4
}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	374c      	adds	r7, #76	; 0x4c
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd90      	pop	{r4, r7, pc}

08016b50 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8016b50:	b590      	push	{r4, r7, lr}
 8016b52:	b093      	sub	sp, #76	; 0x4c
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	60f8      	str	r0, [r7, #12]
 8016b58:	60b9      	str	r1, [r7, #8]
 8016b5a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016b5c:	f107 0310 	add.w	r3, r7, #16
 8016b60:	68b9      	ldr	r1, [r7, #8]
 8016b62:	4618      	mov	r0, r3
 8016b64:	f005 f926 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016b68:	f107 0310 	add.w	r3, r7, #16
 8016b6c:	6879      	ldr	r1, [r7, #4]
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f005 f9da 	bl	801bf28 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	33e0      	adds	r3, #224	; 0xe0
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	f107 0210 	add.w	r2, r7, #16
 8016b80:	4611      	mov	r1, r2
 8016b82:	68f8      	ldr	r0, [r7, #12]
 8016b84:	4798      	blx	r3
    return *this;
 8016b86:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016b88:	f107 0310 	add.w	r3, r7, #16
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f005 f93b 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016b92:	4623      	mov	r3, r4
}
 8016b94:	4618      	mov	r0, r3
 8016b96:	374c      	adds	r7, #76	; 0x4c
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	bd90      	pop	{r4, r7, pc}

08016b9c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8016b9c:	b5b0      	push	{r4, r5, r7, lr}
 8016b9e:	b086      	sub	sp, #24
 8016ba0:	af02      	add	r7, sp, #8
 8016ba2:	60f8      	str	r0, [r7, #12]
 8016ba4:	60b9      	str	r1, [r7, #8]
 8016ba6:	4639      	mov	r1, r7
 8016ba8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016bac:	f7fb ffc0 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8016bb0:	4604      	mov	r4, r0
 8016bb2:	6823      	ldr	r3, [r4, #0]
 8016bb4:	3368      	adds	r3, #104	; 0x68
 8016bb6:	681d      	ldr	r5, [r3, #0]
 8016bb8:	f7fb ffca 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	9300      	str	r3, [sp, #0]
 8016bc0:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8016bc4:	4a04      	ldr	r2, [pc, #16]	; (8016bd8 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8016bc6:	4905      	ldr	r1, [pc, #20]	; (8016bdc <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8016bc8:	4620      	mov	r0, r4
 8016bca:	47a8      	blx	r5
    return *this;
 8016bcc:	68fb      	ldr	r3, [r7, #12]
}
 8016bce:	4618      	mov	r0, r3
 8016bd0:	3710      	adds	r7, #16
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8016bd6:	bf00      	nop
 8016bd8:	0802432c 	.word	0x0802432c
 8016bdc:	08024348 	.word	0x08024348

08016be0 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8016be0:	b5b0      	push	{r4, r5, r7, lr}
 8016be2:	b086      	sub	sp, #24
 8016be4:	af02      	add	r7, sp, #8
 8016be6:	60f8      	str	r0, [r7, #12]
 8016be8:	60b9      	str	r1, [r7, #8]
 8016bea:	4639      	mov	r1, r7
 8016bec:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016bf0:	f7fb ff9e 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8016bf4:	4604      	mov	r4, r0
 8016bf6:	6823      	ldr	r3, [r4, #0]
 8016bf8:	3368      	adds	r3, #104	; 0x68
 8016bfa:	681d      	ldr	r5, [r3, #0]
 8016bfc:	f7fb ffa8 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016c00:	4603      	mov	r3, r0
 8016c02:	9300      	str	r3, [sp, #0]
 8016c04:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016c08:	4a04      	ldr	r2, [pc, #16]	; (8016c1c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8016c0a:	4905      	ldr	r1, [pc, #20]	; (8016c20 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	47a8      	blx	r5
    return *this;
 8016c10:	68fb      	ldr	r3, [r7, #12]
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3710      	adds	r7, #16
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bdb0      	pop	{r4, r5, r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	0802432c 	.word	0x0802432c
 8016c20:	08024374 	.word	0x08024374

08016c24 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8016c24:	b590      	push	{r4, r7, lr}
 8016c26:	b093      	sub	sp, #76	; 0x4c
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	60f8      	str	r0, [r7, #12]
 8016c2c:	60b9      	str	r1, [r7, #8]
 8016c2e:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8016c32:	f107 0310 	add.w	r3, r7, #16
 8016c36:	68b9      	ldr	r1, [r7, #8]
 8016c38:	4618      	mov	r0, r3
 8016c3a:	f005 f8bb 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016c3e:	f107 0310 	add.w	r3, r7, #16
 8016c42:	ed97 0b00 	vldr	d0, [r7]
 8016c46:	4618      	mov	r0, r3
 8016c48:	f005 f9ee 	bl	801c028 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	33e0      	adds	r3, #224	; 0xe0
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	f107 0210 	add.w	r2, r7, #16
 8016c58:	4611      	mov	r1, r2
 8016c5a:	68f8      	ldr	r0, [r7, #12]
 8016c5c:	4798      	blx	r3
    return *this;
 8016c5e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016c60:	f107 0310 	add.w	r3, r7, #16
 8016c64:	4618      	mov	r0, r3
 8016c66:	f005 f8cf 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016c6a:	4623      	mov	r3, r4
}
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	374c      	adds	r7, #76	; 0x4c
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd90      	pop	{r4, r7, pc}

08016c74 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8016c74:	b590      	push	{r4, r7, lr}
 8016c76:	b093      	sub	sp, #76	; 0x4c
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	60f8      	str	r0, [r7, #12]
 8016c7c:	60b9      	str	r1, [r7, #8]
 8016c7e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016c80:	f107 0310 	add.w	r3, r7, #16
 8016c84:	68b9      	ldr	r1, [r7, #8]
 8016c86:	4618      	mov	r0, r3
 8016c88:	f005 f894 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016c8c:	f107 0310 	add.w	r3, r7, #16
 8016c90:	6879      	ldr	r1, [r7, #4]
 8016c92:	4618      	mov	r0, r3
 8016c94:	f005 fa72 	bl	801c17c <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	33e0      	adds	r3, #224	; 0xe0
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	f107 0210 	add.w	r2, r7, #16
 8016ca4:	4611      	mov	r1, r2
 8016ca6:	68f8      	ldr	r0, [r7, #12]
 8016ca8:	4798      	blx	r3
    return *this;
 8016caa:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016cac:	f107 0310 	add.w	r3, r7, #16
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f005 f8a9 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016cb6:	4623      	mov	r3, r4
}
 8016cb8:	4618      	mov	r0, r3
 8016cba:	374c      	adds	r7, #76	; 0x4c
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	bd90      	pop	{r4, r7, pc}

08016cc0 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8016cc0:	b590      	push	{r4, r7, lr}
 8016cc2:	b093      	sub	sp, #76	; 0x4c
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	60f8      	str	r0, [r7, #12]
 8016cc8:	60b9      	str	r1, [r7, #8]
 8016cca:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016ccc:	f107 0310 	add.w	r3, r7, #16
 8016cd0:	68b9      	ldr	r1, [r7, #8]
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f005 f86e 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016cd8:	f107 0310 	add.w	r3, r7, #16
 8016cdc:	6879      	ldr	r1, [r7, #4]
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f005 f9e6 	bl	801c0b0 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	33e0      	adds	r3, #224	; 0xe0
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	f107 0210 	add.w	r2, r7, #16
 8016cf0:	4611      	mov	r1, r2
 8016cf2:	68f8      	ldr	r0, [r7, #12]
 8016cf4:	4798      	blx	r3
    return *this;
 8016cf6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016cf8:	f107 0310 	add.w	r3, r7, #16
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f005 f883 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016d02:	4623      	mov	r3, r4
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	374c      	adds	r7, #76	; 0x4c
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	bd90      	pop	{r4, r7, pc}

08016d0c <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8016d0c:	b590      	push	{r4, r7, lr}
 8016d0e:	b093      	sub	sp, #76	; 0x4c
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	60f8      	str	r0, [r7, #12]
 8016d14:	60b9      	str	r1, [r7, #8]
 8016d16:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016d18:	f107 0310 	add.w	r3, r7, #16
 8016d1c:	68b9      	ldr	r1, [r7, #8]
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f005 f848 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016d24:	f107 0310 	add.w	r3, r7, #16
 8016d28:	6879      	ldr	r1, [r7, #4]
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f005 f9e2 	bl	801c0f4 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	33e0      	adds	r3, #224	; 0xe0
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	f107 0210 	add.w	r2, r7, #16
 8016d3c:	4611      	mov	r1, r2
 8016d3e:	68f8      	ldr	r0, [r7, #12]
 8016d40:	4798      	blx	r3
    return *this;
 8016d42:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016d44:	f107 0310 	add.w	r3, r7, #16
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f005 f85d 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016d4e:	4623      	mov	r3, r4
}
 8016d50:	4618      	mov	r0, r3
 8016d52:	374c      	adds	r7, #76	; 0x4c
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd90      	pop	{r4, r7, pc}

08016d58 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8016d58:	b590      	push	{r4, r7, lr}
 8016d5a:	b093      	sub	sp, #76	; 0x4c
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	60f8      	str	r0, [r7, #12]
 8016d60:	60b9      	str	r1, [r7, #8]
 8016d62:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016d64:	f107 0310 	add.w	r3, r7, #16
 8016d68:	68b9      	ldr	r1, [r7, #8]
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f005 f822 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016d70:	f107 0310 	add.w	r3, r7, #16
 8016d74:	6879      	ldr	r1, [r7, #4]
 8016d76:	4618      	mov	r0, r3
 8016d78:	f005 f9de 	bl	801c138 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	33e0      	adds	r3, #224	; 0xe0
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	f107 0210 	add.w	r2, r7, #16
 8016d88:	4611      	mov	r1, r2
 8016d8a:	68f8      	ldr	r0, [r7, #12]
 8016d8c:	4798      	blx	r3
    return *this;
 8016d8e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016d90:	f107 0310 	add.w	r3, r7, #16
 8016d94:	4618      	mov	r0, r3
 8016d96:	f005 f837 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016d9a:	4623      	mov	r3, r4
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	374c      	adds	r7, #76	; 0x4c
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd90      	pop	{r4, r7, pc}

08016da4 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8016da4:	b590      	push	{r4, r7, lr}
 8016da6:	b093      	sub	sp, #76	; 0x4c
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	60f8      	str	r0, [r7, #12]
 8016dac:	60b9      	str	r1, [r7, #8]
 8016dae:	607a      	str	r2, [r7, #4]
 8016db0:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8016db2:	f107 0310 	add.w	r3, r7, #16
 8016db6:	68b9      	ldr	r1, [r7, #8]
 8016db8:	4618      	mov	r0, r3
 8016dba:	f004 fffb 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8016dbe:	f107 0310 	add.w	r3, r7, #16
 8016dc2:	683a      	ldr	r2, [r7, #0]
 8016dc4:	6879      	ldr	r1, [r7, #4]
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f005 f9fa 	bl	801c1c0 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	33e0      	adds	r3, #224	; 0xe0
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	f107 0210 	add.w	r2, r7, #16
 8016dd8:	4611      	mov	r1, r2
 8016dda:	68f8      	ldr	r0, [r7, #12]
 8016ddc:	4798      	blx	r3
    return *this;
 8016dde:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016de0:	f107 0310 	add.w	r3, r7, #16
 8016de4:	4618      	mov	r0, r3
 8016de6:	f005 f80f 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016dea:	4623      	mov	r3, r4
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	374c      	adds	r7, #76	; 0x4c
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd90      	pop	{r4, r7, pc}

08016df4 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8016df4:	b590      	push	{r4, r7, lr}
 8016df6:	b0a1      	sub	sp, #132	; 0x84
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	60f8      	str	r0, [r7, #12]
 8016dfc:	60b9      	str	r1, [r7, #8]
 8016dfe:	607a      	str	r2, [r7, #4]
 8016e00:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8016e02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016e06:	6879      	ldr	r1, [r7, #4]
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f004 ffd3 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8016e0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016e12:	683a      	ldr	r2, [r7, #0]
 8016e14:	68b9      	ldr	r1, [r7, #8]
 8016e16:	4618      	mov	r0, r3
 8016e18:	f005 f9f8 	bl	801c20c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8016e1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016e20:	4618      	mov	r0, r3
 8016e22:	f005 fdc5 	bl	801c9b0 <_ZNK14MockNamedValue13getComparatorEv>
 8016e26:	4603      	mov	r3, r0
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	bf0c      	ite	eq
 8016e2c:	2301      	moveq	r3, #1
 8016e2e:	2300      	movne	r3, #0
 8016e30:	b2db      	uxtb	r3, r3
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d01c      	beq.n	8016e70 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	33cc      	adds	r3, #204	; 0xcc
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	68f8      	ldr	r0, [r7, #12]
 8016e40:	4798      	blx	r3
 8016e42:	4601      	mov	r1, r0
 8016e44:	f107 0314 	add.w	r3, r7, #20
 8016e48:	68ba      	ldr	r2, [r7, #8]
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f004 fed6 	bl	801bbfc <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	33dc      	adds	r3, #220	; 0xdc
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	f107 0214 	add.w	r2, r7, #20
 8016e5c:	4611      	mov	r1, r2
 8016e5e:	68f8      	ldr	r0, [r7, #12]
 8016e60:	4798      	blx	r3
        return *this;
 8016e62:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8016e64:	f107 0314 	add.w	r3, r7, #20
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f001 fc81 	bl	8018770 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8016e6e:	e009      	b.n	8016e84 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	33e0      	adds	r3, #224	; 0xe0
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016e7c:	4611      	mov	r1, r2
 8016e7e:	68f8      	ldr	r0, [r7, #12]
 8016e80:	4798      	blx	r3
    return *this;
 8016e82:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016e84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f004 ffbd 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 8016e8e:	4623      	mov	r3, r4
}
 8016e90:	4618      	mov	r0, r3
 8016e92:	3784      	adds	r7, #132	; 0x84
 8016e94:	46bd      	mov	sp, r7
 8016e96:	bd90      	pop	{r4, r7, pc}

08016e98 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8016e98:	b590      	push	{r4, r7, lr}
 8016e9a:	b095      	sub	sp, #84	; 0x54
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	60f8      	str	r0, [r7, #12]
 8016ea0:	60b9      	str	r1, [r7, #8]
 8016ea2:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	33f0      	adds	r3, #240	; 0xf0
 8016eaa:	681c      	ldr	r4, [r3, #0]
 8016eac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016eb0:	4917      	ldr	r1, [pc, #92]	; (8016f10 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7f4 fa59 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8016eb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	68b9      	ldr	r1, [r7, #8]
 8016ec0:	68f8      	ldr	r0, [r7, #12]
 8016ec2:	47a0      	blx	r4
 8016ec4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7f4 fe06 	bl	800bada <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8016ece:	f107 0310 	add.w	r3, r7, #16
 8016ed2:	68b9      	ldr	r1, [r7, #8]
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f004 ff6d 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8016eda:	f107 0310 	add.w	r3, r7, #16
 8016ede:	6879      	ldr	r1, [r7, #4]
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f005 f8e5 	bl	801c0b0 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	33e4      	adds	r3, #228	; 0xe4
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	f107 0210 	add.w	r2, r7, #16
 8016ef2:	4611      	mov	r1, r2
 8016ef4:	68f8      	ldr	r0, [r7, #12]
 8016ef6:	4798      	blx	r3

    return *this;
 8016ef8:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8016efa:	f107 0310 	add.w	r3, r7, #16
 8016efe:	4618      	mov	r0, r3
 8016f00:	f004 ff82 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016f04:	4623      	mov	r3, r4
}
 8016f06:	4618      	mov	r0, r3
 8016f08:	3754      	adds	r7, #84	; 0x54
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd90      	pop	{r4, r7, pc}
 8016f0e:	bf00      	nop
 8016f10:	08024324 	.word	0x08024324

08016f14 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8016f14:	b590      	push	{r4, r7, lr}
 8016f16:	b093      	sub	sp, #76	; 0x4c
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	60f8      	str	r0, [r7, #12]
 8016f1c:	60b9      	str	r1, [r7, #8]
 8016f1e:	607a      	str	r2, [r7, #4]
 8016f20:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	33f0      	adds	r3, #240	; 0xf0
 8016f28:	681c      	ldr	r4, [r3, #0]
 8016f2a:	683b      	ldr	r3, [r7, #0]
 8016f2c:	68ba      	ldr	r2, [r7, #8]
 8016f2e:	6879      	ldr	r1, [r7, #4]
 8016f30:	68f8      	ldr	r0, [r7, #12]
 8016f32:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8016f34:	f107 0310 	add.w	r3, r7, #16
 8016f38:	6879      	ldr	r1, [r7, #4]
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f004 ff3a 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8016f40:	f107 0310 	add.w	r3, r7, #16
 8016f44:	683a      	ldr	r2, [r7, #0]
 8016f46:	68b9      	ldr	r1, [r7, #8]
 8016f48:	4618      	mov	r0, r3
 8016f4a:	f005 f95f 	bl	801c20c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	33e4      	adds	r3, #228	; 0xe4
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	f107 0210 	add.w	r2, r7, #16
 8016f5a:	4611      	mov	r1, r2
 8016f5c:	68f8      	ldr	r0, [r7, #12]
 8016f5e:	4798      	blx	r3

    return *this;
 8016f60:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8016f62:	f107 0310 	add.w	r3, r7, #16
 8016f66:	4618      	mov	r0, r3
 8016f68:	f004 ff4e 	bl	801be08 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016f6c:	4623      	mov	r3, r4
}
 8016f6e:	4618      	mov	r0, r3
 8016f70:	374c      	adds	r7, #76	; 0x4c
 8016f72:	46bd      	mov	sp, r7
 8016f74:	bd90      	pop	{r4, r7, pc}

08016f76 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8016f76:	b480      	push	{r7}
 8016f78:	b083      	sub	sp, #12
 8016f7a:	af00      	add	r7, sp, #0
 8016f7c:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	7d1b      	ldrb	r3, [r3, #20]
 8016f82:	2b02      	cmp	r3, #2
 8016f84:	bf0c      	ite	eq
 8016f86:	2301      	moveq	r3, #1
 8016f88:	2300      	movne	r3, #0
 8016f8a:	b2db      	uxtb	r3, r3
}
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	370c      	adds	r7, #12
 8016f90:	46bd      	mov	sp, r7
 8016f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f96:	4770      	bx	lr

08016f98 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8016f98:	b480      	push	{r7}
 8016f9a:	b083      	sub	sp, #12
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	7d1b      	ldrb	r3, [r3, #20]
 8016fa4:	2b01      	cmp	r3, #1
 8016fa6:	bf0c      	ite	eq
 8016fa8:	2301      	moveq	r3, #1
 8016faa:	2300      	movne	r3, #0
 8016fac:	b2db      	uxtb	r3, r3
}
 8016fae:	4618      	mov	r0, r3
 8016fb0:	370c      	adds	r7, #12
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb8:	4770      	bx	lr
	...

08016fbc <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8016fbc:	b5b0      	push	{r4, r5, r7, lr}
 8016fbe:	b096      	sub	sp, #88	; 0x58
 8016fc0:	af02      	add	r7, sp, #8
 8016fc2:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	7d5b      	ldrb	r3, [r3, #21]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	f040 80bc 	bne.w	8017146 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	2201      	movs	r2, #1
 8016fd2:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	7d1b      	ldrb	r3, [r3, #20]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d014      	beq.n	8017006 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	7d1b      	ldrb	r3, [r3, #20]
 8016fe0:	2b02      	cmp	r3, #2
 8016fe2:	d10a      	bne.n	8016ffa <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	6998      	ldr	r0, [r3, #24]
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	699b      	ldr	r3, [r3, #24]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	33d8      	adds	r3, #216	; 0xd8
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	68d2      	ldr	r2, [r2, #12]
 8016ff6:	4611      	mov	r1, r2
 8016ff8:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	331c      	adds	r3, #28
 8016ffe:	4618      	mov	r0, r3
 8017000:	f003 fe07 	bl	801ac12 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8017004:	e0a0      	b.n	8017148 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	331c      	adds	r3, #28
 801700a:	4618      	mov	r0, r3
 801700c:	f003 fac3 	bl	801a596 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8017010:	4603      	mov	r3, r0
 8017012:	2b00      	cmp	r3, #0
 8017014:	d00f      	beq.n	8017036 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8017016:	f7fb fd8b 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801701a:	4604      	mov	r4, r0
 801701c:	6823      	ldr	r3, [r4, #0]
 801701e:	3368      	adds	r3, #104	; 0x68
 8017020:	681d      	ldr	r5, [r3, #0]
 8017022:	f7fb fd95 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017026:	4603      	mov	r3, r0
 8017028:	9300      	str	r3, [sp, #0]
 801702a:	f240 1385 	movw	r3, #389	; 0x185
 801702e:	4a48      	ldr	r2, [pc, #288]	; (8017150 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8017030:	4948      	ldr	r1, [pc, #288]	; (8017154 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8017032:	4620      	mov	r0, r4
 8017034:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	331c      	adds	r3, #28
 801703a:	4618      	mov	r0, r3
 801703c:	f003 fd5f 	bl	801aafe <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8017040:	4602      	mov	r2, r0
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	699b      	ldr	r3, [r3, #24]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d01f      	beq.n	801708e <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	699a      	ldr	r2, [r3, #24]
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	699b      	ldr	r3, [r3, #24]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	33e4      	adds	r3, #228	; 0xe4
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	4610      	mov	r0, r2
 801705e:	4798      	blx	r3
        callHasSucceeded();
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	33d0      	adds	r3, #208	; 0xd0
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	6998      	ldr	r0, [r3, #24]
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	699b      	ldr	r3, [r3, #24]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	33d8      	adds	r3, #216	; 0xd8
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	687a      	ldr	r2, [r7, #4]
 801707c:	68d2      	ldr	r2, [r2, #12]
 801707e:	4611      	mov	r1, r2
 8017080:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	331c      	adds	r3, #28
 8017086:	4618      	mov	r0, r3
 8017088:	f003 fdc3 	bl	801ac12 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801708c:	e05c      	b.n	8017148 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	331c      	adds	r3, #28
 8017092:	4618      	mov	r0, r3
 8017094:	f003 ffc4 	bl	801b020 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8017098:	4603      	mov	r3, r0
 801709a:	2b00      	cmp	r3, #0
 801709c:	d029      	beq.n	80170f2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	33cc      	adds	r3, #204	; 0xcc
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	6878      	ldr	r0, [r7, #4]
 80170a8:	4798      	blx	r3
 80170aa:	4604      	mov	r4, r0
 80170ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80170b0:	6879      	ldr	r1, [r7, #4]
 80170b2:	4618      	mov	r0, r3
 80170b4:	f7ff f93b 	bl	801632e <_ZNK21MockCheckedActualCall7getNameEv>
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80170c0:	f107 000c 	add.w	r0, r7, #12
 80170c4:	4621      	mov	r1, r4
 80170c6:	f004 fd21 	bl	801bb0c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 80170ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80170ce:	4618      	mov	r0, r3
 80170d0:	f7f4 fd03 	bl	800bada <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	33dc      	adds	r3, #220	; 0xdc
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	f107 020c 	add.w	r2, r7, #12
 80170e0:	4611      	mov	r1, r2
 80170e2:	6878      	ldr	r0, [r7, #4]
 80170e4:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80170e6:	f107 030c 	add.w	r3, r7, #12
 80170ea:	4618      	mov	r0, r3
 80170ec:	f001 fb62 	bl	80187b4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 80170f0:	e02a      	b.n	8017148 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	33cc      	adds	r3, #204	; 0xcc
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	6878      	ldr	r0, [r7, #4]
 80170fc:	4798      	blx	r3
 80170fe:	4604      	mov	r4, r0
 8017100:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017104:	6879      	ldr	r1, [r7, #4]
 8017106:	4618      	mov	r0, r3
 8017108:	f7ff f911 	bl	801632e <_ZNK21MockCheckedActualCall7getNameEv>
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017110:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017114:	f107 000c 	add.w	r0, r7, #12
 8017118:	4621      	mov	r1, r4
 801711a:	f004 fe05 	bl	801bd28 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801711e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017122:	4618      	mov	r0, r3
 8017124:	f7f4 fcd9 	bl	800bada <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	33dc      	adds	r3, #220	; 0xdc
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	f107 020c 	add.w	r2, r7, #12
 8017134:	4611      	mov	r1, r2
 8017136:	6878      	ldr	r0, [r7, #4]
 8017138:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801713a:	f107 030c 	add.w	r3, r7, #12
 801713e:	4618      	mov	r0, r3
 8017140:	f001 fb5a 	bl	80187f8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8017144:	e000      	b.n	8017148 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8017146:	bf00      	nop
    }
}
 8017148:	3750      	adds	r7, #80	; 0x50
 801714a:	46bd      	mov	sp, r7
 801714c:	bdb0      	pop	{r4, r5, r7, pc}
 801714e:	bf00      	nop
 8017150:	0802432c 	.word	0x0802432c
 8017154:	08024394 	.word	0x08024394

08017158 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8017158:	b480      	push	{r7}
 801715a:	b083      	sub	sp, #12
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
 8017160:	460b      	mov	r3, r1
 8017162:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	78fa      	ldrb	r2, [r7, #3]
 8017168:	751a      	strb	r2, [r3, #20]
}
 801716a:	bf00      	nop
 801716c:	370c      	adds	r7, #12
 801716e:	46bd      	mov	sp, r7
 8017170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017174:	4770      	bx	lr
	...

08017178 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8017178:	b580      	push	{r7, lr}
 801717a:	b084      	sub	sp, #16
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
 8017180:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	33c4      	adds	r3, #196	; 0xc4
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	6838      	ldr	r0, [r7, #0]
 801718c:	4798      	blx	r3
    if (matchingExpectation_)
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	699b      	ldr	r3, [r3, #24]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d00a      	beq.n	80171ac <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	6999      	ldr	r1, [r3, #24]
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	699b      	ldr	r3, [r3, #24]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	3394      	adds	r3, #148	; 0x94
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	687a      	ldr	r2, [r7, #4]
 80171a6:	4610      	mov	r0, r2
 80171a8:	4798      	blx	r3
 80171aa:	e010      	b.n	80171ce <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 80171ac:	f107 0308 	add.w	r3, r7, #8
 80171b0:	4909      	ldr	r1, [pc, #36]	; (80171d8 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 80171b2:	4618      	mov	r0, r3
 80171b4:	f7f4 f8d9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80171b8:	f107 0308 	add.w	r3, r7, #8
 80171bc:	4619      	mov	r1, r3
 80171be:	6878      	ldr	r0, [r7, #4]
 80171c0:	f004 fdf8 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
 80171c4:	f107 0308 	add.w	r3, r7, #8
 80171c8:	4618      	mov	r0, r3
 80171ca:	f7f4 fc86 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 80171ce:	6878      	ldr	r0, [r7, #4]
 80171d0:	3710      	adds	r7, #16
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}
 80171d6:	bf00      	nop
 80171d8:	08024410 	.word	0x08024410

080171dc <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b082      	sub	sp, #8
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
 80171e4:	460b      	mov	r3, r1
 80171e6:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	3350      	adds	r3, #80	; 0x50
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	4798      	blx	r3
 80171f4:	4603      	mov	r3, r0
 80171f6:	f083 0301 	eor.w	r3, r3, #1
 80171fa:	b2db      	uxtb	r3, r3
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d001      	beq.n	8017204 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8017200:	78fb      	ldrb	r3, [r7, #3]
 8017202:	e007      	b.n	8017214 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	335c      	adds	r3, #92	; 0x5c
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	6878      	ldr	r0, [r7, #4]
 801720e:	4798      	blx	r3
 8017210:	4603      	mov	r3, r0
 8017212:	bf00      	nop
}
 8017214:	4618      	mov	r0, r3
 8017216:	3708      	adds	r7, #8
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}

0801721c <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 801721c:	b590      	push	{r4, r7, lr}
 801721e:	b091      	sub	sp, #68	; 0x44
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	3354      	adds	r3, #84	; 0x54
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	f107 0208 	add.w	r2, r7, #8
 8017230:	6879      	ldr	r1, [r7, #4]
 8017232:	4610      	mov	r0, r2
 8017234:	4798      	blx	r3
 8017236:	f107 0308 	add.w	r3, r7, #8
 801723a:	4618      	mov	r0, r3
 801723c:	f005 f896 	bl	801c36c <_ZNK14MockNamedValue12getBoolValueEv>
 8017240:	4603      	mov	r3, r0
 8017242:	461c      	mov	r4, r3
 8017244:	bf00      	nop
 8017246:	f107 0308 	add.w	r3, r7, #8
 801724a:	4618      	mov	r0, r3
 801724c:	f004 fddc 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 8017250:	4623      	mov	r3, r4
}
 8017252:	4618      	mov	r0, r3
 8017254:	3744      	adds	r7, #68	; 0x44
 8017256:	46bd      	mov	sp, r7
 8017258:	bd90      	pop	{r4, r7, pc}

0801725a <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 801725a:	b580      	push	{r7, lr}
 801725c:	b082      	sub	sp, #8
 801725e:	af00      	add	r7, sp, #0
 8017260:	6078      	str	r0, [r7, #4]
 8017262:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	3350      	adds	r3, #80	; 0x50
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	6878      	ldr	r0, [r7, #4]
 801726e:	4798      	blx	r3
 8017270:	4603      	mov	r3, r0
 8017272:	f083 0301 	eor.w	r3, r3, #1
 8017276:	b2db      	uxtb	r3, r3
 8017278:	2b00      	cmp	r3, #0
 801727a:	d001      	beq.n	8017280 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 801727c:	683b      	ldr	r3, [r7, #0]
 801727e:	e007      	b.n	8017290 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	3364      	adds	r3, #100	; 0x64
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	6878      	ldr	r0, [r7, #4]
 801728a:	4798      	blx	r3
 801728c:	4603      	mov	r3, r0
 801728e:	bf00      	nop
}
 8017290:	4618      	mov	r0, r3
 8017292:	3708      	adds	r7, #8
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}

08017298 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8017298:	b590      	push	{r4, r7, lr}
 801729a:	b091      	sub	sp, #68	; 0x44
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	3354      	adds	r3, #84	; 0x54
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	f107 0208 	add.w	r2, r7, #8
 80172ac:	6879      	ldr	r1, [r7, #4]
 80172ae:	4610      	mov	r0, r2
 80172b0:	4798      	blx	r3
 80172b2:	f107 0308 	add.w	r3, r7, #8
 80172b6:	4618      	mov	r0, r3
 80172b8:	f005 f8d0 	bl	801c45c <_ZNK14MockNamedValue11getIntValueEv>
 80172bc:	4604      	mov	r4, r0
 80172be:	bf00      	nop
 80172c0:	f107 0308 	add.w	r3, r7, #8
 80172c4:	4618      	mov	r0, r3
 80172c6:	f004 fd9f 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 80172ca:	4623      	mov	r3, r4
}
 80172cc:	4618      	mov	r0, r3
 80172ce:	3744      	adds	r7, #68	; 0x44
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd90      	pop	{r4, r7, pc}

080172d4 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 80172d4:	b590      	push	{r4, r7, lr}
 80172d6:	b091      	sub	sp, #68	; 0x44
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	3354      	adds	r3, #84	; 0x54
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	f107 0208 	add.w	r2, r7, #8
 80172e8:	6879      	ldr	r1, [r7, #4]
 80172ea:	4610      	mov	r0, r2
 80172ec:	4798      	blx	r3
 80172ee:	f107 0308 	add.w	r3, r7, #8
 80172f2:	4618      	mov	r0, r3
 80172f4:	f005 f93c 	bl	801c570 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 80172f8:	4604      	mov	r4, r0
 80172fa:	bf00      	nop
 80172fc:	f107 0308 	add.w	r3, r7, #8
 8017300:	4618      	mov	r0, r3
 8017302:	f004 fd81 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 8017306:	4623      	mov	r3, r4
}
 8017308:	4618      	mov	r0, r3
 801730a:	3744      	adds	r7, #68	; 0x44
 801730c:	46bd      	mov	sp, r7
 801730e:	bd90      	pop	{r4, r7, pc}

08017310 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b082      	sub	sp, #8
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
 8017318:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	3350      	adds	r3, #80	; 0x50
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	6878      	ldr	r0, [r7, #4]
 8017324:	4798      	blx	r3
 8017326:	4603      	mov	r3, r0
 8017328:	f083 0301 	eor.w	r3, r3, #1
 801732c:	b2db      	uxtb	r3, r3
 801732e:	2b00      	cmp	r3, #0
 8017330:	d001      	beq.n	8017336 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	e007      	b.n	8017346 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	3368      	adds	r3, #104	; 0x68
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	4798      	blx	r3
 8017342:	4603      	mov	r3, r0
 8017344:	bf00      	nop
}
 8017346:	4618      	mov	r0, r3
 8017348:	3708      	adds	r7, #8
 801734a:	46bd      	mov	sp, r7
 801734c:	bd80      	pop	{r7, pc}

0801734e <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 801734e:	b590      	push	{r4, r7, lr}
 8017350:	b091      	sub	sp, #68	; 0x44
 8017352:	af00      	add	r7, sp, #0
 8017354:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	3354      	adds	r3, #84	; 0x54
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	f107 0208 	add.w	r2, r7, #8
 8017362:	6879      	ldr	r1, [r7, #4]
 8017364:	4610      	mov	r0, r2
 8017366:	4798      	blx	r3
 8017368:	f107 0308 	add.w	r3, r7, #8
 801736c:	4618      	mov	r0, r3
 801736e:	f005 f89d 	bl	801c4ac <_ZNK14MockNamedValue15getLongIntValueEv>
 8017372:	4604      	mov	r4, r0
 8017374:	bf00      	nop
 8017376:	f107 0308 	add.w	r3, r7, #8
 801737a:	4618      	mov	r0, r3
 801737c:	f004 fd44 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 8017380:	4623      	mov	r3, r4
}
 8017382:	4618      	mov	r0, r3
 8017384:	3744      	adds	r7, #68	; 0x44
 8017386:	46bd      	mov	sp, r7
 8017388:	bd90      	pop	{r4, r7, pc}

0801738a <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 801738a:	b580      	push	{r7, lr}
 801738c:	b082      	sub	sp, #8
 801738e:	af00      	add	r7, sp, #0
 8017390:	6078      	str	r0, [r7, #4]
 8017392:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	3350      	adds	r3, #80	; 0x50
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	6878      	ldr	r0, [r7, #4]
 801739e:	4798      	blx	r3
 80173a0:	4603      	mov	r3, r0
 80173a2:	f083 0301 	eor.w	r3, r3, #1
 80173a6:	b2db      	uxtb	r3, r3
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d001      	beq.n	80173b0 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 80173ac:	683b      	ldr	r3, [r7, #0]
 80173ae:	e007      	b.n	80173c0 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	3370      	adds	r3, #112	; 0x70
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	6878      	ldr	r0, [r7, #4]
 80173ba:	4798      	blx	r3
 80173bc:	4603      	mov	r3, r0
 80173be:	bf00      	nop
}
 80173c0:	4618      	mov	r0, r3
 80173c2:	3708      	adds	r7, #8
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}

080173c8 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 80173c8:	b5b0      	push	{r4, r5, r7, lr}
 80173ca:	b084      	sub	sp, #16
 80173cc:	af02      	add	r7, sp, #8
 80173ce:	6078      	str	r0, [r7, #4]
 80173d0:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 80173d2:	f7fb fbad 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80173d6:	4604      	mov	r4, r0
 80173d8:	6823      	ldr	r3, [r4, #0]
 80173da:	3368      	adds	r3, #104	; 0x68
 80173dc:	681d      	ldr	r5, [r3, #0]
 80173de:	f7fb fbb7 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80173e2:	4603      	mov	r3, r0
 80173e4:	9300      	str	r3, [sp, #0]
 80173e6:	f240 13fb 	movw	r3, #507	; 0x1fb
 80173ea:	4a06      	ldr	r2, [pc, #24]	; (8017404 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 80173ec:	4906      	ldr	r1, [pc, #24]	; (8017408 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 80173ee:	4620      	mov	r0, r4
 80173f0:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80173f2:	2100      	movs	r1, #0
 80173f4:	6878      	ldr	r0, [r7, #4]
 80173f6:	f7f1 fffb 	bl	80093f0 <_ZN18cpputest_ulonglongC1Ei>
}
 80173fa:	6878      	ldr	r0, [r7, #4]
 80173fc:	3708      	adds	r7, #8
 80173fe:	46bd      	mov	sp, r7
 8017400:	bdb0      	pop	{r4, r5, r7, pc}
 8017402:	bf00      	nop
 8017404:	0802432c 	.word	0x0802432c
 8017408:	08024348 	.word	0x08024348

0801740c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 801740c:	b5b0      	push	{r4, r5, r7, lr}
 801740e:	b086      	sub	sp, #24
 8017410:	af02      	add	r7, sp, #8
 8017412:	60f8      	str	r0, [r7, #12]
 8017414:	60b9      	str	r1, [r7, #8]
 8017416:	4639      	mov	r1, r7
 8017418:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801741c:	f7fb fb88 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8017420:	4604      	mov	r4, r0
 8017422:	6823      	ldr	r3, [r4, #0]
 8017424:	3368      	adds	r3, #104	; 0x68
 8017426:	681d      	ldr	r5, [r3, #0]
 8017428:	f7fb fb92 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801742c:	4603      	mov	r3, r0
 801742e:	9300      	str	r3, [sp, #0]
 8017430:	f240 2301 	movw	r3, #513	; 0x201
 8017434:	4a06      	ldr	r2, [pc, #24]	; (8017450 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8017436:	4907      	ldr	r1, [pc, #28]	; (8017454 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8017438:	4620      	mov	r0, r4
 801743a:	47a8      	blx	r5
    return default_value;
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	461a      	mov	r2, r3
 8017440:	463b      	mov	r3, r7
 8017442:	cb03      	ldmia	r3!, {r0, r1}
 8017444:	6010      	str	r0, [r2, #0]
 8017446:	6051      	str	r1, [r2, #4]
}
 8017448:	68f8      	ldr	r0, [r7, #12]
 801744a:	3710      	adds	r7, #16
 801744c:	46bd      	mov	sp, r7
 801744e:	bdb0      	pop	{r4, r5, r7, pc}
 8017450:	0802432c 	.word	0x0802432c
 8017454:	08024348 	.word	0x08024348

08017458 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8017458:	b5b0      	push	{r4, r5, r7, lr}
 801745a:	b084      	sub	sp, #16
 801745c:	af02      	add	r7, sp, #8
 801745e:	6078      	str	r0, [r7, #4]
 8017460:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8017462:	f7fb fb65 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8017466:	4604      	mov	r4, r0
 8017468:	6823      	ldr	r3, [r4, #0]
 801746a:	3368      	adds	r3, #104	; 0x68
 801746c:	681d      	ldr	r5, [r3, #0]
 801746e:	f7fb fb6f 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017472:	4603      	mov	r3, r0
 8017474:	9300      	str	r3, [sp, #0]
 8017476:	f240 2307 	movw	r3, #519	; 0x207
 801747a:	4a06      	ldr	r2, [pc, #24]	; (8017494 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 801747c:	4906      	ldr	r1, [pc, #24]	; (8017498 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 801747e:	4620      	mov	r0, r4
 8017480:	47a8      	blx	r5
    return cpputest_longlong(0);
 8017482:	2100      	movs	r1, #0
 8017484:	6878      	ldr	r0, [r7, #4]
 8017486:	f7f1 ffa7 	bl	80093d8 <_ZN17cpputest_longlongC1Ei>
}
 801748a:	6878      	ldr	r0, [r7, #4]
 801748c:	3708      	adds	r7, #8
 801748e:	46bd      	mov	sp, r7
 8017490:	bdb0      	pop	{r4, r5, r7, pc}
 8017492:	bf00      	nop
 8017494:	0802432c 	.word	0x0802432c
 8017498:	08024374 	.word	0x08024374

0801749c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 801749c:	b5b0      	push	{r4, r5, r7, lr}
 801749e:	b086      	sub	sp, #24
 80174a0:	af02      	add	r7, sp, #8
 80174a2:	60f8      	str	r0, [r7, #12]
 80174a4:	60b9      	str	r1, [r7, #8]
 80174a6:	4639      	mov	r1, r7
 80174a8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80174ac:	f7fb fb40 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80174b0:	4604      	mov	r4, r0
 80174b2:	6823      	ldr	r3, [r4, #0]
 80174b4:	3368      	adds	r3, #104	; 0x68
 80174b6:	681d      	ldr	r5, [r3, #0]
 80174b8:	f7fb fb4a 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80174bc:	4603      	mov	r3, r0
 80174be:	9300      	str	r3, [sp, #0]
 80174c0:	f240 230d 	movw	r3, #525	; 0x20d
 80174c4:	4a06      	ldr	r2, [pc, #24]	; (80174e0 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 80174c6:	4907      	ldr	r1, [pc, #28]	; (80174e4 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 80174c8:	4620      	mov	r0, r4
 80174ca:	47a8      	blx	r5
    return default_value;
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	461a      	mov	r2, r3
 80174d0:	463b      	mov	r3, r7
 80174d2:	cb03      	ldmia	r3!, {r0, r1}
 80174d4:	6010      	str	r0, [r2, #0]
 80174d6:	6051      	str	r1, [r2, #4]
}
 80174d8:	68f8      	ldr	r0, [r7, #12]
 80174da:	3710      	adds	r7, #16
 80174dc:	46bd      	mov	sp, r7
 80174de:	bdb0      	pop	{r4, r5, r7, pc}
 80174e0:	0802432c 	.word	0x0802432c
 80174e4:	08024374 	.word	0x08024374

080174e8 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	ed2d 8b02 	vpush	{d8}
 80174ee:	b090      	sub	sp, #64	; 0x40
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	3354      	adds	r3, #84	; 0x54
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	f107 0208 	add.w	r2, r7, #8
 8017500:	6879      	ldr	r1, [r7, #4]
 8017502:	4610      	mov	r0, r2
 8017504:	4798      	blx	r3
 8017506:	f107 0308 	add.w	r3, r7, #8
 801750a:	4618      	mov	r0, r3
 801750c:	f005 f908 	bl	801c720 <_ZNK14MockNamedValue14getDoubleValueEv>
 8017510:	eeb0 8a40 	vmov.f32	s16, s0
 8017514:	eef0 8a60 	vmov.f32	s17, s1
 8017518:	bf00      	nop
 801751a:	f107 0308 	add.w	r3, r7, #8
 801751e:	4618      	mov	r0, r3
 8017520:	f004 fc72 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 8017524:	eeb0 7a48 	vmov.f32	s14, s16
 8017528:	eef0 7a68 	vmov.f32	s15, s17
}
 801752c:	eeb0 0a47 	vmov.f32	s0, s14
 8017530:	eef0 0a67 	vmov.f32	s1, s15
 8017534:	3740      	adds	r7, #64	; 0x40
 8017536:	46bd      	mov	sp, r7
 8017538:	ecbd 8b02 	vpop	{d8}
 801753c:	bd80      	pop	{r7, pc}

0801753e <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 801753e:	b580      	push	{r7, lr}
 8017540:	b084      	sub	sp, #16
 8017542:	af00      	add	r7, sp, #0
 8017544:	60f8      	str	r0, [r7, #12]
 8017546:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	3350      	adds	r3, #80	; 0x50
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	68f8      	ldr	r0, [r7, #12]
 8017554:	4798      	blx	r3
 8017556:	4603      	mov	r3, r0
 8017558:	f083 0301 	eor.w	r3, r3, #1
 801755c:	b2db      	uxtb	r3, r3
 801755e:	2b00      	cmp	r3, #0
 8017560:	d002      	beq.n	8017568 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8017562:	ed97 7b00 	vldr	d7, [r7]
 8017566:	e00a      	b.n	801757e <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	3398      	adds	r3, #152	; 0x98
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	68f8      	ldr	r0, [r7, #12]
 8017572:	4798      	blx	r3
 8017574:	eeb0 7a40 	vmov.f32	s14, s0
 8017578:	eef0 7a60 	vmov.f32	s15, s1
 801757c:	bf00      	nop
}
 801757e:	eeb0 0a47 	vmov.f32	s0, s14
 8017582:	eef0 0a67 	vmov.f32	s1, s15
 8017586:	3710      	adds	r7, #16
 8017588:	46bd      	mov	sp, r7
 801758a:	bd80      	pop	{r7, pc}

0801758c <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 801758c:	b590      	push	{r4, r7, lr}
 801758e:	b091      	sub	sp, #68	; 0x44
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	3354      	adds	r3, #84	; 0x54
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	f107 0208 	add.w	r2, r7, #8
 80175a0:	6879      	ldr	r1, [r7, #4]
 80175a2:	4610      	mov	r0, r2
 80175a4:	4798      	blx	r3
 80175a6:	f107 0308 	add.w	r3, r7, #8
 80175aa:	4618      	mov	r0, r3
 80175ac:	f004 ff06 	bl	801c3bc <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 80175b0:	4604      	mov	r4, r0
 80175b2:	bf00      	nop
 80175b4:	f107 0308 	add.w	r3, r7, #8
 80175b8:	4618      	mov	r0, r3
 80175ba:	f004 fc25 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 80175be:	4623      	mov	r3, r4
}
 80175c0:	4618      	mov	r0, r3
 80175c2:	3744      	adds	r7, #68	; 0x44
 80175c4:	46bd      	mov	sp, r7
 80175c6:	bd90      	pop	{r4, r7, pc}

080175c8 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b082      	sub	sp, #8
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
 80175d0:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	3350      	adds	r3, #80	; 0x50
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	4798      	blx	r3
 80175de:	4603      	mov	r3, r0
 80175e0:	f083 0301 	eor.w	r3, r3, #1
 80175e4:	b2db      	uxtb	r3, r3
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d001      	beq.n	80175ee <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 80175ea:	683b      	ldr	r3, [r7, #0]
 80175ec:	e007      	b.n	80175fe <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	3388      	adds	r3, #136	; 0x88
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	4798      	blx	r3
 80175fa:	4603      	mov	r3, r0
 80175fc:	bf00      	nop
}
 80175fe:	4618      	mov	r0, r3
 8017600:	3708      	adds	r7, #8
 8017602:	46bd      	mov	sp, r7
 8017604:	bd80      	pop	{r7, pc}

08017606 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8017606:	b580      	push	{r7, lr}
 8017608:	b082      	sub	sp, #8
 801760a:	af00      	add	r7, sp, #0
 801760c:	6078      	str	r0, [r7, #4]
 801760e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	3350      	adds	r3, #80	; 0x50
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	6878      	ldr	r0, [r7, #4]
 801761a:	4798      	blx	r3
 801761c:	4603      	mov	r3, r0
 801761e:	f083 0301 	eor.w	r3, r3, #1
 8017622:	b2db      	uxtb	r3, r3
 8017624:	2b00      	cmp	r3, #0
 8017626:	d001      	beq.n	801762c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8017628:	683b      	ldr	r3, [r7, #0]
 801762a:	e007      	b.n	801763c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	33a0      	adds	r3, #160	; 0xa0
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	4798      	blx	r3
 8017638:	4603      	mov	r3, r0
 801763a:	bf00      	nop
}
 801763c:	4618      	mov	r0, r3
 801763e:	3708      	adds	r7, #8
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}

08017644 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8017644:	b590      	push	{r4, r7, lr}
 8017646:	b091      	sub	sp, #68	; 0x44
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	3354      	adds	r3, #84	; 0x54
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	f107 0208 	add.w	r2, r7, #8
 8017658:	6879      	ldr	r1, [r7, #4]
 801765a:	4610      	mov	r0, r2
 801765c:	4798      	blx	r3
 801765e:	f107 0308 	add.w	r3, r7, #8
 8017662:	4618      	mov	r0, r3
 8017664:	f005 f8e0 	bl	801c828 <_ZNK14MockNamedValue15getPointerValueEv>
 8017668:	4604      	mov	r4, r0
 801766a:	bf00      	nop
 801766c:	f107 0308 	add.w	r3, r7, #8
 8017670:	4618      	mov	r0, r3
 8017672:	f004 fbc9 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 8017676:	4623      	mov	r3, r4
}
 8017678:	4618      	mov	r0, r3
 801767a:	3744      	adds	r7, #68	; 0x44
 801767c:	46bd      	mov	sp, r7
 801767e:	bd90      	pop	{r4, r7, pc}

08017680 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8017680:	b590      	push	{r4, r7, lr}
 8017682:	b091      	sub	sp, #68	; 0x44
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	3354      	adds	r3, #84	; 0x54
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	f107 0208 	add.w	r2, r7, #8
 8017694:	6879      	ldr	r1, [r7, #4]
 8017696:	4610      	mov	r0, r2
 8017698:	4798      	blx	r3
 801769a:	f107 0308 	add.w	r3, r7, #8
 801769e:	4618      	mov	r0, r3
 80176a0:	f005 f8ea 	bl	801c878 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80176a4:	4604      	mov	r4, r0
 80176a6:	bf00      	nop
 80176a8:	f107 0308 	add.w	r3, r7, #8
 80176ac:	4618      	mov	r0, r3
 80176ae:	f004 fbab 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 80176b2:	4623      	mov	r3, r4
}
 80176b4:	4618      	mov	r0, r3
 80176b6:	3744      	adds	r7, #68	; 0x44
 80176b8:	46bd      	mov	sp, r7
 80176ba:	bd90      	pop	{r4, r7, pc}

080176bc <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b082      	sub	sp, #8
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
 80176c4:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	3350      	adds	r3, #80	; 0x50
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	6878      	ldr	r0, [r7, #4]
 80176d0:	4798      	blx	r3
 80176d2:	4603      	mov	r3, r0
 80176d4:	f083 0301 	eor.w	r3, r3, #1
 80176d8:	b2db      	uxtb	r3, r3
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d001      	beq.n	80176e2 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 80176de:	683b      	ldr	r3, [r7, #0]
 80176e0:	e007      	b.n	80176f2 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	33a8      	adds	r3, #168	; 0xa8
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	6878      	ldr	r0, [r7, #4]
 80176ec:	4798      	blx	r3
 80176ee:	4603      	mov	r3, r0
 80176f0:	bf00      	nop
}
 80176f2:	4618      	mov	r0, r3
 80176f4:	3708      	adds	r7, #8
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}

080176fa <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 80176fa:	b590      	push	{r4, r7, lr}
 80176fc:	b091      	sub	sp, #68	; 0x44
 80176fe:	af00      	add	r7, sp, #0
 8017700:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	3354      	adds	r3, #84	; 0x54
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	f107 0208 	add.w	r2, r7, #8
 801770e:	6879      	ldr	r1, [r7, #4]
 8017710:	4610      	mov	r0, r2
 8017712:	4798      	blx	r3
 8017714:	f107 0308 	add.w	r3, r7, #8
 8017718:	4618      	mov	r0, r3
 801771a:	f005 f8d5 	bl	801c8c8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 801771e:	4604      	mov	r4, r0
 8017720:	bf00      	nop
 8017722:	f107 0308 	add.w	r3, r7, #8
 8017726:	4618      	mov	r0, r3
 8017728:	f004 fb6e 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 801772c:	4623      	mov	r3, r4
}
 801772e:	4618      	mov	r0, r3
 8017730:	3744      	adds	r7, #68	; 0x44
 8017732:	46bd      	mov	sp, r7
 8017734:	bd90      	pop	{r4, r7, pc}

08017736 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 8017736:	b580      	push	{r7, lr}
 8017738:	b082      	sub	sp, #8
 801773a:	af00      	add	r7, sp, #0
 801773c:	6078      	str	r0, [r7, #4]
 801773e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	3350      	adds	r3, #80	; 0x50
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	6878      	ldr	r0, [r7, #4]
 801774a:	4798      	blx	r3
 801774c:	4603      	mov	r3, r0
 801774e:	f083 0301 	eor.w	r3, r3, #1
 8017752:	b2db      	uxtb	r3, r3
 8017754:	2b00      	cmp	r3, #0
 8017756:	d001      	beq.n	801775c <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	e007      	b.n	801776c <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	33b0      	adds	r3, #176	; 0xb0
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	6878      	ldr	r0, [r7, #4]
 8017766:	4798      	blx	r3
 8017768:	4603      	mov	r3, r0
 801776a:	bf00      	nop
}
 801776c:	4618      	mov	r0, r3
 801776e:	3708      	adds	r7, #8
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}

08017774 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b082      	sub	sp, #8
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
 801777c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	3350      	adds	r3, #80	; 0x50
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	6878      	ldr	r0, [r7, #4]
 8017788:	4798      	blx	r3
 801778a:	4603      	mov	r3, r0
 801778c:	f083 0301 	eor.w	r3, r3, #1
 8017790:	b2db      	uxtb	r3, r3
 8017792:	2b00      	cmp	r3, #0
 8017794:	d001      	beq.n	801779a <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 8017796:	683b      	ldr	r3, [r7, #0]
 8017798:	e007      	b.n	80177aa <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	3394      	adds	r3, #148	; 0x94
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	4798      	blx	r3
 80177a6:	4603      	mov	r3, r0
 80177a8:	bf00      	nop
}
 80177aa:	4618      	mov	r0, r3
 80177ac:	3708      	adds	r7, #8
 80177ae:	46bd      	mov	sp, r7
 80177b0:	bd80      	pop	{r7, pc}

080177b2 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 80177b2:	b590      	push	{r4, r7, lr}
 80177b4:	b091      	sub	sp, #68	; 0x44
 80177b6:	af00      	add	r7, sp, #0
 80177b8:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	3354      	adds	r3, #84	; 0x54
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	f107 0208 	add.w	r2, r7, #8
 80177c6:	6879      	ldr	r1, [r7, #4]
 80177c8:	4610      	mov	r0, r2
 80177ca:	4798      	blx	r3
 80177cc:	f107 0308 	add.w	r3, r7, #8
 80177d0:	4618      	mov	r0, r3
 80177d2:	f005 f801 	bl	801c7d8 <_ZNK14MockNamedValue14getStringValueEv>
 80177d6:	4604      	mov	r4, r0
 80177d8:	bf00      	nop
 80177da:	f107 0308 	add.w	r3, r7, #8
 80177de:	4618      	mov	r0, r3
 80177e0:	f004 fb12 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 80177e4:	4623      	mov	r3, r4
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	3744      	adds	r7, #68	; 0x44
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd90      	pop	{r4, r7, pc}

080177ee <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 80177ee:	b590      	push	{r4, r7, lr}
 80177f0:	b093      	sub	sp, #76	; 0x4c
 80177f2:	af00      	add	r7, sp, #0
 80177f4:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	3354      	adds	r3, #84	; 0x54
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	f107 0210 	add.w	r2, r7, #16
 8017802:	6879      	ldr	r1, [r7, #4]
 8017804:	4610      	mov	r0, r2
 8017806:	4798      	blx	r3
 8017808:	f107 0308 	add.w	r3, r7, #8
 801780c:	f107 0210 	add.w	r2, r7, #16
 8017810:	4611      	mov	r1, r2
 8017812:	4618      	mov	r0, r3
 8017814:	f004 fd8c 	bl	801c330 <_ZNK14MockNamedValue7getNameEv>
 8017818:	f107 0308 	add.w	r3, r7, #8
 801781c:	4618      	mov	r0, r3
 801781e:	f7f4 f94b 	bl	800bab8 <_ZNK12SimpleString7isEmptyEv>
 8017822:	4603      	mov	r3, r0
 8017824:	f083 0301 	eor.w	r3, r3, #1
 8017828:	b2dc      	uxtb	r4, r3
 801782a:	f107 0308 	add.w	r3, r7, #8
 801782e:	4618      	mov	r0, r3
 8017830:	f7f4 f953 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017834:	f107 0310 	add.w	r3, r7, #16
 8017838:	4618      	mov	r0, r3
 801783a:	f004 fae5 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 801783e:	4623      	mov	r3, r4
}
 8017840:	4618      	mov	r0, r3
 8017842:	374c      	adds	r7, #76	; 0x4c
 8017844:	46bd      	mov	sp, r7
 8017846:	bd90      	pop	{r4, r7, pc}

08017848 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8017848:	b590      	push	{r4, r7, lr}
 801784a:	b095      	sub	sp, #84	; 0x54
 801784c:	af02      	add	r7, sp, #8
 801784e:	6078      	str	r0, [r7, #4]
 8017850:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	33c0      	adds	r3, #192	; 0xc0
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	6878      	ldr	r0, [r7, #4]
 801785c:	4798      	blx	r3
 801785e:	4603      	mov	r3, r0
 8017860:	2b00      	cmp	r3, #0
 8017862:	d001      	beq.n	8017868 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8017864:	687c      	ldr	r4, [r7, #4]
 8017866:	e053      	b.n	8017910 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	331c      	adds	r3, #28
 801786c:	6839      	ldr	r1, [r7, #0]
 801786e:	4618      	mov	r0, r3
 8017870:	f003 f8ca 	bl	801aa08 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	699b      	ldr	r3, [r3, #24]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d109      	bne.n	8017890 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	331c      	adds	r3, #28
 8017880:	4618      	mov	r0, r3
 8017882:	f002 fe20 	bl	801a4c6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8017886:	4603      	mov	r3, r0
 8017888:	2b00      	cmp	r3, #0
 801788a:	d001      	beq.n	8017890 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801788c:	2301      	movs	r3, #1
 801788e:	e000      	b.n	8017892 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8017890:	2300      	movs	r3, #0
 8017892:	2b00      	cmp	r3, #0
 8017894:	d02c      	beq.n	80178f0 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	33cc      	adds	r3, #204	; 0xcc
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	6878      	ldr	r0, [r7, #4]
 80178a0:	4798      	blx	r3
 80178a2:	4604      	mov	r4, r0
 80178a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80178a8:	6879      	ldr	r1, [r7, #4]
 80178aa:	4618      	mov	r0, r3
 80178ac:	f7fe fd3f 	bl	801632e <_ZNK21MockCheckedActualCall7getNameEv>
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80178b8:	f107 000c 	add.w	r0, r7, #12
 80178bc:	9300      	str	r3, [sp, #0]
 80178be:	683b      	ldr	r3, [r7, #0]
 80178c0:	4621      	mov	r1, r4
 80178c2:	f004 f9fb 	bl	801bcbc <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 80178c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80178ca:	4618      	mov	r0, r3
 80178cc:	f7f4 f905 	bl	800bada <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	33dc      	adds	r3, #220	; 0xdc
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	f107 020c 	add.w	r2, r7, #12
 80178dc:	4611      	mov	r1, r2
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	4798      	blx	r3
        return *this;
 80178e2:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 80178e4:	f107 030c 	add.w	r3, r7, #12
 80178e8:	4618      	mov	r0, r3
 80178ea:	f000 ffa7 	bl	801883c <_ZN27MockUnexpectedObjectFailureD1Ev>
 80178ee:	e00f      	b.n	8017910 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	331c      	adds	r3, #28
 80178f4:	4618      	mov	r0, r3
 80178f6:	f003 f9a7 	bl	801ac48 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	699b      	ldr	r3, [r3, #24]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d105      	bne.n	801790e <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	33d8      	adds	r3, #216	; 0xd8
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	6878      	ldr	r0, [r7, #4]
 801790c:	4798      	blx	r3
    }

    return *this;
 801790e:	687c      	ldr	r4, [r7, #4]
 8017910:	4623      	mov	r3, r4
}
 8017912:	4618      	mov	r0, r3
 8017914:	374c      	adds	r7, #76	; 0x4c
 8017916:	46bd      	mov	sp, r7
 8017918:	bd90      	pop	{r4, r7, pc}
	...

0801791c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 801791c:	b590      	push	{r4, r7, lr}
 801791e:	b087      	sub	sp, #28
 8017920:	af00      	add	r7, sp, #0
 8017922:	60f8      	str	r0, [r7, #12]
 8017924:	60b9      	str	r1, [r7, #8]
 8017926:	607a      	str	r2, [r7, #4]
 8017928:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801792a:	f240 2282 	movw	r2, #642	; 0x282
 801792e:	4913      	ldr	r1, [pc, #76]	; (801797c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8017930:	2018      	movs	r0, #24
 8017932:	f7f1 f957 	bl	8008be4 <_ZnwjPKci>
 8017936:	4604      	mov	r4, r0
 8017938:	683b      	ldr	r3, [r7, #0]
 801793a:	687a      	ldr	r2, [r7, #4]
 801793c:	68b9      	ldr	r1, [r7, #8]
 801793e:	4620      	mov	r0, r4
 8017940:	f7fe fa48 	bl	8015dd4 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8017944:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801794a:	2b00      	cmp	r3, #0
 801794c:	d103      	bne.n	8017956 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	693a      	ldr	r2, [r7, #16]
 8017952:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8017954:	e00d      	b.n	8017972 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801795a:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 801795c:	697b      	ldr	r3, [r7, #20]
 801795e:	695b      	ldr	r3, [r3, #20]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d003      	beq.n	801796c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8017964:	697b      	ldr	r3, [r7, #20]
 8017966:	695b      	ldr	r3, [r3, #20]
 8017968:	617b      	str	r3, [r7, #20]
 801796a:	e7f7      	b.n	801795c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 801796c:	697b      	ldr	r3, [r7, #20]
 801796e:	693a      	ldr	r2, [r7, #16]
 8017970:	615a      	str	r2, [r3, #20]
}
 8017972:	bf00      	nop
 8017974:	371c      	adds	r7, #28
 8017976:	46bd      	mov	sp, r7
 8017978:	bd90      	pop	{r4, r7, pc}
 801797a:	bf00      	nop
 801797c:	0802432c 	.word	0x0802432c

08017980 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8017980:	b580      	push	{r7, lr}
 8017982:	b082      	sub	sp, #8
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	3308      	adds	r3, #8
 801798c:	4618      	mov	r0, r3
 801798e:	f7f4 f8a4 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	4618      	mov	r0, r3
 8017996:	f7f4 f8a0 	bl	800bada <_ZN12SimpleStringD1Ev>
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	4618      	mov	r0, r3
 801799e:	3708      	adds	r7, #8
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}

080179a4 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 80179a4:	b590      	push	{r4, r7, lr}
 80179a6:	b085      	sub	sp, #20
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179b0:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 80179b2:	2300      	movs	r3, #0
 80179b4:	60bb      	str	r3, [r7, #8]

    while (current) {
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d012      	beq.n	80179e2 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	695b      	ldr	r3, [r3, #20]
 80179c4:	60fb      	str	r3, [r7, #12]
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	68fa      	ldr	r2, [r7, #12]
 80179ca:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 80179cc:	68bc      	ldr	r4, [r7, #8]
 80179ce:	2c00      	cmp	r4, #0
 80179d0:	d0f1      	beq.n	80179b6 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 80179d2:	4620      	mov	r0, r4
 80179d4:	f7ff ffd4 	bl	8017980 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 80179d8:	2118      	movs	r1, #24
 80179da:	4620      	mov	r0, r4
 80179dc:	f7f1 f916 	bl	8008c0c <_ZdlPvj>
    while (current) {
 80179e0:	e7e9      	b.n	80179b6 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 80179e2:	bf00      	nop
 80179e4:	3714      	adds	r7, #20
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd90      	pop	{r4, r7, pc}
	...

080179ec <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b082      	sub	sp, #8
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	4618      	mov	r0, r3
 80179f8:	f7fe fc6a 	bl	80162d0 <_ZN14MockActualCallC1Ev>
 80179fc:	4a06      	ldr	r2, [pc, #24]	; (8017a18 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	601a      	str	r2, [r3, #0]
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	3304      	adds	r3, #4
 8017a06:	4905      	ldr	r1, [pc, #20]	; (8017a1c <_ZN19MockActualCallTraceC1Ev+0x30>)
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f7f3 fcae 	bl	800b36a <_ZN12SimpleStringC1EPKc>
{
}
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	4618      	mov	r0, r3
 8017a12:	3708      	adds	r7, #8
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}
 8017a18:	08026a2c 	.word	0x08026a2c
 8017a1c:	08024314 	.word	0x08024314

08017a20 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b082      	sub	sp, #8
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
 8017a28:	4a08      	ldr	r2, [pc, #32]	; (8017a4c <_ZN19MockActualCallTraceD1Ev+0x2c>)
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	601a      	str	r2, [r3, #0]
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	3304      	adds	r3, #4
 8017a32:	4618      	mov	r0, r3
 8017a34:	f7f4 f851 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	f7fe fc58 	bl	80162f0 <_ZN14MockActualCallD1Ev>
{
}
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	4618      	mov	r0, r3
 8017a44:	3708      	adds	r7, #8
 8017a46:	46bd      	mov	sp, r7
 8017a48:	bd80      	pop	{r7, pc}
 8017a4a:	bf00      	nop
 8017a4c:	08026a2c 	.word	0x08026a2c

08017a50 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
}
 8017a58:	6878      	ldr	r0, [r7, #4]
 8017a5a:	f7ff ffe1 	bl	8017a20 <_ZN19MockActualCallTraceD1Ev>
 8017a5e:	210c      	movs	r1, #12
 8017a60:	6878      	ldr	r0, [r7, #4]
 8017a62:	f7f1 f8d3 	bl	8008c0c <_ZdlPvj>
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	4618      	mov	r0, r3
 8017a6a:	3708      	adds	r7, #8
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}

08017a70 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b082      	sub	sp, #8
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
 8017a78:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	3304      	adds	r3, #4
 8017a7e:	4907      	ldr	r1, [pc, #28]	; (8017a9c <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8017a80:	4618      	mov	r0, r3
 8017a82:	f7f4 f8b9 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	3304      	adds	r3, #4
 8017a8a:	6839      	ldr	r1, [r7, #0]
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7f4 f8a1 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    return *this;
 8017a92:	687b      	ldr	r3, [r7, #4]
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	3708      	adds	r7, #8
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd80      	pop	{r7, pc}
 8017a9c:	08024420 	.word	0x08024420

08017aa0 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8017aa0:	b590      	push	{r4, r7, lr}
 8017aa2:	b085      	sub	sp, #20
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	3304      	adds	r3, #4
 8017aae:	490e      	ldr	r1, [pc, #56]	; (8017ae8 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7f4 f8a1 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	1d1c      	adds	r4, r3, #4
 8017aba:	f107 0308 	add.w	r3, r7, #8
 8017abe:	6839      	ldr	r1, [r7, #0]
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7f4 fd39 	bl	800c538 <_Z10StringFromj>
 8017ac6:	f107 0308 	add.w	r3, r7, #8
 8017aca:	4619      	mov	r1, r3
 8017acc:	4620      	mov	r0, r4
 8017ace:	f7f4 f881 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8017ad2:	f107 0308 	add.w	r3, r7, #8
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7f3 ffff 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8017adc:	687b      	ldr	r3, [r7, #4]
}
 8017ade:	4618      	mov	r0, r3
 8017ae0:	3714      	adds	r7, #20
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	bd90      	pop	{r4, r7, pc}
 8017ae6:	bf00      	nop
 8017ae8:	08024430 	.word	0x08024430

08017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b082      	sub	sp, #8
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
 8017af4:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	3304      	adds	r3, #4
 8017afa:	490a      	ldr	r1, [pc, #40]	; (8017b24 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8017afc:	4618      	mov	r0, r3
 8017afe:	f7f4 f87b 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	3304      	adds	r3, #4
 8017b06:	6839      	ldr	r1, [r7, #0]
 8017b08:	4618      	mov	r0, r3
 8017b0a:	f7f4 f863 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	3304      	adds	r3, #4
 8017b12:	4905      	ldr	r1, [pc, #20]	; (8017b28 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7f4 f86f 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
}
 8017b1a:	bf00      	nop
 8017b1c:	3708      	adds	r7, #8
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
 8017b22:	bf00      	nop
 8017b24:	08024440 	.word	0x08024440
 8017b28:	08024444 	.word	0x08024444

08017b2c <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8017b2c:	b590      	push	{r4, r7, lr}
 8017b2e:	b087      	sub	sp, #28
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	60f8      	str	r0, [r7, #12]
 8017b34:	60b9      	str	r1, [r7, #8]
 8017b36:	4613      	mov	r3, r2
 8017b38:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 8017b3a:	68b9      	ldr	r1, [r7, #8]
 8017b3c:	68f8      	ldr	r0, [r7, #12]
 8017b3e:	f7ff ffd5 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	1d1c      	adds	r4, r3, #4
 8017b46:	f107 0310 	add.w	r3, r7, #16
 8017b4a:	79fa      	ldrb	r2, [r7, #7]
 8017b4c:	4611      	mov	r1, r2
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f7f4 fa34 	bl	800bfbc <_Z10StringFromb>
 8017b54:	f107 0310 	add.w	r3, r7, #16
 8017b58:	4619      	mov	r1, r3
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	f7f4 f83a 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8017b60:	f107 0310 	add.w	r3, r7, #16
 8017b64:	4618      	mov	r0, r3
 8017b66:	f7f3 ffb8 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8017b6a:	68fb      	ldr	r3, [r7, #12]
}
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	371c      	adds	r7, #28
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd90      	pop	{r4, r7, pc}

08017b74 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8017b74:	b590      	push	{r4, r7, lr}
 8017b76:	b08f      	sub	sp, #60	; 0x3c
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	60f8      	str	r0, [r7, #12]
 8017b7c:	60b9      	str	r1, [r7, #8]
 8017b7e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017b80:	68b9      	ldr	r1, [r7, #8]
 8017b82:	68f8      	ldr	r0, [r7, #12]
 8017b84:	f7ff ffb2 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	1d1c      	adds	r4, r3, #4
 8017b8c:	f107 0320 	add.w	r3, r7, #32
 8017b90:	6879      	ldr	r1, [r7, #4]
 8017b92:	4618      	mov	r0, r3
 8017b94:	f7f4 fcd0 	bl	800c538 <_Z10StringFromj>
 8017b98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017b9c:	491f      	ldr	r1, [pc, #124]	; (8017c1c <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7f3 fbe3 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8017ba4:	f107 0318 	add.w	r3, r7, #24
 8017ba8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017bac:	f107 0120 	add.w	r1, r7, #32
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f7f3 fff4 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 8017bb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017bba:	6879      	ldr	r1, [r7, #4]
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f7f4 fb5f 	bl	800c280 <_Z30BracketsFormattedHexStringFromj>
 8017bc2:	f107 0310 	add.w	r3, r7, #16
 8017bc6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017bca:	f107 0118 	add.w	r1, r7, #24
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f7f3 ffe5 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 8017bd4:	f107 0310 	add.w	r3, r7, #16
 8017bd8:	4619      	mov	r1, r3
 8017bda:	4620      	mov	r0, r4
 8017bdc:	f7f3 fffa 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8017be0:	f107 0310 	add.w	r3, r7, #16
 8017be4:	4618      	mov	r0, r3
 8017be6:	f7f3 ff78 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7f3 ff73 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017bf4:	f107 0318 	add.w	r3, r7, #24
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f7f3 ff6e 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017c02:	4618      	mov	r0, r3
 8017c04:	f7f3 ff69 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017c08:	f107 0320 	add.w	r3, r7, #32
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f7f3 ff64 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8017c12:	68fb      	ldr	r3, [r7, #12]
}
 8017c14:	4618      	mov	r0, r3
 8017c16:	373c      	adds	r7, #60	; 0x3c
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	bd90      	pop	{r4, r7, pc}
 8017c1c:	08024440 	.word	0x08024440

08017c20 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8017c20:	b590      	push	{r4, r7, lr}
 8017c22:	b08f      	sub	sp, #60	; 0x3c
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	60f8      	str	r0, [r7, #12]
 8017c28:	60b9      	str	r1, [r7, #8]
 8017c2a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017c2c:	68b9      	ldr	r1, [r7, #8]
 8017c2e:	68f8      	ldr	r0, [r7, #12]
 8017c30:	f7ff ff5c 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	1d1c      	adds	r4, r3, #4
 8017c38:	f107 0320 	add.w	r3, r7, #32
 8017c3c:	6879      	ldr	r1, [r7, #4]
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7f4 fa12 	bl	800c068 <_Z10StringFromi>
 8017c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017c48:	491f      	ldr	r1, [pc, #124]	; (8017cc8 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	f7f3 fb8d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8017c50:	f107 0318 	add.w	r3, r7, #24
 8017c54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017c58:	f107 0120 	add.w	r1, r7, #32
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	f7f3 ff9e 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 8017c62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017c66:	6879      	ldr	r1, [r7, #4]
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7f4 faed 	bl	800c248 <_Z30BracketsFormattedHexStringFromi>
 8017c6e:	f107 0310 	add.w	r3, r7, #16
 8017c72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017c76:	f107 0118 	add.w	r1, r7, #24
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f7f3 ff8f 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 8017c80:	f107 0310 	add.w	r3, r7, #16
 8017c84:	4619      	mov	r1, r3
 8017c86:	4620      	mov	r0, r4
 8017c88:	f7f3 ffa4 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8017c8c:	f107 0310 	add.w	r3, r7, #16
 8017c90:	4618      	mov	r0, r3
 8017c92:	f7f3 ff22 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017c96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f7f3 ff1d 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017ca0:	f107 0318 	add.w	r3, r7, #24
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f7f3 ff18 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7f3 ff13 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017cb4:	f107 0320 	add.w	r3, r7, #32
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f7f3 ff0e 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8017cbe:	68fb      	ldr	r3, [r7, #12]
}
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	373c      	adds	r7, #60	; 0x3c
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	bd90      	pop	{r4, r7, pc}
 8017cc8:	08024440 	.word	0x08024440

08017ccc <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8017ccc:	b590      	push	{r4, r7, lr}
 8017cce:	b08f      	sub	sp, #60	; 0x3c
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	60f8      	str	r0, [r7, #12]
 8017cd4:	60b9      	str	r1, [r7, #8]
 8017cd6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017cd8:	68b9      	ldr	r1, [r7, #8]
 8017cda:	68f8      	ldr	r0, [r7, #12]
 8017cdc:	f7ff ff06 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	1d1c      	adds	r4, r3, #4
 8017ce4:	f107 0320 	add.w	r3, r7, #32
 8017ce8:	6879      	ldr	r1, [r7, #4]
 8017cea:	4618      	mov	r0, r3
 8017cec:	f7f4 fc36 	bl	800c55c <_Z10StringFromm>
 8017cf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017cf4:	491f      	ldr	r1, [pc, #124]	; (8017d74 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7f3 fb37 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8017cfc:	f107 0318 	add.w	r3, r7, #24
 8017d00:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017d04:	f107 0120 	add.w	r1, r7, #32
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7f3 ff48 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 8017d0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017d12:	6879      	ldr	r1, [r7, #4]
 8017d14:	4618      	mov	r0, r3
 8017d16:	f7f4 faeb 	bl	800c2f0 <_Z30BracketsFormattedHexStringFromm>
 8017d1a:	f107 0310 	add.w	r3, r7, #16
 8017d1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017d22:	f107 0118 	add.w	r1, r7, #24
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7f3 ff39 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 8017d2c:	f107 0310 	add.w	r3, r7, #16
 8017d30:	4619      	mov	r1, r3
 8017d32:	4620      	mov	r0, r4
 8017d34:	f7f3 ff4e 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8017d38:	f107 0310 	add.w	r3, r7, #16
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f7f3 fecc 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017d42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017d46:	4618      	mov	r0, r3
 8017d48:	f7f3 fec7 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017d4c:	f107 0318 	add.w	r3, r7, #24
 8017d50:	4618      	mov	r0, r3
 8017d52:	f7f3 fec2 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f7f3 febd 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017d60:	f107 0320 	add.w	r3, r7, #32
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7f3 feb8 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8017d6a:	68fb      	ldr	r3, [r7, #12]
}
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	373c      	adds	r7, #60	; 0x3c
 8017d70:	46bd      	mov	sp, r7
 8017d72:	bd90      	pop	{r4, r7, pc}
 8017d74:	08024440 	.word	0x08024440

08017d78 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8017d78:	b590      	push	{r4, r7, lr}
 8017d7a:	b08f      	sub	sp, #60	; 0x3c
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	60f8      	str	r0, [r7, #12]
 8017d80:	60b9      	str	r1, [r7, #8]
 8017d82:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017d84:	68b9      	ldr	r1, [r7, #8]
 8017d86:	68f8      	ldr	r0, [r7, #12]
 8017d88:	f7ff feb0 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	1d1c      	adds	r4, r3, #4
 8017d90:	f107 0320 	add.w	r3, r7, #32
 8017d94:	6879      	ldr	r1, [r7, #4]
 8017d96:	4618      	mov	r0, r3
 8017d98:	f7f4 f978 	bl	800c08c <_Z10StringFroml>
 8017d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017da0:	491f      	ldr	r1, [pc, #124]	; (8017e20 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7f3 fae1 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8017da8:	f107 0318 	add.w	r3, r7, #24
 8017dac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017db0:	f107 0120 	add.w	r1, r7, #32
 8017db4:	4618      	mov	r0, r3
 8017db6:	f7f3 fef2 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 8017dba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017dbe:	6879      	ldr	r1, [r7, #4]
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f7f4 fa79 	bl	800c2b8 <_Z30BracketsFormattedHexStringFroml>
 8017dc6:	f107 0310 	add.w	r3, r7, #16
 8017dca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017dce:	f107 0118 	add.w	r1, r7, #24
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	f7f3 fee3 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 8017dd8:	f107 0310 	add.w	r3, r7, #16
 8017ddc:	4619      	mov	r1, r3
 8017dde:	4620      	mov	r0, r4
 8017de0:	f7f3 fef8 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8017de4:	f107 0310 	add.w	r3, r7, #16
 8017de8:	4618      	mov	r0, r3
 8017dea:	f7f3 fe76 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017df2:	4618      	mov	r0, r3
 8017df4:	f7f3 fe71 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017df8:	f107 0318 	add.w	r3, r7, #24
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f7f3 fe6c 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017e06:	4618      	mov	r0, r3
 8017e08:	f7f3 fe67 	bl	800bada <_ZN12SimpleStringD1Ev>
 8017e0c:	f107 0320 	add.w	r3, r7, #32
 8017e10:	4618      	mov	r0, r3
 8017e12:	f7f3 fe62 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8017e16:	68fb      	ldr	r3, [r7, #12]
}
 8017e18:	4618      	mov	r0, r3
 8017e1a:	373c      	adds	r7, #60	; 0x3c
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd90      	pop	{r4, r7, pc}
 8017e20:	08024440 	.word	0x08024440

08017e24 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8017e24:	b5b0      	push	{r4, r5, r7, lr}
 8017e26:	b086      	sub	sp, #24
 8017e28:	af02      	add	r7, sp, #8
 8017e2a:	60f8      	str	r0, [r7, #12]
 8017e2c:	60b9      	str	r1, [r7, #8]
 8017e2e:	4639      	mov	r1, r7
 8017e30:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017e34:	f7fa fe7c 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8017e38:	4604      	mov	r4, r0
 8017e3a:	6823      	ldr	r3, [r4, #0]
 8017e3c:	3368      	adds	r3, #104	; 0x68
 8017e3e:	681d      	ldr	r5, [r3, #0]
 8017e40:	f7fa fe86 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017e44:	4603      	mov	r3, r0
 8017e46:	9300      	str	r3, [sp, #0]
 8017e48:	f240 23ee 	movw	r3, #750	; 0x2ee
 8017e4c:	4a04      	ldr	r2, [pc, #16]	; (8017e60 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8017e4e:	4905      	ldr	r1, [pc, #20]	; (8017e64 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8017e50:	4620      	mov	r0, r4
 8017e52:	47a8      	blx	r5
    return *this;
 8017e54:	68fb      	ldr	r3, [r7, #12]
}
 8017e56:	4618      	mov	r0, r3
 8017e58:	3710      	adds	r7, #16
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8017e5e:	bf00      	nop
 8017e60:	0802432c 	.word	0x0802432c
 8017e64:	08024348 	.word	0x08024348

08017e68 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8017e68:	b5b0      	push	{r4, r5, r7, lr}
 8017e6a:	b086      	sub	sp, #24
 8017e6c:	af02      	add	r7, sp, #8
 8017e6e:	60f8      	str	r0, [r7, #12]
 8017e70:	60b9      	str	r1, [r7, #8]
 8017e72:	4639      	mov	r1, r7
 8017e74:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017e78:	f7fa fe5a 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8017e7c:	4604      	mov	r4, r0
 8017e7e:	6823      	ldr	r3, [r4, #0]
 8017e80:	3368      	adds	r3, #104	; 0x68
 8017e82:	681d      	ldr	r5, [r3, #0]
 8017e84:	f7fa fe64 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	9300      	str	r3, [sp, #0]
 8017e8c:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8017e90:	4a04      	ldr	r2, [pc, #16]	; (8017ea4 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8017e92:	4905      	ldr	r1, [pc, #20]	; (8017ea8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8017e94:	4620      	mov	r0, r4
 8017e96:	47a8      	blx	r5
    return *this;
 8017e98:	68fb      	ldr	r3, [r7, #12]
}
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	3710      	adds	r7, #16
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8017ea2:	bf00      	nop
 8017ea4:	0802432c 	.word	0x0802432c
 8017ea8:	08024374 	.word	0x08024374

08017eac <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8017eac:	b590      	push	{r4, r7, lr}
 8017eae:	b087      	sub	sp, #28
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	60f8      	str	r0, [r7, #12]
 8017eb4:	60b9      	str	r1, [r7, #8]
 8017eb6:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8017eba:	68b9      	ldr	r1, [r7, #8]
 8017ebc:	68f8      	ldr	r0, [r7, #12]
 8017ebe:	f7ff fe15 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	1d1c      	adds	r4, r3, #4
 8017ec6:	f107 0310 	add.w	r3, r7, #16
 8017eca:	2106      	movs	r1, #6
 8017ecc:	ed97 0b00 	vldr	d0, [r7]
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7f4 fac7 	bl	800c464 <_Z10StringFromdi>
 8017ed6:	f107 0310 	add.w	r3, r7, #16
 8017eda:	4619      	mov	r1, r3
 8017edc:	4620      	mov	r0, r4
 8017ede:	f7f3 fe79 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8017ee2:	f107 0310 	add.w	r3, r7, #16
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f7f3 fdf7 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8017eec:	68fb      	ldr	r3, [r7, #12]
}
 8017eee:	4618      	mov	r0, r3
 8017ef0:	371c      	adds	r7, #28
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	bd90      	pop	{r4, r7, pc}

08017ef6 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 8017ef6:	b590      	push	{r4, r7, lr}
 8017ef8:	b087      	sub	sp, #28
 8017efa:	af00      	add	r7, sp, #0
 8017efc:	60f8      	str	r0, [r7, #12]
 8017efe:	60b9      	str	r1, [r7, #8]
 8017f00:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017f02:	68b9      	ldr	r1, [r7, #8]
 8017f04:	68f8      	ldr	r0, [r7, #12]
 8017f06:	f7ff fdf1 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	1d1c      	adds	r4, r3, #4
 8017f0e:	f107 0310 	add.w	r3, r7, #16
 8017f12:	6879      	ldr	r1, [r7, #4]
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7f4 f86d 	bl	800bff4 <_Z10StringFromPKc>
 8017f1a:	f107 0310 	add.w	r3, r7, #16
 8017f1e:	4619      	mov	r1, r3
 8017f20:	4620      	mov	r0, r4
 8017f22:	f7f3 fe57 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8017f26:	f107 0310 	add.w	r3, r7, #16
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	f7f3 fdd5 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8017f30:	68fb      	ldr	r3, [r7, #12]
}
 8017f32:	4618      	mov	r0, r3
 8017f34:	371c      	adds	r7, #28
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd90      	pop	{r4, r7, pc}

08017f3a <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 8017f3a:	b590      	push	{r4, r7, lr}
 8017f3c:	b087      	sub	sp, #28
 8017f3e:	af00      	add	r7, sp, #0
 8017f40:	60f8      	str	r0, [r7, #12]
 8017f42:	60b9      	str	r1, [r7, #8]
 8017f44:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017f46:	68b9      	ldr	r1, [r7, #8]
 8017f48:	68f8      	ldr	r0, [r7, #12]
 8017f4a:	f7ff fdcf 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	1d1c      	adds	r4, r3, #4
 8017f52:	f107 0310 	add.w	r3, r7, #16
 8017f56:	6879      	ldr	r1, [r7, #4]
 8017f58:	4618      	mov	r0, r3
 8017f5a:	f7f4 f8a9 	bl	800c0b0 <_Z10StringFromPKv>
 8017f5e:	f107 0310 	add.w	r3, r7, #16
 8017f62:	4619      	mov	r1, r3
 8017f64:	4620      	mov	r0, r4
 8017f66:	f7f3 fe35 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8017f6a:	f107 0310 	add.w	r3, r7, #16
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f7f3 fdb3 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8017f74:	68fb      	ldr	r3, [r7, #12]
}
 8017f76:	4618      	mov	r0, r3
 8017f78:	371c      	adds	r7, #28
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	bd90      	pop	{r4, r7, pc}

08017f7e <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8017f7e:	b590      	push	{r4, r7, lr}
 8017f80:	b087      	sub	sp, #28
 8017f82:	af00      	add	r7, sp, #0
 8017f84:	60f8      	str	r0, [r7, #12]
 8017f86:	60b9      	str	r1, [r7, #8]
 8017f88:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017f8a:	68b9      	ldr	r1, [r7, #8]
 8017f8c:	68f8      	ldr	r0, [r7, #12]
 8017f8e:	f7ff fdad 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	1d1c      	adds	r4, r3, #4
 8017f96:	f107 0310 	add.w	r3, r7, #16
 8017f9a:	6879      	ldr	r1, [r7, #4]
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f7f4 f887 	bl	800c0b0 <_Z10StringFromPKv>
 8017fa2:	f107 0310 	add.w	r3, r7, #16
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f7f3 fe13 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8017fae:	f107 0310 	add.w	r3, r7, #16
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f7f3 fd91 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8017fb8:	68fb      	ldr	r3, [r7, #12]
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	371c      	adds	r7, #28
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd90      	pop	{r4, r7, pc}

08017fc2 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8017fc2:	b590      	push	{r4, r7, lr}
 8017fc4:	b087      	sub	sp, #28
 8017fc6:	af00      	add	r7, sp, #0
 8017fc8:	60f8      	str	r0, [r7, #12]
 8017fca:	60b9      	str	r1, [r7, #8]
 8017fcc:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017fce:	68b9      	ldr	r1, [r7, #8]
 8017fd0:	68f8      	ldr	r0, [r7, #12]
 8017fd2:	f7ff fd8b 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	1d1c      	adds	r4, r3, #4
 8017fda:	f107 0310 	add.w	r3, r7, #16
 8017fde:	6879      	ldr	r1, [r7, #4]
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f7f4 f88f 	bl	800c104 <_Z10StringFromPFvvE>
 8017fe6:	f107 0310 	add.w	r3, r7, #16
 8017fea:	4619      	mov	r1, r3
 8017fec:	4620      	mov	r0, r4
 8017fee:	f7f3 fdf1 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8017ff2:	f107 0310 	add.w	r3, r7, #16
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7f3 fd6f 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8017ffc:	68fb      	ldr	r3, [r7, #12]
}
 8017ffe:	4618      	mov	r0, r3
 8018000:	371c      	adds	r7, #28
 8018002:	46bd      	mov	sp, r7
 8018004:	bd90      	pop	{r4, r7, pc}

08018006 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8018006:	b590      	push	{r4, r7, lr}
 8018008:	b087      	sub	sp, #28
 801800a:	af00      	add	r7, sp, #0
 801800c:	60f8      	str	r0, [r7, #12]
 801800e:	60b9      	str	r1, [r7, #8]
 8018010:	607a      	str	r2, [r7, #4]
 8018012:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8018014:	68b9      	ldr	r1, [r7, #8]
 8018016:	68f8      	ldr	r0, [r7, #12]
 8018018:	f7ff fd68 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	1d1c      	adds	r4, r3, #4
 8018020:	f107 0310 	add.w	r3, r7, #16
 8018024:	683a      	ldr	r2, [r7, #0]
 8018026:	6879      	ldr	r1, [r7, #4]
 8018028:	4618      	mov	r0, r3
 801802a:	f7f4 fbaf 	bl	800c78c <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801802e:	f107 0310 	add.w	r3, r7, #16
 8018032:	4619      	mov	r1, r3
 8018034:	4620      	mov	r0, r4
 8018036:	f7f3 fdcd 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801803a:	f107 0310 	add.w	r3, r7, #16
 801803e:	4618      	mov	r0, r3
 8018040:	f7f3 fd4b 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8018044:	68fb      	ldr	r3, [r7, #12]
}
 8018046:	4618      	mov	r0, r3
 8018048:	371c      	adds	r7, #28
 801804a:	46bd      	mov	sp, r7
 801804c:	bd90      	pop	{r4, r7, pc}
	...

08018050 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8018050:	b590      	push	{r4, r7, lr}
 8018052:	b087      	sub	sp, #28
 8018054:	af00      	add	r7, sp, #0
 8018056:	60f8      	str	r0, [r7, #12]
 8018058:	60b9      	str	r1, [r7, #8]
 801805a:	607a      	str	r2, [r7, #4]
 801805c:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	3304      	adds	r3, #4
 8018062:	4913      	ldr	r1, [pc, #76]	; (80180b0 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 8018064:	4618      	mov	r0, r3
 8018066:	f7f3 fdc7 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	3304      	adds	r3, #4
 801806e:	68b9      	ldr	r1, [r7, #8]
 8018070:	4618      	mov	r0, r3
 8018072:	f7f3 fdaf 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8018076:	6879      	ldr	r1, [r7, #4]
 8018078:	68f8      	ldr	r0, [r7, #12]
 801807a:	f7ff fd37 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	1d1c      	adds	r4, r3, #4
 8018082:	f107 0310 	add.w	r3, r7, #16
 8018086:	6839      	ldr	r1, [r7, #0]
 8018088:	4618      	mov	r0, r3
 801808a:	f7f4 f811 	bl	800c0b0 <_Z10StringFromPKv>
 801808e:	f107 0310 	add.w	r3, r7, #16
 8018092:	4619      	mov	r1, r3
 8018094:	4620      	mov	r0, r4
 8018096:	f7f3 fd9d 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801809a:	f107 0310 	add.w	r3, r7, #16
 801809e:	4618      	mov	r0, r3
 80180a0:	f7f3 fd1b 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 80180a4:	68fb      	ldr	r3, [r7, #12]
}
 80180a6:	4618      	mov	r0, r3
 80180a8:	371c      	adds	r7, #28
 80180aa:	46bd      	mov	sp, r7
 80180ac:	bd90      	pop	{r4, r7, pc}
 80180ae:	bf00      	nop
 80180b0:	08024440 	.word	0x08024440

080180b4 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 80180b4:	b590      	push	{r4, r7, lr}
 80180b6:	b087      	sub	sp, #28
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	60f8      	str	r0, [r7, #12]
 80180bc:	60b9      	str	r1, [r7, #8]
 80180be:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80180c0:	68b9      	ldr	r1, [r7, #8]
 80180c2:	68f8      	ldr	r0, [r7, #12]
 80180c4:	f7ff fd12 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	1d1c      	adds	r4, r3, #4
 80180cc:	f107 0310 	add.w	r3, r7, #16
 80180d0:	6879      	ldr	r1, [r7, #4]
 80180d2:	4618      	mov	r0, r3
 80180d4:	f7f3 ffec 	bl	800c0b0 <_Z10StringFromPKv>
 80180d8:	f107 0310 	add.w	r3, r7, #16
 80180dc:	4619      	mov	r1, r3
 80180de:	4620      	mov	r0, r4
 80180e0:	f7f3 fd78 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 80180e4:	f107 0310 	add.w	r3, r7, #16
 80180e8:	4618      	mov	r0, r3
 80180ea:	f7f3 fcf6 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 80180ee:	68fb      	ldr	r3, [r7, #12]
}
 80180f0:	4618      	mov	r0, r3
 80180f2:	371c      	adds	r7, #28
 80180f4:	46bd      	mov	sp, r7
 80180f6:	bd90      	pop	{r4, r7, pc}

080180f8 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 80180f8:	b590      	push	{r4, r7, lr}
 80180fa:	b087      	sub	sp, #28
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	60f8      	str	r0, [r7, #12]
 8018100:	60b9      	str	r1, [r7, #8]
 8018102:	607a      	str	r2, [r7, #4]
 8018104:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	3304      	adds	r3, #4
 801810a:	4913      	ldr	r1, [pc, #76]	; (8018158 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 801810c:	4618      	mov	r0, r3
 801810e:	f7f3 fd73 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	3304      	adds	r3, #4
 8018116:	68b9      	ldr	r1, [r7, #8]
 8018118:	4618      	mov	r0, r3
 801811a:	f7f3 fd5b 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801811e:	6879      	ldr	r1, [r7, #4]
 8018120:	68f8      	ldr	r0, [r7, #12]
 8018122:	f7ff fce3 	bl	8017aec <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	1d1c      	adds	r4, r3, #4
 801812a:	f107 0310 	add.w	r3, r7, #16
 801812e:	6839      	ldr	r1, [r7, #0]
 8018130:	4618      	mov	r0, r3
 8018132:	f7f3 ffbd 	bl	800c0b0 <_Z10StringFromPKv>
 8018136:	f107 0310 	add.w	r3, r7, #16
 801813a:	4619      	mov	r1, r3
 801813c:	4620      	mov	r0, r4
 801813e:	f7f3 fd49 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8018142:	f107 0310 	add.w	r3, r7, #16
 8018146:	4618      	mov	r0, r3
 8018148:	f7f3 fcc7 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 801814c:	68fb      	ldr	r3, [r7, #12]
}
 801814e:	4618      	mov	r0, r3
 8018150:	371c      	adds	r7, #28
 8018152:	46bd      	mov	sp, r7
 8018154:	bd90      	pop	{r4, r7, pc}
 8018156:	bf00      	nop
 8018158:	08024440 	.word	0x08024440

0801815c <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 801815c:	b480      	push	{r7}
 801815e:	b083      	sub	sp, #12
 8018160:	af00      	add	r7, sp, #0
 8018162:	6078      	str	r0, [r7, #4]
    return false;
 8018164:	2300      	movs	r3, #0
}
 8018166:	4618      	mov	r0, r3
 8018168:	370c      	adds	r7, #12
 801816a:	46bd      	mov	sp, r7
 801816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018170:	4770      	bx	lr
	...

08018174 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b084      	sub	sp, #16
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
 801817c:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 801817e:	f107 0308 	add.w	r3, r7, #8
 8018182:	4909      	ldr	r1, [pc, #36]	; (80181a8 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8018184:	4618      	mov	r0, r3
 8018186:	f7f3 f8f0 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801818a:	f107 0308 	add.w	r3, r7, #8
 801818e:	4619      	mov	r1, r3
 8018190:	6878      	ldr	r0, [r7, #4]
 8018192:	f003 fe0f 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018196:	f107 0308 	add.w	r3, r7, #8
 801819a:	4618      	mov	r0, r3
 801819c:	f7f3 fc9d 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 80181a0:	6878      	ldr	r0, [r7, #4]
 80181a2:	3710      	adds	r7, #16
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}
 80181a8:	08024314 	.word	0x08024314

080181ac <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 80181ac:	b480      	push	{r7}
 80181ae:	b083      	sub	sp, #12
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	6078      	str	r0, [r7, #4]
    return 0;
 80181b4:	2300      	movs	r3, #0
}
 80181b6:	4618      	mov	r0, r3
 80181b8:	370c      	adds	r7, #12
 80181ba:	46bd      	mov	sp, r7
 80181bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c0:	4770      	bx	lr

080181c2 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 80181c2:	b480      	push	{r7}
 80181c4:	b083      	sub	sp, #12
 80181c6:	af00      	add	r7, sp, #0
 80181c8:	6078      	str	r0, [r7, #4]
    return 0;
 80181ca:	2300      	movs	r3, #0
}
 80181cc:	4618      	mov	r0, r3
 80181ce:	370c      	adds	r7, #12
 80181d0:	46bd      	mov	sp, r7
 80181d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d6:	4770      	bx	lr

080181d8 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 80181d8:	b480      	push	{r7}
 80181da:	b083      	sub	sp, #12
 80181dc:	af00      	add	r7, sp, #0
 80181de:	6078      	str	r0, [r7, #4]
 80181e0:	6039      	str	r1, [r7, #0]
    return 0;
 80181e2:	2300      	movs	r3, #0
}
 80181e4:	4618      	mov	r0, r3
 80181e6:	370c      	adds	r7, #12
 80181e8:	46bd      	mov	sp, r7
 80181ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ee:	4770      	bx	lr

080181f0 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 80181f0:	b480      	push	{r7}
 80181f2:	b083      	sub	sp, #12
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
 80181f8:	6039      	str	r1, [r7, #0]
    return 0;
 80181fa:	2300      	movs	r3, #0
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	370c      	adds	r7, #12
 8018200:	46bd      	mov	sp, r7
 8018202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018206:	4770      	bx	lr

08018208 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8018208:	b5b0      	push	{r4, r5, r7, lr}
 801820a:	b084      	sub	sp, #16
 801820c:	af02      	add	r7, sp, #8
 801820e:	6078      	str	r0, [r7, #4]
 8018210:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8018212:	f7fa fc8d 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8018216:	4604      	mov	r4, r0
 8018218:	6823      	ldr	r3, [r4, #0]
 801821a:	3368      	adds	r3, #104	; 0x68
 801821c:	681d      	ldr	r5, [r3, #0]
 801821e:	f7fa fc97 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018222:	4603      	mov	r3, r0
 8018224:	9300      	str	r3, [sp, #0]
 8018226:	f240 3375 	movw	r3, #885	; 0x375
 801822a:	4a06      	ldr	r2, [pc, #24]	; (8018244 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 801822c:	4906      	ldr	r1, [pc, #24]	; (8018248 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 801822e:	4620      	mov	r0, r4
 8018230:	47a8      	blx	r5
    return cpputest_longlong(0);
 8018232:	2100      	movs	r1, #0
 8018234:	6878      	ldr	r0, [r7, #4]
 8018236:	f7f1 f8cf 	bl	80093d8 <_ZN17cpputest_longlongC1Ei>
}
 801823a:	6878      	ldr	r0, [r7, #4]
 801823c:	3708      	adds	r7, #8
 801823e:	46bd      	mov	sp, r7
 8018240:	bdb0      	pop	{r4, r5, r7, pc}
 8018242:	bf00      	nop
 8018244:	0802432c 	.word	0x0802432c
 8018248:	08024374 	.word	0x08024374

0801824c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 801824c:	b5b0      	push	{r4, r5, r7, lr}
 801824e:	b084      	sub	sp, #16
 8018250:	af02      	add	r7, sp, #8
 8018252:	6078      	str	r0, [r7, #4]
 8018254:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8018256:	f7fa fc6b 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801825a:	4604      	mov	r4, r0
 801825c:	6823      	ldr	r3, [r4, #0]
 801825e:	3368      	adds	r3, #104	; 0x68
 8018260:	681d      	ldr	r5, [r3, #0]
 8018262:	f7fa fc75 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018266:	4603      	mov	r3, r0
 8018268:	9300      	str	r3, [sp, #0]
 801826a:	f240 337b 	movw	r3, #891	; 0x37b
 801826e:	4a06      	ldr	r2, [pc, #24]	; (8018288 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8018270:	4906      	ldr	r1, [pc, #24]	; (801828c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 8018272:	4620      	mov	r0, r4
 8018274:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8018276:	2100      	movs	r1, #0
 8018278:	6878      	ldr	r0, [r7, #4]
 801827a:	f7f1 f8b9 	bl	80093f0 <_ZN18cpputest_ulonglongC1Ei>
}
 801827e:	6878      	ldr	r0, [r7, #4]
 8018280:	3708      	adds	r7, #8
 8018282:	46bd      	mov	sp, r7
 8018284:	bdb0      	pop	{r4, r5, r7, pc}
 8018286:	bf00      	nop
 8018288:	0802432c 	.word	0x0802432c
 801828c:	08024348 	.word	0x08024348

08018290 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 8018290:	b5b0      	push	{r4, r5, r7, lr}
 8018292:	b086      	sub	sp, #24
 8018294:	af02      	add	r7, sp, #8
 8018296:	60f8      	str	r0, [r7, #12]
 8018298:	60b9      	str	r1, [r7, #8]
 801829a:	4639      	mov	r1, r7
 801829c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80182a0:	f7fa fc46 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80182a4:	4604      	mov	r4, r0
 80182a6:	6823      	ldr	r3, [r4, #0]
 80182a8:	3368      	adds	r3, #104	; 0x68
 80182aa:	681d      	ldr	r5, [r3, #0]
 80182ac:	f7fa fc50 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80182b0:	4603      	mov	r3, r0
 80182b2:	9300      	str	r3, [sp, #0]
 80182b4:	f240 3381 	movw	r3, #897	; 0x381
 80182b8:	4a05      	ldr	r2, [pc, #20]	; (80182d0 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 80182ba:	4906      	ldr	r1, [pc, #24]	; (80182d4 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 80182bc:	4620      	mov	r0, r4
 80182be:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80182c0:	2100      	movs	r1, #0
 80182c2:	68f8      	ldr	r0, [r7, #12]
 80182c4:	f7f1 f894 	bl	80093f0 <_ZN18cpputest_ulonglongC1Ei>
}
 80182c8:	68f8      	ldr	r0, [r7, #12]
 80182ca:	3710      	adds	r7, #16
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bdb0      	pop	{r4, r5, r7, pc}
 80182d0:	0802432c 	.word	0x0802432c
 80182d4:	08024348 	.word	0x08024348

080182d8 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 80182d8:	b5b0      	push	{r4, r5, r7, lr}
 80182da:	b086      	sub	sp, #24
 80182dc:	af02      	add	r7, sp, #8
 80182de:	60f8      	str	r0, [r7, #12]
 80182e0:	60b9      	str	r1, [r7, #8]
 80182e2:	4639      	mov	r1, r7
 80182e4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80182e8:	f7fa fc22 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 80182ec:	4604      	mov	r4, r0
 80182ee:	6823      	ldr	r3, [r4, #0]
 80182f0:	3368      	adds	r3, #104	; 0x68
 80182f2:	681d      	ldr	r5, [r3, #0]
 80182f4:	f7fa fc2c 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80182f8:	4603      	mov	r3, r0
 80182fa:	9300      	str	r3, [sp, #0]
 80182fc:	f240 3387 	movw	r3, #903	; 0x387
 8018300:	4a05      	ldr	r2, [pc, #20]	; (8018318 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8018302:	4906      	ldr	r1, [pc, #24]	; (801831c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8018304:	4620      	mov	r0, r4
 8018306:	47a8      	blx	r5
    return cpputest_longlong(0);
 8018308:	2100      	movs	r1, #0
 801830a:	68f8      	ldr	r0, [r7, #12]
 801830c:	f7f1 f864 	bl	80093d8 <_ZN17cpputest_longlongC1Ei>
}
 8018310:	68f8      	ldr	r0, [r7, #12]
 8018312:	3710      	adds	r7, #16
 8018314:	46bd      	mov	sp, r7
 8018316:	bdb0      	pop	{r4, r5, r7, pc}
 8018318:	0802432c 	.word	0x0802432c
 801831c:	08024374 	.word	0x08024374

08018320 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8018320:	b480      	push	{r7}
 8018322:	b083      	sub	sp, #12
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
    return false;
 8018328:	2300      	movs	r3, #0
}
 801832a:	4618      	mov	r0, r3
 801832c:	370c      	adds	r7, #12
 801832e:	46bd      	mov	sp, r7
 8018330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018334:	4770      	bx	lr

08018336 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8018336:	b480      	push	{r7}
 8018338:	b083      	sub	sp, #12
 801833a:	af00      	add	r7, sp, #0
 801833c:	6078      	str	r0, [r7, #4]
 801833e:	460b      	mov	r3, r1
 8018340:	70fb      	strb	r3, [r7, #3]
    return false;
 8018342:	2300      	movs	r3, #0
}
 8018344:	4618      	mov	r0, r3
 8018346:	370c      	adds	r7, #12
 8018348:	46bd      	mov	sp, r7
 801834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834e:	4770      	bx	lr

08018350 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8018350:	b480      	push	{r7}
 8018352:	b083      	sub	sp, #12
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
    return 0;
 8018358:	2300      	movs	r3, #0
}
 801835a:	4618      	mov	r0, r3
 801835c:	370c      	adds	r7, #12
 801835e:	46bd      	mov	sp, r7
 8018360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018364:	4770      	bx	lr

08018366 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8018366:	b480      	push	{r7}
 8018368:	b083      	sub	sp, #12
 801836a:	af00      	add	r7, sp, #0
 801836c:	6078      	str	r0, [r7, #4]
    return 0.0;
 801836e:	f04f 0200 	mov.w	r2, #0
 8018372:	f04f 0300 	mov.w	r3, #0
 8018376:	ec43 2b17 	vmov	d7, r2, r3
}
 801837a:	eeb0 0a47 	vmov.f32	s0, s14
 801837e:	eef0 0a67 	vmov.f32	s1, s15
 8018382:	370c      	adds	r7, #12
 8018384:	46bd      	mov	sp, r7
 8018386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838a:	4770      	bx	lr

0801838c <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b084      	sub	sp, #16
 8018390:	af00      	add	r7, sp, #0
 8018392:	60f8      	str	r0, [r7, #12]
 8018394:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	3398      	adds	r3, #152	; 0x98
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	68f8      	ldr	r0, [r7, #12]
 80183a2:	4798      	blx	r3
 80183a4:	eeb0 7a40 	vmov.f32	s14, s0
 80183a8:	eef0 7a60 	vmov.f32	s15, s1
}
 80183ac:	eeb0 0a47 	vmov.f32	s0, s14
 80183b0:	eef0 0a67 	vmov.f32	s1, s15
 80183b4:	3710      	adds	r7, #16
 80183b6:	46bd      	mov	sp, r7
 80183b8:	bd80      	pop	{r7, pc}

080183ba <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 80183ba:	b480      	push	{r7}
 80183bc:	b083      	sub	sp, #12
 80183be:	af00      	add	r7, sp, #0
 80183c0:	6078      	str	r0, [r7, #4]
    return 0;
 80183c2:	2300      	movs	r3, #0
}
 80183c4:	4618      	mov	r0, r3
 80183c6:	370c      	adds	r7, #12
 80183c8:	46bd      	mov	sp, r7
 80183ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ce:	4770      	bx	lr

080183d0 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 80183d0:	b480      	push	{r7}
 80183d2:	b083      	sub	sp, #12
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 80183d8:	2300      	movs	r3, #0
}
 80183da:	4618      	mov	r0, r3
 80183dc:	370c      	adds	r7, #12
 80183de:	46bd      	mov	sp, r7
 80183e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e4:	4770      	bx	lr

080183e6 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 80183e6:	b480      	push	{r7}
 80183e8:	b083      	sub	sp, #12
 80183ea:	af00      	add	r7, sp, #0
 80183ec:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 80183ee:	2300      	movs	r3, #0
}
 80183f0:	4618      	mov	r0, r3
 80183f2:	370c      	adds	r7, #12
 80183f4:	46bd      	mov	sp, r7
 80183f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183fa:	4770      	bx	lr

080183fc <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 80183fc:	b480      	push	{r7}
 80183fe:	b083      	sub	sp, #12
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8018404:	2300      	movs	r3, #0
}
 8018406:	4618      	mov	r0, r3
 8018408:	370c      	adds	r7, #12
 801840a:	46bd      	mov	sp, r7
 801840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018410:	4770      	bx	lr

08018412 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 8018412:	b580      	push	{r7, lr}
 8018414:	b082      	sub	sp, #8
 8018416:	af00      	add	r7, sp, #0
 8018418:	6078      	str	r0, [r7, #4]
 801841a:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	33a8      	adds	r3, #168	; 0xa8
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	6878      	ldr	r0, [r7, #4]
 8018426:	4798      	blx	r3
 8018428:	4603      	mov	r3, r0
}
 801842a:	4618      	mov	r0, r3
 801842c:	3708      	adds	r7, #8
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}

08018432 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 8018432:	b580      	push	{r7, lr}
 8018434:	b082      	sub	sp, #8
 8018436:	af00      	add	r7, sp, #0
 8018438:	6078      	str	r0, [r7, #4]
 801843a:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	33a0      	adds	r3, #160	; 0xa0
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	4798      	blx	r3
 8018448:	4603      	mov	r3, r0
}
 801844a:	4618      	mov	r0, r3
 801844c:	3708      	adds	r7, #8
 801844e:	46bd      	mov	sp, r7
 8018450:	bd80      	pop	{r7, pc}

08018452 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 8018452:	b580      	push	{r7, lr}
 8018454:	b082      	sub	sp, #8
 8018456:	af00      	add	r7, sp, #0
 8018458:	6078      	str	r0, [r7, #4]
 801845a:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	33b0      	adds	r3, #176	; 0xb0
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	6878      	ldr	r0, [r7, #4]
 8018466:	4798      	blx	r3
 8018468:	4603      	mov	r3, r0
}
 801846a:	4618      	mov	r0, r3
 801846c:	3708      	adds	r7, #8
 801846e:	46bd      	mov	sp, r7
 8018470:	bd80      	pop	{r7, pc}
	...

08018474 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 8018474:	b480      	push	{r7}
 8018476:	b083      	sub	sp, #12
 8018478:	af00      	add	r7, sp, #0
 801847a:	6078      	str	r0, [r7, #4]
    return "";
 801847c:	4b03      	ldr	r3, [pc, #12]	; (801848c <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 801847e:	4618      	mov	r0, r3
 8018480:	370c      	adds	r7, #12
 8018482:	46bd      	mov	sp, r7
 8018484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018488:	4770      	bx	lr
 801848a:	bf00      	nop
 801848c:	08024314 	.word	0x08024314

08018490 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b082      	sub	sp, #8
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
 8018498:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	3394      	adds	r3, #148	; 0x94
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	4798      	blx	r3
 80184a6:	4603      	mov	r3, r0
}
 80184a8:	4618      	mov	r0, r3
 80184aa:	3708      	adds	r7, #8
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}

080184b0 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 80184b0:	b480      	push	{r7}
 80184b2:	b083      	sub	sp, #12
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
 80184b8:	6039      	str	r1, [r7, #0]
    return 0;
 80184ba:	2300      	movs	r3, #0
}
 80184bc:	4618      	mov	r0, r3
 80184be:	370c      	adds	r7, #12
 80184c0:	46bd      	mov	sp, r7
 80184c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c6:	4770      	bx	lr

080184c8 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b082      	sub	sp, #8
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
 80184d0:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	3388      	adds	r3, #136	; 0x88
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	6878      	ldr	r0, [r7, #4]
 80184dc:	4798      	blx	r3
 80184de:	4603      	mov	r3, r0
}
 80184e0:	4618      	mov	r0, r3
 80184e2:	3708      	adds	r7, #8
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bd80      	pop	{r7, pc}

080184e8 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 80184e8:	b590      	push	{r4, r7, lr}
 80184ea:	b085      	sub	sp, #20
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
 80184f0:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	3304      	adds	r3, #4
 80184f6:	490e      	ldr	r1, [pc, #56]	; (8018530 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7f3 fb7d 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	1d1c      	adds	r4, r3, #4
 8018502:	f107 0308 	add.w	r3, r7, #8
 8018506:	6839      	ldr	r1, [r7, #0]
 8018508:	4618      	mov	r0, r3
 801850a:	f7f3 fdd1 	bl	800c0b0 <_Z10StringFromPKv>
 801850e:	f107 0308 	add.w	r3, r7, #8
 8018512:	4619      	mov	r1, r3
 8018514:	4620      	mov	r0, r4
 8018516:	f7f3 fb5d 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801851a:	f107 0308 	add.w	r3, r7, #8
 801851e:	4618      	mov	r0, r3
 8018520:	f7f3 fadb 	bl	800bada <_ZN12SimpleStringD1Ev>
    return *this;
 8018524:	687b      	ldr	r3, [r7, #4]
}
 8018526:	4618      	mov	r0, r3
 8018528:	3714      	adds	r7, #20
 801852a:	46bd      	mov	sp, r7
 801852c:	bd90      	pop	{r4, r7, pc}
 801852e:	bf00      	nop
 8018530:	08024448 	.word	0x08024448

08018534 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8018534:	b598      	push	{r3, r4, r7, lr}
 8018536:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8018538:	4b09      	ldr	r3, [pc, #36]	; (8018560 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d10b      	bne.n	8018558 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8018540:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8018544:	4907      	ldr	r1, [pc, #28]	; (8018564 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8018546:	200c      	movs	r0, #12
 8018548:	f7f0 fb4c 	bl	8008be4 <_ZnwjPKci>
 801854c:	4604      	mov	r4, r0
 801854e:	4620      	mov	r0, r4
 8018550:	f7ff fa4c 	bl	80179ec <_ZN19MockActualCallTraceC1Ev>
 8018554:	4b02      	ldr	r3, [pc, #8]	; (8018560 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8018556:	601c      	str	r4, [r3, #0]
    return *instance_;
 8018558:	4b01      	ldr	r3, [pc, #4]	; (8018560 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801855a:	681b      	ldr	r3, [r3, #0]
}
 801855c:	4618      	mov	r0, r3
 801855e:	bd98      	pop	{r3, r4, r7, pc}
 8018560:	20000d8c 	.word	0x20000d8c
 8018564:	0802432c 	.word	0x0802432c

08018568 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8018568:	b580      	push	{r7, lr}
 801856a:	af00      	add	r7, sp, #0
    delete instance_;
 801856c:	4b06      	ldr	r3, [pc, #24]	; (8018588 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d004      	beq.n	801857e <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8018574:	681a      	ldr	r2, [r3, #0]
 8018576:	3204      	adds	r2, #4
 8018578:	6812      	ldr	r2, [r2, #0]
 801857a:	4618      	mov	r0, r3
 801857c:	4790      	blx	r2
    instance_ = NULLPTR;
 801857e:	4b02      	ldr	r3, [pc, #8]	; (8018588 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8018580:	2200      	movs	r2, #0
 8018582:	601a      	str	r2, [r3, #0]
}
 8018584:	bf00      	nop
 8018586:	bd80      	pop	{r7, pc}
 8018588:	20000d8c 	.word	0x20000d8c

0801858c <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 801858c:	b580      	push	{r7, lr}
 801858e:	b082      	sub	sp, #8
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	4618      	mov	r0, r3
 8018598:	f7fd fe9a 	bl	80162d0 <_ZN14MockActualCallC1Ev>
 801859c:	4a03      	ldr	r2, [pc, #12]	; (80185ac <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	601a      	str	r2, [r3, #0]
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	4618      	mov	r0, r3
 80185a6:	3708      	adds	r7, #8
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}
 80185ac:	08026968 	.word	0x08026968

080185b0 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 80185b0:	b580      	push	{r7, lr}
 80185b2:	af00      	add	r7, sp, #0
 80185b4:	4801      	ldr	r0, [pc, #4]	; (80185bc <__tcf_0+0xc>)
 80185b6:	f000 f831 	bl	801861c <_ZN21MockIgnoredActualCallD1Ev>
 80185ba:	bd80      	pop	{r7, pc}
 80185bc:	20000d90 	.word	0x20000d90

080185c0 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 80185c4:	4b12      	ldr	r3, [pc, #72]	; (8018610 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 80185c6:	781b      	ldrb	r3, [r3, #0]
 80185c8:	f3bf 8f5b 	dmb	ish
 80185cc:	b2db      	uxtb	r3, r3
 80185ce:	f003 0301 	and.w	r3, r3, #1
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	bf0c      	ite	eq
 80185d6:	2301      	moveq	r3, #1
 80185d8:	2300      	movne	r3, #0
 80185da:	b2db      	uxtb	r3, r3
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d013      	beq.n	8018608 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 80185e0:	480b      	ldr	r0, [pc, #44]	; (8018610 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 80185e2:	f005 fd81 	bl	801e0e8 <__cxa_guard_acquire>
 80185e6:	4603      	mov	r3, r0
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	bf14      	ite	ne
 80185ec:	2301      	movne	r3, #1
 80185ee:	2300      	moveq	r3, #0
 80185f0:	b2db      	uxtb	r3, r3
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d008      	beq.n	8018608 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 80185f6:	4807      	ldr	r0, [pc, #28]	; (8018614 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 80185f8:	f7ff ffc8 	bl	801858c <_ZN21MockIgnoredActualCallC1Ev>
 80185fc:	4804      	ldr	r0, [pc, #16]	; (8018610 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 80185fe:	f005 fd7f 	bl	801e100 <__cxa_guard_release>
 8018602:	4805      	ldr	r0, [pc, #20]	; (8018618 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8018604:	f005 fda3 	bl	801e14e <atexit>
    return call;
 8018608:	4b02      	ldr	r3, [pc, #8]	; (8018614 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801860a:	4618      	mov	r0, r3
 801860c:	bd80      	pop	{r7, pc}
 801860e:	bf00      	nop
 8018610:	20000d94 	.word	0x20000d94
 8018614:	20000d90 	.word	0x20000d90
 8018618:	080185b1 	.word	0x080185b1

0801861c <_ZN21MockIgnoredActualCallD1Ev>:
 801861c:	b580      	push	{r7, lr}
 801861e:	b082      	sub	sp, #8
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
 8018624:	4a05      	ldr	r2, [pc, #20]	; (801863c <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	601a      	str	r2, [r3, #0]
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	4618      	mov	r0, r3
 801862e:	f7fd fe5f 	bl	80162f0 <_ZN14MockActualCallD1Ev>
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	4618      	mov	r0, r3
 8018636:	3708      	adds	r7, #8
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}
 801863c:	08026968 	.word	0x08026968

08018640 <_ZN21MockIgnoredActualCallD0Ev>:
 8018640:	b580      	push	{r7, lr}
 8018642:	b082      	sub	sp, #8
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
 8018648:	6878      	ldr	r0, [r7, #4]
 801864a:	f7ff ffe7 	bl	801861c <_ZN21MockIgnoredActualCallD1Ev>
 801864e:	2104      	movs	r1, #4
 8018650:	6878      	ldr	r0, [r7, #4]
 8018652:	f7f0 fadb 	bl	8008c0c <_ZdlPvj>
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	4618      	mov	r0, r3
 801865a:	3708      	adds	r7, #8
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}

08018660 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8018660:	b580      	push	{r7, lr}
 8018662:	b082      	sub	sp, #8
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
 8018668:	4a05      	ldr	r2, [pc, #20]	; (8018680 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	601a      	str	r2, [r3, #0]
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	4618      	mov	r0, r3
 8018672:	f7f0 fefd 	bl	8009470 <_ZN11MockFailureD1Ev>
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	4618      	mov	r0, r3
 801867a:	3708      	adds	r7, #8
 801867c:	46bd      	mov	sp, r7
 801867e:	bd80      	pop	{r7, pc}
 8018680:	08026860 	.word	0x08026860

08018684 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 8018684:	b580      	push	{r7, lr}
 8018686:	b082      	sub	sp, #8
 8018688:	af00      	add	r7, sp, #0
 801868a:	6078      	str	r0, [r7, #4]
 801868c:	6878      	ldr	r0, [r7, #4]
 801868e:	f7ff ffe7 	bl	8018660 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 8018692:	2134      	movs	r1, #52	; 0x34
 8018694:	6878      	ldr	r0, [r7, #4]
 8018696:	f7f0 fab9 	bl	8008c0c <_ZdlPvj>
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	4618      	mov	r0, r3
 801869e:	3708      	adds	r7, #8
 80186a0:	46bd      	mov	sp, r7
 80186a2:	bd80      	pop	{r7, pc}

080186a4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 80186a4:	b580      	push	{r7, lr}
 80186a6:	b082      	sub	sp, #8
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]
 80186ac:	4a05      	ldr	r2, [pc, #20]	; (80186c4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	601a      	str	r2, [r3, #0]
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	4618      	mov	r0, r3
 80186b6:	f7f0 fedb 	bl	8009470 <_ZN11MockFailureD1Ev>
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	4618      	mov	r0, r3
 80186be:	3708      	adds	r7, #8
 80186c0:	46bd      	mov	sp, r7
 80186c2:	bd80      	pop	{r7, pc}
 80186c4:	0802693c 	.word	0x0802693c

080186c8 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b082      	sub	sp, #8
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	6078      	str	r0, [r7, #4]
 80186d0:	6878      	ldr	r0, [r7, #4]
 80186d2:	f7ff ffe7 	bl	80186a4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 80186d6:	2134      	movs	r1, #52	; 0x34
 80186d8:	6878      	ldr	r0, [r7, #4]
 80186da:	f7f0 fa97 	bl	8008c0c <_ZdlPvj>
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	4618      	mov	r0, r3
 80186e2:	3708      	adds	r7, #8
 80186e4:	46bd      	mov	sp, r7
 80186e6:	bd80      	pop	{r7, pc}

080186e8 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b082      	sub	sp, #8
 80186ec:	af00      	add	r7, sp, #0
 80186ee:	6078      	str	r0, [r7, #4]
 80186f0:	4a05      	ldr	r2, [pc, #20]	; (8018708 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	601a      	str	r2, [r3, #0]
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	4618      	mov	r0, r3
 80186fa:	f7f0 feb9 	bl	8009470 <_ZN11MockFailureD1Ev>
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	4618      	mov	r0, r3
 8018702:	3708      	adds	r7, #8
 8018704:	46bd      	mov	sp, r7
 8018706:	bd80      	pop	{r7, pc}
 8018708:	08026910 	.word	0x08026910

0801870c <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801870c:	b580      	push	{r7, lr}
 801870e:	b082      	sub	sp, #8
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
 8018714:	6878      	ldr	r0, [r7, #4]
 8018716:	f7ff ffe7 	bl	80186e8 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801871a:	2134      	movs	r1, #52	; 0x34
 801871c:	6878      	ldr	r0, [r7, #4]
 801871e:	f7f0 fa75 	bl	8008c0c <_ZdlPvj>
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	4618      	mov	r0, r3
 8018726:	3708      	adds	r7, #8
 8018728:	46bd      	mov	sp, r7
 801872a:	bd80      	pop	{r7, pc}

0801872c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801872c:	b580      	push	{r7, lr}
 801872e:	b082      	sub	sp, #8
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
 8018734:	4a05      	ldr	r2, [pc, #20]	; (801874c <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	601a      	str	r2, [r3, #0]
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	4618      	mov	r0, r3
 801873e:	f7f0 fe97 	bl	8009470 <_ZN11MockFailureD1Ev>
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	4618      	mov	r0, r3
 8018746:	3708      	adds	r7, #8
 8018748:	46bd      	mov	sp, r7
 801874a:	bd80      	pop	{r7, pc}
 801874c:	080268e4 	.word	0x080268e4

08018750 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 8018750:	b580      	push	{r7, lr}
 8018752:	b082      	sub	sp, #8
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
 8018758:	6878      	ldr	r0, [r7, #4]
 801875a:	f7ff ffe7 	bl	801872c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801875e:	2134      	movs	r1, #52	; 0x34
 8018760:	6878      	ldr	r0, [r7, #4]
 8018762:	f7f0 fa53 	bl	8008c0c <_ZdlPvj>
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	4618      	mov	r0, r3
 801876a:	3708      	adds	r7, #8
 801876c:	46bd      	mov	sp, r7
 801876e:	bd80      	pop	{r7, pc}

08018770 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 8018770:	b580      	push	{r7, lr}
 8018772:	b082      	sub	sp, #8
 8018774:	af00      	add	r7, sp, #0
 8018776:	6078      	str	r0, [r7, #4]
 8018778:	4a05      	ldr	r2, [pc, #20]	; (8018790 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	601a      	str	r2, [r3, #0]
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	4618      	mov	r0, r3
 8018782:	f7f0 fe75 	bl	8009470 <_ZN11MockFailureD1Ev>
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	4618      	mov	r0, r3
 801878a:	3708      	adds	r7, #8
 801878c:	46bd      	mov	sp, r7
 801878e:	bd80      	pop	{r7, pc}
 8018790:	0802688c 	.word	0x0802688c

08018794 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 8018794:	b580      	push	{r7, lr}
 8018796:	b082      	sub	sp, #8
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
 801879c:	6878      	ldr	r0, [r7, #4]
 801879e:	f7ff ffe7 	bl	8018770 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80187a2:	2134      	movs	r1, #52	; 0x34
 80187a4:	6878      	ldr	r0, [r7, #4]
 80187a6:	f7f0 fa31 	bl	8008c0c <_ZdlPvj>
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	4618      	mov	r0, r3
 80187ae:	3708      	adds	r7, #8
 80187b0:	46bd      	mov	sp, r7
 80187b2:	bd80      	pop	{r7, pc}

080187b4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b082      	sub	sp, #8
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
 80187bc:	4a05      	ldr	r2, [pc, #20]	; (80187d4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	601a      	str	r2, [r3, #0]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	4618      	mov	r0, r3
 80187c6:	f7f0 fe53 	bl	8009470 <_ZN11MockFailureD1Ev>
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	4618      	mov	r0, r3
 80187ce:	3708      	adds	r7, #8
 80187d0:	46bd      	mov	sp, r7
 80187d2:	bd80      	pop	{r7, pc}
 80187d4:	080268b8 	.word	0x080268b8

080187d8 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 80187d8:	b580      	push	{r7, lr}
 80187da:	b082      	sub	sp, #8
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	f7ff ffe7 	bl	80187b4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 80187e6:	2134      	movs	r1, #52	; 0x34
 80187e8:	6878      	ldr	r0, [r7, #4]
 80187ea:	f7f0 fa0f 	bl	8008c0c <_ZdlPvj>
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	4618      	mov	r0, r3
 80187f2:	3708      	adds	r7, #8
 80187f4:	46bd      	mov	sp, r7
 80187f6:	bd80      	pop	{r7, pc}

080187f8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
 8018800:	4a05      	ldr	r2, [pc, #20]	; (8018818 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	601a      	str	r2, [r3, #0]
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	4618      	mov	r0, r3
 801880a:	f7f0 fe31 	bl	8009470 <_ZN11MockFailureD1Ev>
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	4618      	mov	r0, r3
 8018812:	3708      	adds	r7, #8
 8018814:	46bd      	mov	sp, r7
 8018816:	bd80      	pop	{r7, pc}
 8018818:	08026808 	.word	0x08026808

0801881c <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801881c:	b580      	push	{r7, lr}
 801881e:	b082      	sub	sp, #8
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]
 8018824:	6878      	ldr	r0, [r7, #4]
 8018826:	f7ff ffe7 	bl	80187f8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801882a:	2134      	movs	r1, #52	; 0x34
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	f7f0 f9ed 	bl	8008c0c <_ZdlPvj>
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	4618      	mov	r0, r3
 8018836:	3708      	adds	r7, #8
 8018838:	46bd      	mov	sp, r7
 801883a:	bd80      	pop	{r7, pc}

0801883c <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801883c:	b580      	push	{r7, lr}
 801883e:	b082      	sub	sp, #8
 8018840:	af00      	add	r7, sp, #0
 8018842:	6078      	str	r0, [r7, #4]
 8018844:	4a05      	ldr	r2, [pc, #20]	; (801885c <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	601a      	str	r2, [r3, #0]
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	4618      	mov	r0, r3
 801884e:	f7f0 fe0f 	bl	8009470 <_ZN11MockFailureD1Ev>
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	4618      	mov	r0, r3
 8018856:	3708      	adds	r7, #8
 8018858:	46bd      	mov	sp, r7
 801885a:	bd80      	pop	{r7, pc}
 801885c:	08026834 	.word	0x08026834

08018860 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8018860:	b580      	push	{r7, lr}
 8018862:	b082      	sub	sp, #8
 8018864:	af00      	add	r7, sp, #0
 8018866:	6078      	str	r0, [r7, #4]
 8018868:	6878      	ldr	r0, [r7, #4]
 801886a:	f7ff ffe7 	bl	801883c <_ZN27MockUnexpectedObjectFailureD1Ev>
 801886e:	2134      	movs	r1, #52	; 0x34
 8018870:	6878      	ldr	r0, [r7, #4]
 8018872:	f7f0 f9cb 	bl	8008c0c <_ZdlPvj>
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	4618      	mov	r0, r3
 801887a:	3708      	adds	r7, #8
 801887c:	46bd      	mov	sp, r7
 801887e:	bd80      	pop	{r7, pc}

08018880 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 8018880:	b580      	push	{r7, lr}
 8018882:	b082      	sub	sp, #8
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
 8018888:	6039      	str	r1, [r7, #0]
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	3310      	adds	r3, #16
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	683a      	ldr	r2, [r7, #0]
 8018894:	6839      	ldr	r1, [r7, #0]
 8018896:	6878      	ldr	r0, [r7, #4]
 8018898:	4798      	blx	r3
 801889a:	4603      	mov	r3, r0
 801889c:	4618      	mov	r0, r3
 801889e:	3708      	adds	r7, #8
 80188a0:	46bd      	mov	sp, r7
 80188a2:	bd80      	pop	{r7, pc}

080188a4 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 80188a4:	b480      	push	{r7}
 80188a6:	b083      	sub	sp, #12
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	6078      	str	r0, [r7, #4]
 80188ac:	6039      	str	r1, [r7, #0]
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	4618      	mov	r0, r3
 80188b2:	370c      	adds	r7, #12
 80188b4:	46bd      	mov	sp, r7
 80188b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ba:	4770      	bx	lr

080188bc <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 80188bc:	b480      	push	{r7}
 80188be:	b083      	sub	sp, #12
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
 80188c4:	6039      	str	r1, [r7, #0]
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	4618      	mov	r0, r3
 80188ca:	370c      	adds	r7, #12
 80188cc:	46bd      	mov	sp, r7
 80188ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188d2:	4770      	bx	lr

080188d4 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 80188d4:	b480      	push	{r7}
 80188d6:	b085      	sub	sp, #20
 80188d8:	af00      	add	r7, sp, #0
 80188da:	60f8      	str	r0, [r7, #12]
 80188dc:	60b9      	str	r1, [r7, #8]
 80188de:	607a      	str	r2, [r7, #4]
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	4618      	mov	r0, r3
 80188e4:	3714      	adds	r7, #20
 80188e6:	46bd      	mov	sp, r7
 80188e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ec:	4770      	bx	lr

080188ee <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 80188ee:	b480      	push	{r7}
 80188f0:	b085      	sub	sp, #20
 80188f2:	af00      	add	r7, sp, #0
 80188f4:	60f8      	str	r0, [r7, #12]
 80188f6:	60b9      	str	r1, [r7, #8]
 80188f8:	4613      	mov	r3, r2
 80188fa:	71fb      	strb	r3, [r7, #7]
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	4618      	mov	r0, r3
 8018900:	3714      	adds	r7, #20
 8018902:	46bd      	mov	sp, r7
 8018904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018908:	4770      	bx	lr

0801890a <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801890a:	b480      	push	{r7}
 801890c:	b085      	sub	sp, #20
 801890e:	af00      	add	r7, sp, #0
 8018910:	60f8      	str	r0, [r7, #12]
 8018912:	60b9      	str	r1, [r7, #8]
 8018914:	607a      	str	r2, [r7, #4]
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	4618      	mov	r0, r3
 801891a:	3714      	adds	r7, #20
 801891c:	46bd      	mov	sp, r7
 801891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018922:	4770      	bx	lr

08018924 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8018924:	b480      	push	{r7}
 8018926:	b085      	sub	sp, #20
 8018928:	af00      	add	r7, sp, #0
 801892a:	60f8      	str	r0, [r7, #12]
 801892c:	60b9      	str	r1, [r7, #8]
 801892e:	607a      	str	r2, [r7, #4]
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	4618      	mov	r0, r3
 8018934:	3714      	adds	r7, #20
 8018936:	46bd      	mov	sp, r7
 8018938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893c:	4770      	bx	lr

0801893e <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801893e:	b480      	push	{r7}
 8018940:	b085      	sub	sp, #20
 8018942:	af00      	add	r7, sp, #0
 8018944:	60f8      	str	r0, [r7, #12]
 8018946:	60b9      	str	r1, [r7, #8]
 8018948:	607a      	str	r2, [r7, #4]
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	4618      	mov	r0, r3
 801894e:	3714      	adds	r7, #20
 8018950:	46bd      	mov	sp, r7
 8018952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018956:	4770      	bx	lr

08018958 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8018958:	b480      	push	{r7}
 801895a:	b085      	sub	sp, #20
 801895c:	af00      	add	r7, sp, #0
 801895e:	60f8      	str	r0, [r7, #12]
 8018960:	60b9      	str	r1, [r7, #8]
 8018962:	607a      	str	r2, [r7, #4]
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	4618      	mov	r0, r3
 8018968:	3714      	adds	r7, #20
 801896a:	46bd      	mov	sp, r7
 801896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018970:	4770      	bx	lr

08018972 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8018972:	b480      	push	{r7}
 8018974:	b085      	sub	sp, #20
 8018976:	af00      	add	r7, sp, #0
 8018978:	60f8      	str	r0, [r7, #12]
 801897a:	60b9      	str	r1, [r7, #8]
 801897c:	4639      	mov	r1, r7
 801897e:	e881 000c 	stmia.w	r1, {r2, r3}
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	4618      	mov	r0, r3
 8018986:	3714      	adds	r7, #20
 8018988:	46bd      	mov	sp, r7
 801898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801898e:	4770      	bx	lr

08018990 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8018990:	b480      	push	{r7}
 8018992:	b085      	sub	sp, #20
 8018994:	af00      	add	r7, sp, #0
 8018996:	60f8      	str	r0, [r7, #12]
 8018998:	60b9      	str	r1, [r7, #8]
 801899a:	4639      	mov	r1, r7
 801899c:	e881 000c 	stmia.w	r1, {r2, r3}
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	4618      	mov	r0, r3
 80189a4:	3714      	adds	r7, #20
 80189a6:	46bd      	mov	sp, r7
 80189a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ac:	4770      	bx	lr

080189ae <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 80189ae:	b480      	push	{r7}
 80189b0:	b085      	sub	sp, #20
 80189b2:	af00      	add	r7, sp, #0
 80189b4:	60f8      	str	r0, [r7, #12]
 80189b6:	60b9      	str	r1, [r7, #8]
 80189b8:	ed87 0b00 	vstr	d0, [r7]
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	4618      	mov	r0, r3
 80189c0:	3714      	adds	r7, #20
 80189c2:	46bd      	mov	sp, r7
 80189c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c8:	4770      	bx	lr

080189ca <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 80189ca:	b480      	push	{r7}
 80189cc:	b087      	sub	sp, #28
 80189ce:	af00      	add	r7, sp, #0
 80189d0:	6178      	str	r0, [r7, #20]
 80189d2:	6139      	str	r1, [r7, #16]
 80189d4:	ed87 0b02 	vstr	d0, [r7, #8]
 80189d8:	ed87 1b00 	vstr	d1, [r7]
 80189dc:	697b      	ldr	r3, [r7, #20]
 80189de:	4618      	mov	r0, r3
 80189e0:	371c      	adds	r7, #28
 80189e2:	46bd      	mov	sp, r7
 80189e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e8:	4770      	bx	lr

080189ea <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 80189ea:	b480      	push	{r7}
 80189ec:	b085      	sub	sp, #20
 80189ee:	af00      	add	r7, sp, #0
 80189f0:	60f8      	str	r0, [r7, #12]
 80189f2:	60b9      	str	r1, [r7, #8]
 80189f4:	607a      	str	r2, [r7, #4]
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	4618      	mov	r0, r3
 80189fa:	3714      	adds	r7, #20
 80189fc:	46bd      	mov	sp, r7
 80189fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a02:	4770      	bx	lr

08018a04 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8018a04:	b480      	push	{r7}
 8018a06:	b085      	sub	sp, #20
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	60f8      	str	r0, [r7, #12]
 8018a0c:	60b9      	str	r1, [r7, #8]
 8018a0e:	607a      	str	r2, [r7, #4]
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	4618      	mov	r0, r3
 8018a14:	3714      	adds	r7, #20
 8018a16:	46bd      	mov	sp, r7
 8018a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1c:	4770      	bx	lr

08018a1e <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8018a1e:	b480      	push	{r7}
 8018a20:	b085      	sub	sp, #20
 8018a22:	af00      	add	r7, sp, #0
 8018a24:	60f8      	str	r0, [r7, #12]
 8018a26:	60b9      	str	r1, [r7, #8]
 8018a28:	607a      	str	r2, [r7, #4]
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	3714      	adds	r7, #20
 8018a30:	46bd      	mov	sp, r7
 8018a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a36:	4770      	bx	lr

08018a38 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 8018a38:	b480      	push	{r7}
 8018a3a:	b085      	sub	sp, #20
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	60f8      	str	r0, [r7, #12]
 8018a40:	60b9      	str	r1, [r7, #8]
 8018a42:	607a      	str	r2, [r7, #4]
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	4618      	mov	r0, r3
 8018a48:	3714      	adds	r7, #20
 8018a4a:	46bd      	mov	sp, r7
 8018a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a50:	4770      	bx	lr

08018a52 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 8018a52:	b480      	push	{r7}
 8018a54:	b085      	sub	sp, #20
 8018a56:	af00      	add	r7, sp, #0
 8018a58:	60f8      	str	r0, [r7, #12]
 8018a5a:	60b9      	str	r1, [r7, #8]
 8018a5c:	607a      	str	r2, [r7, #4]
 8018a5e:	603b      	str	r3, [r7, #0]
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	4618      	mov	r0, r3
 8018a64:	3714      	adds	r7, #20
 8018a66:	46bd      	mov	sp, r7
 8018a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6c:	4770      	bx	lr

08018a6e <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8018a6e:	b480      	push	{r7}
 8018a70:	b085      	sub	sp, #20
 8018a72:	af00      	add	r7, sp, #0
 8018a74:	60f8      	str	r0, [r7, #12]
 8018a76:	60b9      	str	r1, [r7, #8]
 8018a78:	607a      	str	r2, [r7, #4]
 8018a7a:	603b      	str	r3, [r7, #0]
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	4618      	mov	r0, r3
 8018a80:	3714      	adds	r7, #20
 8018a82:	46bd      	mov	sp, r7
 8018a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a88:	4770      	bx	lr

08018a8a <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 8018a8a:	b480      	push	{r7}
 8018a8c:	b085      	sub	sp, #20
 8018a8e:	af00      	add	r7, sp, #0
 8018a90:	60f8      	str	r0, [r7, #12]
 8018a92:	60b9      	str	r1, [r7, #8]
 8018a94:	607a      	str	r2, [r7, #4]
 8018a96:	603b      	str	r3, [r7, #0]
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	3714      	adds	r7, #20
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa4:	4770      	bx	lr

08018aa6 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8018aa6:	b480      	push	{r7}
 8018aa8:	b085      	sub	sp, #20
 8018aaa:	af00      	add	r7, sp, #0
 8018aac:	60f8      	str	r0, [r7, #12]
 8018aae:	60b9      	str	r1, [r7, #8]
 8018ab0:	607a      	str	r2, [r7, #4]
 8018ab2:	603b      	str	r3, [r7, #0]
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	3714      	adds	r7, #20
 8018aba:	46bd      	mov	sp, r7
 8018abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac0:	4770      	bx	lr

08018ac2 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8018ac2:	b480      	push	{r7}
 8018ac4:	b083      	sub	sp, #12
 8018ac6:	af00      	add	r7, sp, #0
 8018ac8:	6078      	str	r0, [r7, #4]
 8018aca:	6039      	str	r1, [r7, #0]
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	4618      	mov	r0, r3
 8018ad0:	370c      	adds	r7, #12
 8018ad2:	46bd      	mov	sp, r7
 8018ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad8:	4770      	bx	lr

08018ada <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 8018ada:	b480      	push	{r7}
 8018adc:	b083      	sub	sp, #12
 8018ade:	af00      	add	r7, sp, #0
 8018ae0:	6078      	str	r0, [r7, #4]
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	370c      	adds	r7, #12
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aee:	4770      	bx	lr

08018af0 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8018af0:	b480      	push	{r7}
 8018af2:	b083      	sub	sp, #12
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
 8018af8:	460b      	mov	r3, r1
 8018afa:	70fb      	strb	r3, [r7, #3]
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	4618      	mov	r0, r3
 8018b00:	370c      	adds	r7, #12
 8018b02:	46bd      	mov	sp, r7
 8018b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b08:	4770      	bx	lr

08018b0a <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 8018b0a:	b480      	push	{r7}
 8018b0c:	b083      	sub	sp, #12
 8018b0e:	af00      	add	r7, sp, #0
 8018b10:	6078      	str	r0, [r7, #4]
 8018b12:	6039      	str	r1, [r7, #0]
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	4618      	mov	r0, r3
 8018b18:	370c      	adds	r7, #12
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b20:	4770      	bx	lr

08018b22 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8018b22:	b480      	push	{r7}
 8018b24:	b083      	sub	sp, #12
 8018b26:	af00      	add	r7, sp, #0
 8018b28:	6078      	str	r0, [r7, #4]
 8018b2a:	6039      	str	r1, [r7, #0]
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	4618      	mov	r0, r3
 8018b30:	370c      	adds	r7, #12
 8018b32:	46bd      	mov	sp, r7
 8018b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b38:	4770      	bx	lr

08018b3a <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 8018b3a:	b480      	push	{r7}
 8018b3c:	b083      	sub	sp, #12
 8018b3e:	af00      	add	r7, sp, #0
 8018b40:	6078      	str	r0, [r7, #4]
 8018b42:	6039      	str	r1, [r7, #0]
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	4618      	mov	r0, r3
 8018b48:	370c      	adds	r7, #12
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b50:	4770      	bx	lr

08018b52 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 8018b52:	b480      	push	{r7}
 8018b54:	b083      	sub	sp, #12
 8018b56:	af00      	add	r7, sp, #0
 8018b58:	6078      	str	r0, [r7, #4]
 8018b5a:	6039      	str	r1, [r7, #0]
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	4618      	mov	r0, r3
 8018b60:	370c      	adds	r7, #12
 8018b62:	46bd      	mov	sp, r7
 8018b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b68:	4770      	bx	lr

08018b6a <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 8018b6a:	b480      	push	{r7}
 8018b6c:	b085      	sub	sp, #20
 8018b6e:	af00      	add	r7, sp, #0
 8018b70:	60f8      	str	r0, [r7, #12]
 8018b72:	1d3b      	adds	r3, r7, #4
 8018b74:	e883 0006 	stmia.w	r3, {r1, r2}
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	3714      	adds	r7, #20
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b84:	4770      	bx	lr

08018b86 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 8018b86:	b480      	push	{r7}
 8018b88:	b085      	sub	sp, #20
 8018b8a:	af00      	add	r7, sp, #0
 8018b8c:	60f8      	str	r0, [r7, #12]
 8018b8e:	1d3b      	adds	r3, r7, #4
 8018b90:	e883 0006 	stmia.w	r3, {r1, r2}
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	4618      	mov	r0, r3
 8018b98:	3714      	adds	r7, #20
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba0:	4770      	bx	lr

08018ba2 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 8018ba2:	b480      	push	{r7}
 8018ba4:	b085      	sub	sp, #20
 8018ba6:	af00      	add	r7, sp, #0
 8018ba8:	60f8      	str	r0, [r7, #12]
 8018baa:	ed87 0b00 	vstr	d0, [r7]
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	3714      	adds	r7, #20
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bba:	4770      	bx	lr

08018bbc <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 8018bbc:	b480      	push	{r7}
 8018bbe:	b083      	sub	sp, #12
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	6078      	str	r0, [r7, #4]
 8018bc4:	6039      	str	r1, [r7, #0]
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	4618      	mov	r0, r3
 8018bca:	370c      	adds	r7, #12
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd2:	4770      	bx	lr

08018bd4 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 8018bd4:	b480      	push	{r7}
 8018bd6:	b083      	sub	sp, #12
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	6078      	str	r0, [r7, #4]
 8018bdc:	6039      	str	r1, [r7, #0]
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	4618      	mov	r0, r3
 8018be2:	370c      	adds	r7, #12
 8018be4:	46bd      	mov	sp, r7
 8018be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bea:	4770      	bx	lr

08018bec <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 8018bec:	b480      	push	{r7}
 8018bee:	b083      	sub	sp, #12
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
 8018bf4:	6039      	str	r1, [r7, #0]
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	370c      	adds	r7, #12
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c02:	4770      	bx	lr

08018c04 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 8018c04:	b480      	push	{r7}
 8018c06:	b083      	sub	sp, #12
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
 8018c0c:	6039      	str	r1, [r7, #0]
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	4618      	mov	r0, r3
 8018c12:	370c      	adds	r7, #12
 8018c14:	46bd      	mov	sp, r7
 8018c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1a:	4770      	bx	lr

08018c1c <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 8018c1c:	b480      	push	{r7}
 8018c1e:	b083      	sub	sp, #12
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]
 8018c24:	6039      	str	r1, [r7, #0]
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	4618      	mov	r0, r3
 8018c2a:	370c      	adds	r7, #12
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c32:	4770      	bx	lr

08018c34 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8018c34:	b480      	push	{r7}
 8018c36:	b083      	sub	sp, #12
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
 8018c3c:	4a04      	ldr	r2, [pc, #16]	; (8018c50 <_ZN16MockExpectedCallC1Ev+0x1c>)
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	601a      	str	r2, [r3, #0]
{
}
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	4618      	mov	r0, r3
 8018c46:	370c      	adds	r7, #12
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4e:	4770      	bx	lr
 8018c50:	08026f0c 	.word	0x08026f0c

08018c54 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 8018c54:	b480      	push	{r7}
 8018c56:	b083      	sub	sp, #12
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
 8018c5c:	4a04      	ldr	r2, [pc, #16]	; (8018c70 <_ZN16MockExpectedCallD1Ev+0x1c>)
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	601a      	str	r2, [r3, #0]
{
}
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	4618      	mov	r0, r3
 8018c66:	370c      	adds	r7, #12
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6e:	4770      	bx	lr
 8018c70:	08026f0c 	.word	0x08026f0c

08018c74 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b082      	sub	sp, #8
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
 8018c7c:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	3358      	adds	r3, #88	; 0x58
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	687a      	ldr	r2, [r7, #4]
 8018c88:	6839      	ldr	r1, [r7, #0]
 8018c8a:	4610      	mov	r0, r2
 8018c8c:	4798      	blx	r3
}
 8018c8e:	6878      	ldr	r0, [r7, #4]
 8018c90:	3708      	adds	r7, #8
 8018c92:	46bd      	mov	sp, r7
 8018c94:	bd80      	pop	{r7, pc}

08018c96 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 8018c96:	b580      	push	{r7, lr}
 8018c98:	b082      	sub	sp, #8
 8018c9a:	af00      	add	r7, sp, #0
 8018c9c:	6078      	str	r0, [r7, #4]
 8018c9e:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	3304      	adds	r3, #4
 8018ca4:	6839      	ldr	r1, [r7, #0]
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	f7f2 fbcb 	bl	800b442 <_ZN12SimpleStringaSERKS_>
}
 8018cac:	bf00      	nop
 8018cae:	3708      	adds	r7, #8
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}

08018cb4 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b082      	sub	sp, #8
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]
 8018cbc:	6039      	str	r1, [r7, #0]
    return functionName_;
 8018cbe:	683b      	ldr	r3, [r7, #0]
 8018cc0:	3304      	adds	r3, #4
 8018cc2:	4619      	mov	r1, r3
 8018cc4:	6878      	ldr	r0, [r7, #4]
 8018cc6:	f7f2 fba4 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
}
 8018cca:	6878      	ldr	r0, [r7, #4]
 8018ccc:	3708      	adds	r7, #8
 8018cce:	46bd      	mov	sp, r7
 8018cd0:	bd80      	pop	{r7, pc}
	...

08018cd4 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 8018cd4:	b590      	push	{r4, r7, lr}
 8018cd6:	b085      	sub	sp, #20
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
 8018cdc:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7ff ffa7 	bl	8018c34 <_ZN16MockExpectedCallC1Ev>
 8018ce6:	4a2c      	ldr	r2, [pc, #176]	; (8018d98 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	601a      	str	r2, [r3, #0]
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	3304      	adds	r3, #4
 8018cf0:	492a      	ldr	r1, [pc, #168]	; (8018d9c <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7f2 fb39 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	2200      	movs	r2, #0
 8018cfc:	731a      	strb	r2, [r3, #12]
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	2200      	movs	r2, #0
 8018d02:	735a      	strb	r2, [r3, #13]
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	2200      	movs	r2, #0
 8018d08:	611a      	str	r2, [r3, #16]
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	2200      	movs	r2, #0
 8018d0e:	615a      	str	r2, [r3, #20]
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2200      	movs	r2, #0
 8018d14:	761a      	strb	r2, [r3, #24]
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8018d1c:	f107 0308 	add.w	r3, r7, #8
 8018d20:	491e      	ldr	r1, [pc, #120]	; (8018d9c <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8018d22:	4618      	mov	r0, r3
 8018d24:	f7f2 fb21 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8018d28:	f107 0308 	add.w	r3, r7, #8
 8018d2c:	4619      	mov	r1, r3
 8018d2e:	4620      	mov	r0, r4
 8018d30:	f003 f840 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018d34:	f107 0308 	add.w	r3, r7, #8
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f7f2 fece 	bl	800bada <_ZN12SimpleStringD1Ev>
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	2200      	movs	r2, #0
 8018d42:	661a      	str	r2, [r3, #96]	; 0x60
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	2200      	movs	r2, #0
 8018d48:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	2201      	movs	r2, #1
 8018d50:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	2200      	movs	r2, #0
 8018d58:	669a      	str	r2, [r3, #104]	; 0x68
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	683a      	ldr	r2, [r7, #0]
 8018d5e:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 8018d60:	2246      	movs	r2, #70	; 0x46
 8018d62:	490f      	ldr	r1, [pc, #60]	; (8018da0 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8018d64:	2004      	movs	r0, #4
 8018d66:	f7ef ff3d 	bl	8008be4 <_ZnwjPKci>
 8018d6a:	4604      	mov	r4, r0
 8018d6c:	4620      	mov	r0, r4
 8018d6e:	f004 ff34 	bl	801dbda <_ZN18MockNamedValueListC1Ev>
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 8018d76:	2247      	movs	r2, #71	; 0x47
 8018d78:	4909      	ldr	r1, [pc, #36]	; (8018da0 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8018d7a:	2004      	movs	r0, #4
 8018d7c:	f7ef ff32 	bl	8008be4 <_ZnwjPKci>
 8018d80:	4604      	mov	r4, r0
 8018d82:	4620      	mov	r0, r4
 8018d84:	f004 ff29 	bl	801dbda <_ZN18MockNamedValueListC1Ev>
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	621c      	str	r4, [r3, #32]
}
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	4618      	mov	r0, r3
 8018d90:	3714      	adds	r7, #20
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd90      	pop	{r4, r7, pc}
 8018d96:	bf00      	nop
 8018d98:	08026d50 	.word	0x08026d50
 8018d9c:	08024454 	.word	0x08024454
 8018da0:	08024458 	.word	0x08024458

08018da4 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
 8018dac:	4a17      	ldr	r2, [pc, #92]	; (8018e0c <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	69db      	ldr	r3, [r3, #28]
 8018db6:	4618      	mov	r0, r3
 8018db8:	f004 ff1d 	bl	801dbf6 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	69db      	ldr	r3, [r3, #28]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d003      	beq.n	8018dcc <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 8018dc4:	2104      	movs	r1, #4
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7ef ff20 	bl	8008c0c <_ZdlPvj>
    outputParameters_->clear();
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	6a1b      	ldr	r3, [r3, #32]
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f004 ff10 	bl	801dbf6 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	6a1b      	ldr	r3, [r3, #32]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d003      	beq.n	8018de6 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 8018dde:	2104      	movs	r1, #4
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7ef ff13 	bl	8008c0c <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	3328      	adds	r3, #40	; 0x28
 8018dea:	4618      	mov	r0, r3
 8018dec:	f003 f80c 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	3304      	adds	r3, #4
 8018df4:	4618      	mov	r0, r3
 8018df6:	f7f2 fe70 	bl	800bada <_ZN12SimpleStringD1Ev>
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	f7ff ff29 	bl	8018c54 <_ZN16MockExpectedCallD1Ev>
}
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	4618      	mov	r0, r3
 8018e06:	3708      	adds	r7, #8
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	bd80      	pop	{r7, pc}
 8018e0c:	08026d50 	.word	0x08026d50

08018e10 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018e10:	b580      	push	{r7, lr}
 8018e12:	b082      	sub	sp, #8
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
}
 8018e18:	6878      	ldr	r0, [r7, #4]
 8018e1a:	f7ff ffc3 	bl	8018da4 <_ZN23MockCheckedExpectedCallD1Ev>
 8018e1e:	2170      	movs	r1, #112	; 0x70
 8018e20:	6878      	ldr	r0, [r7, #4]
 8018e22:	f7ef fef3 	bl	8008c0c <_ZdlPvj>
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	4618      	mov	r0, r3
 8018e2a:	3708      	adds	r7, #8
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bd80      	pop	{r7, pc}

08018e30 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b082      	sub	sp, #8
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
 8018e38:	6039      	str	r1, [r7, #0]
    setName(name);
 8018e3a:	6839      	ldr	r1, [r7, #0]
 8018e3c:	6878      	ldr	r0, [r7, #4]
 8018e3e:	f7ff ff2a 	bl	8018c96 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 8018e42:	687b      	ldr	r3, [r7, #4]
}
 8018e44:	4618      	mov	r0, r3
 8018e46:	3708      	adds	r7, #8
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd80      	pop	{r7, pc}

08018e4c <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 8018e4c:	b590      	push	{r4, r7, lr}
 8018e4e:	b087      	sub	sp, #28
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	60f8      	str	r0, [r7, #12]
 8018e54:	60b9      	str	r1, [r7, #8]
 8018e56:	4613      	mov	r3, r2
 8018e58:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018e5a:	225a      	movs	r2, #90	; 0x5a
 8018e5c:	490e      	ldr	r1, [pc, #56]	; (8018e98 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 8018e5e:	2038      	movs	r0, #56	; 0x38
 8018e60:	f7ef fec0 	bl	8008be4 <_ZnwjPKci>
 8018e64:	4604      	mov	r4, r0
 8018e66:	68b9      	ldr	r1, [r7, #8]
 8018e68:	4620      	mov	r0, r4
 8018e6a:	f001 f851 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018e6e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	69db      	ldr	r3, [r3, #28]
 8018e74:	6979      	ldr	r1, [r7, #20]
 8018e76:	4618      	mov	r0, r3
 8018e78:	f004 fee0 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018e7c:	697b      	ldr	r3, [r7, #20]
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	3308      	adds	r3, #8
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	79fa      	ldrb	r2, [r7, #7]
 8018e86:	4611      	mov	r1, r2
 8018e88:	6978      	ldr	r0, [r7, #20]
 8018e8a:	4798      	blx	r3
    return *this;
 8018e8c:	68fb      	ldr	r3, [r7, #12]
}
 8018e8e:	4618      	mov	r0, r3
 8018e90:	371c      	adds	r7, #28
 8018e92:	46bd      	mov	sp, r7
 8018e94:	bd90      	pop	{r4, r7, pc}
 8018e96:	bf00      	nop
 8018e98:	08024458 	.word	0x08024458

08018e9c <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8018e9c:	b590      	push	{r4, r7, lr}
 8018e9e:	b087      	sub	sp, #28
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	60f8      	str	r0, [r7, #12]
 8018ea4:	60b9      	str	r1, [r7, #8]
 8018ea6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018ea8:	2262      	movs	r2, #98	; 0x62
 8018eaa:	490e      	ldr	r1, [pc, #56]	; (8018ee4 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 8018eac:	2038      	movs	r0, #56	; 0x38
 8018eae:	f7ef fe99 	bl	8008be4 <_ZnwjPKci>
 8018eb2:	4604      	mov	r4, r0
 8018eb4:	68b9      	ldr	r1, [r7, #8]
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	f001 f82a 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018ebc:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	69db      	ldr	r3, [r3, #28]
 8018ec2:	6979      	ldr	r1, [r7, #20]
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	f004 feb9 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018eca:	697b      	ldr	r3, [r7, #20]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	3310      	adds	r3, #16
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	6879      	ldr	r1, [r7, #4]
 8018ed4:	6978      	ldr	r0, [r7, #20]
 8018ed6:	4798      	blx	r3
    return *this;
 8018ed8:	68fb      	ldr	r3, [r7, #12]
}
 8018eda:	4618      	mov	r0, r3
 8018edc:	371c      	adds	r7, #28
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd90      	pop	{r4, r7, pc}
 8018ee2:	bf00      	nop
 8018ee4:	08024458 	.word	0x08024458

08018ee8 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 8018ee8:	b590      	push	{r4, r7, lr}
 8018eea:	b087      	sub	sp, #28
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	60f8      	str	r0, [r7, #12]
 8018ef0:	60b9      	str	r1, [r7, #8]
 8018ef2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018ef4:	226a      	movs	r2, #106	; 0x6a
 8018ef6:	490e      	ldr	r1, [pc, #56]	; (8018f30 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 8018ef8:	2038      	movs	r0, #56	; 0x38
 8018efa:	f7ef fe73 	bl	8008be4 <_ZnwjPKci>
 8018efe:	4604      	mov	r4, r0
 8018f00:	68b9      	ldr	r1, [r7, #8]
 8018f02:	4620      	mov	r0, r4
 8018f04:	f001 f804 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018f08:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	69db      	ldr	r3, [r3, #28]
 8018f0e:	6979      	ldr	r1, [r7, #20]
 8018f10:	4618      	mov	r0, r3
 8018f12:	f004 fe93 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018f16:	697b      	ldr	r3, [r7, #20]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	330c      	adds	r3, #12
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	6879      	ldr	r1, [r7, #4]
 8018f20:	6978      	ldr	r0, [r7, #20]
 8018f22:	4798      	blx	r3
    return *this;
 8018f24:	68fb      	ldr	r3, [r7, #12]
}
 8018f26:	4618      	mov	r0, r3
 8018f28:	371c      	adds	r7, #28
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	bd90      	pop	{r4, r7, pc}
 8018f2e:	bf00      	nop
 8018f30:	08024458 	.word	0x08024458

08018f34 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8018f34:	b590      	push	{r4, r7, lr}
 8018f36:	b087      	sub	sp, #28
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	60f8      	str	r0, [r7, #12]
 8018f3c:	60b9      	str	r1, [r7, #8]
 8018f3e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018f40:	2272      	movs	r2, #114	; 0x72
 8018f42:	490e      	ldr	r1, [pc, #56]	; (8018f7c <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 8018f44:	2038      	movs	r0, #56	; 0x38
 8018f46:	f7ef fe4d 	bl	8008be4 <_ZnwjPKci>
 8018f4a:	4604      	mov	r4, r0
 8018f4c:	68b9      	ldr	r1, [r7, #8]
 8018f4e:	4620      	mov	r0, r4
 8018f50:	f000 ffde 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018f54:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	69db      	ldr	r3, [r3, #28]
 8018f5a:	6979      	ldr	r1, [r7, #20]
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f004 fe6d 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018f62:	697b      	ldr	r3, [r7, #20]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	3314      	adds	r3, #20
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	6879      	ldr	r1, [r7, #4]
 8018f6c:	6978      	ldr	r0, [r7, #20]
 8018f6e:	4798      	blx	r3
    return *this;
 8018f70:	68fb      	ldr	r3, [r7, #12]
}
 8018f72:	4618      	mov	r0, r3
 8018f74:	371c      	adds	r7, #28
 8018f76:	46bd      	mov	sp, r7
 8018f78:	bd90      	pop	{r4, r7, pc}
 8018f7a:	bf00      	nop
 8018f7c:	08024458 	.word	0x08024458

08018f80 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018f80:	b590      	push	{r4, r7, lr}
 8018f82:	b087      	sub	sp, #28
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	60f8      	str	r0, [r7, #12]
 8018f88:	60b9      	str	r1, [r7, #8]
 8018f8a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018f8c:	227a      	movs	r2, #122	; 0x7a
 8018f8e:	490e      	ldr	r1, [pc, #56]	; (8018fc8 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 8018f90:	2038      	movs	r0, #56	; 0x38
 8018f92:	f7ef fe27 	bl	8008be4 <_ZnwjPKci>
 8018f96:	4604      	mov	r4, r0
 8018f98:	68b9      	ldr	r1, [r7, #8]
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	f000 ffb8 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018fa0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	69db      	ldr	r3, [r3, #28]
 8018fa6:	6979      	ldr	r1, [r7, #20]
 8018fa8:	4618      	mov	r0, r3
 8018faa:	f004 fe47 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018fae:	697b      	ldr	r3, [r7, #20]
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	3318      	adds	r3, #24
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	6879      	ldr	r1, [r7, #4]
 8018fb8:	6978      	ldr	r0, [r7, #20]
 8018fba:	4798      	blx	r3
    return *this;
 8018fbc:	68fb      	ldr	r3, [r7, #12]
}
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	371c      	adds	r7, #28
 8018fc2:	46bd      	mov	sp, r7
 8018fc4:	bd90      	pop	{r4, r7, pc}
 8018fc6:	bf00      	nop
 8018fc8:	08024458 	.word	0x08024458

08018fcc <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8018fcc:	b5b0      	push	{r4, r5, r7, lr}
 8018fce:	b086      	sub	sp, #24
 8018fd0:	af02      	add	r7, sp, #8
 8018fd2:	60f8      	str	r0, [r7, #12]
 8018fd4:	60b9      	str	r1, [r7, #8]
 8018fd6:	4639      	mov	r1, r7
 8018fd8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018fdc:	f7f9 fda8 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8018fe0:	4604      	mov	r4, r0
 8018fe2:	6823      	ldr	r3, [r4, #0]
 8018fe4:	3368      	adds	r3, #104	; 0x68
 8018fe6:	681d      	ldr	r5, [r3, #0]
 8018fe8:	f7f9 fdb2 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018fec:	4603      	mov	r3, r0
 8018fee:	9300      	str	r3, [sp, #0]
 8018ff0:	2396      	movs	r3, #150	; 0x96
 8018ff2:	4a04      	ldr	r2, [pc, #16]	; (8019004 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 8018ff4:	4904      	ldr	r1, [pc, #16]	; (8019008 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8018ff6:	4620      	mov	r0, r4
 8018ff8:	47a8      	blx	r5
    return *this;
 8018ffa:	68fb      	ldr	r3, [r7, #12]
}
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	3710      	adds	r7, #16
 8019000:	46bd      	mov	sp, r7
 8019002:	bdb0      	pop	{r4, r5, r7, pc}
 8019004:	08024458 	.word	0x08024458
 8019008:	08024474 	.word	0x08024474

0801900c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801900c:	b5b0      	push	{r4, r5, r7, lr}
 801900e:	b086      	sub	sp, #24
 8019010:	af02      	add	r7, sp, #8
 8019012:	60f8      	str	r0, [r7, #12]
 8019014:	60b9      	str	r1, [r7, #8]
 8019016:	4639      	mov	r1, r7
 8019018:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801901c:	f7f9 fd88 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 8019020:	4604      	mov	r4, r0
 8019022:	6823      	ldr	r3, [r4, #0]
 8019024:	3368      	adds	r3, #104	; 0x68
 8019026:	681d      	ldr	r5, [r3, #0]
 8019028:	f7f9 fd92 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801902c:	4603      	mov	r3, r0
 801902e:	9300      	str	r3, [sp, #0]
 8019030:	239c      	movs	r3, #156	; 0x9c
 8019032:	4a04      	ldr	r2, [pc, #16]	; (8019044 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 8019034:	4904      	ldr	r1, [pc, #16]	; (8019048 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8019036:	4620      	mov	r0, r4
 8019038:	47a8      	blx	r5
    return *this;
 801903a:	68fb      	ldr	r3, [r7, #12]
}
 801903c:	4618      	mov	r0, r3
 801903e:	3710      	adds	r7, #16
 8019040:	46bd      	mov	sp, r7
 8019042:	bdb0      	pop	{r4, r5, r7, pc}
 8019044:	08024458 	.word	0x08024458
 8019048:	08024494 	.word	0x08024494

0801904c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801904c:	b590      	push	{r4, r7, lr}
 801904e:	b087      	sub	sp, #28
 8019050:	af00      	add	r7, sp, #0
 8019052:	60f8      	str	r0, [r7, #12]
 8019054:	60b9      	str	r1, [r7, #8]
 8019056:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801905a:	22a4      	movs	r2, #164	; 0xa4
 801905c:	490e      	ldr	r1, [pc, #56]	; (8019098 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801905e:	2038      	movs	r0, #56	; 0x38
 8019060:	f7ef fdc0 	bl	8008be4 <_ZnwjPKci>
 8019064:	4604      	mov	r4, r0
 8019066:	68b9      	ldr	r1, [r7, #8]
 8019068:	4620      	mov	r0, r4
 801906a:	f000 ff51 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801906e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	69db      	ldr	r3, [r3, #28]
 8019074:	6979      	ldr	r1, [r7, #20]
 8019076:	4618      	mov	r0, r3
 8019078:	f004 fde0 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801907c:	697b      	ldr	r3, [r7, #20]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	3324      	adds	r3, #36	; 0x24
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	ed97 0b00 	vldr	d0, [r7]
 8019088:	6978      	ldr	r0, [r7, #20]
 801908a:	4798      	blx	r3
    return *this;
 801908c:	68fb      	ldr	r3, [r7, #12]
}
 801908e:	4618      	mov	r0, r3
 8019090:	371c      	adds	r7, #28
 8019092:	46bd      	mov	sp, r7
 8019094:	bd90      	pop	{r4, r7, pc}
 8019096:	bf00      	nop
 8019098:	08024458 	.word	0x08024458

0801909c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801909c:	b590      	push	{r4, r7, lr}
 801909e:	b089      	sub	sp, #36	; 0x24
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	6178      	str	r0, [r7, #20]
 80190a4:	6139      	str	r1, [r7, #16]
 80190a6:	ed87 0b02 	vstr	d0, [r7, #8]
 80190aa:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80190ae:	22ac      	movs	r2, #172	; 0xac
 80190b0:	490f      	ldr	r1, [pc, #60]	; (80190f0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 80190b2:	2038      	movs	r0, #56	; 0x38
 80190b4:	f7ef fd96 	bl	8008be4 <_ZnwjPKci>
 80190b8:	4604      	mov	r4, r0
 80190ba:	6939      	ldr	r1, [r7, #16]
 80190bc:	4620      	mov	r0, r4
 80190be:	f000 ff27 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80190c2:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 80190c4:	697b      	ldr	r3, [r7, #20]
 80190c6:	69db      	ldr	r3, [r3, #28]
 80190c8:	69f9      	ldr	r1, [r7, #28]
 80190ca:	4618      	mov	r0, r3
 80190cc:	f004 fdb6 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 80190d0:	69fb      	ldr	r3, [r7, #28]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	3328      	adds	r3, #40	; 0x28
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	ed97 1b00 	vldr	d1, [r7]
 80190dc:	ed97 0b02 	vldr	d0, [r7, #8]
 80190e0:	69f8      	ldr	r0, [r7, #28]
 80190e2:	4798      	blx	r3
    return *this;
 80190e4:	697b      	ldr	r3, [r7, #20]
}
 80190e6:	4618      	mov	r0, r3
 80190e8:	3724      	adds	r7, #36	; 0x24
 80190ea:	46bd      	mov	sp, r7
 80190ec:	bd90      	pop	{r4, r7, pc}
 80190ee:	bf00      	nop
 80190f0:	08024458 	.word	0x08024458

080190f4 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 80190f4:	b590      	push	{r4, r7, lr}
 80190f6:	b087      	sub	sp, #28
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	60f8      	str	r0, [r7, #12]
 80190fc:	60b9      	str	r1, [r7, #8]
 80190fe:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019100:	22b4      	movs	r2, #180	; 0xb4
 8019102:	490e      	ldr	r1, [pc, #56]	; (801913c <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 8019104:	2038      	movs	r0, #56	; 0x38
 8019106:	f7ef fd6d 	bl	8008be4 <_ZnwjPKci>
 801910a:	4604      	mov	r4, r0
 801910c:	68b9      	ldr	r1, [r7, #8]
 801910e:	4620      	mov	r0, r4
 8019110:	f000 fefe 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019114:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	69db      	ldr	r3, [r3, #28]
 801911a:	6979      	ldr	r1, [r7, #20]
 801911c:	4618      	mov	r0, r3
 801911e:	f004 fd8d 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8019122:	697b      	ldr	r3, [r7, #20]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	3338      	adds	r3, #56	; 0x38
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	6879      	ldr	r1, [r7, #4]
 801912c:	6978      	ldr	r0, [r7, #20]
 801912e:	4798      	blx	r3
    return *this;
 8019130:	68fb      	ldr	r3, [r7, #12]
}
 8019132:	4618      	mov	r0, r3
 8019134:	371c      	adds	r7, #28
 8019136:	46bd      	mov	sp, r7
 8019138:	bd90      	pop	{r4, r7, pc}
 801913a:	bf00      	nop
 801913c:	08024458 	.word	0x08024458

08019140 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 8019140:	b590      	push	{r4, r7, lr}
 8019142:	b087      	sub	sp, #28
 8019144:	af00      	add	r7, sp, #0
 8019146:	60f8      	str	r0, [r7, #12]
 8019148:	60b9      	str	r1, [r7, #8]
 801914a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801914c:	22bc      	movs	r2, #188	; 0xbc
 801914e:	490e      	ldr	r1, [pc, #56]	; (8019188 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 8019150:	2038      	movs	r0, #56	; 0x38
 8019152:	f7ef fd47 	bl	8008be4 <_ZnwjPKci>
 8019156:	4604      	mov	r4, r0
 8019158:	68b9      	ldr	r1, [r7, #8]
 801915a:	4620      	mov	r0, r4
 801915c:	f000 fed8 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019160:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	69db      	ldr	r3, [r3, #28]
 8019166:	6979      	ldr	r1, [r7, #20]
 8019168:	4618      	mov	r0, r3
 801916a:	f004 fd67 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801916e:	697b      	ldr	r3, [r7, #20]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	332c      	adds	r3, #44	; 0x2c
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	6879      	ldr	r1, [r7, #4]
 8019178:	6978      	ldr	r0, [r7, #20]
 801917a:	4798      	blx	r3
    return *this;
 801917c:	68fb      	ldr	r3, [r7, #12]
}
 801917e:	4618      	mov	r0, r3
 8019180:	371c      	adds	r7, #28
 8019182:	46bd      	mov	sp, r7
 8019184:	bd90      	pop	{r4, r7, pc}
 8019186:	bf00      	nop
 8019188:	08024458 	.word	0x08024458

0801918c <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801918c:	b590      	push	{r4, r7, lr}
 801918e:	b087      	sub	sp, #28
 8019190:	af00      	add	r7, sp, #0
 8019192:	60f8      	str	r0, [r7, #12]
 8019194:	60b9      	str	r1, [r7, #8]
 8019196:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019198:	22c4      	movs	r2, #196	; 0xc4
 801919a:	490e      	ldr	r1, [pc, #56]	; (80191d4 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801919c:	2038      	movs	r0, #56	; 0x38
 801919e:	f7ef fd21 	bl	8008be4 <_ZnwjPKci>
 80191a2:	4604      	mov	r4, r0
 80191a4:	68b9      	ldr	r1, [r7, #8]
 80191a6:	4620      	mov	r0, r4
 80191a8:	f000 feb2 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80191ac:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	69db      	ldr	r3, [r3, #28]
 80191b2:	6979      	ldr	r1, [r7, #20]
 80191b4:	4618      	mov	r0, r3
 80191b6:	f004 fd41 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80191ba:	697b      	ldr	r3, [r7, #20]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	3330      	adds	r3, #48	; 0x30
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	6879      	ldr	r1, [r7, #4]
 80191c4:	6978      	ldr	r0, [r7, #20]
 80191c6:	4798      	blx	r3
    return *this;
 80191c8:	68fb      	ldr	r3, [r7, #12]
}
 80191ca:	4618      	mov	r0, r3
 80191cc:	371c      	adds	r7, #28
 80191ce:	46bd      	mov	sp, r7
 80191d0:	bd90      	pop	{r4, r7, pc}
 80191d2:	bf00      	nop
 80191d4:	08024458 	.word	0x08024458

080191d8 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80191d8:	b590      	push	{r4, r7, lr}
 80191da:	b087      	sub	sp, #28
 80191dc:	af00      	add	r7, sp, #0
 80191de:	60f8      	str	r0, [r7, #12]
 80191e0:	60b9      	str	r1, [r7, #8]
 80191e2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80191e4:	22cc      	movs	r2, #204	; 0xcc
 80191e6:	490e      	ldr	r1, [pc, #56]	; (8019220 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 80191e8:	2038      	movs	r0, #56	; 0x38
 80191ea:	f7ef fcfb 	bl	8008be4 <_ZnwjPKci>
 80191ee:	4604      	mov	r4, r0
 80191f0:	68b9      	ldr	r1, [r7, #8]
 80191f2:	4620      	mov	r0, r4
 80191f4:	f000 fe8c 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80191f8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	69db      	ldr	r3, [r3, #28]
 80191fe:	6979      	ldr	r1, [r7, #20]
 8019200:	4618      	mov	r0, r3
 8019202:	f004 fd1b 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8019206:	697b      	ldr	r3, [r7, #20]
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	3334      	adds	r3, #52	; 0x34
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	6879      	ldr	r1, [r7, #4]
 8019210:	6978      	ldr	r0, [r7, #20]
 8019212:	4798      	blx	r3
    return *this;
 8019214:	68fb      	ldr	r3, [r7, #12]
}
 8019216:	4618      	mov	r0, r3
 8019218:	371c      	adds	r7, #28
 801921a:	46bd      	mov	sp, r7
 801921c:	bd90      	pop	{r4, r7, pc}
 801921e:	bf00      	nop
 8019220:	08024458 	.word	0x08024458

08019224 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8019224:	b590      	push	{r4, r7, lr}
 8019226:	b087      	sub	sp, #28
 8019228:	af00      	add	r7, sp, #0
 801922a:	60f8      	str	r0, [r7, #12]
 801922c:	60b9      	str	r1, [r7, #8]
 801922e:	607a      	str	r2, [r7, #4]
 8019230:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019232:	22d4      	movs	r2, #212	; 0xd4
 8019234:	490e      	ldr	r1, [pc, #56]	; (8019270 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 8019236:	2038      	movs	r0, #56	; 0x38
 8019238:	f7ef fcd4 	bl	8008be4 <_ZnwjPKci>
 801923c:	4604      	mov	r4, r0
 801923e:	68b9      	ldr	r1, [r7, #8]
 8019240:	4620      	mov	r0, r4
 8019242:	f000 fe65 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019246:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	69db      	ldr	r3, [r3, #28]
 801924c:	6979      	ldr	r1, [r7, #20]
 801924e:	4618      	mov	r0, r3
 8019250:	f004 fcf4 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 8019254:	697b      	ldr	r3, [r7, #20]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	333c      	adds	r3, #60	; 0x3c
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	683a      	ldr	r2, [r7, #0]
 801925e:	6879      	ldr	r1, [r7, #4]
 8019260:	6978      	ldr	r0, [r7, #20]
 8019262:	4798      	blx	r3
    return *this;
 8019264:	68fb      	ldr	r3, [r7, #12]
}
 8019266:	4618      	mov	r0, r3
 8019268:	371c      	adds	r7, #28
 801926a:	46bd      	mov	sp, r7
 801926c:	bd90      	pop	{r4, r7, pc}
 801926e:	bf00      	nop
 8019270:	08024458 	.word	0x08024458

08019274 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8019274:	b590      	push	{r4, r7, lr}
 8019276:	b087      	sub	sp, #28
 8019278:	af00      	add	r7, sp, #0
 801927a:	60f8      	str	r0, [r7, #12]
 801927c:	60b9      	str	r1, [r7, #8]
 801927e:	607a      	str	r2, [r7, #4]
 8019280:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019282:	22dc      	movs	r2, #220	; 0xdc
 8019284:	490e      	ldr	r1, [pc, #56]	; (80192c0 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 8019286:	2038      	movs	r0, #56	; 0x38
 8019288:	f7ef fcac 	bl	8008be4 <_ZnwjPKci>
 801928c:	4604      	mov	r4, r0
 801928e:	6879      	ldr	r1, [r7, #4]
 8019290:	4620      	mov	r0, r4
 8019292:	f000 fe3d 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019296:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	69db      	ldr	r3, [r3, #28]
 801929c:	6979      	ldr	r1, [r7, #20]
 801929e:	4618      	mov	r0, r3
 80192a0:	f004 fccc 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 80192a4:	697b      	ldr	r3, [r7, #20]
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	3340      	adds	r3, #64	; 0x40
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	683a      	ldr	r2, [r7, #0]
 80192ae:	68b9      	ldr	r1, [r7, #8]
 80192b0:	6978      	ldr	r0, [r7, #20]
 80192b2:	4798      	blx	r3
    return *this;
 80192b4:	68fb      	ldr	r3, [r7, #12]
}
 80192b6:	4618      	mov	r0, r3
 80192b8:	371c      	adds	r7, #28
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd90      	pop	{r4, r7, pc}
 80192be:	bf00      	nop
 80192c0:	08024458 	.word	0x08024458

080192c4 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 80192c4:	b590      	push	{r4, r7, lr}
 80192c6:	b087      	sub	sp, #28
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	60f8      	str	r0, [r7, #12]
 80192cc:	60b9      	str	r1, [r7, #8]
 80192ce:	607a      	str	r2, [r7, #4]
 80192d0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80192d2:	22e4      	movs	r2, #228	; 0xe4
 80192d4:	4911      	ldr	r1, [pc, #68]	; (801931c <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 80192d6:	2038      	movs	r0, #56	; 0x38
 80192d8:	f7ef fc84 	bl	8008be4 <_ZnwjPKci>
 80192dc:	4604      	mov	r4, r0
 80192de:	68b9      	ldr	r1, [r7, #8]
 80192e0:	4620      	mov	r0, r4
 80192e2:	f000 fe15 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80192e6:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	6a1b      	ldr	r3, [r3, #32]
 80192ec:	6979      	ldr	r1, [r7, #20]
 80192ee:	4618      	mov	r0, r3
 80192f0:	f004 fca4 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80192f4:	697b      	ldr	r3, [r7, #20]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	3330      	adds	r3, #48	; 0x30
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	6879      	ldr	r1, [r7, #4]
 80192fe:	6978      	ldr	r0, [r7, #20]
 8019300:	4798      	blx	r3
    newParameter->setSize(size);
 8019302:	697b      	ldr	r3, [r7, #20]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	3348      	adds	r3, #72	; 0x48
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	6839      	ldr	r1, [r7, #0]
 801930c:	6978      	ldr	r0, [r7, #20]
 801930e:	4798      	blx	r3
    return *this;
 8019310:	68fb      	ldr	r3, [r7, #12]
}
 8019312:	4618      	mov	r0, r3
 8019314:	371c      	adds	r7, #28
 8019316:	46bd      	mov	sp, r7
 8019318:	bd90      	pop	{r4, r7, pc}
 801931a:	bf00      	nop
 801931c:	08024458 	.word	0x08024458

08019320 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 8019320:	b590      	push	{r4, r7, lr}
 8019322:	b087      	sub	sp, #28
 8019324:	af00      	add	r7, sp, #0
 8019326:	60f8      	str	r0, [r7, #12]
 8019328:	60b9      	str	r1, [r7, #8]
 801932a:	607a      	str	r2, [r7, #4]
 801932c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801932e:	22ed      	movs	r2, #237	; 0xed
 8019330:	490e      	ldr	r1, [pc, #56]	; (801936c <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 8019332:	2038      	movs	r0, #56	; 0x38
 8019334:	f7ef fc56 	bl	8008be4 <_ZnwjPKci>
 8019338:	4604      	mov	r4, r0
 801933a:	6879      	ldr	r1, [r7, #4]
 801933c:	4620      	mov	r0, r4
 801933e:	f000 fde7 	bl	8019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019342:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	6a1b      	ldr	r3, [r3, #32]
 8019348:	6979      	ldr	r1, [r7, #20]
 801934a:	4618      	mov	r0, r3
 801934c:	f004 fc76 	bl	801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8019350:	697b      	ldr	r3, [r7, #20]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	3340      	adds	r3, #64	; 0x40
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	683a      	ldr	r2, [r7, #0]
 801935a:	68b9      	ldr	r1, [r7, #8]
 801935c:	6978      	ldr	r0, [r7, #20]
 801935e:	4798      	blx	r3
    return *this;
 8019360:	68fb      	ldr	r3, [r7, #12]
}
 8019362:	4618      	mov	r0, r3
 8019364:	371c      	adds	r7, #28
 8019366:	46bd      	mov	sp, r7
 8019368:	bd90      	pop	{r4, r7, pc}
 801936a:	bf00      	nop
 801936c:	08024458 	.word	0x08024458

08019370 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 8019370:	b590      	push	{r4, r7, lr}
 8019372:	b083      	sub	sp, #12
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
 8019378:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	3318      	adds	r3, #24
 8019380:	681c      	ldr	r4, [r3, #0]
 8019382:	2300      	movs	r3, #0
 8019384:	2200      	movs	r2, #0
 8019386:	6839      	ldr	r1, [r7, #0]
 8019388:	6878      	ldr	r0, [r7, #4]
 801938a:	47a0      	blx	r4
 801938c:	4603      	mov	r3, r0
}
 801938e:	4618      	mov	r0, r3
 8019390:	370c      	adds	r7, #12
 8019392:	46bd      	mov	sp, r7
 8019394:	bd90      	pop	{r4, r7, pc}
	...

08019398 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b086      	sub	sp, #24
 801939c:	af00      	add	r7, sp, #0
 801939e:	60f8      	str	r0, [r7, #12]
 80193a0:	60b9      	str	r1, [r7, #8]
 80193a2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 80193a4:	68bb      	ldr	r3, [r7, #8]
 80193a6:	69db      	ldr	r3, [r3, #28]
 80193a8:	6879      	ldr	r1, [r7, #4]
 80193aa:	4618      	mov	r0, r3
 80193ac:	f004 fc7c 	bl	801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80193b0:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 80193b2:	697b      	ldr	r3, [r7, #20]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d008      	beq.n	80193ca <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 80193b8:	697b      	ldr	r3, [r7, #20]
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	3360      	adds	r3, #96	; 0x60
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	68fa      	ldr	r2, [r7, #12]
 80193c2:	6979      	ldr	r1, [r7, #20]
 80193c4:	4610      	mov	r0, r2
 80193c6:	4798      	blx	r3
 80193c8:	e004      	b.n	80193d4 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	4903      	ldr	r1, [pc, #12]	; (80193dc <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 80193ce:	4618      	mov	r0, r3
 80193d0:	f7f2 fe10 	bl	800bff4 <_Z10StringFromPKc>
}
 80193d4:	68f8      	ldr	r0, [r7, #12]
 80193d6:	3718      	adds	r7, #24
 80193d8:	46bd      	mov	sp, r7
 80193da:	bd80      	pop	{r7, pc}
 80193dc:	08024454 	.word	0x08024454

080193e0 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 80193e0:	b580      	push	{r7, lr}
 80193e2:	b084      	sub	sp, #16
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	6078      	str	r0, [r7, #4]
 80193e8:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	69db      	ldr	r3, [r3, #28]
 80193ee:	6839      	ldr	r1, [r7, #0]
 80193f0:	4618      	mov	r0, r3
 80193f2:	f004 fc59 	bl	801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80193f6:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	bf14      	ite	ne
 80193fe:	2301      	movne	r3, #1
 8019400:	2300      	moveq	r3, #0
 8019402:	b2db      	uxtb	r3, r3
}
 8019404:	4618      	mov	r0, r3
 8019406:	3710      	adds	r7, #16
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}

0801940c <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b084      	sub	sp, #16
 8019410:	af00      	add	r7, sp, #0
 8019412:	6078      	str	r0, [r7, #4]
 8019414:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	6a1b      	ldr	r3, [r3, #32]
 801941a:	6839      	ldr	r1, [r7, #0]
 801941c:	4618      	mov	r0, r3
 801941e:	f004 fc43 	bl	801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019422:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	2b00      	cmp	r3, #0
 8019428:	bf14      	ite	ne
 801942a:	2301      	movne	r3, #1
 801942c:	2300      	moveq	r3, #0
 801942e:	b2db      	uxtb	r3, r3
}
 8019430:	4618      	mov	r0, r3
 8019432:	3710      	adds	r7, #16
 8019434:	46bd      	mov	sp, r7
 8019436:	bd80      	pop	{r7, pc}

08019438 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 8019438:	b590      	push	{r4, r7, lr}
 801943a:	b089      	sub	sp, #36	; 0x24
 801943c:	af00      	add	r7, sp, #0
 801943e:	60f8      	str	r0, [r7, #12]
 8019440:	60b9      	str	r1, [r7, #8]
 8019442:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8019444:	68bb      	ldr	r3, [r7, #8]
 8019446:	69db      	ldr	r3, [r3, #28]
 8019448:	6879      	ldr	r1, [r7, #4]
 801944a:	4618      	mov	r0, r3
 801944c:	f004 fc2c 	bl	801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019450:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8019452:	2400      	movs	r4, #0
 8019454:	69fb      	ldr	r3, [r7, #28]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d004      	beq.n	8019464 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801945a:	69f9      	ldr	r1, [r7, #28]
 801945c:	68f8      	ldr	r0, [r7, #12]
 801945e:	f7f0 f829 	bl	80094b4 <_ZN14MockNamedValueC1ERKS_>
 8019462:	e00c      	b.n	801947e <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 8019464:	f107 0314 	add.w	r3, r7, #20
 8019468:	490a      	ldr	r1, [pc, #40]	; (8019494 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801946a:	4618      	mov	r0, r3
 801946c:	f7f1 ff7d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8019470:	2401      	movs	r4, #1
 8019472:	f107 0314 	add.w	r3, r7, #20
 8019476:	4619      	mov	r1, r3
 8019478:	68f8      	ldr	r0, [r7, #12]
 801947a:	f002 fc9b 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801947e:	2c00      	cmp	r4, #0
 8019480:	d004      	beq.n	801948c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 8019482:	f107 0314 	add.w	r3, r7, #20
 8019486:	4618      	mov	r0, r3
 8019488:	f7f2 fb27 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 801948c:	68f8      	ldr	r0, [r7, #12]
 801948e:	3724      	adds	r7, #36	; 0x24
 8019490:	46bd      	mov	sp, r7
 8019492:	bd90      	pop	{r4, r7, pc}
 8019494:	08024454 	.word	0x08024454

08019498 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 8019498:	b590      	push	{r4, r7, lr}
 801949a:	b089      	sub	sp, #36	; 0x24
 801949c:	af00      	add	r7, sp, #0
 801949e:	60f8      	str	r0, [r7, #12]
 80194a0:	60b9      	str	r1, [r7, #8]
 80194a2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 80194a4:	68bb      	ldr	r3, [r7, #8]
 80194a6:	6a1b      	ldr	r3, [r3, #32]
 80194a8:	6879      	ldr	r1, [r7, #4]
 80194aa:	4618      	mov	r0, r3
 80194ac:	f004 fbfc 	bl	801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80194b0:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 80194b2:	2400      	movs	r4, #0
 80194b4:	69fb      	ldr	r3, [r7, #28]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d004      	beq.n	80194c4 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 80194ba:	69f9      	ldr	r1, [r7, #28]
 80194bc:	68f8      	ldr	r0, [r7, #12]
 80194be:	f7ef fff9 	bl	80094b4 <_ZN14MockNamedValueC1ERKS_>
 80194c2:	e00c      	b.n	80194de <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 80194c4:	f107 0314 	add.w	r3, r7, #20
 80194c8:	490a      	ldr	r1, [pc, #40]	; (80194f4 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 80194ca:	4618      	mov	r0, r3
 80194cc:	f7f1 ff4d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 80194d0:	2401      	movs	r4, #1
 80194d2:	f107 0314 	add.w	r3, r7, #20
 80194d6:	4619      	mov	r1, r3
 80194d8:	68f8      	ldr	r0, [r7, #12]
 80194da:	f002 fc6b 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
 80194de:	2c00      	cmp	r4, #0
 80194e0:	d004      	beq.n	80194ec <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 80194e2:	f107 0314 	add.w	r3, r7, #20
 80194e6:	4618      	mov	r0, r3
 80194e8:	f7f2 faf7 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 80194ec:	68f8      	ldr	r0, [r7, #12]
 80194ee:	3724      	adds	r7, #36	; 0x24
 80194f0:	46bd      	mov	sp, r7
 80194f2:	bd90      	pop	{r4, r7, pc}
 80194f4:	08024454 	.word	0x08024454

080194f8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b084      	sub	sp, #16
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	69db      	ldr	r3, [r3, #28]
 8019504:	4618      	mov	r0, r3
 8019506:	f004 fbfe 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 801950a:	60f8      	str	r0, [r7, #12]
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d014      	beq.n	801953c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 8019512:	68f9      	ldr	r1, [r7, #12]
 8019514:	6878      	ldr	r0, [r7, #4]
 8019516:	f000 fced 	bl	8019ef4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801951a:	4603      	mov	r3, r0
 801951c:	4618      	mov	r0, r3
 801951e:	f000 fd1f 	bl	8019f60 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8019522:	4603      	mov	r3, r0
 8019524:	f083 0301 	eor.w	r3, r3, #1
 8019528:	b2db      	uxtb	r3, r3
 801952a:	2b00      	cmp	r3, #0
 801952c:	d001      	beq.n	8019532 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801952e:	2300      	movs	r3, #0
 8019530:	e023      	b.n	801957a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 8019532:	68f8      	ldr	r0, [r7, #12]
 8019534:	f004 faf0 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8019538:	60f8      	str	r0, [r7, #12]
 801953a:	e7e7      	b.n	801950c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	6a1b      	ldr	r3, [r3, #32]
 8019540:	4618      	mov	r0, r3
 8019542:	f004 fbe0 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019546:	60f8      	str	r0, [r7, #12]
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d014      	beq.n	8019578 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801954e:	68f9      	ldr	r1, [r7, #12]
 8019550:	6878      	ldr	r0, [r7, #4]
 8019552:	f000 fccf 	bl	8019ef4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019556:	4603      	mov	r3, r0
 8019558:	4618      	mov	r0, r3
 801955a:	f000 fd01 	bl	8019f60 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801955e:	4603      	mov	r3, r0
 8019560:	f083 0301 	eor.w	r3, r3, #1
 8019564:	b2db      	uxtb	r3, r3
 8019566:	2b00      	cmp	r3, #0
 8019568:	d001      	beq.n	801956e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801956a:	2300      	movs	r3, #0
 801956c:	e005      	b.n	801957a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801956e:	68f8      	ldr	r0, [r7, #12]
 8019570:	f004 fad2 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8019574:	60f8      	str	r0, [r7, #12]
 8019576:	e7e7      	b.n	8019548 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 8019578:	2301      	movs	r3, #1
}
 801957a:	4618      	mov	r0, r3
 801957c:	3710      	adds	r7, #16
 801957e:	46bd      	mov	sp, r7
 8019580:	bd80      	pop	{r7, pc}

08019582 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 8019582:	b480      	push	{r7}
 8019584:	b083      	sub	sp, #12
 8019586:	af00      	add	r7, sp, #0
 8019588:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	2201      	movs	r2, #1
 801958e:	731a      	strb	r2, [r3, #12]
    return *this;
 8019590:	687b      	ldr	r3, [r7, #4]
}
 8019592:	4618      	mov	r0, r3
 8019594:	370c      	adds	r7, #12
 8019596:	46bd      	mov	sp, r7
 8019598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801959c:	4770      	bx	lr

0801959e <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801959e:	b480      	push	{r7}
 80195a0:	b083      	sub	sp, #12
 80195a2:	af00      	add	r7, sp, #0
 80195a4:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195ae:	429a      	cmp	r2, r3
 80195b0:	bf0c      	ite	eq
 80195b2:	2301      	moveq	r3, #1
 80195b4:	2300      	movne	r3, #0
 80195b6:	b2db      	uxtb	r3, r3
}
 80195b8:	4618      	mov	r0, r3
 80195ba:	370c      	adds	r7, #12
 80195bc:	46bd      	mov	sp, r7
 80195be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c2:	4770      	bx	lr

080195c4 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 80195c4:	b480      	push	{r7}
 80195c6:	b083      	sub	sp, #12
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195d4:	429a      	cmp	r2, r3
 80195d6:	bf34      	ite	cc
 80195d8:	2301      	movcc	r3, #1
 80195da:	2300      	movcs	r3, #0
 80195dc:	b2db      	uxtb	r3, r3
}
 80195de:	4618      	mov	r0, r3
 80195e0:	370c      	adds	r7, #12
 80195e2:	46bd      	mov	sp, r7
 80195e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e8:	4770      	bx	lr

080195ea <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 80195ea:	b580      	push	{r7, lr}
 80195ec:	b082      	sub	sp, #8
 80195ee:	af00      	add	r7, sp, #0
 80195f0:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	33cc      	adds	r3, #204	; 0xcc
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	6878      	ldr	r0, [r7, #4]
 80195fc:	4798      	blx	r3
 80195fe:	4603      	mov	r3, r0
 8019600:	2b00      	cmp	r3, #0
 8019602:	d00c      	beq.n	801961e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	7b1b      	ldrb	r3, [r3, #12]
 8019608:	f083 0301 	eor.w	r3, r3, #1
 801960c:	b2db      	uxtb	r3, r3
 801960e:	2b00      	cmp	r3, #0
 8019610:	d103      	bne.n	801961a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	7b5b      	ldrb	r3, [r3, #13]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d001      	beq.n	801961e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801961a:	2301      	movs	r3, #1
 801961c:	e000      	b.n	8019620 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801961e:	2300      	movs	r3, #0
}
 8019620:	4618      	mov	r0, r3
 8019622:	3708      	adds	r7, #8
 8019624:	46bd      	mov	sp, r7
 8019626:	bd80      	pop	{r7, pc}

08019628 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b082      	sub	sp, #8
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	33d0      	adds	r3, #208	; 0xd0
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	6878      	ldr	r0, [r7, #4]
 801963a:	4798      	blx	r3
 801963c:	4603      	mov	r3, r0
 801963e:	2b00      	cmp	r3, #0
 8019640:	d006      	beq.n	8019650 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8019648:	2b00      	cmp	r3, #0
 801964a:	d001      	beq.n	8019650 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801964c:	2301      	movs	r3, #1
 801964e:	e000      	b.n	8019652 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 8019650:	2300      	movs	r3, #0
}
 8019652:	4618      	mov	r0, r3
 8019654:	3708      	adds	r7, #8
 8019656:	46bd      	mov	sp, r7
 8019658:	bd80      	pop	{r7, pc}

0801965a <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801965a:	b580      	push	{r7, lr}
 801965c:	b082      	sub	sp, #8
 801965e:	af00      	add	r7, sp, #0
 8019660:	6078      	str	r0, [r7, #4]
 8019662:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019668:	1c5a      	adds	r2, r3, #1
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	691b      	ldr	r3, [r3, #16]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d00c      	beq.n	8019690 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801967a:	683a      	ldr	r2, [r7, #0]
 801967c:	429a      	cmp	r2, r3
 801967e:	d304      	bcc.n	801968a <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	695b      	ldr	r3, [r3, #20]
 8019684:	683a      	ldr	r2, [r7, #0]
 8019686:	429a      	cmp	r2, r3
 8019688:	d902      	bls.n	8019690 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	2201      	movs	r2, #1
 801968e:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	33ec      	adds	r3, #236	; 0xec
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	6878      	ldr	r0, [r7, #4]
 801969a:	4798      	blx	r3
}
 801969c:	bf00      	nop
 801969e:	3708      	adds	r7, #8
 80196a0:	46bd      	mov	sp, r7
 80196a2:	bd80      	pop	{r7, pc}

080196a4 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 80196a4:	b480      	push	{r7}
 80196a6:	b083      	sub	sp, #12
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	2201      	movs	r2, #1
 80196b0:	735a      	strb	r2, [r3, #13]
}
 80196b2:	bf00      	nop
 80196b4:	370c      	adds	r7, #12
 80196b6:	46bd      	mov	sp, r7
 80196b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196bc:	4770      	bx	lr

080196be <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 80196be:	b480      	push	{r7}
 80196c0:	b083      	sub	sp, #12
 80196c2:	af00      	add	r7, sp, #0
 80196c4:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	2201      	movs	r2, #1
 80196ca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 80196ce:	bf00      	nop
 80196d0:	370c      	adds	r7, #12
 80196d2:	46bd      	mov	sp, r7
 80196d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d8:	4770      	bx	lr

080196da <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 80196da:	b580      	push	{r7, lr}
 80196dc:	b084      	sub	sp, #16
 80196de:	af00      	add	r7, sp, #0
 80196e0:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80196e8:	f083 0301 	eor.w	r3, r3, #1
 80196ec:	b2da      	uxtb	r2, r3
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	2200      	movs	r2, #0
 80196f8:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	69db      	ldr	r3, [r3, #28]
 80196fe:	4618      	mov	r0, r3
 8019700:	f004 fb01 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019704:	60f8      	str	r0, [r7, #12]
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d00d      	beq.n	8019728 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801970c:	68f9      	ldr	r1, [r7, #12]
 801970e:	6878      	ldr	r0, [r7, #4]
 8019710:	f000 fbf0 	bl	8019ef4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019714:	4603      	mov	r3, r0
 8019716:	2100      	movs	r1, #0
 8019718:	4618      	mov	r0, r3
 801971a:	f000 fc11 	bl	8019f40 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801971e:	68f8      	ldr	r0, [r7, #12]
 8019720:	f004 f9fa 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8019724:	60f8      	str	r0, [r7, #12]
 8019726:	e7ee      	b.n	8019706 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	6a1b      	ldr	r3, [r3, #32]
 801972c:	4618      	mov	r0, r3
 801972e:	f004 faea 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019732:	60f8      	str	r0, [r7, #12]
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d00d      	beq.n	8019756 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801973a:	68f9      	ldr	r1, [r7, #12]
 801973c:	6878      	ldr	r0, [r7, #4]
 801973e:	f000 fbd9 	bl	8019ef4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019742:	4603      	mov	r3, r0
 8019744:	2100      	movs	r1, #0
 8019746:	4618      	mov	r0, r3
 8019748:	f000 fbfa 	bl	8019f40 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801974c:	68f8      	ldr	r0, [r7, #12]
 801974e:	f004 f9e3 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8019752:	60f8      	str	r0, [r7, #12]
 8019754:	e7ee      	b.n	8019734 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 8019756:	bf00      	nop
 8019758:	3710      	adds	r7, #16
 801975a:	46bd      	mov	sp, r7
 801975c:	bd80      	pop	{r7, pc}

0801975e <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801975e:	b590      	push	{r4, r7, lr}
 8019760:	b087      	sub	sp, #28
 8019762:	af00      	add	r7, sp, #0
 8019764:	6078      	str	r0, [r7, #4]
 8019766:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	69db      	ldr	r3, [r3, #28]
 801976c:	4618      	mov	r0, r3
 801976e:	f004 faca 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019772:	6178      	str	r0, [r7, #20]
 8019774:	697b      	ldr	r3, [r7, #20]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d022      	beq.n	80197c0 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801977a:	f107 030c 	add.w	r3, r7, #12
 801977e:	6979      	ldr	r1, [r7, #20]
 8019780:	4618      	mov	r0, r3
 8019782:	f004 fa04 	bl	801db8e <_ZNK22MockNamedValueListNode7getNameEv>
 8019786:	f107 030c 	add.w	r3, r7, #12
 801978a:	6839      	ldr	r1, [r7, #0]
 801978c:	4618      	mov	r0, r3
 801978e:	f7f2 f9b0 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8019792:	4603      	mov	r3, r0
 8019794:	461c      	mov	r4, r3
 8019796:	f107 030c 	add.w	r3, r7, #12
 801979a:	4618      	mov	r0, r3
 801979c:	f7f2 f99d 	bl	800bada <_ZN12SimpleStringD1Ev>
 80197a0:	2c00      	cmp	r4, #0
 80197a2:	d008      	beq.n	80197b6 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 80197a4:	6979      	ldr	r1, [r7, #20]
 80197a6:	6878      	ldr	r0, [r7, #4]
 80197a8:	f000 fba4 	bl	8019ef4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80197ac:	4603      	mov	r3, r0
 80197ae:	2101      	movs	r1, #1
 80197b0:	4618      	mov	r0, r3
 80197b2:	f000 fbc5 	bl	8019f40 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 80197b6:	6978      	ldr	r0, [r7, #20]
 80197b8:	f004 f9ae 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 80197bc:	6178      	str	r0, [r7, #20]
 80197be:	e7d9      	b.n	8019774 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 80197c0:	bf00      	nop
 80197c2:	371c      	adds	r7, #28
 80197c4:	46bd      	mov	sp, r7
 80197c6:	bd90      	pop	{r4, r7, pc}

080197c8 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 80197c8:	b590      	push	{r4, r7, lr}
 80197ca:	b087      	sub	sp, #28
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	6078      	str	r0, [r7, #4]
 80197d0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	6a1b      	ldr	r3, [r3, #32]
 80197d6:	4618      	mov	r0, r3
 80197d8:	f004 fa95 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 80197dc:	6178      	str	r0, [r7, #20]
 80197de:	697b      	ldr	r3, [r7, #20]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d022      	beq.n	801982a <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 80197e4:	f107 030c 	add.w	r3, r7, #12
 80197e8:	6979      	ldr	r1, [r7, #20]
 80197ea:	4618      	mov	r0, r3
 80197ec:	f004 f9cf 	bl	801db8e <_ZNK22MockNamedValueListNode7getNameEv>
 80197f0:	f107 030c 	add.w	r3, r7, #12
 80197f4:	6839      	ldr	r1, [r7, #0]
 80197f6:	4618      	mov	r0, r3
 80197f8:	f7f2 f97b 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 80197fc:	4603      	mov	r3, r0
 80197fe:	461c      	mov	r4, r3
 8019800:	f107 030c 	add.w	r3, r7, #12
 8019804:	4618      	mov	r0, r3
 8019806:	f7f2 f968 	bl	800bada <_ZN12SimpleStringD1Ev>
 801980a:	2c00      	cmp	r4, #0
 801980c:	d008      	beq.n	8019820 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801980e:	6979      	ldr	r1, [r7, #20]
 8019810:	6878      	ldr	r0, [r7, #4]
 8019812:	f000 fb6f 	bl	8019ef4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019816:	4603      	mov	r3, r0
 8019818:	2101      	movs	r1, #1
 801981a:	4618      	mov	r0, r3
 801981c:	f000 fb90 	bl	8019f40 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8019820:	6978      	ldr	r0, [r7, #20]
 8019822:	f004 f979 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8019826:	6178      	str	r0, [r7, #20]
 8019828:	e7d9      	b.n	80197de <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801982a:	bf00      	nop
 801982c:	371c      	adds	r7, #28
 801982e:	46bd      	mov	sp, r7
 8019830:	bd90      	pop	{r4, r7, pc}
	...

08019834 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b086      	sub	sp, #24
 8019838:	af00      	add	r7, sp, #0
 801983a:	60f8      	str	r0, [r7, #12]
 801983c:	60b9      	str	r1, [r7, #8]
 801983e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8019840:	68bb      	ldr	r3, [r7, #8]
 8019842:	69db      	ldr	r3, [r3, #28]
 8019844:	6879      	ldr	r1, [r7, #4]
 8019846:	4618      	mov	r0, r3
 8019848:	f004 fa2e 	bl	801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801984c:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801984e:	697b      	ldr	r3, [r7, #20]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d005      	beq.n	8019860 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	6979      	ldr	r1, [r7, #20]
 8019858:	4618      	mov	r0, r3
 801985a:	f7ff fa0b 	bl	8018c74 <_Z10StringFromRK14MockNamedValue>
 801985e:	e003      	b.n	8019868 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 8019860:	4903      	ldr	r1, [pc, #12]	; (8019870 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 8019862:	68f8      	ldr	r0, [r7, #12]
 8019864:	f7f1 fd81 	bl	800b36a <_ZN12SimpleStringC1EPKc>
}
 8019868:	68f8      	ldr	r0, [r7, #12]
 801986a:	3718      	adds	r7, #24
 801986c:	46bd      	mov	sp, r7
 801986e:	bd80      	pop	{r7, pc}
 8019870:	080244c0 	.word	0x080244c0

08019874 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 8019874:	b590      	push	{r4, r7, lr}
 8019876:	b087      	sub	sp, #28
 8019878:	af00      	add	r7, sp, #0
 801987a:	6078      	str	r0, [r7, #4]
 801987c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	69dc      	ldr	r4, [r3, #28]
 8019882:	683b      	ldr	r3, [r7, #0]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	335c      	adds	r3, #92	; 0x5c
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	f107 020c 	add.w	r2, r7, #12
 801988e:	6839      	ldr	r1, [r7, #0]
 8019890:	4610      	mov	r0, r2
 8019892:	4798      	blx	r3
 8019894:	f107 030c 	add.w	r3, r7, #12
 8019898:	4619      	mov	r1, r3
 801989a:	4620      	mov	r0, r4
 801989c:	f004 fa04 	bl	801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80198a0:	6178      	str	r0, [r7, #20]
 80198a2:	f107 030c 	add.w	r3, r7, #12
 80198a6:	4618      	mov	r0, r3
 80198a8:	f7f2 f917 	bl	800bada <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 80198ac:	697b      	ldr	r3, [r7, #20]
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d00d      	beq.n	80198ce <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 80198b2:	697b      	ldr	r3, [r7, #20]
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	3350      	adds	r3, #80	; 0x50
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	6839      	ldr	r1, [r7, #0]
 80198bc:	6978      	ldr	r0, [r7, #20]
 80198be:	4798      	blx	r3
 80198c0:	4603      	mov	r3, r0
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	bf14      	ite	ne
 80198c6:	2301      	movne	r3, #1
 80198c8:	2300      	moveq	r3, #0
 80198ca:	b2db      	uxtb	r3, r3
 80198cc:	e006      	b.n	80198dc <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	7b1b      	ldrb	r3, [r3, #12]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	bf14      	ite	ne
 80198d6:	2301      	movne	r3, #1
 80198d8:	2300      	moveq	r3, #0
 80198da:	b2db      	uxtb	r3, r3
}
 80198dc:	4618      	mov	r0, r3
 80198de:	371c      	adds	r7, #28
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bd90      	pop	{r4, r7, pc}

080198e4 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 80198e4:	b590      	push	{r4, r7, lr}
 80198e6:	b087      	sub	sp, #28
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
 80198ec:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	6a1c      	ldr	r4, [r3, #32]
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	335c      	adds	r3, #92	; 0x5c
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	f107 020c 	add.w	r2, r7, #12
 80198fe:	6839      	ldr	r1, [r7, #0]
 8019900:	4610      	mov	r0, r2
 8019902:	4798      	blx	r3
 8019904:	f107 030c 	add.w	r3, r7, #12
 8019908:	4619      	mov	r1, r3
 801990a:	4620      	mov	r0, r4
 801990c:	f004 f9cc 	bl	801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019910:	6178      	str	r0, [r7, #20]
 8019912:	f107 030c 	add.w	r3, r7, #12
 8019916:	4618      	mov	r0, r3
 8019918:	f7f2 f8df 	bl	800bada <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801991c:	697b      	ldr	r3, [r7, #20]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d00d      	beq.n	801993e <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 8019922:	697b      	ldr	r3, [r7, #20]
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	3354      	adds	r3, #84	; 0x54
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	6839      	ldr	r1, [r7, #0]
 801992c:	6978      	ldr	r0, [r7, #20]
 801992e:	4798      	blx	r3
 8019930:	4603      	mov	r3, r0
 8019932:	2b00      	cmp	r3, #0
 8019934:	bf14      	ite	ne
 8019936:	2301      	movne	r3, #1
 8019938:	2300      	moveq	r3, #0
 801993a:	b2db      	uxtb	r3, r3
 801993c:	e006      	b.n	801994c <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	7b1b      	ldrb	r3, [r3, #12]
 8019942:	2b00      	cmp	r3, #0
 8019944:	bf14      	ite	ne
 8019946:	2301      	movne	r3, #1
 8019948:	2300      	moveq	r3, #0
 801994a:	b2db      	uxtb	r3, r3
}
 801994c:	4618      	mov	r0, r3
 801994e:	371c      	adds	r7, #28
 8019950:	46bd      	mov	sp, r7
 8019952:	bd90      	pop	{r4, r7, pc}

08019954 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 8019954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019956:	b0a1      	sub	sp, #132	; 0x84
 8019958:	af02      	add	r7, sp, #8
 801995a:	6078      	str	r0, [r7, #4]
 801995c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801995e:	49bc      	ldr	r1, [pc, #752]	; (8019c50 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019960:	6878      	ldr	r0, [r7, #4]
 8019962:	f7f1 fd02 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 8019966:	683b      	ldr	r3, [r7, #0]
 8019968:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801996c:	2b00      	cmp	r3, #0
 801996e:	d012      	beq.n	8019996 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 8019970:	683b      	ldr	r3, [r7, #0]
 8019972:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8019974:	f107 030c 	add.w	r3, r7, #12
 8019978:	49b6      	ldr	r1, [pc, #728]	; (8019c54 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801997a:	4618      	mov	r0, r3
 801997c:	f7f2 fdb4 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 8019980:	f107 030c 	add.w	r3, r7, #12
 8019984:	4619      	mov	r1, r3
 8019986:	6878      	ldr	r0, [r7, #4]
 8019988:	f7f1 fd5b 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801998c:	f107 030c 	add.w	r3, r7, #12
 8019990:	4618      	mov	r0, r3
 8019992:	f7f2 f8a2 	bl	800bada <_ZN12SimpleStringD1Ev>

    str += getName();
 8019996:	f107 0314 	add.w	r3, r7, #20
 801999a:	6839      	ldr	r1, [r7, #0]
 801999c:	4618      	mov	r0, r3
 801999e:	f7ff f989 	bl	8018cb4 <_ZNK23MockCheckedExpectedCall7getNameEv>
 80199a2:	f107 0314 	add.w	r3, r7, #20
 80199a6:	4619      	mov	r1, r3
 80199a8:	6878      	ldr	r0, [r7, #4]
 80199aa:	f7f2 f913 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 80199ae:	f107 0314 	add.w	r3, r7, #20
 80199b2:	4618      	mov	r0, r3
 80199b4:	f7f2 f891 	bl	800bada <_ZN12SimpleStringD1Ev>
    str += " -> ";
 80199b8:	49a7      	ldr	r1, [pc, #668]	; (8019c58 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 80199ba:	6878      	ldr	r0, [r7, #4]
 80199bc:	f7f2 f91c 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 80199c0:	683b      	ldr	r3, [r7, #0]
 80199c2:	691b      	ldr	r3, [r3, #16]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d02d      	beq.n	8019a24 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 80199c8:	683b      	ldr	r3, [r7, #0]
 80199ca:	691a      	ldr	r2, [r3, #16]
 80199cc:	683b      	ldr	r3, [r7, #0]
 80199ce:	695b      	ldr	r3, [r3, #20]
 80199d0:	429a      	cmp	r2, r3
 80199d2:	d113      	bne.n	80199fc <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 80199d4:	683b      	ldr	r3, [r7, #0]
 80199d6:	691a      	ldr	r2, [r3, #16]
 80199d8:	f107 031c 	add.w	r3, r7, #28
 80199dc:	499f      	ldr	r1, [pc, #636]	; (8019c5c <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 80199de:	4618      	mov	r0, r3
 80199e0:	f7f2 fd82 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 80199e4:	f107 031c 	add.w	r3, r7, #28
 80199e8:	4619      	mov	r1, r3
 80199ea:	6878      	ldr	r0, [r7, #4]
 80199ec:	f7f2 f8f2 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 80199f0:	f107 031c 	add.w	r3, r7, #28
 80199f4:	4618      	mov	r0, r3
 80199f6:	f7f2 f870 	bl	800bada <_ZN12SimpleStringD1Ev>
 80199fa:	e013      	b.n	8019a24 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	691a      	ldr	r2, [r3, #16]
 8019a00:	683b      	ldr	r3, [r7, #0]
 8019a02:	695b      	ldr	r3, [r3, #20]
 8019a04:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8019a08:	4995      	ldr	r1, [pc, #596]	; (8019c60 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 8019a0a:	f7f2 fd6d 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 8019a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019a12:	4619      	mov	r1, r3
 8019a14:	6878      	ldr	r0, [r7, #4]
 8019a16:	f7f2 f8dd 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8019a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019a1e:	4618      	mov	r0, r3
 8019a20:	f7f2 f85b 	bl	800bada <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	69db      	ldr	r3, [r3, #28]
 8019a28:	4618      	mov	r0, r3
 8019a2a:	f004 f96c 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019a2e:	4603      	mov	r3, r0
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d109      	bne.n	8019a48 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8019a34:	683b      	ldr	r3, [r7, #0]
 8019a36:	6a1b      	ldr	r3, [r3, #32]
 8019a38:	4618      	mov	r0, r3
 8019a3a:	f004 f964 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d101      	bne.n	8019a48 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8019a44:	2301      	movs	r3, #1
 8019a46:	e000      	b.n	8019a4a <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 8019a48:	2300      	movs	r3, #0
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d00b      	beq.n	8019a66 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 8019a4e:	683b      	ldr	r3, [r7, #0]
 8019a50:	7b1b      	ldrb	r3, [r3, #12]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d001      	beq.n	8019a5a <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 8019a56:	4b83      	ldr	r3, [pc, #524]	; (8019c64 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 8019a58:	e000      	b.n	8019a5c <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 8019a5a:	4b83      	ldr	r3, [pc, #524]	; (8019c68 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 8019a5c:	4619      	mov	r1, r3
 8019a5e:	6878      	ldr	r0, [r7, #4]
 8019a60:	f7f2 f8ca 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
 8019a64:	e0e3      	b.n	8019c2e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 8019a66:	683b      	ldr	r3, [r7, #0]
 8019a68:	69db      	ldr	r3, [r3, #28]
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	f004 f94b 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019a70:	6778      	str	r0, [r7, #116]	; 0x74
 8019a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d069      	beq.n	8019b4c <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 8019a78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019a7c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019a7e:	4618      	mov	r0, r3
 8019a80:	f004 f898 	bl	801dbb4 <_ZNK22MockNamedValueListNode7getTypeEv>
 8019a84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019a88:	4618      	mov	r0, r3
 8019a8a:	f7f1 fff9 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8019a8e:	4605      	mov	r5, r0
 8019a90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019a94:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019a96:	4618      	mov	r0, r3
 8019a98:	f004 f879 	bl	801db8e <_ZNK22MockNamedValueListNode7getNameEv>
 8019a9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	f7f1 ffed 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8019aa6:	4606      	mov	r6, r0
 8019aa8:	683b      	ldr	r3, [r7, #0]
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	33a4      	adds	r3, #164	; 0xa4
 8019aae:	681c      	ldr	r4, [r3, #0]
 8019ab0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019ab4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	f004 f869 	bl	801db8e <_ZNK22MockNamedValueListNode7getNameEv>
 8019abc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019ac0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019ac4:	6839      	ldr	r1, [r7, #0]
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	47a0      	blx	r4
 8019aca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7f1 ffd6 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8019ad4:	4603      	mov	r3, r0
 8019ad6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019ada:	9300      	str	r3, [sp, #0]
 8019adc:	4633      	mov	r3, r6
 8019ade:	462a      	mov	r2, r5
 8019ae0:	4962      	ldr	r1, [pc, #392]	; (8019c6c <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 8019ae2:	f7f2 fd01 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 8019ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019aea:	4619      	mov	r1, r3
 8019aec:	6878      	ldr	r0, [r7, #4]
 8019aee:	f7f2 f871 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8019af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019af6:	4618      	mov	r0, r3
 8019af8:	f7f1 ffef 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019afc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019b00:	4618      	mov	r0, r3
 8019b02:	f7f1 ffea 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019b06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	f7f1 ffe5 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019b10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019b14:	4618      	mov	r0, r3
 8019b16:	f7f1 ffe0 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019b1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019b1e:	4618      	mov	r0, r3
 8019b20:	f7f1 ffdb 	bl	800bada <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8019b24:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019b26:	f003 fff7 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8019b2a:	4603      	mov	r3, r0
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	bf14      	ite	ne
 8019b30:	2301      	movne	r3, #1
 8019b32:	2300      	moveq	r3, #0
 8019b34:	b2db      	uxtb	r3, r3
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d003      	beq.n	8019b42 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 8019b3a:	494d      	ldr	r1, [pc, #308]	; (8019c70 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019b3c:	6878      	ldr	r0, [r7, #4]
 8019b3e:	f7f2 f85b 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 8019b42:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019b44:	f003 ffe8 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8019b48:	6778      	str	r0, [r7, #116]	; 0x74
 8019b4a:	e792      	b.n	8019a72 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 8019b4c:	683b      	ldr	r3, [r7, #0]
 8019b4e:	69db      	ldr	r3, [r3, #28]
 8019b50:	4618      	mov	r0, r3
 8019b52:	f004 f8d8 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019b56:	4603      	mov	r3, r0
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d009      	beq.n	8019b70 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	6a1b      	ldr	r3, [r3, #32]
 8019b60:	4618      	mov	r0, r3
 8019b62:	f004 f8d0 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019b66:	4603      	mov	r3, r0
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d001      	beq.n	8019b70 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 8019b6c:	2301      	movs	r3, #1
 8019b6e:	e000      	b.n	8019b72 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 8019b70:	2300      	movs	r3, #0
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d003      	beq.n	8019b7e <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 8019b76:	493e      	ldr	r1, [pc, #248]	; (8019c70 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019b78:	6878      	ldr	r0, [r7, #4]
 8019b7a:	f7f2 f83d 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 8019b7e:	683b      	ldr	r3, [r7, #0]
 8019b80:	6a1b      	ldr	r3, [r3, #32]
 8019b82:	4618      	mov	r0, r3
 8019b84:	f004 f8bf 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019b88:	6778      	str	r0, [r7, #116]	; 0x74
 8019b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d046      	beq.n	8019c1e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 8019b90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019b94:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019b96:	4618      	mov	r0, r3
 8019b98:	f004 f80c 	bl	801dbb4 <_ZNK22MockNamedValueListNode7getTypeEv>
 8019b9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7f1 ff6d 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8019ba6:	4604      	mov	r4, r0
 8019ba8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019bac:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019bae:	4618      	mov	r0, r3
 8019bb0:	f003 ffed 	bl	801db8e <_ZNK22MockNamedValueListNode7getNameEv>
 8019bb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019bb8:	4618      	mov	r0, r3
 8019bba:	f7f1 ff61 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8019bbe:	4603      	mov	r3, r0
 8019bc0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8019bc4:	4622      	mov	r2, r4
 8019bc6:	492b      	ldr	r1, [pc, #172]	; (8019c74 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 8019bc8:	f7f2 fc8e 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 8019bcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8019bd0:	4619      	mov	r1, r3
 8019bd2:	6878      	ldr	r0, [r7, #4]
 8019bd4:	f7f1 fffe 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8019bd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8019bdc:	4618      	mov	r0, r3
 8019bde:	f7f1 ff7c 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019be2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019be6:	4618      	mov	r0, r3
 8019be8:	f7f1 ff77 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019bec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	f7f1 ff72 	bl	800bada <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8019bf6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019bf8:	f003 ff8e 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8019bfc:	4603      	mov	r3, r0
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	bf14      	ite	ne
 8019c02:	2301      	movne	r3, #1
 8019c04:	2300      	moveq	r3, #0
 8019c06:	b2db      	uxtb	r3, r3
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d003      	beq.n	8019c14 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 8019c0c:	4918      	ldr	r1, [pc, #96]	; (8019c70 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019c0e:	6878      	ldr	r0, [r7, #4]
 8019c10:	f7f1 fff2 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 8019c14:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019c16:	f003 ff7f 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8019c1a:	6778      	str	r0, [r7, #116]	; 0x74
 8019c1c:	e7b5      	b.n	8019b8a <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 8019c1e:	683b      	ldr	r3, [r7, #0]
 8019c20:	7b1b      	ldrb	r3, [r3, #12]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d003      	beq.n	8019c2e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 8019c26:	4914      	ldr	r1, [pc, #80]	; (8019c78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 8019c28:	6878      	ldr	r0, [r7, #4]
 8019c2a:	f7f1 ffe5 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8019c2e:	683b      	ldr	r3, [r7, #0]
 8019c30:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019c32:	683b      	ldr	r3, [r7, #0]
 8019c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8019c36:	2b01      	cmp	r3, #1
 8019c38:	d101      	bne.n	8019c3e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 8019c3a:	4c05      	ldr	r4, [pc, #20]	; (8019c50 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019c3c:	e000      	b.n	8019c40 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 8019c3e:	4c0f      	ldr	r4, [pc, #60]	; (8019c7c <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 8019c40:	683b      	ldr	r3, [r7, #0]
 8019c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019c44:	683a      	ldr	r2, [r7, #0]
 8019c46:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8019c48:	2a01      	cmp	r2, #1
 8019c4a:	d119      	bne.n	8019c80 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 8019c4c:	4a00      	ldr	r2, [pc, #0]	; (8019c50 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019c4e:	e018      	b.n	8019c82 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 8019c50:	08024454 	.word	0x08024454
 8019c54:	080244c8 	.word	0x080244c8
 8019c58:	080244e0 	.word	0x080244e0
 8019c5c:	080244e8 	.word	0x080244e8
 8019c60:	08024508 	.word	0x08024508
 8019c64:	0802452c 	.word	0x0802452c
 8019c68:	08024544 	.word	0x08024544
 8019c6c:	08024554 	.word	0x08024554
 8019c70:	08024560 	.word	0x08024560
 8019c74:	08024564 	.word	0x08024564
 8019c78:	08024574 	.word	0x08024574
 8019c7c:	08024594 	.word	0x08024594
 8019c80:	4a0c      	ldr	r2, [pc, #48]	; (8019cb4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 8019c82:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8019c86:	9201      	str	r2, [sp, #4]
 8019c88:	9300      	str	r3, [sp, #0]
 8019c8a:	4623      	mov	r3, r4
 8019c8c:	460a      	mov	r2, r1
 8019c8e:	490a      	ldr	r1, [pc, #40]	; (8019cb8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 8019c90:	f7f2 fc2a 	bl	800c4e8 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019c94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019c98:	4619      	mov	r1, r3
 8019c9a:	6878      	ldr	r0, [r7, #4]
 8019c9c:	f7f1 ff9a 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8019ca0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	f7f1 ff18 	bl	800bada <_ZN12SimpleStringD1Ev>

    return str;
 8019caa:	bf00      	nop
}
 8019cac:	6878      	ldr	r0, [r7, #4]
 8019cae:	377c      	adds	r7, #124	; 0x7c
 8019cb0:	46bd      	mov	sp, r7
 8019cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cb4:	08024594 	.word	0x08024594
 8019cb8:	08024598 	.word	0x08024598

08019cbc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 8019cbc:	b590      	push	{r4, r7, lr}
 8019cbe:	b095      	sub	sp, #84	; 0x54
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	6078      	str	r0, [r7, #4]
 8019cc4:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8019cc6:	496c      	ldr	r1, [pc, #432]	; (8019e78 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019cc8:	6878      	ldr	r0, [r7, #4]
 8019cca:	f7f1 fb4e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	69db      	ldr	r3, [r3, #28]
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f004 f817 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019cd8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d05e      	beq.n	8019d9e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 8019ce0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019ce2:	6838      	ldr	r0, [r7, #0]
 8019ce4:	f000 f906 	bl	8019ef4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019ce8:	4603      	mov	r3, r0
 8019cea:	4618      	mov	r0, r3
 8019cec:	f000 f938 	bl	8019f60 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	f083 0301 	eor.w	r3, r3, #1
 8019cf6:	b2db      	uxtb	r3, r3
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d04b      	beq.n	8019d94 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 8019cfc:	f107 030c 	add.w	r3, r7, #12
 8019d00:	495d      	ldr	r1, [pc, #372]	; (8019e78 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019d02:	4618      	mov	r0, r3
 8019d04:	f7f1 fb31 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8019d08:	f107 030c 	add.w	r3, r7, #12
 8019d0c:	4619      	mov	r1, r3
 8019d0e:	6878      	ldr	r0, [r7, #4]
 8019d10:	f7f1 ff34 	bl	800bb7c <_ZneRK12SimpleStringS1_>
 8019d14:	4603      	mov	r3, r0
 8019d16:	461c      	mov	r4, r3
 8019d18:	f107 030c 	add.w	r3, r7, #12
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	f7f1 fedc 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019d22:	2c00      	cmp	r4, #0
 8019d24:	d003      	beq.n	8019d2e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 8019d26:	4955      	ldr	r1, [pc, #340]	; (8019e7c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8019d28:	6878      	ldr	r0, [r7, #4]
 8019d2a:	f7f1 ff65 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 8019d2e:	f107 031c 	add.w	r3, r7, #28
 8019d32:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019d34:	4618      	mov	r0, r3
 8019d36:	f003 ff3d 	bl	801dbb4 <_ZNK22MockNamedValueListNode7getTypeEv>
 8019d3a:	f107 031c 	add.w	r3, r7, #28
 8019d3e:	4618      	mov	r0, r3
 8019d40:	f7f1 fe9e 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8019d44:	4604      	mov	r4, r0
 8019d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019d4a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	f003 ff1e 	bl	801db8e <_ZNK22MockNamedValueListNode7getNameEv>
 8019d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019d56:	4618      	mov	r0, r3
 8019d58:	f7f1 fe92 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8019d5c:	4603      	mov	r3, r0
 8019d5e:	f107 0014 	add.w	r0, r7, #20
 8019d62:	4622      	mov	r2, r4
 8019d64:	4946      	ldr	r1, [pc, #280]	; (8019e80 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8019d66:	f7f2 fbbf 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 8019d6a:	f107 0314 	add.w	r3, r7, #20
 8019d6e:	4619      	mov	r1, r3
 8019d70:	6878      	ldr	r0, [r7, #4]
 8019d72:	f7f1 ff2f 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8019d76:	f107 0314 	add.w	r3, r7, #20
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	f7f1 fead 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019d84:	4618      	mov	r0, r3
 8019d86:	f7f1 fea8 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019d8a:	f107 031c 	add.w	r3, r7, #28
 8019d8e:	4618      	mov	r0, r3
 8019d90:	f7f1 fea3 	bl	800bada <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 8019d94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8019d96:	f003 febf 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8019d9a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019d9c:	e79d      	b.n	8019cda <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 8019d9e:	683b      	ldr	r3, [r7, #0]
 8019da0:	6a1b      	ldr	r3, [r3, #32]
 8019da2:	4618      	mov	r0, r3
 8019da4:	f003 ffaf 	bl	801dd06 <_ZN18MockNamedValueList5beginEv>
 8019da8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d05e      	beq.n	8019e6e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 8019db0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019db2:	6838      	ldr	r0, [r7, #0]
 8019db4:	f000 f89e 	bl	8019ef4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019db8:	4603      	mov	r3, r0
 8019dba:	4618      	mov	r0, r3
 8019dbc:	f000 f8d0 	bl	8019f60 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8019dc0:	4603      	mov	r3, r0
 8019dc2:	f083 0301 	eor.w	r3, r3, #1
 8019dc6:	b2db      	uxtb	r3, r3
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d04b      	beq.n	8019e64 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 8019dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019dd0:	4929      	ldr	r1, [pc, #164]	; (8019e78 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	f7f1 fac9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 8019dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019ddc:	4619      	mov	r1, r3
 8019dde:	6878      	ldr	r0, [r7, #4]
 8019de0:	f7f1 fecc 	bl	800bb7c <_ZneRK12SimpleStringS1_>
 8019de4:	4603      	mov	r3, r0
 8019de6:	461c      	mov	r4, r3
 8019de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019dec:	4618      	mov	r0, r3
 8019dee:	f7f1 fe74 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019df2:	2c00      	cmp	r4, #0
 8019df4:	d003      	beq.n	8019dfe <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 8019df6:	4921      	ldr	r1, [pc, #132]	; (8019e7c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8019df8:	6878      	ldr	r0, [r7, #4]
 8019dfa:	f7f1 fefd 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 8019dfe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019e02:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019e04:	4618      	mov	r0, r3
 8019e06:	f003 fed5 	bl	801dbb4 <_ZNK22MockNamedValueListNode7getTypeEv>
 8019e0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019e0e:	4618      	mov	r0, r3
 8019e10:	f7f1 fe36 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8019e14:	4604      	mov	r4, r0
 8019e16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019e1a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	f003 feb6 	bl	801db8e <_ZNK22MockNamedValueListNode7getNameEv>
 8019e22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019e26:	4618      	mov	r0, r3
 8019e28:	f7f1 fe2a 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 8019e2c:	4603      	mov	r3, r0
 8019e2e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8019e32:	4622      	mov	r2, r4
 8019e34:	4912      	ldr	r1, [pc, #72]	; (8019e80 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8019e36:	f7f2 fb57 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 8019e3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019e3e:	4619      	mov	r1, r3
 8019e40:	6878      	ldr	r0, [r7, #4]
 8019e42:	f7f1 fec7 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 8019e46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f7f1 fe45 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019e50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019e54:	4618      	mov	r0, r3
 8019e56:	f7f1 fe40 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019e5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019e5e:	4618      	mov	r0, r3
 8019e60:	f7f1 fe3b 	bl	800bada <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 8019e64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8019e66:	f003 fe57 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 8019e6a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019e6c:	e79d      	b.n	8019daa <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 8019e6e:	bf00      	nop
}
 8019e70:	6878      	ldr	r0, [r7, #4]
 8019e72:	3754      	adds	r7, #84	; 0x54
 8019e74:	46bd      	mov	sp, r7
 8019e76:	bd90      	pop	{r4, r7, pc}
 8019e78:	08024454 	.word	0x08024454
 8019e7c:	08024560 	.word	0x08024560
 8019e80:	080245c0 	.word	0x080245c0

08019e84 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 8019e84:	b590      	push	{r4, r7, lr}
 8019e86:	b085      	sub	sp, #20
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	6078      	str	r0, [r7, #4]
 8019e8c:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 8019e8e:	f107 0308 	add.w	r3, r7, #8
 8019e92:	6879      	ldr	r1, [r7, #4]
 8019e94:	4618      	mov	r0, r3
 8019e96:	f7fe ff0d 	bl	8018cb4 <_ZNK23MockCheckedExpectedCall7getNameEv>
 8019e9a:	f107 0308 	add.w	r3, r7, #8
 8019e9e:	4619      	mov	r1, r3
 8019ea0:	6838      	ldr	r0, [r7, #0]
 8019ea2:	f7f1 fe26 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 8019ea6:	4603      	mov	r3, r0
 8019ea8:	461c      	mov	r4, r3
 8019eaa:	f107 0308 	add.w	r3, r7, #8
 8019eae:	4618      	mov	r0, r3
 8019eb0:	f7f1 fe13 	bl	800bada <_ZN12SimpleStringD1Ev>
 8019eb4:	4623      	mov	r3, r4
}
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	3714      	adds	r7, #20
 8019eba:	46bd      	mov	sp, r7
 8019ebc:	bd90      	pop	{r4, r7, pc}

08019ebe <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 8019ebe:	b480      	push	{r7}
 8019ec0:	b083      	sub	sp, #12
 8019ec2:	af00      	add	r7, sp, #0
 8019ec4:	6078      	str	r0, [r7, #4]
 8019ec6:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8019ece:	f083 0301 	eor.w	r3, r3, #1
 8019ed2:	b2db      	uxtb	r3, r3
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d104      	bne.n	8019ee2 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019edc:	683a      	ldr	r2, [r7, #0]
 8019ede:	429a      	cmp	r2, r3
 8019ee0:	d101      	bne.n	8019ee6 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 8019ee2:	2301      	movs	r3, #1
 8019ee4:	e000      	b.n	8019ee8 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 8019ee6:	2300      	movs	r3, #0
}
 8019ee8:	4618      	mov	r0, r3
 8019eea:	370c      	adds	r7, #12
 8019eec:	46bd      	mov	sp, r7
 8019eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef2:	4770      	bx	lr

08019ef4 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b082      	sub	sp, #8
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	6078      	str	r0, [r7, #4]
 8019efc:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 8019efe:	6838      	ldr	r0, [r7, #0]
 8019f00:	f003 fe16 	bl	801db30 <_ZN22MockNamedValueListNode4itemEv>
 8019f04:	4603      	mov	r3, r0
}
 8019f06:	4618      	mov	r0, r3
 8019f08:	3708      	adds	r7, #8
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	bd80      	pop	{r7, pc}
	...

08019f10 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 8019f10:	b580      	push	{r7, lr}
 8019f12:	b082      	sub	sp, #8
 8019f14:	af00      	add	r7, sp, #0
 8019f16:	6078      	str	r0, [r7, #4]
 8019f18:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	6839      	ldr	r1, [r7, #0]
 8019f1e:	4618      	mov	r0, r3
 8019f20:	f001 ff48 	bl	801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019f24:	4a05      	ldr	r2, [pc, #20]	; (8019f3c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	601a      	str	r2, [r3, #0]
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	2200      	movs	r2, #0
 8019f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	4618      	mov	r0, r3
 8019f36:	3708      	adds	r7, #8
 8019f38:	46bd      	mov	sp, r7
 8019f3a:	bd80      	pop	{r7, pc}
 8019f3c:	08026e54 	.word	0x08026e54

08019f40 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 8019f40:	b480      	push	{r7}
 8019f42:	b083      	sub	sp, #12
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
 8019f48:	460b      	mov	r3, r1
 8019f4a:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	78fa      	ldrb	r2, [r7, #3]
 8019f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8019f54:	bf00      	nop
 8019f56:	370c      	adds	r7, #12
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f5e:	4770      	bx	lr

08019f60 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 8019f60:	b480      	push	{r7}
 8019f62:	b083      	sub	sp, #12
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8019f6e:	4618      	mov	r0, r3
 8019f70:	370c      	adds	r7, #12
 8019f72:	46bd      	mov	sp, r7
 8019f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f78:	4770      	bx	lr
	...

08019f7c <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b082      	sub	sp, #8
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	6078      	str	r0, [r7, #4]
 8019f84:	460b      	mov	r3, r1
 8019f86:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	3328      	adds	r3, #40	; 0x28
 8019f8c:	4907      	ldr	r1, [pc, #28]	; (8019fac <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 8019f8e:	4618      	mov	r0, r3
 8019f90:	f002 f9b2 	bl	801c2f8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	3328      	adds	r3, #40	; 0x28
 8019f98:	78fa      	ldrb	r2, [r7, #3]
 8019f9a:	4611      	mov	r1, r2
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f001 ff5b 	bl	801be58 <_ZN14MockNamedValue8setValueEb>
    return *this;
 8019fa2:	687b      	ldr	r3, [r7, #4]
}
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	3708      	adds	r7, #8
 8019fa8:	46bd      	mov	sp, r7
 8019faa:	bd80      	pop	{r7, pc}
 8019fac:	080245c8 	.word	0x080245c8

08019fb0 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b082      	sub	sp, #8
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]
 8019fb8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	3328      	adds	r3, #40	; 0x28
 8019fbe:	4907      	ldr	r1, [pc, #28]	; (8019fdc <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	f002 f999 	bl	801c2f8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	3328      	adds	r3, #40	; 0x28
 8019fca:	6839      	ldr	r1, [r7, #0]
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f001 ff67 	bl	801bea0 <_ZN14MockNamedValue8setValueEj>
    return *this;
 8019fd2:	687b      	ldr	r3, [r7, #4]
}
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	3708      	adds	r7, #8
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	bd80      	pop	{r7, pc}
 8019fdc:	080245c8 	.word	0x080245c8

08019fe0 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 8019fe0:	b580      	push	{r7, lr}
 8019fe2:	b082      	sub	sp, #8
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	6078      	str	r0, [r7, #4]
 8019fe8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	3328      	adds	r3, #40	; 0x28
 8019fee:	4907      	ldr	r1, [pc, #28]	; (801a00c <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	f002 f981 	bl	801c2f8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	3328      	adds	r3, #40	; 0x28
 8019ffa:	6839      	ldr	r1, [r7, #0]
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	f001 ff71 	bl	801bee4 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801a002:	687b      	ldr	r3, [r7, #4]
}
 801a004:	4618      	mov	r0, r3
 801a006:	3708      	adds	r7, #8
 801a008:	46bd      	mov	sp, r7
 801a00a:	bd80      	pop	{r7, pc}
 801a00c:	080245c8 	.word	0x080245c8

0801a010 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b082      	sub	sp, #8
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
 801a018:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	3328      	adds	r3, #40	; 0x28
 801a01e:	4907      	ldr	r1, [pc, #28]	; (801a03c <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801a020:	4618      	mov	r0, r3
 801a022:	f002 f969 	bl	801c2f8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	3328      	adds	r3, #40	; 0x28
 801a02a:	6839      	ldr	r1, [r7, #0]
 801a02c:	4618      	mov	r0, r3
 801a02e:	f001 ff7b 	bl	801bf28 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801a032:	687b      	ldr	r3, [r7, #4]
}
 801a034:	4618      	mov	r0, r3
 801a036:	3708      	adds	r7, #8
 801a038:	46bd      	mov	sp, r7
 801a03a:	bd80      	pop	{r7, pc}
 801a03c:	080245c8 	.word	0x080245c8

0801a040 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b082      	sub	sp, #8
 801a044:	af00      	add	r7, sp, #0
 801a046:	6078      	str	r0, [r7, #4]
 801a048:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	3328      	adds	r3, #40	; 0x28
 801a04e:	4907      	ldr	r1, [pc, #28]	; (801a06c <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801a050:	4618      	mov	r0, r3
 801a052:	f002 f951 	bl	801c2f8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	3328      	adds	r3, #40	; 0x28
 801a05a:	6839      	ldr	r1, [r7, #0]
 801a05c:	4618      	mov	r0, r3
 801a05e:	f001 ff85 	bl	801bf6c <_ZN14MockNamedValue8setValueEm>
    return *this;
 801a062:	687b      	ldr	r3, [r7, #4]
}
 801a064:	4618      	mov	r0, r3
 801a066:	3708      	adds	r7, #8
 801a068:	46bd      	mov	sp, r7
 801a06a:	bd80      	pop	{r7, pc}
 801a06c:	080245c8 	.word	0x080245c8

0801a070 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801a070:	b5b0      	push	{r4, r5, r7, lr}
 801a072:	b086      	sub	sp, #24
 801a074:	af02      	add	r7, sp, #8
 801a076:	60f8      	str	r0, [r7, #12]
 801a078:	1d3b      	adds	r3, r7, #4
 801a07a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801a07e:	f7f8 fd57 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801a082:	4604      	mov	r4, r0
 801a084:	6823      	ldr	r3, [r4, #0]
 801a086:	3368      	adds	r3, #104	; 0x68
 801a088:	681d      	ldr	r5, [r3, #0]
 801a08a:	f7f8 fd61 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a08e:	4603      	mov	r3, r0
 801a090:	9300      	str	r3, [sp, #0]
 801a092:	f240 2319 	movw	r3, #537	; 0x219
 801a096:	4a04      	ldr	r2, [pc, #16]	; (801a0a8 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801a098:	4904      	ldr	r1, [pc, #16]	; (801a0ac <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801a09a:	4620      	mov	r0, r4
 801a09c:	47a8      	blx	r5
    return *this;
 801a09e:	68fb      	ldr	r3, [r7, #12]
}
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	3710      	adds	r7, #16
 801a0a4:	46bd      	mov	sp, r7
 801a0a6:	bdb0      	pop	{r4, r5, r7, pc}
 801a0a8:	08024458 	.word	0x08024458
 801a0ac:	08024474 	.word	0x08024474

0801a0b0 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801a0b0:	b5b0      	push	{r4, r5, r7, lr}
 801a0b2:	b086      	sub	sp, #24
 801a0b4:	af02      	add	r7, sp, #8
 801a0b6:	60f8      	str	r0, [r7, #12]
 801a0b8:	1d3b      	adds	r3, r7, #4
 801a0ba:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801a0be:	f7f8 fd37 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801a0c2:	4604      	mov	r4, r0
 801a0c4:	6823      	ldr	r3, [r4, #0]
 801a0c6:	3368      	adds	r3, #104	; 0x68
 801a0c8:	681d      	ldr	r5, [r3, #0]
 801a0ca:	f7f8 fd41 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	9300      	str	r3, [sp, #0]
 801a0d2:	f240 231f 	movw	r3, #543	; 0x21f
 801a0d6:	4a04      	ldr	r2, [pc, #16]	; (801a0e8 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801a0d8:	4904      	ldr	r1, [pc, #16]	; (801a0ec <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801a0da:	4620      	mov	r0, r4
 801a0dc:	47a8      	blx	r5
    return *this;
 801a0de:	68fb      	ldr	r3, [r7, #12]
}
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	3710      	adds	r7, #16
 801a0e4:	46bd      	mov	sp, r7
 801a0e6:	bdb0      	pop	{r4, r5, r7, pc}
 801a0e8:	08024458 	.word	0x08024458
 801a0ec:	08024494 	.word	0x08024494

0801a0f0 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b082      	sub	sp, #8
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
 801a0f8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	3328      	adds	r3, #40	; 0x28
 801a0fe:	4907      	ldr	r1, [pc, #28]	; (801a11c <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801a100:	4618      	mov	r0, r3
 801a102:	f002 f8f9 	bl	801c2f8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	3328      	adds	r3, #40	; 0x28
 801a10a:	6839      	ldr	r1, [r7, #0]
 801a10c:	4618      	mov	r0, r3
 801a10e:	f002 f835 	bl	801c17c <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801a112:	687b      	ldr	r3, [r7, #4]
}
 801a114:	4618      	mov	r0, r3
 801a116:	3708      	adds	r7, #8
 801a118:	46bd      	mov	sp, r7
 801a11a:	bd80      	pop	{r7, pc}
 801a11c:	080245c8 	.word	0x080245c8

0801a120 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801a120:	b580      	push	{r7, lr}
 801a122:	b084      	sub	sp, #16
 801a124:	af00      	add	r7, sp, #0
 801a126:	60f8      	str	r0, [r7, #12]
 801a128:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	3328      	adds	r3, #40	; 0x28
 801a130:	4907      	ldr	r1, [pc, #28]	; (801a150 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801a132:	4618      	mov	r0, r3
 801a134:	f002 f8e0 	bl	801c2f8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	3328      	adds	r3, #40	; 0x28
 801a13c:	ed97 0b00 	vldr	d0, [r7]
 801a140:	4618      	mov	r0, r3
 801a142:	f001 ff71 	bl	801c028 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801a146:	68fb      	ldr	r3, [r7, #12]
}
 801a148:	4618      	mov	r0, r3
 801a14a:	3710      	adds	r7, #16
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}
 801a150:	080245c8 	.word	0x080245c8

0801a154 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801a154:	b580      	push	{r7, lr}
 801a156:	b082      	sub	sp, #8
 801a158:	af00      	add	r7, sp, #0
 801a15a:	6078      	str	r0, [r7, #4]
 801a15c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	3328      	adds	r3, #40	; 0x28
 801a162:	4907      	ldr	r1, [pc, #28]	; (801a180 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801a164:	4618      	mov	r0, r3
 801a166:	f002 f8c7 	bl	801c2f8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	3328      	adds	r3, #40	; 0x28
 801a16e:	6839      	ldr	r1, [r7, #0]
 801a170:	4618      	mov	r0, r3
 801a172:	f001 ff9d 	bl	801c0b0 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801a176:	687b      	ldr	r3, [r7, #4]
}
 801a178:	4618      	mov	r0, r3
 801a17a:	3708      	adds	r7, #8
 801a17c:	46bd      	mov	sp, r7
 801a17e:	bd80      	pop	{r7, pc}
 801a180:	080245c8 	.word	0x080245c8

0801a184 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801a184:	b580      	push	{r7, lr}
 801a186:	b082      	sub	sp, #8
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]
 801a18c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	3328      	adds	r3, #40	; 0x28
 801a192:	4907      	ldr	r1, [pc, #28]	; (801a1b0 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801a194:	4618      	mov	r0, r3
 801a196:	f002 f8af 	bl	801c2f8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	3328      	adds	r3, #40	; 0x28
 801a19e:	6839      	ldr	r1, [r7, #0]
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f001 ffa7 	bl	801c0f4 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801a1a6:	687b      	ldr	r3, [r7, #4]
}
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	3708      	adds	r7, #8
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	bd80      	pop	{r7, pc}
 801a1b0:	080245c8 	.word	0x080245c8

0801a1b4 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b082      	sub	sp, #8
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
 801a1bc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	3328      	adds	r3, #40	; 0x28
 801a1c2:	4907      	ldr	r1, [pc, #28]	; (801a1e0 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	f002 f897 	bl	801c2f8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	3328      	adds	r3, #40	; 0x28
 801a1ce:	6839      	ldr	r1, [r7, #0]
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	f001 ffb1 	bl	801c138 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801a1d6:	687b      	ldr	r3, [r7, #4]
}
 801a1d8:	4618      	mov	r0, r3
 801a1da:	3708      	adds	r7, #8
 801a1dc:	46bd      	mov	sp, r7
 801a1de:	bd80      	pop	{r7, pc}
 801a1e0:	080245c8 	.word	0x080245c8

0801a1e4 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801a1e4:	b480      	push	{r7}
 801a1e6:	b083      	sub	sp, #12
 801a1e8:	af00      	add	r7, sp, #0
 801a1ea:	6078      	str	r0, [r7, #4]
 801a1ec:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	2201      	movs	r2, #1
 801a1f2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	683a      	ldr	r2, [r7, #0]
 801a202:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801a204:	687b      	ldr	r3, [r7, #4]
}
 801a206:	4618      	mov	r0, r3
 801a208:	370c      	adds	r7, #12
 801a20a:	46bd      	mov	sp, r7
 801a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a210:	4770      	bx	lr

0801a212 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801a212:	b580      	push	{r7, lr}
 801a214:	b082      	sub	sp, #8
 801a216:	af00      	add	r7, sp, #0
 801a218:	6078      	str	r0, [r7, #4]
 801a21a:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801a21c:	683b      	ldr	r3, [r7, #0]
 801a21e:	3328      	adds	r3, #40	; 0x28
 801a220:	4619      	mov	r1, r3
 801a222:	6878      	ldr	r0, [r7, #4]
 801a224:	f7ef f946 	bl	80094b4 <_ZN14MockNamedValueC1ERKS_>
}
 801a228:	6878      	ldr	r0, [r7, #4]
 801a22a:	3708      	adds	r7, #8
 801a22c:	46bd      	mov	sp, r7
 801a22e:	bd80      	pop	{r7, pc}

0801a230 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801a230:	b480      	push	{r7}
 801a232:	b085      	sub	sp, #20
 801a234:	af00      	add	r7, sp, #0
 801a236:	60f8      	str	r0, [r7, #12]
 801a238:	60b9      	str	r1, [r7, #8]
 801a23a:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	68ba      	ldr	r2, [r7, #8]
 801a240:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	687a      	ldr	r2, [r7, #4]
 801a246:	615a      	str	r2, [r3, #20]
    return *this;
 801a248:	68fb      	ldr	r3, [r7, #12]
}
 801a24a:	4618      	mov	r0, r3
 801a24c:	3714      	adds	r7, #20
 801a24e:	46bd      	mov	sp, r7
 801a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a254:	4770      	bx	lr

0801a256 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801a256:	b480      	push	{r7}
 801a258:	b083      	sub	sp, #12
 801a25a:	af00      	add	r7, sp, #0
 801a25c:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	7e1b      	ldrb	r3, [r3, #24]
}
 801a262:	4618      	mov	r0, r3
 801a264:	370c      	adds	r7, #12
 801a266:	46bd      	mov	sp, r7
 801a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a26c:	4770      	bx	lr

0801a26e <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801a26e:	b480      	push	{r7}
 801a270:	b083      	sub	sp, #12
 801a272:	af00      	add	r7, sp, #0
 801a274:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801a27a:	4618      	mov	r0, r3
 801a27c:	370c      	adds	r7, #12
 801a27e:	46bd      	mov	sp, r7
 801a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a284:	4770      	bx	lr
	...

0801a288 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801a288:	b580      	push	{r7, lr}
 801a28a:	b082      	sub	sp, #8
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	6078      	str	r0, [r7, #4]
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	4618      	mov	r0, r3
 801a294:	f7fe fcce 	bl	8018c34 <_ZN16MockExpectedCallC1Ev>
 801a298:	4a03      	ldr	r2, [pc, #12]	; (801a2a8 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	601a      	str	r2, [r3, #0]
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	3708      	adds	r7, #8
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}
 801a2a8:	08026cb4 	.word	0x08026cb4

0801a2ac <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	af00      	add	r7, sp, #0
 801a2b0:	4801      	ldr	r0, [pc, #4]	; (801a2b8 <__tcf_0+0xc>)
 801a2b2:	f000 f831 	bl	801a318 <_ZN23MockIgnoredExpectedCallD1Ev>
 801a2b6:	bd80      	pop	{r7, pc}
 801a2b8:	20000d98 	.word	0x20000d98

0801a2bc <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801a2c0:	4b12      	ldr	r3, [pc, #72]	; (801a30c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801a2c2:	781b      	ldrb	r3, [r3, #0]
 801a2c4:	f3bf 8f5b 	dmb	ish
 801a2c8:	b2db      	uxtb	r3, r3
 801a2ca:	f003 0301 	and.w	r3, r3, #1
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	bf0c      	ite	eq
 801a2d2:	2301      	moveq	r3, #1
 801a2d4:	2300      	movne	r3, #0
 801a2d6:	b2db      	uxtb	r3, r3
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d013      	beq.n	801a304 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801a2dc:	480b      	ldr	r0, [pc, #44]	; (801a30c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801a2de:	f003 ff03 	bl	801e0e8 <__cxa_guard_acquire>
 801a2e2:	4603      	mov	r3, r0
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	bf14      	ite	ne
 801a2e8:	2301      	movne	r3, #1
 801a2ea:	2300      	moveq	r3, #0
 801a2ec:	b2db      	uxtb	r3, r3
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d008      	beq.n	801a304 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801a2f2:	4807      	ldr	r0, [pc, #28]	; (801a310 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801a2f4:	f7ff ffc8 	bl	801a288 <_ZN23MockIgnoredExpectedCallC1Ev>
 801a2f8:	4804      	ldr	r0, [pc, #16]	; (801a30c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801a2fa:	f003 ff01 	bl	801e100 <__cxa_guard_release>
 801a2fe:	4805      	ldr	r0, [pc, #20]	; (801a314 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801a300:	f003 ff25 	bl	801e14e <atexit>
    return call;
 801a304:	4b02      	ldr	r3, [pc, #8]	; (801a310 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801a306:	4618      	mov	r0, r3
 801a308:	bd80      	pop	{r7, pc}
 801a30a:	bf00      	nop
 801a30c:	20000d9c 	.word	0x20000d9c
 801a310:	20000d98 	.word	0x20000d98
 801a314:	0801a2ad 	.word	0x0801a2ad

0801a318 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801a318:	b580      	push	{r7, lr}
 801a31a:	b082      	sub	sp, #8
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	6078      	str	r0, [r7, #4]
 801a320:	4a05      	ldr	r2, [pc, #20]	; (801a338 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	601a      	str	r2, [r3, #0]
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	4618      	mov	r0, r3
 801a32a:	f7fe fc93 	bl	8018c54 <_ZN16MockExpectedCallD1Ev>
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	4618      	mov	r0, r3
 801a332:	3708      	adds	r7, #8
 801a334:	46bd      	mov	sp, r7
 801a336:	bd80      	pop	{r7, pc}
 801a338:	08026cb4 	.word	0x08026cb4

0801a33c <_ZN23MockIgnoredExpectedCallD0Ev>:
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b082      	sub	sp, #8
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
 801a344:	6878      	ldr	r0, [r7, #4]
 801a346:	f7ff ffe7 	bl	801a318 <_ZN23MockIgnoredExpectedCallD1Ev>
 801a34a:	2104      	movs	r1, #4
 801a34c:	6878      	ldr	r0, [r7, #4]
 801a34e:	f7ee fc5d 	bl	8008c0c <_ZdlPvj>
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	4618      	mov	r0, r3
 801a356:	3708      	adds	r7, #8
 801a358:	46bd      	mov	sp, r7
 801a35a:	bd80      	pop	{r7, pc}

0801a35c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b082      	sub	sp, #8
 801a360:	af00      	add	r7, sp, #0
 801a362:	6078      	str	r0, [r7, #4]
 801a364:	4a05      	ldr	r2, [pc, #20]	; (801a37c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	601a      	str	r2, [r3, #0]
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	4618      	mov	r0, r3
 801a36e:	f001 fd4b 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	4618      	mov	r0, r3
 801a376:	3708      	adds	r7, #8
 801a378:	46bd      	mov	sp, r7
 801a37a:	bd80      	pop	{r7, pc}
 801a37c:	08026e54 	.word	0x08026e54

0801a380 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801a380:	b580      	push	{r7, lr}
 801a382:	b082      	sub	sp, #8
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
 801a388:	6878      	ldr	r0, [r7, #4]
 801a38a:	f7ff ffe7 	bl	801a35c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801a38e:	2138      	movs	r1, #56	; 0x38
 801a390:	6878      	ldr	r0, [r7, #4]
 801a392:	f7ee fc3b 	bl	8008c0c <_ZdlPvj>
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	4618      	mov	r0, r3
 801a39a:	3708      	adds	r7, #8
 801a39c:	46bd      	mov	sp, r7
 801a39e:	bd80      	pop	{r7, pc}

0801a3a0 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801a3a0:	b480      	push	{r7}
 801a3a2:	b083      	sub	sp, #12
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	6078      	str	r0, [r7, #4]
 801a3a8:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	683a      	ldr	r2, [r7, #0]
 801a3ae:	601a      	str	r2, [r3, #0]
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	605a      	str	r2, [r3, #4]
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	4618      	mov	r0, r3
 801a3ba:	370c      	adds	r7, #12
 801a3bc:	46bd      	mov	sp, r7
 801a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c2:	4770      	bx	lr

0801a3c4 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801a3c4:	b480      	push	{r7}
 801a3c6:	b083      	sub	sp, #12
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	6078      	str	r0, [r7, #4]
 801a3cc:	4a06      	ldr	r2, [pc, #24]	; (801a3e8 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	601a      	str	r2, [r3, #0]
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	2200      	movs	r2, #0
 801a3d6:	605a      	str	r2, [r3, #4]
{
}
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	4618      	mov	r0, r3
 801a3dc:	370c      	adds	r7, #12
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e4:	4770      	bx	lr
 801a3e6:	bf00      	nop
 801a3e8:	08026fa8 	.word	0x08026fa8

0801a3ec <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b084      	sub	sp, #16
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
 801a3f4:	4a0d      	ldr	r2, [pc, #52]	; (801a42c <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	685b      	ldr	r3, [r3, #4]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d00f      	beq.n	801a422 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	685b      	ldr	r3, [r3, #4]
 801a406:	685b      	ldr	r3, [r3, #4]
 801a408:	60fb      	str	r3, [r7, #12]
        delete head_;
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	685b      	ldr	r3, [r3, #4]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d003      	beq.n	801a41a <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801a412:	2108      	movs	r1, #8
 801a414:	4618      	mov	r0, r3
 801a416:	f7ee fbf9 	bl	8008c0c <_ZdlPvj>
        head_ = next;
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	68fa      	ldr	r2, [r7, #12]
 801a41e:	605a      	str	r2, [r3, #4]
    while (head_) {
 801a420:	e7eb      	b.n	801a3fa <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	4618      	mov	r0, r3
 801a426:	3710      	adds	r7, #16
 801a428:	46bd      	mov	sp, r7
 801a42a:	bd80      	pop	{r7, pc}
 801a42c:	08026fa8 	.word	0x08026fa8

0801a430 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801a430:	b580      	push	{r7, lr}
 801a432:	b082      	sub	sp, #8
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
}
 801a438:	6878      	ldr	r0, [r7, #4]
 801a43a:	f7ff ffd7 	bl	801a3ec <_ZN21MockExpectedCallsListD1Ev>
 801a43e:	2108      	movs	r1, #8
 801a440:	6878      	ldr	r0, [r7, #4]
 801a442:	f7ee fbe3 	bl	8008c0c <_ZdlPvj>
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	4618      	mov	r0, r3
 801a44a:	3708      	adds	r7, #8
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b084      	sub	sp, #16
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	685b      	ldr	r3, [r3, #4]
 801a45c:	60fb      	str	r3, [r7, #12]
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d011      	beq.n	801a488 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801a464:	68fb      	ldr	r3, [r7, #12]
 801a466:	681a      	ldr	r2, [r3, #0]
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	33d4      	adds	r3, #212	; 0xd4
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	4610      	mov	r0, r2
 801a474:	4798      	blx	r3
 801a476:	4603      	mov	r3, r0
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d001      	beq.n	801a480 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801a47c:	2301      	movs	r3, #1
 801a47e:	e004      	b.n	801a48a <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	685b      	ldr	r3, [r3, #4]
 801a484:	60fb      	str	r3, [r7, #12]
 801a486:	e7ea      	b.n	801a45e <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801a488:	2300      	movs	r3, #0
}
 801a48a:	4618      	mov	r0, r3
 801a48c:	3710      	adds	r7, #16
 801a48e:	46bd      	mov	sp, r7
 801a490:	bd80      	pop	{r7, pc}

0801a492 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801a492:	b480      	push	{r7}
 801a494:	b085      	sub	sp, #20
 801a496:	af00      	add	r7, sp, #0
 801a498:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801a49a:	2300      	movs	r3, #0
 801a49c:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	685b      	ldr	r3, [r3, #4]
 801a4a2:	60bb      	str	r3, [r7, #8]
 801a4a4:	68bb      	ldr	r3, [r7, #8]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d006      	beq.n	801a4b8 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801a4aa:	68fb      	ldr	r3, [r7, #12]
 801a4ac:	3301      	adds	r3, #1
 801a4ae:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a4b0:	68bb      	ldr	r3, [r7, #8]
 801a4b2:	685b      	ldr	r3, [r3, #4]
 801a4b4:	60bb      	str	r3, [r7, #8]
 801a4b6:	e7f5      	b.n	801a4a4 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801a4b8:	68fb      	ldr	r3, [r7, #12]
}
 801a4ba:	4618      	mov	r0, r3
 801a4bc:	3714      	adds	r7, #20
 801a4be:	46bd      	mov	sp, r7
 801a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c4:	4770      	bx	lr

0801a4c6 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801a4c6:	b480      	push	{r7}
 801a4c8:	b083      	sub	sp, #12
 801a4ca:	af00      	add	r7, sp, #0
 801a4cc:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	685b      	ldr	r3, [r3, #4]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	bf0c      	ite	eq
 801a4d6:	2301      	moveq	r3, #1
 801a4d8:	2300      	movne	r3, #0
 801a4da:	b2db      	uxtb	r3, r3
}
 801a4dc:	4618      	mov	r0, r3
 801a4de:	370c      	adds	r7, #12
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e6:	4770      	bx	lr

0801a4e8 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801a4e8:	b580      	push	{r7, lr}
 801a4ea:	b084      	sub	sp, #16
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	6078      	str	r0, [r7, #4]
 801a4f0:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	685b      	ldr	r3, [r3, #4]
 801a4fa:	60bb      	str	r3, [r7, #8]
 801a4fc:	68bb      	ldr	r3, [r7, #8]
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	d01d      	beq.n	801a53e <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801a502:	68bb      	ldr	r3, [r7, #8]
 801a504:	681a      	ldr	r2, [r3, #0]
 801a506:	68bb      	ldr	r3, [r7, #8]
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	33b8      	adds	r3, #184	; 0xb8
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	6839      	ldr	r1, [r7, #0]
 801a512:	4610      	mov	r0, r2
 801a514:	4798      	blx	r3
 801a516:	4603      	mov	r3, r0
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d00c      	beq.n	801a536 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801a51c:	68bb      	ldr	r3, [r7, #8]
 801a51e:	681a      	ldr	r2, [r3, #0]
 801a520:	68bb      	ldr	r3, [r7, #8]
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	33f8      	adds	r3, #248	; 0xf8
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	4610      	mov	r0, r2
 801a52c:	4798      	blx	r3
 801a52e:	4602      	mov	r2, r0
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	4413      	add	r3, r2
 801a534:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a536:	68bb      	ldr	r3, [r7, #8]
 801a538:	685b      	ldr	r3, [r3, #4]
 801a53a:	60bb      	str	r3, [r7, #8]
 801a53c:	e7de      	b.n	801a4fc <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801a53e:	68fb      	ldr	r3, [r7, #12]
}
 801a540:	4618      	mov	r0, r3
 801a542:	3710      	adds	r7, #16
 801a544:	46bd      	mov	sp, r7
 801a546:	bd80      	pop	{r7, pc}

0801a548 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801a548:	b580      	push	{r7, lr}
 801a54a:	b084      	sub	sp, #16
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801a550:	2300      	movs	r3, #0
 801a552:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	685b      	ldr	r3, [r3, #4]
 801a558:	60bb      	str	r3, [r7, #8]
 801a55a:	68bb      	ldr	r3, [r7, #8]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d015      	beq.n	801a58c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	681a      	ldr	r2, [r3, #0]
 801a564:	68bb      	ldr	r3, [r7, #8]
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	33c0      	adds	r3, #192	; 0xc0
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	4610      	mov	r0, r2
 801a570:	4798      	blx	r3
 801a572:	4603      	mov	r3, r0
 801a574:	f083 0301 	eor.w	r3, r3, #1
 801a578:	b2db      	uxtb	r3, r3
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d002      	beq.n	801a584 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	3301      	adds	r3, #1
 801a582:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a584:	68bb      	ldr	r3, [r7, #8]
 801a586:	685b      	ldr	r3, [r3, #4]
 801a588:	60bb      	str	r3, [r7, #8]
 801a58a:	e7e6      	b.n	801a55a <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801a58c:	68fb      	ldr	r3, [r7, #12]
}
 801a58e:	4618      	mov	r0, r3
 801a590:	3710      	adds	r7, #16
 801a592:	46bd      	mov	sp, r7
 801a594:	bd80      	pop	{r7, pc}

0801a596 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801a596:	b580      	push	{r7, lr}
 801a598:	b084      	sub	sp, #16
 801a59a:	af00      	add	r7, sp, #0
 801a59c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	685b      	ldr	r3, [r3, #4]
 801a5a2:	60fb      	str	r3, [r7, #12]
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d011      	beq.n	801a5ce <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	681a      	ldr	r2, [r3, #0]
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	33c8      	adds	r3, #200	; 0xc8
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	4610      	mov	r0, r2
 801a5ba:	4798      	blx	r3
 801a5bc:	4603      	mov	r3, r0
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d001      	beq.n	801a5c6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801a5c2:	2301      	movs	r3, #1
 801a5c4:	e004      	b.n	801a5d0 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	685b      	ldr	r3, [r3, #4]
 801a5ca:	60fb      	str	r3, [r7, #12]
 801a5cc:	e7ea      	b.n	801a5a4 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801a5ce:	2300      	movs	r3, #0
}
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	3710      	adds	r7, #16
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	bd80      	pop	{r7, pc}

0801a5d8 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b084      	sub	sp, #16
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	685b      	ldr	r3, [r3, #4]
 801a5e4:	60fb      	str	r3, [r7, #12]
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d014      	beq.n	801a616 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	681a      	ldr	r2, [r3, #0]
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	33c0      	adds	r3, #192	; 0xc0
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	4610      	mov	r0, r2
 801a5fc:	4798      	blx	r3
 801a5fe:	4603      	mov	r3, r0
 801a600:	f083 0301 	eor.w	r3, r3, #1
 801a604:	b2db      	uxtb	r3, r3
 801a606:	2b00      	cmp	r3, #0
 801a608:	d001      	beq.n	801a60e <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801a60a:	2301      	movs	r3, #1
 801a60c:	e004      	b.n	801a618 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	685b      	ldr	r3, [r3, #4]
 801a612:	60fb      	str	r3, [r7, #12]
 801a614:	e7e7      	b.n	801a5e6 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801a616:	2300      	movs	r3, #0
}
 801a618:	4618      	mov	r0, r3
 801a61a:	3710      	adds	r7, #16
 801a61c:	46bd      	mov	sp, r7
 801a61e:	bd80      	pop	{r7, pc}

0801a620 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801a620:	b580      	push	{r7, lr}
 801a622:	b084      	sub	sp, #16
 801a624:	af00      	add	r7, sp, #0
 801a626:	6078      	str	r0, [r7, #4]
 801a628:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	685b      	ldr	r3, [r3, #4]
 801a62e:	60fb      	str	r3, [r7, #12]
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	2b00      	cmp	r3, #0
 801a634:	d012      	beq.n	801a65c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	681a      	ldr	r2, [r3, #0]
 801a63a:	68fb      	ldr	r3, [r7, #12]
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	33b8      	adds	r3, #184	; 0xb8
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	6839      	ldr	r1, [r7, #0]
 801a646:	4610      	mov	r0, r2
 801a648:	4798      	blx	r3
 801a64a:	4603      	mov	r3, r0
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d001      	beq.n	801a654 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801a650:	2301      	movs	r3, #1
 801a652:	e004      	b.n	801a65e <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a654:	68fb      	ldr	r3, [r7, #12]
 801a656:	685b      	ldr	r3, [r3, #4]
 801a658:	60fb      	str	r3, [r7, #12]
 801a65a:	e7e9      	b.n	801a630 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801a65c:	2300      	movs	r3, #0
}
 801a65e:	4618      	mov	r0, r3
 801a660:	3710      	adds	r7, #16
 801a662:	46bd      	mov	sp, r7
 801a664:	bd80      	pop	{r7, pc}
	...

0801a668 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801a668:	b590      	push	{r4, r7, lr}
 801a66a:	b085      	sub	sp, #20
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	6078      	str	r0, [r7, #4]
 801a670:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801a672:	2273      	movs	r2, #115	; 0x73
 801a674:	4911      	ldr	r1, [pc, #68]	; (801a6bc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801a676:	2008      	movs	r0, #8
 801a678:	f7ee fab4 	bl	8008be4 <_ZnwjPKci>
 801a67c:	4604      	mov	r4, r0
 801a67e:	6839      	ldr	r1, [r7, #0]
 801a680:	4620      	mov	r0, r4
 801a682:	f7ff fe8d 	bl	801a3a0 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801a686:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	685b      	ldr	r3, [r3, #4]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d103      	bne.n	801a698 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	68ba      	ldr	r2, [r7, #8]
 801a694:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801a696:	e00d      	b.n	801a6b4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	685b      	ldr	r3, [r3, #4]
 801a69c:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	685b      	ldr	r3, [r3, #4]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d003      	beq.n	801a6ae <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	685b      	ldr	r3, [r3, #4]
 801a6aa:	60fb      	str	r3, [r7, #12]
 801a6ac:	e7f7      	b.n	801a69e <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	68ba      	ldr	r2, [r7, #8]
 801a6b2:	605a      	str	r2, [r3, #4]
}
 801a6b4:	bf00      	nop
 801a6b6:	3714      	adds	r7, #20
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd90      	pop	{r4, r7, pc}
 801a6bc:	080245d4 	.word	0x080245d4

0801a6c0 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b084      	sub	sp, #16
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	6078      	str	r0, [r7, #4]
 801a6c8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a6ca:	683b      	ldr	r3, [r7, #0]
 801a6cc:	685b      	ldr	r3, [r3, #4]
 801a6ce:	60fb      	str	r3, [r7, #12]
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d018      	beq.n	801a708 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	681a      	ldr	r2, [r3, #0]
 801a6da:	68fb      	ldr	r3, [r7, #12]
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	33c4      	adds	r3, #196	; 0xc4
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	4610      	mov	r0, r2
 801a6e6:	4798      	blx	r3
 801a6e8:	4603      	mov	r3, r0
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d008      	beq.n	801a700 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	3330      	adds	r3, #48	; 0x30
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	68fa      	ldr	r2, [r7, #12]
 801a6f8:	6812      	ldr	r2, [r2, #0]
 801a6fa:	4611      	mov	r1, r2
 801a6fc:	6878      	ldr	r0, [r7, #4]
 801a6fe:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	685b      	ldr	r3, [r3, #4]
 801a704:	60fb      	str	r3, [r7, #12]
 801a706:	e7e3      	b.n	801a6d0 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801a708:	bf00      	nop
 801a70a:	3710      	adds	r7, #16
 801a70c:	46bd      	mov	sp, r7
 801a70e:	bd80      	pop	{r7, pc}

0801a710 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b086      	sub	sp, #24
 801a714:	af00      	add	r7, sp, #0
 801a716:	60f8      	str	r0, [r7, #12]
 801a718:	60b9      	str	r1, [r7, #8]
 801a71a:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	685b      	ldr	r3, [r3, #4]
 801a720:	617b      	str	r3, [r7, #20]
 801a722:	697b      	ldr	r3, [r7, #20]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d019      	beq.n	801a75c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801a728:	697b      	ldr	r3, [r7, #20]
 801a72a:	681a      	ldr	r2, [r3, #0]
 801a72c:	697b      	ldr	r3, [r7, #20]
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	33b8      	adds	r3, #184	; 0xb8
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	68b9      	ldr	r1, [r7, #8]
 801a738:	4610      	mov	r0, r2
 801a73a:	4798      	blx	r3
 801a73c:	4603      	mov	r3, r0
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d008      	beq.n	801a754 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801a742:	68fb      	ldr	r3, [r7, #12]
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	3330      	adds	r3, #48	; 0x30
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	697a      	ldr	r2, [r7, #20]
 801a74c:	6812      	ldr	r2, [r2, #0]
 801a74e:	4611      	mov	r1, r2
 801a750:	68f8      	ldr	r0, [r7, #12]
 801a752:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a754:	697b      	ldr	r3, [r7, #20]
 801a756:	685b      	ldr	r3, [r3, #4]
 801a758:	617b      	str	r3, [r7, #20]
 801a75a:	e7e2      	b.n	801a722 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801a75c:	bf00      	nop
 801a75e:	3718      	adds	r7, #24
 801a760:	46bd      	mov	sp, r7
 801a762:	bd80      	pop	{r7, pc}

0801a764 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b084      	sub	sp, #16
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
 801a76c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a76e:	683b      	ldr	r3, [r7, #0]
 801a770:	685b      	ldr	r3, [r3, #4]
 801a772:	60fb      	str	r3, [r7, #12]
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d00c      	beq.n	801a794 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	3330      	adds	r3, #48	; 0x30
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	68fa      	ldr	r2, [r7, #12]
 801a784:	6812      	ldr	r2, [r2, #0]
 801a786:	4611      	mov	r1, r2
 801a788:	6878      	ldr	r0, [r7, #4]
 801a78a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	685b      	ldr	r3, [r3, #4]
 801a790:	60fb      	str	r3, [r7, #12]
 801a792:	e7ef      	b.n	801a774 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801a794:	bf00      	nop
 801a796:	3710      	adds	r7, #16
 801a798:	46bd      	mov	sp, r7
 801a79a:	bd80      	pop	{r7, pc}

0801a79c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801a79c:	b580      	push	{r7, lr}
 801a79e:	b084      	sub	sp, #16
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
 801a7a4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	685b      	ldr	r3, [r3, #4]
 801a7aa:	60fb      	str	r3, [r7, #12]
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d016      	beq.n	801a7e0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	681a      	ldr	r2, [r3, #0]
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	33b8      	adds	r3, #184	; 0xb8
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	6839      	ldr	r1, [r7, #0]
 801a7c2:	4610      	mov	r0, r2
 801a7c4:	4798      	blx	r3
 801a7c6:	4603      	mov	r3, r0
 801a7c8:	f083 0301 	eor.w	r3, r3, #1
 801a7cc:	b2db      	uxtb	r3, r3
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d002      	beq.n	801a7d8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	2200      	movs	r2, #0
 801a7d6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	685b      	ldr	r3, [r3, #4]
 801a7dc:	60fb      	str	r3, [r7, #12]
 801a7de:	e7e5      	b.n	801a7ac <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	3388      	adds	r3, #136	; 0x88
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	6878      	ldr	r0, [r7, #4]
 801a7ea:	4798      	blx	r3
}
 801a7ec:	bf00      	nop
 801a7ee:	3710      	adds	r7, #16
 801a7f0:	46bd      	mov	sp, r7
 801a7f2:	bd80      	pop	{r7, pc}

0801a7f4 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801a7f4:	b580      	push	{r7, lr}
 801a7f6:	b084      	sub	sp, #16
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	685b      	ldr	r3, [r3, #4]
 801a800:	60fb      	str	r3, [r7, #12]
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	2b00      	cmp	r3, #0
 801a806:	d015      	beq.n	801a834 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	681a      	ldr	r2, [r3, #0]
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	33d4      	adds	r3, #212	; 0xd4
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	4610      	mov	r0, r2
 801a818:	4798      	blx	r3
 801a81a:	4603      	mov	r3, r0
 801a81c:	f083 0301 	eor.w	r3, r3, #1
 801a820:	b2db      	uxtb	r3, r3
 801a822:	2b00      	cmp	r3, #0
 801a824:	d002      	beq.n	801a82c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	2200      	movs	r2, #0
 801a82a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	685b      	ldr	r3, [r3, #4]
 801a830:	60fb      	str	r3, [r7, #12]
 801a832:	e7e6      	b.n	801a802 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	3388      	adds	r3, #136	; 0x88
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	6878      	ldr	r0, [r7, #4]
 801a83e:	4798      	blx	r3
}
 801a840:	bf00      	nop
 801a842:	3710      	adds	r7, #16
 801a844:	46bd      	mov	sp, r7
 801a846:	bd80      	pop	{r7, pc}

0801a848 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801a848:	b580      	push	{r7, lr}
 801a84a:	b084      	sub	sp, #16
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	685b      	ldr	r3, [r3, #4]
 801a854:	60fb      	str	r3, [r7, #12]
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d01b      	beq.n	801a894 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	681a      	ldr	r2, [r3, #0]
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	33c8      	adds	r3, #200	; 0xc8
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	4610      	mov	r0, r2
 801a86c:	4798      	blx	r3
 801a86e:	4603      	mov	r3, r0
 801a870:	2b00      	cmp	r3, #0
 801a872:	d00b      	beq.n	801a88c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	681a      	ldr	r2, [r3, #0]
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	33ec      	adds	r3, #236	; 0xec
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	4610      	mov	r0, r2
 801a884:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	2200      	movs	r2, #0
 801a88a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	685b      	ldr	r3, [r3, #4]
 801a890:	60fb      	str	r3, [r7, #12]
 801a892:	e7e0      	b.n	801a856 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	3388      	adds	r3, #136	; 0x88
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	6878      	ldr	r0, [r7, #4]
 801a89e:	4798      	blx	r3
}
 801a8a0:	bf00      	nop
 801a8a2:	3710      	adds	r7, #16
 801a8a4:	46bd      	mov	sp, r7
 801a8a6:	bd80      	pop	{r7, pc}

0801a8a8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801a8a8:	b580      	push	{r7, lr}
 801a8aa:	b084      	sub	sp, #16
 801a8ac:	af00      	add	r7, sp, #0
 801a8ae:	6078      	str	r0, [r7, #4]
 801a8b0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	685b      	ldr	r3, [r3, #4]
 801a8b6:	60fb      	str	r3, [r7, #12]
 801a8b8:	68fb      	ldr	r3, [r7, #12]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d016      	beq.n	801a8ec <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	681a      	ldr	r2, [r3, #0]
 801a8c2:	68fb      	ldr	r3, [r7, #12]
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	33a8      	adds	r3, #168	; 0xa8
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	6839      	ldr	r1, [r7, #0]
 801a8ce:	4610      	mov	r0, r2
 801a8d0:	4798      	blx	r3
 801a8d2:	4603      	mov	r3, r0
 801a8d4:	f083 0301 	eor.w	r3, r3, #1
 801a8d8:	b2db      	uxtb	r3, r3
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d002      	beq.n	801a8e4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	2200      	movs	r2, #0
 801a8e2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	685b      	ldr	r3, [r3, #4]
 801a8e8:	60fb      	str	r3, [r7, #12]
 801a8ea:	e7e5      	b.n	801a8b8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	3388      	adds	r3, #136	; 0x88
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	6878      	ldr	r0, [r7, #4]
 801a8f6:	4798      	blx	r3
}
 801a8f8:	bf00      	nop
 801a8fa:	3710      	adds	r7, #16
 801a8fc:	46bd      	mov	sp, r7
 801a8fe:	bd80      	pop	{r7, pc}

0801a900 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801a900:	b580      	push	{r7, lr}
 801a902:	b084      	sub	sp, #16
 801a904:	af00      	add	r7, sp, #0
 801a906:	6078      	str	r0, [r7, #4]
 801a908:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	685b      	ldr	r3, [r3, #4]
 801a90e:	60fb      	str	r3, [r7, #12]
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d016      	beq.n	801a944 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	681a      	ldr	r2, [r3, #0]
 801a91a:	68fb      	ldr	r3, [r7, #12]
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	33b0      	adds	r3, #176	; 0xb0
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	6839      	ldr	r1, [r7, #0]
 801a926:	4610      	mov	r0, r2
 801a928:	4798      	blx	r3
 801a92a:	4603      	mov	r3, r0
 801a92c:	f083 0301 	eor.w	r3, r3, #1
 801a930:	b2db      	uxtb	r3, r3
 801a932:	2b00      	cmp	r3, #0
 801a934:	d002      	beq.n	801a93c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	2200      	movs	r2, #0
 801a93a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	685b      	ldr	r3, [r3, #4]
 801a940:	60fb      	str	r3, [r7, #12]
 801a942:	e7e5      	b.n	801a910 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	3388      	adds	r3, #136	; 0x88
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	6878      	ldr	r0, [r7, #4]
 801a94e:	4798      	blx	r3
}
 801a950:	bf00      	nop
 801a952:	3710      	adds	r7, #16
 801a954:	46bd      	mov	sp, r7
 801a956:	bd80      	pop	{r7, pc}

0801a958 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b084      	sub	sp, #16
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
 801a960:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	685b      	ldr	r3, [r3, #4]
 801a966:	60fb      	str	r3, [r7, #12]
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d016      	beq.n	801a99c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801a96e:	68fb      	ldr	r3, [r7, #12]
 801a970:	681a      	ldr	r2, [r3, #0]
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	33ac      	adds	r3, #172	; 0xac
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	6839      	ldr	r1, [r7, #0]
 801a97e:	4610      	mov	r0, r2
 801a980:	4798      	blx	r3
 801a982:	4603      	mov	r3, r0
 801a984:	f083 0301 	eor.w	r3, r3, #1
 801a988:	b2db      	uxtb	r3, r3
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d002      	beq.n	801a994 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	2200      	movs	r2, #0
 801a992:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	685b      	ldr	r3, [r3, #4]
 801a998:	60fb      	str	r3, [r7, #12]
 801a99a:	e7e5      	b.n	801a968 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	3388      	adds	r3, #136	; 0x88
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	6878      	ldr	r0, [r7, #4]
 801a9a6:	4798      	blx	r3
}
 801a9a8:	bf00      	nop
 801a9aa:	3710      	adds	r7, #16
 801a9ac:	46bd      	mov	sp, r7
 801a9ae:	bd80      	pop	{r7, pc}

0801a9b0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801a9b0:	b580      	push	{r7, lr}
 801a9b2:	b084      	sub	sp, #16
 801a9b4:	af00      	add	r7, sp, #0
 801a9b6:	6078      	str	r0, [r7, #4]
 801a9b8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	685b      	ldr	r3, [r3, #4]
 801a9be:	60fb      	str	r3, [r7, #12]
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d016      	beq.n	801a9f4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	681a      	ldr	r2, [r3, #0]
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	33b4      	adds	r3, #180	; 0xb4
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	6839      	ldr	r1, [r7, #0]
 801a9d6:	4610      	mov	r0, r2
 801a9d8:	4798      	blx	r3
 801a9da:	4603      	mov	r3, r0
 801a9dc:	f083 0301 	eor.w	r3, r3, #1
 801a9e0:	b2db      	uxtb	r3, r3
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d002      	beq.n	801a9ec <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	2200      	movs	r2, #0
 801a9ea:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	685b      	ldr	r3, [r3, #4]
 801a9f0:	60fb      	str	r3, [r7, #12]
 801a9f2:	e7e5      	b.n	801a9c0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	3388      	adds	r3, #136	; 0x88
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	6878      	ldr	r0, [r7, #4]
 801a9fe:	4798      	blx	r3
}
 801aa00:	bf00      	nop
 801aa02:	3710      	adds	r7, #16
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}

0801aa08 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801aa08:	b580      	push	{r7, lr}
 801aa0a:	b084      	sub	sp, #16
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
 801aa10:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	685b      	ldr	r3, [r3, #4]
 801aa16:	60fb      	str	r3, [r7, #12]
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d016      	beq.n	801aa4c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	681a      	ldr	r2, [r3, #0]
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	33bc      	adds	r3, #188	; 0xbc
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	6839      	ldr	r1, [r7, #0]
 801aa2e:	4610      	mov	r0, r2
 801aa30:	4798      	blx	r3
 801aa32:	4603      	mov	r3, r0
 801aa34:	f083 0301 	eor.w	r3, r3, #1
 801aa38:	b2db      	uxtb	r3, r3
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d002      	beq.n	801aa44 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	2200      	movs	r2, #0
 801aa42:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	685b      	ldr	r3, [r3, #4]
 801aa48:	60fb      	str	r3, [r7, #12]
 801aa4a:	e7e5      	b.n	801aa18 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	3388      	adds	r3, #136	; 0x88
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	6878      	ldr	r0, [r7, #4]
 801aa56:	4798      	blx	r3
}
 801aa58:	bf00      	nop
 801aa5a:	3710      	adds	r7, #16
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	bd80      	pop	{r7, pc}

0801aa60 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801aa60:	b580      	push	{r7, lr}
 801aa62:	b084      	sub	sp, #16
 801aa64:	af00      	add	r7, sp, #0
 801aa66:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	685b      	ldr	r3, [r3, #4]
 801aa6c:	60fb      	str	r3, [r7, #12]
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d01d      	beq.n	801aab0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	681a      	ldr	r2, [r3, #0]
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	33c8      	adds	r3, #200	; 0xc8
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	4610      	mov	r0, r2
 801aa84:	4798      	blx	r3
 801aa86:	4603      	mov	r3, r0
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d00d      	beq.n	801aaa8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	2200      	movs	r2, #0
 801aa96:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	3388      	adds	r3, #136	; 0x88
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	6878      	ldr	r0, [r7, #4]
 801aaa2:	4798      	blx	r3
            return matchingCall;
 801aaa4:	68bb      	ldr	r3, [r7, #8]
 801aaa6:	e004      	b.n	801aab2 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	685b      	ldr	r3, [r3, #4]
 801aaac:	60fb      	str	r3, [r7, #12]
 801aaae:	e7de      	b.n	801aa6e <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801aab0:	2300      	movs	r3, #0
}
 801aab2:	4618      	mov	r0, r3
 801aab4:	3710      	adds	r7, #16
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}

0801aaba <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801aaba:	b580      	push	{r7, lr}
 801aabc:	b084      	sub	sp, #16
 801aabe:	af00      	add	r7, sp, #0
 801aac0:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	685b      	ldr	r3, [r3, #4]
 801aac6:	60fb      	str	r3, [r7, #12]
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d012      	beq.n	801aaf4 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	681a      	ldr	r2, [r3, #0]
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	33cc      	adds	r3, #204	; 0xcc
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	4610      	mov	r0, r2
 801aade:	4798      	blx	r3
 801aae0:	4603      	mov	r3, r0
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d002      	beq.n	801aaec <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	e004      	b.n	801aaf6 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	685b      	ldr	r3, [r3, #4]
 801aaf0:	60fb      	str	r3, [r7, #12]
 801aaf2:	e7e9      	b.n	801aac8 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801aaf4:	2300      	movs	r3, #0
}
 801aaf6:	4618      	mov	r0, r3
 801aaf8:	3710      	adds	r7, #16
 801aafa:	46bd      	mov	sp, r7
 801aafc:	bd80      	pop	{r7, pc}

0801aafe <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801aafe:	b580      	push	{r7, lr}
 801ab00:	b084      	sub	sp, #16
 801ab02:	af00      	add	r7, sp, #0
 801ab04:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	685b      	ldr	r3, [r3, #4]
 801ab0a:	60fb      	str	r3, [r7, #12]
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d01d      	beq.n	801ab4e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	681a      	ldr	r2, [r3, #0]
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	33cc      	adds	r3, #204	; 0xcc
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	4610      	mov	r0, r2
 801ab22:	4798      	blx	r3
 801ab24:	4603      	mov	r3, r0
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d00d      	beq.n	801ab46 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801ab2a:	68fb      	ldr	r3, [r7, #12]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	2200      	movs	r2, #0
 801ab34:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	3388      	adds	r3, #136	; 0x88
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	6878      	ldr	r0, [r7, #4]
 801ab40:	4798      	blx	r3
            return matchingCall;
 801ab42:	68bb      	ldr	r3, [r7, #8]
 801ab44:	e004      	b.n	801ab50 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	685b      	ldr	r3, [r3, #4]
 801ab4a:	60fb      	str	r3, [r7, #12]
 801ab4c:	e7de      	b.n	801ab0c <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801ab4e:	2300      	movs	r3, #0
}
 801ab50:	4618      	mov	r0, r3
 801ab52:	3710      	adds	r7, #16
 801ab54:	46bd      	mov	sp, r7
 801ab56:	bd80      	pop	{r7, pc}

0801ab58 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b086      	sub	sp, #24
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	685b      	ldr	r3, [r3, #4]
 801ab64:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801ab66:	2300      	movs	r3, #0
 801ab68:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	60fb      	str	r3, [r7, #12]

    while (current) {
 801ab6e:	697b      	ldr	r3, [r7, #20]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d024      	beq.n	801abbe <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801ab74:	697b      	ldr	r3, [r7, #20]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d11a      	bne.n	801abb2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801ab7c:	697b      	ldr	r3, [r7, #20]
 801ab7e:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801ab80:	693b      	ldr	r3, [r7, #16]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d106      	bne.n	801ab94 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801ab86:	697b      	ldr	r3, [r7, #20]
 801ab88:	685b      	ldr	r3, [r3, #4]
 801ab8a:	617b      	str	r3, [r7, #20]
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	697a      	ldr	r2, [r7, #20]
 801ab90:	605a      	str	r2, [r3, #4]
 801ab92:	e006      	b.n	801aba2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801ab94:	697b      	ldr	r3, [r7, #20]
 801ab96:	685a      	ldr	r2, [r3, #4]
 801ab98:	693b      	ldr	r3, [r7, #16]
 801ab9a:	605a      	str	r2, [r3, #4]
 801ab9c:	693b      	ldr	r3, [r7, #16]
 801ab9e:	685b      	ldr	r3, [r3, #4]
 801aba0:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d0e2      	beq.n	801ab6e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801aba8:	2108      	movs	r1, #8
 801abaa:	4618      	mov	r0, r3
 801abac:	f7ee f82e 	bl	8008c0c <_ZdlPvj>
 801abb0:	e7dd      	b.n	801ab6e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801abb2:	697b      	ldr	r3, [r7, #20]
 801abb4:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801abb6:	697b      	ldr	r3, [r7, #20]
 801abb8:	685b      	ldr	r3, [r3, #4]
 801abba:	617b      	str	r3, [r7, #20]
    while (current) {
 801abbc:	e7d7      	b.n	801ab6e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801abbe:	bf00      	nop
 801abc0:	3718      	adds	r7, #24
 801abc2:	46bd      	mov	sp, r7
 801abc4:	bd80      	pop	{r7, pc}

0801abc6 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801abc6:	b580      	push	{r7, lr}
 801abc8:	b084      	sub	sp, #16
 801abca:	af00      	add	r7, sp, #0
 801abcc:	6078      	str	r0, [r7, #4]
    while (head_) {
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	685b      	ldr	r3, [r3, #4]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d019      	beq.n	801ac0a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	685b      	ldr	r3, [r3, #4]
 801abda:	685b      	ldr	r3, [r3, #4]
 801abdc:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	685b      	ldr	r3, [r3, #4]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d004      	beq.n	801abf2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801abe8:	681a      	ldr	r2, [r3, #0]
 801abea:	3204      	adds	r2, #4
 801abec:	6812      	ldr	r2, [r2, #0]
 801abee:	4618      	mov	r0, r3
 801abf0:	4790      	blx	r2
        delete head_;
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	685b      	ldr	r3, [r3, #4]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d003      	beq.n	801ac02 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801abfa:	2108      	movs	r1, #8
 801abfc:	4618      	mov	r0, r3
 801abfe:	f7ee f805 	bl	8008c0c <_ZdlPvj>
        head_ = next;
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	68fa      	ldr	r2, [r7, #12]
 801ac06:	605a      	str	r2, [r3, #4]
    while (head_) {
 801ac08:	e7e1      	b.n	801abce <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801ac0a:	bf00      	nop
 801ac0c:	3710      	adds	r7, #16
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	bd80      	pop	{r7, pc}

0801ac12 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801ac12:	b580      	push	{r7, lr}
 801ac14:	b084      	sub	sp, #16
 801ac16:	af00      	add	r7, sp, #0
 801ac18:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	685b      	ldr	r3, [r3, #4]
 801ac1e:	60fb      	str	r3, [r7, #12]
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d00c      	beq.n	801ac40 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	681a      	ldr	r2, [r3, #0]
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	33ec      	adds	r3, #236	; 0xec
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	4610      	mov	r0, r2
 801ac36:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	685b      	ldr	r3, [r3, #4]
 801ac3c:	60fb      	str	r3, [r7, #12]
 801ac3e:	e7ef      	b.n	801ac20 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801ac40:	bf00      	nop
 801ac42:	3710      	adds	r7, #16
 801ac44:	46bd      	mov	sp, r7
 801ac46:	bd80      	pop	{r7, pc}

0801ac48 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801ac48:	b580      	push	{r7, lr}
 801ac4a:	b084      	sub	sp, #16
 801ac4c:	af00      	add	r7, sp, #0
 801ac4e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	685b      	ldr	r3, [r3, #4]
 801ac54:	60fb      	str	r3, [r7, #12]
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d00c      	beq.n	801ac76 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	681a      	ldr	r2, [r3, #0]
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	33e8      	adds	r3, #232	; 0xe8
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	4610      	mov	r0, r2
 801ac6c:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	685b      	ldr	r3, [r3, #4]
 801ac72:	60fb      	str	r3, [r7, #12]
 801ac74:	e7ef      	b.n	801ac56 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801ac76:	bf00      	nop
 801ac78:	3710      	adds	r7, #16
 801ac7a:	46bd      	mov	sp, r7
 801ac7c:	bd80      	pop	{r7, pc}

0801ac7e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801ac7e:	b580      	push	{r7, lr}
 801ac80:	b084      	sub	sp, #16
 801ac82:	af00      	add	r7, sp, #0
 801ac84:	6078      	str	r0, [r7, #4]
 801ac86:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	685b      	ldr	r3, [r3, #4]
 801ac8c:	60fb      	str	r3, [r7, #12]
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d00d      	beq.n	801acb0 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	681a      	ldr	r2, [r3, #0]
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	33dc      	adds	r3, #220	; 0xdc
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	6839      	ldr	r1, [r7, #0]
 801aca4:	4610      	mov	r0, r2
 801aca6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	685b      	ldr	r3, [r3, #4]
 801acac:	60fb      	str	r3, [r7, #12]
 801acae:	e7ee      	b.n	801ac8e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801acb0:	bf00      	nop
 801acb2:	3710      	adds	r7, #16
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}

0801acb8 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b084      	sub	sp, #16
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
 801acc0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	685b      	ldr	r3, [r3, #4]
 801acc6:	60fb      	str	r3, [r7, #12]
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	2b00      	cmp	r3, #0
 801accc:	d00d      	beq.n	801acea <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	681a      	ldr	r2, [r3, #0]
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	33e0      	adds	r3, #224	; 0xe0
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	6839      	ldr	r1, [r7, #0]
 801acde:	4610      	mov	r0, r2
 801ace0:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ace2:	68fb      	ldr	r3, [r7, #12]
 801ace4:	685b      	ldr	r3, [r3, #4]
 801ace6:	60fb      	str	r3, [r7, #12]
 801ace8:	e7ee      	b.n	801acc8 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801acea:	bf00      	nop
 801acec:	3710      	adds	r7, #16
 801acee:	46bd      	mov	sp, r7
 801acf0:	bd80      	pop	{r7, pc}
	...

0801acf4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801acf4:	b590      	push	{r4, r7, lr}
 801acf6:	b087      	sub	sp, #28
 801acf8:	af00      	add	r7, sp, #0
 801acfa:	60f8      	str	r0, [r7, #12]
 801acfc:	60b9      	str	r1, [r7, #8]
 801acfe:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801ad00:	68b9      	ldr	r1, [r7, #8]
 801ad02:	68f8      	ldr	r0, [r7, #12]
 801ad04:	f7f0 fb85 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801ad08:	f107 0310 	add.w	r3, r7, #16
 801ad0c:	490f      	ldr	r1, [pc, #60]	; (801ad4c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801ad0e:	4618      	mov	r0, r3
 801ad10:	f7f0 fb2b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801ad14:	f107 0310 	add.w	r3, r7, #16
 801ad18:	4619      	mov	r1, r3
 801ad1a:	68f8      	ldr	r0, [r7, #12]
 801ad1c:	f7f0 fee9 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801ad20:	4603      	mov	r3, r0
 801ad22:	461c      	mov	r4, r3
 801ad24:	f107 0310 	add.w	r3, r7, #16
 801ad28:	4618      	mov	r0, r3
 801ad2a:	f7f0 fed6 	bl	800bada <_ZN12SimpleStringD1Ev>
 801ad2e:	2c00      	cmp	r4, #0
 801ad30:	d007      	beq.n	801ad42 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801ad32:	6879      	ldr	r1, [r7, #4]
 801ad34:	68f8      	ldr	r0, [r7, #12]
 801ad36:	f7f0 ff4d 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801ad3a:	4905      	ldr	r1, [pc, #20]	; (801ad50 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801ad3c:	68f8      	ldr	r0, [r7, #12]
 801ad3e:	f7f0 ff5b 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801ad42:	bf00      	nop
}
 801ad44:	68f8      	ldr	r0, [r7, #12]
 801ad46:	371c      	adds	r7, #28
 801ad48:	46bd      	mov	sp, r7
 801ad4a:	bd90      	pop	{r4, r7, pc}
 801ad4c:	080245f8 	.word	0x080245f8
 801ad50:	080245fc 	.word	0x080245fc

0801ad54 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801ad54:	b590      	push	{r4, r7, lr}
 801ad56:	b087      	sub	sp, #28
 801ad58:	af00      	add	r7, sp, #0
 801ad5a:	60f8      	str	r0, [r7, #12]
 801ad5c:	60b9      	str	r1, [r7, #8]
 801ad5e:	607a      	str	r2, [r7, #4]
 801ad60:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801ad62:	68b9      	ldr	r1, [r7, #8]
 801ad64:	68f8      	ldr	r0, [r7, #12]
 801ad66:	f7f0 fb54 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801ad6a:	f107 0310 	add.w	r3, r7, #16
 801ad6e:	4912      	ldr	r1, [pc, #72]	; (801adb8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801ad70:	4618      	mov	r0, r3
 801ad72:	f7f0 fafa 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801ad76:	f107 0310 	add.w	r3, r7, #16
 801ad7a:	4619      	mov	r1, r3
 801ad7c:	68f8      	ldr	r0, [r7, #12]
 801ad7e:	f7f0 fefd 	bl	800bb7c <_ZneRK12SimpleStringS1_>
 801ad82:	4603      	mov	r3, r0
 801ad84:	461c      	mov	r4, r3
 801ad86:	f107 0310 	add.w	r3, r7, #16
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	f7f0 fea5 	bl	800bada <_ZN12SimpleStringD1Ev>
 801ad90:	2c00      	cmp	r4, #0
 801ad92:	d003      	beq.n	801ad9c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801ad94:	4909      	ldr	r1, [pc, #36]	; (801adbc <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801ad96:	68f8      	ldr	r0, [r7, #12]
 801ad98:	f7f0 ff2e 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801ad9c:	6879      	ldr	r1, [r7, #4]
 801ad9e:	68f8      	ldr	r0, [r7, #12]
 801ada0:	f7f0 ff18 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801ada4:	6839      	ldr	r1, [r7, #0]
 801ada6:	68f8      	ldr	r0, [r7, #12]
 801ada8:	f7f0 ff14 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    return str;
 801adac:	bf00      	nop
}
 801adae:	68f8      	ldr	r0, [r7, #12]
 801adb0:	371c      	adds	r7, #28
 801adb2:	46bd      	mov	sp, r7
 801adb4:	bd90      	pop	{r4, r7, pc}
 801adb6:	bf00      	nop
 801adb8:	080245f8 	.word	0x080245f8
 801adbc:	08024604 	.word	0x08024604

0801adc0 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801adc0:	b580      	push	{r7, lr}
 801adc2:	b08c      	sub	sp, #48	; 0x30
 801adc4:	af00      	add	r7, sp, #0
 801adc6:	60f8      	str	r0, [r7, #12]
 801adc8:	60b9      	str	r1, [r7, #8]
 801adca:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801adcc:	f107 0314 	add.w	r3, r7, #20
 801add0:	4929      	ldr	r1, [pc, #164]	; (801ae78 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801add2:	4618      	mov	r0, r3
 801add4:	f7f0 fac9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801add8:	68bb      	ldr	r3, [r7, #8]
 801adda:	685b      	ldr	r3, [r3, #4]
 801addc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801adde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d038      	beq.n	801ae56 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801ade4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ade6:	681a      	ldr	r2, [r3, #0]
 801ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	33c0      	adds	r3, #192	; 0xc0
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	4610      	mov	r0, r2
 801adf4:	4798      	blx	r3
 801adf6:	4603      	mov	r3, r0
 801adf8:	f083 0301 	eor.w	r3, r3, #1
 801adfc:	b2db      	uxtb	r3, r3
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d025      	beq.n	801ae4e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801ae02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae04:	6819      	ldr	r1, [r3, #0]
 801ae06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	33f0      	adds	r3, #240	; 0xf0
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801ae14:	4610      	mov	r0, r2
 801ae16:	4798      	blx	r3
 801ae18:	f107 001c 	add.w	r0, r7, #28
 801ae1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ae20:	f107 0114 	add.w	r1, r7, #20
 801ae24:	687a      	ldr	r2, [r7, #4]
 801ae26:	f7ff ff95 	bl	801ad54 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801ae2a:	f107 021c 	add.w	r2, r7, #28
 801ae2e:	f107 0314 	add.w	r3, r7, #20
 801ae32:	4611      	mov	r1, r2
 801ae34:	4618      	mov	r0, r3
 801ae36:	f7f0 fb04 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801ae3a:	f107 031c 	add.w	r3, r7, #28
 801ae3e:	4618      	mov	r0, r3
 801ae40:	f7f0 fe4b 	bl	800bada <_ZN12SimpleStringD1Ev>
 801ae44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ae48:	4618      	mov	r0, r3
 801ae4a:	f7f0 fe46 	bl	800bada <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae50:	685b      	ldr	r3, [r3, #4]
 801ae52:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae54:	e7c3      	b.n	801adde <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	f107 0114 	add.w	r1, r7, #20
 801ae5c:	687a      	ldr	r2, [r7, #4]
 801ae5e:	4618      	mov	r0, r3
 801ae60:	f7ff ff48 	bl	801acf4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801ae64:	f107 0314 	add.w	r3, r7, #20
 801ae68:	4618      	mov	r0, r3
 801ae6a:	f7f0 fe36 	bl	800bada <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ae6e:	bf00      	nop
}
 801ae70:	68f8      	ldr	r0, [r7, #12]
 801ae72:	3730      	adds	r7, #48	; 0x30
 801ae74:	46bd      	mov	sp, r7
 801ae76:	bd80      	pop	{r7, pc}
 801ae78:	080245f8 	.word	0x080245f8

0801ae7c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801ae7c:	b580      	push	{r7, lr}
 801ae7e:	b08c      	sub	sp, #48	; 0x30
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	60f8      	str	r0, [r7, #12]
 801ae84:	60b9      	str	r1, [r7, #8]
 801ae86:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801ae88:	f107 0314 	add.w	r3, r7, #20
 801ae8c:	4928      	ldr	r1, [pc, #160]	; (801af30 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801ae8e:	4618      	mov	r0, r3
 801ae90:	f7f0 fa6b 	bl	800b36a <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae94:	68bb      	ldr	r3, [r7, #8]
 801ae96:	685b      	ldr	r3, [r3, #4]
 801ae98:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d035      	beq.n	801af0c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801aea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aea2:	681a      	ldr	r2, [r3, #0]
 801aea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	681b      	ldr	r3, [r3, #0]
 801aeaa:	33c0      	adds	r3, #192	; 0xc0
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	4610      	mov	r0, r2
 801aeb0:	4798      	blx	r3
 801aeb2:	4603      	mov	r3, r0
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d025      	beq.n	801af04 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aeba:	6819      	ldr	r1, [r3, #0]
 801aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	33f0      	adds	r3, #240	; 0xf0
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801aeca:	4610      	mov	r0, r2
 801aecc:	4798      	blx	r3
 801aece:	f107 001c 	add.w	r0, r7, #28
 801aed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aed6:	f107 0114 	add.w	r1, r7, #20
 801aeda:	687a      	ldr	r2, [r7, #4]
 801aedc:	f7ff ff3a 	bl	801ad54 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801aee0:	f107 021c 	add.w	r2, r7, #28
 801aee4:	f107 0314 	add.w	r3, r7, #20
 801aee8:	4611      	mov	r1, r2
 801aeea:	4618      	mov	r0, r3
 801aeec:	f7f0 faa9 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801aef0:	f107 031c 	add.w	r3, r7, #28
 801aef4:	4618      	mov	r0, r3
 801aef6:	f7f0 fdf0 	bl	800bada <_ZN12SimpleStringD1Ev>
 801aefa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aefe:	4618      	mov	r0, r3
 801af00:	f7f0 fdeb 	bl	800bada <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801af04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af06:	685b      	ldr	r3, [r3, #4]
 801af08:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af0a:	e7c6      	b.n	801ae9a <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	f107 0114 	add.w	r1, r7, #20
 801af12:	687a      	ldr	r2, [r7, #4]
 801af14:	4618      	mov	r0, r3
 801af16:	f7ff feed 	bl	801acf4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801af1a:	f107 0314 	add.w	r3, r7, #20
 801af1e:	4618      	mov	r0, r3
 801af20:	f7f0 fddb 	bl	800bada <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801af24:	bf00      	nop
}
 801af26:	68f8      	ldr	r0, [r7, #12]
 801af28:	3730      	adds	r7, #48	; 0x30
 801af2a:	46bd      	mov	sp, r7
 801af2c:	bd80      	pop	{r7, pc}
 801af2e:	bf00      	nop
 801af30:	080245f8 	.word	0x080245f8

0801af34 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801af34:	b580      	push	{r7, lr}
 801af36:	b08e      	sub	sp, #56	; 0x38
 801af38:	af00      	add	r7, sp, #0
 801af3a:	6078      	str	r0, [r7, #4]
 801af3c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801af3e:	f107 030c 	add.w	r3, r7, #12
 801af42:	4936      	ldr	r1, [pc, #216]	; (801b01c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801af44:	4618      	mov	r0, r3
 801af46:	f7f0 fa10 	bl	800b36a <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801af4a:	683b      	ldr	r3, [r7, #0]
 801af4c:	685b      	ldr	r3, [r3, #4]
 801af4e:	637b      	str	r3, [r7, #52]	; 0x34
 801af50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af52:	2b00      	cmp	r3, #0
 801af54:	d044      	beq.n	801afe0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801af56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af58:	681a      	ldr	r2, [r3, #0]
 801af5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	33cc      	adds	r3, #204	; 0xcc
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	4610      	mov	r0, r2
 801af66:	4798      	blx	r3
 801af68:	4603      	mov	r3, r0
 801af6a:	f083 0301 	eor.w	r3, r3, #1
 801af6e:	b2db      	uxtb	r3, r3
 801af70:	2b00      	cmp	r3, #0
 801af72:	d031      	beq.n	801afd8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801af74:	f107 031c 	add.w	r3, r7, #28
 801af78:	4928      	ldr	r1, [pc, #160]	; (801b01c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801af7a:	4618      	mov	r0, r3
 801af7c:	f7f0 f9f5 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801af80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af82:	6819      	ldr	r1, [r3, #0]
 801af84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	33f4      	adds	r3, #244	; 0xf4
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801af92:	4610      	mov	r0, r2
 801af94:	4798      	blx	r3
 801af96:	f107 0014 	add.w	r0, r7, #20
 801af9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801af9e:	f107 021c 	add.w	r2, r7, #28
 801afa2:	f107 010c 	add.w	r1, r7, #12
 801afa6:	f7ff fed5 	bl	801ad54 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801afaa:	f107 0214 	add.w	r2, r7, #20
 801afae:	f107 030c 	add.w	r3, r7, #12
 801afb2:	4611      	mov	r1, r2
 801afb4:	4618      	mov	r0, r3
 801afb6:	f7f0 fa44 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801afba:	f107 0314 	add.w	r3, r7, #20
 801afbe:	4618      	mov	r0, r3
 801afc0:	f7f0 fd8b 	bl	800bada <_ZN12SimpleStringD1Ev>
 801afc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801afc8:	4618      	mov	r0, r3
 801afca:	f7f0 fd86 	bl	800bada <_ZN12SimpleStringD1Ev>
 801afce:	f107 031c 	add.w	r3, r7, #28
 801afd2:	4618      	mov	r0, r3
 801afd4:	f7f0 fd81 	bl	800bada <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801afd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801afda:	685b      	ldr	r3, [r3, #4]
 801afdc:	637b      	str	r3, [r7, #52]	; 0x34
 801afde:	e7b7      	b.n	801af50 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801afe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801afe4:	490d      	ldr	r1, [pc, #52]	; (801b01c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801afe6:	4618      	mov	r0, r3
 801afe8:	f7f0 f9bf 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801aff2:	f107 010c 	add.w	r1, r7, #12
 801aff6:	4618      	mov	r0, r3
 801aff8:	f7ff fe7c 	bl	801acf4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801affc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b000:	4618      	mov	r0, r3
 801b002:	f7f0 fd6a 	bl	800bada <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801b006:	f107 030c 	add.w	r3, r7, #12
 801b00a:	4618      	mov	r0, r3
 801b00c:	f7f0 fd65 	bl	800bada <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801b010:	bf00      	nop
}
 801b012:	6878      	ldr	r0, [r7, #4]
 801b014:	3738      	adds	r7, #56	; 0x38
 801b016:	46bd      	mov	sp, r7
 801b018:	bd80      	pop	{r7, pc}
 801b01a:	bf00      	nop
 801b01c:	080245f8 	.word	0x080245f8

0801b020 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801b020:	b580      	push	{r7, lr}
 801b022:	b084      	sub	sp, #16
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	685b      	ldr	r3, [r3, #4]
 801b02c:	60fb      	str	r3, [r7, #12]
 801b02e:	68fb      	ldr	r3, [r7, #12]
 801b030:	2b00      	cmp	r3, #0
 801b032:	d014      	beq.n	801b05e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	681a      	ldr	r2, [r3, #0]
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	33d0      	adds	r3, #208	; 0xd0
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	4610      	mov	r0, r2
 801b044:	4798      	blx	r3
 801b046:	4603      	mov	r3, r0
 801b048:	f083 0301 	eor.w	r3, r3, #1
 801b04c:	b2db      	uxtb	r3, r3
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d001      	beq.n	801b056 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801b052:	2301      	movs	r3, #1
 801b054:	e004      	b.n	801b060 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	685b      	ldr	r3, [r3, #4]
 801b05a:	60fb      	str	r3, [r7, #12]
 801b05c:	e7e7      	b.n	801b02e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801b05e:	2300      	movs	r3, #0
}
 801b060:	4618      	mov	r0, r3
 801b062:	3710      	adds	r7, #16
 801b064:	46bd      	mov	sp, r7
 801b066:	bd80      	pop	{r7, pc}

0801b068 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801b068:	b480      	push	{r7}
 801b06a:	b083      	sub	sp, #12
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	6078      	str	r0, [r7, #4]
 801b070:	460b      	mov	r3, r1
 801b072:	70fb      	strb	r3, [r7, #3]
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	78fa      	ldrb	r2, [r7, #3]
 801b078:	711a      	strb	r2, [r3, #4]
 801b07a:	bf00      	nop
 801b07c:	370c      	adds	r7, #12
 801b07e:	46bd      	mov	sp, r7
 801b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b084:	4770      	bx	lr
	...

0801b088 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801b088:	b580      	push	{r7, lr}
 801b08a:	b082      	sub	sp, #8
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	6078      	str	r0, [r7, #4]
 801b090:	460b      	mov	r3, r1
 801b092:	70fb      	strb	r3, [r7, #3]
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	4618      	mov	r0, r3
 801b098:	f7ed ff6a 	bl	8008f70 <_ZN14TestTerminatorC1Ev>
 801b09c:	4a05      	ldr	r2, [pc, #20]	; (801b0b4 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	601a      	str	r2, [r3, #0]
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	78fa      	ldrb	r2, [r7, #3]
 801b0a6:	711a      	strb	r2, [r3, #4]
    {
    }
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	4618      	mov	r0, r3
 801b0ac:	3708      	adds	r7, #8
 801b0ae:	46bd      	mov	sp, r7
 801b0b0:	bd80      	pop	{r7, pc}
 801b0b2:	bf00      	nop
 801b0b4:	0802703c 	.word	0x0802703c

0801b0b8 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b082      	sub	sp, #8
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	791b      	ldrb	r3, [r3, #4]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d001      	beq.n	801b0cc <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801b0c8:	f7f6 f9fe 	bl	80114c8 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801b0cc:	f7f7 fd40 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b0d0:	4603      	mov	r3, r0
 801b0d2:	681a      	ldr	r2, [r3, #0]
 801b0d4:	6812      	ldr	r2, [r2, #0]
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801b0da:	bf00      	nop
 801b0dc:	3708      	adds	r7, #8
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	bd80      	pop	{r7, pc}
	...

0801b0e4 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b082      	sub	sp, #8
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
    {
 801b0ec:	4a05      	ldr	r2, [pc, #20]	; (801b104 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	601a      	str	r2, [r3, #0]
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	f7f7 fdbb 	bl	8012c70 <_ZN14TestTerminatorD1Ev>
    }
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	3708      	adds	r7, #8
 801b100:	46bd      	mov	sp, r7
 801b102:	bd80      	pop	{r7, pc}
 801b104:	0802703c 	.word	0x0802703c

0801b108 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801b108:	b580      	push	{r7, lr}
 801b10a:	b082      	sub	sp, #8
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
    }
 801b110:	6878      	ldr	r0, [r7, #4]
 801b112:	f7ff ffe7 	bl	801b0e4 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801b116:	2108      	movs	r1, #8
 801b118:	6878      	ldr	r0, [r7, #4]
 801b11a:	f7ed fd77 	bl	8008c0c <_ZdlPvj>
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	4618      	mov	r0, r3
 801b122:	3708      	adds	r7, #8
 801b124:	46bd      	mov	sp, r7
 801b126:	bd80      	pop	{r7, pc}

0801b128 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801b128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b12a:	b085      	sub	sp, #20
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	6078      	str	r0, [r7, #4]
 801b130:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	330c      	adds	r3, #12
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	6878      	ldr	r0, [r7, #4]
 801b13c:	4798      	blx	r3
 801b13e:	4603      	mov	r3, r0
 801b140:	681a      	ldr	r2, [r3, #0]
 801b142:	321c      	adds	r2, #28
 801b144:	6812      	ldr	r2, [r2, #0]
 801b146:	4618      	mov	r0, r3
 801b148:	4790      	blx	r2
 801b14a:	4603      	mov	r3, r0
 801b14c:	f083 0301 	eor.w	r3, r3, #1
 801b150:	b2db      	uxtb	r3, r3
 801b152:	2b00      	cmp	r3, #0
 801b154:	d01d      	beq.n	801b192 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	330c      	adds	r3, #12
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	6878      	ldr	r0, [r7, #4]
 801b160:	4798      	blx	r3
 801b162:	4604      	mov	r4, r0
 801b164:	6823      	ldr	r3, [r4, #0]
 801b166:	339c      	adds	r3, #156	; 0x9c
 801b168:	681d      	ldr	r5, [r3, #0]
 801b16a:	683e      	ldr	r6, [r7, #0]
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	791a      	ldrb	r2, [r3, #4]
 801b170:	f107 0308 	add.w	r3, r7, #8
 801b174:	4611      	mov	r1, r2
 801b176:	4618      	mov	r0, r3
 801b178:	f7ff ff86 	bl	801b088 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801b17c:	f107 0308 	add.w	r3, r7, #8
 801b180:	461a      	mov	r2, r3
 801b182:	4631      	mov	r1, r6
 801b184:	4620      	mov	r0, r4
 801b186:	47a8      	blx	r5
 801b188:	f107 0308 	add.w	r3, r7, #8
 801b18c:	4618      	mov	r0, r3
 801b18e:	f7ff ffa9 	bl	801b0e4 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801b192:	bf00      	nop
 801b194:	3714      	adds	r7, #20
 801b196:	46bd      	mov	sp, r7
 801b198:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b19a <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801b19a:	b580      	push	{r7, lr}
 801b19c:	b082      	sub	sp, #8
 801b19e:	af00      	add	r7, sp, #0
 801b1a0:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801b1a2:	f7f7 fcc5 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801b1a6:	4603      	mov	r3, r0
}
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	3708      	adds	r7, #8
 801b1ac:	46bd      	mov	sp, r7
 801b1ae:	bd80      	pop	{r7, pc}

0801b1b0 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801b1b0:	b590      	push	{r4, r7, lr}
 801b1b2:	b085      	sub	sp, #20
 801b1b4:	af00      	add	r7, sp, #0
 801b1b6:	6078      	str	r0, [r7, #4]
 801b1b8:	6039      	str	r1, [r7, #0]
 801b1ba:	687c      	ldr	r4, [r7, #4]
 801b1bc:	f107 0308 	add.w	r3, r7, #8
 801b1c0:	490b      	ldr	r1, [pc, #44]	; (801b1f0 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	f7f0 f8d1 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b1c8:	f107 0308 	add.w	r3, r7, #8
 801b1cc:	461a      	mov	r2, r3
 801b1ce:	6839      	ldr	r1, [r7, #0]
 801b1d0:	4620      	mov	r0, r4
 801b1d2:	f7f1 ff29 	bl	800d028 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801b1d6:	f107 0308 	add.w	r3, r7, #8
 801b1da:	4618      	mov	r0, r3
 801b1dc:	f7f0 fc7d 	bl	800bada <_ZN12SimpleStringD1Ev>
 801b1e0:	4a04      	ldr	r2, [pc, #16]	; (801b1f4 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	601a      	str	r2, [r3, #0]
{
}
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	3714      	adds	r7, #20
 801b1ec:	46bd      	mov	sp, r7
 801b1ee:	bd90      	pop	{r4, r7, pc}
 801b1f0:	08024608 	.word	0x08024608
 801b1f4:	08025fc8 	.word	0x08025fc8

0801b1f8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801b1f8:	b5b0      	push	{r4, r5, r7, lr}
 801b1fa:	b08a      	sub	sp, #40	; 0x28
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	6078      	str	r0, [r7, #4]
 801b200:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	332c      	adds	r3, #44	; 0x2c
 801b206:	492b      	ldr	r1, [pc, #172]	; (801b2b4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801b208:	4618      	mov	r0, r3
 801b20a:	f7f0 fcf5 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801b214:	683b      	ldr	r3, [r7, #0]
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	337c      	adds	r3, #124	; 0x7c
 801b21a:	681c      	ldr	r4, [r3, #0]
 801b21c:	f107 0310 	add.w	r3, r7, #16
 801b220:	4925      	ldr	r1, [pc, #148]	; (801b2b8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801b222:	4618      	mov	r0, r3
 801b224:	f7f0 f8a1 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b228:	f107 0308 	add.w	r3, r7, #8
 801b22c:	f107 0210 	add.w	r2, r7, #16
 801b230:	6839      	ldr	r1, [r7, #0]
 801b232:	4618      	mov	r0, r3
 801b234:	47a0      	blx	r4
 801b236:	f107 0308 	add.w	r3, r7, #8
 801b23a:	4619      	mov	r1, r3
 801b23c:	4628      	mov	r0, r5
 801b23e:	f7f0 fcc9 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b242:	f107 0308 	add.w	r3, r7, #8
 801b246:	4618      	mov	r0, r3
 801b248:	f7f0 fc47 	bl	800bada <_ZN12SimpleStringD1Ev>
 801b24c:	f107 0310 	add.w	r3, r7, #16
 801b250:	4618      	mov	r0, r3
 801b252:	f7f0 fc42 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	332c      	adds	r3, #44	; 0x2c
 801b25a:	4918      	ldr	r1, [pc, #96]	; (801b2bc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801b25c:	4618      	mov	r0, r3
 801b25e:	f7f0 fccb 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801b268:	683b      	ldr	r3, [r7, #0]
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	3380      	adds	r3, #128	; 0x80
 801b26e:	681c      	ldr	r4, [r3, #0]
 801b270:	f107 0320 	add.w	r3, r7, #32
 801b274:	4910      	ldr	r1, [pc, #64]	; (801b2b8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801b276:	4618      	mov	r0, r3
 801b278:	f7f0 f877 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b27c:	f107 0318 	add.w	r3, r7, #24
 801b280:	f107 0220 	add.w	r2, r7, #32
 801b284:	6839      	ldr	r1, [r7, #0]
 801b286:	4618      	mov	r0, r3
 801b288:	47a0      	blx	r4
 801b28a:	f107 0318 	add.w	r3, r7, #24
 801b28e:	4619      	mov	r1, r3
 801b290:	4628      	mov	r0, r5
 801b292:	f7f0 fc9f 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b296:	f107 0318 	add.w	r3, r7, #24
 801b29a:	4618      	mov	r0, r3
 801b29c:	f7f0 fc1d 	bl	800bada <_ZN12SimpleStringD1Ev>
 801b2a0:	f107 0320 	add.w	r3, r7, #32
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	f7f0 fc18 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 801b2aa:	bf00      	nop
 801b2ac:	3728      	adds	r7, #40	; 0x28
 801b2ae:	46bd      	mov	sp, r7
 801b2b0:	bdb0      	pop	{r4, r5, r7, pc}
 801b2b2:	bf00      	nop
 801b2b4:	08024658 	.word	0x08024658
 801b2b8:	08024684 	.word	0x08024684
 801b2bc:	08024688 	.word	0x08024688

0801b2c0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801b2c0:	b590      	push	{r4, r7, lr}
 801b2c2:	b08f      	sub	sp, #60	; 0x3c
 801b2c4:	af00      	add	r7, sp, #0
 801b2c6:	60f8      	str	r0, [r7, #12]
 801b2c8:	60b9      	str	r1, [r7, #8]
 801b2ca:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801b2cc:	f107 0310 	add.w	r3, r7, #16
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	f7ff f877 	bl	801a3c4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801b2d6:	f107 0310 	add.w	r3, r7, #16
 801b2da:	687a      	ldr	r2, [r7, #4]
 801b2dc:	68b9      	ldr	r1, [r7, #8]
 801b2de:	4618      	mov	r0, r3
 801b2e0:	f7ff fa16 	bl	801a710 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	332c      	adds	r3, #44	; 0x2c
 801b2e8:	4937      	ldr	r1, [pc, #220]	; (801b3c8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801b2ea:	4618      	mov	r0, r3
 801b2ec:	f7f0 fc84 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	332c      	adds	r3, #44	; 0x2c
 801b2f4:	68b9      	ldr	r1, [r7, #8]
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	f7f0 fc6c 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	332c      	adds	r3, #44	; 0x2c
 801b300:	4932      	ldr	r1, [pc, #200]	; (801b3cc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801b302:	4618      	mov	r0, r3
 801b304:	f7f0 fc78 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b30e:	f107 0320 	add.w	r3, r7, #32
 801b312:	492f      	ldr	r1, [pc, #188]	; (801b3d0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801b314:	4618      	mov	r0, r3
 801b316:	f7f0 f828 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b31a:	f107 0318 	add.w	r3, r7, #24
 801b31e:	f107 0220 	add.w	r2, r7, #32
 801b322:	f107 0110 	add.w	r1, r7, #16
 801b326:	4618      	mov	r0, r3
 801b328:	f7ff fd4a 	bl	801adc0 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801b32c:	f107 0318 	add.w	r3, r7, #24
 801b330:	4619      	mov	r1, r3
 801b332:	4620      	mov	r0, r4
 801b334:	f7f0 fc4e 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b338:	f107 0318 	add.w	r3, r7, #24
 801b33c:	4618      	mov	r0, r3
 801b33e:	f7f0 fbcc 	bl	800bada <_ZN12SimpleStringD1Ev>
 801b342:	f107 0320 	add.w	r3, r7, #32
 801b346:	4618      	mov	r0, r3
 801b348:	f7f0 fbc7 	bl	800bada <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	332c      	adds	r3, #44	; 0x2c
 801b350:	4920      	ldr	r1, [pc, #128]	; (801b3d4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801b352:	4618      	mov	r0, r3
 801b354:	f7f0 fc50 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	332c      	adds	r3, #44	; 0x2c
 801b35c:	68b9      	ldr	r1, [r7, #8]
 801b35e:	4618      	mov	r0, r3
 801b360:	f7f0 fc38 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	332c      	adds	r3, #44	; 0x2c
 801b368:	4918      	ldr	r1, [pc, #96]	; (801b3cc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801b36a:	4618      	mov	r0, r3
 801b36c:	f7f0 fc44 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b37a:	4915      	ldr	r1, [pc, #84]	; (801b3d0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801b37c:	4618      	mov	r0, r3
 801b37e:	f7ef fff4 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b386:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b38a:	f107 0110 	add.w	r1, r7, #16
 801b38e:	4618      	mov	r0, r3
 801b390:	f7ff fd74 	bl	801ae7c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801b394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b398:	4619      	mov	r1, r3
 801b39a:	4620      	mov	r0, r4
 801b39c:	f7f0 fc1a 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b3a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b3a4:	4618      	mov	r0, r3
 801b3a6:	f7f0 fb98 	bl	800bada <_ZN12SimpleStringD1Ev>
 801b3aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f7f0 fb93 	bl	800bada <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801b3b4:	f107 0310 	add.w	r3, r7, #16
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f7ff f817 	bl	801a3ec <_ZN21MockExpectedCallsListD1Ev>
}
 801b3be:	bf00      	nop
 801b3c0:	373c      	adds	r7, #60	; 0x3c
 801b3c2:	46bd      	mov	sp, r7
 801b3c4:	bd90      	pop	{r4, r7, pc}
 801b3c6:	bf00      	nop
 801b3c8:	080246b0 	.word	0x080246b0
 801b3cc:	080246f0 	.word	0x080246f0
 801b3d0:	08024684 	.word	0x08024684
 801b3d4:	080246f4 	.word	0x080246f4

0801b3d8 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b3d8:	b590      	push	{r4, r7, lr}
 801b3da:	b087      	sub	sp, #28
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	60f8      	str	r0, [r7, #12]
 801b3e0:	60b9      	str	r1, [r7, #8]
 801b3e2:	607a      	str	r2, [r7, #4]
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	68b9      	ldr	r1, [r7, #8]
 801b3e8:	4618      	mov	r0, r3
 801b3ea:	f7ff fee1 	bl	801b1b0 <_ZN11MockFailureC1EP10UtestShell>
 801b3ee:	4a10      	ldr	r2, [pc, #64]	; (801b430 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b3fa:	f107 0310 	add.w	r3, r7, #16
 801b3fe:	490d      	ldr	r1, [pc, #52]	; (801b434 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801b400:	4618      	mov	r0, r3
 801b402:	f7ef ffb2 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b406:	f107 0310 	add.w	r3, r7, #16
 801b40a:	4619      	mov	r1, r3
 801b40c:	4620      	mov	r0, r4
 801b40e:	f7f0 f818 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801b412:	f107 0310 	add.w	r3, r7, #16
 801b416:	4618      	mov	r0, r3
 801b418:	f7f0 fb5f 	bl	800bada <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	6879      	ldr	r1, [r7, #4]
 801b420:	4618      	mov	r0, r3
 801b422:	f7ff fee9 	bl	801b1f8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	4618      	mov	r0, r3
 801b42a:	371c      	adds	r7, #28
 801b42c:	46bd      	mov	sp, r7
 801b42e:	bd90      	pop	{r4, r7, pc}
 801b430:	08025f9c 	.word	0x08025f9c
 801b434:	08024730 	.word	0x08024730

0801b438 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b438:	b590      	push	{r4, r7, lr}
 801b43a:	b08d      	sub	sp, #52	; 0x34
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	60f8      	str	r0, [r7, #12]
 801b440:	60b9      	str	r1, [r7, #8]
 801b442:	607a      	str	r2, [r7, #4]
 801b444:	603b      	str	r3, [r7, #0]
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	68b9      	ldr	r1, [r7, #8]
 801b44a:	4618      	mov	r0, r3
 801b44c:	f7ff feb0 	bl	801b1b0 <_ZN11MockFailureC1EP10UtestShell>
 801b450:	4a2f      	ldr	r2, [pc, #188]	; (801b510 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801b456:	683b      	ldr	r3, [r7, #0]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	3310      	adds	r3, #16
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	6879      	ldr	r1, [r7, #4]
 801b460:	6838      	ldr	r0, [r7, #0]
 801b462:	4798      	blx	r3
 801b464:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801b466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d027      	beq.n	801b4bc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801b46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b46e:	1c5a      	adds	r2, r3, #1
 801b470:	f107 0314 	add.w	r3, r7, #20
 801b474:	4611      	mov	r1, r2
 801b476:	4618      	mov	r0, r3
 801b478:	f7f1 fa00 	bl	800c87c <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b482:	f107 0314 	add.w	r3, r7, #20
 801b486:	4618      	mov	r0, r3
 801b488:	f7f0 fafa 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801b48c:	4602      	mov	r2, r0
 801b48e:	f107 031c 	add.w	r3, r7, #28
 801b492:	4920      	ldr	r1, [pc, #128]	; (801b514 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801b494:	4618      	mov	r0, r3
 801b496:	f7f1 f827 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 801b49a:	f107 031c 	add.w	r3, r7, #28
 801b49e:	4619      	mov	r1, r3
 801b4a0:	4620      	mov	r0, r4
 801b4a2:	f7ef ffce 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801b4a6:	f107 031c 	add.w	r3, r7, #28
 801b4aa:	4618      	mov	r0, r3
 801b4ac:	f7f0 fb15 	bl	800bada <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801b4b0:	f107 0314 	add.w	r3, r7, #20
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	f7f0 fb10 	bl	800bada <_ZN12SimpleStringD1Ev>
 801b4ba:	e013      	b.n	801b4e4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b4c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b4c6:	4914      	ldr	r1, [pc, #80]	; (801b518 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801b4c8:	4618      	mov	r0, r3
 801b4ca:	f7ef ff4e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b4ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b4d2:	4619      	mov	r1, r3
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	f7ef ffb4 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801b4da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b4de:	4618      	mov	r0, r3
 801b4e0:	f7f0 fafb 	bl	800bada <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	332c      	adds	r3, #44	; 0x2c
 801b4e8:	6879      	ldr	r1, [r7, #4]
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	f7f0 fb72 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b4f0:	68fb      	ldr	r3, [r7, #12]
 801b4f2:	332c      	adds	r3, #44	; 0x2c
 801b4f4:	4909      	ldr	r1, [pc, #36]	; (801b51c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	f7f0 fb7e 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	6839      	ldr	r1, [r7, #0]
 801b500:	4618      	mov	r0, r3
 801b502:	f7ff fe79 	bl	801b1f8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	4618      	mov	r0, r3
 801b50a:	3734      	adds	r7, #52	; 0x34
 801b50c:	46bd      	mov	sp, r7
 801b50e:	bd90      	pop	{r4, r7, pc}
 801b510:	0802693c 	.word	0x0802693c
 801b514:	08024760 	.word	0x08024760
 801b518:	0802479c 	.word	0x0802479c
 801b51c:	080246f0 	.word	0x080246f0

0801b520 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b520:	b590      	push	{r4, r7, lr}
 801b522:	b089      	sub	sp, #36	; 0x24
 801b524:	af00      	add	r7, sp, #0
 801b526:	60f8      	str	r0, [r7, #12]
 801b528:	60b9      	str	r1, [r7, #8]
 801b52a:	607a      	str	r2, [r7, #4]
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	68b9      	ldr	r1, [r7, #8]
 801b530:	4618      	mov	r0, r3
 801b532:	f7ff fe3d 	bl	801b1b0 <_ZN11MockFailureC1EP10UtestShell>
 801b536:	4a1f      	ldr	r2, [pc, #124]	; (801b5b4 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801b538:	68fb      	ldr	r3, [r7, #12]
 801b53a:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801b53c:	f107 0310 	add.w	r3, r7, #16
 801b540:	4618      	mov	r0, r3
 801b542:	f7fe ff3f 	bl	801a3c4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801b546:	f107 0310 	add.w	r3, r7, #16
 801b54a:	6879      	ldr	r1, [r7, #4]
 801b54c:	4618      	mov	r0, r3
 801b54e:	f7ff f909 	bl	801a764 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801b552:	f107 0310 	add.w	r3, r7, #16
 801b556:	4618      	mov	r0, r3
 801b558:	f7ff f94c 	bl	801a7f4 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b562:	f107 0318 	add.w	r3, r7, #24
 801b566:	4914      	ldr	r1, [pc, #80]	; (801b5b8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801b568:	4618      	mov	r0, r3
 801b56a:	f7ef fefe 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b56e:	f107 0318 	add.w	r3, r7, #24
 801b572:	4619      	mov	r1, r3
 801b574:	4620      	mov	r0, r4
 801b576:	f7ef ff64 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801b57a:	f107 0318 	add.w	r3, r7, #24
 801b57e:	4618      	mov	r0, r3
 801b580:	f7f0 faab 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	332c      	adds	r3, #44	; 0x2c
 801b588:	490c      	ldr	r1, [pc, #48]	; (801b5bc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801b58a:	4618      	mov	r0, r3
 801b58c:	f7f0 fb34 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	f107 0210 	add.w	r2, r7, #16
 801b596:	4611      	mov	r1, r2
 801b598:	4618      	mov	r0, r3
 801b59a:	f7ff fe2d 	bl	801b1f8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801b59e:	f107 0310 	add.w	r3, r7, #16
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	f7fe ff22 	bl	801a3ec <_ZN21MockExpectedCallsListD1Ev>
}
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	3724      	adds	r7, #36	; 0x24
 801b5ae:	46bd      	mov	sp, r7
 801b5b0:	bd90      	pop	{r4, r7, pc}
 801b5b2:	bf00      	nop
 801b5b4:	08025f70 	.word	0x08025f70
 801b5b8:	080247c8 	.word	0x080247c8
 801b5bc:	080246f0 	.word	0x080246f0

0801b5c0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801b5c0:	b590      	push	{r4, r7, lr}
 801b5c2:	b099      	sub	sp, #100	; 0x64
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	60f8      	str	r0, [r7, #12]
 801b5c8:	60b9      	str	r1, [r7, #8]
 801b5ca:	607a      	str	r2, [r7, #4]
 801b5cc:	603b      	str	r3, [r7, #0]
 801b5ce:	68fb      	ldr	r3, [r7, #12]
 801b5d0:	68b9      	ldr	r1, [r7, #8]
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	f7ff fdec 	bl	801b1b0 <_ZN11MockFailureC1EP10UtestShell>
 801b5d8:	4a9e      	ldr	r2, [pc, #632]	; (801b854 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b5de:	f107 0310 	add.w	r3, r7, #16
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	f7fe feee 	bl	801a3c4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801b5e8:	f107 0310 	add.w	r3, r7, #16
 801b5ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b5ee:	6879      	ldr	r1, [r7, #4]
 801b5f0:	4618      	mov	r0, r3
 801b5f2:	f7ff f88d 	bl	801a710 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801b5f6:	683b      	ldr	r3, [r7, #0]
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	335c      	adds	r3, #92	; 0x5c
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	f107 0218 	add.w	r2, r7, #24
 801b602:	6839      	ldr	r1, [r7, #0]
 801b604:	4610      	mov	r0, r2
 801b606:	4798      	blx	r3
 801b608:	f107 0218 	add.w	r2, r7, #24
 801b60c:	f107 0310 	add.w	r3, r7, #16
 801b610:	4611      	mov	r1, r2
 801b612:	4618      	mov	r0, r3
 801b614:	f7ff f948 	bl	801a8a8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801b618:	f107 0318 	add.w	r3, r7, #24
 801b61c:	4618      	mov	r0, r3
 801b61e:	f7f0 fa5c 	bl	800bada <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801b622:	f107 0310 	add.w	r3, r7, #16
 801b626:	4618      	mov	r0, r3
 801b628:	f7fe ff4d 	bl	801a4c6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801b62c:	4603      	mov	r3, r0
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d037      	beq.n	801b6a2 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b638:	f107 0320 	add.w	r3, r7, #32
 801b63c:	4986      	ldr	r1, [pc, #536]	; (801b858 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801b63e:	4618      	mov	r0, r3
 801b640:	f7ef fe93 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b644:	f107 0320 	add.w	r3, r7, #32
 801b648:	4619      	mov	r1, r3
 801b64a:	4620      	mov	r0, r4
 801b64c:	f7ef fef9 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801b650:	f107 0320 	add.w	r3, r7, #32
 801b654:	4618      	mov	r0, r3
 801b656:	f7f0 fa40 	bl	800bada <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801b65a:	68fb      	ldr	r3, [r7, #12]
 801b65c:	332c      	adds	r3, #44	; 0x2c
 801b65e:	6879      	ldr	r1, [r7, #4]
 801b660:	4618      	mov	r0, r3
 801b662:	f7f0 fab7 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	332c      	adds	r3, #44	; 0x2c
 801b66a:	497c      	ldr	r1, [pc, #496]	; (801b85c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801b66c:	4618      	mov	r0, r3
 801b66e:	f7f0 fac3 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801b672:	68fb      	ldr	r3, [r7, #12]
 801b674:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b678:	683b      	ldr	r3, [r7, #0]
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	335c      	adds	r3, #92	; 0x5c
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b684:	6839      	ldr	r1, [r7, #0]
 801b686:	4610      	mov	r0, r2
 801b688:	4798      	blx	r3
 801b68a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b68e:	4619      	mov	r1, r3
 801b690:	4620      	mov	r0, r4
 801b692:	f7f0 fa9f 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b69a:	4618      	mov	r0, r3
 801b69c:	f7f0 fa1d 	bl	800bada <_ZN12SimpleStringD1Ev>
 801b6a0:	e056      	b.n	801b750 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801b6a2:	68fb      	ldr	r3, [r7, #12]
 801b6a4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b6a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b6ac:	496c      	ldr	r1, [pc, #432]	; (801b860 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	f7ef fe5b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b6b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b6b8:	4619      	mov	r1, r3
 801b6ba:	4620      	mov	r0, r4
 801b6bc:	f7ef fec1 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801b6c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	f7f0 fa08 	bl	800bada <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b6d0:	683b      	ldr	r3, [r7, #0]
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	335c      	adds	r3, #92	; 0x5c
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b6dc:	6839      	ldr	r1, [r7, #0]
 801b6de:	4610      	mov	r0, r2
 801b6e0:	4798      	blx	r3
 801b6e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b6e6:	4619      	mov	r1, r3
 801b6e8:	4620      	mov	r0, r4
 801b6ea:	f7f0 fa73 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b6ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b6f2:	4618      	mov	r0, r3
 801b6f4:	f7f0 f9f1 	bl	800bada <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	332c      	adds	r3, #44	; 0x2c
 801b6fc:	4959      	ldr	r1, [pc, #356]	; (801b864 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801b6fe:	4618      	mov	r0, r3
 801b700:	f7f0 fa7a 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801b704:	68fb      	ldr	r3, [r7, #12]
 801b706:	332c      	adds	r3, #44	; 0x2c
 801b708:	6879      	ldr	r1, [r7, #4]
 801b70a:	4618      	mov	r0, r3
 801b70c:	f7f0 fa62 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	332c      	adds	r3, #44	; 0x2c
 801b714:	4954      	ldr	r1, [pc, #336]	; (801b868 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801b716:	4618      	mov	r0, r3
 801b718:	f7f0 fa6e 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801b71c:	68fb      	ldr	r3, [r7, #12]
 801b71e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b726:	6839      	ldr	r1, [r7, #0]
 801b728:	4618      	mov	r0, r3
 801b72a:	f7fd faa3 	bl	8018c74 <_Z10StringFromRK14MockNamedValue>
 801b72e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b732:	4619      	mov	r1, r3
 801b734:	4620      	mov	r0, r4
 801b736:	f7f0 fa4d 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b73a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b73e:	4618      	mov	r0, r3
 801b740:	f7f0 f9cb 	bl	800bada <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	332c      	adds	r3, #44	; 0x2c
 801b748:	4948      	ldr	r1, [pc, #288]	; (801b86c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801b74a:	4618      	mov	r0, r3
 801b74c:	f7f0 fa54 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	332c      	adds	r3, #44	; 0x2c
 801b754:	4946      	ldr	r1, [pc, #280]	; (801b870 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801b756:	4618      	mov	r0, r3
 801b758:	f7f0 fa4e 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b75c:	68fb      	ldr	r3, [r7, #12]
 801b75e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b760:	6879      	ldr	r1, [r7, #4]
 801b762:	4618      	mov	r0, r3
 801b764:	f7ff fdac 	bl	801b2c0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801b768:	68fb      	ldr	r3, [r7, #12]
 801b76a:	332c      	adds	r3, #44	; 0x2c
 801b76c:	4941      	ldr	r1, [pc, #260]	; (801b874 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801b76e:	4618      	mov	r0, r3
 801b770:	f7f0 fa42 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	332c      	adds	r3, #44	; 0x2c
 801b778:	6879      	ldr	r1, [r7, #4]
 801b77a:	4618      	mov	r0, r3
 801b77c:	f7f0 fa2a 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	332c      	adds	r3, #44	; 0x2c
 801b784:	493a      	ldr	r1, [pc, #232]	; (801b870 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801b786:	4618      	mov	r0, r3
 801b788:	f7f0 fa36 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	332c      	adds	r3, #44	; 0x2c
 801b790:	4939      	ldr	r1, [pc, #228]	; (801b878 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801b792:	4618      	mov	r0, r3
 801b794:	f7f0 fa30 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801b798:	68fb      	ldr	r3, [r7, #12]
 801b79a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b79e:	683b      	ldr	r3, [r7, #0]
 801b7a0:	681b      	ldr	r3, [r3, #0]
 801b7a2:	3360      	adds	r3, #96	; 0x60
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801b7aa:	6839      	ldr	r1, [r7, #0]
 801b7ac:	4610      	mov	r0, r2
 801b7ae:	4798      	blx	r3
 801b7b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b7b4:	4619      	mov	r1, r3
 801b7b6:	4620      	mov	r0, r4
 801b7b8:	f7f0 fa0c 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b7bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	f7f0 f98a 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801b7c6:	68fb      	ldr	r3, [r7, #12]
 801b7c8:	332c      	adds	r3, #44	; 0x2c
 801b7ca:	492c      	ldr	r1, [pc, #176]	; (801b87c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	f7f0 fa13 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b7d8:	683b      	ldr	r3, [r7, #0]
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	335c      	adds	r3, #92	; 0x5c
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801b7e4:	6839      	ldr	r1, [r7, #0]
 801b7e6:	4610      	mov	r0, r2
 801b7e8:	4798      	blx	r3
 801b7ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b7ee:	4619      	mov	r1, r3
 801b7f0:	4620      	mov	r0, r4
 801b7f2:	f7f0 f9ef 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b7f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f7f0 f96d 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	332c      	adds	r3, #44	; 0x2c
 801b804:	491e      	ldr	r1, [pc, #120]	; (801b880 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801b806:	4618      	mov	r0, r3
 801b808:	f7f0 f9f6 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801b80c:	68fb      	ldr	r3, [r7, #12]
 801b80e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b812:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b816:	6839      	ldr	r1, [r7, #0]
 801b818:	4618      	mov	r0, r3
 801b81a:	f7fd fa2b 	bl	8018c74 <_Z10StringFromRK14MockNamedValue>
 801b81e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b822:	4619      	mov	r1, r3
 801b824:	4620      	mov	r0, r4
 801b826:	f7f0 f9d5 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b82a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b82e:	4618      	mov	r0, r3
 801b830:	f7f0 f953 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801b834:	68fb      	ldr	r3, [r7, #12]
 801b836:	332c      	adds	r3, #44	; 0x2c
 801b838:	490c      	ldr	r1, [pc, #48]	; (801b86c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801b83a:	4618      	mov	r0, r3
 801b83c:	f7f0 f9dc 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b840:	f107 0310 	add.w	r3, r7, #16
 801b844:	4618      	mov	r0, r3
 801b846:	f7fe fdd1 	bl	801a3ec <_ZN21MockExpectedCallsListD1Ev>
}
 801b84a:	68fb      	ldr	r3, [r7, #12]
 801b84c:	4618      	mov	r0, r3
 801b84e:	3764      	adds	r7, #100	; 0x64
 801b850:	46bd      	mov	sp, r7
 801b852:	bd90      	pop	{r4, r7, pc}
 801b854:	08026910 	.word	0x08026910
 801b858:	080247ec 	.word	0x080247ec
 801b85c:	08024824 	.word	0x08024824
 801b860:	08024828 	.word	0x08024828
 801b864:	08024860 	.word	0x08024860
 801b868:	08024870 	.word	0x08024870
 801b86c:	08024878 	.word	0x08024878
 801b870:	080246f0 	.word	0x080246f0
 801b874:	0802487c 	.word	0x0802487c
 801b878:	08024684 	.word	0x08024684
 801b87c:	080248b0 	.word	0x080248b0
 801b880:	080248b4 	.word	0x080248b4

0801b884 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801b884:	b590      	push	{r4, r7, lr}
 801b886:	b097      	sub	sp, #92	; 0x5c
 801b888:	af00      	add	r7, sp, #0
 801b88a:	60f8      	str	r0, [r7, #12]
 801b88c:	60b9      	str	r1, [r7, #8]
 801b88e:	607a      	str	r2, [r7, #4]
 801b890:	603b      	str	r3, [r7, #0]
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	68b9      	ldr	r1, [r7, #8]
 801b896:	4618      	mov	r0, r3
 801b898:	f7ff fc8a 	bl	801b1b0 <_ZN11MockFailureC1EP10UtestShell>
 801b89c:	4a90      	ldr	r2, [pc, #576]	; (801bae0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801b89e:	68fb      	ldr	r3, [r7, #12]
 801b8a0:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b8a2:	f107 0310 	add.w	r3, r7, #16
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	f7fe fd8c 	bl	801a3c4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801b8ac:	f107 0310 	add.w	r3, r7, #16
 801b8b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b8b2:	6879      	ldr	r1, [r7, #4]
 801b8b4:	4618      	mov	r0, r3
 801b8b6:	f7fe ff2b 	bl	801a710 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801b8ba:	683b      	ldr	r3, [r7, #0]
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	335c      	adds	r3, #92	; 0x5c
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	f107 0218 	add.w	r2, r7, #24
 801b8c6:	6839      	ldr	r1, [r7, #0]
 801b8c8:	4610      	mov	r0, r2
 801b8ca:	4798      	blx	r3
 801b8cc:	f107 0218 	add.w	r2, r7, #24
 801b8d0:	f107 0310 	add.w	r3, r7, #16
 801b8d4:	4611      	mov	r1, r2
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	f7ff f812 	bl	801a900 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801b8dc:	f107 0318 	add.w	r3, r7, #24
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	f7f0 f8fa 	bl	800bada <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801b8e6:	f107 0310 	add.w	r3, r7, #16
 801b8ea:	4618      	mov	r0, r3
 801b8ec:	f7fe fdeb 	bl	801a4c6 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801b8f0:	4603      	mov	r3, r0
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d037      	beq.n	801b966 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801b8f6:	68fb      	ldr	r3, [r7, #12]
 801b8f8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b8fc:	f107 0320 	add.w	r3, r7, #32
 801b900:	4978      	ldr	r1, [pc, #480]	; (801bae4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801b902:	4618      	mov	r0, r3
 801b904:	f7ef fd31 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b908:	f107 0320 	add.w	r3, r7, #32
 801b90c:	4619      	mov	r1, r3
 801b90e:	4620      	mov	r0, r4
 801b910:	f7ef fd97 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801b914:	f107 0320 	add.w	r3, r7, #32
 801b918:	4618      	mov	r0, r3
 801b91a:	f7f0 f8de 	bl	800bada <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801b91e:	68fb      	ldr	r3, [r7, #12]
 801b920:	332c      	adds	r3, #44	; 0x2c
 801b922:	6879      	ldr	r1, [r7, #4]
 801b924:	4618      	mov	r0, r3
 801b926:	f7f0 f955 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	332c      	adds	r3, #44	; 0x2c
 801b92e:	496e      	ldr	r1, [pc, #440]	; (801bae8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801b930:	4618      	mov	r0, r3
 801b932:	f7f0 f961 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801b936:	68fb      	ldr	r3, [r7, #12]
 801b938:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b93c:	683b      	ldr	r3, [r7, #0]
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	335c      	adds	r3, #92	; 0x5c
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b948:	6839      	ldr	r1, [r7, #0]
 801b94a:	4610      	mov	r0, r2
 801b94c:	4798      	blx	r3
 801b94e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b952:	4619      	mov	r1, r3
 801b954:	4620      	mov	r0, r4
 801b956:	f7f0 f93d 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b95a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b95e:	4618      	mov	r0, r3
 801b960:	f7f0 f8bb 	bl	800bada <_ZN12SimpleStringD1Ev>
 801b964:	e059      	b.n	801ba1a <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801b966:	68fb      	ldr	r3, [r7, #12]
 801b968:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b96c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b970:	495e      	ldr	r1, [pc, #376]	; (801baec <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801b972:	4618      	mov	r0, r3
 801b974:	f7ef fcf9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801b978:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b97c:	4619      	mov	r1, r3
 801b97e:	4620      	mov	r0, r4
 801b980:	f7ef fd5f 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801b984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b988:	4618      	mov	r0, r3
 801b98a:	f7f0 f8a6 	bl	800bada <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801b98e:	68fb      	ldr	r3, [r7, #12]
 801b990:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b994:	683b      	ldr	r3, [r7, #0]
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	3360      	adds	r3, #96	; 0x60
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b9a0:	6839      	ldr	r1, [r7, #0]
 801b9a2:	4610      	mov	r0, r2
 801b9a4:	4798      	blx	r3
 801b9a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b9aa:	4619      	mov	r1, r3
 801b9ac:	4620      	mov	r0, r4
 801b9ae:	f7f0 f911 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b9b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b9b6:	4618      	mov	r0, r3
 801b9b8:	f7f0 f88f 	bl	800bada <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	332c      	adds	r3, #44	; 0x2c
 801b9c0:	494b      	ldr	r1, [pc, #300]	; (801baf0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801b9c2:	4618      	mov	r0, r3
 801b9c4:	f7f0 f918 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b9ce:	683b      	ldr	r3, [r7, #0]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	335c      	adds	r3, #92	; 0x5c
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801b9da:	6839      	ldr	r1, [r7, #0]
 801b9dc:	4610      	mov	r0, r2
 801b9de:	4798      	blx	r3
 801b9e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b9e4:	4619      	mov	r1, r3
 801b9e6:	4620      	mov	r0, r4
 801b9e8:	f7f0 f8f4 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801b9ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	f7f0 f872 	bl	800bada <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	332c      	adds	r3, #44	; 0x2c
 801b9fa:	493e      	ldr	r1, [pc, #248]	; (801baf4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	f7f0 f8fb 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	332c      	adds	r3, #44	; 0x2c
 801ba06:	6879      	ldr	r1, [r7, #4]
 801ba08:	4618      	mov	r0, r3
 801ba0a:	f7f0 f8e3 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	332c      	adds	r3, #44	; 0x2c
 801ba12:	4939      	ldr	r1, [pc, #228]	; (801baf8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801ba14:	4618      	mov	r0, r3
 801ba16:	f7f0 f8ef 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	332c      	adds	r3, #44	; 0x2c
 801ba1e:	4937      	ldr	r1, [pc, #220]	; (801bafc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801ba20:	4618      	mov	r0, r3
 801ba22:	f7f0 f8e9 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801ba26:	68fb      	ldr	r3, [r7, #12]
 801ba28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ba2a:	6879      	ldr	r1, [r7, #4]
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	f7ff fc47 	bl	801b2c0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801ba32:	68fb      	ldr	r3, [r7, #12]
 801ba34:	332c      	adds	r3, #44	; 0x2c
 801ba36:	4932      	ldr	r1, [pc, #200]	; (801bb00 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801ba38:	4618      	mov	r0, r3
 801ba3a:	f7f0 f8dd 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	332c      	adds	r3, #44	; 0x2c
 801ba42:	6879      	ldr	r1, [r7, #4]
 801ba44:	4618      	mov	r0, r3
 801ba46:	f7f0 f8c5 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ba4a:	68fb      	ldr	r3, [r7, #12]
 801ba4c:	332c      	adds	r3, #44	; 0x2c
 801ba4e:	492b      	ldr	r1, [pc, #172]	; (801bafc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801ba50:	4618      	mov	r0, r3
 801ba52:	f7f0 f8d1 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	332c      	adds	r3, #44	; 0x2c
 801ba5a:	492a      	ldr	r1, [pc, #168]	; (801bb04 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801ba5c:	4618      	mov	r0, r3
 801ba5e:	f7f0 f8cb 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ba68:	683b      	ldr	r3, [r7, #0]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	3360      	adds	r3, #96	; 0x60
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801ba74:	6839      	ldr	r1, [r7, #0]
 801ba76:	4610      	mov	r0, r2
 801ba78:	4798      	blx	r3
 801ba7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ba7e:	4619      	mov	r1, r3
 801ba80:	4620      	mov	r0, r4
 801ba82:	f7f0 f8a7 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801ba86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ba8a:	4618      	mov	r0, r3
 801ba8c:	f7f0 f825 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	332c      	adds	r3, #44	; 0x2c
 801ba94:	491c      	ldr	r1, [pc, #112]	; (801bb08 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801ba96:	4618      	mov	r0, r3
 801ba98:	f7f0 f8ae 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801ba9c:	68fb      	ldr	r3, [r7, #12]
 801ba9e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801baa2:	683b      	ldr	r3, [r7, #0]
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	335c      	adds	r3, #92	; 0x5c
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801baae:	6839      	ldr	r1, [r7, #0]
 801bab0:	4610      	mov	r0, r2
 801bab2:	4798      	blx	r3
 801bab4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bab8:	4619      	mov	r1, r3
 801baba:	4620      	mov	r0, r4
 801babc:	f7f0 f88a 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801bac0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bac4:	4618      	mov	r0, r3
 801bac6:	f7f0 f808 	bl	800bada <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801baca:	f107 0310 	add.w	r3, r7, #16
 801bace:	4618      	mov	r0, r3
 801bad0:	f7fe fc8c 	bl	801a3ec <_ZN21MockExpectedCallsListD1Ev>
}
 801bad4:	68fb      	ldr	r3, [r7, #12]
 801bad6:	4618      	mov	r0, r3
 801bad8:	375c      	adds	r7, #92	; 0x5c
 801bada:	46bd      	mov	sp, r7
 801badc:	bd90      	pop	{r4, r7, pc}
 801bade:	bf00      	nop
 801bae0:	080268e4 	.word	0x080268e4
 801bae4:	080248b8 	.word	0x080248b8
 801bae8:	08024824 	.word	0x08024824
 801baec:	080248f8 	.word	0x080248f8
 801baf0:	08024924 	.word	0x08024924
 801baf4:	08024860 	.word	0x08024860
 801baf8:	0802493c 	.word	0x0802493c
 801bafc:	080246f0 	.word	0x080246f0
 801bb00:	08024940 	.word	0x08024940
 801bb04:	08024684 	.word	0x08024684
 801bb08:	080248b0 	.word	0x080248b0

0801bb0c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801bb0c:	b590      	push	{r4, r7, lr}
 801bb0e:	b08b      	sub	sp, #44	; 0x2c
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	60f8      	str	r0, [r7, #12]
 801bb14:	60b9      	str	r1, [r7, #8]
 801bb16:	607a      	str	r2, [r7, #4]
 801bb18:	603b      	str	r3, [r7, #0]
 801bb1a:	68fb      	ldr	r3, [r7, #12]
 801bb1c:	68b9      	ldr	r1, [r7, #8]
 801bb1e:	4618      	mov	r0, r3
 801bb20:	f7ff fb46 	bl	801b1b0 <_ZN11MockFailureC1EP10UtestShell>
 801bb24:	4a30      	ldr	r2, [pc, #192]	; (801bbe8 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801bb2a:	f107 0310 	add.w	r3, r7, #16
 801bb2e:	4618      	mov	r0, r3
 801bb30:	f7fe fc48 	bl	801a3c4 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801bb34:	f107 0310 	add.w	r3, r7, #16
 801bb38:	683a      	ldr	r2, [r7, #0]
 801bb3a:	6879      	ldr	r1, [r7, #4]
 801bb3c:	4618      	mov	r0, r3
 801bb3e:	f7fe fde7 	bl	801a710 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801bb42:	68fb      	ldr	r3, [r7, #12]
 801bb44:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bb48:	f107 0318 	add.w	r3, r7, #24
 801bb4c:	4927      	ldr	r1, [pc, #156]	; (801bbec <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801bb4e:	4618      	mov	r0, r3
 801bb50:	f7ef fc0b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801bb54:	f107 0318 	add.w	r3, r7, #24
 801bb58:	4619      	mov	r1, r3
 801bb5a:	4620      	mov	r0, r4
 801bb5c:	f7ef fc71 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801bb60:	f107 0318 	add.w	r3, r7, #24
 801bb64:	4618      	mov	r0, r3
 801bb66:	f7ef ffb8 	bl	800bada <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	332c      	adds	r3, #44	; 0x2c
 801bb6e:	6879      	ldr	r1, [r7, #4]
 801bb70:	4618      	mov	r0, r3
 801bb72:	f7f0 f82f 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	332c      	adds	r3, #44	; 0x2c
 801bb7a:	491d      	ldr	r1, [pc, #116]	; (801bbf0 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801bb7c:	4618      	mov	r0, r3
 801bb7e:	f7f0 f83b 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	683a      	ldr	r2, [r7, #0]
 801bb86:	6879      	ldr	r1, [r7, #4]
 801bb88:	4618      	mov	r0, r3
 801bb8a:	f7ff fb99 	bl	801b2c0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801bb8e:	68fb      	ldr	r3, [r7, #12]
 801bb90:	332c      	adds	r3, #44	; 0x2c
 801bb92:	4918      	ldr	r1, [pc, #96]	; (801bbf4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801bb94:	4618      	mov	r0, r3
 801bb96:	f7f0 f82f 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	332c      	adds	r3, #44	; 0x2c
 801bb9e:	4916      	ldr	r1, [pc, #88]	; (801bbf8 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801bba0:	4618      	mov	r0, r3
 801bba2:	f7f0 f829 	bl	800bbf8 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bbac:	f107 0320 	add.w	r3, r7, #32
 801bbb0:	f107 0210 	add.w	r2, r7, #16
 801bbb4:	4611      	mov	r1, r2
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	f7ff f9bc 	bl	801af34 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801bbbc:	f107 0320 	add.w	r3, r7, #32
 801bbc0:	4619      	mov	r1, r3
 801bbc2:	4620      	mov	r0, r4
 801bbc4:	f7f0 f806 	bl	800bbd4 <_ZN12SimpleStringpLERKS_>
 801bbc8:	f107 0320 	add.w	r3, r7, #32
 801bbcc:	4618      	mov	r0, r3
 801bbce:	f7ef ff84 	bl	800bada <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801bbd2:	f107 0310 	add.w	r3, r7, #16
 801bbd6:	4618      	mov	r0, r3
 801bbd8:	f7fe fc08 	bl	801a3ec <_ZN21MockExpectedCallsListD1Ev>
}
 801bbdc:	68fb      	ldr	r3, [r7, #12]
 801bbde:	4618      	mov	r0, r3
 801bbe0:	372c      	adds	r7, #44	; 0x2c
 801bbe2:	46bd      	mov	sp, r7
 801bbe4:	bd90      	pop	{r4, r7, pc}
 801bbe6:	bf00      	nop
 801bbe8:	080268b8 	.word	0x080268b8
 801bbec:	0802497c 	.word	0x0802497c
 801bbf0:	080249ac 	.word	0x080249ac
 801bbf4:	080249c0 	.word	0x080249c0
 801bbf8:	08024684 	.word	0x08024684

0801bbfc <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801bbfc:	b590      	push	{r4, r7, lr}
 801bbfe:	b087      	sub	sp, #28
 801bc00:	af00      	add	r7, sp, #0
 801bc02:	60f8      	str	r0, [r7, #12]
 801bc04:	60b9      	str	r1, [r7, #8]
 801bc06:	607a      	str	r2, [r7, #4]
 801bc08:	68fb      	ldr	r3, [r7, #12]
 801bc0a:	68b9      	ldr	r1, [r7, #8]
 801bc0c:	4618      	mov	r0, r3
 801bc0e:	f7ff facf 	bl	801b1b0 <_ZN11MockFailureC1EP10UtestShell>
 801bc12:	4a10      	ldr	r2, [pc, #64]	; (801bc54 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bc1e:	6878      	ldr	r0, [r7, #4]
 801bc20:	f7ef ff2e 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801bc24:	4602      	mov	r2, r0
 801bc26:	f107 0310 	add.w	r3, r7, #16
 801bc2a:	490b      	ldr	r1, [pc, #44]	; (801bc58 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801bc2c:	4618      	mov	r0, r3
 801bc2e:	f7f0 fc5b 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 801bc32:	f107 0310 	add.w	r3, r7, #16
 801bc36:	4619      	mov	r1, r3
 801bc38:	4620      	mov	r0, r4
 801bc3a:	f7ef fc02 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801bc3e:	f107 0310 	add.w	r3, r7, #16
 801bc42:	4618      	mov	r0, r3
 801bc44:	f7ef ff49 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 801bc48:	68fb      	ldr	r3, [r7, #12]
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	371c      	adds	r7, #28
 801bc4e:	46bd      	mov	sp, r7
 801bc50:	bd90      	pop	{r4, r7, pc}
 801bc52:	bf00      	nop
 801bc54:	0802688c 	.word	0x0802688c
 801bc58:	080249ec 	.word	0x080249ec

0801bc5c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801bc5c:	b590      	push	{r4, r7, lr}
 801bc5e:	b087      	sub	sp, #28
 801bc60:	af00      	add	r7, sp, #0
 801bc62:	60f8      	str	r0, [r7, #12]
 801bc64:	60b9      	str	r1, [r7, #8]
 801bc66:	607a      	str	r2, [r7, #4]
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	68b9      	ldr	r1, [r7, #8]
 801bc6c:	4618      	mov	r0, r3
 801bc6e:	f7ff fa9f 	bl	801b1b0 <_ZN11MockFailureC1EP10UtestShell>
 801bc72:	4a10      	ldr	r2, [pc, #64]	; (801bcb4 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bc7e:	6878      	ldr	r0, [r7, #4]
 801bc80:	f7ef fefe 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801bc84:	4602      	mov	r2, r0
 801bc86:	f107 0310 	add.w	r3, r7, #16
 801bc8a:	490b      	ldr	r1, [pc, #44]	; (801bcb8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801bc8c:	4618      	mov	r0, r3
 801bc8e:	f7f0 fc2b 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 801bc92:	f107 0310 	add.w	r3, r7, #16
 801bc96:	4619      	mov	r1, r3
 801bc98:	4620      	mov	r0, r4
 801bc9a:	f7ef fbd2 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801bc9e:	f107 0310 	add.w	r3, r7, #16
 801bca2:	4618      	mov	r0, r3
 801bca4:	f7ef ff19 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 801bca8:	68fb      	ldr	r3, [r7, #12]
 801bcaa:	4618      	mov	r0, r3
 801bcac:	371c      	adds	r7, #28
 801bcae:	46bd      	mov	sp, r7
 801bcb0:	bd90      	pop	{r4, r7, pc}
 801bcb2:	bf00      	nop
 801bcb4:	08026860 	.word	0x08026860
 801bcb8:	08024a44 	.word	0x08024a44

0801bcbc <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801bcbc:	b590      	push	{r4, r7, lr}
 801bcbe:	b087      	sub	sp, #28
 801bcc0:	af00      	add	r7, sp, #0
 801bcc2:	60f8      	str	r0, [r7, #12]
 801bcc4:	60b9      	str	r1, [r7, #8]
 801bcc6:	607a      	str	r2, [r7, #4]
 801bcc8:	603b      	str	r3, [r7, #0]
 801bcca:	68fb      	ldr	r3, [r7, #12]
 801bccc:	68b9      	ldr	r1, [r7, #8]
 801bcce:	4618      	mov	r0, r3
 801bcd0:	f7ff fa6e 	bl	801b1b0 <_ZN11MockFailureC1EP10UtestShell>
 801bcd4:	4a12      	ldr	r2, [pc, #72]	; (801bd20 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801bcd6:	68fb      	ldr	r3, [r7, #12]
 801bcd8:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801bcda:	68fb      	ldr	r3, [r7, #12]
 801bcdc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801bce0:	6878      	ldr	r0, [r7, #4]
 801bce2:	f7ef fecd 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801bce6:	4602      	mov	r2, r0
 801bce8:	f107 0010 	add.w	r0, r7, #16
 801bcec:	683b      	ldr	r3, [r7, #0]
 801bcee:	490d      	ldr	r1, [pc, #52]	; (801bd24 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801bcf0:	f7f0 fbfa 	bl	800c4e8 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801bcf4:	f107 0310 	add.w	r3, r7, #16
 801bcf8:	4619      	mov	r1, r3
 801bcfa:	4620      	mov	r0, r4
 801bcfc:	f7ef fba1 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801bd00:	f107 0310 	add.w	r3, r7, #16
 801bd04:	4618      	mov	r0, r3
 801bd06:	f7ef fee8 	bl	800bada <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bd0e:	6879      	ldr	r1, [r7, #4]
 801bd10:	4618      	mov	r0, r3
 801bd12:	f7ff fad5 	bl	801b2c0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	4618      	mov	r0, r3
 801bd1a:	371c      	adds	r7, #28
 801bd1c:	46bd      	mov	sp, r7
 801bd1e:	bd90      	pop	{r4, r7, pc}
 801bd20:	08026834 	.word	0x08026834
 801bd24:	08024a94 	.word	0x08024a94

0801bd28 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801bd28:	b590      	push	{r4, r7, lr}
 801bd2a:	b087      	sub	sp, #28
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	60f8      	str	r0, [r7, #12]
 801bd30:	60b9      	str	r1, [r7, #8]
 801bd32:	607a      	str	r2, [r7, #4]
 801bd34:	603b      	str	r3, [r7, #0]
 801bd36:	68fb      	ldr	r3, [r7, #12]
 801bd38:	68b9      	ldr	r1, [r7, #8]
 801bd3a:	4618      	mov	r0, r3
 801bd3c:	f7ff fa38 	bl	801b1b0 <_ZN11MockFailureC1EP10UtestShell>
 801bd40:	4a12      	ldr	r2, [pc, #72]	; (801bd8c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801bd42:	68fb      	ldr	r3, [r7, #12]
 801bd44:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bd4c:	6878      	ldr	r0, [r7, #4]
 801bd4e:	f7ef fe97 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801bd52:	4602      	mov	r2, r0
 801bd54:	f107 0310 	add.w	r3, r7, #16
 801bd58:	490d      	ldr	r1, [pc, #52]	; (801bd90 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	f7f0 fbc4 	bl	800c4e8 <_Z16StringFromFormatPKcz>
 801bd60:	f107 0310 	add.w	r3, r7, #16
 801bd64:	4619      	mov	r1, r3
 801bd66:	4620      	mov	r0, r4
 801bd68:	f7ef fb6b 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801bd6c:	f107 0310 	add.w	r3, r7, #16
 801bd70:	4618      	mov	r0, r3
 801bd72:	f7ef feb2 	bl	800bada <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801bd76:	68fb      	ldr	r3, [r7, #12]
 801bd78:	683a      	ldr	r2, [r7, #0]
 801bd7a:	6879      	ldr	r1, [r7, #4]
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	f7ff fa9f 	bl	801b2c0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	4618      	mov	r0, r3
 801bd86:	371c      	adds	r7, #28
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bd90      	pop	{r4, r7, pc}
 801bd8c:	08026808 	.word	0x08026808
 801bd90:	08024af8 	.word	0x08024af8

0801bd94 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801bd94:	b480      	push	{r7}
 801bd96:	b083      	sub	sp, #12
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801bd9c:	4a04      	ldr	r2, [pc, #16]	; (801bdb0 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	6013      	str	r3, [r2, #0]
}
 801bda2:	bf00      	nop
 801bda4:	370c      	adds	r7, #12
 801bda6:	46bd      	mov	sp, r7
 801bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdac:	4770      	bx	lr
 801bdae:	bf00      	nop
 801bdb0:	20000da0 	.word	0x20000da0

0801bdb4 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b082      	sub	sp, #8
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
 801bdbc:	6039      	str	r1, [r7, #0]
 801bdbe:	4a10      	ldr	r2, [pc, #64]	; (801be00 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	601a      	str	r2, [r3, #0]
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	3304      	adds	r3, #4
 801bdc8:	6839      	ldr	r1, [r7, #0]
 801bdca:	4618      	mov	r0, r3
 801bdcc:	f7ef fb21 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	330c      	adds	r3, #12
 801bdd4:	490b      	ldr	r1, [pc, #44]	; (801be04 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801bdd6:	4618      	mov	r0, r3
 801bdd8:	f7ef fac7 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	2200      	movs	r2, #0
 801bde0:	629a      	str	r2, [r3, #40]	; 0x28
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	2200      	movs	r2, #0
 801bde6:	62da      	str	r2, [r3, #44]	; 0x2c
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	2200      	movs	r2, #0
 801bdec:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	2200      	movs	r2, #0
 801bdf2:	619a      	str	r2, [r3, #24]
}
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	3708      	adds	r7, #8
 801bdfa:	46bd      	mov	sp, r7
 801bdfc:	bd80      	pop	{r7, pc}
 801bdfe:	bf00      	nop
 801be00:	08027090 	.word	0x08027090
 801be04:	08024b48 	.word	0x08024b48

0801be08 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801be08:	b580      	push	{r7, lr}
 801be0a:	b082      	sub	sp, #8
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
 801be10:	4a08      	ldr	r2, [pc, #32]	; (801be34 <_ZN14MockNamedValueD1Ev+0x2c>)
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	601a      	str	r2, [r3, #0]
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	330c      	adds	r3, #12
 801be1a:	4618      	mov	r0, r3
 801be1c:	f7ef fe5d 	bl	800bada <_ZN12SimpleStringD1Ev>
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	3304      	adds	r3, #4
 801be24:	4618      	mov	r0, r3
 801be26:	f7ef fe58 	bl	800bada <_ZN12SimpleStringD1Ev>
{
}
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	4618      	mov	r0, r3
 801be2e:	3708      	adds	r7, #8
 801be30:	46bd      	mov	sp, r7
 801be32:	bd80      	pop	{r7, pc}
 801be34:	08027090 	.word	0x08027090

0801be38 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801be38:	b580      	push	{r7, lr}
 801be3a:	b082      	sub	sp, #8
 801be3c:	af00      	add	r7, sp, #0
 801be3e:	6078      	str	r0, [r7, #4]
}
 801be40:	6878      	ldr	r0, [r7, #4]
 801be42:	f7ff ffe1 	bl	801be08 <_ZN14MockNamedValueD1Ev>
 801be46:	2138      	movs	r1, #56	; 0x38
 801be48:	6878      	ldr	r0, [r7, #4]
 801be4a:	f7ec fedf 	bl	8008c0c <_ZdlPvj>
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	4618      	mov	r0, r3
 801be52:	3708      	adds	r7, #8
 801be54:	46bd      	mov	sp, r7
 801be56:	bd80      	pop	{r7, pc}

0801be58 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801be58:	b590      	push	{r4, r7, lr}
 801be5a:	b085      	sub	sp, #20
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	6078      	str	r0, [r7, #4]
 801be60:	460b      	mov	r3, r1
 801be62:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	f103 040c 	add.w	r4, r3, #12
 801be6a:	f107 0308 	add.w	r3, r7, #8
 801be6e:	490b      	ldr	r1, [pc, #44]	; (801be9c <_ZN14MockNamedValue8setValueEb+0x44>)
 801be70:	4618      	mov	r0, r3
 801be72:	f7ef fa7a 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801be76:	f107 0308 	add.w	r3, r7, #8
 801be7a:	4619      	mov	r1, r3
 801be7c:	4620      	mov	r0, r4
 801be7e:	f7ef fae0 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801be82:	f107 0308 	add.w	r3, r7, #8
 801be86:	4618      	mov	r0, r3
 801be88:	f7ef fe27 	bl	800bada <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	78fa      	ldrb	r2, [r7, #3]
 801be90:	761a      	strb	r2, [r3, #24]
}
 801be92:	bf00      	nop
 801be94:	3714      	adds	r7, #20
 801be96:	46bd      	mov	sp, r7
 801be98:	bd90      	pop	{r4, r7, pc}
 801be9a:	bf00      	nop
 801be9c:	08024b4c 	.word	0x08024b4c

0801bea0 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801bea0:	b590      	push	{r4, r7, lr}
 801bea2:	b085      	sub	sp, #20
 801bea4:	af00      	add	r7, sp, #0
 801bea6:	6078      	str	r0, [r7, #4]
 801bea8:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	f103 040c 	add.w	r4, r3, #12
 801beb0:	f107 0308 	add.w	r3, r7, #8
 801beb4:	490a      	ldr	r1, [pc, #40]	; (801bee0 <_ZN14MockNamedValue8setValueEj+0x40>)
 801beb6:	4618      	mov	r0, r3
 801beb8:	f7ef fa57 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801bebc:	f107 0308 	add.w	r3, r7, #8
 801bec0:	4619      	mov	r1, r3
 801bec2:	4620      	mov	r0, r4
 801bec4:	f7ef fabd 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801bec8:	f107 0308 	add.w	r3, r7, #8
 801becc:	4618      	mov	r0, r3
 801bece:	f7ef fe04 	bl	800bada <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	683a      	ldr	r2, [r7, #0]
 801bed6:	619a      	str	r2, [r3, #24]
}
 801bed8:	bf00      	nop
 801beda:	3714      	adds	r7, #20
 801bedc:	46bd      	mov	sp, r7
 801bede:	bd90      	pop	{r4, r7, pc}
 801bee0:	08024b54 	.word	0x08024b54

0801bee4 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801bee4:	b590      	push	{r4, r7, lr}
 801bee6:	b085      	sub	sp, #20
 801bee8:	af00      	add	r7, sp, #0
 801beea:	6078      	str	r0, [r7, #4]
 801beec:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	f103 040c 	add.w	r4, r3, #12
 801bef4:	f107 0308 	add.w	r3, r7, #8
 801bef8:	490a      	ldr	r1, [pc, #40]	; (801bf24 <_ZN14MockNamedValue8setValueEi+0x40>)
 801befa:	4618      	mov	r0, r3
 801befc:	f7ef fa35 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801bf00:	f107 0308 	add.w	r3, r7, #8
 801bf04:	4619      	mov	r1, r3
 801bf06:	4620      	mov	r0, r4
 801bf08:	f7ef fa9b 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801bf0c:	f107 0308 	add.w	r3, r7, #8
 801bf10:	4618      	mov	r0, r3
 801bf12:	f7ef fde2 	bl	800bada <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	683a      	ldr	r2, [r7, #0]
 801bf1a:	619a      	str	r2, [r3, #24]
}
 801bf1c:	bf00      	nop
 801bf1e:	3714      	adds	r7, #20
 801bf20:	46bd      	mov	sp, r7
 801bf22:	bd90      	pop	{r4, r7, pc}
 801bf24:	08024b48 	.word	0x08024b48

0801bf28 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801bf28:	b590      	push	{r4, r7, lr}
 801bf2a:	b085      	sub	sp, #20
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	6078      	str	r0, [r7, #4]
 801bf30:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	f103 040c 	add.w	r4, r3, #12
 801bf38:	f107 0308 	add.w	r3, r7, #8
 801bf3c:	490a      	ldr	r1, [pc, #40]	; (801bf68 <_ZN14MockNamedValue8setValueEl+0x40>)
 801bf3e:	4618      	mov	r0, r3
 801bf40:	f7ef fa13 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801bf44:	f107 0308 	add.w	r3, r7, #8
 801bf48:	4619      	mov	r1, r3
 801bf4a:	4620      	mov	r0, r4
 801bf4c:	f7ef fa79 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801bf50:	f107 0308 	add.w	r3, r7, #8
 801bf54:	4618      	mov	r0, r3
 801bf56:	f7ef fdc0 	bl	800bada <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	683a      	ldr	r2, [r7, #0]
 801bf5e:	619a      	str	r2, [r3, #24]
}
 801bf60:	bf00      	nop
 801bf62:	3714      	adds	r7, #20
 801bf64:	46bd      	mov	sp, r7
 801bf66:	bd90      	pop	{r4, r7, pc}
 801bf68:	08024b64 	.word	0x08024b64

0801bf6c <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801bf6c:	b590      	push	{r4, r7, lr}
 801bf6e:	b085      	sub	sp, #20
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	6078      	str	r0, [r7, #4]
 801bf74:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	f103 040c 	add.w	r4, r3, #12
 801bf7c:	f107 0308 	add.w	r3, r7, #8
 801bf80:	490a      	ldr	r1, [pc, #40]	; (801bfac <_ZN14MockNamedValue8setValueEm+0x40>)
 801bf82:	4618      	mov	r0, r3
 801bf84:	f7ef f9f1 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801bf88:	f107 0308 	add.w	r3, r7, #8
 801bf8c:	4619      	mov	r1, r3
 801bf8e:	4620      	mov	r0, r4
 801bf90:	f7ef fa57 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801bf94:	f107 0308 	add.w	r3, r7, #8
 801bf98:	4618      	mov	r0, r3
 801bf9a:	f7ef fd9e 	bl	800bada <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	683a      	ldr	r2, [r7, #0]
 801bfa2:	619a      	str	r2, [r3, #24]
}
 801bfa4:	bf00      	nop
 801bfa6:	3714      	adds	r7, #20
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	bd90      	pop	{r4, r7, pc}
 801bfac:	08024b70 	.word	0x08024b70

0801bfb0 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801bfb0:	b5b0      	push	{r4, r5, r7, lr}
 801bfb2:	b086      	sub	sp, #24
 801bfb4:	af02      	add	r7, sp, #8
 801bfb6:	60f8      	str	r0, [r7, #12]
 801bfb8:	1d3b      	adds	r3, r7, #4
 801bfba:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801bfbe:	f7f6 fdb7 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801bfc2:	4604      	mov	r4, r0
 801bfc4:	6823      	ldr	r3, [r4, #0]
 801bfc6:	3368      	adds	r3, #104	; 0x68
 801bfc8:	681d      	ldr	r5, [r3, #0]
 801bfca:	f7f6 fdc1 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bfce:	4603      	mov	r3, r0
 801bfd0:	9300      	str	r3, [sp, #0]
 801bfd2:	2367      	movs	r3, #103	; 0x67
 801bfd4:	4a03      	ldr	r2, [pc, #12]	; (801bfe4 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801bfd6:	4904      	ldr	r1, [pc, #16]	; (801bfe8 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801bfd8:	4620      	mov	r0, r4
 801bfda:	47a8      	blx	r5
}
 801bfdc:	bf00      	nop
 801bfde:	3710      	adds	r7, #16
 801bfe0:	46bd      	mov	sp, r7
 801bfe2:	bdb0      	pop	{r4, r5, r7, pc}
 801bfe4:	08024b84 	.word	0x08024b84
 801bfe8:	08024ba0 	.word	0x08024ba0

0801bfec <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801bfec:	b5b0      	push	{r4, r5, r7, lr}
 801bfee:	b086      	sub	sp, #24
 801bff0:	af02      	add	r7, sp, #8
 801bff2:	60f8      	str	r0, [r7, #12]
 801bff4:	1d3b      	adds	r3, r7, #4
 801bff6:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801bffa:	f7f6 fd99 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801bffe:	4604      	mov	r4, r0
 801c000:	6823      	ldr	r3, [r4, #0]
 801c002:	3368      	adds	r3, #104	; 0x68
 801c004:	681d      	ldr	r5, [r3, #0]
 801c006:	f7f6 fda3 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c00a:	4603      	mov	r3, r0
 801c00c:	9300      	str	r3, [sp, #0]
 801c00e:	236c      	movs	r3, #108	; 0x6c
 801c010:	4a03      	ldr	r2, [pc, #12]	; (801c020 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801c012:	4904      	ldr	r1, [pc, #16]	; (801c024 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801c014:	4620      	mov	r0, r4
 801c016:	47a8      	blx	r5
}
 801c018:	bf00      	nop
 801c01a:	3710      	adds	r7, #16
 801c01c:	46bd      	mov	sp, r7
 801c01e:	bdb0      	pop	{r4, r5, r7, pc}
 801c020:	08024b84 	.word	0x08024b84
 801c024:	08024bc0 	.word	0x08024bc0

0801c028 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801c028:	b580      	push	{r7, lr}
 801c02a:	b084      	sub	sp, #16
 801c02c:	af00      	add	r7, sp, #0
 801c02e:	60f8      	str	r0, [r7, #12]
 801c030:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	3328      	adds	r3, #40	; 0x28
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801c050 <_ZN14MockNamedValue8setValueEd+0x28>
 801c040:	ed97 0b00 	vldr	d0, [r7]
 801c044:	68f8      	ldr	r0, [r7, #12]
 801c046:	4798      	blx	r3
}
 801c048:	bf00      	nop
 801c04a:	3710      	adds	r7, #16
 801c04c:	46bd      	mov	sp, r7
 801c04e:	bd80      	pop	{r7, pc}
 801c050:	47ae147b 	.word	0x47ae147b
 801c054:	3f747ae1 	.word	0x3f747ae1

0801c058 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801c058:	b590      	push	{r4, r7, lr}
 801c05a:	b089      	sub	sp, #36	; 0x24
 801c05c:	af00      	add	r7, sp, #0
 801c05e:	6178      	str	r0, [r7, #20]
 801c060:	ed87 0b02 	vstr	d0, [r7, #8]
 801c064:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801c068:	697b      	ldr	r3, [r7, #20]
 801c06a:	f103 040c 	add.w	r4, r3, #12
 801c06e:	f107 0318 	add.w	r3, r7, #24
 801c072:	490e      	ldr	r1, [pc, #56]	; (801c0ac <_ZN14MockNamedValue8setValueEdd+0x54>)
 801c074:	4618      	mov	r0, r3
 801c076:	f7ef f978 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c07a:	f107 0318 	add.w	r3, r7, #24
 801c07e:	4619      	mov	r1, r3
 801c080:	4620      	mov	r0, r4
 801c082:	f7ef f9de 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801c086:	f107 0318 	add.w	r3, r7, #24
 801c08a:	4618      	mov	r0, r3
 801c08c:	f7ef fd25 	bl	800bada <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801c090:	6979      	ldr	r1, [r7, #20]
 801c092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c096:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801c09a:	6979      	ldr	r1, [r7, #20]
 801c09c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c0a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801c0a4:	bf00      	nop
 801c0a6:	3724      	adds	r7, #36	; 0x24
 801c0a8:	46bd      	mov	sp, r7
 801c0aa:	bd90      	pop	{r4, r7, pc}
 801c0ac:	08024bec 	.word	0x08024bec

0801c0b0 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801c0b0:	b590      	push	{r4, r7, lr}
 801c0b2:	b085      	sub	sp, #20
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	6078      	str	r0, [r7, #4]
 801c0b8:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	f103 040c 	add.w	r4, r3, #12
 801c0c0:	f107 0308 	add.w	r3, r7, #8
 801c0c4:	490a      	ldr	r1, [pc, #40]	; (801c0f0 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	f7ef f94f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c0cc:	f107 0308 	add.w	r3, r7, #8
 801c0d0:	4619      	mov	r1, r3
 801c0d2:	4620      	mov	r0, r4
 801c0d4:	f7ef f9b5 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801c0d8:	f107 0308 	add.w	r3, r7, #8
 801c0dc:	4618      	mov	r0, r3
 801c0de:	f7ef fcfc 	bl	800bada <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	683a      	ldr	r2, [r7, #0]
 801c0e6:	619a      	str	r2, [r3, #24]
}
 801c0e8:	bf00      	nop
 801c0ea:	3714      	adds	r7, #20
 801c0ec:	46bd      	mov	sp, r7
 801c0ee:	bd90      	pop	{r4, r7, pc}
 801c0f0:	08024bf4 	.word	0x08024bf4

0801c0f4 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801c0f4:	b590      	push	{r4, r7, lr}
 801c0f6:	b085      	sub	sp, #20
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	6078      	str	r0, [r7, #4]
 801c0fc:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	f103 040c 	add.w	r4, r3, #12
 801c104:	f107 0308 	add.w	r3, r7, #8
 801c108:	490a      	ldr	r1, [pc, #40]	; (801c134 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801c10a:	4618      	mov	r0, r3
 801c10c:	f7ef f92d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c110:	f107 0308 	add.w	r3, r7, #8
 801c114:	4619      	mov	r1, r3
 801c116:	4620      	mov	r0, r4
 801c118:	f7ef f993 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801c11c:	f107 0308 	add.w	r3, r7, #8
 801c120:	4618      	mov	r0, r3
 801c122:	f7ef fcda 	bl	800bada <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	683a      	ldr	r2, [r7, #0]
 801c12a:	619a      	str	r2, [r3, #24]
}
 801c12c:	bf00      	nop
 801c12e:	3714      	adds	r7, #20
 801c130:	46bd      	mov	sp, r7
 801c132:	bd90      	pop	{r4, r7, pc}
 801c134:	08024bfc 	.word	0x08024bfc

0801c138 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801c138:	b590      	push	{r4, r7, lr}
 801c13a:	b085      	sub	sp, #20
 801c13c:	af00      	add	r7, sp, #0
 801c13e:	6078      	str	r0, [r7, #4]
 801c140:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	f103 040c 	add.w	r4, r3, #12
 801c148:	f107 0308 	add.w	r3, r7, #8
 801c14c:	490a      	ldr	r1, [pc, #40]	; (801c178 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801c14e:	4618      	mov	r0, r3
 801c150:	f7ef f90b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c154:	f107 0308 	add.w	r3, r7, #8
 801c158:	4619      	mov	r1, r3
 801c15a:	4620      	mov	r0, r4
 801c15c:	f7ef f971 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801c160:	f107 0308 	add.w	r3, r7, #8
 801c164:	4618      	mov	r0, r3
 801c166:	f7ef fcb8 	bl	800bada <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	683a      	ldr	r2, [r7, #0]
 801c16e:	619a      	str	r2, [r3, #24]
}
 801c170:	bf00      	nop
 801c172:	3714      	adds	r7, #20
 801c174:	46bd      	mov	sp, r7
 801c176:	bd90      	pop	{r4, r7, pc}
 801c178:	08024c08 	.word	0x08024c08

0801c17c <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801c17c:	b590      	push	{r4, r7, lr}
 801c17e:	b085      	sub	sp, #20
 801c180:	af00      	add	r7, sp, #0
 801c182:	6078      	str	r0, [r7, #4]
 801c184:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	f103 040c 	add.w	r4, r3, #12
 801c18c:	f107 0308 	add.w	r3, r7, #8
 801c190:	490a      	ldr	r1, [pc, #40]	; (801c1bc <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801c192:	4618      	mov	r0, r3
 801c194:	f7ef f8e9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c198:	f107 0308 	add.w	r3, r7, #8
 801c19c:	4619      	mov	r1, r3
 801c19e:	4620      	mov	r0, r4
 801c1a0:	f7ef f94f 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801c1a4:	f107 0308 	add.w	r3, r7, #8
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	f7ef fc96 	bl	800bada <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	683a      	ldr	r2, [r7, #0]
 801c1b2:	619a      	str	r2, [r3, #24]
}
 801c1b4:	bf00      	nop
 801c1b6:	3714      	adds	r7, #20
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	bd90      	pop	{r4, r7, pc}
 801c1bc:	08024c14 	.word	0x08024c14

0801c1c0 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801c1c0:	b590      	push	{r4, r7, lr}
 801c1c2:	b087      	sub	sp, #28
 801c1c4:	af00      	add	r7, sp, #0
 801c1c6:	60f8      	str	r0, [r7, #12]
 801c1c8:	60b9      	str	r1, [r7, #8]
 801c1ca:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	f103 040c 	add.w	r4, r3, #12
 801c1d2:	f107 0310 	add.w	r3, r7, #16
 801c1d6:	490c      	ldr	r1, [pc, #48]	; (801c208 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801c1d8:	4618      	mov	r0, r3
 801c1da:	f7ef f8c6 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c1de:	f107 0310 	add.w	r3, r7, #16
 801c1e2:	4619      	mov	r1, r3
 801c1e4:	4620      	mov	r0, r4
 801c1e6:	f7ef f92c 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801c1ea:	f107 0310 	add.w	r3, r7, #16
 801c1ee:	4618      	mov	r0, r3
 801c1f0:	f7ef fc73 	bl	800bada <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	68ba      	ldr	r2, [r7, #8]
 801c1f8:	619a      	str	r2, [r3, #24]
    size_ = size;
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	687a      	ldr	r2, [r7, #4]
 801c1fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 801c200:	bf00      	nop
 801c202:	371c      	adds	r7, #28
 801c204:	46bd      	mov	sp, r7
 801c206:	bd90      	pop	{r4, r7, pc}
 801c208:	08024c20 	.word	0x08024c20

0801c20c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b084      	sub	sp, #16
 801c210:	af00      	add	r7, sp, #0
 801c212:	60f8      	str	r0, [r7, #12]
 801c214:	60b9      	str	r1, [r7, #8]
 801c216:	607a      	str	r2, [r7, #4]
    type_ = type;
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	330c      	adds	r3, #12
 801c21c:	68b9      	ldr	r1, [r7, #8]
 801c21e:	4618      	mov	r0, r3
 801c220:	f7ef f90f 	bl	800b442 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	687a      	ldr	r2, [r7, #4]
 801c228:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801c22a:	4b11      	ldr	r3, [pc, #68]	; (801c270 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d019      	beq.n	801c266 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801c232:	4b0f      	ldr	r3, [pc, #60]	; (801c270 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c234:	681a      	ldr	r2, [r3, #0]
 801c236:	4b0e      	ldr	r3, [pc, #56]	; (801c270 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	3314      	adds	r3, #20
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	68b9      	ldr	r1, [r7, #8]
 801c242:	4610      	mov	r0, r2
 801c244:	4798      	blx	r3
 801c246:	4602      	mov	r2, r0
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801c24c:	4b08      	ldr	r3, [pc, #32]	; (801c270 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c24e:	681a      	ldr	r2, [r3, #0]
 801c250:	4b07      	ldr	r3, [pc, #28]	; (801c270 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	3318      	adds	r3, #24
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	68b9      	ldr	r1, [r7, #8]
 801c25c:	4610      	mov	r0, r2
 801c25e:	4798      	blx	r3
 801c260:	4602      	mov	r2, r0
 801c262:	68fb      	ldr	r3, [r7, #12]
 801c264:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801c266:	bf00      	nop
 801c268:	3710      	adds	r7, #16
 801c26a:	46bd      	mov	sp, r7
 801c26c:	bd80      	pop	{r7, pc}
 801c26e:	bf00      	nop
 801c270:	20000da0 	.word	0x20000da0

0801c274 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801c274:	b580      	push	{r7, lr}
 801c276:	b084      	sub	sp, #16
 801c278:	af00      	add	r7, sp, #0
 801c27a:	60f8      	str	r0, [r7, #12]
 801c27c:	60b9      	str	r1, [r7, #8]
 801c27e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	330c      	adds	r3, #12
 801c284:	68b9      	ldr	r1, [r7, #8]
 801c286:	4618      	mov	r0, r3
 801c288:	f7ef f8db 	bl	800b442 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	687a      	ldr	r2, [r7, #4]
 801c290:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801c292:	4b11      	ldr	r3, [pc, #68]	; (801c2d8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d019      	beq.n	801c2ce <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801c29a:	4b0f      	ldr	r3, [pc, #60]	; (801c2d8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c29c:	681a      	ldr	r2, [r3, #0]
 801c29e:	4b0e      	ldr	r3, [pc, #56]	; (801c2d8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	681b      	ldr	r3, [r3, #0]
 801c2a4:	3314      	adds	r3, #20
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	68b9      	ldr	r1, [r7, #8]
 801c2aa:	4610      	mov	r0, r2
 801c2ac:	4798      	blx	r3
 801c2ae:	4602      	mov	r2, r0
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801c2b4:	4b08      	ldr	r3, [pc, #32]	; (801c2d8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c2b6:	681a      	ldr	r2, [r3, #0]
 801c2b8:	4b07      	ldr	r3, [pc, #28]	; (801c2d8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	3318      	adds	r3, #24
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	68b9      	ldr	r1, [r7, #8]
 801c2c4:	4610      	mov	r0, r2
 801c2c6:	4798      	blx	r3
 801c2c8:	4602      	mov	r2, r0
 801c2ca:	68fb      	ldr	r3, [r7, #12]
 801c2cc:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801c2ce:	bf00      	nop
 801c2d0:	3710      	adds	r7, #16
 801c2d2:	46bd      	mov	sp, r7
 801c2d4:	bd80      	pop	{r7, pc}
 801c2d6:	bf00      	nop
 801c2d8:	20000da0 	.word	0x20000da0

0801c2dc <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801c2dc:	b480      	push	{r7}
 801c2de:	b083      	sub	sp, #12
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	6078      	str	r0, [r7, #4]
 801c2e4:	6039      	str	r1, [r7, #0]
    size_ = size;
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	683a      	ldr	r2, [r7, #0]
 801c2ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 801c2ec:	bf00      	nop
 801c2ee:	370c      	adds	r7, #12
 801c2f0:	46bd      	mov	sp, r7
 801c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2f6:	4770      	bx	lr

0801c2f8 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801c2f8:	b590      	push	{r4, r7, lr}
 801c2fa:	b085      	sub	sp, #20
 801c2fc:	af00      	add	r7, sp, #0
 801c2fe:	6078      	str	r0, [r7, #4]
 801c300:	6039      	str	r1, [r7, #0]
    name_ = name;
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	1d1c      	adds	r4, r3, #4
 801c306:	f107 0308 	add.w	r3, r7, #8
 801c30a:	6839      	ldr	r1, [r7, #0]
 801c30c:	4618      	mov	r0, r3
 801c30e:	f7ef f82c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c312:	f107 0308 	add.w	r3, r7, #8
 801c316:	4619      	mov	r1, r3
 801c318:	4620      	mov	r0, r4
 801c31a:	f7ef f892 	bl	800b442 <_ZN12SimpleStringaSERKS_>
 801c31e:	f107 0308 	add.w	r3, r7, #8
 801c322:	4618      	mov	r0, r3
 801c324:	f7ef fbd9 	bl	800bada <_ZN12SimpleStringD1Ev>
}
 801c328:	bf00      	nop
 801c32a:	3714      	adds	r7, #20
 801c32c:	46bd      	mov	sp, r7
 801c32e:	bd90      	pop	{r4, r7, pc}

0801c330 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801c330:	b580      	push	{r7, lr}
 801c332:	b082      	sub	sp, #8
 801c334:	af00      	add	r7, sp, #0
 801c336:	6078      	str	r0, [r7, #4]
 801c338:	6039      	str	r1, [r7, #0]
    return name_;
 801c33a:	683b      	ldr	r3, [r7, #0]
 801c33c:	3304      	adds	r3, #4
 801c33e:	4619      	mov	r1, r3
 801c340:	6878      	ldr	r0, [r7, #4]
 801c342:	f7ef f866 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
}
 801c346:	6878      	ldr	r0, [r7, #4]
 801c348:	3708      	adds	r7, #8
 801c34a:	46bd      	mov	sp, r7
 801c34c:	bd80      	pop	{r7, pc}

0801c34e <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801c34e:	b580      	push	{r7, lr}
 801c350:	b082      	sub	sp, #8
 801c352:	af00      	add	r7, sp, #0
 801c354:	6078      	str	r0, [r7, #4]
 801c356:	6039      	str	r1, [r7, #0]
    return type_;
 801c358:	683b      	ldr	r3, [r7, #0]
 801c35a:	330c      	adds	r3, #12
 801c35c:	4619      	mov	r1, r3
 801c35e:	6878      	ldr	r0, [r7, #4]
 801c360:	f7ef f857 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
}
 801c364:	6878      	ldr	r0, [r7, #4]
 801c366:	3708      	adds	r7, #8
 801c368:	46bd      	mov	sp, r7
 801c36a:	bd80      	pop	{r7, pc}

0801c36c <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801c36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c36e:	b087      	sub	sp, #28
 801c370:	af04      	add	r7, sp, #16
 801c372:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801c374:	f7f6 fbdc 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c378:	4604      	mov	r4, r0
 801c37a:	6823      	ldr	r3, [r4, #0]
 801c37c:	3324      	adds	r3, #36	; 0x24
 801c37e:	681d      	ldr	r5, [r3, #0]
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	330c      	adds	r3, #12
 801c384:	4618      	mov	r0, r3
 801c386:	f7ef fb7b 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c38a:	4606      	mov	r6, r0
 801c38c:	f7f6 fbe0 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c390:	4603      	mov	r3, r0
 801c392:	9302      	str	r3, [sp, #8]
 801c394:	23c8      	movs	r3, #200	; 0xc8
 801c396:	9301      	str	r3, [sp, #4]
 801c398:	4b06      	ldr	r3, [pc, #24]	; (801c3b4 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801c39a:	9300      	str	r3, [sp, #0]
 801c39c:	2300      	movs	r3, #0
 801c39e:	4632      	mov	r2, r6
 801c3a0:	4905      	ldr	r1, [pc, #20]	; (801c3b8 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801c3a2:	4620      	mov	r0, r4
 801c3a4:	47a8      	blx	r5
    return value_.boolValue_;
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	7e1b      	ldrb	r3, [r3, #24]
}
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	370c      	adds	r7, #12
 801c3ae:	46bd      	mov	sp, r7
 801c3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3b2:	bf00      	nop
 801c3b4:	08024b84 	.word	0x08024b84
 801c3b8:	08024b4c 	.word	0x08024b4c

0801c3bc <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801c3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3be:	b089      	sub	sp, #36	; 0x24
 801c3c0:	af04      	add	r7, sp, #16
 801c3c2:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	f103 040c 	add.w	r4, r3, #12
 801c3ca:	f107 0308 	add.w	r3, r7, #8
 801c3ce:	4920      	ldr	r1, [pc, #128]	; (801c450 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	f7ee ffca 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c3d6:	2501      	movs	r5, #1
 801c3d8:	f107 0308 	add.w	r3, r7, #8
 801c3dc:	4619      	mov	r1, r3
 801c3de:	4620      	mov	r0, r4
 801c3e0:	f7ef fb87 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801c3e4:	4603      	mov	r3, r0
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d005      	beq.n	801c3f6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	699b      	ldr	r3, [r3, #24]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	db01      	blt.n	801c3f6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801c3f2:	2401      	movs	r4, #1
 801c3f4:	e000      	b.n	801c3f8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801c3f6:	2400      	movs	r4, #0
 801c3f8:	2d00      	cmp	r5, #0
 801c3fa:	d004      	beq.n	801c406 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801c3fc:	f107 0308 	add.w	r3, r7, #8
 801c400:	4618      	mov	r0, r3
 801c402:	f7ef fb6a 	bl	800bada <_ZN12SimpleStringD1Ev>
 801c406:	2c00      	cmp	r4, #0
 801c408:	d002      	beq.n	801c410 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	699b      	ldr	r3, [r3, #24]
 801c40e:	e01a      	b.n	801c446 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801c410:	f7f6 fb8e 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c414:	4604      	mov	r4, r0
 801c416:	6823      	ldr	r3, [r4, #0]
 801c418:	3324      	adds	r3, #36	; 0x24
 801c41a:	681d      	ldr	r5, [r3, #0]
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	330c      	adds	r3, #12
 801c420:	4618      	mov	r0, r3
 801c422:	f7ef fb2d 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c426:	4606      	mov	r6, r0
 801c428:	f7f6 fb92 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c42c:	4603      	mov	r3, r0
 801c42e:	9302      	str	r3, [sp, #8]
 801c430:	23d2      	movs	r3, #210	; 0xd2
 801c432:	9301      	str	r3, [sp, #4]
 801c434:	4b07      	ldr	r3, [pc, #28]	; (801c454 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801c436:	9300      	str	r3, [sp, #0]
 801c438:	2300      	movs	r3, #0
 801c43a:	4632      	mov	r2, r6
 801c43c:	4906      	ldr	r1, [pc, #24]	; (801c458 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801c43e:	4620      	mov	r0, r4
 801c440:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	699b      	ldr	r3, [r3, #24]
    }
}
 801c446:	4618      	mov	r0, r3
 801c448:	3714      	adds	r7, #20
 801c44a:	46bd      	mov	sp, r7
 801c44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c44e:	bf00      	nop
 801c450:	08024b48 	.word	0x08024b48
 801c454:	08024b84 	.word	0x08024b84
 801c458:	08024b54 	.word	0x08024b54

0801c45c <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801c45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c45e:	b087      	sub	sp, #28
 801c460:	af04      	add	r7, sp, #16
 801c462:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801c464:	f7f6 fb64 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c468:	4604      	mov	r4, r0
 801c46a:	6823      	ldr	r3, [r4, #0]
 801c46c:	3324      	adds	r3, #36	; 0x24
 801c46e:	681d      	ldr	r5, [r3, #0]
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	330c      	adds	r3, #12
 801c474:	4618      	mov	r0, r3
 801c476:	f7ef fb03 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c47a:	4606      	mov	r6, r0
 801c47c:	f7f6 fb68 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c480:	4603      	mov	r3, r0
 801c482:	9302      	str	r3, [sp, #8]
 801c484:	23d9      	movs	r3, #217	; 0xd9
 801c486:	9301      	str	r3, [sp, #4]
 801c488:	4b06      	ldr	r3, [pc, #24]	; (801c4a4 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801c48a:	9300      	str	r3, [sp, #0]
 801c48c:	2300      	movs	r3, #0
 801c48e:	4632      	mov	r2, r6
 801c490:	4905      	ldr	r1, [pc, #20]	; (801c4a8 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801c492:	4620      	mov	r0, r4
 801c494:	47a8      	blx	r5
    return value_.intValue_;
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	699b      	ldr	r3, [r3, #24]
}
 801c49a:	4618      	mov	r0, r3
 801c49c:	370c      	adds	r7, #12
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c4a2:	bf00      	nop
 801c4a4:	08024b84 	.word	0x08024b84
 801c4a8:	08024b48 	.word	0x08024b48

0801c4ac <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801c4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4ae:	b08b      	sub	sp, #44	; 0x2c
 801c4b0:	af04      	add	r7, sp, #16
 801c4b2:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	f103 040c 	add.w	r4, r3, #12
 801c4ba:	f107 0308 	add.w	r3, r7, #8
 801c4be:	4928      	ldr	r1, [pc, #160]	; (801c560 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801c4c0:	4618      	mov	r0, r3
 801c4c2:	f7ee ff52 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c4c6:	f107 0308 	add.w	r3, r7, #8
 801c4ca:	4619      	mov	r1, r3
 801c4cc:	4620      	mov	r0, r4
 801c4ce:	f7ef fb10 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801c4d2:	4603      	mov	r3, r0
 801c4d4:	461c      	mov	r4, r3
 801c4d6:	f107 0308 	add.w	r3, r7, #8
 801c4da:	4618      	mov	r0, r3
 801c4dc:	f7ef fafd 	bl	800bada <_ZN12SimpleStringD1Ev>
 801c4e0:	2c00      	cmp	r4, #0
 801c4e2:	d002      	beq.n	801c4ea <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	699b      	ldr	r3, [r3, #24]
 801c4e8:	e035      	b.n	801c556 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	f103 040c 	add.w	r4, r3, #12
 801c4f0:	f107 0310 	add.w	r3, r7, #16
 801c4f4:	491b      	ldr	r1, [pc, #108]	; (801c564 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	f7ee ff37 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c4fc:	f107 0310 	add.w	r3, r7, #16
 801c500:	4619      	mov	r1, r3
 801c502:	4620      	mov	r0, r4
 801c504:	f7ef faf5 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801c508:	4603      	mov	r3, r0
 801c50a:	461c      	mov	r4, r3
 801c50c:	f107 0310 	add.w	r3, r7, #16
 801c510:	4618      	mov	r0, r3
 801c512:	f7ef fae2 	bl	800bada <_ZN12SimpleStringD1Ev>
 801c516:	2c00      	cmp	r4, #0
 801c518:	d002      	beq.n	801c520 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	699b      	ldr	r3, [r3, #24]
 801c51e:	e01a      	b.n	801c556 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801c520:	f7f6 fb06 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c524:	4604      	mov	r4, r0
 801c526:	6823      	ldr	r3, [r4, #0]
 801c528:	3324      	adds	r3, #36	; 0x24
 801c52a:	681d      	ldr	r5, [r3, #0]
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	330c      	adds	r3, #12
 801c530:	4618      	mov	r0, r3
 801c532:	f7ef faa5 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c536:	4606      	mov	r6, r0
 801c538:	f7f6 fb0a 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c53c:	4603      	mov	r3, r0
 801c53e:	9302      	str	r3, [sp, #8]
 801c540:	23e5      	movs	r3, #229	; 0xe5
 801c542:	9301      	str	r3, [sp, #4]
 801c544:	4b08      	ldr	r3, [pc, #32]	; (801c568 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801c546:	9300      	str	r3, [sp, #0]
 801c548:	2300      	movs	r3, #0
 801c54a:	4632      	mov	r2, r6
 801c54c:	4907      	ldr	r1, [pc, #28]	; (801c56c <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801c54e:	4620      	mov	r0, r4
 801c550:	47a8      	blx	r5
        return value_.longIntValue_;
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	699b      	ldr	r3, [r3, #24]
    }
}
 801c556:	4618      	mov	r0, r3
 801c558:	371c      	adds	r7, #28
 801c55a:	46bd      	mov	sp, r7
 801c55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c55e:	bf00      	nop
 801c560:	08024b48 	.word	0x08024b48
 801c564:	08024b54 	.word	0x08024b54
 801c568:	08024b84 	.word	0x08024b84
 801c56c:	08024b64 	.word	0x08024b64

0801c570 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801c570:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c572:	b08d      	sub	sp, #52	; 0x34
 801c574:	af04      	add	r7, sp, #16
 801c576:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	f103 040c 	add.w	r4, r3, #12
 801c57e:	f107 0308 	add.w	r3, r7, #8
 801c582:	4940      	ldr	r1, [pc, #256]	; (801c684 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801c584:	4618      	mov	r0, r3
 801c586:	f7ee fef0 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c58a:	f107 0308 	add.w	r3, r7, #8
 801c58e:	4619      	mov	r1, r3
 801c590:	4620      	mov	r0, r4
 801c592:	f7ef faae 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801c596:	4603      	mov	r3, r0
 801c598:	461c      	mov	r4, r3
 801c59a:	f107 0308 	add.w	r3, r7, #8
 801c59e:	4618      	mov	r0, r3
 801c5a0:	f7ef fa9b 	bl	800bada <_ZN12SimpleStringD1Ev>
 801c5a4:	2c00      	cmp	r4, #0
 801c5a6:	d002      	beq.n	801c5ae <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	699b      	ldr	r3, [r3, #24]
 801c5ac:	e066      	b.n	801c67c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	f103 040c 	add.w	r4, r3, #12
 801c5b4:	f107 0310 	add.w	r3, r7, #16
 801c5b8:	4933      	ldr	r1, [pc, #204]	; (801c688 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	f7ee fed5 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c5c0:	2501      	movs	r5, #1
 801c5c2:	f107 0310 	add.w	r3, r7, #16
 801c5c6:	4619      	mov	r1, r3
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	f7ef fa92 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801c5ce:	4603      	mov	r3, r0
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d005      	beq.n	801c5e0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	699b      	ldr	r3, [r3, #24]
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	db01      	blt.n	801c5e0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801c5dc:	2401      	movs	r4, #1
 801c5de:	e000      	b.n	801c5e2 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801c5e0:	2400      	movs	r4, #0
 801c5e2:	2d00      	cmp	r5, #0
 801c5e4:	d004      	beq.n	801c5f0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801c5e6:	f107 0310 	add.w	r3, r7, #16
 801c5ea:	4618      	mov	r0, r3
 801c5ec:	f7ef fa75 	bl	800bada <_ZN12SimpleStringD1Ev>
 801c5f0:	2c00      	cmp	r4, #0
 801c5f2:	d002      	beq.n	801c5fa <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	699b      	ldr	r3, [r3, #24]
 801c5f8:	e040      	b.n	801c67c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	f103 040c 	add.w	r4, r3, #12
 801c600:	f107 0318 	add.w	r3, r7, #24
 801c604:	4921      	ldr	r1, [pc, #132]	; (801c68c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801c606:	4618      	mov	r0, r3
 801c608:	f7ee feaf 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801c60c:	2501      	movs	r5, #1
 801c60e:	f107 0318 	add.w	r3, r7, #24
 801c612:	4619      	mov	r1, r3
 801c614:	4620      	mov	r0, r4
 801c616:	f7ef fa6c 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801c61a:	4603      	mov	r3, r0
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d005      	beq.n	801c62c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	699b      	ldr	r3, [r3, #24]
 801c624:	2b00      	cmp	r3, #0
 801c626:	db01      	blt.n	801c62c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801c628:	2401      	movs	r4, #1
 801c62a:	e000      	b.n	801c62e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801c62c:	2400      	movs	r4, #0
 801c62e:	2d00      	cmp	r5, #0
 801c630:	d004      	beq.n	801c63c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801c632:	f107 0318 	add.w	r3, r7, #24
 801c636:	4618      	mov	r0, r3
 801c638:	f7ef fa4f 	bl	800bada <_ZN12SimpleStringD1Ev>
 801c63c:	2c00      	cmp	r4, #0
 801c63e:	d002      	beq.n	801c646 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	699b      	ldr	r3, [r3, #24]
 801c644:	e01a      	b.n	801c67c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801c646:	f7f6 fa73 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c64a:	4604      	mov	r4, r0
 801c64c:	6823      	ldr	r3, [r4, #0]
 801c64e:	3324      	adds	r3, #36	; 0x24
 801c650:	681d      	ldr	r5, [r3, #0]
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	330c      	adds	r3, #12
 801c656:	4618      	mov	r0, r3
 801c658:	f7ef fa12 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c65c:	4606      	mov	r6, r0
 801c65e:	f7f6 fa77 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c662:	4603      	mov	r3, r0
 801c664:	9302      	str	r3, [sp, #8]
 801c666:	23f4      	movs	r3, #244	; 0xf4
 801c668:	9301      	str	r3, [sp, #4]
 801c66a:	4b09      	ldr	r3, [pc, #36]	; (801c690 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801c66c:	9300      	str	r3, [sp, #0]
 801c66e:	2300      	movs	r3, #0
 801c670:	4632      	mov	r2, r6
 801c672:	4908      	ldr	r1, [pc, #32]	; (801c694 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801c674:	4620      	mov	r0, r4
 801c676:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	699b      	ldr	r3, [r3, #24]
    }
}
 801c67c:	4618      	mov	r0, r3
 801c67e:	3724      	adds	r7, #36	; 0x24
 801c680:	46bd      	mov	sp, r7
 801c682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c684:	08024b54 	.word	0x08024b54
 801c688:	08024b48 	.word	0x08024b48
 801c68c:	08024b64 	.word	0x08024b64
 801c690:	08024b84 	.word	0x08024b84
 801c694:	08024b70 	.word	0x08024b70

0801c698 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801c698:	b5b0      	push	{r4, r5, r7, lr}
 801c69a:	b084      	sub	sp, #16
 801c69c:	af02      	add	r7, sp, #8
 801c69e:	6078      	str	r0, [r7, #4]
 801c6a0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801c6a2:	f7f6 fa45 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c6a6:	4604      	mov	r4, r0
 801c6a8:	6823      	ldr	r3, [r4, #0]
 801c6aa:	3368      	adds	r3, #104	; 0x68
 801c6ac:	681d      	ldr	r5, [r3, #0]
 801c6ae:	f7f6 fa4f 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c6b2:	4603      	mov	r3, r0
 801c6b4:	9300      	str	r3, [sp, #0]
 801c6b6:	f240 1323 	movw	r3, #291	; 0x123
 801c6ba:	4a06      	ldr	r2, [pc, #24]	; (801c6d4 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801c6bc:	4906      	ldr	r1, [pc, #24]	; (801c6d8 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801c6be:	4620      	mov	r0, r4
 801c6c0:	47a8      	blx	r5
    return cpputest_longlong(0);
 801c6c2:	2100      	movs	r1, #0
 801c6c4:	6878      	ldr	r0, [r7, #4]
 801c6c6:	f7ec fe87 	bl	80093d8 <_ZN17cpputest_longlongC1Ei>
}
 801c6ca:	6878      	ldr	r0, [r7, #4]
 801c6cc:	3708      	adds	r7, #8
 801c6ce:	46bd      	mov	sp, r7
 801c6d0:	bdb0      	pop	{r4, r5, r7, pc}
 801c6d2:	bf00      	nop
 801c6d4:	08024b84 	.word	0x08024b84
 801c6d8:	08024ba0 	.word	0x08024ba0

0801c6dc <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801c6dc:	b5b0      	push	{r4, r5, r7, lr}
 801c6de:	b084      	sub	sp, #16
 801c6e0:	af02      	add	r7, sp, #8
 801c6e2:	6078      	str	r0, [r7, #4]
 801c6e4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801c6e6:	f7f6 fa23 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c6ea:	4604      	mov	r4, r0
 801c6ec:	6823      	ldr	r3, [r4, #0]
 801c6ee:	3368      	adds	r3, #104	; 0x68
 801c6f0:	681d      	ldr	r5, [r3, #0]
 801c6f2:	f7f6 fa2d 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	9300      	str	r3, [sp, #0]
 801c6fa:	f240 1329 	movw	r3, #297	; 0x129
 801c6fe:	4a06      	ldr	r2, [pc, #24]	; (801c718 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801c700:	4906      	ldr	r1, [pc, #24]	; (801c71c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801c702:	4620      	mov	r0, r4
 801c704:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801c706:	2100      	movs	r1, #0
 801c708:	6878      	ldr	r0, [r7, #4]
 801c70a:	f7ec fe71 	bl	80093f0 <_ZN18cpputest_ulonglongC1Ei>
}
 801c70e:	6878      	ldr	r0, [r7, #4]
 801c710:	3708      	adds	r7, #8
 801c712:	46bd      	mov	sp, r7
 801c714:	bdb0      	pop	{r4, r5, r7, pc}
 801c716:	bf00      	nop
 801c718:	08024b84 	.word	0x08024b84
 801c71c:	08024bc0 	.word	0x08024bc0

0801c720 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801c720:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c722:	b087      	sub	sp, #28
 801c724:	af04      	add	r7, sp, #16
 801c726:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801c728:	f7f6 fa02 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c72c:	4604      	mov	r4, r0
 801c72e:	6823      	ldr	r3, [r4, #0]
 801c730:	3324      	adds	r3, #36	; 0x24
 801c732:	681d      	ldr	r5, [r3, #0]
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	330c      	adds	r3, #12
 801c738:	4618      	mov	r0, r3
 801c73a:	f7ef f9a1 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c73e:	4606      	mov	r6, r0
 801c740:	f7f6 fa06 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c744:	4603      	mov	r3, r0
 801c746:	9302      	str	r3, [sp, #8]
 801c748:	f240 1331 	movw	r3, #305	; 0x131
 801c74c:	9301      	str	r3, [sp, #4]
 801c74e:	4b09      	ldr	r3, [pc, #36]	; (801c774 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801c750:	9300      	str	r3, [sp, #0]
 801c752:	2300      	movs	r3, #0
 801c754:	4632      	mov	r2, r6
 801c756:	4908      	ldr	r1, [pc, #32]	; (801c778 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801c758:	4620      	mov	r0, r4
 801c75a:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801c762:	ec43 2b17 	vmov	d7, r2, r3
}
 801c766:	eeb0 0a47 	vmov.f32	s0, s14
 801c76a:	eef0 0a67 	vmov.f32	s1, s15
 801c76e:	370c      	adds	r7, #12
 801c770:	46bd      	mov	sp, r7
 801c772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c774:	08024b84 	.word	0x08024b84
 801c778:	08024bec 	.word	0x08024bec

0801c77c <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801c77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c77e:	b087      	sub	sp, #28
 801c780:	af04      	add	r7, sp, #16
 801c782:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801c784:	f7f6 f9d4 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c788:	4604      	mov	r4, r0
 801c78a:	6823      	ldr	r3, [r4, #0]
 801c78c:	3324      	adds	r3, #36	; 0x24
 801c78e:	681d      	ldr	r5, [r3, #0]
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	330c      	adds	r3, #12
 801c794:	4618      	mov	r0, r3
 801c796:	f7ef f973 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c79a:	4606      	mov	r6, r0
 801c79c:	f7f6 f9d8 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c7a0:	4603      	mov	r3, r0
 801c7a2:	9302      	str	r3, [sp, #8]
 801c7a4:	f240 1337 	movw	r3, #311	; 0x137
 801c7a8:	9301      	str	r3, [sp, #4]
 801c7aa:	4b09      	ldr	r3, [pc, #36]	; (801c7d0 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801c7ac:	9300      	str	r3, [sp, #0]
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	4632      	mov	r2, r6
 801c7b2:	4908      	ldr	r1, [pc, #32]	; (801c7d4 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801c7b4:	4620      	mov	r0, r4
 801c7b6:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c7be:	ec43 2b17 	vmov	d7, r2, r3
}
 801c7c2:	eeb0 0a47 	vmov.f32	s0, s14
 801c7c6:	eef0 0a67 	vmov.f32	s1, s15
 801c7ca:	370c      	adds	r7, #12
 801c7cc:	46bd      	mov	sp, r7
 801c7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7d0:	08024b84 	.word	0x08024b84
 801c7d4:	08024bec 	.word	0x08024bec

0801c7d8 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801c7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7da:	b087      	sub	sp, #28
 801c7dc:	af04      	add	r7, sp, #16
 801c7de:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801c7e0:	f7f6 f9a6 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c7e4:	4604      	mov	r4, r0
 801c7e6:	6823      	ldr	r3, [r4, #0]
 801c7e8:	3324      	adds	r3, #36	; 0x24
 801c7ea:	681d      	ldr	r5, [r3, #0]
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	330c      	adds	r3, #12
 801c7f0:	4618      	mov	r0, r3
 801c7f2:	f7ef f945 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c7f6:	4606      	mov	r6, r0
 801c7f8:	f7f6 f9aa 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c7fc:	4603      	mov	r3, r0
 801c7fe:	9302      	str	r3, [sp, #8]
 801c800:	f240 133d 	movw	r3, #317	; 0x13d
 801c804:	9301      	str	r3, [sp, #4]
 801c806:	4b06      	ldr	r3, [pc, #24]	; (801c820 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801c808:	9300      	str	r3, [sp, #0]
 801c80a:	2300      	movs	r3, #0
 801c80c:	4632      	mov	r2, r6
 801c80e:	4905      	ldr	r1, [pc, #20]	; (801c824 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801c810:	4620      	mov	r0, r4
 801c812:	47a8      	blx	r5
    return value_.stringValue_;
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	699b      	ldr	r3, [r3, #24]
}
 801c818:	4618      	mov	r0, r3
 801c81a:	370c      	adds	r7, #12
 801c81c:	46bd      	mov	sp, r7
 801c81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c820:	08024b84 	.word	0x08024b84
 801c824:	08024c14 	.word	0x08024c14

0801c828 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801c828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c82a:	b087      	sub	sp, #28
 801c82c:	af04      	add	r7, sp, #16
 801c82e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801c830:	f7f6 f97e 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c834:	4604      	mov	r4, r0
 801c836:	6823      	ldr	r3, [r4, #0]
 801c838:	3324      	adds	r3, #36	; 0x24
 801c83a:	681d      	ldr	r5, [r3, #0]
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	330c      	adds	r3, #12
 801c840:	4618      	mov	r0, r3
 801c842:	f7ef f91d 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c846:	4606      	mov	r6, r0
 801c848:	f7f6 f982 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c84c:	4603      	mov	r3, r0
 801c84e:	9302      	str	r3, [sp, #8]
 801c850:	f240 1343 	movw	r3, #323	; 0x143
 801c854:	9301      	str	r3, [sp, #4]
 801c856:	4b06      	ldr	r3, [pc, #24]	; (801c870 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801c858:	9300      	str	r3, [sp, #0]
 801c85a:	2300      	movs	r3, #0
 801c85c:	4632      	mov	r2, r6
 801c85e:	4905      	ldr	r1, [pc, #20]	; (801c874 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801c860:	4620      	mov	r0, r4
 801c862:	47a8      	blx	r5
    return value_.pointerValue_;
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	699b      	ldr	r3, [r3, #24]
}
 801c868:	4618      	mov	r0, r3
 801c86a:	370c      	adds	r7, #12
 801c86c:	46bd      	mov	sp, r7
 801c86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c870:	08024b84 	.word	0x08024b84
 801c874:	08024bf4 	.word	0x08024bf4

0801c878 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801c878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c87a:	b087      	sub	sp, #28
 801c87c:	af04      	add	r7, sp, #16
 801c87e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801c880:	f7f6 f956 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c884:	4604      	mov	r4, r0
 801c886:	6823      	ldr	r3, [r4, #0]
 801c888:	3324      	adds	r3, #36	; 0x24
 801c88a:	681d      	ldr	r5, [r3, #0]
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	330c      	adds	r3, #12
 801c890:	4618      	mov	r0, r3
 801c892:	f7ef f8f5 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c896:	4606      	mov	r6, r0
 801c898:	f7f6 f95a 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c89c:	4603      	mov	r3, r0
 801c89e:	9302      	str	r3, [sp, #8]
 801c8a0:	f240 1349 	movw	r3, #329	; 0x149
 801c8a4:	9301      	str	r3, [sp, #4]
 801c8a6:	4b06      	ldr	r3, [pc, #24]	; (801c8c0 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801c8a8:	9300      	str	r3, [sp, #0]
 801c8aa:	2300      	movs	r3, #0
 801c8ac:	4632      	mov	r2, r6
 801c8ae:	4905      	ldr	r1, [pc, #20]	; (801c8c4 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801c8b0:	4620      	mov	r0, r4
 801c8b2:	47a8      	blx	r5
    return value_.pointerValue_;
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	699b      	ldr	r3, [r3, #24]
}
 801c8b8:	4618      	mov	r0, r3
 801c8ba:	370c      	adds	r7, #12
 801c8bc:	46bd      	mov	sp, r7
 801c8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8c0:	08024b84 	.word	0x08024b84
 801c8c4:	08024bfc 	.word	0x08024bfc

0801c8c8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8ca:	b087      	sub	sp, #28
 801c8cc:	af04      	add	r7, sp, #16
 801c8ce:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801c8d0:	f7f6 f92e 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c8d4:	4604      	mov	r4, r0
 801c8d6:	6823      	ldr	r3, [r4, #0]
 801c8d8:	3324      	adds	r3, #36	; 0x24
 801c8da:	681d      	ldr	r5, [r3, #0]
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	330c      	adds	r3, #12
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	f7ef f8cd 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c8e6:	4606      	mov	r6, r0
 801c8e8:	f7f6 f932 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c8ec:	4603      	mov	r3, r0
 801c8ee:	9302      	str	r3, [sp, #8]
 801c8f0:	f240 134f 	movw	r3, #335	; 0x14f
 801c8f4:	9301      	str	r3, [sp, #4]
 801c8f6:	4b06      	ldr	r3, [pc, #24]	; (801c910 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801c8f8:	9300      	str	r3, [sp, #0]
 801c8fa:	2300      	movs	r3, #0
 801c8fc:	4632      	mov	r2, r6
 801c8fe:	4905      	ldr	r1, [pc, #20]	; (801c914 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801c900:	4620      	mov	r0, r4
 801c902:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	699b      	ldr	r3, [r3, #24]
}
 801c908:	4618      	mov	r0, r3
 801c90a:	370c      	adds	r7, #12
 801c90c:	46bd      	mov	sp, r7
 801c90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c910:	08024b84 	.word	0x08024b84
 801c914:	08024c08 	.word	0x08024c08

0801c918 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801c918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c91a:	b087      	sub	sp, #28
 801c91c:	af04      	add	r7, sp, #16
 801c91e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801c920:	f7f6 f906 	bl	8012b30 <_ZN10UtestShell10getCurrentEv>
 801c924:	4604      	mov	r4, r0
 801c926:	6823      	ldr	r3, [r4, #0]
 801c928:	3324      	adds	r3, #36	; 0x24
 801c92a:	681d      	ldr	r5, [r3, #0]
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	330c      	adds	r3, #12
 801c930:	4618      	mov	r0, r3
 801c932:	f7ef f8a5 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801c936:	4606      	mov	r6, r0
 801c938:	f7f6 f90a 	bl	8012b50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c93c:	4603      	mov	r3, r0
 801c93e:	9302      	str	r3, [sp, #8]
 801c940:	f240 1355 	movw	r3, #341	; 0x155
 801c944:	9301      	str	r3, [sp, #4]
 801c946:	4b06      	ldr	r3, [pc, #24]	; (801c960 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801c948:	9300      	str	r3, [sp, #0]
 801c94a:	2300      	movs	r3, #0
 801c94c:	4632      	mov	r2, r6
 801c94e:	4905      	ldr	r1, [pc, #20]	; (801c964 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801c950:	4620      	mov	r0, r4
 801c952:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	699b      	ldr	r3, [r3, #24]
}
 801c958:	4618      	mov	r0, r3
 801c95a:	370c      	adds	r7, #12
 801c95c:	46bd      	mov	sp, r7
 801c95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c960:	08024b84 	.word	0x08024b84
 801c964:	08024c20 	.word	0x08024c20

0801c968 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801c968:	b480      	push	{r7}
 801c96a:	b083      	sub	sp, #12
 801c96c:	af00      	add	r7, sp, #0
 801c96e:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	699b      	ldr	r3, [r3, #24]
}
 801c974:	4618      	mov	r0, r3
 801c976:	370c      	adds	r7, #12
 801c978:	46bd      	mov	sp, r7
 801c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c97e:	4770      	bx	lr

0801c980 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801c980:	b480      	push	{r7}
 801c982:	b083      	sub	sp, #12
 801c984:	af00      	add	r7, sp, #0
 801c986:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	699b      	ldr	r3, [r3, #24]
}
 801c98c:	4618      	mov	r0, r3
 801c98e:	370c      	adds	r7, #12
 801c990:	46bd      	mov	sp, r7
 801c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c996:	4770      	bx	lr

0801c998 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801c998:	b480      	push	{r7}
 801c99a:	b083      	sub	sp, #12
 801c99c:	af00      	add	r7, sp, #0
 801c99e:	6078      	str	r0, [r7, #4]
    return size_;
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	370c      	adds	r7, #12
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9ae:	4770      	bx	lr

0801c9b0 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801c9b0:	b480      	push	{r7}
 801c9b2:	b083      	sub	sp, #12
 801c9b4:	af00      	add	r7, sp, #0
 801c9b6:	6078      	str	r0, [r7, #4]
    return comparator_;
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801c9bc:	4618      	mov	r0, r3
 801c9be:	370c      	adds	r7, #12
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9c6:	4770      	bx	lr

0801c9c8 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801c9c8:	b480      	push	{r7}
 801c9ca:	b083      	sub	sp, #12
 801c9cc:	af00      	add	r7, sp, #0
 801c9ce:	6078      	str	r0, [r7, #4]
    return copier_;
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	370c      	adds	r7, #12
 801c9d8:	46bd      	mov	sp, r7
 801c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9de:	4770      	bx	lr

0801c9e0 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801c9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9e2:	b0cd      	sub	sp, #308	; 0x134
 801c9e4:	af00      	add	r7, sp, #0
 801c9e6:	1d3b      	adds	r3, r7, #4
 801c9e8:	6018      	str	r0, [r3, #0]
 801c9ea:	463b      	mov	r3, r7
 801c9ec:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801c9ee:	2500      	movs	r5, #0
 801c9f0:	1d3b      	adds	r3, r7, #4
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	f103 040c 	add.w	r4, r3, #12
 801c9f8:	f107 0308 	add.w	r3, r7, #8
 801c9fc:	49bb      	ldr	r1, [pc, #748]	; (801ccec <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801c9fe:	4618      	mov	r0, r3
 801ca00:	f7ee fcb3 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801ca04:	2601      	movs	r6, #1
 801ca06:	f107 0308 	add.w	r3, r7, #8
 801ca0a:	4619      	mov	r1, r3
 801ca0c:	4620      	mov	r0, r4
 801ca0e:	f7ef f870 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801ca12:	4603      	mov	r3, r0
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d015      	beq.n	801ca44 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801ca18:	463b      	mov	r3, r7
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	f103 040c 	add.w	r4, r3, #12
 801ca20:	f107 0310 	add.w	r3, r7, #16
 801ca24:	49b2      	ldr	r1, [pc, #712]	; (801ccf0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ca26:	4618      	mov	r0, r3
 801ca28:	f7ee fc9f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801ca2c:	2501      	movs	r5, #1
 801ca2e:	f107 0310 	add.w	r3, r7, #16
 801ca32:	4619      	mov	r1, r3
 801ca34:	4620      	mov	r0, r4
 801ca36:	f7ef f85c 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801ca3a:	4603      	mov	r3, r0
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d001      	beq.n	801ca44 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801ca40:	2401      	movs	r4, #1
 801ca42:	e000      	b.n	801ca46 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801ca44:	2400      	movs	r4, #0
 801ca46:	2d00      	cmp	r5, #0
 801ca48:	d004      	beq.n	801ca54 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801ca4a:	f107 0310 	add.w	r3, r7, #16
 801ca4e:	4618      	mov	r0, r3
 801ca50:	f7ef f843 	bl	800bada <_ZN12SimpleStringD1Ev>
 801ca54:	2e00      	cmp	r6, #0
 801ca56:	d004      	beq.n	801ca62 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801ca58:	f107 0308 	add.w	r3, r7, #8
 801ca5c:	4618      	mov	r0, r3
 801ca5e:	f7ef f83c 	bl	800bada <_ZN12SimpleStringD1Ev>
 801ca62:	2c00      	cmp	r4, #0
 801ca64:	d00c      	beq.n	801ca80 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801ca66:	1d3b      	adds	r3, r7, #4
 801ca68:	681b      	ldr	r3, [r3, #0]
 801ca6a:	699a      	ldr	r2, [r3, #24]
 801ca6c:	463b      	mov	r3, r7
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	699b      	ldr	r3, [r3, #24]
 801ca72:	429a      	cmp	r2, r3
 801ca74:	bf0c      	ite	eq
 801ca76:	2301      	moveq	r3, #1
 801ca78:	2300      	movne	r3, #0
 801ca7a:	b2dc      	uxtb	r4, r3
 801ca7c:	f000 bd60 	b.w	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801ca80:	2500      	movs	r5, #0
 801ca82:	1d3b      	adds	r3, r7, #4
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	f103 040c 	add.w	r4, r3, #12
 801ca8a:	f107 0318 	add.w	r3, r7, #24
 801ca8e:	4998      	ldr	r1, [pc, #608]	; (801ccf0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ca90:	4618      	mov	r0, r3
 801ca92:	f7ee fc6a 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801ca96:	2601      	movs	r6, #1
 801ca98:	f107 0318 	add.w	r3, r7, #24
 801ca9c:	4619      	mov	r1, r3
 801ca9e:	4620      	mov	r0, r4
 801caa0:	f7ef f827 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801caa4:	4603      	mov	r3, r0
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d015      	beq.n	801cad6 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801caaa:	463b      	mov	r3, r7
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	f103 040c 	add.w	r4, r3, #12
 801cab2:	f107 0320 	add.w	r3, r7, #32
 801cab6:	498d      	ldr	r1, [pc, #564]	; (801ccec <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801cab8:	4618      	mov	r0, r3
 801caba:	f7ee fc56 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cabe:	2501      	movs	r5, #1
 801cac0:	f107 0320 	add.w	r3, r7, #32
 801cac4:	4619      	mov	r1, r3
 801cac6:	4620      	mov	r0, r4
 801cac8:	f7ef f813 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cacc:	4603      	mov	r3, r0
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d001      	beq.n	801cad6 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801cad2:	2401      	movs	r4, #1
 801cad4:	e000      	b.n	801cad8 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801cad6:	2400      	movs	r4, #0
 801cad8:	2d00      	cmp	r5, #0
 801cada:	d004      	beq.n	801cae6 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801cadc:	f107 0320 	add.w	r3, r7, #32
 801cae0:	4618      	mov	r0, r3
 801cae2:	f7ee fffa 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cae6:	2e00      	cmp	r6, #0
 801cae8:	d004      	beq.n	801caf4 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801caea:	f107 0318 	add.w	r3, r7, #24
 801caee:	4618      	mov	r0, r3
 801caf0:	f7ee fff3 	bl	800bada <_ZN12SimpleStringD1Ev>
 801caf4:	2c00      	cmp	r4, #0
 801caf6:	d00c      	beq.n	801cb12 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801caf8:	1d3b      	adds	r3, r7, #4
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	699a      	ldr	r2, [r3, #24]
 801cafe:	463b      	mov	r3, r7
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	699b      	ldr	r3, [r3, #24]
 801cb04:	429a      	cmp	r2, r3
 801cb06:	bf0c      	ite	eq
 801cb08:	2301      	moveq	r3, #1
 801cb0a:	2300      	movne	r3, #0
 801cb0c:	b2dc      	uxtb	r4, r3
 801cb0e:	f000 bd17 	b.w	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801cb12:	2500      	movs	r5, #0
 801cb14:	1d3b      	adds	r3, r7, #4
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	f103 040c 	add.w	r4, r3, #12
 801cb1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cb20:	4974      	ldr	r1, [pc, #464]	; (801ccf4 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801cb22:	4618      	mov	r0, r3
 801cb24:	f7ee fc21 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cb28:	2601      	movs	r6, #1
 801cb2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cb2e:	4619      	mov	r1, r3
 801cb30:	4620      	mov	r0, r4
 801cb32:	f7ee ffde 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cb36:	4603      	mov	r3, r0
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d015      	beq.n	801cb68 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801cb3c:	463b      	mov	r3, r7
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	f103 040c 	add.w	r4, r3, #12
 801cb44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cb48:	4969      	ldr	r1, [pc, #420]	; (801ccf0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801cb4a:	4618      	mov	r0, r3
 801cb4c:	f7ee fc0d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cb50:	2501      	movs	r5, #1
 801cb52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cb56:	4619      	mov	r1, r3
 801cb58:	4620      	mov	r0, r4
 801cb5a:	f7ee ffca 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cb5e:	4603      	mov	r3, r0
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d001      	beq.n	801cb68 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801cb64:	2401      	movs	r4, #1
 801cb66:	e000      	b.n	801cb6a <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801cb68:	2400      	movs	r4, #0
 801cb6a:	2d00      	cmp	r5, #0
 801cb6c:	d004      	beq.n	801cb78 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801cb6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cb72:	4618      	mov	r0, r3
 801cb74:	f7ee ffb1 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cb78:	2e00      	cmp	r6, #0
 801cb7a:	d004      	beq.n	801cb86 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801cb7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cb80:	4618      	mov	r0, r3
 801cb82:	f7ee ffaa 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cb86:	2c00      	cmp	r4, #0
 801cb88:	d012      	beq.n	801cbb0 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801cb8a:	463b      	mov	r3, r7
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	699b      	ldr	r3, [r3, #24]
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	db0a      	blt.n	801cbaa <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801cb94:	1d3b      	adds	r3, r7, #4
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	699b      	ldr	r3, [r3, #24]
 801cb9a:	463a      	mov	r2, r7
 801cb9c:	6812      	ldr	r2, [r2, #0]
 801cb9e:	6992      	ldr	r2, [r2, #24]
 801cba0:	4293      	cmp	r3, r2
 801cba2:	d102      	bne.n	801cbaa <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801cba4:	2401      	movs	r4, #1
 801cba6:	f000 bccb 	b.w	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cbaa:	2400      	movs	r4, #0
 801cbac:	f000 bcc8 	b.w	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801cbb0:	2500      	movs	r5, #0
 801cbb2:	1d3b      	adds	r3, r7, #4
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	f103 040c 	add.w	r4, r3, #12
 801cbba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cbbe:	494c      	ldr	r1, [pc, #304]	; (801ccf0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801cbc0:	4618      	mov	r0, r3
 801cbc2:	f7ee fbd2 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cbc6:	2601      	movs	r6, #1
 801cbc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cbcc:	4619      	mov	r1, r3
 801cbce:	4620      	mov	r0, r4
 801cbd0:	f7ee ff8f 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cbd4:	4603      	mov	r3, r0
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d015      	beq.n	801cc06 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801cbda:	463b      	mov	r3, r7
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	f103 040c 	add.w	r4, r3, #12
 801cbe2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cbe6:	4943      	ldr	r1, [pc, #268]	; (801ccf4 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f7ee fbbe 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cbee:	2501      	movs	r5, #1
 801cbf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cbf4:	4619      	mov	r1, r3
 801cbf6:	4620      	mov	r0, r4
 801cbf8:	f7ee ff7b 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cbfc:	4603      	mov	r3, r0
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d001      	beq.n	801cc06 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801cc02:	2401      	movs	r4, #1
 801cc04:	e000      	b.n	801cc08 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801cc06:	2400      	movs	r4, #0
 801cc08:	2d00      	cmp	r5, #0
 801cc0a:	d004      	beq.n	801cc16 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801cc0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cc10:	4618      	mov	r0, r3
 801cc12:	f7ee ff62 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cc16:	2e00      	cmp	r6, #0
 801cc18:	d004      	beq.n	801cc24 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801cc1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cc1e:	4618      	mov	r0, r3
 801cc20:	f7ee ff5b 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cc24:	2c00      	cmp	r4, #0
 801cc26:	d012      	beq.n	801cc4e <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801cc28:	1d3b      	adds	r3, r7, #4
 801cc2a:	681b      	ldr	r3, [r3, #0]
 801cc2c:	699b      	ldr	r3, [r3, #24]
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	db0a      	blt.n	801cc48 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801cc32:	1d3b      	adds	r3, r7, #4
 801cc34:	681b      	ldr	r3, [r3, #0]
 801cc36:	699b      	ldr	r3, [r3, #24]
 801cc38:	463a      	mov	r2, r7
 801cc3a:	6812      	ldr	r2, [r2, #0]
 801cc3c:	6992      	ldr	r2, [r2, #24]
 801cc3e:	4293      	cmp	r3, r2
 801cc40:	d102      	bne.n	801cc48 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801cc42:	2401      	movs	r4, #1
 801cc44:	f000 bc7c 	b.w	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cc48:	2400      	movs	r4, #0
 801cc4a:	f000 bc79 	b.w	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801cc4e:	2500      	movs	r5, #0
 801cc50:	1d3b      	adds	r3, r7, #4
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	f103 040c 	add.w	r4, r3, #12
 801cc58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cc5c:	4926      	ldr	r1, [pc, #152]	; (801ccf8 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801cc5e:	4618      	mov	r0, r3
 801cc60:	f7ee fb83 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cc64:	2601      	movs	r6, #1
 801cc66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cc6a:	4619      	mov	r1, r3
 801cc6c:	4620      	mov	r0, r4
 801cc6e:	f7ee ff40 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cc72:	4603      	mov	r3, r0
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d015      	beq.n	801cca4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801cc78:	463b      	mov	r3, r7
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	f103 040c 	add.w	r4, r3, #12
 801cc80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cc84:	491a      	ldr	r1, [pc, #104]	; (801ccf0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801cc86:	4618      	mov	r0, r3
 801cc88:	f7ee fb6f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cc8c:	2501      	movs	r5, #1
 801cc8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cc92:	4619      	mov	r1, r3
 801cc94:	4620      	mov	r0, r4
 801cc96:	f7ee ff2c 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cc9a:	4603      	mov	r3, r0
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d001      	beq.n	801cca4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801cca0:	2401      	movs	r4, #1
 801cca2:	e000      	b.n	801cca6 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801cca4:	2400      	movs	r4, #0
 801cca6:	2d00      	cmp	r5, #0
 801cca8:	d004      	beq.n	801ccb4 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801ccaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ccae:	4618      	mov	r0, r3
 801ccb0:	f7ee ff13 	bl	800bada <_ZN12SimpleStringD1Ev>
 801ccb4:	2e00      	cmp	r6, #0
 801ccb6:	d004      	beq.n	801ccc2 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801ccb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	f7ee ff0c 	bl	800bada <_ZN12SimpleStringD1Ev>
 801ccc2:	2c00      	cmp	r4, #0
 801ccc4:	d01a      	beq.n	801ccfc <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801ccc6:	463b      	mov	r3, r7
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	699b      	ldr	r3, [r3, #24]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	db0a      	blt.n	801cce6 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801ccd0:	1d3b      	adds	r3, r7, #4
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	699b      	ldr	r3, [r3, #24]
 801ccd6:	463a      	mov	r2, r7
 801ccd8:	6812      	ldr	r2, [r2, #0]
 801ccda:	6992      	ldr	r2, [r2, #24]
 801ccdc:	4293      	cmp	r3, r2
 801ccde:	d102      	bne.n	801cce6 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801cce0:	2401      	movs	r4, #1
 801cce2:	f000 bc2d 	b.w	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cce6:	2400      	movs	r4, #0
 801cce8:	f000 bc2a 	b.w	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ccec:	08024b64 	.word	0x08024b64
 801ccf0:	08024b48 	.word	0x08024b48
 801ccf4:	08024b54 	.word	0x08024b54
 801ccf8:	08024b70 	.word	0x08024b70
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801ccfc:	2500      	movs	r5, #0
 801ccfe:	1d3b      	adds	r3, r7, #4
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	f103 040c 	add.w	r4, r3, #12
 801cd06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801cd0a:	49b8      	ldr	r1, [pc, #736]	; (801cfec <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801cd0c:	4618      	mov	r0, r3
 801cd0e:	f7ee fb2c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cd12:	2601      	movs	r6, #1
 801cd14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801cd18:	4619      	mov	r1, r3
 801cd1a:	4620      	mov	r0, r4
 801cd1c:	f7ee fee9 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cd20:	4603      	mov	r3, r0
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d015      	beq.n	801cd52 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801cd26:	463b      	mov	r3, r7
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	f103 040c 	add.w	r4, r3, #12
 801cd2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cd32:	49af      	ldr	r1, [pc, #700]	; (801cff0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801cd34:	4618      	mov	r0, r3
 801cd36:	f7ee fb18 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cd3a:	2501      	movs	r5, #1
 801cd3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cd40:	4619      	mov	r1, r3
 801cd42:	4620      	mov	r0, r4
 801cd44:	f7ee fed5 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cd48:	4603      	mov	r3, r0
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	d001      	beq.n	801cd52 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801cd4e:	2401      	movs	r4, #1
 801cd50:	e000      	b.n	801cd54 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801cd52:	2400      	movs	r4, #0
 801cd54:	2d00      	cmp	r5, #0
 801cd56:	d004      	beq.n	801cd62 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801cd58:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cd5c:	4618      	mov	r0, r3
 801cd5e:	f7ee febc 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cd62:	2e00      	cmp	r6, #0
 801cd64:	d004      	beq.n	801cd70 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801cd66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801cd6a:	4618      	mov	r0, r3
 801cd6c:	f7ee feb5 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cd70:	2c00      	cmp	r4, #0
 801cd72:	d010      	beq.n	801cd96 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801cd74:	1d3b      	adds	r3, r7, #4
 801cd76:	681b      	ldr	r3, [r3, #0]
 801cd78:	699b      	ldr	r3, [r3, #24]
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	db09      	blt.n	801cd92 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801cd7e:	1d3b      	adds	r3, r7, #4
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	699b      	ldr	r3, [r3, #24]
 801cd84:	463a      	mov	r2, r7
 801cd86:	6812      	ldr	r2, [r2, #0]
 801cd88:	6992      	ldr	r2, [r2, #24]
 801cd8a:	4293      	cmp	r3, r2
 801cd8c:	d101      	bne.n	801cd92 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801cd8e:	2401      	movs	r4, #1
 801cd90:	e3d6      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cd92:	2400      	movs	r4, #0
 801cd94:	e3d4      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801cd96:	2500      	movs	r5, #0
 801cd98:	1d3b      	adds	r3, r7, #4
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	f103 040c 	add.w	r4, r3, #12
 801cda0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801cda4:	4993      	ldr	r1, [pc, #588]	; (801cff4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801cda6:	4618      	mov	r0, r3
 801cda8:	f7ee fadf 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cdac:	2601      	movs	r6, #1
 801cdae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801cdb2:	4619      	mov	r1, r3
 801cdb4:	4620      	mov	r0, r4
 801cdb6:	f7ee fe9c 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cdba:	4603      	mov	r3, r0
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d015      	beq.n	801cdec <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801cdc0:	463b      	mov	r3, r7
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	f103 040c 	add.w	r4, r3, #12
 801cdc8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801cdcc:	498a      	ldr	r1, [pc, #552]	; (801cff8 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801cdce:	4618      	mov	r0, r3
 801cdd0:	f7ee facb 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cdd4:	2501      	movs	r5, #1
 801cdd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801cdda:	4619      	mov	r1, r3
 801cddc:	4620      	mov	r0, r4
 801cdde:	f7ee fe88 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cde2:	4603      	mov	r3, r0
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d001      	beq.n	801cdec <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801cde8:	2401      	movs	r4, #1
 801cdea:	e000      	b.n	801cdee <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801cdec:	2400      	movs	r4, #0
 801cdee:	2d00      	cmp	r5, #0
 801cdf0:	d004      	beq.n	801cdfc <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801cdf2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801cdf6:	4618      	mov	r0, r3
 801cdf8:	f7ee fe6f 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cdfc:	2e00      	cmp	r6, #0
 801cdfe:	d004      	beq.n	801ce0a <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801ce00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ce04:	4618      	mov	r0, r3
 801ce06:	f7ee fe68 	bl	800bada <_ZN12SimpleStringD1Ev>
 801ce0a:	2c00      	cmp	r4, #0
 801ce0c:	d010      	beq.n	801ce30 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801ce0e:	463b      	mov	r3, r7
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	699b      	ldr	r3, [r3, #24]
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	db09      	blt.n	801ce2c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801ce18:	1d3b      	adds	r3, r7, #4
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	699b      	ldr	r3, [r3, #24]
 801ce1e:	463a      	mov	r2, r7
 801ce20:	6812      	ldr	r2, [r2, #0]
 801ce22:	6992      	ldr	r2, [r2, #24]
 801ce24:	4293      	cmp	r3, r2
 801ce26:	d101      	bne.n	801ce2c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801ce28:	2401      	movs	r4, #1
 801ce2a:	e389      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ce2c:	2400      	movs	r4, #0
 801ce2e:	e387      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801ce30:	2500      	movs	r5, #0
 801ce32:	1d3b      	adds	r3, r7, #4
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	f103 040c 	add.w	r4, r3, #12
 801ce3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ce3e:	496e      	ldr	r1, [pc, #440]	; (801cff8 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801ce40:	4618      	mov	r0, r3
 801ce42:	f7ee fa92 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801ce46:	2601      	movs	r6, #1
 801ce48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ce4c:	4619      	mov	r1, r3
 801ce4e:	4620      	mov	r0, r4
 801ce50:	f7ee fe4f 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801ce54:	4603      	mov	r3, r0
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d015      	beq.n	801ce86 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801ce5a:	463b      	mov	r3, r7
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	f103 040c 	add.w	r4, r3, #12
 801ce62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ce66:	4963      	ldr	r1, [pc, #396]	; (801cff4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801ce68:	4618      	mov	r0, r3
 801ce6a:	f7ee fa7e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801ce6e:	2501      	movs	r5, #1
 801ce70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ce74:	4619      	mov	r1, r3
 801ce76:	4620      	mov	r0, r4
 801ce78:	f7ee fe3b 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801ce7c:	4603      	mov	r3, r0
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d001      	beq.n	801ce86 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801ce82:	2401      	movs	r4, #1
 801ce84:	e000      	b.n	801ce88 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801ce86:	2400      	movs	r4, #0
 801ce88:	2d00      	cmp	r5, #0
 801ce8a:	d004      	beq.n	801ce96 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801ce8c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ce90:	4618      	mov	r0, r3
 801ce92:	f7ee fe22 	bl	800bada <_ZN12SimpleStringD1Ev>
 801ce96:	2e00      	cmp	r6, #0
 801ce98:	d004      	beq.n	801cea4 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801ce9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ce9e:	4618      	mov	r0, r3
 801cea0:	f7ee fe1b 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cea4:	2c00      	cmp	r4, #0
 801cea6:	d010      	beq.n	801ceca <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801cea8:	1d3b      	adds	r3, r7, #4
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	699b      	ldr	r3, [r3, #24]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	db09      	blt.n	801cec6 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801ceb2:	1d3b      	adds	r3, r7, #4
 801ceb4:	681b      	ldr	r3, [r3, #0]
 801ceb6:	699b      	ldr	r3, [r3, #24]
 801ceb8:	463a      	mov	r2, r7
 801ceba:	6812      	ldr	r2, [r2, #0]
 801cebc:	6992      	ldr	r2, [r2, #24]
 801cebe:	4293      	cmp	r3, r2
 801cec0:	d101      	bne.n	801cec6 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801cec2:	2401      	movs	r4, #1
 801cec4:	e33c      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cec6:	2400      	movs	r4, #0
 801cec8:	e33a      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801ceca:	2500      	movs	r5, #0
 801cecc:	1d3b      	adds	r3, r7, #4
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	f103 040c 	add.w	r4, r3, #12
 801ced4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ced8:	4946      	ldr	r1, [pc, #280]	; (801cff4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801ceda:	4618      	mov	r0, r3
 801cedc:	f7ee fa45 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cee0:	2601      	movs	r6, #1
 801cee2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801cee6:	4619      	mov	r1, r3
 801cee8:	4620      	mov	r0, r4
 801ceea:	f7ee fe02 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801ceee:	4603      	mov	r3, r0
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	d015      	beq.n	801cf20 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801cef4:	463b      	mov	r3, r7
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	f103 040c 	add.w	r4, r3, #12
 801cefc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801cf00:	493b      	ldr	r1, [pc, #236]	; (801cff0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801cf02:	4618      	mov	r0, r3
 801cf04:	f7ee fa31 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cf08:	2501      	movs	r5, #1
 801cf0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801cf0e:	4619      	mov	r1, r3
 801cf10:	4620      	mov	r0, r4
 801cf12:	f7ee fdee 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cf16:	4603      	mov	r3, r0
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d001      	beq.n	801cf20 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801cf1c:	2401      	movs	r4, #1
 801cf1e:	e000      	b.n	801cf22 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801cf20:	2400      	movs	r4, #0
 801cf22:	2d00      	cmp	r5, #0
 801cf24:	d004      	beq.n	801cf30 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801cf26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801cf2a:	4618      	mov	r0, r3
 801cf2c:	f7ee fdd5 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cf30:	2e00      	cmp	r6, #0
 801cf32:	d004      	beq.n	801cf3e <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801cf34:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801cf38:	4618      	mov	r0, r3
 801cf3a:	f7ee fdce 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cf3e:	2c00      	cmp	r4, #0
 801cf40:	d00b      	beq.n	801cf5a <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801cf42:	1d3b      	adds	r3, r7, #4
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	699a      	ldr	r2, [r3, #24]
 801cf48:	463b      	mov	r3, r7
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	699b      	ldr	r3, [r3, #24]
 801cf4e:	429a      	cmp	r2, r3
 801cf50:	bf0c      	ite	eq
 801cf52:	2301      	moveq	r3, #1
 801cf54:	2300      	movne	r3, #0
 801cf56:	b2dc      	uxtb	r4, r3
 801cf58:	e2f2      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801cf5a:	2500      	movs	r5, #0
 801cf5c:	1d3b      	adds	r3, r7, #4
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	f103 040c 	add.w	r4, r3, #12
 801cf64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801cf68:	4921      	ldr	r1, [pc, #132]	; (801cff0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	f7ee f9fd 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cf70:	2601      	movs	r6, #1
 801cf72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801cf76:	4619      	mov	r1, r3
 801cf78:	4620      	mov	r0, r4
 801cf7a:	f7ee fdba 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d015      	beq.n	801cfb0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801cf84:	463b      	mov	r3, r7
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	f103 040c 	add.w	r4, r3, #12
 801cf8c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801cf90:	4918      	ldr	r1, [pc, #96]	; (801cff4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801cf92:	4618      	mov	r0, r3
 801cf94:	f7ee f9e9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801cf98:	2501      	movs	r5, #1
 801cf9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801cf9e:	4619      	mov	r1, r3
 801cfa0:	4620      	mov	r0, r4
 801cfa2:	f7ee fda6 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d001      	beq.n	801cfb0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801cfac:	2401      	movs	r4, #1
 801cfae:	e000      	b.n	801cfb2 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801cfb0:	2400      	movs	r4, #0
 801cfb2:	2d00      	cmp	r5, #0
 801cfb4:	d004      	beq.n	801cfc0 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801cfb6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801cfba:	4618      	mov	r0, r3
 801cfbc:	f7ee fd8d 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cfc0:	2e00      	cmp	r6, #0
 801cfc2:	d004      	beq.n	801cfce <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801cfc4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801cfc8:	4618      	mov	r0, r3
 801cfca:	f7ee fd86 	bl	800bada <_ZN12SimpleStringD1Ev>
 801cfce:	2c00      	cmp	r4, #0
 801cfd0:	d014      	beq.n	801cffc <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801cfd2:	1d3b      	adds	r3, r7, #4
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	699a      	ldr	r2, [r3, #24]
 801cfd8:	463b      	mov	r3, r7
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	699b      	ldr	r3, [r3, #24]
 801cfde:	429a      	cmp	r2, r3
 801cfe0:	bf0c      	ite	eq
 801cfe2:	2301      	moveq	r3, #1
 801cfe4:	2300      	movne	r3, #0
 801cfe6:	b2dc      	uxtb	r4, r3
 801cfe8:	e2aa      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cfea:	bf00      	nop
 801cfec:	08024b48 	.word	0x08024b48
 801cff0:	08024b70 	.word	0x08024b70
 801cff4:	08024b54 	.word	0x08024b54
 801cff8:	08024b64 	.word	0x08024b64
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801cffc:	2500      	movs	r5, #0
 801cffe:	1d3b      	adds	r3, r7, #4
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	f103 040c 	add.w	r4, r3, #12
 801d006:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d00a:	49ae      	ldr	r1, [pc, #696]	; (801d2c4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801d00c:	4618      	mov	r0, r3
 801d00e:	f7ee f9ac 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d012:	2601      	movs	r6, #1
 801d014:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d018:	4619      	mov	r1, r3
 801d01a:	4620      	mov	r0, r4
 801d01c:	f7ee fd69 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d020:	4603      	mov	r3, r0
 801d022:	2b00      	cmp	r3, #0
 801d024:	d015      	beq.n	801d052 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801d026:	463b      	mov	r3, r7
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	f103 040c 	add.w	r4, r3, #12
 801d02e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d032:	49a5      	ldr	r1, [pc, #660]	; (801d2c8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801d034:	4618      	mov	r0, r3
 801d036:	f7ee f998 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d03a:	2501      	movs	r5, #1
 801d03c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d040:	4619      	mov	r1, r3
 801d042:	4620      	mov	r0, r4
 801d044:	f7ee fd55 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d048:	4603      	mov	r3, r0
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d001      	beq.n	801d052 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801d04e:	2401      	movs	r4, #1
 801d050:	e000      	b.n	801d054 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801d052:	2400      	movs	r4, #0
 801d054:	2d00      	cmp	r5, #0
 801d056:	d004      	beq.n	801d062 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801d058:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d05c:	4618      	mov	r0, r3
 801d05e:	f7ee fd3c 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d062:	2e00      	cmp	r6, #0
 801d064:	d004      	beq.n	801d070 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801d066:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d06a:	4618      	mov	r0, r3
 801d06c:	f7ee fd35 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d070:	2c00      	cmp	r4, #0
 801d072:	d010      	beq.n	801d096 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801d074:	1d3b      	adds	r3, r7, #4
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	699b      	ldr	r3, [r3, #24]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	db09      	blt.n	801d092 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801d07e:	1d3b      	adds	r3, r7, #4
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	699b      	ldr	r3, [r3, #24]
 801d084:	463a      	mov	r2, r7
 801d086:	6812      	ldr	r2, [r2, #0]
 801d088:	6992      	ldr	r2, [r2, #24]
 801d08a:	4293      	cmp	r3, r2
 801d08c:	d101      	bne.n	801d092 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801d08e:	2401      	movs	r4, #1
 801d090:	e256      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d092:	2400      	movs	r4, #0
 801d094:	e254      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801d096:	2500      	movs	r5, #0
 801d098:	1d3b      	adds	r3, r7, #4
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	f103 040c 	add.w	r4, r3, #12
 801d0a0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d0a4:	4988      	ldr	r1, [pc, #544]	; (801d2c8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801d0a6:	4618      	mov	r0, r3
 801d0a8:	f7ee f95f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d0ac:	2601      	movs	r6, #1
 801d0ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d0b2:	4619      	mov	r1, r3
 801d0b4:	4620      	mov	r0, r4
 801d0b6:	f7ee fd1c 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d0ba:	4603      	mov	r3, r0
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d015      	beq.n	801d0ec <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801d0c0:	463b      	mov	r3, r7
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	f103 040c 	add.w	r4, r3, #12
 801d0c8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d0cc:	497d      	ldr	r1, [pc, #500]	; (801d2c4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	f7ee f94b 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d0d4:	2501      	movs	r5, #1
 801d0d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d0da:	4619      	mov	r1, r3
 801d0dc:	4620      	mov	r0, r4
 801d0de:	f7ee fd08 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d001      	beq.n	801d0ec <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801d0e8:	2401      	movs	r4, #1
 801d0ea:	e000      	b.n	801d0ee <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801d0ec:	2400      	movs	r4, #0
 801d0ee:	2d00      	cmp	r5, #0
 801d0f0:	d004      	beq.n	801d0fc <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801d0f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d0f6:	4618      	mov	r0, r3
 801d0f8:	f7ee fcef 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d0fc:	2e00      	cmp	r6, #0
 801d0fe:	d004      	beq.n	801d10a <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801d100:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d104:	4618      	mov	r0, r3
 801d106:	f7ee fce8 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d10a:	2c00      	cmp	r4, #0
 801d10c:	d010      	beq.n	801d130 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801d10e:	463b      	mov	r3, r7
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	699b      	ldr	r3, [r3, #24]
 801d114:	2b00      	cmp	r3, #0
 801d116:	db09      	blt.n	801d12c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801d118:	1d3b      	adds	r3, r7, #4
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	699b      	ldr	r3, [r3, #24]
 801d11e:	463a      	mov	r2, r7
 801d120:	6812      	ldr	r2, [r2, #0]
 801d122:	6992      	ldr	r2, [r2, #24]
 801d124:	4293      	cmp	r3, r2
 801d126:	d101      	bne.n	801d12c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801d128:	2401      	movs	r4, #1
 801d12a:	e209      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d12c:	2400      	movs	r4, #0
 801d12e:	e207      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801d130:	1d3b      	adds	r3, r7, #4
 801d132:	681b      	ldr	r3, [r3, #0]
 801d134:	f103 020c 	add.w	r2, r3, #12
 801d138:	463b      	mov	r3, r7
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	330c      	adds	r3, #12
 801d13e:	4619      	mov	r1, r3
 801d140:	4610      	mov	r0, r2
 801d142:	f7ee fd1b 	bl	800bb7c <_ZneRK12SimpleStringS1_>
 801d146:	4603      	mov	r3, r0
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d001      	beq.n	801d150 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801d14c:	2400      	movs	r4, #0
 801d14e:	e1f7      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801d150:	1d3b      	adds	r3, r7, #4
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	f103 040c 	add.w	r4, r3, #12
 801d158:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d15c:	495b      	ldr	r1, [pc, #364]	; (801d2cc <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801d15e:	4618      	mov	r0, r3
 801d160:	f7ee f903 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d164:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d168:	4619      	mov	r1, r3
 801d16a:	4620      	mov	r0, r4
 801d16c:	f7ee fcc1 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d170:	4603      	mov	r3, r0
 801d172:	461c      	mov	r4, r3
 801d174:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d178:	4618      	mov	r0, r3
 801d17a:	f7ee fcae 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d17e:	2c00      	cmp	r4, #0
 801d180:	d00b      	beq.n	801d19a <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801d182:	1d3b      	adds	r3, r7, #4
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	7e1a      	ldrb	r2, [r3, #24]
 801d188:	463b      	mov	r3, r7
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	7e1b      	ldrb	r3, [r3, #24]
 801d18e:	429a      	cmp	r2, r3
 801d190:	bf0c      	ite	eq
 801d192:	2301      	moveq	r3, #1
 801d194:	2300      	movne	r3, #0
 801d196:	b2dc      	uxtb	r4, r3
 801d198:	e1d2      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801d19a:	1d3b      	adds	r3, r7, #4
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	f103 040c 	add.w	r4, r3, #12
 801d1a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d1a6:	494a      	ldr	r1, [pc, #296]	; (801d2d0 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	f7ee f8de 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d1ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d1b2:	4619      	mov	r1, r3
 801d1b4:	4620      	mov	r0, r4
 801d1b6:	f7ee fc9c 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	461c      	mov	r4, r3
 801d1be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	f7ee fc89 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d1c8:	2c00      	cmp	r4, #0
 801d1ca:	d00b      	beq.n	801d1e4 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801d1cc:	1d3b      	adds	r3, r7, #4
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	699a      	ldr	r2, [r3, #24]
 801d1d2:	463b      	mov	r3, r7
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	699b      	ldr	r3, [r3, #24]
 801d1d8:	429a      	cmp	r2, r3
 801d1da:	bf0c      	ite	eq
 801d1dc:	2301      	moveq	r3, #1
 801d1de:	2300      	movne	r3, #0
 801d1e0:	b2dc      	uxtb	r4, r3
 801d1e2:	e1ad      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801d1e4:	1d3b      	adds	r3, r7, #4
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	f103 040c 	add.w	r4, r3, #12
 801d1ec:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d1f0:	4938      	ldr	r1, [pc, #224]	; (801d2d4 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	f7ee f8b9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d1f8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d1fc:	4619      	mov	r1, r3
 801d1fe:	4620      	mov	r0, r4
 801d200:	f7ee fc77 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d204:	4603      	mov	r3, r0
 801d206:	461c      	mov	r4, r3
 801d208:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d20c:	4618      	mov	r0, r3
 801d20e:	f7ee fc64 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d212:	2c00      	cmp	r4, #0
 801d214:	d00b      	beq.n	801d22e <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801d216:	1d3b      	adds	r3, r7, #4
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	699a      	ldr	r2, [r3, #24]
 801d21c:	463b      	mov	r3, r7
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	699b      	ldr	r3, [r3, #24]
 801d222:	429a      	cmp	r2, r3
 801d224:	bf0c      	ite	eq
 801d226:	2301      	moveq	r3, #1
 801d228:	2300      	movne	r3, #0
 801d22a:	b2dc      	uxtb	r4, r3
 801d22c:	e188      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801d22e:	1d3b      	adds	r3, r7, #4
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	f103 040c 	add.w	r4, r3, #12
 801d236:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d23a:	4922      	ldr	r1, [pc, #136]	; (801d2c4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801d23c:	4618      	mov	r0, r3
 801d23e:	f7ee f894 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d242:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d246:	4619      	mov	r1, r3
 801d248:	4620      	mov	r0, r4
 801d24a:	f7ee fc52 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d24e:	4603      	mov	r3, r0
 801d250:	461c      	mov	r4, r3
 801d252:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d256:	4618      	mov	r0, r3
 801d258:	f7ee fc3f 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d25c:	2c00      	cmp	r4, #0
 801d25e:	d00b      	beq.n	801d278 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801d260:	1d3b      	adds	r3, r7, #4
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	699a      	ldr	r2, [r3, #24]
 801d266:	463b      	mov	r3, r7
 801d268:	681b      	ldr	r3, [r3, #0]
 801d26a:	699b      	ldr	r3, [r3, #24]
 801d26c:	429a      	cmp	r2, r3
 801d26e:	bf0c      	ite	eq
 801d270:	2301      	moveq	r3, #1
 801d272:	2300      	movne	r3, #0
 801d274:	b2dc      	uxtb	r4, r3
 801d276:	e163      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801d278:	1d3b      	adds	r3, r7, #4
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	f103 040c 	add.w	r4, r3, #12
 801d280:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d284:	4910      	ldr	r1, [pc, #64]	; (801d2c8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801d286:	4618      	mov	r0, r3
 801d288:	f7ee f86f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d28c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d290:	4619      	mov	r1, r3
 801d292:	4620      	mov	r0, r4
 801d294:	f7ee fc2d 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d298:	4603      	mov	r3, r0
 801d29a:	461c      	mov	r4, r3
 801d29c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d2a0:	4618      	mov	r0, r3
 801d2a2:	f7ee fc1a 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d2a6:	2c00      	cmp	r4, #0
 801d2a8:	d016      	beq.n	801d2d8 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801d2aa:	1d3b      	adds	r3, r7, #4
 801d2ac:	681b      	ldr	r3, [r3, #0]
 801d2ae:	699a      	ldr	r2, [r3, #24]
 801d2b0:	463b      	mov	r3, r7
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	699b      	ldr	r3, [r3, #24]
 801d2b6:	429a      	cmp	r2, r3
 801d2b8:	bf0c      	ite	eq
 801d2ba:	2301      	moveq	r3, #1
 801d2bc:	2300      	movne	r3, #0
 801d2be:	b2dc      	uxtb	r4, r3
 801d2c0:	e13e      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d2c2:	bf00      	nop
 801d2c4:	08024b64 	.word	0x08024b64
 801d2c8:	08024b70 	.word	0x08024b70
 801d2cc:	08024b4c 	.word	0x08024b4c
 801d2d0:	08024b48 	.word	0x08024b48
 801d2d4:	08024b54 	.word	0x08024b54
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801d2d8:	1d3b      	adds	r3, r7, #4
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	f103 040c 	add.w	r4, r3, #12
 801d2e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d2e4:	4999      	ldr	r1, [pc, #612]	; (801d54c <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	f7ee f83f 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d2ec:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d2f0:	4619      	mov	r1, r3
 801d2f2:	4620      	mov	r0, r4
 801d2f4:	f7ee fbfd 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d2f8:	4603      	mov	r3, r0
 801d2fa:	461c      	mov	r4, r3
 801d2fc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d300:	4618      	mov	r0, r3
 801d302:	f7ee fbea 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d306:	2c00      	cmp	r4, #0
 801d308:	d026      	beq.n	801d358 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801d30a:	1d3b      	adds	r3, r7, #4
 801d30c:	681b      	ldr	r3, [r3, #0]
 801d30e:	699a      	ldr	r2, [r3, #24]
 801d310:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d314:	4611      	mov	r1, r2
 801d316:	4618      	mov	r0, r3
 801d318:	f7ee f827 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d31c:	463b      	mov	r3, r7
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	699a      	ldr	r2, [r3, #24]
 801d322:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801d326:	4611      	mov	r1, r2
 801d328:	4618      	mov	r0, r3
 801d32a:	f7ee f81e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d32e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801d332:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d336:	4611      	mov	r1, r2
 801d338:	4618      	mov	r0, r3
 801d33a:	f7ee fbda 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d33e:	4603      	mov	r3, r0
 801d340:	461c      	mov	r4, r3
 801d342:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801d346:	4618      	mov	r0, r3
 801d348:	f7ee fbc7 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d34c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d350:	4618      	mov	r0, r3
 801d352:	f7ee fbc2 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d356:	e0f3      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801d358:	1d3b      	adds	r3, r7, #4
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	f103 040c 	add.w	r4, r3, #12
 801d360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d364:	497a      	ldr	r1, [pc, #488]	; (801d550 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801d366:	4618      	mov	r0, r3
 801d368:	f7ed ffff 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d370:	4619      	mov	r1, r3
 801d372:	4620      	mov	r0, r4
 801d374:	f7ee fbbd 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d378:	4603      	mov	r3, r0
 801d37a:	461c      	mov	r4, r3
 801d37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d380:	4618      	mov	r0, r3
 801d382:	f7ee fbaa 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d386:	2c00      	cmp	r4, #0
 801d388:	d00b      	beq.n	801d3a2 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801d38a:	1d3b      	adds	r3, r7, #4
 801d38c:	681b      	ldr	r3, [r3, #0]
 801d38e:	699a      	ldr	r2, [r3, #24]
 801d390:	463b      	mov	r3, r7
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	699b      	ldr	r3, [r3, #24]
 801d396:	429a      	cmp	r2, r3
 801d398:	bf0c      	ite	eq
 801d39a:	2301      	moveq	r3, #1
 801d39c:	2300      	movne	r3, #0
 801d39e:	b2dc      	uxtb	r4, r3
 801d3a0:	e0ce      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801d3a2:	1d3b      	adds	r3, r7, #4
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	f103 040c 	add.w	r4, r3, #12
 801d3aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801d3ae:	4969      	ldr	r1, [pc, #420]	; (801d554 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801d3b0:	4618      	mov	r0, r3
 801d3b2:	f7ed ffda 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d3b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801d3ba:	4619      	mov	r1, r3
 801d3bc:	4620      	mov	r0, r4
 801d3be:	f7ee fb98 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d3c2:	4603      	mov	r3, r0
 801d3c4:	461c      	mov	r4, r3
 801d3c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801d3ca:	4618      	mov	r0, r3
 801d3cc:	f7ee fb85 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d3d0:	2c00      	cmp	r4, #0
 801d3d2:	d00b      	beq.n	801d3ec <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801d3d4:	1d3b      	adds	r3, r7, #4
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	699a      	ldr	r2, [r3, #24]
 801d3da:	463b      	mov	r3, r7
 801d3dc:	681b      	ldr	r3, [r3, #0]
 801d3de:	699b      	ldr	r3, [r3, #24]
 801d3e0:	429a      	cmp	r2, r3
 801d3e2:	bf0c      	ite	eq
 801d3e4:	2301      	moveq	r3, #1
 801d3e6:	2300      	movne	r3, #0
 801d3e8:	b2dc      	uxtb	r4, r3
 801d3ea:	e0a9      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801d3ec:	1d3b      	adds	r3, r7, #4
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	f103 040c 	add.w	r4, r3, #12
 801d3f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d3f8:	4957      	ldr	r1, [pc, #348]	; (801d558 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801d3fa:	4618      	mov	r0, r3
 801d3fc:	f7ed ffb5 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d400:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d404:	4619      	mov	r1, r3
 801d406:	4620      	mov	r0, r4
 801d408:	f7ee fb73 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d40c:	4603      	mov	r3, r0
 801d40e:	461c      	mov	r4, r3
 801d410:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d414:	4618      	mov	r0, r3
 801d416:	f7ee fb60 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d41a:	2c00      	cmp	r4, #0
 801d41c:	d00b      	beq.n	801d436 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801d41e:	1d3b      	adds	r3, r7, #4
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	699a      	ldr	r2, [r3, #24]
 801d424:	463b      	mov	r3, r7
 801d426:	681b      	ldr	r3, [r3, #0]
 801d428:	699b      	ldr	r3, [r3, #24]
 801d42a:	429a      	cmp	r2, r3
 801d42c:	bf0c      	ite	eq
 801d42e:	2301      	moveq	r3, #1
 801d430:	2300      	movne	r3, #0
 801d432:	b2dc      	uxtb	r4, r3
 801d434:	e084      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801d436:	1d3b      	adds	r3, r7, #4
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	f103 040c 	add.w	r4, r3, #12
 801d43e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d442:	4946      	ldr	r1, [pc, #280]	; (801d55c <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801d444:	4618      	mov	r0, r3
 801d446:	f7ed ff90 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d44a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d44e:	4619      	mov	r1, r3
 801d450:	4620      	mov	r0, r4
 801d452:	f7ee fb4e 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d456:	4603      	mov	r3, r0
 801d458:	461c      	mov	r4, r3
 801d45a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d45e:	4618      	mov	r0, r3
 801d460:	f7ee fb3b 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d464:	2c00      	cmp	r4, #0
 801d466:	d01c      	beq.n	801d4a2 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801d468:	1d3b      	adds	r3, r7, #4
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	ed93 7b06 	vldr	d7, [r3, #24]
 801d470:	463b      	mov	r3, r7
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	ed93 6b06 	vldr	d6, [r3, #24]
 801d478:	1d3b      	adds	r3, r7, #4
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	ed93 5b08 	vldr	d5, [r3, #32]
 801d480:	eeb0 2a45 	vmov.f32	s4, s10
 801d484:	eef0 2a65 	vmov.f32	s5, s11
 801d488:	eeb0 1a46 	vmov.f32	s2, s12
 801d48c:	eef0 1a66 	vmov.f32	s3, s13
 801d490:	eeb0 0a47 	vmov.f32	s0, s14
 801d494:	eef0 0a67 	vmov.f32	s1, s15
 801d498:	f7f3 fe1a 	bl	80110d0 <_Z13doubles_equalddd>
 801d49c:	4603      	mov	r3, r0
 801d49e:	461c      	mov	r4, r3
 801d4a0:	e04e      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801d4a2:	1d3b      	adds	r3, r7, #4
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	f103 040c 	add.w	r4, r3, #12
 801d4aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d4ae:	492c      	ldr	r1, [pc, #176]	; (801d560 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	f7ed ff5a 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d4b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d4ba:	4619      	mov	r1, r3
 801d4bc:	4620      	mov	r0, r4
 801d4be:	f7ee fb18 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d4c2:	4603      	mov	r3, r0
 801d4c4:	461c      	mov	r4, r3
 801d4c6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d4ca:	4618      	mov	r0, r3
 801d4cc:	f7ee fb05 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d4d0:	2c00      	cmp	r4, #0
 801d4d2:	d01c      	beq.n	801d50e <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801d4d4:	1d3b      	adds	r3, r7, #4
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d4da:	463b      	mov	r3, r7
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4e0:	429a      	cmp	r2, r3
 801d4e2:	d001      	beq.n	801d4e8 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801d4e4:	2400      	movs	r4, #0
 801d4e6:	e02b      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801d4e8:	1d3b      	adds	r3, r7, #4
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	6998      	ldr	r0, [r3, #24]
 801d4ee:	463b      	mov	r3, r7
 801d4f0:	681b      	ldr	r3, [r3, #0]
 801d4f2:	6999      	ldr	r1, [r3, #24]
 801d4f4:	1d3b      	adds	r3, r7, #4
 801d4f6:	681b      	ldr	r3, [r3, #0]
 801d4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4fa:	461a      	mov	r2, r3
 801d4fc:	f7ed fe54 	bl	800b1a8 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801d500:	4603      	mov	r3, r0
 801d502:	2b00      	cmp	r3, #0
 801d504:	bf0c      	ite	eq
 801d506:	2301      	moveq	r3, #1
 801d508:	2300      	movne	r3, #0
 801d50a:	b2dc      	uxtb	r4, r3
 801d50c:	e018      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801d50e:	1d3b      	adds	r3, r7, #4
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d514:	2b00      	cmp	r3, #0
 801d516:	d012      	beq.n	801d53e <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801d518:	1d3b      	adds	r3, r7, #4
 801d51a:	681b      	ldr	r3, [r3, #0]
 801d51c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801d51e:	1d3b      	adds	r3, r7, #4
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	3308      	adds	r3, #8
 801d528:	681b      	ldr	r3, [r3, #0]
 801d52a:	1d3a      	adds	r2, r7, #4
 801d52c:	6812      	ldr	r2, [r2, #0]
 801d52e:	6991      	ldr	r1, [r2, #24]
 801d530:	463a      	mov	r2, r7
 801d532:	6812      	ldr	r2, [r2, #0]
 801d534:	6992      	ldr	r2, [r2, #24]
 801d536:	4798      	blx	r3
 801d538:	4603      	mov	r3, r0
 801d53a:	461c      	mov	r4, r3
 801d53c:	e000      	b.n	801d540 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801d53e:	2400      	movs	r4, #0
 801d540:	4623      	mov	r3, r4
}
 801d542:	4618      	mov	r0, r3
 801d544:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801d548:	46bd      	mov	sp, r7
 801d54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d54c:	08024c14 	.word	0x08024c14
 801d550:	08024bf4 	.word	0x08024bf4
 801d554:	08024bfc 	.word	0x08024bfc
 801d558:	08024c08 	.word	0x08024c08
 801d55c:	08024bec 	.word	0x08024bec
 801d560:	08024c20 	.word	0x08024c20

0801d564 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801d564:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d566:	b087      	sub	sp, #28
 801d568:	af00      	add	r7, sp, #0
 801d56a:	6078      	str	r0, [r7, #4]
 801d56c:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	f103 020c 	add.w	r2, r3, #12
 801d574:	683b      	ldr	r3, [r7, #0]
 801d576:	330c      	adds	r3, #12
 801d578:	4619      	mov	r1, r3
 801d57a:	4610      	mov	r0, r2
 801d57c:	f7ee fab9 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d580:	4603      	mov	r3, r0
 801d582:	2b00      	cmp	r3, #0
 801d584:	d001      	beq.n	801d58a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801d586:	2301      	movs	r3, #1
 801d588:	e03c      	b.n	801d604 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801d58a:	2500      	movs	r5, #0
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	f103 040c 	add.w	r4, r3, #12
 801d592:	f107 0308 	add.w	r3, r7, #8
 801d596:	491d      	ldr	r1, [pc, #116]	; (801d60c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801d598:	4618      	mov	r0, r3
 801d59a:	f7ed fee6 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d59e:	2601      	movs	r6, #1
 801d5a0:	f107 0308 	add.w	r3, r7, #8
 801d5a4:	4619      	mov	r1, r3
 801d5a6:	4620      	mov	r0, r4
 801d5a8:	f7ee faa3 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d5ac:	4603      	mov	r3, r0
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	d014      	beq.n	801d5dc <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801d5b2:	683b      	ldr	r3, [r7, #0]
 801d5b4:	f103 040c 	add.w	r4, r3, #12
 801d5b8:	f107 0310 	add.w	r3, r7, #16
 801d5bc:	4914      	ldr	r1, [pc, #80]	; (801d610 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801d5be:	4618      	mov	r0, r3
 801d5c0:	f7ed fed3 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d5c4:	2501      	movs	r5, #1
 801d5c6:	f107 0310 	add.w	r3, r7, #16
 801d5ca:	4619      	mov	r1, r3
 801d5cc:	4620      	mov	r0, r4
 801d5ce:	f7ee fa90 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d5d2:	4603      	mov	r3, r0
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d001      	beq.n	801d5dc <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801d5d8:	2401      	movs	r4, #1
 801d5da:	e000      	b.n	801d5de <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801d5dc:	2400      	movs	r4, #0
 801d5de:	2d00      	cmp	r5, #0
 801d5e0:	d004      	beq.n	801d5ec <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801d5e2:	f107 0310 	add.w	r3, r7, #16
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	f7ee fa77 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d5ec:	2e00      	cmp	r6, #0
 801d5ee:	d004      	beq.n	801d5fa <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801d5f0:	f107 0308 	add.w	r3, r7, #8
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	f7ee fa70 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d5fa:	2c00      	cmp	r4, #0
 801d5fc:	d001      	beq.n	801d602 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801d5fe:	2301      	movs	r3, #1
 801d600:	e000      	b.n	801d604 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801d602:	2300      	movs	r3, #0
}
 801d604:	4618      	mov	r0, r3
 801d606:	371c      	adds	r7, #28
 801d608:	46bd      	mov	sp, r7
 801d60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d60c:	08024bfc 	.word	0x08024bfc
 801d610:	08024bf4 	.word	0x08024bf4

0801d614 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801d614:	b590      	push	{r4, r7, lr}
 801d616:	b0b9      	sub	sp, #228	; 0xe4
 801d618:	af00      	add	r7, sp, #0
 801d61a:	6078      	str	r0, [r7, #4]
 801d61c:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801d61e:	683b      	ldr	r3, [r7, #0]
 801d620:	f103 040c 	add.w	r4, r3, #12
 801d624:	f107 0308 	add.w	r3, r7, #8
 801d628:	49d4      	ldr	r1, [pc, #848]	; (801d97c <_ZNK14MockNamedValue8toStringEv+0x368>)
 801d62a:	4618      	mov	r0, r3
 801d62c:	f7ed fe9d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d630:	f107 0308 	add.w	r3, r7, #8
 801d634:	4619      	mov	r1, r3
 801d636:	4620      	mov	r0, r4
 801d638:	f7ee fa5b 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d63c:	4603      	mov	r3, r0
 801d63e:	461c      	mov	r4, r3
 801d640:	f107 0308 	add.w	r3, r7, #8
 801d644:	4618      	mov	r0, r3
 801d646:	f7ee fa48 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d64a:	2c00      	cmp	r4, #0
 801d64c:	d007      	beq.n	801d65e <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801d64e:	683b      	ldr	r3, [r7, #0]
 801d650:	7e1a      	ldrb	r2, [r3, #24]
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	4611      	mov	r1, r2
 801d656:	4618      	mov	r0, r3
 801d658:	f7ee fcb0 	bl	800bfbc <_Z10StringFromb>
 801d65c:	e23f      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801d65e:	683b      	ldr	r3, [r7, #0]
 801d660:	f103 040c 	add.w	r4, r3, #12
 801d664:	f107 0310 	add.w	r3, r7, #16
 801d668:	49c5      	ldr	r1, [pc, #788]	; (801d980 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801d66a:	4618      	mov	r0, r3
 801d66c:	f7ed fe7d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d670:	f107 0310 	add.w	r3, r7, #16
 801d674:	4619      	mov	r1, r3
 801d676:	4620      	mov	r0, r4
 801d678:	f7ee fa3b 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d67c:	4603      	mov	r3, r0
 801d67e:	461c      	mov	r4, r3
 801d680:	f107 0310 	add.w	r3, r7, #16
 801d684:	4618      	mov	r0, r3
 801d686:	f7ee fa28 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d68a:	2c00      	cmp	r4, #0
 801d68c:	d03b      	beq.n	801d706 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801d68e:	683b      	ldr	r3, [r7, #0]
 801d690:	699a      	ldr	r2, [r3, #24]
 801d692:	f107 0320 	add.w	r3, r7, #32
 801d696:	4611      	mov	r1, r2
 801d698:	4618      	mov	r0, r3
 801d69a:	f7ee fce5 	bl	800c068 <_Z10StringFromi>
 801d69e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d6a2:	49b8      	ldr	r1, [pc, #736]	; (801d984 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d6a4:	4618      	mov	r0, r3
 801d6a6:	f7ed fe60 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d6aa:	f107 0318 	add.w	r3, r7, #24
 801d6ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d6b2:	f107 0120 	add.w	r1, r7, #32
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f7ee fa71 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 801d6bc:	683b      	ldr	r3, [r7, #0]
 801d6be:	699a      	ldr	r2, [r3, #24]
 801d6c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d6c4:	4611      	mov	r1, r2
 801d6c6:	4618      	mov	r0, r3
 801d6c8:	f7ee fdbe 	bl	800c248 <_Z30BracketsFormattedHexStringFromi>
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d6d2:	f107 0118 	add.w	r1, r7, #24
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	f7ee fa61 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 801d6dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	f7ee f9fa 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d6e6:	f107 0318 	add.w	r3, r7, #24
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	f7ee f9f5 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d6f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d6f4:	4618      	mov	r0, r3
 801d6f6:	f7ee f9f0 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d6fa:	f107 0320 	add.w	r3, r7, #32
 801d6fe:	4618      	mov	r0, r3
 801d700:	f7ee f9eb 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d704:	e1eb      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801d706:	683b      	ldr	r3, [r7, #0]
 801d708:	f103 040c 	add.w	r4, r3, #12
 801d70c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d710:	499d      	ldr	r1, [pc, #628]	; (801d988 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801d712:	4618      	mov	r0, r3
 801d714:	f7ed fe29 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d718:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d71c:	4619      	mov	r1, r3
 801d71e:	4620      	mov	r0, r4
 801d720:	f7ee f9e7 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d724:	4603      	mov	r3, r0
 801d726:	461c      	mov	r4, r3
 801d728:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d72c:	4618      	mov	r0, r3
 801d72e:	f7ee f9d4 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d732:	2c00      	cmp	r4, #0
 801d734:	d03b      	beq.n	801d7ae <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801d736:	683b      	ldr	r3, [r7, #0]
 801d738:	699a      	ldr	r2, [r3, #24]
 801d73a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d73e:	4611      	mov	r1, r2
 801d740:	4618      	mov	r0, r3
 801d742:	f7ee fef9 	bl	800c538 <_Z10StringFromj>
 801d746:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d74a:	498e      	ldr	r1, [pc, #568]	; (801d984 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d74c:	4618      	mov	r0, r3
 801d74e:	f7ed fe0c 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d752:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d756:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d75a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801d75e:	4618      	mov	r0, r3
 801d760:	f7ee fa1d 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 801d764:	683b      	ldr	r3, [r7, #0]
 801d766:	699a      	ldr	r2, [r3, #24]
 801d768:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d76c:	4611      	mov	r1, r2
 801d76e:	4618      	mov	r0, r3
 801d770:	f7ee fd86 	bl	800c280 <_Z30BracketsFormattedHexStringFromj>
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801d77a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801d77e:	4618      	mov	r0, r3
 801d780:	f7ee fa0d 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 801d784:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d788:	4618      	mov	r0, r3
 801d78a:	f7ee f9a6 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d78e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d792:	4618      	mov	r0, r3
 801d794:	f7ee f9a1 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d798:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d79c:	4618      	mov	r0, r3
 801d79e:	f7ee f99c 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d7a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d7a6:	4618      	mov	r0, r3
 801d7a8:	f7ee f997 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d7ac:	e197      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801d7ae:	683b      	ldr	r3, [r7, #0]
 801d7b0:	f103 040c 	add.w	r4, r3, #12
 801d7b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d7b8:	4974      	ldr	r1, [pc, #464]	; (801d98c <_ZNK14MockNamedValue8toStringEv+0x378>)
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	f7ed fdd5 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d7c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d7c4:	4619      	mov	r1, r3
 801d7c6:	4620      	mov	r0, r4
 801d7c8:	f7ee f993 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	461c      	mov	r4, r3
 801d7d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d7d4:	4618      	mov	r0, r3
 801d7d6:	f7ee f980 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d7da:	2c00      	cmp	r4, #0
 801d7dc:	d03b      	beq.n	801d856 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801d7de:	683b      	ldr	r3, [r7, #0]
 801d7e0:	699a      	ldr	r2, [r3, #24]
 801d7e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d7e6:	4611      	mov	r1, r2
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	f7ee fc4f 	bl	800c08c <_Z10StringFroml>
 801d7ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d7f2:	4964      	ldr	r1, [pc, #400]	; (801d984 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d7f4:	4618      	mov	r0, r3
 801d7f6:	f7ed fdb8 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d7fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d7fe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801d802:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801d806:	4618      	mov	r0, r3
 801d808:	f7ee f9c9 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 801d80c:	683b      	ldr	r3, [r7, #0]
 801d80e:	699a      	ldr	r2, [r3, #24]
 801d810:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d814:	4611      	mov	r1, r2
 801d816:	4618      	mov	r0, r3
 801d818:	f7ee fd4e 	bl	800c2b8 <_Z30BracketsFormattedHexStringFroml>
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801d822:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801d826:	4618      	mov	r0, r3
 801d828:	f7ee f9b9 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 801d82c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d830:	4618      	mov	r0, r3
 801d832:	f7ee f952 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d836:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d83a:	4618      	mov	r0, r3
 801d83c:	f7ee f94d 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d840:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d844:	4618      	mov	r0, r3
 801d846:	f7ee f948 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d84a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d84e:	4618      	mov	r0, r3
 801d850:	f7ee f943 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d854:	e143      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801d856:	683b      	ldr	r3, [r7, #0]
 801d858:	f103 040c 	add.w	r4, r3, #12
 801d85c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d860:	494b      	ldr	r1, [pc, #300]	; (801d990 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801d862:	4618      	mov	r0, r3
 801d864:	f7ed fd81 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d868:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d86c:	4619      	mov	r1, r3
 801d86e:	4620      	mov	r0, r4
 801d870:	f7ee f93f 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d874:	4603      	mov	r3, r0
 801d876:	461c      	mov	r4, r3
 801d878:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d87c:	4618      	mov	r0, r3
 801d87e:	f7ee f92c 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d882:	2c00      	cmp	r4, #0
 801d884:	d03b      	beq.n	801d8fe <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801d886:	683b      	ldr	r3, [r7, #0]
 801d888:	699a      	ldr	r2, [r3, #24]
 801d88a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d88e:	4611      	mov	r1, r2
 801d890:	4618      	mov	r0, r3
 801d892:	f7ee fe63 	bl	800c55c <_Z10StringFromm>
 801d896:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d89a:	493a      	ldr	r1, [pc, #232]	; (801d984 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d89c:	4618      	mov	r0, r3
 801d89e:	f7ed fd64 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d8a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d8a6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801d8aa:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801d8ae:	4618      	mov	r0, r3
 801d8b0:	f7ee f975 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 801d8b4:	683b      	ldr	r3, [r7, #0]
 801d8b6:	699a      	ldr	r2, [r3, #24]
 801d8b8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d8bc:	4611      	mov	r1, r2
 801d8be:	4618      	mov	r0, r3
 801d8c0:	f7ee fd16 	bl	800c2f0 <_Z30BracketsFormattedHexStringFromm>
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801d8ca:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801d8ce:	4618      	mov	r0, r3
 801d8d0:	f7ee f965 	bl	800bb9e <_ZNK12SimpleStringplERKS_>
 801d8d4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d8d8:	4618      	mov	r0, r3
 801d8da:	f7ee f8fe 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d8de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d8e2:	4618      	mov	r0, r3
 801d8e4:	f7ee f8f9 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d8e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	f7ee f8f4 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d8f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d8f6:	4618      	mov	r0, r3
 801d8f8:	f7ee f8ef 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d8fc:	e0ef      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801d8fe:	683b      	ldr	r3, [r7, #0]
 801d900:	f103 040c 	add.w	r4, r3, #12
 801d904:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d908:	4922      	ldr	r1, [pc, #136]	; (801d994 <_ZNK14MockNamedValue8toStringEv+0x380>)
 801d90a:	4618      	mov	r0, r3
 801d90c:	f7ed fd2d 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d910:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d914:	4619      	mov	r1, r3
 801d916:	4620      	mov	r0, r4
 801d918:	f7ee f8eb 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d91c:	4603      	mov	r3, r0
 801d91e:	461c      	mov	r4, r3
 801d920:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d924:	4618      	mov	r0, r3
 801d926:	f7ee f8d8 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d92a:	2c00      	cmp	r4, #0
 801d92c:	d006      	beq.n	801d93c <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801d92e:	683b      	ldr	r3, [r7, #0]
 801d930:	699b      	ldr	r3, [r3, #24]
 801d932:	4619      	mov	r1, r3
 801d934:	6878      	ldr	r0, [r7, #4]
 801d936:	f7ed fd18 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d93a:	e0d0      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801d93c:	683b      	ldr	r3, [r7, #0]
 801d93e:	f103 040c 	add.w	r4, r3, #12
 801d942:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d946:	4914      	ldr	r1, [pc, #80]	; (801d998 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801d948:	4618      	mov	r0, r3
 801d94a:	f7ed fd0e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d94e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d952:	4619      	mov	r1, r3
 801d954:	4620      	mov	r0, r4
 801d956:	f7ee f8cc 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d95a:	4603      	mov	r3, r0
 801d95c:	461c      	mov	r4, r3
 801d95e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d962:	4618      	mov	r0, r3
 801d964:	f7ee f8b9 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d968:	2c00      	cmp	r4, #0
 801d96a:	d017      	beq.n	801d99c <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801d96c:	683b      	ldr	r3, [r7, #0]
 801d96e:	699a      	ldr	r2, [r3, #24]
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	4611      	mov	r1, r2
 801d974:	4618      	mov	r0, r3
 801d976:	f7ee fb9b 	bl	800c0b0 <_Z10StringFromPKv>
 801d97a:	e0b0      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801d97c:	08024b4c 	.word	0x08024b4c
 801d980:	08024b48 	.word	0x08024b48
 801d984:	08024c38 	.word	0x08024c38
 801d988:	08024b54 	.word	0x08024b54
 801d98c:	08024b64 	.word	0x08024b64
 801d990:	08024b70 	.word	0x08024b70
 801d994:	08024c14 	.word	0x08024c14
 801d998:	08024bf4 	.word	0x08024bf4
    else if (type_ == "void (*)()")
 801d99c:	683b      	ldr	r3, [r7, #0]
 801d99e:	f103 040c 	add.w	r4, r3, #12
 801d9a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d9a6:	4950      	ldr	r1, [pc, #320]	; (801dae8 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801d9a8:	4618      	mov	r0, r3
 801d9aa:	f7ed fcde 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d9ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d9b2:	4619      	mov	r1, r3
 801d9b4:	4620      	mov	r0, r4
 801d9b6:	f7ee f89c 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d9ba:	4603      	mov	r3, r0
 801d9bc:	461c      	mov	r4, r3
 801d9be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d9c2:	4618      	mov	r0, r3
 801d9c4:	f7ee f889 	bl	800bada <_ZN12SimpleStringD1Ev>
 801d9c8:	2c00      	cmp	r4, #0
 801d9ca:	d007      	beq.n	801d9dc <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801d9cc:	683b      	ldr	r3, [r7, #0]
 801d9ce:	699a      	ldr	r2, [r3, #24]
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	4611      	mov	r1, r2
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	f7ee fb95 	bl	800c104 <_Z10StringFromPFvvE>
 801d9da:	e080      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801d9dc:	683b      	ldr	r3, [r7, #0]
 801d9de:	f103 040c 	add.w	r4, r3, #12
 801d9e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d9e6:	4941      	ldr	r1, [pc, #260]	; (801daec <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801d9e8:	4618      	mov	r0, r3
 801d9ea:	f7ed fcbe 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801d9ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d9f2:	4619      	mov	r1, r3
 801d9f4:	4620      	mov	r0, r4
 801d9f6:	f7ee f87c 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801d9fa:	4603      	mov	r3, r0
 801d9fc:	461c      	mov	r4, r3
 801d9fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801da02:	4618      	mov	r0, r3
 801da04:	f7ee f869 	bl	800bada <_ZN12SimpleStringD1Ev>
 801da08:	2c00      	cmp	r4, #0
 801da0a:	d007      	beq.n	801da1c <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801da0c:	683b      	ldr	r3, [r7, #0]
 801da0e:	699a      	ldr	r2, [r3, #24]
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	4611      	mov	r1, r2
 801da14:	4618      	mov	r0, r3
 801da16:	f7ee fb4b 	bl	800c0b0 <_Z10StringFromPKv>
 801da1a:	e060      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801da1c:	683b      	ldr	r3, [r7, #0]
 801da1e:	f103 040c 	add.w	r4, r3, #12
 801da22:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801da26:	4932      	ldr	r1, [pc, #200]	; (801daf0 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801da28:	4618      	mov	r0, r3
 801da2a:	f7ed fc9e 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801da2e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801da32:	4619      	mov	r1, r3
 801da34:	4620      	mov	r0, r4
 801da36:	f7ee f85c 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801da3a:	4603      	mov	r3, r0
 801da3c:	461c      	mov	r4, r3
 801da3e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801da42:	4618      	mov	r0, r3
 801da44:	f7ee f849 	bl	800bada <_ZN12SimpleStringD1Ev>
 801da48:	2c00      	cmp	r4, #0
 801da4a:	d00c      	beq.n	801da66 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801da4c:	683b      	ldr	r3, [r7, #0]
 801da4e:	ed93 7b06 	vldr	d7, [r3, #24]
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	2106      	movs	r1, #6
 801da56:	eeb0 0a47 	vmov.f32	s0, s14
 801da5a:	eef0 0a67 	vmov.f32	s1, s15
 801da5e:	4618      	mov	r0, r3
 801da60:	f7ee fd00 	bl	800c464 <_Z10StringFromdi>
 801da64:	e03b      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801da66:	683b      	ldr	r3, [r7, #0]
 801da68:	f103 040c 	add.w	r4, r3, #12
 801da6c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801da70:	4920      	ldr	r1, [pc, #128]	; (801daf4 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801da72:	4618      	mov	r0, r3
 801da74:	f7ed fc79 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801da78:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801da7c:	4619      	mov	r1, r3
 801da7e:	4620      	mov	r0, r4
 801da80:	f7ee f837 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801da84:	4603      	mov	r3, r0
 801da86:	461c      	mov	r4, r3
 801da88:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801da8c:	4618      	mov	r0, r3
 801da8e:	f7ee f824 	bl	800bada <_ZN12SimpleStringD1Ev>
 801da92:	2c00      	cmp	r4, #0
 801da94:	d008      	beq.n	801daa8 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801da96:	683b      	ldr	r3, [r7, #0]
 801da98:	6999      	ldr	r1, [r3, #24]
 801da9a:	683b      	ldr	r3, [r7, #0]
 801da9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	4618      	mov	r0, r3
 801daa2:	f7ee fe73 	bl	800c78c <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801daa6:	e01a      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801daa8:	683b      	ldr	r3, [r7, #0]
 801daaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801daac:	2b00      	cmp	r3, #0
 801daae:	d00b      	beq.n	801dac8 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801dab0:	683b      	ldr	r3, [r7, #0]
 801dab2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801dab4:	683b      	ldr	r3, [r7, #0]
 801dab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dab8:	681b      	ldr	r3, [r3, #0]
 801daba:	330c      	adds	r3, #12
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	683a      	ldr	r2, [r7, #0]
 801dac0:	6992      	ldr	r2, [r2, #24]
 801dac2:	6878      	ldr	r0, [r7, #4]
 801dac4:	4798      	blx	r3
 801dac6:	e00a      	b.n	801dade <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801dac8:	683b      	ldr	r3, [r7, #0]
 801daca:	330c      	adds	r3, #12
 801dacc:	4618      	mov	r0, r3
 801dace:	f7ed ffd7 	bl	800ba80 <_ZNK12SimpleString12asCharStringEv>
 801dad2:	4602      	mov	r2, r0
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	4908      	ldr	r1, [pc, #32]	; (801daf8 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801dad8:	4618      	mov	r0, r3
 801dada:	f7ee fd05 	bl	800c4e8 <_Z16StringFromFormatPKcz>

}
 801dade:	6878      	ldr	r0, [r7, #4]
 801dae0:	37e4      	adds	r7, #228	; 0xe4
 801dae2:	46bd      	mov	sp, r7
 801dae4:	bd90      	pop	{r4, r7, pc}
 801dae6:	bf00      	nop
 801dae8:	08024c08 	.word	0x08024c08
 801daec:	08024bfc 	.word	0x08024bfc
 801daf0:	08024bec 	.word	0x08024bec
 801daf4:	08024c20 	.word	0x08024c20
 801daf8:	08024c3c 	.word	0x08024c3c

0801dafc <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801dafc:	b480      	push	{r7}
 801dafe:	b083      	sub	sp, #12
 801db00:	af00      	add	r7, sp, #0
 801db02:	6078      	str	r0, [r7, #4]
 801db04:	6039      	str	r1, [r7, #0]
    next_ = node;
 801db06:	687b      	ldr	r3, [r7, #4]
 801db08:	683a      	ldr	r2, [r7, #0]
 801db0a:	605a      	str	r2, [r3, #4]
}
 801db0c:	bf00      	nop
 801db0e:	370c      	adds	r7, #12
 801db10:	46bd      	mov	sp, r7
 801db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db16:	4770      	bx	lr

0801db18 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801db18:	b480      	push	{r7}
 801db1a:	b083      	sub	sp, #12
 801db1c:	af00      	add	r7, sp, #0
 801db1e:	6078      	str	r0, [r7, #4]
    return next_;
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	685b      	ldr	r3, [r3, #4]
}
 801db24:	4618      	mov	r0, r3
 801db26:	370c      	adds	r7, #12
 801db28:	46bd      	mov	sp, r7
 801db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db2e:	4770      	bx	lr

0801db30 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801db30:	b480      	push	{r7}
 801db32:	b083      	sub	sp, #12
 801db34:	af00      	add	r7, sp, #0
 801db36:	6078      	str	r0, [r7, #4]
    return data_;
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	681b      	ldr	r3, [r3, #0]
}
 801db3c:	4618      	mov	r0, r3
 801db3e:	370c      	adds	r7, #12
 801db40:	46bd      	mov	sp, r7
 801db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db46:	4770      	bx	lr

0801db48 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801db48:	b580      	push	{r7, lr}
 801db4a:	b082      	sub	sp, #8
 801db4c:	af00      	add	r7, sp, #0
 801db4e:	6078      	str	r0, [r7, #4]
    delete data_;
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	681b      	ldr	r3, [r3, #0]
 801db54:	2b00      	cmp	r3, #0
 801db56:	d004      	beq.n	801db62 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801db58:	681a      	ldr	r2, [r3, #0]
 801db5a:	3204      	adds	r2, #4
 801db5c:	6812      	ldr	r2, [r2, #0]
 801db5e:	4618      	mov	r0, r3
 801db60:	4790      	blx	r2
}
 801db62:	bf00      	nop
 801db64:	3708      	adds	r7, #8
 801db66:	46bd      	mov	sp, r7
 801db68:	bd80      	pop	{r7, pc}

0801db6a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801db6a:	b480      	push	{r7}
 801db6c:	b083      	sub	sp, #12
 801db6e:	af00      	add	r7, sp, #0
 801db70:	6078      	str	r0, [r7, #4]
 801db72:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	683a      	ldr	r2, [r7, #0]
 801db78:	601a      	str	r2, [r3, #0]
 801db7a:	687b      	ldr	r3, [r7, #4]
 801db7c:	2200      	movs	r2, #0
 801db7e:	605a      	str	r2, [r3, #4]
{
}
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	4618      	mov	r0, r3
 801db84:	370c      	adds	r7, #12
 801db86:	46bd      	mov	sp, r7
 801db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db8c:	4770      	bx	lr

0801db8e <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801db8e:	b580      	push	{r7, lr}
 801db90:	b082      	sub	sp, #8
 801db92:	af00      	add	r7, sp, #0
 801db94:	6078      	str	r0, [r7, #4]
 801db96:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801db98:	683b      	ldr	r3, [r7, #0]
 801db9a:	6819      	ldr	r1, [r3, #0]
 801db9c:	683b      	ldr	r3, [r7, #0]
 801db9e:	681b      	ldr	r3, [r3, #0]
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	335c      	adds	r3, #92	; 0x5c
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	687a      	ldr	r2, [r7, #4]
 801dba8:	4610      	mov	r0, r2
 801dbaa:	4798      	blx	r3
}
 801dbac:	6878      	ldr	r0, [r7, #4]
 801dbae:	3708      	adds	r7, #8
 801dbb0:	46bd      	mov	sp, r7
 801dbb2:	bd80      	pop	{r7, pc}

0801dbb4 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801dbb4:	b580      	push	{r7, lr}
 801dbb6:	b082      	sub	sp, #8
 801dbb8:	af00      	add	r7, sp, #0
 801dbba:	6078      	str	r0, [r7, #4]
 801dbbc:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801dbbe:	683b      	ldr	r3, [r7, #0]
 801dbc0:	6819      	ldr	r1, [r3, #0]
 801dbc2:	683b      	ldr	r3, [r7, #0]
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	681b      	ldr	r3, [r3, #0]
 801dbc8:	3360      	adds	r3, #96	; 0x60
 801dbca:	681b      	ldr	r3, [r3, #0]
 801dbcc:	687a      	ldr	r2, [r7, #4]
 801dbce:	4610      	mov	r0, r2
 801dbd0:	4798      	blx	r3
}
 801dbd2:	6878      	ldr	r0, [r7, #4]
 801dbd4:	3708      	adds	r7, #8
 801dbd6:	46bd      	mov	sp, r7
 801dbd8:	bd80      	pop	{r7, pc}

0801dbda <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801dbda:	b480      	push	{r7}
 801dbdc:	b083      	sub	sp, #12
 801dbde:	af00      	add	r7, sp, #0
 801dbe0:	6078      	str	r0, [r7, #4]
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	2200      	movs	r2, #0
 801dbe6:	601a      	str	r2, [r3, #0]
{
}
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	4618      	mov	r0, r3
 801dbec:	370c      	adds	r7, #12
 801dbee:	46bd      	mov	sp, r7
 801dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbf4:	4770      	bx	lr

0801dbf6 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801dbf6:	b580      	push	{r7, lr}
 801dbf8:	b084      	sub	sp, #16
 801dbfa:	af00      	add	r7, sp, #0
 801dbfc:	6078      	str	r0, [r7, #4]
    while (head_) {
 801dbfe:	687b      	ldr	r3, [r7, #4]
 801dc00:	681b      	ldr	r3, [r3, #0]
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d016      	beq.n	801dc34 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	681b      	ldr	r3, [r3, #0]
 801dc0a:	4618      	mov	r0, r3
 801dc0c:	f7ff ff84 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 801dc10:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	681b      	ldr	r3, [r3, #0]
 801dc16:	4618      	mov	r0, r3
 801dc18:	f7ff ff96 	bl	801db48 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	681b      	ldr	r3, [r3, #0]
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d003      	beq.n	801dc2c <_ZN18MockNamedValueList5clearEv+0x36>
 801dc24:	2108      	movs	r1, #8
 801dc26:	4618      	mov	r0, r3
 801dc28:	f7ea fff0 	bl	8008c0c <_ZdlPvj>
        head_ = n;
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	68fa      	ldr	r2, [r7, #12]
 801dc30:	601a      	str	r2, [r3, #0]
    while (head_) {
 801dc32:	e7e4      	b.n	801dbfe <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801dc34:	bf00      	nop
 801dc36:	3710      	adds	r7, #16
 801dc38:	46bd      	mov	sp, r7
 801dc3a:	bd80      	pop	{r7, pc}

0801dc3c <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801dc3c:	b590      	push	{r4, r7, lr}
 801dc3e:	b085      	sub	sp, #20
 801dc40:	af00      	add	r7, sp, #0
 801dc42:	6078      	str	r0, [r7, #4]
 801dc44:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801dc46:	f44f 7210 	mov.w	r2, #576	; 0x240
 801dc4a:	4916      	ldr	r1, [pc, #88]	; (801dca4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801dc4c:	2008      	movs	r0, #8
 801dc4e:	f7ea ffc9 	bl	8008be4 <_ZnwjPKci>
 801dc52:	4604      	mov	r4, r0
 801dc54:	6839      	ldr	r1, [r7, #0]
 801dc56:	4620      	mov	r0, r4
 801dc58:	f7ff ff87 	bl	801db6a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801dc5c:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	681b      	ldr	r3, [r3, #0]
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	d103      	bne.n	801dc6e <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	68ba      	ldr	r2, [r7, #8]
 801dc6a:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801dc6c:	e016      	b.n	801dc9c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	681b      	ldr	r3, [r3, #0]
 801dc72:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801dc74:	68f8      	ldr	r0, [r7, #12]
 801dc76:	f7ff ff4f 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 801dc7a:	4603      	mov	r3, r0
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	bf14      	ite	ne
 801dc80:	2301      	movne	r3, #1
 801dc82:	2300      	moveq	r3, #0
 801dc84:	b2db      	uxtb	r3, r3
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d004      	beq.n	801dc94 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801dc8a:	68f8      	ldr	r0, [r7, #12]
 801dc8c:	f7ff ff44 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 801dc90:	60f8      	str	r0, [r7, #12]
 801dc92:	e7ef      	b.n	801dc74 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801dc94:	68b9      	ldr	r1, [r7, #8]
 801dc96:	68f8      	ldr	r0, [r7, #12]
 801dc98:	f7ff ff30 	bl	801dafc <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801dc9c:	bf00      	nop
 801dc9e:	3714      	adds	r7, #20
 801dca0:	46bd      	mov	sp, r7
 801dca2:	bd90      	pop	{r4, r7, pc}
 801dca4:	08024b84 	.word	0x08024b84

0801dca8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801dca8:	b590      	push	{r4, r7, lr}
 801dcaa:	b087      	sub	sp, #28
 801dcac:	af00      	add	r7, sp, #0
 801dcae:	6078      	str	r0, [r7, #4]
 801dcb0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	617b      	str	r3, [r7, #20]
 801dcb8:	697b      	ldr	r3, [r7, #20]
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d01e      	beq.n	801dcfc <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801dcbe:	f107 030c 	add.w	r3, r7, #12
 801dcc2:	6979      	ldr	r1, [r7, #20]
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	f7ff ff62 	bl	801db8e <_ZNK22MockNamedValueListNode7getNameEv>
 801dcca:	f107 030c 	add.w	r3, r7, #12
 801dcce:	6839      	ldr	r1, [r7, #0]
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	f7ed ff0e 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801dcd6:	4603      	mov	r3, r0
 801dcd8:	461c      	mov	r4, r3
 801dcda:	f107 030c 	add.w	r3, r7, #12
 801dcde:	4618      	mov	r0, r3
 801dce0:	f7ed fefb 	bl	800bada <_ZN12SimpleStringD1Ev>
 801dce4:	2c00      	cmp	r4, #0
 801dce6:	d004      	beq.n	801dcf2 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801dce8:	6978      	ldr	r0, [r7, #20]
 801dcea:	f7ff ff21 	bl	801db30 <_ZN22MockNamedValueListNode4itemEv>
 801dcee:	4603      	mov	r3, r0
 801dcf0:	e005      	b.n	801dcfe <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801dcf2:	6978      	ldr	r0, [r7, #20]
 801dcf4:	f7ff ff10 	bl	801db18 <_ZN22MockNamedValueListNode4nextEv>
 801dcf8:	6178      	str	r0, [r7, #20]
 801dcfa:	e7dd      	b.n	801dcb8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801dcfc:	2300      	movs	r3, #0
}
 801dcfe:	4618      	mov	r0, r3
 801dd00:	371c      	adds	r7, #28
 801dd02:	46bd      	mov	sp, r7
 801dd04:	bd90      	pop	{r4, r7, pc}

0801dd06 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801dd06:	b480      	push	{r7}
 801dd08:	b083      	sub	sp, #12
 801dd0a:	af00      	add	r7, sp, #0
 801dd0c:	6078      	str	r0, [r7, #4]
    return head_;
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	681b      	ldr	r3, [r3, #0]
}
 801dd12:	4618      	mov	r0, r3
 801dd14:	370c      	adds	r7, #12
 801dd16:	46bd      	mov	sp, r7
 801dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd1c:	4770      	bx	lr

0801dd1e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801dd1e:	b580      	push	{r7, lr}
 801dd20:	b084      	sub	sp, #16
 801dd22:	af00      	add	r7, sp, #0
 801dd24:	60f8      	str	r0, [r7, #12]
 801dd26:	60b9      	str	r1, [r7, #8]
 801dd28:	607a      	str	r2, [r7, #4]
 801dd2a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801dd2c:	68fb      	ldr	r3, [r7, #12]
 801dd2e:	68b9      	ldr	r1, [r7, #8]
 801dd30:	4618      	mov	r0, r3
 801dd32:	f7ed fb6e 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	687a      	ldr	r2, [r7, #4]
 801dd3a:	609a      	str	r2, [r3, #8]
 801dd3c:	68fb      	ldr	r3, [r7, #12]
 801dd3e:	2200      	movs	r2, #0
 801dd40:	60da      	str	r2, [r3, #12]
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	683a      	ldr	r2, [r7, #0]
 801dd46:	611a      	str	r2, [r3, #16]
 801dd48:	68fb      	ldr	r3, [r7, #12]
 801dd4a:	4618      	mov	r0, r3
 801dd4c:	3710      	adds	r7, #16
 801dd4e:	46bd      	mov	sp, r7
 801dd50:	bd80      	pop	{r7, pc}

0801dd52 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801dd52:	b580      	push	{r7, lr}
 801dd54:	b084      	sub	sp, #16
 801dd56:	af00      	add	r7, sp, #0
 801dd58:	60f8      	str	r0, [r7, #12]
 801dd5a:	60b9      	str	r1, [r7, #8]
 801dd5c:	607a      	str	r2, [r7, #4]
 801dd5e:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	68b9      	ldr	r1, [r7, #8]
 801dd64:	4618      	mov	r0, r3
 801dd66:	f7ed fb54 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 801dd6a:	68fb      	ldr	r3, [r7, #12]
 801dd6c:	2200      	movs	r2, #0
 801dd6e:	609a      	str	r2, [r3, #8]
 801dd70:	68fb      	ldr	r3, [r7, #12]
 801dd72:	687a      	ldr	r2, [r7, #4]
 801dd74:	60da      	str	r2, [r3, #12]
 801dd76:	68fb      	ldr	r3, [r7, #12]
 801dd78:	683a      	ldr	r2, [r7, #0]
 801dd7a:	611a      	str	r2, [r3, #16]
 801dd7c:	68fb      	ldr	r3, [r7, #12]
 801dd7e:	4618      	mov	r0, r3
 801dd80:	3710      	adds	r7, #16
 801dd82:	46bd      	mov	sp, r7
 801dd84:	bd80      	pop	{r7, pc}

0801dd86 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801dd86:	b580      	push	{r7, lr}
 801dd88:	b084      	sub	sp, #16
 801dd8a:	af00      	add	r7, sp, #0
 801dd8c:	60f8      	str	r0, [r7, #12]
 801dd8e:	60b9      	str	r1, [r7, #8]
 801dd90:	607a      	str	r2, [r7, #4]
 801dd92:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	68b9      	ldr	r1, [r7, #8]
 801dd98:	4618      	mov	r0, r3
 801dd9a:	f7ed fb3a 	bl	800b412 <_ZN12SimpleStringC1ERKS_>
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	687a      	ldr	r2, [r7, #4]
 801dda2:	609a      	str	r2, [r3, #8]
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	683a      	ldr	r2, [r7, #0]
 801dda8:	60da      	str	r2, [r3, #12]
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	69ba      	ldr	r2, [r7, #24]
 801ddae:	611a      	str	r2, [r3, #16]
 801ddb0:	68fb      	ldr	r3, [r7, #12]
 801ddb2:	4618      	mov	r0, r3
 801ddb4:	3710      	adds	r7, #16
 801ddb6:	46bd      	mov	sp, r7
 801ddb8:	bd80      	pop	{r7, pc}
	...

0801ddbc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801ddbc:	b480      	push	{r7}
 801ddbe:	b083      	sub	sp, #12
 801ddc0:	af00      	add	r7, sp, #0
 801ddc2:	6078      	str	r0, [r7, #4]
 801ddc4:	4a06      	ldr	r2, [pc, #24]	; (801dde0 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	601a      	str	r2, [r3, #0]
 801ddca:	687b      	ldr	r3, [r7, #4]
 801ddcc:	2200      	movs	r2, #0
 801ddce:	605a      	str	r2, [r3, #4]
{

}
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	4618      	mov	r0, r3
 801ddd4:	370c      	adds	r7, #12
 801ddd6:	46bd      	mov	sp, r7
 801ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dddc:	4770      	bx	lr
 801ddde:	bf00      	nop
 801dde0:	0802706c 	.word	0x0802706c

0801dde4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801dde4:	b580      	push	{r7, lr}
 801dde6:	b082      	sub	sp, #8
 801dde8:	af00      	add	r7, sp, #0
 801ddea:	6078      	str	r0, [r7, #4]
 801ddec:	4a05      	ldr	r2, [pc, #20]	; (801de04 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	601a      	str	r2, [r3, #0]
{
    clear();
 801ddf2:	6878      	ldr	r0, [r7, #4]
 801ddf4:	f000 f825 	bl	801de42 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	4618      	mov	r0, r3
 801ddfc:	3708      	adds	r7, #8
 801ddfe:	46bd      	mov	sp, r7
 801de00:	bd80      	pop	{r7, pc}
 801de02:	bf00      	nop
 801de04:	0802706c 	.word	0x0802706c

0801de08 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801de08:	b580      	push	{r7, lr}
 801de0a:	b082      	sub	sp, #8
 801de0c:	af00      	add	r7, sp, #0
 801de0e:	6078      	str	r0, [r7, #4]
}
 801de10:	6878      	ldr	r0, [r7, #4]
 801de12:	f7ff ffe7 	bl	801dde4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801de16:	2108      	movs	r1, #8
 801de18:	6878      	ldr	r0, [r7, #4]
 801de1a:	f7ea fef7 	bl	8008c0c <_ZdlPvj>
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	4618      	mov	r0, r3
 801de22:	3708      	adds	r7, #8
 801de24:	46bd      	mov	sp, r7
 801de26:	bd80      	pop	{r7, pc}

0801de28 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801de28:	b580      	push	{r7, lr}
 801de2a:	b082      	sub	sp, #8
 801de2c:	af00      	add	r7, sp, #0
 801de2e:	6078      	str	r0, [r7, #4]
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	4618      	mov	r0, r3
 801de34:	f7ed fe51 	bl	800bada <_ZN12SimpleStringD1Ev>
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	4618      	mov	r0, r3
 801de3c:	3708      	adds	r7, #8
 801de3e:	46bd      	mov	sp, r7
 801de40:	bd80      	pop	{r7, pc}

0801de42 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801de42:	b590      	push	{r4, r7, lr}
 801de44:	b085      	sub	sp, #20
 801de46:	af00      	add	r7, sp, #0
 801de48:	6078      	str	r0, [r7, #4]
    while (head_) {
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	685b      	ldr	r3, [r3, #4]
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d012      	beq.n	801de78 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	685b      	ldr	r3, [r3, #4]
 801de56:	691b      	ldr	r3, [r3, #16]
 801de58:	60fb      	str	r3, [r7, #12]
        delete head_;
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	685c      	ldr	r4, [r3, #4]
 801de5e:	2c00      	cmp	r4, #0
 801de60:	d006      	beq.n	801de70 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801de62:	4620      	mov	r0, r4
 801de64:	f7ff ffe0 	bl	801de28 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801de68:	2114      	movs	r1, #20
 801de6a:	4620      	mov	r0, r4
 801de6c:	f7ea fece 	bl	8008c0c <_ZdlPvj>
        head_ = next;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	68fa      	ldr	r2, [r7, #12]
 801de74:	605a      	str	r2, [r3, #4]
    while (head_) {
 801de76:	e7e8      	b.n	801de4a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801de78:	bf00      	nop
 801de7a:	3714      	adds	r7, #20
 801de7c:	46bd      	mov	sp, r7
 801de7e:	bd90      	pop	{r4, r7, pc}

0801de80 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801de80:	b590      	push	{r4, r7, lr}
 801de82:	b085      	sub	sp, #20
 801de84:	af00      	add	r7, sp, #0
 801de86:	60f8      	str	r0, [r7, #12]
 801de88:	60b9      	str	r1, [r7, #8]
 801de8a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801de8c:	f240 227a 	movw	r2, #634	; 0x27a
 801de90:	4908      	ldr	r1, [pc, #32]	; (801deb4 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801de92:	2014      	movs	r0, #20
 801de94:	f7ea fea6 	bl	8008be4 <_ZnwjPKci>
 801de98:	4604      	mov	r4, r0
 801de9a:	68fb      	ldr	r3, [r7, #12]
 801de9c:	685b      	ldr	r3, [r3, #4]
 801de9e:	687a      	ldr	r2, [r7, #4]
 801dea0:	68b9      	ldr	r1, [r7, #8]
 801dea2:	4620      	mov	r0, r4
 801dea4:	f7ff ff3b 	bl	801dd1e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	605c      	str	r4, [r3, #4]
}
 801deac:	bf00      	nop
 801deae:	3714      	adds	r7, #20
 801deb0:	46bd      	mov	sp, r7
 801deb2:	bd90      	pop	{r4, r7, pc}
 801deb4:	08024b84 	.word	0x08024b84

0801deb8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801deb8:	b590      	push	{r4, r7, lr}
 801deba:	b085      	sub	sp, #20
 801debc:	af00      	add	r7, sp, #0
 801debe:	60f8      	str	r0, [r7, #12]
 801dec0:	60b9      	str	r1, [r7, #8]
 801dec2:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801dec4:	f240 227f 	movw	r2, #639	; 0x27f
 801dec8:	4908      	ldr	r1, [pc, #32]	; (801deec <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801deca:	2014      	movs	r0, #20
 801decc:	f7ea fe8a 	bl	8008be4 <_ZnwjPKci>
 801ded0:	4604      	mov	r4, r0
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	685b      	ldr	r3, [r3, #4]
 801ded6:	687a      	ldr	r2, [r7, #4]
 801ded8:	68b9      	ldr	r1, [r7, #8]
 801deda:	4620      	mov	r0, r4
 801dedc:	f7ff ff39 	bl	801dd52 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801dee0:	68fb      	ldr	r3, [r7, #12]
 801dee2:	605c      	str	r4, [r3, #4]
}
 801dee4:	bf00      	nop
 801dee6:	3714      	adds	r7, #20
 801dee8:	46bd      	mov	sp, r7
 801deea:	bd90      	pop	{r4, r7, pc}
 801deec:	08024b84 	.word	0x08024b84

0801def0 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801def0:	b580      	push	{r7, lr}
 801def2:	b084      	sub	sp, #16
 801def4:	af00      	add	r7, sp, #0
 801def6:	6078      	str	r0, [r7, #4]
 801def8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	685b      	ldr	r3, [r3, #4]
 801defe:	60fb      	str	r3, [r7, #12]
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	2b00      	cmp	r3, #0
 801df04:	d017      	beq.n	801df36 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	6839      	ldr	r1, [r7, #0]
 801df0a:	4618      	mov	r0, r3
 801df0c:	f7ed fdf1 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801df10:	4603      	mov	r3, r0
 801df12:	2b00      	cmp	r3, #0
 801df14:	d005      	beq.n	801df22 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801df16:	68fb      	ldr	r3, [r7, #12]
 801df18:	689b      	ldr	r3, [r3, #8]
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	d001      	beq.n	801df22 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801df1e:	2301      	movs	r3, #1
 801df20:	e000      	b.n	801df24 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801df22:	2300      	movs	r3, #0
 801df24:	2b00      	cmp	r3, #0
 801df26:	d002      	beq.n	801df2e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801df28:	68fb      	ldr	r3, [r7, #12]
 801df2a:	689b      	ldr	r3, [r3, #8]
 801df2c:	e004      	b.n	801df38 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	691b      	ldr	r3, [r3, #16]
 801df32:	60fb      	str	r3, [r7, #12]
 801df34:	e7e4      	b.n	801df00 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801df36:	2300      	movs	r3, #0
}
 801df38:	4618      	mov	r0, r3
 801df3a:	3710      	adds	r7, #16
 801df3c:	46bd      	mov	sp, r7
 801df3e:	bd80      	pop	{r7, pc}

0801df40 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801df40:	b580      	push	{r7, lr}
 801df42:	b084      	sub	sp, #16
 801df44:	af00      	add	r7, sp, #0
 801df46:	6078      	str	r0, [r7, #4]
 801df48:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	685b      	ldr	r3, [r3, #4]
 801df4e:	60fb      	str	r3, [r7, #12]
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	2b00      	cmp	r3, #0
 801df54:	d017      	beq.n	801df86 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801df56:	68fb      	ldr	r3, [r7, #12]
 801df58:	6839      	ldr	r1, [r7, #0]
 801df5a:	4618      	mov	r0, r3
 801df5c:	f7ed fdc9 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801df60:	4603      	mov	r3, r0
 801df62:	2b00      	cmp	r3, #0
 801df64:	d005      	beq.n	801df72 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801df66:	68fb      	ldr	r3, [r7, #12]
 801df68:	68db      	ldr	r3, [r3, #12]
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d001      	beq.n	801df72 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801df6e:	2301      	movs	r3, #1
 801df70:	e000      	b.n	801df74 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801df72:	2300      	movs	r3, #0
 801df74:	2b00      	cmp	r3, #0
 801df76:	d002      	beq.n	801df7e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801df78:	68fb      	ldr	r3, [r7, #12]
 801df7a:	68db      	ldr	r3, [r3, #12]
 801df7c:	e004      	b.n	801df88 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801df7e:	68fb      	ldr	r3, [r7, #12]
 801df80:	691b      	ldr	r3, [r3, #16]
 801df82:	60fb      	str	r3, [r7, #12]
 801df84:	e7e4      	b.n	801df50 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801df86:	2300      	movs	r3, #0
}
 801df88:	4618      	mov	r0, r3
 801df8a:	3710      	adds	r7, #16
 801df8c:	46bd      	mov	sp, r7
 801df8e:	bd80      	pop	{r7, pc}

0801df90 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801df90:	b590      	push	{r4, r7, lr}
 801df92:	b087      	sub	sp, #28
 801df94:	af02      	add	r7, sp, #8
 801df96:	6078      	str	r0, [r7, #4]
 801df98:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801df9a:	683b      	ldr	r3, [r7, #0]
 801df9c:	685b      	ldr	r3, [r3, #4]
 801df9e:	60fb      	str	r3, [r7, #12]
 801dfa0:	68fb      	ldr	r3, [r7, #12]
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d018      	beq.n	801dfd8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801dfa6:	f240 2293 	movw	r2, #659	; 0x293
 801dfaa:	490d      	ldr	r1, [pc, #52]	; (801dfe0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801dfac:	2014      	movs	r0, #20
 801dfae:	f7ea fe19 	bl	8008be4 <_ZnwjPKci>
 801dfb2:	4604      	mov	r4, r0
 801dfb4:	68f9      	ldr	r1, [r7, #12]
 801dfb6:	68fb      	ldr	r3, [r7, #12]
 801dfb8:	689a      	ldr	r2, [r3, #8]
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	68d8      	ldr	r0, [r3, #12]
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	685b      	ldr	r3, [r3, #4]
 801dfc2:	9300      	str	r3, [sp, #0]
 801dfc4:	4603      	mov	r3, r0
 801dfc6:	4620      	mov	r0, r4
 801dfc8:	f7ff fedd 	bl	801dd86 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801dfd0:	68fb      	ldr	r3, [r7, #12]
 801dfd2:	691b      	ldr	r3, [r3, #16]
 801dfd4:	60fb      	str	r3, [r7, #12]
 801dfd6:	e7e3      	b.n	801dfa0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801dfd8:	bf00      	nop
 801dfda:	3714      	adds	r7, #20
 801dfdc:	46bd      	mov	sp, r7
 801dfde:	bd90      	pop	{r4, r7, pc}
 801dfe0:	08024b84 	.word	0x08024b84

0801dfe4 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801dfe4:	b580      	push	{r7, lr}
 801dfe6:	b082      	sub	sp, #8
 801dfe8:	af00      	add	r7, sp, #0
 801dfea:	6078      	str	r0, [r7, #4]
 801dfec:	6039      	str	r1, [r7, #0]
 801dfee:	687b      	ldr	r3, [r7, #4]
 801dff0:	490b      	ldr	r1, [pc, #44]	; (801e020 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801dff2:	4618      	mov	r0, r3
 801dff4:	f7ed f9b9 	bl	800b36a <_ZN12SimpleStringC1EPKc>
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	2200      	movs	r2, #0
 801dffc:	721a      	strb	r2, [r3, #8]
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	2200      	movs	r2, #0
 801e002:	725a      	strb	r2, [r3, #9]
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	2200      	movs	r2, #0
 801e008:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	6839      	ldr	r1, [r7, #0]
 801e00e:	4618      	mov	r0, r3
 801e010:	f7ed fa17 	bl	800b442 <_ZN12SimpleStringaSERKS_>
}
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	4618      	mov	r0, r3
 801e018:	3708      	adds	r7, #8
 801e01a:	46bd      	mov	sp, r7
 801e01c:	bd80      	pop	{r7, pc}
 801e01e:	bf00      	nop
 801e020:	08024c60 	.word	0x08024c60

0801e024 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801e024:	b480      	push	{r7}
 801e026:	b083      	sub	sp, #12
 801e028:	af00      	add	r7, sp, #0
 801e02a:	6078      	str	r0, [r7, #4]
 801e02c:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	683a      	ldr	r2, [r7, #0]
 801e032:	60da      	str	r2, [r3, #12]
    return this;
 801e034:	687b      	ldr	r3, [r7, #4]
}
 801e036:	4618      	mov	r0, r3
 801e038:	370c      	adds	r7, #12
 801e03a:	46bd      	mov	sp, r7
 801e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e040:	4770      	bx	lr

0801e042 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801e042:	b480      	push	{r7}
 801e044:	b083      	sub	sp, #12
 801e046:	af00      	add	r7, sp, #0
 801e048:	6078      	str	r0, [r7, #4]
    return next_;
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	68db      	ldr	r3, [r3, #12]
}
 801e04e:	4618      	mov	r0, r3
 801e050:	370c      	adds	r7, #12
 801e052:	46bd      	mov	sp, r7
 801e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e058:	4770      	bx	lr

0801e05a <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801e05a:	b480      	push	{r7}
 801e05c:	b083      	sub	sp, #12
 801e05e:	af00      	add	r7, sp, #0
 801e060:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	2201      	movs	r2, #1
 801e066:	721a      	strb	r2, [r3, #8]
}
 801e068:	bf00      	nop
 801e06a:	370c      	adds	r7, #12
 801e06c:	46bd      	mov	sp, r7
 801e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e072:	4770      	bx	lr

0801e074 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801e074:	b480      	push	{r7}
 801e076:	b083      	sub	sp, #12
 801e078:	af00      	add	r7, sp, #0
 801e07a:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	2201      	movs	r2, #1
 801e080:	725a      	strb	r2, [r3, #9]
}
 801e082:	bf00      	nop
 801e084:	370c      	adds	r7, #12
 801e086:	46bd      	mov	sp, r7
 801e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e08c:	4770      	bx	lr

0801e08e <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801e08e:	b580      	push	{r7, lr}
 801e090:	b084      	sub	sp, #16
 801e092:	af00      	add	r7, sp, #0
 801e094:	6078      	str	r0, [r7, #4]
 801e096:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801e098:	2300      	movs	r3, #0
 801e09a:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	7a1b      	ldrb	r3, [r3, #8]
 801e0a0:	2b00      	cmp	r3, #0
 801e0a2:	d007      	beq.n	801e0b4 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	4619      	mov	r1, r3
 801e0a8:	6838      	ldr	r0, [r7, #0]
 801e0aa:	f7ed fd22 	bl	800baf2 <_ZeqRK12SimpleStringS1_>
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	73fb      	strb	r3, [r7, #15]
 801e0b2:	e006      	b.n	801e0c2 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	4619      	mov	r1, r3
 801e0b8:	6838      	ldr	r0, [r7, #0]
 801e0ba:	f7ed f9d4 	bl	800b466 <_ZNK12SimpleString8containsERKS_>
 801e0be:	4603      	mov	r3, r0
 801e0c0:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	7a5b      	ldrb	r3, [r3, #9]
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	d004      	beq.n	801e0d4 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801e0ca:	7bfb      	ldrb	r3, [r7, #15]
 801e0cc:	f083 0301 	eor.w	r3, r3, #1
 801e0d0:	b2db      	uxtb	r3, r3
 801e0d2:	e005      	b.n	801e0e0 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801e0d4:	7bfb      	ldrb	r3, [r7, #15]
 801e0d6:	2b00      	cmp	r3, #0
 801e0d8:	bf14      	ite	ne
 801e0da:	2301      	movne	r3, #1
 801e0dc:	2300      	moveq	r3, #0
 801e0de:	b2db      	uxtb	r3, r3
}
 801e0e0:	4618      	mov	r0, r3
 801e0e2:	3710      	adds	r7, #16
 801e0e4:	46bd      	mov	sp, r7
 801e0e6:	bd80      	pop	{r7, pc}

0801e0e8 <__cxa_guard_acquire>:
 801e0e8:	6803      	ldr	r3, [r0, #0]
 801e0ea:	07db      	lsls	r3, r3, #31
 801e0ec:	d406      	bmi.n	801e0fc <__cxa_guard_acquire+0x14>
 801e0ee:	7843      	ldrb	r3, [r0, #1]
 801e0f0:	b103      	cbz	r3, 801e0f4 <__cxa_guard_acquire+0xc>
 801e0f2:	deff      	udf	#255	; 0xff
 801e0f4:	2301      	movs	r3, #1
 801e0f6:	7043      	strb	r3, [r0, #1]
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	4770      	bx	lr
 801e0fc:	2000      	movs	r0, #0
 801e0fe:	4770      	bx	lr

0801e100 <__cxa_guard_release>:
 801e100:	2301      	movs	r3, #1
 801e102:	6003      	str	r3, [r0, #0]
 801e104:	4770      	bx	lr

0801e106 <__cxa_pure_virtual>:
 801e106:	b508      	push	{r3, lr}
 801e108:	f000 f80c 	bl	801e124 <_ZSt9terminatev>

0801e10c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801e10c:	b508      	push	{r3, lr}
 801e10e:	4780      	blx	r0
 801e110:	f000 f816 	bl	801e140 <abort>

0801e114 <_ZSt13get_terminatev>:
 801e114:	4b02      	ldr	r3, [pc, #8]	; (801e120 <_ZSt13get_terminatev+0xc>)
 801e116:	6818      	ldr	r0, [r3, #0]
 801e118:	f3bf 8f5b 	dmb	ish
 801e11c:	4770      	bx	lr
 801e11e:	bf00      	nop
 801e120:	20000104 	.word	0x20000104

0801e124 <_ZSt9terminatev>:
 801e124:	b508      	push	{r3, lr}
 801e126:	f7ff fff5 	bl	801e114 <_ZSt13get_terminatev>
 801e12a:	f7ff ffef 	bl	801e10c <_ZN10__cxxabiv111__terminateEPFvvE>

0801e12e <fabs>:
 801e12e:	ec51 0b10 	vmov	r0, r1, d0
 801e132:	ee10 2a10 	vmov	r2, s0
 801e136:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e13a:	ec43 2b10 	vmov	d0, r2, r3
 801e13e:	4770      	bx	lr

0801e140 <abort>:
 801e140:	b508      	push	{r3, lr}
 801e142:	2006      	movs	r0, #6
 801e144:	f000 ff88 	bl	801f058 <raise>
 801e148:	2001      	movs	r0, #1
 801e14a:	f7e2 fe1a 	bl	8000d82 <_exit>

0801e14e <atexit>:
 801e14e:	2300      	movs	r3, #0
 801e150:	4601      	mov	r1, r0
 801e152:	461a      	mov	r2, r3
 801e154:	4618      	mov	r0, r3
 801e156:	f002 b93f 	b.w	80203d8 <__register_exitproc>
	...

0801e15c <calloc>:
 801e15c:	4b02      	ldr	r3, [pc, #8]	; (801e168 <calloc+0xc>)
 801e15e:	460a      	mov	r2, r1
 801e160:	4601      	mov	r1, r0
 801e162:	6818      	ldr	r0, [r3, #0]
 801e164:	f000 bde8 	b.w	801ed38 <_calloc_r>
 801e168:	20000108 	.word	0x20000108

0801e16c <__errno>:
 801e16c:	4b01      	ldr	r3, [pc, #4]	; (801e174 <__errno+0x8>)
 801e16e:	6818      	ldr	r0, [r3, #0]
 801e170:	4770      	bx	lr
 801e172:	bf00      	nop
 801e174:	20000108 	.word	0x20000108

0801e178 <_fclose_r>:
 801e178:	b570      	push	{r4, r5, r6, lr}
 801e17a:	4605      	mov	r5, r0
 801e17c:	460c      	mov	r4, r1
 801e17e:	b911      	cbnz	r1, 801e186 <_fclose_r+0xe>
 801e180:	2600      	movs	r6, #0
 801e182:	4630      	mov	r0, r6
 801e184:	bd70      	pop	{r4, r5, r6, pc}
 801e186:	b118      	cbz	r0, 801e190 <_fclose_r+0x18>
 801e188:	6983      	ldr	r3, [r0, #24]
 801e18a:	b90b      	cbnz	r3, 801e190 <_fclose_r+0x18>
 801e18c:	f000 f994 	bl	801e4b8 <__sinit>
 801e190:	4b2c      	ldr	r3, [pc, #176]	; (801e244 <_fclose_r+0xcc>)
 801e192:	429c      	cmp	r4, r3
 801e194:	d114      	bne.n	801e1c0 <_fclose_r+0x48>
 801e196:	686c      	ldr	r4, [r5, #4]
 801e198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e19a:	07d8      	lsls	r0, r3, #31
 801e19c:	d405      	bmi.n	801e1aa <_fclose_r+0x32>
 801e19e:	89a3      	ldrh	r3, [r4, #12]
 801e1a0:	0599      	lsls	r1, r3, #22
 801e1a2:	d402      	bmi.n	801e1aa <_fclose_r+0x32>
 801e1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e1a6:	f000 fd3a 	bl	801ec1e <__retarget_lock_acquire_recursive>
 801e1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1ae:	b98b      	cbnz	r3, 801e1d4 <_fclose_r+0x5c>
 801e1b0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801e1b2:	f016 0601 	ands.w	r6, r6, #1
 801e1b6:	d1e3      	bne.n	801e180 <_fclose_r+0x8>
 801e1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e1ba:	f000 fd32 	bl	801ec22 <__retarget_lock_release_recursive>
 801e1be:	e7e0      	b.n	801e182 <_fclose_r+0xa>
 801e1c0:	4b21      	ldr	r3, [pc, #132]	; (801e248 <_fclose_r+0xd0>)
 801e1c2:	429c      	cmp	r4, r3
 801e1c4:	d101      	bne.n	801e1ca <_fclose_r+0x52>
 801e1c6:	68ac      	ldr	r4, [r5, #8]
 801e1c8:	e7e6      	b.n	801e198 <_fclose_r+0x20>
 801e1ca:	4b20      	ldr	r3, [pc, #128]	; (801e24c <_fclose_r+0xd4>)
 801e1cc:	429c      	cmp	r4, r3
 801e1ce:	bf08      	it	eq
 801e1d0:	68ec      	ldreq	r4, [r5, #12]
 801e1d2:	e7e1      	b.n	801e198 <_fclose_r+0x20>
 801e1d4:	4621      	mov	r1, r4
 801e1d6:	4628      	mov	r0, r5
 801e1d8:	f000 f842 	bl	801e260 <__sflush_r>
 801e1dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e1de:	4606      	mov	r6, r0
 801e1e0:	b133      	cbz	r3, 801e1f0 <_fclose_r+0x78>
 801e1e2:	6a21      	ldr	r1, [r4, #32]
 801e1e4:	4628      	mov	r0, r5
 801e1e6:	4798      	blx	r3
 801e1e8:	2800      	cmp	r0, #0
 801e1ea:	bfb8      	it	lt
 801e1ec:	f04f 36ff 	movlt.w	r6, #4294967295
 801e1f0:	89a3      	ldrh	r3, [r4, #12]
 801e1f2:	061a      	lsls	r2, r3, #24
 801e1f4:	d503      	bpl.n	801e1fe <_fclose_r+0x86>
 801e1f6:	6921      	ldr	r1, [r4, #16]
 801e1f8:	4628      	mov	r0, r5
 801e1fa:	f000 fdad 	bl	801ed58 <_free_r>
 801e1fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e200:	b141      	cbz	r1, 801e214 <_fclose_r+0x9c>
 801e202:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e206:	4299      	cmp	r1, r3
 801e208:	d002      	beq.n	801e210 <_fclose_r+0x98>
 801e20a:	4628      	mov	r0, r5
 801e20c:	f000 fda4 	bl	801ed58 <_free_r>
 801e210:	2300      	movs	r3, #0
 801e212:	6363      	str	r3, [r4, #52]	; 0x34
 801e214:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e216:	b121      	cbz	r1, 801e222 <_fclose_r+0xaa>
 801e218:	4628      	mov	r0, r5
 801e21a:	f000 fd9d 	bl	801ed58 <_free_r>
 801e21e:	2300      	movs	r3, #0
 801e220:	64a3      	str	r3, [r4, #72]	; 0x48
 801e222:	f000 f931 	bl	801e488 <__sfp_lock_acquire>
 801e226:	2300      	movs	r3, #0
 801e228:	81a3      	strh	r3, [r4, #12]
 801e22a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e22c:	07db      	lsls	r3, r3, #31
 801e22e:	d402      	bmi.n	801e236 <_fclose_r+0xbe>
 801e230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e232:	f000 fcf6 	bl	801ec22 <__retarget_lock_release_recursive>
 801e236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e238:	f000 fcef 	bl	801ec1a <__retarget_lock_close_recursive>
 801e23c:	f000 f92a 	bl	801e494 <__sfp_lock_release>
 801e240:	e79f      	b.n	801e182 <_fclose_r+0xa>
 801e242:	bf00      	nop
 801e244:	08027160 	.word	0x08027160
 801e248:	08027180 	.word	0x08027180
 801e24c:	08027140 	.word	0x08027140

0801e250 <fclose>:
 801e250:	4b02      	ldr	r3, [pc, #8]	; (801e25c <fclose+0xc>)
 801e252:	4601      	mov	r1, r0
 801e254:	6818      	ldr	r0, [r3, #0]
 801e256:	f7ff bf8f 	b.w	801e178 <_fclose_r>
 801e25a:	bf00      	nop
 801e25c:	20000108 	.word	0x20000108

0801e260 <__sflush_r>:
 801e260:	898a      	ldrh	r2, [r1, #12]
 801e262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e266:	4605      	mov	r5, r0
 801e268:	0710      	lsls	r0, r2, #28
 801e26a:	460c      	mov	r4, r1
 801e26c:	d458      	bmi.n	801e320 <__sflush_r+0xc0>
 801e26e:	684b      	ldr	r3, [r1, #4]
 801e270:	2b00      	cmp	r3, #0
 801e272:	dc05      	bgt.n	801e280 <__sflush_r+0x20>
 801e274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e276:	2b00      	cmp	r3, #0
 801e278:	dc02      	bgt.n	801e280 <__sflush_r+0x20>
 801e27a:	2000      	movs	r0, #0
 801e27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e282:	2e00      	cmp	r6, #0
 801e284:	d0f9      	beq.n	801e27a <__sflush_r+0x1a>
 801e286:	2300      	movs	r3, #0
 801e288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e28c:	682f      	ldr	r7, [r5, #0]
 801e28e:	602b      	str	r3, [r5, #0]
 801e290:	d032      	beq.n	801e2f8 <__sflush_r+0x98>
 801e292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e294:	89a3      	ldrh	r3, [r4, #12]
 801e296:	075a      	lsls	r2, r3, #29
 801e298:	d505      	bpl.n	801e2a6 <__sflush_r+0x46>
 801e29a:	6863      	ldr	r3, [r4, #4]
 801e29c:	1ac0      	subs	r0, r0, r3
 801e29e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e2a0:	b10b      	cbz	r3, 801e2a6 <__sflush_r+0x46>
 801e2a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e2a4:	1ac0      	subs	r0, r0, r3
 801e2a6:	2300      	movs	r3, #0
 801e2a8:	4602      	mov	r2, r0
 801e2aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e2ac:	6a21      	ldr	r1, [r4, #32]
 801e2ae:	4628      	mov	r0, r5
 801e2b0:	47b0      	blx	r6
 801e2b2:	1c43      	adds	r3, r0, #1
 801e2b4:	89a3      	ldrh	r3, [r4, #12]
 801e2b6:	d106      	bne.n	801e2c6 <__sflush_r+0x66>
 801e2b8:	6829      	ldr	r1, [r5, #0]
 801e2ba:	291d      	cmp	r1, #29
 801e2bc:	d82c      	bhi.n	801e318 <__sflush_r+0xb8>
 801e2be:	4a2a      	ldr	r2, [pc, #168]	; (801e368 <__sflush_r+0x108>)
 801e2c0:	40ca      	lsrs	r2, r1
 801e2c2:	07d6      	lsls	r6, r2, #31
 801e2c4:	d528      	bpl.n	801e318 <__sflush_r+0xb8>
 801e2c6:	2200      	movs	r2, #0
 801e2c8:	6062      	str	r2, [r4, #4]
 801e2ca:	04d9      	lsls	r1, r3, #19
 801e2cc:	6922      	ldr	r2, [r4, #16]
 801e2ce:	6022      	str	r2, [r4, #0]
 801e2d0:	d504      	bpl.n	801e2dc <__sflush_r+0x7c>
 801e2d2:	1c42      	adds	r2, r0, #1
 801e2d4:	d101      	bne.n	801e2da <__sflush_r+0x7a>
 801e2d6:	682b      	ldr	r3, [r5, #0]
 801e2d8:	b903      	cbnz	r3, 801e2dc <__sflush_r+0x7c>
 801e2da:	6560      	str	r0, [r4, #84]	; 0x54
 801e2dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e2de:	602f      	str	r7, [r5, #0]
 801e2e0:	2900      	cmp	r1, #0
 801e2e2:	d0ca      	beq.n	801e27a <__sflush_r+0x1a>
 801e2e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e2e8:	4299      	cmp	r1, r3
 801e2ea:	d002      	beq.n	801e2f2 <__sflush_r+0x92>
 801e2ec:	4628      	mov	r0, r5
 801e2ee:	f000 fd33 	bl	801ed58 <_free_r>
 801e2f2:	2000      	movs	r0, #0
 801e2f4:	6360      	str	r0, [r4, #52]	; 0x34
 801e2f6:	e7c1      	b.n	801e27c <__sflush_r+0x1c>
 801e2f8:	6a21      	ldr	r1, [r4, #32]
 801e2fa:	2301      	movs	r3, #1
 801e2fc:	4628      	mov	r0, r5
 801e2fe:	47b0      	blx	r6
 801e300:	1c41      	adds	r1, r0, #1
 801e302:	d1c7      	bne.n	801e294 <__sflush_r+0x34>
 801e304:	682b      	ldr	r3, [r5, #0]
 801e306:	2b00      	cmp	r3, #0
 801e308:	d0c4      	beq.n	801e294 <__sflush_r+0x34>
 801e30a:	2b1d      	cmp	r3, #29
 801e30c:	d001      	beq.n	801e312 <__sflush_r+0xb2>
 801e30e:	2b16      	cmp	r3, #22
 801e310:	d101      	bne.n	801e316 <__sflush_r+0xb6>
 801e312:	602f      	str	r7, [r5, #0]
 801e314:	e7b1      	b.n	801e27a <__sflush_r+0x1a>
 801e316:	89a3      	ldrh	r3, [r4, #12]
 801e318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e31c:	81a3      	strh	r3, [r4, #12]
 801e31e:	e7ad      	b.n	801e27c <__sflush_r+0x1c>
 801e320:	690f      	ldr	r7, [r1, #16]
 801e322:	2f00      	cmp	r7, #0
 801e324:	d0a9      	beq.n	801e27a <__sflush_r+0x1a>
 801e326:	0793      	lsls	r3, r2, #30
 801e328:	680e      	ldr	r6, [r1, #0]
 801e32a:	bf08      	it	eq
 801e32c:	694b      	ldreq	r3, [r1, #20]
 801e32e:	600f      	str	r7, [r1, #0]
 801e330:	bf18      	it	ne
 801e332:	2300      	movne	r3, #0
 801e334:	eba6 0807 	sub.w	r8, r6, r7
 801e338:	608b      	str	r3, [r1, #8]
 801e33a:	f1b8 0f00 	cmp.w	r8, #0
 801e33e:	dd9c      	ble.n	801e27a <__sflush_r+0x1a>
 801e340:	6a21      	ldr	r1, [r4, #32]
 801e342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e344:	4643      	mov	r3, r8
 801e346:	463a      	mov	r2, r7
 801e348:	4628      	mov	r0, r5
 801e34a:	47b0      	blx	r6
 801e34c:	2800      	cmp	r0, #0
 801e34e:	dc06      	bgt.n	801e35e <__sflush_r+0xfe>
 801e350:	89a3      	ldrh	r3, [r4, #12]
 801e352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e356:	81a3      	strh	r3, [r4, #12]
 801e358:	f04f 30ff 	mov.w	r0, #4294967295
 801e35c:	e78e      	b.n	801e27c <__sflush_r+0x1c>
 801e35e:	4407      	add	r7, r0
 801e360:	eba8 0800 	sub.w	r8, r8, r0
 801e364:	e7e9      	b.n	801e33a <__sflush_r+0xda>
 801e366:	bf00      	nop
 801e368:	20400001 	.word	0x20400001

0801e36c <_fflush_r>:
 801e36c:	b538      	push	{r3, r4, r5, lr}
 801e36e:	690b      	ldr	r3, [r1, #16]
 801e370:	4605      	mov	r5, r0
 801e372:	460c      	mov	r4, r1
 801e374:	b913      	cbnz	r3, 801e37c <_fflush_r+0x10>
 801e376:	2500      	movs	r5, #0
 801e378:	4628      	mov	r0, r5
 801e37a:	bd38      	pop	{r3, r4, r5, pc}
 801e37c:	b118      	cbz	r0, 801e386 <_fflush_r+0x1a>
 801e37e:	6983      	ldr	r3, [r0, #24]
 801e380:	b90b      	cbnz	r3, 801e386 <_fflush_r+0x1a>
 801e382:	f000 f899 	bl	801e4b8 <__sinit>
 801e386:	4b14      	ldr	r3, [pc, #80]	; (801e3d8 <_fflush_r+0x6c>)
 801e388:	429c      	cmp	r4, r3
 801e38a:	d11b      	bne.n	801e3c4 <_fflush_r+0x58>
 801e38c:	686c      	ldr	r4, [r5, #4]
 801e38e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e392:	2b00      	cmp	r3, #0
 801e394:	d0ef      	beq.n	801e376 <_fflush_r+0xa>
 801e396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e398:	07d0      	lsls	r0, r2, #31
 801e39a:	d404      	bmi.n	801e3a6 <_fflush_r+0x3a>
 801e39c:	0599      	lsls	r1, r3, #22
 801e39e:	d402      	bmi.n	801e3a6 <_fflush_r+0x3a>
 801e3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3a2:	f000 fc3c 	bl	801ec1e <__retarget_lock_acquire_recursive>
 801e3a6:	4628      	mov	r0, r5
 801e3a8:	4621      	mov	r1, r4
 801e3aa:	f7ff ff59 	bl	801e260 <__sflush_r>
 801e3ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e3b0:	07da      	lsls	r2, r3, #31
 801e3b2:	4605      	mov	r5, r0
 801e3b4:	d4e0      	bmi.n	801e378 <_fflush_r+0xc>
 801e3b6:	89a3      	ldrh	r3, [r4, #12]
 801e3b8:	059b      	lsls	r3, r3, #22
 801e3ba:	d4dd      	bmi.n	801e378 <_fflush_r+0xc>
 801e3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3be:	f000 fc30 	bl	801ec22 <__retarget_lock_release_recursive>
 801e3c2:	e7d9      	b.n	801e378 <_fflush_r+0xc>
 801e3c4:	4b05      	ldr	r3, [pc, #20]	; (801e3dc <_fflush_r+0x70>)
 801e3c6:	429c      	cmp	r4, r3
 801e3c8:	d101      	bne.n	801e3ce <_fflush_r+0x62>
 801e3ca:	68ac      	ldr	r4, [r5, #8]
 801e3cc:	e7df      	b.n	801e38e <_fflush_r+0x22>
 801e3ce:	4b04      	ldr	r3, [pc, #16]	; (801e3e0 <_fflush_r+0x74>)
 801e3d0:	429c      	cmp	r4, r3
 801e3d2:	bf08      	it	eq
 801e3d4:	68ec      	ldreq	r4, [r5, #12]
 801e3d6:	e7da      	b.n	801e38e <_fflush_r+0x22>
 801e3d8:	08027160 	.word	0x08027160
 801e3dc:	08027180 	.word	0x08027180
 801e3e0:	08027140 	.word	0x08027140

0801e3e4 <fflush>:
 801e3e4:	4601      	mov	r1, r0
 801e3e6:	b920      	cbnz	r0, 801e3f2 <fflush+0xe>
 801e3e8:	4b04      	ldr	r3, [pc, #16]	; (801e3fc <fflush+0x18>)
 801e3ea:	4905      	ldr	r1, [pc, #20]	; (801e400 <fflush+0x1c>)
 801e3ec:	6818      	ldr	r0, [r3, #0]
 801e3ee:	f000 babb 	b.w	801e968 <_fwalk_reent>
 801e3f2:	4b04      	ldr	r3, [pc, #16]	; (801e404 <fflush+0x20>)
 801e3f4:	6818      	ldr	r0, [r3, #0]
 801e3f6:	f7ff bfb9 	b.w	801e36c <_fflush_r>
 801e3fa:	bf00      	nop
 801e3fc:	080271a0 	.word	0x080271a0
 801e400:	0801e36d 	.word	0x0801e36d
 801e404:	20000108 	.word	0x20000108

0801e408 <std>:
 801e408:	2300      	movs	r3, #0
 801e40a:	b510      	push	{r4, lr}
 801e40c:	4604      	mov	r4, r0
 801e40e:	e9c0 3300 	strd	r3, r3, [r0]
 801e412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e416:	6083      	str	r3, [r0, #8]
 801e418:	8181      	strh	r1, [r0, #12]
 801e41a:	6643      	str	r3, [r0, #100]	; 0x64
 801e41c:	81c2      	strh	r2, [r0, #14]
 801e41e:	6183      	str	r3, [r0, #24]
 801e420:	4619      	mov	r1, r3
 801e422:	2208      	movs	r2, #8
 801e424:	305c      	adds	r0, #92	; 0x5c
 801e426:	f000 fc7f 	bl	801ed28 <memset>
 801e42a:	4b05      	ldr	r3, [pc, #20]	; (801e440 <std+0x38>)
 801e42c:	6263      	str	r3, [r4, #36]	; 0x24
 801e42e:	4b05      	ldr	r3, [pc, #20]	; (801e444 <std+0x3c>)
 801e430:	62a3      	str	r3, [r4, #40]	; 0x28
 801e432:	4b05      	ldr	r3, [pc, #20]	; (801e448 <std+0x40>)
 801e434:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e436:	4b05      	ldr	r3, [pc, #20]	; (801e44c <std+0x44>)
 801e438:	6224      	str	r4, [r4, #32]
 801e43a:	6323      	str	r3, [r4, #48]	; 0x30
 801e43c:	bd10      	pop	{r4, pc}
 801e43e:	bf00      	nop
 801e440:	0801f0d1 	.word	0x0801f0d1
 801e444:	0801f0f7 	.word	0x0801f0f7
 801e448:	0801f12f 	.word	0x0801f12f
 801e44c:	0801f153 	.word	0x0801f153

0801e450 <_cleanup_r>:
 801e450:	4901      	ldr	r1, [pc, #4]	; (801e458 <_cleanup_r+0x8>)
 801e452:	f000 ba89 	b.w	801e968 <_fwalk_reent>
 801e456:	bf00      	nop
 801e458:	0801e36d 	.word	0x0801e36d

0801e45c <__sfmoreglue>:
 801e45c:	b570      	push	{r4, r5, r6, lr}
 801e45e:	1e4a      	subs	r2, r1, #1
 801e460:	2568      	movs	r5, #104	; 0x68
 801e462:	4355      	muls	r5, r2
 801e464:	460e      	mov	r6, r1
 801e466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e46a:	f000 fcc5 	bl	801edf8 <_malloc_r>
 801e46e:	4604      	mov	r4, r0
 801e470:	b140      	cbz	r0, 801e484 <__sfmoreglue+0x28>
 801e472:	2100      	movs	r1, #0
 801e474:	e9c0 1600 	strd	r1, r6, [r0]
 801e478:	300c      	adds	r0, #12
 801e47a:	60a0      	str	r0, [r4, #8]
 801e47c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e480:	f000 fc52 	bl	801ed28 <memset>
 801e484:	4620      	mov	r0, r4
 801e486:	bd70      	pop	{r4, r5, r6, pc}

0801e488 <__sfp_lock_acquire>:
 801e488:	4801      	ldr	r0, [pc, #4]	; (801e490 <__sfp_lock_acquire+0x8>)
 801e48a:	f000 bbc8 	b.w	801ec1e <__retarget_lock_acquire_recursive>
 801e48e:	bf00      	nop
 801e490:	20000e6c 	.word	0x20000e6c

0801e494 <__sfp_lock_release>:
 801e494:	4801      	ldr	r0, [pc, #4]	; (801e49c <__sfp_lock_release+0x8>)
 801e496:	f000 bbc4 	b.w	801ec22 <__retarget_lock_release_recursive>
 801e49a:	bf00      	nop
 801e49c:	20000e6c 	.word	0x20000e6c

0801e4a0 <__sinit_lock_acquire>:
 801e4a0:	4801      	ldr	r0, [pc, #4]	; (801e4a8 <__sinit_lock_acquire+0x8>)
 801e4a2:	f000 bbbc 	b.w	801ec1e <__retarget_lock_acquire_recursive>
 801e4a6:	bf00      	nop
 801e4a8:	20000e67 	.word	0x20000e67

0801e4ac <__sinit_lock_release>:
 801e4ac:	4801      	ldr	r0, [pc, #4]	; (801e4b4 <__sinit_lock_release+0x8>)
 801e4ae:	f000 bbb8 	b.w	801ec22 <__retarget_lock_release_recursive>
 801e4b2:	bf00      	nop
 801e4b4:	20000e67 	.word	0x20000e67

0801e4b8 <__sinit>:
 801e4b8:	b510      	push	{r4, lr}
 801e4ba:	4604      	mov	r4, r0
 801e4bc:	f7ff fff0 	bl	801e4a0 <__sinit_lock_acquire>
 801e4c0:	69a3      	ldr	r3, [r4, #24]
 801e4c2:	b11b      	cbz	r3, 801e4cc <__sinit+0x14>
 801e4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4c8:	f7ff bff0 	b.w	801e4ac <__sinit_lock_release>
 801e4cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e4d0:	6523      	str	r3, [r4, #80]	; 0x50
 801e4d2:	4b13      	ldr	r3, [pc, #76]	; (801e520 <__sinit+0x68>)
 801e4d4:	4a13      	ldr	r2, [pc, #76]	; (801e524 <__sinit+0x6c>)
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	62a2      	str	r2, [r4, #40]	; 0x28
 801e4da:	42a3      	cmp	r3, r4
 801e4dc:	bf04      	itt	eq
 801e4de:	2301      	moveq	r3, #1
 801e4e0:	61a3      	streq	r3, [r4, #24]
 801e4e2:	4620      	mov	r0, r4
 801e4e4:	f000 f820 	bl	801e528 <__sfp>
 801e4e8:	6060      	str	r0, [r4, #4]
 801e4ea:	4620      	mov	r0, r4
 801e4ec:	f000 f81c 	bl	801e528 <__sfp>
 801e4f0:	60a0      	str	r0, [r4, #8]
 801e4f2:	4620      	mov	r0, r4
 801e4f4:	f000 f818 	bl	801e528 <__sfp>
 801e4f8:	2200      	movs	r2, #0
 801e4fa:	60e0      	str	r0, [r4, #12]
 801e4fc:	2104      	movs	r1, #4
 801e4fe:	6860      	ldr	r0, [r4, #4]
 801e500:	f7ff ff82 	bl	801e408 <std>
 801e504:	68a0      	ldr	r0, [r4, #8]
 801e506:	2201      	movs	r2, #1
 801e508:	2109      	movs	r1, #9
 801e50a:	f7ff ff7d 	bl	801e408 <std>
 801e50e:	68e0      	ldr	r0, [r4, #12]
 801e510:	2202      	movs	r2, #2
 801e512:	2112      	movs	r1, #18
 801e514:	f7ff ff78 	bl	801e408 <std>
 801e518:	2301      	movs	r3, #1
 801e51a:	61a3      	str	r3, [r4, #24]
 801e51c:	e7d2      	b.n	801e4c4 <__sinit+0xc>
 801e51e:	bf00      	nop
 801e520:	080271a0 	.word	0x080271a0
 801e524:	0801e451 	.word	0x0801e451

0801e528 <__sfp>:
 801e528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e52a:	4607      	mov	r7, r0
 801e52c:	f7ff ffac 	bl	801e488 <__sfp_lock_acquire>
 801e530:	4b1e      	ldr	r3, [pc, #120]	; (801e5ac <__sfp+0x84>)
 801e532:	681e      	ldr	r6, [r3, #0]
 801e534:	69b3      	ldr	r3, [r6, #24]
 801e536:	b913      	cbnz	r3, 801e53e <__sfp+0x16>
 801e538:	4630      	mov	r0, r6
 801e53a:	f7ff ffbd 	bl	801e4b8 <__sinit>
 801e53e:	3648      	adds	r6, #72	; 0x48
 801e540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e544:	3b01      	subs	r3, #1
 801e546:	d503      	bpl.n	801e550 <__sfp+0x28>
 801e548:	6833      	ldr	r3, [r6, #0]
 801e54a:	b30b      	cbz	r3, 801e590 <__sfp+0x68>
 801e54c:	6836      	ldr	r6, [r6, #0]
 801e54e:	e7f7      	b.n	801e540 <__sfp+0x18>
 801e550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e554:	b9d5      	cbnz	r5, 801e58c <__sfp+0x64>
 801e556:	4b16      	ldr	r3, [pc, #88]	; (801e5b0 <__sfp+0x88>)
 801e558:	60e3      	str	r3, [r4, #12]
 801e55a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e55e:	6665      	str	r5, [r4, #100]	; 0x64
 801e560:	f000 fb5a 	bl	801ec18 <__retarget_lock_init_recursive>
 801e564:	f7ff ff96 	bl	801e494 <__sfp_lock_release>
 801e568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e56c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e570:	6025      	str	r5, [r4, #0]
 801e572:	61a5      	str	r5, [r4, #24]
 801e574:	2208      	movs	r2, #8
 801e576:	4629      	mov	r1, r5
 801e578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e57c:	f000 fbd4 	bl	801ed28 <memset>
 801e580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e588:	4620      	mov	r0, r4
 801e58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e58c:	3468      	adds	r4, #104	; 0x68
 801e58e:	e7d9      	b.n	801e544 <__sfp+0x1c>
 801e590:	2104      	movs	r1, #4
 801e592:	4638      	mov	r0, r7
 801e594:	f7ff ff62 	bl	801e45c <__sfmoreglue>
 801e598:	4604      	mov	r4, r0
 801e59a:	6030      	str	r0, [r6, #0]
 801e59c:	2800      	cmp	r0, #0
 801e59e:	d1d5      	bne.n	801e54c <__sfp+0x24>
 801e5a0:	f7ff ff78 	bl	801e494 <__sfp_lock_release>
 801e5a4:	230c      	movs	r3, #12
 801e5a6:	603b      	str	r3, [r7, #0]
 801e5a8:	e7ee      	b.n	801e588 <__sfp+0x60>
 801e5aa:	bf00      	nop
 801e5ac:	080271a0 	.word	0x080271a0
 801e5b0:	ffff0001 	.word	0xffff0001

0801e5b4 <_fopen_r>:
 801e5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e5b6:	460f      	mov	r7, r1
 801e5b8:	4611      	mov	r1, r2
 801e5ba:	aa01      	add	r2, sp, #4
 801e5bc:	4605      	mov	r5, r0
 801e5be:	f001 ff9f 	bl	8020500 <__sflags>
 801e5c2:	4606      	mov	r6, r0
 801e5c4:	b918      	cbnz	r0, 801e5ce <_fopen_r+0x1a>
 801e5c6:	2400      	movs	r4, #0
 801e5c8:	4620      	mov	r0, r4
 801e5ca:	b003      	add	sp, #12
 801e5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5ce:	4628      	mov	r0, r5
 801e5d0:	f7ff ffaa 	bl	801e528 <__sfp>
 801e5d4:	4604      	mov	r4, r0
 801e5d6:	2800      	cmp	r0, #0
 801e5d8:	d0f5      	beq.n	801e5c6 <_fopen_r+0x12>
 801e5da:	4639      	mov	r1, r7
 801e5dc:	9a01      	ldr	r2, [sp, #4]
 801e5de:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801e5e2:	4628      	mov	r0, r5
 801e5e4:	f000 fc62 	bl	801eeac <_open_r>
 801e5e8:	1e07      	subs	r7, r0, #0
 801e5ea:	da09      	bge.n	801e600 <_fopen_r+0x4c>
 801e5ec:	2500      	movs	r5, #0
 801e5ee:	f7ff ff4b 	bl	801e488 <__sfp_lock_acquire>
 801e5f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e5f4:	81a5      	strh	r5, [r4, #12]
 801e5f6:	f000 fb10 	bl	801ec1a <__retarget_lock_close_recursive>
 801e5fa:	f7ff ff4b 	bl	801e494 <__sfp_lock_release>
 801e5fe:	e7e2      	b.n	801e5c6 <_fopen_r+0x12>
 801e600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e602:	07db      	lsls	r3, r3, #31
 801e604:	d405      	bmi.n	801e612 <_fopen_r+0x5e>
 801e606:	89a3      	ldrh	r3, [r4, #12]
 801e608:	0598      	lsls	r0, r3, #22
 801e60a:	d402      	bmi.n	801e612 <_fopen_r+0x5e>
 801e60c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e60e:	f000 fb06 	bl	801ec1e <__retarget_lock_acquire_recursive>
 801e612:	4b0e      	ldr	r3, [pc, #56]	; (801e64c <_fopen_r+0x98>)
 801e614:	6263      	str	r3, [r4, #36]	; 0x24
 801e616:	4b0e      	ldr	r3, [pc, #56]	; (801e650 <_fopen_r+0x9c>)
 801e618:	62a3      	str	r3, [r4, #40]	; 0x28
 801e61a:	4b0e      	ldr	r3, [pc, #56]	; (801e654 <_fopen_r+0xa0>)
 801e61c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e61e:	05f1      	lsls	r1, r6, #23
 801e620:	4b0d      	ldr	r3, [pc, #52]	; (801e658 <_fopen_r+0xa4>)
 801e622:	81e7      	strh	r7, [r4, #14]
 801e624:	81a6      	strh	r6, [r4, #12]
 801e626:	6224      	str	r4, [r4, #32]
 801e628:	6323      	str	r3, [r4, #48]	; 0x30
 801e62a:	d505      	bpl.n	801e638 <_fopen_r+0x84>
 801e62c:	2302      	movs	r3, #2
 801e62e:	2200      	movs	r2, #0
 801e630:	4621      	mov	r1, r4
 801e632:	4628      	mov	r0, r5
 801e634:	f000 f888 	bl	801e748 <_fseek_r>
 801e638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e63a:	07da      	lsls	r2, r3, #31
 801e63c:	d4c4      	bmi.n	801e5c8 <_fopen_r+0x14>
 801e63e:	89a3      	ldrh	r3, [r4, #12]
 801e640:	059b      	lsls	r3, r3, #22
 801e642:	d4c1      	bmi.n	801e5c8 <_fopen_r+0x14>
 801e644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e646:	f000 faec 	bl	801ec22 <__retarget_lock_release_recursive>
 801e64a:	e7bd      	b.n	801e5c8 <_fopen_r+0x14>
 801e64c:	0801f0d1 	.word	0x0801f0d1
 801e650:	0801f0f7 	.word	0x0801f0f7
 801e654:	0801f12f 	.word	0x0801f12f
 801e658:	0801f153 	.word	0x0801f153

0801e65c <fopen>:
 801e65c:	4b02      	ldr	r3, [pc, #8]	; (801e668 <fopen+0xc>)
 801e65e:	460a      	mov	r2, r1
 801e660:	4601      	mov	r1, r0
 801e662:	6818      	ldr	r0, [r3, #0]
 801e664:	f7ff bfa6 	b.w	801e5b4 <_fopen_r>
 801e668:	20000108 	.word	0x20000108

0801e66c <_fputs_r>:
 801e66c:	b570      	push	{r4, r5, r6, lr}
 801e66e:	460e      	mov	r6, r1
 801e670:	4614      	mov	r4, r2
 801e672:	4605      	mov	r5, r0
 801e674:	b118      	cbz	r0, 801e67e <_fputs_r+0x12>
 801e676:	6983      	ldr	r3, [r0, #24]
 801e678:	b90b      	cbnz	r3, 801e67e <_fputs_r+0x12>
 801e67a:	f7ff ff1d 	bl	801e4b8 <__sinit>
 801e67e:	4b2b      	ldr	r3, [pc, #172]	; (801e72c <_fputs_r+0xc0>)
 801e680:	429c      	cmp	r4, r3
 801e682:	d11e      	bne.n	801e6c2 <_fputs_r+0x56>
 801e684:	686c      	ldr	r4, [r5, #4]
 801e686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e688:	07da      	lsls	r2, r3, #31
 801e68a:	d405      	bmi.n	801e698 <_fputs_r+0x2c>
 801e68c:	89a3      	ldrh	r3, [r4, #12]
 801e68e:	059b      	lsls	r3, r3, #22
 801e690:	d402      	bmi.n	801e698 <_fputs_r+0x2c>
 801e692:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e694:	f000 fac3 	bl	801ec1e <__retarget_lock_acquire_recursive>
 801e698:	89a3      	ldrh	r3, [r4, #12]
 801e69a:	0718      	lsls	r0, r3, #28
 801e69c:	d51b      	bpl.n	801e6d6 <_fputs_r+0x6a>
 801e69e:	6923      	ldr	r3, [r4, #16]
 801e6a0:	b1cb      	cbz	r3, 801e6d6 <_fputs_r+0x6a>
 801e6a2:	3e01      	subs	r6, #1
 801e6a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e6a8:	bb39      	cbnz	r1, 801e6fa <_fputs_r+0x8e>
 801e6aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801e6ac:	f015 0501 	ands.w	r5, r5, #1
 801e6b0:	d139      	bne.n	801e726 <_fputs_r+0xba>
 801e6b2:	89a3      	ldrh	r3, [r4, #12]
 801e6b4:	0599      	lsls	r1, r3, #22
 801e6b6:	d402      	bmi.n	801e6be <_fputs_r+0x52>
 801e6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e6ba:	f000 fab2 	bl	801ec22 <__retarget_lock_release_recursive>
 801e6be:	4628      	mov	r0, r5
 801e6c0:	bd70      	pop	{r4, r5, r6, pc}
 801e6c2:	4b1b      	ldr	r3, [pc, #108]	; (801e730 <_fputs_r+0xc4>)
 801e6c4:	429c      	cmp	r4, r3
 801e6c6:	d101      	bne.n	801e6cc <_fputs_r+0x60>
 801e6c8:	68ac      	ldr	r4, [r5, #8]
 801e6ca:	e7dc      	b.n	801e686 <_fputs_r+0x1a>
 801e6cc:	4b19      	ldr	r3, [pc, #100]	; (801e734 <_fputs_r+0xc8>)
 801e6ce:	429c      	cmp	r4, r3
 801e6d0:	bf08      	it	eq
 801e6d2:	68ec      	ldreq	r4, [r5, #12]
 801e6d4:	e7d7      	b.n	801e686 <_fputs_r+0x1a>
 801e6d6:	4621      	mov	r1, r4
 801e6d8:	4628      	mov	r0, r5
 801e6da:	f001 fe0f 	bl	80202fc <__swsetup_r>
 801e6de:	2800      	cmp	r0, #0
 801e6e0:	d0df      	beq.n	801e6a2 <_fputs_r+0x36>
 801e6e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e6e4:	07da      	lsls	r2, r3, #31
 801e6e6:	d405      	bmi.n	801e6f4 <_fputs_r+0x88>
 801e6e8:	89a3      	ldrh	r3, [r4, #12]
 801e6ea:	059b      	lsls	r3, r3, #22
 801e6ec:	d402      	bmi.n	801e6f4 <_fputs_r+0x88>
 801e6ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e6f0:	f000 fa97 	bl	801ec22 <__retarget_lock_release_recursive>
 801e6f4:	f04f 35ff 	mov.w	r5, #4294967295
 801e6f8:	e7e1      	b.n	801e6be <_fputs_r+0x52>
 801e6fa:	68a3      	ldr	r3, [r4, #8]
 801e6fc:	3b01      	subs	r3, #1
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	60a3      	str	r3, [r4, #8]
 801e702:	da04      	bge.n	801e70e <_fputs_r+0xa2>
 801e704:	69a2      	ldr	r2, [r4, #24]
 801e706:	4293      	cmp	r3, r2
 801e708:	db06      	blt.n	801e718 <_fputs_r+0xac>
 801e70a:	290a      	cmp	r1, #10
 801e70c:	d004      	beq.n	801e718 <_fputs_r+0xac>
 801e70e:	6823      	ldr	r3, [r4, #0]
 801e710:	1c5a      	adds	r2, r3, #1
 801e712:	6022      	str	r2, [r4, #0]
 801e714:	7019      	strb	r1, [r3, #0]
 801e716:	e7c5      	b.n	801e6a4 <_fputs_r+0x38>
 801e718:	4622      	mov	r2, r4
 801e71a:	4628      	mov	r0, r5
 801e71c:	f001 fd8a 	bl	8020234 <__swbuf_r>
 801e720:	3001      	adds	r0, #1
 801e722:	d1bf      	bne.n	801e6a4 <_fputs_r+0x38>
 801e724:	e7dd      	b.n	801e6e2 <_fputs_r+0x76>
 801e726:	460d      	mov	r5, r1
 801e728:	e7c9      	b.n	801e6be <_fputs_r+0x52>
 801e72a:	bf00      	nop
 801e72c:	08027160 	.word	0x08027160
 801e730:	08027180 	.word	0x08027180
 801e734:	08027140 	.word	0x08027140

0801e738 <fputs>:
 801e738:	4b02      	ldr	r3, [pc, #8]	; (801e744 <fputs+0xc>)
 801e73a:	460a      	mov	r2, r1
 801e73c:	4601      	mov	r1, r0
 801e73e:	6818      	ldr	r0, [r3, #0]
 801e740:	f7ff bf94 	b.w	801e66c <_fputs_r>
 801e744:	20000108 	.word	0x20000108

0801e748 <_fseek_r>:
 801e748:	f000 b800 	b.w	801e74c <_fseeko_r>

0801e74c <_fseeko_r>:
 801e74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e750:	460c      	mov	r4, r1
 801e752:	4617      	mov	r7, r2
 801e754:	461e      	mov	r6, r3
 801e756:	4605      	mov	r5, r0
 801e758:	b118      	cbz	r0, 801e762 <_fseeko_r+0x16>
 801e75a:	6983      	ldr	r3, [r0, #24]
 801e75c:	b90b      	cbnz	r3, 801e762 <_fseeko_r+0x16>
 801e75e:	f7ff feab 	bl	801e4b8 <__sinit>
 801e762:	4b44      	ldr	r3, [pc, #272]	; (801e874 <_fseeko_r+0x128>)
 801e764:	429c      	cmp	r4, r3
 801e766:	d122      	bne.n	801e7ae <_fseeko_r+0x62>
 801e768:	686c      	ldr	r4, [r5, #4]
 801e76a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e76c:	07d9      	lsls	r1, r3, #31
 801e76e:	d405      	bmi.n	801e77c <_fseeko_r+0x30>
 801e770:	89a3      	ldrh	r3, [r4, #12]
 801e772:	059a      	lsls	r2, r3, #22
 801e774:	d402      	bmi.n	801e77c <_fseeko_r+0x30>
 801e776:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e778:	f000 fa51 	bl	801ec1e <__retarget_lock_acquire_recursive>
 801e77c:	89a3      	ldrh	r3, [r4, #12]
 801e77e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801e782:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801e786:	d103      	bne.n	801e790 <_fseeko_r+0x44>
 801e788:	4621      	mov	r1, r4
 801e78a:	4628      	mov	r0, r5
 801e78c:	f7ff fdee 	bl	801e36c <_fflush_r>
 801e790:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801e794:	f1b8 0f00 	cmp.w	r8, #0
 801e798:	d113      	bne.n	801e7c2 <_fseeko_r+0x76>
 801e79a:	231d      	movs	r3, #29
 801e79c:	602b      	str	r3, [r5, #0]
 801e79e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e7a0:	07d9      	lsls	r1, r3, #31
 801e7a2:	d55d      	bpl.n	801e860 <_fseeko_r+0x114>
 801e7a4:	f04f 36ff 	mov.w	r6, #4294967295
 801e7a8:	4630      	mov	r0, r6
 801e7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7ae:	4b32      	ldr	r3, [pc, #200]	; (801e878 <_fseeko_r+0x12c>)
 801e7b0:	429c      	cmp	r4, r3
 801e7b2:	d101      	bne.n	801e7b8 <_fseeko_r+0x6c>
 801e7b4:	68ac      	ldr	r4, [r5, #8]
 801e7b6:	e7d8      	b.n	801e76a <_fseeko_r+0x1e>
 801e7b8:	4b30      	ldr	r3, [pc, #192]	; (801e87c <_fseeko_r+0x130>)
 801e7ba:	429c      	cmp	r4, r3
 801e7bc:	bf08      	it	eq
 801e7be:	68ec      	ldreq	r4, [r5, #12]
 801e7c0:	e7d3      	b.n	801e76a <_fseeko_r+0x1e>
 801e7c2:	2e01      	cmp	r6, #1
 801e7c4:	d036      	beq.n	801e834 <_fseeko_r+0xe8>
 801e7c6:	f036 0302 	bics.w	r3, r6, #2
 801e7ca:	d147      	bne.n	801e85c <_fseeko_r+0x110>
 801e7cc:	6923      	ldr	r3, [r4, #16]
 801e7ce:	b91b      	cbnz	r3, 801e7d8 <_fseeko_r+0x8c>
 801e7d0:	4621      	mov	r1, r4
 801e7d2:	4628      	mov	r0, r5
 801e7d4:	f000 fa4a 	bl	801ec6c <__smakebuf_r>
 801e7d8:	4621      	mov	r1, r4
 801e7da:	4628      	mov	r0, r5
 801e7dc:	f7ff fdc6 	bl	801e36c <_fflush_r>
 801e7e0:	2800      	cmp	r0, #0
 801e7e2:	d1dc      	bne.n	801e79e <_fseeko_r+0x52>
 801e7e4:	6a21      	ldr	r1, [r4, #32]
 801e7e6:	4633      	mov	r3, r6
 801e7e8:	463a      	mov	r2, r7
 801e7ea:	4628      	mov	r0, r5
 801e7ec:	47c0      	blx	r8
 801e7ee:	3001      	adds	r0, #1
 801e7f0:	d0d5      	beq.n	801e79e <_fseeko_r+0x52>
 801e7f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e7f4:	b141      	cbz	r1, 801e808 <_fseeko_r+0xbc>
 801e7f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e7fa:	4299      	cmp	r1, r3
 801e7fc:	d002      	beq.n	801e804 <_fseeko_r+0xb8>
 801e7fe:	4628      	mov	r0, r5
 801e800:	f000 faaa 	bl	801ed58 <_free_r>
 801e804:	2300      	movs	r3, #0
 801e806:	6363      	str	r3, [r4, #52]	; 0x34
 801e808:	6923      	ldr	r3, [r4, #16]
 801e80a:	6023      	str	r3, [r4, #0]
 801e80c:	89a3      	ldrh	r3, [r4, #12]
 801e80e:	2500      	movs	r5, #0
 801e810:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801e814:	6065      	str	r5, [r4, #4]
 801e816:	81a3      	strh	r3, [r4, #12]
 801e818:	2208      	movs	r2, #8
 801e81a:	4629      	mov	r1, r5
 801e81c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e820:	f000 fa82 	bl	801ed28 <memset>
 801e824:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801e826:	f016 0601 	ands.w	r6, r6, #1
 801e82a:	d120      	bne.n	801e86e <_fseeko_r+0x122>
 801e82c:	89a3      	ldrh	r3, [r4, #12]
 801e82e:	059b      	lsls	r3, r3, #22
 801e830:	d4ba      	bmi.n	801e7a8 <_fseeko_r+0x5c>
 801e832:	e00c      	b.n	801e84e <_fseeko_r+0x102>
 801e834:	4621      	mov	r1, r4
 801e836:	4628      	mov	r0, r5
 801e838:	f000 f822 	bl	801e880 <_ftello_r>
 801e83c:	1c43      	adds	r3, r0, #1
 801e83e:	4606      	mov	r6, r0
 801e840:	d109      	bne.n	801e856 <_fseeko_r+0x10a>
 801e842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e844:	07dd      	lsls	r5, r3, #31
 801e846:	d4ad      	bmi.n	801e7a4 <_fseeko_r+0x58>
 801e848:	89a3      	ldrh	r3, [r4, #12]
 801e84a:	0598      	lsls	r0, r3, #22
 801e84c:	d4aa      	bmi.n	801e7a4 <_fseeko_r+0x58>
 801e84e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e850:	f000 f9e7 	bl	801ec22 <__retarget_lock_release_recursive>
 801e854:	e7a8      	b.n	801e7a8 <_fseeko_r+0x5c>
 801e856:	4407      	add	r7, r0
 801e858:	2600      	movs	r6, #0
 801e85a:	e7b7      	b.n	801e7cc <_fseeko_r+0x80>
 801e85c:	2316      	movs	r3, #22
 801e85e:	e79d      	b.n	801e79c <_fseeko_r+0x50>
 801e860:	89a3      	ldrh	r3, [r4, #12]
 801e862:	059a      	lsls	r2, r3, #22
 801e864:	d49e      	bmi.n	801e7a4 <_fseeko_r+0x58>
 801e866:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e868:	f000 f9db 	bl	801ec22 <__retarget_lock_release_recursive>
 801e86c:	e79a      	b.n	801e7a4 <_fseeko_r+0x58>
 801e86e:	462e      	mov	r6, r5
 801e870:	e79a      	b.n	801e7a8 <_fseeko_r+0x5c>
 801e872:	bf00      	nop
 801e874:	08027160 	.word	0x08027160
 801e878:	08027180 	.word	0x08027180
 801e87c:	08027140 	.word	0x08027140

0801e880 <_ftello_r>:
 801e880:	b570      	push	{r4, r5, r6, lr}
 801e882:	460c      	mov	r4, r1
 801e884:	4605      	mov	r5, r0
 801e886:	b118      	cbz	r0, 801e890 <_ftello_r+0x10>
 801e888:	6983      	ldr	r3, [r0, #24]
 801e88a:	b90b      	cbnz	r3, 801e890 <_ftello_r+0x10>
 801e88c:	f7ff fe14 	bl	801e4b8 <__sinit>
 801e890:	4b32      	ldr	r3, [pc, #200]	; (801e95c <_ftello_r+0xdc>)
 801e892:	429c      	cmp	r4, r3
 801e894:	d114      	bne.n	801e8c0 <_ftello_r+0x40>
 801e896:	686c      	ldr	r4, [r5, #4]
 801e898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e89a:	07da      	lsls	r2, r3, #31
 801e89c:	d405      	bmi.n	801e8aa <_ftello_r+0x2a>
 801e89e:	89a3      	ldrh	r3, [r4, #12]
 801e8a0:	059b      	lsls	r3, r3, #22
 801e8a2:	d402      	bmi.n	801e8aa <_ftello_r+0x2a>
 801e8a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e8a6:	f000 f9ba 	bl	801ec1e <__retarget_lock_acquire_recursive>
 801e8aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e8ac:	b9ce      	cbnz	r6, 801e8e2 <_ftello_r+0x62>
 801e8ae:	231d      	movs	r3, #29
 801e8b0:	602b      	str	r3, [r5, #0]
 801e8b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e8b4:	07de      	lsls	r6, r3, #31
 801e8b6:	d50d      	bpl.n	801e8d4 <_ftello_r+0x54>
 801e8b8:	f04f 35ff 	mov.w	r5, #4294967295
 801e8bc:	4628      	mov	r0, r5
 801e8be:	bd70      	pop	{r4, r5, r6, pc}
 801e8c0:	4b27      	ldr	r3, [pc, #156]	; (801e960 <_ftello_r+0xe0>)
 801e8c2:	429c      	cmp	r4, r3
 801e8c4:	d101      	bne.n	801e8ca <_ftello_r+0x4a>
 801e8c6:	68ac      	ldr	r4, [r5, #8]
 801e8c8:	e7e6      	b.n	801e898 <_ftello_r+0x18>
 801e8ca:	4b26      	ldr	r3, [pc, #152]	; (801e964 <_ftello_r+0xe4>)
 801e8cc:	429c      	cmp	r4, r3
 801e8ce:	bf08      	it	eq
 801e8d0:	68ec      	ldreq	r4, [r5, #12]
 801e8d2:	e7e1      	b.n	801e898 <_ftello_r+0x18>
 801e8d4:	89a3      	ldrh	r3, [r4, #12]
 801e8d6:	059d      	lsls	r5, r3, #22
 801e8d8:	d4ee      	bmi.n	801e8b8 <_ftello_r+0x38>
 801e8da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e8dc:	f000 f9a1 	bl	801ec22 <__retarget_lock_release_recursive>
 801e8e0:	e7ea      	b.n	801e8b8 <_ftello_r+0x38>
 801e8e2:	89a2      	ldrh	r2, [r4, #12]
 801e8e4:	f002 030c 	and.w	r3, r2, #12
 801e8e8:	2b08      	cmp	r3, #8
 801e8ea:	d119      	bne.n	801e920 <_ftello_r+0xa0>
 801e8ec:	6823      	ldr	r3, [r4, #0]
 801e8ee:	b1bb      	cbz	r3, 801e920 <_ftello_r+0xa0>
 801e8f0:	6921      	ldr	r1, [r4, #16]
 801e8f2:	1a5b      	subs	r3, r3, r1
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	dd13      	ble.n	801e920 <_ftello_r+0xa0>
 801e8f8:	05d0      	lsls	r0, r2, #23
 801e8fa:	d511      	bpl.n	801e920 <_ftello_r+0xa0>
 801e8fc:	2302      	movs	r3, #2
 801e8fe:	2200      	movs	r2, #0
 801e900:	6a21      	ldr	r1, [r4, #32]
 801e902:	4628      	mov	r0, r5
 801e904:	47b0      	blx	r6
 801e906:	1c41      	adds	r1, r0, #1
 801e908:	4605      	mov	r5, r0
 801e90a:	d10d      	bne.n	801e928 <_ftello_r+0xa8>
 801e90c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e90e:	07da      	lsls	r2, r3, #31
 801e910:	d4d2      	bmi.n	801e8b8 <_ftello_r+0x38>
 801e912:	89a3      	ldrh	r3, [r4, #12]
 801e914:	059b      	lsls	r3, r3, #22
 801e916:	d4cf      	bmi.n	801e8b8 <_ftello_r+0x38>
 801e918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e91a:	f000 f982 	bl	801ec22 <__retarget_lock_release_recursive>
 801e91e:	e7cd      	b.n	801e8bc <_ftello_r+0x3c>
 801e920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e924:	d00f      	beq.n	801e946 <_ftello_r+0xc6>
 801e926:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801e928:	89a2      	ldrh	r2, [r4, #12]
 801e92a:	0756      	lsls	r6, r2, #29
 801e92c:	d50d      	bpl.n	801e94a <_ftello_r+0xca>
 801e92e:	6863      	ldr	r3, [r4, #4]
 801e930:	1aed      	subs	r5, r5, r3
 801e932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e934:	b10b      	cbz	r3, 801e93a <_ftello_r+0xba>
 801e936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e938:	1aed      	subs	r5, r5, r3
 801e93a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e93c:	07d9      	lsls	r1, r3, #31
 801e93e:	d4bd      	bmi.n	801e8bc <_ftello_r+0x3c>
 801e940:	0593      	lsls	r3, r2, #22
 801e942:	d4bb      	bmi.n	801e8bc <_ftello_r+0x3c>
 801e944:	e7e8      	b.n	801e918 <_ftello_r+0x98>
 801e946:	2301      	movs	r3, #1
 801e948:	e7da      	b.n	801e900 <_ftello_r+0x80>
 801e94a:	0710      	lsls	r0, r2, #28
 801e94c:	d5f5      	bpl.n	801e93a <_ftello_r+0xba>
 801e94e:	6823      	ldr	r3, [r4, #0]
 801e950:	2b00      	cmp	r3, #0
 801e952:	d0f2      	beq.n	801e93a <_ftello_r+0xba>
 801e954:	6921      	ldr	r1, [r4, #16]
 801e956:	1a5b      	subs	r3, r3, r1
 801e958:	441d      	add	r5, r3
 801e95a:	e7ee      	b.n	801e93a <_ftello_r+0xba>
 801e95c:	08027160 	.word	0x08027160
 801e960:	08027180 	.word	0x08027180
 801e964:	08027140 	.word	0x08027140

0801e968 <_fwalk_reent>:
 801e968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e96c:	4606      	mov	r6, r0
 801e96e:	4688      	mov	r8, r1
 801e970:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e974:	2700      	movs	r7, #0
 801e976:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e97a:	f1b9 0901 	subs.w	r9, r9, #1
 801e97e:	d505      	bpl.n	801e98c <_fwalk_reent+0x24>
 801e980:	6824      	ldr	r4, [r4, #0]
 801e982:	2c00      	cmp	r4, #0
 801e984:	d1f7      	bne.n	801e976 <_fwalk_reent+0xe>
 801e986:	4638      	mov	r0, r7
 801e988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e98c:	89ab      	ldrh	r3, [r5, #12]
 801e98e:	2b01      	cmp	r3, #1
 801e990:	d907      	bls.n	801e9a2 <_fwalk_reent+0x3a>
 801e992:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e996:	3301      	adds	r3, #1
 801e998:	d003      	beq.n	801e9a2 <_fwalk_reent+0x3a>
 801e99a:	4629      	mov	r1, r5
 801e99c:	4630      	mov	r0, r6
 801e99e:	47c0      	blx	r8
 801e9a0:	4307      	orrs	r7, r0
 801e9a2:	3568      	adds	r5, #104	; 0x68
 801e9a4:	e7e9      	b.n	801e97a <_fwalk_reent+0x12>
	...

0801e9a8 <__libc_init_array>:
 801e9a8:	b570      	push	{r4, r5, r6, lr}
 801e9aa:	4d0d      	ldr	r5, [pc, #52]	; (801e9e0 <__libc_init_array+0x38>)
 801e9ac:	4c0d      	ldr	r4, [pc, #52]	; (801e9e4 <__libc_init_array+0x3c>)
 801e9ae:	1b64      	subs	r4, r4, r5
 801e9b0:	10a4      	asrs	r4, r4, #2
 801e9b2:	2600      	movs	r6, #0
 801e9b4:	42a6      	cmp	r6, r4
 801e9b6:	d109      	bne.n	801e9cc <__libc_init_array+0x24>
 801e9b8:	4d0b      	ldr	r5, [pc, #44]	; (801e9e8 <__libc_init_array+0x40>)
 801e9ba:	4c0c      	ldr	r4, [pc, #48]	; (801e9ec <__libc_init_array+0x44>)
 801e9bc:	f003 f8cc 	bl	8021b58 <_init>
 801e9c0:	1b64      	subs	r4, r4, r5
 801e9c2:	10a4      	asrs	r4, r4, #2
 801e9c4:	2600      	movs	r6, #0
 801e9c6:	42a6      	cmp	r6, r4
 801e9c8:	d105      	bne.n	801e9d6 <__libc_init_array+0x2e>
 801e9ca:	bd70      	pop	{r4, r5, r6, pc}
 801e9cc:	f855 3b04 	ldr.w	r3, [r5], #4
 801e9d0:	4798      	blx	r3
 801e9d2:	3601      	adds	r6, #1
 801e9d4:	e7ee      	b.n	801e9b4 <__libc_init_array+0xc>
 801e9d6:	f855 3b04 	ldr.w	r3, [r5], #4
 801e9da:	4798      	blx	r3
 801e9dc:	3601      	adds	r6, #1
 801e9de:	e7f2      	b.n	801e9c6 <__libc_init_array+0x1e>
 801e9e0:	08027738 	.word	0x08027738
 801e9e4:	08027738 	.word	0x08027738
 801e9e8:	08027738 	.word	0x08027738
 801e9ec:	08027748 	.word	0x08027748

0801e9f0 <localtime>:
 801e9f0:	b538      	push	{r3, r4, r5, lr}
 801e9f2:	4b0b      	ldr	r3, [pc, #44]	; (801ea20 <localtime+0x30>)
 801e9f4:	681d      	ldr	r5, [r3, #0]
 801e9f6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801e9f8:	4604      	mov	r4, r0
 801e9fa:	b953      	cbnz	r3, 801ea12 <localtime+0x22>
 801e9fc:	2024      	movs	r0, #36	; 0x24
 801e9fe:	f000 f975 	bl	801ecec <malloc>
 801ea02:	4602      	mov	r2, r0
 801ea04:	63e8      	str	r0, [r5, #60]	; 0x3c
 801ea06:	b920      	cbnz	r0, 801ea12 <localtime+0x22>
 801ea08:	4b06      	ldr	r3, [pc, #24]	; (801ea24 <localtime+0x34>)
 801ea0a:	4807      	ldr	r0, [pc, #28]	; (801ea28 <localtime+0x38>)
 801ea0c:	2132      	movs	r1, #50	; 0x32
 801ea0e:	f001 fd49 	bl	80204a4 <__assert_func>
 801ea12:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801ea14:	4620      	mov	r0, r4
 801ea16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ea1a:	f000 b807 	b.w	801ea2c <localtime_r>
 801ea1e:	bf00      	nop
 801ea20:	20000108 	.word	0x20000108
 801ea24:	080271a4 	.word	0x080271a4
 801ea28:	080271bb 	.word	0x080271bb

0801ea2c <localtime_r>:
 801ea2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ea30:	4607      	mov	r7, r0
 801ea32:	9101      	str	r1, [sp, #4]
 801ea34:	f001 fe00 	bl	8020638 <__gettzinfo>
 801ea38:	9901      	ldr	r1, [sp, #4]
 801ea3a:	4680      	mov	r8, r0
 801ea3c:	4638      	mov	r0, r7
 801ea3e:	f001 fdff 	bl	8020640 <gmtime_r>
 801ea42:	6943      	ldr	r3, [r0, #20]
 801ea44:	079a      	lsls	r2, r3, #30
 801ea46:	4604      	mov	r4, r0
 801ea48:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801ea4c:	d105      	bne.n	801ea5a <localtime_r+0x2e>
 801ea4e:	2264      	movs	r2, #100	; 0x64
 801ea50:	fb96 f3f2 	sdiv	r3, r6, r2
 801ea54:	fb02 6313 	mls	r3, r2, r3, r6
 801ea58:	bb7b      	cbnz	r3, 801eaba <localtime_r+0x8e>
 801ea5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801ea5e:	fb96 f5f3 	sdiv	r5, r6, r3
 801ea62:	fb03 6515 	mls	r5, r3, r5, r6
 801ea66:	fab5 f585 	clz	r5, r5
 801ea6a:	096d      	lsrs	r5, r5, #5
 801ea6c:	4b68      	ldr	r3, [pc, #416]	; (801ec10 <localtime_r+0x1e4>)
 801ea6e:	2230      	movs	r2, #48	; 0x30
 801ea70:	fb02 3505 	mla	r5, r2, r5, r3
 801ea74:	f001 fa16 	bl	801fea4 <__tz_lock>
 801ea78:	f001 fa20 	bl	801febc <_tzset_unlocked>
 801ea7c:	4b65      	ldr	r3, [pc, #404]	; (801ec14 <localtime_r+0x1e8>)
 801ea7e:	681b      	ldr	r3, [r3, #0]
 801ea80:	b353      	cbz	r3, 801ead8 <localtime_r+0xac>
 801ea82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ea86:	42b3      	cmp	r3, r6
 801ea88:	d119      	bne.n	801eabe <localtime_r+0x92>
 801ea8a:	f8d8 1000 	ldr.w	r1, [r8]
 801ea8e:	e9d7 6700 	ldrd	r6, r7, [r7]
 801ea92:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801ea96:	b9d1      	cbnz	r1, 801eace <localtime_r+0xa2>
 801ea98:	4296      	cmp	r6, r2
 801ea9a:	eb77 0303 	sbcs.w	r3, r7, r3
 801ea9e:	da23      	bge.n	801eae8 <localtime_r+0xbc>
 801eaa0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801eaa4:	4296      	cmp	r6, r2
 801eaa6:	eb77 0303 	sbcs.w	r3, r7, r3
 801eaaa:	bfb4      	ite	lt
 801eaac:	2301      	movlt	r3, #1
 801eaae:	2300      	movge	r3, #0
 801eab0:	6223      	str	r3, [r4, #32]
 801eab2:	db1b      	blt.n	801eaec <localtime_r+0xc0>
 801eab4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801eab8:	e01a      	b.n	801eaf0 <localtime_r+0xc4>
 801eaba:	2501      	movs	r5, #1
 801eabc:	e7d6      	b.n	801ea6c <localtime_r+0x40>
 801eabe:	4630      	mov	r0, r6
 801eac0:	f001 f948 	bl	801fd54 <__tzcalc_limits>
 801eac4:	2800      	cmp	r0, #0
 801eac6:	d1e0      	bne.n	801ea8a <localtime_r+0x5e>
 801eac8:	f04f 33ff 	mov.w	r3, #4294967295
 801eacc:	e004      	b.n	801ead8 <localtime_r+0xac>
 801eace:	4296      	cmp	r6, r2
 801ead0:	eb77 0303 	sbcs.w	r3, r7, r3
 801ead4:	da02      	bge.n	801eadc <localtime_r+0xb0>
 801ead6:	2300      	movs	r3, #0
 801ead8:	6223      	str	r3, [r4, #32]
 801eada:	e7eb      	b.n	801eab4 <localtime_r+0x88>
 801eadc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801eae0:	4296      	cmp	r6, r2
 801eae2:	eb77 0303 	sbcs.w	r3, r7, r3
 801eae6:	daf6      	bge.n	801ead6 <localtime_r+0xaa>
 801eae8:	2301      	movs	r3, #1
 801eaea:	6223      	str	r3, [r4, #32]
 801eaec:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801eaf0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801eaf4:	203c      	movs	r0, #60	; 0x3c
 801eaf6:	fb91 f6f3 	sdiv	r6, r1, r3
 801eafa:	fb03 1316 	mls	r3, r3, r6, r1
 801eafe:	6861      	ldr	r1, [r4, #4]
 801eb00:	fb93 f2f0 	sdiv	r2, r3, r0
 801eb04:	fb00 3012 	mls	r0, r0, r2, r3
 801eb08:	6823      	ldr	r3, [r4, #0]
 801eb0a:	1a89      	subs	r1, r1, r2
 801eb0c:	68a2      	ldr	r2, [r4, #8]
 801eb0e:	6061      	str	r1, [r4, #4]
 801eb10:	1a1b      	subs	r3, r3, r0
 801eb12:	1b92      	subs	r2, r2, r6
 801eb14:	2b3b      	cmp	r3, #59	; 0x3b
 801eb16:	6023      	str	r3, [r4, #0]
 801eb18:	60a2      	str	r2, [r4, #8]
 801eb1a:	dd35      	ble.n	801eb88 <localtime_r+0x15c>
 801eb1c:	3101      	adds	r1, #1
 801eb1e:	6061      	str	r1, [r4, #4]
 801eb20:	3b3c      	subs	r3, #60	; 0x3c
 801eb22:	6023      	str	r3, [r4, #0]
 801eb24:	6863      	ldr	r3, [r4, #4]
 801eb26:	2b3b      	cmp	r3, #59	; 0x3b
 801eb28:	dd34      	ble.n	801eb94 <localtime_r+0x168>
 801eb2a:	3201      	adds	r2, #1
 801eb2c:	60a2      	str	r2, [r4, #8]
 801eb2e:	3b3c      	subs	r3, #60	; 0x3c
 801eb30:	6063      	str	r3, [r4, #4]
 801eb32:	68a3      	ldr	r3, [r4, #8]
 801eb34:	2b17      	cmp	r3, #23
 801eb36:	dd33      	ble.n	801eba0 <localtime_r+0x174>
 801eb38:	69e2      	ldr	r2, [r4, #28]
 801eb3a:	3201      	adds	r2, #1
 801eb3c:	61e2      	str	r2, [r4, #28]
 801eb3e:	69a2      	ldr	r2, [r4, #24]
 801eb40:	3201      	adds	r2, #1
 801eb42:	2a06      	cmp	r2, #6
 801eb44:	bfc8      	it	gt
 801eb46:	2200      	movgt	r2, #0
 801eb48:	61a2      	str	r2, [r4, #24]
 801eb4a:	68e2      	ldr	r2, [r4, #12]
 801eb4c:	3b18      	subs	r3, #24
 801eb4e:	3201      	adds	r2, #1
 801eb50:	60a3      	str	r3, [r4, #8]
 801eb52:	6923      	ldr	r3, [r4, #16]
 801eb54:	60e2      	str	r2, [r4, #12]
 801eb56:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801eb5a:	428a      	cmp	r2, r1
 801eb5c:	dd0e      	ble.n	801eb7c <localtime_r+0x150>
 801eb5e:	2b0b      	cmp	r3, #11
 801eb60:	eba2 0201 	sub.w	r2, r2, r1
 801eb64:	60e2      	str	r2, [r4, #12]
 801eb66:	f103 0201 	add.w	r2, r3, #1
 801eb6a:	bf09      	itett	eq
 801eb6c:	6963      	ldreq	r3, [r4, #20]
 801eb6e:	6122      	strne	r2, [r4, #16]
 801eb70:	2200      	moveq	r2, #0
 801eb72:	3301      	addeq	r3, #1
 801eb74:	bf02      	ittt	eq
 801eb76:	6122      	streq	r2, [r4, #16]
 801eb78:	6163      	streq	r3, [r4, #20]
 801eb7a:	61e2      	streq	r2, [r4, #28]
 801eb7c:	f001 f998 	bl	801feb0 <__tz_unlock>
 801eb80:	4620      	mov	r0, r4
 801eb82:	b002      	add	sp, #8
 801eb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	dacb      	bge.n	801eb24 <localtime_r+0xf8>
 801eb8c:	3901      	subs	r1, #1
 801eb8e:	6061      	str	r1, [r4, #4]
 801eb90:	333c      	adds	r3, #60	; 0x3c
 801eb92:	e7c6      	b.n	801eb22 <localtime_r+0xf6>
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	dacc      	bge.n	801eb32 <localtime_r+0x106>
 801eb98:	3a01      	subs	r2, #1
 801eb9a:	60a2      	str	r2, [r4, #8]
 801eb9c:	333c      	adds	r3, #60	; 0x3c
 801eb9e:	e7c7      	b.n	801eb30 <localtime_r+0x104>
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	daeb      	bge.n	801eb7c <localtime_r+0x150>
 801eba4:	69e2      	ldr	r2, [r4, #28]
 801eba6:	3a01      	subs	r2, #1
 801eba8:	61e2      	str	r2, [r4, #28]
 801ebaa:	69a2      	ldr	r2, [r4, #24]
 801ebac:	3a01      	subs	r2, #1
 801ebae:	bf48      	it	mi
 801ebb0:	2206      	movmi	r2, #6
 801ebb2:	61a2      	str	r2, [r4, #24]
 801ebb4:	68e2      	ldr	r2, [r4, #12]
 801ebb6:	3318      	adds	r3, #24
 801ebb8:	3a01      	subs	r2, #1
 801ebba:	60e2      	str	r2, [r4, #12]
 801ebbc:	60a3      	str	r3, [r4, #8]
 801ebbe:	2a00      	cmp	r2, #0
 801ebc0:	d1dc      	bne.n	801eb7c <localtime_r+0x150>
 801ebc2:	6923      	ldr	r3, [r4, #16]
 801ebc4:	3b01      	subs	r3, #1
 801ebc6:	d405      	bmi.n	801ebd4 <localtime_r+0x1a8>
 801ebc8:	6123      	str	r3, [r4, #16]
 801ebca:	6923      	ldr	r3, [r4, #16]
 801ebcc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801ebd0:	60e3      	str	r3, [r4, #12]
 801ebd2:	e7d3      	b.n	801eb7c <localtime_r+0x150>
 801ebd4:	230b      	movs	r3, #11
 801ebd6:	6123      	str	r3, [r4, #16]
 801ebd8:	6963      	ldr	r3, [r4, #20]
 801ebda:	1e5a      	subs	r2, r3, #1
 801ebdc:	6162      	str	r2, [r4, #20]
 801ebde:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801ebe2:	0793      	lsls	r3, r2, #30
 801ebe4:	d105      	bne.n	801ebf2 <localtime_r+0x1c6>
 801ebe6:	2164      	movs	r1, #100	; 0x64
 801ebe8:	fb92 f3f1 	sdiv	r3, r2, r1
 801ebec:	fb01 2313 	mls	r3, r1, r3, r2
 801ebf0:	b963      	cbnz	r3, 801ec0c <localtime_r+0x1e0>
 801ebf2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801ebf6:	fb92 f3f1 	sdiv	r3, r2, r1
 801ebfa:	fb01 2313 	mls	r3, r1, r3, r2
 801ebfe:	fab3 f383 	clz	r3, r3
 801ec02:	095b      	lsrs	r3, r3, #5
 801ec04:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801ec08:	61e3      	str	r3, [r4, #28]
 801ec0a:	e7de      	b.n	801ebca <localtime_r+0x19e>
 801ec0c:	2301      	movs	r3, #1
 801ec0e:	e7f9      	b.n	801ec04 <localtime_r+0x1d8>
 801ec10:	0802721c 	.word	0x0802721c
 801ec14:	20000dc8 	.word	0x20000dc8

0801ec18 <__retarget_lock_init_recursive>:
 801ec18:	4770      	bx	lr

0801ec1a <__retarget_lock_close_recursive>:
 801ec1a:	4770      	bx	lr

0801ec1c <__retarget_lock_acquire>:
 801ec1c:	4770      	bx	lr

0801ec1e <__retarget_lock_acquire_recursive>:
 801ec1e:	4770      	bx	lr

0801ec20 <__retarget_lock_release>:
 801ec20:	4770      	bx	lr

0801ec22 <__retarget_lock_release_recursive>:
 801ec22:	4770      	bx	lr

0801ec24 <__swhatbuf_r>:
 801ec24:	b570      	push	{r4, r5, r6, lr}
 801ec26:	460e      	mov	r6, r1
 801ec28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec2c:	2900      	cmp	r1, #0
 801ec2e:	b096      	sub	sp, #88	; 0x58
 801ec30:	4614      	mov	r4, r2
 801ec32:	461d      	mov	r5, r3
 801ec34:	da07      	bge.n	801ec46 <__swhatbuf_r+0x22>
 801ec36:	2300      	movs	r3, #0
 801ec38:	602b      	str	r3, [r5, #0]
 801ec3a:	89b3      	ldrh	r3, [r6, #12]
 801ec3c:	061a      	lsls	r2, r3, #24
 801ec3e:	d410      	bmi.n	801ec62 <__swhatbuf_r+0x3e>
 801ec40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ec44:	e00e      	b.n	801ec64 <__swhatbuf_r+0x40>
 801ec46:	466a      	mov	r2, sp
 801ec48:	f001 fca2 	bl	8020590 <_fstat_r>
 801ec4c:	2800      	cmp	r0, #0
 801ec4e:	dbf2      	blt.n	801ec36 <__swhatbuf_r+0x12>
 801ec50:	9a01      	ldr	r2, [sp, #4]
 801ec52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ec56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ec5a:	425a      	negs	r2, r3
 801ec5c:	415a      	adcs	r2, r3
 801ec5e:	602a      	str	r2, [r5, #0]
 801ec60:	e7ee      	b.n	801ec40 <__swhatbuf_r+0x1c>
 801ec62:	2340      	movs	r3, #64	; 0x40
 801ec64:	2000      	movs	r0, #0
 801ec66:	6023      	str	r3, [r4, #0]
 801ec68:	b016      	add	sp, #88	; 0x58
 801ec6a:	bd70      	pop	{r4, r5, r6, pc}

0801ec6c <__smakebuf_r>:
 801ec6c:	898b      	ldrh	r3, [r1, #12]
 801ec6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ec70:	079d      	lsls	r5, r3, #30
 801ec72:	4606      	mov	r6, r0
 801ec74:	460c      	mov	r4, r1
 801ec76:	d507      	bpl.n	801ec88 <__smakebuf_r+0x1c>
 801ec78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ec7c:	6023      	str	r3, [r4, #0]
 801ec7e:	6123      	str	r3, [r4, #16]
 801ec80:	2301      	movs	r3, #1
 801ec82:	6163      	str	r3, [r4, #20]
 801ec84:	b002      	add	sp, #8
 801ec86:	bd70      	pop	{r4, r5, r6, pc}
 801ec88:	ab01      	add	r3, sp, #4
 801ec8a:	466a      	mov	r2, sp
 801ec8c:	f7ff ffca 	bl	801ec24 <__swhatbuf_r>
 801ec90:	9900      	ldr	r1, [sp, #0]
 801ec92:	4605      	mov	r5, r0
 801ec94:	4630      	mov	r0, r6
 801ec96:	f000 f8af 	bl	801edf8 <_malloc_r>
 801ec9a:	b948      	cbnz	r0, 801ecb0 <__smakebuf_r+0x44>
 801ec9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eca0:	059a      	lsls	r2, r3, #22
 801eca2:	d4ef      	bmi.n	801ec84 <__smakebuf_r+0x18>
 801eca4:	f023 0303 	bic.w	r3, r3, #3
 801eca8:	f043 0302 	orr.w	r3, r3, #2
 801ecac:	81a3      	strh	r3, [r4, #12]
 801ecae:	e7e3      	b.n	801ec78 <__smakebuf_r+0xc>
 801ecb0:	4b0d      	ldr	r3, [pc, #52]	; (801ece8 <__smakebuf_r+0x7c>)
 801ecb2:	62b3      	str	r3, [r6, #40]	; 0x28
 801ecb4:	89a3      	ldrh	r3, [r4, #12]
 801ecb6:	6020      	str	r0, [r4, #0]
 801ecb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ecbc:	81a3      	strh	r3, [r4, #12]
 801ecbe:	9b00      	ldr	r3, [sp, #0]
 801ecc0:	6163      	str	r3, [r4, #20]
 801ecc2:	9b01      	ldr	r3, [sp, #4]
 801ecc4:	6120      	str	r0, [r4, #16]
 801ecc6:	b15b      	cbz	r3, 801ece0 <__smakebuf_r+0x74>
 801ecc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eccc:	4630      	mov	r0, r6
 801ecce:	f001 fd67 	bl	80207a0 <_isatty_r>
 801ecd2:	b128      	cbz	r0, 801ece0 <__smakebuf_r+0x74>
 801ecd4:	89a3      	ldrh	r3, [r4, #12]
 801ecd6:	f023 0303 	bic.w	r3, r3, #3
 801ecda:	f043 0301 	orr.w	r3, r3, #1
 801ecde:	81a3      	strh	r3, [r4, #12]
 801ece0:	89a0      	ldrh	r0, [r4, #12]
 801ece2:	4305      	orrs	r5, r0
 801ece4:	81a5      	strh	r5, [r4, #12]
 801ece6:	e7cd      	b.n	801ec84 <__smakebuf_r+0x18>
 801ece8:	0801e451 	.word	0x0801e451

0801ecec <malloc>:
 801ecec:	4b02      	ldr	r3, [pc, #8]	; (801ecf8 <malloc+0xc>)
 801ecee:	4601      	mov	r1, r0
 801ecf0:	6818      	ldr	r0, [r3, #0]
 801ecf2:	f000 b881 	b.w	801edf8 <_malloc_r>
 801ecf6:	bf00      	nop
 801ecf8:	20000108 	.word	0x20000108

0801ecfc <free>:
 801ecfc:	4b02      	ldr	r3, [pc, #8]	; (801ed08 <free+0xc>)
 801ecfe:	4601      	mov	r1, r0
 801ed00:	6818      	ldr	r0, [r3, #0]
 801ed02:	f000 b829 	b.w	801ed58 <_free_r>
 801ed06:	bf00      	nop
 801ed08:	20000108 	.word	0x20000108

0801ed0c <memcpy>:
 801ed0c:	440a      	add	r2, r1
 801ed0e:	4291      	cmp	r1, r2
 801ed10:	f100 33ff 	add.w	r3, r0, #4294967295
 801ed14:	d100      	bne.n	801ed18 <memcpy+0xc>
 801ed16:	4770      	bx	lr
 801ed18:	b510      	push	{r4, lr}
 801ed1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ed1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ed22:	4291      	cmp	r1, r2
 801ed24:	d1f9      	bne.n	801ed1a <memcpy+0xe>
 801ed26:	bd10      	pop	{r4, pc}

0801ed28 <memset>:
 801ed28:	4402      	add	r2, r0
 801ed2a:	4603      	mov	r3, r0
 801ed2c:	4293      	cmp	r3, r2
 801ed2e:	d100      	bne.n	801ed32 <memset+0xa>
 801ed30:	4770      	bx	lr
 801ed32:	f803 1b01 	strb.w	r1, [r3], #1
 801ed36:	e7f9      	b.n	801ed2c <memset+0x4>

0801ed38 <_calloc_r>:
 801ed38:	b513      	push	{r0, r1, r4, lr}
 801ed3a:	434a      	muls	r2, r1
 801ed3c:	4611      	mov	r1, r2
 801ed3e:	9201      	str	r2, [sp, #4]
 801ed40:	f000 f85a 	bl	801edf8 <_malloc_r>
 801ed44:	4604      	mov	r4, r0
 801ed46:	b118      	cbz	r0, 801ed50 <_calloc_r+0x18>
 801ed48:	9a01      	ldr	r2, [sp, #4]
 801ed4a:	2100      	movs	r1, #0
 801ed4c:	f7ff ffec 	bl	801ed28 <memset>
 801ed50:	4620      	mov	r0, r4
 801ed52:	b002      	add	sp, #8
 801ed54:	bd10      	pop	{r4, pc}
	...

0801ed58 <_free_r>:
 801ed58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ed5a:	2900      	cmp	r1, #0
 801ed5c:	d048      	beq.n	801edf0 <_free_r+0x98>
 801ed5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ed62:	9001      	str	r0, [sp, #4]
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	f1a1 0404 	sub.w	r4, r1, #4
 801ed6a:	bfb8      	it	lt
 801ed6c:	18e4      	addlt	r4, r4, r3
 801ed6e:	f001 fd4f 	bl	8020810 <__malloc_lock>
 801ed72:	4a20      	ldr	r2, [pc, #128]	; (801edf4 <_free_r+0x9c>)
 801ed74:	9801      	ldr	r0, [sp, #4]
 801ed76:	6813      	ldr	r3, [r2, #0]
 801ed78:	4615      	mov	r5, r2
 801ed7a:	b933      	cbnz	r3, 801ed8a <_free_r+0x32>
 801ed7c:	6063      	str	r3, [r4, #4]
 801ed7e:	6014      	str	r4, [r2, #0]
 801ed80:	b003      	add	sp, #12
 801ed82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ed86:	f001 bd49 	b.w	802081c <__malloc_unlock>
 801ed8a:	42a3      	cmp	r3, r4
 801ed8c:	d90b      	bls.n	801eda6 <_free_r+0x4e>
 801ed8e:	6821      	ldr	r1, [r4, #0]
 801ed90:	1862      	adds	r2, r4, r1
 801ed92:	4293      	cmp	r3, r2
 801ed94:	bf04      	itt	eq
 801ed96:	681a      	ldreq	r2, [r3, #0]
 801ed98:	685b      	ldreq	r3, [r3, #4]
 801ed9a:	6063      	str	r3, [r4, #4]
 801ed9c:	bf04      	itt	eq
 801ed9e:	1852      	addeq	r2, r2, r1
 801eda0:	6022      	streq	r2, [r4, #0]
 801eda2:	602c      	str	r4, [r5, #0]
 801eda4:	e7ec      	b.n	801ed80 <_free_r+0x28>
 801eda6:	461a      	mov	r2, r3
 801eda8:	685b      	ldr	r3, [r3, #4]
 801edaa:	b10b      	cbz	r3, 801edb0 <_free_r+0x58>
 801edac:	42a3      	cmp	r3, r4
 801edae:	d9fa      	bls.n	801eda6 <_free_r+0x4e>
 801edb0:	6811      	ldr	r1, [r2, #0]
 801edb2:	1855      	adds	r5, r2, r1
 801edb4:	42a5      	cmp	r5, r4
 801edb6:	d10b      	bne.n	801edd0 <_free_r+0x78>
 801edb8:	6824      	ldr	r4, [r4, #0]
 801edba:	4421      	add	r1, r4
 801edbc:	1854      	adds	r4, r2, r1
 801edbe:	42a3      	cmp	r3, r4
 801edc0:	6011      	str	r1, [r2, #0]
 801edc2:	d1dd      	bne.n	801ed80 <_free_r+0x28>
 801edc4:	681c      	ldr	r4, [r3, #0]
 801edc6:	685b      	ldr	r3, [r3, #4]
 801edc8:	6053      	str	r3, [r2, #4]
 801edca:	4421      	add	r1, r4
 801edcc:	6011      	str	r1, [r2, #0]
 801edce:	e7d7      	b.n	801ed80 <_free_r+0x28>
 801edd0:	d902      	bls.n	801edd8 <_free_r+0x80>
 801edd2:	230c      	movs	r3, #12
 801edd4:	6003      	str	r3, [r0, #0]
 801edd6:	e7d3      	b.n	801ed80 <_free_r+0x28>
 801edd8:	6825      	ldr	r5, [r4, #0]
 801edda:	1961      	adds	r1, r4, r5
 801eddc:	428b      	cmp	r3, r1
 801edde:	bf04      	itt	eq
 801ede0:	6819      	ldreq	r1, [r3, #0]
 801ede2:	685b      	ldreq	r3, [r3, #4]
 801ede4:	6063      	str	r3, [r4, #4]
 801ede6:	bf04      	itt	eq
 801ede8:	1949      	addeq	r1, r1, r5
 801edea:	6021      	streq	r1, [r4, #0]
 801edec:	6054      	str	r4, [r2, #4]
 801edee:	e7c7      	b.n	801ed80 <_free_r+0x28>
 801edf0:	b003      	add	sp, #12
 801edf2:	bd30      	pop	{r4, r5, pc}
 801edf4:	20000da4 	.word	0x20000da4

0801edf8 <_malloc_r>:
 801edf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edfa:	1ccd      	adds	r5, r1, #3
 801edfc:	f025 0503 	bic.w	r5, r5, #3
 801ee00:	3508      	adds	r5, #8
 801ee02:	2d0c      	cmp	r5, #12
 801ee04:	bf38      	it	cc
 801ee06:	250c      	movcc	r5, #12
 801ee08:	2d00      	cmp	r5, #0
 801ee0a:	4606      	mov	r6, r0
 801ee0c:	db01      	blt.n	801ee12 <_malloc_r+0x1a>
 801ee0e:	42a9      	cmp	r1, r5
 801ee10:	d903      	bls.n	801ee1a <_malloc_r+0x22>
 801ee12:	230c      	movs	r3, #12
 801ee14:	6033      	str	r3, [r6, #0]
 801ee16:	2000      	movs	r0, #0
 801ee18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee1a:	f001 fcf9 	bl	8020810 <__malloc_lock>
 801ee1e:	4921      	ldr	r1, [pc, #132]	; (801eea4 <_malloc_r+0xac>)
 801ee20:	680a      	ldr	r2, [r1, #0]
 801ee22:	4614      	mov	r4, r2
 801ee24:	b99c      	cbnz	r4, 801ee4e <_malloc_r+0x56>
 801ee26:	4f20      	ldr	r7, [pc, #128]	; (801eea8 <_malloc_r+0xb0>)
 801ee28:	683b      	ldr	r3, [r7, #0]
 801ee2a:	b923      	cbnz	r3, 801ee36 <_malloc_r+0x3e>
 801ee2c:	4621      	mov	r1, r4
 801ee2e:	4630      	mov	r0, r6
 801ee30:	f000 f8da 	bl	801efe8 <_sbrk_r>
 801ee34:	6038      	str	r0, [r7, #0]
 801ee36:	4629      	mov	r1, r5
 801ee38:	4630      	mov	r0, r6
 801ee3a:	f000 f8d5 	bl	801efe8 <_sbrk_r>
 801ee3e:	1c43      	adds	r3, r0, #1
 801ee40:	d123      	bne.n	801ee8a <_malloc_r+0x92>
 801ee42:	230c      	movs	r3, #12
 801ee44:	6033      	str	r3, [r6, #0]
 801ee46:	4630      	mov	r0, r6
 801ee48:	f001 fce8 	bl	802081c <__malloc_unlock>
 801ee4c:	e7e3      	b.n	801ee16 <_malloc_r+0x1e>
 801ee4e:	6823      	ldr	r3, [r4, #0]
 801ee50:	1b5b      	subs	r3, r3, r5
 801ee52:	d417      	bmi.n	801ee84 <_malloc_r+0x8c>
 801ee54:	2b0b      	cmp	r3, #11
 801ee56:	d903      	bls.n	801ee60 <_malloc_r+0x68>
 801ee58:	6023      	str	r3, [r4, #0]
 801ee5a:	441c      	add	r4, r3
 801ee5c:	6025      	str	r5, [r4, #0]
 801ee5e:	e004      	b.n	801ee6a <_malloc_r+0x72>
 801ee60:	6863      	ldr	r3, [r4, #4]
 801ee62:	42a2      	cmp	r2, r4
 801ee64:	bf0c      	ite	eq
 801ee66:	600b      	streq	r3, [r1, #0]
 801ee68:	6053      	strne	r3, [r2, #4]
 801ee6a:	4630      	mov	r0, r6
 801ee6c:	f001 fcd6 	bl	802081c <__malloc_unlock>
 801ee70:	f104 000b 	add.w	r0, r4, #11
 801ee74:	1d23      	adds	r3, r4, #4
 801ee76:	f020 0007 	bic.w	r0, r0, #7
 801ee7a:	1ac2      	subs	r2, r0, r3
 801ee7c:	d0cc      	beq.n	801ee18 <_malloc_r+0x20>
 801ee7e:	1a1b      	subs	r3, r3, r0
 801ee80:	50a3      	str	r3, [r4, r2]
 801ee82:	e7c9      	b.n	801ee18 <_malloc_r+0x20>
 801ee84:	4622      	mov	r2, r4
 801ee86:	6864      	ldr	r4, [r4, #4]
 801ee88:	e7cc      	b.n	801ee24 <_malloc_r+0x2c>
 801ee8a:	1cc4      	adds	r4, r0, #3
 801ee8c:	f024 0403 	bic.w	r4, r4, #3
 801ee90:	42a0      	cmp	r0, r4
 801ee92:	d0e3      	beq.n	801ee5c <_malloc_r+0x64>
 801ee94:	1a21      	subs	r1, r4, r0
 801ee96:	4630      	mov	r0, r6
 801ee98:	f000 f8a6 	bl	801efe8 <_sbrk_r>
 801ee9c:	3001      	adds	r0, #1
 801ee9e:	d1dd      	bne.n	801ee5c <_malloc_r+0x64>
 801eea0:	e7cf      	b.n	801ee42 <_malloc_r+0x4a>
 801eea2:	bf00      	nop
 801eea4:	20000da4 	.word	0x20000da4
 801eea8:	20000da8 	.word	0x20000da8

0801eeac <_open_r>:
 801eeac:	b538      	push	{r3, r4, r5, lr}
 801eeae:	4d07      	ldr	r5, [pc, #28]	; (801eecc <_open_r+0x20>)
 801eeb0:	4604      	mov	r4, r0
 801eeb2:	4608      	mov	r0, r1
 801eeb4:	4611      	mov	r1, r2
 801eeb6:	2200      	movs	r2, #0
 801eeb8:	602a      	str	r2, [r5, #0]
 801eeba:	461a      	mov	r2, r3
 801eebc:	f7e1 ffd8 	bl	8000e70 <_open>
 801eec0:	1c43      	adds	r3, r0, #1
 801eec2:	d102      	bne.n	801eeca <_open_r+0x1e>
 801eec4:	682b      	ldr	r3, [r5, #0]
 801eec6:	b103      	cbz	r3, 801eeca <_open_r+0x1e>
 801eec8:	6023      	str	r3, [r4, #0]
 801eeca:	bd38      	pop	{r3, r4, r5, pc}
 801eecc:	20000e70 	.word	0x20000e70

0801eed0 <putchar>:
 801eed0:	4b09      	ldr	r3, [pc, #36]	; (801eef8 <putchar+0x28>)
 801eed2:	b513      	push	{r0, r1, r4, lr}
 801eed4:	681c      	ldr	r4, [r3, #0]
 801eed6:	4601      	mov	r1, r0
 801eed8:	b134      	cbz	r4, 801eee8 <putchar+0x18>
 801eeda:	69a3      	ldr	r3, [r4, #24]
 801eedc:	b923      	cbnz	r3, 801eee8 <putchar+0x18>
 801eede:	9001      	str	r0, [sp, #4]
 801eee0:	4620      	mov	r0, r4
 801eee2:	f7ff fae9 	bl	801e4b8 <__sinit>
 801eee6:	9901      	ldr	r1, [sp, #4]
 801eee8:	68a2      	ldr	r2, [r4, #8]
 801eeea:	4620      	mov	r0, r4
 801eeec:	b002      	add	sp, #8
 801eeee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eef2:	f002 b909 	b.w	8021108 <_putc_r>
 801eef6:	bf00      	nop
 801eef8:	20000108 	.word	0x20000108

0801eefc <srand>:
 801eefc:	b538      	push	{r3, r4, r5, lr}
 801eefe:	4b10      	ldr	r3, [pc, #64]	; (801ef40 <srand+0x44>)
 801ef00:	681d      	ldr	r5, [r3, #0]
 801ef02:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801ef04:	4604      	mov	r4, r0
 801ef06:	b9b3      	cbnz	r3, 801ef36 <srand+0x3a>
 801ef08:	2018      	movs	r0, #24
 801ef0a:	f7ff feef 	bl	801ecec <malloc>
 801ef0e:	4602      	mov	r2, r0
 801ef10:	63a8      	str	r0, [r5, #56]	; 0x38
 801ef12:	b920      	cbnz	r0, 801ef1e <srand+0x22>
 801ef14:	4b0b      	ldr	r3, [pc, #44]	; (801ef44 <srand+0x48>)
 801ef16:	480c      	ldr	r0, [pc, #48]	; (801ef48 <srand+0x4c>)
 801ef18:	2142      	movs	r1, #66	; 0x42
 801ef1a:	f001 fac3 	bl	80204a4 <__assert_func>
 801ef1e:	490b      	ldr	r1, [pc, #44]	; (801ef4c <srand+0x50>)
 801ef20:	4b0b      	ldr	r3, [pc, #44]	; (801ef50 <srand+0x54>)
 801ef22:	e9c0 1300 	strd	r1, r3, [r0]
 801ef26:	4b0b      	ldr	r3, [pc, #44]	; (801ef54 <srand+0x58>)
 801ef28:	6083      	str	r3, [r0, #8]
 801ef2a:	230b      	movs	r3, #11
 801ef2c:	8183      	strh	r3, [r0, #12]
 801ef2e:	2100      	movs	r1, #0
 801ef30:	2001      	movs	r0, #1
 801ef32:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ef36:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801ef38:	2200      	movs	r2, #0
 801ef3a:	611c      	str	r4, [r3, #16]
 801ef3c:	615a      	str	r2, [r3, #20]
 801ef3e:	bd38      	pop	{r3, r4, r5, pc}
 801ef40:	20000108 	.word	0x20000108
 801ef44:	080271a4 	.word	0x080271a4
 801ef48:	0802727c 	.word	0x0802727c
 801ef4c:	abcd330e 	.word	0xabcd330e
 801ef50:	e66d1234 	.word	0xe66d1234
 801ef54:	0005deec 	.word	0x0005deec

0801ef58 <rand>:
 801ef58:	4b17      	ldr	r3, [pc, #92]	; (801efb8 <rand+0x60>)
 801ef5a:	b510      	push	{r4, lr}
 801ef5c:	681c      	ldr	r4, [r3, #0]
 801ef5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ef60:	b9b3      	cbnz	r3, 801ef90 <rand+0x38>
 801ef62:	2018      	movs	r0, #24
 801ef64:	f7ff fec2 	bl	801ecec <malloc>
 801ef68:	63a0      	str	r0, [r4, #56]	; 0x38
 801ef6a:	b928      	cbnz	r0, 801ef78 <rand+0x20>
 801ef6c:	4602      	mov	r2, r0
 801ef6e:	4b13      	ldr	r3, [pc, #76]	; (801efbc <rand+0x64>)
 801ef70:	4813      	ldr	r0, [pc, #76]	; (801efc0 <rand+0x68>)
 801ef72:	214e      	movs	r1, #78	; 0x4e
 801ef74:	f001 fa96 	bl	80204a4 <__assert_func>
 801ef78:	4a12      	ldr	r2, [pc, #72]	; (801efc4 <rand+0x6c>)
 801ef7a:	4b13      	ldr	r3, [pc, #76]	; (801efc8 <rand+0x70>)
 801ef7c:	e9c0 2300 	strd	r2, r3, [r0]
 801ef80:	4b12      	ldr	r3, [pc, #72]	; (801efcc <rand+0x74>)
 801ef82:	6083      	str	r3, [r0, #8]
 801ef84:	230b      	movs	r3, #11
 801ef86:	8183      	strh	r3, [r0, #12]
 801ef88:	2201      	movs	r2, #1
 801ef8a:	2300      	movs	r3, #0
 801ef8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ef90:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ef92:	480f      	ldr	r0, [pc, #60]	; (801efd0 <rand+0x78>)
 801ef94:	690a      	ldr	r2, [r1, #16]
 801ef96:	694b      	ldr	r3, [r1, #20]
 801ef98:	4c0e      	ldr	r4, [pc, #56]	; (801efd4 <rand+0x7c>)
 801ef9a:	4350      	muls	r0, r2
 801ef9c:	fb04 0003 	mla	r0, r4, r3, r0
 801efa0:	fba2 3404 	umull	r3, r4, r2, r4
 801efa4:	1c5a      	adds	r2, r3, #1
 801efa6:	4404      	add	r4, r0
 801efa8:	f144 0000 	adc.w	r0, r4, #0
 801efac:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801efb0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801efb4:	bd10      	pop	{r4, pc}
 801efb6:	bf00      	nop
 801efb8:	20000108 	.word	0x20000108
 801efbc:	080271a4 	.word	0x080271a4
 801efc0:	0802727c 	.word	0x0802727c
 801efc4:	abcd330e 	.word	0xabcd330e
 801efc8:	e66d1234 	.word	0xe66d1234
 801efcc:	0005deec 	.word	0x0005deec
 801efd0:	5851f42d 	.word	0x5851f42d
 801efd4:	4c957f2d 	.word	0x4c957f2d

0801efd8 <realloc>:
 801efd8:	4b02      	ldr	r3, [pc, #8]	; (801efe4 <realloc+0xc>)
 801efda:	460a      	mov	r2, r1
 801efdc:	4601      	mov	r1, r0
 801efde:	6818      	ldr	r0, [r3, #0]
 801efe0:	f001 bc22 	b.w	8020828 <_realloc_r>
 801efe4:	20000108 	.word	0x20000108

0801efe8 <_sbrk_r>:
 801efe8:	b538      	push	{r3, r4, r5, lr}
 801efea:	4d06      	ldr	r5, [pc, #24]	; (801f004 <_sbrk_r+0x1c>)
 801efec:	2300      	movs	r3, #0
 801efee:	4604      	mov	r4, r0
 801eff0:	4608      	mov	r0, r1
 801eff2:	602b      	str	r3, [r5, #0]
 801eff4:	f7e1 ff4a 	bl	8000e8c <_sbrk>
 801eff8:	1c43      	adds	r3, r0, #1
 801effa:	d102      	bne.n	801f002 <_sbrk_r+0x1a>
 801effc:	682b      	ldr	r3, [r5, #0]
 801effe:	b103      	cbz	r3, 801f002 <_sbrk_r+0x1a>
 801f000:	6023      	str	r3, [r4, #0]
 801f002:	bd38      	pop	{r3, r4, r5, pc}
 801f004:	20000e70 	.word	0x20000e70

0801f008 <_raise_r>:
 801f008:	291f      	cmp	r1, #31
 801f00a:	b538      	push	{r3, r4, r5, lr}
 801f00c:	4604      	mov	r4, r0
 801f00e:	460d      	mov	r5, r1
 801f010:	d904      	bls.n	801f01c <_raise_r+0x14>
 801f012:	2316      	movs	r3, #22
 801f014:	6003      	str	r3, [r0, #0]
 801f016:	f04f 30ff 	mov.w	r0, #4294967295
 801f01a:	bd38      	pop	{r3, r4, r5, pc}
 801f01c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f01e:	b112      	cbz	r2, 801f026 <_raise_r+0x1e>
 801f020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f024:	b94b      	cbnz	r3, 801f03a <_raise_r+0x32>
 801f026:	4620      	mov	r0, r4
 801f028:	f000 f830 	bl	801f08c <_getpid_r>
 801f02c:	462a      	mov	r2, r5
 801f02e:	4601      	mov	r1, r0
 801f030:	4620      	mov	r0, r4
 801f032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f036:	f000 b817 	b.w	801f068 <_kill_r>
 801f03a:	2b01      	cmp	r3, #1
 801f03c:	d00a      	beq.n	801f054 <_raise_r+0x4c>
 801f03e:	1c59      	adds	r1, r3, #1
 801f040:	d103      	bne.n	801f04a <_raise_r+0x42>
 801f042:	2316      	movs	r3, #22
 801f044:	6003      	str	r3, [r0, #0]
 801f046:	2001      	movs	r0, #1
 801f048:	e7e7      	b.n	801f01a <_raise_r+0x12>
 801f04a:	2400      	movs	r4, #0
 801f04c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f050:	4628      	mov	r0, r5
 801f052:	4798      	blx	r3
 801f054:	2000      	movs	r0, #0
 801f056:	e7e0      	b.n	801f01a <_raise_r+0x12>

0801f058 <raise>:
 801f058:	4b02      	ldr	r3, [pc, #8]	; (801f064 <raise+0xc>)
 801f05a:	4601      	mov	r1, r0
 801f05c:	6818      	ldr	r0, [r3, #0]
 801f05e:	f7ff bfd3 	b.w	801f008 <_raise_r>
 801f062:	bf00      	nop
 801f064:	20000108 	.word	0x20000108

0801f068 <_kill_r>:
 801f068:	b538      	push	{r3, r4, r5, lr}
 801f06a:	4d07      	ldr	r5, [pc, #28]	; (801f088 <_kill_r+0x20>)
 801f06c:	2300      	movs	r3, #0
 801f06e:	4604      	mov	r4, r0
 801f070:	4608      	mov	r0, r1
 801f072:	4611      	mov	r1, r2
 801f074:	602b      	str	r3, [r5, #0]
 801f076:	f7e1 fe74 	bl	8000d62 <_kill>
 801f07a:	1c43      	adds	r3, r0, #1
 801f07c:	d102      	bne.n	801f084 <_kill_r+0x1c>
 801f07e:	682b      	ldr	r3, [r5, #0]
 801f080:	b103      	cbz	r3, 801f084 <_kill_r+0x1c>
 801f082:	6023      	str	r3, [r4, #0]
 801f084:	bd38      	pop	{r3, r4, r5, pc}
 801f086:	bf00      	nop
 801f088:	20000e70 	.word	0x20000e70

0801f08c <_getpid_r>:
 801f08c:	f7e1 be61 	b.w	8000d52 <_getpid>

0801f090 <siprintf>:
 801f090:	b40e      	push	{r1, r2, r3}
 801f092:	b500      	push	{lr}
 801f094:	b09c      	sub	sp, #112	; 0x70
 801f096:	ab1d      	add	r3, sp, #116	; 0x74
 801f098:	9002      	str	r0, [sp, #8]
 801f09a:	9006      	str	r0, [sp, #24]
 801f09c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f0a0:	4809      	ldr	r0, [pc, #36]	; (801f0c8 <siprintf+0x38>)
 801f0a2:	9107      	str	r1, [sp, #28]
 801f0a4:	9104      	str	r1, [sp, #16]
 801f0a6:	4909      	ldr	r1, [pc, #36]	; (801f0cc <siprintf+0x3c>)
 801f0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 801f0ac:	9105      	str	r1, [sp, #20]
 801f0ae:	6800      	ldr	r0, [r0, #0]
 801f0b0:	9301      	str	r3, [sp, #4]
 801f0b2:	a902      	add	r1, sp, #8
 801f0b4:	f001 fc3a 	bl	802092c <_svfiprintf_r>
 801f0b8:	9b02      	ldr	r3, [sp, #8]
 801f0ba:	2200      	movs	r2, #0
 801f0bc:	701a      	strb	r2, [r3, #0]
 801f0be:	b01c      	add	sp, #112	; 0x70
 801f0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f0c4:	b003      	add	sp, #12
 801f0c6:	4770      	bx	lr
 801f0c8:	20000108 	.word	0x20000108
 801f0cc:	ffff0208 	.word	0xffff0208

0801f0d0 <__sread>:
 801f0d0:	b510      	push	{r4, lr}
 801f0d2:	460c      	mov	r4, r1
 801f0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f0d8:	f002 f85e 	bl	8021198 <_read_r>
 801f0dc:	2800      	cmp	r0, #0
 801f0de:	bfab      	itete	ge
 801f0e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f0e2:	89a3      	ldrhlt	r3, [r4, #12]
 801f0e4:	181b      	addge	r3, r3, r0
 801f0e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f0ea:	bfac      	ite	ge
 801f0ec:	6563      	strge	r3, [r4, #84]	; 0x54
 801f0ee:	81a3      	strhlt	r3, [r4, #12]
 801f0f0:	bd10      	pop	{r4, pc}

0801f0f2 <__seofread>:
 801f0f2:	2000      	movs	r0, #0
 801f0f4:	4770      	bx	lr

0801f0f6 <__swrite>:
 801f0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0fa:	461f      	mov	r7, r3
 801f0fc:	898b      	ldrh	r3, [r1, #12]
 801f0fe:	05db      	lsls	r3, r3, #23
 801f100:	4605      	mov	r5, r0
 801f102:	460c      	mov	r4, r1
 801f104:	4616      	mov	r6, r2
 801f106:	d505      	bpl.n	801f114 <__swrite+0x1e>
 801f108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f10c:	2302      	movs	r3, #2
 801f10e:	2200      	movs	r2, #0
 801f110:	f001 fb5a 	bl	80207c8 <_lseek_r>
 801f114:	89a3      	ldrh	r3, [r4, #12]
 801f116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f11a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f11e:	81a3      	strh	r3, [r4, #12]
 801f120:	4632      	mov	r2, r6
 801f122:	463b      	mov	r3, r7
 801f124:	4628      	mov	r0, r5
 801f126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f12a:	f001 b8d5 	b.w	80202d8 <_write_r>

0801f12e <__sseek>:
 801f12e:	b510      	push	{r4, lr}
 801f130:	460c      	mov	r4, r1
 801f132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f136:	f001 fb47 	bl	80207c8 <_lseek_r>
 801f13a:	1c43      	adds	r3, r0, #1
 801f13c:	89a3      	ldrh	r3, [r4, #12]
 801f13e:	bf15      	itete	ne
 801f140:	6560      	strne	r0, [r4, #84]	; 0x54
 801f142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f14a:	81a3      	strheq	r3, [r4, #12]
 801f14c:	bf18      	it	ne
 801f14e:	81a3      	strhne	r3, [r4, #12]
 801f150:	bd10      	pop	{r4, pc}

0801f152 <__sclose>:
 801f152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f156:	f001 b9c3 	b.w	80204e0 <_close_r>
	...

0801f15c <iso_year_adjust>:
 801f15c:	6941      	ldr	r1, [r0, #20]
 801f15e:	2900      	cmp	r1, #0
 801f160:	f240 736c 	movw	r3, #1900	; 0x76c
 801f164:	bfa8      	it	ge
 801f166:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801f16a:	18ca      	adds	r2, r1, r3
 801f16c:	078b      	lsls	r3, r1, #30
 801f16e:	d105      	bne.n	801f17c <iso_year_adjust+0x20>
 801f170:	2164      	movs	r1, #100	; 0x64
 801f172:	fb92 f3f1 	sdiv	r3, r2, r1
 801f176:	fb01 2313 	mls	r3, r1, r3, r2
 801f17a:	b9db      	cbnz	r3, 801f1b4 <iso_year_adjust+0x58>
 801f17c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f180:	fb92 f3f1 	sdiv	r3, r2, r1
 801f184:	fb01 2313 	mls	r3, r1, r3, r2
 801f188:	fab3 f383 	clz	r3, r3
 801f18c:	095b      	lsrs	r3, r3, #5
 801f18e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801f192:	0040      	lsls	r0, r0, #1
 801f194:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801f198:	4418      	add	r0, r3
 801f19a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801f19e:	4298      	cmp	r0, r3
 801f1a0:	d03a      	beq.n	801f218 <iso_year_adjust+0xbc>
 801f1a2:	dc21      	bgt.n	801f1e8 <iso_year_adjust+0x8c>
 801f1a4:	2801      	cmp	r0, #1
 801f1a6:	dc1a      	bgt.n	801f1de <iso_year_adjust+0x82>
 801f1a8:	2800      	cmp	r0, #0
 801f1aa:	bfb4      	ite	lt
 801f1ac:	2000      	movlt	r0, #0
 801f1ae:	f04f 30ff 	movge.w	r0, #4294967295
 801f1b2:	4770      	bx	lr
 801f1b4:	2301      	movs	r3, #1
 801f1b6:	e7ea      	b.n	801f18e <iso_year_adjust+0x32>
 801f1b8:	2817      	cmp	r0, #23
 801f1ba:	d813      	bhi.n	801f1e4 <iso_year_adjust+0x88>
 801f1bc:	e8df f000 	tbb	[pc, r0]
 801f1c0:	0c0c0c0c 	.word	0x0c0c0c0c
 801f1c4:	0c0c1212 	.word	0x0c0c1212
 801f1c8:	12121212 	.word	0x12121212
 801f1cc:	12121212 	.word	0x12121212
 801f1d0:	0c0c1212 	.word	0x0c0c1212
 801f1d4:	0c0c1212 	.word	0x0c0c1212
 801f1d8:	f04f 30ff 	mov.w	r0, #4294967295
 801f1dc:	4770      	bx	lr
 801f1de:	380a      	subs	r0, #10
 801f1e0:	2817      	cmp	r0, #23
 801f1e2:	d9e9      	bls.n	801f1b8 <iso_year_adjust+0x5c>
 801f1e4:	2000      	movs	r0, #0
 801f1e6:	4770      	bx	lr
 801f1e8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801f1ec:	4298      	cmp	r0, r3
 801f1ee:	dc06      	bgt.n	801f1fe <iso_year_adjust+0xa2>
 801f1f0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801f1f4:	4298      	cmp	r0, r3
 801f1f6:	bfd4      	ite	le
 801f1f8:	2000      	movle	r0, #0
 801f1fa:	2001      	movgt	r0, #1
 801f1fc:	4770      	bx	lr
 801f1fe:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801f202:	3802      	subs	r0, #2
 801f204:	2815      	cmp	r0, #21
 801f206:	d8ed      	bhi.n	801f1e4 <iso_year_adjust+0x88>
 801f208:	2301      	movs	r3, #1
 801f20a:	4083      	lsls	r3, r0
 801f20c:	4803      	ldr	r0, [pc, #12]	; (801f21c <iso_year_adjust+0xc0>)
 801f20e:	4018      	ands	r0, r3
 801f210:	3800      	subs	r0, #0
 801f212:	bf18      	it	ne
 801f214:	2001      	movne	r0, #1
 801f216:	4770      	bx	lr
 801f218:	2001      	movs	r0, #1
 801f21a:	4770      	bx	lr
 801f21c:	002a001f 	.word	0x002a001f

0801f220 <__strftime>:
 801f220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f224:	b091      	sub	sp, #68	; 0x44
 801f226:	461d      	mov	r5, r3
 801f228:	2300      	movs	r3, #0
 801f22a:	4681      	mov	r9, r0
 801f22c:	4688      	mov	r8, r1
 801f22e:	9304      	str	r3, [sp, #16]
 801f230:	461c      	mov	r4, r3
 801f232:	7813      	ldrb	r3, [r2, #0]
 801f234:	2b00      	cmp	r3, #0
 801f236:	f000 84d1 	beq.w	801fbdc <__strftime+0x9bc>
 801f23a:	2b25      	cmp	r3, #37	; 0x25
 801f23c:	d11b      	bne.n	801f276 <__strftime+0x56>
 801f23e:	7857      	ldrb	r7, [r2, #1]
 801f240:	2f30      	cmp	r7, #48	; 0x30
 801f242:	d024      	beq.n	801f28e <__strftime+0x6e>
 801f244:	2f2b      	cmp	r7, #43	; 0x2b
 801f246:	d022      	beq.n	801f28e <__strftime+0x6e>
 801f248:	f102 0b01 	add.w	fp, r2, #1
 801f24c:	2700      	movs	r7, #0
 801f24e:	f89b 3000 	ldrb.w	r3, [fp]
 801f252:	3b31      	subs	r3, #49	; 0x31
 801f254:	2b08      	cmp	r3, #8
 801f256:	d81d      	bhi.n	801f294 <__strftime+0x74>
 801f258:	4658      	mov	r0, fp
 801f25a:	220a      	movs	r2, #10
 801f25c:	a908      	add	r1, sp, #32
 801f25e:	f000 fd6f 	bl	801fd40 <strtoul>
 801f262:	f8dd b020 	ldr.w	fp, [sp, #32]
 801f266:	4606      	mov	r6, r0
 801f268:	f89b 3000 	ldrb.w	r3, [fp]
 801f26c:	2b45      	cmp	r3, #69	; 0x45
 801f26e:	d113      	bne.n	801f298 <__strftime+0x78>
 801f270:	f10b 0b01 	add.w	fp, fp, #1
 801f274:	e012      	b.n	801f29c <__strftime+0x7c>
 801f276:	f108 31ff 	add.w	r1, r8, #4294967295
 801f27a:	42a1      	cmp	r1, r4
 801f27c:	d802      	bhi.n	801f284 <__strftime+0x64>
 801f27e:	2400      	movs	r4, #0
 801f280:	f000 bcb2 	b.w	801fbe8 <__strftime+0x9c8>
 801f284:	f809 3004 	strb.w	r3, [r9, r4]
 801f288:	3201      	adds	r2, #1
 801f28a:	3401      	adds	r4, #1
 801f28c:	e7d1      	b.n	801f232 <__strftime+0x12>
 801f28e:	f102 0b02 	add.w	fp, r2, #2
 801f292:	e7dc      	b.n	801f24e <__strftime+0x2e>
 801f294:	2600      	movs	r6, #0
 801f296:	e7e7      	b.n	801f268 <__strftime+0x48>
 801f298:	2b4f      	cmp	r3, #79	; 0x4f
 801f29a:	d0e9      	beq.n	801f270 <__strftime+0x50>
 801f29c:	f89b 0000 	ldrb.w	r0, [fp]
 801f2a0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801f2a4:	2b55      	cmp	r3, #85	; 0x55
 801f2a6:	d8ea      	bhi.n	801f27e <__strftime+0x5e>
 801f2a8:	a201      	add	r2, pc, #4	; (adr r2, 801f2b0 <__strftime+0x90>)
 801f2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f2ae:	bf00      	nop
 801f2b0:	0801fbcf 	.word	0x0801fbcf
 801f2b4:	0801f27f 	.word	0x0801f27f
 801f2b8:	0801f27f 	.word	0x0801f27f
 801f2bc:	0801f27f 	.word	0x0801f27f
 801f2c0:	0801f27f 	.word	0x0801f27f
 801f2c4:	0801f27f 	.word	0x0801f27f
 801f2c8:	0801f27f 	.word	0x0801f27f
 801f2cc:	0801f27f 	.word	0x0801f27f
 801f2d0:	0801f27f 	.word	0x0801f27f
 801f2d4:	0801f27f 	.word	0x0801f27f
 801f2d8:	0801f27f 	.word	0x0801f27f
 801f2dc:	0801f27f 	.word	0x0801f27f
 801f2e0:	0801f27f 	.word	0x0801f27f
 801f2e4:	0801f27f 	.word	0x0801f27f
 801f2e8:	0801f27f 	.word	0x0801f27f
 801f2ec:	0801f27f 	.word	0x0801f27f
 801f2f0:	0801f27f 	.word	0x0801f27f
 801f2f4:	0801f27f 	.word	0x0801f27f
 801f2f8:	0801f27f 	.word	0x0801f27f
 801f2fc:	0801f27f 	.word	0x0801f27f
 801f300:	0801f27f 	.word	0x0801f27f
 801f304:	0801f27f 	.word	0x0801f27f
 801f308:	0801f27f 	.word	0x0801f27f
 801f30c:	0801f27f 	.word	0x0801f27f
 801f310:	0801f27f 	.word	0x0801f27f
 801f314:	0801f27f 	.word	0x0801f27f
 801f318:	0801f27f 	.word	0x0801f27f
 801f31c:	0801f27f 	.word	0x0801f27f
 801f320:	0801f447 	.word	0x0801f447
 801f324:	0801f4a1 	.word	0x0801f4a1
 801f328:	0801f517 	.word	0x0801f517
 801f32c:	0801f5b1 	.word	0x0801f5b1
 801f330:	0801f27f 	.word	0x0801f27f
 801f334:	0801f5fd 	.word	0x0801f5fd
 801f338:	0801f6dd 	.word	0x0801f6dd
 801f33c:	0801f7df 	.word	0x0801f7df
 801f340:	0801f7ed 	.word	0x0801f7ed
 801f344:	0801f27f 	.word	0x0801f27f
 801f348:	0801f27f 	.word	0x0801f27f
 801f34c:	0801f27f 	.word	0x0801f27f
 801f350:	0801f81d 	.word	0x0801f81d
 801f354:	0801f27f 	.word	0x0801f27f
 801f358:	0801f27f 	.word	0x0801f27f
 801f35c:	0801f835 	.word	0x0801f835
 801f360:	0801f27f 	.word	0x0801f27f
 801f364:	0801f883 	.word	0x0801f883
 801f368:	0801f999 	.word	0x0801f999
 801f36c:	0801f9ab 	.word	0x0801f9ab
 801f370:	0801fa03 	.word	0x0801fa03
 801f374:	0801fa13 	.word	0x0801fa13
 801f378:	0801fa89 	.word	0x0801fa89
 801f37c:	0801f50f 	.word	0x0801f50f
 801f380:	0801fabd 	.word	0x0801fabd
 801f384:	0801fb7b 	.word	0x0801fb7b
 801f388:	0801f27f 	.word	0x0801f27f
 801f38c:	0801f27f 	.word	0x0801f27f
 801f390:	0801f27f 	.word	0x0801f27f
 801f394:	0801f27f 	.word	0x0801f27f
 801f398:	0801f27f 	.word	0x0801f27f
 801f39c:	0801f27f 	.word	0x0801f27f
 801f3a0:	0801f409 	.word	0x0801f409
 801f3a4:	0801f475 	.word	0x0801f475
 801f3a8:	0801f4cf 	.word	0x0801f4cf
 801f3ac:	0801f589 	.word	0x0801f589
 801f3b0:	0801f589 	.word	0x0801f589
 801f3b4:	0801f27f 	.word	0x0801f27f
 801f3b8:	0801f645 	.word	0x0801f645
 801f3bc:	0801f475 	.word	0x0801f475
 801f3c0:	0801f27f 	.word	0x0801f27f
 801f3c4:	0801f80f 	.word	0x0801f80f
 801f3c8:	0801f7df 	.word	0x0801f7df
 801f3cc:	0801f7ed 	.word	0x0801f7ed
 801f3d0:	0801f817 	.word	0x0801f817
 801f3d4:	0801f821 	.word	0x0801f821
 801f3d8:	0801f27f 	.word	0x0801f27f
 801f3dc:	0801f835 	.word	0x0801f835
 801f3e0:	0801f27f 	.word	0x0801f27f
 801f3e4:	0801f4ff 	.word	0x0801f4ff
 801f3e8:	0801f899 	.word	0x0801f899
 801f3ec:	0801f99d 	.word	0x0801f99d
 801f3f0:	0801f9e5 	.word	0x0801f9e5
 801f3f4:	0801f27f 	.word	0x0801f27f
 801f3f8:	0801fa79 	.word	0x0801fa79
 801f3fc:	0801f507 	.word	0x0801f507
 801f400:	0801faa1 	.word	0x0801faa1
 801f404:	0801fb0d 	.word	0x0801fb0d
 801f408:	69ab      	ldr	r3, [r5, #24]
 801f40a:	4aa7      	ldr	r2, [pc, #668]	; (801f6a8 <__strftime+0x488>)
 801f40c:	3318      	adds	r3, #24
 801f40e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801f412:	4630      	mov	r0, r6
 801f414:	f7e0 ff12 	bl	800023c <strlen>
 801f418:	3e01      	subs	r6, #1
 801f41a:	4420      	add	r0, r4
 801f41c:	f108 33ff 	add.w	r3, r8, #4294967295
 801f420:	42a0      	cmp	r0, r4
 801f422:	d107      	bne.n	801f434 <__strftime+0x214>
 801f424:	f89b 3000 	ldrb.w	r3, [fp]
 801f428:	2b00      	cmp	r3, #0
 801f42a:	f000 83d7 	beq.w	801fbdc <__strftime+0x9bc>
 801f42e:	f10b 0201 	add.w	r2, fp, #1
 801f432:	e6fe      	b.n	801f232 <__strftime+0x12>
 801f434:	42a3      	cmp	r3, r4
 801f436:	f67f af22 	bls.w	801f27e <__strftime+0x5e>
 801f43a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f43e:	f809 2004 	strb.w	r2, [r9, r4]
 801f442:	3401      	adds	r4, #1
 801f444:	e7ec      	b.n	801f420 <__strftime+0x200>
 801f446:	69aa      	ldr	r2, [r5, #24]
 801f448:	4b97      	ldr	r3, [pc, #604]	; (801f6a8 <__strftime+0x488>)
 801f44a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801f44e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801f450:	4630      	mov	r0, r6
 801f452:	f7e0 fef3 	bl	800023c <strlen>
 801f456:	3e01      	subs	r6, #1
 801f458:	4420      	add	r0, r4
 801f45a:	f108 33ff 	add.w	r3, r8, #4294967295
 801f45e:	42a0      	cmp	r0, r4
 801f460:	d0e0      	beq.n	801f424 <__strftime+0x204>
 801f462:	42a3      	cmp	r3, r4
 801f464:	f67f af0b 	bls.w	801f27e <__strftime+0x5e>
 801f468:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f46c:	f809 2004 	strb.w	r2, [r9, r4]
 801f470:	3401      	adds	r4, #1
 801f472:	e7f4      	b.n	801f45e <__strftime+0x23e>
 801f474:	4b8c      	ldr	r3, [pc, #560]	; (801f6a8 <__strftime+0x488>)
 801f476:	692a      	ldr	r2, [r5, #16]
 801f478:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f47c:	4630      	mov	r0, r6
 801f47e:	f7e0 fedd 	bl	800023c <strlen>
 801f482:	3e01      	subs	r6, #1
 801f484:	4420      	add	r0, r4
 801f486:	f108 33ff 	add.w	r3, r8, #4294967295
 801f48a:	42a0      	cmp	r0, r4
 801f48c:	d0ca      	beq.n	801f424 <__strftime+0x204>
 801f48e:	42a3      	cmp	r3, r4
 801f490:	f67f aef5 	bls.w	801f27e <__strftime+0x5e>
 801f494:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f498:	f809 2004 	strb.w	r2, [r9, r4]
 801f49c:	3401      	adds	r4, #1
 801f49e:	e7f4      	b.n	801f48a <__strftime+0x26a>
 801f4a0:	692b      	ldr	r3, [r5, #16]
 801f4a2:	4a81      	ldr	r2, [pc, #516]	; (801f6a8 <__strftime+0x488>)
 801f4a4:	330c      	adds	r3, #12
 801f4a6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801f4aa:	4630      	mov	r0, r6
 801f4ac:	f7e0 fec6 	bl	800023c <strlen>
 801f4b0:	3e01      	subs	r6, #1
 801f4b2:	4420      	add	r0, r4
 801f4b4:	f108 33ff 	add.w	r3, r8, #4294967295
 801f4b8:	42a0      	cmp	r0, r4
 801f4ba:	d0b3      	beq.n	801f424 <__strftime+0x204>
 801f4bc:	42a3      	cmp	r3, r4
 801f4be:	f67f aede 	bls.w	801f27e <__strftime+0x5e>
 801f4c2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f4c6:	f809 2004 	strb.w	r2, [r9, r4]
 801f4ca:	3401      	adds	r4, #1
 801f4cc:	e7f4      	b.n	801f4b8 <__strftime+0x298>
 801f4ce:	4b76      	ldr	r3, [pc, #472]	; (801f6a8 <__strftime+0x488>)
 801f4d0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801f4d4:	4630      	mov	r0, r6
 801f4d6:	f7e0 feb1 	bl	800023c <strlen>
 801f4da:	7833      	ldrb	r3, [r6, #0]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	d0a1      	beq.n	801f424 <__strftime+0x204>
 801f4e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f4e2:	9300      	str	r3, [sp, #0]
 801f4e4:	4632      	mov	r2, r6
 801f4e6:	462b      	mov	r3, r5
 801f4e8:	eba8 0104 	sub.w	r1, r8, r4
 801f4ec:	eb09 0004 	add.w	r0, r9, r4
 801f4f0:	f7ff fe96 	bl	801f220 <__strftime>
 801f4f4:	2800      	cmp	r0, #0
 801f4f6:	f77f aec2 	ble.w	801f27e <__strftime+0x5e>
 801f4fa:	4404      	add	r4, r0
 801f4fc:	e792      	b.n	801f424 <__strftime+0x204>
 801f4fe:	4b6a      	ldr	r3, [pc, #424]	; (801f6a8 <__strftime+0x488>)
 801f500:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801f504:	e7e6      	b.n	801f4d4 <__strftime+0x2b4>
 801f506:	4b68      	ldr	r3, [pc, #416]	; (801f6a8 <__strftime+0x488>)
 801f508:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801f50c:	e7e2      	b.n	801f4d4 <__strftime+0x2b4>
 801f50e:	4b66      	ldr	r3, [pc, #408]	; (801f6a8 <__strftime+0x488>)
 801f510:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801f514:	e7de      	b.n	801f4d4 <__strftime+0x2b4>
 801f516:	4965      	ldr	r1, [pc, #404]	; (801f6ac <__strftime+0x48c>)
 801f518:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801f51c:	458a      	cmp	sl, r1
 801f51e:	bfac      	ite	ge
 801f520:	2100      	movge	r1, #0
 801f522:	2101      	movlt	r1, #1
 801f524:	f1ba 0f00 	cmp.w	sl, #0
 801f528:	db0e      	blt.n	801f548 <__strftime+0x328>
 801f52a:	2064      	movs	r0, #100	; 0x64
 801f52c:	fb9a f0f0 	sdiv	r0, sl, r0
 801f530:	3013      	adds	r0, #19
 801f532:	b19f      	cbz	r7, 801f55c <__strftime+0x33c>
 801f534:	2863      	cmp	r0, #99	; 0x63
 801f536:	dd25      	ble.n	801f584 <__strftime+0x364>
 801f538:	4a5d      	ldr	r2, [pc, #372]	; (801f6b0 <__strftime+0x490>)
 801f53a:	4b5e      	ldr	r3, [pc, #376]	; (801f6b4 <__strftime+0x494>)
 801f53c:	2f2b      	cmp	r7, #43	; 0x2b
 801f53e:	bf14      	ite	ne
 801f540:	4617      	movne	r7, r2
 801f542:	461f      	moveq	r7, r3
 801f544:	4a5c      	ldr	r2, [pc, #368]	; (801f6b8 <__strftime+0x498>)
 801f546:	e00b      	b.n	801f560 <__strftime+0x340>
 801f548:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801f54c:	9105      	str	r1, [sp, #20]
 801f54e:	f000 ffa5 	bl	802049c <abs>
 801f552:	2364      	movs	r3, #100	; 0x64
 801f554:	9905      	ldr	r1, [sp, #20]
 801f556:	fb90 f0f3 	sdiv	r0, r0, r3
 801f55a:	e7ea      	b.n	801f532 <__strftime+0x312>
 801f55c:	4f54      	ldr	r7, [pc, #336]	; (801f6b0 <__strftime+0x490>)
 801f55e:	4a57      	ldr	r2, [pc, #348]	; (801f6bc <__strftime+0x49c>)
 801f560:	4b57      	ldr	r3, [pc, #348]	; (801f6c0 <__strftime+0x4a0>)
 801f562:	9001      	str	r0, [sp, #4]
 801f564:	2e02      	cmp	r6, #2
 801f566:	bf2c      	ite	cs
 801f568:	ebc1 0606 	rsbcs	r6, r1, r6
 801f56c:	f1c1 0602 	rsbcc	r6, r1, #2
 801f570:	494e      	ldr	r1, [pc, #312]	; (801f6ac <__strftime+0x48c>)
 801f572:	9600      	str	r6, [sp, #0]
 801f574:	458a      	cmp	sl, r1
 801f576:	bfa8      	it	ge
 801f578:	463b      	movge	r3, r7
 801f57a:	eba8 0104 	sub.w	r1, r8, r4
 801f57e:	eb09 0004 	add.w	r0, r9, r4
 801f582:	e02a      	b.n	801f5da <__strftime+0x3ba>
 801f584:	4f4a      	ldr	r7, [pc, #296]	; (801f6b0 <__strftime+0x490>)
 801f586:	e7dd      	b.n	801f544 <__strftime+0x324>
 801f588:	494e      	ldr	r1, [pc, #312]	; (801f6c4 <__strftime+0x4a4>)
 801f58a:	4a4f      	ldr	r2, [pc, #316]	; (801f6c8 <__strftime+0x4a8>)
 801f58c:	68eb      	ldr	r3, [r5, #12]
 801f58e:	2864      	cmp	r0, #100	; 0x64
 801f590:	bf08      	it	eq
 801f592:	460a      	moveq	r2, r1
 801f594:	eba8 0104 	sub.w	r1, r8, r4
 801f598:	eb09 0004 	add.w	r0, r9, r4
 801f59c:	f001 fe0e 	bl	80211bc <sniprintf>
 801f5a0:	2800      	cmp	r0, #0
 801f5a2:	f6ff ae6c 	blt.w	801f27e <__strftime+0x5e>
 801f5a6:	4404      	add	r4, r0
 801f5a8:	45a0      	cmp	r8, r4
 801f5aa:	f63f af3b 	bhi.w	801f424 <__strftime+0x204>
 801f5ae:	e666      	b.n	801f27e <__strftime+0x5e>
 801f5b0:	6968      	ldr	r0, [r5, #20]
 801f5b2:	692b      	ldr	r3, [r5, #16]
 801f5b4:	68ef      	ldr	r7, [r5, #12]
 801f5b6:	2800      	cmp	r0, #0
 801f5b8:	eb09 0604 	add.w	r6, r9, r4
 801f5bc:	eba8 0104 	sub.w	r1, r8, r4
 801f5c0:	f103 0301 	add.w	r3, r3, #1
 801f5c4:	db0c      	blt.n	801f5e0 <__strftime+0x3c0>
 801f5c6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f5ca:	fb90 f2fc 	sdiv	r2, r0, ip
 801f5ce:	fb0c 0212 	mls	r2, ip, r2, r0
 801f5d2:	e9cd 7200 	strd	r7, r2, [sp]
 801f5d6:	4a3d      	ldr	r2, [pc, #244]	; (801f6cc <__strftime+0x4ac>)
 801f5d8:	4630      	mov	r0, r6
 801f5da:	f001 fdef 	bl	80211bc <sniprintf>
 801f5de:	e7df      	b.n	801f5a0 <__strftime+0x380>
 801f5e0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f5e4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801f5e8:	f000 ff58 	bl	802049c <abs>
 801f5ec:	2264      	movs	r2, #100	; 0x64
 801f5ee:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801f5f2:	fb90 fcf2 	sdiv	ip, r0, r2
 801f5f6:	fb0c 0212 	mls	r2, ip, r2, r0
 801f5fa:	e7ea      	b.n	801f5d2 <__strftime+0x3b2>
 801f5fc:	2325      	movs	r3, #37	; 0x25
 801f5fe:	f88d 3020 	strb.w	r3, [sp, #32]
 801f602:	b187      	cbz	r7, 801f626 <__strftime+0x406>
 801f604:	2e06      	cmp	r6, #6
 801f606:	bf38      	it	cc
 801f608:	2606      	movcc	r6, #6
 801f60a:	1fb3      	subs	r3, r6, #6
 801f60c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801f610:	d10c      	bne.n	801f62c <__strftime+0x40c>
 801f612:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801f616:	492e      	ldr	r1, [pc, #184]	; (801f6d0 <__strftime+0x4b0>)
 801f618:	f001 fe30 	bl	802127c <strcpy>
 801f61c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f61e:	9300      	str	r3, [sp, #0]
 801f620:	aa08      	add	r2, sp, #32
 801f622:	462b      	mov	r3, r5
 801f624:	e760      	b.n	801f4e8 <__strftime+0x2c8>
 801f626:	272b      	movs	r7, #43	; 0x2b
 801f628:	260a      	movs	r6, #10
 801f62a:	e7ee      	b.n	801f60a <__strftime+0x3ea>
 801f62c:	4a29      	ldr	r2, [pc, #164]	; (801f6d4 <__strftime+0x4b4>)
 801f62e:	211e      	movs	r1, #30
 801f630:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801f634:	f001 fdc2 	bl	80211bc <sniprintf>
 801f638:	2800      	cmp	r0, #0
 801f63a:	ddea      	ble.n	801f612 <__strftime+0x3f2>
 801f63c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801f640:	4418      	add	r0, r3
 801f642:	e7e8      	b.n	801f616 <__strftime+0x3f6>
 801f644:	4628      	mov	r0, r5
 801f646:	f7ff fd89 	bl	801f15c <iso_year_adjust>
 801f64a:	4606      	mov	r6, r0
 801f64c:	6968      	ldr	r0, [r5, #20]
 801f64e:	2800      	cmp	r0, #0
 801f650:	db11      	blt.n	801f676 <__strftime+0x456>
 801f652:	2264      	movs	r2, #100	; 0x64
 801f654:	fb90 f3f2 	sdiv	r3, r0, r2
 801f658:	fb02 0313 	mls	r3, r2, r3, r0
 801f65c:	441e      	add	r6, r3
 801f65e:	2364      	movs	r3, #100	; 0x64
 801f660:	fb96 f0f3 	sdiv	r0, r6, r3
 801f664:	fb03 6610 	mls	r6, r3, r0, r6
 801f668:	441e      	add	r6, r3
 801f66a:	fbb6 f2f3 	udiv	r2, r6, r3
 801f66e:	fb03 6312 	mls	r3, r3, r2, r6
 801f672:	4a14      	ldr	r2, [pc, #80]	; (801f6c4 <__strftime+0x4a4>)
 801f674:	e78e      	b.n	801f594 <__strftime+0x374>
 801f676:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f67a:	f000 ff0f 	bl	802049c <abs>
 801f67e:	2364      	movs	r3, #100	; 0x64
 801f680:	2e00      	cmp	r6, #0
 801f682:	fb90 f2f3 	sdiv	r2, r0, r3
 801f686:	fb02 0313 	mls	r3, r2, r3, r0
 801f68a:	da05      	bge.n	801f698 <__strftime+0x478>
 801f68c:	6969      	ldr	r1, [r5, #20]
 801f68e:	4a12      	ldr	r2, [pc, #72]	; (801f6d8 <__strftime+0x4b8>)
 801f690:	4291      	cmp	r1, r2
 801f692:	bfb8      	it	lt
 801f694:	2601      	movlt	r6, #1
 801f696:	e7e1      	b.n	801f65c <__strftime+0x43c>
 801f698:	d0e0      	beq.n	801f65c <__strftime+0x43c>
 801f69a:	6969      	ldr	r1, [r5, #20]
 801f69c:	4a03      	ldr	r2, [pc, #12]	; (801f6ac <__strftime+0x48c>)
 801f69e:	4291      	cmp	r1, r2
 801f6a0:	bfb8      	it	lt
 801f6a2:	f04f 36ff 	movlt.w	r6, #4294967295
 801f6a6:	e7d9      	b.n	801f65c <__strftime+0x43c>
 801f6a8:	08027460 	.word	0x08027460
 801f6ac:	fffff894 	.word	0xfffff894
 801f6b0:	080275d3 	.word	0x080275d3
 801f6b4:	080272ea 	.word	0x080272ea
 801f6b8:	080272e2 	.word	0x080272e2
 801f6bc:	080272db 	.word	0x080272db
 801f6c0:	08027713 	.word	0x08027713
 801f6c4:	080272fa 	.word	0x080272fa
 801f6c8:	080272ec 	.word	0x080272ec
 801f6cc:	080272f0 	.word	0x080272f0
 801f6d0:	08027303 	.word	0x08027303
 801f6d4:	080272ff 	.word	0x080272ff
 801f6d8:	fffff895 	.word	0xfffff895
 801f6dc:	4bb6      	ldr	r3, [pc, #728]	; (801f9b8 <__strftime+0x798>)
 801f6de:	6969      	ldr	r1, [r5, #20]
 801f6e0:	4299      	cmp	r1, r3
 801f6e2:	bfac      	ite	ge
 801f6e4:	2300      	movge	r3, #0
 801f6e6:	2301      	movlt	r3, #1
 801f6e8:	4628      	mov	r0, r5
 801f6ea:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801f6ee:	f7ff fd35 	bl	801f15c <iso_year_adjust>
 801f6f2:	9906      	ldr	r1, [sp, #24]
 801f6f4:	2900      	cmp	r1, #0
 801f6f6:	4682      	mov	sl, r0
 801f6f8:	db27      	blt.n	801f74a <__strftime+0x52a>
 801f6fa:	2264      	movs	r2, #100	; 0x64
 801f6fc:	fb91 f2f2 	sdiv	r2, r1, r2
 801f700:	3213      	adds	r2, #19
 801f702:	6968      	ldr	r0, [r5, #20]
 801f704:	2800      	cmp	r0, #0
 801f706:	db2b      	blt.n	801f760 <__strftime+0x540>
 801f708:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f70c:	fb90 fefc 	sdiv	lr, r0, ip
 801f710:	fb0c 001e 	mls	r0, ip, lr, r0
 801f714:	f1ba 0f00 	cmp.w	sl, #0
 801f718:	da31      	bge.n	801f77e <__strftime+0x55e>
 801f71a:	6969      	ldr	r1, [r5, #20]
 801f71c:	4ba7      	ldr	r3, [pc, #668]	; (801f9bc <__strftime+0x79c>)
 801f71e:	4299      	cmp	r1, r3
 801f720:	db38      	blt.n	801f794 <__strftime+0x574>
 801f722:	eb0a 0300 	add.w	r3, sl, r0
 801f726:	1c59      	adds	r1, r3, #1
 801f728:	d139      	bne.n	801f79e <__strftime+0x57e>
 801f72a:	3a01      	subs	r2, #1
 801f72c:	2363      	movs	r3, #99	; 0x63
 801f72e:	2064      	movs	r0, #100	; 0x64
 801f730:	fb00 3202 	mla	r2, r0, r2, r3
 801f734:	9b05      	ldr	r3, [sp, #20]
 801f736:	2b00      	cmp	r3, #0
 801f738:	d036      	beq.n	801f7a8 <__strftime+0x588>
 801f73a:	232d      	movs	r3, #45	; 0x2d
 801f73c:	f88d 3020 	strb.w	r3, [sp, #32]
 801f740:	b106      	cbz	r6, 801f744 <__strftime+0x524>
 801f742:	3e01      	subs	r6, #1
 801f744:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801f748:	e038      	b.n	801f7bc <__strftime+0x59c>
 801f74a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801f74e:	9106      	str	r1, [sp, #24]
 801f750:	f000 fea4 	bl	802049c <abs>
 801f754:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f758:	9906      	ldr	r1, [sp, #24]
 801f75a:	fb90 f2fc 	sdiv	r2, r0, ip
 801f75e:	e7d0      	b.n	801f702 <__strftime+0x4e2>
 801f760:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f764:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801f768:	f000 fe98 	bl	802049c <abs>
 801f76c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f770:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801f774:	fb90 fefc 	sdiv	lr, r0, ip
 801f778:	fb0e 001c 	mls	r0, lr, ip, r0
 801f77c:	e7ca      	b.n	801f714 <__strftime+0x4f4>
 801f77e:	d0d0      	beq.n	801f722 <__strftime+0x502>
 801f780:	4b8d      	ldr	r3, [pc, #564]	; (801f9b8 <__strftime+0x798>)
 801f782:	4299      	cmp	r1, r3
 801f784:	bfb4      	ite	lt
 801f786:	2301      	movlt	r3, #1
 801f788:	2300      	movge	r3, #0
 801f78a:	9305      	str	r3, [sp, #20]
 801f78c:	bfb8      	it	lt
 801f78e:	f04f 3aff 	movlt.w	sl, #4294967295
 801f792:	e7c6      	b.n	801f722 <__strftime+0x502>
 801f794:	f04f 0a01 	mov.w	sl, #1
 801f798:	f8cd a014 	str.w	sl, [sp, #20]
 801f79c:	e7c1      	b.n	801f722 <__strftime+0x502>
 801f79e:	2b64      	cmp	r3, #100	; 0x64
 801f7a0:	bf04      	itt	eq
 801f7a2:	3201      	addeq	r2, #1
 801f7a4:	2300      	moveq	r3, #0
 801f7a6:	e7c2      	b.n	801f72e <__strftime+0x50e>
 801f7a8:	2f2b      	cmp	r7, #43	; 0x2b
 801f7aa:	d106      	bne.n	801f7ba <__strftime+0x59a>
 801f7ac:	f242 730f 	movw	r3, #9999	; 0x270f
 801f7b0:	429a      	cmp	r2, r3
 801f7b2:	d902      	bls.n	801f7ba <__strftime+0x59a>
 801f7b4:	f88d 7020 	strb.w	r7, [sp, #32]
 801f7b8:	e7c2      	b.n	801f740 <__strftime+0x520>
 801f7ba:	ab08      	add	r3, sp, #32
 801f7bc:	2125      	movs	r1, #37	; 0x25
 801f7be:	7019      	strb	r1, [r3, #0]
 801f7c0:	b94f      	cbnz	r7, 801f7d6 <__strftime+0x5b6>
 801f7c2:	1c58      	adds	r0, r3, #1
 801f7c4:	497e      	ldr	r1, [pc, #504]	; (801f9c0 <__strftime+0x7a0>)
 801f7c6:	9205      	str	r2, [sp, #20]
 801f7c8:	f001 fd58 	bl	802127c <strcpy>
 801f7cc:	9a05      	ldr	r2, [sp, #20]
 801f7ce:	9200      	str	r2, [sp, #0]
 801f7d0:	4633      	mov	r3, r6
 801f7d2:	aa08      	add	r2, sp, #32
 801f7d4:	e059      	b.n	801f88a <__strftime+0x66a>
 801f7d6:	2130      	movs	r1, #48	; 0x30
 801f7d8:	1c98      	adds	r0, r3, #2
 801f7da:	7059      	strb	r1, [r3, #1]
 801f7dc:	e7f2      	b.n	801f7c4 <__strftime+0x5a4>
 801f7de:	4979      	ldr	r1, [pc, #484]	; (801f9c4 <__strftime+0x7a4>)
 801f7e0:	4a79      	ldr	r2, [pc, #484]	; (801f9c8 <__strftime+0x7a8>)
 801f7e2:	68ab      	ldr	r3, [r5, #8]
 801f7e4:	286b      	cmp	r0, #107	; 0x6b
 801f7e6:	bf08      	it	eq
 801f7e8:	460a      	moveq	r2, r1
 801f7ea:	e6d3      	b.n	801f594 <__strftime+0x374>
 801f7ec:	68ab      	ldr	r3, [r5, #8]
 801f7ee:	b163      	cbz	r3, 801f80a <__strftime+0x5ea>
 801f7f0:	2b0c      	cmp	r3, #12
 801f7f2:	d004      	beq.n	801f7fe <__strftime+0x5de>
 801f7f4:	210c      	movs	r1, #12
 801f7f6:	fb93 f2f1 	sdiv	r2, r3, r1
 801f7fa:	fb01 3312 	mls	r3, r1, r2, r3
 801f7fe:	4972      	ldr	r1, [pc, #456]	; (801f9c8 <__strftime+0x7a8>)
 801f800:	4a70      	ldr	r2, [pc, #448]	; (801f9c4 <__strftime+0x7a4>)
 801f802:	2849      	cmp	r0, #73	; 0x49
 801f804:	bf08      	it	eq
 801f806:	460a      	moveq	r2, r1
 801f808:	e6c4      	b.n	801f594 <__strftime+0x374>
 801f80a:	230c      	movs	r3, #12
 801f80c:	e7f7      	b.n	801f7fe <__strftime+0x5de>
 801f80e:	69eb      	ldr	r3, [r5, #28]
 801f810:	4a6e      	ldr	r2, [pc, #440]	; (801f9cc <__strftime+0x7ac>)
 801f812:	3301      	adds	r3, #1
 801f814:	e6be      	b.n	801f594 <__strftime+0x374>
 801f816:	692b      	ldr	r3, [r5, #16]
 801f818:	3301      	adds	r3, #1
 801f81a:	e72a      	b.n	801f672 <__strftime+0x452>
 801f81c:	686b      	ldr	r3, [r5, #4]
 801f81e:	e728      	b.n	801f672 <__strftime+0x452>
 801f820:	f108 33ff 	add.w	r3, r8, #4294967295
 801f824:	42a3      	cmp	r3, r4
 801f826:	f67f ad2a 	bls.w	801f27e <__strftime+0x5e>
 801f82a:	230a      	movs	r3, #10
 801f82c:	f809 3004 	strb.w	r3, [r9, r4]
 801f830:	3401      	adds	r4, #1
 801f832:	e5f7      	b.n	801f424 <__strftime+0x204>
 801f834:	68ab      	ldr	r3, [r5, #8]
 801f836:	2b0b      	cmp	r3, #11
 801f838:	bfcc      	ite	gt
 801f83a:	22a4      	movgt	r2, #164	; 0xa4
 801f83c:	22a0      	movle	r2, #160	; 0xa0
 801f83e:	4b64      	ldr	r3, [pc, #400]	; (801f9d0 <__strftime+0x7b0>)
 801f840:	4413      	add	r3, r2
 801f842:	685e      	ldr	r6, [r3, #4]
 801f844:	4630      	mov	r0, r6
 801f846:	f7e0 fcf9 	bl	800023c <strlen>
 801f84a:	1e72      	subs	r2, r6, #1
 801f84c:	4420      	add	r0, r4
 801f84e:	f108 36ff 	add.w	r6, r8, #4294967295
 801f852:	42a0      	cmp	r0, r4
 801f854:	f43f ade6 	beq.w	801f424 <__strftime+0x204>
 801f858:	42a6      	cmp	r6, r4
 801f85a:	f67f ad10 	bls.w	801f27e <__strftime+0x5e>
 801f85e:	f89b 1000 	ldrb.w	r1, [fp]
 801f862:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801f866:	2950      	cmp	r1, #80	; 0x50
 801f868:	d107      	bne.n	801f87a <__strftime+0x65a>
 801f86a:	495a      	ldr	r1, [pc, #360]	; (801f9d4 <__strftime+0x7b4>)
 801f86c:	5cc9      	ldrb	r1, [r1, r3]
 801f86e:	f001 0103 	and.w	r1, r1, #3
 801f872:	2901      	cmp	r1, #1
 801f874:	bf08      	it	eq
 801f876:	3320      	addeq	r3, #32
 801f878:	b2db      	uxtb	r3, r3
 801f87a:	f809 3004 	strb.w	r3, [r9, r4]
 801f87e:	3401      	adds	r4, #1
 801f880:	e7e7      	b.n	801f852 <__strftime+0x632>
 801f882:	686b      	ldr	r3, [r5, #4]
 801f884:	9300      	str	r3, [sp, #0]
 801f886:	4a54      	ldr	r2, [pc, #336]	; (801f9d8 <__strftime+0x7b8>)
 801f888:	68ab      	ldr	r3, [r5, #8]
 801f88a:	eba8 0104 	sub.w	r1, r8, r4
 801f88e:	eb09 0004 	add.w	r0, r9, r4
 801f892:	f001 fc93 	bl	80211bc <sniprintf>
 801f896:	e683      	b.n	801f5a0 <__strftime+0x380>
 801f898:	6a2b      	ldr	r3, [r5, #32]
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	db79      	blt.n	801f992 <__strftime+0x772>
 801f89e:	f000 fb01 	bl	801fea4 <__tz_lock>
 801f8a2:	9b04      	ldr	r3, [sp, #16]
 801f8a4:	b90b      	cbnz	r3, 801f8aa <__strftime+0x68a>
 801f8a6:	f000 fb09 	bl	801febc <_tzset_unlocked>
 801f8aa:	f000 fec5 	bl	8020638 <__gettzinfo>
 801f8ae:	6a2b      	ldr	r3, [r5, #32]
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	bfcc      	ite	gt
 801f8b4:	2350      	movgt	r3, #80	; 0x50
 801f8b6:	2328      	movle	r3, #40	; 0x28
 801f8b8:	58c3      	ldr	r3, [r0, r3]
 801f8ba:	f1c3 0a00 	rsb	sl, r3, #0
 801f8be:	f000 faf7 	bl	801feb0 <__tz_unlock>
 801f8c2:	2301      	movs	r3, #1
 801f8c4:	9304      	str	r3, [sp, #16]
 801f8c6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801f8ca:	4662      	mov	r2, ip
 801f8cc:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801f8d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f8d4:	9602      	str	r6, [sp, #8]
 801f8d6:	f143 36ff 	adc.w	r6, r3, #4294967295
 801f8da:	9603      	str	r6, [sp, #12]
 801f8dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f8e0:	2e00      	cmp	r6, #0
 801f8e2:	f177 0600 	sbcs.w	r6, r7, #0
 801f8e6:	eba8 0104 	sub.w	r1, r8, r4
 801f8ea:	eb09 0004 	add.w	r0, r9, r4
 801f8ee:	da05      	bge.n	801f8fc <__strftime+0x6dc>
 801f8f0:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801f8f4:	f143 33ff 	adc.w	r3, r3, #4294967295
 801f8f8:	9602      	str	r6, [sp, #8]
 801f8fa:	9303      	str	r3, [sp, #12]
 801f8fc:	9b02      	ldr	r3, [sp, #8]
 801f8fe:	089e      	lsrs	r6, r3, #2
 801f900:	9b03      	ldr	r3, [sp, #12]
 801f902:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801f906:	f10c 32ff 	add.w	r2, ip, #4294967295
 801f90a:	109f      	asrs	r7, r3, #2
 801f90c:	2364      	movs	r3, #100	; 0x64
 801f90e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f912:	1af6      	subs	r6, r6, r3
 801f914:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801f918:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801f91c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f920:	fb92 f3f3 	sdiv	r3, r2, r3
 801f924:	18f6      	adds	r6, r6, r3
 801f926:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801f92a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801f92e:	f240 136d 	movw	r3, #365	; 0x16d
 801f932:	fb03 fc0c 	mul.w	ip, r3, ip
 801f936:	69eb      	ldr	r3, [r5, #28]
 801f938:	eb16 060c 	adds.w	r6, r6, ip
 801f93c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801f940:	18f6      	adds	r6, r6, r3
 801f942:	f04f 0c18 	mov.w	ip, #24
 801f946:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801f94a:	fba6 230c 	umull	r2, r3, r6, ip
 801f94e:	68ae      	ldr	r6, [r5, #8]
 801f950:	fb0c 3307 	mla	r3, ip, r7, r3
 801f954:	1992      	adds	r2, r2, r6
 801f956:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801f95a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801f95e:	fba2 670c 	umull	r6, r7, r2, ip
 801f962:	fb0c 7703 	mla	r7, ip, r3, r7
 801f966:	686b      	ldr	r3, [r5, #4]
 801f968:	18f6      	adds	r6, r6, r3
 801f96a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801f96e:	fba6 230c 	umull	r2, r3, r6, ip
 801f972:	682e      	ldr	r6, [r5, #0]
 801f974:	fb0c 3307 	mla	r3, ip, r7, r3
 801f978:	1992      	adds	r2, r2, r6
 801f97a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801f97e:	ebb2 020a 	subs.w	r2, r2, sl
 801f982:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801f986:	e9cd 2300 	strd	r2, r3, [sp]
 801f98a:	4a14      	ldr	r2, [pc, #80]	; (801f9dc <__strftime+0x7bc>)
 801f98c:	f001 fc16 	bl	80211bc <sniprintf>
 801f990:	e606      	b.n	801f5a0 <__strftime+0x380>
 801f992:	f04f 0a00 	mov.w	sl, #0
 801f996:	e796      	b.n	801f8c6 <__strftime+0x6a6>
 801f998:	682b      	ldr	r3, [r5, #0]
 801f99a:	e66a      	b.n	801f672 <__strftime+0x452>
 801f99c:	f108 33ff 	add.w	r3, r8, #4294967295
 801f9a0:	42a3      	cmp	r3, r4
 801f9a2:	f67f ac6c 	bls.w	801f27e <__strftime+0x5e>
 801f9a6:	2309      	movs	r3, #9
 801f9a8:	e740      	b.n	801f82c <__strftime+0x60c>
 801f9aa:	682b      	ldr	r3, [r5, #0]
 801f9ac:	9301      	str	r3, [sp, #4]
 801f9ae:	686b      	ldr	r3, [r5, #4]
 801f9b0:	9300      	str	r3, [sp, #0]
 801f9b2:	4a0b      	ldr	r2, [pc, #44]	; (801f9e0 <__strftime+0x7c0>)
 801f9b4:	68ab      	ldr	r3, [r5, #8]
 801f9b6:	e5e0      	b.n	801f57a <__strftime+0x35a>
 801f9b8:	fffff894 	.word	0xfffff894
 801f9bc:	fffff895 	.word	0xfffff895
 801f9c0:	0802730b 	.word	0x0802730b
 801f9c4:	080272ec 	.word	0x080272ec
 801f9c8:	080272fa 	.word	0x080272fa
 801f9cc:	0802730f 	.word	0x0802730f
 801f9d0:	08027460 	.word	0x08027460
 801f9d4:	080275d5 	.word	0x080275d5
 801f9d8:	0802731e 	.word	0x0802731e
 801f9dc:	08027314 	.word	0x08027314
 801f9e0:	08027319 	.word	0x08027319
 801f9e4:	f108 33ff 	add.w	r3, r8, #4294967295
 801f9e8:	42a3      	cmp	r3, r4
 801f9ea:	f67f ac48 	bls.w	801f27e <__strftime+0x5e>
 801f9ee:	69ab      	ldr	r3, [r5, #24]
 801f9f0:	eb09 0204 	add.w	r2, r9, r4
 801f9f4:	3401      	adds	r4, #1
 801f9f6:	b913      	cbnz	r3, 801f9fe <__strftime+0x7de>
 801f9f8:	2337      	movs	r3, #55	; 0x37
 801f9fa:	7013      	strb	r3, [r2, #0]
 801f9fc:	e512      	b.n	801f424 <__strftime+0x204>
 801f9fe:	3330      	adds	r3, #48	; 0x30
 801fa00:	e7fb      	b.n	801f9fa <__strftime+0x7da>
 801fa02:	69eb      	ldr	r3, [r5, #28]
 801fa04:	69aa      	ldr	r2, [r5, #24]
 801fa06:	3307      	adds	r3, #7
 801fa08:	1a9b      	subs	r3, r3, r2
 801fa0a:	2207      	movs	r2, #7
 801fa0c:	fb93 f3f2 	sdiv	r3, r3, r2
 801fa10:	e62f      	b.n	801f672 <__strftime+0x452>
 801fa12:	4628      	mov	r0, r5
 801fa14:	f7ff fba2 	bl	801f15c <iso_year_adjust>
 801fa18:	69aa      	ldr	r2, [r5, #24]
 801fa1a:	b132      	cbz	r2, 801fa2a <__strftime+0x80a>
 801fa1c:	3a01      	subs	r2, #1
 801fa1e:	2800      	cmp	r0, #0
 801fa20:	dc28      	bgt.n	801fa74 <__strftime+0x854>
 801fa22:	69eb      	ldr	r3, [r5, #28]
 801fa24:	d103      	bne.n	801fa2e <__strftime+0x80e>
 801fa26:	330a      	adds	r3, #10
 801fa28:	e7ee      	b.n	801fa08 <__strftime+0x7e8>
 801fa2a:	2206      	movs	r2, #6
 801fa2c:	e7f7      	b.n	801fa1e <__strftime+0x7fe>
 801fa2e:	6968      	ldr	r0, [r5, #20]
 801fa30:	2800      	cmp	r0, #0
 801fa32:	eba2 0303 	sub.w	r3, r2, r3
 801fa36:	f240 726b 	movw	r2, #1899	; 0x76b
 801fa3a:	bfa8      	it	ge
 801fa3c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801fa40:	4410      	add	r0, r2
 801fa42:	0782      	lsls	r2, r0, #30
 801fa44:	d105      	bne.n	801fa52 <__strftime+0x832>
 801fa46:	2264      	movs	r2, #100	; 0x64
 801fa48:	fb90 f1f2 	sdiv	r1, r0, r2
 801fa4c:	fb02 0111 	mls	r1, r2, r1, r0
 801fa50:	b971      	cbnz	r1, 801fa70 <__strftime+0x850>
 801fa52:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801fa56:	fb90 f2f1 	sdiv	r2, r0, r1
 801fa5a:	fb01 0212 	mls	r2, r1, r2, r0
 801fa5e:	fab2 f282 	clz	r2, r2
 801fa62:	0952      	lsrs	r2, r2, #5
 801fa64:	1a9a      	subs	r2, r3, r2
 801fa66:	2a05      	cmp	r2, #5
 801fa68:	bfb4      	ite	lt
 801fa6a:	2335      	movlt	r3, #53	; 0x35
 801fa6c:	2334      	movge	r3, #52	; 0x34
 801fa6e:	e600      	b.n	801f672 <__strftime+0x452>
 801fa70:	2201      	movs	r2, #1
 801fa72:	e7f7      	b.n	801fa64 <__strftime+0x844>
 801fa74:	2301      	movs	r3, #1
 801fa76:	e5fc      	b.n	801f672 <__strftime+0x452>
 801fa78:	f108 33ff 	add.w	r3, r8, #4294967295
 801fa7c:	42a3      	cmp	r3, r4
 801fa7e:	f67f abfe 	bls.w	801f27e <__strftime+0x5e>
 801fa82:	69ab      	ldr	r3, [r5, #24]
 801fa84:	3330      	adds	r3, #48	; 0x30
 801fa86:	e6d1      	b.n	801f82c <__strftime+0x60c>
 801fa88:	69ab      	ldr	r3, [r5, #24]
 801fa8a:	b13b      	cbz	r3, 801fa9c <__strftime+0x87c>
 801fa8c:	3b01      	subs	r3, #1
 801fa8e:	69ea      	ldr	r2, [r5, #28]
 801fa90:	3207      	adds	r2, #7
 801fa92:	1ad2      	subs	r2, r2, r3
 801fa94:	2307      	movs	r3, #7
 801fa96:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa9a:	e5ea      	b.n	801f672 <__strftime+0x452>
 801fa9c:	2306      	movs	r3, #6
 801fa9e:	e7f6      	b.n	801fa8e <__strftime+0x86e>
 801faa0:	6968      	ldr	r0, [r5, #20]
 801faa2:	2800      	cmp	r0, #0
 801faa4:	db05      	blt.n	801fab2 <__strftime+0x892>
 801faa6:	2264      	movs	r2, #100	; 0x64
 801faa8:	fb90 f3f2 	sdiv	r3, r0, r2
 801faac:	fb03 0312 	mls	r3, r3, r2, r0
 801fab0:	e5df      	b.n	801f672 <__strftime+0x452>
 801fab2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801fab6:	f000 fcf1 	bl	802049c <abs>
 801faba:	e7f4      	b.n	801faa6 <__strftime+0x886>
 801fabc:	696b      	ldr	r3, [r5, #20]
 801fabe:	4a4c      	ldr	r2, [pc, #304]	; (801fbf0 <__strftime+0x9d0>)
 801fac0:	4293      	cmp	r3, r2
 801fac2:	da09      	bge.n	801fad8 <__strftime+0x8b8>
 801fac4:	212d      	movs	r1, #45	; 0x2d
 801fac6:	f88d 1020 	strb.w	r1, [sp, #32]
 801faca:	eba2 0a03 	sub.w	sl, r2, r3
 801face:	b106      	cbz	r6, 801fad2 <__strftime+0x8b2>
 801fad0:	3e01      	subs	r6, #1
 801fad2:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801fad6:	e00b      	b.n	801faf0 <__strftime+0x8d0>
 801fad8:	2f2b      	cmp	r7, #43	; 0x2b
 801fada:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801fade:	d106      	bne.n	801faee <__strftime+0x8ce>
 801fae0:	f242 730f 	movw	r3, #9999	; 0x270f
 801fae4:	459a      	cmp	sl, r3
 801fae6:	d902      	bls.n	801faee <__strftime+0x8ce>
 801fae8:	f88d 7020 	strb.w	r7, [sp, #32]
 801faec:	e7ef      	b.n	801face <__strftime+0x8ae>
 801faee:	ab08      	add	r3, sp, #32
 801faf0:	2225      	movs	r2, #37	; 0x25
 801faf2:	701a      	strb	r2, [r3, #0]
 801faf4:	b937      	cbnz	r7, 801fb04 <__strftime+0x8e4>
 801faf6:	1c58      	adds	r0, r3, #1
 801faf8:	493e      	ldr	r1, [pc, #248]	; (801fbf4 <__strftime+0x9d4>)
 801fafa:	f001 fbbf 	bl	802127c <strcpy>
 801fafe:	f8cd a000 	str.w	sl, [sp]
 801fb02:	e665      	b.n	801f7d0 <__strftime+0x5b0>
 801fb04:	2230      	movs	r2, #48	; 0x30
 801fb06:	1c98      	adds	r0, r3, #2
 801fb08:	705a      	strb	r2, [r3, #1]
 801fb0a:	e7f5      	b.n	801faf8 <__strftime+0x8d8>
 801fb0c:	6a2b      	ldr	r3, [r5, #32]
 801fb0e:	2b00      	cmp	r3, #0
 801fb10:	f6ff ac88 	blt.w	801f424 <__strftime+0x204>
 801fb14:	f000 f9c6 	bl	801fea4 <__tz_lock>
 801fb18:	9b04      	ldr	r3, [sp, #16]
 801fb1a:	b90b      	cbnz	r3, 801fb20 <__strftime+0x900>
 801fb1c:	f000 f9ce 	bl	801febc <_tzset_unlocked>
 801fb20:	f000 fd8a 	bl	8020638 <__gettzinfo>
 801fb24:	6a2b      	ldr	r3, [r5, #32]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	bfcc      	ite	gt
 801fb2a:	2350      	movgt	r3, #80	; 0x50
 801fb2c:	2328      	movle	r3, #40	; 0x28
 801fb2e:	eb09 0704 	add.w	r7, r9, r4
 801fb32:	58c6      	ldr	r6, [r0, r3]
 801fb34:	f000 f9bc 	bl	801feb0 <__tz_unlock>
 801fb38:	4276      	negs	r6, r6
 801fb3a:	233c      	movs	r3, #60	; 0x3c
 801fb3c:	fb96 f0f3 	sdiv	r0, r6, r3
 801fb40:	f000 fe3e 	bl	80207c0 <labs>
 801fb44:	233c      	movs	r3, #60	; 0x3c
 801fb46:	eba8 0a04 	sub.w	sl, r8, r4
 801fb4a:	fb90 f2f3 	sdiv	r2, r0, r3
 801fb4e:	fb02 0013 	mls	r0, r2, r3, r0
 801fb52:	9000      	str	r0, [sp, #0]
 801fb54:	4a28      	ldr	r2, [pc, #160]	; (801fbf8 <__strftime+0x9d8>)
 801fb56:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801fb5a:	4651      	mov	r1, sl
 801fb5c:	4638      	mov	r0, r7
 801fb5e:	fb96 f3f3 	sdiv	r3, r6, r3
 801fb62:	f001 fb2b 	bl	80211bc <sniprintf>
 801fb66:	2800      	cmp	r0, #0
 801fb68:	f6ff ab89 	blt.w	801f27e <__strftime+0x5e>
 801fb6c:	4404      	add	r4, r0
 801fb6e:	45a0      	cmp	r8, r4
 801fb70:	f67f ab85 	bls.w	801f27e <__strftime+0x5e>
 801fb74:	2301      	movs	r3, #1
 801fb76:	9304      	str	r3, [sp, #16]
 801fb78:	e454      	b.n	801f424 <__strftime+0x204>
 801fb7a:	6a2b      	ldr	r3, [r5, #32]
 801fb7c:	2b00      	cmp	r3, #0
 801fb7e:	f6ff ac51 	blt.w	801f424 <__strftime+0x204>
 801fb82:	f000 f98f 	bl	801fea4 <__tz_lock>
 801fb86:	9b04      	ldr	r3, [sp, #16]
 801fb88:	b90b      	cbnz	r3, 801fb8e <__strftime+0x96e>
 801fb8a:	f000 f997 	bl	801febc <_tzset_unlocked>
 801fb8e:	6a2b      	ldr	r3, [r5, #32]
 801fb90:	4a1a      	ldr	r2, [pc, #104]	; (801fbfc <__strftime+0x9dc>)
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	bfd4      	ite	le
 801fb96:	2300      	movle	r3, #0
 801fb98:	2301      	movgt	r3, #1
 801fb9a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801fb9e:	4630      	mov	r0, r6
 801fba0:	f7e0 fb4c 	bl	800023c <strlen>
 801fba4:	3e01      	subs	r6, #1
 801fba6:	4420      	add	r0, r4
 801fba8:	f108 33ff 	add.w	r3, r8, #4294967295
 801fbac:	42a0      	cmp	r0, r4
 801fbae:	d102      	bne.n	801fbb6 <__strftime+0x996>
 801fbb0:	f000 f97e 	bl	801feb0 <__tz_unlock>
 801fbb4:	e7de      	b.n	801fb74 <__strftime+0x954>
 801fbb6:	42a3      	cmp	r3, r4
 801fbb8:	d905      	bls.n	801fbc6 <__strftime+0x9a6>
 801fbba:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801fbbe:	f809 2004 	strb.w	r2, [r9, r4]
 801fbc2:	3401      	adds	r4, #1
 801fbc4:	e7f2      	b.n	801fbac <__strftime+0x98c>
 801fbc6:	f000 f973 	bl	801feb0 <__tz_unlock>
 801fbca:	f7ff bb58 	b.w	801f27e <__strftime+0x5e>
 801fbce:	f108 33ff 	add.w	r3, r8, #4294967295
 801fbd2:	42a3      	cmp	r3, r4
 801fbd4:	f67f ab53 	bls.w	801f27e <__strftime+0x5e>
 801fbd8:	2325      	movs	r3, #37	; 0x25
 801fbda:	e627      	b.n	801f82c <__strftime+0x60c>
 801fbdc:	f1b8 0f00 	cmp.w	r8, #0
 801fbe0:	d002      	beq.n	801fbe8 <__strftime+0x9c8>
 801fbe2:	2300      	movs	r3, #0
 801fbe4:	f809 3004 	strb.w	r3, [r9, r4]
 801fbe8:	4620      	mov	r0, r4
 801fbea:	b011      	add	sp, #68	; 0x44
 801fbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbf0:	fffff894 	.word	0xfffff894
 801fbf4:	0802730b 	.word	0x0802730b
 801fbf8:	08027328 	.word	0x08027328
 801fbfc:	2000016c 	.word	0x2000016c

0801fc00 <strftime>:
 801fc00:	b513      	push	{r0, r1, r4, lr}
 801fc02:	4c03      	ldr	r4, [pc, #12]	; (801fc10 <strftime+0x10>)
 801fc04:	9400      	str	r4, [sp, #0]
 801fc06:	f7ff fb0b 	bl	801f220 <__strftime>
 801fc0a:	b002      	add	sp, #8
 801fc0c:	bd10      	pop	{r4, pc}
 801fc0e:	bf00      	nop
 801fc10:	200001d0 	.word	0x200001d0

0801fc14 <strstr>:
 801fc14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc16:	780c      	ldrb	r4, [r1, #0]
 801fc18:	b164      	cbz	r4, 801fc34 <strstr+0x20>
 801fc1a:	4603      	mov	r3, r0
 801fc1c:	781a      	ldrb	r2, [r3, #0]
 801fc1e:	4618      	mov	r0, r3
 801fc20:	1c5e      	adds	r6, r3, #1
 801fc22:	b90a      	cbnz	r2, 801fc28 <strstr+0x14>
 801fc24:	4610      	mov	r0, r2
 801fc26:	e005      	b.n	801fc34 <strstr+0x20>
 801fc28:	4294      	cmp	r4, r2
 801fc2a:	d108      	bne.n	801fc3e <strstr+0x2a>
 801fc2c:	460d      	mov	r5, r1
 801fc2e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801fc32:	b902      	cbnz	r2, 801fc36 <strstr+0x22>
 801fc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc36:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801fc3a:	4297      	cmp	r7, r2
 801fc3c:	d0f7      	beq.n	801fc2e <strstr+0x1a>
 801fc3e:	4633      	mov	r3, r6
 801fc40:	e7ec      	b.n	801fc1c <strstr+0x8>
	...

0801fc44 <_strtoul_l.isra.0>:
 801fc44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fc48:	4e3b      	ldr	r6, [pc, #236]	; (801fd38 <_strtoul_l.isra.0+0xf4>)
 801fc4a:	4686      	mov	lr, r0
 801fc4c:	468c      	mov	ip, r1
 801fc4e:	4660      	mov	r0, ip
 801fc50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801fc54:	5da5      	ldrb	r5, [r4, r6]
 801fc56:	f015 0508 	ands.w	r5, r5, #8
 801fc5a:	d1f8      	bne.n	801fc4e <_strtoul_l.isra.0+0xa>
 801fc5c:	2c2d      	cmp	r4, #45	; 0x2d
 801fc5e:	d134      	bne.n	801fcca <_strtoul_l.isra.0+0x86>
 801fc60:	f89c 4000 	ldrb.w	r4, [ip]
 801fc64:	f04f 0801 	mov.w	r8, #1
 801fc68:	f100 0c02 	add.w	ip, r0, #2
 801fc6c:	2b00      	cmp	r3, #0
 801fc6e:	d05e      	beq.n	801fd2e <_strtoul_l.isra.0+0xea>
 801fc70:	2b10      	cmp	r3, #16
 801fc72:	d10c      	bne.n	801fc8e <_strtoul_l.isra.0+0x4a>
 801fc74:	2c30      	cmp	r4, #48	; 0x30
 801fc76:	d10a      	bne.n	801fc8e <_strtoul_l.isra.0+0x4a>
 801fc78:	f89c 0000 	ldrb.w	r0, [ip]
 801fc7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801fc80:	2858      	cmp	r0, #88	; 0x58
 801fc82:	d14f      	bne.n	801fd24 <_strtoul_l.isra.0+0xe0>
 801fc84:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801fc88:	2310      	movs	r3, #16
 801fc8a:	f10c 0c02 	add.w	ip, ip, #2
 801fc8e:	f04f 37ff 	mov.w	r7, #4294967295
 801fc92:	2500      	movs	r5, #0
 801fc94:	fbb7 f7f3 	udiv	r7, r7, r3
 801fc98:	fb03 f907 	mul.w	r9, r3, r7
 801fc9c:	ea6f 0909 	mvn.w	r9, r9
 801fca0:	4628      	mov	r0, r5
 801fca2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801fca6:	2e09      	cmp	r6, #9
 801fca8:	d818      	bhi.n	801fcdc <_strtoul_l.isra.0+0x98>
 801fcaa:	4634      	mov	r4, r6
 801fcac:	42a3      	cmp	r3, r4
 801fcae:	dd24      	ble.n	801fcfa <_strtoul_l.isra.0+0xb6>
 801fcb0:	2d00      	cmp	r5, #0
 801fcb2:	db1f      	blt.n	801fcf4 <_strtoul_l.isra.0+0xb0>
 801fcb4:	4287      	cmp	r7, r0
 801fcb6:	d31d      	bcc.n	801fcf4 <_strtoul_l.isra.0+0xb0>
 801fcb8:	d101      	bne.n	801fcbe <_strtoul_l.isra.0+0x7a>
 801fcba:	45a1      	cmp	r9, r4
 801fcbc:	db1a      	blt.n	801fcf4 <_strtoul_l.isra.0+0xb0>
 801fcbe:	fb00 4003 	mla	r0, r0, r3, r4
 801fcc2:	2501      	movs	r5, #1
 801fcc4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801fcc8:	e7eb      	b.n	801fca2 <_strtoul_l.isra.0+0x5e>
 801fcca:	2c2b      	cmp	r4, #43	; 0x2b
 801fccc:	bf08      	it	eq
 801fcce:	f89c 4000 	ldrbeq.w	r4, [ip]
 801fcd2:	46a8      	mov	r8, r5
 801fcd4:	bf08      	it	eq
 801fcd6:	f100 0c02 	addeq.w	ip, r0, #2
 801fcda:	e7c7      	b.n	801fc6c <_strtoul_l.isra.0+0x28>
 801fcdc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801fce0:	2e19      	cmp	r6, #25
 801fce2:	d801      	bhi.n	801fce8 <_strtoul_l.isra.0+0xa4>
 801fce4:	3c37      	subs	r4, #55	; 0x37
 801fce6:	e7e1      	b.n	801fcac <_strtoul_l.isra.0+0x68>
 801fce8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801fcec:	2e19      	cmp	r6, #25
 801fcee:	d804      	bhi.n	801fcfa <_strtoul_l.isra.0+0xb6>
 801fcf0:	3c57      	subs	r4, #87	; 0x57
 801fcf2:	e7db      	b.n	801fcac <_strtoul_l.isra.0+0x68>
 801fcf4:	f04f 35ff 	mov.w	r5, #4294967295
 801fcf8:	e7e4      	b.n	801fcc4 <_strtoul_l.isra.0+0x80>
 801fcfa:	2d00      	cmp	r5, #0
 801fcfc:	da07      	bge.n	801fd0e <_strtoul_l.isra.0+0xca>
 801fcfe:	2322      	movs	r3, #34	; 0x22
 801fd00:	f8ce 3000 	str.w	r3, [lr]
 801fd04:	f04f 30ff 	mov.w	r0, #4294967295
 801fd08:	b942      	cbnz	r2, 801fd1c <_strtoul_l.isra.0+0xd8>
 801fd0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fd0e:	f1b8 0f00 	cmp.w	r8, #0
 801fd12:	d000      	beq.n	801fd16 <_strtoul_l.isra.0+0xd2>
 801fd14:	4240      	negs	r0, r0
 801fd16:	2a00      	cmp	r2, #0
 801fd18:	d0f7      	beq.n	801fd0a <_strtoul_l.isra.0+0xc6>
 801fd1a:	b10d      	cbz	r5, 801fd20 <_strtoul_l.isra.0+0xdc>
 801fd1c:	f10c 31ff 	add.w	r1, ip, #4294967295
 801fd20:	6011      	str	r1, [r2, #0]
 801fd22:	e7f2      	b.n	801fd0a <_strtoul_l.isra.0+0xc6>
 801fd24:	2430      	movs	r4, #48	; 0x30
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	d1b1      	bne.n	801fc8e <_strtoul_l.isra.0+0x4a>
 801fd2a:	2308      	movs	r3, #8
 801fd2c:	e7af      	b.n	801fc8e <_strtoul_l.isra.0+0x4a>
 801fd2e:	2c30      	cmp	r4, #48	; 0x30
 801fd30:	d0a2      	beq.n	801fc78 <_strtoul_l.isra.0+0x34>
 801fd32:	230a      	movs	r3, #10
 801fd34:	e7ab      	b.n	801fc8e <_strtoul_l.isra.0+0x4a>
 801fd36:	bf00      	nop
 801fd38:	080275d5 	.word	0x080275d5

0801fd3c <_strtoul_r>:
 801fd3c:	f7ff bf82 	b.w	801fc44 <_strtoul_l.isra.0>

0801fd40 <strtoul>:
 801fd40:	4613      	mov	r3, r2
 801fd42:	460a      	mov	r2, r1
 801fd44:	4601      	mov	r1, r0
 801fd46:	4802      	ldr	r0, [pc, #8]	; (801fd50 <strtoul+0x10>)
 801fd48:	6800      	ldr	r0, [r0, #0]
 801fd4a:	f7ff bf7b 	b.w	801fc44 <_strtoul_l.isra.0>
 801fd4e:	bf00      	nop
 801fd50:	20000108 	.word	0x20000108

0801fd54 <__tzcalc_limits>:
 801fd54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd58:	4680      	mov	r8, r0
 801fd5a:	f000 fc6d 	bl	8020638 <__gettzinfo>
 801fd5e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801fd62:	4598      	cmp	r8, r3
 801fd64:	f340 8098 	ble.w	801fe98 <__tzcalc_limits+0x144>
 801fd68:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801fd6c:	4443      	add	r3, r8
 801fd6e:	109b      	asrs	r3, r3, #2
 801fd70:	f240 126d 	movw	r2, #365	; 0x16d
 801fd74:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801fd78:	fb02 3505 	mla	r5, r2, r5, r3
 801fd7c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801fd80:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801fd84:	fb93 f3f2 	sdiv	r3, r3, r2
 801fd88:	441d      	add	r5, r3
 801fd8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801fd8e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801fd92:	fb98 f7f3 	sdiv	r7, r8, r3
 801fd96:	fb03 8717 	mls	r7, r3, r7, r8
 801fd9a:	4442      	add	r2, r8
 801fd9c:	fab7 fc87 	clz	ip, r7
 801fda0:	fbb2 f2f3 	udiv	r2, r2, r3
 801fda4:	f008 0303 	and.w	r3, r8, #3
 801fda8:	4415      	add	r5, r2
 801fdaa:	2264      	movs	r2, #100	; 0x64
 801fdac:	f8c0 8004 	str.w	r8, [r0, #4]
 801fdb0:	fb98 f6f2 	sdiv	r6, r8, r2
 801fdb4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801fdb8:	fb02 8616 	mls	r6, r2, r6, r8
 801fdbc:	4604      	mov	r4, r0
 801fdbe:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801fdc2:	9300      	str	r3, [sp, #0]
 801fdc4:	f04f 0e07 	mov.w	lr, #7
 801fdc8:	7a22      	ldrb	r2, [r4, #8]
 801fdca:	6963      	ldr	r3, [r4, #20]
 801fdcc:	2a4a      	cmp	r2, #74	; 0x4a
 801fdce:	d128      	bne.n	801fe22 <__tzcalc_limits+0xce>
 801fdd0:	9900      	ldr	r1, [sp, #0]
 801fdd2:	18ea      	adds	r2, r5, r3
 801fdd4:	b901      	cbnz	r1, 801fdd8 <__tzcalc_limits+0x84>
 801fdd6:	b906      	cbnz	r6, 801fdda <__tzcalc_limits+0x86>
 801fdd8:	bb0f      	cbnz	r7, 801fe1e <__tzcalc_limits+0xca>
 801fdda:	2b3b      	cmp	r3, #59	; 0x3b
 801fddc:	bfd4      	ite	le
 801fdde:	2300      	movle	r3, #0
 801fde0:	2301      	movgt	r3, #1
 801fde2:	4413      	add	r3, r2
 801fde4:	1e5a      	subs	r2, r3, #1
 801fde6:	69a3      	ldr	r3, [r4, #24]
 801fde8:	492c      	ldr	r1, [pc, #176]	; (801fe9c <__tzcalc_limits+0x148>)
 801fdea:	fb01 3202 	mla	r2, r1, r2, r3
 801fdee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fdf0:	4413      	add	r3, r2
 801fdf2:	461a      	mov	r2, r3
 801fdf4:	17db      	asrs	r3, r3, #31
 801fdf6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801fdfa:	3428      	adds	r4, #40	; 0x28
 801fdfc:	45a3      	cmp	fp, r4
 801fdfe:	d1e3      	bne.n	801fdc8 <__tzcalc_limits+0x74>
 801fe00:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801fe04:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801fe08:	4294      	cmp	r4, r2
 801fe0a:	eb75 0303 	sbcs.w	r3, r5, r3
 801fe0e:	bfb4      	ite	lt
 801fe10:	2301      	movlt	r3, #1
 801fe12:	2300      	movge	r3, #0
 801fe14:	6003      	str	r3, [r0, #0]
 801fe16:	2001      	movs	r0, #1
 801fe18:	b003      	add	sp, #12
 801fe1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe1e:	2300      	movs	r3, #0
 801fe20:	e7df      	b.n	801fde2 <__tzcalc_limits+0x8e>
 801fe22:	2a44      	cmp	r2, #68	; 0x44
 801fe24:	d101      	bne.n	801fe2a <__tzcalc_limits+0xd6>
 801fe26:	18ea      	adds	r2, r5, r3
 801fe28:	e7dd      	b.n	801fde6 <__tzcalc_limits+0x92>
 801fe2a:	9a00      	ldr	r2, [sp, #0]
 801fe2c:	bb72      	cbnz	r2, 801fe8c <__tzcalc_limits+0x138>
 801fe2e:	2e00      	cmp	r6, #0
 801fe30:	bf0c      	ite	eq
 801fe32:	46e0      	moveq	r8, ip
 801fe34:	f04f 0801 	movne.w	r8, #1
 801fe38:	4919      	ldr	r1, [pc, #100]	; (801fea0 <__tzcalc_limits+0x14c>)
 801fe3a:	68e2      	ldr	r2, [r4, #12]
 801fe3c:	9201      	str	r2, [sp, #4]
 801fe3e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801fe42:	fb0a 1808 	mla	r8, sl, r8, r1
 801fe46:	462a      	mov	r2, r5
 801fe48:	f04f 0900 	mov.w	r9, #0
 801fe4c:	f1a8 0804 	sub.w	r8, r8, #4
 801fe50:	9901      	ldr	r1, [sp, #4]
 801fe52:	f109 0901 	add.w	r9, r9, #1
 801fe56:	4549      	cmp	r1, r9
 801fe58:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801fe5c:	dc18      	bgt.n	801fe90 <__tzcalc_limits+0x13c>
 801fe5e:	f102 0804 	add.w	r8, r2, #4
 801fe62:	fb98 f9fe 	sdiv	r9, r8, lr
 801fe66:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801fe6a:	eba8 0909 	sub.w	r9, r8, r9
 801fe6e:	ebb3 0909 	subs.w	r9, r3, r9
 801fe72:	6923      	ldr	r3, [r4, #16]
 801fe74:	f103 33ff 	add.w	r3, r3, #4294967295
 801fe78:	bf48      	it	mi
 801fe7a:	f109 0907 	addmi.w	r9, r9, #7
 801fe7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801fe82:	444b      	add	r3, r9
 801fe84:	4553      	cmp	r3, sl
 801fe86:	da05      	bge.n	801fe94 <__tzcalc_limits+0x140>
 801fe88:	441a      	add	r2, r3
 801fe8a:	e7ac      	b.n	801fde6 <__tzcalc_limits+0x92>
 801fe8c:	46e0      	mov	r8, ip
 801fe8e:	e7d3      	b.n	801fe38 <__tzcalc_limits+0xe4>
 801fe90:	4452      	add	r2, sl
 801fe92:	e7dd      	b.n	801fe50 <__tzcalc_limits+0xfc>
 801fe94:	3b07      	subs	r3, #7
 801fe96:	e7f5      	b.n	801fe84 <__tzcalc_limits+0x130>
 801fe98:	2000      	movs	r0, #0
 801fe9a:	e7bd      	b.n	801fe18 <__tzcalc_limits+0xc4>
 801fe9c:	00015180 	.word	0x00015180
 801fea0:	0802721c 	.word	0x0802721c

0801fea4 <__tz_lock>:
 801fea4:	4801      	ldr	r0, [pc, #4]	; (801feac <__tz_lock+0x8>)
 801fea6:	f7fe beb9 	b.w	801ec1c <__retarget_lock_acquire>
 801feaa:	bf00      	nop
 801feac:	20000e6b 	.word	0x20000e6b

0801feb0 <__tz_unlock>:
 801feb0:	4801      	ldr	r0, [pc, #4]	; (801feb8 <__tz_unlock+0x8>)
 801feb2:	f7fe beb5 	b.w	801ec20 <__retarget_lock_release>
 801feb6:	bf00      	nop
 801feb8:	20000e6b 	.word	0x20000e6b

0801febc <_tzset_unlocked>:
 801febc:	4b01      	ldr	r3, [pc, #4]	; (801fec4 <_tzset_unlocked+0x8>)
 801febe:	6818      	ldr	r0, [r3, #0]
 801fec0:	f000 b802 	b.w	801fec8 <_tzset_unlocked_r>
 801fec4:	20000108 	.word	0x20000108

0801fec8 <_tzset_unlocked_r>:
 801fec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fecc:	b08d      	sub	sp, #52	; 0x34
 801fece:	4607      	mov	r7, r0
 801fed0:	f000 fbb2 	bl	8020638 <__gettzinfo>
 801fed4:	49ae      	ldr	r1, [pc, #696]	; (8020190 <_tzset_unlocked_r+0x2c8>)
 801fed6:	4eaf      	ldr	r6, [pc, #700]	; (8020194 <_tzset_unlocked_r+0x2cc>)
 801fed8:	4605      	mov	r5, r0
 801feda:	4638      	mov	r0, r7
 801fedc:	f000 fba4 	bl	8020628 <_getenv_r>
 801fee0:	4604      	mov	r4, r0
 801fee2:	b970      	cbnz	r0, 801ff02 <_tzset_unlocked_r+0x3a>
 801fee4:	4bac      	ldr	r3, [pc, #688]	; (8020198 <_tzset_unlocked_r+0x2d0>)
 801fee6:	4aad      	ldr	r2, [pc, #692]	; (802019c <_tzset_unlocked_r+0x2d4>)
 801fee8:	6018      	str	r0, [r3, #0]
 801feea:	4bad      	ldr	r3, [pc, #692]	; (80201a0 <_tzset_unlocked_r+0x2d8>)
 801feec:	6018      	str	r0, [r3, #0]
 801feee:	4bad      	ldr	r3, [pc, #692]	; (80201a4 <_tzset_unlocked_r+0x2dc>)
 801fef0:	6830      	ldr	r0, [r6, #0]
 801fef2:	e9c3 2200 	strd	r2, r2, [r3]
 801fef6:	f7fe ff01 	bl	801ecfc <free>
 801fefa:	6034      	str	r4, [r6, #0]
 801fefc:	b00d      	add	sp, #52	; 0x34
 801fefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff02:	6831      	ldr	r1, [r6, #0]
 801ff04:	2900      	cmp	r1, #0
 801ff06:	d15f      	bne.n	801ffc8 <_tzset_unlocked_r+0x100>
 801ff08:	6830      	ldr	r0, [r6, #0]
 801ff0a:	f7fe fef7 	bl	801ecfc <free>
 801ff0e:	4620      	mov	r0, r4
 801ff10:	f7e0 f994 	bl	800023c <strlen>
 801ff14:	1c41      	adds	r1, r0, #1
 801ff16:	4638      	mov	r0, r7
 801ff18:	f7fe ff6e 	bl	801edf8 <_malloc_r>
 801ff1c:	6030      	str	r0, [r6, #0]
 801ff1e:	2800      	cmp	r0, #0
 801ff20:	d157      	bne.n	801ffd2 <_tzset_unlocked_r+0x10a>
 801ff22:	7823      	ldrb	r3, [r4, #0]
 801ff24:	4aa0      	ldr	r2, [pc, #640]	; (80201a8 <_tzset_unlocked_r+0x2e0>)
 801ff26:	49a1      	ldr	r1, [pc, #644]	; (80201ac <_tzset_unlocked_r+0x2e4>)
 801ff28:	2b3a      	cmp	r3, #58	; 0x3a
 801ff2a:	bf08      	it	eq
 801ff2c:	3401      	addeq	r4, #1
 801ff2e:	ae0a      	add	r6, sp, #40	; 0x28
 801ff30:	4633      	mov	r3, r6
 801ff32:	4620      	mov	r0, r4
 801ff34:	f001 f976 	bl	8021224 <siscanf>
 801ff38:	2800      	cmp	r0, #0
 801ff3a:	dddf      	ble.n	801fefc <_tzset_unlocked_r+0x34>
 801ff3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff3e:	18e7      	adds	r7, r4, r3
 801ff40:	5ce3      	ldrb	r3, [r4, r3]
 801ff42:	2b2d      	cmp	r3, #45	; 0x2d
 801ff44:	d149      	bne.n	801ffda <_tzset_unlocked_r+0x112>
 801ff46:	3701      	adds	r7, #1
 801ff48:	f04f 34ff 	mov.w	r4, #4294967295
 801ff4c:	f10d 0a20 	add.w	sl, sp, #32
 801ff50:	f10d 0b1e 	add.w	fp, sp, #30
 801ff54:	f04f 0800 	mov.w	r8, #0
 801ff58:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801ff5c:	4994      	ldr	r1, [pc, #592]	; (80201b0 <_tzset_unlocked_r+0x2e8>)
 801ff5e:	9603      	str	r6, [sp, #12]
 801ff60:	f8cd b000 	str.w	fp, [sp]
 801ff64:	4633      	mov	r3, r6
 801ff66:	aa07      	add	r2, sp, #28
 801ff68:	4638      	mov	r0, r7
 801ff6a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801ff6e:	f8ad 8020 	strh.w	r8, [sp, #32]
 801ff72:	f001 f957 	bl	8021224 <siscanf>
 801ff76:	4540      	cmp	r0, r8
 801ff78:	ddc0      	ble.n	801fefc <_tzset_unlocked_r+0x34>
 801ff7a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801ff7e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ff82:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80201bc <_tzset_unlocked_r+0x2f4>
 801ff86:	213c      	movs	r1, #60	; 0x3c
 801ff88:	fb01 2203 	mla	r2, r1, r3, r2
 801ff8c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ff90:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ff94:	fb01 2303 	mla	r3, r1, r3, r2
 801ff98:	435c      	muls	r4, r3
 801ff9a:	62ac      	str	r4, [r5, #40]	; 0x28
 801ff9c:	4c81      	ldr	r4, [pc, #516]	; (80201a4 <_tzset_unlocked_r+0x2dc>)
 801ff9e:	4b82      	ldr	r3, [pc, #520]	; (80201a8 <_tzset_unlocked_r+0x2e0>)
 801ffa0:	6023      	str	r3, [r4, #0]
 801ffa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffa4:	4981      	ldr	r1, [pc, #516]	; (80201ac <_tzset_unlocked_r+0x2e4>)
 801ffa6:	441f      	add	r7, r3
 801ffa8:	464a      	mov	r2, r9
 801ffaa:	4633      	mov	r3, r6
 801ffac:	4638      	mov	r0, r7
 801ffae:	f001 f939 	bl	8021224 <siscanf>
 801ffb2:	4540      	cmp	r0, r8
 801ffb4:	dc16      	bgt.n	801ffe4 <_tzset_unlocked_r+0x11c>
 801ffb6:	6823      	ldr	r3, [r4, #0]
 801ffb8:	6063      	str	r3, [r4, #4]
 801ffba:	4b77      	ldr	r3, [pc, #476]	; (8020198 <_tzset_unlocked_r+0x2d0>)
 801ffbc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801ffbe:	601a      	str	r2, [r3, #0]
 801ffc0:	4b77      	ldr	r3, [pc, #476]	; (80201a0 <_tzset_unlocked_r+0x2d8>)
 801ffc2:	f8c3 8000 	str.w	r8, [r3]
 801ffc6:	e799      	b.n	801fefc <_tzset_unlocked_r+0x34>
 801ffc8:	f7e0 f940 	bl	800024c <strcmp>
 801ffcc:	2800      	cmp	r0, #0
 801ffce:	d19b      	bne.n	801ff08 <_tzset_unlocked_r+0x40>
 801ffd0:	e794      	b.n	801fefc <_tzset_unlocked_r+0x34>
 801ffd2:	4621      	mov	r1, r4
 801ffd4:	f001 f952 	bl	802127c <strcpy>
 801ffd8:	e7a3      	b.n	801ff22 <_tzset_unlocked_r+0x5a>
 801ffda:	2b2b      	cmp	r3, #43	; 0x2b
 801ffdc:	bf08      	it	eq
 801ffde:	3701      	addeq	r7, #1
 801ffe0:	2401      	movs	r4, #1
 801ffe2:	e7b3      	b.n	801ff4c <_tzset_unlocked_r+0x84>
 801ffe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffe6:	f8c4 9004 	str.w	r9, [r4, #4]
 801ffea:	18fc      	adds	r4, r7, r3
 801ffec:	5cfb      	ldrb	r3, [r7, r3]
 801ffee:	2b2d      	cmp	r3, #45	; 0x2d
 801fff0:	f040 808b 	bne.w	802010a <_tzset_unlocked_r+0x242>
 801fff4:	3401      	adds	r4, #1
 801fff6:	f04f 37ff 	mov.w	r7, #4294967295
 801fffa:	2300      	movs	r3, #0
 801fffc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020000:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020004:	f8ad 3020 	strh.w	r3, [sp, #32]
 8020008:	930a      	str	r3, [sp, #40]	; 0x28
 802000a:	e9cd a602 	strd	sl, r6, [sp, #8]
 802000e:	e9cd b600 	strd	fp, r6, [sp]
 8020012:	4967      	ldr	r1, [pc, #412]	; (80201b0 <_tzset_unlocked_r+0x2e8>)
 8020014:	4633      	mov	r3, r6
 8020016:	aa07      	add	r2, sp, #28
 8020018:	4620      	mov	r0, r4
 802001a:	f001 f903 	bl	8021224 <siscanf>
 802001e:	2800      	cmp	r0, #0
 8020020:	dc78      	bgt.n	8020114 <_tzset_unlocked_r+0x24c>
 8020022:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8020024:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8020028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802002a:	652f      	str	r7, [r5, #80]	; 0x50
 802002c:	441c      	add	r4, r3
 802002e:	462f      	mov	r7, r5
 8020030:	f04f 0900 	mov.w	r9, #0
 8020034:	7823      	ldrb	r3, [r4, #0]
 8020036:	2b2c      	cmp	r3, #44	; 0x2c
 8020038:	bf08      	it	eq
 802003a:	3401      	addeq	r4, #1
 802003c:	f894 8000 	ldrb.w	r8, [r4]
 8020040:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8020044:	d178      	bne.n	8020138 <_tzset_unlocked_r+0x270>
 8020046:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802004a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 802004e:	ab09      	add	r3, sp, #36	; 0x24
 8020050:	9300      	str	r3, [sp, #0]
 8020052:	4958      	ldr	r1, [pc, #352]	; (80201b4 <_tzset_unlocked_r+0x2ec>)
 8020054:	9603      	str	r6, [sp, #12]
 8020056:	4633      	mov	r3, r6
 8020058:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 802005c:	4620      	mov	r0, r4
 802005e:	f001 f8e1 	bl	8021224 <siscanf>
 8020062:	2803      	cmp	r0, #3
 8020064:	f47f af4a 	bne.w	801fefc <_tzset_unlocked_r+0x34>
 8020068:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 802006c:	1e4b      	subs	r3, r1, #1
 802006e:	2b0b      	cmp	r3, #11
 8020070:	f63f af44 	bhi.w	801fefc <_tzset_unlocked_r+0x34>
 8020074:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8020078:	1e53      	subs	r3, r2, #1
 802007a:	2b04      	cmp	r3, #4
 802007c:	f63f af3e 	bhi.w	801fefc <_tzset_unlocked_r+0x34>
 8020080:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8020084:	2b06      	cmp	r3, #6
 8020086:	f63f af39 	bhi.w	801fefc <_tzset_unlocked_r+0x34>
 802008a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802008e:	f887 8008 	strb.w	r8, [r7, #8]
 8020092:	617b      	str	r3, [r7, #20]
 8020094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020096:	eb04 0803 	add.w	r8, r4, r3
 802009a:	2302      	movs	r3, #2
 802009c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80200a0:	2300      	movs	r3, #0
 80200a2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80200a6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80200aa:	930a      	str	r3, [sp, #40]	; 0x28
 80200ac:	f898 3000 	ldrb.w	r3, [r8]
 80200b0:	2b2f      	cmp	r3, #47	; 0x2f
 80200b2:	d109      	bne.n	80200c8 <_tzset_unlocked_r+0x200>
 80200b4:	e9cd a602 	strd	sl, r6, [sp, #8]
 80200b8:	e9cd b600 	strd	fp, r6, [sp]
 80200bc:	493e      	ldr	r1, [pc, #248]	; (80201b8 <_tzset_unlocked_r+0x2f0>)
 80200be:	4633      	mov	r3, r6
 80200c0:	aa07      	add	r2, sp, #28
 80200c2:	4640      	mov	r0, r8
 80200c4:	f001 f8ae 	bl	8021224 <siscanf>
 80200c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80200cc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80200d0:	213c      	movs	r1, #60	; 0x3c
 80200d2:	fb01 2203 	mla	r2, r1, r3, r2
 80200d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80200da:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80200de:	fb01 2303 	mla	r3, r1, r3, r2
 80200e2:	61bb      	str	r3, [r7, #24]
 80200e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80200e6:	3728      	adds	r7, #40	; 0x28
 80200e8:	4444      	add	r4, r8
 80200ea:	f1b9 0f00 	cmp.w	r9, #0
 80200ee:	d020      	beq.n	8020132 <_tzset_unlocked_r+0x26a>
 80200f0:	6868      	ldr	r0, [r5, #4]
 80200f2:	f7ff fe2f 	bl	801fd54 <__tzcalc_limits>
 80200f6:	4b28      	ldr	r3, [pc, #160]	; (8020198 <_tzset_unlocked_r+0x2d0>)
 80200f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80200fa:	601a      	str	r2, [r3, #0]
 80200fc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80200fe:	1a9b      	subs	r3, r3, r2
 8020100:	4a27      	ldr	r2, [pc, #156]	; (80201a0 <_tzset_unlocked_r+0x2d8>)
 8020102:	bf18      	it	ne
 8020104:	2301      	movne	r3, #1
 8020106:	6013      	str	r3, [r2, #0]
 8020108:	e6f8      	b.n	801fefc <_tzset_unlocked_r+0x34>
 802010a:	2b2b      	cmp	r3, #43	; 0x2b
 802010c:	bf08      	it	eq
 802010e:	3401      	addeq	r4, #1
 8020110:	2701      	movs	r7, #1
 8020112:	e772      	b.n	801fffa <_tzset_unlocked_r+0x132>
 8020114:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8020118:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802011c:	213c      	movs	r1, #60	; 0x3c
 802011e:	fb01 2203 	mla	r2, r1, r3, r2
 8020122:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8020126:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802012a:	fb01 2303 	mla	r3, r1, r3, r2
 802012e:	435f      	muls	r7, r3
 8020130:	e77a      	b.n	8020028 <_tzset_unlocked_r+0x160>
 8020132:	f04f 0901 	mov.w	r9, #1
 8020136:	e77d      	b.n	8020034 <_tzset_unlocked_r+0x16c>
 8020138:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 802013c:	bf06      	itte	eq
 802013e:	3401      	addeq	r4, #1
 8020140:	4643      	moveq	r3, r8
 8020142:	2344      	movne	r3, #68	; 0x44
 8020144:	220a      	movs	r2, #10
 8020146:	a90b      	add	r1, sp, #44	; 0x2c
 8020148:	4620      	mov	r0, r4
 802014a:	9305      	str	r3, [sp, #20]
 802014c:	f7ff fdf8 	bl	801fd40 <strtoul>
 8020150:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8020154:	9b05      	ldr	r3, [sp, #20]
 8020156:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802015a:	45a0      	cmp	r8, r4
 802015c:	d114      	bne.n	8020188 <_tzset_unlocked_r+0x2c0>
 802015e:	234d      	movs	r3, #77	; 0x4d
 8020160:	f1b9 0f00 	cmp.w	r9, #0
 8020164:	d107      	bne.n	8020176 <_tzset_unlocked_r+0x2ae>
 8020166:	722b      	strb	r3, [r5, #8]
 8020168:	2103      	movs	r1, #3
 802016a:	2302      	movs	r3, #2
 802016c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8020170:	f8c5 9014 	str.w	r9, [r5, #20]
 8020174:	e791      	b.n	802009a <_tzset_unlocked_r+0x1d2>
 8020176:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802017a:	220b      	movs	r2, #11
 802017c:	2301      	movs	r3, #1
 802017e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8020182:	2300      	movs	r3, #0
 8020184:	63eb      	str	r3, [r5, #60]	; 0x3c
 8020186:	e788      	b.n	802009a <_tzset_unlocked_r+0x1d2>
 8020188:	b280      	uxth	r0, r0
 802018a:	723b      	strb	r3, [r7, #8]
 802018c:	6178      	str	r0, [r7, #20]
 802018e:	e784      	b.n	802009a <_tzset_unlocked_r+0x1d2>
 8020190:	0802755c 	.word	0x0802755c
 8020194:	20000dc4 	.word	0x20000dc4
 8020198:	20000dcc 	.word	0x20000dcc
 802019c:	0802755f 	.word	0x0802755f
 80201a0:	20000dc8 	.word	0x20000dc8
 80201a4:	2000016c 	.word	0x2000016c
 80201a8:	20000db7 	.word	0x20000db7
 80201ac:	08027563 	.word	0x08027563
 80201b0:	08027586 	.word	0x08027586
 80201b4:	08027572 	.word	0x08027572
 80201b8:	08027585 	.word	0x08027585
 80201bc:	20000dac 	.word	0x20000dac

080201c0 <_vsniprintf_r>:
 80201c0:	b530      	push	{r4, r5, lr}
 80201c2:	1e14      	subs	r4, r2, #0
 80201c4:	4605      	mov	r5, r0
 80201c6:	b09b      	sub	sp, #108	; 0x6c
 80201c8:	4618      	mov	r0, r3
 80201ca:	da05      	bge.n	80201d8 <_vsniprintf_r+0x18>
 80201cc:	238b      	movs	r3, #139	; 0x8b
 80201ce:	602b      	str	r3, [r5, #0]
 80201d0:	f04f 30ff 	mov.w	r0, #4294967295
 80201d4:	b01b      	add	sp, #108	; 0x6c
 80201d6:	bd30      	pop	{r4, r5, pc}
 80201d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80201dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80201e0:	bf14      	ite	ne
 80201e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80201e6:	4623      	moveq	r3, r4
 80201e8:	9302      	str	r3, [sp, #8]
 80201ea:	9305      	str	r3, [sp, #20]
 80201ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80201f0:	9100      	str	r1, [sp, #0]
 80201f2:	9104      	str	r1, [sp, #16]
 80201f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80201f8:	4602      	mov	r2, r0
 80201fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80201fc:	4669      	mov	r1, sp
 80201fe:	4628      	mov	r0, r5
 8020200:	f000 fb94 	bl	802092c <_svfiprintf_r>
 8020204:	1c43      	adds	r3, r0, #1
 8020206:	bfbc      	itt	lt
 8020208:	238b      	movlt	r3, #139	; 0x8b
 802020a:	602b      	strlt	r3, [r5, #0]
 802020c:	2c00      	cmp	r4, #0
 802020e:	d0e1      	beq.n	80201d4 <_vsniprintf_r+0x14>
 8020210:	9b00      	ldr	r3, [sp, #0]
 8020212:	2200      	movs	r2, #0
 8020214:	701a      	strb	r2, [r3, #0]
 8020216:	e7dd      	b.n	80201d4 <_vsniprintf_r+0x14>

08020218 <vsniprintf>:
 8020218:	b507      	push	{r0, r1, r2, lr}
 802021a:	9300      	str	r3, [sp, #0]
 802021c:	4613      	mov	r3, r2
 802021e:	460a      	mov	r2, r1
 8020220:	4601      	mov	r1, r0
 8020222:	4803      	ldr	r0, [pc, #12]	; (8020230 <vsniprintf+0x18>)
 8020224:	6800      	ldr	r0, [r0, #0]
 8020226:	f7ff ffcb 	bl	80201c0 <_vsniprintf_r>
 802022a:	b003      	add	sp, #12
 802022c:	f85d fb04 	ldr.w	pc, [sp], #4
 8020230:	20000108 	.word	0x20000108

08020234 <__swbuf_r>:
 8020234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020236:	460e      	mov	r6, r1
 8020238:	4614      	mov	r4, r2
 802023a:	4605      	mov	r5, r0
 802023c:	b118      	cbz	r0, 8020246 <__swbuf_r+0x12>
 802023e:	6983      	ldr	r3, [r0, #24]
 8020240:	b90b      	cbnz	r3, 8020246 <__swbuf_r+0x12>
 8020242:	f7fe f939 	bl	801e4b8 <__sinit>
 8020246:	4b21      	ldr	r3, [pc, #132]	; (80202cc <__swbuf_r+0x98>)
 8020248:	429c      	cmp	r4, r3
 802024a:	d12b      	bne.n	80202a4 <__swbuf_r+0x70>
 802024c:	686c      	ldr	r4, [r5, #4]
 802024e:	69a3      	ldr	r3, [r4, #24]
 8020250:	60a3      	str	r3, [r4, #8]
 8020252:	89a3      	ldrh	r3, [r4, #12]
 8020254:	071a      	lsls	r2, r3, #28
 8020256:	d52f      	bpl.n	80202b8 <__swbuf_r+0x84>
 8020258:	6923      	ldr	r3, [r4, #16]
 802025a:	b36b      	cbz	r3, 80202b8 <__swbuf_r+0x84>
 802025c:	6923      	ldr	r3, [r4, #16]
 802025e:	6820      	ldr	r0, [r4, #0]
 8020260:	1ac0      	subs	r0, r0, r3
 8020262:	6963      	ldr	r3, [r4, #20]
 8020264:	b2f6      	uxtb	r6, r6
 8020266:	4283      	cmp	r3, r0
 8020268:	4637      	mov	r7, r6
 802026a:	dc04      	bgt.n	8020276 <__swbuf_r+0x42>
 802026c:	4621      	mov	r1, r4
 802026e:	4628      	mov	r0, r5
 8020270:	f7fe f87c 	bl	801e36c <_fflush_r>
 8020274:	bb30      	cbnz	r0, 80202c4 <__swbuf_r+0x90>
 8020276:	68a3      	ldr	r3, [r4, #8]
 8020278:	3b01      	subs	r3, #1
 802027a:	60a3      	str	r3, [r4, #8]
 802027c:	6823      	ldr	r3, [r4, #0]
 802027e:	1c5a      	adds	r2, r3, #1
 8020280:	6022      	str	r2, [r4, #0]
 8020282:	701e      	strb	r6, [r3, #0]
 8020284:	6963      	ldr	r3, [r4, #20]
 8020286:	3001      	adds	r0, #1
 8020288:	4283      	cmp	r3, r0
 802028a:	d004      	beq.n	8020296 <__swbuf_r+0x62>
 802028c:	89a3      	ldrh	r3, [r4, #12]
 802028e:	07db      	lsls	r3, r3, #31
 8020290:	d506      	bpl.n	80202a0 <__swbuf_r+0x6c>
 8020292:	2e0a      	cmp	r6, #10
 8020294:	d104      	bne.n	80202a0 <__swbuf_r+0x6c>
 8020296:	4621      	mov	r1, r4
 8020298:	4628      	mov	r0, r5
 802029a:	f7fe f867 	bl	801e36c <_fflush_r>
 802029e:	b988      	cbnz	r0, 80202c4 <__swbuf_r+0x90>
 80202a0:	4638      	mov	r0, r7
 80202a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80202a4:	4b0a      	ldr	r3, [pc, #40]	; (80202d0 <__swbuf_r+0x9c>)
 80202a6:	429c      	cmp	r4, r3
 80202a8:	d101      	bne.n	80202ae <__swbuf_r+0x7a>
 80202aa:	68ac      	ldr	r4, [r5, #8]
 80202ac:	e7cf      	b.n	802024e <__swbuf_r+0x1a>
 80202ae:	4b09      	ldr	r3, [pc, #36]	; (80202d4 <__swbuf_r+0xa0>)
 80202b0:	429c      	cmp	r4, r3
 80202b2:	bf08      	it	eq
 80202b4:	68ec      	ldreq	r4, [r5, #12]
 80202b6:	e7ca      	b.n	802024e <__swbuf_r+0x1a>
 80202b8:	4621      	mov	r1, r4
 80202ba:	4628      	mov	r0, r5
 80202bc:	f000 f81e 	bl	80202fc <__swsetup_r>
 80202c0:	2800      	cmp	r0, #0
 80202c2:	d0cb      	beq.n	802025c <__swbuf_r+0x28>
 80202c4:	f04f 37ff 	mov.w	r7, #4294967295
 80202c8:	e7ea      	b.n	80202a0 <__swbuf_r+0x6c>
 80202ca:	bf00      	nop
 80202cc:	08027160 	.word	0x08027160
 80202d0:	08027180 	.word	0x08027180
 80202d4:	08027140 	.word	0x08027140

080202d8 <_write_r>:
 80202d8:	b538      	push	{r3, r4, r5, lr}
 80202da:	4d07      	ldr	r5, [pc, #28]	; (80202f8 <_write_r+0x20>)
 80202dc:	4604      	mov	r4, r0
 80202de:	4608      	mov	r0, r1
 80202e0:	4611      	mov	r1, r2
 80202e2:	2200      	movs	r2, #0
 80202e4:	602a      	str	r2, [r5, #0]
 80202e6:	461a      	mov	r2, r3
 80202e8:	f7e0 fd72 	bl	8000dd0 <_write>
 80202ec:	1c43      	adds	r3, r0, #1
 80202ee:	d102      	bne.n	80202f6 <_write_r+0x1e>
 80202f0:	682b      	ldr	r3, [r5, #0]
 80202f2:	b103      	cbz	r3, 80202f6 <_write_r+0x1e>
 80202f4:	6023      	str	r3, [r4, #0]
 80202f6:	bd38      	pop	{r3, r4, r5, pc}
 80202f8:	20000e70 	.word	0x20000e70

080202fc <__swsetup_r>:
 80202fc:	4b32      	ldr	r3, [pc, #200]	; (80203c8 <__swsetup_r+0xcc>)
 80202fe:	b570      	push	{r4, r5, r6, lr}
 8020300:	681d      	ldr	r5, [r3, #0]
 8020302:	4606      	mov	r6, r0
 8020304:	460c      	mov	r4, r1
 8020306:	b125      	cbz	r5, 8020312 <__swsetup_r+0x16>
 8020308:	69ab      	ldr	r3, [r5, #24]
 802030a:	b913      	cbnz	r3, 8020312 <__swsetup_r+0x16>
 802030c:	4628      	mov	r0, r5
 802030e:	f7fe f8d3 	bl	801e4b8 <__sinit>
 8020312:	4b2e      	ldr	r3, [pc, #184]	; (80203cc <__swsetup_r+0xd0>)
 8020314:	429c      	cmp	r4, r3
 8020316:	d10f      	bne.n	8020338 <__swsetup_r+0x3c>
 8020318:	686c      	ldr	r4, [r5, #4]
 802031a:	89a3      	ldrh	r3, [r4, #12]
 802031c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020320:	0719      	lsls	r1, r3, #28
 8020322:	d42c      	bmi.n	802037e <__swsetup_r+0x82>
 8020324:	06dd      	lsls	r5, r3, #27
 8020326:	d411      	bmi.n	802034c <__swsetup_r+0x50>
 8020328:	2309      	movs	r3, #9
 802032a:	6033      	str	r3, [r6, #0]
 802032c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020330:	81a3      	strh	r3, [r4, #12]
 8020332:	f04f 30ff 	mov.w	r0, #4294967295
 8020336:	e03e      	b.n	80203b6 <__swsetup_r+0xba>
 8020338:	4b25      	ldr	r3, [pc, #148]	; (80203d0 <__swsetup_r+0xd4>)
 802033a:	429c      	cmp	r4, r3
 802033c:	d101      	bne.n	8020342 <__swsetup_r+0x46>
 802033e:	68ac      	ldr	r4, [r5, #8]
 8020340:	e7eb      	b.n	802031a <__swsetup_r+0x1e>
 8020342:	4b24      	ldr	r3, [pc, #144]	; (80203d4 <__swsetup_r+0xd8>)
 8020344:	429c      	cmp	r4, r3
 8020346:	bf08      	it	eq
 8020348:	68ec      	ldreq	r4, [r5, #12]
 802034a:	e7e6      	b.n	802031a <__swsetup_r+0x1e>
 802034c:	0758      	lsls	r0, r3, #29
 802034e:	d512      	bpl.n	8020376 <__swsetup_r+0x7a>
 8020350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020352:	b141      	cbz	r1, 8020366 <__swsetup_r+0x6a>
 8020354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020358:	4299      	cmp	r1, r3
 802035a:	d002      	beq.n	8020362 <__swsetup_r+0x66>
 802035c:	4630      	mov	r0, r6
 802035e:	f7fe fcfb 	bl	801ed58 <_free_r>
 8020362:	2300      	movs	r3, #0
 8020364:	6363      	str	r3, [r4, #52]	; 0x34
 8020366:	89a3      	ldrh	r3, [r4, #12]
 8020368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802036c:	81a3      	strh	r3, [r4, #12]
 802036e:	2300      	movs	r3, #0
 8020370:	6063      	str	r3, [r4, #4]
 8020372:	6923      	ldr	r3, [r4, #16]
 8020374:	6023      	str	r3, [r4, #0]
 8020376:	89a3      	ldrh	r3, [r4, #12]
 8020378:	f043 0308 	orr.w	r3, r3, #8
 802037c:	81a3      	strh	r3, [r4, #12]
 802037e:	6923      	ldr	r3, [r4, #16]
 8020380:	b94b      	cbnz	r3, 8020396 <__swsetup_r+0x9a>
 8020382:	89a3      	ldrh	r3, [r4, #12]
 8020384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802038c:	d003      	beq.n	8020396 <__swsetup_r+0x9a>
 802038e:	4621      	mov	r1, r4
 8020390:	4630      	mov	r0, r6
 8020392:	f7fe fc6b 	bl	801ec6c <__smakebuf_r>
 8020396:	89a0      	ldrh	r0, [r4, #12]
 8020398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802039c:	f010 0301 	ands.w	r3, r0, #1
 80203a0:	d00a      	beq.n	80203b8 <__swsetup_r+0xbc>
 80203a2:	2300      	movs	r3, #0
 80203a4:	60a3      	str	r3, [r4, #8]
 80203a6:	6963      	ldr	r3, [r4, #20]
 80203a8:	425b      	negs	r3, r3
 80203aa:	61a3      	str	r3, [r4, #24]
 80203ac:	6923      	ldr	r3, [r4, #16]
 80203ae:	b943      	cbnz	r3, 80203c2 <__swsetup_r+0xc6>
 80203b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80203b4:	d1ba      	bne.n	802032c <__swsetup_r+0x30>
 80203b6:	bd70      	pop	{r4, r5, r6, pc}
 80203b8:	0781      	lsls	r1, r0, #30
 80203ba:	bf58      	it	pl
 80203bc:	6963      	ldrpl	r3, [r4, #20]
 80203be:	60a3      	str	r3, [r4, #8]
 80203c0:	e7f4      	b.n	80203ac <__swsetup_r+0xb0>
 80203c2:	2000      	movs	r0, #0
 80203c4:	e7f7      	b.n	80203b6 <__swsetup_r+0xba>
 80203c6:	bf00      	nop
 80203c8:	20000108 	.word	0x20000108
 80203cc:	08027160 	.word	0x08027160
 80203d0:	08027180 	.word	0x08027180
 80203d4:	08027140 	.word	0x08027140

080203d8 <__register_exitproc>:
 80203d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80203dc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8020498 <__register_exitproc+0xc0>
 80203e0:	4606      	mov	r6, r0
 80203e2:	f8d8 0000 	ldr.w	r0, [r8]
 80203e6:	461f      	mov	r7, r3
 80203e8:	460d      	mov	r5, r1
 80203ea:	4691      	mov	r9, r2
 80203ec:	f7fe fc17 	bl	801ec1e <__retarget_lock_acquire_recursive>
 80203f0:	4b25      	ldr	r3, [pc, #148]	; (8020488 <__register_exitproc+0xb0>)
 80203f2:	681c      	ldr	r4, [r3, #0]
 80203f4:	b934      	cbnz	r4, 8020404 <__register_exitproc+0x2c>
 80203f6:	4c25      	ldr	r4, [pc, #148]	; (802048c <__register_exitproc+0xb4>)
 80203f8:	601c      	str	r4, [r3, #0]
 80203fa:	4b25      	ldr	r3, [pc, #148]	; (8020490 <__register_exitproc+0xb8>)
 80203fc:	b113      	cbz	r3, 8020404 <__register_exitproc+0x2c>
 80203fe:	681b      	ldr	r3, [r3, #0]
 8020400:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8020404:	6863      	ldr	r3, [r4, #4]
 8020406:	2b1f      	cmp	r3, #31
 8020408:	dd07      	ble.n	802041a <__register_exitproc+0x42>
 802040a:	f8d8 0000 	ldr.w	r0, [r8]
 802040e:	f7fe fc08 	bl	801ec22 <__retarget_lock_release_recursive>
 8020412:	f04f 30ff 	mov.w	r0, #4294967295
 8020416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802041a:	b34e      	cbz	r6, 8020470 <__register_exitproc+0x98>
 802041c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8020420:	b988      	cbnz	r0, 8020446 <__register_exitproc+0x6e>
 8020422:	4b1c      	ldr	r3, [pc, #112]	; (8020494 <__register_exitproc+0xbc>)
 8020424:	b923      	cbnz	r3, 8020430 <__register_exitproc+0x58>
 8020426:	f8d8 0000 	ldr.w	r0, [r8]
 802042a:	f7fe fbf9 	bl	801ec20 <__retarget_lock_release>
 802042e:	e7f0      	b.n	8020412 <__register_exitproc+0x3a>
 8020430:	f44f 7084 	mov.w	r0, #264	; 0x108
 8020434:	f7fe fc5a 	bl	801ecec <malloc>
 8020438:	2800      	cmp	r0, #0
 802043a:	d0f4      	beq.n	8020426 <__register_exitproc+0x4e>
 802043c:	2300      	movs	r3, #0
 802043e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8020442:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8020446:	6863      	ldr	r3, [r4, #4]
 8020448:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802044c:	2201      	movs	r2, #1
 802044e:	409a      	lsls	r2, r3
 8020450:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8020454:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8020458:	4313      	orrs	r3, r2
 802045a:	2e02      	cmp	r6, #2
 802045c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8020460:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8020464:	bf02      	ittt	eq
 8020466:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802046a:	431a      	orreq	r2, r3
 802046c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8020470:	6863      	ldr	r3, [r4, #4]
 8020472:	f8d8 0000 	ldr.w	r0, [r8]
 8020476:	1c5a      	adds	r2, r3, #1
 8020478:	3302      	adds	r3, #2
 802047a:	6062      	str	r2, [r4, #4]
 802047c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8020480:	f7fe fbcf 	bl	801ec22 <__retarget_lock_release_recursive>
 8020484:	2000      	movs	r0, #0
 8020486:	e7c6      	b.n	8020416 <__register_exitproc+0x3e>
 8020488:	20000e5c 	.word	0x20000e5c
 802048c:	20000dd0 	.word	0x20000dd0
 8020490:	00000000 	.word	0x00000000
 8020494:	0801eced 	.word	0x0801eced
 8020498:	20000174 	.word	0x20000174

0802049c <abs>:
 802049c:	2800      	cmp	r0, #0
 802049e:	bfb8      	it	lt
 80204a0:	4240      	neglt	r0, r0
 80204a2:	4770      	bx	lr

080204a4 <__assert_func>:
 80204a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80204a6:	4614      	mov	r4, r2
 80204a8:	461a      	mov	r2, r3
 80204aa:	4b09      	ldr	r3, [pc, #36]	; (80204d0 <__assert_func+0x2c>)
 80204ac:	681b      	ldr	r3, [r3, #0]
 80204ae:	4605      	mov	r5, r0
 80204b0:	68d8      	ldr	r0, [r3, #12]
 80204b2:	b14c      	cbz	r4, 80204c8 <__assert_func+0x24>
 80204b4:	4b07      	ldr	r3, [pc, #28]	; (80204d4 <__assert_func+0x30>)
 80204b6:	9100      	str	r1, [sp, #0]
 80204b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80204bc:	4906      	ldr	r1, [pc, #24]	; (80204d8 <__assert_func+0x34>)
 80204be:	462b      	mov	r3, r5
 80204c0:	f000 f854 	bl	802056c <fiprintf>
 80204c4:	f7fd fe3c 	bl	801e140 <abort>
 80204c8:	4b04      	ldr	r3, [pc, #16]	; (80204dc <__assert_func+0x38>)
 80204ca:	461c      	mov	r4, r3
 80204cc:	e7f3      	b.n	80204b6 <__assert_func+0x12>
 80204ce:	bf00      	nop
 80204d0:	20000108 	.word	0x20000108
 80204d4:	08027598 	.word	0x08027598
 80204d8:	080275a5 	.word	0x080275a5
 80204dc:	080275d3 	.word	0x080275d3

080204e0 <_close_r>:
 80204e0:	b538      	push	{r3, r4, r5, lr}
 80204e2:	4d06      	ldr	r5, [pc, #24]	; (80204fc <_close_r+0x1c>)
 80204e4:	2300      	movs	r3, #0
 80204e6:	4604      	mov	r4, r0
 80204e8:	4608      	mov	r0, r1
 80204ea:	602b      	str	r3, [r5, #0]
 80204ec:	f7e0 fc8c 	bl	8000e08 <_close>
 80204f0:	1c43      	adds	r3, r0, #1
 80204f2:	d102      	bne.n	80204fa <_close_r+0x1a>
 80204f4:	682b      	ldr	r3, [r5, #0]
 80204f6:	b103      	cbz	r3, 80204fa <_close_r+0x1a>
 80204f8:	6023      	str	r3, [r4, #0]
 80204fa:	bd38      	pop	{r3, r4, r5, pc}
 80204fc:	20000e70 	.word	0x20000e70

08020500 <__sflags>:
 8020500:	780b      	ldrb	r3, [r1, #0]
 8020502:	2b72      	cmp	r3, #114	; 0x72
 8020504:	b530      	push	{r4, r5, lr}
 8020506:	d022      	beq.n	802054e <__sflags+0x4e>
 8020508:	2b77      	cmp	r3, #119	; 0x77
 802050a:	d024      	beq.n	8020556 <__sflags+0x56>
 802050c:	2b61      	cmp	r3, #97	; 0x61
 802050e:	d027      	beq.n	8020560 <__sflags+0x60>
 8020510:	2316      	movs	r3, #22
 8020512:	6003      	str	r3, [r0, #0]
 8020514:	2000      	movs	r0, #0
 8020516:	bd30      	pop	{r4, r5, pc}
 8020518:	2d62      	cmp	r5, #98	; 0x62
 802051a:	d012      	beq.n	8020542 <__sflags+0x42>
 802051c:	2d78      	cmp	r5, #120	; 0x78
 802051e:	d013      	beq.n	8020548 <__sflags+0x48>
 8020520:	2d2b      	cmp	r5, #43	; 0x2b
 8020522:	d107      	bne.n	8020534 <__sflags+0x34>
 8020524:	f020 001c 	bic.w	r0, r0, #28
 8020528:	f023 0303 	bic.w	r3, r3, #3
 802052c:	f040 0010 	orr.w	r0, r0, #16
 8020530:	f043 0302 	orr.w	r3, r3, #2
 8020534:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8020538:	2d00      	cmp	r5, #0
 802053a:	d1ed      	bne.n	8020518 <__sflags+0x18>
 802053c:	4323      	orrs	r3, r4
 802053e:	6013      	str	r3, [r2, #0]
 8020540:	e7e9      	b.n	8020516 <__sflags+0x16>
 8020542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020546:	e7f5      	b.n	8020534 <__sflags+0x34>
 8020548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802054c:	e7f2      	b.n	8020534 <__sflags+0x34>
 802054e:	2400      	movs	r4, #0
 8020550:	4623      	mov	r3, r4
 8020552:	2004      	movs	r0, #4
 8020554:	e7ee      	b.n	8020534 <__sflags+0x34>
 8020556:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 802055a:	2301      	movs	r3, #1
 802055c:	2008      	movs	r0, #8
 802055e:	e7e9      	b.n	8020534 <__sflags+0x34>
 8020560:	f44f 7402 	mov.w	r4, #520	; 0x208
 8020564:	2301      	movs	r3, #1
 8020566:	f44f 7084 	mov.w	r0, #264	; 0x108
 802056a:	e7e3      	b.n	8020534 <__sflags+0x34>

0802056c <fiprintf>:
 802056c:	b40e      	push	{r1, r2, r3}
 802056e:	b503      	push	{r0, r1, lr}
 8020570:	4601      	mov	r1, r0
 8020572:	ab03      	add	r3, sp, #12
 8020574:	4805      	ldr	r0, [pc, #20]	; (802058c <fiprintf+0x20>)
 8020576:	f853 2b04 	ldr.w	r2, [r3], #4
 802057a:	6800      	ldr	r0, [r0, #0]
 802057c:	9301      	str	r3, [sp, #4]
 802057e:	f000 faff 	bl	8020b80 <_vfiprintf_r>
 8020582:	b002      	add	sp, #8
 8020584:	f85d eb04 	ldr.w	lr, [sp], #4
 8020588:	b003      	add	sp, #12
 802058a:	4770      	bx	lr
 802058c:	20000108 	.word	0x20000108

08020590 <_fstat_r>:
 8020590:	b538      	push	{r3, r4, r5, lr}
 8020592:	4d07      	ldr	r5, [pc, #28]	; (80205b0 <_fstat_r+0x20>)
 8020594:	2300      	movs	r3, #0
 8020596:	4604      	mov	r4, r0
 8020598:	4608      	mov	r0, r1
 802059a:	4611      	mov	r1, r2
 802059c:	602b      	str	r3, [r5, #0]
 802059e:	f7e0 fc3f 	bl	8000e20 <_fstat>
 80205a2:	1c43      	adds	r3, r0, #1
 80205a4:	d102      	bne.n	80205ac <_fstat_r+0x1c>
 80205a6:	682b      	ldr	r3, [r5, #0]
 80205a8:	b103      	cbz	r3, 80205ac <_fstat_r+0x1c>
 80205aa:	6023      	str	r3, [r4, #0]
 80205ac:	bd38      	pop	{r3, r4, r5, pc}
 80205ae:	bf00      	nop
 80205b0:	20000e70 	.word	0x20000e70

080205b4 <_findenv_r>:
 80205b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205b8:	4607      	mov	r7, r0
 80205ba:	4689      	mov	r9, r1
 80205bc:	4616      	mov	r6, r2
 80205be:	f000 fe85 	bl	80212cc <__env_lock>
 80205c2:	4b18      	ldr	r3, [pc, #96]	; (8020624 <_findenv_r+0x70>)
 80205c4:	681c      	ldr	r4, [r3, #0]
 80205c6:	469a      	mov	sl, r3
 80205c8:	b134      	cbz	r4, 80205d8 <_findenv_r+0x24>
 80205ca:	464b      	mov	r3, r9
 80205cc:	4698      	mov	r8, r3
 80205ce:	f813 1b01 	ldrb.w	r1, [r3], #1
 80205d2:	b139      	cbz	r1, 80205e4 <_findenv_r+0x30>
 80205d4:	293d      	cmp	r1, #61	; 0x3d
 80205d6:	d1f9      	bne.n	80205cc <_findenv_r+0x18>
 80205d8:	4638      	mov	r0, r7
 80205da:	f000 fe7d 	bl	80212d8 <__env_unlock>
 80205de:	2000      	movs	r0, #0
 80205e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205e4:	eba8 0809 	sub.w	r8, r8, r9
 80205e8:	46a3      	mov	fp, r4
 80205ea:	f854 0b04 	ldr.w	r0, [r4], #4
 80205ee:	2800      	cmp	r0, #0
 80205f0:	d0f2      	beq.n	80205d8 <_findenv_r+0x24>
 80205f2:	4642      	mov	r2, r8
 80205f4:	4649      	mov	r1, r9
 80205f6:	f000 fe49 	bl	802128c <strncmp>
 80205fa:	2800      	cmp	r0, #0
 80205fc:	d1f4      	bne.n	80205e8 <_findenv_r+0x34>
 80205fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8020602:	eb03 0508 	add.w	r5, r3, r8
 8020606:	f813 3008 	ldrb.w	r3, [r3, r8]
 802060a:	2b3d      	cmp	r3, #61	; 0x3d
 802060c:	d1ec      	bne.n	80205e8 <_findenv_r+0x34>
 802060e:	f8da 3000 	ldr.w	r3, [sl]
 8020612:	ebab 0303 	sub.w	r3, fp, r3
 8020616:	109b      	asrs	r3, r3, #2
 8020618:	4638      	mov	r0, r7
 802061a:	6033      	str	r3, [r6, #0]
 802061c:	f000 fe5c 	bl	80212d8 <__env_unlock>
 8020620:	1c68      	adds	r0, r5, #1
 8020622:	e7dd      	b.n	80205e0 <_findenv_r+0x2c>
 8020624:	20000000 	.word	0x20000000

08020628 <_getenv_r>:
 8020628:	b507      	push	{r0, r1, r2, lr}
 802062a:	aa01      	add	r2, sp, #4
 802062c:	f7ff ffc2 	bl	80205b4 <_findenv_r>
 8020630:	b003      	add	sp, #12
 8020632:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08020638 <__gettzinfo>:
 8020638:	4800      	ldr	r0, [pc, #0]	; (802063c <__gettzinfo+0x4>)
 802063a:	4770      	bx	lr
 802063c:	20000178 	.word	0x20000178

08020640 <gmtime_r>:
 8020640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020644:	e9d0 6700 	ldrd	r6, r7, [r0]
 8020648:	460c      	mov	r4, r1
 802064a:	4a51      	ldr	r2, [pc, #324]	; (8020790 <gmtime_r+0x150>)
 802064c:	2300      	movs	r3, #0
 802064e:	4630      	mov	r0, r6
 8020650:	4639      	mov	r1, r7
 8020652:	f7e0 f8af 	bl	80007b4 <__aeabi_ldivmod>
 8020656:	4639      	mov	r1, r7
 8020658:	4605      	mov	r5, r0
 802065a:	4a4d      	ldr	r2, [pc, #308]	; (8020790 <gmtime_r+0x150>)
 802065c:	4630      	mov	r0, r6
 802065e:	2300      	movs	r3, #0
 8020660:	f7e0 f8a8 	bl	80007b4 <__aeabi_ldivmod>
 8020664:	2a00      	cmp	r2, #0
 8020666:	bfbc      	itt	lt
 8020668:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 802066c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8020670:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8020674:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8020678:	fbb2 f3f1 	udiv	r3, r2, r1
 802067c:	fb01 2213 	mls	r2, r1, r3, r2
 8020680:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8020684:	bfac      	ite	ge
 8020686:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 802068a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 802068e:	60a3      	str	r3, [r4, #8]
 8020690:	fbb2 f3f1 	udiv	r3, r2, r1
 8020694:	fb01 2213 	mls	r2, r1, r3, r2
 8020698:	6063      	str	r3, [r4, #4]
 802069a:	6022      	str	r2, [r4, #0]
 802069c:	1cc3      	adds	r3, r0, #3
 802069e:	2207      	movs	r2, #7
 80206a0:	fb93 f2f2 	sdiv	r2, r3, r2
 80206a4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80206a8:	1a9b      	subs	r3, r3, r2
 80206aa:	bf48      	it	mi
 80206ac:	3307      	addmi	r3, #7
 80206ae:	2800      	cmp	r0, #0
 80206b0:	61a3      	str	r3, [r4, #24]
 80206b2:	bfb8      	it	lt
 80206b4:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80206b8:	4936      	ldr	r1, [pc, #216]	; (8020794 <gmtime_r+0x154>)
 80206ba:	bfae      	itee	ge
 80206bc:	fb90 f1f1 	sdivge	r1, r0, r1
 80206c0:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80206c4:	fb93 f1f1 	sdivlt	r1, r3, r1
 80206c8:	4b33      	ldr	r3, [pc, #204]	; (8020798 <gmtime_r+0x158>)
 80206ca:	fb03 0001 	mla	r0, r3, r1, r0
 80206ce:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80206d2:	fbb0 f2f2 	udiv	r2, r0, r2
 80206d6:	4402      	add	r2, r0
 80206d8:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80206dc:	fbb0 f3fc 	udiv	r3, r0, ip
 80206e0:	1ad2      	subs	r2, r2, r3
 80206e2:	f240 176d 	movw	r7, #365	; 0x16d
 80206e6:	4b2d      	ldr	r3, [pc, #180]	; (802079c <gmtime_r+0x15c>)
 80206e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80206ec:	2664      	movs	r6, #100	; 0x64
 80206ee:	1ad3      	subs	r3, r2, r3
 80206f0:	fbb3 f5f7 	udiv	r5, r3, r7
 80206f4:	fbb3 f3fc 	udiv	r3, r3, ip
 80206f8:	fbb5 f2f6 	udiv	r2, r5, r6
 80206fc:	1ad3      	subs	r3, r2, r3
 80206fe:	4403      	add	r3, r0
 8020700:	fb07 3315 	mls	r3, r7, r5, r3
 8020704:	2099      	movs	r0, #153	; 0x99
 8020706:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 802070a:	f10c 0c02 	add.w	ip, ip, #2
 802070e:	f103 0e01 	add.w	lr, r3, #1
 8020712:	fbbc f7f0 	udiv	r7, ip, r0
 8020716:	4378      	muls	r0, r7
 8020718:	3002      	adds	r0, #2
 802071a:	f04f 0805 	mov.w	r8, #5
 802071e:	fbb0 f0f8 	udiv	r0, r0, r8
 8020722:	ebae 0000 	sub.w	r0, lr, r0
 8020726:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 802072a:	45f4      	cmp	ip, lr
 802072c:	bf94      	ite	ls
 802072e:	f04f 0c02 	movls.w	ip, #2
 8020732:	f06f 0c09 	mvnhi.w	ip, #9
 8020736:	4467      	add	r7, ip
 8020738:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 802073c:	fb0c 5101 	mla	r1, ip, r1, r5
 8020740:	2f01      	cmp	r7, #1
 8020742:	bf98      	it	ls
 8020744:	3101      	addls	r1, #1
 8020746:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 802074a:	d30c      	bcc.n	8020766 <gmtime_r+0x126>
 802074c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8020750:	61e3      	str	r3, [r4, #28]
 8020752:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8020756:	2300      	movs	r3, #0
 8020758:	60e0      	str	r0, [r4, #12]
 802075a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802075e:	6223      	str	r3, [r4, #32]
 8020760:	4620      	mov	r0, r4
 8020762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020766:	f015 0f03 	tst.w	r5, #3
 802076a:	d102      	bne.n	8020772 <gmtime_r+0x132>
 802076c:	fb06 5212 	mls	r2, r6, r2, r5
 8020770:	b95a      	cbnz	r2, 802078a <gmtime_r+0x14a>
 8020772:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8020776:	fbb5 f2f6 	udiv	r2, r5, r6
 802077a:	fb06 5212 	mls	r2, r6, r2, r5
 802077e:	fab2 f282 	clz	r2, r2
 8020782:	0952      	lsrs	r2, r2, #5
 8020784:	333b      	adds	r3, #59	; 0x3b
 8020786:	4413      	add	r3, r2
 8020788:	e7e2      	b.n	8020750 <gmtime_r+0x110>
 802078a:	2201      	movs	r2, #1
 802078c:	e7fa      	b.n	8020784 <gmtime_r+0x144>
 802078e:	bf00      	nop
 8020790:	00015180 	.word	0x00015180
 8020794:	00023ab1 	.word	0x00023ab1
 8020798:	fffdc54f 	.word	0xfffdc54f
 802079c:	00023ab0 	.word	0x00023ab0

080207a0 <_isatty_r>:
 80207a0:	b538      	push	{r3, r4, r5, lr}
 80207a2:	4d06      	ldr	r5, [pc, #24]	; (80207bc <_isatty_r+0x1c>)
 80207a4:	2300      	movs	r3, #0
 80207a6:	4604      	mov	r4, r0
 80207a8:	4608      	mov	r0, r1
 80207aa:	602b      	str	r3, [r5, #0]
 80207ac:	f7e0 fb48 	bl	8000e40 <_isatty>
 80207b0:	1c43      	adds	r3, r0, #1
 80207b2:	d102      	bne.n	80207ba <_isatty_r+0x1a>
 80207b4:	682b      	ldr	r3, [r5, #0]
 80207b6:	b103      	cbz	r3, 80207ba <_isatty_r+0x1a>
 80207b8:	6023      	str	r3, [r4, #0]
 80207ba:	bd38      	pop	{r3, r4, r5, pc}
 80207bc:	20000e70 	.word	0x20000e70

080207c0 <labs>:
 80207c0:	2800      	cmp	r0, #0
 80207c2:	bfb8      	it	lt
 80207c4:	4240      	neglt	r0, r0
 80207c6:	4770      	bx	lr

080207c8 <_lseek_r>:
 80207c8:	b538      	push	{r3, r4, r5, lr}
 80207ca:	4d07      	ldr	r5, [pc, #28]	; (80207e8 <_lseek_r+0x20>)
 80207cc:	4604      	mov	r4, r0
 80207ce:	4608      	mov	r0, r1
 80207d0:	4611      	mov	r1, r2
 80207d2:	2200      	movs	r2, #0
 80207d4:	602a      	str	r2, [r5, #0]
 80207d6:	461a      	mov	r2, r3
 80207d8:	f7e0 fb3d 	bl	8000e56 <_lseek>
 80207dc:	1c43      	adds	r3, r0, #1
 80207de:	d102      	bne.n	80207e6 <_lseek_r+0x1e>
 80207e0:	682b      	ldr	r3, [r5, #0]
 80207e2:	b103      	cbz	r3, 80207e6 <_lseek_r+0x1e>
 80207e4:	6023      	str	r3, [r4, #0]
 80207e6:	bd38      	pop	{r3, r4, r5, pc}
 80207e8:	20000e70 	.word	0x20000e70

080207ec <__ascii_mbtowc>:
 80207ec:	b082      	sub	sp, #8
 80207ee:	b901      	cbnz	r1, 80207f2 <__ascii_mbtowc+0x6>
 80207f0:	a901      	add	r1, sp, #4
 80207f2:	b142      	cbz	r2, 8020806 <__ascii_mbtowc+0x1a>
 80207f4:	b14b      	cbz	r3, 802080a <__ascii_mbtowc+0x1e>
 80207f6:	7813      	ldrb	r3, [r2, #0]
 80207f8:	600b      	str	r3, [r1, #0]
 80207fa:	7812      	ldrb	r2, [r2, #0]
 80207fc:	1e10      	subs	r0, r2, #0
 80207fe:	bf18      	it	ne
 8020800:	2001      	movne	r0, #1
 8020802:	b002      	add	sp, #8
 8020804:	4770      	bx	lr
 8020806:	4610      	mov	r0, r2
 8020808:	e7fb      	b.n	8020802 <__ascii_mbtowc+0x16>
 802080a:	f06f 0001 	mvn.w	r0, #1
 802080e:	e7f8      	b.n	8020802 <__ascii_mbtowc+0x16>

08020810 <__malloc_lock>:
 8020810:	4801      	ldr	r0, [pc, #4]	; (8020818 <__malloc_lock+0x8>)
 8020812:	f7fe ba04 	b.w	801ec1e <__retarget_lock_acquire_recursive>
 8020816:	bf00      	nop
 8020818:	20000e68 	.word	0x20000e68

0802081c <__malloc_unlock>:
 802081c:	4801      	ldr	r0, [pc, #4]	; (8020824 <__malloc_unlock+0x8>)
 802081e:	f7fe ba00 	b.w	801ec22 <__retarget_lock_release_recursive>
 8020822:	bf00      	nop
 8020824:	20000e68 	.word	0x20000e68

08020828 <_realloc_r>:
 8020828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802082a:	4607      	mov	r7, r0
 802082c:	4614      	mov	r4, r2
 802082e:	460e      	mov	r6, r1
 8020830:	b921      	cbnz	r1, 802083c <_realloc_r+0x14>
 8020832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020836:	4611      	mov	r1, r2
 8020838:	f7fe bade 	b.w	801edf8 <_malloc_r>
 802083c:	b922      	cbnz	r2, 8020848 <_realloc_r+0x20>
 802083e:	f7fe fa8b 	bl	801ed58 <_free_r>
 8020842:	4625      	mov	r5, r4
 8020844:	4628      	mov	r0, r5
 8020846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020848:	f000 fd66 	bl	8021318 <_malloc_usable_size_r>
 802084c:	42a0      	cmp	r0, r4
 802084e:	d20f      	bcs.n	8020870 <_realloc_r+0x48>
 8020850:	4621      	mov	r1, r4
 8020852:	4638      	mov	r0, r7
 8020854:	f7fe fad0 	bl	801edf8 <_malloc_r>
 8020858:	4605      	mov	r5, r0
 802085a:	2800      	cmp	r0, #0
 802085c:	d0f2      	beq.n	8020844 <_realloc_r+0x1c>
 802085e:	4631      	mov	r1, r6
 8020860:	4622      	mov	r2, r4
 8020862:	f7fe fa53 	bl	801ed0c <memcpy>
 8020866:	4631      	mov	r1, r6
 8020868:	4638      	mov	r0, r7
 802086a:	f7fe fa75 	bl	801ed58 <_free_r>
 802086e:	e7e9      	b.n	8020844 <_realloc_r+0x1c>
 8020870:	4635      	mov	r5, r6
 8020872:	e7e7      	b.n	8020844 <_realloc_r+0x1c>

08020874 <__ssputs_r>:
 8020874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020878:	688e      	ldr	r6, [r1, #8]
 802087a:	429e      	cmp	r6, r3
 802087c:	4682      	mov	sl, r0
 802087e:	460c      	mov	r4, r1
 8020880:	4690      	mov	r8, r2
 8020882:	461f      	mov	r7, r3
 8020884:	d838      	bhi.n	80208f8 <__ssputs_r+0x84>
 8020886:	898a      	ldrh	r2, [r1, #12]
 8020888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802088c:	d032      	beq.n	80208f4 <__ssputs_r+0x80>
 802088e:	6825      	ldr	r5, [r4, #0]
 8020890:	6909      	ldr	r1, [r1, #16]
 8020892:	eba5 0901 	sub.w	r9, r5, r1
 8020896:	6965      	ldr	r5, [r4, #20]
 8020898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802089c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80208a0:	3301      	adds	r3, #1
 80208a2:	444b      	add	r3, r9
 80208a4:	106d      	asrs	r5, r5, #1
 80208a6:	429d      	cmp	r5, r3
 80208a8:	bf38      	it	cc
 80208aa:	461d      	movcc	r5, r3
 80208ac:	0553      	lsls	r3, r2, #21
 80208ae:	d531      	bpl.n	8020914 <__ssputs_r+0xa0>
 80208b0:	4629      	mov	r1, r5
 80208b2:	f7fe faa1 	bl	801edf8 <_malloc_r>
 80208b6:	4606      	mov	r6, r0
 80208b8:	b950      	cbnz	r0, 80208d0 <__ssputs_r+0x5c>
 80208ba:	230c      	movs	r3, #12
 80208bc:	f8ca 3000 	str.w	r3, [sl]
 80208c0:	89a3      	ldrh	r3, [r4, #12]
 80208c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80208c6:	81a3      	strh	r3, [r4, #12]
 80208c8:	f04f 30ff 	mov.w	r0, #4294967295
 80208cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80208d0:	6921      	ldr	r1, [r4, #16]
 80208d2:	464a      	mov	r2, r9
 80208d4:	f7fe fa1a 	bl	801ed0c <memcpy>
 80208d8:	89a3      	ldrh	r3, [r4, #12]
 80208da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80208de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80208e2:	81a3      	strh	r3, [r4, #12]
 80208e4:	6126      	str	r6, [r4, #16]
 80208e6:	6165      	str	r5, [r4, #20]
 80208e8:	444e      	add	r6, r9
 80208ea:	eba5 0509 	sub.w	r5, r5, r9
 80208ee:	6026      	str	r6, [r4, #0]
 80208f0:	60a5      	str	r5, [r4, #8]
 80208f2:	463e      	mov	r6, r7
 80208f4:	42be      	cmp	r6, r7
 80208f6:	d900      	bls.n	80208fa <__ssputs_r+0x86>
 80208f8:	463e      	mov	r6, r7
 80208fa:	4632      	mov	r2, r6
 80208fc:	6820      	ldr	r0, [r4, #0]
 80208fe:	4641      	mov	r1, r8
 8020900:	f000 fcf0 	bl	80212e4 <memmove>
 8020904:	68a3      	ldr	r3, [r4, #8]
 8020906:	6822      	ldr	r2, [r4, #0]
 8020908:	1b9b      	subs	r3, r3, r6
 802090a:	4432      	add	r2, r6
 802090c:	60a3      	str	r3, [r4, #8]
 802090e:	6022      	str	r2, [r4, #0]
 8020910:	2000      	movs	r0, #0
 8020912:	e7db      	b.n	80208cc <__ssputs_r+0x58>
 8020914:	462a      	mov	r2, r5
 8020916:	f7ff ff87 	bl	8020828 <_realloc_r>
 802091a:	4606      	mov	r6, r0
 802091c:	2800      	cmp	r0, #0
 802091e:	d1e1      	bne.n	80208e4 <__ssputs_r+0x70>
 8020920:	6921      	ldr	r1, [r4, #16]
 8020922:	4650      	mov	r0, sl
 8020924:	f7fe fa18 	bl	801ed58 <_free_r>
 8020928:	e7c7      	b.n	80208ba <__ssputs_r+0x46>
	...

0802092c <_svfiprintf_r>:
 802092c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020930:	4698      	mov	r8, r3
 8020932:	898b      	ldrh	r3, [r1, #12]
 8020934:	061b      	lsls	r3, r3, #24
 8020936:	b09d      	sub	sp, #116	; 0x74
 8020938:	4607      	mov	r7, r0
 802093a:	460d      	mov	r5, r1
 802093c:	4614      	mov	r4, r2
 802093e:	d50e      	bpl.n	802095e <_svfiprintf_r+0x32>
 8020940:	690b      	ldr	r3, [r1, #16]
 8020942:	b963      	cbnz	r3, 802095e <_svfiprintf_r+0x32>
 8020944:	2140      	movs	r1, #64	; 0x40
 8020946:	f7fe fa57 	bl	801edf8 <_malloc_r>
 802094a:	6028      	str	r0, [r5, #0]
 802094c:	6128      	str	r0, [r5, #16]
 802094e:	b920      	cbnz	r0, 802095a <_svfiprintf_r+0x2e>
 8020950:	230c      	movs	r3, #12
 8020952:	603b      	str	r3, [r7, #0]
 8020954:	f04f 30ff 	mov.w	r0, #4294967295
 8020958:	e0d1      	b.n	8020afe <_svfiprintf_r+0x1d2>
 802095a:	2340      	movs	r3, #64	; 0x40
 802095c:	616b      	str	r3, [r5, #20]
 802095e:	2300      	movs	r3, #0
 8020960:	9309      	str	r3, [sp, #36]	; 0x24
 8020962:	2320      	movs	r3, #32
 8020964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020968:	f8cd 800c 	str.w	r8, [sp, #12]
 802096c:	2330      	movs	r3, #48	; 0x30
 802096e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020b18 <_svfiprintf_r+0x1ec>
 8020972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020976:	f04f 0901 	mov.w	r9, #1
 802097a:	4623      	mov	r3, r4
 802097c:	469a      	mov	sl, r3
 802097e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020982:	b10a      	cbz	r2, 8020988 <_svfiprintf_r+0x5c>
 8020984:	2a25      	cmp	r2, #37	; 0x25
 8020986:	d1f9      	bne.n	802097c <_svfiprintf_r+0x50>
 8020988:	ebba 0b04 	subs.w	fp, sl, r4
 802098c:	d00b      	beq.n	80209a6 <_svfiprintf_r+0x7a>
 802098e:	465b      	mov	r3, fp
 8020990:	4622      	mov	r2, r4
 8020992:	4629      	mov	r1, r5
 8020994:	4638      	mov	r0, r7
 8020996:	f7ff ff6d 	bl	8020874 <__ssputs_r>
 802099a:	3001      	adds	r0, #1
 802099c:	f000 80aa 	beq.w	8020af4 <_svfiprintf_r+0x1c8>
 80209a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80209a2:	445a      	add	r2, fp
 80209a4:	9209      	str	r2, [sp, #36]	; 0x24
 80209a6:	f89a 3000 	ldrb.w	r3, [sl]
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	f000 80a2 	beq.w	8020af4 <_svfiprintf_r+0x1c8>
 80209b0:	2300      	movs	r3, #0
 80209b2:	f04f 32ff 	mov.w	r2, #4294967295
 80209b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80209ba:	f10a 0a01 	add.w	sl, sl, #1
 80209be:	9304      	str	r3, [sp, #16]
 80209c0:	9307      	str	r3, [sp, #28]
 80209c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80209c6:	931a      	str	r3, [sp, #104]	; 0x68
 80209c8:	4654      	mov	r4, sl
 80209ca:	2205      	movs	r2, #5
 80209cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80209d0:	4851      	ldr	r0, [pc, #324]	; (8020b18 <_svfiprintf_r+0x1ec>)
 80209d2:	f7df fc45 	bl	8000260 <memchr>
 80209d6:	9a04      	ldr	r2, [sp, #16]
 80209d8:	b9d8      	cbnz	r0, 8020a12 <_svfiprintf_r+0xe6>
 80209da:	06d0      	lsls	r0, r2, #27
 80209dc:	bf44      	itt	mi
 80209de:	2320      	movmi	r3, #32
 80209e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80209e4:	0711      	lsls	r1, r2, #28
 80209e6:	bf44      	itt	mi
 80209e8:	232b      	movmi	r3, #43	; 0x2b
 80209ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80209ee:	f89a 3000 	ldrb.w	r3, [sl]
 80209f2:	2b2a      	cmp	r3, #42	; 0x2a
 80209f4:	d015      	beq.n	8020a22 <_svfiprintf_r+0xf6>
 80209f6:	9a07      	ldr	r2, [sp, #28]
 80209f8:	4654      	mov	r4, sl
 80209fa:	2000      	movs	r0, #0
 80209fc:	f04f 0c0a 	mov.w	ip, #10
 8020a00:	4621      	mov	r1, r4
 8020a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020a06:	3b30      	subs	r3, #48	; 0x30
 8020a08:	2b09      	cmp	r3, #9
 8020a0a:	d94e      	bls.n	8020aaa <_svfiprintf_r+0x17e>
 8020a0c:	b1b0      	cbz	r0, 8020a3c <_svfiprintf_r+0x110>
 8020a0e:	9207      	str	r2, [sp, #28]
 8020a10:	e014      	b.n	8020a3c <_svfiprintf_r+0x110>
 8020a12:	eba0 0308 	sub.w	r3, r0, r8
 8020a16:	fa09 f303 	lsl.w	r3, r9, r3
 8020a1a:	4313      	orrs	r3, r2
 8020a1c:	9304      	str	r3, [sp, #16]
 8020a1e:	46a2      	mov	sl, r4
 8020a20:	e7d2      	b.n	80209c8 <_svfiprintf_r+0x9c>
 8020a22:	9b03      	ldr	r3, [sp, #12]
 8020a24:	1d19      	adds	r1, r3, #4
 8020a26:	681b      	ldr	r3, [r3, #0]
 8020a28:	9103      	str	r1, [sp, #12]
 8020a2a:	2b00      	cmp	r3, #0
 8020a2c:	bfbb      	ittet	lt
 8020a2e:	425b      	neglt	r3, r3
 8020a30:	f042 0202 	orrlt.w	r2, r2, #2
 8020a34:	9307      	strge	r3, [sp, #28]
 8020a36:	9307      	strlt	r3, [sp, #28]
 8020a38:	bfb8      	it	lt
 8020a3a:	9204      	strlt	r2, [sp, #16]
 8020a3c:	7823      	ldrb	r3, [r4, #0]
 8020a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8020a40:	d10c      	bne.n	8020a5c <_svfiprintf_r+0x130>
 8020a42:	7863      	ldrb	r3, [r4, #1]
 8020a44:	2b2a      	cmp	r3, #42	; 0x2a
 8020a46:	d135      	bne.n	8020ab4 <_svfiprintf_r+0x188>
 8020a48:	9b03      	ldr	r3, [sp, #12]
 8020a4a:	1d1a      	adds	r2, r3, #4
 8020a4c:	681b      	ldr	r3, [r3, #0]
 8020a4e:	9203      	str	r2, [sp, #12]
 8020a50:	2b00      	cmp	r3, #0
 8020a52:	bfb8      	it	lt
 8020a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8020a58:	3402      	adds	r4, #2
 8020a5a:	9305      	str	r3, [sp, #20]
 8020a5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020b28 <_svfiprintf_r+0x1fc>
 8020a60:	7821      	ldrb	r1, [r4, #0]
 8020a62:	2203      	movs	r2, #3
 8020a64:	4650      	mov	r0, sl
 8020a66:	f7df fbfb 	bl	8000260 <memchr>
 8020a6a:	b140      	cbz	r0, 8020a7e <_svfiprintf_r+0x152>
 8020a6c:	2340      	movs	r3, #64	; 0x40
 8020a6e:	eba0 000a 	sub.w	r0, r0, sl
 8020a72:	fa03 f000 	lsl.w	r0, r3, r0
 8020a76:	9b04      	ldr	r3, [sp, #16]
 8020a78:	4303      	orrs	r3, r0
 8020a7a:	3401      	adds	r4, #1
 8020a7c:	9304      	str	r3, [sp, #16]
 8020a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a82:	4826      	ldr	r0, [pc, #152]	; (8020b1c <_svfiprintf_r+0x1f0>)
 8020a84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020a88:	2206      	movs	r2, #6
 8020a8a:	f7df fbe9 	bl	8000260 <memchr>
 8020a8e:	2800      	cmp	r0, #0
 8020a90:	d038      	beq.n	8020b04 <_svfiprintf_r+0x1d8>
 8020a92:	4b23      	ldr	r3, [pc, #140]	; (8020b20 <_svfiprintf_r+0x1f4>)
 8020a94:	bb1b      	cbnz	r3, 8020ade <_svfiprintf_r+0x1b2>
 8020a96:	9b03      	ldr	r3, [sp, #12]
 8020a98:	3307      	adds	r3, #7
 8020a9a:	f023 0307 	bic.w	r3, r3, #7
 8020a9e:	3308      	adds	r3, #8
 8020aa0:	9303      	str	r3, [sp, #12]
 8020aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020aa4:	4433      	add	r3, r6
 8020aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8020aa8:	e767      	b.n	802097a <_svfiprintf_r+0x4e>
 8020aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8020aae:	460c      	mov	r4, r1
 8020ab0:	2001      	movs	r0, #1
 8020ab2:	e7a5      	b.n	8020a00 <_svfiprintf_r+0xd4>
 8020ab4:	2300      	movs	r3, #0
 8020ab6:	3401      	adds	r4, #1
 8020ab8:	9305      	str	r3, [sp, #20]
 8020aba:	4619      	mov	r1, r3
 8020abc:	f04f 0c0a 	mov.w	ip, #10
 8020ac0:	4620      	mov	r0, r4
 8020ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020ac6:	3a30      	subs	r2, #48	; 0x30
 8020ac8:	2a09      	cmp	r2, #9
 8020aca:	d903      	bls.n	8020ad4 <_svfiprintf_r+0x1a8>
 8020acc:	2b00      	cmp	r3, #0
 8020ace:	d0c5      	beq.n	8020a5c <_svfiprintf_r+0x130>
 8020ad0:	9105      	str	r1, [sp, #20]
 8020ad2:	e7c3      	b.n	8020a5c <_svfiprintf_r+0x130>
 8020ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8020ad8:	4604      	mov	r4, r0
 8020ada:	2301      	movs	r3, #1
 8020adc:	e7f0      	b.n	8020ac0 <_svfiprintf_r+0x194>
 8020ade:	ab03      	add	r3, sp, #12
 8020ae0:	9300      	str	r3, [sp, #0]
 8020ae2:	462a      	mov	r2, r5
 8020ae4:	4b0f      	ldr	r3, [pc, #60]	; (8020b24 <_svfiprintf_r+0x1f8>)
 8020ae6:	a904      	add	r1, sp, #16
 8020ae8:	4638      	mov	r0, r7
 8020aea:	f3af 8000 	nop.w
 8020aee:	1c42      	adds	r2, r0, #1
 8020af0:	4606      	mov	r6, r0
 8020af2:	d1d6      	bne.n	8020aa2 <_svfiprintf_r+0x176>
 8020af4:	89ab      	ldrh	r3, [r5, #12]
 8020af6:	065b      	lsls	r3, r3, #25
 8020af8:	f53f af2c 	bmi.w	8020954 <_svfiprintf_r+0x28>
 8020afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020afe:	b01d      	add	sp, #116	; 0x74
 8020b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b04:	ab03      	add	r3, sp, #12
 8020b06:	9300      	str	r3, [sp, #0]
 8020b08:	462a      	mov	r2, r5
 8020b0a:	4b06      	ldr	r3, [pc, #24]	; (8020b24 <_svfiprintf_r+0x1f8>)
 8020b0c:	a904      	add	r1, sp, #16
 8020b0e:	4638      	mov	r0, r7
 8020b10:	f000 f9d4 	bl	8020ebc <_printf_i>
 8020b14:	e7eb      	b.n	8020aee <_svfiprintf_r+0x1c2>
 8020b16:	bf00      	nop
 8020b18:	080276df 	.word	0x080276df
 8020b1c:	080276e9 	.word	0x080276e9
 8020b20:	00000000 	.word	0x00000000
 8020b24:	08020875 	.word	0x08020875
 8020b28:	080276e5 	.word	0x080276e5

08020b2c <__sfputc_r>:
 8020b2c:	6893      	ldr	r3, [r2, #8]
 8020b2e:	3b01      	subs	r3, #1
 8020b30:	2b00      	cmp	r3, #0
 8020b32:	b410      	push	{r4}
 8020b34:	6093      	str	r3, [r2, #8]
 8020b36:	da08      	bge.n	8020b4a <__sfputc_r+0x1e>
 8020b38:	6994      	ldr	r4, [r2, #24]
 8020b3a:	42a3      	cmp	r3, r4
 8020b3c:	db01      	blt.n	8020b42 <__sfputc_r+0x16>
 8020b3e:	290a      	cmp	r1, #10
 8020b40:	d103      	bne.n	8020b4a <__sfputc_r+0x1e>
 8020b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020b46:	f7ff bb75 	b.w	8020234 <__swbuf_r>
 8020b4a:	6813      	ldr	r3, [r2, #0]
 8020b4c:	1c58      	adds	r0, r3, #1
 8020b4e:	6010      	str	r0, [r2, #0]
 8020b50:	7019      	strb	r1, [r3, #0]
 8020b52:	4608      	mov	r0, r1
 8020b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020b58:	4770      	bx	lr

08020b5a <__sfputs_r>:
 8020b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b5c:	4606      	mov	r6, r0
 8020b5e:	460f      	mov	r7, r1
 8020b60:	4614      	mov	r4, r2
 8020b62:	18d5      	adds	r5, r2, r3
 8020b64:	42ac      	cmp	r4, r5
 8020b66:	d101      	bne.n	8020b6c <__sfputs_r+0x12>
 8020b68:	2000      	movs	r0, #0
 8020b6a:	e007      	b.n	8020b7c <__sfputs_r+0x22>
 8020b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b70:	463a      	mov	r2, r7
 8020b72:	4630      	mov	r0, r6
 8020b74:	f7ff ffda 	bl	8020b2c <__sfputc_r>
 8020b78:	1c43      	adds	r3, r0, #1
 8020b7a:	d1f3      	bne.n	8020b64 <__sfputs_r+0xa>
 8020b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020b80 <_vfiprintf_r>:
 8020b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b84:	460d      	mov	r5, r1
 8020b86:	b09d      	sub	sp, #116	; 0x74
 8020b88:	4614      	mov	r4, r2
 8020b8a:	4698      	mov	r8, r3
 8020b8c:	4606      	mov	r6, r0
 8020b8e:	b118      	cbz	r0, 8020b98 <_vfiprintf_r+0x18>
 8020b90:	6983      	ldr	r3, [r0, #24]
 8020b92:	b90b      	cbnz	r3, 8020b98 <_vfiprintf_r+0x18>
 8020b94:	f7fd fc90 	bl	801e4b8 <__sinit>
 8020b98:	4b89      	ldr	r3, [pc, #548]	; (8020dc0 <_vfiprintf_r+0x240>)
 8020b9a:	429d      	cmp	r5, r3
 8020b9c:	d11b      	bne.n	8020bd6 <_vfiprintf_r+0x56>
 8020b9e:	6875      	ldr	r5, [r6, #4]
 8020ba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020ba2:	07d9      	lsls	r1, r3, #31
 8020ba4:	d405      	bmi.n	8020bb2 <_vfiprintf_r+0x32>
 8020ba6:	89ab      	ldrh	r3, [r5, #12]
 8020ba8:	059a      	lsls	r2, r3, #22
 8020baa:	d402      	bmi.n	8020bb2 <_vfiprintf_r+0x32>
 8020bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020bae:	f7fe f836 	bl	801ec1e <__retarget_lock_acquire_recursive>
 8020bb2:	89ab      	ldrh	r3, [r5, #12]
 8020bb4:	071b      	lsls	r3, r3, #28
 8020bb6:	d501      	bpl.n	8020bbc <_vfiprintf_r+0x3c>
 8020bb8:	692b      	ldr	r3, [r5, #16]
 8020bba:	b9eb      	cbnz	r3, 8020bf8 <_vfiprintf_r+0x78>
 8020bbc:	4629      	mov	r1, r5
 8020bbe:	4630      	mov	r0, r6
 8020bc0:	f7ff fb9c 	bl	80202fc <__swsetup_r>
 8020bc4:	b1c0      	cbz	r0, 8020bf8 <_vfiprintf_r+0x78>
 8020bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020bc8:	07dc      	lsls	r4, r3, #31
 8020bca:	d50e      	bpl.n	8020bea <_vfiprintf_r+0x6a>
 8020bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8020bd0:	b01d      	add	sp, #116	; 0x74
 8020bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bd6:	4b7b      	ldr	r3, [pc, #492]	; (8020dc4 <_vfiprintf_r+0x244>)
 8020bd8:	429d      	cmp	r5, r3
 8020bda:	d101      	bne.n	8020be0 <_vfiprintf_r+0x60>
 8020bdc:	68b5      	ldr	r5, [r6, #8]
 8020bde:	e7df      	b.n	8020ba0 <_vfiprintf_r+0x20>
 8020be0:	4b79      	ldr	r3, [pc, #484]	; (8020dc8 <_vfiprintf_r+0x248>)
 8020be2:	429d      	cmp	r5, r3
 8020be4:	bf08      	it	eq
 8020be6:	68f5      	ldreq	r5, [r6, #12]
 8020be8:	e7da      	b.n	8020ba0 <_vfiprintf_r+0x20>
 8020bea:	89ab      	ldrh	r3, [r5, #12]
 8020bec:	0598      	lsls	r0, r3, #22
 8020bee:	d4ed      	bmi.n	8020bcc <_vfiprintf_r+0x4c>
 8020bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020bf2:	f7fe f816 	bl	801ec22 <__retarget_lock_release_recursive>
 8020bf6:	e7e9      	b.n	8020bcc <_vfiprintf_r+0x4c>
 8020bf8:	2300      	movs	r3, #0
 8020bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8020bfc:	2320      	movs	r3, #32
 8020bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8020c06:	2330      	movs	r3, #48	; 0x30
 8020c08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020dcc <_vfiprintf_r+0x24c>
 8020c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020c10:	f04f 0901 	mov.w	r9, #1
 8020c14:	4623      	mov	r3, r4
 8020c16:	469a      	mov	sl, r3
 8020c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020c1c:	b10a      	cbz	r2, 8020c22 <_vfiprintf_r+0xa2>
 8020c1e:	2a25      	cmp	r2, #37	; 0x25
 8020c20:	d1f9      	bne.n	8020c16 <_vfiprintf_r+0x96>
 8020c22:	ebba 0b04 	subs.w	fp, sl, r4
 8020c26:	d00b      	beq.n	8020c40 <_vfiprintf_r+0xc0>
 8020c28:	465b      	mov	r3, fp
 8020c2a:	4622      	mov	r2, r4
 8020c2c:	4629      	mov	r1, r5
 8020c2e:	4630      	mov	r0, r6
 8020c30:	f7ff ff93 	bl	8020b5a <__sfputs_r>
 8020c34:	3001      	adds	r0, #1
 8020c36:	f000 80aa 	beq.w	8020d8e <_vfiprintf_r+0x20e>
 8020c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c3c:	445a      	add	r2, fp
 8020c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8020c40:	f89a 3000 	ldrb.w	r3, [sl]
 8020c44:	2b00      	cmp	r3, #0
 8020c46:	f000 80a2 	beq.w	8020d8e <_vfiprintf_r+0x20e>
 8020c4a:	2300      	movs	r3, #0
 8020c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8020c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020c54:	f10a 0a01 	add.w	sl, sl, #1
 8020c58:	9304      	str	r3, [sp, #16]
 8020c5a:	9307      	str	r3, [sp, #28]
 8020c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020c60:	931a      	str	r3, [sp, #104]	; 0x68
 8020c62:	4654      	mov	r4, sl
 8020c64:	2205      	movs	r2, #5
 8020c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c6a:	4858      	ldr	r0, [pc, #352]	; (8020dcc <_vfiprintf_r+0x24c>)
 8020c6c:	f7df faf8 	bl	8000260 <memchr>
 8020c70:	9a04      	ldr	r2, [sp, #16]
 8020c72:	b9d8      	cbnz	r0, 8020cac <_vfiprintf_r+0x12c>
 8020c74:	06d1      	lsls	r1, r2, #27
 8020c76:	bf44      	itt	mi
 8020c78:	2320      	movmi	r3, #32
 8020c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020c7e:	0713      	lsls	r3, r2, #28
 8020c80:	bf44      	itt	mi
 8020c82:	232b      	movmi	r3, #43	; 0x2b
 8020c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020c88:	f89a 3000 	ldrb.w	r3, [sl]
 8020c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8020c8e:	d015      	beq.n	8020cbc <_vfiprintf_r+0x13c>
 8020c90:	9a07      	ldr	r2, [sp, #28]
 8020c92:	4654      	mov	r4, sl
 8020c94:	2000      	movs	r0, #0
 8020c96:	f04f 0c0a 	mov.w	ip, #10
 8020c9a:	4621      	mov	r1, r4
 8020c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020ca0:	3b30      	subs	r3, #48	; 0x30
 8020ca2:	2b09      	cmp	r3, #9
 8020ca4:	d94e      	bls.n	8020d44 <_vfiprintf_r+0x1c4>
 8020ca6:	b1b0      	cbz	r0, 8020cd6 <_vfiprintf_r+0x156>
 8020ca8:	9207      	str	r2, [sp, #28]
 8020caa:	e014      	b.n	8020cd6 <_vfiprintf_r+0x156>
 8020cac:	eba0 0308 	sub.w	r3, r0, r8
 8020cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8020cb4:	4313      	orrs	r3, r2
 8020cb6:	9304      	str	r3, [sp, #16]
 8020cb8:	46a2      	mov	sl, r4
 8020cba:	e7d2      	b.n	8020c62 <_vfiprintf_r+0xe2>
 8020cbc:	9b03      	ldr	r3, [sp, #12]
 8020cbe:	1d19      	adds	r1, r3, #4
 8020cc0:	681b      	ldr	r3, [r3, #0]
 8020cc2:	9103      	str	r1, [sp, #12]
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	bfbb      	ittet	lt
 8020cc8:	425b      	neglt	r3, r3
 8020cca:	f042 0202 	orrlt.w	r2, r2, #2
 8020cce:	9307      	strge	r3, [sp, #28]
 8020cd0:	9307      	strlt	r3, [sp, #28]
 8020cd2:	bfb8      	it	lt
 8020cd4:	9204      	strlt	r2, [sp, #16]
 8020cd6:	7823      	ldrb	r3, [r4, #0]
 8020cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8020cda:	d10c      	bne.n	8020cf6 <_vfiprintf_r+0x176>
 8020cdc:	7863      	ldrb	r3, [r4, #1]
 8020cde:	2b2a      	cmp	r3, #42	; 0x2a
 8020ce0:	d135      	bne.n	8020d4e <_vfiprintf_r+0x1ce>
 8020ce2:	9b03      	ldr	r3, [sp, #12]
 8020ce4:	1d1a      	adds	r2, r3, #4
 8020ce6:	681b      	ldr	r3, [r3, #0]
 8020ce8:	9203      	str	r2, [sp, #12]
 8020cea:	2b00      	cmp	r3, #0
 8020cec:	bfb8      	it	lt
 8020cee:	f04f 33ff 	movlt.w	r3, #4294967295
 8020cf2:	3402      	adds	r4, #2
 8020cf4:	9305      	str	r3, [sp, #20]
 8020cf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020ddc <_vfiprintf_r+0x25c>
 8020cfa:	7821      	ldrb	r1, [r4, #0]
 8020cfc:	2203      	movs	r2, #3
 8020cfe:	4650      	mov	r0, sl
 8020d00:	f7df faae 	bl	8000260 <memchr>
 8020d04:	b140      	cbz	r0, 8020d18 <_vfiprintf_r+0x198>
 8020d06:	2340      	movs	r3, #64	; 0x40
 8020d08:	eba0 000a 	sub.w	r0, r0, sl
 8020d0c:	fa03 f000 	lsl.w	r0, r3, r0
 8020d10:	9b04      	ldr	r3, [sp, #16]
 8020d12:	4303      	orrs	r3, r0
 8020d14:	3401      	adds	r4, #1
 8020d16:	9304      	str	r3, [sp, #16]
 8020d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d1c:	482c      	ldr	r0, [pc, #176]	; (8020dd0 <_vfiprintf_r+0x250>)
 8020d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020d22:	2206      	movs	r2, #6
 8020d24:	f7df fa9c 	bl	8000260 <memchr>
 8020d28:	2800      	cmp	r0, #0
 8020d2a:	d03f      	beq.n	8020dac <_vfiprintf_r+0x22c>
 8020d2c:	4b29      	ldr	r3, [pc, #164]	; (8020dd4 <_vfiprintf_r+0x254>)
 8020d2e:	bb1b      	cbnz	r3, 8020d78 <_vfiprintf_r+0x1f8>
 8020d30:	9b03      	ldr	r3, [sp, #12]
 8020d32:	3307      	adds	r3, #7
 8020d34:	f023 0307 	bic.w	r3, r3, #7
 8020d38:	3308      	adds	r3, #8
 8020d3a:	9303      	str	r3, [sp, #12]
 8020d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d3e:	443b      	add	r3, r7
 8020d40:	9309      	str	r3, [sp, #36]	; 0x24
 8020d42:	e767      	b.n	8020c14 <_vfiprintf_r+0x94>
 8020d44:	fb0c 3202 	mla	r2, ip, r2, r3
 8020d48:	460c      	mov	r4, r1
 8020d4a:	2001      	movs	r0, #1
 8020d4c:	e7a5      	b.n	8020c9a <_vfiprintf_r+0x11a>
 8020d4e:	2300      	movs	r3, #0
 8020d50:	3401      	adds	r4, #1
 8020d52:	9305      	str	r3, [sp, #20]
 8020d54:	4619      	mov	r1, r3
 8020d56:	f04f 0c0a 	mov.w	ip, #10
 8020d5a:	4620      	mov	r0, r4
 8020d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020d60:	3a30      	subs	r2, #48	; 0x30
 8020d62:	2a09      	cmp	r2, #9
 8020d64:	d903      	bls.n	8020d6e <_vfiprintf_r+0x1ee>
 8020d66:	2b00      	cmp	r3, #0
 8020d68:	d0c5      	beq.n	8020cf6 <_vfiprintf_r+0x176>
 8020d6a:	9105      	str	r1, [sp, #20]
 8020d6c:	e7c3      	b.n	8020cf6 <_vfiprintf_r+0x176>
 8020d6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8020d72:	4604      	mov	r4, r0
 8020d74:	2301      	movs	r3, #1
 8020d76:	e7f0      	b.n	8020d5a <_vfiprintf_r+0x1da>
 8020d78:	ab03      	add	r3, sp, #12
 8020d7a:	9300      	str	r3, [sp, #0]
 8020d7c:	462a      	mov	r2, r5
 8020d7e:	4b16      	ldr	r3, [pc, #88]	; (8020dd8 <_vfiprintf_r+0x258>)
 8020d80:	a904      	add	r1, sp, #16
 8020d82:	4630      	mov	r0, r6
 8020d84:	f3af 8000 	nop.w
 8020d88:	4607      	mov	r7, r0
 8020d8a:	1c78      	adds	r0, r7, #1
 8020d8c:	d1d6      	bne.n	8020d3c <_vfiprintf_r+0x1bc>
 8020d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020d90:	07d9      	lsls	r1, r3, #31
 8020d92:	d405      	bmi.n	8020da0 <_vfiprintf_r+0x220>
 8020d94:	89ab      	ldrh	r3, [r5, #12]
 8020d96:	059a      	lsls	r2, r3, #22
 8020d98:	d402      	bmi.n	8020da0 <_vfiprintf_r+0x220>
 8020d9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020d9c:	f7fd ff41 	bl	801ec22 <__retarget_lock_release_recursive>
 8020da0:	89ab      	ldrh	r3, [r5, #12]
 8020da2:	065b      	lsls	r3, r3, #25
 8020da4:	f53f af12 	bmi.w	8020bcc <_vfiprintf_r+0x4c>
 8020da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020daa:	e711      	b.n	8020bd0 <_vfiprintf_r+0x50>
 8020dac:	ab03      	add	r3, sp, #12
 8020dae:	9300      	str	r3, [sp, #0]
 8020db0:	462a      	mov	r2, r5
 8020db2:	4b09      	ldr	r3, [pc, #36]	; (8020dd8 <_vfiprintf_r+0x258>)
 8020db4:	a904      	add	r1, sp, #16
 8020db6:	4630      	mov	r0, r6
 8020db8:	f000 f880 	bl	8020ebc <_printf_i>
 8020dbc:	e7e4      	b.n	8020d88 <_vfiprintf_r+0x208>
 8020dbe:	bf00      	nop
 8020dc0:	08027160 	.word	0x08027160
 8020dc4:	08027180 	.word	0x08027180
 8020dc8:	08027140 	.word	0x08027140
 8020dcc:	080276df 	.word	0x080276df
 8020dd0:	080276e9 	.word	0x080276e9
 8020dd4:	00000000 	.word	0x00000000
 8020dd8:	08020b5b 	.word	0x08020b5b
 8020ddc:	080276e5 	.word	0x080276e5

08020de0 <_printf_common>:
 8020de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020de4:	4616      	mov	r6, r2
 8020de6:	4699      	mov	r9, r3
 8020de8:	688a      	ldr	r2, [r1, #8]
 8020dea:	690b      	ldr	r3, [r1, #16]
 8020dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020df0:	4293      	cmp	r3, r2
 8020df2:	bfb8      	it	lt
 8020df4:	4613      	movlt	r3, r2
 8020df6:	6033      	str	r3, [r6, #0]
 8020df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020dfc:	4607      	mov	r7, r0
 8020dfe:	460c      	mov	r4, r1
 8020e00:	b10a      	cbz	r2, 8020e06 <_printf_common+0x26>
 8020e02:	3301      	adds	r3, #1
 8020e04:	6033      	str	r3, [r6, #0]
 8020e06:	6823      	ldr	r3, [r4, #0]
 8020e08:	0699      	lsls	r1, r3, #26
 8020e0a:	bf42      	ittt	mi
 8020e0c:	6833      	ldrmi	r3, [r6, #0]
 8020e0e:	3302      	addmi	r3, #2
 8020e10:	6033      	strmi	r3, [r6, #0]
 8020e12:	6825      	ldr	r5, [r4, #0]
 8020e14:	f015 0506 	ands.w	r5, r5, #6
 8020e18:	d106      	bne.n	8020e28 <_printf_common+0x48>
 8020e1a:	f104 0a19 	add.w	sl, r4, #25
 8020e1e:	68e3      	ldr	r3, [r4, #12]
 8020e20:	6832      	ldr	r2, [r6, #0]
 8020e22:	1a9b      	subs	r3, r3, r2
 8020e24:	42ab      	cmp	r3, r5
 8020e26:	dc26      	bgt.n	8020e76 <_printf_common+0x96>
 8020e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020e2c:	1e13      	subs	r3, r2, #0
 8020e2e:	6822      	ldr	r2, [r4, #0]
 8020e30:	bf18      	it	ne
 8020e32:	2301      	movne	r3, #1
 8020e34:	0692      	lsls	r2, r2, #26
 8020e36:	d42b      	bmi.n	8020e90 <_printf_common+0xb0>
 8020e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020e3c:	4649      	mov	r1, r9
 8020e3e:	4638      	mov	r0, r7
 8020e40:	47c0      	blx	r8
 8020e42:	3001      	adds	r0, #1
 8020e44:	d01e      	beq.n	8020e84 <_printf_common+0xa4>
 8020e46:	6823      	ldr	r3, [r4, #0]
 8020e48:	68e5      	ldr	r5, [r4, #12]
 8020e4a:	6832      	ldr	r2, [r6, #0]
 8020e4c:	f003 0306 	and.w	r3, r3, #6
 8020e50:	2b04      	cmp	r3, #4
 8020e52:	bf08      	it	eq
 8020e54:	1aad      	subeq	r5, r5, r2
 8020e56:	68a3      	ldr	r3, [r4, #8]
 8020e58:	6922      	ldr	r2, [r4, #16]
 8020e5a:	bf0c      	ite	eq
 8020e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020e60:	2500      	movne	r5, #0
 8020e62:	4293      	cmp	r3, r2
 8020e64:	bfc4      	itt	gt
 8020e66:	1a9b      	subgt	r3, r3, r2
 8020e68:	18ed      	addgt	r5, r5, r3
 8020e6a:	2600      	movs	r6, #0
 8020e6c:	341a      	adds	r4, #26
 8020e6e:	42b5      	cmp	r5, r6
 8020e70:	d11a      	bne.n	8020ea8 <_printf_common+0xc8>
 8020e72:	2000      	movs	r0, #0
 8020e74:	e008      	b.n	8020e88 <_printf_common+0xa8>
 8020e76:	2301      	movs	r3, #1
 8020e78:	4652      	mov	r2, sl
 8020e7a:	4649      	mov	r1, r9
 8020e7c:	4638      	mov	r0, r7
 8020e7e:	47c0      	blx	r8
 8020e80:	3001      	adds	r0, #1
 8020e82:	d103      	bne.n	8020e8c <_printf_common+0xac>
 8020e84:	f04f 30ff 	mov.w	r0, #4294967295
 8020e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e8c:	3501      	adds	r5, #1
 8020e8e:	e7c6      	b.n	8020e1e <_printf_common+0x3e>
 8020e90:	18e1      	adds	r1, r4, r3
 8020e92:	1c5a      	adds	r2, r3, #1
 8020e94:	2030      	movs	r0, #48	; 0x30
 8020e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020e9a:	4422      	add	r2, r4
 8020e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020ea4:	3302      	adds	r3, #2
 8020ea6:	e7c7      	b.n	8020e38 <_printf_common+0x58>
 8020ea8:	2301      	movs	r3, #1
 8020eaa:	4622      	mov	r2, r4
 8020eac:	4649      	mov	r1, r9
 8020eae:	4638      	mov	r0, r7
 8020eb0:	47c0      	blx	r8
 8020eb2:	3001      	adds	r0, #1
 8020eb4:	d0e6      	beq.n	8020e84 <_printf_common+0xa4>
 8020eb6:	3601      	adds	r6, #1
 8020eb8:	e7d9      	b.n	8020e6e <_printf_common+0x8e>
	...

08020ebc <_printf_i>:
 8020ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020ec0:	460c      	mov	r4, r1
 8020ec2:	4691      	mov	r9, r2
 8020ec4:	7e27      	ldrb	r7, [r4, #24]
 8020ec6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020ec8:	2f78      	cmp	r7, #120	; 0x78
 8020eca:	4680      	mov	r8, r0
 8020ecc:	469a      	mov	sl, r3
 8020ece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020ed2:	d807      	bhi.n	8020ee4 <_printf_i+0x28>
 8020ed4:	2f62      	cmp	r7, #98	; 0x62
 8020ed6:	d80a      	bhi.n	8020eee <_printf_i+0x32>
 8020ed8:	2f00      	cmp	r7, #0
 8020eda:	f000 80d8 	beq.w	802108e <_printf_i+0x1d2>
 8020ede:	2f58      	cmp	r7, #88	; 0x58
 8020ee0:	f000 80a3 	beq.w	802102a <_printf_i+0x16e>
 8020ee4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020eec:	e03a      	b.n	8020f64 <_printf_i+0xa8>
 8020eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020ef2:	2b15      	cmp	r3, #21
 8020ef4:	d8f6      	bhi.n	8020ee4 <_printf_i+0x28>
 8020ef6:	a001      	add	r0, pc, #4	; (adr r0, 8020efc <_printf_i+0x40>)
 8020ef8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8020efc:	08020f55 	.word	0x08020f55
 8020f00:	08020f69 	.word	0x08020f69
 8020f04:	08020ee5 	.word	0x08020ee5
 8020f08:	08020ee5 	.word	0x08020ee5
 8020f0c:	08020ee5 	.word	0x08020ee5
 8020f10:	08020ee5 	.word	0x08020ee5
 8020f14:	08020f69 	.word	0x08020f69
 8020f18:	08020ee5 	.word	0x08020ee5
 8020f1c:	08020ee5 	.word	0x08020ee5
 8020f20:	08020ee5 	.word	0x08020ee5
 8020f24:	08020ee5 	.word	0x08020ee5
 8020f28:	08021075 	.word	0x08021075
 8020f2c:	08020f99 	.word	0x08020f99
 8020f30:	08021057 	.word	0x08021057
 8020f34:	08020ee5 	.word	0x08020ee5
 8020f38:	08020ee5 	.word	0x08020ee5
 8020f3c:	08021097 	.word	0x08021097
 8020f40:	08020ee5 	.word	0x08020ee5
 8020f44:	08020f99 	.word	0x08020f99
 8020f48:	08020ee5 	.word	0x08020ee5
 8020f4c:	08020ee5 	.word	0x08020ee5
 8020f50:	0802105f 	.word	0x0802105f
 8020f54:	680b      	ldr	r3, [r1, #0]
 8020f56:	1d1a      	adds	r2, r3, #4
 8020f58:	681b      	ldr	r3, [r3, #0]
 8020f5a:	600a      	str	r2, [r1, #0]
 8020f5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020f64:	2301      	movs	r3, #1
 8020f66:	e0a3      	b.n	80210b0 <_printf_i+0x1f4>
 8020f68:	6825      	ldr	r5, [r4, #0]
 8020f6a:	6808      	ldr	r0, [r1, #0]
 8020f6c:	062e      	lsls	r6, r5, #24
 8020f6e:	f100 0304 	add.w	r3, r0, #4
 8020f72:	d50a      	bpl.n	8020f8a <_printf_i+0xce>
 8020f74:	6805      	ldr	r5, [r0, #0]
 8020f76:	600b      	str	r3, [r1, #0]
 8020f78:	2d00      	cmp	r5, #0
 8020f7a:	da03      	bge.n	8020f84 <_printf_i+0xc8>
 8020f7c:	232d      	movs	r3, #45	; 0x2d
 8020f7e:	426d      	negs	r5, r5
 8020f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020f84:	485e      	ldr	r0, [pc, #376]	; (8021100 <_printf_i+0x244>)
 8020f86:	230a      	movs	r3, #10
 8020f88:	e019      	b.n	8020fbe <_printf_i+0x102>
 8020f8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020f8e:	6805      	ldr	r5, [r0, #0]
 8020f90:	600b      	str	r3, [r1, #0]
 8020f92:	bf18      	it	ne
 8020f94:	b22d      	sxthne	r5, r5
 8020f96:	e7ef      	b.n	8020f78 <_printf_i+0xbc>
 8020f98:	680b      	ldr	r3, [r1, #0]
 8020f9a:	6825      	ldr	r5, [r4, #0]
 8020f9c:	1d18      	adds	r0, r3, #4
 8020f9e:	6008      	str	r0, [r1, #0]
 8020fa0:	0628      	lsls	r0, r5, #24
 8020fa2:	d501      	bpl.n	8020fa8 <_printf_i+0xec>
 8020fa4:	681d      	ldr	r5, [r3, #0]
 8020fa6:	e002      	b.n	8020fae <_printf_i+0xf2>
 8020fa8:	0669      	lsls	r1, r5, #25
 8020faa:	d5fb      	bpl.n	8020fa4 <_printf_i+0xe8>
 8020fac:	881d      	ldrh	r5, [r3, #0]
 8020fae:	4854      	ldr	r0, [pc, #336]	; (8021100 <_printf_i+0x244>)
 8020fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8020fb2:	bf0c      	ite	eq
 8020fb4:	2308      	moveq	r3, #8
 8020fb6:	230a      	movne	r3, #10
 8020fb8:	2100      	movs	r1, #0
 8020fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020fbe:	6866      	ldr	r6, [r4, #4]
 8020fc0:	60a6      	str	r6, [r4, #8]
 8020fc2:	2e00      	cmp	r6, #0
 8020fc4:	bfa2      	ittt	ge
 8020fc6:	6821      	ldrge	r1, [r4, #0]
 8020fc8:	f021 0104 	bicge.w	r1, r1, #4
 8020fcc:	6021      	strge	r1, [r4, #0]
 8020fce:	b90d      	cbnz	r5, 8020fd4 <_printf_i+0x118>
 8020fd0:	2e00      	cmp	r6, #0
 8020fd2:	d04d      	beq.n	8021070 <_printf_i+0x1b4>
 8020fd4:	4616      	mov	r6, r2
 8020fd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8020fda:	fb03 5711 	mls	r7, r3, r1, r5
 8020fde:	5dc7      	ldrb	r7, [r0, r7]
 8020fe0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020fe4:	462f      	mov	r7, r5
 8020fe6:	42bb      	cmp	r3, r7
 8020fe8:	460d      	mov	r5, r1
 8020fea:	d9f4      	bls.n	8020fd6 <_printf_i+0x11a>
 8020fec:	2b08      	cmp	r3, #8
 8020fee:	d10b      	bne.n	8021008 <_printf_i+0x14c>
 8020ff0:	6823      	ldr	r3, [r4, #0]
 8020ff2:	07df      	lsls	r7, r3, #31
 8020ff4:	d508      	bpl.n	8021008 <_printf_i+0x14c>
 8020ff6:	6923      	ldr	r3, [r4, #16]
 8020ff8:	6861      	ldr	r1, [r4, #4]
 8020ffa:	4299      	cmp	r1, r3
 8020ffc:	bfde      	ittt	le
 8020ffe:	2330      	movle	r3, #48	; 0x30
 8021000:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021004:	f106 36ff 	addle.w	r6, r6, #4294967295
 8021008:	1b92      	subs	r2, r2, r6
 802100a:	6122      	str	r2, [r4, #16]
 802100c:	f8cd a000 	str.w	sl, [sp]
 8021010:	464b      	mov	r3, r9
 8021012:	aa03      	add	r2, sp, #12
 8021014:	4621      	mov	r1, r4
 8021016:	4640      	mov	r0, r8
 8021018:	f7ff fee2 	bl	8020de0 <_printf_common>
 802101c:	3001      	adds	r0, #1
 802101e:	d14c      	bne.n	80210ba <_printf_i+0x1fe>
 8021020:	f04f 30ff 	mov.w	r0, #4294967295
 8021024:	b004      	add	sp, #16
 8021026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802102a:	4835      	ldr	r0, [pc, #212]	; (8021100 <_printf_i+0x244>)
 802102c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8021030:	6823      	ldr	r3, [r4, #0]
 8021032:	680e      	ldr	r6, [r1, #0]
 8021034:	061f      	lsls	r7, r3, #24
 8021036:	f856 5b04 	ldr.w	r5, [r6], #4
 802103a:	600e      	str	r6, [r1, #0]
 802103c:	d514      	bpl.n	8021068 <_printf_i+0x1ac>
 802103e:	07d9      	lsls	r1, r3, #31
 8021040:	bf44      	itt	mi
 8021042:	f043 0320 	orrmi.w	r3, r3, #32
 8021046:	6023      	strmi	r3, [r4, #0]
 8021048:	b91d      	cbnz	r5, 8021052 <_printf_i+0x196>
 802104a:	6823      	ldr	r3, [r4, #0]
 802104c:	f023 0320 	bic.w	r3, r3, #32
 8021050:	6023      	str	r3, [r4, #0]
 8021052:	2310      	movs	r3, #16
 8021054:	e7b0      	b.n	8020fb8 <_printf_i+0xfc>
 8021056:	6823      	ldr	r3, [r4, #0]
 8021058:	f043 0320 	orr.w	r3, r3, #32
 802105c:	6023      	str	r3, [r4, #0]
 802105e:	2378      	movs	r3, #120	; 0x78
 8021060:	4828      	ldr	r0, [pc, #160]	; (8021104 <_printf_i+0x248>)
 8021062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021066:	e7e3      	b.n	8021030 <_printf_i+0x174>
 8021068:	065e      	lsls	r6, r3, #25
 802106a:	bf48      	it	mi
 802106c:	b2ad      	uxthmi	r5, r5
 802106e:	e7e6      	b.n	802103e <_printf_i+0x182>
 8021070:	4616      	mov	r6, r2
 8021072:	e7bb      	b.n	8020fec <_printf_i+0x130>
 8021074:	680b      	ldr	r3, [r1, #0]
 8021076:	6826      	ldr	r6, [r4, #0]
 8021078:	6960      	ldr	r0, [r4, #20]
 802107a:	1d1d      	adds	r5, r3, #4
 802107c:	600d      	str	r5, [r1, #0]
 802107e:	0635      	lsls	r5, r6, #24
 8021080:	681b      	ldr	r3, [r3, #0]
 8021082:	d501      	bpl.n	8021088 <_printf_i+0x1cc>
 8021084:	6018      	str	r0, [r3, #0]
 8021086:	e002      	b.n	802108e <_printf_i+0x1d2>
 8021088:	0671      	lsls	r1, r6, #25
 802108a:	d5fb      	bpl.n	8021084 <_printf_i+0x1c8>
 802108c:	8018      	strh	r0, [r3, #0]
 802108e:	2300      	movs	r3, #0
 8021090:	6123      	str	r3, [r4, #16]
 8021092:	4616      	mov	r6, r2
 8021094:	e7ba      	b.n	802100c <_printf_i+0x150>
 8021096:	680b      	ldr	r3, [r1, #0]
 8021098:	1d1a      	adds	r2, r3, #4
 802109a:	600a      	str	r2, [r1, #0]
 802109c:	681e      	ldr	r6, [r3, #0]
 802109e:	6862      	ldr	r2, [r4, #4]
 80210a0:	2100      	movs	r1, #0
 80210a2:	4630      	mov	r0, r6
 80210a4:	f7df f8dc 	bl	8000260 <memchr>
 80210a8:	b108      	cbz	r0, 80210ae <_printf_i+0x1f2>
 80210aa:	1b80      	subs	r0, r0, r6
 80210ac:	6060      	str	r0, [r4, #4]
 80210ae:	6863      	ldr	r3, [r4, #4]
 80210b0:	6123      	str	r3, [r4, #16]
 80210b2:	2300      	movs	r3, #0
 80210b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80210b8:	e7a8      	b.n	802100c <_printf_i+0x150>
 80210ba:	6923      	ldr	r3, [r4, #16]
 80210bc:	4632      	mov	r2, r6
 80210be:	4649      	mov	r1, r9
 80210c0:	4640      	mov	r0, r8
 80210c2:	47d0      	blx	sl
 80210c4:	3001      	adds	r0, #1
 80210c6:	d0ab      	beq.n	8021020 <_printf_i+0x164>
 80210c8:	6823      	ldr	r3, [r4, #0]
 80210ca:	079b      	lsls	r3, r3, #30
 80210cc:	d413      	bmi.n	80210f6 <_printf_i+0x23a>
 80210ce:	68e0      	ldr	r0, [r4, #12]
 80210d0:	9b03      	ldr	r3, [sp, #12]
 80210d2:	4298      	cmp	r0, r3
 80210d4:	bfb8      	it	lt
 80210d6:	4618      	movlt	r0, r3
 80210d8:	e7a4      	b.n	8021024 <_printf_i+0x168>
 80210da:	2301      	movs	r3, #1
 80210dc:	4632      	mov	r2, r6
 80210de:	4649      	mov	r1, r9
 80210e0:	4640      	mov	r0, r8
 80210e2:	47d0      	blx	sl
 80210e4:	3001      	adds	r0, #1
 80210e6:	d09b      	beq.n	8021020 <_printf_i+0x164>
 80210e8:	3501      	adds	r5, #1
 80210ea:	68e3      	ldr	r3, [r4, #12]
 80210ec:	9903      	ldr	r1, [sp, #12]
 80210ee:	1a5b      	subs	r3, r3, r1
 80210f0:	42ab      	cmp	r3, r5
 80210f2:	dcf2      	bgt.n	80210da <_printf_i+0x21e>
 80210f4:	e7eb      	b.n	80210ce <_printf_i+0x212>
 80210f6:	2500      	movs	r5, #0
 80210f8:	f104 0619 	add.w	r6, r4, #25
 80210fc:	e7f5      	b.n	80210ea <_printf_i+0x22e>
 80210fe:	bf00      	nop
 8021100:	080276f0 	.word	0x080276f0
 8021104:	08027701 	.word	0x08027701

08021108 <_putc_r>:
 8021108:	b570      	push	{r4, r5, r6, lr}
 802110a:	460d      	mov	r5, r1
 802110c:	4614      	mov	r4, r2
 802110e:	4606      	mov	r6, r0
 8021110:	b118      	cbz	r0, 802111a <_putc_r+0x12>
 8021112:	6983      	ldr	r3, [r0, #24]
 8021114:	b90b      	cbnz	r3, 802111a <_putc_r+0x12>
 8021116:	f7fd f9cf 	bl	801e4b8 <__sinit>
 802111a:	4b1c      	ldr	r3, [pc, #112]	; (802118c <_putc_r+0x84>)
 802111c:	429c      	cmp	r4, r3
 802111e:	d124      	bne.n	802116a <_putc_r+0x62>
 8021120:	6874      	ldr	r4, [r6, #4]
 8021122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021124:	07d8      	lsls	r0, r3, #31
 8021126:	d405      	bmi.n	8021134 <_putc_r+0x2c>
 8021128:	89a3      	ldrh	r3, [r4, #12]
 802112a:	0599      	lsls	r1, r3, #22
 802112c:	d402      	bmi.n	8021134 <_putc_r+0x2c>
 802112e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021130:	f7fd fd75 	bl	801ec1e <__retarget_lock_acquire_recursive>
 8021134:	68a3      	ldr	r3, [r4, #8]
 8021136:	3b01      	subs	r3, #1
 8021138:	2b00      	cmp	r3, #0
 802113a:	60a3      	str	r3, [r4, #8]
 802113c:	da05      	bge.n	802114a <_putc_r+0x42>
 802113e:	69a2      	ldr	r2, [r4, #24]
 8021140:	4293      	cmp	r3, r2
 8021142:	db1c      	blt.n	802117e <_putc_r+0x76>
 8021144:	b2eb      	uxtb	r3, r5
 8021146:	2b0a      	cmp	r3, #10
 8021148:	d019      	beq.n	802117e <_putc_r+0x76>
 802114a:	6823      	ldr	r3, [r4, #0]
 802114c:	1c5a      	adds	r2, r3, #1
 802114e:	6022      	str	r2, [r4, #0]
 8021150:	701d      	strb	r5, [r3, #0]
 8021152:	b2ed      	uxtb	r5, r5
 8021154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021156:	07da      	lsls	r2, r3, #31
 8021158:	d405      	bmi.n	8021166 <_putc_r+0x5e>
 802115a:	89a3      	ldrh	r3, [r4, #12]
 802115c:	059b      	lsls	r3, r3, #22
 802115e:	d402      	bmi.n	8021166 <_putc_r+0x5e>
 8021160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021162:	f7fd fd5e 	bl	801ec22 <__retarget_lock_release_recursive>
 8021166:	4628      	mov	r0, r5
 8021168:	bd70      	pop	{r4, r5, r6, pc}
 802116a:	4b09      	ldr	r3, [pc, #36]	; (8021190 <_putc_r+0x88>)
 802116c:	429c      	cmp	r4, r3
 802116e:	d101      	bne.n	8021174 <_putc_r+0x6c>
 8021170:	68b4      	ldr	r4, [r6, #8]
 8021172:	e7d6      	b.n	8021122 <_putc_r+0x1a>
 8021174:	4b07      	ldr	r3, [pc, #28]	; (8021194 <_putc_r+0x8c>)
 8021176:	429c      	cmp	r4, r3
 8021178:	bf08      	it	eq
 802117a:	68f4      	ldreq	r4, [r6, #12]
 802117c:	e7d1      	b.n	8021122 <_putc_r+0x1a>
 802117e:	4629      	mov	r1, r5
 8021180:	4622      	mov	r2, r4
 8021182:	4630      	mov	r0, r6
 8021184:	f7ff f856 	bl	8020234 <__swbuf_r>
 8021188:	4605      	mov	r5, r0
 802118a:	e7e3      	b.n	8021154 <_putc_r+0x4c>
 802118c:	08027160 	.word	0x08027160
 8021190:	08027180 	.word	0x08027180
 8021194:	08027140 	.word	0x08027140

08021198 <_read_r>:
 8021198:	b538      	push	{r3, r4, r5, lr}
 802119a:	4d07      	ldr	r5, [pc, #28]	; (80211b8 <_read_r+0x20>)
 802119c:	4604      	mov	r4, r0
 802119e:	4608      	mov	r0, r1
 80211a0:	4611      	mov	r1, r2
 80211a2:	2200      	movs	r2, #0
 80211a4:	602a      	str	r2, [r5, #0]
 80211a6:	461a      	mov	r2, r3
 80211a8:	f7df fdf5 	bl	8000d96 <_read>
 80211ac:	1c43      	adds	r3, r0, #1
 80211ae:	d102      	bne.n	80211b6 <_read_r+0x1e>
 80211b0:	682b      	ldr	r3, [r5, #0]
 80211b2:	b103      	cbz	r3, 80211b6 <_read_r+0x1e>
 80211b4:	6023      	str	r3, [r4, #0]
 80211b6:	bd38      	pop	{r3, r4, r5, pc}
 80211b8:	20000e70 	.word	0x20000e70

080211bc <sniprintf>:
 80211bc:	b40c      	push	{r2, r3}
 80211be:	b530      	push	{r4, r5, lr}
 80211c0:	4b17      	ldr	r3, [pc, #92]	; (8021220 <sniprintf+0x64>)
 80211c2:	1e0c      	subs	r4, r1, #0
 80211c4:	681d      	ldr	r5, [r3, #0]
 80211c6:	b09d      	sub	sp, #116	; 0x74
 80211c8:	da08      	bge.n	80211dc <sniprintf+0x20>
 80211ca:	238b      	movs	r3, #139	; 0x8b
 80211cc:	602b      	str	r3, [r5, #0]
 80211ce:	f04f 30ff 	mov.w	r0, #4294967295
 80211d2:	b01d      	add	sp, #116	; 0x74
 80211d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80211d8:	b002      	add	sp, #8
 80211da:	4770      	bx	lr
 80211dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80211e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80211e4:	bf14      	ite	ne
 80211e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80211ea:	4623      	moveq	r3, r4
 80211ec:	9304      	str	r3, [sp, #16]
 80211ee:	9307      	str	r3, [sp, #28]
 80211f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80211f4:	9002      	str	r0, [sp, #8]
 80211f6:	9006      	str	r0, [sp, #24]
 80211f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80211fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80211fe:	ab21      	add	r3, sp, #132	; 0x84
 8021200:	a902      	add	r1, sp, #8
 8021202:	4628      	mov	r0, r5
 8021204:	9301      	str	r3, [sp, #4]
 8021206:	f7ff fb91 	bl	802092c <_svfiprintf_r>
 802120a:	1c43      	adds	r3, r0, #1
 802120c:	bfbc      	itt	lt
 802120e:	238b      	movlt	r3, #139	; 0x8b
 8021210:	602b      	strlt	r3, [r5, #0]
 8021212:	2c00      	cmp	r4, #0
 8021214:	d0dd      	beq.n	80211d2 <sniprintf+0x16>
 8021216:	9b02      	ldr	r3, [sp, #8]
 8021218:	2200      	movs	r2, #0
 802121a:	701a      	strb	r2, [r3, #0]
 802121c:	e7d9      	b.n	80211d2 <sniprintf+0x16>
 802121e:	bf00      	nop
 8021220:	20000108 	.word	0x20000108

08021224 <siscanf>:
 8021224:	b40e      	push	{r1, r2, r3}
 8021226:	b510      	push	{r4, lr}
 8021228:	b09f      	sub	sp, #124	; 0x7c
 802122a:	ac21      	add	r4, sp, #132	; 0x84
 802122c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8021230:	f854 2b04 	ldr.w	r2, [r4], #4
 8021234:	9201      	str	r2, [sp, #4]
 8021236:	f8ad 101c 	strh.w	r1, [sp, #28]
 802123a:	9004      	str	r0, [sp, #16]
 802123c:	9008      	str	r0, [sp, #32]
 802123e:	f7de fffd 	bl	800023c <strlen>
 8021242:	4b0c      	ldr	r3, [pc, #48]	; (8021274 <siscanf+0x50>)
 8021244:	9005      	str	r0, [sp, #20]
 8021246:	9009      	str	r0, [sp, #36]	; 0x24
 8021248:	930d      	str	r3, [sp, #52]	; 0x34
 802124a:	480b      	ldr	r0, [pc, #44]	; (8021278 <siscanf+0x54>)
 802124c:	9a01      	ldr	r2, [sp, #4]
 802124e:	6800      	ldr	r0, [r0, #0]
 8021250:	9403      	str	r4, [sp, #12]
 8021252:	2300      	movs	r3, #0
 8021254:	9311      	str	r3, [sp, #68]	; 0x44
 8021256:	9316      	str	r3, [sp, #88]	; 0x58
 8021258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802125c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021260:	a904      	add	r1, sp, #16
 8021262:	4623      	mov	r3, r4
 8021264:	f000 f8ba 	bl	80213dc <__ssvfiscanf_r>
 8021268:	b01f      	add	sp, #124	; 0x7c
 802126a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802126e:	b003      	add	sp, #12
 8021270:	4770      	bx	lr
 8021272:	bf00      	nop
 8021274:	0801f0f3 	.word	0x0801f0f3
 8021278:	20000108 	.word	0x20000108

0802127c <strcpy>:
 802127c:	4603      	mov	r3, r0
 802127e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021282:	f803 2b01 	strb.w	r2, [r3], #1
 8021286:	2a00      	cmp	r2, #0
 8021288:	d1f9      	bne.n	802127e <strcpy+0x2>
 802128a:	4770      	bx	lr

0802128c <strncmp>:
 802128c:	b510      	push	{r4, lr}
 802128e:	b16a      	cbz	r2, 80212ac <strncmp+0x20>
 8021290:	3901      	subs	r1, #1
 8021292:	1884      	adds	r4, r0, r2
 8021294:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021298:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802129c:	4293      	cmp	r3, r2
 802129e:	d103      	bne.n	80212a8 <strncmp+0x1c>
 80212a0:	42a0      	cmp	r0, r4
 80212a2:	d001      	beq.n	80212a8 <strncmp+0x1c>
 80212a4:	2b00      	cmp	r3, #0
 80212a6:	d1f5      	bne.n	8021294 <strncmp+0x8>
 80212a8:	1a98      	subs	r0, r3, r2
 80212aa:	bd10      	pop	{r4, pc}
 80212ac:	4610      	mov	r0, r2
 80212ae:	e7fc      	b.n	80212aa <strncmp+0x1e>

080212b0 <__ascii_wctomb>:
 80212b0:	b149      	cbz	r1, 80212c6 <__ascii_wctomb+0x16>
 80212b2:	2aff      	cmp	r2, #255	; 0xff
 80212b4:	bf85      	ittet	hi
 80212b6:	238a      	movhi	r3, #138	; 0x8a
 80212b8:	6003      	strhi	r3, [r0, #0]
 80212ba:	700a      	strbls	r2, [r1, #0]
 80212bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80212c0:	bf98      	it	ls
 80212c2:	2001      	movls	r0, #1
 80212c4:	4770      	bx	lr
 80212c6:	4608      	mov	r0, r1
 80212c8:	4770      	bx	lr
	...

080212cc <__env_lock>:
 80212cc:	4801      	ldr	r0, [pc, #4]	; (80212d4 <__env_lock+0x8>)
 80212ce:	f7fd bca6 	b.w	801ec1e <__retarget_lock_acquire_recursive>
 80212d2:	bf00      	nop
 80212d4:	20000e66 	.word	0x20000e66

080212d8 <__env_unlock>:
 80212d8:	4801      	ldr	r0, [pc, #4]	; (80212e0 <__env_unlock+0x8>)
 80212da:	f7fd bca2 	b.w	801ec22 <__retarget_lock_release_recursive>
 80212de:	bf00      	nop
 80212e0:	20000e66 	.word	0x20000e66

080212e4 <memmove>:
 80212e4:	4288      	cmp	r0, r1
 80212e6:	b510      	push	{r4, lr}
 80212e8:	eb01 0402 	add.w	r4, r1, r2
 80212ec:	d902      	bls.n	80212f4 <memmove+0x10>
 80212ee:	4284      	cmp	r4, r0
 80212f0:	4623      	mov	r3, r4
 80212f2:	d807      	bhi.n	8021304 <memmove+0x20>
 80212f4:	1e43      	subs	r3, r0, #1
 80212f6:	42a1      	cmp	r1, r4
 80212f8:	d008      	beq.n	802130c <memmove+0x28>
 80212fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80212fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021302:	e7f8      	b.n	80212f6 <memmove+0x12>
 8021304:	4402      	add	r2, r0
 8021306:	4601      	mov	r1, r0
 8021308:	428a      	cmp	r2, r1
 802130a:	d100      	bne.n	802130e <memmove+0x2a>
 802130c:	bd10      	pop	{r4, pc}
 802130e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021316:	e7f7      	b.n	8021308 <memmove+0x24>

08021318 <_malloc_usable_size_r>:
 8021318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802131c:	1f18      	subs	r0, r3, #4
 802131e:	2b00      	cmp	r3, #0
 8021320:	bfbc      	itt	lt
 8021322:	580b      	ldrlt	r3, [r1, r0]
 8021324:	18c0      	addlt	r0, r0, r3
 8021326:	4770      	bx	lr

08021328 <_sungetc_r>:
 8021328:	b538      	push	{r3, r4, r5, lr}
 802132a:	1c4b      	adds	r3, r1, #1
 802132c:	4614      	mov	r4, r2
 802132e:	d103      	bne.n	8021338 <_sungetc_r+0x10>
 8021330:	f04f 35ff 	mov.w	r5, #4294967295
 8021334:	4628      	mov	r0, r5
 8021336:	bd38      	pop	{r3, r4, r5, pc}
 8021338:	8993      	ldrh	r3, [r2, #12]
 802133a:	f023 0320 	bic.w	r3, r3, #32
 802133e:	8193      	strh	r3, [r2, #12]
 8021340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021342:	6852      	ldr	r2, [r2, #4]
 8021344:	b2cd      	uxtb	r5, r1
 8021346:	b18b      	cbz	r3, 802136c <_sungetc_r+0x44>
 8021348:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802134a:	4293      	cmp	r3, r2
 802134c:	dd08      	ble.n	8021360 <_sungetc_r+0x38>
 802134e:	6823      	ldr	r3, [r4, #0]
 8021350:	1e5a      	subs	r2, r3, #1
 8021352:	6022      	str	r2, [r4, #0]
 8021354:	f803 5c01 	strb.w	r5, [r3, #-1]
 8021358:	6863      	ldr	r3, [r4, #4]
 802135a:	3301      	adds	r3, #1
 802135c:	6063      	str	r3, [r4, #4]
 802135e:	e7e9      	b.n	8021334 <_sungetc_r+0xc>
 8021360:	4621      	mov	r1, r4
 8021362:	f000 fbbf 	bl	8021ae4 <__submore>
 8021366:	2800      	cmp	r0, #0
 8021368:	d0f1      	beq.n	802134e <_sungetc_r+0x26>
 802136a:	e7e1      	b.n	8021330 <_sungetc_r+0x8>
 802136c:	6921      	ldr	r1, [r4, #16]
 802136e:	6823      	ldr	r3, [r4, #0]
 8021370:	b151      	cbz	r1, 8021388 <_sungetc_r+0x60>
 8021372:	4299      	cmp	r1, r3
 8021374:	d208      	bcs.n	8021388 <_sungetc_r+0x60>
 8021376:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802137a:	42a9      	cmp	r1, r5
 802137c:	d104      	bne.n	8021388 <_sungetc_r+0x60>
 802137e:	3b01      	subs	r3, #1
 8021380:	3201      	adds	r2, #1
 8021382:	6023      	str	r3, [r4, #0]
 8021384:	6062      	str	r2, [r4, #4]
 8021386:	e7d5      	b.n	8021334 <_sungetc_r+0xc>
 8021388:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802138c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021390:	6363      	str	r3, [r4, #52]	; 0x34
 8021392:	2303      	movs	r3, #3
 8021394:	63a3      	str	r3, [r4, #56]	; 0x38
 8021396:	4623      	mov	r3, r4
 8021398:	f803 5f46 	strb.w	r5, [r3, #70]!
 802139c:	6023      	str	r3, [r4, #0]
 802139e:	2301      	movs	r3, #1
 80213a0:	e7dc      	b.n	802135c <_sungetc_r+0x34>

080213a2 <__ssrefill_r>:
 80213a2:	b510      	push	{r4, lr}
 80213a4:	460c      	mov	r4, r1
 80213a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80213a8:	b169      	cbz	r1, 80213c6 <__ssrefill_r+0x24>
 80213aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80213ae:	4299      	cmp	r1, r3
 80213b0:	d001      	beq.n	80213b6 <__ssrefill_r+0x14>
 80213b2:	f7fd fcd1 	bl	801ed58 <_free_r>
 80213b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80213b8:	6063      	str	r3, [r4, #4]
 80213ba:	2000      	movs	r0, #0
 80213bc:	6360      	str	r0, [r4, #52]	; 0x34
 80213be:	b113      	cbz	r3, 80213c6 <__ssrefill_r+0x24>
 80213c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80213c2:	6023      	str	r3, [r4, #0]
 80213c4:	bd10      	pop	{r4, pc}
 80213c6:	6923      	ldr	r3, [r4, #16]
 80213c8:	6023      	str	r3, [r4, #0]
 80213ca:	2300      	movs	r3, #0
 80213cc:	6063      	str	r3, [r4, #4]
 80213ce:	89a3      	ldrh	r3, [r4, #12]
 80213d0:	f043 0320 	orr.w	r3, r3, #32
 80213d4:	81a3      	strh	r3, [r4, #12]
 80213d6:	f04f 30ff 	mov.w	r0, #4294967295
 80213da:	e7f3      	b.n	80213c4 <__ssrefill_r+0x22>

080213dc <__ssvfiscanf_r>:
 80213dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213e0:	460c      	mov	r4, r1
 80213e2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80213e6:	2100      	movs	r1, #0
 80213e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80213ec:	49b2      	ldr	r1, [pc, #712]	; (80216b8 <__ssvfiscanf_r+0x2dc>)
 80213ee:	91a0      	str	r1, [sp, #640]	; 0x280
 80213f0:	f10d 0804 	add.w	r8, sp, #4
 80213f4:	49b1      	ldr	r1, [pc, #708]	; (80216bc <__ssvfiscanf_r+0x2e0>)
 80213f6:	4fb2      	ldr	r7, [pc, #712]	; (80216c0 <__ssvfiscanf_r+0x2e4>)
 80213f8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80216c4 <__ssvfiscanf_r+0x2e8>
 80213fc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8021400:	4606      	mov	r6, r0
 8021402:	91a1      	str	r1, [sp, #644]	; 0x284
 8021404:	9300      	str	r3, [sp, #0]
 8021406:	f892 a000 	ldrb.w	sl, [r2]
 802140a:	f1ba 0f00 	cmp.w	sl, #0
 802140e:	f000 8151 	beq.w	80216b4 <__ssvfiscanf_r+0x2d8>
 8021412:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8021416:	f013 0308 	ands.w	r3, r3, #8
 802141a:	f102 0501 	add.w	r5, r2, #1
 802141e:	d019      	beq.n	8021454 <__ssvfiscanf_r+0x78>
 8021420:	6863      	ldr	r3, [r4, #4]
 8021422:	2b00      	cmp	r3, #0
 8021424:	dd0f      	ble.n	8021446 <__ssvfiscanf_r+0x6a>
 8021426:	6823      	ldr	r3, [r4, #0]
 8021428:	781a      	ldrb	r2, [r3, #0]
 802142a:	5cba      	ldrb	r2, [r7, r2]
 802142c:	0712      	lsls	r2, r2, #28
 802142e:	d401      	bmi.n	8021434 <__ssvfiscanf_r+0x58>
 8021430:	462a      	mov	r2, r5
 8021432:	e7e8      	b.n	8021406 <__ssvfiscanf_r+0x2a>
 8021434:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021436:	3201      	adds	r2, #1
 8021438:	9245      	str	r2, [sp, #276]	; 0x114
 802143a:	6862      	ldr	r2, [r4, #4]
 802143c:	3301      	adds	r3, #1
 802143e:	3a01      	subs	r2, #1
 8021440:	6062      	str	r2, [r4, #4]
 8021442:	6023      	str	r3, [r4, #0]
 8021444:	e7ec      	b.n	8021420 <__ssvfiscanf_r+0x44>
 8021446:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021448:	4621      	mov	r1, r4
 802144a:	4630      	mov	r0, r6
 802144c:	4798      	blx	r3
 802144e:	2800      	cmp	r0, #0
 8021450:	d0e9      	beq.n	8021426 <__ssvfiscanf_r+0x4a>
 8021452:	e7ed      	b.n	8021430 <__ssvfiscanf_r+0x54>
 8021454:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8021458:	f040 8083 	bne.w	8021562 <__ssvfiscanf_r+0x186>
 802145c:	9341      	str	r3, [sp, #260]	; 0x104
 802145e:	9343      	str	r3, [sp, #268]	; 0x10c
 8021460:	7853      	ldrb	r3, [r2, #1]
 8021462:	2b2a      	cmp	r3, #42	; 0x2a
 8021464:	bf02      	ittt	eq
 8021466:	2310      	moveq	r3, #16
 8021468:	1c95      	addeq	r5, r2, #2
 802146a:	9341      	streq	r3, [sp, #260]	; 0x104
 802146c:	220a      	movs	r2, #10
 802146e:	46ab      	mov	fp, r5
 8021470:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8021474:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8021478:	2b09      	cmp	r3, #9
 802147a:	d91d      	bls.n	80214b8 <__ssvfiscanf_r+0xdc>
 802147c:	4891      	ldr	r0, [pc, #580]	; (80216c4 <__ssvfiscanf_r+0x2e8>)
 802147e:	2203      	movs	r2, #3
 8021480:	f7de feee 	bl	8000260 <memchr>
 8021484:	b140      	cbz	r0, 8021498 <__ssvfiscanf_r+0xbc>
 8021486:	2301      	movs	r3, #1
 8021488:	eba0 0009 	sub.w	r0, r0, r9
 802148c:	fa03 f000 	lsl.w	r0, r3, r0
 8021490:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021492:	4318      	orrs	r0, r3
 8021494:	9041      	str	r0, [sp, #260]	; 0x104
 8021496:	465d      	mov	r5, fp
 8021498:	f815 3b01 	ldrb.w	r3, [r5], #1
 802149c:	2b78      	cmp	r3, #120	; 0x78
 802149e:	d806      	bhi.n	80214ae <__ssvfiscanf_r+0xd2>
 80214a0:	2b57      	cmp	r3, #87	; 0x57
 80214a2:	d810      	bhi.n	80214c6 <__ssvfiscanf_r+0xea>
 80214a4:	2b25      	cmp	r3, #37	; 0x25
 80214a6:	d05c      	beq.n	8021562 <__ssvfiscanf_r+0x186>
 80214a8:	d856      	bhi.n	8021558 <__ssvfiscanf_r+0x17c>
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d074      	beq.n	8021598 <__ssvfiscanf_r+0x1bc>
 80214ae:	2303      	movs	r3, #3
 80214b0:	9347      	str	r3, [sp, #284]	; 0x11c
 80214b2:	230a      	movs	r3, #10
 80214b4:	9342      	str	r3, [sp, #264]	; 0x108
 80214b6:	e081      	b.n	80215bc <__ssvfiscanf_r+0x1e0>
 80214b8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80214ba:	fb02 1303 	mla	r3, r2, r3, r1
 80214be:	3b30      	subs	r3, #48	; 0x30
 80214c0:	9343      	str	r3, [sp, #268]	; 0x10c
 80214c2:	465d      	mov	r5, fp
 80214c4:	e7d3      	b.n	802146e <__ssvfiscanf_r+0x92>
 80214c6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80214ca:	2a20      	cmp	r2, #32
 80214cc:	d8ef      	bhi.n	80214ae <__ssvfiscanf_r+0xd2>
 80214ce:	a101      	add	r1, pc, #4	; (adr r1, 80214d4 <__ssvfiscanf_r+0xf8>)
 80214d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80214d4:	080215a7 	.word	0x080215a7
 80214d8:	080214af 	.word	0x080214af
 80214dc:	080214af 	.word	0x080214af
 80214e0:	08021605 	.word	0x08021605
 80214e4:	080214af 	.word	0x080214af
 80214e8:	080214af 	.word	0x080214af
 80214ec:	080214af 	.word	0x080214af
 80214f0:	080214af 	.word	0x080214af
 80214f4:	080214af 	.word	0x080214af
 80214f8:	080214af 	.word	0x080214af
 80214fc:	080214af 	.word	0x080214af
 8021500:	0802161b 	.word	0x0802161b
 8021504:	080215f1 	.word	0x080215f1
 8021508:	0802155f 	.word	0x0802155f
 802150c:	0802155f 	.word	0x0802155f
 8021510:	0802155f 	.word	0x0802155f
 8021514:	080214af 	.word	0x080214af
 8021518:	080215f5 	.word	0x080215f5
 802151c:	080214af 	.word	0x080214af
 8021520:	080214af 	.word	0x080214af
 8021524:	080214af 	.word	0x080214af
 8021528:	080214af 	.word	0x080214af
 802152c:	0802162b 	.word	0x0802162b
 8021530:	080215fd 	.word	0x080215fd
 8021534:	0802159f 	.word	0x0802159f
 8021538:	080214af 	.word	0x080214af
 802153c:	080214af 	.word	0x080214af
 8021540:	08021627 	.word	0x08021627
 8021544:	080214af 	.word	0x080214af
 8021548:	080215f1 	.word	0x080215f1
 802154c:	080214af 	.word	0x080214af
 8021550:	080214af 	.word	0x080214af
 8021554:	080215a7 	.word	0x080215a7
 8021558:	3b45      	subs	r3, #69	; 0x45
 802155a:	2b02      	cmp	r3, #2
 802155c:	d8a7      	bhi.n	80214ae <__ssvfiscanf_r+0xd2>
 802155e:	2305      	movs	r3, #5
 8021560:	e02b      	b.n	80215ba <__ssvfiscanf_r+0x1de>
 8021562:	6863      	ldr	r3, [r4, #4]
 8021564:	2b00      	cmp	r3, #0
 8021566:	dd0d      	ble.n	8021584 <__ssvfiscanf_r+0x1a8>
 8021568:	6823      	ldr	r3, [r4, #0]
 802156a:	781a      	ldrb	r2, [r3, #0]
 802156c:	4552      	cmp	r2, sl
 802156e:	f040 80a1 	bne.w	80216b4 <__ssvfiscanf_r+0x2d8>
 8021572:	3301      	adds	r3, #1
 8021574:	6862      	ldr	r2, [r4, #4]
 8021576:	6023      	str	r3, [r4, #0]
 8021578:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802157a:	3a01      	subs	r2, #1
 802157c:	3301      	adds	r3, #1
 802157e:	6062      	str	r2, [r4, #4]
 8021580:	9345      	str	r3, [sp, #276]	; 0x114
 8021582:	e755      	b.n	8021430 <__ssvfiscanf_r+0x54>
 8021584:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021586:	4621      	mov	r1, r4
 8021588:	4630      	mov	r0, r6
 802158a:	4798      	blx	r3
 802158c:	2800      	cmp	r0, #0
 802158e:	d0eb      	beq.n	8021568 <__ssvfiscanf_r+0x18c>
 8021590:	9844      	ldr	r0, [sp, #272]	; 0x110
 8021592:	2800      	cmp	r0, #0
 8021594:	f040 8084 	bne.w	80216a0 <__ssvfiscanf_r+0x2c4>
 8021598:	f04f 30ff 	mov.w	r0, #4294967295
 802159c:	e086      	b.n	80216ac <__ssvfiscanf_r+0x2d0>
 802159e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80215a0:	f042 0220 	orr.w	r2, r2, #32
 80215a4:	9241      	str	r2, [sp, #260]	; 0x104
 80215a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80215a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80215ac:	9241      	str	r2, [sp, #260]	; 0x104
 80215ae:	2210      	movs	r2, #16
 80215b0:	2b6f      	cmp	r3, #111	; 0x6f
 80215b2:	9242      	str	r2, [sp, #264]	; 0x108
 80215b4:	bf34      	ite	cc
 80215b6:	2303      	movcc	r3, #3
 80215b8:	2304      	movcs	r3, #4
 80215ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80215bc:	6863      	ldr	r3, [r4, #4]
 80215be:	2b00      	cmp	r3, #0
 80215c0:	dd41      	ble.n	8021646 <__ssvfiscanf_r+0x26a>
 80215c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80215c4:	0659      	lsls	r1, r3, #25
 80215c6:	d404      	bmi.n	80215d2 <__ssvfiscanf_r+0x1f6>
 80215c8:	6823      	ldr	r3, [r4, #0]
 80215ca:	781a      	ldrb	r2, [r3, #0]
 80215cc:	5cba      	ldrb	r2, [r7, r2]
 80215ce:	0712      	lsls	r2, r2, #28
 80215d0:	d440      	bmi.n	8021654 <__ssvfiscanf_r+0x278>
 80215d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80215d4:	2b02      	cmp	r3, #2
 80215d6:	dc4f      	bgt.n	8021678 <__ssvfiscanf_r+0x29c>
 80215d8:	466b      	mov	r3, sp
 80215da:	4622      	mov	r2, r4
 80215dc:	a941      	add	r1, sp, #260	; 0x104
 80215de:	4630      	mov	r0, r6
 80215e0:	f000 f874 	bl	80216cc <_scanf_chars>
 80215e4:	2801      	cmp	r0, #1
 80215e6:	d065      	beq.n	80216b4 <__ssvfiscanf_r+0x2d8>
 80215e8:	2802      	cmp	r0, #2
 80215ea:	f47f af21 	bne.w	8021430 <__ssvfiscanf_r+0x54>
 80215ee:	e7cf      	b.n	8021590 <__ssvfiscanf_r+0x1b4>
 80215f0:	220a      	movs	r2, #10
 80215f2:	e7dd      	b.n	80215b0 <__ssvfiscanf_r+0x1d4>
 80215f4:	2300      	movs	r3, #0
 80215f6:	9342      	str	r3, [sp, #264]	; 0x108
 80215f8:	2303      	movs	r3, #3
 80215fa:	e7de      	b.n	80215ba <__ssvfiscanf_r+0x1de>
 80215fc:	2308      	movs	r3, #8
 80215fe:	9342      	str	r3, [sp, #264]	; 0x108
 8021600:	2304      	movs	r3, #4
 8021602:	e7da      	b.n	80215ba <__ssvfiscanf_r+0x1de>
 8021604:	4629      	mov	r1, r5
 8021606:	4640      	mov	r0, r8
 8021608:	f000 f9ac 	bl	8021964 <__sccl>
 802160c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802160e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021612:	9341      	str	r3, [sp, #260]	; 0x104
 8021614:	4605      	mov	r5, r0
 8021616:	2301      	movs	r3, #1
 8021618:	e7cf      	b.n	80215ba <__ssvfiscanf_r+0x1de>
 802161a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802161c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021620:	9341      	str	r3, [sp, #260]	; 0x104
 8021622:	2300      	movs	r3, #0
 8021624:	e7c9      	b.n	80215ba <__ssvfiscanf_r+0x1de>
 8021626:	2302      	movs	r3, #2
 8021628:	e7c7      	b.n	80215ba <__ssvfiscanf_r+0x1de>
 802162a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802162c:	06c3      	lsls	r3, r0, #27
 802162e:	f53f aeff 	bmi.w	8021430 <__ssvfiscanf_r+0x54>
 8021632:	9b00      	ldr	r3, [sp, #0]
 8021634:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021636:	1d19      	adds	r1, r3, #4
 8021638:	9100      	str	r1, [sp, #0]
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	07c0      	lsls	r0, r0, #31
 802163e:	bf4c      	ite	mi
 8021640:	801a      	strhmi	r2, [r3, #0]
 8021642:	601a      	strpl	r2, [r3, #0]
 8021644:	e6f4      	b.n	8021430 <__ssvfiscanf_r+0x54>
 8021646:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021648:	4621      	mov	r1, r4
 802164a:	4630      	mov	r0, r6
 802164c:	4798      	blx	r3
 802164e:	2800      	cmp	r0, #0
 8021650:	d0b7      	beq.n	80215c2 <__ssvfiscanf_r+0x1e6>
 8021652:	e79d      	b.n	8021590 <__ssvfiscanf_r+0x1b4>
 8021654:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021656:	3201      	adds	r2, #1
 8021658:	9245      	str	r2, [sp, #276]	; 0x114
 802165a:	6862      	ldr	r2, [r4, #4]
 802165c:	3a01      	subs	r2, #1
 802165e:	2a00      	cmp	r2, #0
 8021660:	6062      	str	r2, [r4, #4]
 8021662:	dd02      	ble.n	802166a <__ssvfiscanf_r+0x28e>
 8021664:	3301      	adds	r3, #1
 8021666:	6023      	str	r3, [r4, #0]
 8021668:	e7ae      	b.n	80215c8 <__ssvfiscanf_r+0x1ec>
 802166a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802166c:	4621      	mov	r1, r4
 802166e:	4630      	mov	r0, r6
 8021670:	4798      	blx	r3
 8021672:	2800      	cmp	r0, #0
 8021674:	d0a8      	beq.n	80215c8 <__ssvfiscanf_r+0x1ec>
 8021676:	e78b      	b.n	8021590 <__ssvfiscanf_r+0x1b4>
 8021678:	2b04      	cmp	r3, #4
 802167a:	dc06      	bgt.n	802168a <__ssvfiscanf_r+0x2ae>
 802167c:	466b      	mov	r3, sp
 802167e:	4622      	mov	r2, r4
 8021680:	a941      	add	r1, sp, #260	; 0x104
 8021682:	4630      	mov	r0, r6
 8021684:	f000 f87a 	bl	802177c <_scanf_i>
 8021688:	e7ac      	b.n	80215e4 <__ssvfiscanf_r+0x208>
 802168a:	4b0f      	ldr	r3, [pc, #60]	; (80216c8 <__ssvfiscanf_r+0x2ec>)
 802168c:	2b00      	cmp	r3, #0
 802168e:	f43f aecf 	beq.w	8021430 <__ssvfiscanf_r+0x54>
 8021692:	466b      	mov	r3, sp
 8021694:	4622      	mov	r2, r4
 8021696:	a941      	add	r1, sp, #260	; 0x104
 8021698:	4630      	mov	r0, r6
 802169a:	f3af 8000 	nop.w
 802169e:	e7a1      	b.n	80215e4 <__ssvfiscanf_r+0x208>
 80216a0:	89a3      	ldrh	r3, [r4, #12]
 80216a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80216a6:	bf18      	it	ne
 80216a8:	f04f 30ff 	movne.w	r0, #4294967295
 80216ac:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80216b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80216b6:	e7f9      	b.n	80216ac <__ssvfiscanf_r+0x2d0>
 80216b8:	08021329 	.word	0x08021329
 80216bc:	080213a3 	.word	0x080213a3
 80216c0:	080275d5 	.word	0x080275d5
 80216c4:	080276e5 	.word	0x080276e5
 80216c8:	00000000 	.word	0x00000000

080216cc <_scanf_chars>:
 80216cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80216d0:	4615      	mov	r5, r2
 80216d2:	688a      	ldr	r2, [r1, #8]
 80216d4:	4680      	mov	r8, r0
 80216d6:	460c      	mov	r4, r1
 80216d8:	b932      	cbnz	r2, 80216e8 <_scanf_chars+0x1c>
 80216da:	698a      	ldr	r2, [r1, #24]
 80216dc:	2a00      	cmp	r2, #0
 80216de:	bf0c      	ite	eq
 80216e0:	2201      	moveq	r2, #1
 80216e2:	f04f 32ff 	movne.w	r2, #4294967295
 80216e6:	608a      	str	r2, [r1, #8]
 80216e8:	6822      	ldr	r2, [r4, #0]
 80216ea:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8021778 <_scanf_chars+0xac>
 80216ee:	06d1      	lsls	r1, r2, #27
 80216f0:	bf5f      	itttt	pl
 80216f2:	681a      	ldrpl	r2, [r3, #0]
 80216f4:	1d11      	addpl	r1, r2, #4
 80216f6:	6019      	strpl	r1, [r3, #0]
 80216f8:	6816      	ldrpl	r6, [r2, #0]
 80216fa:	2700      	movs	r7, #0
 80216fc:	69a0      	ldr	r0, [r4, #24]
 80216fe:	b188      	cbz	r0, 8021724 <_scanf_chars+0x58>
 8021700:	2801      	cmp	r0, #1
 8021702:	d107      	bne.n	8021714 <_scanf_chars+0x48>
 8021704:	682b      	ldr	r3, [r5, #0]
 8021706:	781a      	ldrb	r2, [r3, #0]
 8021708:	6963      	ldr	r3, [r4, #20]
 802170a:	5c9b      	ldrb	r3, [r3, r2]
 802170c:	b953      	cbnz	r3, 8021724 <_scanf_chars+0x58>
 802170e:	bb27      	cbnz	r7, 802175a <_scanf_chars+0x8e>
 8021710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021714:	2802      	cmp	r0, #2
 8021716:	d120      	bne.n	802175a <_scanf_chars+0x8e>
 8021718:	682b      	ldr	r3, [r5, #0]
 802171a:	781b      	ldrb	r3, [r3, #0]
 802171c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8021720:	071b      	lsls	r3, r3, #28
 8021722:	d41a      	bmi.n	802175a <_scanf_chars+0x8e>
 8021724:	6823      	ldr	r3, [r4, #0]
 8021726:	06da      	lsls	r2, r3, #27
 8021728:	bf5e      	ittt	pl
 802172a:	682b      	ldrpl	r3, [r5, #0]
 802172c:	781b      	ldrbpl	r3, [r3, #0]
 802172e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8021732:	682a      	ldr	r2, [r5, #0]
 8021734:	686b      	ldr	r3, [r5, #4]
 8021736:	3201      	adds	r2, #1
 8021738:	602a      	str	r2, [r5, #0]
 802173a:	68a2      	ldr	r2, [r4, #8]
 802173c:	3b01      	subs	r3, #1
 802173e:	3a01      	subs	r2, #1
 8021740:	606b      	str	r3, [r5, #4]
 8021742:	3701      	adds	r7, #1
 8021744:	60a2      	str	r2, [r4, #8]
 8021746:	b142      	cbz	r2, 802175a <_scanf_chars+0x8e>
 8021748:	2b00      	cmp	r3, #0
 802174a:	dcd7      	bgt.n	80216fc <_scanf_chars+0x30>
 802174c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021750:	4629      	mov	r1, r5
 8021752:	4640      	mov	r0, r8
 8021754:	4798      	blx	r3
 8021756:	2800      	cmp	r0, #0
 8021758:	d0d0      	beq.n	80216fc <_scanf_chars+0x30>
 802175a:	6823      	ldr	r3, [r4, #0]
 802175c:	f013 0310 	ands.w	r3, r3, #16
 8021760:	d105      	bne.n	802176e <_scanf_chars+0xa2>
 8021762:	68e2      	ldr	r2, [r4, #12]
 8021764:	3201      	adds	r2, #1
 8021766:	60e2      	str	r2, [r4, #12]
 8021768:	69a2      	ldr	r2, [r4, #24]
 802176a:	b102      	cbz	r2, 802176e <_scanf_chars+0xa2>
 802176c:	7033      	strb	r3, [r6, #0]
 802176e:	6923      	ldr	r3, [r4, #16]
 8021770:	441f      	add	r7, r3
 8021772:	6127      	str	r7, [r4, #16]
 8021774:	2000      	movs	r0, #0
 8021776:	e7cb      	b.n	8021710 <_scanf_chars+0x44>
 8021778:	080275d5 	.word	0x080275d5

0802177c <_scanf_i>:
 802177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021780:	4698      	mov	r8, r3
 8021782:	4b74      	ldr	r3, [pc, #464]	; (8021954 <_scanf_i+0x1d8>)
 8021784:	460c      	mov	r4, r1
 8021786:	4682      	mov	sl, r0
 8021788:	4616      	mov	r6, r2
 802178a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802178e:	b087      	sub	sp, #28
 8021790:	ab03      	add	r3, sp, #12
 8021792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8021796:	4b70      	ldr	r3, [pc, #448]	; (8021958 <_scanf_i+0x1dc>)
 8021798:	69a1      	ldr	r1, [r4, #24]
 802179a:	4a70      	ldr	r2, [pc, #448]	; (802195c <_scanf_i+0x1e0>)
 802179c:	2903      	cmp	r1, #3
 802179e:	bf18      	it	ne
 80217a0:	461a      	movne	r2, r3
 80217a2:	68a3      	ldr	r3, [r4, #8]
 80217a4:	9201      	str	r2, [sp, #4]
 80217a6:	1e5a      	subs	r2, r3, #1
 80217a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80217ac:	bf88      	it	hi
 80217ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80217b2:	4627      	mov	r7, r4
 80217b4:	bf82      	ittt	hi
 80217b6:	eb03 0905 	addhi.w	r9, r3, r5
 80217ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 80217be:	60a3      	strhi	r3, [r4, #8]
 80217c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80217c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80217c8:	bf98      	it	ls
 80217ca:	f04f 0900 	movls.w	r9, #0
 80217ce:	6023      	str	r3, [r4, #0]
 80217d0:	463d      	mov	r5, r7
 80217d2:	f04f 0b00 	mov.w	fp, #0
 80217d6:	6831      	ldr	r1, [r6, #0]
 80217d8:	ab03      	add	r3, sp, #12
 80217da:	7809      	ldrb	r1, [r1, #0]
 80217dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80217e0:	2202      	movs	r2, #2
 80217e2:	f7de fd3d 	bl	8000260 <memchr>
 80217e6:	b328      	cbz	r0, 8021834 <_scanf_i+0xb8>
 80217e8:	f1bb 0f01 	cmp.w	fp, #1
 80217ec:	d159      	bne.n	80218a2 <_scanf_i+0x126>
 80217ee:	6862      	ldr	r2, [r4, #4]
 80217f0:	b92a      	cbnz	r2, 80217fe <_scanf_i+0x82>
 80217f2:	6822      	ldr	r2, [r4, #0]
 80217f4:	2308      	movs	r3, #8
 80217f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80217fa:	6063      	str	r3, [r4, #4]
 80217fc:	6022      	str	r2, [r4, #0]
 80217fe:	6822      	ldr	r2, [r4, #0]
 8021800:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8021804:	6022      	str	r2, [r4, #0]
 8021806:	68a2      	ldr	r2, [r4, #8]
 8021808:	1e51      	subs	r1, r2, #1
 802180a:	60a1      	str	r1, [r4, #8]
 802180c:	b192      	cbz	r2, 8021834 <_scanf_i+0xb8>
 802180e:	6832      	ldr	r2, [r6, #0]
 8021810:	1c51      	adds	r1, r2, #1
 8021812:	6031      	str	r1, [r6, #0]
 8021814:	7812      	ldrb	r2, [r2, #0]
 8021816:	f805 2b01 	strb.w	r2, [r5], #1
 802181a:	6872      	ldr	r2, [r6, #4]
 802181c:	3a01      	subs	r2, #1
 802181e:	2a00      	cmp	r2, #0
 8021820:	6072      	str	r2, [r6, #4]
 8021822:	dc07      	bgt.n	8021834 <_scanf_i+0xb8>
 8021824:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8021828:	4631      	mov	r1, r6
 802182a:	4650      	mov	r0, sl
 802182c:	4790      	blx	r2
 802182e:	2800      	cmp	r0, #0
 8021830:	f040 8085 	bne.w	802193e <_scanf_i+0x1c2>
 8021834:	f10b 0b01 	add.w	fp, fp, #1
 8021838:	f1bb 0f03 	cmp.w	fp, #3
 802183c:	d1cb      	bne.n	80217d6 <_scanf_i+0x5a>
 802183e:	6863      	ldr	r3, [r4, #4]
 8021840:	b90b      	cbnz	r3, 8021846 <_scanf_i+0xca>
 8021842:	230a      	movs	r3, #10
 8021844:	6063      	str	r3, [r4, #4]
 8021846:	6863      	ldr	r3, [r4, #4]
 8021848:	4945      	ldr	r1, [pc, #276]	; (8021960 <_scanf_i+0x1e4>)
 802184a:	6960      	ldr	r0, [r4, #20]
 802184c:	1ac9      	subs	r1, r1, r3
 802184e:	f000 f889 	bl	8021964 <__sccl>
 8021852:	f04f 0b00 	mov.w	fp, #0
 8021856:	68a3      	ldr	r3, [r4, #8]
 8021858:	6822      	ldr	r2, [r4, #0]
 802185a:	2b00      	cmp	r3, #0
 802185c:	d03d      	beq.n	80218da <_scanf_i+0x15e>
 802185e:	6831      	ldr	r1, [r6, #0]
 8021860:	6960      	ldr	r0, [r4, #20]
 8021862:	f891 c000 	ldrb.w	ip, [r1]
 8021866:	f810 000c 	ldrb.w	r0, [r0, ip]
 802186a:	2800      	cmp	r0, #0
 802186c:	d035      	beq.n	80218da <_scanf_i+0x15e>
 802186e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8021872:	d124      	bne.n	80218be <_scanf_i+0x142>
 8021874:	0510      	lsls	r0, r2, #20
 8021876:	d522      	bpl.n	80218be <_scanf_i+0x142>
 8021878:	f10b 0b01 	add.w	fp, fp, #1
 802187c:	f1b9 0f00 	cmp.w	r9, #0
 8021880:	d003      	beq.n	802188a <_scanf_i+0x10e>
 8021882:	3301      	adds	r3, #1
 8021884:	f109 39ff 	add.w	r9, r9, #4294967295
 8021888:	60a3      	str	r3, [r4, #8]
 802188a:	6873      	ldr	r3, [r6, #4]
 802188c:	3b01      	subs	r3, #1
 802188e:	2b00      	cmp	r3, #0
 8021890:	6073      	str	r3, [r6, #4]
 8021892:	dd1b      	ble.n	80218cc <_scanf_i+0x150>
 8021894:	6833      	ldr	r3, [r6, #0]
 8021896:	3301      	adds	r3, #1
 8021898:	6033      	str	r3, [r6, #0]
 802189a:	68a3      	ldr	r3, [r4, #8]
 802189c:	3b01      	subs	r3, #1
 802189e:	60a3      	str	r3, [r4, #8]
 80218a0:	e7d9      	b.n	8021856 <_scanf_i+0xda>
 80218a2:	f1bb 0f02 	cmp.w	fp, #2
 80218a6:	d1ae      	bne.n	8021806 <_scanf_i+0x8a>
 80218a8:	6822      	ldr	r2, [r4, #0]
 80218aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80218ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80218b2:	d1bf      	bne.n	8021834 <_scanf_i+0xb8>
 80218b4:	2310      	movs	r3, #16
 80218b6:	6063      	str	r3, [r4, #4]
 80218b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80218bc:	e7a2      	b.n	8021804 <_scanf_i+0x88>
 80218be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80218c2:	6022      	str	r2, [r4, #0]
 80218c4:	780b      	ldrb	r3, [r1, #0]
 80218c6:	f805 3b01 	strb.w	r3, [r5], #1
 80218ca:	e7de      	b.n	802188a <_scanf_i+0x10e>
 80218cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80218d0:	4631      	mov	r1, r6
 80218d2:	4650      	mov	r0, sl
 80218d4:	4798      	blx	r3
 80218d6:	2800      	cmp	r0, #0
 80218d8:	d0df      	beq.n	802189a <_scanf_i+0x11e>
 80218da:	6823      	ldr	r3, [r4, #0]
 80218dc:	05d9      	lsls	r1, r3, #23
 80218de:	d50d      	bpl.n	80218fc <_scanf_i+0x180>
 80218e0:	42bd      	cmp	r5, r7
 80218e2:	d909      	bls.n	80218f8 <_scanf_i+0x17c>
 80218e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80218e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80218ec:	4632      	mov	r2, r6
 80218ee:	4650      	mov	r0, sl
 80218f0:	4798      	blx	r3
 80218f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80218f6:	464d      	mov	r5, r9
 80218f8:	42bd      	cmp	r5, r7
 80218fa:	d028      	beq.n	802194e <_scanf_i+0x1d2>
 80218fc:	6822      	ldr	r2, [r4, #0]
 80218fe:	f012 0210 	ands.w	r2, r2, #16
 8021902:	d113      	bne.n	802192c <_scanf_i+0x1b0>
 8021904:	702a      	strb	r2, [r5, #0]
 8021906:	6863      	ldr	r3, [r4, #4]
 8021908:	9e01      	ldr	r6, [sp, #4]
 802190a:	4639      	mov	r1, r7
 802190c:	4650      	mov	r0, sl
 802190e:	47b0      	blx	r6
 8021910:	f8d8 3000 	ldr.w	r3, [r8]
 8021914:	6821      	ldr	r1, [r4, #0]
 8021916:	1d1a      	adds	r2, r3, #4
 8021918:	f8c8 2000 	str.w	r2, [r8]
 802191c:	f011 0f20 	tst.w	r1, #32
 8021920:	681b      	ldr	r3, [r3, #0]
 8021922:	d00f      	beq.n	8021944 <_scanf_i+0x1c8>
 8021924:	6018      	str	r0, [r3, #0]
 8021926:	68e3      	ldr	r3, [r4, #12]
 8021928:	3301      	adds	r3, #1
 802192a:	60e3      	str	r3, [r4, #12]
 802192c:	1bed      	subs	r5, r5, r7
 802192e:	44ab      	add	fp, r5
 8021930:	6925      	ldr	r5, [r4, #16]
 8021932:	445d      	add	r5, fp
 8021934:	6125      	str	r5, [r4, #16]
 8021936:	2000      	movs	r0, #0
 8021938:	b007      	add	sp, #28
 802193a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802193e:	f04f 0b00 	mov.w	fp, #0
 8021942:	e7ca      	b.n	80218da <_scanf_i+0x15e>
 8021944:	07ca      	lsls	r2, r1, #31
 8021946:	bf4c      	ite	mi
 8021948:	8018      	strhmi	r0, [r3, #0]
 802194a:	6018      	strpl	r0, [r3, #0]
 802194c:	e7eb      	b.n	8021926 <_scanf_i+0x1aa>
 802194e:	2001      	movs	r0, #1
 8021950:	e7f2      	b.n	8021938 <_scanf_i+0x1bc>
 8021952:	bf00      	nop
 8021954:	08024cc8 	.word	0x08024cc8
 8021958:	0801fd3d 	.word	0x0801fd3d
 802195c:	08021ae1 	.word	0x08021ae1
 8021960:	0802772b 	.word	0x0802772b

08021964 <__sccl>:
 8021964:	b570      	push	{r4, r5, r6, lr}
 8021966:	780b      	ldrb	r3, [r1, #0]
 8021968:	4604      	mov	r4, r0
 802196a:	2b5e      	cmp	r3, #94	; 0x5e
 802196c:	bf0b      	itete	eq
 802196e:	784b      	ldrbeq	r3, [r1, #1]
 8021970:	1c48      	addne	r0, r1, #1
 8021972:	1c88      	addeq	r0, r1, #2
 8021974:	2200      	movne	r2, #0
 8021976:	bf08      	it	eq
 8021978:	2201      	moveq	r2, #1
 802197a:	1e61      	subs	r1, r4, #1
 802197c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8021980:	f801 2f01 	strb.w	r2, [r1, #1]!
 8021984:	42a9      	cmp	r1, r5
 8021986:	d1fb      	bne.n	8021980 <__sccl+0x1c>
 8021988:	b90b      	cbnz	r3, 802198e <__sccl+0x2a>
 802198a:	3801      	subs	r0, #1
 802198c:	bd70      	pop	{r4, r5, r6, pc}
 802198e:	f082 0101 	eor.w	r1, r2, #1
 8021992:	54e1      	strb	r1, [r4, r3]
 8021994:	1c42      	adds	r2, r0, #1
 8021996:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802199a:	2d2d      	cmp	r5, #45	; 0x2d
 802199c:	f102 36ff 	add.w	r6, r2, #4294967295
 80219a0:	4610      	mov	r0, r2
 80219a2:	d006      	beq.n	80219b2 <__sccl+0x4e>
 80219a4:	2d5d      	cmp	r5, #93	; 0x5d
 80219a6:	d0f1      	beq.n	802198c <__sccl+0x28>
 80219a8:	b90d      	cbnz	r5, 80219ae <__sccl+0x4a>
 80219aa:	4630      	mov	r0, r6
 80219ac:	e7ee      	b.n	802198c <__sccl+0x28>
 80219ae:	462b      	mov	r3, r5
 80219b0:	e7ef      	b.n	8021992 <__sccl+0x2e>
 80219b2:	7816      	ldrb	r6, [r2, #0]
 80219b4:	2e5d      	cmp	r6, #93	; 0x5d
 80219b6:	d0fa      	beq.n	80219ae <__sccl+0x4a>
 80219b8:	42b3      	cmp	r3, r6
 80219ba:	dcf8      	bgt.n	80219ae <__sccl+0x4a>
 80219bc:	4618      	mov	r0, r3
 80219be:	3001      	adds	r0, #1
 80219c0:	4286      	cmp	r6, r0
 80219c2:	5421      	strb	r1, [r4, r0]
 80219c4:	dcfb      	bgt.n	80219be <__sccl+0x5a>
 80219c6:	43d8      	mvns	r0, r3
 80219c8:	4430      	add	r0, r6
 80219ca:	1c5d      	adds	r5, r3, #1
 80219cc:	42b3      	cmp	r3, r6
 80219ce:	bfa8      	it	ge
 80219d0:	2000      	movge	r0, #0
 80219d2:	182b      	adds	r3, r5, r0
 80219d4:	3202      	adds	r2, #2
 80219d6:	e7de      	b.n	8021996 <__sccl+0x32>

080219d8 <_strtol_l.isra.0>:
 80219d8:	2b01      	cmp	r3, #1
 80219da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80219de:	d001      	beq.n	80219e4 <_strtol_l.isra.0+0xc>
 80219e0:	2b24      	cmp	r3, #36	; 0x24
 80219e2:	d906      	bls.n	80219f2 <_strtol_l.isra.0+0x1a>
 80219e4:	f7fc fbc2 	bl	801e16c <__errno>
 80219e8:	2316      	movs	r3, #22
 80219ea:	6003      	str	r3, [r0, #0]
 80219ec:	2000      	movs	r0, #0
 80219ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219f2:	4f3a      	ldr	r7, [pc, #232]	; (8021adc <_strtol_l.isra.0+0x104>)
 80219f4:	468e      	mov	lr, r1
 80219f6:	4676      	mov	r6, lr
 80219f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80219fc:	5de5      	ldrb	r5, [r4, r7]
 80219fe:	f015 0508 	ands.w	r5, r5, #8
 8021a02:	d1f8      	bne.n	80219f6 <_strtol_l.isra.0+0x1e>
 8021a04:	2c2d      	cmp	r4, #45	; 0x2d
 8021a06:	d134      	bne.n	8021a72 <_strtol_l.isra.0+0x9a>
 8021a08:	f89e 4000 	ldrb.w	r4, [lr]
 8021a0c:	f04f 0801 	mov.w	r8, #1
 8021a10:	f106 0e02 	add.w	lr, r6, #2
 8021a14:	2b00      	cmp	r3, #0
 8021a16:	d05c      	beq.n	8021ad2 <_strtol_l.isra.0+0xfa>
 8021a18:	2b10      	cmp	r3, #16
 8021a1a:	d10c      	bne.n	8021a36 <_strtol_l.isra.0+0x5e>
 8021a1c:	2c30      	cmp	r4, #48	; 0x30
 8021a1e:	d10a      	bne.n	8021a36 <_strtol_l.isra.0+0x5e>
 8021a20:	f89e 4000 	ldrb.w	r4, [lr]
 8021a24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021a28:	2c58      	cmp	r4, #88	; 0x58
 8021a2a:	d14d      	bne.n	8021ac8 <_strtol_l.isra.0+0xf0>
 8021a2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021a30:	2310      	movs	r3, #16
 8021a32:	f10e 0e02 	add.w	lr, lr, #2
 8021a36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021a3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021a3e:	2600      	movs	r6, #0
 8021a40:	fbbc f9f3 	udiv	r9, ip, r3
 8021a44:	4635      	mov	r5, r6
 8021a46:	fb03 ca19 	mls	sl, r3, r9, ip
 8021a4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021a4e:	2f09      	cmp	r7, #9
 8021a50:	d818      	bhi.n	8021a84 <_strtol_l.isra.0+0xac>
 8021a52:	463c      	mov	r4, r7
 8021a54:	42a3      	cmp	r3, r4
 8021a56:	dd24      	ble.n	8021aa2 <_strtol_l.isra.0+0xca>
 8021a58:	2e00      	cmp	r6, #0
 8021a5a:	db1f      	blt.n	8021a9c <_strtol_l.isra.0+0xc4>
 8021a5c:	45a9      	cmp	r9, r5
 8021a5e:	d31d      	bcc.n	8021a9c <_strtol_l.isra.0+0xc4>
 8021a60:	d101      	bne.n	8021a66 <_strtol_l.isra.0+0x8e>
 8021a62:	45a2      	cmp	sl, r4
 8021a64:	db1a      	blt.n	8021a9c <_strtol_l.isra.0+0xc4>
 8021a66:	fb05 4503 	mla	r5, r5, r3, r4
 8021a6a:	2601      	movs	r6, #1
 8021a6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021a70:	e7eb      	b.n	8021a4a <_strtol_l.isra.0+0x72>
 8021a72:	2c2b      	cmp	r4, #43	; 0x2b
 8021a74:	bf08      	it	eq
 8021a76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021a7a:	46a8      	mov	r8, r5
 8021a7c:	bf08      	it	eq
 8021a7e:	f106 0e02 	addeq.w	lr, r6, #2
 8021a82:	e7c7      	b.n	8021a14 <_strtol_l.isra.0+0x3c>
 8021a84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021a88:	2f19      	cmp	r7, #25
 8021a8a:	d801      	bhi.n	8021a90 <_strtol_l.isra.0+0xb8>
 8021a8c:	3c37      	subs	r4, #55	; 0x37
 8021a8e:	e7e1      	b.n	8021a54 <_strtol_l.isra.0+0x7c>
 8021a90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021a94:	2f19      	cmp	r7, #25
 8021a96:	d804      	bhi.n	8021aa2 <_strtol_l.isra.0+0xca>
 8021a98:	3c57      	subs	r4, #87	; 0x57
 8021a9a:	e7db      	b.n	8021a54 <_strtol_l.isra.0+0x7c>
 8021a9c:	f04f 36ff 	mov.w	r6, #4294967295
 8021aa0:	e7e4      	b.n	8021a6c <_strtol_l.isra.0+0x94>
 8021aa2:	2e00      	cmp	r6, #0
 8021aa4:	da05      	bge.n	8021ab2 <_strtol_l.isra.0+0xda>
 8021aa6:	2322      	movs	r3, #34	; 0x22
 8021aa8:	6003      	str	r3, [r0, #0]
 8021aaa:	4665      	mov	r5, ip
 8021aac:	b942      	cbnz	r2, 8021ac0 <_strtol_l.isra.0+0xe8>
 8021aae:	4628      	mov	r0, r5
 8021ab0:	e79d      	b.n	80219ee <_strtol_l.isra.0+0x16>
 8021ab2:	f1b8 0f00 	cmp.w	r8, #0
 8021ab6:	d000      	beq.n	8021aba <_strtol_l.isra.0+0xe2>
 8021ab8:	426d      	negs	r5, r5
 8021aba:	2a00      	cmp	r2, #0
 8021abc:	d0f7      	beq.n	8021aae <_strtol_l.isra.0+0xd6>
 8021abe:	b10e      	cbz	r6, 8021ac4 <_strtol_l.isra.0+0xec>
 8021ac0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8021ac4:	6011      	str	r1, [r2, #0]
 8021ac6:	e7f2      	b.n	8021aae <_strtol_l.isra.0+0xd6>
 8021ac8:	2430      	movs	r4, #48	; 0x30
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	d1b3      	bne.n	8021a36 <_strtol_l.isra.0+0x5e>
 8021ace:	2308      	movs	r3, #8
 8021ad0:	e7b1      	b.n	8021a36 <_strtol_l.isra.0+0x5e>
 8021ad2:	2c30      	cmp	r4, #48	; 0x30
 8021ad4:	d0a4      	beq.n	8021a20 <_strtol_l.isra.0+0x48>
 8021ad6:	230a      	movs	r3, #10
 8021ad8:	e7ad      	b.n	8021a36 <_strtol_l.isra.0+0x5e>
 8021ada:	bf00      	nop
 8021adc:	080275d5 	.word	0x080275d5

08021ae0 <_strtol_r>:
 8021ae0:	f7ff bf7a 	b.w	80219d8 <_strtol_l.isra.0>

08021ae4 <__submore>:
 8021ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ae8:	460c      	mov	r4, r1
 8021aea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021af0:	4299      	cmp	r1, r3
 8021af2:	d11d      	bne.n	8021b30 <__submore+0x4c>
 8021af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021af8:	f7fd f97e 	bl	801edf8 <_malloc_r>
 8021afc:	b918      	cbnz	r0, 8021b06 <__submore+0x22>
 8021afe:	f04f 30ff 	mov.w	r0, #4294967295
 8021b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021b0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8021b0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8021b10:	6360      	str	r0, [r4, #52]	; 0x34
 8021b12:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8021b16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8021b1a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021b1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8021b22:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8021b26:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021b2a:	6020      	str	r0, [r4, #0]
 8021b2c:	2000      	movs	r0, #0
 8021b2e:	e7e8      	b.n	8021b02 <__submore+0x1e>
 8021b30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8021b32:	0077      	lsls	r7, r6, #1
 8021b34:	463a      	mov	r2, r7
 8021b36:	f7fe fe77 	bl	8020828 <_realloc_r>
 8021b3a:	4605      	mov	r5, r0
 8021b3c:	2800      	cmp	r0, #0
 8021b3e:	d0de      	beq.n	8021afe <__submore+0x1a>
 8021b40:	eb00 0806 	add.w	r8, r0, r6
 8021b44:	4601      	mov	r1, r0
 8021b46:	4632      	mov	r2, r6
 8021b48:	4640      	mov	r0, r8
 8021b4a:	f7fd f8df 	bl	801ed0c <memcpy>
 8021b4e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8021b52:	f8c4 8000 	str.w	r8, [r4]
 8021b56:	e7e9      	b.n	8021b2c <__submore+0x48>

08021b58 <_init>:
 8021b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b5a:	bf00      	nop
 8021b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021b5e:	bc08      	pop	{r3}
 8021b60:	469e      	mov	lr, r3
 8021b62:	4770      	bx	lr

08021b64 <_fini>:
 8021b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b66:	bf00      	nop
 8021b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021b6a:	bc08      	pop	{r3}
 8021b6c:	469e      	mov	lr, r3
 8021b6e:	4770      	bx	lr

08021b70 <__time_veneer>:
 8021b70:	e51ff004 	ldr	pc, [pc, #-4]	; 8021b74 <__time_veneer+0x4>
 8021b74:	200005bc 	.word	0x200005bc
